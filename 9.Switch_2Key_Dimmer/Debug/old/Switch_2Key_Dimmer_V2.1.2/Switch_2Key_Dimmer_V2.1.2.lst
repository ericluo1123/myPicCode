

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Sep 15 11:19:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942                           
  1943                           	psect	idataBANK3
  1944  27BE                     __pidataBANK3:	
  1945                           
  1946                           ;initializer for _VarProduct
  1947  27BE  3463               	retlw	99
  1948  27BF  3402               	retlw	2
  1949  27C0  3400               	retlw	0
  1950  27C1  3400               	retlw	0
  1951  27C2  3400               	retlw	0
  1952  27C3  3400               	retlw	0
  1953  27C4  3400               	retlw	0
  1954  27C5  3400               	retlw	0
  1955  27C6  3400               	retlw	0
  1956  27C7  3400               	retlw	0
  1957  27C8  3400               	retlw	0
  1958  27C9  3400               	retlw	0
  1959  27CA  34FF               	retlw	255
  1960  27CB  34FF               	retlw	255
  1961  27CC  34FF               	retlw	255
  1962  27CD  3400               	retlw	0
  1963  27CE  3400               	retlw	0
  1964  27CF  3400               	retlw	0
  1965  27D0  3400               	retlw	0
  1966  27D1  3400               	retlw	0
  1967  27D2  3402               	retlw	2
  1968  27D3  3400               	retlw	0
  1969  27D4  3400               	retlw	0
  1970  27D5  3400               	retlw	0
  1971  27D6  3400               	retlw	0
  1972  27D7  3400               	retlw	0
  1973  27D8  3400               	retlw	0
  1974  27D9  3400               	retlw	0
  1975  27DA  3400               	retlw	0
  1976  27DB  3400               	retlw	0
  1977  27DC  3400               	retlw	0
  1978  27DD  3400               	retlw	0
  1979                           
  1980                           	psect	stringtext
  1981  1800                     __pstringtext:	
  1982  1800                     _CC2500_registers_address:	
  1983  1800  3403               	retlw	3
  1984  1801  3416               	retlw	22
  1985  1802  3417               	retlw	23
  1986  1803  341E               	retlw	30
  1987  1804  341F               	retlw	31
  1988  1805  3420               	retlw	32
  1989  1806  342A               	retlw	42
  1990  1807  342B               	retlw	43
  1991  1808  340B               	retlw	11
  1992  1809  340C               	retlw	12
  1993  180A  340D               	retlw	13
  1994  180B  340E               	retlw	14
  1995  180C  340F               	retlw	15
  1996  180D  3410               	retlw	16
  1997  180E  3411               	retlw	17
  1998  180F  3412               	retlw	18
  1999  1810  3413               	retlw	19
  2000  1811  3414               	retlw	20
  2001  1812  340A               	retlw	10
  2002  1813  3415               	retlw	21
  2003  1814  3421               	retlw	33
  2004  1815  3422               	retlw	34
  2005  1816  3418               	retlw	24
  2006  1817  3419               	retlw	25
  2007  1818  341A               	retlw	26
  2008  1819  341B               	retlw	27
  2009  181A  341C               	retlw	28
  2010  181B  341D               	retlw	29
  2011  181C  3423               	retlw	35
  2012  181D  3424               	retlw	36
  2013  181E  3425               	retlw	37
  2014  181F  3426               	retlw	38
  2015  1820  3429               	retlw	41
  2016  1821  342C               	retlw	44
  2017  1822  342D               	retlw	45
  2018  1823  342E               	retlw	46
  2019  1824  3400               	retlw	0
  2020  1825  3401               	retlw	1
  2021  1826  3402               	retlw	2
  2022  1827  3407               	retlw	7
  2023  1828  3408               	retlw	8
  2024  1829  3409               	retlw	9
  2025  182A  3406               	retlw	6
  2026  182B  3404               	retlw	4
  2027  182C  3405               	retlw	5
  2028  182D  3427               	retlw	39
  2029  182E  3428               	retlw	40
  2030  182F                     __end_of_CC2500_registers_address:	
  2031  182F                     _CC2500_rfSettings:	
  2032  182F  3407               	retlw	7
  2033  1830  3407               	retlw	7
  2034  1831  3430               	retlw	48
  2035  1832  3487               	retlw	135
  2036  1833  346B               	retlw	107
  2037  1834  34F8               	retlw	248
  2038  1835  347F               	retlw	127
  2039  1836  343F               	retlw	63
  2040  1837  3409               	retlw	9
  2041  1838  3400               	retlw	0
  2042  1839  345C               	retlw	92
  2043  183A  34A7               	retlw	167
  2044  183B  3462               	retlw	98
  2045  183C  3486               	retlw	134
  2046  183D  3483               	retlw	131
  2047  183E  3403               	retlw	3
  2048  183F  3422               	retlw	34
  2049  1840  34F8               	retlw	248
  2050  1841  3400               	retlw	0
  2051  1842  3444               	retlw	68
  2052  1843  34B6               	retlw	182
  2053  1844  3410               	retlw	16
  2054  1845  3418               	retlw	24
  2055  1846  341D               	retlw	29
  2056  1847  341C               	retlw	28
  2057  1848  34C7               	retlw	199
  2058  1849  3400               	retlw	0
  2059  184A  34B2               	retlw	178
  2060  184B  34EA               	retlw	234
  2061  184C  340A               	retlw	10
  2062  184D  3400               	retlw	0
  2063  184E  3411               	retlw	17
  2064  184F  3459               	retlw	89
  2065  1850  3488               	retlw	136
  2066  1851  3431               	retlw	49
  2067  1852  340B               	retlw	11
  2068  1853  342F               	retlw	47
  2069  1854  342E               	retlw	46
  2070  1855  3406               	retlw	6
  2071  1856  3404               	retlw	4
  2072  1857  3405               	retlw	5
  2073  1858  3400               	retlw	0
  2074  1859  3430               	retlw	48
  2075  185A  34D3               	retlw	211
  2076  185B  3491               	retlw	145
  2077  185C  3441               	retlw	65
  2078  185D  3400               	retlw	0
  2079  185E                     __end_of_CC2500_rfSettings:	
  2080  185E                     _CC2500_patable_vaule:	
  2081  185E  34FE               	retlw	254
  2082  185F  34FE               	retlw	254
  2083  1860  34FE               	retlw	254
  2084  1861  34FE               	retlw	254
  2085  1862  34FE               	retlw	254
  2086  1863  34FE               	retlw	254
  2087  1864  34FE               	retlw	254
  2088  1865  34FE               	retlw	254
  2089  1866                     __end_of_CC2500_patable_vaule:	
  2090                           
  2091                           	psect	nvBANK0
  2092  006F                     __pnvBANK0:	
  2093  006F                     _Product:	
  2094  006F                     	ds	1
  2095                           
  2096                           	psect	nvBANK1
  2097  00E8                     __pnvBANK1:	
  2098  00E8                     _Memory:	
  2099  00E8                     	ds	1
  2100  00E9                     _TMain:	
  2101  00E9                     	ds	1
  2102  00EA                     _Timer0:	
  2103  00EA                     	ds	1
  2104  000C                     _PORTA	set	12
  2105  000D                     _PORTB	set	13
  2106  000E                     _PORTC	set	14
  2107  0015                     _TMR0	set	21
  2108  005F                     _GIE	set	95
  2109  005C                     _INTE	set	92
  2110  0059                     _INTF	set	89
  2111  005B                     _IOCIE	set	91
  2112  0058                     _IOCIF	set	88
  2113  005E                     _PEIE	set	94
  2114  0060                     _RA0	set	96
  2115  0063                     _RA3	set	99
  2116  0064                     _RA4	set	100
  2117  0066                     _RA6	set	102
  2118  0067                     _RA7	set	103
  2119  0068                     _RB0	set	104
  2120  0069                     _RB1	set	105
  2121  006A                     _RB2	set	106
  2122  006B                     _RB3	set	107
  2123  006C                     _RB4	set	108
  2124  006D                     _RB5	set	109
  2125  0070                     _RC0	set	112
  2126  0071                     _RC1	set	113
  2127  0072                     _RC2	set	114
  2128  0074                     _RC4	set	116
  2129  0075                     _RC5	set	117
  2130  0077                     _RC7	set	119
  2131  005D                     _TMR0IE	set	93
  2132  005A                     _TMR0IF	set	90
  2133  009D                     _ADCON0	set	157
  2134  009E                     _ADCON1	set	158
  2135  009C                     _ADRESH	set	156
  2136  009B                     _ADRESL	set	155
  2137  0095                     _OPTION_REG	set	149
  2138  0099                     _OSCCON	set	153
  2139  008C                     _TRISA	set	140
  2140  008D                     _TRISB	set	141
  2141  008E                     _TRISC	set	142
  2142  04E9                     _GO_nDONE	set	1257
  2143  0117                     _FVRCON	set	279
  2144  010C                     _LATA	set	268
  2145  010D                     _LATB	set	269
  2146  010E                     _LATC	set	270
  2147  018C                     _ANSELA	set	396
  2148  018D                     _ANSELB	set	397
  2149  018E                     _ANSELC	set	398
  2150  0192                     _PMADRH	set	402
  2151  0191                     _PMADRL	set	401
  2152  0196                     _PMCON2	set	406
  2153  0194                     _PMDATH	set	404
  2154  0193                     _PMDATL	set	403
  2155  0CAE                     _CFGS	set	3246
  2156  0CAC                     _FREE	set	3244
  2157  0CAD                     _LWLO	set	3245
  2158  0CA8                     _RD	set	3240
  2159  0CA9                     _WR	set	3241
  2160  0CAA                     _WREN	set	3242
  2161  1068                     _WPUB0	set	4200
  2162  1069                     _WPUB1	set	4201
  2163  106A                     _WPUB2	set	4202
  2164  0396                     _IOCBF	set	918
  2165  0395                     _IOCBN	set	917
  2166  0394                     _IOCBP	set	916
  2167  1CB2                     _IOCBF2	set	7346
  2168                           
  2169                           ; #config settings
  2170  0000                     
  2171                           	psect	cinit
  2172  0018                     start_initialization:	
  2173  0018                     __initialization:	
  2174                           
  2175                           ; Clear objects allocated to BITCOMMON
  2176  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2177                           
  2178                           ; Clear objects allocated to COMMON
  2179  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2180  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2181  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2182  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2183  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2184  001E  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  2185                           
  2186                           ; Clear objects allocated to BANK0
  2187  001F  01EC               	clrf	__pbssBANK0& (0+127)
  2188  0020  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2189  0021  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2190                           
  2191                           ; Clear objects allocated to BANK1
  2192  0022  30A0               	movlw	low __pbssBANK1
  2193  0023  0084               	movwf	4
  2194  0024  3000               	movlw	high __pbssBANK1
  2195  0025  0085               	movwf	5
  2196  0026  3048               	movlw	72
  2197  0027  31A3  23C1  3180   	fcall	clear_ram0
  2198                           
  2199                           ; Clear objects allocated to BANK2
  2200  002A  3020               	movlw	low __pbssBANK2
  2201  002B  0084               	movwf	4
  2202  002C  3001               	movlw	high __pbssBANK2
  2203  002D  0085               	movwf	5
  2204  002E  304E               	movlw	78
  2205  002F  31A3  23C1  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK3
  2208  0032  30C0               	movlw	low __pbssBANK3
  2209  0033  0084               	movwf	4
  2210  0034  3001               	movlw	high __pbssBANK3
  2211  0035  0085               	movwf	5
  2212  0036  3010               	movlw	16
  2213  0037  31A3  23C1  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Clear objects allocated to BANK4
  2216  003A  3020               	movlw	low __pbssBANK4
  2217  003B  0084               	movwf	4
  2218  003C  3002               	movlw	high __pbssBANK4
  2219  003D  0085               	movwf	5
  2220  003E  3025               	movlw	37
  2221  003F  31A3  23C1  3180   	fcall	clear_ram0
  2222                           
  2223                           ; Clear objects allocated to BANK5
  2224  0042  30A0               	movlw	low __pbssBANK5
  2225  0043  0084               	movwf	4
  2226  0044  3002               	movlw	high __pbssBANK5
  2227  0045  0085               	movwf	5
  2228  0046  3047               	movlw	71
  2229  0047  31A3  23C1  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Initialize objects allocated to BANK3
  2232  004A  30BE               	movlw	low __pidataBANK3
  2233  004B  0084               	movwf	4
  2234  004C  30A7               	movlw	(high __pidataBANK3)| (0+128)
  2235  004D  0085               	movwf	5
  2236  004E  30A0               	movlw	low __pdataBANK3
  2237  004F  0086               	movwf	6
  2238  0050  3001               	movlw	high __pdataBANK3
  2239  0051  0087               	movwf	7
  2240  0052  3020               	movlw	32
  2241  0053  31A3  23BB         	fcall	init_ram
  2242  0055                     end_of_initialization:	
  2243                           ;End of C runtime variable initialization code
  2244                           
  2245  0055                     __end_of__initialization:	
  2246  0055  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2247  0056  0020               	movlb	0
  2248  0057  3192  2A6E         	ljmp	_main	;jump to C main() function
  2249                           
  2250                           	psect	bitbssCOMMON
  2251  0380                     __pbitbssCOMMON:	
  2252  0380                     _CC2500_Enable:	
  2253  0380                     	ds	1
  2254  0381                     _Receive_GO:	
  2255  0381                     	ds	1
  2256  0382                     _Receive_OK:	
  2257  0382                     	ds	1
  2258  0383                     _RxStatus:	
  2259  0383                     	ds	1
  2260  0384                     _Transceive_GO:	
  2261  0384                     	ds	1
  2262  0385                     _Transceive_OK:	
  2263  0385                     	ds	1
  2264  0386                     _TxStatus:	
  2265  0386                     	ds	1
  2266                           
  2267                           	psect	bssCOMMON
  2268  0078                     __pbssCOMMON:	
  2269  0078                     _Buz:	
  2270  0078                     	ds	1
  2271  0079                     _DimmerLights11:	
  2272  0079                     	ds	1
  2273  007A                     _DimmerLights22:	
  2274  007A                     	ds	1
  2275  007B                     _PF:	
  2276  007B                     	ds	1
  2277  007C                     _RF:	
  2278  007C                     	ds	1
  2279  007D                     _Temp:	
  2280  007D                     	ds	1
  2281                           
  2282                           	psect	bssBANK0
  2283  006C                     __pbssBANK0:	
  2284  006C                     _DimmerLights:	
  2285  006C                     	ds	1
  2286  006D                     _Sw:	
  2287  006D                     	ds	1
  2288  006E                     _Load:	
  2289  006E                     	ds	1
  2290                           
  2291                           	psect	bssBANK1
  2292  00A0                     __pbssBANK1:	
  2293  00A0                     _RF_Data:	
  2294  00A0                     	ds	21
  2295  00B5                     _RF_Count:	
  2296  00B5                     	ds	2
  2297  00B7                     _CRC:	
  2298  00B7                     	ds	1
  2299  00B8                     _DelayOff:	
  2300  00B8                     	ds	1
  2301  00B9                     _Dimmer:	
  2302  00B9                     	ds	1
  2303  00BA                     _DimmerLightsIntr:	
  2304  00BA                     	ds	1
  2305  00BB                     _LED:	
  2306  00BB                     	ds	1
  2307  00BC                     _RFSW:	
  2308  00BC                     	ds	1
  2309  00BD                     _RSSI:	
  2310  00BD                     	ds	1
  2311  00BE                     _Rx_Length:	
  2312  00BE                     	ds	1
  2313  00BF                     _SPI0Buffer:	
  2314  00BF                     	ds	1
  2315  00C0                     _Tx_Length:	
  2316  00C0                     	ds	1
  2317  00C1                     _r_address:	
  2318  00C1                     	ds	1
  2319  00C2                     _r_data:	
  2320  00C2                     	ds	1
  2321  00C3                     _s_data:	
  2322  00C3                     	ds	1
  2323  00C4                     _VarTimer0:	
  2324  00C4                     	ds	7
  2325  00CB                     _DlySw1:	
  2326  00CB                     	ds	5
  2327  00D0                     _DlySw2:	
  2328  00D0                     	ds	5
  2329  00D5                     _VarErrLED:	
  2330  00D5                     	ds	4
  2331  00D9                     _VarLED1:	
  2332  00D9                     	ds	4
  2333  00DD                     _VarLED2:	
  2334  00DD                     	ds	4
  2335  00E1                     _Dimmer1:	
  2336  00E1                     	ds	3
  2337  00E4                     _RF1:	
  2338  00E4                     	ds	2
  2339  00E6                     _RFSW1:	
  2340  00E6                     	ds	1
  2341  00E7                     _RFSW2:	
  2342  00E7                     	ds	1
  2343                           
  2344                           	psect	bssBANK2
  2345  0120                     __pbssBANK2:	
  2346  0120                     _Temp1:	
  2347  0120                     	ds	14
  2348  012E                     _DimmerLights1:	
  2349  012E                     	ds	13
  2350  013B                     _DimmerLights2:	
  2351  013B                     	ds	13
  2352  0148                     _Buz1:	
  2353  0148                     	ds	12
  2354  0154                     _Sw1:	
  2355  0154                     	ds	9
  2356  015D                     _Sw2:	
  2357  015D                     	ds	9
  2358  0166                     _PF1:	
  2359  0166                     	ds	8
  2360                           
  2361                           	psect	bssBANK3
  2362  01C0                     __pbssBANK3:	
  2363  01C0                     _VarTMain:	
  2364  01C0                     	ds	16
  2365                           
  2366                           	psect	dataBANK3
  2367  01A0                     __pdataBANK3:	
  2368  01A0                     _VarProduct:	
  2369  01A0                     	ds	32
  2370                           
  2371                           	psect	bssBANK4
  2372  0220                     __pbssBANK4:	
  2373  0220                     _VarMemory:	
  2374  0220                     	ds	37
  2375                           
  2376                           	psect	bssBANK5
  2377  02A0                     __pbssBANK5:	
  2378  02A0                     _Load1:	
  2379  02A0                     	ds	71
  2380                           
  2381                           	psect	clrtext
  2382  23C1                     clear_ram0:	
  2383                           ;	Called with FSR0 containing the base address, and
  2384                           ;	WREG with the size to clear
  2385                           
  2386  23C1  0064               	clrwdt	;clear the watchdog before getting into this loop
  2387  23C2                     clrloop0:	
  2388  23C2  0180               	clrf	0	;clear RAM location pointed to by FSR
  2389  23C3  3101               	addfsr 0,1
  2390  23C4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2391  23C5  2BC2               	goto	clrloop0	;have we reached the end yet?
  2392  23C6  3400               	retlw	0	;all done for this memory range, return
  2393                           
  2394                           	psect	inittext
  2395  23BB                     init_ram:	
  2396  23BB  00FE               	movwf	126
  2397  23BC                     initloop:	
  2398  23BC  0012               	moviw fsr0++
  2399  23BD  001E               	movwi fsr1++
  2400  23BE  0BFE               	decfsz	126,f
  2401  23BF  2BBC               	goto	initloop
  2402  23C0  3400               	retlw	0
  2403                           
  2404                           	psect	cstackCOMMON
  2405  0071                     __pcstackCOMMON:	
  2406  0071                     ?_CC2500_WriteByte:	
  2407  0071                     ?_CC2500_WriteCommand:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0071                     ?_CC2500_ReadStatus:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0071                     ?_CC2500_ReadByte:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0071                     ?_CC2500_PowerRST:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0071                     ?_CC2500_InitSetREG:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0071                     ?_CC2500_InitPATable:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0071                     ?_CC2500_ClearTXFIFO:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0071                     ?_CC2500_ClearRXFIFO:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0071                     ?_CC2500_FrequencyCabr:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0071                     ?_CC2500_SIDLEMode:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0071                     ?_DlyOff_Initialization:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0071                     ?_DlyOff_Main:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0071                     ?_setTxData:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0071                     ?_setDimmerLights_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0071                     ?_Dimmer_Initialization:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0071                     ?_setLoad_GO:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0071                     ?_setDimmerLights_Main:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0071                     ?_setDimmerLights_ERROR:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0071                     ?_setLoad_Count:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0071                     ?_setLED_Initialization:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0071                     ?_setLED_Main:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0071                     ?_MainT_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0071                     ?_Mcu_Initialization:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0071                     ?_Flash_Memory_Initialization:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0071                     ?_Temp_Initialization:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0071                     ?_Load_Initialization:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0071                     ?_PowerFault_Initialization:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0071                     ?_Switch_Initialization:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0071                     ?_RF_Initialization:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0071                     ?_getLoad_AD:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0071                     ?_getTemp_AD:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0071                     ?_getPowerFault_AD:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0071                     ?_MainT:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0071                     ?_Flash_Memory_Main:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0071                     ?_Temp_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0071                     ?_Load_Main:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0071                     ?_PowerFault_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0071                     ?_Switch_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0071                     ?_RF_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0071                     ?_setTemp_Enable:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0071                     ?_setLoad_Enable:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0071                     ?_setSw_Enable:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0071                     ?_IO_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0071                     ?_TMR0_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0071                     ?_ADC_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0071                     ?_INT_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0071                     ?_IOC_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0071                     ?_IOC_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0071                     ??_IOC_ISR:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0071                     ?_TMR0_ISR:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0071                     ?_INT_ISR:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0071                     ?_Flash_Memory_Write:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0071                     ?_Flash_Memory_Modify:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0071                     ?_setLoad_AH_AL_Restore:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0071                     ?_setLoad_Exceptions:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0071                     ?_setTemp_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0071                     ?_setTemp_Main:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0071                     ?_setOverTemp_Exceptions:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0071                     ?_setPowerFault_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0071                     ?_setPowerFault_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0071                     ?_setPowerFault_Exceptions:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0071                     ?_setRF_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0071                     ?_setRF_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0071                     ?_getRxData:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0071                     ?_RF_RxDisable:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0071                     ?_setLog_Code:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0071                     ?_setControl_Lights_Table:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0071                     ?_setRFSW_Control:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0071                     ?_setRFSW_AdjControl:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0071                     ?_setRF_DimmerValue:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0071                     ?_setSw_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0071                     ?_setSw_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0071                     ?_Sw_DimmerOnFunc:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0071                     ?_Sw_DimmerAdjFunc:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0071                     ?_Sw_DimmerOffFunc:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0071                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0071                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0071                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0071                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0071                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0071                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0071                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0071                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0071                     ?_DimmerLightsPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0071                     ?_DimmerLights_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0071                     ?_DimmerLights_Close:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0071                     ?_DimmerLights_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0071                     ?_DimmerLights_Exceptions:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0071                     ?_setDimmerLights_AdjRF:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0071                     ?_LedPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0071                     ?_LED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0071                     ?_LED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0071                     ?_main:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0071                     ?_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0071                     ?_setDimmerReClock:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0071                     ??_setDimmerReClock:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0071                     ?_setINT_GO:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0071                     ?_Flash_Memory_Unlock:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0071                     ?_Flash_Memory_Erasing:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0071                     ?_RfPointSelect:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0071                     ?_RfSWPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0071                     ?_TouchPower:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0071                     ?_SwPointSelect:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0071                     ?i1_setLoad_StatusOff:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0071                     ?i1_RfPointSelect:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0071                     ??i1_RfPointSelect:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0071                     ?_DelayTimejudge:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0071                     ?_getDimmerLights_StatusFlag:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0071                     ?_getPercentValue:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0071                     ?_Flash_Memory_Read:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0071                     ?_getTemp_Safe:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0071                     ?_getPF_Safe:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0071                     ?_setPercentValue:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0071                     ?_getLoad_Safe:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0071                     setRF_Initialization@rf:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0071                     i1setLoad_StatusOff@command:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0x0
  2757  0071                     	ds	1
  2758  0072                     ??i1_setLoad_StatusOff:	
  2759  0072                     i1setLoad_StatusOff@lights:	
  2760                           ; 0 bytes @ 0x1
  2761                           
  2762  0072                     i1RfPointSelect@rf:	
  2763                           ; 1 bytes @ 0x1
  2764                           
  2765                           
  2766                           ; 1 bytes @ 0x1
  2767  0072                     	ds	1
  2768  0073                     ??_TMR0_ISR:	
  2769  0073                     ?_setRF_ReceiveGO:	
  2770                           ; 0 bytes @ 0x2
  2771                           
  2772  0073                     setRF_ReceiveGO@command:	
  2773                           ; 0 bytes @ 0x2
  2774                           
  2775                           
  2776                           ; 1 bytes @ 0x2
  2777  0073                     	ds	1
  2778  0074                     ??_setRF_ReceiveGO:	
  2779  0074                     setRF_ReceiveGO@rf:	
  2780                           ; 0 bytes @ 0x3
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x3
  2784  0074                     	ds	1
  2785  0075                     ??_INT_ISR:	
  2786                           
  2787                           ; 0 bytes @ 0x4
  2788  0075                     	ds	2
  2789  0077                     ??_ISR:	
  2790                           
  2791                           ; 0 bytes @ 0x6
  2792  0077                     	ds	1
  2793                           
  2794                           	psect	cstackBANK0
  2795  0020                     __pcstackBANK0:	
  2796  0020                     ??_CC2500_WriteByte:	
  2797  0020                     ??_CC2500_ReadByte:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ?_DelayTime_1us:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ?_setRF_DimmerLights:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_DelayTimejudge:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Dimmer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_getDimmerLights_StatusFlag:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_setLoad_GO:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ?_setLoad_StatusOff:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_setLoad_Count:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ?_setLoad_StatusOn:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_MainT_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_setTemp_Enable:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_setLoad_Enable:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_IO_Set:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_TMR0_Set:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_ADC_Set:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_INT_Set:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_IOC_Set:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Flash_Memory_Read:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_Flash_Memory_Write:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_setLoad_AH_AL_Restore:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_getTemp_Safe:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_getPF_Safe:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_setTemp_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_setPowerFault_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_setRF_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Buzzer_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_Buzzer_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_DelayOffPointSelect:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_DimmerLightsPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_LedPointSelect:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setINT_GO:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Unlock:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_Flash_Memory_Erasing:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_getLoad_Safe:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_RfPointSelect:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_RfSWPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_TouchPower:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_SwPointSelect:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ?_getAD:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ?___wmul:	
  2918                           ; 2 bytes @ 0x0
  2919                           
  2920  0020                     ?___lwdiv:	
  2921                           ; 2 bytes @ 0x0
  2922                           
  2923  0020                     ?___ftpack:	
  2924                           ; 2 bytes @ 0x0
  2925                           
  2926  0020                     setINT_GO@command:	
  2927                           ; 3 bytes @ 0x0
  2928                           
  2929  0020                     getAD@adcon1:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     setLoad_Enable@command:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0020                     setLoad_GO@command:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0020                     setLoad_StatusOn@command:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0020                     setLoad_StatusOff@command:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0020                     setTemp_Enable@command:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0020                     setRF_DimmerLights@on:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0020                     DelayTime_1us@count:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0020                     ___wmul@multiplier:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     ___lwdiv@divisor:	
  2957                           ; 2 bytes @ 0x0
  2958                           
  2959  0020                     ___ftpack@arg:	
  2960                           ; 2 bytes @ 0x0
  2961                           
  2962                           
  2963                           ; 3 bytes @ 0x0
  2964  0020                     	ds	1
  2965  0021                     ??_setRF_DimmerLights:	
  2966  0021                     ??_setLoad_StatusOff:	
  2967                           ; 0 bytes @ 0x1
  2968                           
  2969  0021                     ??_setLoad_StatusOn:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972  0021                     ??_Mcu_Initialization:	
  2973                           ; 0 bytes @ 0x1
  2974                           
  2975  0021                     ??_Temp_Initialization:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978  0021                     ??_PowerFault_Initialization:	
  2979                           ; 0 bytes @ 0x1
  2980                           
  2981  0021                     ??_RF_Initialization:	
  2982                           ; 0 bytes @ 0x1
  2983                           
  2984  0021                     CC2500_WriteByte@loop_a:	
  2985                           ; 0 bytes @ 0x1
  2986                           
  2987  0021                     CC2500_ReadByte@loop_b:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0021                     DelayOffPointSelect@sw:	
  2991                           ; 1 bytes @ 0x1
  2992                           
  2993  0021                     DelayTimejudge@i:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     DimmerLightsPointSelect@lights:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     getDimmerLights_StatusFlag@Status:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     LedPointSelect@led:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     Flash_Memory_Read@i:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     Flash_Memory_Write@i:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     setLoad_Count@command:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     setLoad_StatusOn@lights:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     setLoad_StatusOff@lights:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     setLoad_AH_AL_Restore@i:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     RfPointSelect@rf:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     RfSWPointSelect@sw:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     SwPointSelect@sw:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032                           
  3033                           ; 1 bytes @ 0x1
  3034  0021                     	ds	1
  3035  0022                     ??_CC2500_WriteCommand:	
  3036  0022                     ??_CC2500_ReadStatus:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ?_setRF_RxStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ??_DelayTime_1us:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_CC2500_WriteREG:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ??_DlyOff_Initialization:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setSw_Status:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ?_setRFSW_Status:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_setDimmerLights_Trigger:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setDimmerLights_Switch:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ??_setTxData:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_setDimmerLights_Initialization:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_setDimmerLights_TriggerERROR:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ?_setLED:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_setLED_Main:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ??_Load_Initialization:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ??_setSw_Enable:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setRF_Enable:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ?_setDimmerLights_AdjGo:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ?_setDimmerLights_TriggerAdj:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     ?_setDimmerLights_Clear:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     ?_setRF_Learn:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     CC2500_WriteREG@value:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     DlyOff_Initialization@sw:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     DelayTimejudge@value:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     _getDimmerLights_StatusFlag$1814:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setDimmerLights_TriggerERROR@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setDimmerLights_Switch@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setDimmerLights_AdjGo@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setDimmerLights_Trigger@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setDimmerLights_TriggerAdj@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setDimmerLights_Clear@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setLED@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     Flash_Memory_Read@address:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setRF_Learn@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setRF_RxStatus@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setRF_Enable@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     setRFSW_Status@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     setSw_Enable@command:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setSw_Status@command:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     DelayTime_1us@i:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     ___wmul@multiplicand:	
  3157                           ; 2 bytes @ 0x2
  3158                           
  3159  0022                     ___lwdiv@dividend:	
  3160                           ; 2 bytes @ 0x2
  3161                           
  3162                           
  3163                           ; 2 bytes @ 0x2
  3164  0022                     	ds	1
  3165  0023                     ??_setRF_RxStatus:	
  3166  0023                     ??_CC2500_WriteREG:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setSw_Status:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_setRFSW_Status:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setDimmerLights_Trigger:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_setDimmerLights_Switch:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_setDimmerLights_TriggerERROR:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_setLED:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_setRF_Enable:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_DelayOff_Initialization:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ?_setDelayOff_GO:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_DimmerLights_Close:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_setDimmerLights_AdjGo:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     ??_setDimmerLights_TriggerAdj:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     ??_setDimmerLights_Clear:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0023                     ??_getAD:	
  3209                           ; 0 bytes @ 0x3
  3210                           
  3211  0023                     ??_setRF_Learn:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0023                     CC2500_WriteCommand@command:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0023                     CC2500_ReadStatus@status_addr:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     setDelayOff_GO@command:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setDimmerLights_Initialization@lights:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     setDimmerLights_TriggerERROR@lights:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setDimmerLights_Switch@lights:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     setDimmerLights_AdjGo@lights:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     setDimmerLights_Trigger@lights:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setDimmerLights_TriggerAdj@lights:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setDimmerLights_Clear@lights:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setLED@led:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     getAD@adcon0:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     Flash_Memory_Read@ret:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setRF_Learn@rf:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     setRF_RxStatus@rf:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     setTxData@rf:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     setRF_Enable@rf:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0023                     setRFSW_Status@sw:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0023                     setRF_DimmerLights@status:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0023                     setSw_Status@sw:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0023                     ___ftpack@exp:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277                           
  3278                           ; 1 bytes @ 0x3
  3279  0023                     	ds	1
  3280  0024                     ??_CC2500_ClearTXFIFO:	
  3281  0024                     ??_CC2500_ClearRXFIFO:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_CC2500_SIDLEMode:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ?_setDimmerLights:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_setDimmerLights_ERROR:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_setLED_Initialization:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_getLoad_AD:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_getTemp_AD:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_getPowerFault_AD:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_Flash_Memory_Modify:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_RF_RxDisable:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??_setSw_Initialization:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     ??_Sw_DimmerAdjFunc:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     ??_CC2500_TxData:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0024                     ??_CC2500_RxData:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0024                     ??_DimmerLights_Initialization:	
  3324                           ; 0 bytes @ 0x4
  3325                           
  3326  0024                     ??___wmul:	
  3327                           ; 0 bytes @ 0x4
  3328                           
  3329  0024                     ??___lwdiv:	
  3330                           ; 0 bytes @ 0x4
  3331                           
  3332  0024                     CC2500_WriteREG@w_addr:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0024                     setDelayOff_GO@value:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     setDimmerLights@status:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     setLED_Initialization@led:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     setLED_Main@led:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0024                     RF_RxDisable@rf:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0024                     setRF_DimmerLights@lights:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0024                     setSw_Initialization@sw:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0024                     Sw_DimmerAdjFunc@sw:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359  0024                     ___ftpack@sign:	
  3360                           ; 1 bytes @ 0x4
  3361                           
  3362  0024                     DelayTime_1us@j:	
  3363                           ; 1 bytes @ 0x4
  3364                           
  3365  0024                     ___wmul@product:	
  3366                           ; 2 bytes @ 0x4
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x4
  3370  0024                     	ds	1
  3371  0025                     ??_CC2500_InitSetREG:	
  3372  0025                     ??_CC2500_InitPATable:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     ??_setDimmerLights:	
  3376                           ; 0 bytes @ 0x5
  3377                           
  3378  0025                     ?_setDimmerLights_Adj:	
  3379                           ; 0 bytes @ 0x5
  3380                           
  3381  0025                     ??_Switch_Initialization:	
  3382                           ; 0 bytes @ 0x5
  3383                           
  3384  0025                     ??___ftpack:	
  3385                           ; 0 bytes @ 0x5
  3386                           
  3387  0025                     ??_setDelayOff_GO:	
  3388                           ; 0 bytes @ 0x5
  3389                           
  3390  0025                     ??_LED_Initialization:	
  3391                           ; 0 bytes @ 0x5
  3392                           
  3393  0025                     ??_LED_Main:	
  3394                           ; 0 bytes @ 0x5
  3395                           
  3396  0025                     CC2500_TxData@loop_e:	
  3397                           ; 0 bytes @ 0x5
  3398                           
  3399  0025                     CC2500_RxData@loop_f:	
  3400                           ; 1 bytes @ 0x5
  3401                           
  3402  0025                     setDimmerLights_ERROR@lights:	
  3403                           ; 1 bytes @ 0x5
  3404                           
  3405  0025                     setDimmerLights_Adj@status:	
  3406                           ; 1 bytes @ 0x5
  3407                           
  3408  0025                     ___lwdiv@quotient:	
  3409                           ; 1 bytes @ 0x5
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x5
  3413  0025                     	ds	1
  3414  0026                     ??_CC2500_PowerRST:	
  3415  0026                     ??_CC2500_FrequencyCabr:	
  3416                           ; 0 bytes @ 0x6
  3417                           
  3418  0026                     ??_setDimmerLights_Adj:	
  3419                           ; 0 bytes @ 0x6
  3420                           
  3421  0026                     ?_setBuz:	
  3422                           ; 0 bytes @ 0x6
  3423                           
  3424  0026                     CC2500_InitSetREG@temp1:	
  3425                           ; 0 bytes @ 0x6
  3426                           
  3427  0026                     CC2500_InitPATable@temp:	
  3428                           ; 1 bytes @ 0x6
  3429                           
  3430  0026                     setDimmerLights@lights:	
  3431                           ; 1 bytes @ 0x6
  3432                           
  3433  0026                     Flash_Memory_Modify@i:	
  3434                           ; 1 bytes @ 0x6
  3435                           
  3436  0026                     setBuz@time:	
  3437                           ; 1 bytes @ 0x6
  3438                           
  3439                           
  3440                           ; 2 bytes @ 0x6
  3441  0026                     	ds	1
  3442  0027                     ??_Flash_Memory_Main:	
  3443  0027                     CC2500_InitSetREG@temp2:	
  3444                           ; 0 bytes @ 0x7
  3445                           
  3446  0027                     CC2500_InitPATable@loop_d:	
  3447                           ; 1 bytes @ 0x7
  3448                           
  3449  0027                     setDelayOff_GO@sw:	
  3450                           ; 1 bytes @ 0x7
  3451                           
  3452  0027                     setDimmerLights_Adj@lights:	
  3453                           ; 1 bytes @ 0x7
  3454                           
  3455  0027                     ___lwdiv@counter:	
  3456                           ; 1 bytes @ 0x7
  3457                           
  3458                           
  3459                           ; 1 bytes @ 0x7
  3460  0027                     	ds	1
  3461  0028                     ??_Sw_DimmerOffFunc:	
  3462  0028                     ??_setBuz:	
  3463                           ; 0 bytes @ 0x8
  3464                           
  3465  0028                     ?___awtoft:	
  3466                           ; 0 bytes @ 0x8
  3467                           
  3468  0028                     CC2500_InitSetREG@loop_c:	
  3469                           ; 3 bytes @ 0x8
  3470                           
  3471  0028                     getTemp_AD@channel:	
  3472                           ; 1 bytes @ 0x8
  3473                           
  3474  0028                     getPowerFault_AD@channel:	
  3475                           ; 1 bytes @ 0x8
  3476                           
  3477  0028                     ___awtoft@c:	
  3478                           ; 1 bytes @ 0x8
  3479                           
  3480                           
  3481                           ; 2 bytes @ 0x8
  3482  0028                     	ds	1
  3483  0029                     ??_CC2500_PowerOnInitial:	
  3484  0029                     setBuz@count:	
  3485                           ; 0 bytes @ 0x9
  3486                           
  3487  0029                     getLoad_AD@channel:	
  3488                           ; 1 bytes @ 0x9
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0x9
  3492  0029                     	ds	1
  3493  002A                     ??_DlyOff_Main:	
  3494  002A                     ??_setDimmerLights_Main:	
  3495                           ; 0 bytes @ 0xA
  3496                           
  3497  002A                     ??_MainT:	
  3498                           ; 0 bytes @ 0xA
  3499                           
  3500  002A                     ??_setLog_Code:	
  3501                           ; 0 bytes @ 0xA
  3502                           
  3503  002A                     ??_setRFSW_Control:	
  3504                           ; 0 bytes @ 0xA
  3505                           
  3506  002A                     ??_Sw_DimmerOnFunc:	
  3507                           ; 0 bytes @ 0xA
  3508                           
  3509  002A                     ??_DimmerLights_Exceptions:	
  3510                           ; 0 bytes @ 0xA
  3511                           
  3512  002A                     setDimmerLights_Main@clear:	
  3513                           ; 0 bytes @ 0xA
  3514                           
  3515  002A                     DimmerLights_Exceptions@status:	
  3516                           ; 1 bytes @ 0xA
  3517                           
  3518  002A                     getLoad_AD@j:	
  3519                           ; 1 bytes @ 0xA
  3520                           
  3521  002A                     Sw_DimmerOnFunc@Idle:	
  3522                           ; 1 bytes @ 0xA
  3523                           
  3524  002A                     Sw_DimmerOffFunc@sw:	
  3525                           ; 1 bytes @ 0xA
  3526                           
  3527                           
  3528                           ; 1 bytes @ 0xA
  3529  002A                     	ds	1
  3530  002B                     ??_setLoad_Exceptions:	
  3531  002B                     ??_setOverTemp_Exceptions:	
  3532                           ; 0 bytes @ 0xB
  3533                           
  3534  002B                     ??_setPowerFault_Exceptions:	
  3535                           ; 0 bytes @ 0xB
  3536                           
  3537  002B                     ??___awtoft:	
  3538                           ; 0 bytes @ 0xB
  3539                           
  3540  002B                     setDimmerLights_Main@lights:	
  3541                           ; 0 bytes @ 0xB
  3542                           
  3543  002B                     getLoad_AD@i:	
  3544                           ; 1 bytes @ 0xB
  3545                           
  3546  002B                     setLog_Code@rf:	
  3547                           ; 1 bytes @ 0xB
  3548                           
  3549  002B                     setRFSW_Control@sw:	
  3550                           ; 1 bytes @ 0xB
  3551                           
  3552  002B                     Sw_DimmerOnFunc@sw:	
  3553                           ; 1 bytes @ 0xB
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0xB
  3557  002B                     	ds	1
  3558  002C                     ??_setSw_Main:	
  3559  002C                     ??_DimmerLights_Main:	
  3560                           ; 0 bytes @ 0xC
  3561                           
  3562  002C                     DlyOff_Main@sw:	
  3563                           ; 0 bytes @ 0xC
  3564                           
  3565  002C                     setLoad_Exceptions@command:	
  3566                           ; 1 bytes @ 0xC
  3567                           
  3568  002C                     setOverTemp_Exceptions@command:	
  3569                           ; 1 bytes @ 0xC
  3570                           
  3571  002C                     setPowerFault_Exceptions@command:	
  3572                           ; 1 bytes @ 0xC
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0xC
  3576  002C                     	ds	1
  3577  002D                     ??_Load_Main:	
  3578  002D                     ??_setTemp_Main:	
  3579                           ; 0 bytes @ 0xD
  3580                           
  3581  002D                     ??_setPowerFault_Main:	
  3582                           ; 0 bytes @ 0xD
  3583                           
  3584  002D                     ??_DelayOff_Main:	
  3585                           ; 0 bytes @ 0xD
  3586                           
  3587  002D                     ___awtoft@sign:	
  3588                           ; 0 bytes @ 0xD
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0xD
  3592  002D                     	ds	1
  3593  002E                     ?___ftdiv:	
  3594  002E                     ?___ftmul:	
  3595                           ; 3 bytes @ 0xE
  3596                           
  3597  002E                     _setSw_Main$4703:	
  3598                           ; 3 bytes @ 0xE
  3599                           
  3600  002E                     ___ftdiv@f2:	
  3601                           ; 1 bytes @ 0xE
  3602                           
  3603  002E                     ___ftmul@f1:	
  3604                           ; 3 bytes @ 0xE
  3605                           
  3606                           
  3607                           ; 3 bytes @ 0xE
  3608  002E                     	ds	1
  3609  002F                     ??_PowerFault_Main:	
  3610  002F                     _setSw_Main$4704:	
  3611                           ; 0 bytes @ 0xF
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0xF
  3615  002F                     	ds	1
  3616  0030                     ??_Temp_Main:	
  3617  0030                     setSw_Main@sw:	
  3618                           ; 0 bytes @ 0x10
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x10
  3622  0030                     	ds	1
  3623  0031                     ??_Switch_Main:	
  3624  0031                     Load_Main@i:	
  3625                           ; 0 bytes @ 0x11
  3626                           
  3627  0031                     ___ftdiv@f1:	
  3628                           ; 1 bytes @ 0x11
  3629                           
  3630  0031                     ___ftmul@f2:	
  3631                           ; 3 bytes @ 0x11
  3632                           
  3633                           
  3634                           ; 3 bytes @ 0x11
  3635  0031                     	ds	3
  3636  0034                     ??___ftdiv:	
  3637  0034                     ??___ftmul:	
  3638                           ; 0 bytes @ 0x14
  3639                           
  3640                           
  3641                           ; 0 bytes @ 0x14
  3642  0034                     	ds	4
  3643  0038                     ___ftdiv@cntr:	
  3644  0038                     ___ftmul@exp:	
  3645                           ; 1 bytes @ 0x18
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0x18
  3649  0038                     	ds	1
  3650  0039                     ___ftdiv@f3:	
  3651  0039                     ___ftmul@f3_as_product:	
  3652                           ; 3 bytes @ 0x19
  3653                           
  3654                           
  3655                           ; 3 bytes @ 0x19
  3656  0039                     	ds	3
  3657  003C                     ___ftdiv@exp:	
  3658  003C                     ___ftmul@cntr:	
  3659                           ; 1 bytes @ 0x1C
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0x1C
  3663  003C                     	ds	1
  3664  003D                     ___ftdiv@sign:	
  3665  003D                     ___ftmul@sign:	
  3666                           ; 1 bytes @ 0x1D
  3667                           
  3668                           
  3669                           ; 1 bytes @ 0x1D
  3670  003D                     	ds	1
  3671  003E                     ?___ftadd:	
  3672  003E                     ___ftadd@f1:	
  3673                           ; 3 bytes @ 0x1E
  3674                           
  3675                           
  3676                           ; 3 bytes @ 0x1E
  3677  003E                     	ds	3
  3678  0041                     ___ftadd@f2:	
  3679                           
  3680                           ; 3 bytes @ 0x21
  3681  0041                     	ds	3
  3682  0044                     ??___ftadd:	
  3683                           
  3684                           ; 0 bytes @ 0x24
  3685  0044                     	ds	4
  3686  0048                     ___ftadd@sign:	
  3687                           
  3688                           ; 1 bytes @ 0x28
  3689  0048                     	ds	1
  3690  0049                     ___ftadd@exp2:	
  3691                           
  3692                           ; 1 bytes @ 0x29
  3693  0049                     	ds	1
  3694  004A                     ___ftadd@exp1:	
  3695                           
  3696                           ; 1 bytes @ 0x2A
  3697  004A                     	ds	1
  3698  004B                     ?___fttol:	
  3699  004B                     ___fttol@f1:	
  3700                           ; 4 bytes @ 0x2B
  3701                           
  3702                           
  3703                           ; 3 bytes @ 0x2B
  3704  004B                     	ds	4
  3705  004F                     ??___fttol:	
  3706                           
  3707                           ; 0 bytes @ 0x2F
  3708  004F                     	ds	4
  3709  0053                     ___fttol@sign1:	
  3710                           
  3711                           ; 1 bytes @ 0x33
  3712  0053                     	ds	1
  3713  0054                     ___fttol@lval:	
  3714                           
  3715                           ; 4 bytes @ 0x34
  3716  0054                     	ds	4
  3717  0058                     ___fttol@exp1:	
  3718                           
  3719                           ; 1 bytes @ 0x38
  3720  0058                     	ds	1
  3721  0059                     ??_getPercentValue:	
  3722  0059                     ??_setPercentValue:	
  3723                           ; 0 bytes @ 0x39
  3724                           
  3725  0059                     setPercentValue@value:	
  3726                           ; 0 bytes @ 0x39
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x39
  3730  0059                     	ds	1
  3731  005A                     setPercentValue@i:	
  3732                           
  3733                           ; 3 bytes @ 0x3A
  3734  005A                     	ds	1
  3735  005B                     getPercentValue@value:	
  3736                           
  3737                           ; 1 bytes @ 0x3B
  3738  005B                     	ds	1
  3739  005C                     getPercentValue@i:	
  3740                           
  3741                           ; 3 bytes @ 0x3C
  3742  005C                     	ds	1
  3743  005D                     ??_Flash_Memory_Initialization:	
  3744                           
  3745                           ; 0 bytes @ 0x3D
  3746  005D                     	ds	1
  3747  005E                     Flash_Memory_Initialization@i:	
  3748                           
  3749                           ; 1 bytes @ 0x3E
  3750  005E                     	ds	1
  3751  005F                     ??_setDimmerLights_AdjRF:	
  3752                           
  3753                           ; 0 bytes @ 0x3F
  3754  005F                     	ds	1
  3755  0060                     setDimmerLights_AdjRF@lights:	
  3756                           
  3757                           ; 1 bytes @ 0x40
  3758  0060                     	ds	1
  3759  0061                     ??_setRF_DimmerValue:	
  3760                           
  3761                           ; 0 bytes @ 0x41
  3762  0061                     	ds	2
  3763  0063                     setRF_DimmerValue@lights:	
  3764                           
  3765                           ; 1 bytes @ 0x43
  3766  0063                     	ds	1
  3767  0064                     ??_setRFSW_AdjControl:	
  3768                           
  3769                           ; 0 bytes @ 0x44
  3770  0064                     	ds	2
  3771  0066                     setRFSW_AdjControl@sw:	
  3772                           
  3773                           ; 1 bytes @ 0x46
  3774  0066                     	ds	1
  3775  0067                     ??_setControl_Lights_Table:	
  3776  0067                     setControl_Lights_Table@rf:	
  3777                           ; 0 bytes @ 0x47
  3778                           
  3779                           
  3780                           ; 1 bytes @ 0x47
  3781  0067                     	ds	1
  3782  0068                     ??_getRxData:	
  3783  0068                     getRxData@rf:	
  3784                           ; 0 bytes @ 0x48
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x48
  3788  0068                     	ds	1
  3789  0069                     ??_setRF_Main:	
  3790                           
  3791                           ; 0 bytes @ 0x49
  3792  0069                     	ds	1
  3793  006A                     setRF_Main@rf:	
  3794                           
  3795                           ; 1 bytes @ 0x4A
  3796  006A                     	ds	1
  3797  006B                     _setRF_Main$4352:	
  3798                           
  3799                           ; 1 bytes @ 0x4B
  3800  006B                     	ds	1
  3801  006C                     ??_RF_Main:	
  3802  006C                     ??_main:	
  3803                           ; 0 bytes @ 0x4C
  3804                           
  3805                           
  3806                           	psect	maintext
  3807  126E                     __pmaintext:	
  3808                           ; 0 bytes @ 0x4C
  3809 ;;
  3810 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3811 ;;
  3812 ;; *************** function _main *****************
  3813 ;; Defined at:
  3814 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 17F/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3832 ;;Total ram usage:        0 bytes
  3833 ;; Hardware stack levels required when called:   14
  3834 ;; This function calls:
  3835 ;;		_Buzzer_Initialization
  3836 ;;		_Buzzer_Main
  3837 ;;		_CC2500_PowerOnInitial
  3838 ;;		_DelayOff_Initialization
  3839 ;;		_DelayOff_Main
  3840 ;;		_DimmerLights_Initialization
  3841 ;;		_DimmerLights_Main
  3842 ;;		_Flash_Memory_Initialization
  3843 ;;		_Flash_Memory_Main
  3844 ;;		_LED_Initialization
  3845 ;;		_LED_Main
  3846 ;;		_Load_Initialization
  3847 ;;		_Load_Main
  3848 ;;		_MainT
  3849 ;;		_MainT_Initialization
  3850 ;;		_Mcu_Initialization
  3851 ;;		_PowerFault_Initialization
  3852 ;;		_PowerFault_Main
  3853 ;;		_RF_Initialization
  3854 ;;		_RF_Main
  3855 ;;		_Switch_Initialization
  3856 ;;		_Switch_Main
  3857 ;;		_Temp_Initialization
  3858 ;;		_Temp_Main
  3859 ;;		_getLoad_AD
  3860 ;;		_getPowerFault_AD
  3861 ;;		_getTemp_AD
  3862 ;; This function is called by:
  3863 ;;		Startup code after reset
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _main
  3869  126E                     _main:	
  3870                           
  3871                           ;main.c: 9: MainT_Initialization();
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3875  126E  31A4  2469  3192   	fcall	_MainT_Initialization
  3876                           
  3877                           ;main.c: 10: Mcu_Initialization();
  3878  1271  31A6  267C  3192   	fcall	_Mcu_Initialization
  3879                           
  3880                           ;main.c: 11: Flash_Memory_Initialization();
  3881  1274  318C  24B7  3192   	fcall	_Flash_Memory_Initialization
  3882                           
  3883                           ;main.c: 12: LED_Initialization();
  3884  1277  31A4  24BA  3192   	fcall	_LED_Initialization
  3885                           
  3886                           ;main.c: 13: Buzzer_Initialization();
  3887  127A  31A4  2427  3192   	fcall	_Buzzer_Initialization
  3888                           
  3889                           ;main.c: 15: ;;
  3890                           ;main.c: 16: Temp_Initialization();
  3891  127D  31A3  2399  3192   	fcall	_Temp_Initialization
  3892                           
  3893                           ;main.c: 17: Load_Initialization();
  3894  1280  31A4  24D2  3192   	fcall	_Load_Initialization
  3895                           
  3896                           ;main.c: 18: PowerFault_Initialization();
  3897  1283  31A3  2393  3192   	fcall	_PowerFault_Initialization
  3898                           
  3899                           ;main.c: 19: DelayOff_Initialization();
  3900  1286  31A3  23E3  3192   	fcall	_DelayOff_Initialization
  3901                           
  3902                           ;main.c: 21: DimmerLights_Initialization();
  3903  1289  31A5  25F9  3192   	fcall	_DimmerLights_Initialization
  3904                           
  3905                           ;main.c: 22: ;;
  3906                           ;main.c: 23: ;;
  3907                           ;main.c: 24: ;;
  3908                           ;main.c: 26: Switch_Initialization();
  3909  128C  31A4  24F9  3192   	fcall	_Switch_Initialization
  3910                           
  3911                           ;main.c: 27: RF_Initialization();
  3912  128F  31A3  23A8  3192   	fcall	_RF_Initialization
  3913                           
  3914                           ;main.c: 28: CC2500_PowerOnInitial();
  3915  1292  31A5  25E4  3192   	fcall	_CC2500_PowerOnInitial
  3916  1295                     l10046:	
  3917                           ;main.c: 30: while(1)
  3918                           
  3919                           
  3920                           ;main.c: 31: {
  3921                           ;main.c: 32: if(TMain->PowerON)
  3922  1295  0021               	movlb	1	; select bank1
  3923  1296  0869               	movf	_TMain^(0+128),w
  3924  1297  0086               	movwf	6
  3925  1298  3001               	movlw	1	; select bank2/3
  3926  1299  0087               	movwf	7
  3927  129A  1C01               	btfss	1,0
  3928  129B  2AAB               	goto	l10050
  3929                           
  3930                           ;main.c: 33: {
  3931                           ;main.c: 35: ;;
  3932                           ;main.c: 39: getLoad_AD(0x05);
  3933  129C  3005               	movlw	5
  3934  129D  3188  205D  3192   	fcall	_getLoad_AD
  3935                           
  3936                           ;main.c: 43: getTemp_AD(0x09);
  3937  12A0  3009               	movlw	9
  3938  12A1  3191  2125  3192   	fcall	_getTemp_AD
  3939                           
  3940                           ;main.c: 47: getPowerFault_AD(0x11);
  3941  12A4  3011               	movlw	17
  3942  12A5  319C  246E  3192   	fcall	_getPowerFault_AD
  3943                           
  3944                           ;main.c: 59: Buzzer_Main();
  3945  12A8  3188  20F3  3192   	fcall	_Buzzer_Main
  3946  12AB                     l10050:	
  3947                           
  3948                           ;main.c: 61: }
  3949                           ;main.c: 63: if(TMain->T0_Timerout)
  3950  12AB  0021               	movlb	1	; select bank1
  3951  12AC  0869               	movf	_TMain^(0+128),w
  3952  12AD  0086               	movwf	6
  3953  12AE  3001               	movlw	1	; select bank2/3
  3954  12AF  0087               	movwf	7
  3955  12B0  1C81               	btfss	1,1
  3956  12B1  2A95               	goto	l10046
  3957                           
  3958                           ;main.c: 64: {
  3959                           ;main.c: 65: TMain->T0_Timerout = 0;
  3960  12B2  0869               	movf	_TMain^(0+128),w
  3961  12B3  0086               	movwf	6
  3962  12B4  3001               	movlw	1	; select bank2/3
  3963  12B5  0087               	movwf	7
  3964  12B6  1081               	bcf	1,1
  3965                           
  3966                           ;main.c: 66: MainT();
  3967  12B7  3193  23C5  3192   	fcall	_MainT
  3968                           
  3969                           ;main.c: 67: if(TMain->PowerON)
  3970  12BA  0021               	movlb	1	; select bank1
  3971  12BB  0869               	movf	_TMain^(0+128),w
  3972  12BC  0086               	movwf	6
  3973  12BD  3001               	movlw	1	; select bank2/3
  3974  12BE  0087               	movwf	7
  3975  12BF  1C01               	btfss	1,0
  3976  12C0  2A95               	goto	l10046
  3977                           
  3978                           ;main.c: 68: {
  3979                           ;main.c: 69: Flash_Memory_Main();
  3980  12C1  319D  25BC  3192   	fcall	_Flash_Memory_Main
  3981                           
  3982                           ;main.c: 71: LED_Main();
  3983  12C4  31A4  24C6  3192   	fcall	_LED_Main
  3984                           
  3985                           ;main.c: 73: ;;
  3986                           ;main.c: 74: Temp_Main();
  3987  12C7  3187  27FD  3192   	fcall	_Temp_Main
  3988                           
  3989                           ;main.c: 75: Load_Main();
  3990  12CA  3183  23A4  3192   	fcall	_Load_Main
  3991                           
  3992                           ;main.c: 76: PowerFault_Main();
  3993  12CD  31A3  2396  3192   	fcall	_PowerFault_Main
  3994                           
  3995                           ;main.c: 78: ;;
  3996                           ;main.c: 79: DimmerLights_Main();
  3997  12D0  31A4  2453  3192   	fcall	_DimmerLights_Main
  3998                           
  3999                           ;main.c: 80: Switch_Main();
  4000  12D3  31A4  2403  3192   	fcall	_Switch_Main
  4001                           
  4002                           ;main.c: 81: ;;
  4003                           ;main.c: 82: ;;
  4004                           ;main.c: 84: RF_Main();
  4005  12D6  31A3  23AC  3192   	fcall	_RF_Main
  4006                           
  4007                           ;main.c: 85: DelayOff_Main();
  4008  12D9  31A3  23EB  3192   	fcall	_DelayOff_Main
  4009  12DC  2A95               	goto	l10046
  4010  12DD                     __end_of_main:	
  4011                           
  4012                           	psect	text1
  4013  1125                     __ptext1:	
  4014 ;; *************** function _getTemp_AD *****************
  4015 ;; Defined at:
  4016 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  channel         1    wreg     unsigned char 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  channel         1    8[BANK0 ] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;Total ram usage:        5 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    5
  4037 ;; This function calls:
  4038 ;;		_getAD
  4039 ;; This function is called by:
  4040 ;;		_main
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _getTemp_AD
  4046  1125                     _getTemp_AD:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4050                           ;getTemp_AD@channel stored from wreg
  4051  1125  0020               	movlb	0	; select bank0
  4052  1126  00A8               	movwf	getTemp_AD@channel
  4053                           
  4054                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4055  1127  087D               	movf	_Temp,w
  4056  1128  0086               	movwf	6
  4057  1129  3001               	movlw	1	; select bank2/3
  4058  112A  0087               	movwf	7
  4059  112B  1D01               	btfss	1,2
  4060  112C  0008               	return
  4061                           
  4062                           ;OverTemperature_B1.c: 38: {
  4063                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4064  112D  30F0               	movlw	240
  4065  112E  00A4               	movwf	??_getTemp_AD
  4066  112F  0824               	movf	??_getTemp_AD,w
  4067  1130  00A0               	movwf	getAD@adcon1
  4068  1131  0828               	movf	getTemp_AD@channel,w
  4069  1132  31A6  264F  3191   	fcall	_getAD
  4070  1135  087D               	movf	_Temp,w
  4071  1136  3E0A               	addlw	10
  4072  1137  0086               	movwf	6
  4073  1138  3001               	movlw	1	; select bank2/3
  4074  1139  0087               	movwf	7
  4075  113A  0020               	movlb	0	; select bank0
  4076  113B  0820               	movf	?_getAD,w
  4077  113C  3FC0               	movwi [0]fsr1
  4078  113D  0821               	movf	?_getAD+1,w
  4079  113E  3FC1               	movwi [1]fsr1
  4080                           
  4081                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4082  113F  087D               	movf	_Temp,w
  4083  1140  3E0A               	addlw	10
  4084  1141  0086               	movwf	6
  4085  1142  3001               	movlw	1	; select bank2/3
  4086  1143  0087               	movwf	7
  4087  1144  3F40               	moviw [0]fsr1
  4088  1145  00A4               	movwf	??_getTemp_AD
  4089  1146  3F41               	moviw [1]fsr1
  4090  1147  00A5               	movwf	??_getTemp_AD+1
  4091  1148  087D               	movf	_Temp,w
  4092  1149  3E06               	addlw	6
  4093  114A  0086               	movwf	6
  4094  114B  3001               	movlw	1	; select bank2/3
  4095  114C  0087               	movwf	7
  4096  114D  3F40               	moviw [0]fsr1
  4097  114E  00A6               	movwf	??_getTemp_AD+2
  4098  114F  3F41               	moviw [1]fsr1
  4099  1150  00A7               	movwf	??_getTemp_AD+3
  4100  1151  0825               	movf	??_getTemp_AD+1,w
  4101  1152  0227               	subwf	??_getTemp_AD+3,w
  4102  1153  1D03               	skipz
  4103  1154  2957               	goto	u9915
  4104  1155  0824               	movf	??_getTemp_AD,w
  4105  1156  0226               	subwf	??_getTemp_AD+2,w
  4106  1157                     u9915:	
  4107  1157  1803               	skipnc
  4108  1158  2968               	goto	l9836
  4109                           
  4110                           ;OverTemperature_B1.c: 41: {
  4111                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4112  1159  087D               	movf	_Temp,w
  4113  115A  3E0A               	addlw	10
  4114  115B  0086               	movwf	6
  4115  115C  3001               	movlw	1	; select bank2/3
  4116  115D  0087               	movwf	7
  4117  115E  087D               	movf	_Temp,w
  4118  115F  3E06               	addlw	6
  4119  1160  0084               	movwf	4
  4120  1161  3001               	movlw	1	; select bank2/3
  4121  1162  0085               	movwf	5
  4122  1163  3F40               	moviw [0]fsr1
  4123  1164  3F80               	movwi [0]fsr0
  4124  1165  3F41               	moviw [1]fsr1
  4125  1166  3F81               	movwi [1]fsr0
  4126                           
  4127                           ;OverTemperature_B1.c: 43: }
  4128  1167  0008               	return
  4129  1168                     l9836:	
  4130                           
  4131                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4132  1168  087D               	movf	_Temp,w
  4133  1169  3E0A               	addlw	10
  4134  116A  0086               	movwf	6
  4135  116B  3001               	movlw	1	; select bank2/3
  4136  116C  0087               	movwf	7
  4137  116D  3F40               	moviw [0]fsr1
  4138  116E  00A4               	movwf	??_getTemp_AD
  4139  116F  3F41               	moviw [1]fsr1
  4140  1170  00A5               	movwf	??_getTemp_AD+1
  4141  1171  087D               	movf	_Temp,w
  4142  1172  3E08               	addlw	8
  4143  1173  0086               	movwf	6
  4144  1174  3001               	movlw	1	; select bank2/3
  4145  1175  0087               	movwf	7
  4146  1176  3F40               	moviw [0]fsr1
  4147  1177  00A6               	movwf	??_getTemp_AD+2
  4148  1178  3F41               	moviw [1]fsr1
  4149  1179  00A7               	movwf	??_getTemp_AD+3
  4150  117A  0825               	movf	??_getTemp_AD+1,w
  4151  117B  0227               	subwf	??_getTemp_AD+3,w
  4152  117C  1D03               	skipz
  4153  117D  2980               	goto	u9925
  4154  117E  0824               	movf	??_getTemp_AD,w
  4155  117F  0226               	subwf	??_getTemp_AD+2,w
  4156  1180                     u9925:	
  4157  1180  1803               	skipnc
  4158  1181  0008               	return
  4159                           
  4160                           ;OverTemperature_B1.c: 45: {
  4161                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4162  1182  087D               	movf	_Temp,w
  4163  1183  3E0A               	addlw	10
  4164  1184  0086               	movwf	6
  4165  1185  3001               	movlw	1	; select bank2/3
  4166  1186  0087               	movwf	7
  4167  1187  087D               	movf	_Temp,w
  4168  1188  3E08               	addlw	8
  4169  1189  0084               	movwf	4
  4170  118A  3001               	movlw	1	; select bank2/3
  4171  118B  0085               	movwf	5
  4172  118C  3F40               	moviw [0]fsr1
  4173  118D  3F80               	movwi [0]fsr0
  4174  118E  3F41               	moviw [1]fsr1
  4175  118F  3F81               	movwi [1]fsr0
  4176  1190  0008               	return
  4177  1191                     __end_of_getTemp_AD:	
  4178                           
  4179                           	psect	text2
  4180  1C6E                     __ptext2:	
  4181 ;; *************** function _getPowerFault_AD *****************
  4182 ;; Defined at:
  4183 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  channel         1    wreg     unsigned char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  channel         1    8[BANK0 ] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;		None               void
  4190 ;; Registers used:
  4191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;Total ram usage:        5 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    5
  4204 ;; This function calls:
  4205 ;;		_getAD
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _getPowerFault_AD
  4213  1C6E                     _getPowerFault_AD:	
  4214                           
  4215                           ;incstack = 0
  4216                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4217                           ;getPowerFault_AD@channel stored from wreg
  4218  1C6E  0020               	movlb	0	; select bank0
  4219  1C6F  00A8               	movwf	getPowerFault_AD@channel
  4220                           
  4221                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4222  1C70  087B               	movf	_PF,w
  4223  1C71  0086               	movwf	6
  4224  1C72  3001               	movlw	1	; select bank2/3
  4225  1C73  0087               	movwf	7
  4226  1C74  1D81               	btfss	1,3
  4227  1C75  0008               	return
  4228                           
  4229                           ;PowerFault_B1.c: 52: {
  4230                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4231  1C76  30F0               	movlw	240
  4232  1C77  00A4               	movwf	??_getPowerFault_AD
  4233  1C78  0824               	movf	??_getPowerFault_AD,w
  4234  1C79  00A0               	movwf	getAD@adcon1
  4235  1C7A  0828               	movf	getPowerFault_AD@channel,w
  4236  1C7B  31A6  264F  319C   	fcall	_getAD
  4237  1C7E  087B               	movf	_PF,w
  4238  1C7F  3E03               	addlw	3
  4239  1C80  0086               	movwf	6
  4240  1C81  3001               	movlw	1	; select bank2/3
  4241  1C82  0087               	movwf	7
  4242  1C83  0020               	movlb	0	; select bank0
  4243  1C84  0820               	movf	?_getAD,w
  4244  1C85  3FC0               	movwi [0]fsr1
  4245  1C86  0821               	movf	?_getAD+1,w
  4246  1C87  3FC1               	movwi [1]fsr1
  4247                           
  4248                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4249  1C88  087B               	movf	_PF,w
  4250  1C89  3E03               	addlw	3
  4251  1C8A  0086               	movwf	6
  4252  1C8B  3001               	movlw	1	; select bank2/3
  4253  1C8C  0087               	movwf	7
  4254  1C8D  3F40               	moviw [0]fsr1
  4255  1C8E  00A4               	movwf	??_getPowerFault_AD
  4256  1C8F  3F41               	moviw [1]fsr1
  4257  1C90  00A5               	movwf	??_getPowerFault_AD+1
  4258  1C91  0A7B               	incf	_PF,w
  4259  1C92  0086               	movwf	6
  4260  1C93  3001               	movlw	1	; select bank2/3
  4261  1C94  0087               	movwf	7
  4262  1C95  3F40               	moviw [0]fsr1
  4263  1C96  00A6               	movwf	??_getPowerFault_AD+2
  4264  1C97  3F41               	moviw [1]fsr1
  4265  1C98  00A7               	movwf	??_getPowerFault_AD+3
  4266  1C99  0825               	movf	??_getPowerFault_AD+1,w
  4267  1C9A  0227               	subwf	??_getPowerFault_AD+3,w
  4268  1C9B  1D03               	skipz
  4269  1C9C  2C9F               	goto	u9945
  4270  1C9D  0824               	movf	??_getPowerFault_AD,w
  4271  1C9E  0226               	subwf	??_getPowerFault_AD+2,w
  4272  1C9F                     u9945:	
  4273  1C9F  1803               	skipnc
  4274  1CA0  0008               	return
  4275                           
  4276                           ;PowerFault_B1.c: 55: {
  4277                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4278  1CA1  087B               	movf	_PF,w
  4279  1CA2  3E03               	addlw	3
  4280  1CA3  0086               	movwf	6
  4281  1CA4  3001               	movlw	1	; select bank2/3
  4282  1CA5  0087               	movwf	7
  4283  1CA6  0A7B               	incf	_PF,w
  4284  1CA7  0084               	movwf	4
  4285  1CA8  3001               	movlw	1	; select bank2/3
  4286  1CA9  0085               	movwf	5
  4287  1CAA  3F40               	moviw [0]fsr1
  4288  1CAB  3F80               	movwi [0]fsr0
  4289  1CAC  3F41               	moviw [1]fsr1
  4290  1CAD  3F81               	movwi [1]fsr0
  4291  1CAE  0008               	return
  4292  1CAF                     __end_of_getPowerFault_AD:	
  4293                           
  4294                           	psect	text3
  4295  085D                     __ptext3:	
  4296 ;; *************** function _getLoad_AD *****************
  4297 ;; Defined at:
  4298 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  channel         1    wreg     unsigned char 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  channel         1    9[BANK0 ] unsigned char 
  4303 ;;  i               1   11[BANK0 ] unsigned char 
  4304 ;;  j               1   10[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;		None               void
  4307 ;; Registers used:
  4308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;Total ram usage:        8 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    5
  4321 ;; This function calls:
  4322 ;;		_getAD
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _getLoad_AD
  4330  085D                     _getLoad_AD:	
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4334                           ;getLoad_AD@channel stored from wreg
  4335  085D  0020               	movlb	0	; select bank0
  4336  085E  00A9               	movwf	getLoad_AD@channel
  4337                           
  4338                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4339  085F  01AB               	clrf	getLoad_AD@i
  4340  0860  01AA               	clrf	getLoad_AD@j
  4341                           
  4342                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4343  0861  086E               	movf	_Load,w
  4344  0862  0086               	movwf	6
  4345  0863  3002               	movlw	2	; select bank4/5
  4346  0864  0087               	movwf	7
  4347  0865  1E01               	btfss	1,4
  4348  0866  0008               	return
  4349                           
  4350                           ;OverLoad_B1.c: 20: {
  4351                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4352  0867  30C0               	movlw	192
  4353  0868  00A4               	movwf	??_getLoad_AD
  4354  0869  0824               	movf	??_getLoad_AD,w
  4355  086A  00A0               	movwf	getAD@adcon1
  4356  086B  0829               	movf	getLoad_AD@channel,w
  4357  086C  31A6  264F  3188   	fcall	_getAD
  4358  086F  0020               	movlb	0	; select bank0
  4359  0870  086E               	movf	_Load,w
  4360  0871  3E32               	addlw	50
  4361  0872  0086               	movwf	6
  4362  0873  3002               	movlw	2	; select bank4/5
  4363  0874  0087               	movwf	7
  4364  0875  0820               	movf	?_getAD,w
  4365  0876  3FC0               	movwi [0]fsr1
  4366  0877  0821               	movf	?_getAD+1,w
  4367  0878  3FC1               	movwi [1]fsr1
  4368                           
  4369                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4370  0879  01AB               	clrf	getLoad_AD@i
  4371  087A  3005               	movlw	5
  4372  087B  022B               	subwf	getLoad_AD@i,w
  4373  087C  1803               	btfsc	3,0
  4374  087D  28B7               	goto	l9812
  4375  087E                     l9802:	
  4376                           
  4377                           ;OverLoad_B1.c: 23: {
  4378                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4379  087E  086E               	movf	_Load,w
  4380  087F  3E32               	addlw	50
  4381  0880  0086               	movwf	6
  4382  0881  3002               	movlw	2	; select bank4/5
  4383  0882  0087               	movwf	7
  4384  0883  3F40               	moviw [0]fsr1
  4385  0884  00A4               	movwf	??_getLoad_AD
  4386  0885  3F41               	moviw [1]fsr1
  4387  0886  00A5               	movwf	??_getLoad_AD+1
  4388  0887  352B               	lslf	getLoad_AD@i,w
  4389  0888  3E08               	addlw	8
  4390  0889  076E               	addwf	_Load,w
  4391  088A  00A6               	movwf	??_getLoad_AD+2
  4392  088B  0826               	movf	??_getLoad_AD+2,w
  4393  088C  0086               	movwf	6
  4394  088D  3002               	movlw	2	; select bank4/5
  4395  088E  0087               	movwf	7
  4396  088F  3F40               	moviw [0]fsr1
  4397  0890  00A7               	movwf	??_getLoad_AD+3
  4398  0891  3F41               	moviw [1]fsr1
  4399  0892  00A8               	movwf	??_getLoad_AD+4
  4400  0893  0825               	movf	??_getLoad_AD+1,w
  4401  0894  0228               	subwf	??_getLoad_AD+4,w
  4402  0895  1D03               	skipz
  4403  0896  2899               	goto	u9845
  4404  0897  0824               	movf	??_getLoad_AD,w
  4405  0898  0227               	subwf	??_getLoad_AD+3,w
  4406  0899                     u9845:	
  4407  0899  1803               	skipnc
  4408  089A  28AF               	goto	l9808
  4409                           
  4410                           ;OverLoad_B1.c: 25: {
  4411                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4412  089B  086E               	movf	_Load,w
  4413  089C  3E32               	addlw	50
  4414  089D  0086               	movwf	6
  4415  089E  3002               	movlw	2	; select bank4/5
  4416  089F  0087               	movwf	7
  4417  08A0  352B               	lslf	getLoad_AD@i,w
  4418  08A1  3E08               	addlw	8
  4419  08A2  076E               	addwf	_Load,w
  4420  08A3  00A4               	movwf	??_getLoad_AD
  4421  08A4  0824               	movf	??_getLoad_AD,w
  4422  08A5  0084               	movwf	4
  4423  08A6  3002               	movlw	2	; select bank4/5
  4424  08A7  0085               	movwf	5
  4425  08A8  3F40               	moviw [0]fsr1
  4426  08A9  3F80               	movwi [0]fsr0
  4427  08AA  3F41               	moviw [1]fsr1
  4428  08AB  3F81               	movwi [1]fsr0
  4429                           
  4430                           ;OverLoad_B1.c: 27: j=1;
  4431  08AC  01AA               	clrf	getLoad_AD@j
  4432  08AD  0AAA               	incf	getLoad_AD@j,f
  4433                           
  4434                           ;OverLoad_B1.c: 28: break;
  4435  08AE  28B7               	goto	l9812
  4436  08AF                     l9808:	
  4437  08AF  3001               	movlw	1
  4438  08B0  00A4               	movwf	??_getLoad_AD
  4439  08B1  0824               	movf	??_getLoad_AD,w
  4440  08B2  07AB               	addwf	getLoad_AD@i,f
  4441  08B3  3005               	movlw	5
  4442  08B4  022B               	subwf	getLoad_AD@i,w
  4443  08B5  1C03               	skipc
  4444  08B6  287E               	goto	l9802
  4445  08B7                     l9812:	
  4446                           
  4447                           ;OverLoad_B1.c: 29: }
  4448                           ;OverLoad_B1.c: 30: }
  4449                           ;OverLoad_B1.c: 31: if(!j)
  4450  08B7  08AA               	movf	getLoad_AD@j,f
  4451  08B8  1D03               	skipz
  4452  08B9  0008               	return
  4453                           
  4454                           ;OverLoad_B1.c: 32: {
  4455                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4456  08BA  01AB               	clrf	getLoad_AD@i
  4457  08BB                     L1:	
  4458  08BB  3005               	movlw	5
  4459  08BC  022B               	subwf	getLoad_AD@i,w
  4460  08BD  1803               	btfsc	3,0
  4461  08BE  0008               	return
  4462                           
  4463                           ;OverLoad_B1.c: 34: {
  4464                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4465  08BF  352B               	lslf	getLoad_AD@i,w
  4466  08C0  3E1A               	addlw	26
  4467  08C1  076E               	addwf	_Load,w
  4468  08C2  00A4               	movwf	??_getLoad_AD
  4469  08C3  0824               	movf	??_getLoad_AD,w
  4470  08C4  0086               	movwf	6
  4471  08C5  3002               	movlw	2	; select bank4/5
  4472  08C6  0087               	movwf	7
  4473  08C7  3F40               	moviw [0]fsr1
  4474  08C8  00A5               	movwf	??_getLoad_AD+1
  4475  08C9  3F41               	moviw [1]fsr1
  4476  08CA  00A6               	movwf	??_getLoad_AD+2
  4477  08CB  086E               	movf	_Load,w
  4478  08CC  3E32               	addlw	50
  4479  08CD  0086               	movwf	6
  4480  08CE  3002               	movlw	2	; select bank4/5
  4481  08CF  0087               	movwf	7
  4482  08D0  3F40               	moviw [0]fsr1
  4483  08D1  00A7               	movwf	??_getLoad_AD+3
  4484  08D2  3F41               	moviw [1]fsr1
  4485  08D3  00A8               	movwf	??_getLoad_AD+4
  4486  08D4  0826               	movf	??_getLoad_AD+2,w
  4487  08D5  0228               	subwf	??_getLoad_AD+4,w
  4488  08D6  1D03               	skipz
  4489  08D7  28DA               	goto	u9885
  4490  08D8  0825               	movf	??_getLoad_AD+1,w
  4491  08D9  0227               	subwf	??_getLoad_AD+3,w
  4492  08DA                     u9885:	
  4493  08DA  1803               	skipnc
  4494  08DB  28EE               	goto	l9824
  4495                           
  4496                           ;OverLoad_B1.c: 36: {
  4497                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4498  08DC  086E               	movf	_Load,w
  4499  08DD  3E32               	addlw	50
  4500  08DE  0086               	movwf	6
  4501  08DF  3002               	movlw	2	; select bank4/5
  4502  08E0  0087               	movwf	7
  4503  08E1  352B               	lslf	getLoad_AD@i,w
  4504  08E2  3E1A               	addlw	26
  4505  08E3  076E               	addwf	_Load,w
  4506  08E4  00A4               	movwf	??_getLoad_AD
  4507  08E5  0824               	movf	??_getLoad_AD,w
  4508  08E6  0084               	movwf	4
  4509  08E7  3002               	movlw	2	; select bank4/5
  4510  08E8  0085               	movwf	5
  4511  08E9  3F40               	moviw [0]fsr1
  4512  08EA  3F80               	movwi [0]fsr0
  4513  08EB  3F41               	moviw [1]fsr1
  4514  08EC  3F81               	movwi [1]fsr0
  4515                           
  4516                           ;OverLoad_B1.c: 38: break;
  4517  08ED  0008               	return
  4518  08EE                     l9824:	
  4519  08EE  3001               	movlw	1
  4520  08EF  00A4               	movwf	??_getLoad_AD
  4521  08F0  0824               	movf	??_getLoad_AD,w
  4522  08F1  07AB               	addwf	getLoad_AD@i,f
  4523  08F2  28BB               	goto	L1
  4524  08F3                     __end_of_getLoad_AD:	
  4525                           
  4526                           	psect	text4
  4527  264F                     __ptext4:	
  4528 ;; *************** function _getAD *****************
  4529 ;; Defined at:
  4530 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  adcon0          1    wreg     unsigned char 
  4533 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  2    0[BANK0 ] int 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4545 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;Total ram usage:        4 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    4
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_getLoad_AD
  4556 ;;		_getTemp_AD
  4557 ;;		_getPowerFault_AD
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           
  4562                           ;psect for function _getAD
  4563  264F                     _getAD:	
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4567                           ;getAD@adcon0 stored from wreg
  4568  264F  0020               	movlb	0	; select bank0
  4569  2650  00A3               	movwf	getAD@adcon0
  4570                           
  4571                           ;MCU_16f1518_B1.c: 311: ADCON0=adcon0;
  4572  2651  0823               	movf	getAD@adcon0,w
  4573  2652  0021               	movlb	1	; select bank1
  4574  2653  009D               	movwf	29	;volatile
  4575                           
  4576                           ;MCU_16f1518_B1.c: 312: ADCON1=adcon1;
  4577  2654  0020               	movlb	0	; select bank0
  4578  2655  0820               	movf	getAD@adcon1,w
  4579  2656  0021               	movlb	1	; select bank1
  4580  2657  009E               	movwf	30	;volatile
  4581                           
  4582                           ;MCU_16f1518_B1.c: 313: GO_nDONE=1;
  4583  2658  149D               	bsf	29,1	;volatile
  4584  2659                     l1718:	
  4585                           ;MCU_16f1518_B1.c: 314: while(GO_nDONE);
  4586                           
  4587  2659  189D               	btfsc	29,1	;volatile
  4588  265A  2E59               	goto	l1718
  4589                           
  4590                           ;MCU_16f1518_B1.c: 315: return ((ADRESH*256)+ADRESL);
  4591  265B  081C               	movf	28,w	;volatile
  4592  265C  0020               	movlb	0	; select bank0
  4593  265D  01A1               	clrf	?_getAD+1
  4594  265E  07A1               	addwf	?_getAD+1,f
  4595  265F  0021               	movlb	1	; select bank1
  4596  2660  081B               	movf	27,w	;volatile
  4597  2661  0020               	movlb	0	; select bank0
  4598  2662  01A0               	clrf	?_getAD
  4599  2663  07A0               	addwf	?_getAD,f
  4600  2664  0008               	return
  4601  2665                     __end_of_getAD:	
  4602                           
  4603                           	psect	text5
  4604  07FD                     __ptext5:	
  4605 ;; *************** function _Temp_Main *****************
  4606 ;; Defined at:
  4607 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;		None
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;Total ram usage:        0 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:   10
  4628 ;; This function calls:
  4629 ;;		_setTemp_Main
  4630 ;; This function is called by:
  4631 ;;		_main
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           
  4636                           ;psect for function _Temp_Main
  4637  07FD                     _Temp_Main:	
  4638                           
  4639                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4643  07FD  318E  26BD         	fcall	_setTemp_Main
  4644  07FF  0008               	return
  4645  0800                     __end_of_Temp_Main:	
  4646                           
  4647                           	psect	text6
  4648  0EBD                     __ptext6:	
  4649 ;; *************** function _setTemp_Main *****************
  4650 ;; Defined at:
  4651 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;Total ram usage:        3 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    9
  4672 ;; This function calls:
  4673 ;;		_getLoad_Safe
  4674 ;;		_getPF_Safe
  4675 ;;		_setOverTemp_Exceptions
  4676 ;; This function is called by:
  4677 ;;		_Temp_Main
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _setTemp_Main
  4683  0EBD                     _setTemp_Main:	
  4684                           
  4685                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4689  0EBD  087D               	movf	_Temp,w
  4690  0EBE  0086               	movwf	6
  4691  0EBF  3001               	movlw	1	; select bank2/3
  4692  0EC0  0087               	movwf	7
  4693  0EC1  1C01               	btfss	1,0
  4694  0EC2  0008               	return
  4695                           
  4696                           ;OverTemperature_B1.c: 67: {
  4697                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4698  0EC3  087D               	movf	_Temp,w
  4699  0EC4  0086               	movwf	6
  4700  0EC5  3001               	movlw	1	; select bank2/3
  4701  0EC6  0087               	movwf	7
  4702  0EC7  1901               	btfsc	1,2
  4703  0EC8  2F09               	goto	l9434
  4704                           
  4705                           ;OverTemperature_B1.c: 69: {
  4706                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4707  0EC9  0A7D               	incf	_Temp,w
  4708  0ECA  0086               	movwf	6
  4709  0ECB  3001               	movlw	1	; select bank2/3
  4710  0ECC  0087               	movwf	7
  4711  0ECD  3001               	movlw	1
  4712  0ECE  0781               	addwf	1,f
  4713  0ECF  3141               	addfsr 1,1
  4714  0ED0  1803               	skipnc
  4715  0ED1  0A81               	incf	1,f
  4716                           
  4717                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4718  0ED2  0A7D               	incf	_Temp,w
  4719  0ED3  0086               	movwf	6
  4720  0ED4  3001               	movlw	1	; select bank2/3
  4721  0ED5  0087               	movwf	7
  4722  0ED6  3F40               	moviw [0]fsr1
  4723  0ED7  0020               	movlb	0	; select bank0
  4724  0ED8  00AD               	movwf	??_setTemp_Main
  4725  0ED9  3F41               	moviw [1]fsr1
  4726  0EDA  00AE               	movwf	??_setTemp_Main+1
  4727  0EDB  3001               	movlw	1
  4728  0EDC  022E               	subwf	??_setTemp_Main+1,w
  4729  0EDD  30F4               	movlw	244
  4730  0EDE  1903               	skipnz
  4731  0EDF  022D               	subwf	??_setTemp_Main,w
  4732  0EE0  1C03               	skipc
  4733  0EE1  0008               	return
  4734                           
  4735                           ;OverTemperature_B1.c: 72: {
  4736                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4737  0EE2  31A4  2474  318E   	fcall	_getLoad_Safe
  4738  0EE5  3A00               	xorlw	0
  4739  0EE6  1903               	skipnz
  4740  0EE7  2F00               	goto	l9432
  4741  0EE8  31A3  23F3  318E   	fcall	_getPF_Safe
  4742  0EEB  3A00               	xorlw	0
  4743  0EEC  1903               	skipnz
  4744  0EED  2F00               	goto	l9432
  4745                           
  4746                           ;OverTemperature_B1.c: 74: {
  4747                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4748  0EEE  0A7D               	incf	_Temp,w
  4749  0EEF  0086               	movwf	6
  4750  0EF0  3001               	movlw	1	; select bank2/3
  4751  0EF1  0087               	movwf	7
  4752  0EF2  3000               	movlw	0
  4753  0EF3  3FC0               	movwi [0]fsr1
  4754  0EF4  3FC1               	movwi [1]fsr1
  4755                           
  4756                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4757  0EF5  087D               	movf	_Temp,w
  4758  0EF6  0086               	movwf	6
  4759  0EF7  3001               	movlw	1	; select bank2/3
  4760  0EF8  0087               	movwf	7
  4761  0EF9  1501               	bsf	1,2
  4762                           
  4763                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4764  0EFA  087D               	movf	_Temp,w
  4765  0EFB  0086               	movwf	6
  4766  0EFC  3001               	movlw	1	; select bank2/3
  4767  0EFD  0087               	movwf	7
  4768  0EFE  1201               	bcf	1,4
  4769                           
  4770                           ;OverTemperature_B1.c: 78: }
  4771  0EFF  0008               	return
  4772  0F00                     l9432:	
  4773                           
  4774                           ;OverTemperature_B1.c: 79: else
  4775                           ;OverTemperature_B1.c: 80: {
  4776                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4777  0F00  0A7D               	incf	_Temp,w
  4778  0F01  0086               	movwf	6
  4779  0F02  3001               	movlw	1	; select bank2/3
  4780  0F03  0087               	movwf	7
  4781  0F04  30E8               	movlw	232
  4782  0F05  3FC0               	movwi [0]fsr1
  4783  0F06  3003               	movlw	3
  4784  0F07  3FC1               	movwi [1]fsr1
  4785                           
  4786                           ;OverTemperature_B1.c: 82: }
  4787                           ;OverTemperature_B1.c: 83: }
  4788                           ;OverTemperature_B1.c: 84: }
  4789  0F08  0008               	return
  4790  0F09                     l9434:	
  4791                           
  4792                           ;OverTemperature_B1.c: 85: else
  4793                           ;OverTemperature_B1.c: 86: {
  4794                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4795  0F09  0A7D               	incf	_Temp,w
  4796  0F0A  0086               	movwf	6
  4797  0F0B  3001               	movlw	1	; select bank2/3
  4798  0F0C  0087               	movwf	7
  4799  0F0D  3001               	movlw	1
  4800  0F0E  0781               	addwf	1,f
  4801  0F0F  3141               	addfsr 1,1
  4802  0F10  1803               	skipnc
  4803  0F11  0A81               	incf	1,f
  4804                           
  4805                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4806  0F12  0A7D               	incf	_Temp,w
  4807  0F13  0086               	movwf	6
  4808  0F14  3001               	movlw	1	; select bank2/3
  4809  0F15  0087               	movwf	7
  4810  0F16  3F40               	moviw [0]fsr1
  4811  0F17  0020               	movlb	0	; select bank0
  4812  0F18  00AD               	movwf	??_setTemp_Main
  4813  0F19  3F41               	moviw [1]fsr1
  4814  0F1A  00AE               	movwf	??_setTemp_Main+1
  4815  0F1B  3000               	movlw	0
  4816  0F1C  022E               	subwf	??_setTemp_Main+1,w
  4817  0F1D  3004               	movlw	4
  4818  0F1E  1903               	skipnz
  4819  0F1F  022D               	subwf	??_setTemp_Main,w
  4820  0F20  1C03               	skipc
  4821  0F21  0008               	return
  4822                           
  4823                           ;OverTemperature_B1.c: 89: {
  4824                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4825  0F22  0A7D               	incf	_Temp,w
  4826  0F23  0086               	movwf	6
  4827  0F24  3001               	movlw	1	; select bank2/3
  4828  0F25  0087               	movwf	7
  4829  0F26  3000               	movlw	0
  4830  0F27  3FC0               	movwi [0]fsr1
  4831  0F28  3FC1               	movwi [1]fsr1
  4832                           
  4833                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4834  0F29  087D               	movf	_Temp,w
  4835  0F2A  0086               	movwf	6
  4836  0F2B  3001               	movlw	1	; select bank2/3
  4837  0F2C  0087               	movwf	7
  4838  0F2D  1101               	bcf	1,2
  4839                           
  4840                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4841  0F2E  087D               	movf	_Temp,w
  4842  0F2F  3E08               	addlw	8
  4843  0F30  0086               	movwf	6
  4844  0F31  3001               	movlw	1	; select bank2/3
  4845  0F32  0087               	movwf	7
  4846  0F33  087D               	movf	_Temp,w
  4847  0F34  3E04               	addlw	4
  4848  0F35  0084               	movwf	4
  4849  0F36  3001               	movlw	1	; select bank2/3
  4850  0F37  0085               	movwf	5
  4851  0F38  3F40               	moviw [0]fsr1
  4852  0F39  3F80               	movwi [0]fsr0
  4853  0F3A  3F41               	moviw [1]fsr1
  4854  0F3B  3F81               	movwi [1]fsr0
  4855                           
  4856                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4857  0F3C  087D               	movf	_Temp,w
  4858  0F3D  0086               	movwf	6
  4859  0F3E  3001               	movlw	1	; select bank2/3
  4860  0F3F  0087               	movwf	7
  4861  0F40  1C81               	btfss	1,1
  4862  0F41  2F6F               	goto	l9456
  4863                           
  4864                           ;OverTemperature_B1.c: 94: {
  4865                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4866  0F42  087D               	movf	_Temp,w
  4867  0F43  3E04               	addlw	4
  4868  0F44  0086               	movwf	6
  4869  0F45  3001               	movlw	1	; select bank2/3
  4870  0F46  0087               	movwf	7
  4871  0F47  3F40               	moviw [0]fsr1
  4872  0F48  00AD               	movwf	??_setTemp_Main
  4873  0F49  3F41               	moviw [1]fsr1
  4874  0F4A  00AE               	movwf	??_setTemp_Main+1
  4875  0F4B  3002               	movlw	2
  4876  0F4C  022E               	subwf	??_setTemp_Main+1,w
  4877  0F4D  3058               	movlw	88
  4878  0F4E  1903               	skipnz
  4879  0F4F  022D               	subwf	??_setTemp_Main,w
  4880  0F50  1C03               	skipc
  4881  0F51  2F9D               	goto	l9466
  4882                           
  4883                           ;OverTemperature_B1.c: 96: {
  4884                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4885  0F52  3001               	movlw	1
  4886  0F53  00AD               	movwf	??_setTemp_Main
  4887  0F54  087D               	movf	_Temp,w
  4888  0F55  3E03               	addlw	3
  4889  0F56  0086               	movwf	6
  4890  0F57  3001               	movlw	1	; select bank2/3
  4891  0F58  0087               	movwf	7
  4892  0F59  082D               	movf	??_setTemp_Main,w
  4893  0F5A  0781               	addwf	1,f
  4894                           
  4895                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4896  0F5B  087D               	movf	_Temp,w
  4897  0F5C  3E03               	addlw	3
  4898  0F5D  0086               	movwf	6
  4899  0F5E  3001               	movlw	1	; select bank2/3
  4900  0F5F  0087               	movwf	7
  4901  0F60  3003               	movlw	3
  4902  0F61  0201               	subwf	1,w
  4903  0F62  1C03               	skipc
  4904  0F63  2FA3               	goto	l9468
  4905                           
  4906                           ;OverTemperature_B1.c: 99: {
  4907                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4908  0F64  087D               	movf	_Temp,w
  4909  0F65  3E03               	addlw	3
  4910  0F66  0086               	movwf	6
  4911  0F67  3001               	movlw	1	; select bank2/3
  4912  0F68  0087               	movwf	7
  4913  0F69  0181               	clrf	1
  4914                           
  4915                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4916  0F6A  3000               	movlw	0
  4917  0F6B  319C  24AF  318E   	fcall	_setOverTemp_Exceptions
  4918                           
  4919                           ;OverTemperature_B1.c: 102: }
  4920                           ;OverTemperature_B1.c: 103: }
  4921  0F6E  2FA3               	goto	l9468
  4922  0F6F                     l9456:	
  4923                           ;OverTemperature_B1.c: 107: }
  4924                           ;OverTemperature_B1.c: 108: }
  4925                           
  4926                           ;OverTemperature_B1.c: 104: else
  4927                           ;OverTemperature_B1.c: 105: {
  4928                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4929                           
  4930                           
  4931                           ;OverTemperature_B1.c: 109: else
  4932                           ;OverTemperature_B1.c: 110: {
  4933                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4934  0F6F  087D               	movf	_Temp,w
  4935  0F70  3E04               	addlw	4
  4936  0F71  0086               	movwf	6
  4937  0F72  3001               	movlw	1	; select bank2/3
  4938  0F73  0087               	movwf	7
  4939  0F74  3F40               	moviw [0]fsr1
  4940  0F75  0020               	movlb	0	; select bank0
  4941  0F76  00AD               	movwf	??_setTemp_Main
  4942  0F77  3F41               	moviw [1]fsr1
  4943  0F78  00AE               	movwf	??_setTemp_Main+1
  4944  0F79  3002               	movlw	2
  4945  0F7A  022E               	subwf	??_setTemp_Main+1,w
  4946  0F7B  3027               	movlw	39
  4947  0F7C  1903               	skipnz
  4948  0F7D  022D               	subwf	??_setTemp_Main,w
  4949  0F7E  1803               	skipnc
  4950  0F7F  2F9D               	goto	l9466
  4951                           
  4952                           ;OverTemperature_B1.c: 112: {
  4953                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4954  0F80  3001               	movlw	1
  4955  0F81  00AD               	movwf	??_setTemp_Main
  4956  0F82  087D               	movf	_Temp,w
  4957  0F83  3E03               	addlw	3
  4958  0F84  0086               	movwf	6
  4959  0F85  3001               	movlw	1	; select bank2/3
  4960  0F86  0087               	movwf	7
  4961  0F87  082D               	movf	??_setTemp_Main,w
  4962  0F88  0781               	addwf	1,f
  4963                           
  4964                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4965  0F89  087D               	movf	_Temp,w
  4966  0F8A  3E03               	addlw	3
  4967  0F8B  0086               	movwf	6
  4968  0F8C  3001               	movlw	1	; select bank2/3
  4969  0F8D  0087               	movwf	7
  4970  0F8E  3003               	movlw	3
  4971  0F8F  0201               	subwf	1,w
  4972  0F90  1C03               	skipc
  4973  0F91  2FA3               	goto	l9468
  4974                           
  4975                           ;OverTemperature_B1.c: 115: {
  4976                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4977  0F92  087D               	movf	_Temp,w
  4978  0F93  3E03               	addlw	3
  4979  0F94  0086               	movwf	6
  4980  0F95  3001               	movlw	1	; select bank2/3
  4981  0F96  0087               	movwf	7
  4982  0F97  0181               	clrf	1
  4983                           
  4984                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4985  0F98  3001               	movlw	1
  4986  0F99  319C  24AF  318E   	fcall	_setOverTemp_Exceptions
  4987                           
  4988                           ;OverTemperature_B1.c: 118: }
  4989                           ;OverTemperature_B1.c: 119: }
  4990  0F9C  2FA3               	goto	l9468
  4991  0F9D                     l9466:	
  4992                           
  4993                           ;OverTemperature_B1.c: 120: else
  4994                           ;OverTemperature_B1.c: 121: {
  4995                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  4996  0F9D  087D               	movf	_Temp,w
  4997  0F9E  3E03               	addlw	3
  4998  0F9F  0086               	movwf	6
  4999  0FA0  3001               	movlw	1	; select bank2/3
  5000  0FA1  0087               	movwf	7
  5001  0FA2  0181               	clrf	1
  5002  0FA3                     l9468:	
  5003                           
  5004                           ;OverTemperature_B1.c: 123: }
  5005                           ;OverTemperature_B1.c: 124: }
  5006                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5007  0FA3  087D               	movf	_Temp,w
  5008  0FA4  0086               	movwf	6
  5009  0FA5  3001               	movlw	1	; select bank2/3
  5010  0FA6  0087               	movwf	7
  5011  0FA7  1881               	btfsc	1,1
  5012  0FA8  2FAE               	goto	l9472
  5013                           
  5014                           ;OverTemperature_B1.c: 126: {
  5015                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5016  0FA9  087D               	movf	_Temp,w
  5017  0FAA  0086               	movwf	6
  5018  0FAB  3001               	movlw	1	; select bank2/3
  5019  0FAC  0087               	movwf	7
  5020  0FAD  1601               	bsf	1,4
  5021  0FAE                     l9472:	
  5022                           
  5023                           ;OverTemperature_B1.c: 128: }
  5024                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5025  0FAE  087D               	movf	_Temp,w
  5026  0FAF  3E04               	addlw	4
  5027  0FB0  0086               	movwf	6
  5028  0FB1  3001               	movlw	1	; select bank2/3
  5029  0FB2  0087               	movwf	7
  5030  0FB3  3F40               	moviw [0]fsr1
  5031  0FB4  0020               	movlb	0	; select bank0
  5032  0FB5  00AD               	movwf	??_setTemp_Main
  5033  0FB6  3F41               	moviw [1]fsr1
  5034  0FB7  00AE               	movwf	??_setTemp_Main+1
  5035  0FB8  082E               	movf	??_setTemp_Main+1,w
  5036  0FB9  00AF               	movwf	??_setTemp_Main+2
  5037  0FBA  086F               	movf	_Product,w
  5038  0FBB  3E18               	addlw	24
  5039  0FBC  0086               	movwf	6
  5040  0FBD  3001               	movlw	1	; select bank2/3
  5041  0FBE  0087               	movwf	7
  5042  0FBF  082F               	movf	??_setTemp_Main+2,w
  5043  0FC0  0081               	movwf	1
  5044                           
  5045                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5046  0FC1  087D               	movf	_Temp,w
  5047  0FC2  3E04               	addlw	4
  5048  0FC3  0086               	movwf	6
  5049  0FC4  3001               	movlw	1	; select bank2/3
  5050  0FC5  0087               	movwf	7
  5051  0FC6  0801               	movf	1,w
  5052  0FC7  00AD               	movwf	??_setTemp_Main
  5053  0FC8  086F               	movf	_Product,w
  5054  0FC9  3E19               	addlw	25
  5055  0FCA  0086               	movwf	6
  5056  0FCB  3001               	movlw	1	; select bank2/3
  5057  0FCC  0087               	movwf	7
  5058  0FCD  082D               	movf	??_setTemp_Main,w
  5059  0FCE  0081               	movwf	1
  5060                           
  5061                           ;OverTemperature_B1.c: 131: Product->Data[3]=Temp->AD >> 8;
  5062  0FCF  087D               	movf	_Temp,w
  5063  0FD0  3E04               	addlw	4
  5064  0FD1  0086               	movwf	6
  5065  0FD2  3001               	movlw	1	; select bank2/3
  5066  0FD3  0087               	movwf	7
  5067  0FD4  3F40               	moviw [0]fsr1
  5068  0FD5  00AD               	movwf	??_setTemp_Main
  5069  0FD6  3F41               	moviw [1]fsr1
  5070  0FD7  00AE               	movwf	??_setTemp_Main+1
  5071  0FD8  082E               	movf	??_setTemp_Main+1,w
  5072  0FD9  00AF               	movwf	??_setTemp_Main+2
  5073  0FDA  086F               	movf	_Product,w
  5074  0FDB  3E03               	addlw	3
  5075  0FDC  0086               	movwf	6
  5076  0FDD  3001               	movlw	1	; select bank2/3
  5077  0FDE  0087               	movwf	7
  5078  0FDF  082F               	movf	??_setTemp_Main+2,w
  5079  0FE0  0081               	movwf	1
  5080                           
  5081                           ;OverTemperature_B1.c: 132: Product->Data[4]=Temp->AD;
  5082  0FE1  087D               	movf	_Temp,w
  5083  0FE2  3E04               	addlw	4
  5084  0FE3  0086               	movwf	6
  5085  0FE4  3001               	movlw	1	; select bank2/3
  5086  0FE5  0087               	movwf	7
  5087  0FE6  0801               	movf	1,w
  5088  0FE7  00AD               	movwf	??_setTemp_Main
  5089  0FE8  086F               	movf	_Product,w
  5090  0FE9  3E04               	addlw	4
  5091  0FEA  0086               	movwf	6
  5092  0FEB  3001               	movlw	1	; select bank2/3
  5093  0FEC  0087               	movwf	7
  5094  0FED  082D               	movf	??_setTemp_Main,w
  5095  0FEE  0081               	movwf	1
  5096                           
  5097                           ;OverTemperature_B1.c: 133: Temp->ADH[0]=0;
  5098  0FEF  087D               	movf	_Temp,w
  5099  0FF0  3E06               	addlw	6
  5100  0FF1  0086               	movwf	6
  5101  0FF2  3001               	movlw	1	; select bank2/3
  5102  0FF3  0087               	movwf	7
  5103  0FF4  3000               	movlw	0
  5104  0FF5  3FC0               	movwi [0]fsr1
  5105  0FF6  3FC1               	movwi [1]fsr1
  5106                           
  5107                           ;OverTemperature_B1.c: 134: Temp->ADH[1]=0;
  5108  0FF7  087D               	movf	_Temp,w
  5109  0FF8  3E08               	addlw	8
  5110  0FF9  0086               	movwf	6
  5111  0FFA  3001               	movlw	1	; select bank2/3
  5112  0FFB  0087               	movwf	7
  5113  0FFC  3000               	movlw	0
  5114  0FFD  3FC0               	movwi [0]fsr1
  5115  0FFE  3FC1               	movwi [1]fsr1
  5116  0FFF  0008               	return
  5117  1000                     __end_of_setTemp_Main:	
  5118                           
  5119                           	psect	text7
  5120  1CAF                     __ptext7:	
  5121 ;; *************** function _setOverTemp_Exceptions *****************
  5122 ;; Defined at:
  5123 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  command         1    wreg     unsigned char 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  command         1   12[BANK0 ] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;		None               void
  5130 ;; Registers used:
  5131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;Total ram usage:        2 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    8
  5144 ;; This function calls:
  5145 ;;		_DimmerLights_Exceptions
  5146 ;;		_setBuz
  5147 ;;		_setLED
  5148 ;;		_setRF_Enable
  5149 ;;		_setSw_Enable
  5150 ;; This function is called by:
  5151 ;;		_setTemp_Main
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           
  5156                           ;psect for function _setOverTemp_Exceptions
  5157  1CAF                     _setOverTemp_Exceptions:	
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5161                           ;setOverTemp_Exceptions@command stored from wreg
  5162  1CAF  0020               	movlb	0	; select bank0
  5163  1CB0  00AC               	movwf	setOverTemp_Exceptions@command
  5164                           
  5165                           ;OverTemperature_B1.c: 142: Temp->ERROR=command;
  5166  1CB1  087D               	movf	_Temp,w
  5167  1CB2  0086               	movwf	6
  5168  1CB3  3001               	movlw	1	; select bank2/3
  5169  1CB4  0087               	movwf	7
  5170  1CB5  082C               	movf	setOverTemp_Exceptions@command,w
  5171  1CB6  1081               	bcf	1,1
  5172  1CB7  1D03               	skipz
  5173  1CB8  1481               	bsf	1,1
  5174                           
  5175                           ;OverTemperature_B1.c: 143: Temp->Safe=(~command) & 0x01;
  5176  1CB9  092C               	comf	setOverTemp_Exceptions@command,w
  5177  1CBA  3901               	andlw	1
  5178  1CBB  00AB               	movwf	??_setOverTemp_Exceptions
  5179  1CBC  087D               	movf	_Temp,w
  5180  1CBD  0086               	movwf	6
  5181  1CBE  3001               	movlw	1	; select bank2/3
  5182  1CBF  0087               	movwf	7
  5183  1CC0  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5184  1CC1  0801               	movf	1,w
  5185  1CC2  062B               	xorwf	??_setOverTemp_Exceptions,w
  5186  1CC3  39EF               	andlw	-17
  5187  1CC4  062B               	xorwf	??_setOverTemp_Exceptions,w
  5188  1CC5  0081               	movwf	1
  5189                           
  5190                           ;OverTemperature_B1.c: 144: if(command)
  5191  1CC6  082C               	movf	setOverTemp_Exceptions@command,w
  5192  1CC7  1903               	btfsc	3,2
  5193  1CC8  2CCE               	goto	l9070
  5194                           
  5195                           ;OverTemperature_B1.c: 145: {
  5196                           ;OverTemperature_B1.c: 146: DimmerLights_Exceptions(1);
  5197  1CC9  3001               	movlw	1
  5198  1CCA  3190  20C0  319C   	fcall	_DimmerLights_Exceptions
  5199                           
  5200                           ;OverTemperature_B1.c: 147: }
  5201  1CCD  2CD7               	goto	l2160
  5202  1CCE                     l9070:	
  5203                           
  5204                           ;OverTemperature_B1.c: 148: else
  5205                           ;OverTemperature_B1.c: 149: {
  5206                           ;OverTemperature_B1.c: 150: setBuz(2,100);
  5207  1CCE  3064               	movlw	100
  5208  1CCF  0020               	movlb	0	; select bank0
  5209  1CD0  00A6               	movwf	setBuz@time
  5210  1CD1  3000               	movlw	0
  5211  1CD2  00A7               	movwf	setBuz@time+1
  5212  1CD3  3002               	movlw	2
  5213  1CD4  3193  234E  319C   	fcall	_setBuz
  5214  1CD7                     l2160:	
  5215                           
  5216                           ;OverTemperature_B1.c: 151: }
  5217                           ;OverTemperature_B1.c: 154: setLED(99,command+10);
  5218  1CD7  0020               	movlb	0	; select bank0
  5219  1CD8  082C               	movf	setOverTemp_Exceptions@command,w
  5220  1CD9  3E0A               	addlw	10
  5221  1CDA  00AB               	movwf	??_setOverTemp_Exceptions
  5222  1CDB  082B               	movf	??_setOverTemp_Exceptions,w
  5223  1CDC  00A2               	movwf	setLED@command
  5224  1CDD  3063               	movlw	99
  5225  1CDE  319F  2741  319C   	fcall	_setLED
  5226                           
  5227                           ;OverTemperature_B1.c: 156: setSw_Enable((~command) & 0x01);
  5228  1CE1  0020               	movlb	0	; select bank0
  5229  1CE2  092C               	comf	setOverTemp_Exceptions@command,w
  5230  1CE3  3901               	andlw	1
  5231  1CE4  31A7  2748  319C   	fcall	_setSw_Enable
  5232                           
  5233                           ;OverTemperature_B1.c: 158: setRF_Enable(1,(~command) & 0x01);
  5234  1CE7  0020               	movlb	0	; select bank0
  5235  1CE8  092C               	comf	setOverTemp_Exceptions@command,w
  5236  1CE9  3901               	andlw	1
  5237  1CEA  00AB               	movwf	??_setOverTemp_Exceptions
  5238  1CEB  082B               	movf	??_setOverTemp_Exceptions,w
  5239  1CEC  00A2               	movwf	setRF_Enable@command
  5240  1CED  3001               	movlw	1
  5241  1CEE  3199  21A3         	fcall	_setRF_Enable
  5242  1CF0  0008               	return
  5243  1CF1                     __end_of_setOverTemp_Exceptions:	
  5244                           
  5245                           	psect	text8
  5246  2399                     __ptext8:	
  5247 ;; *************** function _Temp_Initialization *****************
  5248 ;; Defined at:
  5249 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;		None
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;Total ram usage:        0 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    5
  5270 ;; This function calls:
  5271 ;;		_setTemp_Initialization
  5272 ;; This function is called by:
  5273 ;;		_main
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _Temp_Initialization
  5279  2399                     _Temp_Initialization:	
  5280                           
  5281                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5285  2399  31A4  247F         	fcall	_setTemp_Initialization
  5286  239B  0008               	return
  5287  239C                     __end_of_Temp_Initialization:	
  5288                           
  5289                           	psect	text9
  5290  247F                     __ptext9:	
  5291 ;; *************** function _setTemp_Initialization *****************
  5292 ;; Defined at:
  5293 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;		None               void
  5300 ;; Registers used:
  5301 ;;		wreg, fsr1l, fsr1h
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;Total ram usage:        1 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    4
  5314 ;; This function calls:
  5315 ;;		Nothing
  5316 ;; This function is called by:
  5317 ;;		_Temp_Initialization
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _setTemp_Initialization
  5323  247F                     _setTemp_Initialization:	
  5324                           
  5325                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5326                           
  5327                           ;incstack = 0
  5328                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5329  247F  3020               	movlw	_Temp1& (0+255)
  5330  2480  0020               	movlb	0	; select bank0
  5331  2481  00A0               	movwf	??_setTemp_Initialization
  5332  2482  0820               	movf	??_setTemp_Initialization,w
  5333  2483  00FD               	movwf	_Temp
  5334                           
  5335                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5336  2484  087D               	movf	_Temp,w
  5337  2485  0086               	movwf	6
  5338  2486  3001               	movlw	1	; select bank2/3
  5339  2487  0087               	movwf	7
  5340  2488  1601               	bsf	1,4
  5341  2489  0008               	return
  5342  248A                     __end_of_setTemp_Initialization:	
  5343                           
  5344                           	psect	text10
  5345  2403                     __ptext10:	
  5346 ;; *************** function _Switch_Main *****************
  5347 ;; Defined at:
  5348 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;Total ram usage:        0 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    8
  5369 ;; This function calls:
  5370 ;;		_setSw_Main
  5371 ;; This function is called by:
  5372 ;;		_main
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _Switch_Main
  5378  2403                     _Switch_Main:	
  5379                           
  5380                           ;Switch_B1.c: 65: setSw_Main(1);
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5384  2403  3001               	movlw	1
  5385  2404  3186  2650  31A4   	fcall	_setSw_Main
  5386                           
  5387                           ;Switch_B1.c: 69: setSw_Main(2);
  5388  2407  3002               	movlw	2
  5389  2408  3186  2650         	fcall	_setSw_Main
  5390  240A  0008               	return
  5391  240B                     __end_of_Switch_Main:	
  5392                           
  5393                           	psect	text11
  5394  0650                     __ptext11:	
  5395 ;; *************** function _setSw_Main *****************
  5396 ;; Defined at:
  5397 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  sw              1    wreg     unsigned char 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  sw              1   16[BANK0 ] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;Total ram usage:        5 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    7
  5418 ;; This function calls:
  5419 ;;		_SwPointSelect
  5420 ;;		_Sw_DimmerAdjFunc
  5421 ;;		_Sw_DimmerOffFunc
  5422 ;;		_Sw_DimmerOnFunc
  5423 ;;		_setBuz
  5424 ;;		_setRF_Learn
  5425 ;; This function is called by:
  5426 ;;		_Switch_Main
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _setSw_Main
  5432  0650                     _setSw_Main:	
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5436                           ;setSw_Main@sw stored from wreg
  5437  0650  0020               	movlb	0	; select bank0
  5438  0651  00B0               	movwf	setSw_Main@sw
  5439                           
  5440                           ;Switch_B1.c: 114: if(Sw->Enable)
  5441  0652  086D               	movf	_Sw,w
  5442  0653  0086               	movwf	6
  5443  0654  3001               	movlw	1	; select bank2/3
  5444  0655  0087               	movwf	7
  5445  0656  1C01               	btfss	1,0
  5446  0657  0008               	return
  5447                           
  5448                           ;Switch_B1.c: 115: {
  5449                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5450  0658  0830               	movf	setSw_Main@sw,w
  5451  0659  3198  2066  3186   	fcall	_SwPointSelect
  5452                           
  5453                           ;Switch_B1.c: 133: if(sw == 1)
  5454  065C  0020               	movlb	0	; select bank0
  5455  065D  0830               	movf	setSw_Main@sw,w
  5456  065E  3A01               	xorlw	1
  5457  065F  1D03               	skipz
  5458  0660  2E6D               	goto	l9614
  5459                           
  5460                           ;Switch_B1.c: 134: {
  5461                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  5462  0661  01AE               	clrf	_setSw_Main$4703
  5463  0662  0AAE               	incf	_setSw_Main$4703,f
  5464  0663  1F0C               	btfss	12,6	;volatile
  5465  0664  1A0C               	btfsc	12,4	;volatile
  5466  0665  2E67               	goto	l9612
  5467  0666  01AE               	clrf	_setSw_Main$4703
  5468  0667                     l9612:	
  5469  0667  086D               	movf	_Sw,w
  5470  0668  0086               	movwf	6
  5471  0669  3001               	movlw	1	; select bank2/3
  5472  066A  0087               	movwf	7
  5473  066B  082E               	movf	_setSw_Main$4703,w
  5474  066C  2E7C               	goto	L2
  5475  066D                     l9614:	
  5476                           ;Switch_B1.c: 136: }
  5477                           
  5478                           
  5479                           ;Switch_B1.c: 137: else if(sw == 2)
  5480  066D  0830               	movf	setSw_Main@sw,w
  5481  066E  3A02               	xorlw	2
  5482  066F  1D03               	skipz
  5483  0670  2E7F               	goto	l9624
  5484                           
  5485                           ;Switch_B1.c: 138: {
  5486                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  5487  0671  01AF               	clrf	_setSw_Main$4704
  5488  0672  0AAF               	incf	_setSw_Main$4704,f
  5489  0673  1C0C               	btfss	12,0	;volatile
  5490  0674  188D               	btfsc	13,1	;volatile
  5491  0675  2E77               	goto	l9622
  5492  0676  01AF               	clrf	_setSw_Main$4704
  5493  0677                     l9622:	
  5494  0677  086D               	movf	_Sw,w
  5495  0678  0086               	movwf	6
  5496  0679  3001               	movlw	1	; select bank2/3
  5497  067A  0087               	movwf	7
  5498  067B  082F               	movf	_setSw_Main$4704,w
  5499  067C                     L2:	
  5500  067C  1081               	bcf	1,1
  5501  067D  1D03               	skipz
  5502  067E  1481               	bsf	1,1
  5503  067F                     l9624:	
  5504                           
  5505                           ;Switch_B1.c: 140: }
  5506                           ;Switch_B1.c: 148: if(Sw->Touch)
  5507  067F  086D               	movf	_Sw,w
  5508  0680  0086               	movwf	6
  5509  0681  3001               	movlw	1	; select bank2/3
  5510  0682  0087               	movwf	7
  5511  0683  1C81               	btfss	1,1
  5512  0684  2F56               	goto	l9672
  5513                           
  5514                           ;Switch_B1.c: 149: {
  5515                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5516  0685  086D               	movf	_Sw,w
  5517  0686  0086               	movwf	6
  5518  0687  3001               	movlw	1	; select bank2/3
  5519  0688  0087               	movwf	7
  5520  0689  1901               	btfsc	1,2
  5521  068A  2EAC               	goto	l9638
  5522                           
  5523                           ;Switch_B1.c: 151: {
  5524                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5525  068B  3001               	movlw	1
  5526  068C  00AC               	movwf	??_setSw_Main
  5527  068D  086D               	movf	_Sw,w
  5528  068E  3E02               	addlw	2
  5529  068F  0086               	movwf	6
  5530  0690  3001               	movlw	1	; select bank2/3
  5531  0691  0087               	movwf	7
  5532  0692  082C               	movf	??_setSw_Main,w
  5533  0693  0781               	addwf	1,f
  5534                           
  5535                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5536  0694  086D               	movf	_Sw,w
  5537  0695  3E02               	addlw	2
  5538  0696  0086               	movwf	6
  5539  0697  3001               	movlw	1	; select bank2/3
  5540  0698  0087               	movwf	7
  5541  0699  3005               	movlw	5
  5542  069A  0201               	subwf	1,w
  5543  069B  1C03               	skipc
  5544  069C  0008               	return
  5545                           
  5546                           ;Switch_B1.c: 154: {
  5547                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5548  069D  086D               	movf	_Sw,w
  5549  069E  3E02               	addlw	2
  5550  069F  0086               	movwf	6
  5551  06A0  3001               	movlw	1	; select bank2/3
  5552  06A1  0087               	movwf	7
  5553  06A2  0181               	clrf	1
  5554                           
  5555                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5556  06A3  086D               	movf	_Sw,w
  5557  06A4  0086               	movwf	6
  5558  06A5  3001               	movlw	1	; select bank2/3
  5559  06A6  0087               	movwf	7
  5560  06A7  1501               	bsf	1,2
  5561                           
  5562                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5563  06A8  0830               	movf	setSw_Main@sw,w
  5564  06A9  3191  21FF         	fcall	_Sw_DimmerOnFunc
  5565                           
  5566                           ;Switch_B1.c: 162: }
  5567                           ;Switch_B1.c: 163: }
  5568  06AB  0008               	return
  5569  06AC                     l9638:	
  5570                           
  5571                           ;Switch_B1.c: 164: else
  5572                           ;Switch_B1.c: 165: {
  5573                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5574  06AC  0020               	movlb	0	; select bank0
  5575  06AD  086D               	movf	_Sw,w
  5576  06AE  0086               	movwf	6
  5577  06AF  3001               	movlw	1	; select bank2/3
  5578  06B0  0087               	movwf	7
  5579  06B1  1981               	btfsc	1,3
  5580  06B2  2EDE               	goto	l9648
  5581                           
  5582                           ;Switch_B1.c: 167: {
  5583                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5584  06B3  086D               	movf	_Sw,w
  5585  06B4  3E03               	addlw	3
  5586  06B5  0086               	movwf	6
  5587  06B6  3001               	movlw	1	; select bank2/3
  5588  06B7  0087               	movwf	7
  5589  06B8  3001               	movlw	1
  5590  06B9  0781               	addwf	1,f
  5591  06BA  3141               	addfsr 1,1
  5592  06BB  1803               	skipnc
  5593  06BC  0A81               	incf	1,f
  5594                           
  5595                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5596  06BD  086D               	movf	_Sw,w
  5597  06BE  3E03               	addlw	3
  5598  06BF  0086               	movwf	6
  5599  06C0  3001               	movlw	1	; select bank2/3
  5600  06C1  0087               	movwf	7
  5601  06C2  3F40               	moviw [0]fsr1
  5602  06C3  00AC               	movwf	??_setSw_Main
  5603  06C4  3F41               	moviw [1]fsr1
  5604  06C5  00AD               	movwf	??_setSw_Main+1
  5605  06C6  3000               	movlw	0
  5606  06C7  022D               	subwf	??_setSw_Main+1,w
  5607  06C8  3096               	movlw	150
  5608  06C9  1903               	skipnz
  5609  06CA  022C               	subwf	??_setSw_Main,w
  5610  06CB  1C03               	skipc
  5611  06CC  0008               	return
  5612                           
  5613                           ;Switch_B1.c: 170: {
  5614                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5615  06CD  086D               	movf	_Sw,w
  5616  06CE  3E03               	addlw	3
  5617  06CF  0086               	movwf	6
  5618  06D0  3001               	movlw	1	; select bank2/3
  5619  06D1  0087               	movwf	7
  5620  06D2  3000               	movlw	0
  5621  06D3  3FC0               	movwi [0]fsr1
  5622  06D4  3FC1               	movwi [1]fsr1
  5623                           
  5624                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5625  06D5  086D               	movf	_Sw,w
  5626  06D6  0086               	movwf	6
  5627  06D7  3001               	movlw	1	; select bank2/3
  5628  06D8  0087               	movwf	7
  5629  06D9  1581               	bsf	1,3
  5630                           
  5631                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5632  06DA  0830               	movf	setSw_Main@sw,w
  5633  06DB  3199  212C         	fcall	_Sw_DimmerAdjFunc
  5634                           
  5635                           ;Switch_B1.c: 178: }
  5636                           ;Switch_B1.c: 179: }
  5637  06DD  0008               	return
  5638  06DE                     l9648:	
  5639                           
  5640                           ;Switch_B1.c: 180: else
  5641                           ;Switch_B1.c: 181: {
  5642                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5643  06DE  0020               	movlb	0	; select bank0
  5644  06DF  086D               	movf	_Sw,w
  5645  06E0  0086               	movwf	6
  5646  06E1  3001               	movlw	1	; select bank2/3
  5647  06E2  0087               	movwf	7
  5648  06E3  1A01               	btfsc	1,4
  5649  06E4  2F23               	goto	l9662
  5650                           
  5651                           ;Switch_B1.c: 183: {
  5652                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5653  06E5  086D               	movf	_Sw,w
  5654  06E6  3E05               	addlw	5
  5655  06E7  0086               	movwf	6
  5656  06E8  3001               	movlw	1	; select bank2/3
  5657  06E9  0087               	movwf	7
  5658  06EA  3001               	movlw	1
  5659  06EB  0781               	addwf	1,f
  5660  06EC  3141               	addfsr 1,1
  5661  06ED  1803               	skipnc
  5662  06EE  0A81               	incf	1,f
  5663                           
  5664                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5665  06EF  086D               	movf	_Sw,w
  5666  06F0  3E05               	addlw	5
  5667  06F1  0086               	movwf	6
  5668  06F2  3001               	movlw	1	; select bank2/3
  5669  06F3  0087               	movwf	7
  5670  06F4  3F40               	moviw [0]fsr1
  5671  06F5  00AC               	movwf	??_setSw_Main
  5672  06F6  3F41               	moviw [1]fsr1
  5673  06F7  00AD               	movwf	??_setSw_Main+1
  5674  06F8  3000               	movlw	0
  5675  06F9  022D               	subwf	??_setSw_Main+1,w
  5676  06FA  3096               	movlw	150
  5677  06FB  1903               	skipnz
  5678  06FC  022C               	subwf	??_setSw_Main,w
  5679  06FD  1C03               	skipc
  5680  06FE  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 186: {
  5683                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5684  06FF  086D               	movf	_Sw,w
  5685  0700  3E05               	addlw	5
  5686  0701  0086               	movwf	6
  5687  0702  3001               	movlw	1	; select bank2/3
  5688  0703  0087               	movwf	7
  5689  0704  3000               	movlw	0
  5690  0705  3FC0               	movwi [0]fsr1
  5691  0706  3FC1               	movwi [1]fsr1
  5692                           
  5693                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5694  0707  086D               	movf	_Sw,w
  5695  0708  0086               	movwf	6
  5696  0709  3001               	movlw	1	; select bank2/3
  5697  070A  0087               	movwf	7
  5698  070B  1601               	bsf	1,4
  5699                           
  5700                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5701  070C  01A2               	clrf	setRF_Learn@command
  5702  070D  0AA2               	incf	setRF_Learn@command,f
  5703  070E  3001               	movlw	1
  5704  070F  31A5  2514  3186   	fcall	_setRF_Learn
  5705                           
  5706                           ;Switch_B1.c: 194: if(TMain->First)
  5707  0712  0021               	movlb	1	; select bank1
  5708  0713  0869               	movf	_TMain^(0+128),w
  5709  0714  3E03               	addlw	3
  5710  0715  0086               	movwf	6
  5711  0716  3001               	movlw	1	; select bank2/3
  5712  0717  0087               	movwf	7
  5713  0718  1C81               	btfss	1,1
  5714  0719  0008               	return
  5715                           
  5716                           ;Switch_B1.c: 195: {
  5717                           ;Switch_B1.c: 196: setBuz(2,100);
  5718  071A  3064               	movlw	100
  5719  071B  0020               	movlb	0	; select bank0
  5720  071C  00A6               	movwf	setBuz@time
  5721  071D  3000               	movlw	0
  5722  071E  00A7               	movwf	setBuz@time+1
  5723  071F  3002               	movlw	2
  5724  0720  3193  234E         	fcall	_setBuz
  5725                           
  5726                           ;Switch_B1.c: 197: }
  5727                           ;Switch_B1.c: 199: }
  5728                           ;Switch_B1.c: 200: }
  5729  0722  0008               	return
  5730  0723                     l9662:	
  5731                           
  5732                           ;Switch_B1.c: 201: else
  5733                           ;Switch_B1.c: 202: {
  5734                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5735  0723  0020               	movlb	0	; select bank0
  5736  0724  086D               	movf	_Sw,w
  5737  0725  0086               	movwf	6
  5738  0726  3001               	movlw	1	; select bank2/3
  5739  0727  0087               	movwf	7
  5740  0728  1A81               	btfsc	1,5
  5741  0729  0008               	return
  5742                           
  5743                           ;Switch_B1.c: 204: {
  5744                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5745  072A  086D               	movf	_Sw,w
  5746  072B  3E07               	addlw	7
  5747  072C  0086               	movwf	6
  5748  072D  3001               	movlw	1	; select bank2/3
  5749  072E  0087               	movwf	7
  5750  072F  3001               	movlw	1
  5751  0730  0781               	addwf	1,f
  5752  0731  3141               	addfsr 1,1
  5753  0732  1803               	skipnc
  5754  0733  0A81               	incf	1,f
  5755                           
  5756                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5757  0734  086D               	movf	_Sw,w
  5758  0735  3E07               	addlw	7
  5759  0736  0086               	movwf	6
  5760  0737  3001               	movlw	1	; select bank2/3
  5761  0738  0087               	movwf	7
  5762  0739  3F40               	moviw [0]fsr1
  5763  073A  00AC               	movwf	??_setSw_Main
  5764  073B  3F41               	moviw [1]fsr1
  5765  073C  00AD               	movwf	??_setSw_Main+1
  5766  073D  3001               	movlw	1
  5767  073E  022D               	subwf	??_setSw_Main+1,w
  5768  073F  302C               	movlw	44
  5769  0740  1903               	skipnz
  5770  0741  022C               	subwf	??_setSw_Main,w
  5771  0742  1C03               	skipc
  5772  0743  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 207: {
  5775                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5776  0744  086D               	movf	_Sw,w
  5777  0745  3E07               	addlw	7
  5778  0746  0086               	movwf	6
  5779  0747  3001               	movlw	1	; select bank2/3
  5780  0748  0087               	movwf	7
  5781  0749  3000               	movlw	0
  5782  074A  3FC0               	movwi [0]fsr1
  5783  074B  3FC1               	movwi [1]fsr1
  5784                           
  5785                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5786  074C  086D               	movf	_Sw,w
  5787  074D  0086               	movwf	6
  5788  074E  3001               	movlw	1	; select bank2/3
  5789  074F  0087               	movwf	7
  5790  0750  1681               	bsf	1,5
  5791                           
  5792                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5793  0751  01A2               	clrf	setRF_Learn@command
  5794  0752  3001               	movlw	1
  5795  0753  31A5  2514         	fcall	_setRF_Learn
  5796                           
  5797                           ;Switch_B1.c: 215: }
  5798                           ;Switch_B1.c: 216: }
  5799                           ;Switch_B1.c: 217: }
  5800                           ;Switch_B1.c: 218: }
  5801                           ;Switch_B1.c: 219: }
  5802                           ;Switch_B1.c: 220: }
  5803  0755  0008               	return
  5804  0756                     l9672:	
  5805                           
  5806                           ;Switch_B1.c: 221: else
  5807                           ;Switch_B1.c: 222: {
  5808                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5809  0756  0020               	movlb	0	; select bank0
  5810  0757  086D               	movf	_Sw,w
  5811  0758  0086               	movwf	6
  5812  0759  3001               	movlw	1	; select bank2/3
  5813  075A  0087               	movwf	7
  5814  075B  1D01               	btfss	1,2
  5815  075C  0008               	return
  5816                           
  5817                           ;Switch_B1.c: 224: {
  5818                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5819  075D  3001               	movlw	1
  5820  075E  00AC               	movwf	??_setSw_Main
  5821  075F  086D               	movf	_Sw,w
  5822  0760  3E02               	addlw	2
  5823  0761  0086               	movwf	6
  5824  0762  3001               	movlw	1	; select bank2/3
  5825  0763  0087               	movwf	7
  5826  0764  082C               	movf	??_setSw_Main,w
  5827  0765  0781               	addwf	1,f
  5828                           
  5829                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5830  0766  086D               	movf	_Sw,w
  5831  0767  3E02               	addlw	2
  5832  0768  0086               	movwf	6
  5833  0769  3001               	movlw	1	; select bank2/3
  5834  076A  0087               	movwf	7
  5835  076B  3005               	movlw	5
  5836  076C  0201               	subwf	1,w
  5837  076D  1C03               	skipc
  5838  076E  0008               	return
  5839                           
  5840                           ;Switch_B1.c: 227: {
  5841                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5842  076F  086D               	movf	_Sw,w
  5843  0770  3E02               	addlw	2
  5844  0771  0086               	movwf	6
  5845  0772  3001               	movlw	1	; select bank2/3
  5846  0773  0087               	movwf	7
  5847  0774  0181               	clrf	1
  5848                           
  5849                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5850  0775  086D               	movf	_Sw,w
  5851  0776  0086               	movwf	6
  5852  0777  3001               	movlw	1	; select bank2/3
  5853  0778  0087               	movwf	7
  5854  0779  1101               	bcf	1,2
  5855                           
  5856                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5857  077A  086D               	movf	_Sw,w
  5858  077B  3E03               	addlw	3
  5859  077C  0086               	movwf	6
  5860  077D  3001               	movlw	1	; select bank2/3
  5861  077E  0087               	movwf	7
  5862  077F  3000               	movlw	0
  5863  0780  3FC0               	movwi [0]fsr1
  5864  0781  3FC1               	movwi [1]fsr1
  5865                           
  5866                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5867  0782  086D               	movf	_Sw,w
  5868  0783  0086               	movwf	6
  5869  0784  3001               	movlw	1	; select bank2/3
  5870  0785  0087               	movwf	7
  5871  0786  1181               	bcf	1,3
  5872                           
  5873                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5874  0787  086D               	movf	_Sw,w
  5875  0788  3E05               	addlw	5
  5876  0789  0086               	movwf	6
  5877  078A  3001               	movlw	1	; select bank2/3
  5878  078B  0087               	movwf	7
  5879  078C  3000               	movlw	0
  5880  078D  3FC0               	movwi [0]fsr1
  5881  078E  3FC1               	movwi [1]fsr1
  5882                           
  5883                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5884  078F  086D               	movf	_Sw,w
  5885  0790  0086               	movwf	6
  5886  0791  3001               	movlw	1	; select bank2/3
  5887  0792  0087               	movwf	7
  5888  0793  1201               	bcf	1,4
  5889                           
  5890                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5891  0794  086D               	movf	_Sw,w
  5892  0795  3E07               	addlw	7
  5893  0796  0086               	movwf	6
  5894  0797  3001               	movlw	1	; select bank2/3
  5895  0798  0087               	movwf	7
  5896  0799  3000               	movlw	0
  5897  079A  3FC0               	movwi [0]fsr1
  5898  079B  3FC1               	movwi [1]fsr1
  5899                           
  5900                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5901  079C  086D               	movf	_Sw,w
  5902  079D  0086               	movwf	6
  5903  079E  3001               	movlw	1	; select bank2/3
  5904  079F  0087               	movwf	7
  5905  07A0  1281               	bcf	1,5
  5906                           
  5907                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5908  07A1  0830               	movf	setSw_Main@sw,w
  5909  07A2  3192  22DD  3186   	fcall	_Sw_DimmerOffFunc
  5910                           
  5911                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5912  07A5  0020               	movlb	0	; select bank0
  5913  07A6  01A2               	clrf	setRF_Learn@command
  5914  07A7  3001               	movlw	1
  5915  07A8  31A5  2514         	fcall	_setRF_Learn
  5916  07AA  0008               	return
  5917  07AB                     __end_of_setSw_Main:	
  5918                           
  5919                           	psect	text12
  5920  2514                     __ptext12:	
  5921 ;; *************** function _setRF_Learn *****************
  5922 ;; Defined at:
  5923 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  rf              1    wreg     unsigned char 
  5926 ;;  command         1    2[BANK0 ] unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  rf              1    3[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;		None               void
  5931 ;; Registers used:
  5932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5938 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;Total ram usage:        2 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    5
  5945 ;; This function calls:
  5946 ;;		_RfPointSelect
  5947 ;; This function is called by:
  5948 ;;		_setSw_Main
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _setRF_Learn
  5954  2514                     _setRF_Learn:	
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5958                           ;setRF_Learn@rf stored from wreg
  5959  2514  0020               	movlb	0	; select bank0
  5960  2515  00A3               	movwf	setRF_Learn@rf
  5961                           
  5962                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5963  2516  0823               	movf	setRF_Learn@rf,w
  5964  2517  31A4  243D         	fcall	_RfPointSelect
  5965                           
  5966                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5967  2519  087C               	movf	_RF,w
  5968  251A  0086               	movwf	6
  5969  251B  0187               	clrf	7
  5970  251C  0020               	movlb	0	; select bank0
  5971  251D  0822               	movf	setRF_Learn@command,w
  5972  251E  1301               	bcf	1,6
  5973  251F  1D03               	skipz
  5974  2520  1701               	bsf	1,6
  5975  2521  0008               	return
  5976  2522                     __end_of_setRF_Learn:	
  5977                           
  5978                           	psect	text13
  5979  11FF                     __ptext13:	
  5980 ;; *************** function _Sw_DimmerOnFunc *****************
  5981 ;; Defined at:
  5982 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  sw              1    wreg     unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  sw              1   11[BANK0 ] unsigned char 
  5987 ;;  Idle            1   10[BANK0 ] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;Total ram usage:        2 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    6
  6004 ;; This function calls:
  6005 ;;		_setBuz
  6006 ;;		_setDimmerLights_Switch
  6007 ;;		_setDimmerLights_Trigger
  6008 ;;		_setRFSW_Status
  6009 ;;		_setRF_DimmerLights
  6010 ;;		_setTxData
  6011 ;; This function is called by:
  6012 ;;		_setSw_Main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function _Sw_DimmerOnFunc
  6018  11FF                     _Sw_DimmerOnFunc:	
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6022                           ;Sw_DimmerOnFunc@sw stored from wreg
  6023  11FF  0020               	movlb	0	; select bank0
  6024  1200  00AB               	movwf	Sw_DimmerOnFunc@sw
  6025                           
  6026                           ;Switch_B1.c: 253: char Idle=1;
  6027  1201  01AA               	clrf	Sw_DimmerOnFunc@Idle
  6028  1202  0AAA               	incf	Sw_DimmerOnFunc@Idle,f
  6029                           
  6030                           ;Switch_B1.c: 270: if(sw == 1)
  6031  1203  082B               	movf	Sw_DimmerOnFunc@sw,w
  6032  1204  3A01               	xorlw	1
  6033  1205  1D03               	skipz
  6034  1206  2A09               	goto	l9146
  6035                           
  6036                           ;Switch_B1.c: 271: {
  6037                           ;Switch_B1.c: 272: Idle=(DimmerLights22->AdjGo)?0:1;
  6038  1207  087A               	movf	_DimmerLights22,w
  6039  1208  2A0E               	goto	L3
  6040  1209                     l9146:	
  6041                           ;Switch_B1.c: 273: }
  6042                           
  6043                           
  6044                           ;Switch_B1.c: 274: else if(sw == 2)
  6045  1209  082B               	movf	Sw_DimmerOnFunc@sw,w
  6046  120A  3A02               	xorlw	2
  6047  120B  1D03               	skipz
  6048  120C  2A19               	goto	l9150
  6049                           
  6050                           ;Switch_B1.c: 275: {
  6051                           ;Switch_B1.c: 276: Idle=(DimmerLights11->AdjGo)?0:1;
  6052  120D  0879               	movf	_DimmerLights11,w
  6053  120E                     L3:	
  6054  120E  3E09               	addlw	9
  6055  120F  0086               	movwf	6
  6056  1210  3001               	movlw	1	; select bank2/3
  6057  1211  0087               	movwf	7
  6058  1212  1003               	clrc
  6059  1213  1D01               	btfss	1,2
  6060  1214  1403               	setc
  6061  1215  3000               	movlw	0
  6062  1216  1803               	btfsc	3,0
  6063  1217  3001               	movlw	1
  6064  1218  00AA               	movwf	Sw_DimmerOnFunc@Idle
  6065  1219                     l9150:	
  6066                           
  6067                           ;Switch_B1.c: 277: }
  6068                           ;Switch_B1.c: 280: if(Idle)
  6069  1219  082A               	movf	Sw_DimmerOnFunc@Idle,w
  6070  121A  1903               	btfsc	3,2
  6071  121B  0008               	return
  6072                           
  6073                           ;Switch_B1.c: 281: {
  6074                           ;Switch_B1.c: 282: Sw->Flag=1;
  6075  121C  086D               	movf	_Sw,w
  6076  121D  0086               	movwf	6
  6077  121E  3001               	movlw	1	; select bank2/3
  6078  121F  0087               	movwf	7
  6079  1220  1781               	bsf	1,7
  6080                           
  6081                           ;Switch_B1.c: 283: setBuz(1,100);
  6082  1221  3064               	movlw	100
  6083  1222  00A6               	movwf	setBuz@time
  6084  1223  3000               	movlw	0
  6085  1224  00A7               	movwf	setBuz@time+1
  6086  1225  3001               	movlw	1
  6087  1226  3193  234E  3191   	fcall	_setBuz
  6088                           
  6089                           ;Switch_B1.c: 284: if(!Sw->Status)
  6090  1229  0020               	movlb	0	; select bank0
  6091  122A  086D               	movf	_Sw,w
  6092  122B  0086               	movwf	6
  6093  122C  3001               	movlw	1	; select bank2/3
  6094  122D  0087               	movwf	7
  6095  122E  1B01               	btfsc	1,6
  6096  122F  2A5B               	goto	l9170
  6097                           
  6098                           ;Switch_B1.c: 285: {
  6099                           ;Switch_B1.c: 286: Sw->Status=1;
  6100  1230  086D               	movf	_Sw,w
  6101  1231  0086               	movwf	6
  6102  1232  3001               	movlw	1	; select bank2/3
  6103  1233  0087               	movwf	7
  6104  1234  1701               	bsf	1,6
  6105                           
  6106                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  6107  1235  01A2               	clrf	setRFSW_Status@command
  6108  1236  0AA2               	incf	setRFSW_Status@command,f
  6109  1237  082B               	movf	Sw_DimmerOnFunc@sw,w
  6110  1238  31A5  2522  3191   	fcall	_setRFSW_Status
  6111                           
  6112                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  6113  123B  0020               	movlb	0	; select bank0
  6114  123C  01A2               	clrf	setDimmerLights_Trigger@command
  6115  123D  0AA2               	incf	setDimmerLights_Trigger@command,f
  6116  123E  082B               	movf	Sw_DimmerOnFunc@sw,w
  6117  123F  31A5  2560  3191   	fcall	_setDimmerLights_Trigger
  6118                           
  6119                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  6120  1242  0020               	movlb	0	; select bank0
  6121  1243  01A2               	clrf	setDimmerLights_Switch@command
  6122  1244  0AA2               	incf	setDimmerLights_Switch@command,f
  6123  1245  082B               	movf	Sw_DimmerOnFunc@sw,w
  6124  1246  31A5  2550  3191   	fcall	_setDimmerLights_Switch
  6125                           
  6126                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  6127  1249  0020               	movlb	0	; select bank0
  6128  124A  086D               	movf	_Sw,w
  6129  124B  0086               	movwf	6
  6130  124C  3001               	movlw	1	; select bank2/3
  6131  124D  0087               	movwf	7
  6132  124E  3000               	movlw	0
  6133  124F  1B01               	btfsc	1,6
  6134  1250  3001               	movlw	1
  6135  1251  00A0               	movwf	setRF_DimmerLights@on
  6136  1252  082B               	movf	Sw_DimmerOnFunc@sw,w
  6137  1253  319E  26E6  3191   	fcall	_setRF_DimmerLights
  6138                           
  6139                           ;Switch_B1.c: 293: setTxData(1);
  6140  1256  3001               	movlw	1
  6141  1257  318A  22F8         	fcall	_setTxData
  6142                           
  6143                           ;Switch_B1.c: 294: }
  6144  1259  0020               	movlb	0	; select bank0
  6145  125A  0008               	return
  6146  125B                     l9170:	
  6147                           
  6148                           ;Switch_B1.c: 295: else
  6149                           ;Switch_B1.c: 296: {
  6150                           ;Switch_B1.c: 297: Sw->Status=0;
  6151  125B  0020               	movlb	0	; select bank0
  6152  125C  086D               	movf	_Sw,w
  6153  125D  0086               	movwf	6
  6154  125E  3001               	movlw	1	; select bank2/3
  6155  125F  0087               	movwf	7
  6156  1260  1301               	bcf	1,6
  6157                           
  6158                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6159  1261  086D               	movf	_Sw,w
  6160  1262  0086               	movwf	6
  6161  1263  3001               	movlw	1	; select bank2/3
  6162  1264  0087               	movwf	7
  6163  1265  3000               	movlw	0
  6164  1266  1B01               	btfsc	1,6
  6165  1267  3001               	movlw	1
  6166  1268  00A2               	movwf	setRFSW_Status@command
  6167  1269  082B               	movf	Sw_DimmerOnFunc@sw,w
  6168  126A  31A5  2522         	fcall	_setRFSW_Status
  6169  126C  0020               	movlb	0	; select bank0
  6170  126D  0008               	return
  6171  126E                     __end_of_Sw_DimmerOnFunc:	
  6172                           
  6173                           	psect	text14
  6174  12DD                     __ptext14:	
  6175 ;; *************** function _Sw_DimmerOffFunc *****************
  6176 ;; Defined at:
  6177 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;  sw              1    wreg     unsigned char 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  sw              1   10[BANK0 ] unsigned char 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;		None               void
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:        3 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    6
  6198 ;; This function calls:
  6199 ;;		_setDelayOff_GO
  6200 ;;		_setDimmerLights_AdjGo
  6201 ;;		_setDimmerLights_Switch
  6202 ;;		_setDimmerLights_Trigger
  6203 ;;		_setDimmerLights_TriggerAdj
  6204 ;;		_setRF_DimmerLights
  6205 ;;		_setTxData
  6206 ;; This function is called by:
  6207 ;;		_setSw_Main
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _Sw_DimmerOffFunc
  6213  12DD                     _Sw_DimmerOffFunc:	
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6217                           ;Sw_DimmerOffFunc@sw stored from wreg
  6218  12DD  0020               	movlb	0	; select bank0
  6219  12DE  00AA               	movwf	Sw_DimmerOffFunc@sw
  6220                           
  6221                           ;Switch_B1.c: 305: if(Sw->Flag)
  6222  12DF  086D               	movf	_Sw,w
  6223  12E0  0086               	movwf	6
  6224  12E1  3001               	movlw	1	; select bank2/3
  6225  12E2  0087               	movwf	7
  6226  12E3  1F81               	btfss	1,7
  6227  12E4  0008               	return
  6228                           
  6229                           ;Switch_B1.c: 306: {
  6230                           ;Switch_B1.c: 307: Sw->Flag=0;
  6231  12E5  086D               	movf	_Sw,w
  6232  12E6  0086               	movwf	6
  6233  12E7  3001               	movlw	1	; select bank2/3
  6234  12E8  0087               	movwf	7
  6235  12E9  1381               	bcf	1,7
  6236                           
  6237                           ;Switch_B1.c: 308: if(Sw->Status)
  6238  12EA  086D               	movf	_Sw,w
  6239  12EB  0086               	movwf	6
  6240  12EC  3001               	movlw	1	; select bank2/3
  6241  12ED  0087               	movwf	7
  6242  12EE  1F01               	btfss	1,6
  6243  12EF  2B29               	goto	l9202
  6244                           
  6245                           ;Switch_B1.c: 309: {
  6246                           ;Switch_B1.c: 310: if(Sw->Adj)
  6247  12F0  0A6D               	incf	_Sw,w
  6248  12F1  0086               	movwf	6
  6249  12F2  3001               	movlw	1	; select bank2/3
  6250  12F3  0087               	movwf	7
  6251  12F4  1C01               	btfss	1,0
  6252  12F5  0008               	return
  6253                           
  6254                           ;Switch_B1.c: 311: {
  6255                           ;Switch_B1.c: 312: Sw->Adj=0;
  6256  12F6  0A6D               	incf	_Sw,w
  6257  12F7  0086               	movwf	6
  6258  12F8  3001               	movlw	1	; select bank2/3
  6259  12F9  0087               	movwf	7
  6260  12FA  1001               	bcf	1,0
  6261                           
  6262                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6263  12FB  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6264  12FC  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6265  12FD  082A               	movf	Sw_DimmerOffFunc@sw,w
  6266  12FE  31A5  25B0  3192   	fcall	_setDimmerLights_TriggerAdj
  6267                           
  6268                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6269  1301  0020               	movlb	0	; select bank0
  6270  1302  01A2               	clrf	setDimmerLights_AdjGo@command
  6271  1303  082A               	movf	Sw_DimmerOffFunc@sw,w
  6272  1304  31A5  25A0  3192   	fcall	_setDimmerLights_AdjGo
  6273                           
  6274                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6275  1307  0020               	movlb	0	; select bank0
  6276  1308  082A               	movf	Sw_DimmerOffFunc@sw,w
  6277  1309  3E1A               	addlw	26
  6278  130A  076F               	addwf	_Product,w
  6279  130B  00A8               	movwf	??_Sw_DimmerOffFunc
  6280  130C  0828               	movf	??_Sw_DimmerOffFunc,w
  6281  130D  0086               	movwf	6
  6282  130E  3001               	movlw	1	; select bank2/3
  6283  130F  0087               	movwf	7
  6284  1310  0801               	movf	1,w
  6285  1311  00A9               	movwf	??_Sw_DimmerOffFunc+1
  6286  1312  086F               	movf	_Product,w
  6287  1313  3E11               	addlw	17
  6288  1314  0086               	movwf	6
  6289  1315  3001               	movlw	1	; select bank2/3
  6290  1316  0087               	movwf	7
  6291  1317  0829               	movf	??_Sw_DimmerOffFunc+1,w
  6292  1318  0081               	movwf	1
  6293                           
  6294                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6295  1319  086D               	movf	_Sw,w
  6296  131A  0086               	movwf	6
  6297  131B  3001               	movlw	1	; select bank2/3
  6298  131C  0087               	movwf	7
  6299  131D  3000               	movlw	0
  6300  131E  1B01               	btfsc	1,6
  6301  131F  3001               	movlw	1
  6302  1320  00A0               	movwf	setRF_DimmerLights@on
  6303  1321  082A               	movf	Sw_DimmerOffFunc@sw,w
  6304  1322  319E  26E6  3192   	fcall	_setRF_DimmerLights
  6305                           
  6306                           ;Switch_B1.c: 318: setTxData(1);
  6307  1325  3001               	movlw	1
  6308  1326  318A  22F8         	fcall	_setTxData
  6309                           
  6310                           ;Switch_B1.c: 320: }
  6311                           ;Switch_B1.c: 321: }
  6312  1328  0008               	return
  6313  1329                     l9202:	
  6314                           
  6315                           ;Switch_B1.c: 322: else
  6316                           ;Switch_B1.c: 323: {
  6317                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6318  1329  0020               	movlb	0	; select bank0
  6319  132A  01A2               	clrf	setDimmerLights_Trigger@command
  6320  132B  0AA2               	incf	setDimmerLights_Trigger@command,f
  6321  132C  082A               	movf	Sw_DimmerOffFunc@sw,w
  6322  132D  31A5  2560  3192   	fcall	_setDimmerLights_Trigger
  6323                           
  6324                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6325  1330  0020               	movlb	0	; select bank0
  6326  1331  01A2               	clrf	setDimmerLights_Switch@command
  6327  1332  082A               	movf	Sw_DimmerOffFunc@sw,w
  6328  1333  31A5  2550  3192   	fcall	_setDimmerLights_Switch
  6329                           
  6330                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6331  1336  0020               	movlb	0	; select bank0
  6332  1337  01A3               	clrf	setDelayOff_GO@command
  6333  1338  01A4               	clrf	setDelayOff_GO@value
  6334  1339  082A               	movf	Sw_DimmerOffFunc@sw,w
  6335  133A  3188  2001  3192   	fcall	_setDelayOff_GO
  6336                           
  6337                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6338  133D  0020               	movlb	0	; select bank0
  6339  133E  086D               	movf	_Sw,w
  6340  133F  0086               	movwf	6
  6341  1340  3001               	movlw	1	; select bank2/3
  6342  1341  0087               	movwf	7
  6343  1342  3000               	movlw	0
  6344  1343  1B01               	btfsc	1,6
  6345  1344  3001               	movlw	1
  6346  1345  00A0               	movwf	setRF_DimmerLights@on
  6347  1346  082A               	movf	Sw_DimmerOffFunc@sw,w
  6348  1347  319E  26E6  3192   	fcall	_setRF_DimmerLights
  6349                           
  6350                           ;Switch_B1.c: 329: setTxData(1);
  6351  134A  3001               	movlw	1
  6352  134B  318A  22F8         	fcall	_setTxData
  6353  134D  0008               	return
  6354  134E                     __end_of_Sw_DimmerOffFunc:	
  6355                           
  6356                           	psect	text15
  6357  192C                     __ptext15:	
  6358 ;; *************** function _Sw_DimmerAdjFunc *****************
  6359 ;; Defined at:
  6360 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  sw              1    wreg     unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  sw              1    4[BANK0 ] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;Total ram usage:        1 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    6
  6381 ;; This function calls:
  6382 ;;		_setDimmerLights_AdjGo
  6383 ;;		_setDimmerLights_TriggerAdj
  6384 ;;		_setRFSW_Status
  6385 ;; This function is called by:
  6386 ;;		_setSw_Main
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _Sw_DimmerAdjFunc
  6392  192C                     _Sw_DimmerAdjFunc:	
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6396                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6397  192C  0020               	movlb	0	; select bank0
  6398  192D  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6399                           
  6400                           ;Switch_B1.c: 336: if(Sw->Flag)
  6401  192E  086D               	movf	_Sw,w
  6402  192F  0086               	movwf	6
  6403  1930  3001               	movlw	1	; select bank2/3
  6404  1931  0087               	movwf	7
  6405  1932  1F81               	btfss	1,7
  6406  1933  0008               	return
  6407                           
  6408                           ;Switch_B1.c: 337: {
  6409                           ;Switch_B1.c: 338: Sw->Adj=1;
  6410  1934  0A6D               	incf	_Sw,w
  6411  1935  0086               	movwf	6
  6412  1936  3001               	movlw	1	; select bank2/3
  6413  1937  0087               	movwf	7
  6414  1938  1401               	bsf	1,0
  6415                           
  6416                           ;Switch_B1.c: 339: Sw->Status=1;
  6417  1939  086D               	movf	_Sw,w
  6418  193A  0086               	movwf	6
  6419  193B  3001               	movlw	1	; select bank2/3
  6420  193C  0087               	movwf	7
  6421  193D  1701               	bsf	1,6
  6422                           
  6423                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  6424  193E  01A2               	clrf	setRFSW_Status@command
  6425  193F  0AA2               	incf	setRFSW_Status@command,f
  6426  1940  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6427  1941  31A5  2522  3199   	fcall	_setRFSW_Status
  6428                           
  6429                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  6430  1944  0020               	movlb	0	; select bank0
  6431  1945  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6432  1946  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6433  1947  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6434  1948  31A5  25B0  3199   	fcall	_setDimmerLights_TriggerAdj
  6435                           
  6436                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  6437  194B  0020               	movlb	0	; select bank0
  6438  194C  01A2               	clrf	setDimmerLights_AdjGo@command
  6439  194D  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6440  194E  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6441  194F  31A5  25A0         	fcall	_setDimmerLights_AdjGo
  6442  1951  0008               	return
  6443  1952                     __end_of_Sw_DimmerAdjFunc:	
  6444                           
  6445                           	psect	text16
  6446  25B0                     __ptext16:	
  6447 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6448 ;; Defined at:
  6449 ;;		line 439 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  lights          1    wreg     unsigned char 
  6452 ;;  command         1    2[BANK0 ] unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  lights          1    3[BANK0 ] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;		None               void
  6457 ;; Registers used:
  6458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6464 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;Total ram usage:        2 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    5
  6471 ;; This function calls:
  6472 ;;		_DimmerLightsPointSelect
  6473 ;; This function is called by:
  6474 ;;		_Sw_DimmerOffFunc
  6475 ;;		_Sw_DimmerAdjFunc
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           
  6480                           ;psect for function _setDimmerLights_TriggerAdj
  6481  25B0                     _setDimmerLights_TriggerAdj:	
  6482                           
  6483                           ;incstack = 0
  6484                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6485                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6486  25B0  0020               	movlb	0	; select bank0
  6487  25B1  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6488                           
  6489                           ;Dimmer_B1.c: 441: DimmerLightsPointSelect(lights);
  6490  25B2  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6491  25B3  31A5  25D1         	fcall	_DimmerLightsPointSelect
  6492                           
  6493                           ;Dimmer_B1.c: 442: DimmerLights->TriggerAdj=command;
  6494  25B5  0020               	movlb	0	; select bank0
  6495  25B6  086C               	movf	_DimmerLights,w
  6496  25B7  3E09               	addlw	9
  6497  25B8  0086               	movwf	6
  6498  25B9  3001               	movlw	1	; select bank2/3
  6499  25BA  0087               	movwf	7
  6500  25BB  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6501  25BC  1181               	bcf	1,3
  6502  25BD  1D03               	skipz
  6503  25BE  1581               	bsf	1,3
  6504  25BF  0008               	return
  6505  25C0                     __end_of_setDimmerLights_TriggerAdj:	
  6506                           
  6507                           	psect	text17
  6508  25A0                     __ptext17:	
  6509 ;; *************** function _setDimmerLights_AdjGo *****************
  6510 ;; Defined at:
  6511 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  lights          1    wreg     unsigned char 
  6514 ;;  command         1    2[BANK0 ] unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  lights          1    3[BANK0 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        2 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    5
  6533 ;; This function calls:
  6534 ;;		_DimmerLightsPointSelect
  6535 ;; This function is called by:
  6536 ;;		_Sw_DimmerOffFunc
  6537 ;;		_Sw_DimmerAdjFunc
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function _setDimmerLights_AdjGo
  6543  25A0                     _setDimmerLights_AdjGo:	
  6544                           
  6545                           ;incstack = 0
  6546                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6547                           ;setDimmerLights_AdjGo@lights stored from wreg
  6548  25A0  0020               	movlb	0	; select bank0
  6549  25A1  00A3               	movwf	setDimmerLights_AdjGo@lights
  6550                           
  6551                           ;Dimmer_B1.c: 431: DimmerLightsPointSelect(lights);
  6552  25A2  0823               	movf	setDimmerLights_AdjGo@lights,w
  6553  25A3  31A5  25D1         	fcall	_DimmerLightsPointSelect
  6554                           
  6555                           ;Dimmer_B1.c: 432: DimmerLights->AdjGo=command;
  6556  25A5  0020               	movlb	0	; select bank0
  6557  25A6  086C               	movf	_DimmerLights,w
  6558  25A7  3E09               	addlw	9
  6559  25A8  0086               	movwf	6
  6560  25A9  3001               	movlw	1	; select bank2/3
  6561  25AA  0087               	movwf	7
  6562  25AB  0822               	movf	setDimmerLights_AdjGo@command,w
  6563  25AC  1101               	bcf	1,2
  6564  25AD  1D03               	skipz
  6565  25AE  1501               	bsf	1,2
  6566  25AF  0008               	return
  6567  25B0                     __end_of_setDimmerLights_AdjGo:	
  6568                           
  6569                           	psect	text18
  6570  24F9                     __ptext18:	
  6571 ;; *************** function _Switch_Initialization *****************
  6572 ;; Defined at:
  6573 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;		None               void
  6580 ;; Registers used:
  6581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    7
  6594 ;; This function calls:
  6595 ;;		_TouchPower
  6596 ;;		_setSw_Initialization
  6597 ;; This function is called by:
  6598 ;;		_main
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function _Switch_Initialization
  6604  24F9                     _Switch_Initialization:	
  6605                           
  6606                           ;Switch_B1.c: 40: TouchPower();
  6607                           
  6608                           ;incstack = 0
  6609                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6610  24F9  31A3  23B0  31A4   	fcall	_TouchPower
  6611                           
  6612                           ;Switch_B1.c: 42: WPUB1=0;
  6613  24FC  0024               	movlb	4	; select bank4
  6614  24FD  108D               	bcf	13,1	;volatile
  6615                           
  6616                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6617  24FE  3001               	movlw	1
  6618  24FF  31A3  23FB  31A4   	fcall	_setSw_Initialization
  6619                           
  6620                           ;Switch_B1.c: 54: setSw_Initialization(2);
  6621  2502  3002               	movlw	2
  6622  2503  31A3  23FB         	fcall	_setSw_Initialization
  6623  2505  0008               	return
  6624  2506                     __end_of_Switch_Initialization:	
  6625                           
  6626                           	psect	text19
  6627  23FB                     __ptext19:	
  6628 ;; *************** function _setSw_Initialization *****************
  6629 ;; Defined at:
  6630 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  sw              1    wreg     unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  sw              1    4[BANK0 ] unsigned char 
  6635 ;; Return value:  Size  Location     Type
  6636 ;;		None               void
  6637 ;; Registers used:
  6638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;Total ram usage:        1 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    6
  6651 ;; This function calls:
  6652 ;;		_setLED
  6653 ;; This function is called by:
  6654 ;;		_Switch_Initialization
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _setSw_Initialization
  6660  23FB                     _setSw_Initialization:	
  6661                           
  6662                           ;incstack = 0
  6663                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6664                           ;setSw_Initialization@sw stored from wreg
  6665  23FB  0020               	movlb	0	; select bank0
  6666  23FC  00A4               	movwf	setSw_Initialization@sw
  6667                           
  6668                           ;Switch_B1.c: 80: setLED(sw,1);
  6669  23FD  01A2               	clrf	setLED@command
  6670  23FE  0AA2               	incf	setLED@command,f
  6671  23FF  0824               	movf	setSw_Initialization@sw,w
  6672  2400  319F  2741         	fcall	_setLED
  6673  2402  0008               	return
  6674  2403                     __end_of_setSw_Initialization:	
  6675                           
  6676                           	psect	text20
  6677  23B0                     __ptext20:	
  6678 ;; *************** function _TouchPower *****************
  6679 ;; Defined at:
  6680 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;		None               void
  6687 ;; Registers used:
  6688 ;;		None
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    4
  6701 ;; This function calls:
  6702 ;;		Nothing
  6703 ;; This function is called by:
  6704 ;;		_Switch_Initialization
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           
  6709                           ;psect for function _TouchPower
  6710  23B0                     _TouchPower:	
  6711  23B0                     l2920:	
  6712                           ;Switch_B1.c: 11: while(!RC5)
  6713                           
  6714                           ;incstack = 0
  6715                           ; Regs used in _TouchPower: []
  6716                           
  6717  23B0  0020               	movlb	0	; select bank0
  6718  23B1  1A8E               	btfsc	14,5	;volatile
  6719  23B2  0008               	return
  6720                           
  6721                           ;Switch_B1.c: 12: RC5=1;
  6722  23B3  168E               	bsf	14,5	;volatile
  6723  23B4  2BB0               	goto	l2920
  6724  23B5                     __end_of_TouchPower:	
  6725                           
  6726                           	psect	text21
  6727  23AC                     __ptext21:	
  6728 ;; *************** function _RF_Main *****************
  6729 ;; Defined at:
  6730 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;		None
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;		None
  6735 ;; Return value:  Size  Location     Type
  6736 ;;		None               void
  6737 ;; Registers used:
  6738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;Total ram usage:        0 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:   13
  6751 ;; This function calls:
  6752 ;;		_setRF_Main
  6753 ;; This function is called by:
  6754 ;;		_main
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _RF_Main
  6760  23AC                     _RF_Main:	
  6761                           
  6762                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6766  23AC  3001               	movlw	1
  6767  23AD  3195  25C1         	fcall	_setRF_Main
  6768  23AF  0008               	return
  6769  23B0                     __end_of_RF_Main:	
  6770                           
  6771                           	psect	text22
  6772  15C1                     __ptext22:	
  6773 ;; *************** function _setRF_Main *****************
  6774 ;; Defined at:
  6775 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  rf              1    wreg     unsigned char 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  rf              1   74[BANK0 ] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;		None               void
  6782 ;; Registers used:
  6783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;Total ram usage:        3 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:   12
  6796 ;; This function calls:
  6797 ;;		_CC2500_RxData
  6798 ;;		_CC2500_TxData
  6799 ;;		_CC2500_WriteCommand
  6800 ;;		_RF_RxDisable
  6801 ;;		_RfPointSelect
  6802 ;;		_getRxData
  6803 ;;		_setINT_GO
  6804 ;; This function is called by:
  6805 ;;		_RF_Main
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _setRF_Main
  6811  15C1                     _setRF_Main:	
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6815                           ;setRF_Main@rf stored from wreg
  6816  15C1  0020               	movlb	0	; select bank0
  6817  15C2  00EA               	movwf	setRF_Main@rf
  6818                           
  6819                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6820  15C3  086A               	movf	setRF_Main@rf,w
  6821  15C4  31A4  243D  3195   	fcall	_RfPointSelect
  6822                           
  6823                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6824  15C7  087C               	movf	_RF,w
  6825  15C8  0086               	movwf	6
  6826  15C9  0187               	clrf	7
  6827  15CA  1C01               	btfss	1,0
  6828  15CB  0008               	return
  6829                           
  6830                           ;RF_Control_B1.c: 62: {
  6831                           ;RF_Control_B1.c: 68: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  6832  15CC  0020               	movlb	0	; select bank0
  6833  15CD  01EB               	clrf	_setRF_Main$4352
  6834  15CE  1F0C               	btfss	12,6	;volatile
  6835  15CF  1A0C               	btfsc	12,4	;volatile
  6836  15D0  2DD5               	goto	l9550
  6837  15D1  180C               	btfsc	12,0	;volatile
  6838  15D2  2DD5               	goto	l9550
  6839  15D3  1C8D               	btfss	13,1	;volatile
  6840  15D4  2DDC               	goto	l9554
  6841  15D5                     l9550:	
  6842  15D5  087C               	movf	_RF,w
  6843  15D6  0086               	movwf	6
  6844  15D7  0187               	clrf	7
  6845  15D8  1B01               	btfsc	1,6
  6846  15D9  2DDC               	goto	l9554
  6847  15DA  01EB               	clrf	_setRF_Main$4352
  6848  15DB  0AEB               	incf	_setRF_Main$4352,f
  6849  15DC                     l9554:	
  6850  15DC  087C               	movf	_RF,w
  6851  15DD  0086               	movwf	6
  6852  15DE  0187               	clrf	7
  6853  15DF  086B               	movf	_setRF_Main$4352,w
  6854  15E0  1381               	bcf	1,7
  6855  15E1  1D03               	skipz
  6856  15E2  1781               	bsf	1,7
  6857                           
  6858                           ;RF_Control_B1.c: 76: if(!RF->Key)
  6859  15E3  087C               	movf	_RF,w
  6860  15E4  0086               	movwf	6
  6861  15E5  0187               	clrf	7
  6862  15E6  1B81               	btfsc	1,7
  6863  15E7  2E14               	goto	l9576
  6864                           
  6865                           ;RF_Control_B1.c: 77: {
  6866                           ;RF_Control_B1.c: 78: if(RF->ReceiveGO)
  6867  15E8  087C               	movf	_RF,w
  6868  15E9  0086               	movwf	6
  6869  15EA  0187               	clrf	7
  6870  15EB  1C81               	btfss	1,1
  6871  15EC  2DF9               	goto	l9564
  6872                           
  6873                           ;RF_Control_B1.c: 79: {
  6874                           ;RF_Control_B1.c: 80: RF->ReceiveGO=0;
  6875  15ED  087C               	movf	_RF,w
  6876  15EE  0086               	movwf	6
  6877  15EF  0187               	clrf	7
  6878  15F0  1081               	bcf	1,1
  6879                           
  6880                           ;RF_Control_B1.c: 81: CC2500_RxData();
  6881  15F1  3190  205C  3195   	fcall	_CC2500_RxData
  6882                           
  6883                           ;RF_Control_B1.c: 87: getRxData(1);
  6884  15F4  3001               	movlw	1
  6885  15F5  3187  27AB  3195   	fcall	_getRxData
  6886                           
  6887                           ;RF_Control_B1.c: 90: }
  6888  15F8  2E18               	goto	l9578
  6889  15F9                     l9564:	
  6890                           
  6891                           ;RF_Control_B1.c: 91: else
  6892                           ;RF_Control_B1.c: 92: {
  6893                           ;RF_Control_B1.c: 93: if(!RF->TransceiveGO)
  6894  15F9  087C               	movf	_RF,w
  6895  15FA  0086               	movwf	6
  6896  15FB  0187               	clrf	7
  6897  15FC  1901               	btfsc	1,2
  6898  15FD  2E18               	goto	l9578
  6899                           
  6900                           ;RF_Control_B1.c: 94: {
  6901                           ;RF_Control_B1.c: 96: if(!RF->RxStatus)
  6902  15FE  087C               	movf	_RF,w
  6903  15FF  0086               	movwf	6
  6904  1600  0187               	clrf	7
  6905  1601  1981               	btfsc	1,3
  6906  1602  2E18               	goto	l9578
  6907                           
  6908                           ;RF_Control_B1.c: 97: {
  6909                           ;RF_Control_B1.c: 98: RF->RxStatus=1;
  6910  1603  087C               	movf	_RF,w
  6911  1604  0086               	movwf	6
  6912  1605  0187               	clrf	7
  6913  1606  1581               	bsf	1,3
  6914                           
  6915                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x36);
  6916  1607  3036               	movlw	54
  6917  1608  31A5  2540  3195   	fcall	_CC2500_WriteCommand
  6918                           
  6919                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x34);
  6920  160B  3034               	movlw	52
  6921  160C  31A5  2540  3195   	fcall	_CC2500_WriteCommand
  6922                           
  6923                           ;RF_Control_B1.c: 101: setINT_GO(1);
  6924  160F  3001               	movlw	1
  6925  1610  31A4  2414  3195   	fcall	_setINT_GO
  6926                           
  6927                           ;RF_Control_B1.c: 102: }
  6928                           ;RF_Control_B1.c: 104: }
  6929                           ;RF_Control_B1.c: 105: }
  6930                           ;RF_Control_B1.c: 106: }
  6931  1613  2E18               	goto	l9578
  6932  1614                     l9576:	
  6933                           
  6934                           ;RF_Control_B1.c: 107: else
  6935                           ;RF_Control_B1.c: 108: {
  6936                           ;RF_Control_B1.c: 109: RF_RxDisable(1);
  6937  1614  3001               	movlw	1
  6938  1615  3199  2152  3195   	fcall	_RF_RxDisable
  6939  1618                     l9578:	
  6940                           
  6941                           ;RF_Control_B1.c: 110: }
  6942                           ;RF_Control_B1.c: 111: if(RF->TransceiveGO)
  6943  1618  087C               	movf	_RF,w
  6944  1619  0086               	movwf	6
  6945  161A  0187               	clrf	7
  6946  161B  1D01               	btfss	1,2
  6947  161C  0008               	return
  6948                           
  6949                           ;RF_Control_B1.c: 112: {
  6950                           ;RF_Control_B1.c: 113: RF_RxDisable(1);
  6951  161D  3001               	movlw	1
  6952  161E  3199  2152  3195   	fcall	_RF_RxDisable
  6953                           
  6954                           ;RF_Control_B1.c: 114: if(!RF->Debounce)
  6955  1621  087C               	movf	_RF,w
  6956  1622  0086               	movwf	6
  6957  1623  0187               	clrf	7
  6958  1624  1A81               	btfsc	1,5
  6959  1625  2E3E               	goto	l9592
  6960                           
  6961                           ;RF_Control_B1.c: 115: {
  6962                           ;RF_Control_B1.c: 116: RF->DebounceTime++;
  6963  1626  3001               	movlw	1
  6964  1627  0020               	movlb	0	; select bank0
  6965  1628  00E9               	movwf	??_setRF_Main
  6966  1629  0A7C               	incf	_RF,w
  6967  162A  0086               	movwf	6
  6968  162B  0187               	clrf	7
  6969  162C  0869               	movf	??_setRF_Main,w
  6970  162D  0781               	addwf	1,f
  6971                           
  6972                           ;RF_Control_B1.c: 117: if(RF->DebounceTime == 25)
  6973  162E  0A7C               	incf	_RF,w
  6974  162F  0086               	movwf	6
  6975  1630  0187               	clrf	7
  6976  1631  0801               	movf	1,w
  6977  1632  3A19               	xorlw	25
  6978  1633  1D03               	skipz
  6979  1634  0008               	return
  6980                           
  6981                           ;RF_Control_B1.c: 118: {
  6982                           ;RF_Control_B1.c: 119: RF->DebounceTime=0;
  6983  1635  0A7C               	incf	_RF,w
  6984  1636  0086               	movwf	6
  6985  1637  0187               	clrf	7
  6986  1638  0181               	clrf	1
  6987                           
  6988                           ;RF_Control_B1.c: 120: RF->Debounce=1;
  6989  1639  087C               	movf	_RF,w
  6990  163A  0086               	movwf	6
  6991  163B  0187               	clrf	7
  6992  163C  1681               	bsf	1,5
  6993                           
  6994                           ;RF_Control_B1.c: 121: }
  6995                           ;RF_Control_B1.c: 122: }
  6996  163D  0008               	return
  6997  163E                     l9592:	
  6998                           
  6999                           ;RF_Control_B1.c: 123: else
  7000                           ;RF_Control_B1.c: 124: {
  7001                           ;RF_Control_B1.c: 125: RF->Debounce=0;
  7002  163E  087C               	movf	_RF,w
  7003  163F  0086               	movwf	6
  7004  1640  0187               	clrf	7
  7005  1641  1281               	bcf	1,5
  7006                           
  7007                           ;RF_Control_B1.c: 126: RF->TransceiveGO=0;
  7008  1642  087C               	movf	_RF,w
  7009  1643  0086               	movwf	6
  7010  1644  0187               	clrf	7
  7011  1645  1101               	bcf	1,2
  7012                           
  7013                           ;RF_Control_B1.c: 127: CC2500_TxData();
  7014  1646  319D  2578         	fcall	_CC2500_TxData
  7015  1648  0008               	return
  7016  1649                     __end_of_setRF_Main:	
  7017                           
  7018                           	psect	text23
  7019  07AB                     __ptext23:	
  7020 ;; *************** function _getRxData *****************
  7021 ;; Defined at:
  7022 ;;		line 207 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  rf              1    wreg     unsigned char 
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  rf              1   72[BANK0 ] unsigned char 
  7027 ;;  i               1    0        unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;		None               void
  7030 ;; Registers used:
  7031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;Total ram usage:        1 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:   11
  7044 ;; This function calls:
  7045 ;;		_RfPointSelect
  7046 ;;		_setControl_Lights_Table
  7047 ;;		_setLog_Code
  7048 ;; This function is called by:
  7049 ;;		_setRF_Main
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           
  7054                           ;psect for function _getRxData
  7055  07AB                     _getRxData:	
  7056                           
  7057                           ;incstack = 0
  7058                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7059                           ;getRxData@rf stored from wreg
  7060  07AB  0020               	movlb	0	; select bank0
  7061  07AC  00E8               	movwf	getRxData@rf
  7062                           
  7063                           ;RF_Control_B1.c: 209: unsigned char i;
  7064                           ;RF_Control_B1.c: 210: RfPointSelect(rf);
  7065  07AD  0868               	movf	getRxData@rf,w
  7066  07AE  31A4  243D  3187   	fcall	_RfPointSelect
  7067                           
  7068                           ;RF_Control_B1.c: 211: if(RF->Learn)
  7069  07B1  087C               	movf	_RF,w
  7070  07B2  0086               	movwf	6
  7071  07B3  0187               	clrf	7
  7072  07B4  1F01               	btfss	1,6
  7073  07B5  2FC2               	goto	l9094
  7074                           
  7075                           ;RF_Control_B1.c: 212: {
  7076                           ;RF_Control_B1.c: 213: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7077  07B6  0021               	movlb	1	; select bank1
  7078  07B7  08A0               	movf	_RF_Data^(0+128),f
  7079  07B8  1D03               	skipz
  7080  07B9  0008               	return
  7081  07BA  0821               	movf	(_RF_Data^(0+128)+1),w
  7082  07BB  3A64               	xorlw	100
  7083  07BC  1D03               	skipz
  7084  07BD  0008               	return
  7085                           
  7086                           ;RF_Control_B1.c: 214: {
  7087                           ;RF_Control_B1.c: 215: setLog_Code(1);
  7088  07BE  3001               	movlw	1
  7089  07BF  319E  2647         	fcall	_setLog_Code
  7090                           
  7091                           ;RF_Control_B1.c: 216: }
  7092                           ;RF_Control_B1.c: 217: }
  7093  07C1  0008               	return
  7094  07C2                     l9094:	
  7095                           
  7096                           ;RF_Control_B1.c: 218: else
  7097                           ;RF_Control_B1.c: 219: {
  7098                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7099  07C2  0021               	movlb	1	; select bank1
  7100  07C3  08A0               	movf	_RF_Data^(0+128),f
  7101  07C4  1D03               	skipz
  7102  07C5  0008               	return
  7103  07C6  0821               	movf	(_RF_Data^(0+128)+1),w
  7104  07C7  3A02               	xorlw	2
  7105  07C8  1D03               	skipz
  7106  07C9  0008               	return
  7107                           
  7108                           ;RF_Control_B1.c: 221: {
  7109                           ;RF_Control_B1.c: 222: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7110  07CA  082C               	movf	(_RF_Data^(0+128)+12),w
  7111  07CB  3AFF               	xorlw	255
  7112  07CC  1D03               	skipz
  7113  07CD  2FD8               	goto	l9106
  7114  07CE  082D               	movf	(_RF_Data^(0+128)+13),w
  7115  07CF  3AFF               	xorlw	255
  7116  07D0  1D03               	skipz
  7117  07D1  2FD8               	goto	l9106
  7118  07D2  082E               	movf	(_RF_Data^(0+128)+14),w
  7119  07D3  3AFF               	xorlw	255
  7120  07D4  1D03               	skipz
  7121  07D5  2FD8               	goto	l9106
  7122                           
  7123                           ;RF_Control_B1.c: 223: {
  7124                           ;RF_Control_B1.c: 224: __nop();
  7125  07D6  0000               	nop
  7126                           
  7127                           ;RF_Control_B1.c: 225: }
  7128  07D7  0008               	return
  7129  07D8                     l9106:	
  7130                           
  7131                           ;RF_Control_B1.c: 226: else
  7132                           ;RF_Control_B1.c: 227: {
  7133                           ;RF_Control_B1.c: 228: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7134  07D8  0020               	movlb	0	; select bank0
  7135  07D9  086F               	movf	_Product,w
  7136  07DA  3E0C               	addlw	12
  7137  07DB  0086               	movwf	6
  7138  07DC  3001               	movlw	1	; select bank2/3
  7139  07DD  0087               	movwf	7
  7140  07DE  0021               	movlb	1	; select bank1
  7141  07DF  082C               	movf	(_RF_Data^(0+128)+12),w
  7142  07E0  0601               	xorwf	1,w
  7143  07E1  1D03               	skipz
  7144  07E2  0008               	return
  7145  07E3  0020               	movlb	0	; select bank0
  7146  07E4  086F               	movf	_Product,w
  7147  07E5  3E0D               	addlw	13
  7148  07E6  0086               	movwf	6
  7149  07E7  3001               	movlw	1	; select bank2/3
  7150  07E8  0087               	movwf	7
  7151  07E9  0021               	movlb	1	; select bank1
  7152  07EA  082D               	movf	(_RF_Data^(0+128)+13),w
  7153  07EB  0601               	xorwf	1,w
  7154  07EC  1D03               	skipz
  7155  07ED  0008               	return
  7156  07EE  0020               	movlb	0	; select bank0
  7157  07EF  086F               	movf	_Product,w
  7158  07F0  3E0E               	addlw	14
  7159  07F1  0086               	movwf	6
  7160  07F2  3001               	movlw	1	; select bank2/3
  7161  07F3  0087               	movwf	7
  7162  07F4  0021               	movlb	1	; select bank1
  7163  07F5  082E               	movf	(_RF_Data^(0+128)+14),w
  7164  07F6  0601               	xorwf	1,w
  7165  07F7  1D03               	skipz
  7166  07F8  0008               	return
  7167                           
  7168                           ;RF_Control_B1.c: 229: {
  7169                           ;RF_Control_B1.c: 230: setControl_Lights_Table(1);
  7170  07F9  3001               	movlw	1
  7171  07FA  3196  26D9         	fcall	_setControl_Lights_Table
  7172                           
  7173                           ;RF_Control_B1.c: 239: {
  7174                           ;RF_Control_B1.c: 240: ;
  7175                           
  7176                           ;RF_Control_B1.c: 235: {
  7177                           ;RF_Control_B1.c: 236: ;
  7178                           ;RF_Control_B1.c: 237: }
  7179                           
  7180                           ;RF_Control_B1.c: 231: }
  7181                           ;RF_Control_B1.c: 232: }
  7182                           ;RF_Control_B1.c: 233: }
  7183  07FC  0008               	return
  7184  07FD                     __end_of_getRxData:	
  7185                           
  7186                           	psect	text24
  7187  1E47                     __ptext24:	
  7188 ;; *************** function _setLog_Code *****************
  7189 ;; Defined at:
  7190 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  rf              1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  rf              1   11[BANK0 ] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;		None               void
  7197 ;; Registers used:
  7198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;Total ram usage:        2 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    6
  7211 ;; This function calls:
  7212 ;;		_RfPointSelect
  7213 ;;		_setBuz
  7214 ;; This function is called by:
  7215 ;;		_getRxData
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _setLog_Code
  7221  1E47                     _setLog_Code:	
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7225                           ;setLog_Code@rf stored from wreg
  7226  1E47  0020               	movlb	0	; select bank0
  7227  1E48  00AB               	movwf	setLog_Code@rf
  7228                           
  7229                           ;RF_Control_B1.c: 251: RfPointSelect(rf);
  7230  1E49  082B               	movf	setLog_Code@rf,w
  7231  1E4A  31A4  243D  319E   	fcall	_RfPointSelect
  7232                           
  7233                           ;RF_Control_B1.c: 252: Product->Data[12]=RF_Data[12];
  7234  1E4D  0021               	movlb	1	; select bank1
  7235  1E4E  082C               	movf	(_RF_Data^(0+128)+12),w
  7236  1E4F  0020               	movlb	0	; select bank0
  7237  1E50  00AA               	movwf	??_setLog_Code
  7238  1E51  086F               	movf	_Product,w
  7239  1E52  3E0C               	addlw	12
  7240  1E53  0086               	movwf	6
  7241  1E54  3001               	movlw	1	; select bank2/3
  7242  1E55  0087               	movwf	7
  7243  1E56  082A               	movf	??_setLog_Code,w
  7244  1E57  0081               	movwf	1
  7245                           
  7246                           ;RF_Control_B1.c: 253: Product->Data[13]=RF_Data[13];
  7247  1E58  0021               	movlb	1	; select bank1
  7248  1E59  082D               	movf	(_RF_Data^(0+128)+13),w
  7249  1E5A  0020               	movlb	0	; select bank0
  7250  1E5B  00AA               	movwf	??_setLog_Code
  7251  1E5C  086F               	movf	_Product,w
  7252  1E5D  3E0D               	addlw	13
  7253  1E5E  0086               	movwf	6
  7254  1E5F  3001               	movlw	1	; select bank2/3
  7255  1E60  0087               	movwf	7
  7256  1E61  082A               	movf	??_setLog_Code,w
  7257  1E62  0081               	movwf	1
  7258                           
  7259                           ;RF_Control_B1.c: 254: Product->Data[14]=RF_Data[14];
  7260  1E63  0021               	movlb	1	; select bank1
  7261  1E64  082E               	movf	(_RF_Data^(0+128)+14),w
  7262  1E65  0020               	movlb	0	; select bank0
  7263  1E66  00AA               	movwf	??_setLog_Code
  7264  1E67  086F               	movf	_Product,w
  7265  1E68  3E0E               	addlw	14
  7266  1E69  0086               	movwf	6
  7267  1E6A  3001               	movlw	1	; select bank2/3
  7268  1E6B  0087               	movwf	7
  7269  1E6C  082A               	movf	??_setLog_Code,w
  7270  1E6D  0081               	movwf	1
  7271                           
  7272                           ;RF_Control_B1.c: 255: setBuz(1,100);
  7273  1E6E  3064               	movlw	100
  7274  1E6F  00A6               	movwf	setBuz@time
  7275  1E70  3000               	movlw	0
  7276  1E71  00A7               	movwf	setBuz@time+1
  7277  1E72  3001               	movlw	1
  7278  1E73  3193  234E  319E   	fcall	_setBuz
  7279                           
  7280                           ;RF_Control_B1.c: 256: RF->Learn=0;
  7281  1E76  087C               	movf	_RF,w
  7282  1E77  0086               	movwf	6
  7283  1E78  0187               	clrf	7
  7284  1E79  1301               	bcf	1,6
  7285                           
  7286                           ;RF_Control_B1.c: 257: if(TMain->First)
  7287  1E7A  0021               	movlb	1	; select bank1
  7288  1E7B  0869               	movf	_TMain^(0+128),w
  7289  1E7C  3E03               	addlw	3
  7290  1E7D  0086               	movwf	6
  7291  1E7E  3001               	movlw	1	; select bank2/3
  7292  1E7F  0087               	movwf	7
  7293  1E80  1C81               	btfss	1,1
  7294  1E81  2E88               	goto	l2704
  7295                           
  7296                           ;RF_Control_B1.c: 258: {
  7297                           ;RF_Control_B1.c: 259: Memory->LoopSave=1;
  7298  1E82  0868               	movf	_Memory^(0+128),w
  7299  1E83  3E22               	addlw	34
  7300  1E84  0086               	movwf	6
  7301  1E85  3002               	movlw	2	; select bank4/5
  7302  1E86  0087               	movwf	7
  7303  1E87  1501               	bsf	1,2
  7304  1E88                     l2704:	
  7305                           
  7306                           ;RF_Control_B1.c: 260: }
  7307                           ;RF_Control_B1.c: 261: Memory->Modify=1;
  7308  1E88  0868               	movf	_Memory^(0+128),w
  7309  1E89  3E22               	addlw	34
  7310  1E8A  0086               	movwf	6
  7311  1E8B  3002               	movlw	2	; select bank4/5
  7312  1E8C  0087               	movwf	7
  7313  1E8D  1401               	bsf	1,0
  7314  1E8E  0008               	return
  7315  1E8F                     __end_of_setLog_Code:	
  7316                           
  7317                           	psect	text25
  7318  16D9                     __ptext25:	
  7319 ;; *************** function _setControl_Lights_Table *****************
  7320 ;; Defined at:
  7321 ;;		line 264 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;  rf              1    wreg     unsigned char 
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  rf              1   71[BANK0 ] unsigned char 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;		None               void
  7328 ;; Registers used:
  7329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;Total ram usage:        1 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:   10
  7342 ;; This function calls:
  7343 ;;		_RfPointSelect
  7344 ;;		_setBuz
  7345 ;;		_setDimmerLights
  7346 ;;		_setRFSW_AdjControl
  7347 ;;		_setRFSW_Control
  7348 ;;		_setRFSW_Status
  7349 ;;		_setSw_Status
  7350 ;;		_setTxData
  7351 ;; This function is called by:
  7352 ;;		_getRxData
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _setControl_Lights_Table
  7358  16D9                     _setControl_Lights_Table:	
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7362                           ;setControl_Lights_Table@rf stored from wreg
  7363  16D9  0020               	movlb	0	; select bank0
  7364  16DA  00E7               	movwf	setControl_Lights_Table@rf
  7365                           
  7366                           ;RF_Control_B1.c: 266: RfPointSelect(rf);
  7367  16DB  0867               	movf	setControl_Lights_Table@rf,w
  7368  16DC  31A4  243D  3196   	fcall	_RfPointSelect
  7369                           
  7370                           ;RF_Control_B1.c: 267: if(RF_Data[15] == 0x00)
  7371  16DF  0021               	movlb	1	; select bank1
  7372  16E0  08AF               	movf	(_RF_Data^(0+128)+15),f
  7373  16E1  1D03               	skipz
  7374  16E2  2F2C               	goto	l8918
  7375                           
  7376                           ;RF_Control_B1.c: 268: {
  7377                           ;RF_Control_B1.c: 270: setDimmerLights(1,0);
  7378  16E3  0020               	movlb	0	; select bank0
  7379  16E4  01A4               	clrf	setDimmerLights@status
  7380  16E5  3001               	movlw	1
  7381  16E6  3197  276C  3196   	fcall	_setDimmerLights
  7382                           
  7383                           ;RF_Control_B1.c: 271: setRFSW_Status(1,0);
  7384  16E9  0020               	movlb	0	; select bank0
  7385  16EA  01A2               	clrf	setRFSW_Status@command
  7386  16EB  3001               	movlw	1
  7387  16EC  31A5  2522  3196   	fcall	_setRFSW_Status
  7388                           
  7389                           ;RF_Control_B1.c: 272: setSw_Status(1,0);
  7390  16EF  0020               	movlb	0	; select bank0
  7391  16F0  01A2               	clrf	setSw_Status@command
  7392  16F1  3001               	movlw	1
  7393  16F2  31A5  2531  3196   	fcall	_setSw_Status
  7394                           
  7395                           ;RF_Control_B1.c: 275: setDimmerLights(2,0);
  7396  16F5  0020               	movlb	0	; select bank0
  7397  16F6  01A4               	clrf	setDimmerLights@status
  7398  16F7  3002               	movlw	2
  7399  16F8  3197  276C  3196   	fcall	_setDimmerLights
  7400                           
  7401                           ;RF_Control_B1.c: 276: setRFSW_Status(2,0);
  7402  16FB  0020               	movlb	0	; select bank0
  7403  16FC  01A2               	clrf	setRFSW_Status@command
  7404  16FD  3002               	movlw	2
  7405  16FE  31A5  2522  3196   	fcall	_setRFSW_Status
  7406                           
  7407                           ;RF_Control_B1.c: 277: setSw_Status(2,0);
  7408  1701  0020               	movlb	0	; select bank0
  7409  1702  01A2               	clrf	setSw_Status@command
  7410  1703  3002               	movlw	2
  7411  1704  31A5  2531  3196   	fcall	_setSw_Status
  7412                           
  7413                           ;RF_Control_B1.c: 285: Product->Data[9]=0;
  7414  1707  0020               	movlb	0	; select bank0
  7415  1708  086F               	movf	_Product,w
  7416  1709  3E09               	addlw	9
  7417  170A  0086               	movwf	6
  7418  170B  3001               	movlw	1	; select bank2/3
  7419  170C  0087               	movwf	7
  7420  170D  0181               	clrf	1
  7421                           
  7422                           ;RF_Control_B1.c: 286: Product->Data[11]=0;
  7423  170E  086F               	movf	_Product,w
  7424  170F  3E0B               	addlw	11
  7425  1710  0086               	movwf	6
  7426  1711  3001               	movlw	1	; select bank2/3
  7427  1712  0087               	movwf	7
  7428  1713  0181               	clrf	1
  7429                           
  7430                           ;RF_Control_B1.c: 287: Product->Data[15]=0;
  7431  1714  086F               	movf	_Product,w
  7432  1715  3E0F               	addlw	15
  7433  1716  0086               	movwf	6
  7434  1717  3001               	movlw	1	; select bank2/3
  7435  1718  0087               	movwf	7
  7436  1719  0181               	clrf	1
  7437                           
  7438                           ;RF_Control_B1.c: 288: Product->Data[17]=0;
  7439  171A  086F               	movf	_Product,w
  7440  171B  3E11               	addlw	17
  7441  171C  0086               	movwf	6
  7442  171D  3001               	movlw	1	; select bank2/3
  7443  171E  0087               	movwf	7
  7444  171F  0181               	clrf	1
  7445                           
  7446                           ;RF_Control_B1.c: 289: setBuz(1,100);
  7447  1720  3064               	movlw	100
  7448  1721  00A6               	movwf	setBuz@time
  7449  1722  3000               	movlw	0
  7450  1723  00A7               	movwf	setBuz@time+1
  7451  1724  3001               	movlw	1
  7452  1725  3193  234E  3196   	fcall	_setBuz
  7453                           
  7454                           ;RF_Control_B1.c: 290: setTxData(1);
  7455  1728  3001               	movlw	1
  7456  1729  318A  22F8         	fcall	_setTxData
  7457                           
  7458                           ;RF_Control_B1.c: 291: }
  7459  172B  0008               	return
  7460  172C                     l8918:	
  7461                           
  7462                           ;RF_Control_B1.c: 292: else if(RF_Data[15] == 0x20)
  7463  172C  0021               	movlb	1	; select bank1
  7464  172D  082F               	movf	(_RF_Data^(0+128)+15),w
  7465  172E  3A20               	xorlw	32
  7466  172F  1D03               	skipz
  7467  1730  2F48               	goto	l8924
  7468                           
  7469                           ;RF_Control_B1.c: 293: {
  7470                           ;RF_Control_B1.c: 294: Product->Data[9]=0;
  7471  1731  0020               	movlb	0	; select bank0
  7472  1732  086F               	movf	_Product,w
  7473  1733  3E09               	addlw	9
  7474  1734  0086               	movwf	6
  7475  1735  3001               	movlw	1	; select bank2/3
  7476  1736  0087               	movwf	7
  7477  1737  0181               	clrf	1
  7478                           
  7479                           ;RF_Control_B1.c: 295: Product->Data[11]=0;
  7480  1738  086F               	movf	_Product,w
  7481  1739  3E0B               	addlw	11
  7482  173A  0086               	movwf	6
  7483  173B  3001               	movlw	1	; select bank2/3
  7484  173C  0087               	movwf	7
  7485  173D  0181               	clrf	1
  7486                           
  7487                           ;RF_Control_B1.c: 296: Product->Data[17]=0;
  7488  173E  086F               	movf	_Product,w
  7489  173F  3E11               	addlw	17
  7490  1740  0086               	movwf	6
  7491  1741  3001               	movlw	1	; select bank2/3
  7492  1742  0087               	movwf	7
  7493  1743  0181               	clrf	1
  7494                           
  7495                           ;RF_Control_B1.c: 297: setTxData(1);
  7496  1744  3001               	movlw	1
  7497  1745  318A  22F8         	fcall	_setTxData
  7498                           
  7499                           ;RF_Control_B1.c: 298: }
  7500  1747  0008               	return
  7501  1748                     l8924:	
  7502                           
  7503                           ;RF_Control_B1.c: 300: else if(RF_Data[15] == 0x01)
  7504  1748  0021               	movlb	1	; select bank1
  7505  1749  082F               	movf	(_RF_Data^(0+128)+15),w
  7506  174A  3A01               	xorlw	1
  7507  174B  1D03               	skipz
  7508  174C  2F51               	goto	l8928
  7509                           
  7510                           ;RF_Control_B1.c: 301: {
  7511                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  7512  174D  3001               	movlw	1
  7513  174E  3196  2649         	fcall	_setRFSW_Control
  7514                           
  7515                           ;RF_Control_B1.c: 303: }
  7516  1750  0008               	return
  7517  1751                     l8928:	
  7518                           
  7519                           ;RF_Control_B1.c: 305: else if(RF_Data[15] == 0x11)
  7520  1751  0021               	movlb	1	; select bank1
  7521  1752  082F               	movf	(_RF_Data^(0+128)+15),w
  7522  1753  3A11               	xorlw	17
  7523  1754  1D03               	skipz
  7524  1755  2F5A               	goto	l8932
  7525                           
  7526                           ;RF_Control_B1.c: 306: {
  7527                           ;RF_Control_B1.c: 307: setRFSW_AdjControl(1);
  7528  1756  3001               	movlw	1
  7529  1757  319C  242E         	fcall	_setRFSW_AdjControl
  7530                           
  7531                           ;RF_Control_B1.c: 308: }
  7532  1759  0008               	return
  7533  175A                     l8932:	
  7534                           
  7535                           ;RF_Control_B1.c: 313: else if(RF_Data[15] == 0x02)
  7536  175A  0021               	movlb	1	; select bank1
  7537  175B  082F               	movf	(_RF_Data^(0+128)+15),w
  7538  175C  3A02               	xorlw	2
  7539  175D  1D03               	skipz
  7540  175E  2F63               	goto	l8936
  7541                           
  7542                           ;RF_Control_B1.c: 314: {
  7543                           ;RF_Control_B1.c: 315: setRFSW_Control(2);
  7544  175F  3002               	movlw	2
  7545  1760  3196  2649         	fcall	_setRFSW_Control
  7546                           
  7547                           ;RF_Control_B1.c: 316: }
  7548  1762  0008               	return
  7549  1763                     l8936:	
  7550                           
  7551                           ;RF_Control_B1.c: 318: else if(RF_Data[15] == 0x21)
  7552  1763  0021               	movlb	1	; select bank1
  7553  1764  082F               	movf	(_RF_Data^(0+128)+15),w
  7554  1765  3A21               	xorlw	33
  7555  1766  1D03               	skipz
  7556  1767  0008               	return
  7557                           
  7558                           ;RF_Control_B1.c: 319: {
  7559                           ;RF_Control_B1.c: 320: setRFSW_AdjControl(2);
  7560  1768  3002               	movlw	2
  7561  1769  319C  242E         	fcall	_setRFSW_AdjControl
  7562  176B  0008               	return
  7563  176C                     __end_of_setControl_Lights_Table:	
  7564                           
  7565                           	psect	text26
  7566  1649                     __ptext26:	
  7567 ;; *************** function _setRFSW_Control *****************
  7568 ;; Defined at:
  7569 ;;		line 361 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  sw              1    wreg     unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  sw              1   11[BANK0 ] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;		None               void
  7576 ;; Registers used:
  7577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;Total ram usage:        2 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    6
  7590 ;; This function calls:
  7591 ;;		_RfSWPointSelect
  7592 ;;		_setBuz
  7593 ;;		_setDelayOff_GO
  7594 ;;		_setDimmerLights_Switch
  7595 ;;		_setDimmerLights_Trigger
  7596 ;;		_setRF_DimmerLights
  7597 ;;		_setSw_Status
  7598 ;;		_setTxData
  7599 ;; This function is called by:
  7600 ;;		_setControl_Lights_Table
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function _setRFSW_Control
  7606  1649                     _setRFSW_Control:	
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7610                           ;setRFSW_Control@sw stored from wreg
  7611  1649  0020               	movlb	0	; select bank0
  7612  164A  00AB               	movwf	setRFSW_Control@sw
  7613                           
  7614                           ;RF_Control_B1.c: 363: RfSWPointSelect(sw);
  7615  164B  082B               	movf	setRFSW_Control@sw,w
  7616  164C  31A6  2623  3196   	fcall	_RfSWPointSelect
  7617                           
  7618                           ;RF_Control_B1.c: 364: if(!RFSW->Status)
  7619  164F  0021               	movlb	1	; select bank1
  7620  1650  083C               	movf	_RFSW^(0+128),w
  7621  1651  0086               	movwf	6
  7622  1652  0187               	clrf	7
  7623  1653  1801               	btfsc	1,0
  7624  1654  2E8A               	goto	l8806
  7625                           
  7626                           ;RF_Control_B1.c: 365: {
  7627                           ;RF_Control_B1.c: 366: if(RF_Data[16] == 0x80)
  7628  1655  0830               	movf	(_RF_Data^(0+128)+16),w
  7629  1656  3A80               	xorlw	128
  7630  1657  1D03               	skipz
  7631  1658  2E66               	goto	l8796
  7632                           
  7633                           ;RF_Control_B1.c: 367: {
  7634                           ;RF_Control_B1.c: 368: setDelayOff_GO(sw,1,RF_Data[17]);
  7635  1659  0020               	movlb	0	; select bank0
  7636  165A  01A3               	clrf	setDelayOff_GO@command
  7637  165B  0AA3               	incf	setDelayOff_GO@command,f
  7638  165C  0021               	movlb	1	; select bank1
  7639  165D  0831               	movf	(_RF_Data^(0+128)+17),w
  7640  165E  0020               	movlb	0	; select bank0
  7641  165F  00AA               	movwf	??_setRFSW_Control
  7642  1660  082A               	movf	??_setRFSW_Control,w
  7643  1661  00A4               	movwf	setDelayOff_GO@value
  7644  1662  082B               	movf	setRFSW_Control@sw,w
  7645  1663  3188  2001  3196   	fcall	_setDelayOff_GO
  7646  1666                     l8796:	
  7647                           
  7648                           ;RF_Control_B1.c: 369: }
  7649                           ;RF_Control_B1.c: 370: RFSW->Status=1;
  7650  1666  0021               	movlb	1	; select bank1
  7651  1667  083C               	movf	_RFSW^(0+128),w
  7652  1668  0086               	movwf	6
  7653  1669  0187               	clrf	7
  7654  166A  1401               	bsf	1,0
  7655                           
  7656                           ;RF_Control_B1.c: 371: setSw_Status(sw,1);
  7657  166B  0020               	movlb	0	; select bank0
  7658  166C  01A2               	clrf	setSw_Status@command
  7659  166D  0AA2               	incf	setSw_Status@command,f
  7660  166E  082B               	movf	setRFSW_Control@sw,w
  7661  166F  31A5  2531  3196   	fcall	_setSw_Status
  7662                           
  7663                           ;RF_Control_B1.c: 373: setDimmerLights_Trigger(sw,1);
  7664  1672  0020               	movlb	0	; select bank0
  7665  1673  01A2               	clrf	setDimmerLights_Trigger@command
  7666  1674  0AA2               	incf	setDimmerLights_Trigger@command,f
  7667  1675  082B               	movf	setRFSW_Control@sw,w
  7668  1676  31A5  2560  3196   	fcall	_setDimmerLights_Trigger
  7669                           
  7670                           ;RF_Control_B1.c: 374: setDimmerLights_Switch(sw,1);
  7671  1679  0020               	movlb	0	; select bank0
  7672  167A  01A2               	clrf	setDimmerLights_Switch@command
  7673  167B  0AA2               	incf	setDimmerLights_Switch@command,f
  7674  167C  082B               	movf	setRFSW_Control@sw,w
  7675  167D  31A5  2550  3196   	fcall	_setDimmerLights_Switch
  7676                           
  7677                           ;RF_Control_B1.c: 376: setRF_DimmerLights(sw,RFSW->Status);
  7678  1680  0021               	movlb	1	; select bank1
  7679  1681  083C               	movf	_RFSW^(0+128),w
  7680  1682  0086               	movwf	6
  7681  1683  0187               	clrf	7
  7682  1684  3000               	movlw	0
  7683  1685  1801               	btfsc	1,0
  7684  1686  3001               	movlw	1
  7685  1687  0020               	movlb	0	; select bank0
  7686  1688  00A0               	movwf	setRF_DimmerLights@on
  7687  1689  2EC8               	goto	L4
  7688  168A                     l8806:	
  7689                           ;RF_Control_B1.c: 377: }
  7690                           
  7691                           
  7692                           ;RF_Control_B1.c: 378: else
  7693                           ;RF_Control_B1.c: 379: {
  7694                           ;RF_Control_B1.c: 380: if(RF_Data[16] == 0x80)
  7695  168A  0021               	movlb	1	; select bank1
  7696  168B  0830               	movf	(_RF_Data^(0+128)+16),w
  7697  168C  3A80               	xorlw	128
  7698  168D  1D03               	skipz
  7699  168E  2EA0               	goto	l8810
  7700                           
  7701                           ;RF_Control_B1.c: 381: {
  7702                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw,1,RF_Data[17]);
  7703  168F  0020               	movlb	0	; select bank0
  7704  1690  01A3               	clrf	setDelayOff_GO@command
  7705  1691  0AA3               	incf	setDelayOff_GO@command,f
  7706  1692  0021               	movlb	1	; select bank1
  7707  1693  0831               	movf	(_RF_Data^(0+128)+17),w
  7708  1694  0020               	movlb	0	; select bank0
  7709  1695  00AA               	movwf	??_setRFSW_Control
  7710  1696  082A               	movf	??_setRFSW_Control,w
  7711  1697  00A4               	movwf	setDelayOff_GO@value
  7712  1698  082B               	movf	setRFSW_Control@sw,w
  7713  1699  3188  2001  3196   	fcall	_setDelayOff_GO
  7714                           
  7715                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,1);
  7716  169C  0020               	movlb	0	; select bank0
  7717  169D  01A0               	clrf	setRF_DimmerLights@on
  7718  169E  0AA0               	incf	setRF_DimmerLights@on,f
  7719  169F  2EC8               	goto	L4
  7720  16A0                     l8810:	
  7721                           ;RF_Control_B1.c: 384: }
  7722                           
  7723                           
  7724                           ;RF_Control_B1.c: 385: else
  7725                           ;RF_Control_B1.c: 386: {
  7726                           ;RF_Control_B1.c: 387: RFSW->Status=0;
  7727  16A0  0021               	movlb	1	; select bank1
  7728  16A1  083C               	movf	_RFSW^(0+128),w
  7729  16A2  0086               	movwf	6
  7730  16A3  0187               	clrf	7
  7731  16A4  1001               	bcf	1,0
  7732                           
  7733                           ;RF_Control_B1.c: 388: setSw_Status(sw,0);
  7734  16A5  0020               	movlb	0	; select bank0
  7735  16A6  01A2               	clrf	setSw_Status@command
  7736  16A7  082B               	movf	setRFSW_Control@sw,w
  7737  16A8  31A5  2531  3196   	fcall	_setSw_Status
  7738                           
  7739                           ;RF_Control_B1.c: 390: setDimmerLights_Trigger(sw,1);
  7740  16AB  0020               	movlb	0	; select bank0
  7741  16AC  01A2               	clrf	setDimmerLights_Trigger@command
  7742  16AD  0AA2               	incf	setDimmerLights_Trigger@command,f
  7743  16AE  082B               	movf	setRFSW_Control@sw,w
  7744  16AF  31A5  2560  3196   	fcall	_setDimmerLights_Trigger
  7745                           
  7746                           ;RF_Control_B1.c: 391: setDimmerLights_Switch(sw,RFSW->Status);
  7747  16B2  0021               	movlb	1	; select bank1
  7748  16B3  083C               	movf	_RFSW^(0+128),w
  7749  16B4  0086               	movwf	6
  7750  16B5  0187               	clrf	7
  7751  16B6  3000               	movlw	0
  7752  16B7  1801               	btfsc	1,0
  7753  16B8  3001               	movlw	1
  7754  16B9  0020               	movlb	0	; select bank0
  7755  16BA  00A2               	movwf	setDimmerLights_Switch@command
  7756  16BB  082B               	movf	setRFSW_Control@sw,w
  7757  16BC  31A5  2550  3196   	fcall	_setDimmerLights_Switch
  7758                           
  7759                           ;RF_Control_B1.c: 393: setDelayOff_GO(sw,0,0);
  7760  16BF  0020               	movlb	0	; select bank0
  7761  16C0  01A3               	clrf	setDelayOff_GO@command
  7762  16C1  01A4               	clrf	setDelayOff_GO@value
  7763  16C2  082B               	movf	setRFSW_Control@sw,w
  7764  16C3  3188  2001  3196   	fcall	_setDelayOff_GO
  7765                           
  7766                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw,0);
  7767  16C6  0020               	movlb	0	; select bank0
  7768  16C7  01A0               	clrf	setRF_DimmerLights@on
  7769  16C8                     L4:	
  7770  16C8  082B               	movf	setRFSW_Control@sw,w
  7771  16C9  319E  26E6  3196   	fcall	_setRF_DimmerLights
  7772                           
  7773                           ;RF_Control_B1.c: 395: }
  7774                           ;RF_Control_B1.c: 396: }
  7775                           ;RF_Control_B1.c: 397: setBuz(1,100);
  7776  16CC  3064               	movlw	100
  7777  16CD  0020               	movlb	0	; select bank0
  7778  16CE  00A6               	movwf	setBuz@time
  7779  16CF  3000               	movlw	0
  7780  16D0  00A7               	movwf	setBuz@time+1
  7781  16D1  3001               	movlw	1
  7782  16D2  3193  234E  3196   	fcall	_setBuz
  7783                           
  7784                           ;RF_Control_B1.c: 398: setTxData(1);
  7785  16D5  3001               	movlw	1
  7786  16D6  318A  22F8         	fcall	_setTxData
  7787  16D8  0008               	return
  7788  16D9                     __end_of_setRFSW_Control:	
  7789                           
  7790                           	psect	text27
  7791  0801                     __ptext27:	
  7792 ;; *************** function _setDelayOff_GO *****************
  7793 ;; Defined at:
  7794 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;  sw              1    wreg     unsigned char 
  7797 ;;  command         1    3[BANK0 ] unsigned char 
  7798 ;;  value           1    4[BANK0 ] unsigned char 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  sw              1    7[BANK0 ] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;		None               void
  7803 ;; Registers used:
  7804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;Total ram usage:        5 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    5
  7817 ;; This function calls:
  7818 ;;		_DelayOffPointSelect
  7819 ;;		_DelayTimejudge
  7820 ;; This function is called by:
  7821 ;;		_setRFSW_Control
  7822 ;;		_Sw_DimmerOffFunc
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           
  7827                           ;psect for function _setDelayOff_GO
  7828  0801                     _setDelayOff_GO:	
  7829                           
  7830                           ;incstack = 0
  7831                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7832                           ;setDelayOff_GO@sw stored from wreg
  7833  0801  0020               	movlb	0	; select bank0
  7834  0802  00A7               	movwf	setDelayOff_GO@sw
  7835                           
  7836                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7837  0803  0827               	movf	setDelayOff_GO@sw,w
  7838  0804  31A6  2665  3188   	fcall	_DelayOffPointSelect
  7839                           
  7840                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7841  0807  0021               	movlb	1	; select bank1
  7842  0808  0838               	movf	_DelayOff^(0+128),w
  7843  0809  0086               	movwf	6
  7844  080A  0187               	clrf	7
  7845  080B  1C01               	btfss	1,0
  7846  080C  0008               	return
  7847                           
  7848                           ;DelayOff_B1.c: 96: {
  7849                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7850  080D  0838               	movf	_DelayOff^(0+128),w
  7851  080E  0086               	movwf	6
  7852  080F  0187               	clrf	7
  7853  0810  0020               	movlb	0	; select bank0
  7854  0811  0823               	movf	setDelayOff_GO@command,w
  7855  0812  1081               	bcf	1,1
  7856  0813  1D03               	skipz
  7857  0814  1481               	bsf	1,1
  7858                           
  7859                           ;DelayOff_B1.c: 98: if(command)
  7860  0815  0823               	movf	setDelayOff_GO@command,w
  7861  0816  1903               	btfsc	3,2
  7862  0817  2843               	goto	l6552
  7863                           
  7864                           ;DelayOff_B1.c: 99: {
  7865                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7866  0818  0824               	movf	setDelayOff_GO@value,w
  7867  0819  319A  2225  3188   	fcall	_DelayTimejudge
  7868  081C  0020               	movlb	0	; select bank0
  7869  081D  00A5               	movwf	??_setDelayOff_GO
  7870  081E  0021               	movlb	1	; select bank1
  7871  081F  0A38               	incf	_DelayOff^(0+128),w
  7872  0820  0086               	movwf	6
  7873  0821  0187               	clrf	7
  7874  0822  0020               	movlb	0	; select bank0
  7875  0823  0825               	movf	??_setDelayOff_GO,w
  7876  0824  0081               	movwf	1
  7877                           
  7878                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7879  0825  300F               	movlw	15
  7880  0826  0524               	andwf	setDelayOff_GO@value,w
  7881  0827  00A5               	movwf	??_setDelayOff_GO
  7882  0828  0825               	movf	??_setDelayOff_GO,w
  7883  0829  3A05               	xorlw	5
  7884  082A  1903               	skipnz
  7885  082B  2830               	goto	l6546
  7886  082C  0824               	movf	setDelayOff_GO@value,w
  7887  082D  390F               	andlw	15
  7888  082E  1D03               	btfss	3,2
  7889  082F  2836               	goto	l6550
  7890  0830                     l6546:	
  7891  0830  3026               	movlw	38
  7892  0831  0224               	subwf	setDelayOff_GO@value,w
  7893  0832  1803               	skipnc
  7894  0833  2836               	goto	l6550
  7895                           
  7896                           ;DelayOff_B1.c: 102: {
  7897                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7898  0834  0824               	movf	setDelayOff_GO@value,w
  7899  0835  2837               	goto	L5
  7900  0836                     l6550:	
  7901                           ;DelayOff_B1.c: 104: }
  7902                           
  7903                           
  7904                           ;DelayOff_B1.c: 105: else
  7905                           ;DelayOff_B1.c: 106: {
  7906                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7907  0836  3005               	movlw	5
  7908  0837                     L5:	
  7909  0837  00A5               	movwf	??_setDelayOff_GO
  7910  0838  0827               	movf	setDelayOff_GO@sw,w
  7911  0839  3E1A               	addlw	26
  7912  083A  076F               	addwf	_Product,w
  7913  083B  00A6               	movwf	??_setDelayOff_GO+1
  7914  083C  0826               	movf	??_setDelayOff_GO+1,w
  7915  083D  0086               	movwf	6
  7916  083E  3001               	movlw	1	; select bank2/3
  7917  083F  0087               	movwf	7
  7918  0840  0825               	movf	??_setDelayOff_GO,w
  7919  0841  0081               	movwf	1
  7920                           
  7921                           ;DelayOff_B1.c: 108: }
  7922                           ;DelayOff_B1.c: 109: }
  7923  0842  284F               	goto	l6556
  7924  0843                     l6552:	
  7925                           
  7926                           ;DelayOff_B1.c: 110: else if(!command)
  7927  0843  08A3               	movf	setDelayOff_GO@command,f
  7928  0844  1D03               	skipz
  7929  0845  284F               	goto	l6556
  7930                           
  7931                           ;DelayOff_B1.c: 111: {
  7932                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7933  0846  0827               	movf	setDelayOff_GO@sw,w
  7934  0847  3E1A               	addlw	26
  7935  0848  076F               	addwf	_Product,w
  7936  0849  00A5               	movwf	??_setDelayOff_GO
  7937  084A  0825               	movf	??_setDelayOff_GO,w
  7938  084B  0086               	movwf	6
  7939  084C  3001               	movlw	1	; select bank2/3
  7940  084D  0087               	movwf	7
  7941  084E  0181               	clrf	1
  7942  084F                     l6556:	
  7943                           
  7944                           ;DelayOff_B1.c: 113: }
  7945                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7946  084F  0021               	movlb	1	; select bank1
  7947  0850  0838               	movf	_DelayOff^(0+128),w
  7948  0851  3E02               	addlw	2
  7949  0852  0086               	movwf	6
  7950  0853  0187               	clrf	7
  7951  0854  3000               	movlw	0
  7952  0855  3FC0               	movwi [0]fsr1
  7953  0856  3FC1               	movwi [1]fsr1
  7954                           
  7955                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7956  0857  0838               	movf	_DelayOff^(0+128),w
  7957  0858  3E04               	addlw	4
  7958  0859  0086               	movwf	6
  7959  085A  0187               	clrf	7
  7960  085B  0181               	clrf	1
  7961  085C  0008               	return
  7962  085D                     __end_of_setDelayOff_GO:	
  7963                           
  7964                           	psect	text28
  7965  1A25                     __ptext28:	
  7966 ;; *************** function _DelayTimejudge *****************
  7967 ;; Defined at:
  7968 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  value           1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  value           1    2[BANK0 ] unsigned char 
  7973 ;;  i               1    1[BANK0 ] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      unsigned char 
  7976 ;; Registers used:
  7977 ;;		wreg
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;Total ram usage:        3 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    4
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_setDelayOff_GO
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function _DelayTimejudge
  7999  1A25                     _DelayTimejudge:	
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _DelayTimejudge: [wreg]
  8003                           ;DelayTimejudge@value stored from wreg
  8004  1A25  0020               	movlb	0	; select bank0
  8005  1A26  00A2               	movwf	DelayTimejudge@value
  8006                           
  8007                           ;DelayOff_B1.c: 121: char i=5;
  8008  1A27  3005               	movlw	5
  8009  1A28  00A0               	movwf	??_DelayTimejudge
  8010  1A29  0820               	movf	??_DelayTimejudge,w
  8011  1A2A  00A1               	movwf	DelayTimejudge@i
  8012                           
  8013                           ;DelayOff_B1.c: 122: if(value == 0x05)
  8014  1A2B  0822               	movf	DelayTimejudge@value,w
  8015  1A2C  3A05               	xorlw	5
  8016  1A2D  1D03               	skipz
  8017  1A2E  2A31               	goto	l6396
  8018                           
  8019                           ;DelayOff_B1.c: 123: {
  8020                           ;DelayOff_B1.c: 124: i=5;
  8021  1A2F  3005               	movlw	5
  8022  1A30  2A4E               	goto	L10
  8023  1A31                     l6396:	
  8024                           ;DelayOff_B1.c: 125: }
  8025                           
  8026                           
  8027                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  8028  1A31  0822               	movf	DelayTimejudge@value,w
  8029  1A32  3A10               	xorlw	16
  8030  1A33  1D03               	skipz
  8031  1A34  2A37               	goto	l6400
  8032                           
  8033                           ;DelayOff_B1.c: 127: {
  8034                           ;DelayOff_B1.c: 128: i=10;
  8035  1A35  300A               	movlw	10
  8036  1A36  2A4E               	goto	L10
  8037  1A37                     l6400:	
  8038                           ;DelayOff_B1.c: 129: }
  8039                           
  8040                           
  8041                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  8042  1A37  0822               	movf	DelayTimejudge@value,w
  8043  1A38  3A15               	xorlw	21
  8044  1A39  1D03               	skipz
  8045  1A3A  2A3D               	goto	l6404
  8046                           
  8047                           ;DelayOff_B1.c: 131: {
  8048                           ;DelayOff_B1.c: 132: i=15;
  8049  1A3B  300F               	movlw	15
  8050  1A3C  2A4E               	goto	L10
  8051  1A3D                     l6404:	
  8052                           ;DelayOff_B1.c: 133: }
  8053                           
  8054                           
  8055                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8056  1A3D  0822               	movf	DelayTimejudge@value,w
  8057  1A3E  3A20               	xorlw	32
  8058  1A3F  1D03               	skipz
  8059  1A40  2A43               	goto	l6408
  8060                           
  8061                           ;DelayOff_B1.c: 135: {
  8062                           ;DelayOff_B1.c: 136: i=20;
  8063  1A41  3014               	movlw	20
  8064  1A42  2A4E               	goto	L10
  8065  1A43                     l6408:	
  8066                           ;DelayOff_B1.c: 137: }
  8067                           
  8068                           
  8069                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8070  1A43  0822               	movf	DelayTimejudge@value,w
  8071  1A44  3A25               	xorlw	37
  8072  1A45  1D03               	skipz
  8073  1A46  2A49               	goto	l6412
  8074                           
  8075                           ;DelayOff_B1.c: 139: {
  8076                           ;DelayOff_B1.c: 140: i=25;
  8077  1A47  3019               	movlw	25
  8078  1A48  2A4E               	goto	L10
  8079  1A49                     l6412:	
  8080                           ;DelayOff_B1.c: 141: }
  8081                           
  8082                           
  8083                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8084  1A49  0822               	movf	DelayTimejudge@value,w
  8085  1A4A  3A30               	xorlw	48
  8086  1A4B  1D03               	skipz
  8087  1A4C  2A51               	goto	l706
  8088                           
  8089                           ;DelayOff_B1.c: 143: {
  8090                           ;DelayOff_B1.c: 144: i=30;
  8091  1A4D  301E               	movlw	30
  8092  1A4E                     L10:	
  8093  1A4E  00A0               	movwf	??_DelayTimejudge
  8094  1A4F  0820               	movf	??_DelayTimejudge,w
  8095  1A50  00A1               	movwf	DelayTimejudge@i
  8096  1A51                     l706:	
  8097                           
  8098                           ;DelayOff_B1.c: 145: }
  8099                           ;DelayOff_B1.c: 146: return i;
  8100  1A51  0821               	movf	DelayTimejudge@i,w
  8101  1A52  0008               	return
  8102  1A53                     __end_of_DelayTimejudge:	
  8103                           
  8104                           	psect	text29
  8105  1C2E                     __ptext29:	
  8106 ;; *************** function _setRFSW_AdjControl *****************
  8107 ;; Defined at:
  8108 ;;		line 401 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  sw              1    wreg     unsigned char 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  sw              1   70[BANK0 ] unsigned char 
  8113 ;; Return value:  Size  Location     Type
  8114 ;;		None               void
  8115 ;; Registers used:
  8116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;Total ram usage:        3 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    9
  8129 ;; This function calls:
  8130 ;;		_RfSWPointSelect
  8131 ;;		_setRF_DimmerValue
  8132 ;;		_setTxData
  8133 ;; This function is called by:
  8134 ;;		_setControl_Lights_Table
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           
  8139                           ;psect for function _setRFSW_AdjControl
  8140  1C2E                     _setRFSW_AdjControl:	
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8144                           ;setRFSW_AdjControl@sw stored from wreg
  8145  1C2E  0020               	movlb	0	; select bank0
  8146  1C2F  00E6               	movwf	setRFSW_AdjControl@sw
  8147                           
  8148                           ;RF_Control_B1.c: 403: RfSWPointSelect(sw);
  8149  1C30  0866               	movf	setRFSW_AdjControl@sw,w
  8150  1C31  31A6  2623  319C   	fcall	_RfSWPointSelect
  8151                           
  8152                           ;RF_Control_B1.c: 404: if(RFSW->Status)
  8153  1C34  0021               	movlb	1	; select bank1
  8154  1C35  083C               	movf	_RFSW^(0+128),w
  8155  1C36  0086               	movwf	6
  8156  1C37  0187               	clrf	7
  8157  1C38  1C01               	btfss	1,0
  8158  1C39  2C46               	goto	l6804
  8159                           
  8160                           ;RF_Control_B1.c: 405: {
  8161                           ;RF_Control_B1.c: 406: Memory->Modify=1;
  8162  1C3A  0868               	movf	_Memory^(0+128),w
  8163  1C3B  3E22               	addlw	34
  8164  1C3C  0086               	movwf	6
  8165  1C3D  3002               	movlw	2	; select bank4/5
  8166  1C3E  0087               	movwf	7
  8167  1C3F  1401               	bsf	1,0
  8168                           
  8169                           ;RF_Control_B1.c: 407: setRF_DimmerValue(sw);
  8170  1C40  0020               	movlb	0	; select bank0
  8171  1C41  0866               	movf	setRFSW_AdjControl@sw,w
  8172  1C42  319B  2348  319C   	fcall	_setRF_DimmerValue
  8173                           
  8174                           ;RF_Control_B1.c: 408: }
  8175  1C45  2C58               	goto	l2736
  8176  1C46                     l6804:	
  8177                           
  8178                           ;RF_Control_B1.c: 409: else
  8179                           ;RF_Control_B1.c: 410: {
  8180                           ;RF_Control_B1.c: 411: Product->Data[9]=Product->Data[20+sw];
  8181  1C46  0020               	movlb	0	; select bank0
  8182  1C47  0866               	movf	setRFSW_AdjControl@sw,w
  8183  1C48  3E14               	addlw	20
  8184  1C49  076F               	addwf	_Product,w
  8185  1C4A  00E4               	movwf	??_setRFSW_AdjControl
  8186  1C4B  0864               	movf	??_setRFSW_AdjControl,w
  8187  1C4C  0086               	movwf	6
  8188  1C4D  3001               	movlw	1	; select bank2/3
  8189  1C4E  0087               	movwf	7
  8190  1C4F  0801               	movf	1,w
  8191  1C50  00E5               	movwf	??_setRFSW_AdjControl+1
  8192  1C51  086F               	movf	_Product,w
  8193  1C52  3E09               	addlw	9
  8194  1C53  0086               	movwf	6
  8195  1C54  3001               	movlw	1	; select bank2/3
  8196  1C55  0087               	movwf	7
  8197  1C56  0865               	movf	??_setRFSW_AdjControl+1,w
  8198  1C57  0081               	movwf	1
  8199  1C58                     l2736:	
  8200                           
  8201                           ;RF_Control_B1.c: 412: }
  8202                           ;RF_Control_B1.c: 413: Product->Data[17]=Product->Data[26+sw];
  8203  1C58  0020               	movlb	0	; select bank0
  8204  1C59  0866               	movf	setRFSW_AdjControl@sw,w
  8205  1C5A  3E1A               	addlw	26
  8206  1C5B  076F               	addwf	_Product,w
  8207  1C5C  00E4               	movwf	??_setRFSW_AdjControl
  8208  1C5D  0864               	movf	??_setRFSW_AdjControl,w
  8209  1C5E  0086               	movwf	6
  8210  1C5F  3001               	movlw	1	; select bank2/3
  8211  1C60  0087               	movwf	7
  8212  1C61  0801               	movf	1,w
  8213  1C62  00E5               	movwf	??_setRFSW_AdjControl+1
  8214  1C63  086F               	movf	_Product,w
  8215  1C64  3E11               	addlw	17
  8216  1C65  0086               	movwf	6
  8217  1C66  3001               	movlw	1	; select bank2/3
  8218  1C67  0087               	movwf	7
  8219  1C68  0865               	movf	??_setRFSW_AdjControl+1,w
  8220  1C69  0081               	movwf	1
  8221                           
  8222                           ;RF_Control_B1.c: 414: setTxData(1);
  8223  1C6A  3001               	movlw	1
  8224  1C6B  318A  22F8         	fcall	_setTxData
  8225  1C6D  0008               	return
  8226  1C6E                     __end_of_setRFSW_AdjControl:	
  8227                           
  8228                           	psect	text30
  8229  1B48                     __ptext30:	
  8230 ;; *************** function _setRF_DimmerValue *****************
  8231 ;; Defined at:
  8232 ;;		line 425 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;  lights          1    wreg     unsigned char 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  lights          1   67[BANK0 ] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        3 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    8
  8253 ;; This function calls:
  8254 ;;		_setDimmerLights_AdjRF
  8255 ;; This function is called by:
  8256 ;;		_setRFSW_AdjControl
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _setRF_DimmerValue
  8262  1B48                     _setRF_DimmerValue:	
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8266                           ;setRF_DimmerValue@lights stored from wreg
  8267  1B48  0020               	movlb	0	; select bank0
  8268  1B49  00E3               	movwf	setRF_DimmerValue@lights
  8269                           
  8270                           ;RF_Control_B1.c: 427: if(RF_Data[9] > 0x64)
  8271  1B4A  3065               	movlw	101
  8272  1B4B  0021               	movlb	1	; select bank1
  8273  1B4C  0229               	subwf	(_RF_Data^(0+128)+9),w
  8274  1B4D  1C03               	skipc
  8275  1B4E  2B55               	goto	l6646
  8276                           
  8277                           ;RF_Control_B1.c: 428: {
  8278                           ;RF_Control_B1.c: 429: RF_Data[9]=0x64;
  8279  1B4F  3064               	movlw	100
  8280  1B50  0020               	movlb	0	; select bank0
  8281  1B51  00E1               	movwf	??_setRF_DimmerValue
  8282  1B52  0861               	movf	??_setRF_DimmerValue,w
  8283  1B53  0021               	movlb	1	; select bank1
  8284  1B54  00A9               	movwf	(_RF_Data^(0+128)+9)
  8285  1B55                     l6646:	
  8286                           
  8287                           ;RF_Control_B1.c: 430: }
  8288                           ;RF_Control_B1.c: 431: Product->Data[9]=RF_Data[9];
  8289  1B55  0829               	movf	(_RF_Data^(0+128)+9),w
  8290  1B56  0020               	movlb	0	; select bank0
  8291  1B57  00E1               	movwf	??_setRF_DimmerValue
  8292  1B58  086F               	movf	_Product,w
  8293  1B59  3E09               	addlw	9
  8294  1B5A  0086               	movwf	6
  8295  1B5B  3001               	movlw	1	; select bank2/3
  8296  1B5C  0087               	movwf	7
  8297  1B5D  0861               	movf	??_setRF_DimmerValue,w
  8298  1B5E  0081               	movwf	1
  8299                           
  8300                           ;RF_Control_B1.c: 432: Product->Data[11]=lights;
  8301  1B5F  0863               	movf	setRF_DimmerValue@lights,w
  8302  1B60  00E1               	movwf	??_setRF_DimmerValue
  8303  1B61  086F               	movf	_Product,w
  8304  1B62  3E0B               	addlw	11
  8305  1B63  0086               	movwf	6
  8306  1B64  3001               	movlw	1	; select bank2/3
  8307  1B65  0087               	movwf	7
  8308  1B66  0861               	movf	??_setRF_DimmerValue,w
  8309  1B67  0081               	movwf	1
  8310                           
  8311                           ;RF_Control_B1.c: 433: Product->Data[(20+lights)]=Product->Data[9];
  8312  1B68  086F               	movf	_Product,w
  8313  1B69  3E09               	addlw	9
  8314  1B6A  0086               	movwf	6
  8315  1B6B  3001               	movlw	1	; select bank2/3
  8316  1B6C  0087               	movwf	7
  8317  1B6D  0801               	movf	1,w
  8318  1B6E  00E1               	movwf	??_setRF_DimmerValue
  8319  1B6F  0863               	movf	setRF_DimmerValue@lights,w
  8320  1B70  3E14               	addlw	20
  8321  1B71  076F               	addwf	_Product,w
  8322  1B72  00E2               	movwf	??_setRF_DimmerValue+1
  8323  1B73  0862               	movf	??_setRF_DimmerValue+1,w
  8324  1B74  0086               	movwf	6
  8325  1B75  3001               	movlw	1	; select bank2/3
  8326  1B76  0087               	movwf	7
  8327  1B77  0861               	movf	??_setRF_DimmerValue,w
  8328  1B78  0081               	movwf	1
  8329                           
  8330                           ;RF_Control_B1.c: 434: setDimmerLights_AdjRF(lights);
  8331  1B79  0863               	movf	setRF_DimmerValue@lights,w
  8332  1B7A  3198  20BE         	fcall	_setDimmerLights_AdjRF
  8333  1B7C  0008               	return
  8334  1B7D                     __end_of_setRF_DimmerValue:	
  8335                           
  8336                           	psect	text31
  8337  18BE                     __ptext31:	
  8338 ;; *************** function _setDimmerLights_AdjRF *****************
  8339 ;; Defined at:
  8340 ;;		line 412 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  lights          1    wreg     unsigned char 
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;  lights          1   64[BANK0 ] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;		None               void
  8347 ;; Registers used:
  8348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:        2 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    7
  8361 ;; This function calls:
  8362 ;;		_DimmerLightsPointSelect
  8363 ;;		_getPercentValue
  8364 ;; This function is called by:
  8365 ;;		_setRF_DimmerValue
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _setDimmerLights_AdjRF
  8371  18BE                     _setDimmerLights_AdjRF:	
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8375                           ;setDimmerLights_AdjRF@lights stored from wreg
  8376  18BE  0020               	movlb	0	; select bank0
  8377  18BF  00E0               	movwf	setDimmerLights_AdjRF@lights
  8378                           
  8379                           ;Dimmer_B1.c: 414: DimmerLightsPointSelect(lights);
  8380  18C0  0860               	movf	setDimmerLights_AdjRF@lights,w
  8381  18C1  31A5  25D1  3198   	fcall	_DimmerLightsPointSelect
  8382                           
  8383                           ;Dimmer_B1.c: 415: DimmerLights->AdjRF=1;
  8384  18C4  0020               	movlb	0	; select bank0
  8385  18C5  086C               	movf	_DimmerLights,w
  8386  18C6  0086               	movwf	6
  8387  18C7  3001               	movlw	1	; select bank2/3
  8388  18C8  0087               	movwf	7
  8389  18C9  1501               	bsf	1,2
  8390                           
  8391                           ;Dimmer_B1.c: 416: DimmerLights->Signal=1;
  8392  18CA  086C               	movf	_DimmerLights,w
  8393  18CB  0086               	movwf	6
  8394  18CC  3001               	movlw	1	; select bank2/3
  8395  18CD  0087               	movwf	7
  8396  18CE  1481               	bsf	1,1
  8397                           
  8398                           ;Dimmer_B1.c: 417: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8399  18CF  086F               	movf	_Product,w
  8400  18D0  3E09               	addlw	9
  8401  18D1  0086               	movwf	6
  8402  18D2  3001               	movlw	1	; select bank2/3
  8403  18D3  0087               	movwf	7
  8404  18D4  0801               	movf	1,w
  8405  18D5  3190  2001         	fcall	_getPercentValue
  8406  18D7  0020               	movlb	0	; select bank0
  8407  18D8  00DF               	movwf	??_setDimmerLights_AdjRF
  8408  18D9  086C               	movf	_DimmerLights,w
  8409  18DA  3E05               	addlw	5
  8410  18DB  0086               	movwf	6
  8411  18DC  3001               	movlw	1	; select bank2/3
  8412  18DD  0087               	movwf	7
  8413  18DE  085F               	movf	??_setDimmerLights_AdjRF,w
  8414  18DF  0081               	movwf	1
  8415  18E0  0008               	return
  8416  18E1                     __end_of_setDimmerLights_AdjRF:	
  8417                           
  8418                           	psect	text32
  8419  1001                     __ptext32:	
  8420 ;; *************** function _getPercentValue *****************
  8421 ;; Defined at:
  8422 ;;		line 479 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  value           1    wreg     unsigned char 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  value           1   59[BANK0 ] unsigned char 
  8427 ;;  i               3   60[BANK0 ] float 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      unsigned char 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0, pclath, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        6 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    6
  8444 ;; This function calls:
  8445 ;;		___awtoft
  8446 ;;		___ftadd
  8447 ;;		___ftdiv
  8448 ;;		___ftmul
  8449 ;;		___fttol
  8450 ;; This function is called by:
  8451 ;;		_setDimmerLights_AdjRF
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           
  8456                           ;psect for function _getPercentValue
  8457  1001                     _getPercentValue:	
  8458                           
  8459                           ;incstack = 0
  8460                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8461                           ;getPercentValue@value stored from wreg
  8462  1001  0020               	movlb	0	; select bank0
  8463  1002  00DB               	movwf	getPercentValue@value
  8464                           
  8465                           ;Dimmer_B1.c: 482: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8466  1003  3000               	movlw	0
  8467  1004  00DC               	movwf	getPercentValue@i
  8468  1005  3054               	movlw	84
  8469  1006  00DD               	movwf	getPercentValue@i+1
  8470  1007  3042               	movlw	66
  8471  1008  00DE               	movwf	getPercentValue@i+2
  8472                           
  8473                           ;Dimmer_B1.c: 483: i/=100;
  8474  1009  3000               	movlw	0
  8475  100A  00AE               	movwf	___ftdiv@f2
  8476  100B  30C8               	movlw	200
  8477  100C  00AF               	movwf	___ftdiv@f2+1
  8478  100D  3042               	movlw	66
  8479  100E  00B0               	movwf	___ftdiv@f2+2
  8480  100F  085C               	movf	getPercentValue@i,w
  8481  1010  00B1               	movwf	___ftdiv@f1
  8482  1011  085D               	movf	getPercentValue@i+1,w
  8483  1012  00B2               	movwf	___ftdiv@f1+1
  8484  1013  085E               	movf	getPercentValue@i+2,w
  8485  1014  00B3               	movwf	___ftdiv@f1+2
  8486  1015  3189  219B  3190   	fcall	___ftdiv
  8487  1018  0020               	movlb	0	; select bank0
  8488  1019  082E               	movf	?___ftdiv,w
  8489  101A  00DC               	movwf	getPercentValue@i
  8490  101B  082F               	movf	?___ftdiv+1,w
  8491  101C  00DD               	movwf	getPercentValue@i+1
  8492  101D  0830               	movf	?___ftdiv+2,w
  8493  101E  00DE               	movwf	getPercentValue@i+2
  8494                           
  8495                           ;Dimmer_B1.c: 484: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8496  101F  085B               	movf	getPercentValue@value,w
  8497  1020  00D9               	movwf	??_getPercentValue
  8498  1021  01DA               	clrf	??_getPercentValue+1
  8499  1022  09D9               	comf	??_getPercentValue,f
  8500  1023  09DA               	comf	??_getPercentValue+1,f
  8501  1024  0AD9               	incf	??_getPercentValue,f
  8502  1025  1903               	skipnz
  8503  1026  0ADA               	incf	??_getPercentValue+1,f
  8504  1027  0859               	movf	??_getPercentValue,w
  8505  1028  3E64               	addlw	100
  8506  1029  00A8               	movwf	___awtoft@c
  8507  102A  3000               	movlw	0
  8508  102B  3D5A               	addwfc	??_getPercentValue+1,w
  8509  102C  00A9               	movwf	___awtoft@c+1
  8510  102D  3198  207A  3190   	fcall	___awtoft
  8511  1030  0020               	movlb	0	; select bank0
  8512  1031  0828               	movf	?___awtoft,w
  8513  1032  00B1               	movwf	___ftmul@f2
  8514  1033  0829               	movf	?___awtoft+1,w
  8515  1034  00B2               	movwf	___ftmul@f2+1
  8516  1035  082A               	movf	?___awtoft+2,w
  8517  1036  00B3               	movwf	___ftmul@f2+2
  8518  1037  085C               	movf	getPercentValue@i,w
  8519  1038  00AE               	movwf	___ftmul@f1
  8520  1039  085D               	movf	getPercentValue@i+1,w
  8521  103A  00AF               	movwf	___ftmul@f1+1
  8522  103B  085E               	movf	getPercentValue@i+2,w
  8523  103C  00B0               	movwf	___ftmul@f1+2
  8524  103D  318A  2244  3190   	fcall	___ftmul
  8525  1040  0020               	movlb	0	; select bank0
  8526  1041  082E               	movf	?___ftmul,w
  8527  1042  00C1               	movwf	___ftadd@f2
  8528  1043  082F               	movf	?___ftmul+1,w
  8529  1044  00C2               	movwf	___ftadd@f2+1
  8530  1045  0830               	movf	?___ftmul+2,w
  8531  1046  00C3               	movwf	___ftadd@f2+2
  8532  1047  3000               	movlw	0
  8533  1048  00BE               	movwf	___ftadd@f1
  8534  1049  3086               	movlw	134
  8535  104A  00BF               	movwf	___ftadd@f1+1
  8536  104B  3042               	movlw	66
  8537  104C  00C0               	movwf	___ftadd@f1+2
  8538  104D  318B  23C1  3190   	fcall	___ftadd
  8539  1050  0020               	movlb	0	; select bank0
  8540  1051  083E               	movf	?___ftadd,w
  8541  1052  00CB               	movwf	___fttol@f1
  8542  1053  083F               	movf	?___ftadd+1,w
  8543  1054  00CC               	movwf	___fttol@f1+1
  8544  1055  0840               	movf	?___ftadd+2,w
  8545  1056  00CD               	movwf	___fttol@f1+2
  8546  1057  3195  253A         	fcall	___fttol
  8547  1059  0020               	movlb	0	; select bank0
  8548  105A  084B               	movf	?___fttol,w
  8549  105B  0008               	return
  8550  105C                     __end_of_getPercentValue:	
  8551                           
  8552                           	psect	text33
  8553  0A44                     __ptext33:	
  8554 ;; *************** function ___ftmul *****************
  8555 ;; Defined at:
  8556 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8557 ;; Parameters:    Size  Location     Type
  8558 ;;  f1              3   14[BANK0 ] float 
  8559 ;;  f2              3   17[BANK0 ] float 
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8562 ;;  sign            1   29[BANK0 ] unsigned char 
  8563 ;;  cntr            1   28[BANK0 ] unsigned char 
  8564 ;;  exp             1   24[BANK0 ] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  3   14[BANK0 ] float 
  8567 ;; Registers used:
  8568 ;;		wreg, status,2, status,0, pclath, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8574 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;Total ram usage:       16 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    5
  8581 ;; This function calls:
  8582 ;;		___ftpack
  8583 ;; This function is called by:
  8584 ;;		_getPercentValue
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           
  8589                           ;psect for function ___ftmul
  8590  0A44                     ___ftmul:	
  8591                           
  8592                           ;incstack = 0
  8593                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8594  0A44  0020               	movlb	0	; select bank0
  8595  0A45  082E               	movf	___ftmul@f1,w
  8596  0A46  00B4               	movwf	??___ftmul
  8597  0A47  082F               	movf	___ftmul@f1+1,w
  8598  0A48  00B5               	movwf	??___ftmul+1
  8599  0A49  0830               	movf	___ftmul@f1+2,w
  8600  0A4A  00B6               	movwf	??___ftmul+2
  8601  0A4B  1003               	clrc
  8602  0A4C  0D35               	rlf	??___ftmul+1,w
  8603  0A4D  0D36               	rlf	??___ftmul+2,w
  8604  0A4E  00B7               	movwf	??___ftmul+3
  8605  0A4F  0837               	movf	??___ftmul+3,w
  8606  0A50  00B8               	movwf	___ftmul@exp
  8607  0A51  08B8               	movf	___ftmul@exp,f
  8608  0A52  1D03               	skipz
  8609  0A53  2A5B               	goto	l6282
  8610  0A54  3000               	movlw	0
  8611  0A55  00AE               	movwf	?___ftmul
  8612  0A56  3000               	movlw	0
  8613  0A57  00AF               	movwf	?___ftmul+1
  8614  0A58  3000               	movlw	0
  8615  0A59  00B0               	movwf	?___ftmul+2
  8616  0A5A  0008               	return
  8617  0A5B                     l6282:	
  8618  0A5B  0831               	movf	___ftmul@f2,w
  8619  0A5C  00B4               	movwf	??___ftmul
  8620  0A5D  0832               	movf	___ftmul@f2+1,w
  8621  0A5E  00B5               	movwf	??___ftmul+1
  8622  0A5F  0833               	movf	___ftmul@f2+2,w
  8623  0A60  00B6               	movwf	??___ftmul+2
  8624  0A61  1003               	clrc
  8625  0A62  0D35               	rlf	??___ftmul+1,w
  8626  0A63  0D36               	rlf	??___ftmul+2,w
  8627  0A64  00B7               	movwf	??___ftmul+3
  8628  0A65  0837               	movf	??___ftmul+3,w
  8629  0A66  00BD               	movwf	___ftmul@sign
  8630  0A67  08BD               	movf	___ftmul@sign,f
  8631  0A68  1D03               	skipz
  8632  0A69  2A71               	goto	l6288
  8633  0A6A  3000               	movlw	0
  8634  0A6B  00AE               	movwf	?___ftmul
  8635  0A6C  3000               	movlw	0
  8636  0A6D  00AF               	movwf	?___ftmul+1
  8637  0A6E  3000               	movlw	0
  8638  0A6F  00B0               	movwf	?___ftmul+2
  8639  0A70  0008               	return
  8640  0A71                     l6288:	
  8641  0A71  083D               	movf	___ftmul@sign,w
  8642  0A72  3E7B               	addlw	123
  8643  0A73  00B4               	movwf	??___ftmul
  8644  0A74  0834               	movf	??___ftmul,w
  8645  0A75  07B8               	addwf	___ftmul@exp,f
  8646  0A76  082E               	movf	___ftmul@f1,w
  8647  0A77  00B4               	movwf	??___ftmul
  8648  0A78  082F               	movf	___ftmul@f1+1,w
  8649  0A79  00B5               	movwf	??___ftmul+1
  8650  0A7A  0830               	movf	___ftmul@f1+2,w
  8651  0A7B  00B6               	movwf	??___ftmul+2
  8652  0A7C  3010               	movlw	16
  8653  0A7D                     u4545:	
  8654  0A7D  36B6               	lsrf	??___ftmul+2,f
  8655  0A7E  0CB5               	rrf	??___ftmul+1,f
  8656  0A7F  0CB4               	rrf	??___ftmul,f
  8657  0A80  0B89               	decfsz	9,f
  8658  0A81  2A7D               	goto	u4545
  8659  0A82  0834               	movf	??___ftmul,w
  8660  0A83  00B7               	movwf	??___ftmul+3
  8661  0A84  0837               	movf	??___ftmul+3,w
  8662  0A85  00BD               	movwf	___ftmul@sign
  8663  0A86  0831               	movf	___ftmul@f2,w
  8664  0A87  00B4               	movwf	??___ftmul
  8665  0A88  0832               	movf	___ftmul@f2+1,w
  8666  0A89  00B5               	movwf	??___ftmul+1
  8667  0A8A  0833               	movf	___ftmul@f2+2,w
  8668  0A8B  00B6               	movwf	??___ftmul+2
  8669  0A8C  3010               	movlw	16
  8670  0A8D                     u4555:	
  8671  0A8D  36B6               	lsrf	??___ftmul+2,f
  8672  0A8E  0CB5               	rrf	??___ftmul+1,f
  8673  0A8F  0CB4               	rrf	??___ftmul,f
  8674  0A90  0B89               	decfsz	9,f
  8675  0A91  2A8D               	goto	u4555
  8676  0A92  0834               	movf	??___ftmul,w
  8677  0A93  00B7               	movwf	??___ftmul+3
  8678  0A94  0837               	movf	??___ftmul+3,w
  8679  0A95  06BD               	xorwf	___ftmul@sign,f
  8680  0A96  3080               	movlw	128
  8681  0A97  00B4               	movwf	??___ftmul
  8682  0A98  0834               	movf	??___ftmul,w
  8683  0A99  05BD               	andwf	___ftmul@sign,f
  8684  0A9A  17AF               	bsf	___ftmul@f1+1,7
  8685  0A9B  17B2               	bsf	___ftmul@f2+1,7
  8686  0A9C  30FF               	movlw	255
  8687  0A9D  05B1               	andwf	___ftmul@f2,f
  8688  0A9E  30FF               	movlw	255
  8689  0A9F  05B2               	andwf	___ftmul@f2+1,f
  8690  0AA0  3000               	movlw	0
  8691  0AA1  05B3               	andwf	___ftmul@f2+2,f
  8692  0AA2  3000               	movlw	0
  8693  0AA3  00B9               	movwf	___ftmul@f3_as_product
  8694  0AA4  3000               	movlw	0
  8695  0AA5  00BA               	movwf	___ftmul@f3_as_product+1
  8696  0AA6  3000               	movlw	0
  8697  0AA7  00BB               	movwf	___ftmul@f3_as_product+2
  8698  0AA8  3007               	movlw	7
  8699  0AA9  00B4               	movwf	??___ftmul
  8700  0AAA  0834               	movf	??___ftmul,w
  8701  0AAB  00BC               	movwf	___ftmul@cntr
  8702  0AAC                     l6300:	
  8703  0AAC  1C2E               	btfss	___ftmul@f1,0
  8704  0AAD  2AB4               	goto	l6304
  8705  0AAE  0831               	movf	___ftmul@f2,w
  8706  0AAF  07B9               	addwf	___ftmul@f3_as_product,f
  8707  0AB0  0832               	movf	___ftmul@f2+1,w
  8708  0AB1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8709  0AB2  0833               	movf	___ftmul@f2+2,w
  8710  0AB3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8711  0AB4                     l6304:	
  8712  0AB4  3001               	movlw	1
  8713  0AB5                     u4575:	
  8714  0AB5  36B0               	lsrf	___ftmul@f1+2,f
  8715  0AB6  0CAF               	rrf	___ftmul@f1+1,f
  8716  0AB7  0CAE               	rrf	___ftmul@f1,f
  8717  0AB8  0B89               	decfsz	9,f
  8718  0AB9  2AB5               	goto	u4575
  8719  0ABA  3001               	movlw	1
  8720  0ABB                     u4585:	
  8721  0ABB  35B1               	lslf	___ftmul@f2,f
  8722  0ABC  0DB2               	rlf	___ftmul@f2+1,f
  8723  0ABD  0DB3               	rlf	___ftmul@f2+2,f
  8724  0ABE  0B89               	decfsz	9,f
  8725  0ABF  2ABB               	goto	u4585
  8726  0AC0  3001               	movlw	1
  8727  0AC1  02BC               	subwf	___ftmul@cntr,f
  8728  0AC2  1D03               	btfss	3,2
  8729  0AC3  2AAC               	goto	l6300
  8730  0AC4  3009               	movlw	9
  8731  0AC5  00B4               	movwf	??___ftmul
  8732  0AC6  0834               	movf	??___ftmul,w
  8733  0AC7  00BC               	movwf	___ftmul@cntr
  8734  0AC8                     l6312:	
  8735  0AC8  1C2E               	btfss	___ftmul@f1,0
  8736  0AC9  2AD0               	goto	l6316
  8737  0ACA  0831               	movf	___ftmul@f2,w
  8738  0ACB  07B9               	addwf	___ftmul@f3_as_product,f
  8739  0ACC  0832               	movf	___ftmul@f2+1,w
  8740  0ACD  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8741  0ACE  0833               	movf	___ftmul@f2+2,w
  8742  0ACF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8743  0AD0                     l6316:	
  8744  0AD0  3001               	movlw	1
  8745  0AD1                     u4615:	
  8746  0AD1  36B0               	lsrf	___ftmul@f1+2,f
  8747  0AD2  0CAF               	rrf	___ftmul@f1+1,f
  8748  0AD3  0CAE               	rrf	___ftmul@f1,f
  8749  0AD4  0B89               	decfsz	9,f
  8750  0AD5  2AD1               	goto	u4615
  8751  0AD6  3001               	movlw	1
  8752  0AD7                     u4625:	
  8753  0AD7  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8754  0AD8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8755  0AD9  0CB9               	rrf	___ftmul@f3_as_product,f
  8756  0ADA  0B89               	decfsz	9,f
  8757  0ADB  2AD7               	goto	u4625
  8758  0ADC  3001               	movlw	1
  8759  0ADD  02BC               	subwf	___ftmul@cntr,f
  8760  0ADE  1D03               	btfss	3,2
  8761  0ADF  2AC8               	goto	l6312
  8762  0AE0  0839               	movf	___ftmul@f3_as_product,w
  8763  0AE1  00A0               	movwf	___ftpack@arg
  8764  0AE2  083A               	movf	___ftmul@f3_as_product+1,w
  8765  0AE3  00A1               	movwf	___ftpack@arg+1
  8766  0AE4  083B               	movf	___ftmul@f3_as_product+2,w
  8767  0AE5  00A2               	movwf	___ftpack@arg+2
  8768  0AE6  0838               	movf	___ftmul@exp,w
  8769  0AE7  00B4               	movwf	??___ftmul
  8770  0AE8  0834               	movf	??___ftmul,w
  8771  0AE9  00A3               	movwf	___ftpack@exp
  8772  0AEA  083D               	movf	___ftmul@sign,w
  8773  0AEB  00B5               	movwf	??___ftmul+1
  8774  0AEC  0835               	movf	??___ftmul+1,w
  8775  0AED  00A4               	movwf	___ftpack@sign
  8776  0AEE  319F  279F         	fcall	___ftpack
  8777  0AF0  0020               	movlb	0	; select bank0
  8778  0AF1  0820               	movf	?___ftpack,w
  8779  0AF2  00AE               	movwf	?___ftmul
  8780  0AF3  0821               	movf	?___ftpack+1,w
  8781  0AF4  00AF               	movwf	?___ftmul+1
  8782  0AF5  0822               	movf	?___ftpack+2,w
  8783  0AF6  00B0               	movwf	?___ftmul+2
  8784  0AF7  0008               	return
  8785  0AF8                     __end_of___ftmul:	
  8786                           
  8787                           	psect	text34
  8788  0BC1                     __ptext34:	
  8789 ;; *************** function ___ftadd *****************
  8790 ;; Defined at:
  8791 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;  f1              3   30[BANK0 ] float 
  8794 ;;  f2              3   33[BANK0 ] float 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  exp1            1   42[BANK0 ] unsigned char 
  8797 ;;  exp2            1   41[BANK0 ] unsigned char 
  8798 ;;  sign            1   40[BANK0 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  3   30[BANK0 ] float 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2, status,0, pclath, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:       13 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    5
  8815 ;; This function calls:
  8816 ;;		___ftpack
  8817 ;; This function is called by:
  8818 ;;		_getPercentValue
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function ___ftadd
  8824  0BC1                     ___ftadd:	
  8825                           
  8826                           ;incstack = 0
  8827                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8828  0BC1  0020               	movlb	0	; select bank0
  8829  0BC2  083E               	movf	___ftadd@f1,w
  8830  0BC3  00C4               	movwf	??___ftadd
  8831  0BC4  083F               	movf	___ftadd@f1+1,w
  8832  0BC5  00C5               	movwf	??___ftadd+1
  8833  0BC6  0840               	movf	___ftadd@f1+2,w
  8834  0BC7  00C6               	movwf	??___ftadd+2
  8835  0BC8  1003               	clrc
  8836  0BC9  0D45               	rlf	??___ftadd+1,w
  8837  0BCA  0D46               	rlf	??___ftadd+2,w
  8838  0BCB  00C7               	movwf	??___ftadd+3
  8839  0BCC  0847               	movf	??___ftadd+3,w
  8840  0BCD  00CA               	movwf	___ftadd@exp1
  8841  0BCE  0841               	movf	___ftadd@f2,w
  8842  0BCF  00C4               	movwf	??___ftadd
  8843  0BD0  0842               	movf	___ftadd@f2+1,w
  8844  0BD1  00C5               	movwf	??___ftadd+1
  8845  0BD2  0843               	movf	___ftadd@f2+2,w
  8846  0BD3  00C6               	movwf	??___ftadd+2
  8847  0BD4  1003               	clrc
  8848  0BD5  0D45               	rlf	??___ftadd+1,w
  8849  0BD6  0D46               	rlf	??___ftadd+2,w
  8850  0BD7  00C7               	movwf	??___ftadd+3
  8851  0BD8  0847               	movf	??___ftadd+3,w
  8852  0BD9  00C9               	movwf	___ftadd@exp2
  8853  0BDA  084A               	movf	___ftadd@exp1,w
  8854  0BDB  1903               	btfsc	3,2
  8855  0BDC  2BE9               	goto	l6170
  8856  0BDD  0849               	movf	___ftadd@exp2,w
  8857  0BDE  024A               	subwf	___ftadd@exp1,w
  8858  0BDF  1803               	skipnc
  8859  0BE0  2BF0               	goto	l6174
  8860  0BE1  034A               	decf	___ftadd@exp1,w
  8861  0BE2  3AFF               	xorlw	255
  8862  0BE3  0749               	addwf	___ftadd@exp2,w
  8863  0BE4  00C4               	movwf	??___ftadd
  8864  0BE5  3019               	movlw	25
  8865  0BE6  0244               	subwf	??___ftadd,w
  8866  0BE7  1C03               	skipc
  8867  0BE8  2BF0               	goto	l6174
  8868  0BE9                     l6170:	
  8869  0BE9  0841               	movf	___ftadd@f2,w
  8870  0BEA  00BE               	movwf	?___ftadd
  8871  0BEB  0842               	movf	___ftadd@f2+1,w
  8872  0BEC  00BF               	movwf	?___ftadd+1
  8873  0BED  0843               	movf	___ftadd@f2+2,w
  8874  0BEE  00C0               	movwf	?___ftadd+2
  8875  0BEF  0008               	return
  8876  0BF0                     l6174:	
  8877  0BF0  0849               	movf	___ftadd@exp2,w
  8878  0BF1  1903               	btfsc	3,2
  8879  0BF2  0008               	return
  8880  0BF3  084A               	movf	___ftadd@exp1,w
  8881  0BF4  0249               	subwf	___ftadd@exp2,w
  8882  0BF5  1803               	skipnc
  8883  0BF6  2BFF               	goto	l6180
  8884  0BF7  0349               	decf	___ftadd@exp2,w
  8885  0BF8  3AFF               	xorlw	255
  8886  0BF9  074A               	addwf	___ftadd@exp1,w
  8887  0BFA  00C4               	movwf	??___ftadd
  8888  0BFB  3019               	movlw	25
  8889  0BFC  0244               	subwf	??___ftadd,w
  8890  0BFD  1803               	btfsc	3,0
  8891  0BFE  0008               	return
  8892  0BFF                     l6180:	
  8893  0BFF  3006               	movlw	6
  8894  0C00  00C4               	movwf	??___ftadd
  8895  0C01  0844               	movf	??___ftadd,w
  8896  0C02  00C8               	movwf	___ftadd@sign
  8897  0C03  1BC0               	btfsc	___ftadd@f1+2,7
  8898  0C04  17C8               	bsf	___ftadd@sign,7
  8899  0C05  1BC3               	btfsc	___ftadd@f2+2,7
  8900  0C06  1748               	bsf	___ftadd@sign,6
  8901  0C07  17BF               	bsf	___ftadd@f1+1,7
  8902  0C08  30FF               	movlw	255
  8903  0C09  05BE               	andwf	___ftadd@f1,f
  8904  0C0A  30FF               	movlw	255
  8905  0C0B  05BF               	andwf	___ftadd@f1+1,f
  8906  0C0C  3000               	movlw	0
  8907  0C0D  05C0               	andwf	___ftadd@f1+2,f
  8908  0C0E  17C2               	bsf	___ftadd@f2+1,7
  8909  0C0F  30FF               	movlw	255
  8910  0C10  05C1               	andwf	___ftadd@f2,f
  8911  0C11  30FF               	movlw	255
  8912  0C12  05C2               	andwf	___ftadd@f2+1,f
  8913  0C13  3000               	movlw	0
  8914  0C14  05C3               	andwf	___ftadd@f2+2,f
  8915  0C15  0849               	movf	___ftadd@exp2,w
  8916  0C16  024A               	subwf	___ftadd@exp1,w
  8917  0C17  1803               	skipnc
  8918  0C18  2C3B               	goto	l6202
  8919  0C19                     l6192:	
  8920  0C19  3001               	movlw	1
  8921  0C1A                     u4305:	
  8922  0C1A  35C1               	lslf	___ftadd@f2,f
  8923  0C1B  0DC2               	rlf	___ftadd@f2+1,f
  8924  0C1C  0DC3               	rlf	___ftadd@f2+2,f
  8925  0C1D  0B89               	decfsz	9,f
  8926  0C1E  2C1A               	goto	u4305
  8927  0C1F  3001               	movlw	1
  8928  0C20  02C9               	subwf	___ftadd@exp2,f
  8929  0C21  0849               	movf	___ftadd@exp2,w
  8930  0C22  064A               	xorwf	___ftadd@exp1,w
  8931  0C23  1903               	skipnz
  8932  0C24  2C36               	goto	l6200
  8933  0C25  3001               	movlw	1
  8934  0C26  02C8               	subwf	___ftadd@sign,f
  8935  0C27  0848               	movf	___ftadd@sign,w
  8936  0C28  3907               	andlw	7
  8937  0C29  1903               	btfsc	3,2
  8938  0C2A  2C36               	goto	l6200
  8939  0C2B  2C19               	goto	l6192
  8940  0C2C                     l6198:	
  8941  0C2C  3001               	movlw	1
  8942  0C2D                     u4335:	
  8943  0C2D  36C0               	lsrf	___ftadd@f1+2,f
  8944  0C2E  0CBF               	rrf	___ftadd@f1+1,f
  8945  0C2F  0CBE               	rrf	___ftadd@f1,f
  8946  0C30  0B89               	decfsz	9,f
  8947  0C31  2C2D               	goto	u4335
  8948  0C32  3001               	movlw	1
  8949  0C33  00C4               	movwf	??___ftadd
  8950  0C34  0844               	movf	??___ftadd,w
  8951  0C35  07CA               	addwf	___ftadd@exp1,f
  8952  0C36                     l6200:	
  8953  0C36  084A               	movf	___ftadd@exp1,w
  8954  0C37  0649               	xorwf	___ftadd@exp2,w
  8955  0C38  1903               	btfsc	3,2
  8956  0C39  2C60               	goto	l3427
  8957  0C3A  2C2C               	goto	l6198
  8958  0C3B                     l6202:	
  8959  0C3B  084A               	movf	___ftadd@exp1,w
  8960  0C3C  0249               	subwf	___ftadd@exp2,w
  8961  0C3D  1803               	skipnc
  8962  0C3E  2C60               	goto	l3427
  8963  0C3F                     l6204:	
  8964  0C3F  3001               	movlw	1
  8965  0C40                     u4365:	
  8966  0C40  35BE               	lslf	___ftadd@f1,f
  8967  0C41  0DBF               	rlf	___ftadd@f1+1,f
  8968  0C42  0DC0               	rlf	___ftadd@f1+2,f
  8969  0C43  0B89               	decfsz	9,f
  8970  0C44  2C40               	goto	u4365
  8971  0C45  3001               	movlw	1
  8972  0C46  02CA               	subwf	___ftadd@exp1,f
  8973  0C47  0849               	movf	___ftadd@exp2,w
  8974  0C48  064A               	xorwf	___ftadd@exp1,w
  8975  0C49  1903               	skipnz
  8976  0C4A  2C5C               	goto	l6212
  8977  0C4B  3001               	movlw	1
  8978  0C4C  02C8               	subwf	___ftadd@sign,f
  8979  0C4D  0848               	movf	___ftadd@sign,w
  8980  0C4E  3907               	andlw	7
  8981  0C4F  1903               	btfsc	3,2
  8982  0C50  2C5C               	goto	l6212
  8983  0C51  2C3F               	goto	l6204
  8984  0C52                     l6210:	
  8985  0C52  3001               	movlw	1
  8986  0C53                     u4395:	
  8987  0C53  36C3               	lsrf	___ftadd@f2+2,f
  8988  0C54  0CC2               	rrf	___ftadd@f2+1,f
  8989  0C55  0CC1               	rrf	___ftadd@f2,f
  8990  0C56  0B89               	decfsz	9,f
  8991  0C57  2C53               	goto	u4395
  8992  0C58  3001               	movlw	1
  8993  0C59  00C4               	movwf	??___ftadd
  8994  0C5A  0844               	movf	??___ftadd,w
  8995  0C5B  07C9               	addwf	___ftadd@exp2,f
  8996  0C5C                     l6212:	
  8997  0C5C  084A               	movf	___ftadd@exp1,w
  8998  0C5D  0649               	xorwf	___ftadd@exp2,w
  8999  0C5E  1D03               	skipz
  9000  0C5F  2C52               	goto	l6210
  9001  0C60                     l3427:	
  9002  0C60  1FC8               	btfss	___ftadd@sign,7
  9003  0C61  2C72               	goto	l6216
  9004  0C62  30FF               	movlw	255
  9005  0C63  06BE               	xorwf	___ftadd@f1,f
  9006  0C64  30FF               	movlw	255
  9007  0C65  06BF               	xorwf	___ftadd@f1+1,f
  9008  0C66  30FF               	movlw	255
  9009  0C67  06C0               	xorwf	___ftadd@f1+2,f
  9010  0C68  3001               	movlw	1
  9011  0C69  07BE               	addwf	___ftadd@f1,f
  9012  0C6A  3000               	movlw	0
  9013  0C6B  1803               	skipnc
  9014  0C6C  3001               	movlw	1
  9015  0C6D  07BF               	addwf	___ftadd@f1+1,f
  9016  0C6E  3000               	movlw	0
  9017  0C6F  1803               	skipnc
  9018  0C70  3001               	movlw	1
  9019  0C71  07C0               	addwf	___ftadd@f1+2,f
  9020  0C72                     l6216:	
  9021  0C72  1F48               	btfss	___ftadd@sign,6
  9022  0C73  2C84               	goto	l6220
  9023  0C74  30FF               	movlw	255
  9024  0C75  06C1               	xorwf	___ftadd@f2,f
  9025  0C76  30FF               	movlw	255
  9026  0C77  06C2               	xorwf	___ftadd@f2+1,f
  9027  0C78  30FF               	movlw	255
  9028  0C79  06C3               	xorwf	___ftadd@f2+2,f
  9029  0C7A  3001               	movlw	1
  9030  0C7B  07C1               	addwf	___ftadd@f2,f
  9031  0C7C  3000               	movlw	0
  9032  0C7D  1803               	skipnc
  9033  0C7E  3001               	movlw	1
  9034  0C7F  07C2               	addwf	___ftadd@f2+1,f
  9035  0C80  3000               	movlw	0
  9036  0C81  1803               	skipnc
  9037  0C82  3001               	movlw	1
  9038  0C83  07C3               	addwf	___ftadd@f2+2,f
  9039  0C84                     l6220:	
  9040  0C84  01C8               	clrf	___ftadd@sign
  9041  0C85  083E               	movf	___ftadd@f1,w
  9042  0C86  07C1               	addwf	___ftadd@f2,f
  9043  0C87  083F               	movf	___ftadd@f1+1,w
  9044  0C88  3DC2               	addwfc	___ftadd@f2+1,f
  9045  0C89  0840               	movf	___ftadd@f1+2,w
  9046  0C8A  3DC3               	addwfc	___ftadd@f2+2,f
  9047  0C8B  1FC3               	btfss	___ftadd@f2+2,7
  9048  0C8C  2C9F               	goto	l6230
  9049  0C8D  30FF               	movlw	255
  9050  0C8E  06C1               	xorwf	___ftadd@f2,f
  9051  0C8F  30FF               	movlw	255
  9052  0C90  06C2               	xorwf	___ftadd@f2+1,f
  9053  0C91  30FF               	movlw	255
  9054  0C92  06C3               	xorwf	___ftadd@f2+2,f
  9055  0C93  3001               	movlw	1
  9056  0C94  07C1               	addwf	___ftadd@f2,f
  9057  0C95  3000               	movlw	0
  9058  0C96  1803               	skipnc
  9059  0C97  3001               	movlw	1
  9060  0C98  07C2               	addwf	___ftadd@f2+1,f
  9061  0C99  3000               	movlw	0
  9062  0C9A  1803               	skipnc
  9063  0C9B  3001               	movlw	1
  9064  0C9C  07C3               	addwf	___ftadd@f2+2,f
  9065  0C9D  01C8               	clrf	___ftadd@sign
  9066  0C9E  0AC8               	incf	___ftadd@sign,f
  9067  0C9F                     l6230:	
  9068  0C9F  0841               	movf	___ftadd@f2,w
  9069  0CA0  00A0               	movwf	___ftpack@arg
  9070  0CA1  0842               	movf	___ftadd@f2+1,w
  9071  0CA2  00A1               	movwf	___ftpack@arg+1
  9072  0CA3  0843               	movf	___ftadd@f2+2,w
  9073  0CA4  00A2               	movwf	___ftpack@arg+2
  9074  0CA5  084A               	movf	___ftadd@exp1,w
  9075  0CA6  00C4               	movwf	??___ftadd
  9076  0CA7  0844               	movf	??___ftadd,w
  9077  0CA8  00A3               	movwf	___ftpack@exp
  9078  0CA9  0848               	movf	___ftadd@sign,w
  9079  0CAA  00C5               	movwf	??___ftadd+1
  9080  0CAB  0845               	movf	??___ftadd+1,w
  9081  0CAC  00A4               	movwf	___ftpack@sign
  9082  0CAD  319F  279F         	fcall	___ftpack
  9083  0CAF  0020               	movlb	0	; select bank0
  9084  0CB0  0820               	movf	?___ftpack,w
  9085  0CB1  00BE               	movwf	?___ftadd
  9086  0CB2  0821               	movf	?___ftpack+1,w
  9087  0CB3  00BF               	movwf	?___ftadd+1
  9088  0CB4  0822               	movf	?___ftpack+2,w
  9089  0CB5  00C0               	movwf	?___ftadd+2
  9090  0CB6  0008               	return
  9091  0CB7                     __end_of___ftadd:	
  9092                           
  9093                           	psect	text35
  9094  1952                     __ptext35:	
  9095 ;; *************** function _RF_RxDisable *****************
  9096 ;; Defined at:
  9097 ;;		line 191 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  rf              1    wreg     unsigned char 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  rf              1    4[BANK0 ] unsigned char 
  9102 ;; Return value:  Size  Location     Type
  9103 ;;		None               void
  9104 ;; Registers used:
  9105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        1 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    6
  9118 ;; This function calls:
  9119 ;;		_CC2500_WriteCommand
  9120 ;;		_RfPointSelect
  9121 ;;		_setINT_GO
  9122 ;; This function is called by:
  9123 ;;		_setRF_Main
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function _RF_RxDisable
  9129  1952                     _RF_RxDisable:	
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9133                           ;RF_RxDisable@rf stored from wreg
  9134  1952  0020               	movlb	0	; select bank0
  9135  1953  00A4               	movwf	RF_RxDisable@rf
  9136                           
  9137                           ;RF_Control_B1.c: 193: RfPointSelect(rf);
  9138  1954  0824               	movf	RF_RxDisable@rf,w
  9139  1955  31A4  243D  3199   	fcall	_RfPointSelect
  9140                           
  9141                           ;RF_Control_B1.c: 195: if(RF->RxStatus)
  9142  1958  087C               	movf	_RF,w
  9143  1959  0086               	movwf	6
  9144  195A  0187               	clrf	7
  9145  195B  1D81               	btfss	1,3
  9146  195C  0008               	return
  9147                           
  9148                           ;RF_Control_B1.c: 196: {
  9149                           ;RF_Control_B1.c: 197: RF->RxStatus=0;
  9150  195D  087C               	movf	_RF,w
  9151  195E  0086               	movwf	6
  9152  195F  0187               	clrf	7
  9153  1960  1181               	bcf	1,3
  9154                           
  9155                           ;RF_Control_B1.c: 198: RF->ReceiveGO=0;
  9156  1961  087C               	movf	_RF,w
  9157  1962  0086               	movwf	6
  9158  1963  0187               	clrf	7
  9159  1964  1081               	bcf	1,1
  9160                           
  9161                           ;RF_Control_B1.c: 199: RF->DebounceTime=0;
  9162  1965  0A7C               	incf	_RF,w
  9163  1966  0086               	movwf	6
  9164  1967  0187               	clrf	7
  9165  1968  0181               	clrf	1
  9166                           
  9167                           ;RF_Control_B1.c: 200: RF->Debounce=0;
  9168  1969  087C               	movf	_RF,w
  9169  196A  0086               	movwf	6
  9170  196B  0187               	clrf	7
  9171  196C  1281               	bcf	1,5
  9172                           
  9173                           ;RF_Control_B1.c: 201: CC2500_WriteCommand(0x36);
  9174  196D  3036               	movlw	54
  9175  196E  31A5  2540  3199   	fcall	_CC2500_WriteCommand
  9176                           
  9177                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x3A);
  9178  1971  303A               	movlw	58
  9179  1972  31A5  2540  3199   	fcall	_CC2500_WriteCommand
  9180                           
  9181                           ;RF_Control_B1.c: 203: setINT_GO(0);
  9182  1975  3000               	movlw	0
  9183  1976  31A4  2414         	fcall	_setINT_GO
  9184  1978  0008               	return
  9185  1979                     __end_of_RF_RxDisable:	
  9186                           
  9187                           	psect	text36
  9188  1D78                     __ptext36:	
  9189 ;; *************** function _CC2500_TxData *****************
  9190 ;; Defined at:
  9191 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9196 ;; Return value:  Size  Location     Type
  9197 ;;		None               void
  9198 ;; Registers used:
  9199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;Total ram usage:        2 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    6
  9212 ;; This function calls:
  9213 ;;		_CC2500_WriteByte
  9214 ;;		_CC2500_WriteCommand
  9215 ;; This function is called by:
  9216 ;;		_setRF_Main
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           
  9221                           ;psect for function _CC2500_TxData
  9222  1D78                     _CC2500_TxData:	
  9223                           
  9224                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9225                           ;CC2500_B1.c: 34: RC4=0;
  9226                           
  9227                           ;incstack = 0
  9228                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9229  1D78  0020               	movlb	0	; select bank0
  9230  1D79  120E               	bcf	14,4	;volatile
  9231                           
  9232                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9233  1D7A  307F               	movlw	127
  9234  1D7B  00A4               	movwf	??_CC2500_TxData
  9235  1D7C  0824               	movf	??_CC2500_TxData,w
  9236  1D7D  0021               	movlb	1	; select bank1
  9237  1D7E  00BF               	movwf	_SPI0Buffer^(0+128)
  9238  1D7F                     l307:	
  9239                           ;CC2500_B1.c: 36: while(RC2==1);
  9240                           
  9241  1D7F  0020               	movlb	0	; select bank0
  9242  1D80  190E               	btfsc	14,2	;volatile
  9243  1D81  2D7F               	goto	l307
  9244                           
  9245                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9246  1D82  31A6  2694  319D   	fcall	_CC2500_WriteByte
  9247                           
  9248                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9249  1D85  0021               	movlb	1	; select bank1
  9250  1D86  0840               	movf	_Tx_Length^(0+128),w
  9251  1D87  0020               	movlb	0	; select bank0
  9252  1D88  00A4               	movwf	??_CC2500_TxData
  9253  1D89  0824               	movf	??_CC2500_TxData,w
  9254  1D8A  0021               	movlb	1	; select bank1
  9255  1D8B  00BF               	movwf	_SPI0Buffer^(0+128)
  9256                           
  9257                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9258  1D8C  31A6  2694  319D   	fcall	_CC2500_WriteByte
  9259                           
  9260                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9261  1D8F  0020               	movlb	0	; select bank0
  9262  1D90  01A5               	clrf	CC2500_TxData@loop_e
  9263  1D91                     l6958:	
  9264  1D91  0021               	movlb	1	; select bank1
  9265  1D92  0840               	movf	_Tx_Length^(0+128),w
  9266  1D93  0020               	movlb	0	; select bank0
  9267  1D94  0225               	subwf	CC2500_TxData@loop_e,w
  9268  1D95  1803               	btfsc	3,0
  9269  1D96  2DA9               	goto	l312
  9270                           
  9271                           ;CC2500_B1.c: 41: {
  9272                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9273  1D97  0825               	movf	CC2500_TxData@loop_e,w
  9274  1D98  3EA0               	addlw	_RF_Data& (0+255)
  9275  1D99  0086               	movwf	6
  9276  1D9A  0187               	clrf	7
  9277  1D9B  0801               	movf	1,w
  9278  1D9C  00A4               	movwf	??_CC2500_TxData
  9279  1D9D  0824               	movf	??_CC2500_TxData,w
  9280  1D9E  0021               	movlb	1	; select bank1
  9281  1D9F  00BF               	movwf	_SPI0Buffer^(0+128)
  9282                           
  9283                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9284  1DA0  31A6  2694  319D   	fcall	_CC2500_WriteByte
  9285  1DA3  3001               	movlw	1
  9286  1DA4  0020               	movlb	0	; select bank0
  9287  1DA5  00A4               	movwf	??_CC2500_TxData
  9288  1DA6  0824               	movf	??_CC2500_TxData,w
  9289  1DA7  07A5               	addwf	CC2500_TxData@loop_e,f
  9290  1DA8  2D91               	goto	l6958
  9291  1DA9                     l312:	
  9292                           
  9293                           ;CC2500_B1.c: 44: }
  9294                           ;CC2500_B1.c: 45: RC4=1;
  9295  1DA9  160E               	bsf	14,4	;volatile
  9296                           
  9297                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9298  1DAA  3035               	movlw	53
  9299  1DAB  31A5  2540  319D   	fcall	_CC2500_WriteCommand
  9300  1DAE                     l313:	
  9301                           ;CC2500_B1.c: 47: while(RB0==0);
  9302                           
  9303  1DAE  0020               	movlb	0	; select bank0
  9304  1DAF  1C0D               	btfss	13,0	;volatile
  9305  1DB0  2DAE               	goto	l313
  9306  1DB1                     l316:	
  9307                           ;CC2500_B1.c: 48: while(RB0==1);
  9308                           
  9309  1DB1  180D               	btfsc	13,0	;volatile
  9310  1DB2  2DB1               	goto	l316
  9311                           
  9312                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9313  1DB3  3036               	movlw	54
  9314  1DB4  31A5  2540  319D   	fcall	_CC2500_WriteCommand
  9315                           
  9316                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9317  1DB7  303B               	movlw	59
  9318  1DB8  31A5  2540         	fcall	_CC2500_WriteCommand
  9319                           
  9320                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9321  1DBA  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9322  1DBB  0008               	return
  9323  1DBC                     __end_of_CC2500_TxData:	
  9324                           
  9325                           	psect	text37
  9326  105C                     __ptext37:	
  9327 ;; *************** function _CC2500_RxData *****************
  9328 ;; Defined at:
  9329 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        2 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    6
  9350 ;; This function calls:
  9351 ;;		_CC2500_ReadByte
  9352 ;;		_CC2500_ReadStatus
  9353 ;;		_CC2500_WriteByte
  9354 ;;		_CC2500_WriteCommand
  9355 ;;		_setRF_RxStatus
  9356 ;; This function is called by:
  9357 ;;		_setRF_Main
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           
  9362                           ;psect for function _CC2500_RxData
  9363  105C                     _CC2500_RxData:	
  9364                           
  9365                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9366                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9370  105C  0020               	movlb	0	; select bank0
  9371  105D  180D               	btfsc	13,0	;volatile
  9372  105E                     l323:	
  9373                           ;CC2500_B1.c: 63: {
  9374                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9375                           
  9376  105E  180D               	btfsc	13,0	;volatile
  9377  105F  285E               	goto	l323
  9378                           
  9379                           ;CC2500_B1.c: 65: }
  9380                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9381  1060  303B               	movlw	59
  9382  1061  31A7  272D  3190   	fcall	_CC2500_ReadStatus
  9383                           
  9384                           ;CC2500_B1.c: 67: if(s_data != 0)
  9385  1064  0021               	movlb	1	; select bank1
  9386  1065  0843               	movf	_s_data^(0+128),w
  9387  1066  1903               	btfsc	3,2
  9388  1067  28B2               	goto	l8978
  9389                           
  9390                           ;CC2500_B1.c: 69: {
  9391                           ;CC2500_B1.c: 70: RC4=0;
  9392  1068  0020               	movlb	0	; select bank0
  9393  1069  120E               	bcf	14,4	;volatile
  9394                           
  9395                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9396  106A  30FF               	movlw	255
  9397  106B  00A4               	movwf	??_CC2500_RxData
  9398  106C  0824               	movf	??_CC2500_RxData,w
  9399  106D  0021               	movlb	1	; select bank1
  9400  106E  00BF               	movwf	_SPI0Buffer^(0+128)
  9401  106F                     l327:	
  9402                           ;CC2500_B1.c: 72: while(RC2==1);
  9403                           
  9404  106F  0020               	movlb	0	; select bank0
  9405  1070  190E               	btfsc	14,2	;volatile
  9406  1071  286F               	goto	l327
  9407                           
  9408                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9409  1072  31A6  2694  3190   	fcall	_CC2500_WriteByte
  9410                           
  9411                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9412  1075  31A7  2764  3190   	fcall	_CC2500_ReadByte
  9413                           
  9414                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9415  1078  0021               	movlb	1	; select bank1
  9416  1079  083F               	movf	_SPI0Buffer^(0+128),w
  9417  107A  0020               	movlb	0	; select bank0
  9418  107B  00A4               	movwf	??_CC2500_RxData
  9419  107C  0824               	movf	??_CC2500_RxData,w
  9420  107D  0021               	movlb	1	; select bank1
  9421  107E  00BE               	movwf	_Rx_Length^(0+128)
  9422                           
  9423                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9424  107F  0020               	movlb	0	; select bank0
  9425  1080  01A5               	clrf	CC2500_RxData@loop_f
  9426  1081                     l8964:	
  9427  1081  0021               	movlb	1	; select bank1
  9428  1082  083E               	movf	_Rx_Length^(0+128),w
  9429  1083  0020               	movlb	0	; select bank0
  9430  1084  0225               	subwf	CC2500_RxData@loop_f,w
  9431  1085  1803               	btfsc	3,0
  9432  1086  2899               	goto	l8966
  9433                           
  9434                           ;CC2500_B1.c: 78: {
  9435                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9436  1087  31A7  2764  3190   	fcall	_CC2500_ReadByte
  9437                           
  9438                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9439  108A  0021               	movlb	1	; select bank1
  9440  108B  083F               	movf	_SPI0Buffer^(0+128),w
  9441  108C  0020               	movlb	0	; select bank0
  9442  108D  00A4               	movwf	??_CC2500_RxData
  9443  108E  0825               	movf	CC2500_RxData@loop_f,w
  9444  108F  3EA0               	addlw	_RF_Data& (0+255)
  9445  1090  0086               	movwf	6
  9446  1091  0187               	clrf	7
  9447  1092  0824               	movf	??_CC2500_RxData,w
  9448  1093  0081               	movwf	1
  9449  1094  3001               	movlw	1
  9450  1095  00A4               	movwf	??_CC2500_RxData
  9451  1096  0824               	movf	??_CC2500_RxData,w
  9452  1097  07A5               	addwf	CC2500_RxData@loop_f,f
  9453  1098  2881               	goto	l8964
  9454  1099                     l8966:	
  9455                           
  9456                           ;CC2500_B1.c: 81: }
  9457                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9458  1099  31A7  2764  3190   	fcall	_CC2500_ReadByte
  9459                           
  9460                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9461  109C  0021               	movlb	1	; select bank1
  9462  109D  083F               	movf	_SPI0Buffer^(0+128),w
  9463  109E  0020               	movlb	0	; select bank0
  9464  109F  00A4               	movwf	??_CC2500_RxData
  9465  10A0  0824               	movf	??_CC2500_RxData,w
  9466  10A1  0021               	movlb	1	; select bank1
  9467  10A2  00BD               	movwf	_RSSI^(0+128)
  9468                           
  9469                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9470  10A3  31A7  2764  3190   	fcall	_CC2500_ReadByte
  9471                           
  9472                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9473  10A6  0021               	movlb	1	; select bank1
  9474  10A7  083F               	movf	_SPI0Buffer^(0+128),w
  9475  10A8  0020               	movlb	0	; select bank0
  9476  10A9  00A4               	movwf	??_CC2500_RxData
  9477  10AA  0824               	movf	??_CC2500_RxData,w
  9478  10AB  0021               	movlb	1	; select bank1
  9479  10AC  00B7               	movwf	_CRC^(0+128)
  9480                           
  9481                           ;CC2500_B1.c: 86: RC4=1;
  9482  10AD  0020               	movlb	0	; select bank0
  9483  10AE  160E               	bsf	14,4	;volatile
  9484                           
  9485                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9486  10AF  0021               	movlb	1	; select bank1
  9487  10B0  1BB7               	btfsc	_CRC^(0+128),7
  9488                           
  9489                           ;CC2500_B1.c: 88: Receive_OK=1;
  9490  10B1  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9491  10B2                     l8978:	
  9492                           
  9493                           ;CC2500_B1.c: 89: }
  9494                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9495  10B2  3036               	movlw	54
  9496  10B3  31A5  2540  3190   	fcall	_CC2500_WriteCommand
  9497                           
  9498                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9499  10B6  303A               	movlw	58
  9500  10B7  31A5  2540  3190   	fcall	_CC2500_WriteCommand
  9501                           
  9502                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9503  10BA  0020               	movlb	0	; select bank0
  9504  10BB  01A2               	clrf	setRF_RxStatus@command
  9505  10BC  3001               	movlw	1
  9506  10BD  31A5  2506         	fcall	_setRF_RxStatus
  9507  10BF  0008               	return
  9508  10C0                     __end_of_CC2500_RxData:	
  9509                           
  9510                           	psect	text38
  9511  2506                     __ptext38:	
  9512 ;; *************** function _setRF_RxStatus *****************
  9513 ;; Defined at:
  9514 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  rf              1    wreg     unsigned char 
  9517 ;;  command         1    2[BANK0 ] unsigned char 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  rf              1    3[BANK0 ] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;		None               void
  9522 ;; Registers used:
  9523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        2 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    5
  9536 ;; This function calls:
  9537 ;;		_RfPointSelect
  9538 ;; This function is called by:
  9539 ;;		_CC2500_RxData
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _setRF_RxStatus
  9545  2506                     _setRF_RxStatus:	
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9549                           ;setRF_RxStatus@rf stored from wreg
  9550  2506  0020               	movlb	0	; select bank0
  9551  2507  00A3               	movwf	setRF_RxStatus@rf
  9552                           
  9553                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9554  2508  0823               	movf	setRF_RxStatus@rf,w
  9555  2509  31A4  243D         	fcall	_RfPointSelect
  9556                           
  9557                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9558  250B  087C               	movf	_RF,w
  9559  250C  0086               	movwf	6
  9560  250D  0187               	clrf	7
  9561  250E  0020               	movlb	0	; select bank0
  9562  250F  0822               	movf	setRF_RxStatus@command,w
  9563  2510  1181               	bcf	1,3
  9564  2511  1D03               	skipz
  9565  2512  1581               	bsf	1,3
  9566  2513  0008               	return
  9567  2514                     __end_of_setRF_RxStatus:	
  9568                           
  9569                           	psect	text39
  9570  272D                     __ptext39:	
  9571 ;; *************** function _CC2500_ReadStatus *****************
  9572 ;; Defined at:
  9573 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;  status_addr     1    wreg     unsigned char 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, pclath, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;Total ram usage:        2 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    5
  9594 ;; This function calls:
  9595 ;;		_CC2500_ReadByte
  9596 ;;		_CC2500_WriteByte
  9597 ;; This function is called by:
  9598 ;;		_CC2500_RxData
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _CC2500_ReadStatus
  9604  272D                     _CC2500_ReadStatus:	
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9608                           ;CC2500_ReadStatus@status_addr stored from wreg
  9609  272D  0020               	movlb	0	; select bank0
  9610  272E  00A3               	movwf	CC2500_ReadStatus@status_addr
  9611                           
  9612                           ;CC2500_B1.c: 269: RC4=0;
  9613  272F  120E               	bcf	14,4	;volatile
  9614                           
  9615                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9616  2730  0823               	movf	CC2500_ReadStatus@status_addr,w
  9617  2731  3EC0               	addlw	192
  9618  2732  00A2               	movwf	??_CC2500_ReadStatus
  9619  2733  0822               	movf	??_CC2500_ReadStatus,w
  9620  2734  0021               	movlb	1	; select bank1
  9621  2735  00BF               	movwf	_SPI0Buffer^(0+128)
  9622  2736                     l403:	
  9623                           ;CC2500_B1.c: 272: while(RC2==1);
  9624                           
  9625  2736  0020               	movlb	0	; select bank0
  9626  2737  190E               	btfsc	14,2	;volatile
  9627  2738  2F36               	goto	l403
  9628                           
  9629                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9630  2739  31A6  2694  31A7   	fcall	_CC2500_WriteByte
  9631                           
  9632                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9633  273C  31A7  2764         	fcall	_CC2500_ReadByte
  9634                           
  9635                           ;CC2500_B1.c: 276: RC4=1;
  9636  273E  0020               	movlb	0	; select bank0
  9637  273F  160E               	bsf	14,4	;volatile
  9638                           
  9639                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9640  2740  0021               	movlb	1	; select bank1
  9641  2741  083F               	movf	_SPI0Buffer^(0+128),w
  9642  2742  0020               	movlb	0	; select bank0
  9643  2743  00A2               	movwf	??_CC2500_ReadStatus
  9644  2744  0822               	movf	??_CC2500_ReadStatus,w
  9645  2745  0021               	movlb	1	; select bank1
  9646  2746  00C3               	movwf	_s_data^(0+128)
  9647  2747  0008               	return
  9648  2748                     __end_of_CC2500_ReadStatus:	
  9649                           
  9650                           	psect	text40
  9651  2764                     __ptext40:	
  9652 ;; *************** function _CC2500_ReadByte *****************
  9653 ;; Defined at:
  9654 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;		None
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9659 ;; Return value:  Size  Location     Type
  9660 ;;		None               void
  9661 ;; Registers used:
  9662 ;;		wreg, status,2, status,0
  9663 ;; Tracked objects:
  9664 ;;		On entry : 0/0
  9665 ;;		On exit  : 0/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;Total ram usage:        2 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:    4
  9675 ;; This function calls:
  9676 ;;		Nothing
  9677 ;; This function is called by:
  9678 ;;		_CC2500_RxData
  9679 ;;		_CC2500_ReadStatus
  9680 ;;		_CC2500_ReadREG
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _CC2500_ReadByte
  9686  2764                     _CC2500_ReadByte:	
  9687                           
  9688                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9689                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9693  2764  0020               	movlb	0	; select bank0
  9694  2765  01A1               	clrf	CC2500_ReadByte@loop_b
  9695  2766                     L11:	
  9696  2766  3008               	movlw	8
  9697  2767  0221               	subwf	CC2500_ReadByte@loop_b,w
  9698  2768  1803               	btfsc	3,0
  9699  2769  0008               	return
  9700                           
  9701                           ;CC2500_B1.c: 214: {
  9702                           ;CC2500_B1.c: 215: RC1=1;
  9703  276A  148E               	bsf	14,1	;volatile
  9704                           
  9705                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9706  276B  1003               	clrc
  9707  276C  0021               	movlb	1	; select bank1
  9708  276D  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9709                           
  9710                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9711  276E  0020               	movlb	0	; select bank0
  9712  276F  1D0E               	btfss	14,2	;volatile
  9713  2770  2F74               	goto	l6682
  9714                           
  9715                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9716  2771  0021               	movlb	1	; select bank1
  9717  2772  143F               	bsf	_SPI0Buffer^(0+128),0
  9718  2773  2F7A               	goto	l6684
  9719  2774                     l6682:	
  9720                           
  9721                           ;CC2500_B1.c: 219: else
  9722                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9723  2774  30FE               	movlw	254
  9724  2775  0020               	movlb	0	; select bank0
  9725  2776  00A0               	movwf	??_CC2500_ReadByte
  9726  2777  0820               	movf	??_CC2500_ReadByte,w
  9727  2778  0021               	movlb	1	; select bank1
  9728  2779  05BF               	andwf	_SPI0Buffer^(0+128),f
  9729  277A                     l6684:	
  9730                           
  9731                           ;CC2500_B1.c: 221: RC1=0;
  9732  277A  0020               	movlb	0	; select bank0
  9733  277B  108E               	bcf	14,1	;volatile
  9734  277C  3001               	movlw	1
  9735  277D  00A0               	movwf	??_CC2500_ReadByte
  9736  277E  0820               	movf	??_CC2500_ReadByte,w
  9737  277F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9738  2780  2F66               	goto	L11
  9739  2781                     __end_of_CC2500_ReadByte:	
  9740                           
  9741                           	psect	text41
  9742  23A8                     __ptext41:	
  9743 ;; *************** function _RF_Initialization *****************
  9744 ;; Defined at:
  9745 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;		None
  9750 ;; Return value:  Size  Location     Type
  9751 ;;		None               void
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0, pclath, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;Total ram usage:        0 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    5
  9766 ;; This function calls:
  9767 ;;		_setRF_Initialization
  9768 ;; This function is called by:
  9769 ;;		_main
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           
  9774                           ;psect for function _RF_Initialization
  9775  23A8                     _RF_Initialization:	
  9776                           
  9777                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9778                           
  9779                           ;incstack = 0
  9780                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9781  23A8  3001               	movlw	1
  9782  23A9  31A3  23DC         	fcall	_setRF_Initialization
  9783  23AB  0008               	return
  9784  23AC                     __end_of_RF_Initialization:	
  9785                           
  9786                           	psect	text42
  9787  23DC                     __ptext42:	
  9788 ;; *************** function _setRF_Initialization *****************
  9789 ;; Defined at:
  9790 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  rf              1    wreg     unsigned char 
  9793 ;; Auto vars:     Size  Location     Type
  9794 ;;  rf              1    0[COMMON] unsigned char 
  9795 ;; Return value:  Size  Location     Type
  9796 ;;		None               void
  9797 ;; Registers used:
  9798 ;;		wreg
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;Total ram usage:        1 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; Hardware stack levels required when called:    4
  9811 ;; This function calls:
  9812 ;;		Nothing
  9813 ;; This function is called by:
  9814 ;;		_RF_Initialization
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           
  9819                           ;psect for function _setRF_Initialization
  9820  23DC                     _setRF_Initialization:	
  9821                           
  9822                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9823                           
  9824                           ;incstack = 0
  9825                           ; Regs used in _setRF_Initialization: [wreg]
  9826  23DC  3015               	movlw	21
  9827  23DD  0020               	movlb	0	; select bank0
  9828  23DE  00A0               	movwf	??_setRF_Initialization
  9829  23DF  0820               	movf	??_setRF_Initialization,w
  9830  23E0  0021               	movlb	1	; select bank1
  9831  23E1  00C0               	movwf	_Tx_Length^(0+128)
  9832  23E2  0008               	return
  9833  23E3                     __end_of_setRF_Initialization:	
  9834                           
  9835                           	psect	text43
  9836  2396                     __ptext43:	
  9837 ;; *************** function _PowerFault_Main *****************
  9838 ;; Defined at:
  9839 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:   10
  9860 ;; This function calls:
  9861 ;;		_setPowerFault_Main
  9862 ;; This function is called by:
  9863 ;;		_main
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _PowerFault_Main
  9869  2396                     _PowerFault_Main:	
  9870                           
  9871                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9875  2396  318D  25AF         	fcall	_setPowerFault_Main
  9876  2398  0008               	return
  9877  2399                     __end_of_PowerFault_Main:	
  9878                           
  9879                           	psect	text44
  9880  0DAF                     __ptext44:	
  9881 ;; *************** function _setPowerFault_Main *****************
  9882 ;; Defined at:
  9883 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;		None               void
  9890 ;; Registers used:
  9891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        2 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    9
  9904 ;; This function calls:
  9905 ;;		_getLoad_Safe
  9906 ;;		_getTemp_Safe
  9907 ;;		_setPowerFault_Exceptions
  9908 ;; This function is called by:
  9909 ;;		_PowerFault_Main
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _setPowerFault_Main
  9915  0DAF                     _setPowerFault_Main:	
  9916                           
  9917                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9918                           
  9919                           ;incstack = 0
  9920                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9921  0DAF  087B               	movf	_PF,w
  9922  0DB0  0086               	movwf	6
  9923  0DB1  3001               	movlw	1	; select bank2/3
  9924  0DB2  0087               	movwf	7
  9925  0DB3  1C01               	btfss	1,0
  9926  0DB4  0008               	return
  9927                           
  9928                           ;PowerFault_B1.c: 64: {
  9929                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9930  0DB5  087B               	movf	_PF,w
  9931  0DB6  0086               	movwf	6
  9932  0DB7  3001               	movlw	1	; select bank2/3
  9933  0DB8  0087               	movwf	7
  9934  0DB9  1981               	btfsc	1,3
  9935  0DBA  2DFF               	goto	l9498
  9936                           
  9937                           ;PowerFault_B1.c: 66: {
  9938                           ;PowerFault_B1.c: 67: PF->Time++;
  9939  0DBB  087B               	movf	_PF,w
  9940  0DBC  3E06               	addlw	6
  9941  0DBD  0086               	movwf	6
  9942  0DBE  3001               	movlw	1	; select bank2/3
  9943  0DBF  0087               	movwf	7
  9944  0DC0  3001               	movlw	1
  9945  0DC1  0781               	addwf	1,f
  9946  0DC2  3141               	addfsr 1,1
  9947  0DC3  1803               	skipnc
  9948  0DC4  0A81               	incf	1,f
  9949                           
  9950                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9951  0DC5  087B               	movf	_PF,w
  9952  0DC6  3E06               	addlw	6
  9953  0DC7  0086               	movwf	6
  9954  0DC8  3001               	movlw	1	; select bank2/3
  9955  0DC9  0087               	movwf	7
  9956  0DCA  3F40               	moviw [0]fsr1
  9957  0DCB  0020               	movlb	0	; select bank0
  9958  0DCC  00AD               	movwf	??_setPowerFault_Main
  9959  0DCD  3F41               	moviw [1]fsr1
  9960  0DCE  00AE               	movwf	??_setPowerFault_Main+1
  9961  0DCF  3002               	movlw	2
  9962  0DD0  022E               	subwf	??_setPowerFault_Main+1,w
  9963  0DD1  30BC               	movlw	188
  9964  0DD2  1903               	skipnz
  9965  0DD3  022D               	subwf	??_setPowerFault_Main,w
  9966  0DD4  1C03               	skipc
  9967  0DD5  0008               	return
  9968                           
  9969                           ;PowerFault_B1.c: 69: {
  9970                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9971  0DD6  31A4  2474  318D   	fcall	_getLoad_Safe
  9972  0DD9  3A00               	xorlw	0
  9973  0DDA  1903               	skipnz
  9974  0DDB  2DF5               	goto	l9496
  9975  0DDC  31A3  23CE  318D   	fcall	_getTemp_Safe
  9976  0DDF  3A00               	xorlw	0
  9977  0DE0  1903               	skipnz
  9978  0DE1  2DF5               	goto	l9496
  9979                           
  9980                           ;PowerFault_B1.c: 71: {
  9981                           ;PowerFault_B1.c: 72: PF->Time=0;
  9982  0DE2  087B               	movf	_PF,w
  9983  0DE3  3E06               	addlw	6
  9984  0DE4  0086               	movwf	6
  9985  0DE5  3001               	movlw	1	; select bank2/3
  9986  0DE6  0087               	movwf	7
  9987  0DE7  3000               	movlw	0
  9988  0DE8  3FC0               	movwi [0]fsr1
  9989  0DE9  3FC1               	movwi [1]fsr1
  9990                           
  9991                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9992  0DEA  087B               	movf	_PF,w
  9993  0DEB  0086               	movwf	6
  9994  0DEC  3001               	movlw	1	; select bank2/3
  9995  0DED  0087               	movwf	7
  9996  0DEE  1581               	bsf	1,3
  9997                           
  9998                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9999  0DEF  087B               	movf	_PF,w
 10000  0DF0  0086               	movwf	6
 10001  0DF1  3001               	movlw	1	; select bank2/3
 10002  0DF2  0087               	movwf	7
 10003  0DF3  1101               	bcf	1,2
 10004                           
 10005                           ;PowerFault_B1.c: 75: }
 10006  0DF4  0008               	return
 10007  0DF5                     l9496:	
 10008                           
 10009                           ;PowerFault_B1.c: 76: else
 10010                           ;PowerFault_B1.c: 77: {
 10011                           ;PowerFault_B1.c: 78: PF->Time=700;
 10012  0DF5  087B               	movf	_PF,w
 10013  0DF6  3E06               	addlw	6
 10014  0DF7  0086               	movwf	6
 10015  0DF8  3001               	movlw	1	; select bank2/3
 10016  0DF9  0087               	movwf	7
 10017  0DFA  30BC               	movlw	188
 10018  0DFB  3FC0               	movwi [0]fsr1
 10019  0DFC  3002               	movlw	2
 10020  0DFD  3FC1               	movwi [1]fsr1
 10021                           
 10022                           ;PowerFault_B1.c: 79: }
 10023                           ;PowerFault_B1.c: 80: }
 10024                           ;PowerFault_B1.c: 81: }
 10025  0DFE  0008               	return
 10026  0DFF                     l9498:	
 10027                           
 10028                           ;PowerFault_B1.c: 82: else
 10029                           ;PowerFault_B1.c: 83: {
 10030                           ;PowerFault_B1.c: 84: PF->Time++;
 10031  0DFF  087B               	movf	_PF,w
 10032  0E00  3E06               	addlw	6
 10033  0E01  0086               	movwf	6
 10034  0E02  3001               	movlw	1	; select bank2/3
 10035  0E03  0087               	movwf	7
 10036  0E04  3001               	movlw	1
 10037  0E05  0781               	addwf	1,f
 10038  0E06  3141               	addfsr 1,1
 10039  0E07  1803               	skipnc
 10040  0E08  0A81               	incf	1,f
 10041                           
 10042                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10043  0E09  087B               	movf	_PF,w
 10044  0E0A  3E06               	addlw	6
 10045  0E0B  0086               	movwf	6
 10046  0E0C  3001               	movlw	1	; select bank2/3
 10047  0E0D  0087               	movwf	7
 10048  0E0E  3F40               	moviw [0]fsr1
 10049  0E0F  0020               	movlb	0	; select bank0
 10050  0E10  00AD               	movwf	??_setPowerFault_Main
 10051  0E11  3F41               	moviw [1]fsr1
 10052  0E12  00AE               	movwf	??_setPowerFault_Main+1
 10053  0E13  3000               	movlw	0
 10054  0E14  022E               	subwf	??_setPowerFault_Main+1,w
 10055  0E15  3002               	movlw	2
 10056  0E16  1903               	skipnz
 10057  0E17  022D               	subwf	??_setPowerFault_Main,w
 10058  0E18  1C03               	skipc
 10059  0E19  0008               	return
 10060                           
 10061                           ;PowerFault_B1.c: 86: {
 10062                           ;PowerFault_B1.c: 87: PF->Time=0;
 10063  0E1A  087B               	movf	_PF,w
 10064  0E1B  3E06               	addlw	6
 10065  0E1C  0086               	movwf	6
 10066  0E1D  3001               	movlw	1	; select bank2/3
 10067  0E1E  0087               	movwf	7
 10068  0E1F  3000               	movlw	0
 10069  0E20  3FC0               	movwi [0]fsr1
 10070  0E21  3FC1               	movwi [1]fsr1
 10071                           
 10072                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10073  0E22  087B               	movf	_PF,w
 10074  0E23  0086               	movwf	6
 10075  0E24  3001               	movlw	1	; select bank2/3
 10076  0E25  0087               	movwf	7
 10077  0E26  1181               	bcf	1,3
 10078                           
 10079                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10080  0E27  087B               	movf	_PF,w
 10081  0E28  0086               	movwf	6
 10082  0E29  3001               	movlw	1	; select bank2/3
 10083  0E2A  0087               	movwf	7
 10084  0E2B  1C81               	btfss	1,1
 10085  0E2C  2E68               	goto	l9518
 10086                           
 10087                           ;PowerFault_B1.c: 91: {
 10088                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10089  0E2D  0A7B               	incf	_PF,w
 10090  0E2E  0086               	movwf	6
 10091  0E2F  3001               	movlw	1	; select bank2/3
 10092  0E30  0087               	movwf	7
 10093  0E31  3F40               	moviw [0]fsr1
 10094  0E32  00AD               	movwf	??_setPowerFault_Main
 10095  0E33  3F41               	moviw [1]fsr1
 10096  0E34  00AE               	movwf	??_setPowerFault_Main+1
 10097  0E35  3001               	movlw	1
 10098  0E36  022E               	subwf	??_setPowerFault_Main+1,w
 10099  0E37  3091               	movlw	145
 10100  0E38  1903               	skipnz
 10101  0E39  022D               	subwf	??_setPowerFault_Main,w
 10102  0E3A  1803               	skipnc
 10103  0E3B  2EA4               	goto	l9530
 10104  0E3C  0A7B               	incf	_PF,w
 10105  0E3D  0086               	movwf	6
 10106  0E3E  3001               	movlw	1	; select bank2/3
 10107  0E3F  0087               	movwf	7
 10108  0E40  3F40               	moviw [0]fsr1
 10109  0E41  00AD               	movwf	??_setPowerFault_Main
 10110  0E42  3F41               	moviw [1]fsr1
 10111  0E43  00AE               	movwf	??_setPowerFault_Main+1
 10112  0E44  3000               	movlw	0
 10113  0E45  022E               	subwf	??_setPowerFault_Main+1,w
 10114  0E46  30C8               	movlw	200
 10115  0E47  1903               	skipnz
 10116  0E48  022D               	subwf	??_setPowerFault_Main,w
 10117  0E49  1C03               	skipc
 10118  0E4A  2EA4               	goto	l9530
 10119                           
 10120                           ;PowerFault_B1.c: 93: {
 10121                           ;PowerFault_B1.c: 94: PF->Count++;
 10122  0E4B  3001               	movlw	1
 10123  0E4C  00AD               	movwf	??_setPowerFault_Main
 10124  0E4D  087B               	movf	_PF,w
 10125  0E4E  3E05               	addlw	5
 10126  0E4F  0086               	movwf	6
 10127  0E50  3001               	movlw	1	; select bank2/3
 10128  0E51  0087               	movwf	7
 10129  0E52  082D               	movf	??_setPowerFault_Main,w
 10130  0E53  0781               	addwf	1,f
 10131                           
 10132                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10133  0E54  087B               	movf	_PF,w
 10134  0E55  3E05               	addlw	5
 10135  0E56  0086               	movwf	6
 10136  0E57  3001               	movlw	1	; select bank2/3
 10137  0E58  0087               	movwf	7
 10138  0E59  3002               	movlw	2
 10139  0E5A  0201               	subwf	1,w
 10140  0E5B  1C03               	skipc
 10141  0E5C  2EAA               	goto	l9532
 10142                           
 10143                           ;PowerFault_B1.c: 96: {
 10144                           ;PowerFault_B1.c: 97: PF->Count=0;
 10145  0E5D  087B               	movf	_PF,w
 10146  0E5E  3E05               	addlw	5
 10147  0E5F  0086               	movwf	6
 10148  0E60  3001               	movlw	1	; select bank2/3
 10149  0E61  0087               	movwf	7
 10150  0E62  0181               	clrf	1
 10151                           
 10152                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10153  0E63  3000               	movlw	0
 10154  0E64  319B  23B4  318D   	fcall	_setPowerFault_Exceptions
 10155                           
 10156                           ;PowerFault_B1.c: 99: }
 10157                           ;PowerFault_B1.c: 100: }
 10158  0E67  2EAA               	goto	l9532
 10159  0E68                     l9518:	
 10160                           ;PowerFault_B1.c: 104: }
 10161                           ;PowerFault_B1.c: 105: }
 10162                           
 10163                           ;PowerFault_B1.c: 101: else
 10164                           ;PowerFault_B1.c: 102: {
 10165                           ;PowerFault_B1.c: 103: PF->Count=0;
 10166                           
 10167                           
 10168                           ;PowerFault_B1.c: 106: else
 10169                           ;PowerFault_B1.c: 107: {
 10170                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10171  0E68  0A7B               	incf	_PF,w
 10172  0E69  0086               	movwf	6
 10173  0E6A  3001               	movlw	1	; select bank2/3
 10174  0E6B  0087               	movwf	7
 10175  0E6C  3F40               	moviw [0]fsr1
 10176  0E6D  0020               	movlb	0	; select bank0
 10177  0E6E  00AD               	movwf	??_setPowerFault_Main
 10178  0E6F  3F41               	moviw [1]fsr1
 10179  0E70  00AE               	movwf	??_setPowerFault_Main+1
 10180  0E71  3001               	movlw	1
 10181  0E72  022E               	subwf	??_setPowerFault_Main+1,w
 10182  0E73  3090               	movlw	144
 10183  0E74  1903               	skipnz
 10184  0E75  022D               	subwf	??_setPowerFault_Main,w
 10185  0E76  1803               	skipnc
 10186  0E77  2E87               	goto	l9522
 10187  0E78  0A7B               	incf	_PF,w
 10188  0E79  0086               	movwf	6
 10189  0E7A  3001               	movlw	1	; select bank2/3
 10190  0E7B  0087               	movwf	7
 10191  0E7C  3F40               	moviw [0]fsr1
 10192  0E7D  00AD               	movwf	??_setPowerFault_Main
 10193  0E7E  3F41               	moviw [1]fsr1
 10194  0E7F  00AE               	movwf	??_setPowerFault_Main+1
 10195  0E80  3000               	movlw	0
 10196  0E81  022E               	subwf	??_setPowerFault_Main+1,w
 10197  0E82  30D3               	movlw	211
 10198  0E83  1903               	skipnz
 10199  0E84  022D               	subwf	??_setPowerFault_Main,w
 10200  0E85  1803               	skipnc
 10201  0E86  2EA4               	goto	l9530
 10202  0E87                     l9522:	
 10203                           
 10204                           ;PowerFault_B1.c: 109: {
 10205                           ;PowerFault_B1.c: 110: PF->Count++;
 10206  0E87  3001               	movlw	1
 10207  0E88  00AD               	movwf	??_setPowerFault_Main
 10208  0E89  087B               	movf	_PF,w
 10209  0E8A  3E05               	addlw	5
 10210  0E8B  0086               	movwf	6
 10211  0E8C  3001               	movlw	1	; select bank2/3
 10212  0E8D  0087               	movwf	7
 10213  0E8E  082D               	movf	??_setPowerFault_Main,w
 10214  0E8F  0781               	addwf	1,f
 10215                           
 10216                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10217  0E90  087B               	movf	_PF,w
 10218  0E91  3E05               	addlw	5
 10219  0E92  0086               	movwf	6
 10220  0E93  3001               	movlw	1	; select bank2/3
 10221  0E94  0087               	movwf	7
 10222  0E95  3002               	movlw	2
 10223  0E96  0201               	subwf	1,w
 10224  0E97  1C03               	skipc
 10225  0E98  2EAA               	goto	l9532
 10226                           
 10227                           ;PowerFault_B1.c: 112: {
 10228                           ;PowerFault_B1.c: 113: PF->Count=0;
 10229  0E99  087B               	movf	_PF,w
 10230  0E9A  3E05               	addlw	5
 10231  0E9B  0086               	movwf	6
 10232  0E9C  3001               	movlw	1	; select bank2/3
 10233  0E9D  0087               	movwf	7
 10234  0E9E  0181               	clrf	1
 10235                           
 10236                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10237  0E9F  3001               	movlw	1
 10238  0EA0  319B  23B4  318D   	fcall	_setPowerFault_Exceptions
 10239                           
 10240                           ;PowerFault_B1.c: 115: }
 10241                           ;PowerFault_B1.c: 116: }
 10242  0EA3  2EAA               	goto	l9532
 10243  0EA4                     l9530:	
 10244                           
 10245                           ;PowerFault_B1.c: 117: else
 10246                           ;PowerFault_B1.c: 118: {
 10247                           ;PowerFault_B1.c: 119: PF->Count=0;
 10248  0EA4  087B               	movf	_PF,w
 10249  0EA5  3E05               	addlw	5
 10250  0EA6  0086               	movwf	6
 10251  0EA7  3001               	movlw	1	; select bank2/3
 10252  0EA8  0087               	movwf	7
 10253  0EA9  0181               	clrf	1
 10254  0EAA                     l9532:	
 10255                           
 10256                           ;PowerFault_B1.c: 120: }
 10257                           ;PowerFault_B1.c: 122: }
 10258                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10259  0EAA  087B               	movf	_PF,w
 10260  0EAB  0086               	movwf	6
 10261  0EAC  3001               	movlw	1	; select bank2/3
 10262  0EAD  0087               	movwf	7
 10263  0EAE  1881               	btfsc	1,1
 10264  0EAF  2EB5               	goto	l2460
 10265                           
 10266                           ;PowerFault_B1.c: 124: {
 10267                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10268  0EB0  087B               	movf	_PF,w
 10269  0EB1  0086               	movwf	6
 10270  0EB2  3001               	movlw	1	; select bank2/3
 10271  0EB3  0087               	movwf	7
 10272  0EB4  1501               	bsf	1,2
 10273  0EB5                     l2460:	
 10274                           
 10275                           ;PowerFault_B1.c: 126: }
 10276                           ;PowerFault_B1.c: 127: PF->AD=0;
 10277  0EB5  0A7B               	incf	_PF,w
 10278  0EB6  0086               	movwf	6
 10279  0EB7  3001               	movlw	1	; select bank2/3
 10280  0EB8  0087               	movwf	7
 10281  0EB9  3000               	movlw	0
 10282  0EBA  3FC0               	movwi [0]fsr1
 10283  0EBB  3FC1               	movwi [1]fsr1
 10284  0EBC  0008               	return
 10285  0EBD                     __end_of_setPowerFault_Main:	
 10286                           
 10287                           	psect	text45
 10288  1BB4                     __ptext45:	
 10289 ;; *************** function _setPowerFault_Exceptions *****************
 10290 ;; Defined at:
 10291 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;  command         1    wreg     unsigned char 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  command         1   12[BANK0 ] unsigned char 
 10296 ;; Return value:  Size  Location     Type
 10297 ;;		None               void
 10298 ;; Registers used:
 10299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;Total ram usage:        2 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    8
 10312 ;; This function calls:
 10313 ;;		_DimmerLights_Exceptions
 10314 ;;		_setLED
 10315 ;;		_setRF_Enable
 10316 ;;		_setSw_Enable
 10317 ;; This function is called by:
 10318 ;;		_setPowerFault_Main
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           
 10323                           ;psect for function _setPowerFault_Exceptions
 10324  1BB4                     _setPowerFault_Exceptions:	
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10328                           ;setPowerFault_Exceptions@command stored from wreg
 10329  1BB4  0020               	movlb	0	; select bank0
 10330  1BB5  00AC               	movwf	setPowerFault_Exceptions@command
 10331                           
 10332                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10333  1BB6  087B               	movf	_PF,w
 10334  1BB7  0086               	movwf	6
 10335  1BB8  3001               	movlw	1	; select bank2/3
 10336  1BB9  0087               	movwf	7
 10337  1BBA  082C               	movf	setPowerFault_Exceptions@command,w
 10338  1BBB  1081               	bcf	1,1
 10339  1BBC  1D03               	skipz
 10340  1BBD  1481               	bsf	1,1
 10341                           
 10342                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10343  1BBE  092C               	comf	setPowerFault_Exceptions@command,w
 10344  1BBF  3901               	andlw	1
 10345  1BC0  00AB               	movwf	??_setPowerFault_Exceptions
 10346  1BC1  087B               	movf	_PF,w
 10347  1BC2  0086               	movwf	6
 10348  1BC3  3001               	movlw	1	; select bank2/3
 10349  1BC4  0087               	movwf	7
 10350  1BC5  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10351  1BC6  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10352  1BC7  0801               	movf	1,w
 10353  1BC8  062B               	xorwf	??_setPowerFault_Exceptions,w
 10354  1BC9  39FB               	andlw	-5
 10355  1BCA  062B               	xorwf	??_setPowerFault_Exceptions,w
 10356  1BCB  0081               	movwf	1
 10357                           
 10358                           ;PowerFault_B1.c: 137: if(command == 1)
 10359  1BCC  082C               	movf	setPowerFault_Exceptions@command,w
 10360  1BCD  3A01               	xorlw	1
 10361  1BCE  1D03               	skipz
 10362  1BCF  2BD4               	goto	l2464
 10363                           
 10364                           ;PowerFault_B1.c: 138: {
 10365                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10366  1BD0  3003               	movlw	3
 10367  1BD1  3190  20C0  319B   	fcall	_DimmerLights_Exceptions
 10368  1BD4                     l2464:	
 10369                           
 10370                           ;PowerFault_B1.c: 140: }
 10371                           ;PowerFault_B1.c: 141: setLED(99,command+10);
 10372  1BD4  0020               	movlb	0	; select bank0
 10373  1BD5  082C               	movf	setPowerFault_Exceptions@command,w
 10374  1BD6  3E0A               	addlw	10
 10375  1BD7  00AB               	movwf	??_setPowerFault_Exceptions
 10376  1BD8  082B               	movf	??_setPowerFault_Exceptions,w
 10377  1BD9  00A2               	movwf	setLED@command
 10378  1BDA  3063               	movlw	99
 10379  1BDB  319F  2741  319B   	fcall	_setLED
 10380                           
 10381                           ;PowerFault_B1.c: 143: setSw_Enable((~command) & 0x01);
 10382  1BDE  0020               	movlb	0	; select bank0
 10383  1BDF  092C               	comf	setPowerFault_Exceptions@command,w
 10384  1BE0  3901               	andlw	1
 10385  1BE1  31A7  2748  319B   	fcall	_setSw_Enable
 10386                           
 10387                           ;PowerFault_B1.c: 145: setRF_Enable(1,(~command) & 0x01);
 10388  1BE4  0020               	movlb	0	; select bank0
 10389  1BE5  092C               	comf	setPowerFault_Exceptions@command,w
 10390  1BE6  3901               	andlw	1
 10391  1BE7  00AB               	movwf	??_setPowerFault_Exceptions
 10392  1BE8  082B               	movf	??_setPowerFault_Exceptions,w
 10393  1BE9  00A2               	movwf	setRF_Enable@command
 10394  1BEA  3001               	movlw	1
 10395  1BEB  3199  21A3         	fcall	_setRF_Enable
 10396  1BED  0008               	return
 10397  1BEE                     __end_of_setPowerFault_Exceptions:	
 10398                           
 10399                           	psect	text46
 10400  2474                     __ptext46:	
 10401 ;; *************** function _getLoad_Safe *****************
 10402 ;; Defined at:
 10403 ;;		line 297 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;		None
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      unsigned char 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;Total ram usage:        1 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    4
 10424 ;; This function calls:
 10425 ;;		Nothing
 10426 ;; This function is called by:
 10427 ;;		_setTemp_Main
 10428 ;;		_setPowerFault_Main
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _getLoad_Safe
 10434  2474                     _getLoad_Safe:	
 10435                           
 10436                           ;OverLoad_B1.c: 299: return Load->Safe;
 10437                           
 10438                           ;incstack = 0
 10439                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10440  2474  0020               	movlb	0	; select bank0
 10441  2475  086E               	movf	_Load,w
 10442  2476  0086               	movwf	6
 10443  2477  3002               	movlw	2	; select bank4/5
 10444  2478  0087               	movwf	7
 10445  2479  0C01               	rrf	1,w
 10446  247A  00A0               	movwf	??_getLoad_Safe
 10447  247B  0CA0               	rrf	??_getLoad_Safe,f
 10448  247C  0C20               	rrf	??_getLoad_Safe,w
 10449  247D  3901               	andlw	1
 10450  247E  0008               	return
 10451  247F                     __end_of_getLoad_Safe:	
 10452                           
 10453                           	psect	text47
 10454  2393                     __ptext47:	
 10455 ;; *************** function _PowerFault_Initialization *****************
 10456 ;; Defined at:
 10457 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;		None               void
 10464 ;; Registers used:
 10465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        0 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    5
 10478 ;; This function calls:
 10479 ;;		_setPowerFault_Initialization
 10480 ;; This function is called by:
 10481 ;;		_main
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _PowerFault_Initialization
 10487  2393                     _PowerFault_Initialization:	
 10488                           
 10489                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10493  2393  31A5  2590         	fcall	_setPowerFault_Initialization
 10494  2395  0008               	return
 10495  2396                     __end_of_PowerFault_Initialization:	
 10496                           
 10497                           	psect	text48
 10498  2590                     __ptext48:	
 10499 ;; *************** function _setPowerFault_Initialization *****************
 10500 ;; Defined at:
 10501 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		wreg, fsr1l, fsr1h
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;Total ram usage:        1 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    4
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_PowerFault_Initialization
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _setPowerFault_Initialization
 10531  2590                     _setPowerFault_Initialization:	
 10532                           
 10533                           ;PowerFault_B1.c: 31: PF=&PF1;
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10537  2590  3066               	movlw	_PF1& (0+255)
 10538  2591  0020               	movlb	0	; select bank0
 10539  2592  00A0               	movwf	??_setPowerFault_Initialization
 10540  2593  0820               	movf	??_setPowerFault_Initialization,w
 10541  2594  00FB               	movwf	_PF
 10542                           
 10543                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10544  2595  087B               	movf	_PF,w
 10545  2596  0086               	movwf	6
 10546  2597  3001               	movlw	1	; select bank2/3
 10547  2598  0087               	movwf	7
 10548  2599  1401               	bsf	1,0
 10549                           
 10550                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10551  259A  087B               	movf	_PF,w
 10552  259B  0086               	movwf	6
 10553  259C  3001               	movlw	1	; select bank2/3
 10554  259D  0087               	movwf	7
 10555  259E  1501               	bsf	1,2
 10556  259F  0008               	return
 10557  25A0                     __end_of_setPowerFault_Initialization:	
 10558                           
 10559                           	psect	text49
 10560  267C                     __ptext49:	
 10561 ;; *************** function _Mcu_Initialization *****************
 10562 ;; Defined at:
 10563 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;		None
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;		None
 10568 ;; Return value:  Size  Location     Type
 10569 ;;		None               void
 10570 ;; Registers used:
 10571 ;;		wreg, status,2, status,0, pclath, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;Total ram usage:        1 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    5
 10584 ;; This function calls:
 10585 ;;		_ADC_Set
 10586 ;;		_INT_Set
 10587 ;;		_IOC_Set
 10588 ;;		_IO_Set
 10589 ;;		_TMR0_Set
 10590 ;; This function is called by:
 10591 ;;		_main
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function _Mcu_Initialization
 10597  267C                     _Mcu_Initialization:	
 10598                           
 10599                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10603  267C  3078               	movlw	120
 10604  267D  0021               	movlb	1	; select bank1
 10605  267E  0099               	movwf	25	;volatile
 10606                           
 10607                           ;MCU_16f1518_B1.c: 16: IO_Set();
 10608  267F  31A6  26DF  31A6   	fcall	_IO_Set
 10609                           
 10610                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
 10611  2682  31A4  24EC  31A6   	fcall	_TMR0_Set
 10612                           
 10613                           ;MCU_16f1518_B1.c: 20: ;;
 10614                           ;MCU_16f1518_B1.c: 22: ADC_Set();
 10615  2685  31A3  23D5  31A6   	fcall	_ADC_Set
 10616                           
 10617                           ;MCU_16f1518_B1.c: 26: INT_Set();
 10618  2688  31A3  23B5  31A6   	fcall	_INT_Set
 10619                           
 10620                           ;MCU_16f1518_B1.c: 28: IOC_Set();
 10621  268B  31A4  24DF         	fcall	_IOC_Set
 10622                           
 10623                           ;MCU_16f1518_B1.c: 30: ;;
 10624                           ;MCU_16f1518_B1.c: 32: ;;
 10625                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
 10626  268D  3020               	movlw	_VarMemory& (0+255)
 10627  268E  0020               	movlb	0	; select bank0
 10628  268F  00A1               	movwf	??_Mcu_Initialization
 10629  2690  0821               	movf	??_Mcu_Initialization,w
 10630  2691  0021               	movlb	1	; select bank1
 10631  2692  00E8               	movwf	_Memory^(0+128)
 10632  2693  0008               	return
 10633  2694                     __end_of_Mcu_Initialization:	
 10634                           
 10635                           	psect	text50
 10636  24EC                     __ptext50:	
 10637 ;; *************** function _TMR0_Set *****************
 10638 ;; Defined at:
 10639 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;		None
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;		None
 10644 ;; Return value:  Size  Location     Type
 10645 ;;		None               void
 10646 ;; Registers used:
 10647 ;;		wreg, status,2
 10648 ;; Tracked objects:
 10649 ;;		On entry : 0/0
 10650 ;;		On exit  : 0/0
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;Total ram usage:        1 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; Hardware stack levels required when called:    4
 10660 ;; This function calls:
 10661 ;;		Nothing
 10662 ;; This function is called by:
 10663 ;;		_Mcu_Initialization
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           
 10668                           ;psect for function _TMR0_Set
 10669  24EC                     _TMR0_Set:	
 10670                           
 10671                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
 10672                           
 10673                           ;incstack = 0
 10674                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10675  24EC  30C4               	movlw	_VarTimer0& (0+255)
 10676  24ED  0020               	movlb	0	; select bank0
 10677  24EE  00A0               	movwf	??_TMR0_Set
 10678  24EF  0820               	movf	??_TMR0_Set,w
 10679  24F0  0021               	movlb	1	; select bank1
 10680  24F1  00EA               	movwf	_Timer0^(0+128)
 10681                           
 10682                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
 10683  24F2  0195               	clrf	21	;volatile
 10684                           
 10685                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
 10686  24F3  30A6               	movlw	166
 10687  24F4  0020               	movlb	0	; select bank0
 10688  24F5  0095               	movwf	21	;volatile
 10689                           
 10690                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
 10691  24F6  168B               	bsf	11,5	;volatile
 10692                           
 10693                           ;MCU_16f1518_B1.c: 79: GIE=1;
 10694  24F7  178B               	bsf	11,7	;volatile
 10695  24F8  0008               	return
 10696  24F9                     __end_of_TMR0_Set:	
 10697                           
 10698                           	psect	text51
 10699  26DF                     __ptext51:	
 10700 ;; *************** function _IO_Set *****************
 10701 ;; Defined at:
 10702 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;		None
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;		None
 10707 ;; Return value:  Size  Location     Type
 10708 ;;		None               void
 10709 ;; Registers used:
 10710 ;;		wreg, status,2
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;Total ram usage:        0 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:    4
 10723 ;; This function calls:
 10724 ;;		Nothing
 10725 ;; This function is called by:
 10726 ;;		_Mcu_Initialization
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _IO_Set
 10732  26DF                     _IO_Set:	
 10733                           
 10734                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
 10735                           
 10736                           ;incstack = 0
 10737                           ; Regs used in _IO_Set: [wreg+status,2]
 10738  26DF  3077               	movlw	119
 10739  26E0  0021               	movlb	1	; select bank1
 10740  26E1  008C               	movwf	12	;volatile
 10741                           
 10742                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
 10743  26E2  3007               	movlw	7
 10744  26E3  008D               	movwf	13	;volatile
 10745                           
 10746                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
 10747  26E4  300C               	movlw	12
 10748  26E5  008E               	movwf	14	;volatile
 10749                           
 10750                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
 10751  26E6  0022               	movlb	2	; select bank2
 10752  26E7  018C               	clrf	12	;volatile
 10753                           
 10754                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
 10755  26E8  3002               	movlw	2
 10756  26E9  008D               	movwf	13	;volatile
 10757                           
 10758                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
 10759  26EA  018E               	clrf	14	;volatile
 10760                           
 10761                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
 10762  26EB  3022               	movlw	34
 10763  26EC  0023               	movlb	3	; select bank3
 10764  26ED  008C               	movwf	12	;volatile
 10765                           
 10766                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
 10767  26EE  018D               	clrf	13	;volatile
 10768                           
 10769                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
 10770  26EF  018E               	clrf	14	;volatile
 10771                           
 10772                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
 10773  26F0  3077               	movlw	119
 10774  26F1  0020               	movlb	0	; select bank0
 10775  26F2  008C               	movwf	12	;volatile
 10776                           
 10777                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
 10778  26F3  3007               	movlw	7
 10779  26F4  008D               	movwf	13	;volatile
 10780                           
 10781                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
 10782  26F5  300C               	movlw	12
 10783  26F6  008E               	movwf	14	;volatile
 10784  26F7  0008               	return
 10785  26F8                     __end_of_IO_Set:	
 10786                           
 10787                           	psect	text52
 10788  24DF                     __ptext52:	
 10789 ;; *************** function _IOC_Set *****************
 10790 ;; Defined at:
 10791 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10792 ;; Parameters:    Size  Location     Type
 10793 ;;		None
 10794 ;; Auto vars:     Size  Location     Type
 10795 ;;		None
 10796 ;; Return value:  Size  Location     Type
 10797 ;;		None               void
 10798 ;; Registers used:
 10799 ;;		wreg, status,2
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;Total ram usage:        0 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:    4
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		_Mcu_Initialization
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           
 10820                           ;psect for function _IOC_Set
 10821  24DF                     _IOC_Set:	
 10822                           
 10823                           ;MCU_16f1518_B1.c: 248: WPUB2=0;
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in _IOC_Set: [wreg+status,2]
 10827  24DF  0024               	movlb	4	; select bank4
 10828  24E0  110D               	bcf	13,2	;volatile
 10829                           
 10830                           ;MCU_16f1518_B1.c: 250: IOCBP=0b00000100;
 10831  24E1  3004               	movlw	4
 10832  24E2  0027               	movlb	7	; select bank7
 10833  24E3  0094               	movwf	20	;volatile
 10834                           
 10835                           ;MCU_16f1518_B1.c: 251: IOCBN=0b00000100;
 10836  24E4  3004               	movlw	4
 10837  24E5  0095               	movwf	21	;volatile
 10838                           
 10839                           ;MCU_16f1518_B1.c: 259: IOCBF=0b00000000;
 10840  24E6  0196               	clrf	22	;volatile
 10841                           
 10842                           ;MCU_16f1518_B1.c: 261: IOCIE=1;
 10843  24E7  158B               	bsf	11,3	;volatile
 10844                           
 10845                           ;MCU_16f1518_B1.c: 262: IOCIF=0;
 10846  24E8  100B               	bcf	11,0	;volatile
 10847                           
 10848                           ;MCU_16f1518_B1.c: 263: PEIE=1;
 10849  24E9  170B               	bsf	11,6	;volatile
 10850                           
 10851                           ;MCU_16f1518_B1.c: 264: GIE=1;
 10852  24EA  178B               	bsf	11,7	;volatile
 10853  24EB  0008               	return
 10854  24EC                     __end_of_IOC_Set:	
 10855                           
 10856                           	psect	text53
 10857  23B5                     __ptext53:	
 10858 ;; *************** function _INT_Set *****************
 10859 ;; Defined at:
 10860 ;;		line 217 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10861 ;; Parameters:    Size  Location     Type
 10862 ;;		None
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;		None               void
 10867 ;; Registers used:
 10868 ;;		None
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;Total ram usage:        0 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    4
 10881 ;; This function calls:
 10882 ;;		Nothing
 10883 ;; This function is called by:
 10884 ;;		_Mcu_Initialization
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           
 10889                           ;psect for function _INT_Set
 10890  23B5                     _INT_Set:	
 10891                           
 10892                           ;MCU_16f1518_B1.c: 219: WPUB0=0;
 10893                           
 10894                           ;incstack = 0
 10895                           ; Regs used in _INT_Set: []
 10896  23B5  0024               	movlb	4	; select bank4
 10897  23B6  100D               	bcf	13,0	;volatile
 10898                           
 10899                           ;MCU_16f1518_B1.c: 220: INTE=1;
 10900  23B7  160B               	bsf	11,4	;volatile
 10901                           
 10902                           ;MCU_16f1518_B1.c: 221: PEIE=1;
 10903  23B8  170B               	bsf	11,6	;volatile
 10904                           
 10905                           ;MCU_16f1518_B1.c: 222: GIE=1;
 10906  23B9  178B               	bsf	11,7	;volatile
 10907  23BA  0008               	return
 10908  23BB                     __end_of_INT_Set:	
 10909                           
 10910                           	psect	text54
 10911  23D5                     __ptext54:	
 10912 ;; *************** function _ADC_Set *****************
 10913 ;; Defined at:
 10914 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;		None
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;		None
 10919 ;; Return value:  Size  Location     Type
 10920 ;;		None               void
 10921 ;; Registers used:
 10922 ;;		wreg
 10923 ;; Tracked objects:
 10924 ;;		On entry : 0/0
 10925 ;;		On exit  : 0/0
 10926 ;;		Unchanged: 0/0
 10927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;Total ram usage:        0 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    4
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_Mcu_Initialization
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           
 10943                           ;psect for function _ADC_Set
 10944  23D5                     _ADC_Set:	
 10945                           
 10946                           ;MCU_16f1518_B1.c: 305: ADCON1=0xf2;
 10947                           
 10948                           ;incstack = 0
 10949                           ; Regs used in _ADC_Set: [wreg]
 10950  23D5  30F2               	movlw	242
 10951  23D6  0021               	movlb	1	; select bank1
 10952  23D7  009E               	movwf	30	;volatile
 10953                           
 10954                           ;MCU_16f1518_B1.c: 306: FVRCON=0xc0;
 10955  23D8  30C0               	movlw	192
 10956  23D9  0022               	movlb	2	; select bank2
 10957  23DA  0097               	movwf	23	;volatile
 10958  23DB  0008               	return
 10959  23DC                     __end_of_ADC_Set:	
 10960                           
 10961                           	psect	text55
 10962  2469                     __ptext55:	
 10963 ;; *************** function _MainT_Initialization *****************
 10964 ;; Defined at:
 10965 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;		None               void
 10972 ;; Registers used:
 10973 ;;		wreg
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;Total ram usage:        1 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    4
 10986 ;; This function calls:
 10987 ;;		Nothing
 10988 ;; This function is called by:
 10989 ;;		_main
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           
 10994                           ;psect for function _MainT_Initialization
 10995  2469                     _MainT_Initialization:	
 10996                           
 10997                           ;main.c: 95: Product=&VarProduct;
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _MainT_Initialization: [wreg]
 11001  2469  30A0               	movlw	_VarProduct& (0+255)
 11002  246A  0020               	movlb	0	; select bank0
 11003  246B  00A0               	movwf	??_MainT_Initialization
 11004  246C  0820               	movf	??_MainT_Initialization,w
 11005  246D  00EF               	movwf	_Product
 11006                           
 11007                           ;main.c: 98: TMain=&VarTMain;
 11008  246E  30C0               	movlw	_VarTMain& (0+255)
 11009  246F  00A0               	movwf	??_MainT_Initialization
 11010  2470  0820               	movf	??_MainT_Initialization,w
 11011  2471  0021               	movlb	1	; select bank1
 11012  2472  00E9               	movwf	_TMain^(0+128)
 11013  2473  0008               	return
 11014  2474                     __end_of_MainT_Initialization:	
 11015                           
 11016                           	psect	text56
 11017  13C5                     __ptext56:	
 11018 ;; *************** function _MainT *****************
 11019 ;; Defined at:
 11020 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;		None               void
 11027 ;; Registers used:
 11028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;Total ram usage:        0 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    6
 11041 ;; This function calls:
 11042 ;;		_setBuz
 11043 ;;		_setLoad_Enable
 11044 ;;		_setRF_Enable
 11045 ;;		_setSw_Enable
 11046 ;;		_setTemp_Enable
 11047 ;; This function is called by:
 11048 ;;		_main
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _MainT
 11054  13C5                     _MainT:	
 11055                           
 11056                           ;main.c: 106: if(!TMain->PowerON)
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11060  13C5  0021               	movlb	1	; select bank1
 11061  13C6  0869               	movf	_TMain^(0+128),w
 11062  13C7  0086               	movwf	6
 11063  13C8  3001               	movlw	1	; select bank2/3
 11064  13C9  0087               	movwf	7
 11065  13CA  1801               	btfsc	1,0
 11066  13CB  2C10               	goto	l9864
 11067                           
 11068                           ;main.c: 107: {
 11069                           ;main.c: 108: TMain->PowerCount++;
 11070  13CC  0A69               	incf	_TMain^(0+128),w
 11071  13CD  0086               	movwf	6
 11072  13CE  3001               	movlw	1	; select bank2/3
 11073  13CF  0087               	movwf	7
 11074  13D0  3001               	movlw	1
 11075  13D1  0781               	addwf	1,f
 11076  13D2  3141               	addfsr 1,1
 11077  13D3  1803               	skipnc
 11078  13D4  0A81               	incf	1,f
 11079                           
 11080                           ;main.c: 109: if(TMain->PowerCount == 150)
 11081  13D5  0A69               	incf	_TMain^(0+128),w
 11082  13D6  0086               	movwf	6
 11083  13D7  3001               	movlw	1	; select bank2/3
 11084  13D8  0087               	movwf	7
 11085  13D9  3F40               	moviw [0]fsr1
 11086  13DA  3A96               	xorlw	150
 11087  13DB  1D03               	skipz
 11088  13DC  2BDF               	goto	u9965
 11089  13DD  3F41               	moviw [1]fsr1
 11090  13DE  3A00               	xorlw	0
 11091  13DF                     u9965:	
 11092  13DF  1D03               	skipz
 11093  13E0  0008               	return
 11094                           
 11095                           ;main.c: 110: {
 11096                           ;main.c: 111: TMain->PowerCount=0;
 11097  13E1  0A69               	incf	_TMain^(0+128),w
 11098  13E2  0086               	movwf	6
 11099  13E3  3001               	movlw	1	; select bank2/3
 11100  13E4  0087               	movwf	7
 11101  13E5  3000               	movlw	0
 11102  13E6  3FC0               	movwi [0]fsr1
 11103  13E7  3FC1               	movwi [1]fsr1
 11104                           
 11105                           ;main.c: 112: TMain->PowerON=1;
 11106  13E8  0869               	movf	_TMain^(0+128),w
 11107  13E9  0086               	movwf	6
 11108  13EA  3001               	movlw	1	; select bank2/3
 11109  13EB  0087               	movwf	7
 11110  13EC  1401               	bsf	1,0
 11111                           
 11112                           ;main.c: 115: setTemp_Enable(1);
 11113  13ED  3001               	movlw	1
 11114  13EE  31A4  245E  3193   	fcall	_setTemp_Enable
 11115                           
 11116                           ;main.c: 119: setLoad_Enable(1);
 11117  13F1  3001               	movlw	1
 11118  13F2  31A5  2580  3193   	fcall	_setLoad_Enable
 11119                           
 11120                           ;main.c: 125: setBuz(3,50);
 11121  13F5  3032               	movlw	50
 11122  13F6  0020               	movlb	0	; select bank0
 11123  13F7  00A6               	movwf	setBuz@time
 11124  13F8  3000               	movlw	0
 11125  13F9  00A7               	movwf	setBuz@time+1
 11126  13FA  3003               	movlw	3
 11127  13FB  3193  234E  3193   	fcall	_setBuz
 11128                           
 11129                           ;main.c: 126: TMain->SelfTest=1;
 11130  13FE  0021               	movlb	1	; select bank1
 11131  13FF  0869               	movf	_TMain^(0+128),w
 11132  1400  3E03               	addlw	3
 11133  1401  0086               	movwf	6
 11134  1402  3001               	movlw	1	; select bank2/3
 11135  1403  0087               	movwf	7
 11136  1404  1401               	bsf	1,0
 11137                           
 11138                           ;main.c: 128: setSw_Enable(1);
 11139  1405  3001               	movlw	1
 11140  1406  31A7  2748  3193   	fcall	_setSw_Enable
 11141                           
 11142                           ;main.c: 131: setRF_Enable(1,1);
 11143  1409  0020               	movlb	0	; select bank0
 11144  140A  01A2               	clrf	setRF_Enable@command
 11145  140B  0AA2               	incf	setRF_Enable@command,f
 11146  140C  3001               	movlw	1
 11147  140D  3199  21A3         	fcall	_setRF_Enable
 11148                           
 11149                           ;main.c: 135: }
 11150                           ;main.c: 136: }
 11151  140F  0008               	return
 11152  1410                     l9864:	
 11153                           
 11154                           ;main.c: 137: else
 11155                           ;main.c: 138: {
 11156                           ;main.c: 146: TMain->Count1++;
 11157  1410  0021               	movlb	1	; select bank1
 11158  1411  0869               	movf	_TMain^(0+128),w
 11159  1412  3E06               	addlw	6
 11160  1413  0086               	movwf	6
 11161  1414  3001               	movlw	1	; select bank2/3
 11162  1415  0087               	movwf	7
 11163  1416  3001               	movlw	1
 11164  1417  0781               	addwf	1,f
 11165  1418  3141               	addfsr 1,1
 11166  1419  1803               	skipnc
 11167  141A  0A81               	incf	1,f
 11168                           
 11169                           ;main.c: 147: if(TMain->Count1 == 1000)
 11170  141B  0869               	movf	_TMain^(0+128),w
 11171  141C  3E06               	addlw	6
 11172  141D  0086               	movwf	6
 11173  141E  3001               	movlw	1	; select bank2/3
 11174  141F  0087               	movwf	7
 11175  1420  3F40               	moviw [0]fsr1
 11176  1421  3AE8               	xorlw	232
 11177  1422  1D03               	skipz
 11178  1423  2C26               	goto	u9975
 11179  1424  3F41               	moviw [1]fsr1
 11180  1425  3A03               	xorlw	3
 11181  1426                     u9975:	
 11182  1426  1D03               	skipz
 11183  1427  0008               	return
 11184                           
 11185                           ;main.c: 148: {
 11186                           ;main.c: 149: TMain->Count1=0;
 11187  1428  0869               	movf	_TMain^(0+128),w
 11188  1429  3E06               	addlw	6
 11189  142A  0086               	movwf	6
 11190  142B  3001               	movlw	1	; select bank2/3
 11191  142C  0087               	movwf	7
 11192  142D  3000               	movlw	0
 11193  142E  3FC0               	movwi [0]fsr1
 11194  142F  3FC1               	movwi [1]fsr1
 11195                           
 11196                           ;main.c: 160: if(TMain->Flag)
 11197  1430  0869               	movf	_TMain^(0+128),w
 11198  1431  0086               	movwf	6
 11199  1432  3001               	movlw	1	; select bank2/3
 11200  1433  0087               	movwf	7
 11201  1434  1981               	btfsc	1,3
 11202  1435  0008               	return
 11203                           
 11204                           ;main.c: 170: else
 11205                           ;main.c: 171: {
 11206                           ;main.c: 172: TMain->Flag=1;
 11207                           
 11208                           ;main.c: 161: {
 11209                           ;main.c: 169: }
 11210  1436  0869               	movf	_TMain^(0+128),w
 11211  1437  0086               	movwf	6
 11212  1438  3001               	movlw	1	; select bank2/3
 11213  1439  0087               	movwf	7
 11214  143A  1581               	bsf	1,3
 11215  143B  0008               	return
 11216  143C                     __end_of_MainT:	
 11217                           
 11218                           	psect	text57
 11219  245E                     __ptext57:	
 11220 ;; *************** function _setTemp_Enable *****************
 11221 ;; Defined at:
 11222 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  command         1    wreg     unsigned char 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  command         1    0[BANK0 ] unsigned char 
 11227 ;; Return value:  Size  Location     Type
 11228 ;;		None               void
 11229 ;; Registers used:
 11230 ;;		wreg, fsr1l, fsr1h
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;Total ram usage:        1 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    4
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_MainT
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           
 11251                           ;psect for function _setTemp_Enable
 11252  245E                     _setTemp_Enable:	
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11256                           ;setTemp_Enable@command stored from wreg
 11257  245E  0020               	movlb	0	; select bank0
 11258  245F  00A0               	movwf	setTemp_Enable@command
 11259                           
 11260                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11261  2460  087D               	movf	_Temp,w
 11262  2461  0086               	movwf	6
 11263  2462  3001               	movlw	1	; select bank2/3
 11264  2463  0087               	movwf	7
 11265  2464  0820               	movf	setTemp_Enable@command,w
 11266  2465  1001               	bcf	1,0
 11267  2466  1D03               	skipz
 11268  2467  1401               	bsf	1,0
 11269  2468  0008               	return
 11270  2469                     __end_of_setTemp_Enable:	
 11271                           
 11272                           	psect	text58
 11273  2580                     __ptext58:	
 11274 ;; *************** function _setLoad_Enable *****************
 11275 ;; Defined at:
 11276 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  command         1    wreg     unsigned char 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;  command         1    0[BANK0 ] unsigned char 
 11281 ;; Return value:  Size  Location     Type
 11282 ;;		None               void
 11283 ;; Registers used:
 11284 ;;		wreg, fsr1l, fsr1h
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;Total ram usage:        1 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; Hardware stack levels required when called:    4
 11297 ;; This function calls:
 11298 ;;		Nothing
 11299 ;; This function is called by:
 11300 ;;		_MainT
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           
 11305                           ;psect for function _setLoad_Enable
 11306  2580                     _setLoad_Enable:	
 11307                           
 11308                           ;incstack = 0
 11309                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11310                           ;setLoad_Enable@command stored from wreg
 11311  2580  0020               	movlb	0	; select bank0
 11312  2581  00A0               	movwf	setLoad_Enable@command
 11313                           
 11314                           ;OverLoad_B1.c: 255: Load->Enable=command;
 11315  2582  086E               	movf	_Load,w
 11316  2583  0086               	movwf	6
 11317  2584  3002               	movlw	2	; select bank4/5
 11318  2585  0087               	movwf	7
 11319  2586  0820               	movf	setLoad_Enable@command,w
 11320  2587  1001               	bcf	1,0
 11321  2588  1D03               	skipz
 11322  2589  1401               	bsf	1,0
 11323                           
 11324                           ;OverLoad_B1.c: 256: Load->GO=0;
 11325  258A  086E               	movf	_Load,w
 11326  258B  0086               	movwf	6
 11327  258C  3002               	movlw	2	; select bank4/5
 11328  258D  0087               	movwf	7
 11329  258E  1081               	bcf	1,1
 11330  258F  0008               	return
 11331  2590                     __end_of_setLoad_Enable:	
 11332                           
 11333                           	psect	text59
 11334  03A4                     __ptext59:	
 11335 ;; *************** function _Load_Main *****************
 11336 ;; Defined at:
 11337 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;		None
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;  i               1   17[BANK0 ] unsigned char 
 11342 ;; Return value:  Size  Location     Type
 11343 ;;		None               void
 11344 ;; Registers used:
 11345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;Total ram usage:        5 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:    9
 11358 ;; This function calls:
 11359 ;;		___lwdiv
 11360 ;;		___wmul
 11361 ;;		_getPF_Safe
 11362 ;;		_getTemp_Safe
 11363 ;;		_setDimmerLights_Clear
 11364 ;;		_setLoad_AH_AL_Restore
 11365 ;;		_setLoad_Exceptions
 11366 ;; This function is called by:
 11367 ;;		_main
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _Load_Main
 11373  03A4                     _Load_Main:	
 11374                           
 11375                           ;OverLoad_B1.c: 47: char i;
 11376                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11380  03A4  0020               	movlb	0	; select bank0
 11381  03A5  086E               	movf	_Load,w
 11382  03A6  0086               	movwf	6
 11383  03A7  3002               	movlw	2	; select bank4/5
 11384  03A8  0087               	movwf	7
 11385  03A9  1E81               	btfss	1,5
 11386  03AA  2BD1               	goto	l9900
 11387                           
 11388                           ;OverLoad_B1.c: 49: {
 11389                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11390  03AB  086E               	movf	_Load,w
 11391  03AC  3E03               	addlw	3
 11392  03AD  0086               	movwf	6
 11393  03AE  3002               	movlw	2	; select bank4/5
 11394  03AF  0087               	movwf	7
 11395  03B0  3001               	movlw	1
 11396  03B1  0781               	addwf	1,f
 11397  03B2  3141               	addfsr 1,1
 11398  03B3  1803               	skipnc
 11399  03B4  0A81               	incf	1,f
 11400                           
 11401                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11402  03B5  086E               	movf	_Load,w
 11403  03B6  3E03               	addlw	3
 11404  03B7  0086               	movwf	6
 11405  03B8  3002               	movlw	2	; select bank4/5
 11406  03B9  0087               	movwf	7
 11407  03BA  3F40               	moviw [0]fsr1
 11408  03BB  00AD               	movwf	??_Load_Main
 11409  03BC  3F41               	moviw [1]fsr1
 11410  03BD  00AE               	movwf	??_Load_Main+1
 11411  03BE  3003               	movlw	3
 11412  03BF  022E               	subwf	??_Load_Main+1,w
 11413  03C0  30E8               	movlw	232
 11414  03C1  1903               	skipnz
 11415  03C2  022D               	subwf	??_Load_Main,w
 11416  03C3  1C03               	skipc
 11417  03C4  0008               	return
 11418                           
 11419                           ;OverLoad_B1.c: 52: {
 11420                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11421  03C5  086E               	movf	_Load,w
 11422  03C6  3E03               	addlw	3
 11423  03C7  0086               	movwf	6
 11424  03C8  3002               	movlw	2	; select bank4/5
 11425  03C9  0087               	movwf	7
 11426  03CA  3000               	movlw	0
 11427  03CB  3FC0               	movwi [0]fsr1
 11428  03CC  3FC1               	movwi [1]fsr1
 11429                           
 11430                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11431  03CD  3000               	movlw	0
 11432  03CE  319C  24F1         	fcall	_setLoad_Exceptions
 11433                           
 11434                           ;OverLoad_B1.c: 55: }
 11435                           ;OverLoad_B1.c: 56: }
 11436  03D0  0008               	return
 11437  03D1                     l9900:	
 11438                           
 11439                           ;OverLoad_B1.c: 57: else
 11440                           ;OverLoad_B1.c: 58: {
 11441                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11442  03D1  0020               	movlb	0	; select bank0
 11443  03D2  086E               	movf	_Load,w
 11444  03D3  0086               	movwf	6
 11445  03D4  3002               	movlw	2	; select bank4/5
 11446  03D5  0087               	movwf	7
 11447  03D6  1E01               	btfss	1,4
 11448  03D7  2DD7               	goto	l9982
 11449                           
 11450                           ;OverLoad_B1.c: 60: {
 11451                           ;OverLoad_B1.c: 61: Load->Time++;
 11452  03D8  0A6E               	incf	_Load,w
 11453  03D9  0086               	movwf	6
 11454  03DA  3002               	movlw	2	; select bank4/5
 11455  03DB  0087               	movwf	7
 11456  03DC  3001               	movlw	1
 11457  03DD  0781               	addwf	1,f
 11458  03DE  3141               	addfsr 1,1
 11459  03DF  1803               	skipnc
 11460  03E0  0A81               	incf	1,f
 11461                           
 11462                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11463  03E1  0A6E               	incf	_Load,w
 11464  03E2  0086               	movwf	6
 11465  03E3  3002               	movlw	2	; select bank4/5
 11466  03E4  0087               	movwf	7
 11467  03E5  3F40               	moviw [0]fsr1
 11468  03E6  00AD               	movwf	??_Load_Main
 11469  03E7  3F41               	moviw [1]fsr1
 11470  03E8  00AE               	movwf	??_Load_Main+1
 11471  03E9  3000               	movlw	0
 11472  03EA  022E               	subwf	??_Load_Main+1,w
 11473  03EB  3005               	movlw	5
 11474  03EC  1903               	skipnz
 11475  03ED  022D               	subwf	??_Load_Main,w
 11476  03EE  1C03               	skipc
 11477  03EF  0008               	return
 11478                           
 11479                           ;OverLoad_B1.c: 63: {
 11480                           ;OverLoad_B1.c: 64: Load->Time=0;
 11481  03F0  0A6E               	incf	_Load,w
 11482  03F1  0086               	movwf	6
 11483  03F2  3002               	movlw	2	; select bank4/5
 11484  03F3  0087               	movwf	7
 11485  03F4  3000               	movlw	0
 11486  03F5  3FC0               	movwi [0]fsr1
 11487  03F6  3FC1               	movwi [1]fsr1
 11488                           
 11489                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11490  03F7  086E               	movf	_Load,w
 11491  03F8  0086               	movwf	6
 11492  03F9  3002               	movlw	2	; select bank4/5
 11493  03FA  0087               	movwf	7
 11494  03FB  1201               	bcf	1,4
 11495                           
 11496                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11497  03FC  086E               	movf	_Load,w
 11498  03FD  3E45               	addlw	69
 11499  03FE  0086               	movwf	6
 11500  03FF  3002               	movlw	2	; select bank4/5
 11501  0400  0087               	movwf	7
 11502  0401  086E               	movf	_Load,w
 11503  0402  3E44               	addlw	68
 11504  0403  0084               	movwf	4
 11505  0404  3002               	movlw	2	; select bank4/5
 11506  0405  0085               	movwf	5
 11507  0406  0800               	movf	0,w
 11508  0407  00AD               	movwf	??_Load_Main
 11509  0408  086E               	movf	_Load,w
 11510  0409  3E43               	addlw	67
 11511  040A  0084               	movwf	4
 11512  040B  3002               	movlw	2	; select bank4/5
 11513  040C  0085               	movwf	5
 11514  040D  0800               	movf	0,w
 11515  040E  072D               	addwf	??_Load_Main,w
 11516  040F  0701               	addwf	1,w
 11517  0410  00AE               	movwf	??_Load_Main+1
 11518  0411  086E               	movf	_Load,w
 11519  0412  3E3E               	addlw	62
 11520  0413  0086               	movwf	6
 11521  0414  3002               	movlw	2	; select bank4/5
 11522  0415  0087               	movwf	7
 11523  0416  082E               	movf	??_Load_Main+1,w
 11524  0417  0081               	movwf	1
 11525                           
 11526                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11527  0418  01B1               	clrf	Load_Main@i
 11528  0419  0AB1               	incf	Load_Main@i,f
 11529  041A  3004               	movlw	4
 11530  041B  0231               	subwf	Load_Main@i,w
 11531  041C  1803               	btfsc	3,0
 11532  041D  2C4C               	goto	l9922
 11533  041E                     l9916:	
 11534                           
 11535                           ;OverLoad_B1.c: 68: {
 11536                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11537  041E  3531               	lslf	Load_Main@i,w
 11538  041F  3E08               	addlw	8
 11539  0420  076E               	addwf	_Load,w
 11540  0421  00AD               	movwf	??_Load_Main
 11541  0422  082D               	movf	??_Load_Main,w
 11542  0423  0086               	movwf	6
 11543  0424  3002               	movlw	2	; select bank4/5
 11544  0425  0087               	movwf	7
 11545  0426  086E               	movf	_Load,w
 11546  0427  3E2E               	addlw	46
 11547  0428  0084               	movwf	4
 11548  0429  3002               	movlw	2	; select bank4/5
 11549  042A  0085               	movwf	5
 11550  042B  3F40               	moviw [0]fsr1
 11551  042C  0780               	addwf	0,f
 11552  042D  3101               	addfsr 0,1
 11553  042E  3F41               	moviw [1]fsr1
 11554  042F  3D80               	addwfc	0,f
 11555  0430  313F               	addfsr 0,-1
 11556                           
 11557                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11558  0431  3531               	lslf	Load_Main@i,w
 11559  0432  3E1A               	addlw	26
 11560  0433  076E               	addwf	_Load,w
 11561  0434  00AD               	movwf	??_Load_Main
 11562  0435  082D               	movf	??_Load_Main,w
 11563  0436  0086               	movwf	6
 11564  0437  3002               	movlw	2	; select bank4/5
 11565  0438  0087               	movwf	7
 11566  0439  086E               	movf	_Load,w
 11567  043A  3E30               	addlw	48
 11568  043B  0084               	movwf	4
 11569  043C  3002               	movlw	2	; select bank4/5
 11570  043D  0085               	movwf	5
 11571  043E  3F40               	moviw [0]fsr1
 11572  043F  0780               	addwf	0,f
 11573  0440  3101               	addfsr 0,1
 11574  0441  3F41               	moviw [1]fsr1
 11575  0442  3D80               	addwfc	0,f
 11576  0443  313F               	addfsr 0,-1
 11577  0444  3001               	movlw	1
 11578  0445  00AD               	movwf	??_Load_Main
 11579  0446  082D               	movf	??_Load_Main,w
 11580  0447  07B1               	addwf	Load_Main@i,f
 11581  0448  3004               	movlw	4
 11582  0449  0231               	subwf	Load_Main@i,w
 11583  044A  1C03               	skipc
 11584  044B  2C1E               	goto	l9916
 11585  044C                     l9922:	
 11586                           
 11587                           ;OverLoad_B1.c: 71: }
 11588                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11589  044C  3003               	movlw	3
 11590  044D  00A0               	movwf	___lwdiv@divisor
 11591  044E  3000               	movlw	0
 11592  044F  00A1               	movwf	___lwdiv@divisor+1
 11593  0450  086E               	movf	_Load,w
 11594  0451  3E2E               	addlw	46
 11595  0452  0086               	movwf	6
 11596  0453  3002               	movlw	2	; select bank4/5
 11597  0454  0087               	movwf	7
 11598  0455  3F40               	moviw [0]fsr1
 11599  0456  00A2               	movwf	___lwdiv@dividend
 11600  0457  3F41               	moviw [1]fsr1
 11601  0458  00A3               	movwf	___lwdiv@dividend+1
 11602  0459  319B  237D  3183   	fcall	___lwdiv
 11603  045C  0020               	movlb	0	; select bank0
 11604  045D  086E               	movf	_Load,w
 11605  045E  3E2E               	addlw	46
 11606  045F  0086               	movwf	6
 11607  0460  3002               	movlw	2	; select bank4/5
 11608  0461  0087               	movwf	7
 11609  0462  0820               	movf	?___lwdiv,w
 11610  0463  3FC0               	movwi [0]fsr1
 11611  0464  0821               	movf	?___lwdiv+1,w
 11612  0465  3FC1               	movwi [1]fsr1
 11613                           
 11614                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11615  0466  3003               	movlw	3
 11616  0467  00A0               	movwf	___lwdiv@divisor
 11617  0468  3000               	movlw	0
 11618  0469  00A1               	movwf	___lwdiv@divisor+1
 11619  046A  086E               	movf	_Load,w
 11620  046B  3E30               	addlw	48
 11621  046C  0086               	movwf	6
 11622  046D  3002               	movlw	2	; select bank4/5
 11623  046E  0087               	movwf	7
 11624  046F  3F40               	moviw [0]fsr1
 11625  0470  00A2               	movwf	___lwdiv@dividend
 11626  0471  3F41               	moviw [1]fsr1
 11627  0472  00A3               	movwf	___lwdiv@dividend+1
 11628  0473  319B  237D  3183   	fcall	___lwdiv
 11629  0476  0020               	movlb	0	; select bank0
 11630  0477  086E               	movf	_Load,w
 11631  0478  3E30               	addlw	48
 11632  0479  0086               	movwf	6
 11633  047A  3002               	movlw	2	; select bank4/5
 11634  047B  0087               	movwf	7
 11635  047C  0820               	movf	?___lwdiv,w
 11636  047D  3FC0               	movwi [0]fsr1
 11637  047E  0821               	movf	?___lwdiv+1,w
 11638  047F  3FC1               	movwi [1]fsr1
 11639                           
 11640                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11641  0480  086E               	movf	_Load,w
 11642  0481  3E2E               	addlw	46
 11643  0482  0086               	movwf	6
 11644  0483  3002               	movlw	2	; select bank4/5
 11645  0484  0087               	movwf	7
 11646  0485  3F40               	moviw [0]fsr1
 11647  0486  00AD               	movwf	??_Load_Main
 11648  0487  3F41               	moviw [1]fsr1
 11649  0488  00AE               	movwf	??_Load_Main+1
 11650  0489  086E               	movf	_Load,w
 11651  048A  3E30               	addlw	48
 11652  048B  0086               	movwf	6
 11653  048C  3002               	movlw	2	; select bank4/5
 11654  048D  0087               	movwf	7
 11655  048E  3F40               	moviw [0]fsr1
 11656  048F  00AF               	movwf	??_Load_Main+2
 11657  0490  3F41               	moviw [1]fsr1
 11658  0491  00B0               	movwf	??_Load_Main+3
 11659  0492  082E               	movf	??_Load_Main+1,w
 11660  0493  0230               	subwf	??_Load_Main+3,w
 11661  0494  1D03               	skipz
 11662  0495  2C98               	goto	u10085
 11663  0496  082D               	movf	??_Load_Main,w
 11664  0497  022F               	subwf	??_Load_Main+2,w
 11665  0498                     u10085:	
 11666  0498  1803               	skipnc
 11667  0499  2DD4               	goto	l9980
 11668                           
 11669                           ;OverLoad_B1.c: 75: {
 11670                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11671  049A  086E               	movf	_Load,w
 11672  049B  3E2E               	addlw	46
 11673  049C  0086               	movwf	6
 11674  049D  3002               	movlw	2	; select bank4/5
 11675  049E  0087               	movwf	7
 11676  049F  086E               	movf	_Load,w
 11677  04A0  3E30               	addlw	48
 11678  04A1  0084               	movwf	4
 11679  04A2  3002               	movlw	2	; select bank4/5
 11680  04A3  0085               	movwf	5
 11681  04A4  3F00               	moviw [0]fsr0
 11682  04A5  00AD               	movwf	??_Load_Main
 11683  04A6  3F01               	moviw [1]fsr0
 11684  04A7  00AE               	movwf	??_Load_Main+1
 11685  04A8  09AD               	comf	??_Load_Main,f
 11686  04A9  09AE               	comf	??_Load_Main+1,f
 11687  04AA  0AAD               	incf	??_Load_Main,f
 11688  04AB  1903               	skipnz
 11689  04AC  0AAE               	incf	??_Load_Main+1,f
 11690  04AD  3F40               	moviw [0]fsr1
 11691  04AE  072D               	addwf	??_Load_Main,w
 11692  04AF  00AF               	movwf	??_Load_Main+2
 11693  04B0  3F41               	moviw [1]fsr1
 11694  04B1  3D2E               	addwfc	??_Load_Main+1,w
 11695  04B2  00B0               	movwf	??_Load_Main+3
 11696  04B3  086E               	movf	_Load,w
 11697  04B4  3E2C               	addlw	44
 11698  04B5  0086               	movwf	6
 11699  04B6  3002               	movlw	2	; select bank4/5
 11700  04B7  0087               	movwf	7
 11701  04B8  082F               	movf	??_Load_Main+2,w
 11702  04B9  3FC0               	movwi [0]fsr1
 11703  04BA  0830               	movf	??_Load_Main+3,w
 11704  04BB  3FC1               	movwi [1]fsr1
 11705                           
 11706                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11707  04BC  086E               	movf	_Load,w
 11708  04BD  3E3A               	addlw	58
 11709  04BE  0086               	movwf	6
 11710  04BF  3002               	movlw	2	; select bank4/5
 11711  04C0  0087               	movwf	7
 11712  04C1  3002               	movlw	2
 11713  04C2  0201               	subwf	1,w
 11714  04C3  1803               	skipnc
 11715  04C4  2D15               	goto	l9944
 11716                           
 11717                           ;OverLoad_B1.c: 79: {
 11718                           ;OverLoad_B1.c: 80: Load->Count++;
 11719  04C5  3001               	movlw	1
 11720  04C6  00AD               	movwf	??_Load_Main
 11721  04C7  086E               	movf	_Load,w
 11722  04C8  3E3A               	addlw	58
 11723  04C9  0086               	movwf	6
 11724  04CA  3002               	movlw	2	; select bank4/5
 11725  04CB  0087               	movwf	7
 11726  04CC  082D               	movf	??_Load_Main,w
 11727  04CD  0781               	addwf	1,f
 11728                           
 11729                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11730  04CE  086E               	movf	_Load,w
 11731  04CF  3E3A               	addlw	58
 11732  04D0  0086               	movwf	6
 11733  04D1  3002               	movlw	2	; select bank4/5
 11734  04D2  0087               	movwf	7
 11735  04D3  0801               	movf	1,w
 11736  04D4  3A01               	xorlw	1
 11737  04D5  1D03               	skipz
 11738  04D6  2CE1               	goto	l9936
 11739                           
 11740                           ;OverLoad_B1.c: 82: {
 11741                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11742  04D7  086E               	movf	_Load,w
 11743  04D8  3E36               	addlw	54
 11744  04D9  0086               	movwf	6
 11745  04DA  3002               	movlw	2	; select bank4/5
 11746  04DB  0087               	movwf	7
 11747  04DC  30F4               	movlw	244
 11748  04DD  3FC0               	movwi [0]fsr1
 11749  04DE  3001               	movlw	1
 11750  04DF  3FC1               	movwi [1]fsr1
 11751                           
 11752                           ;OverLoad_B1.c: 84: }
 11753  04E0  2D15               	goto	l9944
 11754  04E1                     l9936:	
 11755                           
 11756                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11757  04E1  086E               	movf	_Load,w
 11758  04E2  3E3A               	addlw	58
 11759  04E3  0086               	movwf	6
 11760  04E4  3002               	movlw	2	; select bank4/5
 11761  04E5  0087               	movwf	7
 11762  04E6  0801               	movf	1,w
 11763  04E7  3A02               	xorlw	2
 11764  04E8  1D03               	skipz
 11765  04E9  2D15               	goto	l9944
 11766                           
 11767                           ;OverLoad_B1.c: 86: {
 11768                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11769  04EA  086E               	movf	_Load,w
 11770  04EB  3E3E               	addlw	62
 11771  04EC  0086               	movwf	6
 11772  04ED  3002               	movlw	2	; select bank4/5
 11773  04EE  0087               	movwf	7
 11774  04EF  0801               	movf	1,w
 11775  04F0  3A01               	xorlw	1
 11776  04F1  1D03               	skipz
 11777  04F2  2CFD               	goto	l9942
 11778                           
 11779                           ;OverLoad_B1.c: 88: {
 11780                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
 11781  04F3  086E               	movf	_Load,w
 11782  04F4  3E36               	addlw	54
 11783  04F5  0086               	movwf	6
 11784  04F6  3002               	movlw	2	; select bank4/5
 11785  04F7  0087               	movwf	7
 11786  04F8  3032               	movlw	50
 11787  04F9  3FC0               	movwi [0]fsr1
 11788  04FA  3000               	movlw	0
 11789  04FB  3FC1               	movwi [1]fsr1
 11790                           
 11791                           ;OverLoad_B1.c: 90: }
 11792  04FC  2D15               	goto	l9944
 11793  04FD                     l9942:	
 11794                           
 11795                           ;OverLoad_B1.c: 91: else
 11796                           ;OverLoad_B1.c: 92: {
 11797                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
 11798  04FD  086E               	movf	_Load,w
 11799  04FE  3E06               	addlw	6
 11800  04FF  0086               	movwf	6
 11801  0500  3002               	movlw	2	; select bank4/5
 11802  0501  0087               	movwf	7
 11803  0502  3F40               	moviw [0]fsr1
 11804  0503  00AD               	movwf	??_Load_Main
 11805  0504  3F41               	moviw [1]fsr1
 11806  0505  00AE               	movwf	??_Load_Main+1
 11807  0506  082D               	movf	??_Load_Main,w
 11808  0507  3E2A               	addlw	42
 11809  0508  00AF               	movwf	??_Load_Main+2
 11810  0509  3000               	movlw	0
 11811  050A  3D2E               	addwfc	??_Load_Main+1,w
 11812  050B  00B0               	movwf	??_Load_Main+3
 11813  050C  086E               	movf	_Load,w
 11814  050D  3E36               	addlw	54
 11815  050E  0086               	movwf	6
 11816  050F  3002               	movlw	2	; select bank4/5
 11817  0510  0087               	movwf	7
 11818  0511  082F               	movf	??_Load_Main+2,w
 11819  0512  3FC0               	movwi [0]fsr1
 11820  0513  0830               	movf	??_Load_Main+3,w
 11821  0514  3FC1               	movwi [1]fsr1
 11822  0515                     l9944:	
 11823                           
 11824                           ;OverLoad_B1.c: 94: }
 11825                           ;OverLoad_B1.c: 95: }
 11826                           ;OverLoad_B1.c: 96: }
 11827                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11828  0515  086E               	movf	_Load,w
 11829  0516  3E36               	addlw	54
 11830  0517  0086               	movwf	6
 11831  0518  3002               	movlw	2	; select bank4/5
 11832  0519  0087               	movwf	7
 11833  051A  3F40               	moviw [0]fsr1
 11834  051B  00AD               	movwf	??_Load_Main
 11835  051C  3F41               	moviw [1]fsr1
 11836  051D  00AE               	movwf	??_Load_Main+1
 11837  051E  086E               	movf	_Load,w
 11838  051F  3E2C               	addlw	44
 11839  0520  0086               	movwf	6
 11840  0521  3002               	movlw	2	; select bank4/5
 11841  0522  0087               	movwf	7
 11842  0523  3F40               	moviw [0]fsr1
 11843  0524  00AF               	movwf	??_Load_Main+2
 11844  0525  3F41               	moviw [1]fsr1
 11845  0526  00B0               	movwf	??_Load_Main+3
 11846  0527  082E               	movf	??_Load_Main+1,w
 11847  0528  0230               	subwf	??_Load_Main+3,w
 11848  0529  1D03               	skipz
 11849  052A  2D2D               	goto	u10135
 11850  052B  082D               	movf	??_Load_Main,w
 11851  052C  022F               	subwf	??_Load_Main+2,w
 11852  052D                     u10135:	
 11853  052D  1C03               	skipc
 11854  052E  2D4C               	goto	l9954
 11855                           
 11856                           ;OverLoad_B1.c: 99: {
 11857                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11858  052F  3001               	movlw	1
 11859  0530  00AD               	movwf	??_Load_Main
 11860  0531  086E               	movf	_Load,w
 11861  0532  3E3C               	addlw	60
 11862  0533  0086               	movwf	6
 11863  0534  3002               	movlw	2	; select bank4/5
 11864  0535  0087               	movwf	7
 11865  0536  082D               	movf	??_Load_Main,w
 11866  0537  0781               	addwf	1,f
 11867                           
 11868                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11869  0538  086E               	movf	_Load,w
 11870  0539  3E3C               	addlw	60
 11871  053A  0086               	movwf	6
 11872  053B  3002               	movlw	2	; select bank4/5
 11873  053C  0087               	movwf	7
 11874  053D  3003               	movlw	3
 11875  053E  0201               	subwf	1,w
 11876  053F  1C03               	skipc
 11877  0540  2DD4               	goto	l9980
 11878                           
 11879                           ;OverLoad_B1.c: 102: {
 11880                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11881  0541  086E               	movf	_Load,w
 11882  0542  3E3C               	addlw	60
 11883  0543  0086               	movwf	6
 11884  0544  3002               	movlw	2	; select bank4/5
 11885  0545  0087               	movwf	7
 11886  0546  0181               	clrf	1
 11887                           
 11888                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11889  0547  3001               	movlw	1
 11890  0548  319C  24F1  3183   	fcall	_setLoad_Exceptions
 11891                           
 11892                           ;OverLoad_B1.c: 113: }
 11893                           ;OverLoad_B1.c: 114: }
 11894  054B  2DD4               	goto	l9980
 11895  054C                     l9954:	
 11896                           
 11897                           ;OverLoad_B1.c: 115: else
 11898                           ;OverLoad_B1.c: 116: {
 11899                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11900  054C  0020               	movlb	0	; select bank0
 11901  054D  086E               	movf	_Load,w
 11902  054E  3E3C               	addlw	60
 11903  054F  0086               	movwf	6
 11904  0550  3002               	movlw	2	; select bank4/5
 11905  0551  0087               	movwf	7
 11906  0552  0181               	clrf	1
 11907                           
 11908                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11909  0553  086E               	movf	_Load,w
 11910  0554  3E42               	addlw	66
 11911  0555  0086               	movwf	6
 11912  0556  3002               	movlw	2	; select bank4/5
 11913  0557  0087               	movwf	7
 11914  0558  300A               	movlw	10
 11915  0559  0201               	subwf	1,w
 11916  055A  1803               	skipnc
 11917  055B  2D65               	goto	l9960
 11918                           
 11919                           ;OverLoad_B1.c: 119: {
 11920                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11921  055C  3001               	movlw	1
 11922  055D  00AD               	movwf	??_Load_Main
 11923  055E  086E               	movf	_Load,w
 11924  055F  3E42               	addlw	66
 11925  0560  0086               	movwf	6
 11926  0561  3002               	movlw	2	; select bank4/5
 11927  0562  0087               	movwf	7
 11928  0563  082D               	movf	??_Load_Main,w
 11929  0564  0781               	addwf	1,f
 11930  0565                     l9960:	
 11931                           
 11932                           ;OverLoad_B1.c: 121: }
 11933                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11934  0565  086E               	movf	_Load,w
 11935  0566  3E42               	addlw	66
 11936  0567  0086               	movwf	6
 11937  0568  3002               	movlw	2	; select bank4/5
 11938  0569  0087               	movwf	7
 11939  056A  300A               	movlw	10
 11940  056B  0201               	subwf	1,w
 11941  056C  1C03               	skipc
 11942  056D  2DD4               	goto	l9980
 11943                           
 11944                           ;OverLoad_B1.c: 123: {
 11945                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11946  056E  086E               	movf	_Load,w
 11947  056F  0086               	movwf	6
 11948  0570  3002               	movlw	2	; select bank4/5
 11949  0571  0087               	movwf	7
 11950  0572  1581               	bsf	1,3
 11951                           
 11952                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 11953  0573  01A2               	clrf	setDimmerLights_Clear@command
 11954  0574  0AA2               	incf	setDimmerLights_Clear@command,f
 11955  0575  3001               	movlw	1
 11956  0576  31A5  2570  3183   	fcall	_setDimmerLights_Clear
 11957                           
 11958                           ;OverLoad_B1.c: 131: setDimmerLights_Clear(2,1);
 11959  0579  0020               	movlb	0	; select bank0
 11960  057A  01A2               	clrf	setDimmerLights_Clear@command
 11961  057B  0AA2               	incf	setDimmerLights_Clear@command,f
 11962  057C  3002               	movlw	2
 11963  057D  31A5  2570  3183   	fcall	_setDimmerLights_Clear
 11964                           
 11965                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 11966  0580  0020               	movlb	0	; select bank0
 11967  0581  086E               	movf	_Load,w
 11968  0582  3E46               	addlw	70
 11969  0583  0086               	movwf	6
 11970  0584  3002               	movlw	2	; select bank4/5
 11971  0585  0087               	movwf	7
 11972  0586  1C01               	btfss	1,0
 11973  0587  2D9C               	goto	l9972
 11974                           
 11975                           ;OverLoad_B1.c: 139: {
 11976                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 11977  0588  086E               	movf	_Load,w
 11978  0589  3E46               	addlw	70
 11979  058A  0086               	movwf	6
 11980  058B  3002               	movlw	2	; select bank4/5
 11981  058C  0087               	movwf	7
 11982  058D  1001               	bcf	1,0
 11983                           
 11984                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 11985  058E  086E               	movf	_Load,w
 11986  058F  3E2C               	addlw	44
 11987  0590  0086               	movwf	6
 11988  0591  3002               	movlw	2	; select bank4/5
 11989  0592  0087               	movwf	7
 11990  0593  086E               	movf	_Load,w
 11991  0594  3E06               	addlw	6
 11992  0595  0084               	movwf	4
 11993  0596  3002               	movlw	2	; select bank4/5
 11994  0597  0085               	movwf	5
 11995  0598  3F40               	moviw [0]fsr1
 11996  0599  3F80               	movwi [0]fsr0
 11997  059A  3F41               	moviw [1]fsr1
 11998  059B  3F81               	movwi [1]fsr0
 11999  059C                     l9972:	
 12000                           
 12001                           ;OverLoad_B1.c: 143: }
 12002                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 12003  059C  086E               	movf	_Load,w
 12004  059D  3E46               	addlw	70
 12005  059E  0086               	movwf	6
 12006  059F  3002               	movlw	2	; select bank4/5
 12007  05A0  0087               	movwf	7
 12008  05A1  1C81               	btfss	1,1
 12009  05A2  2DD4               	goto	l9980
 12010                           
 12011                           ;OverLoad_B1.c: 146: {
 12012                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 12013  05A3  086E               	movf	_Load,w
 12014  05A4  3E46               	addlw	70
 12015  05A5  0086               	movwf	6
 12016  05A6  3002               	movlw	2	; select bank4/5
 12017  05A7  0087               	movwf	7
 12018  05A8  1081               	bcf	1,1
 12019                           
 12020                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 12021  05A9  086E               	movf	_Load,w
 12022  05AA  3E2C               	addlw	44
 12023  05AB  0086               	movwf	6
 12024  05AC  3002               	movlw	2	; select bank4/5
 12025  05AD  0087               	movwf	7
 12026  05AE  086E               	movf	_Load,w
 12027  05AF  3E06               	addlw	6
 12028  05B0  0084               	movwf	4
 12029  05B1  3002               	movlw	2	; select bank4/5
 12030  05B2  0085               	movwf	5
 12031  05B3  3F40               	moviw [0]fsr1
 12032  05B4  3F80               	movwi [0]fsr0
 12033  05B5  3F41               	moviw [1]fsr1
 12034  05B6  3F81               	movwi [1]fsr0
 12035                           
 12036                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x32*Load->LightsCount;
 12037  05B7  086E               	movf	_Load,w
 12038  05B8  3E3E               	addlw	62
 12039  05B9  0086               	movwf	6
 12040  05BA  3002               	movlw	2	; select bank4/5
 12041  05BB  0087               	movwf	7
 12042  05BC  0801               	movf	1,w
 12043  05BD  00AD               	movwf	??_Load_Main
 12044  05BE  01AE               	clrf	??_Load_Main+1
 12045  05BF  082D               	movf	??_Load_Main,w
 12046  05C0  00A0               	movwf	___wmul@multiplier
 12047  05C1  082E               	movf	??_Load_Main+1,w
 12048  05C2  00A1               	movwf	___wmul@multiplier+1
 12049  05C3  3032               	movlw	50
 12050  05C4  00A2               	movwf	___wmul@multiplicand
 12051  05C5  3000               	movlw	0
 12052  05C6  00A3               	movwf	___wmul@multiplicand+1
 12053  05C7  31A7  2781  3183   	fcall	___wmul
 12054  05CA  0020               	movlb	0	; select bank0
 12055  05CB  086E               	movf	_Load,w
 12056  05CC  3E36               	addlw	54
 12057  05CD  0086               	movwf	6
 12058  05CE  3002               	movlw	2	; select bank4/5
 12059  05CF  0087               	movwf	7
 12060  05D0  0820               	movf	?___wmul,w
 12061  05D1  3FC0               	movwi [0]fsr1
 12062  05D2  0821               	movf	?___wmul+1,w
 12063  05D3  3FC1               	movwi [1]fsr1
 12064  05D4                     l9980:	
 12065                           
 12066                           ;OverLoad_B1.c: 150: }
 12067                           ;OverLoad_B1.c: 151: }
 12068                           ;OverLoad_B1.c: 152: }
 12069                           ;OverLoad_B1.c: 153: }
 12070                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 12071  05D4  3198  209C         	fcall	_setLoad_AH_AL_Restore
 12072                           
 12073                           ;OverLoad_B1.c: 166: }
 12074                           ;OverLoad_B1.c: 167: }
 12075  05D6  0008               	return
 12076  05D7                     l9982:	
 12077                           
 12078                           ;OverLoad_B1.c: 168: else
 12079                           ;OverLoad_B1.c: 169: {
 12080                           ;OverLoad_B1.c: 170: if(Load->GO)
 12081  05D7  0020               	movlb	0	; select bank0
 12082  05D8  086E               	movf	_Load,w
 12083  05D9  0086               	movwf	6
 12084  05DA  3002               	movlw	2	; select bank4/5
 12085  05DB  0087               	movwf	7
 12086  05DC  1C81               	btfss	1,1
 12087  05DD  2E01               	goto	l9994
 12088                           
 12089                           ;OverLoad_B1.c: 171: {
 12090                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 12091  05DE  086E               	movf	_Load,w
 12092  05DF  0086               	movwf	6
 12093  05E0  3002               	movlw	2	; select bank4/5
 12094  05E1  0087               	movwf	7
 12095  05E2  1901               	btfsc	1,2
 12096  05E3  2DEE               	goto	l9988
 12097                           
 12098                           ;OverLoad_B1.c: 173: {
 12099                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 12100  05E4  086E               	movf	_Load,w
 12101  05E5  0086               	movwf	6
 12102  05E6  3002               	movlw	2	; select bank4/5
 12103  05E7  0087               	movwf	7
 12104  05E8  1501               	bsf	1,2
 12105                           
 12106                           ;OverLoad_B1.c: 175: Load->Safe=0;
 12107  05E9  086E               	movf	_Load,w
 12108  05EA  0086               	movwf	6
 12109  05EB  3002               	movlw	2	; select bank4/5
 12110  05EC  0087               	movwf	7
 12111  05ED  1181               	bcf	1,3
 12112  05EE                     l9988:	
 12113                           
 12114                           ;OverLoad_B1.c: 176: }
 12115                           ;OverLoad_B1.c: 177: if(getTemp_Safe() && getPF_Safe())
 12116  05EE  31A3  23CE  3183   	fcall	_getTemp_Safe
 12117  05F1  3A00               	xorlw	0
 12118  05F2  1903               	skipnz
 12119  05F3  0008               	return
 12120  05F4  31A3  23F3  3183   	fcall	_getPF_Safe
 12121  05F7  3A00               	xorlw	0
 12122  05F8  1903               	skipnz
 12123  05F9  0008               	return
 12124                           
 12125                           ;OverLoad_B1.c: 178: {
 12126                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 12127  05FA  0020               	movlb	0	; select bank0
 12128  05FB  086E               	movf	_Load,w
 12129  05FC  0086               	movwf	6
 12130  05FD  3002               	movlw	2	; select bank4/5
 12131  05FE  0087               	movwf	7
 12132  05FF  1601               	bsf	1,4
 12133                           
 12134                           ;OverLoad_B1.c: 180: }
 12135                           ;OverLoad_B1.c: 181: }
 12136  0600  0008               	return
 12137  0601                     l9994:	
 12138                           
 12139                           ;OverLoad_B1.c: 182: else
 12140                           ;OverLoad_B1.c: 183: {
 12141                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 12142  0601  086E               	movf	_Load,w
 12143  0602  0086               	movwf	6
 12144  0603  3002               	movlw	2	; select bank4/5
 12145  0604  0087               	movwf	7
 12146  0605  1D01               	btfss	1,2
 12147  0606  0008               	return
 12148                           
 12149                           ;OverLoad_B1.c: 185: {
 12150                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 12151  0607  086E               	movf	_Load,w
 12152  0608  0086               	movwf	6
 12153  0609  3002               	movlw	2	; select bank4/5
 12154  060A  0087               	movwf	7
 12155  060B  1101               	bcf	1,2
 12156                           
 12157                           ;OverLoad_B1.c: 187: Load->Safe=1;
 12158  060C  086E               	movf	_Load,w
 12159  060D  0086               	movwf	6
 12160  060E  3002               	movlw	2	; select bank4/5
 12161  060F  0087               	movwf	7
 12162  0610  1581               	bsf	1,3
 12163                           
 12164                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 12165  0611  086E               	movf	_Load,w
 12166  0612  3E3C               	addlw	60
 12167  0613  0086               	movwf	6
 12168  0614  3002               	movlw	2	; select bank4/5
 12169  0615  0087               	movwf	7
 12170  0616  0181               	clrf	1
 12171                           
 12172                           ;OverLoad_B1.c: 189: Load->Count=0;
 12173  0617  086E               	movf	_Load,w
 12174  0618  3E3A               	addlw	58
 12175  0619  0086               	movwf	6
 12176  061A  3002               	movlw	2	; select bank4/5
 12177  061B  0087               	movwf	7
 12178  061C  0181               	clrf	1
 12179                           
 12180                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 12181  061D  086E               	movf	_Load,w
 12182  061E  3E06               	addlw	6
 12183  061F  0086               	movwf	6
 12184  0620  3002               	movlw	2	; select bank4/5
 12185  0621  0087               	movwf	7
 12186  0622  3000               	movlw	0
 12187  0623  3FC0               	movwi [0]fsr1
 12188  0624  3FC1               	movwi [1]fsr1
 12189                           
 12190                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 12191  0625  086E               	movf	_Load,w
 12192  0626  3E3F               	addlw	63
 12193  0627  0086               	movwf	6
 12194  0628  3002               	movlw	2	; select bank4/5
 12195  0629  0087               	movwf	7
 12196  062A  0181               	clrf	1
 12197                           
 12198                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 12199  062B  086E               	movf	_Load,w
 12200  062C  3E46               	addlw	70
 12201  062D  0086               	movwf	6
 12202  062E  3002               	movlw	2	; select bank4/5
 12203  062F  0087               	movwf	7
 12204  0630  1001               	bcf	1,0
 12205                           
 12206                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 12207  0631  086E               	movf	_Load,w
 12208  0632  3E46               	addlw	70
 12209  0633  0086               	movwf	6
 12210  0634  3002               	movlw	2	; select bank4/5
 12211  0635  0087               	movwf	7
 12212  0636  1081               	bcf	1,1
 12213                           
 12214                           ;OverLoad_B1.c: 194: Load->AD=0;
 12215  0637  086E               	movf	_Load,w
 12216  0638  3E2C               	addlw	44
 12217  0639  0086               	movwf	6
 12218  063A  3002               	movlw	2	; select bank4/5
 12219  063B  0087               	movwf	7
 12220  063C  3000               	movlw	0
 12221  063D  3FC0               	movwi [0]fsr1
 12222  063E  3FC1               	movwi [1]fsr1
 12223                           
 12224                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 12225  063F  3198  209C  3183   	fcall	_setLoad_AH_AL_Restore
 12226                           
 12227                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 12228  0642  0020               	movlb	0	; select bank0
 12229  0643  01A2               	clrf	setDimmerLights_Clear@command
 12230  0644  0AA2               	incf	setDimmerLights_Clear@command,f
 12231  0645  3001               	movlw	1
 12232  0646  31A5  2570  3183   	fcall	_setDimmerLights_Clear
 12233                           
 12234                           ;OverLoad_B1.c: 202: setDimmerLights_Clear(2,1);
 12235  0649  0020               	movlb	0	; select bank0
 12236  064A  01A2               	clrf	setDimmerLights_Clear@command
 12237  064B  0AA2               	incf	setDimmerLights_Clear@command,f
 12238  064C  3002               	movlw	2
 12239  064D  31A5  2570         	fcall	_setDimmerLights_Clear
 12240  064F  0008               	return
 12241  0650                     __end_of_Load_Main:	
 12242                           
 12243                           	psect	text60
 12244  1CF1                     __ptext60:	
 12245 ;; *************** function _setLoad_Exceptions *****************
 12246 ;; Defined at:
 12247 ;;		line 229 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  command         1    wreg     unsigned char 
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;  command         1   12[BANK0 ] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;		None               void
 12254 ;; Registers used:
 12255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        2 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    8
 12268 ;; This function calls:
 12269 ;;		_DimmerLights_Exceptions
 12270 ;;		_setLED
 12271 ;;		_setRF_Enable
 12272 ;;		_setSw_Enable
 12273 ;; This function is called by:
 12274 ;;		_Load_Main
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _setLoad_Exceptions
 12280  1CF1                     _setLoad_Exceptions:	
 12281                           
 12282                           ;incstack = 0
 12283                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12284                           ;setLoad_Exceptions@command stored from wreg
 12285  1CF1  0020               	movlb	0	; select bank0
 12286  1CF2  00AC               	movwf	setLoad_Exceptions@command
 12287                           
 12288                           ;OverLoad_B1.c: 231: Load->ERROR=command;
 12289  1CF3  086E               	movf	_Load,w
 12290  1CF4  0086               	movwf	6
 12291  1CF5  3002               	movlw	2	; select bank4/5
 12292  1CF6  0087               	movwf	7
 12293  1CF7  082C               	movf	setLoad_Exceptions@command,w
 12294  1CF8  1281               	bcf	1,5
 12295  1CF9  1D03               	skipz
 12296  1CFA  1681               	bsf	1,5
 12297                           
 12298                           ;OverLoad_B1.c: 232: Load->Safe=(~command) & 0x01;
 12299  1CFB  092C               	comf	setLoad_Exceptions@command,w
 12300  1CFC  3901               	andlw	1
 12301  1CFD  00AB               	movwf	??_setLoad_Exceptions
 12302  1CFE  086E               	movf	_Load,w
 12303  1CFF  0086               	movwf	6
 12304  1D00  3002               	movlw	2	; select bank4/5
 12305  1D01  0087               	movwf	7
 12306  1D02  0DAB               	rlf	??_setLoad_Exceptions,f
 12307  1D03  0DAB               	rlf	??_setLoad_Exceptions,f
 12308  1D04  0DAB               	rlf	??_setLoad_Exceptions,f
 12309  1D05  0801               	movf	1,w
 12310  1D06  062B               	xorwf	??_setLoad_Exceptions,w
 12311  1D07  39F7               	andlw	-9
 12312  1D08  062B               	xorwf	??_setLoad_Exceptions,w
 12313  1D09  0081               	movwf	1
 12314                           
 12315                           ;OverLoad_B1.c: 233: Load->ErrorStatus=command;
 12316  1D0A  082C               	movf	setLoad_Exceptions@command,w
 12317  1D0B  00AB               	movwf	??_setLoad_Exceptions
 12318  1D0C  086E               	movf	_Load,w
 12319  1D0D  3E05               	addlw	5
 12320  1D0E  0086               	movwf	6
 12321  1D0F  3002               	movlw	2	; select bank4/5
 12322  1D10  0087               	movwf	7
 12323  1D11  082B               	movf	??_setLoad_Exceptions,w
 12324  1D12  0081               	movwf	1
 12325                           
 12326                           ;OverLoad_B1.c: 235: if(command)
 12327  1D13  082C               	movf	setLoad_Exceptions@command,w
 12328  1D14  1903               	btfsc	3,2
 12329  1D15  2D1A               	goto	l1939
 12330                           
 12331                           ;OverLoad_B1.c: 236: {
 12332                           ;OverLoad_B1.c: 237: DimmerLights_Exceptions(2);
 12333  1D16  3002               	movlw	2
 12334  1D17  3190  20C0  319C   	fcall	_DimmerLights_Exceptions
 12335  1D1A                     l1939:	
 12336                           
 12337                           ;OverLoad_B1.c: 238: }
 12338                           ;OverLoad_B1.c: 239: setLED(99,command+10);
 12339  1D1A  0020               	movlb	0	; select bank0
 12340  1D1B  082C               	movf	setLoad_Exceptions@command,w
 12341  1D1C  3E0A               	addlw	10
 12342  1D1D  00AB               	movwf	??_setLoad_Exceptions
 12343  1D1E  082B               	movf	??_setLoad_Exceptions,w
 12344  1D1F  00A2               	movwf	setLED@command
 12345  1D20  3063               	movlw	99
 12346  1D21  319F  2741  319C   	fcall	_setLED
 12347                           
 12348                           ;OverLoad_B1.c: 241: setSw_Enable((~command) & 0x01);
 12349  1D24  0020               	movlb	0	; select bank0
 12350  1D25  092C               	comf	setLoad_Exceptions@command,w
 12351  1D26  3901               	andlw	1
 12352  1D27  31A7  2748  319C   	fcall	_setSw_Enable
 12353                           
 12354                           ;OverLoad_B1.c: 243: setRF_Enable(1,(~command) & 0x01);
 12355  1D2A  0020               	movlb	0	; select bank0
 12356  1D2B  092C               	comf	setLoad_Exceptions@command,w
 12357  1D2C  3901               	andlw	1
 12358  1D2D  00AB               	movwf	??_setLoad_Exceptions
 12359  1D2E  082B               	movf	??_setLoad_Exceptions,w
 12360  1D2F  00A2               	movwf	setRF_Enable@command
 12361  1D30  3001               	movlw	1
 12362  1D31  3199  21A3         	fcall	_setRF_Enable
 12363  1D33  0008               	return
 12364  1D34                     __end_of_setLoad_Exceptions:	
 12365                           
 12366                           	psect	text61
 12367  2748                     __ptext61:	
 12368 ;; *************** function _setSw_Enable *****************
 12369 ;; Defined at:
 12370 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;  command         1    wreg     unsigned char 
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;  command         1    2[BANK0 ] unsigned char 
 12375 ;; Return value:  Size  Location     Type
 12376 ;;		None               void
 12377 ;; Registers used:
 12378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;Total ram usage:        1 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; Hardware stack levels required when called:    5
 12391 ;; This function calls:
 12392 ;;		_SwPointSelect
 12393 ;; This function is called by:
 12394 ;;		_MainT
 12395 ;;		_setLoad_Exceptions
 12396 ;;		_setOverTemp_Exceptions
 12397 ;;		_setPowerFault_Exceptions
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           
 12402                           ;psect for function _setSw_Enable
 12403  2748                     _setSw_Enable:	
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12407                           ;setSw_Enable@command stored from wreg
 12408  2748  0020               	movlb	0	; select bank0
 12409  2749  00A2               	movwf	setSw_Enable@command
 12410                           
 12411                           ;Switch_B1.c: 90: SwPointSelect(1);
 12412  274A  3001               	movlw	1
 12413  274B  3198  2066  31A7   	fcall	_SwPointSelect
 12414                           
 12415                           ;Switch_B1.c: 91: Sw->Enable=command;
 12416  274E  0020               	movlb	0	; select bank0
 12417  274F  086D               	movf	_Sw,w
 12418  2750  0086               	movwf	6
 12419  2751  3001               	movlw	1	; select bank2/3
 12420  2752  0087               	movwf	7
 12421  2753  0822               	movf	setSw_Enable@command,w
 12422  2754  1001               	bcf	1,0
 12423  2755  1D03               	skipz
 12424  2756  1401               	bsf	1,0
 12425                           
 12426                           ;Switch_B1.c: 95: SwPointSelect(2);
 12427  2757  3002               	movlw	2
 12428  2758  3198  2066         	fcall	_SwPointSelect
 12429                           
 12430                           ;Switch_B1.c: 96: Sw->Enable=command;
 12431  275A  0020               	movlb	0	; select bank0
 12432  275B  086D               	movf	_Sw,w
 12433  275C  0086               	movwf	6
 12434  275D  3001               	movlw	1	; select bank2/3
 12435  275E  0087               	movwf	7
 12436  275F  0822               	movf	setSw_Enable@command,w
 12437  2760  1001               	bcf	1,0
 12438  2761  1D03               	skipz
 12439  2762  1401               	bsf	1,0
 12440  2763  0008               	return
 12441  2764                     __end_of_setSw_Enable:	
 12442                           
 12443                           	psect	text62
 12444  19A3                     __ptext62:	
 12445 ;; *************** function _setRF_Enable *****************
 12446 ;; Defined at:
 12447 ;;		line 178 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  rf              1    wreg     unsigned char 
 12450 ;;  command         1    2[BANK0 ] unsigned char 
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  rf              1    3[BANK0 ] unsigned char 
 12453 ;; Return value:  Size  Location     Type
 12454 ;;		None               void
 12455 ;; Registers used:
 12456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12462 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;Total ram usage:        2 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    5
 12469 ;; This function calls:
 12470 ;;		_RfPointSelect
 12471 ;;		_setINT_GO
 12472 ;; This function is called by:
 12473 ;;		_MainT
 12474 ;;		_setLoad_Exceptions
 12475 ;;		_setOverTemp_Exceptions
 12476 ;;		_setPowerFault_Exceptions
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           
 12481                           ;psect for function _setRF_Enable
 12482  19A3                     _setRF_Enable:	
 12483                           
 12484                           ;incstack = 0
 12485                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12486                           ;setRF_Enable@rf stored from wreg
 12487  19A3  0020               	movlb	0	; select bank0
 12488  19A4  00A3               	movwf	setRF_Enable@rf
 12489                           
 12490                           ;RF_Control_B1.c: 180: RfPointSelect(rf);
 12491  19A5  0823               	movf	setRF_Enable@rf,w
 12492  19A6  31A4  243D  3199   	fcall	_RfPointSelect
 12493                           
 12494                           ;RF_Control_B1.c: 181: RF->Enable=command;
 12495  19A9  087C               	movf	_RF,w
 12496  19AA  0086               	movwf	6
 12497  19AB  0187               	clrf	7
 12498  19AC  0020               	movlb	0	; select bank0
 12499  19AD  0822               	movf	setRF_Enable@command,w
 12500  19AE  1001               	bcf	1,0
 12501  19AF  1D03               	skipz
 12502  19B0  1401               	bsf	1,0
 12503                           
 12504                           ;RF_Control_B1.c: 182: RF->Learn=0;
 12505  19B1  087C               	movf	_RF,w
 12506  19B2  0086               	movwf	6
 12507  19B3  0187               	clrf	7
 12508  19B4  1301               	bcf	1,6
 12509                           
 12510                           ;RF_Control_B1.c: 183: RF->TransceiveGO=0;
 12511  19B5  087C               	movf	_RF,w
 12512  19B6  0086               	movwf	6
 12513  19B7  0187               	clrf	7
 12514  19B8  1101               	bcf	1,2
 12515                           
 12516                           ;RF_Control_B1.c: 184: RF->RxStatus=0;
 12517  19B9  087C               	movf	_RF,w
 12518  19BA  0086               	movwf	6
 12519  19BB  0187               	clrf	7
 12520  19BC  1181               	bcf	1,3
 12521                           
 12522                           ;RF_Control_B1.c: 185: RF->ReceiveGO=0;
 12523  19BD  087C               	movf	_RF,w
 12524  19BE  0086               	movwf	6
 12525  19BF  0187               	clrf	7
 12526  19C0  1081               	bcf	1,1
 12527                           
 12528                           ;RF_Control_B1.c: 186: RF->DebounceTime=0;
 12529  19C1  0A7C               	incf	_RF,w
 12530  19C2  0086               	movwf	6
 12531  19C3  0187               	clrf	7
 12532  19C4  0181               	clrf	1
 12533                           
 12534                           ;RF_Control_B1.c: 187: RF->Debounce=0;
 12535  19C5  087C               	movf	_RF,w
 12536  19C6  0086               	movwf	6
 12537  19C7  0187               	clrf	7
 12538  19C8  1281               	bcf	1,5
 12539                           
 12540                           ;RF_Control_B1.c: 188: setINT_GO(0);
 12541  19C9  3000               	movlw	0
 12542  19CA  31A4  2414         	fcall	_setINT_GO
 12543  19CC  0008               	return
 12544  19CD                     __end_of_setRF_Enable:	
 12545                           
 12546                           	psect	text63
 12547  2414                     __ptext63:	
 12548 ;; *************** function _setINT_GO *****************
 12549 ;; Defined at:
 12550 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;  command         1    wreg     unsigned char 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  command         1    0[BANK0 ] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;		None               void
 12557 ;; Registers used:
 12558 ;;		wreg
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;Total ram usage:        1 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    4
 12571 ;; This function calls:
 12572 ;;		Nothing
 12573 ;; This function is called by:
 12574 ;;		_setRF_Main
 12575 ;;		_setRF_Enable
 12576 ;;		_RF_RxDisable
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           
 12581                           ;psect for function _setINT_GO
 12582  2414                     _setINT_GO:	
 12583                           
 12584                           ;incstack = 0
 12585                           ; Regs used in _setINT_GO: [wreg]
 12586                           ;setINT_GO@command stored from wreg
 12587  2414  0020               	movlb	0	; select bank0
 12588  2415  00A0               	movwf	setINT_GO@command
 12589                           
 12590                           ;MCU_16f1518_B1.c: 237: INTF=0;
 12591  2416  108B               	bcf	11,1	;volatile
 12592                           
 12593                           ;MCU_16f1518_B1.c: 238: INTE=command;
 12594  2417  1C20               	btfss	setINT_GO@command,0
 12595  2418  2C1B               	goto	u8470
 12596  2419  160B               	bsf	11,4	;volatile
 12597  241A  0008               	return
 12598  241B                     u8470:	
 12599  241B  120B               	bcf	11,4	;volatile
 12600  241C  0008               	return
 12601  241D                     __end_of_setINT_GO:	
 12602                           
 12603                           	psect	text64
 12604  10C0                     __ptext64:	
 12605 ;; *************** function _DimmerLights_Exceptions *****************
 12606 ;; Defined at:
 12607 ;;		line 237 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  status          1    wreg     unsigned char 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  status          1   10[BANK0 ] unsigned char 
 12612 ;; Return value:  Size  Location     Type
 12613 ;;		None               void
 12614 ;; Registers used:
 12615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        1 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    7
 12628 ;; This function calls:
 12629 ;;		_getDimmerLights_StatusFlag
 12630 ;;		_setBuz
 12631 ;;		_setDimmerLights_ERROR
 12632 ;;		_setDimmerLights_TriggerERROR
 12633 ;; This function is called by:
 12634 ;;		_setLoad_Exceptions
 12635 ;;		_setOverTemp_Exceptions
 12636 ;;		_setPowerFault_Exceptions
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           
 12641                           ;psect for function _DimmerLights_Exceptions
 12642  10C0                     _DimmerLights_Exceptions:	
 12643                           
 12644                           ;incstack = 0
 12645                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12646                           ;DimmerLights_Exceptions@status stored from wreg
 12647  10C0  0020               	movlb	0	; select bank0
 12648  10C1  00AA               	movwf	DimmerLights_Exceptions@status
 12649                           
 12650                           ;Dimmer_B1.c: 239: if(status == 1)
 12651  10C2  082A               	movf	DimmerLights_Exceptions@status,w
 12652  10C3  3A01               	xorlw	1
 12653  10C4  1D03               	skipz
 12654  10C5  28D6               	goto	l8836
 12655                           
 12656                           ;Dimmer_B1.c: 240: {
 12657                           ;Dimmer_B1.c: 241: if(getDimmerLights_StatusFlag())
 12658  10C6  31A6  2639  3190   	fcall	_getDimmerLights_StatusFlag
 12659  10C9  3A00               	xorlw	0
 12660  10CA  1903               	skipnz
 12661  10CB  28EE               	goto	l8842
 12662                           
 12663                           ;Dimmer_B1.c: 242: {
 12664                           ;Dimmer_B1.c: 243: setBuz(10,300);
 12665  10CC  302C               	movlw	44
 12666  10CD  0020               	movlb	0	; select bank0
 12667  10CE  00A6               	movwf	setBuz@time
 12668  10CF  3001               	movlw	1
 12669  10D0  00A7               	movwf	setBuz@time+1
 12670  10D1  300A               	movlw	10
 12671  10D2  3193  234E  3190   	fcall	_setBuz
 12672  10D5  28EE               	goto	l8842
 12673  10D6                     l8836:	
 12674                           ;Dimmer_B1.c: 255: }
 12675                           
 12676                           ;Dimmer_B1.c: 250: setDimmerLights_ERROR(2);
 12677                           
 12678                           ;Dimmer_B1.c: 244: }
 12679                           ;Dimmer_B1.c: 247: setDimmerLights_ERROR(1);
 12680                           
 12681                           
 12682                           ;Dimmer_B1.c: 256: else if(status == 2)
 12683  10D6  0020               	movlb	0	; select bank0
 12684  10D7  082A               	movf	DimmerLights_Exceptions@status,w
 12685  10D8  3A02               	xorlw	2
 12686  10D9  1D03               	skipz
 12687  10DA  28E9               	goto	l8840
 12688                           
 12689                           ;Dimmer_B1.c: 257: {
 12690                           ;Dimmer_B1.c: 258: setBuz(5,300);
 12691  10DB  302C               	movlw	44
 12692  10DC  00A6               	movwf	setBuz@time
 12693  10DD  3001               	movlw	1
 12694  10DE  00A7               	movwf	setBuz@time+1
 12695  10DF  3005               	movlw	5
 12696  10E0  3193  234E  3190   	fcall	_setBuz
 12697                           
 12698                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(Dimmer->Load);
 12699  10E3  0021               	movlb	1	; select bank1
 12700  10E4  0A39               	incf	_Dimmer^(0+128),w
 12701  10E5  0086               	movwf	6
 12702  10E6  0187               	clrf	7
 12703  10E7  0801               	movf	1,w
 12704  10E8  28F3               	goto	L12
 12705  10E9                     l8840:	
 12706                           ;Dimmer_B1.c: 260: }
 12707                           
 12708                           
 12709                           ;Dimmer_B1.c: 261: else if(status == 3)
 12710  10E9  0020               	movlb	0	; select bank0
 12711  10EA  082A               	movf	DimmerLights_Exceptions@status,w
 12712  10EB  3A03               	xorlw	3
 12713  10EC  1D03               	skipz
 12714  10ED  28F6               	goto	l922
 12715  10EE                     l8842:	
 12716                           
 12717                           ;Dimmer_B1.c: 262: {
 12718                           ;Dimmer_B1.c: 264: setDimmerLights_ERROR(1);
 12719  10EE  3001               	movlw	1
 12720  10EF  319E  268F  3190   	fcall	_setDimmerLights_ERROR
 12721                           
 12722                           ;Dimmer_B1.c: 267: setDimmerLights_ERROR(2);
 12723  10F2  3002               	movlw	2
 12724  10F3                     L12:	
 12725  10F3  319E  268F  3190   	fcall	_setDimmerLights_ERROR
 12726  10F6                     l922:	
 12727                           
 12728                           ;Dimmer_B1.c: 272: }
 12729                           ;Dimmer_B1.c: 275: setDimmerLights_TriggerERROR(1,0);
 12730  10F6  0020               	movlb	0	; select bank0
 12731  10F7  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12732  10F8  3001               	movlw	1
 12733  10F9  3199  21CD  3190   	fcall	_setDimmerLights_TriggerERROR
 12734                           
 12735                           ;Dimmer_B1.c: 278: setDimmerLights_TriggerERROR(2,0);
 12736  10FC  0020               	movlb	0	; select bank0
 12737  10FD  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12738  10FE  3002               	movlw	2
 12739  10FF  3199  21CD  3190   	fcall	_setDimmerLights_TriggerERROR
 12740                           
 12741                           ;Dimmer_B1.c: 284: if(TMain->SelfTest == 0)
 12742  1102  0021               	movlb	1	; select bank1
 12743  1103  0869               	movf	_TMain^(0+128),w
 12744  1104  3E03               	addlw	3
 12745  1105  0086               	movwf	6
 12746  1106  3001               	movlw	1	; select bank2/3
 12747  1107  0087               	movwf	7
 12748  1108  1801               	btfsc	1,0
 12749  1109  0008               	return
 12750                           
 12751                           ;Dimmer_B1.c: 285: {
 12752                           ;Dimmer_B1.c: 286: TMain->i=0;
 12753  110A  0869               	movf	_TMain^(0+128),w
 12754  110B  3E0E               	addlw	14
 12755  110C  0086               	movwf	6
 12756  110D  3001               	movlw	1	; select bank2/3
 12757  110E  0087               	movwf	7
 12758  110F  1001               	bcf	1,0
 12759                           
 12760                           ;Dimmer_B1.c: 287: TMain->j=0;
 12761  1110  0869               	movf	_TMain^(0+128),w
 12762  1111  3E0E               	addlw	14
 12763  1112  0086               	movwf	6
 12764  1113  3001               	movlw	1	; select bank2/3
 12765  1114  0087               	movwf	7
 12766  1115  1081               	bcf	1,1
 12767                           
 12768                           ;Dimmer_B1.c: 288: TMain->k=1;
 12769  1116  0869               	movf	_TMain^(0+128),w
 12770  1117  3E0E               	addlw	14
 12771  1118  0086               	movwf	6
 12772  1119  3001               	movlw	1	; select bank2/3
 12773  111A  0087               	movwf	7
 12774  111B  1501               	bsf	1,2
 12775                           
 12776                           ;Dimmer_B1.c: 289: TMain->Count2=0;
 12777  111C  0869               	movf	_TMain^(0+128),w
 12778  111D  3E08               	addlw	8
 12779  111E  0086               	movwf	6
 12780  111F  3001               	movlw	1	; select bank2/3
 12781  1120  0087               	movwf	7
 12782  1121  3000               	movlw	0
 12783  1122  3FC0               	movwi [0]fsr1
 12784  1123  3FC1               	movwi [1]fsr1
 12785  1124  0008               	return
 12786  1125                     __end_of_DimmerLights_Exceptions:	
 12787                           
 12788                           	psect	text65
 12789  19CD                     __ptext65:	
 12790 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12791 ;; Defined at:
 12792 ;;		line 311 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  lights          1    wreg     unsigned char 
 12795 ;;  command         1    2[BANK0 ] unsigned char 
 12796 ;; Auto vars:     Size  Location     Type
 12797 ;;  lights          1    3[BANK0 ] unsigned char 
 12798 ;; Return value:  Size  Location     Type
 12799 ;;		None               void
 12800 ;; Registers used:
 12801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12802 ;; Tracked objects:
 12803 ;;		On entry : 0/0
 12804 ;;		On exit  : 0/0
 12805 ;;		Unchanged: 0/0
 12806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;Total ram usage:        2 bytes
 12812 ;; Hardware stack levels used:    1
 12813 ;; Hardware stack levels required when called:    5
 12814 ;; This function calls:
 12815 ;;		_DimmerLightsPointSelect
 12816 ;; This function is called by:
 12817 ;;		_DimmerLights_Exceptions
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           
 12822                           ;psect for function _setDimmerLights_TriggerERROR
 12823  19CD                     _setDimmerLights_TriggerERROR:	
 12824                           
 12825                           ;incstack = 0
 12826                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12827                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12828  19CD  0020               	movlb	0	; select bank0
 12829  19CE  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12830                           
 12831                           ;Dimmer_B1.c: 313: DimmerLightsPointSelect(lights);
 12832  19CF  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12833  19D0  31A5  25D1         	fcall	_DimmerLightsPointSelect
 12834                           
 12835                           ;Dimmer_B1.c: 314: DimmerLights->Trigger=command;
 12836  19D2  0020               	movlb	0	; select bank0
 12837  19D3  086C               	movf	_DimmerLights,w
 12838  19D4  3E09               	addlw	9
 12839  19D5  0086               	movwf	6
 12840  19D6  3001               	movlw	1	; select bank2/3
 12841  19D7  0087               	movwf	7
 12842  19D8  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12843  19D9  1081               	bcf	1,1
 12844  19DA  1D03               	skipz
 12845  19DB  1481               	bsf	1,1
 12846                           
 12847                           ;Dimmer_B1.c: 315: DimmerLights->Switch=command;
 12848  19DC  086C               	movf	_DimmerLights,w
 12849  19DD  3E09               	addlw	9
 12850  19DE  0086               	movwf	6
 12851  19DF  3001               	movlw	1	; select bank2/3
 12852  19E0  0087               	movwf	7
 12853  19E1  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12854  19E2  1001               	bcf	1,0
 12855  19E3  1D03               	skipz
 12856  19E4  1401               	bsf	1,0
 12857                           
 12858                           ;Dimmer_B1.c: 316: DimmerLights->TriggerAdj=command;
 12859  19E5  086C               	movf	_DimmerLights,w
 12860  19E6  3E09               	addlw	9
 12861  19E7  0086               	movwf	6
 12862  19E8  3001               	movlw	1	; select bank2/3
 12863  19E9  0087               	movwf	7
 12864  19EA  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12865  19EB  1181               	bcf	1,3
 12866  19EC  1D03               	skipz
 12867  19ED  1581               	bsf	1,3
 12868                           
 12869                           ;Dimmer_B1.c: 317: DimmerLights->AdjGo=command;
 12870  19EE  086C               	movf	_DimmerLights,w
 12871  19EF  3E09               	addlw	9
 12872  19F0  0086               	movwf	6
 12873  19F1  3001               	movlw	1	; select bank2/3
 12874  19F2  0087               	movwf	7
 12875  19F3  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12876  19F4  1101               	bcf	1,2
 12877  19F5  1D03               	skipz
 12878  19F6  1501               	bsf	1,2
 12879  19F7  0008               	return
 12880  19F8                     __end_of_setDimmerLights_TriggerERROR:	
 12881                           
 12882                           	psect	text66
 12883  1E8F                     __ptext66:	
 12884 ;; *************** function _setDimmerLights_ERROR *****************
 12885 ;; Defined at:
 12886 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  lights          1    wreg     unsigned char 
 12889 ;; Auto vars:     Size  Location     Type
 12890 ;;  lights          1    5[BANK0 ] unsigned char 
 12891 ;; Return value:  Size  Location     Type
 12892 ;;		None               void
 12893 ;; Registers used:
 12894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12895 ;; Tracked objects:
 12896 ;;		On entry : 0/0
 12897 ;;		On exit  : 0/0
 12898 ;;		Unchanged: 0/0
 12899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;Total ram usage:        2 bytes
 12905 ;; Hardware stack levels used:    1
 12906 ;; Hardware stack levels required when called:    6
 12907 ;; This function calls:
 12908 ;;		_DimmerLightsPointSelect
 12909 ;;		_setLED
 12910 ;;		_setLoad_StatusOff
 12911 ;;		_setRFSW_Status
 12912 ;;		_setSw_Status
 12913 ;; This function is called by:
 12914 ;;		_DimmerLights_Exceptions
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function _setDimmerLights_ERROR
 12920  1E8F                     _setDimmerLights_ERROR:	
 12921                           
 12922                           ;incstack = 0
 12923                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12924                           ;setDimmerLights_ERROR@lights stored from wreg
 12925  1E8F  0020               	movlb	0	; select bank0
 12926  1E90  00A5               	movwf	setDimmerLights_ERROR@lights
 12927                           
 12928                           ;Dimmer_B1.c: 295: DimmerLightsPointSelect(lights);
 12929  1E91  0825               	movf	setDimmerLights_ERROR@lights,w
 12930  1E92  31A5  25D1  319E   	fcall	_DimmerLightsPointSelect
 12931                           
 12932                           ;Dimmer_B1.c: 296: if(DimmerLights->Status)
 12933  1E95  0020               	movlb	0	; select bank0
 12934  1E96  086C               	movf	_DimmerLights,w
 12935  1E97  0086               	movwf	6
 12936  1E98  3001               	movlw	1	; select bank2/3
 12937  1E99  0087               	movwf	7
 12938  1E9A  1E81               	btfss	1,5
 12939  1E9B  0008               	return
 12940                           
 12941                           ;Dimmer_B1.c: 297: {
 12942                           ;Dimmer_B1.c: 298: DimmerLights->Signal=0;
 12943  1E9C  086C               	movf	_DimmerLights,w
 12944  1E9D  0086               	movwf	6
 12945  1E9E  3001               	movlw	1	; select bank2/3
 12946  1E9F  0087               	movwf	7
 12947  1EA0  1081               	bcf	1,1
 12948                           
 12949                           ;Dimmer_B1.c: 299: DimmerLights->AdjFlag=0;
 12950  1EA1  086C               	movf	_DimmerLights,w
 12951  1EA2  0086               	movwf	6
 12952  1EA3  3001               	movlw	1	; select bank2/3
 12953  1EA4  0087               	movwf	7
 12954  1EA5  1181               	bcf	1,3
 12955                           
 12956                           ;Dimmer_B1.c: 300: DimmerLights->AdjStatus=0;
 12957  1EA6  086C               	movf	_DimmerLights,w
 12958  1EA7  0086               	movwf	6
 12959  1EA8  3001               	movlw	1	; select bank2/3
 12960  1EA9  0087               	movwf	7
 12961  1EAA  1201               	bcf	1,4
 12962                           
 12963                           ;Dimmer_B1.c: 301: DimmerLights->StatusFlag=0;
 12964  1EAB  086C               	movf	_DimmerLights,w
 12965  1EAC  0086               	movwf	6
 12966  1EAD  3001               	movlw	1	; select bank2/3
 12967  1EAE  0087               	movwf	7
 12968  1EAF  1301               	bcf	1,6
 12969                           
 12970                           ;Dimmer_B1.c: 302: DimmerLights->DimmingTimeValue=3;
 12971  1EB0  3003               	movlw	3
 12972  1EB1  00A4               	movwf	??_setDimmerLights_ERROR
 12973  1EB2  086C               	movf	_DimmerLights,w
 12974  1EB3  3E02               	addlw	2
 12975  1EB4  0086               	movwf	6
 12976  1EB5  3001               	movlw	1	; select bank2/3
 12977  1EB6  0087               	movwf	7
 12978  1EB7  0824               	movf	??_setDimmerLights_ERROR,w
 12979  1EB8  0081               	movwf	1
 12980                           
 12981                           ;Dimmer_B1.c: 303: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12982  1EB9  086C               	movf	_DimmerLights,w
 12983  1EBA  3E06               	addlw	6
 12984  1EBB  0086               	movwf	6
 12985  1EBC  3001               	movlw	1	; select bank2/3
 12986  1EBD  0087               	movwf	7
 12987  1EBE  0801               	movf	1,w
 12988  1EBF  00A4               	movwf	??_setDimmerLights_ERROR
 12989  1EC0  086C               	movf	_DimmerLights,w
 12990  1EC1  3E04               	addlw	4
 12991  1EC2  0086               	movwf	6
 12992  1EC3  3001               	movlw	1	; select bank2/3
 12993  1EC4  0087               	movwf	7
 12994  1EC5  0824               	movf	??_setDimmerLights_ERROR,w
 12995  1EC6  0081               	movwf	1
 12996                           
 12997                           ;Dimmer_B1.c: 304: Dimmer->Detect=1;
 12998  1EC7  0021               	movlb	1	; select bank1
 12999  1EC8  0839               	movf	_Dimmer^(0+128),w
 13000  1EC9  0086               	movwf	6
 13001  1ECA  0187               	clrf	7
 13002  1ECB  1401               	bsf	1,0
 13003                           
 13004                           ;Dimmer_B1.c: 305: setLoad_StatusOff(lights,1);
 13005  1ECC  0020               	movlb	0	; select bank0
 13006  1ECD  01A0               	clrf	setLoad_StatusOff@command
 13007  1ECE  0AA0               	incf	setLoad_StatusOff@command,f
 13008  1ECF  0825               	movf	setDimmerLights_ERROR@lights,w
 13009  1ED0  319A  22B4  319E   	fcall	_setLoad_StatusOff
 13010                           
 13011                           ;Dimmer_B1.c: 306: setLED(lights,1);
 13012  1ED3  0020               	movlb	0	; select bank0
 13013  1ED4  01A2               	clrf	setLED@command
 13014  1ED5  0AA2               	incf	setLED@command,f
 13015  1ED6  0825               	movf	setDimmerLights_ERROR@lights,w
 13016  1ED7  319F  2741  319E   	fcall	_setLED
 13017                           
 13018                           ;Dimmer_B1.c: 307: setSw_Status(lights,0);
 13019  1EDA  0020               	movlb	0	; select bank0
 13020  1EDB  01A2               	clrf	setSw_Status@command
 13021  1EDC  0825               	movf	setDimmerLights_ERROR@lights,w
 13022  1EDD  31A5  2531  319E   	fcall	_setSw_Status
 13023                           
 13024                           ;Dimmer_B1.c: 308: setRFSW_Status(lights,0);
 13025  1EE0  0020               	movlb	0	; select bank0
 13026  1EE1  01A2               	clrf	setRFSW_Status@command
 13027  1EE2  0825               	movf	setDimmerLights_ERROR@lights,w
 13028  1EE3  31A5  2522         	fcall	_setRFSW_Status
 13029  1EE5  0008               	return
 13030  1EE6                     __end_of_setDimmerLights_ERROR:	
 13031                           
 13032                           	psect	text67
 13033  2570                     __ptext67:	
 13034 ;; *************** function _setDimmerLights_Clear *****************
 13035 ;; Defined at:
 13036 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13037 ;; Parameters:    Size  Location     Type
 13038 ;;  lights          1    wreg     unsigned char 
 13039 ;;  command         1    2[BANK0 ] unsigned char 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  lights          1    3[BANK0 ] unsigned char 
 13042 ;; Return value:  Size  Location     Type
 13043 ;;		None               void
 13044 ;; Registers used:
 13045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13051 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;Total ram usage:        2 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; Hardware stack levels required when called:    5
 13058 ;; This function calls:
 13059 ;;		_DimmerLightsPointSelect
 13060 ;; This function is called by:
 13061 ;;		_Load_Main
 13062 ;; This function uses a non-reentrant model
 13063 ;;
 13064                           
 13065                           
 13066                           ;psect for function _setDimmerLights_Clear
 13067  2570                     _setDimmerLights_Clear:	
 13068                           
 13069                           ;incstack = 0
 13070                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13071                           ;setDimmerLights_Clear@lights stored from wreg
 13072  2570  0020               	movlb	0	; select bank0
 13073  2571  00A3               	movwf	setDimmerLights_Clear@lights
 13074                           
 13075                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 13076  2572  0823               	movf	setDimmerLights_Clear@lights,w
 13077  2573  31A5  25D1         	fcall	_DimmerLightsPointSelect
 13078                           
 13079                           ;Dimmer_B1.c: 448: DimmerLights->Clear=command;
 13080  2575  0020               	movlb	0	; select bank0
 13081  2576  086C               	movf	_DimmerLights,w
 13082  2577  3E0C               	addlw	12
 13083  2578  0086               	movwf	6
 13084  2579  3001               	movlw	1	; select bank2/3
 13085  257A  0087               	movwf	7
 13086  257B  0822               	movf	setDimmerLights_Clear@command,w
 13087  257C  1001               	bcf	1,0
 13088  257D  1D03               	skipz
 13089  257E  1401               	bsf	1,0
 13090  257F  0008               	return
 13091  2580                     __end_of_setDimmerLights_Clear:	
 13092                           
 13093                           	psect	text68
 13094  23CE                     __ptext68:	
 13095 ;; *************** function _getTemp_Safe *****************
 13096 ;; Defined at:
 13097 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;		None
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      unsigned char 
 13104 ;; Registers used:
 13105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13106 ;; Tracked objects:
 13107 ;;		On entry : 0/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;Total ram usage:        0 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; Hardware stack levels required when called:    4
 13118 ;; This function calls:
 13119 ;;		Nothing
 13120 ;; This function is called by:
 13121 ;;		_Load_Main
 13122 ;;		_setPowerFault_Main
 13123 ;; This function uses a non-reentrant model
 13124 ;;
 13125                           
 13126                           
 13127                           ;psect for function _getTemp_Safe
 13128  23CE                     _getTemp_Safe:	
 13129                           
 13130                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13131                           
 13132                           ;incstack = 0
 13133                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13134  23CE  087D               	movf	_Temp,w
 13135  23CF  0086               	movwf	6
 13136  23D0  3001               	movlw	1	; select bank2/3
 13137  23D1  0087               	movwf	7
 13138  23D2  0E01               	swapf	1,w
 13139  23D3  3901               	andlw	1
 13140  23D4  0008               	return
 13141  23D5                     __end_of_getTemp_Safe:	
 13142                           
 13143                           	psect	text69
 13144  23F3                     __ptext69:	
 13145 ;; *************** function _getPF_Safe *****************
 13146 ;; Defined at:
 13147 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;		None
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;		None
 13152 ;; Return value:  Size  Location     Type
 13153 ;;                  1    wreg      unsigned char 
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;Total ram usage:        0 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    4
 13168 ;; This function calls:
 13169 ;;		Nothing
 13170 ;; This function is called by:
 13171 ;;		_Load_Main
 13172 ;;		_setTemp_Main
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           
 13177                           ;psect for function _getPF_Safe
 13178  23F3                     _getPF_Safe:	
 13179                           
 13180                           ;PowerFault_B1.c: 42: return PF->Safe;
 13181                           
 13182                           ;incstack = 0
 13183                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13184  23F3  087B               	movf	_PF,w
 13185  23F4  0086               	movwf	6
 13186  23F5  3001               	movlw	1	; select bank2/3
 13187  23F6  0087               	movwf	7
 13188  23F7  0C01               	rrf	1,w
 13189  23F8  0C89               	rrf	9,f
 13190  23F9  3901               	andlw	1
 13191  23FA  0008               	return
 13192  23FB                     __end_of_getPF_Safe:	
 13193                           
 13194                           	psect	text70
 13195  1B7D                     __ptext70:	
 13196 ;; *************** function ___lwdiv *****************
 13197 ;; Defined at:
 13198 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;  divisor         2    0[BANK0 ] unsigned int 
 13201 ;;  dividend        2    2[BANK0 ] unsigned int 
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  quotient        2    5[BANK0 ] unsigned int 
 13204 ;;  counter         1    7[BANK0 ] unsigned char 
 13205 ;; Return value:  Size  Location     Type
 13206 ;;                  2    0[BANK0 ] unsigned int 
 13207 ;; Registers used:
 13208 ;;		wreg, status,2, status,0
 13209 ;; Tracked objects:
 13210 ;;		On entry : 0/0
 13211 ;;		On exit  : 0/0
 13212 ;;		Unchanged: 0/0
 13213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13214 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;Total ram usage:        8 bytes
 13219 ;; Hardware stack levels used:    1
 13220 ;; Hardware stack levels required when called:    4
 13221 ;; This function calls:
 13222 ;;		Nothing
 13223 ;; This function is called by:
 13224 ;;		_Load_Main
 13225 ;; This function uses a non-reentrant model
 13226 ;;
 13227                           
 13228                           
 13229                           ;psect for function ___lwdiv
 13230  1B7D                     ___lwdiv:	
 13231                           
 13232                           ;incstack = 0
 13233                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13234  1B7D  0020               	movlb	0	; select bank0
 13235  1B7E  01A5               	clrf	___lwdiv@quotient
 13236  1B7F  01A6               	clrf	___lwdiv@quotient+1
 13237  1B80  0821               	movf	___lwdiv@divisor+1,w
 13238  1B81  0420               	iorwf	___lwdiv@divisor,w
 13239  1B82  1903               	skipnz
 13240  1B83  2BAD               	goto	l7892
 13241  1B84  01A7               	clrf	___lwdiv@counter
 13242  1B85  0AA7               	incf	___lwdiv@counter,f
 13243  1B86                     l7880:	
 13244  1B86  1BA1               	btfsc	___lwdiv@divisor+1,7
 13245  1B87  2B92               	goto	l7882
 13246  1B88  3001               	movlw	1
 13247  1B89                     u6955:	
 13248  1B89  35A0               	lslf	___lwdiv@divisor,f
 13249  1B8A  0DA1               	rlf	___lwdiv@divisor+1,f
 13250  1B8B  0B89               	decfsz	9,f
 13251  1B8C  2B89               	goto	u6955
 13252  1B8D  3001               	movlw	1
 13253  1B8E  00A4               	movwf	??___lwdiv
 13254  1B8F  0824               	movf	??___lwdiv,w
 13255  1B90  07A7               	addwf	___lwdiv@counter,f
 13256  1B91  2B86               	goto	l7880
 13257  1B92                     l7882:	
 13258  1B92  3001               	movlw	1
 13259  1B93                     u6975:	
 13260  1B93  35A5               	lslf	___lwdiv@quotient,f
 13261  1B94  0DA6               	rlf	___lwdiv@quotient+1,f
 13262  1B95  0B89               	decfsz	9,f
 13263  1B96  2B93               	goto	u6975
 13264  1B97  0821               	movf	___lwdiv@divisor+1,w
 13265  1B98  0223               	subwf	___lwdiv@dividend+1,w
 13266  1B99  1D03               	skipz
 13267  1B9A  2B9D               	goto	u6985
 13268  1B9B  0820               	movf	___lwdiv@divisor,w
 13269  1B9C  0222               	subwf	___lwdiv@dividend,w
 13270  1B9D                     u6985:	
 13271  1B9D  1C03               	skipc
 13272  1B9E  2BA4               	goto	l7888
 13273  1B9F  0820               	movf	___lwdiv@divisor,w
 13274  1BA0  02A2               	subwf	___lwdiv@dividend,f
 13275  1BA1  0821               	movf	___lwdiv@divisor+1,w
 13276  1BA2  3BA3               	subwfb	___lwdiv@dividend+1,f
 13277  1BA3  1425               	bsf	___lwdiv@quotient,0
 13278  1BA4                     l7888:	
 13279  1BA4  3001               	movlw	1
 13280  1BA5                     u6995:	
 13281  1BA5  36A1               	lsrf	___lwdiv@divisor+1,f
 13282  1BA6  0CA0               	rrf	___lwdiv@divisor,f
 13283  1BA7  0B89               	decfsz	9,f
 13284  1BA8  2BA5               	goto	u6995
 13285  1BA9  3001               	movlw	1
 13286  1BAA  02A7               	subwf	___lwdiv@counter,f
 13287  1BAB  1D03               	btfss	3,2
 13288  1BAC  2B92               	goto	l7882
 13289  1BAD                     l7892:	
 13290  1BAD  0826               	movf	___lwdiv@quotient+1,w
 13291  1BAE  01A1               	clrf	?___lwdiv+1
 13292  1BAF  07A1               	addwf	?___lwdiv+1,f
 13293  1BB0  0825               	movf	___lwdiv@quotient,w
 13294  1BB1  01A0               	clrf	?___lwdiv
 13295  1BB2  07A0               	addwf	?___lwdiv,f
 13296  1BB3  0008               	return
 13297  1BB4                     __end_of___lwdiv:	
 13298                           
 13299                           	psect	text71
 13300  24D2                     __ptext71:	
 13301 ;; *************** function _Load_Initialization *****************
 13302 ;; Defined at:
 13303 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13304 ;; Parameters:    Size  Location     Type
 13305 ;;		None
 13306 ;; Auto vars:     Size  Location     Type
 13307 ;;		None
 13308 ;; Return value:  Size  Location     Type
 13309 ;;		None               void
 13310 ;; Registers used:
 13311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13312 ;; Tracked objects:
 13313 ;;		On entry : 0/0
 13314 ;;		On exit  : 0/0
 13315 ;;		Unchanged: 0/0
 13316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;Total ram usage:        1 bytes
 13322 ;; Hardware stack levels used:    1
 13323 ;; Hardware stack levels required when called:    5
 13324 ;; This function calls:
 13325 ;;		_setLoad_AH_AL_Restore
 13326 ;; This function is called by:
 13327 ;;		_main
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           
 13332                           ;psect for function _Load_Initialization
 13333  24D2                     _Load_Initialization:	
 13334                           
 13335                           ;OverLoad_B1.c: 10: Load=&Load1;
 13336                           
 13337                           ;incstack = 0
 13338                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13339  24D2  30A0               	movlw	_Load1& (0+255)
 13340  24D3  0020               	movlb	0	; select bank0
 13341  24D4  00A2               	movwf	??_Load_Initialization
 13342  24D5  0822               	movf	??_Load_Initialization,w
 13343  24D6  00EE               	movwf	_Load
 13344                           
 13345                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13346  24D7  086E               	movf	_Load,w
 13347  24D8  0086               	movwf	6
 13348  24D9  3002               	movlw	2	; select bank4/5
 13349  24DA  0087               	movwf	7
 13350  24DB  1581               	bsf	1,3
 13351                           
 13352                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13353  24DC  3198  209C         	fcall	_setLoad_AH_AL_Restore
 13354  24DE  0008               	return
 13355  24DF                     __end_of_Load_Initialization:	
 13356                           
 13357                           	psect	text72
 13358  189C                     __ptext72:	
 13359 ;; *************** function _setLoad_AH_AL_Restore *****************
 13360 ;; Defined at:
 13361 ;;		line 306 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13362 ;; Parameters:    Size  Location     Type
 13363 ;;		None
 13364 ;; Auto vars:     Size  Location     Type
 13365 ;;  i               1    1[BANK0 ] unsigned char 
 13366 ;; Return value:  Size  Location     Type
 13367 ;;		None               void
 13368 ;; Registers used:
 13369 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13370 ;; Tracked objects:
 13371 ;;		On entry : 0/0
 13372 ;;		On exit  : 0/0
 13373 ;;		Unchanged: 0/0
 13374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;Total ram usage:        2 bytes
 13380 ;; Hardware stack levels used:    1
 13381 ;; Hardware stack levels required when called:    4
 13382 ;; This function calls:
 13383 ;;		Nothing
 13384 ;; This function is called by:
 13385 ;;		_Load_Initialization
 13386 ;;		_Load_Main
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function _setLoad_AH_AL_Restore
 13392  189C                     _setLoad_AH_AL_Restore:	
 13393                           
 13394                           ;OverLoad_B1.c: 308: char i;
 13395                           ;OverLoad_B1.c: 309: for(i=0 ; i<5 ;i++)
 13396                           
 13397                           ;incstack = 0
 13398                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13399  189C  0020               	movlb	0	; select bank0
 13400  189D  01A1               	clrf	setLoad_AH_AL_Restore@i
 13401  189E                     L13:	
 13402  189E  3005               	movlw	5
 13403  189F  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13404  18A0  1803               	btfsc	3,0
 13405  18A1  0008               	return
 13406                           
 13407                           ;OverLoad_B1.c: 310: {
 13408                           ;OverLoad_B1.c: 311: Load->AH[i]=0;
 13409  18A2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13410  18A3  3E08               	addlw	8
 13411  18A4  076E               	addwf	_Load,w
 13412  18A5  00A0               	movwf	??_setLoad_AH_AL_Restore
 13413  18A6  0820               	movf	??_setLoad_AH_AL_Restore,w
 13414  18A7  0086               	movwf	6
 13415  18A8  3002               	movlw	2	; select bank4/5
 13416  18A9  0087               	movwf	7
 13417  18AA  3000               	movlw	0
 13418  18AB  3FC0               	movwi [0]fsr1
 13419  18AC  3FC1               	movwi [1]fsr1
 13420                           
 13421                           ;OverLoad_B1.c: 312: Load->AL[i]=0xffff;
 13422  18AD  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13423  18AE  3E1A               	addlw	26
 13424  18AF  076E               	addwf	_Load,w
 13425  18B0  00A0               	movwf	??_setLoad_AH_AL_Restore
 13426  18B1  0820               	movf	??_setLoad_AH_AL_Restore,w
 13427  18B2  0086               	movwf	6
 13428  18B3  3002               	movlw	2	; select bank4/5
 13429  18B4  0087               	movwf	7
 13430  18B5  30FF               	movlw	255
 13431  18B6  3FC0               	movwi [0]fsr1
 13432  18B7  30FF               	movlw	255
 13433  18B8  3FC1               	movwi [1]fsr1
 13434  18B9  3001               	movlw	1
 13435  18BA  00A0               	movwf	??_setLoad_AH_AL_Restore
 13436  18BB  0820               	movf	??_setLoad_AH_AL_Restore,w
 13437  18BC  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13438  18BD  289E               	goto	L13
 13439  18BE                     __end_of_setLoad_AH_AL_Restore:	
 13440                           
 13441                           	psect	text73
 13442  24C6                     __ptext73:	
 13443 ;; *************** function _LED_Main *****************
 13444 ;; Defined at:
 13445 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;		None               void
 13452 ;; Registers used:
 13453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    6
 13466 ;; This function calls:
 13467 ;;		_setLED_Main
 13468 ;; This function is called by:
 13469 ;;		_main
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function _LED_Main
 13475  24C6                     _LED_Main:	
 13476                           
 13477                           ;LED_B1.c: 54: setLED_Main(1);
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13481  24C6  3001               	movlw	1
 13482  24C7  319B  23EE  31A4   	fcall	_setLED_Main
 13483                           
 13484                           ;LED_B1.c: 57: setLED_Main(2);
 13485  24CA  3002               	movlw	2
 13486  24CB  319B  23EE  31A4   	fcall	_setLED_Main
 13487                           
 13488                           ;LED_B1.c: 63: setLED_Main(99);
 13489  24CE  3063               	movlw	99
 13490  24CF  319B  23EE         	fcall	_setLED_Main
 13491  24D1  0008               	return
 13492  24D2                     __end_of_LED_Main:	
 13493                           
 13494                           	psect	text74
 13495  1BEE                     __ptext74:	
 13496 ;; *************** function _setLED_Main *****************
 13497 ;; Defined at:
 13498 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13499 ;; Parameters:    Size  Location     Type
 13500 ;;  led             1    wreg     unsigned char 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;  led             1    4[BANK0 ] unsigned char 
 13503 ;; Return value:  Size  Location     Type
 13504 ;;		None               void
 13505 ;; Registers used:
 13506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;Total ram usage:        3 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; Hardware stack levels required when called:    5
 13519 ;; This function calls:
 13520 ;;		_LedPointSelect
 13521 ;; This function is called by:
 13522 ;;		_LED_Main
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           
 13527                           ;psect for function _setLED_Main
 13528  1BEE                     _setLED_Main:	
 13529                           
 13530                           ;incstack = 0
 13531                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13532                           ;setLED_Main@led stored from wreg
 13533  1BEE  0020               	movlb	0	; select bank0
 13534  1BEF  00A4               	movwf	setLED_Main@led
 13535                           
 13536                           ;LED_B1.c: 216: LedPointSelect(led);
 13537  1BF0  0824               	movf	setLED_Main@led,w
 13538  1BF1  31A7  27DE  319B   	fcall	_LedPointSelect
 13539                           
 13540                           ;LED_B1.c: 217: if(LED->GO)
 13541  1BF4  0021               	movlb	1	; select bank1
 13542  1BF5  083B               	movf	_LED^(0+128),w
 13543  1BF6  0086               	movwf	6
 13544  1BF7  0187               	clrf	7
 13545  1BF8  1C81               	btfss	1,1
 13546  1BF9  0008               	return
 13547                           
 13548                           ;LED_B1.c: 218: {
 13549                           ;LED_B1.c: 219: LED->Time++;
 13550  1BFA  0A3B               	incf	_LED^(0+128),w
 13551  1BFB  0086               	movwf	6
 13552  1BFC  0187               	clrf	7
 13553  1BFD  3001               	movlw	1
 13554  1BFE  0781               	addwf	1,f
 13555  1BFF  3141               	addfsr 1,1
 13556  1C00  1803               	skipnc
 13557  1C01  0A81               	incf	1,f
 13558                           
 13559                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13560  1C02  0A3B               	incf	_LED^(0+128),w
 13561  1C03  0086               	movwf	6
 13562  1C04  0187               	clrf	7
 13563  1C05  3F40               	moviw [0]fsr1
 13564  1C06  0020               	movlb	0	; select bank0
 13565  1C07  00A2               	movwf	??_setLED_Main
 13566  1C08  3F41               	moviw [1]fsr1
 13567  1C09  00A3               	movwf	??_setLED_Main+1
 13568  1C0A  3000               	movlw	0
 13569  1C0B  0223               	subwf	??_setLED_Main+1,w
 13570  1C0C  3032               	movlw	50
 13571  1C0D  1903               	skipnz
 13572  1C0E  0222               	subwf	??_setLED_Main,w
 13573  1C0F  1C03               	skipc
 13574  1C10  0008               	return
 13575                           
 13576                           ;LED_B1.c: 221: {
 13577                           ;LED_B1.c: 222: LED->Time=0;
 13578  1C11  0021               	movlb	1	; select bank1
 13579  1C12  0A3B               	incf	_LED^(0+128),w
 13580  1C13  0086               	movwf	6
 13581  1C14  0187               	clrf	7
 13582  1C15  3000               	movlw	0
 13583  1C16  3FC0               	movwi [0]fsr1
 13584  1C17  3FC1               	movwi [1]fsr1
 13585                           
 13586                           ;LED_B1.c: 224: if(led == 1)
 13587  1C18  0020               	movlb	0	; select bank0
 13588  1C19  0824               	movf	setLED_Main@led,w
 13589  1C1A  3A01               	xorlw	1
 13590  1C1B  1D03               	skipz
 13591  1C1C  2C20               	goto	l7454
 13592                           
 13593                           ;LED_B1.c: 225: {
 13594                           ;LED_B1.c: 226: RA3=~RA3;
 13595  1C1D  3008               	movlw	8
 13596  1C1E  068C               	xorwf	12,f
 13597                           
 13598                           ;LED_B1.c: 227: }
 13599  1C1F  0008               	return
 13600  1C20                     l7454:	
 13601                           
 13602                           ;LED_B1.c: 230: else if(led == 2)
 13603  1C20  0824               	movf	setLED_Main@led,w
 13604  1C21  3A02               	xorlw	2
 13605  1C22  1D03               	skipz
 13606  1C23  2C27               	goto	l7458
 13607                           
 13608                           ;LED_B1.c: 231: {
 13609                           ;LED_B1.c: 232: RC7=~RC7;
 13610  1C24  3080               	movlw	128
 13611  1C25  068E               	xorwf	14,f
 13612                           
 13613                           ;LED_B1.c: 233: }
 13614  1C26  0008               	return
 13615  1C27                     l7458:	
 13616                           
 13617                           ;LED_B1.c: 242: else if(led == 99)
 13618  1C27  0824               	movf	setLED_Main@led,w
 13619  1C28  3A63               	xorlw	99
 13620  1C29  1D03               	skipz
 13621  1C2A  0008               	return
 13622                           
 13623                           ;LED_B1.c: 243: {
 13624                           ;LED_B1.c: 244: RB5=~RB5;
 13625  1C2B  3020               	movlw	32
 13626  1C2C  068D               	xorwf	13,f
 13627  1C2D  0008               	return
 13628  1C2E                     __end_of_setLED_Main:	
 13629                           
 13630                           	psect	text75
 13631  24BA                     __ptext75:	
 13632 ;; *************** function _LED_Initialization *****************
 13633 ;; Defined at:
 13634 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;		None
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;		None
 13639 ;; Return value:  Size  Location     Type
 13640 ;;		None               void
 13641 ;; Registers used:
 13642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        0 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    7
 13655 ;; This function calls:
 13656 ;;		_setLED_Initialization
 13657 ;; This function is called by:
 13658 ;;		_main
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           
 13663                           ;psect for function _LED_Initialization
 13664  24BA                     _LED_Initialization:	
 13665                           
 13666                           ;LED_B1.c: 38: setLED_Initialization(1);
 13667                           
 13668                           ;incstack = 0
 13669                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13670  24BA  3001               	movlw	1
 13671  24BB  31A5  25C0  31A4   	fcall	_setLED_Initialization
 13672                           
 13673                           ;LED_B1.c: 41: setLED_Initialization(2);
 13674  24BE  3002               	movlw	2
 13675  24BF  31A5  25C0  31A4   	fcall	_setLED_Initialization
 13676                           
 13677                           ;LED_B1.c: 47: setLED_Initialization(99);
 13678  24C2  3063               	movlw	99
 13679  24C3  31A5  25C0         	fcall	_setLED_Initialization
 13680  24C5  0008               	return
 13681  24C6                     __end_of_LED_Initialization:	
 13682                           
 13683                           	psect	text76
 13684  25C0                     __ptext76:	
 13685 ;; *************** function _setLED_Initialization *****************
 13686 ;; Defined at:
 13687 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13688 ;; Parameters:    Size  Location     Type
 13689 ;;  led             1    wreg     unsigned char 
 13690 ;; Auto vars:     Size  Location     Type
 13691 ;;  led             1    4[BANK0 ] unsigned char 
 13692 ;; Return value:  Size  Location     Type
 13693 ;;		None               void
 13694 ;; Registers used:
 13695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13696 ;; Tracked objects:
 13697 ;;		On entry : 0/0
 13698 ;;		On exit  : 0/0
 13699 ;;		Unchanged: 0/0
 13700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;Total ram usage:        1 bytes
 13706 ;; Hardware stack levels used:    1
 13707 ;; Hardware stack levels required when called:    6
 13708 ;; This function calls:
 13709 ;;		_LedPointSelect
 13710 ;;		_setLED
 13711 ;; This function is called by:
 13712 ;;		_LED_Initialization
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           
 13717                           ;psect for function _setLED_Initialization
 13718  25C0                     _setLED_Initialization:	
 13719                           
 13720                           ;incstack = 0
 13721                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13722                           ;setLED_Initialization@led stored from wreg
 13723  25C0  0020               	movlb	0	; select bank0
 13724  25C1  00A4               	movwf	setLED_Initialization@led
 13725                           
 13726                           ;LED_B1.c: 69: LedPointSelect(led);
 13727  25C2  0824               	movf	setLED_Initialization@led,w
 13728  25C3  31A7  27DE  31A5   	fcall	_LedPointSelect
 13729                           
 13730                           ;LED_B1.c: 70: LED->Enable=1;
 13731  25C6  0021               	movlb	1	; select bank1
 13732  25C7  083B               	movf	_LED^(0+128),w
 13733  25C8  0086               	movwf	6
 13734  25C9  0187               	clrf	7
 13735  25CA  1401               	bsf	1,0
 13736                           
 13737                           ;LED_B1.c: 71: setLED(led,0);
 13738  25CB  0020               	movlb	0	; select bank0
 13739  25CC  01A2               	clrf	setLED@command
 13740  25CD  0824               	movf	setLED_Initialization@led,w
 13741  25CE  319F  2741         	fcall	_setLED
 13742  25D0  0008               	return
 13743  25D1                     __end_of_setLED_Initialization:	
 13744                           
 13745                           	psect	text77
 13746  1DBC                     __ptext77:	
 13747 ;; *************** function _Flash_Memory_Main *****************
 13748 ;; Defined at:
 13749 ;;		line 474 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;		None
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;		None
 13754 ;; Return value:  Size  Location     Type
 13755 ;;		None               void
 13756 ;; Registers used:
 13757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;Total ram usage:        0 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; Hardware stack levels required when called:    7
 13770 ;; This function calls:
 13771 ;;		_Flash_Memory_Modify
 13772 ;; This function is called by:
 13773 ;;		_main
 13774 ;; This function uses a non-reentrant model
 13775 ;;
 13776                           
 13777                           
 13778                           ;psect for function _Flash_Memory_Main
 13779  1DBC                     _Flash_Memory_Main:	
 13780                           
 13781                           ;MCU_16f1518_B1.c: 476: if(Memory->GO)
 13782                           
 13783                           ;incstack = 0
 13784                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13785  1DBC  0021               	movlb	1	; select bank1
 13786  1DBD  0868               	movf	_Memory^(0+128),w
 13787  1DBE  3E22               	addlw	34
 13788  1DBF  0086               	movwf	6
 13789  1DC0  3002               	movlw	2	; select bank4/5
 13790  1DC1  0087               	movwf	7
 13791  1DC2  1C81               	btfss	1,1
 13792  1DC3  0008               	return
 13793                           
 13794                           ;MCU_16f1518_B1.c: 477: {
 13795                           ;MCU_16f1518_B1.c: 478: if(Memory->Modify)
 13796  1DC4  0868               	movf	_Memory^(0+128),w
 13797  1DC5  3E22               	addlw	34
 13798  1DC6  0086               	movwf	6
 13799  1DC7  3002               	movlw	2	; select bank4/5
 13800  1DC8  0087               	movwf	7
 13801  1DC9  1C01               	btfss	1,0
 13802  1DCA  2DF9               	goto	l9886
 13803                           
 13804                           ;MCU_16f1518_B1.c: 479: {
 13805                           ;MCU_16f1518_B1.c: 480: Memory->Time++;
 13806  1DCB  0868               	movf	_Memory^(0+128),w
 13807  1DCC  3E23               	addlw	35
 13808  1DCD  0086               	movwf	6
 13809  1DCE  3002               	movlw	2	; select bank4/5
 13810  1DCF  0087               	movwf	7
 13811  1DD0  3001               	movlw	1
 13812  1DD1  0781               	addwf	1,f
 13813  1DD2  3141               	addfsr 1,1
 13814  1DD3  1803               	skipnc
 13815  1DD4  0A81               	incf	1,f
 13816                           
 13817                           ;MCU_16f1518_B1.c: 481: if(Memory->Time == 25)
 13818  1DD5  0868               	movf	_Memory^(0+128),w
 13819  1DD6  3E23               	addlw	35
 13820  1DD7  0086               	movwf	6
 13821  1DD8  3002               	movlw	2	; select bank4/5
 13822  1DD9  0087               	movwf	7
 13823  1DDA  3F40               	moviw [0]fsr1
 13824  1DDB  3A19               	xorlw	25
 13825  1DDC  1D03               	skipz
 13826  1DDD  2DE0               	goto	u10015
 13827  1DDE  3F41               	moviw [1]fsr1
 13828  1DDF  3A00               	xorlw	0
 13829  1DE0                     u10015:	
 13830  1DE0  1D03               	skipz
 13831  1DE1  0008               	return
 13832                           
 13833                           ;MCU_16f1518_B1.c: 482: {
 13834                           ;MCU_16f1518_B1.c: 483: Memory->Time=0;
 13835  1DE2  0868               	movf	_Memory^(0+128),w
 13836  1DE3  3E23               	addlw	35
 13837  1DE4  0086               	movwf	6
 13838  1DE5  3002               	movlw	2	; select bank4/5
 13839  1DE6  0087               	movwf	7
 13840  1DE7  3000               	movlw	0
 13841  1DE8  3FC0               	movwi [0]fsr1
 13842  1DE9  3FC1               	movwi [1]fsr1
 13843                           
 13844                           ;MCU_16f1518_B1.c: 484: Memory->Modify=0;
 13845  1DEA  0868               	movf	_Memory^(0+128),w
 13846  1DEB  3E22               	addlw	34
 13847  1DEC  0086               	movwf	6
 13848  1DED  3002               	movlw	2	; select bank4/5
 13849  1DEE  0087               	movwf	7
 13850  1DEF  1001               	bcf	1,0
 13851                           
 13852                           ;MCU_16f1518_B1.c: 485: Memory->GO=0;
 13853  1DF0  0868               	movf	_Memory^(0+128),w
 13854  1DF1  3E22               	addlw	34
 13855  1DF2  0086               	movwf	6
 13856  1DF3  3002               	movlw	2	; select bank4/5
 13857  1DF4  0087               	movwf	7
 13858  1DF5  1081               	bcf	1,1
 13859                           
 13860                           ;MCU_16f1518_B1.c: 486: Flash_Memory_Modify();
 13861  1DF6  3191  2191         	fcall	_Flash_Memory_Modify
 13862                           
 13863                           ;MCU_16f1518_B1.c: 488: }
 13864                           ;MCU_16f1518_B1.c: 489: }
 13865  1DF8  0008               	return
 13866  1DF9                     l9886:	
 13867                           
 13868                           ;MCU_16f1518_B1.c: 490: else
 13869                           ;MCU_16f1518_B1.c: 491: {
 13870                           ;MCU_16f1518_B1.c: 492: Memory->GO=0;
 13871  1DF9  0021               	movlb	1	; select bank1
 13872  1DFA  0868               	movf	_Memory^(0+128),w
 13873  1DFB  3E22               	addlw	34
 13874  1DFC  0086               	movwf	6
 13875  1DFD  3002               	movlw	2	; select bank4/5
 13876  1DFE  0087               	movwf	7
 13877  1DFF  1081               	bcf	1,1
 13878  1E00  0008               	return
 13879  1E01                     __end_of_Flash_Memory_Main:	
 13880                           
 13881                           	psect	text78
 13882  1191                     __ptext78:	
 13883 ;; *************** function _Flash_Memory_Modify *****************
 13884 ;; Defined at:
 13885 ;;		line 549 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;		None
 13888 ;; Auto vars:     Size  Location     Type
 13889 ;;  i               1    6[BANK0 ] unsigned char 
 13890 ;; Return value:  Size  Location     Type
 13891 ;;		None               void
 13892 ;; Registers used:
 13893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13894 ;; Tracked objects:
 13895 ;;		On entry : 0/0
 13896 ;;		On exit  : 0/0
 13897 ;;		Unchanged: 0/0
 13898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;Total ram usage:        3 bytes
 13904 ;; Hardware stack levels used:    1
 13905 ;; Hardware stack levels required when called:    6
 13906 ;; This function calls:
 13907 ;;		_Flash_Memory_Erasing
 13908 ;;		_Flash_Memory_Read
 13909 ;;		_Flash_Memory_Write
 13910 ;; This function is called by:
 13911 ;;		_Flash_Memory_Main
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           
 13916                           ;psect for function _Flash_Memory_Modify
 13917  1191                     _Flash_Memory_Modify:	
 13918                           
 13919                           ;MCU_16f1518_B1.c: 551: char i;
 13920                           ;MCU_16f1518_B1.c: 552: for(i=0;i<32;i++)
 13921                           
 13922                           ;incstack = 0
 13923                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13924  1191  0020               	movlb	0	; select bank0
 13925  1192  01A6               	clrf	Flash_Memory_Modify@i
 13926  1193  3020               	movlw	32
 13927  1194  0226               	subwf	Flash_Memory_Modify@i,w
 13928  1195  1803               	btfsc	3,0
 13929  1196  29B0               	goto	l9396
 13930  1197                     l9390:	
 13931                           
 13932                           ;MCU_16f1518_B1.c: 553: {
 13933                           ;MCU_16f1518_B1.c: 554: Memory->Data[i]=Flash_Memory_Read(i);
 13934  1197  0826               	movf	Flash_Memory_Modify@i,w
 13935  1198  31A6  26C6  3191   	fcall	_Flash_Memory_Read
 13936  119B  0020               	movlb	0	; select bank0
 13937  119C  00A4               	movwf	??_Flash_Memory_Modify
 13938  119D  0826               	movf	Flash_Memory_Modify@i,w
 13939  119E  0021               	movlb	1	; select bank1
 13940  119F  0768               	addwf	_Memory^(0+128),w
 13941  11A0  0020               	movlb	0	; select bank0
 13942  11A1  00A5               	movwf	??_Flash_Memory_Modify+1
 13943  11A2  0825               	movf	??_Flash_Memory_Modify+1,w
 13944  11A3  0086               	movwf	6
 13945  11A4  3002               	movlw	2	; select bank4/5
 13946  11A5  0087               	movwf	7
 13947  11A6  0824               	movf	??_Flash_Memory_Modify,w
 13948  11A7  0081               	movwf	1
 13949  11A8  3001               	movlw	1
 13950  11A9  00A4               	movwf	??_Flash_Memory_Modify
 13951  11AA  0824               	movf	??_Flash_Memory_Modify,w
 13952  11AB  07A6               	addwf	Flash_Memory_Modify@i,f
 13953  11AC  3020               	movlw	32
 13954  11AD  0226               	subwf	Flash_Memory_Modify@i,w
 13955  11AE  1C03               	skipc
 13956  11AF  2997               	goto	l9390
 13957  11B0                     l9396:	
 13958                           
 13959                           ;MCU_16f1518_B1.c: 555: }
 13960                           ;MCU_16f1518_B1.c: 556: Memory->Data[0]=Product->Data[12];
 13961  11B0  086F               	movf	_Product,w
 13962  11B1  3E0C               	addlw	12
 13963  11B2  0086               	movwf	6
 13964  11B3  3001               	movlw	1	; select bank2/3
 13965  11B4  0087               	movwf	7
 13966  11B5  0801               	movf	1,w
 13967  11B6  00A4               	movwf	??_Flash_Memory_Modify
 13968  11B7  0021               	movlb	1	; select bank1
 13969  11B8  0868               	movf	_Memory^(0+128),w
 13970  11B9  0086               	movwf	6
 13971  11BA  3002               	movlw	2	; select bank4/5
 13972  11BB  0087               	movwf	7
 13973  11BC  0020               	movlb	0	; select bank0
 13974  11BD  0824               	movf	??_Flash_Memory_Modify,w
 13975  11BE  0081               	movwf	1
 13976                           
 13977                           ;MCU_16f1518_B1.c: 557: Memory->Data[1]=Product->Data[13];
 13978  11BF  086F               	movf	_Product,w
 13979  11C0  3E0D               	addlw	13
 13980  11C1  0086               	movwf	6
 13981  11C2  3001               	movlw	1	; select bank2/3
 13982  11C3  0087               	movwf	7
 13983  11C4  0801               	movf	1,w
 13984  11C5  00A4               	movwf	??_Flash_Memory_Modify
 13985  11C6  0021               	movlb	1	; select bank1
 13986  11C7  0A68               	incf	_Memory^(0+128),w
 13987  11C8  0086               	movwf	6
 13988  11C9  3002               	movlw	2	; select bank4/5
 13989  11CA  0087               	movwf	7
 13990  11CB  0020               	movlb	0	; select bank0
 13991  11CC  0824               	movf	??_Flash_Memory_Modify,w
 13992  11CD  0081               	movwf	1
 13993                           
 13994                           ;MCU_16f1518_B1.c: 558: Memory->Data[2]=Product->Data[14];
 13995  11CE  086F               	movf	_Product,w
 13996  11CF  3E0E               	addlw	14
 13997  11D0  0086               	movwf	6
 13998  11D1  3001               	movlw	1	; select bank2/3
 13999  11D2  0087               	movwf	7
 14000  11D3  0801               	movf	1,w
 14001  11D4  00A4               	movwf	??_Flash_Memory_Modify
 14002  11D5  0021               	movlb	1	; select bank1
 14003  11D6  0868               	movf	_Memory^(0+128),w
 14004  11D7  3E02               	addlw	2
 14005  11D8  0086               	movwf	6
 14006  11D9  3002               	movlw	2	; select bank4/5
 14007  11DA  0087               	movwf	7
 14008  11DB  0020               	movlb	0	; select bank0
 14009  11DC  0824               	movf	??_Flash_Memory_Modify,w
 14010  11DD  0081               	movwf	1
 14011                           
 14012                           ;MCU_16f1518_B1.c: 564: if(Memory->LoopSave)
 14013  11DE  0021               	movlb	1	; select bank1
 14014  11DF  0868               	movf	_Memory^(0+128),w
 14015  11E0  3E22               	addlw	34
 14016  11E1  0086               	movwf	6
 14017  11E2  3002               	movlw	2	; select bank4/5
 14018  11E3  0087               	movwf	7
 14019  11E4  1D01               	btfss	1,2
 14020  11E5  29F7               	goto	l9400
 14021                           
 14022                           ;MCU_16f1518_B1.c: 565: {
 14023                           ;MCU_16f1518_B1.c: 566: Memory->LoopSave=0;
 14024  11E6  0868               	movf	_Memory^(0+128),w
 14025  11E7  3E22               	addlw	34
 14026  11E8  0086               	movwf	6
 14027  11E9  3002               	movlw	2	; select bank4/5
 14028  11EA  0087               	movwf	7
 14029  11EB  1101               	bcf	1,2
 14030                           
 14031                           ;MCU_16f1518_B1.c: 567: TMain->FirstOpen=0;
 14032  11EC  0869               	movf	_TMain^(0+128),w
 14033  11ED  0086               	movwf	6
 14034  11EE  3001               	movlw	1	; select bank2/3
 14035  11EF  0087               	movwf	7
 14036  11F0  1281               	bcf	1,5
 14037                           
 14038                           ;MCU_16f1518_B1.c: 568: TMain->First=0;
 14039  11F1  0869               	movf	_TMain^(0+128),w
 14040  11F2  3E03               	addlw	3
 14041  11F3  0086               	movwf	6
 14042  11F4  3001               	movlw	1	; select bank2/3
 14043  11F5  0087               	movwf	7
 14044  11F6  1081               	bcf	1,1
 14045  11F7                     l9400:	
 14046                           
 14047                           ;MCU_16f1518_B1.c: 570: }
 14048                           ;MCU_16f1518_B1.c: 571: GIE=0;
 14049  11F7  138B               	bcf	11,7	;volatile
 14050                           
 14051                           ;MCU_16f1518_B1.c: 572: Flash_Memory_Erasing();
 14052  11F8  31A4  24AE  3191   	fcall	_Flash_Memory_Erasing
 14053                           
 14054                           ;MCU_16f1518_B1.c: 573: Flash_Memory_Write();
 14055  11FB  319A  22E5         	fcall	_Flash_Memory_Write
 14056                           
 14057                           ;MCU_16f1518_B1.c: 574: GIE=1;
 14058  11FD  178B               	bsf	11,7	;volatile
 14059  11FE  0008               	return
 14060  11FF                     __end_of_Flash_Memory_Modify:	
 14061                           
 14062                           	psect	text79
 14063  24AE                     __ptext79:	
 14064 ;; *************** function _Flash_Memory_Erasing *****************
 14065 ;; Defined at:
 14066 ;;		line 538 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14067 ;; Parameters:    Size  Location     Type
 14068 ;;		None
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;		None
 14071 ;; Return value:  Size  Location     Type
 14072 ;;		None               void
 14073 ;; Registers used:
 14074 ;;		wreg, status,2, status,0, pclath, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;Total ram usage:        0 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    5
 14087 ;; This function calls:
 14088 ;;		_Flash_Memory_Unlock
 14089 ;; This function is called by:
 14090 ;;		_Flash_Memory_Modify
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           
 14095                           ;psect for function _Flash_Memory_Erasing
 14096  24AE                     _Flash_Memory_Erasing:	
 14097                           
 14098                           ;MCU_16f1518_B1.c: 540: CFGS=0;
 14099                           
 14100                           ;incstack = 0
 14101                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14102  24AE  0023               	movlb	3	; select bank3
 14103  24AF  1315               	bcf	21,6	;volatile
 14104                           
 14105                           ;MCU_16f1518_B1.c: 541: PMADRH=0x30;
 14106  24B0  3030               	movlw	48
 14107  24B1  0092               	movwf	18	;volatile
 14108                           
 14109                           ;MCU_16f1518_B1.c: 542: PMADRL=0x00;
 14110  24B2  0191               	clrf	17	;volatile
 14111                           
 14112                           ;MCU_16f1518_B1.c: 543: FREE=1;
 14113  24B3  1615               	bsf	21,4	;volatile
 14114                           
 14115                           ;MCU_16f1518_B1.c: 544: WREN=1;
 14116  24B4  1515               	bsf	21,2	;volatile
 14117                           
 14118                           ;MCU_16f1518_B1.c: 545: Flash_Memory_Unlock();
 14119  24B5  31A4  240B         	fcall	_Flash_Memory_Unlock
 14120                           
 14121                           ;MCU_16f1518_B1.c: 546: WREN=0;
 14122  24B7  0023               	movlb	3	; select bank3
 14123  24B8  1115               	bcf	21,2	;volatile
 14124  24B9  0008               	return
 14125  24BA                     __end_of_Flash_Memory_Erasing:	
 14126                           
 14127                           	psect	text80
 14128  0CB7                     __ptext80:	
 14129 ;; *************** function _Flash_Memory_Initialization *****************
 14130 ;; Defined at:
 14131 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14132 ;; Parameters:    Size  Location     Type
 14133 ;;		None
 14134 ;; Auto vars:     Size  Location     Type
 14135 ;;  i               1   62[BANK0 ] unsigned char 
 14136 ;; Return value:  Size  Location     Type
 14137 ;;		None               void
 14138 ;; Registers used:
 14139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14140 ;; Tracked objects:
 14141 ;;		On entry : 0/0
 14142 ;;		On exit  : 0/0
 14143 ;;		Unchanged: 0/0
 14144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14149 ;;Total ram usage:        2 bytes
 14150 ;; Hardware stack levels used:    1
 14151 ;; Hardware stack levels required when called:    7
 14152 ;; This function calls:
 14153 ;;		_Flash_Memory_Read
 14154 ;;		_Flash_Memory_Write
 14155 ;;		_setPercentValue
 14156 ;; This function is called by:
 14157 ;;		_main
 14158 ;; This function uses a non-reentrant model
 14159 ;;
 14160                           
 14161                           
 14162                           ;psect for function _Flash_Memory_Initialization
 14163  0CB7                     _Flash_Memory_Initialization:	
 14164                           
 14165                           ;MCU_16f1518_B1.c: 431: char i;
 14166                           ;MCU_16f1518_B1.c: 432: if(Flash_Memory_Read(31) == 0xaa)
 14167                           
 14168                           ;incstack = 0
 14169                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14170  0CB7  301F               	movlw	31
 14171  0CB8  31A6  26C6  318C   	fcall	_Flash_Memory_Read
 14172  0CBB  3AAA               	xorlw	170
 14173  0CBC  1D03               	skipz
 14174  0CBD  2D30               	goto	l9744
 14175                           
 14176                           ;MCU_16f1518_B1.c: 433: {
 14177                           ;MCU_16f1518_B1.c: 434: Product->Data[12]=Flash_Memory_Read(0);
 14178  0CBE  3000               	movlw	0
 14179  0CBF  31A6  26C6  318C   	fcall	_Flash_Memory_Read
 14180  0CC2  0020               	movlb	0	; select bank0
 14181  0CC3  00DD               	movwf	??_Flash_Memory_Initialization
 14182  0CC4  086F               	movf	_Product,w
 14183  0CC5  3E0C               	addlw	12
 14184  0CC6  0086               	movwf	6
 14185  0CC7  3001               	movlw	1	; select bank2/3
 14186  0CC8  0087               	movwf	7
 14187  0CC9  085D               	movf	??_Flash_Memory_Initialization,w
 14188  0CCA  0081               	movwf	1
 14189                           
 14190                           ;MCU_16f1518_B1.c: 435: Product->Data[13]=Flash_Memory_Read(1);
 14191  0CCB  3001               	movlw	1
 14192  0CCC  31A6  26C6  318C   	fcall	_Flash_Memory_Read
 14193  0CCF  0020               	movlb	0	; select bank0
 14194  0CD0  00DD               	movwf	??_Flash_Memory_Initialization
 14195  0CD1  086F               	movf	_Product,w
 14196  0CD2  3E0D               	addlw	13
 14197  0CD3  0086               	movwf	6
 14198  0CD4  3001               	movlw	1	; select bank2/3
 14199  0CD5  0087               	movwf	7
 14200  0CD6  085D               	movf	??_Flash_Memory_Initialization,w
 14201  0CD7  0081               	movwf	1
 14202                           
 14203                           ;MCU_16f1518_B1.c: 436: Product->Data[14]=Flash_Memory_Read(2);
 14204  0CD8  3002               	movlw	2
 14205  0CD9  31A6  26C6  318C   	fcall	_Flash_Memory_Read
 14206  0CDC  0020               	movlb	0	; select bank0
 14207  0CDD  00DD               	movwf	??_Flash_Memory_Initialization
 14208  0CDE  086F               	movf	_Product,w
 14209  0CDF  3E0E               	addlw	14
 14210  0CE0  0086               	movwf	6
 14211  0CE1  3001               	movlw	1	; select bank2/3
 14212  0CE2  0087               	movwf	7
 14213  0CE3  085D               	movf	??_Flash_Memory_Initialization,w
 14214  0CE4  0081               	movwf	1
 14215                           
 14216                           ;MCU_16f1518_B1.c: 442: i=setPercentValue(((char)((100-55)*1.5)));
 14217  0CE5  3043               	movlw	67
 14218  0CE6  319E  2601  318C   	fcall	_setPercentValue
 14219  0CE9  0020               	movlb	0	; select bank0
 14220  0CEA  00DD               	movwf	??_Flash_Memory_Initialization
 14221  0CEB  085D               	movf	??_Flash_Memory_Initialization,w
 14222  0CEC  00DE               	movwf	Flash_Memory_Initialization@i
 14223                           
 14224                           ;MCU_16f1518_B1.c: 443: Product->Data[21]=i;
 14225  0CED  085E               	movf	Flash_Memory_Initialization@i,w
 14226  0CEE  00DD               	movwf	??_Flash_Memory_Initialization
 14227  0CEF  086F               	movf	_Product,w
 14228  0CF0  3E15               	addlw	21
 14229  0CF1  0086               	movwf	6
 14230  0CF2  3001               	movlw	1	; select bank2/3
 14231  0CF3  0087               	movwf	7
 14232  0CF4  085D               	movf	??_Flash_Memory_Initialization,w
 14233  0CF5  0081               	movwf	1
 14234                           
 14235                           ;MCU_16f1518_B1.c: 444: Product->Data[22]=i;
 14236  0CF6  085E               	movf	Flash_Memory_Initialization@i,w
 14237  0CF7  00DD               	movwf	??_Flash_Memory_Initialization
 14238  0CF8  086F               	movf	_Product,w
 14239  0CF9  3E16               	addlw	22
 14240  0CFA  0086               	movwf	6
 14241  0CFB  3001               	movlw	1	; select bank2/3
 14242  0CFC  0087               	movwf	7
 14243  0CFD  085D               	movf	??_Flash_Memory_Initialization,w
 14244  0CFE  0081               	movwf	1
 14245                           
 14246                           ;MCU_16f1518_B1.c: 445: Product->Data[23]=i;
 14247  0CFF  085E               	movf	Flash_Memory_Initialization@i,w
 14248  0D00  00DD               	movwf	??_Flash_Memory_Initialization
 14249  0D01  086F               	movf	_Product,w
 14250  0D02  3E17               	addlw	23
 14251  0D03  0086               	movwf	6
 14252  0D04  3001               	movlw	1	; select bank2/3
 14253  0D05  0087               	movwf	7
 14254  0D06  085D               	movf	??_Flash_Memory_Initialization,w
 14255  0D07  0081               	movwf	1
 14256                           
 14257                           ;MCU_16f1518_B1.c: 447: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 14258  0D08  086F               	movf	_Product,w
 14259  0D09  3E0C               	addlw	12
 14260  0D0A  0086               	movwf	6
 14261  0D0B  3001               	movlw	1	; select bank2/3
 14262  0D0C  0087               	movwf	7
 14263  0D0D  0801               	movf	1,w
 14264  0D0E  3AFF               	xorlw	255
 14265  0D0F  1D03               	skipz
 14266  0D10  0008               	return
 14267  0D11  086F               	movf	_Product,w
 14268  0D12  3E0D               	addlw	13
 14269  0D13  0086               	movwf	6
 14270  0D14  3001               	movlw	1	; select bank2/3
 14271  0D15  0087               	movwf	7
 14272  0D16  0801               	movf	1,w
 14273  0D17  3AFF               	xorlw	255
 14274  0D18  1D03               	skipz
 14275  0D19  0008               	return
 14276  0D1A  086F               	movf	_Product,w
 14277  0D1B  3E0E               	addlw	14
 14278  0D1C  0086               	movwf	6
 14279  0D1D  3001               	movlw	1	; select bank2/3
 14280  0D1E  0087               	movwf	7
 14281  0D1F  0801               	movf	1,w
 14282  0D20  3AFF               	xorlw	255
 14283  0D21  1D03               	skipz
 14284  0D22  0008               	return
 14285                           
 14286                           ;MCU_16f1518_B1.c: 448: {
 14287                           ;MCU_16f1518_B1.c: 449: TMain->FirstOpen=1;
 14288  0D23  0021               	movlb	1	; select bank1
 14289  0D24  0869               	movf	_TMain^(0+128),w
 14290  0D25  0086               	movwf	6
 14291  0D26  3001               	movlw	1	; select bank2/3
 14292  0D27  0087               	movwf	7
 14293  0D28  1681               	bsf	1,5
 14294                           
 14295                           ;MCU_16f1518_B1.c: 450: TMain->First=1;
 14296  0D29  0869               	movf	_TMain^(0+128),w
 14297  0D2A  3E03               	addlw	3
 14298  0D2B  0086               	movwf	6
 14299  0D2C  3001               	movlw	1	; select bank2/3
 14300  0D2D  0087               	movwf	7
 14301  0D2E  1481               	bsf	1,1
 14302                           
 14303                           ;MCU_16f1518_B1.c: 451: }
 14304                           ;MCU_16f1518_B1.c: 452: }
 14305  0D2F  0008               	return
 14306  0D30                     l9744:	
 14307                           
 14308                           ;MCU_16f1518_B1.c: 453: else
 14309                           ;MCU_16f1518_B1.c: 454: {
 14310                           ;MCU_16f1518_B1.c: 455: i=setPercentValue(((char)((100-55)*1.5)));
 14311  0D30  3043               	movlw	67
 14312  0D31  319E  2601  318C   	fcall	_setPercentValue
 14313  0D34  0020               	movlb	0	; select bank0
 14314  0D35  00DD               	movwf	??_Flash_Memory_Initialization
 14315  0D36  085D               	movf	??_Flash_Memory_Initialization,w
 14316  0D37  00DE               	movwf	Flash_Memory_Initialization@i
 14317                           
 14318                           ;MCU_16f1518_B1.c: 456: Memory->Data[0]=0xff;
 14319  0D38  30FF               	movlw	255
 14320  0D39  00DD               	movwf	??_Flash_Memory_Initialization
 14321  0D3A  0021               	movlb	1	; select bank1
 14322  0D3B  0868               	movf	_Memory^(0+128),w
 14323  0D3C  0086               	movwf	6
 14324  0D3D  3002               	movlw	2	; select bank4/5
 14325  0D3E  0087               	movwf	7
 14326  0D3F  0020               	movlb	0	; select bank0
 14327  0D40  085D               	movf	??_Flash_Memory_Initialization,w
 14328  0D41  0081               	movwf	1
 14329                           
 14330                           ;MCU_16f1518_B1.c: 457: Memory->Data[1]=0xff;
 14331  0D42  30FF               	movlw	255
 14332  0D43  00DD               	movwf	??_Flash_Memory_Initialization
 14333  0D44  0021               	movlb	1	; select bank1
 14334  0D45  0A68               	incf	_Memory^(0+128),w
 14335  0D46  0086               	movwf	6
 14336  0D47  3002               	movlw	2	; select bank4/5
 14337  0D48  0087               	movwf	7
 14338  0D49  0020               	movlb	0	; select bank0
 14339  0D4A  085D               	movf	??_Flash_Memory_Initialization,w
 14340  0D4B  0081               	movwf	1
 14341                           
 14342                           ;MCU_16f1518_B1.c: 458: Memory->Data[2]=0xff;
 14343  0D4C  30FF               	movlw	255
 14344  0D4D  00DD               	movwf	??_Flash_Memory_Initialization
 14345  0D4E  0021               	movlb	1	; select bank1
 14346  0D4F  0868               	movf	_Memory^(0+128),w
 14347  0D50  3E02               	addlw	2
 14348  0D51  0086               	movwf	6
 14349  0D52  3002               	movlw	2	; select bank4/5
 14350  0D53  0087               	movwf	7
 14351  0D54  0020               	movlb	0	; select bank0
 14352  0D55  085D               	movf	??_Flash_Memory_Initialization,w
 14353  0D56  0081               	movwf	1
 14354                           
 14355                           ;MCU_16f1518_B1.c: 459: Memory->Data[3]=0xff;
 14356  0D57  30FF               	movlw	255
 14357  0D58  00DD               	movwf	??_Flash_Memory_Initialization
 14358  0D59  0021               	movlb	1	; select bank1
 14359  0D5A  0868               	movf	_Memory^(0+128),w
 14360  0D5B  3E03               	addlw	3
 14361  0D5C  0086               	movwf	6
 14362  0D5D  3002               	movlw	2	; select bank4/5
 14363  0D5E  0087               	movwf	7
 14364  0D5F  0020               	movlb	0	; select bank0
 14365  0D60  085D               	movf	??_Flash_Memory_Initialization,w
 14366  0D61  0081               	movwf	1
 14367                           
 14368                           ;MCU_16f1518_B1.c: 460: Memory->Data[4]=0xff;
 14369  0D62  30FF               	movlw	255
 14370  0D63  00DD               	movwf	??_Flash_Memory_Initialization
 14371  0D64  0021               	movlb	1	; select bank1
 14372  0D65  0868               	movf	_Memory^(0+128),w
 14373  0D66  3E04               	addlw	4
 14374  0D67  0086               	movwf	6
 14375  0D68  3002               	movlw	2	; select bank4/5
 14376  0D69  0087               	movwf	7
 14377  0D6A  0020               	movlb	0	; select bank0
 14378  0D6B  085D               	movf	??_Flash_Memory_Initialization,w
 14379  0D6C  0081               	movwf	1
 14380                           
 14381                           ;MCU_16f1518_B1.c: 461: Memory->Data[5]=0xff;
 14382  0D6D  30FF               	movlw	255
 14383  0D6E  00DD               	movwf	??_Flash_Memory_Initialization
 14384  0D6F  0021               	movlb	1	; select bank1
 14385  0D70  0868               	movf	_Memory^(0+128),w
 14386  0D71  3E05               	addlw	5
 14387  0D72  0086               	movwf	6
 14388  0D73  3002               	movlw	2	; select bank4/5
 14389  0D74  0087               	movwf	7
 14390  0D75  0020               	movlb	0	; select bank0
 14391  0D76  085D               	movf	??_Flash_Memory_Initialization,w
 14392  0D77  0081               	movwf	1
 14393                           
 14394                           ;MCU_16f1518_B1.c: 462: Memory->Data[31]=0xaa;
 14395  0D78  30AA               	movlw	170
 14396  0D79  00DD               	movwf	??_Flash_Memory_Initialization
 14397  0D7A  0021               	movlb	1	; select bank1
 14398  0D7B  0868               	movf	_Memory^(0+128),w
 14399  0D7C  3E1F               	addlw	31
 14400  0D7D  0086               	movwf	6
 14401  0D7E  3002               	movlw	2	; select bank4/5
 14402  0D7F  0087               	movwf	7
 14403  0D80  0020               	movlb	0	; select bank0
 14404  0D81  085D               	movf	??_Flash_Memory_Initialization,w
 14405  0D82  0081               	movwf	1
 14406                           
 14407                           ;MCU_16f1518_B1.c: 463: Product->Data[21]=i;
 14408  0D83  085E               	movf	Flash_Memory_Initialization@i,w
 14409  0D84  00DD               	movwf	??_Flash_Memory_Initialization
 14410  0D85  086F               	movf	_Product,w
 14411  0D86  3E15               	addlw	21
 14412  0D87  0086               	movwf	6
 14413  0D88  3001               	movlw	1	; select bank2/3
 14414  0D89  0087               	movwf	7
 14415  0D8A  085D               	movf	??_Flash_Memory_Initialization,w
 14416  0D8B  0081               	movwf	1
 14417                           
 14418                           ;MCU_16f1518_B1.c: 464: Product->Data[22]=i;
 14419  0D8C  085E               	movf	Flash_Memory_Initialization@i,w
 14420  0D8D  00DD               	movwf	??_Flash_Memory_Initialization
 14421  0D8E  086F               	movf	_Product,w
 14422  0D8F  3E16               	addlw	22
 14423  0D90  0086               	movwf	6
 14424  0D91  3001               	movlw	1	; select bank2/3
 14425  0D92  0087               	movwf	7
 14426  0D93  085D               	movf	??_Flash_Memory_Initialization,w
 14427  0D94  0081               	movwf	1
 14428                           
 14429                           ;MCU_16f1518_B1.c: 465: Product->Data[23]=i;
 14430  0D95  085E               	movf	Flash_Memory_Initialization@i,w
 14431  0D96  00DD               	movwf	??_Flash_Memory_Initialization
 14432  0D97  086F               	movf	_Product,w
 14433  0D98  3E17               	addlw	23
 14434  0D99  0086               	movwf	6
 14435  0D9A  3001               	movlw	1	; select bank2/3
 14436  0D9B  0087               	movwf	7
 14437  0D9C  085D               	movf	??_Flash_Memory_Initialization,w
 14438  0D9D  0081               	movwf	1
 14439                           
 14440                           ;MCU_16f1518_B1.c: 466: GIE=0;
 14441  0D9E  138B               	bcf	11,7	;volatile
 14442                           
 14443                           ;MCU_16f1518_B1.c: 467: Flash_Memory_Write();
 14444  0D9F  319A  22E5         	fcall	_Flash_Memory_Write
 14445                           
 14446                           ;MCU_16f1518_B1.c: 468: GIE=1;
 14447  0DA1  178B               	bsf	11,7	;volatile
 14448                           
 14449                           ;MCU_16f1518_B1.c: 469: TMain->FirstOpen=1;
 14450  0DA2  0021               	movlb	1	; select bank1
 14451  0DA3  0869               	movf	_TMain^(0+128),w
 14452  0DA4  0086               	movwf	6
 14453  0DA5  3001               	movlw	1	; select bank2/3
 14454  0DA6  0087               	movwf	7
 14455  0DA7  1681               	bsf	1,5
 14456                           
 14457                           ;MCU_16f1518_B1.c: 470: TMain->First=1;
 14458  0DA8  0869               	movf	_TMain^(0+128),w
 14459  0DA9  3E03               	addlw	3
 14460  0DAA  0086               	movwf	6
 14461  0DAB  3001               	movlw	1	; select bank2/3
 14462  0DAC  0087               	movwf	7
 14463  0DAD  1481               	bsf	1,1
 14464  0DAE  0008               	return
 14465  0DAF                     __end_of_Flash_Memory_Initialization:	
 14466                           
 14467                           	psect	text81
 14468  1E01                     __ptext81:	
 14469 ;; *************** function _setPercentValue *****************
 14470 ;; Defined at:
 14471 ;;		line 494 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;  value           1    wreg     unsigned char 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  value           1   57[BANK0 ] unsigned char 
 14476 ;;  i               3   58[BANK0 ] float 
 14477 ;; Return value:  Size  Location     Type
 14478 ;;                  1    wreg      unsigned char 
 14479 ;; Registers used:
 14480 ;;		wreg, status,2, status,0, pclath, cstack
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;Total ram usage:        4 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    6
 14493 ;; This function calls:
 14494 ;;		___awtoft
 14495 ;;		___ftdiv
 14496 ;;		___fttol
 14497 ;; This function is called by:
 14498 ;;		_Flash_Memory_Initialization
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           
 14503                           ;psect for function _setPercentValue
 14504  1E01                     _setPercentValue:	
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14508                           ;setPercentValue@value stored from wreg
 14509  1E01  0020               	movlb	0	; select bank0
 14510  1E02  00D9               	movwf	setPercentValue@value
 14511                           
 14512                           ;Dimmer_B1.c: 497: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 14513  1E03  3000               	movlw	0
 14514  1E04  00DA               	movwf	setPercentValue@i
 14515  1E05  3054               	movlw	84
 14516  1E06  00DB               	movwf	setPercentValue@i+1
 14517  1E07  3042               	movlw	66
 14518  1E08  00DC               	movwf	setPercentValue@i+2
 14519                           
 14520                           ;Dimmer_B1.c: 498: i/=100;
 14521  1E09  3000               	movlw	0
 14522  1E0A  00AE               	movwf	___ftdiv@f2
 14523  1E0B  30C8               	movlw	200
 14524  1E0C  00AF               	movwf	___ftdiv@f2+1
 14525  1E0D  3042               	movlw	66
 14526  1E0E  00B0               	movwf	___ftdiv@f2+2
 14527  1E0F  085A               	movf	setPercentValue@i,w
 14528  1E10  00B1               	movwf	___ftdiv@f1
 14529  1E11  085B               	movf	setPercentValue@i+1,w
 14530  1E12  00B2               	movwf	___ftdiv@f1+1
 14531  1E13  085C               	movf	setPercentValue@i+2,w
 14532  1E14  00B3               	movwf	___ftdiv@f1+2
 14533  1E15  3189  219B  319E   	fcall	___ftdiv
 14534  1E18  0020               	movlb	0	; select bank0
 14535  1E19  082E               	movf	?___ftdiv,w
 14536  1E1A  00DA               	movwf	setPercentValue@i
 14537  1E1B  082F               	movf	?___ftdiv+1,w
 14538  1E1C  00DB               	movwf	setPercentValue@i+1
 14539  1E1D  0830               	movf	?___ftdiv+2,w
 14540  1E1E  00DC               	movwf	setPercentValue@i+2
 14541                           
 14542                           ;Dimmer_B1.c: 499: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 14543  1E1F  0859               	movf	setPercentValue@value,w
 14544  1E20  3EBD               	addlw	189
 14545  1E21  00A8               	movwf	___awtoft@c
 14546  1E22  30FF               	movlw	255
 14547  1E23  1803               	skipnc
 14548  1E24  3000               	movlw	0
 14549  1E25  00A9               	movwf	___awtoft@c+1
 14550  1E26  3198  207A  319E   	fcall	___awtoft
 14551  1E29  0020               	movlb	0	; select bank0
 14552  1E2A  0828               	movf	?___awtoft,w
 14553  1E2B  00B1               	movwf	___ftdiv@f1
 14554  1E2C  0829               	movf	?___awtoft+1,w
 14555  1E2D  00B2               	movwf	___ftdiv@f1+1
 14556  1E2E  082A               	movf	?___awtoft+2,w
 14557  1E2F  00B3               	movwf	___ftdiv@f1+2
 14558  1E30  085A               	movf	setPercentValue@i,w
 14559  1E31  00AE               	movwf	___ftdiv@f2
 14560  1E32  085B               	movf	setPercentValue@i+1,w
 14561  1E33  00AF               	movwf	___ftdiv@f2+1
 14562  1E34  085C               	movf	setPercentValue@i+2,w
 14563  1E35  00B0               	movwf	___ftdiv@f2+2
 14564  1E36  3189  219B  319E   	fcall	___ftdiv
 14565  1E39  0020               	movlb	0	; select bank0
 14566  1E3A  082E               	movf	?___ftdiv,w
 14567  1E3B  00CB               	movwf	___fttol@f1
 14568  1E3C  082F               	movf	?___ftdiv+1,w
 14569  1E3D  00CC               	movwf	___fttol@f1+1
 14570  1E3E  0830               	movf	?___ftdiv+2,w
 14571  1E3F  00CD               	movwf	___fttol@f1+2
 14572  1E40  3195  253A         	fcall	___fttol
 14573  1E42  0020               	movlb	0	; select bank0
 14574  1E43  034B               	decf	?___fttol,w
 14575  1E44  3AFF               	xorlw	255
 14576  1E45  3E64               	addlw	100
 14577  1E46  0008               	return
 14578  1E47                     __end_of_setPercentValue:	
 14579                           
 14580                           	psect	text82
 14581  153A                     __ptext82:	
 14582 ;; *************** function ___fttol *****************
 14583 ;; Defined at:
 14584 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  f1              3   43[BANK0 ] float 
 14587 ;; Auto vars:     Size  Location     Type
 14588 ;;  lval            4   52[BANK0 ] unsigned long 
 14589 ;;  exp1            1   56[BANK0 ] unsigned char 
 14590 ;;  sign1           1   51[BANK0 ] unsigned char 
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  4   43[BANK0 ] long 
 14593 ;; Registers used:
 14594 ;;		wreg, status,2, status,0
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14600 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;Total ram usage:       14 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:    4
 14607 ;; This function calls:
 14608 ;;		Nothing
 14609 ;; This function is called by:
 14610 ;;		_getPercentValue
 14611 ;;		_setPercentValue
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           
 14616                           ;psect for function ___fttol
 14617  153A                     ___fttol:	
 14618                           
 14619                           ;incstack = 0
 14620                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14621  153A  0020               	movlb	0	; select bank0
 14622  153B  084B               	movf	___fttol@f1,w
 14623  153C  00CF               	movwf	??___fttol
 14624  153D  084C               	movf	___fttol@f1+1,w
 14625  153E  00D0               	movwf	??___fttol+1
 14626  153F  084D               	movf	___fttol@f1+2,w
 14627  1540  00D1               	movwf	??___fttol+2
 14628  1541  1003               	clrc
 14629  1542  0D50               	rlf	??___fttol+1,w
 14630  1543  0D51               	rlf	??___fttol+2,w
 14631  1544  00D2               	movwf	??___fttol+3
 14632  1545  0852               	movf	??___fttol+3,w
 14633  1546  00D8               	movwf	___fttol@exp1
 14634  1547  08D8               	movf	___fttol@exp1,f
 14635  1548  1D03               	skipz
 14636  1549  2D53               	goto	l6332
 14637  154A  3000               	movlw	0
 14638  154B  00CE               	movwf	?___fttol+3
 14639  154C  3000               	movlw	0
 14640  154D  00CD               	movwf	?___fttol+2
 14641  154E  3000               	movlw	0
 14642  154F  00CC               	movwf	?___fttol+1
 14643  1550  3000               	movlw	0
 14644  1551  00CB               	movwf	?___fttol
 14645  1552  0008               	return
 14646  1553                     l6332:	
 14647  1553  084B               	movf	___fttol@f1,w
 14648  1554  00CF               	movwf	??___fttol
 14649  1555  084C               	movf	___fttol@f1+1,w
 14650  1556  00D0               	movwf	??___fttol+1
 14651  1557  084D               	movf	___fttol@f1+2,w
 14652  1558  00D1               	movwf	??___fttol+2
 14653  1559  3017               	movlw	23
 14654  155A                     u4655:	
 14655  155A  36D1               	lsrf	??___fttol+2,f
 14656  155B  0CD0               	rrf	??___fttol+1,f
 14657  155C  0CCF               	rrf	??___fttol,f
 14658  155D  0B89               	decfsz	9,f
 14659  155E  2D5A               	goto	u4655
 14660  155F  084F               	movf	??___fttol,w
 14661  1560  00D2               	movwf	??___fttol+3
 14662  1561  0852               	movf	??___fttol+3,w
 14663  1562  00D3               	movwf	___fttol@sign1
 14664  1563  17CC               	bsf	___fttol@f1+1,7
 14665  1564  30FF               	movlw	255
 14666  1565  05CB               	andwf	___fttol@f1,f
 14667  1566  30FF               	movlw	255
 14668  1567  05CC               	andwf	___fttol@f1+1,f
 14669  1568  3000               	movlw	0
 14670  1569  05CD               	andwf	___fttol@f1+2,f
 14671  156A  084B               	movf	___fttol@f1,w
 14672  156B  00D4               	movwf	___fttol@lval
 14673  156C  084C               	movf	___fttol@f1+1,w
 14674  156D  00D5               	movwf	___fttol@lval+1
 14675  156E  084D               	movf	___fttol@f1+2,w
 14676  156F  00D6               	movwf	___fttol@lval+2
 14677  1570  01D7               	clrf	___fttol@lval+3
 14678  1571  308E               	movlw	142
 14679  1572  02D8               	subwf	___fttol@exp1,f
 14680  1573  1FD8               	btfss	___fttol@exp1,7
 14681  1574  2D91               	goto	l6352
 14682  1575  0858               	movf	___fttol@exp1,w
 14683  1576  3A80               	xorlw	128
 14684  1577  3E8F               	addlw	143
 14685  1578  1803               	skipnc
 14686  1579  2D83               	goto	l6350
 14687  157A  3000               	movlw	0
 14688  157B  00CE               	movwf	?___fttol+3
 14689  157C  3000               	movlw	0
 14690  157D  00CD               	movwf	?___fttol+2
 14691  157E  3000               	movlw	0
 14692  157F  00CC               	movwf	?___fttol+1
 14693  1580  3000               	movlw	0
 14694  1581  00CB               	movwf	?___fttol
 14695  1582  0008               	return
 14696  1583                     l6350:	
 14697  1583  3001               	movlw	1
 14698  1584                     u4685:	
 14699  1584  36D7               	lsrf	___fttol@lval+3,f
 14700  1585  0CD6               	rrf	___fttol@lval+2,f
 14701  1586  0CD5               	rrf	___fttol@lval+1,f
 14702  1587  0CD4               	rrf	___fttol@lval,f
 14703  1588  0B89               	decfsz	9,f
 14704  1589  2D84               	goto	u4685
 14705  158A  3001               	movlw	1
 14706  158B  00CF               	movwf	??___fttol
 14707  158C  084F               	movf	??___fttol,w
 14708  158D  07D8               	addwf	___fttol@exp1,f
 14709  158E  1903               	btfsc	3,2
 14710  158F  2DAA               	goto	l6362
 14711  1590  2D83               	goto	l6350
 14712  1591                     l6352:	
 14713  1591  3018               	movlw	24
 14714  1592  0258               	subwf	___fttol@exp1,w
 14715  1593  1C03               	skipc
 14716  1594  2DA7               	goto	l6360
 14717  1595  3000               	movlw	0
 14718  1596  00CE               	movwf	?___fttol+3
 14719  1597  3000               	movlw	0
 14720  1598  00CD               	movwf	?___fttol+2
 14721  1599  3000               	movlw	0
 14722  159A  00CC               	movwf	?___fttol+1
 14723  159B  3000               	movlw	0
 14724  159C  00CB               	movwf	?___fttol
 14725  159D  0008               	return
 14726  159E                     l6358:	
 14727  159E  3001               	movlw	1
 14728  159F                     u4715:	
 14729  159F  35D4               	lslf	___fttol@lval,f
 14730  15A0  0DD5               	rlf	___fttol@lval+1,f
 14731  15A1  0DD6               	rlf	___fttol@lval+2,f
 14732  15A2  0DD7               	rlf	___fttol@lval+3,f
 14733  15A3  0B89               	decfsz	9,f
 14734  15A4  2D9F               	goto	u4715
 14735  15A5  3001               	movlw	1
 14736  15A6  02D8               	subwf	___fttol@exp1,f
 14737  15A7                     l6360:	
 14738  15A7  08D8               	movf	___fttol@exp1,f
 14739  15A8  1D03               	skipz
 14740  15A9  2D9E               	goto	l6358
 14741  15AA                     l6362:	
 14742  15AA  0853               	movf	___fttol@sign1,w
 14743  15AB  1903               	btfsc	3,2
 14744  15AC  2DB8               	goto	l6366
 14745  15AD  09D4               	comf	___fttol@lval,f
 14746  15AE  09D5               	comf	___fttol@lval+1,f
 14747  15AF  09D6               	comf	___fttol@lval+2,f
 14748  15B0  09D7               	comf	___fttol@lval+3,f
 14749  15B1  0AD4               	incf	___fttol@lval,f
 14750  15B2  1903               	skipnz
 14751  15B3  0AD5               	incf	___fttol@lval+1,f
 14752  15B4  1903               	skipnz
 14753  15B5  0AD6               	incf	___fttol@lval+2,f
 14754  15B6  1903               	skipnz
 14755  15B7  0AD7               	incf	___fttol@lval+3,f
 14756  15B8                     l6366:	
 14757  15B8  0857               	movf	___fttol@lval+3,w
 14758  15B9  00CE               	movwf	?___fttol+3
 14759  15BA  0856               	movf	___fttol@lval+2,w
 14760  15BB  00CD               	movwf	?___fttol+2
 14761  15BC  0855               	movf	___fttol@lval+1,w
 14762  15BD  00CC               	movwf	?___fttol+1
 14763  15BE  0854               	movf	___fttol@lval,w
 14764  15BF  00CB               	movwf	?___fttol
 14765  15C0  0008               	return
 14766  15C1                     __end_of___fttol:	
 14767                           
 14768                           	psect	text83
 14769  099B                     __ptext83:	
 14770 ;; *************** function ___ftdiv *****************
 14771 ;; Defined at:
 14772 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14773 ;; Parameters:    Size  Location     Type
 14774 ;;  f2              3   14[BANK0 ] float 
 14775 ;;  f1              3   17[BANK0 ] float 
 14776 ;; Auto vars:     Size  Location     Type
 14777 ;;  f3              3   25[BANK0 ] float 
 14778 ;;  sign            1   29[BANK0 ] unsigned char 
 14779 ;;  exp             1   28[BANK0 ] unsigned char 
 14780 ;;  cntr            1   24[BANK0 ] unsigned char 
 14781 ;; Return value:  Size  Location     Type
 14782 ;;                  3   14[BANK0 ] float 
 14783 ;; Registers used:
 14784 ;;		wreg, status,2, status,0, pclath, cstack
 14785 ;; Tracked objects:
 14786 ;;		On entry : 0/0
 14787 ;;		On exit  : 0/0
 14788 ;;		Unchanged: 0/0
 14789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14790 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;Total ram usage:       16 bytes
 14795 ;; Hardware stack levels used:    1
 14796 ;; Hardware stack levels required when called:    5
 14797 ;; This function calls:
 14798 ;;		___ftpack
 14799 ;; This function is called by:
 14800 ;;		_getPercentValue
 14801 ;;		_setPercentValue
 14802 ;; This function uses a non-reentrant model
 14803 ;;
 14804                           
 14805                           
 14806                           ;psect for function ___ftdiv
 14807  099B                     ___ftdiv:	
 14808                           
 14809                           ;incstack = 0
 14810                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14811  099B  0020               	movlb	0	; select bank0
 14812  099C  0831               	movf	___ftdiv@f1,w
 14813  099D  00B4               	movwf	??___ftdiv
 14814  099E  0832               	movf	___ftdiv@f1+1,w
 14815  099F  00B5               	movwf	??___ftdiv+1
 14816  09A0  0833               	movf	___ftdiv@f1+2,w
 14817  09A1  00B6               	movwf	??___ftdiv+2
 14818  09A2  1003               	clrc
 14819  09A3  0D35               	rlf	??___ftdiv+1,w
 14820  09A4  0D36               	rlf	??___ftdiv+2,w
 14821  09A5  00B7               	movwf	??___ftdiv+3
 14822  09A6  0837               	movf	??___ftdiv+3,w
 14823  09A7  00BC               	movwf	___ftdiv@exp
 14824  09A8  08BC               	movf	___ftdiv@exp,f
 14825  09A9  1D03               	skipz
 14826  09AA  29B2               	goto	l6240
 14827  09AB  3000               	movlw	0
 14828  09AC  00AE               	movwf	?___ftdiv
 14829  09AD  3000               	movlw	0
 14830  09AE  00AF               	movwf	?___ftdiv+1
 14831  09AF  3000               	movlw	0
 14832  09B0  00B0               	movwf	?___ftdiv+2
 14833  09B1  0008               	return
 14834  09B2                     l6240:	
 14835  09B2  082E               	movf	___ftdiv@f2,w
 14836  09B3  00B4               	movwf	??___ftdiv
 14837  09B4  082F               	movf	___ftdiv@f2+1,w
 14838  09B5  00B5               	movwf	??___ftdiv+1
 14839  09B6  0830               	movf	___ftdiv@f2+2,w
 14840  09B7  00B6               	movwf	??___ftdiv+2
 14841  09B8  1003               	clrc
 14842  09B9  0D35               	rlf	??___ftdiv+1,w
 14843  09BA  0D36               	rlf	??___ftdiv+2,w
 14844  09BB  00B7               	movwf	??___ftdiv+3
 14845  09BC  0837               	movf	??___ftdiv+3,w
 14846  09BD  00BD               	movwf	___ftdiv@sign
 14847  09BE  08BD               	movf	___ftdiv@sign,f
 14848  09BF  1D03               	skipz
 14849  09C0  29C8               	goto	l6246
 14850  09C1  3000               	movlw	0
 14851  09C2  00AE               	movwf	?___ftdiv
 14852  09C3  3000               	movlw	0
 14853  09C4  00AF               	movwf	?___ftdiv+1
 14854  09C5  3000               	movlw	0
 14855  09C6  00B0               	movwf	?___ftdiv+2
 14856  09C7  0008               	return
 14857  09C8                     l6246:	
 14858  09C8  3000               	movlw	0
 14859  09C9  00B9               	movwf	___ftdiv@f3
 14860  09CA  3000               	movlw	0
 14861  09CB  00BA               	movwf	___ftdiv@f3+1
 14862  09CC  3000               	movlw	0
 14863  09CD  00BB               	movwf	___ftdiv@f3+2
 14864  09CE  3089               	movlw	137
 14865  09CF  073D               	addwf	___ftdiv@sign,w
 14866  09D0  00B4               	movwf	??___ftdiv
 14867  09D1  0834               	movf	??___ftdiv,w
 14868  09D2  02BC               	subwf	___ftdiv@exp,f
 14869  09D3  0831               	movf	___ftdiv@f1,w
 14870  09D4  00B4               	movwf	??___ftdiv
 14871  09D5  0832               	movf	___ftdiv@f1+1,w
 14872  09D6  00B5               	movwf	??___ftdiv+1
 14873  09D7  0833               	movf	___ftdiv@f1+2,w
 14874  09D8  00B6               	movwf	??___ftdiv+2
 14875  09D9  3010               	movlw	16
 14876  09DA                     u4465:	
 14877  09DA  36B6               	lsrf	??___ftdiv+2,f
 14878  09DB  0CB5               	rrf	??___ftdiv+1,f
 14879  09DC  0CB4               	rrf	??___ftdiv,f
 14880  09DD  0B89               	decfsz	9,f
 14881  09DE  29DA               	goto	u4465
 14882  09DF  0834               	movf	??___ftdiv,w
 14883  09E0  00B7               	movwf	??___ftdiv+3
 14884  09E1  0837               	movf	??___ftdiv+3,w
 14885  09E2  00BD               	movwf	___ftdiv@sign
 14886  09E3  082E               	movf	___ftdiv@f2,w
 14887  09E4  00B4               	movwf	??___ftdiv
 14888  09E5  082F               	movf	___ftdiv@f2+1,w
 14889  09E6  00B5               	movwf	??___ftdiv+1
 14890  09E7  0830               	movf	___ftdiv@f2+2,w
 14891  09E8  00B6               	movwf	??___ftdiv+2
 14892  09E9  3010               	movlw	16
 14893  09EA                     u4475:	
 14894  09EA  36B6               	lsrf	??___ftdiv+2,f
 14895  09EB  0CB5               	rrf	??___ftdiv+1,f
 14896  09EC  0CB4               	rrf	??___ftdiv,f
 14897  09ED  0B89               	decfsz	9,f
 14898  09EE  29EA               	goto	u4475
 14899  09EF  0834               	movf	??___ftdiv,w
 14900  09F0  00B7               	movwf	??___ftdiv+3
 14901  09F1  0837               	movf	??___ftdiv+3,w
 14902  09F2  06BD               	xorwf	___ftdiv@sign,f
 14903  09F3  3080               	movlw	128
 14904  09F4  00B4               	movwf	??___ftdiv
 14905  09F5  0834               	movf	??___ftdiv,w
 14906  09F6  05BD               	andwf	___ftdiv@sign,f
 14907  09F7  17B2               	bsf	___ftdiv@f1+1,7
 14908  09F8  30FF               	movlw	255
 14909  09F9  05B1               	andwf	___ftdiv@f1,f
 14910  09FA  30FF               	movlw	255
 14911  09FB  05B2               	andwf	___ftdiv@f1+1,f
 14912  09FC  3000               	movlw	0
 14913  09FD  05B3               	andwf	___ftdiv@f1+2,f
 14914  09FE  17AF               	bsf	___ftdiv@f2+1,7
 14915  09FF  30FF               	movlw	255
 14916  0A00  05AE               	andwf	___ftdiv@f2,f
 14917  0A01  30FF               	movlw	255
 14918  0A02  05AF               	andwf	___ftdiv@f2+1,f
 14919  0A03  3000               	movlw	0
 14920  0A04  05B0               	andwf	___ftdiv@f2+2,f
 14921  0A05  3018               	movlw	24
 14922  0A06  00B4               	movwf	??___ftdiv
 14923  0A07  0834               	movf	??___ftdiv,w
 14924  0A08  00B8               	movwf	___ftdiv@cntr
 14925  0A09                     l6260:	
 14926  0A09  3001               	movlw	1
 14927  0A0A                     u4485:	
 14928  0A0A  35B9               	lslf	___ftdiv@f3,f
 14929  0A0B  0DBA               	rlf	___ftdiv@f3+1,f
 14930  0A0C  0DBB               	rlf	___ftdiv@f3+2,f
 14931  0A0D  0B89               	decfsz	9,f
 14932  0A0E  2A0A               	goto	u4485
 14933  0A0F  0830               	movf	___ftdiv@f2+2,w
 14934  0A10  0233               	subwf	___ftdiv@f1+2,w
 14935  0A11  1D03               	skipz
 14936  0A12  2A19               	goto	u4495
 14937  0A13  082F               	movf	___ftdiv@f2+1,w
 14938  0A14  0232               	subwf	___ftdiv@f1+1,w
 14939  0A15  1D03               	skipz
 14940  0A16  2A19               	goto	u4495
 14941  0A17  082E               	movf	___ftdiv@f2,w
 14942  0A18  0231               	subwf	___ftdiv@f1,w
 14943  0A19                     u4495:	
 14944  0A19  1C03               	skipc
 14945  0A1A  2A22               	goto	l6268
 14946  0A1B  082E               	movf	___ftdiv@f2,w
 14947  0A1C  02B1               	subwf	___ftdiv@f1,f
 14948  0A1D  082F               	movf	___ftdiv@f2+1,w
 14949  0A1E  3BB2               	subwfb	___ftdiv@f1+1,f
 14950  0A1F  0830               	movf	___ftdiv@f2+2,w
 14951  0A20  3BB3               	subwfb	___ftdiv@f1+2,f
 14952  0A21  1439               	bsf	___ftdiv@f3,0
 14953  0A22                     l6268:	
 14954  0A22  3001               	movlw	1
 14955  0A23                     u4505:	
 14956  0A23  35B1               	lslf	___ftdiv@f1,f
 14957  0A24  0DB2               	rlf	___ftdiv@f1+1,f
 14958  0A25  0DB3               	rlf	___ftdiv@f1+2,f
 14959  0A26  0B89               	decfsz	9,f
 14960  0A27  2A23               	goto	u4505
 14961  0A28  3001               	movlw	1
 14962  0A29  02B8               	subwf	___ftdiv@cntr,f
 14963  0A2A  1D03               	btfss	3,2
 14964  0A2B  2A09               	goto	l6260
 14965  0A2C  0839               	movf	___ftdiv@f3,w
 14966  0A2D  00A0               	movwf	___ftpack@arg
 14967  0A2E  083A               	movf	___ftdiv@f3+1,w
 14968  0A2F  00A1               	movwf	___ftpack@arg+1
 14969  0A30  083B               	movf	___ftdiv@f3+2,w
 14970  0A31  00A2               	movwf	___ftpack@arg+2
 14971  0A32  083C               	movf	___ftdiv@exp,w
 14972  0A33  00B4               	movwf	??___ftdiv
 14973  0A34  0834               	movf	??___ftdiv,w
 14974  0A35  00A3               	movwf	___ftpack@exp
 14975  0A36  083D               	movf	___ftdiv@sign,w
 14976  0A37  00B5               	movwf	??___ftdiv+1
 14977  0A38  0835               	movf	??___ftdiv+1,w
 14978  0A39  00A4               	movwf	___ftpack@sign
 14979  0A3A  319F  279F         	fcall	___ftpack
 14980  0A3C  0020               	movlb	0	; select bank0
 14981  0A3D  0820               	movf	?___ftpack,w
 14982  0A3E  00AE               	movwf	?___ftdiv
 14983  0A3F  0821               	movf	?___ftpack+1,w
 14984  0A40  00AF               	movwf	?___ftdiv+1
 14985  0A41  0822               	movf	?___ftpack+2,w
 14986  0A42  00B0               	movwf	?___ftdiv+2
 14987  0A43  0008               	return
 14988  0A44                     __end_of___ftdiv:	
 14989                           
 14990                           	psect	text84
 14991  187A                     __ptext84:	
 14992 ;; *************** function ___awtoft *****************
 14993 ;; Defined at:
 14994 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;  c               2    8[BANK0 ] int 
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;  sign            1   13[BANK0 ] unsigned char 
 14999 ;; Return value:  Size  Location     Type
 15000 ;;                  3    8[BANK0 ] float 
 15001 ;; Registers used:
 15002 ;;		wreg, status,2, status,0, pclath, cstack
 15003 ;; Tracked objects:
 15004 ;;		On entry : 0/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15008 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;Total ram usage:        6 bytes
 15013 ;; Hardware stack levels used:    1
 15014 ;; Hardware stack levels required when called:    5
 15015 ;; This function calls:
 15016 ;;		___ftpack
 15017 ;; This function is called by:
 15018 ;;		_getPercentValue
 15019 ;;		_setPercentValue
 15020 ;; This function uses a non-reentrant model
 15021 ;;
 15022                           
 15023                           
 15024                           ;psect for function ___awtoft
 15025  187A                     ___awtoft:	
 15026                           
 15027                           ;incstack = 0
 15028                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15029  187A  0020               	movlb	0	; select bank0
 15030  187B  01AD               	clrf	___awtoft@sign
 15031  187C  1FA9               	btfss	___awtoft@c+1,7
 15032  187D  2885               	goto	l6158
 15033  187E  09A8               	comf	___awtoft@c,f
 15034  187F  09A9               	comf	___awtoft@c+1,f
 15035  1880  0AA8               	incf	___awtoft@c,f
 15036  1881  1903               	skipnz
 15037  1882  0AA9               	incf	___awtoft@c+1,f
 15038  1883  01AD               	clrf	___awtoft@sign
 15039  1884  0AAD               	incf	___awtoft@sign,f
 15040  1885                     l6158:	
 15041  1885  0828               	movf	___awtoft@c,w
 15042  1886  00A0               	movwf	___ftpack@arg
 15043  1887  0829               	movf	___awtoft@c+1,w
 15044  1888  00A1               	movwf	___ftpack@arg+1
 15045  1889  01A2               	clrf	___ftpack@arg+2
 15046  188A  308E               	movlw	142
 15047  188B  00AB               	movwf	??___awtoft
 15048  188C  082B               	movf	??___awtoft,w
 15049  188D  00A3               	movwf	___ftpack@exp
 15050  188E  082D               	movf	___awtoft@sign,w
 15051  188F  00AC               	movwf	??___awtoft+1
 15052  1890  082C               	movf	??___awtoft+1,w
 15053  1891  00A4               	movwf	___ftpack@sign
 15054  1892  319F  279F         	fcall	___ftpack
 15055  1894  0020               	movlb	0	; select bank0
 15056  1895  0820               	movf	?___ftpack,w
 15057  1896  00A8               	movwf	?___awtoft
 15058  1897  0821               	movf	?___ftpack+1,w
 15059  1898  00A9               	movwf	?___awtoft+1
 15060  1899  0822               	movf	?___ftpack+2,w
 15061  189A  00AA               	movwf	?___awtoft+2
 15062  189B  0008               	return
 15063  189C                     __end_of___awtoft:	
 15064                           
 15065                           	psect	text85
 15066  1F9F                     __ptext85:	
 15067 ;; *************** function ___ftpack *****************
 15068 ;; Defined at:
 15069 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15070 ;; Parameters:    Size  Location     Type
 15071 ;;  arg             3    0[BANK0 ] unsigned um
 15072 ;;  exp             1    3[BANK0 ] unsigned char 
 15073 ;;  sign            1    4[BANK0 ] unsigned char 
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;		None
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  3    0[BANK0 ] float 
 15078 ;; Registers used:
 15079 ;;		wreg, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15085 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;Total ram usage:        8 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    4
 15092 ;; This function calls:
 15093 ;;		Nothing
 15094 ;; This function is called by:
 15095 ;;		___awtoft
 15096 ;;		___ftadd
 15097 ;;		___ftdiv
 15098 ;;		___ftmul
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           
 15103                           ;psect for function ___ftpack
 15104  1F9F                     ___ftpack:	
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15108  1F9F  0020               	movlb	0	; select bank0
 15109  1FA0  0823               	movf	___ftpack@exp,w
 15110  1FA1  1903               	btfsc	3,2
 15111  1FA2  2FA8               	goto	l6124
 15112  1FA3  0822               	movf	___ftpack@arg+2,w
 15113  1FA4  0421               	iorwf	___ftpack@arg+1,w
 15114  1FA5  0420               	iorwf	___ftpack@arg,w
 15115  1FA6  1D03               	skipz
 15116  1FA7  2FB9               	goto	l6130
 15117  1FA8                     l6124:	
 15118  1FA8  3000               	movlw	0
 15119  1FA9  00A0               	movwf	?___ftpack
 15120  1FAA  3000               	movlw	0
 15121  1FAB  00A1               	movwf	?___ftpack+1
 15122  1FAC  3000               	movlw	0
 15123  1FAD  00A2               	movwf	?___ftpack+2
 15124  1FAE  0008               	return
 15125  1FAF                     l6128:	
 15126  1FAF  3001               	movlw	1
 15127  1FB0  00A5               	movwf	??___ftpack
 15128  1FB1  0825               	movf	??___ftpack,w
 15129  1FB2  07A3               	addwf	___ftpack@exp,f
 15130  1FB3  3001               	movlw	1
 15131  1FB4                     u4115:	
 15132  1FB4  36A2               	lsrf	___ftpack@arg+2,f
 15133  1FB5  0CA1               	rrf	___ftpack@arg+1,f
 15134  1FB6  0CA0               	rrf	___ftpack@arg,f
 15135  1FB7  0B89               	decfsz	9,f
 15136  1FB8  2FB4               	goto	u4115
 15137  1FB9                     l6130:	
 15138  1FB9  30FE               	movlw	254
 15139  1FBA  0522               	andwf	___ftpack@arg+2,w
 15140  1FBB  1903               	btfsc	3,2
 15141  1FBC  2FD2               	goto	l3398
 15142  1FBD  2FAF               	goto	l6128
 15143  1FBE                     l6132:	
 15144  1FBE  3001               	movlw	1
 15145  1FBF  00A5               	movwf	??___ftpack
 15146  1FC0  0825               	movf	??___ftpack,w
 15147  1FC1  07A3               	addwf	___ftpack@exp,f
 15148  1FC2  3001               	movlw	1
 15149  1FC3  07A0               	addwf	___ftpack@arg,f
 15150  1FC4  3000               	movlw	0
 15151  1FC5  1803               	skipnc
 15152  1FC6  3001               	movlw	1
 15153  1FC7  07A1               	addwf	___ftpack@arg+1,f
 15154  1FC8  3000               	movlw	0
 15155  1FC9  1803               	skipnc
 15156  1FCA  3001               	movlw	1
 15157  1FCB  07A2               	addwf	___ftpack@arg+2,f
 15158  1FCC  3001               	movlw	1
 15159  1FCD                     u4135:	
 15160  1FCD  36A2               	lsrf	___ftpack@arg+2,f
 15161  1FCE  0CA1               	rrf	___ftpack@arg+1,f
 15162  1FCF  0CA0               	rrf	___ftpack@arg,f
 15163  1FD0  0B89               	decfsz	9,f
 15164  1FD1  2FCD               	goto	u4135
 15165  1FD2                     l3398:	
 15166  1FD2  30FF               	movlw	255
 15167  1FD3  0522               	andwf	___ftpack@arg+2,w
 15168  1FD4  1903               	btfsc	3,2
 15169  1FD5  2FDF               	goto	l6140
 15170  1FD6  2FBE               	goto	l6132
 15171  1FD7                     l6138:	
 15172  1FD7  3001               	movlw	1
 15173  1FD8  02A3               	subwf	___ftpack@exp,f
 15174  1FD9  3001               	movlw	1
 15175  1FDA                     u4155:	
 15176  1FDA  35A0               	lslf	___ftpack@arg,f
 15177  1FDB  0DA1               	rlf	___ftpack@arg+1,f
 15178  1FDC  0DA2               	rlf	___ftpack@arg+2,f
 15179  1FDD  0B89               	decfsz	9,f
 15180  1FDE  2FDA               	goto	u4155
 15181  1FDF                     l6140:	
 15182  1FDF  1FA1               	btfss	___ftpack@arg+1,7
 15183  1FE0  2FD7               	goto	l6138
 15184  1FE1  1823               	btfsc	___ftpack@exp,0
 15185  1FE2  2FE9               	goto	l3404
 15186  1FE3  30FF               	movlw	255
 15187  1FE4  05A0               	andwf	___ftpack@arg,f
 15188  1FE5  307F               	movlw	127
 15189  1FE6  05A1               	andwf	___ftpack@arg+1,f
 15190  1FE7  30FF               	movlw	255
 15191  1FE8  05A2               	andwf	___ftpack@arg+2,f
 15192  1FE9                     l3404:	
 15193  1FE9  1003               	clrc
 15194  1FEA  0CA3               	rrf	___ftpack@exp,f
 15195  1FEB  0823               	movf	___ftpack@exp,w
 15196  1FEC  00A5               	movwf	??___ftpack
 15197  1FED  01A6               	clrf	??___ftpack+1
 15198  1FEE  01A7               	clrf	??___ftpack+2
 15199  1FEF  3010               	movlw	16
 15200  1FF0                     u4185:	
 15201  1FF0  35A5               	lslf	??___ftpack,f
 15202  1FF1  0DA6               	rlf	??___ftpack+1,f
 15203  1FF2  0DA7               	rlf	??___ftpack+2,f
 15204  1FF3  0B89               	decfsz	9,f
 15205  1FF4  2FF0               	goto	u4185
 15206  1FF5  0825               	movf	??___ftpack,w
 15207  1FF6  04A0               	iorwf	___ftpack@arg,f
 15208  1FF7  0826               	movf	??___ftpack+1,w
 15209  1FF8  04A1               	iorwf	___ftpack@arg+1,f
 15210  1FF9  0827               	movf	??___ftpack+2,w
 15211  1FFA  04A2               	iorwf	___ftpack@arg+2,f
 15212  1FFB  0824               	movf	___ftpack@sign,w
 15213  1FFC  1903               	btfsc	3,2
 15214  1FFD  0008               	return
 15215  1FFE  17A2               	bsf	___ftpack@arg+2,7
 15216  1FFF  0008               	return
 15217  2000                     __end_of___ftpack:	
 15218                           
 15219                           	psect	text86
 15220  1AE5                     __ptext86:	
 15221 ;; *************** function _Flash_Memory_Write *****************
 15222 ;; Defined at:
 15223 ;;		line 518 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;		None
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;  i               1    1[BANK0 ] unsigned char 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;		None               void
 15230 ;; Registers used:
 15231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;Total ram usage:        2 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:    5
 15244 ;; This function calls:
 15245 ;;		_Flash_Memory_Unlock
 15246 ;; This function is called by:
 15247 ;;		_Flash_Memory_Initialization
 15248 ;;		_Flash_Memory_Modify
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           
 15253                           ;psect for function _Flash_Memory_Write
 15254  1AE5                     _Flash_Memory_Write:	
 15255                           
 15256                           ;MCU_16f1518_B1.c: 520: char i;
 15257                           ;MCU_16f1518_B1.c: 521: CFGS=0;
 15258                           
 15259                           ;incstack = 0
 15260                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15261  1AE5  0023               	movlb	3	; select bank3
 15262  1AE6  1315               	bcf	21,6	;volatile
 15263                           
 15264                           ;MCU_16f1518_B1.c: 522: PMADRH=0x30;
 15265  1AE7  3030               	movlw	48
 15266  1AE8  0092               	movwf	18	;volatile
 15267                           
 15268                           ;MCU_16f1518_B1.c: 523: PMDATH=0;
 15269  1AE9  0194               	clrf	20	;volatile
 15270                           
 15271                           ;MCU_16f1518_B1.c: 524: FREE=0;
 15272  1AEA  1215               	bcf	21,4	;volatile
 15273                           
 15274                           ;MCU_16f1518_B1.c: 525: LWLO=1;
 15275  1AEB  1695               	bsf	21,5	;volatile
 15276                           
 15277                           ;MCU_16f1518_B1.c: 526: WREN=1;
 15278  1AEC  1515               	bsf	21,2	;volatile
 15279                           
 15280                           ;MCU_16f1518_B1.c: 527: for(i=0 ; i<32 ; i++)
 15281  1AED  0020               	movlb	0	; select bank0
 15282  1AEE  01A1               	clrf	Flash_Memory_Write@i
 15283  1AEF  3020               	movlw	32
 15284  1AF0  0221               	subwf	Flash_Memory_Write@i,w
 15285  1AF1  1803               	btfsc	3,0
 15286  1AF2  2B0F               	goto	l1744
 15287  1AF3                     l9026:	
 15288                           
 15289                           ;MCU_16f1518_B1.c: 528: {
 15290                           ;MCU_16f1518_B1.c: 529: PMADRL=i;
 15291  1AF3  0821               	movf	Flash_Memory_Write@i,w
 15292  1AF4  0023               	movlb	3	; select bank3
 15293  1AF5  0091               	movwf	17	;volatile
 15294                           
 15295                           ;MCU_16f1518_B1.c: 530: PMDATL=Memory->Data[i];
 15296  1AF6  0020               	movlb	0	; select bank0
 15297  1AF7  0821               	movf	Flash_Memory_Write@i,w
 15298  1AF8  0021               	movlb	1	; select bank1
 15299  1AF9  0768               	addwf	_Memory^(0+128),w
 15300  1AFA  0020               	movlb	0	; select bank0
 15301  1AFB  00A0               	movwf	??_Flash_Memory_Write
 15302  1AFC  0820               	movf	??_Flash_Memory_Write,w
 15303  1AFD  0086               	movwf	6
 15304  1AFE  3002               	movlw	2	; select bank4/5
 15305  1AFF  0087               	movwf	7
 15306  1B00  0801               	movf	1,w
 15307  1B01  0023               	movlb	3	; select bank3
 15308  1B02  0093               	movwf	19	;volatile
 15309                           
 15310                           ;MCU_16f1518_B1.c: 531: Flash_Memory_Unlock();
 15311  1B03  31A4  240B  319A   	fcall	_Flash_Memory_Unlock
 15312  1B06  3001               	movlw	1
 15313  1B07  0020               	movlb	0	; select bank0
 15314  1B08  00A0               	movwf	??_Flash_Memory_Write
 15315  1B09  0820               	movf	??_Flash_Memory_Write,w
 15316  1B0A  07A1               	addwf	Flash_Memory_Write@i,f
 15317  1B0B  3020               	movlw	32
 15318  1B0C  0221               	subwf	Flash_Memory_Write@i,w
 15319  1B0D  1C03               	skipc
 15320  1B0E  2AF3               	goto	l9026
 15321  1B0F                     l1744:	
 15322                           
 15323                           ;MCU_16f1518_B1.c: 532: }
 15324                           ;MCU_16f1518_B1.c: 533: LWLO=0;
 15325  1B0F  0023               	movlb	3	; select bank3
 15326  1B10  1295               	bcf	21,5	;volatile
 15327                           
 15328                           ;MCU_16f1518_B1.c: 534: Flash_Memory_Unlock();
 15329  1B11  31A4  240B         	fcall	_Flash_Memory_Unlock
 15330                           
 15331                           ;MCU_16f1518_B1.c: 535: WREN=0;
 15332  1B13  0023               	movlb	3	; select bank3
 15333  1B14  1115               	bcf	21,2	;volatile
 15334  1B15  0008               	return
 15335  1B16                     __end_of_Flash_Memory_Write:	
 15336                           
 15337                           	psect	text87
 15338  240B                     __ptext87:	
 15339 ;; *************** function _Flash_Memory_Unlock *****************
 15340 ;; Defined at:
 15341 ;;		line 497 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;		None
 15346 ;; Return value:  Size  Location     Type
 15347 ;;		None               void
 15348 ;; Registers used:
 15349 ;;		wreg
 15350 ;; Tracked objects:
 15351 ;;		On entry : 0/0
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;Total ram usage:        0 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; Hardware stack levels required when called:    4
 15362 ;; This function calls:
 15363 ;;		Nothing
 15364 ;; This function is called by:
 15365 ;;		_Flash_Memory_Write
 15366 ;;		_Flash_Memory_Erasing
 15367 ;; This function uses a non-reentrant model
 15368 ;;
 15369                           
 15370                           
 15371                           ;psect for function _Flash_Memory_Unlock
 15372  240B                     _Flash_Memory_Unlock:	
 15373                           
 15374                           ;MCU_16f1518_B1.c: 499: PMCON2=0x55;
 15375                           
 15376                           ;incstack = 0
 15377                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 15378  240B  3055               	movlw	85
 15379  240C  0023               	movlb	3	; select bank3
 15380  240D  0096               	movwf	22	;volatile
 15381                           
 15382                           ;MCU_16f1518_B1.c: 500: PMCON2=0xaa;
 15383  240E  30AA               	movlw	170
 15384  240F  0096               	movwf	22	;volatile
 15385                           
 15386                           ;MCU_16f1518_B1.c: 501: WR=1;
 15387  2410  1495               	bsf	21,1	;volatile
 15388                           
 15389                           ;MCU_16f1518_B1.c: 502: __nop();
 15390  2411  0000               	nop
 15391                           
 15392                           ;MCU_16f1518_B1.c: 503: __nop();
 15393  2412  0000               	nop
 15394  2413  0008               	return
 15395  2414                     __end_of_Flash_Memory_Unlock:	
 15396                           
 15397                           	psect	text88
 15398  26C6                     __ptext88:	
 15399 ;; *************** function _Flash_Memory_Read *****************
 15400 ;; Defined at:
 15401 ;;		line 506 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 15402 ;; Parameters:    Size  Location     Type
 15403 ;;  address         1    wreg     unsigned char 
 15404 ;; Auto vars:     Size  Location     Type
 15405 ;;  address         1    2[BANK0 ] unsigned char 
 15406 ;;  ret             1    3[BANK0 ] unsigned char 
 15407 ;;  i               1    1[BANK0 ] unsigned char 
 15408 ;; Return value:  Size  Location     Type
 15409 ;;                  1    wreg      unsigned char 
 15410 ;; Registers used:
 15411 ;;		wreg, status,2
 15412 ;; Tracked objects:
 15413 ;;		On entry : 0/0
 15414 ;;		On exit  : 0/0
 15415 ;;		Unchanged: 0/0
 15416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;Total ram usage:        4 bytes
 15422 ;; Hardware stack levels used:    1
 15423 ;; Hardware stack levels required when called:    4
 15424 ;; This function calls:
 15425 ;;		Nothing
 15426 ;; This function is called by:
 15427 ;;		_Flash_Memory_Initialization
 15428 ;;		_Flash_Memory_Modify
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           
 15433                           ;psect for function _Flash_Memory_Read
 15434  26C6                     _Flash_Memory_Read:	
 15435                           
 15436                           ;incstack = 0
 15437                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 15438                           ;Flash_Memory_Read@address stored from wreg
 15439  26C6  0020               	movlb	0	; select bank0
 15440  26C7  00A2               	movwf	Flash_Memory_Read@address
 15441                           
 15442                           ;MCU_16f1518_B1.c: 508: char i,ret=0;
 15443  26C8  01A3               	clrf	Flash_Memory_Read@ret
 15444                           
 15445                           ;MCU_16f1518_B1.c: 509: PMADRH=0x30;
 15446  26C9  3030               	movlw	48
 15447  26CA  0023               	movlb	3	; select bank3
 15448  26CB  0092               	movwf	18	;volatile
 15449                           
 15450                           ;MCU_16f1518_B1.c: 510: PMADRL=address;
 15451  26CC  0020               	movlb	0	; select bank0
 15452  26CD  0822               	movf	Flash_Memory_Read@address,w
 15453  26CE  0023               	movlb	3	; select bank3
 15454  26CF  0091               	movwf	17	;volatile
 15455                           
 15456                           ;MCU_16f1518_B1.c: 511: CFGS=0;
 15457  26D0  1315               	bcf	21,6	;volatile
 15458                           
 15459                           ;MCU_16f1518_B1.c: 512: RD=1;
 15460  26D1  1415               	bsf	21,0	;volatile
 15461                           
 15462                           ;MCU_16f1518_B1.c: 513: i=PMDATH;
 15463  26D2  0814               	movf	20,w	;volatile
 15464  26D3  0020               	movlb	0	; select bank0
 15465  26D4  00A0               	movwf	??_Flash_Memory_Read
 15466  26D5  0820               	movf	??_Flash_Memory_Read,w
 15467  26D6  00A1               	movwf	Flash_Memory_Read@i
 15468                           
 15469                           ;MCU_16f1518_B1.c: 514: ret=PMDATL;
 15470  26D7  0023               	movlb	3	; select bank3
 15471  26D8  0813               	movf	19,w	;volatile
 15472  26D9  0020               	movlb	0	; select bank0
 15473  26DA  00A0               	movwf	??_Flash_Memory_Read
 15474  26DB  0820               	movf	??_Flash_Memory_Read,w
 15475  26DC  00A3               	movwf	Flash_Memory_Read@ret
 15476                           
 15477                           ;MCU_16f1518_B1.c: 515: return ret;
 15478  26DD  0823               	movf	Flash_Memory_Read@ret,w
 15479  26DE  0008               	return
 15480  26DF                     __end_of_Flash_Memory_Read:	
 15481                           
 15482                           	psect	text89
 15483  2453                     __ptext89:	
 15484 ;; *************** function _DimmerLights_Main *****************
 15485 ;; Defined at:
 15486 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15487 ;; Parameters:    Size  Location     Type
 15488 ;;		None
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;		None
 15491 ;; Return value:  Size  Location     Type
 15492 ;;		None               void
 15493 ;; Registers used:
 15494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;Total ram usage:        0 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; Hardware stack levels required when called:    8
 15507 ;; This function calls:
 15508 ;;		_DimmerLights_Close
 15509 ;;		_setDimmerLights_Main
 15510 ;; This function is called by:
 15511 ;;		_main
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           
 15516                           ;psect for function _DimmerLights_Main
 15517  2453                     _DimmerLights_Main:	
 15518                           
 15519                           ;Dimmer_B1.c: 108: setDimmerLights_Main(1);
 15520                           
 15521                           ;incstack = 0
 15522                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15523  2453  3001               	movlw	1
 15524  2454  3194  24B5  31A4   	fcall	_setDimmerLights_Main
 15525                           
 15526                           ;Dimmer_B1.c: 112: setDimmerLights_Main(2);
 15527  2457  3002               	movlw	2
 15528  2458  3194  24B5  31A4   	fcall	_setDimmerLights_Main
 15529                           
 15530                           ;Dimmer_B1.c: 119: DimmerLights_Close();
 15531  245B  31A7  2712         	fcall	_DimmerLights_Close
 15532  245D  0008               	return
 15533  245E                     __end_of_DimmerLights_Main:	
 15534                           
 15535                           	psect	text90
 15536  14B5                     __ptext90:	
 15537 ;; *************** function _setDimmerLights_Main *****************
 15538 ;; Defined at:
 15539 ;;		line 122 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15540 ;; Parameters:    Size  Location     Type
 15541 ;;  lights          1    wreg     unsigned char 
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;  lights          1   11[BANK0 ] unsigned char 
 15544 ;;  clear           1   10[BANK0 ] unsigned char 
 15545 ;; Return value:  Size  Location     Type
 15546 ;;		None               void
 15547 ;; Registers used:
 15548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15549 ;; Tracked objects:
 15550 ;;		On entry : 0/0
 15551 ;;		On exit  : 0/0
 15552 ;;		Unchanged: 0/0
 15553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;Total ram usage:        2 bytes
 15559 ;; Hardware stack levels used:    1
 15560 ;; Hardware stack levels required when called:    7
 15561 ;; This function calls:
 15562 ;;		_DimmerLightsPointSelect
 15563 ;;		_setBuz
 15564 ;;		_setDimmerLights
 15565 ;;		_setDimmerLights_Adj
 15566 ;; This function is called by:
 15567 ;;		_DimmerLights_Main
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           
 15572                           ;psect for function _setDimmerLights_Main
 15573  14B5                     _setDimmerLights_Main:	
 15574                           
 15575                           ;incstack = 0
 15576                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15577                           ;setDimmerLights_Main@lights stored from wreg
 15578  14B5  0020               	movlb	0	; select bank0
 15579  14B6  00AB               	movwf	setDimmerLights_Main@lights
 15580                           
 15581                           ;Dimmer_B1.c: 124: char clear=1;
 15582  14B7  01AA               	clrf	setDimmerLights_Main@clear
 15583  14B8  0AAA               	incf	setDimmerLights_Main@clear,f
 15584                           
 15585                           ;Dimmer_B1.c: 125: DimmerLightsPointSelect(lights);
 15586  14B9  082B               	movf	setDimmerLights_Main@lights,w
 15587  14BA  31A5  25D1  3194   	fcall	_DimmerLightsPointSelect
 15588                           
 15589                           ;Dimmer_B1.c: 143: if(lights == 1)
 15590  14BD  0020               	movlb	0	; select bank0
 15591  14BE  082B               	movf	setDimmerLights_Main@lights,w
 15592  14BF  3A01               	xorlw	1
 15593  14C0  1D03               	skipz
 15594  14C1  2CC4               	goto	l9282
 15595                           
 15596                           ;Dimmer_B1.c: 144: {
 15597                           ;Dimmer_B1.c: 145: clear=(!DimmerLights22->Clear)?0:1;
 15598  14C2  087A               	movf	_DimmerLights22,w
 15599  14C3  2CC9               	goto	L14
 15600  14C4                     l9282:	
 15601                           ;Dimmer_B1.c: 146: }
 15602                           
 15603                           
 15604                           ;Dimmer_B1.c: 147: else if(lights == 2)
 15605  14C4  082B               	movf	setDimmerLights_Main@lights,w
 15606  14C5  3A02               	xorlw	2
 15607  14C6  1D03               	skipz
 15608  14C7  2CD1               	goto	l9286
 15609                           
 15610                           ;Dimmer_B1.c: 148: {
 15611                           ;Dimmer_B1.c: 149: clear=(!DimmerLights11->Clear)?0:1;
 15612  14C8  0879               	movf	_DimmerLights11,w
 15613  14C9                     L14:	
 15614  14C9  3E0C               	addlw	12
 15615  14CA  0086               	movwf	6
 15616  14CB  3001               	movlw	1	; select bank2/3
 15617  14CC  0087               	movwf	7
 15618  14CD  3000               	movlw	0
 15619  14CE  1801               	btfsc	1,0
 15620  14CF  3001               	movlw	1
 15621  14D0  00AA               	movwf	setDimmerLights_Main@clear
 15622  14D1                     l9286:	
 15623                           
 15624                           ;Dimmer_B1.c: 150: }
 15625                           ;Dimmer_B1.c: 153: if(DimmerLights->Trigger)
 15626  14D1  086C               	movf	_DimmerLights,w
 15627  14D2  3E09               	addlw	9
 15628  14D3  0086               	movwf	6
 15629  14D4  3001               	movlw	1	; select bank2/3
 15630  14D5  0087               	movwf	7
 15631  14D6  1C81               	btfss	1,1
 15632  14D7  2D07               	goto	l9304
 15633                           
 15634                           ;Dimmer_B1.c: 154: {
 15635                           ;Dimmer_B1.c: 155: if(clear)
 15636  14D8  082A               	movf	setDimmerLights_Main@clear,w
 15637  14D9  1903               	btfsc	3,2
 15638  14DA  0008               	return
 15639                           
 15640                           ;Dimmer_B1.c: 156: {
 15641                           ;Dimmer_B1.c: 157: if(DimmerLights->Switch)
 15642  14DB  086C               	movf	_DimmerLights,w
 15643  14DC  3E09               	addlw	9
 15644  14DD  0086               	movwf	6
 15645  14DE  3001               	movlw	1	; select bank2/3
 15646  14DF  0087               	movwf	7
 15647  14E0  1C01               	btfss	1,0
 15648  14E1  2CF5               	goto	l9298
 15649                           
 15650                           ;Dimmer_B1.c: 158: {
 15651                           ;Dimmer_B1.c: 159: DimmerLights->Trigger=0;
 15652  14E2  086C               	movf	_DimmerLights,w
 15653  14E3  3E09               	addlw	9
 15654  14E4  0086               	movwf	6
 15655  14E5  3001               	movlw	1	; select bank2/3
 15656  14E6  0087               	movwf	7
 15657  14E7  1081               	bcf	1,1
 15658                           
 15659                           ;Dimmer_B1.c: 160: setDimmerLights(lights,1);
 15660  14E8  01A4               	clrf	setDimmerLights@status
 15661  14E9  0AA4               	incf	setDimmerLights@status,f
 15662  14EA  082B               	movf	setDimmerLights_Main@lights,w
 15663  14EB  3197  276C         	fcall	_setDimmerLights
 15664                           
 15665                           ;Dimmer_B1.c: 163: DimmerLights->Clear=0;
 15666  14ED  0020               	movlb	0	; select bank0
 15667  14EE  086C               	movf	_DimmerLights,w
 15668  14EF  3E0C               	addlw	12
 15669  14F0  0086               	movwf	6
 15670  14F1  3001               	movlw	1	; select bank2/3
 15671  14F2  0087               	movwf	7
 15672  14F3  1001               	bcf	1,0
 15673                           
 15674                           ;Dimmer_B1.c: 165: }
 15675  14F4  0008               	return
 15676  14F5                     l9298:	
 15677                           
 15678                           ;Dimmer_B1.c: 166: else
 15679                           ;Dimmer_B1.c: 167: {
 15680                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15681  14F5  086C               	movf	_DimmerLights,w
 15682  14F6  3E09               	addlw	9
 15683  14F7  0086               	movwf	6
 15684  14F8  3001               	movlw	1	; select bank2/3
 15685  14F9  0087               	movwf	7
 15686  14FA  1081               	bcf	1,1
 15687                           
 15688                           ;Dimmer_B1.c: 169: setDimmerLights(lights,0);
 15689  14FB  01A4               	clrf	setDimmerLights@status
 15690  14FC  082B               	movf	setDimmerLights_Main@lights,w
 15691  14FD  3197  276C         	fcall	_setDimmerLights
 15692                           
 15693                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15694  14FF  0020               	movlb	0	; select bank0
 15695  1500  086C               	movf	_DimmerLights,w
 15696  1501  3E0C               	addlw	12
 15697  1502  0086               	movwf	6
 15698  1503  3001               	movlw	1	; select bank2/3
 15699  1504  0087               	movwf	7
 15700  1505  1001               	bcf	1,0
 15701                           
 15702                           ;Dimmer_B1.c: 174: }
 15703                           ;Dimmer_B1.c: 175: }
 15704                           ;Dimmer_B1.c: 176: }
 15705  1506  0008               	return
 15706  1507                     l9304:	
 15707                           
 15708                           ;Dimmer_B1.c: 177: else
 15709                           ;Dimmer_B1.c: 178: {
 15710                           ;Dimmer_B1.c: 179: if(DimmerLights->TriggerAdj)
 15711  1507  086C               	movf	_DimmerLights,w
 15712  1508  3E09               	addlw	9
 15713  1509  0086               	movwf	6
 15714  150A  3001               	movlw	1	; select bank2/3
 15715  150B  0087               	movwf	7
 15716  150C  1D81               	btfss	1,3
 15717  150D  0008               	return
 15718                           
 15719                           ;Dimmer_B1.c: 180: {
 15720                           ;Dimmer_B1.c: 181: if(clear)
 15721  150E  082A               	movf	setDimmerLights_Main@clear,w
 15722  150F  1903               	btfsc	3,2
 15723  1510  0008               	return
 15724                           
 15725                           ;Dimmer_B1.c: 182: {
 15726                           ;Dimmer_B1.c: 183: DimmerLightsPointSelect(lights);
 15727  1511  082B               	movf	setDimmerLights_Main@lights,w
 15728  1512  31A5  25D1  3194   	fcall	_DimmerLightsPointSelect
 15729                           
 15730                           ;Dimmer_B1.c: 184: DimmerLights->TriggerAdj=0;
 15731  1515  0020               	movlb	0	; select bank0
 15732  1516  086C               	movf	_DimmerLights,w
 15733  1517  3E09               	addlw	9
 15734  1518  0086               	movwf	6
 15735  1519  3001               	movlw	1	; select bank2/3
 15736  151A  0087               	movwf	7
 15737  151B  1181               	bcf	1,3
 15738                           
 15739                           ;Dimmer_B1.c: 185: if(DimmerLights->AdjGo)
 15740  151C  086C               	movf	_DimmerLights,w
 15741  151D  3E09               	addlw	9
 15742  151E  0086               	movwf	6
 15743  151F  3001               	movlw	1	; select bank2/3
 15744  1520  0087               	movwf	7
 15745  1521  1D01               	btfss	1,2
 15746  1522  2D33               	goto	l9316
 15747                           
 15748                           ;Dimmer_B1.c: 186: {
 15749                           ;Dimmer_B1.c: 187: setDimmerLights_Adj(lights,1);
 15750  1523  01A5               	clrf	setDimmerLights_Adj@status
 15751  1524  0AA5               	incf	setDimmerLights_Adj@status,f
 15752  1525  082B               	movf	setDimmerLights_Main@lights,w
 15753  1526  319D  2534  3194   	fcall	_setDimmerLights_Adj
 15754                           
 15755                           ;Dimmer_B1.c: 188: setBuz(1,100);
 15756  1529  3064               	movlw	100
 15757  152A  0020               	movlb	0	; select bank0
 15758  152B  00A6               	movwf	setBuz@time
 15759  152C  3000               	movlw	0
 15760  152D  00A7               	movwf	setBuz@time+1
 15761  152E  3001               	movlw	1
 15762  152F  3193  234E         	fcall	_setBuz
 15763                           
 15764                           ;Dimmer_B1.c: 189: }
 15765  1531  0020               	movlb	0	; select bank0
 15766  1532  0008               	return
 15767  1533                     l9316:	
 15768                           
 15769                           ;Dimmer_B1.c: 190: else
 15770                           ;Dimmer_B1.c: 191: {
 15771                           ;Dimmer_B1.c: 192: setDimmerLights_Adj(lights,0);
 15772  1533  0020               	movlb	0	; select bank0
 15773  1534  01A5               	clrf	setDimmerLights_Adj@status
 15774  1535  082B               	movf	setDimmerLights_Main@lights,w
 15775  1536  319D  2534         	fcall	_setDimmerLights_Adj
 15776  1538  0020               	movlb	0	; select bank0
 15777  1539  0008               	return
 15778  153A                     __end_of_setDimmerLights_Main:	
 15779                           
 15780                           	psect	text91
 15781  1D34                     __ptext91:	
 15782 ;; *************** function _setDimmerLights_Adj *****************
 15783 ;; Defined at:
 15784 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;  lights          1    wreg     unsigned char 
 15787 ;;  status          1    5[BANK0 ] unsigned char 
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;  lights          1    7[BANK0 ] unsigned char 
 15790 ;; Return value:  Size  Location     Type
 15791 ;;		None               void
 15792 ;; Registers used:
 15793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15799 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;Total ram usage:        3 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    6
 15806 ;; This function calls:
 15807 ;;		_DimmerLightsPointSelect
 15808 ;;		_setLoad_StatusOff
 15809 ;;		_setRF_DimmerLights
 15810 ;;		_setTxData
 15811 ;; This function is called by:
 15812 ;;		_setDimmerLights_Main
 15813 ;; This function uses a non-reentrant model
 15814 ;;
 15815                           
 15816                           
 15817                           ;psect for function _setDimmerLights_Adj
 15818  1D34                     _setDimmerLights_Adj:	
 15819                           
 15820                           ;incstack = 0
 15821                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15822                           ;setDimmerLights_Adj@lights stored from wreg
 15823  1D34  0020               	movlb	0	; select bank0
 15824  1D35  00A7               	movwf	setDimmerLights_Adj@lights
 15825                           
 15826                           ;Dimmer_B1.c: 381: DimmerLightsPointSelect(lights);
 15827  1D36  0827               	movf	setDimmerLights_Adj@lights,w
 15828  1D37  31A5  25D1  319D   	fcall	_DimmerLightsPointSelect
 15829                           
 15830                           ;Dimmer_B1.c: 382: if(status)
 15831  1D3A  0020               	movlb	0	; select bank0
 15832  1D3B  0825               	movf	setDimmerLights_Adj@status,w
 15833  1D3C  1903               	btfsc	3,2
 15834  1D3D  2D49               	goto	l9002
 15835                           
 15836                           ;Dimmer_B1.c: 383: {
 15837                           ;Dimmer_B1.c: 384: DimmerLights->AdjFlag=1;
 15838  1D3E  086C               	movf	_DimmerLights,w
 15839  1D3F  0086               	movwf	6
 15840  1D40  3001               	movlw	1	; select bank2/3
 15841  1D41  0087               	movwf	7
 15842  1D42  1581               	bsf	1,3
 15843                           
 15844                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 15845  1D43  086C               	movf	_DimmerLights,w
 15846  1D44  0086               	movwf	6
 15847  1D45  3001               	movlw	1	; select bank2/3
 15848  1D46  0087               	movwf	7
 15849  1D47  1481               	bsf	1,1
 15850                           
 15851                           ;Dimmer_B1.c: 386: }
 15852  1D48  0008               	return
 15853  1D49                     l9002:	
 15854                           
 15855                           ;Dimmer_B1.c: 387: else
 15856                           ;Dimmer_B1.c: 388: {
 15857                           ;Dimmer_B1.c: 389: if(DimmerLights->AdjFlag)
 15858  1D49  086C               	movf	_DimmerLights,w
 15859  1D4A  0086               	movwf	6
 15860  1D4B  3001               	movlw	1	; select bank2/3
 15861  1D4C  0087               	movwf	7
 15862  1D4D  1D81               	btfss	1,3
 15863  1D4E  0008               	return
 15864                           
 15865                           ;Dimmer_B1.c: 390: {
 15866                           ;Dimmer_B1.c: 391: DimmerLights->Signal=0;
 15867  1D4F  086C               	movf	_DimmerLights,w
 15868  1D50  0086               	movwf	6
 15869  1D51  3001               	movlw	1	; select bank2/3
 15870  1D52  0087               	movwf	7
 15871  1D53  1081               	bcf	1,1
 15872                           
 15873                           ;Dimmer_B1.c: 392: DimmerLights->AdjFlag=0;
 15874  1D54  086C               	movf	_DimmerLights,w
 15875  1D55  0086               	movwf	6
 15876  1D56  3001               	movlw	1	; select bank2/3
 15877  1D57  0087               	movwf	7
 15878  1D58  1181               	bcf	1,3
 15879                           
 15880                           ;Dimmer_B1.c: 393: setLoad_StatusOff(0,1);
 15881  1D59  01A0               	clrf	setLoad_StatusOff@command
 15882  1D5A  0AA0               	incf	setLoad_StatusOff@command,f
 15883  1D5B  3000               	movlw	0
 15884  1D5C  319A  22B4  319D   	fcall	_setLoad_StatusOff
 15885                           
 15886                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15887  1D5F  0020               	movlb	0	; select bank0
 15888  1D60  086C               	movf	_DimmerLights,w
 15889  1D61  3E04               	addlw	4
 15890  1D62  0086               	movwf	6
 15891  1D63  3001               	movlw	1	; select bank2/3
 15892  1D64  0087               	movwf	7
 15893  1D65  0801               	movf	1,w
 15894  1D66  00A6               	movwf	??_setDimmerLights_Adj
 15895  1D67  086C               	movf	_DimmerLights,w
 15896  1D68  3E05               	addlw	5
 15897  1D69  0086               	movwf	6
 15898  1D6A  3001               	movlw	1	; select bank2/3
 15899  1D6B  0087               	movwf	7
 15900  1D6C  0826               	movf	??_setDimmerLights_Adj,w
 15901  1D6D  0081               	movwf	1
 15902                           
 15903                           ;Dimmer_B1.c: 400: setRF_DimmerLights(lights,1);
 15904  1D6E  01A0               	clrf	setRF_DimmerLights@on
 15905  1D6F  0AA0               	incf	setRF_DimmerLights@on,f
 15906  1D70  0827               	movf	setDimmerLights_Adj@lights,w
 15907  1D71  319E  26E6  319D   	fcall	_setRF_DimmerLights
 15908                           
 15909                           ;Dimmer_B1.c: 401: setTxData(1);
 15910  1D74  3001               	movlw	1
 15911  1D75  318A  22F8         	fcall	_setTxData
 15912  1D77  0008               	return
 15913  1D78                     __end_of_setDimmerLights_Adj:	
 15914                           
 15915                           	psect	text92
 15916  1AB4                     __ptext92:	
 15917 ;; *************** function _setLoad_StatusOff *****************
 15918 ;; Defined at:
 15919 ;;		line 280 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15920 ;; Parameters:    Size  Location     Type
 15921 ;;  lights          1    wreg     unsigned char 
 15922 ;;  command         1    0[BANK0 ] unsigned char 
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;  lights          1    1[BANK0 ] unsigned char 
 15925 ;; Return value:  Size  Location     Type
 15926 ;;		None               void
 15927 ;; Registers used:
 15928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15929 ;; Tracked objects:
 15930 ;;		On entry : 0/0
 15931 ;;		On exit  : 0/0
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15934 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;Total ram usage:        2 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    4
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_setDimmerLights_ERROR
 15945 ;;		_setDimmerLights_Adj
 15946 ;; This function uses a non-reentrant model
 15947 ;;
 15948                           
 15949                           
 15950                           ;psect for function _setLoad_StatusOff
 15951  1AB4                     _setLoad_StatusOff:	
 15952                           
 15953                           ;incstack = 0
 15954                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15955                           ;setLoad_StatusOff@lights stored from wreg
 15956  1AB4  0020               	movlb	0	; select bank0
 15957  1AB5  00A1               	movwf	setLoad_StatusOff@lights
 15958                           
 15959                           ;OverLoad_B1.c: 282: Load->StatusOff=command;
 15960  1AB6  086E               	movf	_Load,w
 15961  1AB7  3E46               	addlw	70
 15962  1AB8  0086               	movwf	6
 15963  1AB9  3002               	movlw	2	; select bank4/5
 15964  1ABA  0087               	movwf	7
 15965  1ABB  0820               	movf	setLoad_StatusOff@command,w
 15966  1ABC  1081               	bcf	1,1
 15967  1ABD  1D03               	skipz
 15968  1ABE  1481               	bsf	1,1
 15969                           
 15970                           ;OverLoad_B1.c: 283: Load->SafeCount-=2;
 15971  1ABF  086E               	movf	_Load,w
 15972  1AC0  3E42               	addlw	66
 15973  1AC1  0086               	movwf	6
 15974  1AC2  3002               	movlw	2	; select bank4/5
 15975  1AC3  0087               	movwf	7
 15976  1AC4  3002               	movlw	2
 15977  1AC5  0281               	subwf	1,f
 15978                           
 15979                           ;OverLoad_B1.c: 284: if(lights == 1)
 15980  1AC6  0821               	movf	setLoad_StatusOff@lights,w
 15981  1AC7  3A01               	xorlw	1
 15982  1AC8  1D03               	skipz
 15983  1AC9  2AD0               	goto	l8662
 15984                           
 15985                           ;OverLoad_B1.c: 285: {
 15986                           ;OverLoad_B1.c: 286: Load->Lights1Status=0;
 15987  1ACA  086E               	movf	_Load,w
 15988  1ACB  3E43               	addlw	67
 15989  1ACC  0086               	movwf	6
 15990  1ACD  3002               	movlw	2	; select bank4/5
 15991  1ACE  0087               	movwf	7
 15992  1ACF  0181               	clrf	1
 15993  1AD0                     l8662:	
 15994                           
 15995                           ;OverLoad_B1.c: 287: }
 15996                           ;OverLoad_B1.c: 288: if(lights == 2)
 15997  1AD0  0821               	movf	setLoad_StatusOff@lights,w
 15998  1AD1  3A02               	xorlw	2
 15999  1AD2  1D03               	skipz
 16000  1AD3  2ADA               	goto	l8666
 16001                           
 16002                           ;OverLoad_B1.c: 289: {
 16003                           ;OverLoad_B1.c: 290: Load->Lights2Status=0;
 16004  1AD4  086E               	movf	_Load,w
 16005  1AD5  3E44               	addlw	68
 16006  1AD6  0086               	movwf	6
 16007  1AD7  3002               	movlw	2	; select bank4/5
 16008  1AD8  0087               	movwf	7
 16009  1AD9  0181               	clrf	1
 16010  1ADA                     l8666:	
 16011                           
 16012                           ;OverLoad_B1.c: 291: }
 16013                           ;OverLoad_B1.c: 292: if(lights == 3)
 16014  1ADA  0821               	movf	setLoad_StatusOff@lights,w
 16015  1ADB  3A03               	xorlw	3
 16016  1ADC  1D03               	skipz
 16017  1ADD  0008               	return
 16018                           
 16019                           ;OverLoad_B1.c: 293: {
 16020                           ;OverLoad_B1.c: 294: Load->Lights3Status=0;
 16021  1ADE  086E               	movf	_Load,w
 16022  1ADF  3E45               	addlw	69
 16023  1AE0  0086               	movwf	6
 16024  1AE1  3002               	movlw	2	; select bank4/5
 16025  1AE2  0087               	movwf	7
 16026  1AE3  0181               	clrf	1
 16027  1AE4  0008               	return
 16028  1AE5                     __end_of_setLoad_StatusOff:	
 16029                           
 16030                           	psect	text93
 16031  176C                     __ptext93:	
 16032 ;; *************** function _setDimmerLights *****************
 16033 ;; Defined at:
 16034 ;;		line 321 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16035 ;; Parameters:    Size  Location     Type
 16036 ;;  lights          1    wreg     unsigned char 
 16037 ;;  status          1    4[BANK0 ] unsigned char 
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  lights          1    6[BANK0 ] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;		None               void
 16042 ;; Registers used:
 16043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        3 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    6
 16056 ;; This function calls:
 16057 ;;		_DimmerLightsPointSelect
 16058 ;;		_setLED
 16059 ;;		_setLoad_Count
 16060 ;;		_setLoad_StatusOn
 16061 ;; This function is called by:
 16062 ;;		_setDimmerLights_Main
 16063 ;;		_setControl_Lights_Table
 16064 ;; This function uses a non-reentrant model
 16065 ;;
 16066                           
 16067                           
 16068                           ;psect for function _setDimmerLights
 16069  176C                     _setDimmerLights:	
 16070                           
 16071                           ;incstack = 0
 16072                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16073                           ;setDimmerLights@lights stored from wreg
 16074  176C  0020               	movlb	0	; select bank0
 16075  176D  00A6               	movwf	setDimmerLights@lights
 16076                           
 16077                           ;Dimmer_B1.c: 323: DimmerLightsPointSelect(lights);
 16078  176E  0826               	movf	setDimmerLights@lights,w
 16079  176F  31A5  25D1  3197   	fcall	_DimmerLightsPointSelect
 16080                           
 16081                           ;Dimmer_B1.c: 324: Dimmer->Load=lights;
 16082  1772  0020               	movlb	0	; select bank0
 16083  1773  0826               	movf	setDimmerLights@lights,w
 16084  1774  00A5               	movwf	??_setDimmerLights
 16085  1775  0021               	movlb	1	; select bank1
 16086  1776  0A39               	incf	_Dimmer^(0+128),w
 16087  1777  0086               	movwf	6
 16088  1778  0187               	clrf	7
 16089  1779  0020               	movlb	0	; select bank0
 16090  177A  0825               	movf	??_setDimmerLights,w
 16091  177B  0081               	movwf	1
 16092                           
 16093                           ;Dimmer_B1.c: 325: if(status)
 16094  177C  0824               	movf	setDimmerLights@status,w
 16095  177D  1903               	btfsc	3,2
 16096  177E  2FD4               	goto	l8758
 16097                           
 16098                           ;Dimmer_B1.c: 326: {
 16099                           ;Dimmer_B1.c: 327: DimmerLights->Status=1;
 16100  177F  086C               	movf	_DimmerLights,w
 16101  1780  0086               	movwf	6
 16102  1781  3001               	movlw	1	; select bank2/3
 16103  1782  0087               	movwf	7
 16104  1783  1681               	bsf	1,5
 16105                           
 16106                           ;Dimmer_B1.c: 328: setLED(lights,0);
 16107  1784  01A2               	clrf	setLED@command
 16108  1785  0826               	movf	setDimmerLights@lights,w
 16109  1786  319F  2741  3197   	fcall	_setLED
 16110                           
 16111                           ;Dimmer_B1.c: 330: setLoad_Count(0);
 16112  1789  3000               	movlw	0
 16113  178A  31A6  260E  3197   	fcall	_setLoad_Count
 16114                           
 16115                           ;Dimmer_B1.c: 332: DimmerLights->Signal=1;
 16116  178D  0020               	movlb	0	; select bank0
 16117  178E  086C               	movf	_DimmerLights,w
 16118  178F  0086               	movwf	6
 16119  1790  3001               	movlw	1	; select bank2/3
 16120  1791  0087               	movwf	7
 16121  1792  1481               	bsf	1,1
 16122                           
 16123                           ;Dimmer_B1.c: 333: DimmerLights->DimmingTimeValue=3;
 16124  1793  3003               	movlw	3
 16125  1794  00A5               	movwf	??_setDimmerLights
 16126  1795  086C               	movf	_DimmerLights,w
 16127  1796  3E02               	addlw	2
 16128  1797  0086               	movwf	6
 16129  1798  3001               	movlw	1	; select bank2/3
 16130  1799  0087               	movwf	7
 16131  179A  0825               	movf	??_setDimmerLights,w
 16132  179B  0081               	movwf	1
 16133                           
 16134                           ;Dimmer_B1.c: 335: if(!DimmerLights->StatusFlag)
 16135  179C  086C               	movf	_DimmerLights,w
 16136  179D  0086               	movwf	6
 16137  179E  3001               	movlw	1	; select bank2/3
 16138  179F  0087               	movwf	7
 16139  17A0  1B01               	btfsc	1,6
 16140  17A1  0008               	return
 16141                           
 16142                           ;Dimmer_B1.c: 336: {
 16143                           ;Dimmer_B1.c: 337: DimmerLights->StatusFlag=1;
 16144  17A2  086C               	movf	_DimmerLights,w
 16145  17A3  0086               	movwf	6
 16146  17A4  3001               	movlw	1	; select bank2/3
 16147  17A5  0087               	movwf	7
 16148  17A6  1701               	bsf	1,6
 16149                           
 16150                           ;Dimmer_B1.c: 338: setLoad_StatusOn(lights,1);
 16151  17A7  01A0               	clrf	setLoad_StatusOn@command
 16152  17A8  0AA0               	incf	setLoad_StatusOn@command,f
 16153  17A9  0826               	movf	setDimmerLights@lights,w
 16154  17AA  319B  2316         	fcall	_setLoad_StatusOn
 16155                           
 16156                           ;Dimmer_B1.c: 339: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 16157  17AC  0021               	movlb	1	; select bank1
 16158  17AD  0868               	movf	_Memory^(0+128),w
 16159  17AE  3E22               	addlw	34
 16160  17AF  0086               	movwf	6
 16161  17B0  3002               	movlw	2	; select bank4/5
 16162  17B1  0087               	movwf	7
 16163  17B2  1081               	bcf	1,1
 16164  17B3  0868               	movf	_Memory^(0+128),w
 16165  17B4  3E23               	addlw	35
 16166  17B5  0086               	movwf	6
 16167  17B6  3002               	movlw	2	; select bank4/5
 16168  17B7  0087               	movwf	7
 16169  17B8  3000               	movlw	0
 16170  17B9  3FC0               	movwi [0]fsr1
 16171  17BA  3FC1               	movwi [1]fsr1
 16172                           
 16173                           ;Dimmer_B1.c: 342: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 16174  17BB  0020               	movlb	0	; select bank0
 16175  17BC  086C               	movf	_DimmerLights,w
 16176  17BD  3E05               	addlw	5
 16177  17BE  0086               	movwf	6
 16178  17BF  3001               	movlw	1	; select bank2/3
 16179  17C0  0087               	movwf	7
 16180  17C1  0801               	movf	1,w
 16181  17C2  00A5               	movwf	??_setDimmerLights
 16182  17C3  086C               	movf	_DimmerLights,w
 16183  17C4  3E04               	addlw	4
 16184  17C5  0086               	movwf	6
 16185  17C6  3001               	movlw	1	; select bank2/3
 16186  17C7  0087               	movwf	7
 16187  17C8  0825               	movf	??_setDimmerLights,w
 16188  17C9  0081               	movwf	1
 16189                           
 16190                           ;Dimmer_B1.c: 346: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 16191  17CA  3043               	movlw	67
 16192  17CB  00A5               	movwf	??_setDimmerLights
 16193  17CC  086C               	movf	_DimmerLights,w
 16194  17CD  3E04               	addlw	4
 16195  17CE  0086               	movwf	6
 16196  17CF  3001               	movlw	1	; select bank2/3
 16197  17D0  0087               	movwf	7
 16198  17D1  0825               	movf	??_setDimmerLights,w
 16199  17D2  0081               	movwf	1
 16200                           
 16201                           ;Dimmer_B1.c: 348: }
 16202                           ;Dimmer_B1.c: 349: }
 16203  17D3  0008               	return
 16204  17D4                     l8758:	
 16205                           
 16206                           ;Dimmer_B1.c: 350: else
 16207                           ;Dimmer_B1.c: 351: {
 16208                           ;Dimmer_B1.c: 352: DimmerLights->Status=0;
 16209  17D4  086C               	movf	_DimmerLights,w
 16210  17D5  0086               	movwf	6
 16211  17D6  3001               	movlw	1	; select bank2/3
 16212  17D7  0087               	movwf	7
 16213  17D8  1281               	bcf	1,5
 16214                           
 16215                           ;Dimmer_B1.c: 354: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16216  17D9  086C               	movf	_DimmerLights,w
 16217  17DA  3E06               	addlw	6
 16218  17DB  0086               	movwf	6
 16219  17DC  3001               	movlw	1	; select bank2/3
 16220  17DD  0087               	movwf	7
 16221  17DE  0801               	movf	1,w
 16222  17DF  00A5               	movwf	??_setDimmerLights
 16223  17E0  086C               	movf	_DimmerLights,w
 16224  17E1  3E04               	addlw	4
 16225  17E2  0086               	movwf	6
 16226  17E3  3001               	movlw	1	; select bank2/3
 16227  17E4  0087               	movwf	7
 16228  17E5  0825               	movf	??_setDimmerLights,w
 16229  17E6  0081               	movwf	1
 16230                           
 16231                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 16232  17E7  086C               	movf	_DimmerLights,w
 16233  17E8  0086               	movwf	6
 16234  17E9  3001               	movlw	1	; select bank2/3
 16235  17EA  0087               	movwf	7
 16236  17EB  1481               	bsf	1,1
 16237                           
 16238                           ;Dimmer_B1.c: 362: DimmerLights->AdjFlag=0;
 16239  17EC  086C               	movf	_DimmerLights,w
 16240  17ED  0086               	movwf	6
 16241  17EE  3001               	movlw	1	; select bank2/3
 16242  17EF  0087               	movwf	7
 16243  17F0  1181               	bcf	1,3
 16244                           
 16245                           ;Dimmer_B1.c: 363: DimmerLights->AdjStatus=0;
 16246  17F1  086C               	movf	_DimmerLights,w
 16247  17F2  0086               	movwf	6
 16248  17F3  3001               	movlw	1	; select bank2/3
 16249  17F4  0087               	movwf	7
 16250  17F5  1201               	bcf	1,4
 16251                           
 16252                           ;Dimmer_B1.c: 364: DimmerLights->DimmingTimeValue=3;
 16253  17F6  3003               	movlw	3
 16254  17F7  00A5               	movwf	??_setDimmerLights
 16255  17F8  086C               	movf	_DimmerLights,w
 16256  17F9  3E02               	addlw	2
 16257  17FA  0086               	movwf	6
 16258  17FB  3001               	movlw	1	; select bank2/3
 16259  17FC  0087               	movwf	7
 16260  17FD  0825               	movf	??_setDimmerLights,w
 16261  17FE  0081               	movwf	1
 16262  17FF  0008               	return
 16263  1800                     __end_of_setDimmerLights:	
 16264                           
 16265                           	psect	text94
 16266  1B16                     __ptext94:	
 16267 ;; *************** function _setLoad_StatusOn *****************
 16268 ;; Defined at:
 16269 ;;		line 262 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16270 ;; Parameters:    Size  Location     Type
 16271 ;;  lights          1    wreg     unsigned char 
 16272 ;;  command         1    0[BANK0 ] unsigned char 
 16273 ;; Auto vars:     Size  Location     Type
 16274 ;;  lights          1    1[BANK0 ] unsigned char 
 16275 ;; Return value:  Size  Location     Type
 16276 ;;		None               void
 16277 ;; Registers used:
 16278 ;;		wreg, fsr1l, fsr1h
 16279 ;; Tracked objects:
 16280 ;;		On entry : 0/0
 16281 ;;		On exit  : 0/0
 16282 ;;		Unchanged: 0/0
 16283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16284 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;Total ram usage:        2 bytes
 16289 ;; Hardware stack levels used:    1
 16290 ;; Hardware stack levels required when called:    4
 16291 ;; This function calls:
 16292 ;;		Nothing
 16293 ;; This function is called by:
 16294 ;;		_setDimmerLights
 16295 ;; This function uses a non-reentrant model
 16296 ;;
 16297                           
 16298                           
 16299                           ;psect for function _setLoad_StatusOn
 16300  1B16                     _setLoad_StatusOn:	
 16301                           
 16302                           ;incstack = 0
 16303                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 16304                           ;setLoad_StatusOn@lights stored from wreg
 16305  1B16  0020               	movlb	0	; select bank0
 16306  1B17  00A1               	movwf	setLoad_StatusOn@lights
 16307                           
 16308                           ;OverLoad_B1.c: 264: Load->GO=1;
 16309  1B18  086E               	movf	_Load,w
 16310  1B19  0086               	movwf	6
 16311  1B1A  3002               	movlw	2	; select bank4/5
 16312  1B1B  0087               	movwf	7
 16313  1B1C  1481               	bsf	1,1
 16314                           
 16315                           ;OverLoad_B1.c: 265: Load->StatusOn=command;
 16316  1B1D  086E               	movf	_Load,w
 16317  1B1E  3E46               	addlw	70
 16318  1B1F  0086               	movwf	6
 16319  1B20  3002               	movlw	2	; select bank4/5
 16320  1B21  0087               	movwf	7
 16321  1B22  0820               	movf	setLoad_StatusOn@command,w
 16322  1B23  1001               	bcf	1,0
 16323  1B24  1D03               	skipz
 16324  1B25  1401               	bsf	1,0
 16325                           
 16326                           ;OverLoad_B1.c: 267: if(lights == 1)
 16327  1B26  0821               	movf	setLoad_StatusOn@lights,w
 16328  1B27  3A01               	xorlw	1
 16329  1B28  1D03               	skipz
 16330  1B29  2B31               	goto	l8726
 16331                           
 16332                           ;OverLoad_B1.c: 268: {
 16333                           ;OverLoad_B1.c: 269: Load->Lights1Status=1;
 16334  1B2A  086E               	movf	_Load,w
 16335  1B2B  3E43               	addlw	67
 16336  1B2C  0086               	movwf	6
 16337  1B2D  3002               	movlw	2	; select bank4/5
 16338  1B2E  0087               	movwf	7
 16339  1B2F  0181               	clrf	1
 16340  1B30  0A81               	incf	1,f
 16341  1B31                     l8726:	
 16342                           
 16343                           ;OverLoad_B1.c: 270: }
 16344                           ;OverLoad_B1.c: 271: if(lights == 2)
 16345  1B31  0821               	movf	setLoad_StatusOn@lights,w
 16346  1B32  3A02               	xorlw	2
 16347  1B33  1D03               	skipz
 16348  1B34  2B3C               	goto	l8730
 16349                           
 16350                           ;OverLoad_B1.c: 272: {
 16351                           ;OverLoad_B1.c: 273: Load->Lights2Status=1;
 16352  1B35  086E               	movf	_Load,w
 16353  1B36  3E44               	addlw	68
 16354  1B37  0086               	movwf	6
 16355  1B38  3002               	movlw	2	; select bank4/5
 16356  1B39  0087               	movwf	7
 16357  1B3A  0181               	clrf	1
 16358  1B3B  0A81               	incf	1,f
 16359  1B3C                     l8730:	
 16360                           
 16361                           ;OverLoad_B1.c: 274: }
 16362                           ;OverLoad_B1.c: 275: if(lights == 3)
 16363  1B3C  0821               	movf	setLoad_StatusOn@lights,w
 16364  1B3D  3A03               	xorlw	3
 16365  1B3E  1D03               	skipz
 16366  1B3F  0008               	return
 16367                           
 16368                           ;OverLoad_B1.c: 276: {
 16369                           ;OverLoad_B1.c: 277: Load->Lights3Status=1;
 16370  1B40  086E               	movf	_Load,w
 16371  1B41  3E45               	addlw	69
 16372  1B42  0086               	movwf	6
 16373  1B43  3002               	movlw	2	; select bank4/5
 16374  1B44  0087               	movwf	7
 16375  1B45  0181               	clrf	1
 16376  1B46  0A81               	incf	1,f
 16377  1B47  0008               	return
 16378  1B48                     __end_of_setLoad_StatusOn:	
 16379                           
 16380                           	psect	text95
 16381  260E                     __ptext95:	
 16382 ;; *************** function _setLoad_Count *****************
 16383 ;; Defined at:
 16384 ;;		line 247 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16385 ;; Parameters:    Size  Location     Type
 16386 ;;  command         1    wreg     unsigned char 
 16387 ;; Auto vars:     Size  Location     Type
 16388 ;;  command         1    1[BANK0 ] unsigned char 
 16389 ;; Return value:  Size  Location     Type
 16390 ;;		None               void
 16391 ;; Registers used:
 16392 ;;		wreg, fsr1l, fsr1h
 16393 ;; Tracked objects:
 16394 ;;		On entry : 0/0
 16395 ;;		On exit  : 0/0
 16396 ;;		Unchanged: 0/0
 16397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;Total ram usage:        2 bytes
 16403 ;; Hardware stack levels used:    1
 16404 ;; Hardware stack levels required when called:    4
 16405 ;; This function calls:
 16406 ;;		Nothing
 16407 ;; This function is called by:
 16408 ;;		_setDimmerLights
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function _setLoad_Count
 16414  260E                     _setLoad_Count:	
 16415                           
 16416                           ;incstack = 0
 16417                           ; Regs used in _setLoad_Count: [wregfsr1]
 16418                           ;setLoad_Count@command stored from wreg
 16419  260E  0020               	movlb	0	; select bank0
 16420  260F  00A1               	movwf	setLoad_Count@command
 16421                           
 16422                           ;OverLoad_B1.c: 249: Load->Count=command;
 16423  2610  0821               	movf	setLoad_Count@command,w
 16424  2611  00A0               	movwf	??_setLoad_Count
 16425  2612  086E               	movf	_Load,w
 16426  2613  3E3A               	addlw	58
 16427  2614  0086               	movwf	6
 16428  2615  3002               	movlw	2	; select bank4/5
 16429  2616  0087               	movwf	7
 16430  2617  0820               	movf	??_setLoad_Count,w
 16431  2618  0081               	movwf	1
 16432                           
 16433                           ;OverLoad_B1.c: 250: Load->SafeCount=command;
 16434  2619  0821               	movf	setLoad_Count@command,w
 16435  261A  00A0               	movwf	??_setLoad_Count
 16436  261B  086E               	movf	_Load,w
 16437  261C  3E42               	addlw	66
 16438  261D  0086               	movwf	6
 16439  261E  3002               	movlw	2	; select bank4/5
 16440  261F  0087               	movwf	7
 16441  2620  0820               	movf	??_setLoad_Count,w
 16442  2621  0081               	movwf	1
 16443  2622  0008               	return
 16444  2623                     __end_of_setLoad_Count:	
 16445                           
 16446                           	psect	text96
 16447  1F41                     __ptext96:	
 16448 ;; *************** function _setLED *****************
 16449 ;; Defined at:
 16450 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;  led             1    wreg     unsigned char 
 16453 ;;  command         1    2[BANK0 ] unsigned char 
 16454 ;; Auto vars:     Size  Location     Type
 16455 ;;  led             1    3[BANK0 ] unsigned char 
 16456 ;; Return value:  Size  Location     Type
 16457 ;;		None               void
 16458 ;; Registers used:
 16459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16460 ;; Tracked objects:
 16461 ;;		On entry : 0/0
 16462 ;;		On exit  : 0/0
 16463 ;;		Unchanged: 0/0
 16464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16465 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;Total ram usage:        2 bytes
 16470 ;; Hardware stack levels used:    1
 16471 ;; Hardware stack levels required when called:    5
 16472 ;; This function calls:
 16473 ;;		_LedPointSelect
 16474 ;; This function is called by:
 16475 ;;		_setDimmerLights_ERROR
 16476 ;;		_setDimmerLights
 16477 ;;		_setLED_Initialization
 16478 ;;		_setLoad_Exceptions
 16479 ;;		_setOverTemp_Exceptions
 16480 ;;		_setPowerFault_Exceptions
 16481 ;;		_setSw_Initialization
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           
 16486                           ;psect for function _setLED
 16487  1F41                     _setLED:	
 16488                           
 16489                           ;incstack = 0
 16490                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16491                           ;setLED@led stored from wreg
 16492  1F41  0020               	movlb	0	; select bank0
 16493  1F42  00A3               	movwf	setLED@led
 16494                           
 16495                           ;LED_B1.c: 76: LedPointSelect(led);
 16496  1F43  0823               	movf	setLED@led,w
 16497  1F44  31A7  27DE  319F   	fcall	_LedPointSelect
 16498                           
 16499                           ;LED_B1.c: 77: if(command == 0)
 16500  1F47  0020               	movlb	0	; select bank0
 16501  1F48  08A2               	movf	setLED@command,f
 16502  1F49  1D03               	skipz
 16503  1F4A  2F5D               	goto	l8686
 16504                           
 16505                           ;LED_B1.c: 78: {
 16506                           ;LED_B1.c: 80: if(led == 1)
 16507  1F4B  0823               	movf	setLED@led,w
 16508  1F4C  3A01               	xorlw	1
 16509  1F4D  1D03               	skipz
 16510  1F4E  2F51               	goto	l8678
 16511                           
 16512                           ;LED_B1.c: 81: {
 16513                           ;LED_B1.c: 85: RA3=1;
 16514  1F4F  158C               	bsf	12,3	;volatile
 16515                           
 16516                           ;LED_B1.c: 87: }
 16517  1F50  0008               	return
 16518  1F51                     l8678:	
 16519                           
 16520                           ;LED_B1.c: 90: else if(led == 2)
 16521  1F51  0823               	movf	setLED@led,w
 16522  1F52  3A02               	xorlw	2
 16523  1F53  1D03               	skipz
 16524  1F54  2F57               	goto	l8682
 16525                           
 16526                           ;LED_B1.c: 91: {
 16527                           ;LED_B1.c: 95: RC7=1;
 16528  1F55  178E               	bsf	14,7	;volatile
 16529                           
 16530                           ;LED_B1.c: 97: }
 16531  1F56  0008               	return
 16532  1F57                     l8682:	
 16533                           
 16534                           ;LED_B1.c: 110: else if(led == 99)
 16535  1F57  0823               	movf	setLED@led,w
 16536  1F58  3A63               	xorlw	99
 16537  1F59  1D03               	skipz
 16538  1F5A  0008               	return
 16539                           
 16540                           ;LED_B1.c: 111: {
 16541                           ;LED_B1.c: 115: RB5=1;
 16542  1F5B  168D               	bsf	13,5	;volatile
 16543                           
 16544                           ;LED_B1.c: 117: }
 16545                           ;LED_B1.c: 119: }
 16546  1F5C  0008               	return
 16547  1F5D                     l8686:	
 16548                           
 16549                           ;LED_B1.c: 120: else if(command == 1)
 16550  1F5D  0822               	movf	setLED@command,w
 16551  1F5E  3A01               	xorlw	1
 16552  1F5F  1D03               	skipz
 16553  1F60  2F73               	goto	l8700
 16554                           
 16555                           ;LED_B1.c: 121: {
 16556                           ;LED_B1.c: 123: if(led == 1)
 16557  1F61  0823               	movf	setLED@led,w
 16558  1F62  3A01               	xorlw	1
 16559  1F63  1D03               	skipz
 16560  1F64  2F67               	goto	l8692
 16561                           
 16562                           ;LED_B1.c: 124: {
 16563                           ;LED_B1.c: 128: RA3=0;
 16564  1F65  118C               	bcf	12,3	;volatile
 16565                           
 16566                           ;LED_B1.c: 130: }
 16567  1F66  0008               	return
 16568  1F67                     l8692:	
 16569                           
 16570                           ;LED_B1.c: 133: else if(led == 2)
 16571  1F67  0823               	movf	setLED@led,w
 16572  1F68  3A02               	xorlw	2
 16573  1F69  1D03               	skipz
 16574  1F6A  2F6D               	goto	l8696
 16575                           
 16576                           ;LED_B1.c: 134: {
 16577                           ;LED_B1.c: 138: RC7=0;
 16578  1F6B  138E               	bcf	14,7	;volatile
 16579                           
 16580                           ;LED_B1.c: 140: }
 16581  1F6C  0008               	return
 16582  1F6D                     l8696:	
 16583                           
 16584                           ;LED_B1.c: 153: else if(led == 99)
 16585  1F6D  0823               	movf	setLED@led,w
 16586  1F6E  3A63               	xorlw	99
 16587  1F6F  1D03               	skipz
 16588  1F70  0008               	return
 16589                           
 16590                           ;LED_B1.c: 154: {
 16591                           ;LED_B1.c: 158: RB5=0;
 16592  1F71  128D               	bcf	13,5	;volatile
 16593                           
 16594                           ;LED_B1.c: 160: }
 16595                           ;LED_B1.c: 162: }
 16596  1F72  0008               	return
 16597  1F73                     l8700:	
 16598                           
 16599                           ;LED_B1.c: 163: else if(command == 10)
 16600  1F73  0822               	movf	setLED@command,w
 16601  1F74  3A0A               	xorlw	10
 16602  1F75  1D03               	skipz
 16603  1F76  2F95               	goto	l8716
 16604                           
 16605                           ;LED_B1.c: 164: {
 16606                           ;LED_B1.c: 165: LED->GO=0;
 16607  1F77  0021               	movlb	1	; select bank1
 16608  1F78  083B               	movf	_LED^(0+128),w
 16609  1F79  0086               	movwf	6
 16610  1F7A  0187               	clrf	7
 16611  1F7B  1081               	bcf	1,1
 16612                           
 16613                           ;LED_B1.c: 166: LED->Time=0;
 16614  1F7C  0A3B               	incf	_LED^(0+128),w
 16615  1F7D  0086               	movwf	6
 16616  1F7E  0187               	clrf	7
 16617  1F7F  3000               	movlw	0
 16618  1F80  3FC0               	movwi [0]fsr1
 16619  1F81  3FC1               	movwi [1]fsr1
 16620                           
 16621                           ;LED_B1.c: 168: if(led == 1)
 16622  1F82  0020               	movlb	0	; select bank0
 16623  1F83  0823               	movf	setLED@led,w
 16624  1F84  3A01               	xorlw	1
 16625  1F85  1D03               	skipz
 16626  1F86  2F89               	goto	l8708
 16627                           
 16628                           ;LED_B1.c: 169: {
 16629                           ;LED_B1.c: 173: RA3=1;
 16630  1F87  158C               	bsf	12,3	;volatile
 16631                           
 16632                           ;LED_B1.c: 175: }
 16633  1F88  0008               	return
 16634  1F89                     l8708:	
 16635                           
 16636                           ;LED_B1.c: 178: else if(led == 2)
 16637  1F89  0823               	movf	setLED@led,w
 16638  1F8A  3A02               	xorlw	2
 16639  1F8B  1D03               	skipz
 16640  1F8C  2F8F               	goto	l8712
 16641                           
 16642                           ;LED_B1.c: 179: {
 16643                           ;LED_B1.c: 183: RC7=1;
 16644  1F8D  178E               	bsf	14,7	;volatile
 16645                           
 16646                           ;LED_B1.c: 185: }
 16647  1F8E  0008               	return
 16648  1F8F                     l8712:	
 16649                           
 16650                           ;LED_B1.c: 198: else if(led == 99)
 16651  1F8F  0823               	movf	setLED@led,w
 16652  1F90  3A63               	xorlw	99
 16653  1F91  1D03               	skipz
 16654  1F92  0008               	return
 16655                           
 16656                           ;LED_B1.c: 199: {
 16657                           ;LED_B1.c: 203: RB5=1;
 16658  1F93  168D               	bsf	13,5	;volatile
 16659                           
 16660                           ;LED_B1.c: 205: }
 16661                           ;LED_B1.c: 207: }
 16662  1F94  0008               	return
 16663  1F95                     l8716:	
 16664                           
 16665                           ;LED_B1.c: 208: else if(command == 11)
 16666  1F95  0822               	movf	setLED@command,w
 16667  1F96  3A0B               	xorlw	11
 16668  1F97  1D03               	skipz
 16669  1F98  0008               	return
 16670                           
 16671                           ;LED_B1.c: 209: {
 16672                           ;LED_B1.c: 210: LED->GO=1;
 16673  1F99  0021               	movlb	1	; select bank1
 16674  1F9A  083B               	movf	_LED^(0+128),w
 16675  1F9B  0086               	movwf	6
 16676  1F9C  0187               	clrf	7
 16677  1F9D  1481               	bsf	1,1
 16678  1F9E  0008               	return
 16679  1F9F                     __end_of_setLED:	
 16680                           
 16681                           	psect	text97
 16682  27DE                     __ptext97:	
 16683 ;; *************** function _LedPointSelect *****************
 16684 ;; Defined at:
 16685 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  led             1    wreg     unsigned char 
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;  led             1    1[BANK0 ] unsigned char 
 16690 ;; Return value:  Size  Location     Type
 16691 ;;		None               void
 16692 ;; Registers used:
 16693 ;;		wreg
 16694 ;; Tracked objects:
 16695 ;;		On entry : 0/0
 16696 ;;		On exit  : 0/0
 16697 ;;		Unchanged: 0/0
 16698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;Total ram usage:        2 bytes
 16704 ;; Hardware stack levels used:    1
 16705 ;; Hardware stack levels required when called:    4
 16706 ;; This function calls:
 16707 ;;		Nothing
 16708 ;; This function is called by:
 16709 ;;		_setLED_Initialization
 16710 ;;		_setLED
 16711 ;;		_setLED_Main
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           
 16716                           ;psect for function _LedPointSelect
 16717  27DE                     _LedPointSelect:	
 16718                           
 16719                           ;incstack = 0
 16720                           ; Regs used in _LedPointSelect: [wreg]
 16721                           ;LedPointSelect@led stored from wreg
 16722  27DE  0020               	movlb	0	; select bank0
 16723  27DF  00A1               	movwf	LedPointSelect@led
 16724                           
 16725                           ;LED_B1.c: 10: if(led == 1)
 16726  27E0  0821               	movf	LedPointSelect@led,w
 16727  27E1  3A01               	xorlw	1
 16728  27E2  1D03               	skipz
 16729  27E3  2FEA               	goto	l6430
 16730                           
 16731                           ;LED_B1.c: 11: {
 16732                           ;LED_B1.c: 12: LED=&VarLED1;
 16733  27E4  30D9               	movlw	_VarLED1& (0+255)
 16734  27E5  00A0               	movwf	??_LedPointSelect
 16735  27E6  0820               	movf	??_LedPointSelect,w
 16736  27E7  0021               	movlb	1	; select bank1
 16737  27E8  00BB               	movwf	_LED^(0+128)
 16738                           
 16739                           ;LED_B1.c: 13: }
 16740  27E9  0008               	return
 16741  27EA                     l6430:	
 16742                           
 16743                           ;LED_B1.c: 16: else if(led == 2)
 16744  27EA  0020               	movlb	0	; select bank0
 16745  27EB  0821               	movf	LedPointSelect@led,w
 16746  27EC  3A02               	xorlw	2
 16747  27ED  1D03               	skipz
 16748  27EE  2FF5               	goto	l6434
 16749                           
 16750                           ;LED_B1.c: 17: {
 16751                           ;LED_B1.c: 18: LED=&VarLED2;
 16752  27EF  30DD               	movlw	_VarLED2& (0+255)
 16753  27F0  00A0               	movwf	??_LedPointSelect
 16754  27F1  0820               	movf	??_LedPointSelect,w
 16755  27F2  0021               	movlb	1	; select bank1
 16756  27F3  00BB               	movwf	_LED^(0+128)
 16757                           
 16758                           ;LED_B1.c: 19: }
 16759  27F4  0008               	return
 16760  27F5                     l6434:	
 16761                           
 16762                           ;LED_B1.c: 28: else if(led == 99)
 16763  27F5  0020               	movlb	0	; select bank0
 16764  27F6  0821               	movf	LedPointSelect@led,w
 16765  27F7  3A63               	xorlw	99
 16766  27F8  1D03               	skipz
 16767  27F9  0008               	return
 16768                           
 16769                           ;LED_B1.c: 29: {
 16770                           ;LED_B1.c: 30: LED=&VarErrLED;
 16771  27FA  30D5               	movlw	_VarErrLED& (0+255)
 16772  27FB  00A0               	movwf	??_LedPointSelect
 16773  27FC  0820               	movf	??_LedPointSelect,w
 16774  27FD  0021               	movlb	1	; select bank1
 16775  27FE  00BB               	movwf	_LED^(0+128)
 16776  27FF  0008               	return
 16777  2800                     __end_of_LedPointSelect:	
 16778                           
 16779                           	psect	text98
 16780  2712                     __ptext98:	
 16781 ;; *************** function _DimmerLights_Close *****************
 16782 ;; Defined at:
 16783 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16784 ;; Parameters:    Size  Location     Type
 16785 ;;		None
 16786 ;; Auto vars:     Size  Location     Type
 16787 ;;		None
 16788 ;; Return value:  Size  Location     Type
 16789 ;;		None               void
 16790 ;; Registers used:
 16791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16792 ;; Tracked objects:
 16793 ;;		On entry : 0/0
 16794 ;;		On exit  : 0/0
 16795 ;;		Unchanged: 0/0
 16796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;Total ram usage:        0 bytes
 16802 ;; Hardware stack levels used:    1
 16803 ;; Hardware stack levels required when called:    5
 16804 ;; This function calls:
 16805 ;;		_getDimmerLights_StatusFlag
 16806 ;;		_setLoad_GO
 16807 ;; This function is called by:
 16808 ;;		_DimmerLights_Main
 16809 ;; This function uses a non-reentrant model
 16810 ;;
 16811                           
 16812                           
 16813                           ;psect for function _DimmerLights_Close
 16814  2712                     _DimmerLights_Close:	
 16815                           
 16816                           ;Dimmer_B1.c: 94: if(Dimmer->Detect)
 16817                           
 16818                           ;incstack = 0
 16819                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16820  2712  0021               	movlb	1	; select bank1
 16821  2713  0839               	movf	_Dimmer^(0+128),w
 16822  2714  0086               	movwf	6
 16823  2715  0187               	clrf	7
 16824  2716  1C01               	btfss	1,0
 16825  2717  0008               	return
 16826                           
 16827                           ;Dimmer_B1.c: 95: {
 16828                           ;Dimmer_B1.c: 96: Dimmer->Detect=0;
 16829  2718  0839               	movf	_Dimmer^(0+128),w
 16830  2719  0086               	movwf	6
 16831  271A  0187               	clrf	7
 16832  271B  1001               	bcf	1,0
 16833                           
 16834                           ;Dimmer_B1.c: 97: if(!getDimmerLights_StatusFlag())
 16835  271C  31A6  2639  31A7   	fcall	_getDimmerLights_StatusFlag
 16836  271F  3800               	iorlw	0
 16837  2720  1D03               	skipz
 16838  2721  0008               	return
 16839                           
 16840                           ;Dimmer_B1.c: 98: {
 16841                           ;Dimmer_B1.c: 99: setLoad_GO(0);
 16842  2722  3000               	movlw	0
 16843  2723  31A4  2448         	fcall	_setLoad_GO
 16844                           
 16845                           ;Dimmer_B1.c: 100: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16846  2725  0021               	movlb	1	; select bank1
 16847  2726  0868               	movf	_Memory^(0+128),w
 16848  2727  3E22               	addlw	34
 16849  2728  0086               	movwf	6
 16850  2729  3002               	movlw	2	; select bank4/5
 16851  272A  0087               	movwf	7
 16852  272B  1481               	bsf	1,1
 16853  272C  0008               	return
 16854  272D                     __end_of_DimmerLights_Close:	
 16855                           
 16856                           	psect	text99
 16857  2448                     __ptext99:	
 16858 ;; *************** function _setLoad_GO *****************
 16859 ;; Defined at:
 16860 ;;		line 258 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16861 ;; Parameters:    Size  Location     Type
 16862 ;;  command         1    wreg     unsigned char 
 16863 ;; Auto vars:     Size  Location     Type
 16864 ;;  command         1    0[BANK0 ] unsigned char 
 16865 ;; Return value:  Size  Location     Type
 16866 ;;		None               void
 16867 ;; Registers used:
 16868 ;;		wreg, fsr1l, fsr1h
 16869 ;; Tracked objects:
 16870 ;;		On entry : 0/0
 16871 ;;		On exit  : 0/0
 16872 ;;		Unchanged: 0/0
 16873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16877 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16878 ;;Total ram usage:        1 bytes
 16879 ;; Hardware stack levels used:    1
 16880 ;; Hardware stack levels required when called:    4
 16881 ;; This function calls:
 16882 ;;		Nothing
 16883 ;; This function is called by:
 16884 ;;		_DimmerLights_Close
 16885 ;; This function uses a non-reentrant model
 16886 ;;
 16887                           
 16888                           
 16889                           ;psect for function _setLoad_GO
 16890  2448                     _setLoad_GO:	
 16891                           
 16892                           ;incstack = 0
 16893                           ; Regs used in _setLoad_GO: [wregfsr1]
 16894                           ;setLoad_GO@command stored from wreg
 16895  2448  0020               	movlb	0	; select bank0
 16896  2449  00A0               	movwf	setLoad_GO@command
 16897                           
 16898                           ;OverLoad_B1.c: 260: Load->GO=command;
 16899  244A  086E               	movf	_Load,w
 16900  244B  0086               	movwf	6
 16901  244C  3002               	movlw	2	; select bank4/5
 16902  244D  0087               	movwf	7
 16903  244E  0820               	movf	setLoad_GO@command,w
 16904  244F  1081               	bcf	1,1
 16905  2450  1D03               	skipz
 16906  2451  1481               	bsf	1,1
 16907  2452  0008               	return
 16908  2453                     __end_of_setLoad_GO:	
 16909                           
 16910                           	psect	text100
 16911  2639                     __ptext100:	
 16912 ;; *************** function _getDimmerLights_StatusFlag *****************
 16913 ;; Defined at:
 16914 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;		None
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  Status          1    1[BANK0 ] unsigned char 
 16919 ;; Return value:  Size  Location     Type
 16920 ;;                  1    wreg      unsigned char 
 16921 ;; Registers used:
 16922 ;;		wreg, fsr1l, fsr1h, status,2
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        3 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    4
 16935 ;; This function calls:
 16936 ;;		Nothing
 16937 ;; This function is called by:
 16938 ;;		_DimmerLights_Close
 16939 ;;		_DimmerLights_Exceptions
 16940 ;; This function uses a non-reentrant model
 16941 ;;
 16942                           
 16943                           
 16944                           ;psect for function _getDimmerLights_StatusFlag
 16945  2639                     _getDimmerLights_StatusFlag:	
 16946                           
 16947                           ;Dimmer_B1.c: 201: char Status=0;
 16948                           
 16949                           ;incstack = 0
 16950                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16951  2639  0020               	movlb	0	; select bank0
 16952  263A  01A1               	clrf	getDimmerLights_StatusFlag@Status
 16953                           
 16954                           ;Dimmer_B1.c: 208: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 16955  263B  01A2               	clrf	_getDimmerLights_StatusFlag$1814
 16956  263C  0AA2               	incf	_getDimmerLights_StatusFlag$1814,f
 16957  263D  0879               	movf	_DimmerLights11,w
 16958  263E  0086               	movwf	6
 16959  263F  3001               	movlw	1	; select bank2/3
 16960  2640  0087               	movwf	7
 16961  2641  1B01               	btfsc	1,6
 16962  2642  2E49               	goto	l6698
 16963  2643  087A               	movf	_DimmerLights22,w
 16964  2644  0086               	movwf	6
 16965  2645  3001               	movlw	1	; select bank2/3
 16966  2646  0087               	movwf	7
 16967  2647  1F01               	btfss	1,6
 16968  2648  01A2               	clrf	_getDimmerLights_StatusFlag$1814
 16969  2649                     l6698:	
 16970  2649  0822               	movf	_getDimmerLights_StatusFlag$1814,w
 16971  264A  00A0               	movwf	??_getDimmerLights_StatusFlag
 16972  264B  0820               	movf	??_getDimmerLights_StatusFlag,w
 16973  264C  00A1               	movwf	getDimmerLights_StatusFlag@Status
 16974                           
 16975                           ;Dimmer_B1.c: 215: return Status;
 16976  264D  0821               	movf	getDimmerLights_StatusFlag@Status,w
 16977  264E  0008               	return
 16978  264F                     __end_of_getDimmerLights_StatusFlag:	
 16979                           
 16980                           	psect	text101
 16981  25F9                     __ptext101:	
 16982 ;; *************** function _DimmerLights_Initialization *****************
 16983 ;; Defined at:
 16984 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16985 ;; Parameters:    Size  Location     Type
 16986 ;;		None
 16987 ;; Auto vars:     Size  Location     Type
 16988 ;;		None
 16989 ;; Return value:  Size  Location     Type
 16990 ;;		None               void
 16991 ;; Registers used:
 16992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16993 ;; Tracked objects:
 16994 ;;		On entry : 0/0
 16995 ;;		On exit  : 0/0
 16996 ;;		Unchanged: 0/0
 16997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17002 ;;Total ram usage:        1 bytes
 17003 ;; Hardware stack levels used:    1
 17004 ;; Hardware stack levels required when called:    6
 17005 ;; This function calls:
 17006 ;;		_Dimmer_Initialization
 17007 ;;		_setDimmerLights_Initialization
 17008 ;; This function is called by:
 17009 ;;		_main
 17010 ;; This function uses a non-reentrant model
 17011 ;;
 17012                           
 17013                           
 17014                           ;psect for function _DimmerLights_Initialization
 17015  25F9                     _DimmerLights_Initialization:	
 17016                           
 17017                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 17018                           
 17019                           ;incstack = 0
 17020                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17021  25F9  302E               	movlw	_DimmerLights1& (0+255)
 17022  25FA  0020               	movlb	0	; select bank0
 17023  25FB  00A4               	movwf	??_DimmerLights_Initialization
 17024  25FC  0824               	movf	??_DimmerLights_Initialization,w
 17025  25FD  00F9               	movwf	_DimmerLights11
 17026                           
 17027                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 17028  25FE  3001               	movlw	1
 17029  25FF  3199  21F8  31A5   	fcall	_setDimmerLights_Initialization
 17030                           
 17031                           ;Dimmer_B1.c: 40: DimmerLights22=&DimmerLights2;
 17032  2602  303B               	movlw	_DimmerLights2& (0+255)
 17033  2603  0020               	movlb	0	; select bank0
 17034  2604  00A4               	movwf	??_DimmerLights_Initialization
 17035  2605  0824               	movf	??_DimmerLights_Initialization,w
 17036  2606  00FA               	movwf	_DimmerLights22
 17037                           
 17038                           ;Dimmer_B1.c: 41: setDimmerLights_Initialization(2);
 17039  2607  3002               	movlw	2
 17040  2608  3199  21F8  31A5   	fcall	_setDimmerLights_Initialization
 17041                           
 17042                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 17043  260B  31A3  23C7         	fcall	_Dimmer_Initialization
 17044  260D  0008               	return
 17045  260E                     __end_of_DimmerLights_Initialization:	
 17046                           
 17047                           	psect	text102
 17048  19F8                     __ptext102:	
 17049 ;; *************** function _setDimmerLights_Initialization *****************
 17050 ;; Defined at:
 17051 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;  lights          1    wreg     unsigned char 
 17054 ;; Auto vars:     Size  Location     Type
 17055 ;;  lights          1    3[BANK0 ] unsigned char 
 17056 ;; Return value:  Size  Location     Type
 17057 ;;		None               void
 17058 ;; Registers used:
 17059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17060 ;; Tracked objects:
 17061 ;;		On entry : 0/0
 17062 ;;		On exit  : 0/0
 17063 ;;		Unchanged: 0/0
 17064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;Total ram usage:        2 bytes
 17070 ;; Hardware stack levels used:    1
 17071 ;; Hardware stack levels required when called:    5
 17072 ;; This function calls:
 17073 ;;		_DimmerLightsPointSelect
 17074 ;; This function is called by:
 17075 ;;		_DimmerLights_Initialization
 17076 ;; This function uses a non-reentrant model
 17077 ;;
 17078                           
 17079                           
 17080                           ;psect for function _setDimmerLights_Initialization
 17081  19F8                     _setDimmerLights_Initialization:	
 17082                           
 17083                           ;incstack = 0
 17084                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 17085                           ;setDimmerLights_Initialization@lights stored from wreg
 17086  19F8  0020               	movlb	0	; select bank0
 17087  19F9  00A3               	movwf	setDimmerLights_Initialization@lights
 17088                           
 17089                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 17090  19FA  0823               	movf	setDimmerLights_Initialization@lights,w
 17091  19FB  31A5  25D1         	fcall	_DimmerLightsPointSelect
 17092                           
 17093                           ;Dimmer_B1.c: 57: DimmerLights->Clear=1;
 17094  19FD  0020               	movlb	0	; select bank0
 17095  19FE  086C               	movf	_DimmerLights,w
 17096  19FF  3E0C               	addlw	12
 17097  1A00  0086               	movwf	6
 17098  1A01  3001               	movlw	1	; select bank2/3
 17099  1A02  0087               	movwf	7
 17100  1A03  1401               	bsf	1,0
 17101                           
 17102                           ;Dimmer_B1.c: 63: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 17103  1A04  3043               	movlw	67
 17104  1A05  00A2               	movwf	??_setDimmerLights_Initialization
 17105  1A06  086C               	movf	_DimmerLights,w
 17106  1A07  3E05               	addlw	5
 17107  1A08  0086               	movwf	6
 17108  1A09  3001               	movlw	1	; select bank2/3
 17109  1A0A  0087               	movwf	7
 17110  1A0B  0822               	movf	??_setDimmerLights_Initialization,w
 17111  1A0C  0081               	movwf	1
 17112                           
 17113                           ;Dimmer_B1.c: 64: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 17114  1A0D  3078               	movlw	120
 17115  1A0E  00A2               	movwf	??_setDimmerLights_Initialization
 17116  1A0F  086C               	movf	_DimmerLights,w
 17117  1A10  3E06               	addlw	6
 17118  1A11  0086               	movwf	6
 17119  1A12  3001               	movlw	1	; select bank2/3
 17120  1A13  0087               	movwf	7
 17121  1A14  0822               	movf	??_setDimmerLights_Initialization,w
 17122  1A15  0081               	movwf	1
 17123                           
 17124                           ;Dimmer_B1.c: 74: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 17125  1A16  086C               	movf	_DimmerLights,w
 17126  1A17  3E06               	addlw	6
 17127  1A18  0086               	movwf	6
 17128  1A19  3001               	movlw	1	; select bank2/3
 17129  1A1A  0087               	movwf	7
 17130  1A1B  0801               	movf	1,w
 17131  1A1C  00A2               	movwf	??_setDimmerLights_Initialization
 17132  1A1D  086C               	movf	_DimmerLights,w
 17133  1A1E  3E04               	addlw	4
 17134  1A1F  0086               	movwf	6
 17135  1A20  3001               	movlw	1	; select bank2/3
 17136  1A21  0087               	movwf	7
 17137  1A22  0822               	movf	??_setDimmerLights_Initialization,w
 17138  1A23  0081               	movwf	1
 17139  1A24  0008               	return
 17140  1A25                     __end_of_setDimmerLights_Initialization:	
 17141                           
 17142                           	psect	text103
 17143  23C7                     __ptext103:	
 17144 ;; *************** function _Dimmer_Initialization *****************
 17145 ;; Defined at:
 17146 ;;		line 509 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;		None
 17149 ;; Auto vars:     Size  Location     Type
 17150 ;;		None
 17151 ;; Return value:  Size  Location     Type
 17152 ;;		None               void
 17153 ;; Registers used:
 17154 ;;		wreg
 17155 ;; Tracked objects:
 17156 ;;		On entry : 0/0
 17157 ;;		On exit  : 0/0
 17158 ;;		Unchanged: 0/0
 17159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17164 ;;Total ram usage:        1 bytes
 17165 ;; Hardware stack levels used:    1
 17166 ;; Hardware stack levels required when called:    4
 17167 ;; This function calls:
 17168 ;;		Nothing
 17169 ;; This function is called by:
 17170 ;;		_DimmerLights_Initialization
 17171 ;; This function uses a non-reentrant model
 17172 ;;
 17173                           
 17174                           
 17175                           ;psect for function _Dimmer_Initialization
 17176  23C7                     _Dimmer_Initialization:	
 17177                           
 17178                           ;Dimmer_B1.c: 511: Dimmer=&Dimmer1;
 17179                           
 17180                           ;incstack = 0
 17181                           ; Regs used in _Dimmer_Initialization: [wreg]
 17182  23C7  30E1               	movlw	_Dimmer1& (0+255)
 17183  23C8  0020               	movlb	0	; select bank0
 17184  23C9  00A0               	movwf	??_Dimmer_Initialization
 17185  23CA  0820               	movf	??_Dimmer_Initialization,w
 17186  23CB  0021               	movlb	1	; select bank1
 17187  23CC  00B9               	movwf	_Dimmer^(0+128)
 17188  23CD  0008               	return
 17189  23CE                     __end_of_Dimmer_Initialization:	
 17190                           
 17191                           	psect	text104
 17192  23EB                     __ptext104:	
 17193 ;; *************** function _DelayOff_Main *****************
 17194 ;; Defined at:
 17195 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17196 ;; Parameters:    Size  Location     Type
 17197 ;;		None
 17198 ;; Auto vars:     Size  Location     Type
 17199 ;;		None
 17200 ;; Return value:  Size  Location     Type
 17201 ;;		None               void
 17202 ;; Registers used:
 17203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17204 ;; Tracked objects:
 17205 ;;		On entry : 0/0
 17206 ;;		On exit  : 0/0
 17207 ;;		Unchanged: 0/0
 17208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;Total ram usage:        0 bytes
 17214 ;; Hardware stack levels used:    1
 17215 ;; Hardware stack levels required when called:    7
 17216 ;; This function calls:
 17217 ;;		_DlyOff_Main
 17218 ;; This function is called by:
 17219 ;;		_main
 17220 ;; This function uses a non-reentrant model
 17221 ;;
 17222                           
 17223                           
 17224                           ;psect for function _DelayOff_Main
 17225  23EB                     _DelayOff_Main:	
 17226                           
 17227                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 17228                           
 17229                           ;incstack = 0
 17230                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17231  23EB  3001               	movlw	1
 17232  23EC  3194  243C  31A3   	fcall	_DlyOff_Main
 17233                           
 17234                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 17235  23EF  3002               	movlw	2
 17236  23F0  3194  243C         	fcall	_DlyOff_Main
 17237  23F2  0008               	return
 17238  23F3                     __end_of_DelayOff_Main:	
 17239                           
 17240                           	psect	text105
 17241  143C                     __ptext105:	
 17242 ;; *************** function _DlyOff_Main *****************
 17243 ;; Defined at:
 17244 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;  sw              1    wreg     unsigned char 
 17247 ;; Auto vars:     Size  Location     Type
 17248 ;;  sw              1   12[BANK0 ] unsigned char 
 17249 ;; Return value:  Size  Location     Type
 17250 ;;		None               void
 17251 ;; Registers used:
 17252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;Total ram usage:        3 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; Hardware stack levels required when called:    6
 17265 ;; This function calls:
 17266 ;;		_DelayOffPointSelect
 17267 ;;		_setBuz
 17268 ;;		_setDimmerLights_Switch
 17269 ;;		_setDimmerLights_Trigger
 17270 ;;		_setRFSW_Status
 17271 ;;		_setRF_DimmerLights
 17272 ;;		_setSw_Status
 17273 ;;		_setTxData
 17274 ;; This function is called by:
 17275 ;;		_DelayOff_Main
 17276 ;; This function uses a non-reentrant model
 17277 ;;
 17278                           
 17279                           
 17280                           ;psect for function _DlyOff_Main
 17281  143C                     _DlyOff_Main:	
 17282                           
 17283                           ;incstack = 0
 17284                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17285                           ;DlyOff_Main@sw stored from wreg
 17286  143C  0020               	movlb	0	; select bank0
 17287  143D  00AC               	movwf	DlyOff_Main@sw
 17288                           
 17289                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 17290  143E  082C               	movf	DlyOff_Main@sw,w
 17291  143F  31A6  2665  3194   	fcall	_DelayOffPointSelect
 17292                           
 17293                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 17294  1442  0021               	movlb	1	; select bank1
 17295  1443  0838               	movf	_DelayOff^(0+128),w
 17296  1444  0086               	movwf	6
 17297  1445  0187               	clrf	7
 17298  1446  1C81               	btfss	1,1
 17299  1447  0008               	return
 17300                           
 17301                           ;DelayOff_B1.c: 70: {
 17302                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 17303  1448  0838               	movf	_DelayOff^(0+128),w
 17304  1449  3E02               	addlw	2
 17305  144A  0086               	movwf	6
 17306  144B  0187               	clrf	7
 17307  144C  3001               	movlw	1
 17308  144D  0781               	addwf	1,f
 17309  144E  3141               	addfsr 1,1
 17310  144F  1803               	skipnc
 17311  1450  0A81               	incf	1,f
 17312                           
 17313                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 17314  1451  0838               	movf	_DelayOff^(0+128),w
 17315  1452  3E02               	addlw	2
 17316  1453  0086               	movwf	6
 17317  1454  0187               	clrf	7
 17318  1455  3F40               	moviw [0]fsr1
 17319  1456  0020               	movlb	0	; select bank0
 17320  1457  00AA               	movwf	??_DlyOff_Main
 17321  1458  3F41               	moviw [1]fsr1
 17322  1459  00AB               	movwf	??_DlyOff_Main+1
 17323  145A  3016               	movlw	22
 17324  145B  022B               	subwf	??_DlyOff_Main+1,w
 17325  145C  3012               	movlw	18
 17326  145D  1903               	skipnz
 17327  145E  022A               	subwf	??_DlyOff_Main,w
 17328  145F  1C03               	skipc
 17329  1460  0008               	return
 17330                           
 17331                           ;DelayOff_B1.c: 73: {
 17332                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 17333  1461  0021               	movlb	1	; select bank1
 17334  1462  0838               	movf	_DelayOff^(0+128),w
 17335  1463  3E02               	addlw	2
 17336  1464  0086               	movwf	6
 17337  1465  0187               	clrf	7
 17338  1466  3000               	movlw	0
 17339  1467  3FC0               	movwi [0]fsr1
 17340  1468  3FC1               	movwi [1]fsr1
 17341                           
 17342                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 17343  1469  3001               	movlw	1
 17344  146A  0020               	movlb	0	; select bank0
 17345  146B  00AA               	movwf	??_DlyOff_Main
 17346  146C  0021               	movlb	1	; select bank1
 17347  146D  0838               	movf	_DelayOff^(0+128),w
 17348  146E  3E04               	addlw	4
 17349  146F  0086               	movwf	6
 17350  1470  0187               	clrf	7
 17351  1471  0020               	movlb	0	; select bank0
 17352  1472  082A               	movf	??_DlyOff_Main,w
 17353  1473  0781               	addwf	1,f
 17354                           
 17355                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 17356  1474  0021               	movlb	1	; select bank1
 17357  1475  0838               	movf	_DelayOff^(0+128),w
 17358  1476  3E04               	addlw	4
 17359  1477  0086               	movwf	6
 17360  1478  0187               	clrf	7
 17361  1479  0A38               	incf	_DelayOff^(0+128),w
 17362  147A  0084               	movwf	4
 17363  147B  0185               	clrf	5
 17364  147C  0800               	movf	0,w
 17365  147D  0201               	subwf	1,w
 17366  147E  1C03               	skipc
 17367  147F  0008               	return
 17368                           
 17369                           ;DelayOff_B1.c: 77: {
 17370                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 17371  1480  0838               	movf	_DelayOff^(0+128),w
 17372  1481  3E04               	addlw	4
 17373  1482  0086               	movwf	6
 17374  1483  0187               	clrf	7
 17375  1484  0181               	clrf	1
 17376                           
 17377                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 17378  1485  0838               	movf	_DelayOff^(0+128),w
 17379  1486  0086               	movwf	6
 17380  1487  0187               	clrf	7
 17381  1488  1081               	bcf	1,1
 17382                           
 17383                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 17384  1489  0020               	movlb	0	; select bank0
 17385  148A  01A2               	clrf	setSw_Status@command
 17386  148B  082C               	movf	DlyOff_Main@sw,w
 17387  148C  31A5  2531  3194   	fcall	_setSw_Status
 17388                           
 17389                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 17390  148F  0020               	movlb	0	; select bank0
 17391  1490  01A2               	clrf	setRFSW_Status@command
 17392  1491  082C               	movf	DlyOff_Main@sw,w
 17393  1492  31A5  2522  3194   	fcall	_setRFSW_Status
 17394                           
 17395                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 17396  1495  0020               	movlb	0	; select bank0
 17397  1496  01A0               	clrf	setRF_DimmerLights@on
 17398  1497  082C               	movf	DlyOff_Main@sw,w
 17399  1498  319E  26E6  3194   	fcall	_setRF_DimmerLights
 17400                           
 17401                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17402  149B  0020               	movlb	0	; select bank0
 17403  149C  01A2               	clrf	setDimmerLights_Trigger@command
 17404  149D  0AA2               	incf	setDimmerLights_Trigger@command,f
 17405  149E  082C               	movf	DlyOff_Main@sw,w
 17406  149F  31A5  2560  3194   	fcall	_setDimmerLights_Trigger
 17407                           
 17408                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17409  14A2  0020               	movlb	0	; select bank0
 17410  14A3  01A2               	clrf	setDimmerLights_Switch@command
 17411  14A4  082C               	movf	DlyOff_Main@sw,w
 17412  14A5  31A5  2550  3194   	fcall	_setDimmerLights_Switch
 17413                           
 17414                           ;DelayOff_B1.c: 85: setTxData(1);
 17415  14A8  3001               	movlw	1
 17416  14A9  318A  22F8  3194   	fcall	_setTxData
 17417                           
 17418                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17419  14AC  3064               	movlw	100
 17420  14AD  0020               	movlb	0	; select bank0
 17421  14AE  00A6               	movwf	setBuz@time
 17422  14AF  3000               	movlw	0
 17423  14B0  00A7               	movwf	setBuz@time+1
 17424  14B1  3001               	movlw	1
 17425  14B2  3193  234E         	fcall	_setBuz
 17426  14B4  0008               	return
 17427  14B5                     __end_of_DlyOff_Main:	
 17428                           
 17429                           	psect	text106
 17430  0AF8                     __ptext106:	
 17431 ;; *************** function _setTxData *****************
 17432 ;; Defined at:
 17433 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;  rf              1    wreg     unsigned char 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  rf              1    3[BANK0 ] unsigned char 
 17438 ;;  i               1    0        unsigned char 
 17439 ;; Return value:  Size  Location     Type
 17440 ;;		None               void
 17441 ;; Registers used:
 17442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;Total ram usage:        2 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    5
 17455 ;; This function calls:
 17456 ;;		_RfPointSelect
 17457 ;; This function is called by:
 17458 ;;		_DlyOff_Main
 17459 ;;		_setDimmerLights_Adj
 17460 ;;		_setControl_Lights_Table
 17461 ;;		_setRFSW_Control
 17462 ;;		_setRFSW_AdjControl
 17463 ;;		_Sw_DimmerOnFunc
 17464 ;;		_Sw_DimmerOffFunc
 17465 ;; This function uses a non-reentrant model
 17466 ;;
 17467                           
 17468                           
 17469                           ;psect for function _setTxData
 17470  0AF8                     _setTxData:	
 17471                           
 17472                           ;incstack = 0
 17473                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17474                           ;setTxData@rf stored from wreg
 17475  0AF8  0020               	movlb	0	; select bank0
 17476  0AF9  00A3               	movwf	setTxData@rf
 17477                           
 17478                           ;RF_Control_B1.c: 135: char i;
 17479                           ;RF_Control_B1.c: 136: RfPointSelect(rf);
 17480  0AFA  0823               	movf	setTxData@rf,w
 17481  0AFB  31A4  243D  318A   	fcall	_RfPointSelect
 17482                           
 17483                           ;RF_Control_B1.c: 137: if(RF->Enable)
 17484  0AFE  087C               	movf	_RF,w
 17485  0AFF  0086               	movwf	6
 17486  0B00  0187               	clrf	7
 17487  0B01  1C01               	btfss	1,0
 17488  0B02  0008               	return
 17489                           
 17490                           ;RF_Control_B1.c: 138: {
 17491                           ;RF_Control_B1.c: 140: if(!RF->TransceiveGO)
 17492  0B03  087C               	movf	_RF,w
 17493  0B04  0086               	movwf	6
 17494  0B05  0187               	clrf	7
 17495  0B06  1901               	btfsc	1,2
 17496  0B07  0008               	return
 17497                           
 17498                           ;RF_Control_B1.c: 141: {
 17499                           ;RF_Control_B1.c: 142: RF->TransceiveGO=1;
 17500  0B08  087C               	movf	_RF,w
 17501  0B09  0086               	movwf	6
 17502  0B0A  0187               	clrf	7
 17503  0B0B  1501               	bsf	1,2
 17504                           
 17505                           ;RF_Control_B1.c: 151: RF_Data[0]=0x63;
 17506  0B0C  3063               	movlw	99
 17507  0B0D  0020               	movlb	0	; select bank0
 17508  0B0E  00A2               	movwf	??_setTxData
 17509  0B0F  0822               	movf	??_setTxData,w
 17510  0B10  0021               	movlb	1	; select bank1
 17511  0B11  00A0               	movwf	_RF_Data^(0+128)
 17512                           
 17513                           ;RF_Control_B1.c: 152: RF_Data[1]=0x02;
 17514  0B12  3002               	movlw	2
 17515  0B13  0020               	movlb	0	; select bank0
 17516  0B14  00A2               	movwf	??_setTxData
 17517  0B15  0822               	movf	??_setTxData,w
 17518  0B16  0021               	movlb	1	; select bank1
 17519  0B17  00A1               	movwf	(_RF_Data^(0+128)+1)
 17520                           
 17521                           ;RF_Control_B1.c: 153: RF_Data[2]=Product->Data[2];
 17522  0B18  0020               	movlb	0	; select bank0
 17523  0B19  086F               	movf	_Product,w
 17524  0B1A  0086               	movwf	6
 17525  0B1B  3001               	movlw	1	; select bank2/3
 17526  0B1C  0087               	movwf	7
 17527  0B1D  3001               	movlw	1	; select bank2/3
 17528  0B1E  3F42               	moviw [2]fsr1
 17529  0B1F  0021               	movlb	1	; select bank1
 17530  0B20  00A2               	movwf	(_RF_Data^(0+128)+2)
 17531                           
 17532                           ;RF_Control_B1.c: 154: RF_Data[3]=Product->Data[3];
 17533  0B21  0020               	movlb	0	; select bank0
 17534  0B22  086F               	movf	_Product,w
 17535  0B23  0086               	movwf	6
 17536  0B24  3001               	movlw	1	; select bank2/3
 17537  0B25  0087               	movwf	7
 17538  0B26  3001               	movlw	1	; select bank2/3
 17539  0B27  3F43               	moviw [3]fsr1
 17540  0B28  0021               	movlb	1	; select bank1
 17541  0B29  00A3               	movwf	(_RF_Data^(0+128)+3)
 17542                           
 17543                           ;RF_Control_B1.c: 155: RF_Data[4]=Product->Data[4];
 17544  0B2A  0020               	movlb	0	; select bank0
 17545  0B2B  086F               	movf	_Product,w
 17546  0B2C  0086               	movwf	6
 17547  0B2D  3001               	movlw	1	; select bank2/3
 17548  0B2E  0087               	movwf	7
 17549  0B2F  3001               	movlw	1	; select bank2/3
 17550  0B30  3F44               	moviw [4]fsr1
 17551  0B31  0021               	movlb	1	; select bank1
 17552  0B32  00A4               	movwf	(_RF_Data^(0+128)+4)
 17553                           
 17554                           ;RF_Control_B1.c: 156: RF_Data[5]=Product->Data[5];
 17555  0B33  0020               	movlb	0	; select bank0
 17556  0B34  086F               	movf	_Product,w
 17557  0B35  0086               	movwf	6
 17558  0B36  3001               	movlw	1	; select bank2/3
 17559  0B37  0087               	movwf	7
 17560  0B38  3001               	movlw	1	; select bank2/3
 17561  0B39  3F45               	moviw [5]fsr1
 17562  0B3A  0021               	movlb	1	; select bank1
 17563  0B3B  00A5               	movwf	(_RF_Data^(0+128)+5)
 17564                           
 17565                           ;RF_Control_B1.c: 157: RF_Data[6]=Product->Data[6];
 17566  0B3C  0020               	movlb	0	; select bank0
 17567  0B3D  086F               	movf	_Product,w
 17568  0B3E  0086               	movwf	6
 17569  0B3F  3001               	movlw	1	; select bank2/3
 17570  0B40  0087               	movwf	7
 17571  0B41  3001               	movlw	1	; select bank2/3
 17572  0B42  3F46               	moviw [6]fsr1
 17573  0B43  0021               	movlb	1	; select bank1
 17574  0B44  00A6               	movwf	(_RF_Data^(0+128)+6)
 17575                           
 17576                           ;RF_Control_B1.c: 158: RF_Data[7]=Product->Data[7];
 17577  0B45  0020               	movlb	0	; select bank0
 17578  0B46  086F               	movf	_Product,w
 17579  0B47  0086               	movwf	6
 17580  0B48  3001               	movlw	1	; select bank2/3
 17581  0B49  0087               	movwf	7
 17582  0B4A  3001               	movlw	1	; select bank2/3
 17583  0B4B  3F47               	moviw [7]fsr1
 17584  0B4C  0021               	movlb	1	; select bank1
 17585  0B4D  00A7               	movwf	(_RF_Data^(0+128)+7)
 17586                           
 17587                           ;RF_Control_B1.c: 159: RF_Data[8]=Product->Data[8];
 17588  0B4E  0020               	movlb	0	; select bank0
 17589  0B4F  086F               	movf	_Product,w
 17590  0B50  0086               	movwf	6
 17591  0B51  3001               	movlw	1	; select bank2/3
 17592  0B52  0087               	movwf	7
 17593  0B53  3001               	movlw	1	; select bank2/3
 17594  0B54  3F48               	moviw [8]fsr1
 17595  0B55  0021               	movlb	1	; select bank1
 17596  0B56  00A8               	movwf	(_RF_Data^(0+128)+8)
 17597                           
 17598                           ;RF_Control_B1.c: 160: RF_Data[9]=Product->Data[9];
 17599  0B57  0020               	movlb	0	; select bank0
 17600  0B58  086F               	movf	_Product,w
 17601  0B59  0086               	movwf	6
 17602  0B5A  3001               	movlw	1	; select bank2/3
 17603  0B5B  0087               	movwf	7
 17604  0B5C  3001               	movlw	1	; select bank2/3
 17605  0B5D  3F49               	moviw [9]fsr1
 17606  0B5E  0021               	movlb	1	; select bank1
 17607  0B5F  00A9               	movwf	(_RF_Data^(0+128)+9)
 17608                           
 17609                           ;RF_Control_B1.c: 161: RF_Data[10]=Product->Data[10];
 17610  0B60  0020               	movlb	0	; select bank0
 17611  0B61  086F               	movf	_Product,w
 17612  0B62  0086               	movwf	6
 17613  0B63  3001               	movlw	1	; select bank2/3
 17614  0B64  0087               	movwf	7
 17615  0B65  3001               	movlw	1	; select bank2/3
 17616  0B66  3F4A               	moviw [10]fsr1
 17617  0B67  0021               	movlb	1	; select bank1
 17618  0B68  00AA               	movwf	(_RF_Data^(0+128)+10)
 17619                           
 17620                           ;RF_Control_B1.c: 162: RF_Data[11]=Product->Data[11];
 17621  0B69  0020               	movlb	0	; select bank0
 17622  0B6A  086F               	movf	_Product,w
 17623  0B6B  0086               	movwf	6
 17624  0B6C  3001               	movlw	1	; select bank2/3
 17625  0B6D  0087               	movwf	7
 17626  0B6E  3001               	movlw	1	; select bank2/3
 17627  0B6F  3F4B               	moviw [11]fsr1
 17628  0B70  0021               	movlb	1	; select bank1
 17629  0B71  00AB               	movwf	(_RF_Data^(0+128)+11)
 17630                           
 17631                           ;RF_Control_B1.c: 163: RF_Data[12]=Product->Data[12];
 17632  0B72  0020               	movlb	0	; select bank0
 17633  0B73  086F               	movf	_Product,w
 17634  0B74  0086               	movwf	6
 17635  0B75  3001               	movlw	1	; select bank2/3
 17636  0B76  0087               	movwf	7
 17637  0B77  3001               	movlw	1	; select bank2/3
 17638  0B78  3F4C               	moviw [12]fsr1
 17639  0B79  0021               	movlb	1	; select bank1
 17640  0B7A  00AC               	movwf	(_RF_Data^(0+128)+12)
 17641                           
 17642                           ;RF_Control_B1.c: 164: RF_Data[13]=Product->Data[13];
 17643  0B7B  0020               	movlb	0	; select bank0
 17644  0B7C  086F               	movf	_Product,w
 17645  0B7D  0086               	movwf	6
 17646  0B7E  3001               	movlw	1	; select bank2/3
 17647  0B7F  0087               	movwf	7
 17648  0B80  3001               	movlw	1	; select bank2/3
 17649  0B81  3F4D               	moviw [13]fsr1
 17650  0B82  0021               	movlb	1	; select bank1
 17651  0B83  00AD               	movwf	(_RF_Data^(0+128)+13)
 17652                           
 17653                           ;RF_Control_B1.c: 165: RF_Data[14]=Product->Data[14];
 17654  0B84  0020               	movlb	0	; select bank0
 17655  0B85  086F               	movf	_Product,w
 17656  0B86  0086               	movwf	6
 17657  0B87  3001               	movlw	1	; select bank2/3
 17658  0B88  0087               	movwf	7
 17659  0B89  3001               	movlw	1	; select bank2/3
 17660  0B8A  3F4E               	moviw [14]fsr1
 17661  0B8B  0021               	movlb	1	; select bank1
 17662  0B8C  00AE               	movwf	(_RF_Data^(0+128)+14)
 17663                           
 17664                           ;RF_Control_B1.c: 166: RF_Data[15]=Product->Data[15];
 17665  0B8D  0020               	movlb	0	; select bank0
 17666  0B8E  086F               	movf	_Product,w
 17667  0B8F  0086               	movwf	6
 17668  0B90  3001               	movlw	1	; select bank2/3
 17669  0B91  0087               	movwf	7
 17670  0B92  3001               	movlw	1	; select bank2/3
 17671  0B93  3F4F               	moviw [15]fsr1
 17672  0B94  0021               	movlb	1	; select bank1
 17673  0B95  00AF               	movwf	(_RF_Data^(0+128)+15)
 17674                           
 17675                           ;RF_Control_B1.c: 167: RF_Data[16]=Product->Data[16];
 17676  0B96  0020               	movlb	0	; select bank0
 17677  0B97  086F               	movf	_Product,w
 17678  0B98  0086               	movwf	6
 17679  0B99  3001               	movlw	1	; select bank2/3
 17680  0B9A  0087               	movwf	7
 17681  0B9B  3001               	movlw	1	; select bank2/3
 17682  0B9C  3F50               	moviw [16]fsr1
 17683  0B9D  0021               	movlb	1	; select bank1
 17684  0B9E  00B0               	movwf	(_RF_Data^(0+128)+16)
 17685                           
 17686                           ;RF_Control_B1.c: 168: RF_Data[17]=Product->Data[17];
 17687  0B9F  0020               	movlb	0	; select bank0
 17688  0BA0  086F               	movf	_Product,w
 17689  0BA1  0086               	movwf	6
 17690  0BA2  3001               	movlw	1	; select bank2/3
 17691  0BA3  0087               	movwf	7
 17692  0BA4  3001               	movlw	1	; select bank2/3
 17693  0BA5  3F51               	moviw [17]fsr1
 17694  0BA6  0021               	movlb	1	; select bank1
 17695  0BA7  00B1               	movwf	(_RF_Data^(0+128)+17)
 17696                           
 17697                           ;RF_Control_B1.c: 169: RF_Data[18]=Product->Data[18];
 17698  0BA8  0020               	movlb	0	; select bank0
 17699  0BA9  086F               	movf	_Product,w
 17700  0BAA  0086               	movwf	6
 17701  0BAB  3001               	movlw	1	; select bank2/3
 17702  0BAC  0087               	movwf	7
 17703  0BAD  3001               	movlw	1	; select bank2/3
 17704  0BAE  3F52               	moviw [18]fsr1
 17705  0BAF  0021               	movlb	1	; select bank1
 17706  0BB0  00B2               	movwf	(_RF_Data^(0+128)+18)
 17707                           
 17708                           ;RF_Control_B1.c: 170: RF_Data[19]=Product->Data[19];
 17709  0BB1  0020               	movlb	0	; select bank0
 17710  0BB2  086F               	movf	_Product,w
 17711  0BB3  0086               	movwf	6
 17712  0BB4  3001               	movlw	1	; select bank2/3
 17713  0BB5  0087               	movwf	7
 17714  0BB6  3001               	movlw	1	; select bank2/3
 17715  0BB7  3F53               	moviw [19]fsr1
 17716  0BB8  0021               	movlb	1	; select bank1
 17717  0BB9  00B3               	movwf	(_RF_Data^(0+128)+19)
 17718                           
 17719                           ;RF_Control_B1.c: 171: RF_Data[20]=2;
 17720  0BBA  3002               	movlw	2
 17721  0BBB  0020               	movlb	0	; select bank0
 17722  0BBC  00A2               	movwf	??_setTxData
 17723  0BBD  0822               	movf	??_setTxData,w
 17724  0BBE  0021               	movlb	1	; select bank1
 17725  0BBF  00B4               	movwf	(_RF_Data^(0+128)+20)
 17726  0BC0  0008               	return
 17727  0BC1                     __end_of_setTxData:	
 17728                           
 17729                           	psect	text107
 17730  243D                     __ptext107:	
 17731 ;; *************** function _RfPointSelect *****************
 17732 ;; Defined at:
 17733 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17734 ;; Parameters:    Size  Location     Type
 17735 ;;  rf              1    wreg     unsigned char 
 17736 ;; Auto vars:     Size  Location     Type
 17737 ;;  rf              1    1[BANK0 ] unsigned char 
 17738 ;; Return value:  Size  Location     Type
 17739 ;;		None               void
 17740 ;; Registers used:
 17741 ;;		wreg
 17742 ;; Tracked objects:
 17743 ;;		On entry : 0/0
 17744 ;;		On exit  : 0/0
 17745 ;;		Unchanged: 0/0
 17746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17750 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17751 ;;Total ram usage:        2 bytes
 17752 ;; Hardware stack levels used:    1
 17753 ;; Hardware stack levels required when called:    4
 17754 ;; This function calls:
 17755 ;;		Nothing
 17756 ;; This function is called by:
 17757 ;;		_setRF_Learn
 17758 ;;		_setRF_RxStatus
 17759 ;;		_setRF_Main
 17760 ;;		_setTxData
 17761 ;;		_setRF_Enable
 17762 ;;		_RF_RxDisable
 17763 ;;		_getRxData
 17764 ;;		_setLog_Code
 17765 ;;		_setControl_Lights_Table
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769                           
 17770                           ;psect for function _RfPointSelect
 17771  243D                     _RfPointSelect:	
 17772                           
 17773                           ;incstack = 0
 17774                           ; Regs used in _RfPointSelect: [wreg]
 17775                           ;RfPointSelect@rf stored from wreg
 17776  243D  0020               	movlb	0	; select bank0
 17777  243E  00A1               	movwf	RfPointSelect@rf
 17778                           
 17779                           ;RF_Control_B1.c: 10: if(rf == 1)
 17780  243F  0821               	movf	RfPointSelect@rf,w
 17781  2440  3A01               	xorlw	1
 17782  2441  1D03               	skipz
 17783  2442  0008               	return
 17784                           
 17785                           ;RF_Control_B1.c: 11: {
 17786                           ;RF_Control_B1.c: 12: RF=&RF1;
 17787  2443  30E4               	movlw	_RF1& (0+255)
 17788  2444  00A0               	movwf	??_RfPointSelect
 17789  2445  0820               	movf	??_RfPointSelect,w
 17790  2446  00FC               	movwf	_RF
 17791  2447  0008               	return
 17792  2448                     __end_of_RfPointSelect:	
 17793                           
 17794                           	psect	text108
 17795  2531                     __ptext108:	
 17796 ;; *************** function _setSw_Status *****************
 17797 ;; Defined at:
 17798 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17799 ;; Parameters:    Size  Location     Type
 17800 ;;  sw              1    wreg     unsigned char 
 17801 ;;  command         1    2[BANK0 ] unsigned char 
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;  sw              1    3[BANK0 ] unsigned char 
 17804 ;; Return value:  Size  Location     Type
 17805 ;;		None               void
 17806 ;; Registers used:
 17807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;Total ram usage:        2 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    5
 17820 ;; This function calls:
 17821 ;;		_SwPointSelect
 17822 ;; This function is called by:
 17823 ;;		_DlyOff_Main
 17824 ;;		_setDimmerLights_ERROR
 17825 ;;		_setControl_Lights_Table
 17826 ;;		_setRFSW_Control
 17827 ;; This function uses a non-reentrant model
 17828 ;;
 17829                           
 17830                           
 17831                           ;psect for function _setSw_Status
 17832  2531                     _setSw_Status:	
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17836                           ;setSw_Status@sw stored from wreg
 17837  2531  0020               	movlb	0	; select bank0
 17838  2532  00A3               	movwf	setSw_Status@sw
 17839                           
 17840                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17841  2533  0823               	movf	setSw_Status@sw,w
 17842  2534  3198  2066         	fcall	_SwPointSelect
 17843                           
 17844                           ;Switch_B1.c: 109: Sw->Status=command;
 17845  2536  0020               	movlb	0	; select bank0
 17846  2537  086D               	movf	_Sw,w
 17847  2538  0086               	movwf	6
 17848  2539  3001               	movlw	1	; select bank2/3
 17849  253A  0087               	movwf	7
 17850  253B  0822               	movf	setSw_Status@command,w
 17851  253C  1301               	bcf	1,6
 17852  253D  1D03               	skipz
 17853  253E  1701               	bsf	1,6
 17854  253F  0008               	return
 17855  2540                     __end_of_setSw_Status:	
 17856                           
 17857                           	psect	text109
 17858  1866                     __ptext109:	
 17859 ;; *************** function _SwPointSelect *****************
 17860 ;; Defined at:
 17861 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;  sw              1    wreg     unsigned char 
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;  sw              1    1[BANK0 ] unsigned char 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;		None               void
 17868 ;; Registers used:
 17869 ;;		wreg
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        2 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    4
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_setSw_Enable
 17886 ;;		_setSw_Status
 17887 ;;		_setSw_Main
 17888 ;;		_Sw_Detect
 17889 ;; This function uses a non-reentrant model
 17890 ;;
 17891                           
 17892                           
 17893                           ;psect for function _SwPointSelect
 17894  1866                     _SwPointSelect:	
 17895                           
 17896                           ;incstack = 0
 17897                           ; Regs used in _SwPointSelect: [wreg]
 17898                           ;SwPointSelect@sw stored from wreg
 17899  1866  0020               	movlb	0	; select bank0
 17900  1867  00A1               	movwf	SwPointSelect@sw
 17901                           
 17902                           ;Switch_B1.c: 19: if(sw == 1)
 17903  1868  0821               	movf	SwPointSelect@sw,w
 17904  1869  3A01               	xorlw	1
 17905  186A  1D03               	skipz
 17906  186B  2871               	goto	l6452
 17907                           
 17908                           ;Switch_B1.c: 20: {
 17909                           ;Switch_B1.c: 21: Sw=&Sw1;
 17910  186C  3054               	movlw	_Sw1& (0+255)
 17911  186D  00A0               	movwf	??_SwPointSelect
 17912  186E  0820               	movf	??_SwPointSelect,w
 17913  186F  00ED               	movwf	_Sw
 17914                           
 17915                           ;Switch_B1.c: 22: }
 17916  1870  0008               	return
 17917  1871                     l6452:	
 17918                           
 17919                           ;Switch_B1.c: 25: else if(sw == 2)
 17920  1871  0821               	movf	SwPointSelect@sw,w
 17921  1872  3A02               	xorlw	2
 17922  1873  1D03               	skipz
 17923  1874  0008               	return
 17924                           
 17925                           ;Switch_B1.c: 26: {
 17926                           ;Switch_B1.c: 27: Sw=&Sw2;
 17927  1875  305D               	movlw	_Sw2& (0+255)
 17928  1876  00A0               	movwf	??_SwPointSelect
 17929  1877  0820               	movf	??_SwPointSelect,w
 17930  1878  00ED               	movwf	_Sw
 17931  1879  0008               	return
 17932  187A                     __end_of_SwPointSelect:	
 17933                           
 17934                           	psect	text110
 17935  1EE6                     __ptext110:	
 17936 ;; *************** function _setRF_DimmerLights *****************
 17937 ;; Defined at:
 17938 ;;		line 437 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;  lights          1    wreg     unsigned char 
 17941 ;;  on              1    0[BANK0 ] unsigned char 
 17942 ;; Auto vars:     Size  Location     Type
 17943 ;;  lights          1    4[BANK0 ] unsigned char 
 17944 ;;  status          1    3[BANK0 ] unsigned char 
 17945 ;; Return value:  Size  Location     Type
 17946 ;;		None               void
 17947 ;; Registers used:
 17948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17949 ;; Tracked objects:
 17950 ;;		On entry : 0/0
 17951 ;;		On exit  : 0/0
 17952 ;;		Unchanged: 0/0
 17953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17954 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;Total ram usage:        5 bytes
 17959 ;; Hardware stack levels used:    1
 17960 ;; Hardware stack levels required when called:    4
 17961 ;; This function calls:
 17962 ;;		Nothing
 17963 ;; This function is called by:
 17964 ;;		_DlyOff_Main
 17965 ;;		_setDimmerLights_Adj
 17966 ;;		_setRFSW_Control
 17967 ;;		_Sw_DimmerOnFunc
 17968 ;;		_Sw_DimmerOffFunc
 17969 ;; This function uses a non-reentrant model
 17970 ;;
 17971                           
 17972                           
 17973                           ;psect for function _setRF_DimmerLights
 17974  1EE6                     _setRF_DimmerLights:	
 17975                           
 17976                           ;incstack = 0
 17977                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 17978                           ;setRF_DimmerLights@lights stored from wreg
 17979  1EE6  0020               	movlb	0	; select bank0
 17980  1EE7  00A4               	movwf	setRF_DimmerLights@lights
 17981                           
 17982                           ;RF_Control_B1.c: 439: char status;
 17983                           ;RF_Control_B1.c: 440: status=1;
 17984  1EE8  01A3               	clrf	setRF_DimmerLights@status
 17985  1EE9  0AA3               	incf	setRF_DimmerLights@status,f
 17986                           
 17987                           ;RF_Control_B1.c: 441: status<<=(lights-1);
 17988  1EEA  0824               	movf	setRF_DimmerLights@lights,w
 17989  1EEB  3EFF               	addlw	-1
 17990  1EEC  0A89               	incf	9,f
 17991  1EED  2EF0               	goto	u5000
 17992  1EEE                     u5005:	
 17993  1EEE  1003               	clrc
 17994  1EEF  0DA3               	rlf	setRF_DimmerLights@status,f
 17995  1EF0                     u5000:	
 17996  1EF0  3EFF               	addlw	-1
 17997  1EF1  1D03               	skipz
 17998  1EF2  2EEE               	goto	u5005
 17999                           
 18000                           ;RF_Control_B1.c: 442: Product->Data[11]=lights;
 18001  1EF3  0824               	movf	setRF_DimmerLights@lights,w
 18002  1EF4  00A1               	movwf	??_setRF_DimmerLights
 18003  1EF5  086F               	movf	_Product,w
 18004  1EF6  3E0B               	addlw	11
 18005  1EF7  0086               	movwf	6
 18006  1EF8  3001               	movlw	1	; select bank2/3
 18007  1EF9  0087               	movwf	7
 18008  1EFA  0821               	movf	??_setRF_DimmerLights,w
 18009  1EFB  0081               	movwf	1
 18010                           
 18011                           ;RF_Control_B1.c: 443: Product->Data[9]=Product->Data[20+lights];
 18012  1EFC  0824               	movf	setRF_DimmerLights@lights,w
 18013  1EFD  3E14               	addlw	20
 18014  1EFE  076F               	addwf	_Product,w
 18015  1EFF  00A1               	movwf	??_setRF_DimmerLights
 18016  1F00  0821               	movf	??_setRF_DimmerLights,w
 18017  1F01  0086               	movwf	6
 18018  1F02  3001               	movlw	1	; select bank2/3
 18019  1F03  0087               	movwf	7
 18020  1F04  0801               	movf	1,w
 18021  1F05  00A2               	movwf	??_setRF_DimmerLights+1
 18022  1F06  086F               	movf	_Product,w
 18023  1F07  3E09               	addlw	9
 18024  1F08  0086               	movwf	6
 18025  1F09  3001               	movlw	1	; select bank2/3
 18026  1F0A  0087               	movwf	7
 18027  1F0B  0822               	movf	??_setRF_DimmerLights+1,w
 18028  1F0C  0081               	movwf	1
 18029                           
 18030                           ;RF_Control_B1.c: 444: Product->Data[17]=Product->Data[26+lights];
 18031  1F0D  0824               	movf	setRF_DimmerLights@lights,w
 18032  1F0E  3E1A               	addlw	26
 18033  1F0F  076F               	addwf	_Product,w
 18034  1F10  00A1               	movwf	??_setRF_DimmerLights
 18035  1F11  0821               	movf	??_setRF_DimmerLights,w
 18036  1F12  0086               	movwf	6
 18037  1F13  3001               	movlw	1	; select bank2/3
 18038  1F14  0087               	movwf	7
 18039  1F15  0801               	movf	1,w
 18040  1F16  00A2               	movwf	??_setRF_DimmerLights+1
 18041  1F17  086F               	movf	_Product,w
 18042  1F18  3E11               	addlw	17
 18043  1F19  0086               	movwf	6
 18044  1F1A  3001               	movlw	1	; select bank2/3
 18045  1F1B  0087               	movwf	7
 18046  1F1C  0822               	movf	??_setRF_DimmerLights+1,w
 18047  1F1D  0081               	movwf	1
 18048                           
 18049                           ;RF_Control_B1.c: 445: if(on)
 18050  1F1E  0820               	movf	setRF_DimmerLights@on,w
 18051  1F1F  1903               	btfsc	3,2
 18052  1F20  2F31               	goto	l6508
 18053                           
 18054                           ;RF_Control_B1.c: 446: {
 18055                           ;RF_Control_B1.c: 447: Product->Data[15]=(Product->Data[15]|status);
 18056  1F21  086F               	movf	_Product,w
 18057  1F22  3E0F               	addlw	15
 18058  1F23  0086               	movwf	6
 18059  1F24  3001               	movlw	1	; select bank2/3
 18060  1F25  0087               	movwf	7
 18061  1F26  0801               	movf	1,w
 18062  1F27  0423               	iorwf	setRF_DimmerLights@status,w
 18063  1F28  00A1               	movwf	??_setRF_DimmerLights
 18064  1F29  086F               	movf	_Product,w
 18065  1F2A  3E0F               	addlw	15
 18066  1F2B  0086               	movwf	6
 18067  1F2C  3001               	movlw	1	; select bank2/3
 18068  1F2D  0087               	movwf	7
 18069  1F2E  0821               	movf	??_setRF_DimmerLights,w
 18070  1F2F  0081               	movwf	1
 18071                           
 18072                           ;RF_Control_B1.c: 448: }
 18073  1F30  0008               	return
 18074  1F31                     l6508:	
 18075                           
 18076                           ;RF_Control_B1.c: 449: else
 18077                           ;RF_Control_B1.c: 450: {
 18078                           ;RF_Control_B1.c: 451: Product->Data[15]=(Product->Data[15]&(~status));
 18079  1F31  086F               	movf	_Product,w
 18080  1F32  3E0F               	addlw	15
 18081  1F33  0086               	movwf	6
 18082  1F34  3001               	movlw	1	; select bank2/3
 18083  1F35  0087               	movwf	7
 18084  1F36  0923               	comf	setRF_DimmerLights@status,w
 18085  1F37  0501               	andwf	1,w
 18086  1F38  00A1               	movwf	??_setRF_DimmerLights
 18087  1F39  086F               	movf	_Product,w
 18088  1F3A  3E0F               	addlw	15
 18089  1F3B  0086               	movwf	6
 18090  1F3C  3001               	movlw	1	; select bank2/3
 18091  1F3D  0087               	movwf	7
 18092  1F3E  0821               	movf	??_setRF_DimmerLights,w
 18093  1F3F  0081               	movwf	1
 18094  1F40  0008               	return
 18095  1F41                     __end_of_setRF_DimmerLights:	
 18096                           
 18097                           	psect	text111
 18098  2522                     __ptext111:	
 18099 ;; *************** function _setRFSW_Status *****************
 18100 ;; Defined at:
 18101 ;;		line 417 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18102 ;; Parameters:    Size  Location     Type
 18103 ;;  sw              1    wreg     unsigned char 
 18104 ;;  command         1    2[BANK0 ] unsigned char 
 18105 ;; Auto vars:     Size  Location     Type
 18106 ;;  sw              1    3[BANK0 ] unsigned char 
 18107 ;; Return value:  Size  Location     Type
 18108 ;;		None               void
 18109 ;; Registers used:
 18110 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18111 ;; Tracked objects:
 18112 ;;		On entry : 0/0
 18113 ;;		On exit  : 0/0
 18114 ;;		Unchanged: 0/0
 18115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18116 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18120 ;;Total ram usage:        2 bytes
 18121 ;; Hardware stack levels used:    1
 18122 ;; Hardware stack levels required when called:    5
 18123 ;; This function calls:
 18124 ;;		_RfSWPointSelect
 18125 ;; This function is called by:
 18126 ;;		_DlyOff_Main
 18127 ;;		_setDimmerLights_ERROR
 18128 ;;		_setControl_Lights_Table
 18129 ;;		_Sw_DimmerOnFunc
 18130 ;;		_Sw_DimmerAdjFunc
 18131 ;; This function uses a non-reentrant model
 18132 ;;
 18133                           
 18134                           
 18135                           ;psect for function _setRFSW_Status
 18136  2522                     _setRFSW_Status:	
 18137                           
 18138                           ;incstack = 0
 18139                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18140                           ;setRFSW_Status@sw stored from wreg
 18141  2522  0020               	movlb	0	; select bank0
 18142  2523  00A3               	movwf	setRFSW_Status@sw
 18143                           
 18144                           ;RF_Control_B1.c: 419: RfSWPointSelect(sw);
 18145  2524  0823               	movf	setRFSW_Status@sw,w
 18146  2525  31A6  2623         	fcall	_RfSWPointSelect
 18147                           
 18148                           ;RF_Control_B1.c: 420: RFSW->Status=command;
 18149  2527  0021               	movlb	1	; select bank1
 18150  2528  083C               	movf	_RFSW^(0+128),w
 18151  2529  0086               	movwf	6
 18152  252A  0187               	clrf	7
 18153  252B  0020               	movlb	0	; select bank0
 18154  252C  0822               	movf	setRFSW_Status@command,w
 18155  252D  1001               	bcf	1,0
 18156  252E  1D03               	skipz
 18157  252F  1401               	bsf	1,0
 18158  2530  0008               	return
 18159  2531                     __end_of_setRFSW_Status:	
 18160                           
 18161                           	psect	text112
 18162  2623                     __ptext112:	
 18163 ;; *************** function _RfSWPointSelect *****************
 18164 ;; Defined at:
 18165 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18166 ;; Parameters:    Size  Location     Type
 18167 ;;  sw              1    wreg     unsigned char 
 18168 ;; Auto vars:     Size  Location     Type
 18169 ;;  sw              1    1[BANK0 ] unsigned char 
 18170 ;; Return value:  Size  Location     Type
 18171 ;;		None               void
 18172 ;; Registers used:
 18173 ;;		wreg
 18174 ;; Tracked objects:
 18175 ;;		On entry : 0/0
 18176 ;;		On exit  : 0/0
 18177 ;;		Unchanged: 0/0
 18178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18183 ;;Total ram usage:        2 bytes
 18184 ;; Hardware stack levels used:    1
 18185 ;; Hardware stack levels required when called:    4
 18186 ;; This function calls:
 18187 ;;		Nothing
 18188 ;; This function is called by:
 18189 ;;		_setRFSW_Control
 18190 ;;		_setRFSW_AdjControl
 18191 ;;		_setRFSW_Status
 18192 ;; This function uses a non-reentrant model
 18193 ;;
 18194                           
 18195                           
 18196                           ;psect for function _RfSWPointSelect
 18197  2623                     _RfSWPointSelect:	
 18198                           
 18199                           ;incstack = 0
 18200                           ; Regs used in _RfSWPointSelect: [wreg]
 18201                           ;RfSWPointSelect@sw stored from wreg
 18202  2623  0020               	movlb	0	; select bank0
 18203  2624  00A1               	movwf	RfSWPointSelect@sw
 18204                           
 18205                           ;RF_Control_B1.c: 342: if(sw == 1)
 18206  2625  0821               	movf	RfSWPointSelect@sw,w
 18207  2626  3A01               	xorlw	1
 18208  2627  1D03               	skipz
 18209  2628  2E2E               	goto	l2722
 18210                           
 18211                           ;RF_Control_B1.c: 343: {
 18212                           ;RF_Control_B1.c: 344: RFSW=&RFSW1;
 18213  2629  30E6               	movlw	_RFSW1& (0+255)
 18214  262A  00A0               	movwf	??_RfSWPointSelect
 18215  262B  0820               	movf	??_RfSWPointSelect,w
 18216  262C  0021               	movlb	1	; select bank1
 18217  262D  00BC               	movwf	_RFSW^(0+128)
 18218  262E                     l2722:	
 18219                           
 18220                           ;RF_Control_B1.c: 345: }
 18221                           ;RF_Control_B1.c: 348: if(sw == 2)
 18222  262E  0020               	movlb	0	; select bank0
 18223  262F  0821               	movf	RfSWPointSelect@sw,w
 18224  2630  3A02               	xorlw	2
 18225  2631  1D03               	skipz
 18226  2632  0008               	return
 18227                           
 18228                           ;RF_Control_B1.c: 349: {
 18229                           ;RF_Control_B1.c: 350: RFSW=&RFSW2;
 18230  2633  30E7               	movlw	_RFSW2& (0+255)
 18231  2634  00A0               	movwf	??_RfSWPointSelect
 18232  2635  0820               	movf	??_RfSWPointSelect,w
 18233  2636  0021               	movlb	1	; select bank1
 18234  2637  00BC               	movwf	_RFSW^(0+128)
 18235  2638  0008               	return
 18236  2639                     __end_of_RfSWPointSelect:	
 18237                           
 18238                           	psect	text113
 18239  2560                     __ptext113:	
 18240 ;; *************** function _setDimmerLights_Trigger *****************
 18241 ;; Defined at:
 18242 ;;		line 434 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18243 ;; Parameters:    Size  Location     Type
 18244 ;;  lights          1    wreg     unsigned char 
 18245 ;;  command         1    2[BANK0 ] unsigned char 
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;  lights          1    3[BANK0 ] unsigned char 
 18248 ;; Return value:  Size  Location     Type
 18249 ;;		None               void
 18250 ;; Registers used:
 18251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18252 ;; Tracked objects:
 18253 ;;		On entry : 0/0
 18254 ;;		On exit  : 0/0
 18255 ;;		Unchanged: 0/0
 18256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;Total ram usage:        2 bytes
 18262 ;; Hardware stack levels used:    1
 18263 ;; Hardware stack levels required when called:    5
 18264 ;; This function calls:
 18265 ;;		_DimmerLightsPointSelect
 18266 ;; This function is called by:
 18267 ;;		_DlyOff_Main
 18268 ;;		_setRFSW_Control
 18269 ;;		_Sw_DimmerOnFunc
 18270 ;;		_Sw_DimmerOffFunc
 18271 ;; This function uses a non-reentrant model
 18272 ;;
 18273                           
 18274                           
 18275                           ;psect for function _setDimmerLights_Trigger
 18276  2560                     _setDimmerLights_Trigger:	
 18277                           
 18278                           ;incstack = 0
 18279                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18280                           ;setDimmerLights_Trigger@lights stored from wreg
 18281  2560  0020               	movlb	0	; select bank0
 18282  2561  00A3               	movwf	setDimmerLights_Trigger@lights
 18283                           
 18284                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 18285  2562  0823               	movf	setDimmerLights_Trigger@lights,w
 18286  2563  31A5  25D1         	fcall	_DimmerLightsPointSelect
 18287                           
 18288                           ;Dimmer_B1.c: 437: DimmerLights->Trigger=command;
 18289  2565  0020               	movlb	0	; select bank0
 18290  2566  086C               	movf	_DimmerLights,w
 18291  2567  3E09               	addlw	9
 18292  2568  0086               	movwf	6
 18293  2569  3001               	movlw	1	; select bank2/3
 18294  256A  0087               	movwf	7
 18295  256B  0822               	movf	setDimmerLights_Trigger@command,w
 18296  256C  1081               	bcf	1,1
 18297  256D  1D03               	skipz
 18298  256E  1481               	bsf	1,1
 18299  256F  0008               	return
 18300  2570                     __end_of_setDimmerLights_Trigger:	
 18301                           
 18302                           	psect	text114
 18303  2550                     __ptext114:	
 18304 ;; *************** function _setDimmerLights_Switch *****************
 18305 ;; Defined at:
 18306 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18307 ;; Parameters:    Size  Location     Type
 18308 ;;  lights          1    wreg     unsigned char 
 18309 ;;  command         1    2[BANK0 ] unsigned char 
 18310 ;; Auto vars:     Size  Location     Type
 18311 ;;  lights          1    3[BANK0 ] unsigned char 
 18312 ;; Return value:  Size  Location     Type
 18313 ;;		None               void
 18314 ;; Registers used:
 18315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18316 ;; Tracked objects:
 18317 ;;		On entry : 0/0
 18318 ;;		On exit  : 0/0
 18319 ;;		Unchanged: 0/0
 18320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;Total ram usage:        2 bytes
 18326 ;; Hardware stack levels used:    1
 18327 ;; Hardware stack levels required when called:    5
 18328 ;; This function calls:
 18329 ;;		_DimmerLightsPointSelect
 18330 ;; This function is called by:
 18331 ;;		_DlyOff_Main
 18332 ;;		_setRFSW_Control
 18333 ;;		_Sw_DimmerOnFunc
 18334 ;;		_Sw_DimmerOffFunc
 18335 ;; This function uses a non-reentrant model
 18336 ;;
 18337                           
 18338                           
 18339                           ;psect for function _setDimmerLights_Switch
 18340  2550                     _setDimmerLights_Switch:	
 18341                           
 18342                           ;incstack = 0
 18343                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18344                           ;setDimmerLights_Switch@lights stored from wreg
 18345  2550  0020               	movlb	0	; select bank0
 18346  2551  00A3               	movwf	setDimmerLights_Switch@lights
 18347                           
 18348                           ;Dimmer_B1.c: 426: DimmerLightsPointSelect(lights);
 18349  2552  0823               	movf	setDimmerLights_Switch@lights,w
 18350  2553  31A5  25D1         	fcall	_DimmerLightsPointSelect
 18351                           
 18352                           ;Dimmer_B1.c: 427: DimmerLights->Switch=command;
 18353  2555  0020               	movlb	0	; select bank0
 18354  2556  086C               	movf	_DimmerLights,w
 18355  2557  3E09               	addlw	9
 18356  2558  0086               	movwf	6
 18357  2559  3001               	movlw	1	; select bank2/3
 18358  255A  0087               	movwf	7
 18359  255B  0822               	movf	setDimmerLights_Switch@command,w
 18360  255C  1001               	bcf	1,0
 18361  255D  1D03               	skipz
 18362  255E  1401               	bsf	1,0
 18363  255F  0008               	return
 18364  2560                     __end_of_setDimmerLights_Switch:	
 18365                           
 18366                           	psect	text115
 18367  25D1                     __ptext115:	
 18368 ;; *************** function _DimmerLightsPointSelect *****************
 18369 ;; Defined at:
 18370 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18371 ;; Parameters:    Size  Location     Type
 18372 ;;  lights          1    wreg     unsigned char 
 18373 ;; Auto vars:     Size  Location     Type
 18374 ;;  lights          1    1[BANK0 ] unsigned char 
 18375 ;; Return value:  Size  Location     Type
 18376 ;;		None               void
 18377 ;; Registers used:
 18378 ;;		wreg
 18379 ;; Tracked objects:
 18380 ;;		On entry : 0/0
 18381 ;;		On exit  : 0/0
 18382 ;;		Unchanged: 0/0
 18383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;Total ram usage:        2 bytes
 18389 ;; Hardware stack levels used:    1
 18390 ;; Hardware stack levels required when called:    4
 18391 ;; This function calls:
 18392 ;;		Nothing
 18393 ;; This function is called by:
 18394 ;;		_setDimmerLights_Initialization
 18395 ;;		_setDimmerLights_Main
 18396 ;;		_setDimmerLights_ERROR
 18397 ;;		_setDimmerLights_TriggerERROR
 18398 ;;		_setDimmerLights
 18399 ;;		_setDimmerLights_Adj
 18400 ;;		_setDimmerLights_AdjRF
 18401 ;;		_setDimmerLights_Switch
 18402 ;;		_setDimmerLights_AdjGo
 18403 ;;		_setDimmerLights_Trigger
 18404 ;;		_setDimmerLights_TriggerAdj
 18405 ;;		_setDimmerLights_Clear
 18406 ;;		_setDimmerLights_GO
 18407 ;;		_setDimmerLights_MaxmumValue
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           
 18412                           ;psect for function _DimmerLightsPointSelect
 18413  25D1                     _DimmerLightsPointSelect:	
 18414                           
 18415                           ;incstack = 0
 18416                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18417                           ;DimmerLightsPointSelect@lights stored from wreg
 18418  25D1  0020               	movlb	0	; select bank0
 18419  25D2  00A1               	movwf	DimmerLightsPointSelect@lights
 18420                           
 18421                           ;Dimmer_B1.c: 10: if(lights == 1)
 18422  25D3  0821               	movf	DimmerLightsPointSelect@lights,w
 18423  25D4  3A01               	xorlw	1
 18424  25D5  1D03               	skipz
 18425  25D6  2DDB               	goto	l875
 18426                           
 18427                           ;Dimmer_B1.c: 11: {
 18428                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18429  25D7  302E               	movlw	_DimmerLights1& (0+255)
 18430  25D8  00A0               	movwf	??_DimmerLightsPointSelect
 18431  25D9  0820               	movf	??_DimmerLightsPointSelect,w
 18432  25DA  00EC               	movwf	_DimmerLights
 18433  25DB                     l875:	
 18434                           
 18435                           ;Dimmer_B1.c: 13: }
 18436                           ;Dimmer_B1.c: 17: if(lights == 2)
 18437  25DB  0821               	movf	DimmerLightsPointSelect@lights,w
 18438  25DC  3A02               	xorlw	2
 18439  25DD  1D03               	skipz
 18440  25DE  0008               	return
 18441                           
 18442                           ;Dimmer_B1.c: 18: {
 18443                           ;Dimmer_B1.c: 19: DimmerLights=&DimmerLights2;
 18444  25DF  303B               	movlw	_DimmerLights2& (0+255)
 18445  25E0  00A0               	movwf	??_DimmerLightsPointSelect
 18446  25E1  0820               	movf	??_DimmerLightsPointSelect,w
 18447  25E2  00EC               	movwf	_DimmerLights
 18448  25E3  0008               	return
 18449  25E4                     __end_of_DimmerLightsPointSelect:	
 18450                           
 18451                           	psect	text116
 18452  134E                     __ptext116:	
 18453 ;; *************** function _setBuz *****************
 18454 ;; Defined at:
 18455 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18456 ;; Parameters:    Size  Location     Type
 18457 ;;  count           1    wreg     unsigned char 
 18458 ;;  time            2    6[BANK0 ] int 
 18459 ;; Auto vars:     Size  Location     Type
 18460 ;;  count           1    9[BANK0 ] unsigned char 
 18461 ;; Return value:  Size  Location     Type
 18462 ;;		None               void
 18463 ;; Registers used:
 18464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18465 ;; Tracked objects:
 18466 ;;		On entry : 0/0
 18467 ;;		On exit  : 0/0
 18468 ;;		Unchanged: 0/0
 18469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18470 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18473 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18474 ;;Total ram usage:        4 bytes
 18475 ;; Hardware stack levels used:    1
 18476 ;; Hardware stack levels required when called:    5
 18477 ;; This function calls:
 18478 ;;		___wmul
 18479 ;; This function is called by:
 18480 ;;		_DlyOff_Main
 18481 ;;		_setDimmerLights_Main
 18482 ;;		_DimmerLights_Exceptions
 18483 ;;		_MainT
 18484 ;;		_setOverTemp_Exceptions
 18485 ;;		_setLog_Code
 18486 ;;		_setControl_Lights_Table
 18487 ;;		_setRFSW_Control
 18488 ;;		_setSw_Main
 18489 ;;		_Sw_DimmerOnFunc
 18490 ;; This function uses a non-reentrant model
 18491 ;;
 18492                           
 18493                           
 18494                           ;psect for function _setBuz
 18495  134E                     _setBuz:	
 18496                           
 18497                           ;incstack = 0
 18498                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18499                           ;setBuz@count stored from wreg
 18500  134E  0020               	movlb	0	; select bank0
 18501  134F  00A9               	movwf	setBuz@count
 18502                           
 18503                           ;Buzzer_B1.c: 24: time*=20;
 18504  1350  3014               	movlw	20
 18505  1351  00A0               	movwf	___wmul@multiplier
 18506  1352  3000               	movlw	0
 18507  1353  00A1               	movwf	___wmul@multiplier+1
 18508  1354  0827               	movf	setBuz@time+1,w
 18509  1355  01A3               	clrf	___wmul@multiplicand+1
 18510  1356  07A3               	addwf	___wmul@multiplicand+1,f
 18511  1357  0826               	movf	setBuz@time,w
 18512  1358  01A2               	clrf	___wmul@multiplicand
 18513  1359  07A2               	addwf	___wmul@multiplicand,f
 18514  135A  31A7  2781  3193   	fcall	___wmul
 18515  135D  0020               	movlb	0	; select bank0
 18516  135E  0821               	movf	?___wmul+1,w
 18517  135F  01A7               	clrf	setBuz@time+1
 18518  1360  07A7               	addwf	setBuz@time+1,f
 18519  1361  0820               	movf	?___wmul,w
 18520  1362  01A6               	clrf	setBuz@time
 18521  1363  07A6               	addwf	setBuz@time,f
 18522                           
 18523                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18524  1364  0878               	movf	_Buz,w
 18525  1365  0086               	movwf	6
 18526  1366  3001               	movlw	1	; select bank2/3
 18527  1367  0087               	movwf	7
 18528  1368  1C01               	btfss	1,0
 18529  1369  0008               	return
 18530                           
 18531                           ;Buzzer_B1.c: 26: {
 18532                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18533  136A  0878               	movf	_Buz,w
 18534  136B  0086               	movwf	6
 18535  136C  3001               	movlw	1	; select bank2/3
 18536  136D  0087               	movwf	7
 18537  136E  1881               	btfsc	1,1
 18538  136F  2B89               	goto	l8630
 18539                           
 18540                           ;Buzzer_B1.c: 28: {
 18541                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18542  1370  0878               	movf	_Buz,w
 18543  1371  0086               	movwf	6
 18544  1372  3001               	movlw	1	; select bank2/3
 18545  1373  0087               	movwf	7
 18546  1374  1481               	bsf	1,1
 18547                           
 18548                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18549  1375  0829               	movf	setBuz@count,w
 18550  1376  00A8               	movwf	??_setBuz
 18551  1377  0878               	movf	_Buz,w
 18552  1378  3E03               	addlw	3
 18553  1379  0086               	movwf	6
 18554  137A  3001               	movlw	1	; select bank2/3
 18555  137B  0087               	movwf	7
 18556  137C  0828               	movf	??_setBuz,w
 18557  137D  0081               	movwf	1
 18558                           
 18559                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18560  137E  0878               	movf	_Buz,w
 18561  137F  3E06               	addlw	6
 18562  1380  0086               	movwf	6
 18563  1381  3001               	movlw	1	; select bank2/3
 18564  1382  0087               	movwf	7
 18565  1383  0826               	movf	setBuz@time,w
 18566  1384  3FC0               	movwi [0]fsr1
 18567  1385  0827               	movf	setBuz@time+1,w
 18568  1386  3FC1               	movwi [1]fsr1
 18569                           
 18570                           ;Buzzer_B1.c: 33: RB3=1;
 18571  1387  158D               	bsf	13,3	;volatile
 18572                           
 18573                           ;Buzzer_B1.c: 34: }
 18574  1388  0008               	return
 18575  1389                     l8630:	
 18576                           
 18577                           ;Buzzer_B1.c: 35: else
 18578                           ;Buzzer_B1.c: 36: {
 18579                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18580  1389  0878               	movf	_Buz,w
 18581  138A  0086               	movwf	6
 18582  138B  3001               	movlw	1	; select bank2/3
 18583  138C  0087               	movwf	7
 18584  138D  1981               	btfsc	1,3
 18585  138E  2BA7               	goto	l8634
 18586                           
 18587                           ;Buzzer_B1.c: 38: {
 18588                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18589  138F  0878               	movf	_Buz,w
 18590  1390  0086               	movwf	6
 18591  1391  3001               	movlw	1	; select bank2/3
 18592  1392  0087               	movwf	7
 18593  1393  1581               	bsf	1,3
 18594                           
 18595                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18596  1394  0829               	movf	setBuz@count,w
 18597  1395  00A8               	movwf	??_setBuz
 18598  1396  0878               	movf	_Buz,w
 18599  1397  3E04               	addlw	4
 18600  1398  0086               	movwf	6
 18601  1399  3001               	movlw	1	; select bank2/3
 18602  139A  0087               	movwf	7
 18603  139B  0828               	movf	??_setBuz,w
 18604  139C  0081               	movwf	1
 18605                           
 18606                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18607  139D  0878               	movf	_Buz,w
 18608  139E  3E08               	addlw	8
 18609  139F  0086               	movwf	6
 18610  13A0  3001               	movlw	1	; select bank2/3
 18611  13A1  0087               	movwf	7
 18612  13A2  0826               	movf	setBuz@time,w
 18613  13A3  3FC0               	movwi [0]fsr1
 18614  13A4  0827               	movf	setBuz@time+1,w
 18615  13A5  3FC1               	movwi [1]fsr1
 18616                           
 18617                           ;Buzzer_B1.c: 42: }
 18618  13A6  0008               	return
 18619  13A7                     l8634:	
 18620                           
 18621                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18622  13A7  0878               	movf	_Buz,w
 18623  13A8  0086               	movwf	6
 18624  13A9  3001               	movlw	1	; select bank2/3
 18625  13AA  0087               	movwf	7
 18626  13AB  1A01               	btfsc	1,4
 18627  13AC  0008               	return
 18628                           
 18629                           ;Buzzer_B1.c: 44: {
 18630                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18631  13AD  0878               	movf	_Buz,w
 18632  13AE  0086               	movwf	6
 18633  13AF  3001               	movlw	1	; select bank2/3
 18634  13B0  0087               	movwf	7
 18635  13B1  1601               	bsf	1,4
 18636                           
 18637                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18638  13B2  0829               	movf	setBuz@count,w
 18639  13B3  00A8               	movwf	??_setBuz
 18640  13B4  0878               	movf	_Buz,w
 18641  13B5  3E05               	addlw	5
 18642  13B6  0086               	movwf	6
 18643  13B7  3001               	movlw	1	; select bank2/3
 18644  13B8  0087               	movwf	7
 18645  13B9  0828               	movf	??_setBuz,w
 18646  13BA  0081               	movwf	1
 18647                           
 18648                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18649  13BB  0878               	movf	_Buz,w
 18650  13BC  3E0A               	addlw	10
 18651  13BD  0086               	movwf	6
 18652  13BE  3001               	movlw	1	; select bank2/3
 18653  13BF  0087               	movwf	7
 18654  13C0  0826               	movf	setBuz@time,w
 18655  13C1  3FC0               	movwi [0]fsr1
 18656  13C2  0827               	movf	setBuz@time+1,w
 18657  13C3  3FC1               	movwi [1]fsr1
 18658  13C4  0008               	return
 18659  13C5                     __end_of_setBuz:	
 18660                           
 18661                           	psect	text117
 18662  2781                     __ptext117:	
 18663 ;; *************** function ___wmul *****************
 18664 ;; Defined at:
 18665 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18666 ;; Parameters:    Size  Location     Type
 18667 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18668 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18669 ;; Auto vars:     Size  Location     Type
 18670 ;;  product         2    4[BANK0 ] unsigned int 
 18671 ;; Return value:  Size  Location     Type
 18672 ;;                  2    0[BANK0 ] unsigned int 
 18673 ;; Registers used:
 18674 ;;		wreg, status,2, status,0
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18680 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;Total ram usage:        6 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; Hardware stack levels required when called:    4
 18687 ;; This function calls:
 18688 ;;		Nothing
 18689 ;; This function is called by:
 18690 ;;		_setBuz
 18691 ;;		_Load_Main
 18692 ;; This function uses a non-reentrant model
 18693 ;;
 18694                           
 18695                           
 18696                           ;psect for function ___wmul
 18697  2781                     ___wmul:	
 18698                           
 18699                           ;incstack = 0
 18700                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18701  2781  0020               	movlb	0	; select bank0
 18702  2782  01A4               	clrf	___wmul@product
 18703  2783  01A5               	clrf	___wmul@product+1
 18704  2784                     l8610:	
 18705  2784  1C20               	btfss	___wmul@multiplier,0
 18706  2785  2F8A               	goto	l3237
 18707  2786  0822               	movf	___wmul@multiplicand,w
 18708  2787  07A4               	addwf	___wmul@product,f
 18709  2788  0823               	movf	___wmul@multiplicand+1,w
 18710  2789  3DA5               	addwfc	___wmul@product+1,f
 18711  278A                     l3237:	
 18712  278A  3001               	movlw	1
 18713  278B                     u8185:	
 18714  278B  35A2               	lslf	___wmul@multiplicand,f
 18715  278C  0DA3               	rlf	___wmul@multiplicand+1,f
 18716  278D  0B89               	decfsz	9,f
 18717  278E  2F8B               	goto	u8185
 18718  278F  3001               	movlw	1
 18719  2790                     u8195:	
 18720  2790  36A1               	lsrf	___wmul@multiplier+1,f
 18721  2791  0CA0               	rrf	___wmul@multiplier,f
 18722  2792  0B89               	decfsz	9,f
 18723  2793  2F90               	goto	u8195
 18724  2794  0821               	movf	___wmul@multiplier+1,w
 18725  2795  0420               	iorwf	___wmul@multiplier,w
 18726  2796  1D03               	skipz
 18727  2797  2F84               	goto	l8610
 18728  2798  0825               	movf	___wmul@product+1,w
 18729  2799  01A1               	clrf	?___wmul+1
 18730  279A  07A1               	addwf	?___wmul+1,f
 18731  279B  0824               	movf	___wmul@product,w
 18732  279C  01A0               	clrf	?___wmul
 18733  279D  07A0               	addwf	?___wmul,f
 18734  279E  0008               	return
 18735  279F                     __end_of___wmul:	
 18736                           
 18737                           	psect	text118
 18738  23E3                     __ptext118:	
 18739 ;; *************** function _DelayOff_Initialization *****************
 18740 ;; Defined at:
 18741 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18742 ;; Parameters:    Size  Location     Type
 18743 ;;		None
 18744 ;; Auto vars:     Size  Location     Type
 18745 ;;		None
 18746 ;; Return value:  Size  Location     Type
 18747 ;;		None               void
 18748 ;; Registers used:
 18749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18750 ;; Tracked objects:
 18751 ;;		On entry : 0/0
 18752 ;;		On exit  : 0/0
 18753 ;;		Unchanged: 0/0
 18754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18759 ;;Total ram usage:        0 bytes
 18760 ;; Hardware stack levels used:    1
 18761 ;; Hardware stack levels required when called:    6
 18762 ;; This function calls:
 18763 ;;		_DlyOff_Initialization
 18764 ;; This function is called by:
 18765 ;;		_main
 18766 ;; This function uses a non-reentrant model
 18767 ;;
 18768                           
 18769                           
 18770                           ;psect for function _DelayOff_Initialization
 18771  23E3                     _DelayOff_Initialization:	
 18772                           
 18773                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18774                           
 18775                           ;incstack = 0
 18776                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18777  23E3  3001               	movlw	1
 18778  23E4  31A4  2432  31A3   	fcall	_DlyOff_Initialization
 18779                           
 18780                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 18781  23E7  3002               	movlw	2
 18782  23E8  31A4  2432         	fcall	_DlyOff_Initialization
 18783  23EA  0008               	return
 18784  23EB                     __end_of_DelayOff_Initialization:	
 18785                           
 18786                           	psect	text119
 18787  2432                     __ptext119:	
 18788 ;; *************** function _DlyOff_Initialization *****************
 18789 ;; Defined at:
 18790 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;  sw              1    wreg     unsigned char 
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;  sw              1    2[BANK0 ] unsigned char 
 18795 ;; Return value:  Size  Location     Type
 18796 ;;		None               void
 18797 ;; Registers used:
 18798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;Total ram usage:        1 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    5
 18811 ;; This function calls:
 18812 ;;		_DelayOffPointSelect
 18813 ;; This function is called by:
 18814 ;;		_DelayOff_Initialization
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           
 18819                           ;psect for function _DlyOff_Initialization
 18820  2432                     _DlyOff_Initialization:	
 18821                           
 18822                           ;incstack = 0
 18823                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18824                           ;DlyOff_Initialization@sw stored from wreg
 18825  2432  0020               	movlb	0	; select bank0
 18826  2433  00A2               	movwf	DlyOff_Initialization@sw
 18827                           
 18828                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18829  2434  0822               	movf	DlyOff_Initialization@sw,w
 18830  2435  31A6  2665         	fcall	_DelayOffPointSelect
 18831                           
 18832                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18833  2437  0021               	movlb	1	; select bank1
 18834  2438  0838               	movf	_DelayOff^(0+128),w
 18835  2439  0086               	movwf	6
 18836  243A  0187               	clrf	7
 18837  243B  1401               	bsf	1,0
 18838  243C  0008               	return
 18839  243D                     __end_of_DlyOff_Initialization:	
 18840                           
 18841                           	psect	text120
 18842  2665                     __ptext120:	
 18843 ;; *************** function _DelayOffPointSelect *****************
 18844 ;; Defined at:
 18845 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18846 ;; Parameters:    Size  Location     Type
 18847 ;;  sw              1    wreg     unsigned char 
 18848 ;; Auto vars:     Size  Location     Type
 18849 ;;  sw              1    1[BANK0 ] unsigned char 
 18850 ;; Return value:  Size  Location     Type
 18851 ;;		None               void
 18852 ;; Registers used:
 18853 ;;		wreg
 18854 ;; Tracked objects:
 18855 ;;		On entry : 0/0
 18856 ;;		On exit  : 0/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;Total ram usage:        2 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; Hardware stack levels required when called:    4
 18866 ;; This function calls:
 18867 ;;		Nothing
 18868 ;; This function is called by:
 18869 ;;		_DlyOff_Initialization
 18870 ;;		_DlyOff_Main
 18871 ;;		_setDelayOff_GO
 18872 ;; This function uses a non-reentrant model
 18873 ;;
 18874                           
 18875                           
 18876                           ;psect for function _DelayOffPointSelect
 18877  2665                     _DelayOffPointSelect:	
 18878                           
 18879                           ;incstack = 0
 18880                           ; Regs used in _DelayOffPointSelect: [wreg]
 18881                           ;DelayOffPointSelect@sw stored from wreg
 18882  2665  0020               	movlb	0	; select bank0
 18883  2666  00A1               	movwf	DelayOffPointSelect@sw
 18884                           
 18885                           ;DelayOff_B1.c: 11: if(sw == 1)
 18886  2667  0821               	movf	DelayOffPointSelect@sw,w
 18887  2668  3A01               	xorlw	1
 18888  2669  1D03               	skipz
 18889  266A  2E71               	goto	l6388
 18890                           
 18891                           ;DelayOff_B1.c: 12: {
 18892                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18893  266B  30CB               	movlw	_DlySw1& (0+255)
 18894  266C  00A0               	movwf	??_DelayOffPointSelect
 18895  266D  0820               	movf	??_DelayOffPointSelect,w
 18896  266E  0021               	movlb	1	; select bank1
 18897  266F  00B8               	movwf	_DelayOff^(0+128)
 18898                           
 18899                           ;DelayOff_B1.c: 14: }
 18900  2670  0008               	return
 18901  2671                     l6388:	
 18902                           
 18903                           ;DelayOff_B1.c: 17: else if(sw == 2)
 18904  2671  0020               	movlb	0	; select bank0
 18905  2672  0821               	movf	DelayOffPointSelect@sw,w
 18906  2673  3A02               	xorlw	2
 18907  2674  1D03               	skipz
 18908  2675  0008               	return
 18909                           
 18910                           ;DelayOff_B1.c: 18: {
 18911                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 18912  2676  30D0               	movlw	_DlySw2& (0+255)
 18913  2677  00A0               	movwf	??_DelayOffPointSelect
 18914  2678  0820               	movf	??_DelayOffPointSelect,w
 18915  2679  0021               	movlb	1	; select bank1
 18916  267A  00B8               	movwf	_DelayOff^(0+128)
 18917  267B  0008               	return
 18918  267C                     __end_of_DelayOffPointSelect:	
 18919                           
 18920                           	psect	text121
 18921  25E4                     __ptext121:	
 18922 ;; *************** function _CC2500_PowerOnInitial *****************
 18923 ;; Defined at:
 18924 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18925 ;; Parameters:    Size  Location     Type
 18926 ;;		None
 18927 ;; Auto vars:     Size  Location     Type
 18928 ;;		None
 18929 ;; Return value:  Size  Location     Type
 18930 ;;		None               void
 18931 ;; Registers used:
 18932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18933 ;; Tracked objects:
 18934 ;;		On entry : 0/0
 18935 ;;		On exit  : 0/0
 18936 ;;		Unchanged: 0/0
 18937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;Total ram usage:        0 bytes
 18943 ;; Hardware stack levels used:    1
 18944 ;; Hardware stack levels required when called:    7
 18945 ;; This function calls:
 18946 ;;		_CC2500_ClearRXFIFO
 18947 ;;		_CC2500_ClearTXFIFO
 18948 ;;		_CC2500_FrequencyCabr
 18949 ;;		_CC2500_InitPATable
 18950 ;;		_CC2500_InitSetREG
 18951 ;;		_CC2500_PowerRST
 18952 ;;		_CC2500_SIDLEMode
 18953 ;; This function is called by:
 18954 ;;		_main
 18955 ;; This function uses a non-reentrant model
 18956 ;;
 18957                           
 18958                           
 18959                           ;psect for function _CC2500_PowerOnInitial
 18960  25E4                     _CC2500_PowerOnInitial:	
 18961                           
 18962                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 18963                           
 18964                           ;incstack = 0
 18965                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18966  25E4  319A  2253  31A5   	fcall	_CC2500_PowerRST
 18967                           
 18968                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 18969  25E7  3199  2179  31A5   	fcall	_CC2500_InitSetREG
 18970                           
 18971                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 18972  25EA  31A7  279F  31A5   	fcall	_CC2500_InitPATable
 18973                           
 18974                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 18975  25ED  31A3  23A0  31A5   	fcall	_CC2500_ClearTXFIFO
 18976                           
 18977                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 18978  25F0  31A3  239C  31A5   	fcall	_CC2500_ClearRXFIFO
 18979                           
 18980                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 18981  25F3  31A4  24A2  31A5   	fcall	_CC2500_FrequencyCabr
 18982                           
 18983                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 18984  25F6  31A3  23A4         	fcall	_CC2500_SIDLEMode
 18985  25F8  0008               	return
 18986  25F9                     __end_of_CC2500_PowerOnInitial:	
 18987                           
 18988                           	psect	text122
 18989  23A4                     __ptext122:	
 18990 ;; *************** function _CC2500_SIDLEMode *****************
 18991 ;; Defined at:
 18992 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18993 ;; Parameters:    Size  Location     Type
 18994 ;;		None
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;		None
 18997 ;; Return value:  Size  Location     Type
 18998 ;;		None               void
 18999 ;; Registers used:
 19000 ;;		wreg, status,2, status,0, pclath, cstack
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;Total ram usage:        0 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:    6
 19013 ;; This function calls:
 19014 ;;		_CC2500_WriteCommand
 19015 ;; This function is called by:
 19016 ;;		_CC2500_PowerOnInitial
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           
 19021                           ;psect for function _CC2500_SIDLEMode
 19022  23A4                     _CC2500_SIDLEMode:	
 19023                           
 19024                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19025                           
 19026                           ;incstack = 0
 19027                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19028  23A4  3036               	movlw	54
 19029  23A5  31A5  2540         	fcall	_CC2500_WriteCommand
 19030  23A7  0008               	return
 19031  23A8                     __end_of_CC2500_SIDLEMode:	
 19032                           
 19033                           	psect	text123
 19034  1A53                     __ptext123:	
 19035 ;; *************** function _CC2500_PowerRST *****************
 19036 ;; Defined at:
 19037 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19038 ;; Parameters:    Size  Location     Type
 19039 ;;		None
 19040 ;; Auto vars:     Size  Location     Type
 19041 ;;		None
 19042 ;; Return value:  Size  Location     Type
 19043 ;;		None               void
 19044 ;; Registers used:
 19045 ;;		wreg, status,2, status,0, pclath, cstack
 19046 ;; Tracked objects:
 19047 ;;		On entry : 0/0
 19048 ;;		On exit  : 0/0
 19049 ;;		Unchanged: 0/0
 19050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19055 ;;Total ram usage:        1 bytes
 19056 ;; Hardware stack levels used:    1
 19057 ;; Hardware stack levels required when called:    5
 19058 ;; This function calls:
 19059 ;;		_CC2500_WriteByte
 19060 ;;		_DelayTime_1us
 19061 ;; This function is called by:
 19062 ;;		_CC2500_PowerOnInitial
 19063 ;; This function uses a non-reentrant model
 19064 ;;
 19065                           
 19066                           
 19067                           ;psect for function _CC2500_PowerRST
 19068  1A53                     _CC2500_PowerRST:	
 19069                           
 19070                           ;CC2500_B1.c: 112: RC1=0;
 19071                           
 19072                           ;incstack = 0
 19073                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19074  1A53  0020               	movlb	0	; select bank0
 19075  1A54  108E               	bcf	14,1	;volatile
 19076                           
 19077                           ;CC2500_B1.c: 113: RC0=0;
 19078  1A55  100E               	bcf	14,0	;volatile
 19079                           
 19080                           ;CC2500_B1.c: 114: RC4=1;
 19081  1A56  160E               	bsf	14,4	;volatile
 19082                           
 19083                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19084  1A57  300A               	movlw	10
 19085  1A58  00A0               	movwf	DelayTime_1us@count
 19086  1A59  3000               	movlw	0
 19087  1A5A  00A1               	movwf	DelayTime_1us@count+1
 19088  1A5B  3199  2106  319A   	fcall	_DelayTime_1us
 19089                           
 19090                           ;CC2500_B1.c: 116: RC4=0;
 19091  1A5E  0020               	movlb	0	; select bank0
 19092  1A5F  120E               	bcf	14,4	;volatile
 19093                           
 19094                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19095  1A60  300A               	movlw	10
 19096  1A61  00A0               	movwf	DelayTime_1us@count
 19097  1A62  3000               	movlw	0
 19098  1A63  00A1               	movwf	DelayTime_1us@count+1
 19099  1A64  3199  2106  319A   	fcall	_DelayTime_1us
 19100                           
 19101                           ;CC2500_B1.c: 118: RC4=1;
 19102  1A67  0020               	movlb	0	; select bank0
 19103  1A68  160E               	bsf	14,4	;volatile
 19104                           
 19105                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19106  1A69  3028               	movlw	40
 19107  1A6A  00A0               	movwf	DelayTime_1us@count
 19108  1A6B  3000               	movlw	0
 19109  1A6C  00A1               	movwf	DelayTime_1us@count+1
 19110  1A6D  3199  2106  319A   	fcall	_DelayTime_1us
 19111                           
 19112                           ;CC2500_B1.c: 120: RC4=0;
 19113  1A70  0020               	movlb	0	; select bank0
 19114  1A71  120E               	bcf	14,4	;volatile
 19115                           
 19116                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19117  1A72  3030               	movlw	48
 19118  1A73  00A6               	movwf	??_CC2500_PowerRST
 19119  1A74  0826               	movf	??_CC2500_PowerRST,w
 19120  1A75  0021               	movlb	1	; select bank1
 19121  1A76  00BF               	movwf	_SPI0Buffer^(0+128)
 19122  1A77                     l340:	
 19123                           ;CC2500_B1.c: 122: while(RC2==1);
 19124                           
 19125  1A77  0020               	movlb	0	; select bank0
 19126  1A78  190E               	btfsc	14,2	;volatile
 19127  1A79  2A77               	goto	l340
 19128                           
 19129                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19130  1A7A  31A6  2694  319A   	fcall	_CC2500_WriteByte
 19131  1A7D                     l343:	
 19132                           ;CC2500_B1.c: 124: while(RC2==1);
 19133                           
 19134  1A7D  0020               	movlb	0	; select bank0
 19135  1A7E  190E               	btfsc	14,2	;volatile
 19136  1A7F  2A7D               	goto	l343
 19137                           
 19138                           ;CC2500_B1.c: 125: RC0=0;
 19139  1A80  100E               	bcf	14,0	;volatile
 19140                           
 19141                           ;CC2500_B1.c: 126: RC4=1;
 19142  1A81  160E               	bsf	14,4	;volatile
 19143  1A82  0008               	return
 19144  1A83                     __end_of_CC2500_PowerRST:	
 19145                           
 19146                           	psect	text124
 19147  1979                     __ptext124:	
 19148 ;; *************** function _CC2500_InitSetREG *****************
 19149 ;; Defined at:
 19150 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19151 ;; Parameters:    Size  Location     Type
 19152 ;;		None
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19155 ;;  temp2           1    7[BANK0 ] unsigned char 
 19156 ;;  temp1           1    6[BANK0 ] unsigned char 
 19157 ;; Return value:  Size  Location     Type
 19158 ;;		None               void
 19159 ;; Registers used:
 19160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19161 ;; Tracked objects:
 19162 ;;		On entry : 0/0
 19163 ;;		On exit  : 0/0
 19164 ;;		Unchanged: 0/0
 19165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19169 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19170 ;;Total ram usage:        4 bytes
 19171 ;; Hardware stack levels used:    1
 19172 ;; Hardware stack levels required when called:    6
 19173 ;; This function calls:
 19174 ;;		_CC2500_WriteREG
 19175 ;; This function is called by:
 19176 ;;		_CC2500_PowerOnInitial
 19177 ;; This function uses a non-reentrant model
 19178 ;;
 19179                           
 19180                           
 19181                           ;psect for function _CC2500_InitSetREG
 19182  1979                     _CC2500_InitSetREG:	
 19183                           
 19184                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19185                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19186                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19187                           
 19188                           ;incstack = 0
 19189                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19190  1979  0020               	movlb	0	; select bank0
 19191  197A  01A8               	clrf	CC2500_InitSetREG@loop_c
 19192  197B                     L15:	
 19193  197B  302F               	movlw	47
 19194  197C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19195  197D  1803               	btfsc	3,0
 19196  197E  0008               	return
 19197                           
 19198                           ;CC2500_B1.c: 137: {
 19199                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19200  197F  0828               	movf	CC2500_InitSetREG@loop_c,w
 19201  1980  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19202  1981  0084               	movwf	4
 19203  1982  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19204  1983  1803               	skipnc
 19205  1984  3E01               	addlw	1
 19206  1985  0085               	movwf	5
 19207  1986  0800               	movf	0,w	;code access
 19208  1987  00A5               	movwf	??_CC2500_InitSetREG
 19209  1988  0825               	movf	??_CC2500_InitSetREG,w
 19210  1989  00A6               	movwf	CC2500_InitSetREG@temp1
 19211                           
 19212                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19213  198A  0828               	movf	CC2500_InitSetREG@loop_c,w
 19214  198B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19215  198C  0084               	movwf	4
 19216  198D  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19217  198E  1803               	skipnc
 19218  198F  3E01               	addlw	1
 19219  1990  0085               	movwf	5
 19220  1991  0800               	movf	0,w	;code access
 19221  1992  00A5               	movwf	??_CC2500_InitSetREG
 19222  1993  0825               	movf	??_CC2500_InitSetREG,w
 19223  1994  00A7               	movwf	CC2500_InitSetREG@temp2
 19224                           
 19225                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19226  1995  0827               	movf	CC2500_InitSetREG@temp2,w
 19227  1996  00A5               	movwf	??_CC2500_InitSetREG
 19228  1997  0825               	movf	??_CC2500_InitSetREG,w
 19229  1998  00A2               	movwf	CC2500_WriteREG@value
 19230  1999  0826               	movf	CC2500_InitSetREG@temp1,w
 19231  199A  31A6  26AD  3199   	fcall	_CC2500_WriteREG
 19232  199D  3001               	movlw	1
 19233  199E  0020               	movlb	0	; select bank0
 19234  199F  00A5               	movwf	??_CC2500_InitSetREG
 19235  19A0  0825               	movf	??_CC2500_InitSetREG,w
 19236  19A1  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19237  19A2  297B               	goto	L15
 19238  19A3                     __end_of_CC2500_InitSetREG:	
 19239                           
 19240                           	psect	text125
 19241  279F                     __ptext125:	
 19242 ;; *************** function _CC2500_InitPATable *****************
 19243 ;; Defined at:
 19244 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19249 ;;  temp            1    6[BANK0 ] unsigned char 
 19250 ;; Return value:  Size  Location     Type
 19251 ;;		None               void
 19252 ;; Registers used:
 19253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19254 ;; Tracked objects:
 19255 ;;		On entry : 0/0
 19256 ;;		On exit  : 0/0
 19257 ;;		Unchanged: 0/0
 19258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19263 ;;Total ram usage:        3 bytes
 19264 ;; Hardware stack levels used:    1
 19265 ;; Hardware stack levels required when called:    6
 19266 ;; This function calls:
 19267 ;;		_CC2500_WriteREG
 19268 ;; This function is called by:
 19269 ;;		_CC2500_PowerOnInitial
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           
 19274                           ;psect for function _CC2500_InitPATable
 19275  279F                     _CC2500_InitPATable:	
 19276                           
 19277                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19278                           ;CC2500_B1.c: 150: unsigned char temp;
 19279                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19280                           
 19281                           ;incstack = 0
 19282                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19283  279F  0020               	movlb	0	; select bank0
 19284  27A0  01A7               	clrf	CC2500_InitPATable@loop_d
 19285  27A1                     L16:	
 19286  27A1  3008               	movlw	8
 19287  27A2  0227               	subwf	CC2500_InitPATable@loop_d,w
 19288  27A3  1803               	btfsc	3,0
 19289  27A4  0008               	return
 19290                           
 19291                           ;CC2500_B1.c: 153: {
 19292                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19293  27A5  0827               	movf	CC2500_InitPATable@loop_d,w
 19294  27A6  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19295  27A7  0084               	movwf	4
 19296  27A8  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19297  27A9  1803               	skipnc
 19298  27AA  3E01               	addlw	1
 19299  27AB  0085               	movwf	5
 19300  27AC  0800               	movf	0,w	;code access
 19301  27AD  00A5               	movwf	??_CC2500_InitPATable
 19302  27AE  0825               	movf	??_CC2500_InitPATable,w
 19303  27AF  00A6               	movwf	CC2500_InitPATable@temp
 19304                           
 19305                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19306  27B0  0826               	movf	CC2500_InitPATable@temp,w
 19307  27B1  00A5               	movwf	??_CC2500_InitPATable
 19308  27B2  0825               	movf	??_CC2500_InitPATable,w
 19309  27B3  00A2               	movwf	CC2500_WriteREG@value
 19310  27B4  303E               	movlw	62
 19311  27B5  31A6  26AD  31A7   	fcall	_CC2500_WriteREG
 19312  27B8  3001               	movlw	1
 19313  27B9  0020               	movlb	0	; select bank0
 19314  27BA  00A5               	movwf	??_CC2500_InitPATable
 19315  27BB  0825               	movf	??_CC2500_InitPATable,w
 19316  27BC  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19317  27BD  2FA1               	goto	L16
 19318  27BE                     __end_of_CC2500_InitPATable:	
 19319                           
 19320                           	psect	text126
 19321  26AD                     __ptext126:	
 19322 ;; *************** function _CC2500_WriteREG *****************
 19323 ;; Defined at:
 19324 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19325 ;; Parameters:    Size  Location     Type
 19326 ;;  w_addr          1    wreg     unsigned char 
 19327 ;;  value           1    2[BANK0 ] unsigned char 
 19328 ;; Auto vars:     Size  Location     Type
 19329 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19330 ;; Return value:  Size  Location     Type
 19331 ;;		None               void
 19332 ;; Registers used:
 19333 ;;		wreg, status,2, status,0, pclath, cstack
 19334 ;; Tracked objects:
 19335 ;;		On entry : 0/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19339 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19343 ;;Total ram usage:        3 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    5
 19346 ;; This function calls:
 19347 ;;		_CC2500_WriteByte
 19348 ;; This function is called by:
 19349 ;;		_CC2500_InitSetREG
 19350 ;;		_CC2500_InitPATable
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           
 19355                           ;psect for function _CC2500_WriteREG
 19356  26AD                     _CC2500_WriteREG:	
 19357                           
 19358                           ;incstack = 0
 19359                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19360                           ;CC2500_WriteREG@w_addr stored from wreg
 19361  26AD  0020               	movlb	0	; select bank0
 19362  26AE  00A4               	movwf	CC2500_WriteREG@w_addr
 19363                           
 19364                           ;CC2500_B1.c: 229: RC4=0;
 19365  26AF  120E               	bcf	14,4	;volatile
 19366                           
 19367                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19368  26B0  0824               	movf	CC2500_WriteREG@w_addr,w
 19369  26B1  00A3               	movwf	??_CC2500_WriteREG
 19370  26B2  0823               	movf	??_CC2500_WriteREG,w
 19371  26B3  0021               	movlb	1	; select bank1
 19372  26B4  00BF               	movwf	_SPI0Buffer^(0+128)
 19373  26B5                     l385:	
 19374                           ;CC2500_B1.c: 231: while(RC2==1);
 19375                           
 19376  26B5  0020               	movlb	0	; select bank0
 19377  26B6  190E               	btfsc	14,2	;volatile
 19378  26B7  2EB5               	goto	l385
 19379                           
 19380                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19381  26B8  31A6  2694  31A6   	fcall	_CC2500_WriteByte
 19382                           
 19383                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19384  26BB  0020               	movlb	0	; select bank0
 19385  26BC  0822               	movf	CC2500_WriteREG@value,w
 19386  26BD  00A3               	movwf	??_CC2500_WriteREG
 19387  26BE  0823               	movf	??_CC2500_WriteREG,w
 19388  26BF  0021               	movlb	1	; select bank1
 19389  26C0  00BF               	movwf	_SPI0Buffer^(0+128)
 19390                           
 19391                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19392  26C1  31A6  2694         	fcall	_CC2500_WriteByte
 19393                           
 19394                           ;CC2500_B1.c: 235: RC4=1;
 19395  26C3  0020               	movlb	0	; select bank0
 19396  26C4  160E               	bsf	14,4	;volatile
 19397  26C5  0008               	return
 19398  26C6                     __end_of_CC2500_WriteREG:	
 19399                           
 19400                           	psect	text127
 19401  24A2                     __ptext127:	
 19402 ;; *************** function _CC2500_FrequencyCabr *****************
 19403 ;; Defined at:
 19404 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;		None               void
 19411 ;; Registers used:
 19412 ;;		wreg, status,2, status,0, pclath, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19422 ;;Total ram usage:        0 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:    6
 19425 ;; This function calls:
 19426 ;;		_CC2500_WriteCommand
 19427 ;;		_DelayTime_1us
 19428 ;; This function is called by:
 19429 ;;		_CC2500_PowerOnInitial
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           
 19434                           ;psect for function _CC2500_FrequencyCabr
 19435  24A2                     _CC2500_FrequencyCabr:	
 19436                           
 19437                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19438                           
 19439                           ;incstack = 0
 19440                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19441  24A2  3033               	movlw	51
 19442  24A3  31A5  2540  31A4   	fcall	_CC2500_WriteCommand
 19443                           
 19444                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19445  24A6  30E8               	movlw	232
 19446  24A7  0020               	movlb	0	; select bank0
 19447  24A8  00A0               	movwf	DelayTime_1us@count
 19448  24A9  3003               	movlw	3
 19449  24AA  00A1               	movwf	DelayTime_1us@count+1
 19450  24AB  3199  2106         	fcall	_DelayTime_1us
 19451  24AD  0008               	return
 19452  24AE                     __end_of_CC2500_FrequencyCabr:	
 19453                           
 19454                           	psect	text128
 19455  1906                     __ptext128:	
 19456 ;; *************** function _DelayTime_1us *****************
 19457 ;; Defined at:
 19458 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19459 ;; Parameters:    Size  Location     Type
 19460 ;;  count           2    0[BANK0 ] int 
 19461 ;; Auto vars:     Size  Location     Type
 19462 ;;  j               2    4[BANK0 ] unsigned int 
 19463 ;;  i               2    2[BANK0 ] unsigned int 
 19464 ;; Return value:  Size  Location     Type
 19465 ;;		None               void
 19466 ;; Registers used:
 19467 ;;		wreg, status,2
 19468 ;; Tracked objects:
 19469 ;;		On entry : 0/0
 19470 ;;		On exit  : 0/0
 19471 ;;		Unchanged: 0/0
 19472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;Total ram usage:        6 bytes
 19478 ;; Hardware stack levels used:    1
 19479 ;; Hardware stack levels required when called:    4
 19480 ;; This function calls:
 19481 ;;		Nothing
 19482 ;; This function is called by:
 19483 ;;		_CC2500_PowerRST
 19484 ;;		_CC2500_FrequencyCabr
 19485 ;; This function uses a non-reentrant model
 19486 ;;
 19487                           
 19488                           
 19489                           ;psect for function _DelayTime_1us
 19490  1906                     _DelayTime_1us:	
 19491                           
 19492                           ;CC2500_B1.c: 285: unsigned int i,j;
 19493                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19494                           
 19495                           ;incstack = 0
 19496                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19497  1906  3001               	movlw	1
 19498  1907  0020               	movlb	0	; select bank0
 19499  1908  00A2               	movwf	DelayTime_1us@i
 19500  1909  3000               	movlw	0
 19501  190A  00A3               	movwf	DelayTime_1us@i+1
 19502  190B                     l409:	
 19503  190B  0821               	movf	DelayTime_1us@count+1,w
 19504  190C  0223               	subwf	DelayTime_1us@i+1,w
 19505  190D  1D03               	skipz
 19506  190E  2911               	goto	u8725
 19507  190F  0820               	movf	DelayTime_1us@count,w
 19508  1910  0222               	subwf	DelayTime_1us@i,w
 19509  1911                     u8725:	
 19510  1911  1803               	btfsc	3,0
 19511  1912  0008               	return
 19512                           
 19513                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19514  1913  01A4               	clrf	DelayTime_1us@j
 19515  1914  01A5               	clrf	DelayTime_1us@j+1
 19516  1915  3000               	movlw	0
 19517  1916  0225               	subwf	DelayTime_1us@j+1,w
 19518  1917  3002               	movlw	2
 19519  1918  1903               	skipnz
 19520  1919  0224               	subwf	DelayTime_1us@j,w
 19521  191A  1803               	btfsc	3,0
 19522  191B  2927               	goto	l8992
 19523  191C                     l8990:	
 19524  191C  3001               	movlw	1
 19525  191D  07A4               	addwf	DelayTime_1us@j,f
 19526  191E  3000               	movlw	0
 19527  191F  3DA5               	addwfc	DelayTime_1us@j+1,f
 19528  1920  3000               	movlw	0
 19529  1921  0225               	subwf	DelayTime_1us@j+1,w
 19530  1922  3002               	movlw	2
 19531  1923  1903               	skipnz
 19532  1924  0224               	subwf	DelayTime_1us@j,w
 19533  1925  1C03               	skipc
 19534  1926  291C               	goto	l8990
 19535  1927                     l8992:	
 19536  1927  3001               	movlw	1
 19537  1928  07A2               	addwf	DelayTime_1us@i,f
 19538  1929  3000               	movlw	0
 19539  192A  3DA3               	addwfc	DelayTime_1us@i+1,f
 19540  192B  290B               	goto	l409
 19541  192C                     __end_of_DelayTime_1us:	
 19542                           
 19543                           	psect	text129
 19544  23A0                     __ptext129:	
 19545 ;; *************** function _CC2500_ClearTXFIFO *****************
 19546 ;; Defined at:
 19547 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19548 ;; Parameters:    Size  Location     Type
 19549 ;;		None
 19550 ;; Auto vars:     Size  Location     Type
 19551 ;;		None
 19552 ;; Return value:  Size  Location     Type
 19553 ;;		None               void
 19554 ;; Registers used:
 19555 ;;		wreg, status,2, status,0, pclath, cstack
 19556 ;; Tracked objects:
 19557 ;;		On entry : 0/0
 19558 ;;		On exit  : 0/0
 19559 ;;		Unchanged: 0/0
 19560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19565 ;;Total ram usage:        0 bytes
 19566 ;; Hardware stack levels used:    1
 19567 ;; Hardware stack levels required when called:    6
 19568 ;; This function calls:
 19569 ;;		_CC2500_WriteCommand
 19570 ;; This function is called by:
 19571 ;;		_CC2500_PowerOnInitial
 19572 ;; This function uses a non-reentrant model
 19573 ;;
 19574                           
 19575                           
 19576                           ;psect for function _CC2500_ClearTXFIFO
 19577  23A0                     _CC2500_ClearTXFIFO:	
 19578                           
 19579                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19580                           
 19581                           ;incstack = 0
 19582                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19583  23A0  303B               	movlw	59
 19584  23A1  31A5  2540         	fcall	_CC2500_WriteCommand
 19585  23A3  0008               	return
 19586  23A4                     __end_of_CC2500_ClearTXFIFO:	
 19587                           
 19588                           	psect	text130
 19589  239C                     __ptext130:	
 19590 ;; *************** function _CC2500_ClearRXFIFO *****************
 19591 ;; Defined at:
 19592 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;		None
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;		None               void
 19599 ;; Registers used:
 19600 ;;		wreg, status,2, status,0, pclath, cstack
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19610 ;;Total ram usage:        0 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:    6
 19613 ;; This function calls:
 19614 ;;		_CC2500_WriteCommand
 19615 ;; This function is called by:
 19616 ;;		_CC2500_PowerOnInitial
 19617 ;; This function uses a non-reentrant model
 19618 ;;
 19619                           
 19620                           
 19621                           ;psect for function _CC2500_ClearRXFIFO
 19622  239C                     _CC2500_ClearRXFIFO:	
 19623                           
 19624                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19625                           
 19626                           ;incstack = 0
 19627                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19628  239C  303A               	movlw	58
 19629  239D  31A5  2540         	fcall	_CC2500_WriteCommand
 19630  239F  0008               	return
 19631  23A0                     __end_of_CC2500_ClearRXFIFO:	
 19632                           
 19633                           	psect	text131
 19634  2540                     __ptext131:	
 19635 ;; *************** function _CC2500_WriteCommand *****************
 19636 ;; Defined at:
 19637 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;  command         1    wreg     unsigned char 
 19640 ;; Auto vars:     Size  Location     Type
 19641 ;;  command         1    3[BANK0 ] unsigned char 
 19642 ;; Return value:  Size  Location     Type
 19643 ;;		None               void
 19644 ;; Registers used:
 19645 ;;		wreg, status,2, status,0, pclath, cstack
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;Total ram usage:        2 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:    5
 19658 ;; This function calls:
 19659 ;;		_CC2500_WriteByte
 19660 ;; This function is called by:
 19661 ;;		_CC2500_TxData
 19662 ;;		_CC2500_RxData
 19663 ;;		_CC2500_ClearTXFIFO
 19664 ;;		_CC2500_ClearRXFIFO
 19665 ;;		_CC2500_FrequencyCabr
 19666 ;;		_CC2500_SIDLEMode
 19667 ;;		_setRF_Main
 19668 ;;		_RF_RxDisable
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           
 19673                           ;psect for function _CC2500_WriteCommand
 19674  2540                     _CC2500_WriteCommand:	
 19675                           
 19676                           ;incstack = 0
 19677                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19678                           ;CC2500_WriteCommand@command stored from wreg
 19679  2540  0020               	movlb	0	; select bank0
 19680  2541  00A3               	movwf	CC2500_WriteCommand@command
 19681                           
 19682                           ;CC2500_B1.c: 255: RC4=0;
 19683  2542  120E               	bcf	14,4	;volatile
 19684                           
 19685                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19686  2543  0823               	movf	CC2500_WriteCommand@command,w
 19687  2544  00A2               	movwf	??_CC2500_WriteCommand
 19688  2545  0822               	movf	??_CC2500_WriteCommand,w
 19689  2546  0021               	movlb	1	; select bank1
 19690  2547  00BF               	movwf	_SPI0Buffer^(0+128)
 19691  2548                     l397:	
 19692                           ;CC2500_B1.c: 258: while(RC2==1);
 19693                           
 19694  2548  0020               	movlb	0	; select bank0
 19695  2549  190E               	btfsc	14,2	;volatile
 19696  254A  2D48               	goto	l397
 19697                           
 19698                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19699  254B  31A6  2694         	fcall	_CC2500_WriteByte
 19700                           
 19701                           ;CC2500_B1.c: 261: RC4=1;
 19702  254D  0020               	movlb	0	; select bank0
 19703  254E  160E               	bsf	14,4	;volatile
 19704  254F  0008               	return
 19705  2550                     __end_of_CC2500_WriteCommand:	
 19706                           
 19707                           	psect	text132
 19708  2694                     __ptext132:	
 19709 ;; *************** function _CC2500_WriteByte *****************
 19710 ;; Defined at:
 19711 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19716 ;; Return value:  Size  Location     Type
 19717 ;;		None               void
 19718 ;; Registers used:
 19719 ;;		wreg, status,2, status,0
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;Total ram usage:        2 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    4
 19732 ;; This function calls:
 19733 ;;		Nothing
 19734 ;; This function is called by:
 19735 ;;		_CC2500_TxData
 19736 ;;		_CC2500_RxData
 19737 ;;		_CC2500_PowerRST
 19738 ;;		_CC2500_WriteREG
 19739 ;;		_CC2500_WriteCommand
 19740 ;;		_CC2500_ReadStatus
 19741 ;;		_CC2500_ReadREG
 19742 ;; This function uses a non-reentrant model
 19743 ;;
 19744                           
 19745                           
 19746                           ;psect for function _CC2500_WriteByte
 19747  2694                     _CC2500_WriteByte:	
 19748                           
 19749                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19750                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19751                           
 19752                           ;incstack = 0
 19753                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19754  2694  0020               	movlb	0	; select bank0
 19755  2695  01A1               	clrf	CC2500_WriteByte@loop_a
 19756  2696                     L17:	
 19757  2696  3008               	movlw	8
 19758  2697  0221               	subwf	CC2500_WriteByte@loop_a,w
 19759  2698  1803               	btfsc	3,0
 19760  2699  0008               	return
 19761                           
 19762                           ;CC2500_B1.c: 197: {
 19763                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19764  269A  0021               	movlb	1	; select bank1
 19765  269B  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19766  269C  2EA0               	goto	l373
 19767                           
 19768                           ;CC2500_B1.c: 199: RC0=1;
 19769  269D  0020               	movlb	0	; select bank0
 19770  269E  140E               	bsf	14,0	;volatile
 19771  269F  2EA2               	goto	l374
 19772  26A0                     l373:	
 19773                           
 19774                           ;CC2500_B1.c: 200: else
 19775                           ;CC2500_B1.c: 201: RC0=0;
 19776  26A0  0020               	movlb	0	; select bank0
 19777  26A1  100E               	bcf	14,0	;volatile
 19778  26A2                     l374:	
 19779                           
 19780                           ;CC2500_B1.c: 202: RC1=1;
 19781  26A2  148E               	bsf	14,1	;volatile
 19782                           
 19783                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19784  26A3  1003               	clrc
 19785  26A4  0021               	movlb	1	; select bank1
 19786  26A5  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19787                           
 19788                           ;CC2500_B1.c: 204: RC1=0;
 19789  26A6  0020               	movlb	0	; select bank0
 19790  26A7  108E               	bcf	14,1	;volatile
 19791  26A8  3001               	movlw	1
 19792  26A9  00A0               	movwf	??_CC2500_WriteByte
 19793  26AA  0820               	movf	??_CC2500_WriteByte,w
 19794  26AB  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19795  26AC  2E96               	goto	L17
 19796  26AD                     __end_of_CC2500_WriteByte:	
 19797                           
 19798                           	psect	text133
 19799  08F3                     __ptext133:	
 19800 ;; *************** function _Buzzer_Main *****************
 19801 ;; Defined at:
 19802 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 19803 ;; Parameters:    Size  Location     Type
 19804 ;;		None
 19805 ;; Auto vars:     Size  Location     Type
 19806 ;;		None
 19807 ;; Return value:  Size  Location     Type
 19808 ;;		None               void
 19809 ;; Registers used:
 19810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19811 ;; Tracked objects:
 19812 ;;		On entry : 0/0
 19813 ;;		On exit  : 0/0
 19814 ;;		Unchanged: 0/0
 19815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19818 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19819 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19820 ;;Total ram usage:        4 bytes
 19821 ;; Hardware stack levels used:    1
 19822 ;; Hardware stack levels required when called:    4
 19823 ;; This function calls:
 19824 ;;		Nothing
 19825 ;; This function is called by:
 19826 ;;		_main
 19827 ;; This function uses a non-reentrant model
 19828 ;;
 19829                           
 19830                           
 19831                           ;psect for function _Buzzer_Main
 19832  08F3                     _Buzzer_Main:	
 19833                           
 19834                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19835                           
 19836                           ;incstack = 0
 19837                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19838  08F3  0878               	movf	_Buz,w
 19839  08F4  0086               	movwf	6
 19840  08F5  3001               	movlw	1	; select bank2/3
 19841  08F6  0087               	movwf	7
 19842  08F7  1281               	bcf	1,5
 19843  08F8  0020               	movlb	0	; select bank0
 19844  08F9  198D               	btfsc	13,3	;volatile
 19845  08FA  1681               	bsf	1,5
 19846                           
 19847                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19848  08FB  0878               	movf	_Buz,w
 19849  08FC  0086               	movwf	6
 19850  08FD  3001               	movlw	1	; select bank2/3
 19851  08FE  0087               	movwf	7
 19852  08FF  1C81               	btfss	1,1
 19853  0900  0008               	return
 19854                           
 19855                           ;Buzzer_B1.c: 58: {
 19856                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19857  0901  0878               	movf	_Buz,w
 19858  0902  3E06               	addlw	6
 19859  0903  0086               	movwf	6
 19860  0904  3001               	movlw	1	; select bank2/3
 19861  0905  0087               	movwf	7
 19862  0906  3F40               	moviw [0]fsr1
 19863  0907  0020               	movlb	0	; select bank0
 19864  0908  00A0               	movwf	??_Buzzer_Main
 19865  0909  3F41               	moviw [1]fsr1
 19866  090A  00A1               	movwf	??_Buzzer_Main+1
 19867  090B  0A78               	incf	_Buz,w
 19868  090C  0086               	movwf	6
 19869  090D  3001               	movlw	1	; select bank2/3
 19870  090E  0087               	movwf	7
 19871  090F  3F40               	moviw [0]fsr1
 19872  0910  00A2               	movwf	??_Buzzer_Main+2
 19873  0911  3F41               	moviw [1]fsr1
 19874  0912  00A3               	movwf	??_Buzzer_Main+3
 19875  0913  0821               	movf	??_Buzzer_Main+1,w
 19876  0914  0223               	subwf	??_Buzzer_Main+3,w
 19877  0915  1D03               	skipz
 19878  0916  2919               	goto	u7065
 19879  0917  0820               	movf	??_Buzzer_Main,w
 19880  0918  0222               	subwf	??_Buzzer_Main+2,w
 19881  0919                     u7065:	
 19882  0919  1C03               	skipc
 19883  091A  0008               	return
 19884                           
 19885                           ;Buzzer_B1.c: 61: {
 19886                           ;Buzzer_B1.c: 62: Buz->Time=0;
 19887  091B  0A78               	incf	_Buz,w
 19888  091C  0086               	movwf	6
 19889  091D  3001               	movlw	1	; select bank2/3
 19890  091E  0087               	movwf	7
 19891  091F  3000               	movlw	0
 19892  0920  3FC0               	movwi [0]fsr1
 19893  0921  3FC1               	movwi [1]fsr1
 19894                           
 19895                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 19896  0922  0878               	movf	_Buz,w
 19897  0923  0086               	movwf	6
 19898  0924  3001               	movlw	1	; select bank2/3
 19899  0925  0087               	movwf	7
 19900  0926  1A81               	btfsc	1,5
 19901  0927  298D               	goto	l7942
 19902                           
 19903                           ;Buzzer_B1.c: 64: {
 19904                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 19905  0928  0878               	movf	_Buz,w
 19906  0929  3E03               	addlw	3
 19907  092A  0086               	movwf	6
 19908  092B  3001               	movlw	1	; select bank2/3
 19909  092C  0087               	movwf	7
 19910  092D  0881               	movf	1,f
 19911  092E  1D03               	skipz
 19912  092F  2986               	goto	l7938
 19913                           
 19914                           ;Buzzer_B1.c: 66: {
 19915                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 19916  0930  0878               	movf	_Buz,w
 19917  0931  0086               	movwf	6
 19918  0932  3001               	movlw	1	; select bank2/3
 19919  0933  0087               	movwf	7
 19920  0934  1D81               	btfss	1,3
 19921  0935  2958               	goto	l7930
 19922                           
 19923                           ;Buzzer_B1.c: 68: {
 19924                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 19925  0936  0878               	movf	_Buz,w
 19926  0937  0086               	movwf	6
 19927  0938  3001               	movlw	1	; select bank2/3
 19928  0939  0087               	movwf	7
 19929  093A  1181               	bcf	1,3
 19930                           
 19931                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 19932  093B  0878               	movf	_Buz,w
 19933  093C  3E04               	addlw	4
 19934  093D  0086               	movwf	6
 19935  093E  3001               	movlw	1	; select bank2/3
 19936  093F  0087               	movwf	7
 19937  0940  0801               	movf	1,w
 19938  0941  00A0               	movwf	??_Buzzer_Main
 19939  0942  0878               	movf	_Buz,w
 19940  0943  3E03               	addlw	3
 19941  0944  0086               	movwf	6
 19942  0945  3001               	movlw	1	; select bank2/3
 19943  0946  0087               	movwf	7
 19944  0947  0820               	movf	??_Buzzer_Main,w
 19945  0948  0081               	movwf	1
 19946                           
 19947                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 19948  0949  0878               	movf	_Buz,w
 19949  094A  3E08               	addlw	8
 19950  094B  0086               	movwf	6
 19951  094C  3001               	movlw	1	; select bank2/3
 19952  094D  0087               	movwf	7
 19953  094E  0878               	movf	_Buz,w
 19954  094F  3E06               	addlw	6
 19955  0950  0084               	movwf	4
 19956  0951  3001               	movlw	1	; select bank2/3
 19957  0952  0085               	movwf	5
 19958  0953  3F40               	moviw [0]fsr1
 19959  0954  3F80               	movwi [0]fsr0
 19960  0955  3F41               	moviw [1]fsr1
 19961  0956  3F81               	movwi [1]fsr0
 19962                           
 19963                           ;Buzzer_B1.c: 72: }
 19964  0957  0008               	return
 19965  0958                     l7930:	
 19966                           
 19967                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 19968  0958  0878               	movf	_Buz,w
 19969  0959  0086               	movwf	6
 19970  095A  3001               	movlw	1	; select bank2/3
 19971  095B  0087               	movwf	7
 19972  095C  1E01               	btfss	1,4
 19973  095D  2980               	goto	l7936
 19974                           
 19975                           ;Buzzer_B1.c: 74: {
 19976                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 19977  095E  0878               	movf	_Buz,w
 19978  095F  0086               	movwf	6
 19979  0960  3001               	movlw	1	; select bank2/3
 19980  0961  0087               	movwf	7
 19981  0962  1201               	bcf	1,4
 19982                           
 19983                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 19984  0963  0878               	movf	_Buz,w
 19985  0964  3E05               	addlw	5
 19986  0965  0086               	movwf	6
 19987  0966  3001               	movlw	1	; select bank2/3
 19988  0967  0087               	movwf	7
 19989  0968  0801               	movf	1,w
 19990  0969  00A0               	movwf	??_Buzzer_Main
 19991  096A  0878               	movf	_Buz,w
 19992  096B  3E03               	addlw	3
 19993  096C  0086               	movwf	6
 19994  096D  3001               	movlw	1	; select bank2/3
 19995  096E  0087               	movwf	7
 19996  096F  0820               	movf	??_Buzzer_Main,w
 19997  0970  0081               	movwf	1
 19998                           
 19999                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20000  0971  0878               	movf	_Buz,w
 20001  0972  3E0A               	addlw	10
 20002  0973  0086               	movwf	6
 20003  0974  3001               	movlw	1	; select bank2/3
 20004  0975  0087               	movwf	7
 20005  0976  0878               	movf	_Buz,w
 20006  0977  3E06               	addlw	6
 20007  0978  0084               	movwf	4
 20008  0979  3001               	movlw	1	; select bank2/3
 20009  097A  0085               	movwf	5
 20010  097B  3F40               	moviw [0]fsr1
 20011  097C  3F80               	movwi [0]fsr0
 20012  097D  3F41               	moviw [1]fsr1
 20013  097E  3F81               	movwi [1]fsr0
 20014                           
 20015                           ;Buzzer_B1.c: 78: }
 20016  097F  0008               	return
 20017  0980                     l7936:	
 20018                           
 20019                           ;Buzzer_B1.c: 79: else
 20020                           ;Buzzer_B1.c: 80: {
 20021                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20022  0980  0878               	movf	_Buz,w
 20023  0981  0086               	movwf	6
 20024  0982  3001               	movlw	1	; select bank2/3
 20025  0983  0087               	movwf	7
 20026  0984  1081               	bcf	1,1
 20027                           
 20028                           ;Buzzer_B1.c: 82: }
 20029                           ;Buzzer_B1.c: 83: }
 20030  0985  0008               	return
 20031  0986                     l7938:	
 20032                           
 20033                           ;Buzzer_B1.c: 84: else
 20034                           ;Buzzer_B1.c: 85: {
 20035                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20036  0986  0878               	movf	_Buz,w
 20037  0987  0086               	movwf	6
 20038  0988  3001               	movlw	1	; select bank2/3
 20039  0989  0087               	movwf	7
 20040  098A  1681               	bsf	1,5
 20041                           
 20042                           ;Buzzer_B1.c: 88: RB3=1;
 20043  098B  158D               	bsf	13,3	;volatile
 20044                           
 20045                           ;Buzzer_B1.c: 89: }
 20046                           ;Buzzer_B1.c: 90: }
 20047  098C  0008               	return
 20048  098D                     l7942:	
 20049                           
 20050                           ;Buzzer_B1.c: 91: else
 20051                           ;Buzzer_B1.c: 92: {
 20052                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20053  098D  0878               	movf	_Buz,w
 20054  098E  0086               	movwf	6
 20055  098F  3001               	movlw	1	; select bank2/3
 20056  0990  0087               	movwf	7
 20057  0991  1281               	bcf	1,5
 20058                           
 20059                           ;Buzzer_B1.c: 95: RB3=0;
 20060  0992  118D               	bcf	13,3	;volatile
 20061                           
 20062                           ;Buzzer_B1.c: 97: Buz->Count--;
 20063  0993  0878               	movf	_Buz,w
 20064  0994  3E03               	addlw	3
 20065  0995  0086               	movwf	6
 20066  0996  3001               	movlw	1	; select bank2/3
 20067  0997  0087               	movwf	7
 20068  0998  3001               	movlw	1
 20069  0999  0281               	subwf	1,f
 20070  099A  0008               	return
 20071  099B                     __end_of_Buzzer_Main:	
 20072                           
 20073                           	psect	text134
 20074  2427                     __ptext134:	
 20075 ;; *************** function _Buzzer_Initialization *****************
 20076 ;; Defined at:
 20077 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20078 ;; Parameters:    Size  Location     Type
 20079 ;;		None
 20080 ;; Auto vars:     Size  Location     Type
 20081 ;;		None
 20082 ;; Return value:  Size  Location     Type
 20083 ;;		None               void
 20084 ;; Registers used:
 20085 ;;		wreg, fsr1l, fsr1h
 20086 ;; Tracked objects:
 20087 ;;		On entry : 0/0
 20088 ;;		On exit  : 0/0
 20089 ;;		Unchanged: 0/0
 20090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20095 ;;Total ram usage:        1 bytes
 20096 ;; Hardware stack levels used:    1
 20097 ;; Hardware stack levels required when called:    4
 20098 ;; This function calls:
 20099 ;;		Nothing
 20100 ;; This function is called by:
 20101 ;;		_main
 20102 ;; This function uses a non-reentrant model
 20103 ;;
 20104                           
 20105                           
 20106                           ;psect for function _Buzzer_Initialization
 20107  2427                     _Buzzer_Initialization:	
 20108                           
 20109                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20110                           
 20111                           ;incstack = 0
 20112                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20113  2427  3048               	movlw	_Buz1& (0+255)
 20114  2428  0020               	movlb	0	; select bank0
 20115  2429  00A0               	movwf	??_Buzzer_Initialization
 20116  242A  0820               	movf	??_Buzzer_Initialization,w
 20117  242B  00F8               	movwf	_Buz
 20118                           
 20119                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20120  242C  0878               	movf	_Buz,w
 20121  242D  0086               	movwf	6
 20122  242E  3001               	movlw	1	; select bank2/3
 20123  242F  0087               	movwf	7
 20124  2430  1401               	bsf	1,0
 20125  2431  0008               	return
 20126  2432                     __end_of_Buzzer_Initialization:	
 20127                           
 20128                           	psect	intentry
 20129  0004                     __pintentry:	
 20130 ;; *************** function _ISR *****************
 20131 ;; Defined at:
 20132 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20133 ;; Parameters:    Size  Location     Type
 20134 ;;		None
 20135 ;; Auto vars:     Size  Location     Type
 20136 ;;		None
 20137 ;; Return value:  Size  Location     Type
 20138 ;;		None               void
 20139 ;; Registers used:
 20140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20141 ;; Tracked objects:
 20142 ;;		On entry : 0/0
 20143 ;;		On exit  : 0/0
 20144 ;;		Unchanged: 0/0
 20145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20148 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20149 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20150 ;;Total ram usage:        1 bytes
 20151 ;; Hardware stack levels used:    1
 20152 ;; Hardware stack levels required when called:    3
 20153 ;; This function calls:
 20154 ;;		_INT_ISR
 20155 ;;		_IOC_ISR
 20156 ;;		_TMR0_ISR
 20157 ;; This function is called by:
 20158 ;;		Interrupt level 1
 20159 ;; This function uses a non-reentrant model
 20160 ;;
 20161                           
 20162  0004                     _ISR:	
 20163                           
 20164                           ;incstack = 0
 20165                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20166  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20167  0005  3180               	pagesel	$
 20168  0006  0020               	movlb	0	; select bank0
 20169  0007  087F               	movf	127,w
 20170  0008  00F7               	movwf	??_ISR
 20171                           
 20172                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 20173  0009  3198  20E1  3180   	fcall	_IOC_ISR
 20174                           
 20175                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 20176  000C  3180  2059  3180   	fcall	_TMR0_ISR
 20177                           
 20178                           ;MCU_16f1518_B1.c: 62: ;;
 20179                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 20180  000F  31A4  2496         	fcall	_INT_ISR
 20181  0011  0877               	movf	??_ISR,w
 20182  0012  0020               	movlb	0	; select bank0
 20183  0013  00FF               	movwf	127
 20184  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20185  0015  0009               	retfie
 20186  0016                     __end_of_ISR:	
 20187                           
 20188                           	psect	text136
 20189  0059                     __ptext136:	
 20190 ;; *************** function _TMR0_ISR *****************
 20191 ;; Defined at:
 20192 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20193 ;; Parameters:    Size  Location     Type
 20194 ;;		None
 20195 ;; Auto vars:     Size  Location     Type
 20196 ;;		None
 20197 ;; Return value:  Size  Location     Type
 20198 ;;		None               void
 20199 ;; Registers used:
 20200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20201 ;; Tracked objects:
 20202 ;;		On entry : 0/0
 20203 ;;		On exit  : 0/0
 20204 ;;		Unchanged: 0/0
 20205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20208 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20209 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20210 ;;Total ram usage:        4 bytes
 20211 ;; Hardware stack levels used:    1
 20212 ;; Hardware stack levels required when called:    1
 20213 ;; This function calls:
 20214 ;;		i1_setLoad_StatusOff
 20215 ;; This function is called by:
 20216 ;;		_ISR
 20217 ;; This function uses a non-reentrant model
 20218 ;;
 20219                           
 20220                           
 20221                           ;psect for function _TMR0_ISR
 20222  0059                     _TMR0_ISR:	
 20223                           
 20224                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 20225                           
 20226                           ;incstack = 0
 20227                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20228  0059  1E8B               	btfss	11,5	;volatile
 20229  005A  0008               	return
 20230  005B  1D0B               	btfss	11,2	;volatile
 20231  005C  0008               	return
 20232                           
 20233                           ;MCU_16f1518_B1.c: 85: {
 20234                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 20235  005D  30A6               	movlw	166
 20236  005E  0020               	movlb	0	; select bank0
 20237  005F  0095               	movwf	21	;volatile
 20238                           
 20239                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 20240  0060  110B               	bcf	11,2	;volatile
 20241                           
 20242                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1
      +                          ; ;; } } }
 20243  0061  0879               	movf	_DimmerLights11,w
 20244  0062  0086               	movwf	6
 20245  0063  3001               	movlw	1	; select bank2/3
 20246  0064  0087               	movwf	7
 20247  0065  1C01               	btfss	1,0
 20248  0066  28B1               	goto	i1l8326
 20249  0067  3001               	movlw	1
 20250  0068  00F3               	movwf	??_TMR0_ISR
 20251  0069  0879               	movf	_DimmerLights11,w
 20252  006A  3E03               	addlw	3
 20253  006B  0086               	movwf	6
 20254  006C  3001               	movlw	1	; select bank2/3
 20255  006D  0087               	movwf	7
 20256  006E  0873               	movf	??_TMR0_ISR,w
 20257  006F  0781               	addwf	1,f
 20258  0070  0021               	movlb	1	; select bank1
 20259  0071  0839               	movf	_Dimmer^(0+128),w
 20260  0072  3E02               	addlw	2
 20261  0073  0086               	movwf	6
 20262  0074  0187               	clrf	7
 20263  0075  0801               	movf	1,w
 20264  0076  00F3               	movwf	??_TMR0_ISR
 20265  0077  01F4               	clrf	??_TMR0_ISR+1
 20266  0078  09F3               	comf	??_TMR0_ISR,f
 20267  0079  09F4               	comf	??_TMR0_ISR+1,f
 20268  007A  0AF3               	incf	??_TMR0_ISR,f
 20269  007B  1903               	skipnz
 20270  007C  0AF4               	incf	??_TMR0_ISR+1,f
 20271  007D  0879               	movf	_DimmerLights11,w
 20272  007E  3E04               	addlw	4
 20273  007F  0086               	movwf	6
 20274  0080  3001               	movlw	1	; select bank2/3
 20275  0081  0087               	movwf	7
 20276  0082  0801               	movf	1,w
 20277  0083  0773               	addwf	??_TMR0_ISR,w
 20278  0084  00F5               	movwf	??_TMR0_ISR+2
 20279  0085  0874               	movf	??_TMR0_ISR+1,w
 20280  0086  1803               	skipnc
 20281  0087  0A74               	incf	??_TMR0_ISR+1,w
 20282  0088  00F6               	movwf	??_TMR0_ISR+3
 20283  0089  0879               	movf	_DimmerLights11,w
 20284  008A  3E03               	addlw	3
 20285  008B  0086               	movwf	6
 20286  008C  3001               	movlw	1	; select bank2/3
 20287  008D  0087               	movwf	7
 20288  008E  0876               	movf	??_TMR0_ISR+3,w
 20289  008F  3A80               	xorlw	128
 20290  0090  3C80               	sublw	128
 20291  0091  1D03               	skipz
 20292  0092  2895               	goto	u764_25
 20293  0093  0875               	movf	??_TMR0_ISR+2,w
 20294  0094  0201               	subwf	1,w
 20295  0095                     u764_25:	
 20296  0095  1C03               	skipc
 20297  0096  29EB               	goto	i1l8392
 20298  0097  0879               	movf	_DimmerLights11,w
 20299  0098  3E03               	addlw	3
 20300  0099  0086               	movwf	6
 20301  009A  3001               	movlw	1	; select bank2/3
 20302  009B  0087               	movwf	7
 20303  009C  0181               	clrf	1
 20304  009D  0879               	movf	_DimmerLights11,w
 20305  009E  0086               	movwf	6
 20306  009F  3001               	movlw	1	; select bank2/3
 20307  00A0  0087               	movwf	7
 20308  00A1  1001               	bcf	1,0
 20309  00A2  0879               	movf	_DimmerLights11,w
 20310  00A3  3E07               	addlw	7
 20311  00A4  0086               	movwf	6
 20312  00A5  3001               	movlw	1	; select bank2/3
 20313  00A6  0087               	movwf	7
 20314  00A7  1401               	bsf	1,0
 20315  00A8  0879               	movf	_DimmerLights11,w
 20316  00A9  0086               	movwf	6
 20317  00AA  3001               	movlw	1	; select bank2/3
 20318  00AB  0087               	movwf	7
 20319  00AC  1F01               	btfss	1,6
 20320  00AD  29EB               	goto	i1l8392
 20321  00AE  0020               	movlb	0	; select bank0
 20322  00AF  178C               	bsf	12,7	;volatile
 20323  00B0  29EB               	goto	i1l8392
 20324  00B1                     i1l8326:	
 20325  00B1  0879               	movf	_DimmerLights11,w
 20326  00B2  3E07               	addlw	7
 20327  00B3  0086               	movwf	6
 20328  00B4  3001               	movlw	1	; select bank2/3
 20329  00B5  0087               	movwf	7
 20330  00B6  1C01               	btfss	1,0
 20331  00B7  29B6               	goto	i1l8384
 20332  00B8  0879               	movf	_DimmerLights11,w
 20333  00B9  3E07               	addlw	7
 20334  00BA  0086               	movwf	6
 20335  00BB  3001               	movlw	1	; select bank2/3
 20336  00BC  0087               	movwf	7
 20337  00BD  1001               	bcf	1,0
 20338  00BE  0879               	movf	_DimmerLights11,w
 20339  00BF  0086               	movwf	6
 20340  00C0  3001               	movlw	1	; select bank2/3
 20341  00C1  0087               	movwf	7
 20342  00C2  1C81               	btfss	1,1
 20343  00C3  29B6               	goto	i1l8384
 20344  00C4  3001               	movlw	1
 20345  00C5  00F3               	movwf	??_TMR0_ISR
 20346  00C6  0A79               	incf	_DimmerLights11,w
 20347  00C7  0086               	movwf	6
 20348  00C8  3001               	movlw	1	; select bank2/3
 20349  00C9  0087               	movwf	7
 20350  00CA  0873               	movf	??_TMR0_ISR,w
 20351  00CB  0781               	addwf	1,f
 20352  00CC  0A79               	incf	_DimmerLights11,w
 20353  00CD  0086               	movwf	6
 20354  00CE  3001               	movlw	1	; select bank2/3
 20355  00CF  0087               	movwf	7
 20356  00D0  0879               	movf	_DimmerLights11,w
 20357  00D1  3E02               	addlw	2
 20358  00D2  0084               	movwf	4
 20359  00D3  3001               	movlw	1	; select bank2/3
 20360  00D4  0085               	movwf	5
 20361  00D5  0800               	movf	0,w
 20362  00D6  0201               	subwf	1,w
 20363  00D7  1C03               	skipc
 20364  00D8  29B6               	goto	i1l8384
 20365  00D9  0A79               	incf	_DimmerLights11,w
 20366  00DA  0086               	movwf	6
 20367  00DB  3001               	movlw	1	; select bank2/3
 20368  00DC  0087               	movwf	7
 20369  00DD  0181               	clrf	1
 20370  00DE  0879               	movf	_DimmerLights11,w
 20371  00DF  0086               	movwf	6
 20372  00E0  3001               	movlw	1	; select bank2/3
 20373  00E1  0087               	movwf	7
 20374  00E2  1D81               	btfss	1,3
 20375  00E3  291A               	goto	i1l8352
 20376  00E4  0879               	movf	_DimmerLights11,w
 20377  00E5  0086               	movwf	6
 20378  00E6  3001               	movlw	1	; select bank2/3
 20379  00E7  0087               	movwf	7
 20380  00E8  1A01               	btfsc	1,4
 20381  00E9  2901               	goto	i1l8346
 20382  00EA  0879               	movf	_DimmerLights11,w
 20383  00EB  3E04               	addlw	4
 20384  00EC  0086               	movwf	6
 20385  00ED  3001               	movlw	1	; select bank2/3
 20386  00EE  0087               	movwf	7
 20387  00EF  3044               	movlw	68
 20388  00F0  0201               	subwf	1,w
 20389  00F1  1C03               	skipc
 20390  00F2  28FB               	goto	i1l8344
 20391  00F3  0879               	movf	_DimmerLights11,w
 20392  00F4  3E04               	addlw	4
 20393  00F5  0086               	movwf	6
 20394  00F6  3001               	movlw	1	; select bank2/3
 20395  00F7  0087               	movwf	7
 20396  00F8  3001               	movlw	1
 20397  00F9  0281               	subwf	1,f
 20398  00FA  29B6               	goto	i1l8384
 20399  00FB                     i1l8344:	
 20400  00FB  0879               	movf	_DimmerLights11,w
 20401  00FC  0086               	movwf	6
 20402  00FD  3001               	movlw	1	; select bank2/3
 20403  00FE  0087               	movwf	7
 20404  00FF  1601               	bsf	1,4
 20405  0100  29B6               	goto	i1l8384
 20406  0101                     i1l8346:	
 20407  0101  0879               	movf	_DimmerLights11,w
 20408  0102  3E04               	addlw	4
 20409  0103  0086               	movwf	6
 20410  0104  3001               	movlw	1	; select bank2/3
 20411  0105  0087               	movwf	7
 20412  0106  3078               	movlw	120
 20413  0107  0201               	subwf	1,w
 20414  0108  1803               	skipnc
 20415  0109  2914               	goto	i1l8350
 20416  010A  3001               	movlw	1
 20417  010B  00F3               	movwf	??_TMR0_ISR
 20418  010C  0879               	movf	_DimmerLights11,w
 20419  010D  3E04               	addlw	4
 20420  010E  0086               	movwf	6
 20421  010F  3001               	movlw	1	; select bank2/3
 20422  0110  0087               	movwf	7
 20423  0111  0873               	movf	??_TMR0_ISR,w
 20424  0112  0781               	addwf	1,f
 20425  0113  29B6               	goto	i1l8384
 20426  0114                     i1l8350:	
 20427  0114  0879               	movf	_DimmerLights11,w
 20428  0115  0086               	movwf	6
 20429  0116  3001               	movlw	1	; select bank2/3
 20430  0117  0087               	movwf	7
 20431  0118  1201               	bcf	1,4
 20432  0119  29B6               	goto	i1l8384
 20433  011A                     i1l8352:	
 20434  011A  0879               	movf	_DimmerLights11,w
 20435  011B  0086               	movwf	6
 20436  011C  3001               	movlw	1	; select bank2/3
 20437  011D  0087               	movwf	7
 20438  011E  1D01               	btfss	1,2
 20439  011F  2961               	goto	i1l8366
 20440  0120  0879               	movf	_DimmerLights11,w
 20441  0121  3E05               	addlw	5
 20442  0122  0086               	movwf	6
 20443  0123  3001               	movlw	1	; select bank2/3
 20444  0124  0087               	movwf	7
 20445  0125  0879               	movf	_DimmerLights11,w
 20446  0126  3E04               	addlw	4
 20447  0127  0084               	movwf	4
 20448  0128  3001               	movlw	1	; select bank2/3
 20449  0129  0085               	movwf	5
 20450  012A  0800               	movf	0,w
 20451  012B  0201               	subwf	1,w
 20452  012C  1803               	skipnc
 20453  012D  2936               	goto	i1l8358
 20454  012E  0879               	movf	_DimmerLights11,w
 20455  012F  3E04               	addlw	4
 20456  0130  0086               	movwf	6
 20457  0131  3001               	movlw	1	; select bank2/3
 20458  0132  0087               	movwf	7
 20459  0133  3001               	movlw	1
 20460  0134  0281               	subwf	1,f
 20461  0135  294D               	goto	i1l8362
 20462  0136                     i1l8358:	
 20463  0136  0879               	movf	_DimmerLights11,w
 20464  0137  3E04               	addlw	4
 20465  0138  0086               	movwf	6
 20466  0139  3001               	movlw	1	; select bank2/3
 20467  013A  0087               	movwf	7
 20468  013B  0879               	movf	_DimmerLights11,w
 20469  013C  3E05               	addlw	5
 20470  013D  0084               	movwf	4
 20471  013E  3001               	movlw	1	; select bank2/3
 20472  013F  0085               	movwf	5
 20473  0140  0800               	movf	0,w
 20474  0141  0201               	subwf	1,w
 20475  0142  1803               	skipnc
 20476  0143  294D               	goto	i1l8362
 20477  0144  3001               	movlw	1
 20478  0145  00F3               	movwf	??_TMR0_ISR
 20479  0146  0879               	movf	_DimmerLights11,w
 20480  0147  3E04               	addlw	4
 20481  0148  0086               	movwf	6
 20482  0149  3001               	movlw	1	; select bank2/3
 20483  014A  0087               	movwf	7
 20484  014B  0873               	movf	??_TMR0_ISR,w
 20485  014C  0781               	addwf	1,f
 20486  014D                     i1l8362:	
 20487  014D  0879               	movf	_DimmerLights11,w
 20488  014E  3E05               	addlw	5
 20489  014F  0086               	movwf	6
 20490  0150  3001               	movlw	1	; select bank2/3
 20491  0151  0087               	movwf	7
 20492  0152  0879               	movf	_DimmerLights11,w
 20493  0153  3E04               	addlw	4
 20494  0154  0084               	movwf	4
 20495  0155  3001               	movlw	1	; select bank2/3
 20496  0156  0085               	movwf	5
 20497  0157  0800               	movf	0,w
 20498  0158  0601               	xorwf	1,w
 20499  0159  1D03               	skipz
 20500  015A  29B6               	goto	i1l8384
 20501  015B  0879               	movf	_DimmerLights11,w
 20502  015C  0086               	movwf	6
 20503  015D  3001               	movlw	1	; select bank2/3
 20504  015E  0087               	movwf	7
 20505  015F  1101               	bcf	1,2
 20506  0160  297C               	goto	i1l8372
 20507  0161                     i1l8366:	
 20508  0161  0879               	movf	_DimmerLights11,w
 20509  0162  0086               	movwf	6
 20510  0163  3001               	movlw	1	; select bank2/3
 20511  0164  0087               	movwf	7
 20512  0165  1E81               	btfss	1,5
 20513  0166  2982               	goto	i1l8374
 20514  0167  0879               	movf	_DimmerLights11,w
 20515  0168  3E04               	addlw	4
 20516  0169  0086               	movwf	6
 20517  016A  3001               	movlw	1	; select bank2/3
 20518  016B  0087               	movwf	7
 20519  016C  3001               	movlw	1
 20520  016D  0281               	subwf	1,f
 20521  016E  0879               	movf	_DimmerLights11,w
 20522  016F  3E05               	addlw	5
 20523  0170  0086               	movwf	6
 20524  0171  3001               	movlw	1	; select bank2/3
 20525  0172  0087               	movwf	7
 20526  0173  0879               	movf	_DimmerLights11,w
 20527  0174  3E04               	addlw	4
 20528  0175  0084               	movwf	4
 20529  0176  3001               	movlw	1	; select bank2/3
 20530  0177  0085               	movwf	5
 20531  0178  0800               	movf	0,w
 20532  0179  0201               	subwf	1,w
 20533  017A  1C03               	skipc
 20534  017B  29B6               	goto	i1l8384
 20535  017C                     i1l8372:	
 20536  017C  0879               	movf	_DimmerLights11,w
 20537  017D  0086               	movwf	6
 20538  017E  3001               	movlw	1	; select bank2/3
 20539  017F  0087               	movwf	7
 20540  0180  1081               	bcf	1,1
 20541  0181  29B6               	goto	i1l8384
 20542  0182                     i1l8374:	
 20543  0182  3001               	movlw	1
 20544  0183  00F3               	movwf	??_TMR0_ISR
 20545  0184  0879               	movf	_DimmerLights11,w
 20546  0185  3E04               	addlw	4
 20547  0186  0086               	movwf	6
 20548  0187  3001               	movlw	1	; select bank2/3
 20549  0188  0087               	movwf	7
 20550  0189  0873               	movf	??_TMR0_ISR,w
 20551  018A  0781               	addwf	1,f
 20552  018B  0879               	movf	_DimmerLights11,w
 20553  018C  3E04               	addlw	4
 20554  018D  0086               	movwf	6
 20555  018E  3001               	movlw	1	; select bank2/3
 20556  018F  0087               	movwf	7
 20557  0190  0879               	movf	_DimmerLights11,w
 20558  0191  3E06               	addlw	6
 20559  0192  0084               	movwf	4
 20560  0193  3001               	movlw	1	; select bank2/3
 20561  0194  0085               	movwf	5
 20562  0195  0800               	movf	0,w
 20563  0196  0201               	subwf	1,w
 20564  0197  1C03               	skipc
 20565  0198  29B6               	goto	i1l8384
 20566  0199  0879               	movf	_DimmerLights11,w
 20567  019A  0086               	movwf	6
 20568  019B  3001               	movlw	1	; select bank2/3
 20569  019C  0087               	movwf	7
 20570  019D  1081               	bcf	1,1
 20571  019E  0879               	movf	_DimmerLights11,w
 20572  019F  0086               	movwf	6
 20573  01A0  3001               	movlw	1	; select bank2/3
 20574  01A1  0087               	movwf	7
 20575  01A2  1301               	bcf	1,6
 20576  01A3  0879               	movf	_DimmerLights11,w
 20577  01A4  3E0C               	addlw	12
 20578  01A5  0086               	movwf	6
 20579  01A6  3001               	movlw	1	; select bank2/3
 20580  01A7  0087               	movwf	7
 20581  01A8  1401               	bsf	1,0
 20582  01A9  0021               	movlb	1	; select bank1
 20583  01AA  0839               	movf	_Dimmer^(0+128),w
 20584  01AB  0086               	movwf	6
 20585  01AC  0187               	clrf	7
 20586  01AD  1401               	bsf	1,0
 20587  01AE  0020               	movlb	0	; select bank0
 20588  01AF  118C               	bcf	12,3	;volatile
 20589  01B0  01F1               	clrf	i1setLoad_StatusOff@command
 20590  01B1  0AF1               	incf	i1setLoad_StatusOff@command,f
 20591  01B2  3001               	movlw	1
 20592  01B3  319A  2283  3180   	fcall	i1_setLoad_StatusOff
 20593  01B6                     i1l8384:	
 20594  01B6  0020               	movlb	0	; select bank0
 20595  01B7  1F8C               	btfss	12,7	;volatile
 20596  01B8  29EB               	goto	i1l8392
 20597  01B9  3001               	movlw	1
 20598  01BA  00F3               	movwf	??_TMR0_ISR
 20599  01BB  0879               	movf	_DimmerLights11,w
 20600  01BC  3E08               	addlw	8
 20601  01BD  0086               	movwf	6
 20602  01BE  3001               	movlw	1	; select bank2/3
 20603  01BF  0087               	movwf	7
 20604  01C0  0873               	movf	??_TMR0_ISR,w
 20605  01C1  0781               	addwf	1,f
 20606  01C2  0879               	movf	_DimmerLights11,w
 20607  01C3  3E04               	addlw	4
 20608  01C4  0086               	movwf	6
 20609  01C5  3001               	movlw	1	; select bank2/3
 20610  01C6  0087               	movwf	7
 20611  01C7  0801               	movf	1,w
 20612  01C8  00F3               	movwf	??_TMR0_ISR
 20613  01C9  01F4               	clrf	??_TMR0_ISR+1
 20614  01CA  09F3               	comf	??_TMR0_ISR,f
 20615  01CB  09F4               	comf	??_TMR0_ISR+1,f
 20616  01CC  0AF3               	incf	??_TMR0_ISR,f
 20617  01CD  1903               	skipnz
 20618  01CE  0AF4               	incf	??_TMR0_ISR+1,f
 20619  01CF  0873               	movf	??_TMR0_ISR,w
 20620  01D0  3E78               	addlw	120
 20621  01D1  00F5               	movwf	??_TMR0_ISR+2
 20622  01D2  3000               	movlw	0
 20623  01D3  3D74               	addwfc	??_TMR0_ISR+1,w
 20624  01D4  00F6               	movwf	??_TMR0_ISR+3
 20625  01D5  0879               	movf	_DimmerLights11,w
 20626  01D6  3E08               	addlw	8
 20627  01D7  0086               	movwf	6
 20628  01D8  3001               	movlw	1	; select bank2/3
 20629  01D9  0087               	movwf	7
 20630  01DA  0876               	movf	??_TMR0_ISR+3,w
 20631  01DB  3A80               	xorlw	128
 20632  01DC  3C80               	sublw	128
 20633  01DD  1D03               	skipz
 20634  01DE  29E1               	goto	u781_25
 20635  01DF  0875               	movf	??_TMR0_ISR+2,w
 20636  01E0  0201               	subwf	1,w
 20637  01E1                     u781_25:	
 20638  01E1  1C03               	skipc
 20639  01E2  29EB               	goto	i1l8392
 20640  01E3  0879               	movf	_DimmerLights11,w
 20641  01E4  3E08               	addlw	8
 20642  01E5  0086               	movwf	6
 20643  01E6  3001               	movlw	1	; select bank2/3
 20644  01E7  0087               	movwf	7
 20645  01E8  0181               	clrf	1
 20646  01E9  0020               	movlb	0	; select bank0
 20647  01EA  138C               	bcf	12,7	;volatile
 20648  01EB                     i1l8392:	
 20649                           
 20650                           ;MCU_16f1518_B1.c: 104: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLight
      +                          s22->Count >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count
      +                          =0; DimmerLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=1
      +                          ; } } } el
 20651  01EB  087A               	movf	_DimmerLights22,w
 20652  01EC  0086               	movwf	6
 20653  01ED  3001               	movlw	1	; select bank2/3
 20654  01EE  0087               	movwf	7
 20655  01EF  1C01               	btfss	1,0
 20656  01F0  2A3B               	goto	i1l8406
 20657  01F1  3001               	movlw	1
 20658  01F2  00F3               	movwf	??_TMR0_ISR
 20659  01F3  087A               	movf	_DimmerLights22,w
 20660  01F4  3E03               	addlw	3
 20661  01F5  0086               	movwf	6
 20662  01F6  3001               	movlw	1	; select bank2/3
 20663  01F7  0087               	movwf	7
 20664  01F8  0873               	movf	??_TMR0_ISR,w
 20665  01F9  0781               	addwf	1,f
 20666  01FA  0021               	movlb	1	; select bank1
 20667  01FB  0839               	movf	_Dimmer^(0+128),w
 20668  01FC  3E02               	addlw	2
 20669  01FD  0086               	movwf	6
 20670  01FE  0187               	clrf	7
 20671  01FF  0801               	movf	1,w
 20672  0200  00F3               	movwf	??_TMR0_ISR
 20673  0201  01F4               	clrf	??_TMR0_ISR+1
 20674  0202  09F3               	comf	??_TMR0_ISR,f
 20675  0203  09F4               	comf	??_TMR0_ISR+1,f
 20676  0204  0AF3               	incf	??_TMR0_ISR,f
 20677  0205  1903               	skipnz
 20678  0206  0AF4               	incf	??_TMR0_ISR+1,f
 20679  0207  087A               	movf	_DimmerLights22,w
 20680  0208  3E04               	addlw	4
 20681  0209  0086               	movwf	6
 20682  020A  3001               	movlw	1	; select bank2/3
 20683  020B  0087               	movwf	7
 20684  020C  0801               	movf	1,w
 20685  020D  0773               	addwf	??_TMR0_ISR,w
 20686  020E  00F5               	movwf	??_TMR0_ISR+2
 20687  020F  0874               	movf	??_TMR0_ISR+1,w
 20688  0210  1803               	skipnc
 20689  0211  0A74               	incf	??_TMR0_ISR+1,w
 20690  0212  00F6               	movwf	??_TMR0_ISR+3
 20691  0213  087A               	movf	_DimmerLights22,w
 20692  0214  3E03               	addlw	3
 20693  0215  0086               	movwf	6
 20694  0216  3001               	movlw	1	; select bank2/3
 20695  0217  0087               	movwf	7
 20696  0218  0876               	movf	??_TMR0_ISR+3,w
 20697  0219  3A80               	xorlw	128
 20698  021A  3C80               	sublw	128
 20699  021B  1D03               	skipz
 20700  021C  2A1F               	goto	u783_25
 20701  021D  0875               	movf	??_TMR0_ISR+2,w
 20702  021E  0201               	subwf	1,w
 20703  021F                     u783_25:	
 20704  021F  1C03               	skipc
 20705  0220  2B75               	goto	i1l8472
 20706  0221  087A               	movf	_DimmerLights22,w
 20707  0222  3E03               	addlw	3
 20708  0223  0086               	movwf	6
 20709  0224  3001               	movlw	1	; select bank2/3
 20710  0225  0087               	movwf	7
 20711  0226  0181               	clrf	1
 20712  0227  087A               	movf	_DimmerLights22,w
 20713  0228  0086               	movwf	6
 20714  0229  3001               	movlw	1	; select bank2/3
 20715  022A  0087               	movwf	7
 20716  022B  1001               	bcf	1,0
 20717  022C  087A               	movf	_DimmerLights22,w
 20718  022D  3E07               	addlw	7
 20719  022E  0086               	movwf	6
 20720  022F  3001               	movlw	1	; select bank2/3
 20721  0230  0087               	movwf	7
 20722  0231  1401               	bsf	1,0
 20723  0232  087A               	movf	_DimmerLights22,w
 20724  0233  0086               	movwf	6
 20725  0234  3001               	movlw	1	; select bank2/3
 20726  0235  0087               	movwf	7
 20727  0236  1F01               	btfss	1,6
 20728  0237  2B75               	goto	i1l8472
 20729  0238  0020               	movlb	0	; select bank0
 20730  0239  160D               	bsf	13,4	;volatile
 20731  023A  2B75               	goto	i1l8472
 20732  023B                     i1l8406:	
 20733  023B  087A               	movf	_DimmerLights22,w
 20734  023C  3E07               	addlw	7
 20735  023D  0086               	movwf	6
 20736  023E  3001               	movlw	1	; select bank2/3
 20737  023F  0087               	movwf	7
 20738  0240  1C01               	btfss	1,0
 20739  0241  2B40               	goto	i1l8464
 20740  0242  087A               	movf	_DimmerLights22,w
 20741  0243  3E07               	addlw	7
 20742  0244  0086               	movwf	6
 20743  0245  3001               	movlw	1	; select bank2/3
 20744  0246  0087               	movwf	7
 20745  0247  1001               	bcf	1,0
 20746  0248  087A               	movf	_DimmerLights22,w
 20747  0249  0086               	movwf	6
 20748  024A  3001               	movlw	1	; select bank2/3
 20749  024B  0087               	movwf	7
 20750  024C  1C81               	btfss	1,1
 20751  024D  2B40               	goto	i1l8464
 20752  024E  3001               	movlw	1
 20753  024F  00F3               	movwf	??_TMR0_ISR
 20754  0250  0A7A               	incf	_DimmerLights22,w
 20755  0251  0086               	movwf	6
 20756  0252  3001               	movlw	1	; select bank2/3
 20757  0253  0087               	movwf	7
 20758  0254  0873               	movf	??_TMR0_ISR,w
 20759  0255  0781               	addwf	1,f
 20760  0256  0A7A               	incf	_DimmerLights22,w
 20761  0257  0086               	movwf	6
 20762  0258  3001               	movlw	1	; select bank2/3
 20763  0259  0087               	movwf	7
 20764  025A  087A               	movf	_DimmerLights22,w
 20765  025B  3E02               	addlw	2
 20766  025C  0084               	movwf	4
 20767  025D  3001               	movlw	1	; select bank2/3
 20768  025E  0085               	movwf	5
 20769  025F  0800               	movf	0,w
 20770  0260  0201               	subwf	1,w
 20771  0261  1C03               	skipc
 20772  0262  2B40               	goto	i1l8464
 20773  0263  0A7A               	incf	_DimmerLights22,w
 20774  0264  0086               	movwf	6
 20775  0265  3001               	movlw	1	; select bank2/3
 20776  0266  0087               	movwf	7
 20777  0267  0181               	clrf	1
 20778  0268  087A               	movf	_DimmerLights22,w
 20779  0269  0086               	movwf	6
 20780  026A  3001               	movlw	1	; select bank2/3
 20781  026B  0087               	movwf	7
 20782  026C  1D81               	btfss	1,3
 20783  026D  2AA4               	goto	i1l8432
 20784  026E  087A               	movf	_DimmerLights22,w
 20785  026F  0086               	movwf	6
 20786  0270  3001               	movlw	1	; select bank2/3
 20787  0271  0087               	movwf	7
 20788  0272  1A01               	btfsc	1,4
 20789  0273  2A8B               	goto	i1l8426
 20790  0274  087A               	movf	_DimmerLights22,w
 20791  0275  3E04               	addlw	4
 20792  0276  0086               	movwf	6
 20793  0277  3001               	movlw	1	; select bank2/3
 20794  0278  0087               	movwf	7
 20795  0279  3044               	movlw	68
 20796  027A  0201               	subwf	1,w
 20797  027B  1C03               	skipc
 20798  027C  2A85               	goto	i1l8424
 20799  027D  087A               	movf	_DimmerLights22,w
 20800  027E  3E04               	addlw	4
 20801  027F  0086               	movwf	6
 20802  0280  3001               	movlw	1	; select bank2/3
 20803  0281  0087               	movwf	7
 20804  0282  3001               	movlw	1
 20805  0283  0281               	subwf	1,f
 20806  0284  2B40               	goto	i1l8464
 20807  0285                     i1l8424:	
 20808  0285  087A               	movf	_DimmerLights22,w
 20809  0286  0086               	movwf	6
 20810  0287  3001               	movlw	1	; select bank2/3
 20811  0288  0087               	movwf	7
 20812  0289  1601               	bsf	1,4
 20813  028A  2B40               	goto	i1l8464
 20814  028B                     i1l8426:	
 20815  028B  087A               	movf	_DimmerLights22,w
 20816  028C  3E04               	addlw	4
 20817  028D  0086               	movwf	6
 20818  028E  3001               	movlw	1	; select bank2/3
 20819  028F  0087               	movwf	7
 20820  0290  3078               	movlw	120
 20821  0291  0201               	subwf	1,w
 20822  0292  1803               	skipnc
 20823  0293  2A9E               	goto	i1l8430
 20824  0294  3001               	movlw	1
 20825  0295  00F3               	movwf	??_TMR0_ISR
 20826  0296  087A               	movf	_DimmerLights22,w
 20827  0297  3E04               	addlw	4
 20828  0298  0086               	movwf	6
 20829  0299  3001               	movlw	1	; select bank2/3
 20830  029A  0087               	movwf	7
 20831  029B  0873               	movf	??_TMR0_ISR,w
 20832  029C  0781               	addwf	1,f
 20833  029D  2B40               	goto	i1l8464
 20834  029E                     i1l8430:	
 20835  029E  087A               	movf	_DimmerLights22,w
 20836  029F  0086               	movwf	6
 20837  02A0  3001               	movlw	1	; select bank2/3
 20838  02A1  0087               	movwf	7
 20839  02A2  1201               	bcf	1,4
 20840  02A3  2B40               	goto	i1l8464
 20841  02A4                     i1l8432:	
 20842  02A4  087A               	movf	_DimmerLights22,w
 20843  02A5  0086               	movwf	6
 20844  02A6  3001               	movlw	1	; select bank2/3
 20845  02A7  0087               	movwf	7
 20846  02A8  1D01               	btfss	1,2
 20847  02A9  2AEB               	goto	i1l8446
 20848  02AA  087A               	movf	_DimmerLights22,w
 20849  02AB  3E05               	addlw	5
 20850  02AC  0086               	movwf	6
 20851  02AD  3001               	movlw	1	; select bank2/3
 20852  02AE  0087               	movwf	7
 20853  02AF  087A               	movf	_DimmerLights22,w
 20854  02B0  3E04               	addlw	4
 20855  02B1  0084               	movwf	4
 20856  02B2  3001               	movlw	1	; select bank2/3
 20857  02B3  0085               	movwf	5
 20858  02B4  0800               	movf	0,w
 20859  02B5  0201               	subwf	1,w
 20860  02B6  1803               	skipnc
 20861  02B7  2AC0               	goto	i1l8438
 20862  02B8  087A               	movf	_DimmerLights22,w
 20863  02B9  3E04               	addlw	4
 20864  02BA  0086               	movwf	6
 20865  02BB  3001               	movlw	1	; select bank2/3
 20866  02BC  0087               	movwf	7
 20867  02BD  3001               	movlw	1
 20868  02BE  0281               	subwf	1,f
 20869  02BF  2AD7               	goto	i1l8442
 20870  02C0                     i1l8438:	
 20871  02C0  087A               	movf	_DimmerLights22,w
 20872  02C1  3E04               	addlw	4
 20873  02C2  0086               	movwf	6
 20874  02C3  3001               	movlw	1	; select bank2/3
 20875  02C4  0087               	movwf	7
 20876  02C5  087A               	movf	_DimmerLights22,w
 20877  02C6  3E05               	addlw	5
 20878  02C7  0084               	movwf	4
 20879  02C8  3001               	movlw	1	; select bank2/3
 20880  02C9  0085               	movwf	5
 20881  02CA  0800               	movf	0,w
 20882  02CB  0201               	subwf	1,w
 20883  02CC  1803               	skipnc
 20884  02CD  2AD7               	goto	i1l8442
 20885  02CE  3001               	movlw	1
 20886  02CF  00F3               	movwf	??_TMR0_ISR
 20887  02D0  087A               	movf	_DimmerLights22,w
 20888  02D1  3E04               	addlw	4
 20889  02D2  0086               	movwf	6
 20890  02D3  3001               	movlw	1	; select bank2/3
 20891  02D4  0087               	movwf	7
 20892  02D5  0873               	movf	??_TMR0_ISR,w
 20893  02D6  0781               	addwf	1,f
 20894  02D7                     i1l8442:	
 20895  02D7  087A               	movf	_DimmerLights22,w
 20896  02D8  3E05               	addlw	5
 20897  02D9  0086               	movwf	6
 20898  02DA  3001               	movlw	1	; select bank2/3
 20899  02DB  0087               	movwf	7
 20900  02DC  087A               	movf	_DimmerLights22,w
 20901  02DD  3E04               	addlw	4
 20902  02DE  0084               	movwf	4
 20903  02DF  3001               	movlw	1	; select bank2/3
 20904  02E0  0085               	movwf	5
 20905  02E1  0800               	movf	0,w
 20906  02E2  0601               	xorwf	1,w
 20907  02E3  1D03               	skipz
 20908  02E4  2B40               	goto	i1l8464
 20909  02E5  087A               	movf	_DimmerLights22,w
 20910  02E6  0086               	movwf	6
 20911  02E7  3001               	movlw	1	; select bank2/3
 20912  02E8  0087               	movwf	7
 20913  02E9  1101               	bcf	1,2
 20914  02EA  2B06               	goto	i1l8452
 20915  02EB                     i1l8446:	
 20916  02EB  087A               	movf	_DimmerLights22,w
 20917  02EC  0086               	movwf	6
 20918  02ED  3001               	movlw	1	; select bank2/3
 20919  02EE  0087               	movwf	7
 20920  02EF  1E81               	btfss	1,5
 20921  02F0  2B0C               	goto	i1l8454
 20922  02F1  087A               	movf	_DimmerLights22,w
 20923  02F2  3E04               	addlw	4
 20924  02F3  0086               	movwf	6
 20925  02F4  3001               	movlw	1	; select bank2/3
 20926  02F5  0087               	movwf	7
 20927  02F6  3001               	movlw	1
 20928  02F7  0281               	subwf	1,f
 20929  02F8  087A               	movf	_DimmerLights22,w
 20930  02F9  3E05               	addlw	5
 20931  02FA  0086               	movwf	6
 20932  02FB  3001               	movlw	1	; select bank2/3
 20933  02FC  0087               	movwf	7
 20934  02FD  087A               	movf	_DimmerLights22,w
 20935  02FE  3E04               	addlw	4
 20936  02FF  0084               	movwf	4
 20937  0300  3001               	movlw	1	; select bank2/3
 20938  0301  0085               	movwf	5
 20939  0302  0800               	movf	0,w
 20940  0303  0201               	subwf	1,w
 20941  0304  1C03               	skipc
 20942  0305  2B40               	goto	i1l8464
 20943  0306                     i1l8452:	
 20944  0306  087A               	movf	_DimmerLights22,w
 20945  0307  0086               	movwf	6
 20946  0308  3001               	movlw	1	; select bank2/3
 20947  0309  0087               	movwf	7
 20948  030A  1081               	bcf	1,1
 20949  030B  2B40               	goto	i1l8464
 20950  030C                     i1l8454:	
 20951  030C  3001               	movlw	1
 20952  030D  00F3               	movwf	??_TMR0_ISR
 20953  030E  087A               	movf	_DimmerLights22,w
 20954  030F  3E04               	addlw	4
 20955  0310  0086               	movwf	6
 20956  0311  3001               	movlw	1	; select bank2/3
 20957  0312  0087               	movwf	7
 20958  0313  0873               	movf	??_TMR0_ISR,w
 20959  0314  0781               	addwf	1,f
 20960  0315  087A               	movf	_DimmerLights22,w
 20961  0316  3E04               	addlw	4
 20962  0317  0086               	movwf	6
 20963  0318  3001               	movlw	1	; select bank2/3
 20964  0319  0087               	movwf	7
 20965  031A  087A               	movf	_DimmerLights22,w
 20966  031B  3E06               	addlw	6
 20967  031C  0084               	movwf	4
 20968  031D  3001               	movlw	1	; select bank2/3
 20969  031E  0085               	movwf	5
 20970  031F  0800               	movf	0,w
 20971  0320  0201               	subwf	1,w
 20972  0321  1C03               	skipc
 20973  0322  2B40               	goto	i1l8464
 20974  0323  087A               	movf	_DimmerLights22,w
 20975  0324  0086               	movwf	6
 20976  0325  3001               	movlw	1	; select bank2/3
 20977  0326  0087               	movwf	7
 20978  0327  1081               	bcf	1,1
 20979  0328  087A               	movf	_DimmerLights22,w
 20980  0329  0086               	movwf	6
 20981  032A  3001               	movlw	1	; select bank2/3
 20982  032B  0087               	movwf	7
 20983  032C  1301               	bcf	1,6
 20984  032D  087A               	movf	_DimmerLights22,w
 20985  032E  3E0C               	addlw	12
 20986  032F  0086               	movwf	6
 20987  0330  3001               	movlw	1	; select bank2/3
 20988  0331  0087               	movwf	7
 20989  0332  1401               	bsf	1,0
 20990  0333  0021               	movlb	1	; select bank1
 20991  0334  0839               	movf	_Dimmer^(0+128),w
 20992  0335  0086               	movwf	6
 20993  0336  0187               	clrf	7
 20994  0337  1401               	bsf	1,0
 20995  0338  0020               	movlb	0	; select bank0
 20996  0339  138E               	bcf	14,7	;volatile
 20997  033A  01F1               	clrf	i1setLoad_StatusOff@command
 20998  033B  0AF1               	incf	i1setLoad_StatusOff@command,f
 20999  033C  3002               	movlw	2
 21000  033D  319A  2283  3180   	fcall	i1_setLoad_StatusOff
 21001  0340                     i1l8464:	
 21002  0340  0020               	movlb	0	; select bank0
 21003  0341  1E0D               	btfss	13,4	;volatile
 21004  0342  2B75               	goto	i1l8472
 21005  0343  3001               	movlw	1
 21006  0344  00F3               	movwf	??_TMR0_ISR
 21007  0345  087A               	movf	_DimmerLights22,w
 21008  0346  3E08               	addlw	8
 21009  0347  0086               	movwf	6
 21010  0348  3001               	movlw	1	; select bank2/3
 21011  0349  0087               	movwf	7
 21012  034A  0873               	movf	??_TMR0_ISR,w
 21013  034B  0781               	addwf	1,f
 21014  034C  087A               	movf	_DimmerLights22,w
 21015  034D  3E04               	addlw	4
 21016  034E  0086               	movwf	6
 21017  034F  3001               	movlw	1	; select bank2/3
 21018  0350  0087               	movwf	7
 21019  0351  0801               	movf	1,w
 21020  0352  00F3               	movwf	??_TMR0_ISR
 21021  0353  01F4               	clrf	??_TMR0_ISR+1
 21022  0354  09F3               	comf	??_TMR0_ISR,f
 21023  0355  09F4               	comf	??_TMR0_ISR+1,f
 21024  0356  0AF3               	incf	??_TMR0_ISR,f
 21025  0357  1903               	skipnz
 21026  0358  0AF4               	incf	??_TMR0_ISR+1,f
 21027  0359  0873               	movf	??_TMR0_ISR,w
 21028  035A  3E78               	addlw	120
 21029  035B  00F5               	movwf	??_TMR0_ISR+2
 21030  035C  3000               	movlw	0
 21031  035D  3D74               	addwfc	??_TMR0_ISR+1,w
 21032  035E  00F6               	movwf	??_TMR0_ISR+3
 21033  035F  087A               	movf	_DimmerLights22,w
 21034  0360  3E08               	addlw	8
 21035  0361  0086               	movwf	6
 21036  0362  3001               	movlw	1	; select bank2/3
 21037  0363  0087               	movwf	7
 21038  0364  0876               	movf	??_TMR0_ISR+3,w
 21039  0365  3A80               	xorlw	128
 21040  0366  3C80               	sublw	128
 21041  0367  1D03               	skipz
 21042  0368  2B6B               	goto	u800_25
 21043  0369  0875               	movf	??_TMR0_ISR+2,w
 21044  036A  0201               	subwf	1,w
 21045  036B                     u800_25:	
 21046  036B  1C03               	skipc
 21047  036C  2B75               	goto	i1l8472
 21048  036D  087A               	movf	_DimmerLights22,w
 21049  036E  3E08               	addlw	8
 21050  036F  0086               	movwf	6
 21051  0370  3001               	movlw	1	; select bank2/3
 21052  0371  0087               	movwf	7
 21053  0372  0181               	clrf	1
 21054  0373  0020               	movlb	0	; select bank0
 21055  0374  120D               	bcf	13,4	;volatile
 21056  0375                     i1l8472:	
 21057                           
 21058                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 21059  0375  0021               	movlb	1	; select bank1
 21060  0376  0A6A               	incf	_Timer0^(0+128),w
 21061  0377  0086               	movwf	6
 21062  0378  0187               	clrf	7
 21063  0379  3001               	movlw	1
 21064  037A  0781               	addwf	1,f
 21065  037B  3141               	addfsr 1,1
 21066  037C  1803               	skipnc
 21067  037D  0A81               	incf	1,f
 21068                           
 21069                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 21070  037E  0A6A               	incf	_Timer0^(0+128),w
 21071  037F  0086               	movwf	6
 21072  0380  0187               	clrf	7
 21073  0381  3F40               	moviw [0]fsr1
 21074  0382  3AC8               	xorlw	200
 21075  0383  1D03               	skipz
 21076  0384  2B87               	goto	u801_25
 21077  0385  3F41               	moviw [1]fsr1
 21078  0386  3A00               	xorlw	0
 21079  0387                     u801_25:	
 21080  0387  1D03               	skipz
 21081  0388  2B94               	goto	i1l1685
 21082                           
 21083                           ;MCU_16f1518_B1.c: 115: {
 21084                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 21085  0389  0A6A               	incf	_Timer0^(0+128),w
 21086  038A  0086               	movwf	6
 21087  038B  0187               	clrf	7
 21088  038C  3000               	movlw	0
 21089  038D  3FC0               	movwi [0]fsr1
 21090  038E  3FC1               	movwi [1]fsr1
 21091                           
 21092                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 21093  038F  0869               	movf	_TMain^(0+128),w
 21094  0390  0086               	movwf	6
 21095  0391  3001               	movlw	1	; select bank2/3
 21096  0392  0087               	movwf	7
 21097  0393  1481               	bsf	1,1
 21098  0394                     i1l1685:	
 21099                           
 21100                           ;MCU_16f1518_B1.c: 118: }
 21101                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 21102  0394  0878               	movf	_Buz,w
 21103  0395  0086               	movwf	6
 21104  0396  3001               	movlw	1	; select bank2/3
 21105  0397  0087               	movwf	7
 21106  0398  1C81               	btfss	1,1
 21107  0399  0008               	return
 21108                           
 21109                           ;MCU_16f1518_B1.c: 122: {
 21110                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 21111  039A  0A78               	incf	_Buz,w
 21112  039B  0086               	movwf	6
 21113  039C  3001               	movlw	1	; select bank2/3
 21114  039D  0087               	movwf	7
 21115  039E  3001               	movlw	1
 21116  039F  0781               	addwf	1,f
 21117  03A0  3141               	addfsr 1,1
 21118  03A1  1803               	skipnc
 21119  03A2  0A81               	incf	1,f
 21120  03A3  0008               	return
 21121  03A4                     __end_of_TMR0_ISR:	
 21122                           
 21123                           	psect	text137
 21124  1A83                     __ptext137:	
 21125 ;; *************** function i1_setLoad_StatusOff *****************
 21126 ;; Defined at:
 21127 ;;		line 280 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21128 ;; Parameters:    Size  Location     Type
 21129 ;;  lights          1    wreg     unsigned char 
 21130 ;;  command         1    0[COMMON] unsigned char 
 21131 ;; Auto vars:     Size  Location     Type
 21132 ;;  lights          1    1[COMMON] unsigned char 
 21133 ;; Return value:  Size  Location     Type
 21134 ;;		None               void
 21135 ;; Registers used:
 21136 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21137 ;; Tracked objects:
 21138 ;;		On entry : 0/0
 21139 ;;		On exit  : 0/0
 21140 ;;		Unchanged: 0/0
 21141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21142 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21146 ;;Total ram usage:        2 bytes
 21147 ;; Hardware stack levels used:    1
 21148 ;; This function calls:
 21149 ;;		Nothing
 21150 ;; This function is called by:
 21151 ;;		_TMR0_ISR
 21152 ;; This function uses a non-reentrant model
 21153 ;;
 21154                           
 21155                           
 21156                           ;psect for function i1_setLoad_StatusOff
 21157  1A83                     i1_setLoad_StatusOff:	
 21158                           
 21159                           ;incstack = 0
 21160                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21161                           ;i1setLoad_StatusOff@lights stored from wreg
 21162  1A83  00F2               	movwf	i1setLoad_StatusOff@lights
 21163                           
 21164                           ;OverLoad_B1.c: 282: Load->StatusOff=command;
 21165  1A84  0020               	movlb	0	; select bank0
 21166  1A85  086E               	movf	_Load,w
 21167  1A86  3E46               	addlw	70
 21168  1A87  0086               	movwf	6
 21169  1A88  3002               	movlw	2	; select bank4/5
 21170  1A89  0087               	movwf	7
 21171  1A8A  0871               	movf	i1setLoad_StatusOff@command,w
 21172  1A8B  1081               	bcf	1,1
 21173  1A8C  1D03               	skipz
 21174  1A8D  1481               	bsf	1,1
 21175                           
 21176                           ;OverLoad_B1.c: 283: Load->SafeCount-=2;
 21177  1A8E  086E               	movf	_Load,w
 21178  1A8F  3E42               	addlw	66
 21179  1A90  0086               	movwf	6
 21180  1A91  3002               	movlw	2	; select bank4/5
 21181  1A92  0087               	movwf	7
 21182  1A93  3002               	movlw	2
 21183  1A94  0281               	subwf	1,f
 21184                           
 21185                           ;OverLoad_B1.c: 284: if(lights == 1)
 21186  1A95  0872               	movf	i1setLoad_StatusOff@lights,w
 21187  1A96  3A01               	xorlw	1
 21188  1A97  1D03               	skipz
 21189  1A98  2A9F               	goto	i1l7904
 21190                           
 21191                           ;OverLoad_B1.c: 285: {
 21192                           ;OverLoad_B1.c: 286: Load->Lights1Status=0;
 21193  1A99  086E               	movf	_Load,w
 21194  1A9A  3E43               	addlw	67
 21195  1A9B  0086               	movwf	6
 21196  1A9C  3002               	movlw	2	; select bank4/5
 21197  1A9D  0087               	movwf	7
 21198  1A9E  0181               	clrf	1
 21199  1A9F                     i1l7904:	
 21200                           
 21201                           ;OverLoad_B1.c: 287: }
 21202                           ;OverLoad_B1.c: 288: if(lights == 2)
 21203  1A9F  0872               	movf	i1setLoad_StatusOff@lights,w
 21204  1AA0  3A02               	xorlw	2
 21205  1AA1  1D03               	skipz
 21206  1AA2  2AA9               	goto	i1l7908
 21207                           
 21208                           ;OverLoad_B1.c: 289: {
 21209                           ;OverLoad_B1.c: 290: Load->Lights2Status=0;
 21210  1AA3  086E               	movf	_Load,w
 21211  1AA4  3E44               	addlw	68
 21212  1AA5  0086               	movwf	6
 21213  1AA6  3002               	movlw	2	; select bank4/5
 21214  1AA7  0087               	movwf	7
 21215  1AA8  0181               	clrf	1
 21216  1AA9                     i1l7908:	
 21217                           
 21218                           ;OverLoad_B1.c: 291: }
 21219                           ;OverLoad_B1.c: 292: if(lights == 3)
 21220  1AA9  0872               	movf	i1setLoad_StatusOff@lights,w
 21221  1AAA  3A03               	xorlw	3
 21222  1AAB  1D03               	skipz
 21223  1AAC  0008               	return
 21224                           
 21225                           ;OverLoad_B1.c: 293: {
 21226                           ;OverLoad_B1.c: 294: Load->Lights3Status=0;
 21227  1AAD  086E               	movf	_Load,w
 21228  1AAE  3E45               	addlw	69
 21229  1AAF  0086               	movwf	6
 21230  1AB0  3002               	movlw	2	; select bank4/5
 21231  1AB1  0087               	movwf	7
 21232  1AB2  0181               	clrf	1
 21233  1AB3  0008               	return
 21234  1AB4                     __end_ofi1_setLoad_StatusOff:	
 21235                           
 21236                           	psect	text138
 21237  18E1                     __ptext138:	
 21238 ;; *************** function _IOC_ISR *****************
 21239 ;; Defined at:
 21240 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21241 ;; Parameters:    Size  Location     Type
 21242 ;;		None
 21243 ;; Auto vars:     Size  Location     Type
 21244 ;;		None
 21245 ;; Return value:  Size  Location     Type
 21246 ;;		None               void
 21247 ;; Registers used:
 21248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21249 ;; Tracked objects:
 21250 ;;		On entry : 0/0
 21251 ;;		On exit  : 0/0
 21252 ;;		Unchanged: 0/0
 21253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21258 ;;Total ram usage:        1 bytes
 21259 ;; Hardware stack levels used:    1
 21260 ;; Hardware stack levels required when called:    1
 21261 ;; This function calls:
 21262 ;;		_setDimmerReClock
 21263 ;; This function is called by:
 21264 ;;		_ISR
 21265 ;; This function uses a non-reentrant model
 21266 ;;
 21267                           
 21268                           
 21269                           ;psect for function _IOC_ISR
 21270  18E1                     _IOC_ISR:	
 21271                           
 21272                           ;MCU_16f1518_B1.c: 269: if(IOCIE && IOCBF2)
 21273                           
 21274                           ;incstack = 0
 21275                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21276  18E1  1D8B               	btfss	11,3	;volatile
 21277  18E2  0008               	return
 21278  18E3  0027               	movlb	7	; select bank7
 21279  18E4  1D16               	btfss	22,2	;volatile
 21280  18E5  0008               	return
 21281                           
 21282                           ;MCU_16f1518_B1.c: 270: {
 21283                           ;MCU_16f1518_B1.c: 271: IOCBF2=0;
 21284  18E6  1116               	bcf	22,2	;volatile
 21285                           
 21286                           ;MCU_16f1518_B1.c: 272: IOCIF=0;
 21287  18E7  100B               	bcf	11,0	;volatile
 21288                           
 21289                           ;MCU_16f1518_B1.c: 273: if(TMain->PowerON)
 21290  18E8  0021               	movlb	1	; select bank1
 21291  18E9  0869               	movf	_TMain^(0+128),w
 21292  18EA  0086               	movwf	6
 21293  18EB  3001               	movlw	1	; select bank2/3
 21294  18EC  0087               	movwf	7
 21295  18ED  1C01               	btfss	1,0
 21296  18EE  0008               	return
 21297                           
 21298                           ;MCU_16f1518_B1.c: 274: {
 21299                           ;MCU_16f1518_B1.c: 278: setDimmerReClock();
 21300  18EF  31A6  26F8  3198   	fcall	_setDimmerReClock
 21301                           
 21302                           ;MCU_16f1518_B1.c: 279: if(RB2)
 21303  18F2  0020               	movlb	0	; select bank0
 21304  18F3  1D0D               	btfss	13,2	;volatile
 21305  18F4  28FC               	goto	i1l8302
 21306                           
 21307                           ;MCU_16f1518_B1.c: 280: {
 21308                           ;MCU_16f1518_B1.c: 281: Dimmer->Correction=0;
 21309  18F5  0021               	movlb	1	; select bank1
 21310  18F6  0839               	movf	_Dimmer^(0+128),w
 21311  18F7  3E02               	addlw	2
 21312  18F8  0086               	movwf	6
 21313  18F9  0187               	clrf	7
 21314  18FA  0181               	clrf	1
 21315                           
 21316                           ;MCU_16f1518_B1.c: 282: }
 21317  18FB  0008               	return
 21318  18FC                     i1l8302:	
 21319                           
 21320                           ;MCU_16f1518_B1.c: 283: else
 21321                           ;MCU_16f1518_B1.c: 284: {
 21322                           ;MCU_16f1518_B1.c: 285: Dimmer->Correction=8;
 21323  18FC  3008               	movlw	8
 21324  18FD  00F1               	movwf	??_IOC_ISR
 21325  18FE  0021               	movlb	1	; select bank1
 21326  18FF  0839               	movf	_Dimmer^(0+128),w
 21327  1900  3E02               	addlw	2
 21328  1901  0086               	movwf	6
 21329  1902  0187               	clrf	7
 21330  1903  0871               	movf	??_IOC_ISR,w
 21331  1904  0081               	movwf	1
 21332  1905  0008               	return
 21333  1906                     __end_of_IOC_ISR:	
 21334                           
 21335                           	psect	text139
 21336  26F8                     __ptext139:	
 21337 ;; *************** function _setDimmerReClock *****************
 21338 ;; Defined at:
 21339 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21340 ;; Parameters:    Size  Location     Type
 21341 ;;		None
 21342 ;; Auto vars:     Size  Location     Type
 21343 ;;		None
 21344 ;; Return value:  Size  Location     Type
 21345 ;;		None               void
 21346 ;; Registers used:
 21347 ;;		wreg, fsr1l, fsr1h
 21348 ;; Tracked objects:
 21349 ;;		On entry : 0/0
 21350 ;;		On exit  : 0/0
 21351 ;;		Unchanged: 0/0
 21352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21357 ;;Total ram usage:        0 bytes
 21358 ;; Hardware stack levels used:    1
 21359 ;; This function calls:
 21360 ;;		Nothing
 21361 ;; This function is called by:
 21362 ;;		_IOC_ISR
 21363 ;; This function uses a non-reentrant model
 21364 ;;
 21365                           
 21366                           
 21367                           ;psect for function _setDimmerReClock
 21368  26F8                     _setDimmerReClock:	
 21369                           
 21370                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 21371                           
 21372                           ;incstack = 0
 21373                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21374  26F8  30FF               	movlw	255
 21375  26F9  0020               	movlb	0	; select bank0
 21376  26FA  0095               	movwf	21	;volatile
 21377                           
 21378                           ;MCU_16f1518_B1.c: 136: if(!DimmerLights11->GO)
 21379  26FB  0879               	movf	_DimmerLights11,w
 21380  26FC  0086               	movwf	6
 21381  26FD  3001               	movlw	1	; select bank2/3
 21382  26FE  0087               	movwf	7
 21383  26FF  1801               	btfsc	1,0
 21384  2700  2F06               	goto	i1l1690
 21385                           
 21386                           ;MCU_16f1518_B1.c: 137: {
 21387                           ;MCU_16f1518_B1.c: 138: DimmerLights11->GO=1;
 21388  2701  0879               	movf	_DimmerLights11,w
 21389  2702  0086               	movwf	6
 21390  2703  3001               	movlw	1	; select bank2/3
 21391  2704  0087               	movwf	7
 21392  2705  1401               	bsf	1,0
 21393  2706                     i1l1690:	
 21394                           
 21395                           ;MCU_16f1518_B1.c: 139: }
 21396                           ;MCU_16f1518_B1.c: 158: if(!DimmerLights22->GO)
 21397  2706  087A               	movf	_DimmerLights22,w
 21398  2707  0086               	movwf	6
 21399  2708  3001               	movlw	1	; select bank2/3
 21400  2709  0087               	movwf	7
 21401  270A  1801               	btfsc	1,0
 21402  270B  0008               	return
 21403                           
 21404                           ;MCU_16f1518_B1.c: 159: {
 21405                           ;MCU_16f1518_B1.c: 160: DimmerLights22->GO=1;
 21406  270C  087A               	movf	_DimmerLights22,w
 21407  270D  0086               	movwf	6
 21408  270E  3001               	movlw	1	; select bank2/3
 21409  270F  0087               	movwf	7
 21410  2710  1401               	bsf	1,0
 21411  2711  0008               	return
 21412  2712                     __end_of_setDimmerReClock:	
 21413                           
 21414                           	psect	text140
 21415  2496                     __ptext140:	
 21416 ;; *************** function _INT_ISR *****************
 21417 ;; Defined at:
 21418 ;;		line 225 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21419 ;; Parameters:    Size  Location     Type
 21420 ;;		None
 21421 ;; Auto vars:     Size  Location     Type
 21422 ;;		None
 21423 ;; Return value:  Size  Location     Type
 21424 ;;		None               void
 21425 ;; Registers used:
 21426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21427 ;; Tracked objects:
 21428 ;;		On entry : 0/0
 21429 ;;		On exit  : 0/0
 21430 ;;		Unchanged: 0/0
 21431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21436 ;;Total ram usage:        0 bytes
 21437 ;; Hardware stack levels used:    1
 21438 ;; Hardware stack levels required when called:    2
 21439 ;; This function calls:
 21440 ;;		_setRF_ReceiveGO
 21441 ;; This function is called by:
 21442 ;;		_ISR
 21443 ;; This function uses a non-reentrant model
 21444 ;;
 21445                           
 21446                           
 21447                           ;psect for function _INT_ISR
 21448  2496                     _INT_ISR:	
 21449                           
 21450                           ;MCU_16f1518_B1.c: 227: if(INTE && INTF)
 21451                           
 21452                           ;incstack = 0
 21453                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21454  2496  1E0B               	btfss	11,4	;volatile
 21455  2497  0008               	return
 21456  2498  1C8B               	btfss	11,1	;volatile
 21457  2499  0008               	return
 21458                           
 21459                           ;MCU_16f1518_B1.c: 228: {
 21460                           ;MCU_16f1518_B1.c: 229: INTF=0;
 21461  249A  108B               	bcf	11,1	;volatile
 21462                           
 21463                           ;MCU_16f1518_B1.c: 230: INTE=0;
 21464  249B  120B               	bcf	11,4	;volatile
 21465                           
 21466                           ;MCU_16f1518_B1.c: 231: setRF_ReceiveGO(1,1);
 21467  249C  01F3               	clrf	setRF_ReceiveGO@command
 21468  249D  0AF3               	incf	setRF_ReceiveGO@command,f
 21469  249E  3001               	movlw	1
 21470  249F  31A4  248A         	fcall	_setRF_ReceiveGO
 21471  24A1  0008               	return
 21472  24A2                     __end_of_INT_ISR:	
 21473                           
 21474                           	psect	text141
 21475  248A                     __ptext141:	
 21476 ;; *************** function _setRF_ReceiveGO *****************
 21477 ;; Defined at:
 21478 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21479 ;; Parameters:    Size  Location     Type
 21480 ;;  rf              1    wreg     unsigned char 
 21481 ;;  command         1    2[COMMON] unsigned char 
 21482 ;; Auto vars:     Size  Location     Type
 21483 ;;  rf              1    3[COMMON] unsigned char 
 21484 ;; Return value:  Size  Location     Type
 21485 ;;		None               void
 21486 ;; Registers used:
 21487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21488 ;; Tracked objects:
 21489 ;;		On entry : 0/0
 21490 ;;		On exit  : 0/0
 21491 ;;		Unchanged: 0/0
 21492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21493 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21497 ;;Total ram usage:        2 bytes
 21498 ;; Hardware stack levels used:    1
 21499 ;; Hardware stack levels required when called:    1
 21500 ;; This function calls:
 21501 ;;		i1_RfPointSelect
 21502 ;; This function is called by:
 21503 ;;		_INT_ISR
 21504 ;; This function uses a non-reentrant model
 21505 ;;
 21506                           
 21507                           
 21508                           ;psect for function _setRF_ReceiveGO
 21509  248A                     _setRF_ReceiveGO:	
 21510                           
 21511                           ;incstack = 0
 21512                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21513                           ;setRF_ReceiveGO@rf stored from wreg
 21514  248A  00F4               	movwf	setRF_ReceiveGO@rf
 21515                           
 21516                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21517  248B  0874               	movf	setRF_ReceiveGO@rf,w
 21518  248C  31A4  241D         	fcall	i1_RfPointSelect
 21519                           
 21520                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21521  248E  087C               	movf	_RF,w
 21522  248F  0086               	movwf	6
 21523  2490  0187               	clrf	7
 21524  2491  0873               	movf	setRF_ReceiveGO@command,w
 21525  2492  1081               	bcf	1,1
 21526  2493  1D03               	skipz
 21527  2494  1481               	bsf	1,1
 21528  2495  0008               	return
 21529  2496                     __end_of_setRF_ReceiveGO:	
 21530                           
 21531                           	psect	text142
 21532  241D                     __ptext142:	
 21533 ;; *************** function i1_RfPointSelect *****************
 21534 ;; Defined at:
 21535 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21536 ;; Parameters:    Size  Location     Type
 21537 ;;  rf              1    wreg     unsigned char 
 21538 ;; Auto vars:     Size  Location     Type
 21539 ;;  rf              1    1[COMMON] unsigned char 
 21540 ;; Return value:  Size  Location     Type
 21541 ;;		None               void
 21542 ;; Registers used:
 21543 ;;		wreg
 21544 ;; Tracked objects:
 21545 ;;		On entry : 0/0
 21546 ;;		On exit  : 0/0
 21547 ;;		Unchanged: 0/0
 21548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21553 ;;Total ram usage:        2 bytes
 21554 ;; Hardware stack levels used:    1
 21555 ;; This function calls:
 21556 ;;		Nothing
 21557 ;; This function is called by:
 21558 ;;		_setRF_ReceiveGO
 21559 ;; This function uses a non-reentrant model
 21560 ;;
 21561                           
 21562                           
 21563                           ;psect for function i1_RfPointSelect
 21564  241D                     i1_RfPointSelect:	
 21565                           
 21566                           ;incstack = 0
 21567                           ; Regs used in i1_RfPointSelect: [wreg]
 21568                           ;i1RfPointSelect@rf stored from wreg
 21569  241D  00F2               	movwf	i1RfPointSelect@rf
 21570                           
 21571                           ;RF_Control_B1.c: 10: if(rf == 1)
 21572  241E  0872               	movf	i1RfPointSelect@rf,w
 21573  241F  3A01               	xorlw	1
 21574  2420  1D03               	skipz
 21575  2421  0008               	return
 21576                           
 21577                           ;RF_Control_B1.c: 11: {
 21578                           ;RF_Control_B1.c: 12: RF=&RF1;
 21579  2422  30E4               	movlw	_RF1& (0+255)
 21580  2423  00F1               	movwf	??i1_RfPointSelect
 21581  2424  0871               	movf	??i1_RfPointSelect,w
 21582  2425  00FC               	movwf	_RF
 21583  2426  0008               	return
 21584  2427                     __end_ofi1_RfPointSelect:	
 21585  007E                     btemp	set	126	;btemp
 21586  007E                     pic14e$flags	set	126
 21587  007E                     wtemp	set	126
 21588  007E                     wtemp0	set	126
 21589  0080                     wtemp1	set	128
 21590  0082                     wtemp2	set	130
 21591  0084                     wtemp3	set	132
 21592  0086                     wtemp4	set	134
 21593  0088                     wtemp5	set	136
 21594  007F                     wtemp6	set	127
 21595  007E                     ttemp	set	126
 21596  007E                     ttemp0	set	126
 21597  0081                     ttemp1	set	129
 21598  0084                     ttemp2	set	132
 21599  0087                     ttemp3	set	135
 21600  007F                     ttemp4	set	127
 21601  007E                     ltemp	set	126
 21602  007E                     ltemp0	set	126
 21603  0082                     ltemp1	set	130
 21604  0086                     ltemp2	set	134
 21605  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         283
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      75
    BANK2            80      0      78
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK1[2]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK3[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), DimmerLights1(BANK2[13]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setBuz
    _Sw_DimmerOffFunc->_setDelayOff_GO
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setBuz
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setBuz
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setBuz
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   81237
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8083
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8083
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8083
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   10938
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   10938
                                             12 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    4107
                                             10 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    3443
                                              8 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1258
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1070
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1070
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23789
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   23789
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22785
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   21168
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    5201
                                             10 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6572
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6572
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6572
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2102
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8099
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6603
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4818
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2813
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1167
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1167
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    5109
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    5030
                                             10 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    1365
                                              5 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1791
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1039
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4648
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4648
                                             10 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1     668
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     193      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     193      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Sep 15 11:19:14 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007B  
                                     _RD 0CA8                                       _RF 007C  
                __end_of_CC2500_WriteREG 26C6                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 264F  
             _getDimmerLights_StatusFlag 2639                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 085D                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0027  
              __end_of_setLoad_StatusOff 1AE5                     _setDimmerLights_Main 14B5  
                           ___ftadd@sign 0048                                      l312 1DA9  
                                    l313 1DAE                                      l403 2736  
                                    l323 105E                                      l307 1D7F  
                                    l340 1A77                                      l316 1DB1  
                                    l343 1A7D                                      l327 106F  
                                    l409 190B                                      l373 26A0  
                                    l374 26A2                                      l385 26B5  
                                    l706 1A51                                      l397 2548  
                                    l922 10F6                                      l875 25DB  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0015                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0166  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E4                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 0154  
                                    _Sw2 015D                                      _Buz 0078  
              setDimmerLights_Adj@status 0025                 __end_of_CC2500_WriteByte 26AD  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2427  
                        __end_of_ADC_Set 23DC                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 176C                    _setDimmerLights_ERROR 1E8F  
                  _setDimmerLights_AdjRF 18BE                    _setDimmerLights_AdjGo 25A0  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 2570  
                                   ?_ISR 0071                          _PowerFault_Main 2396  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1906  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2160 1CD7                 ?_DimmerLightsPointSelect 0071  
                                   l3404 1FE9                                     l2460 0EB5  
                                   l3237 278A                          __end_of_IOC_Set 24EC  
                                   l1718 2659                                     l1744 1B0F  
                                   l2464 1BD4                                     l2704 1E88  
                                   l2722 262E                                     l3427 0C60  
                                   l6200 0C36                                     l2736 1C58  
                                   l2920 23B0                                     l6130 1FB9  
                                   l6210 0C52                                     l6202 0C3B  
                                   l1939 1D1A                                     l6140 1FDF  
                                   l6132 1FBE                                     l6124 1FA8  
                                   l6220 0C84                                     l6212 0C5C  
                                   l6204 0C3F                                     l6300 0AAC  
                                   l3398 1FD2                                     l6230 0C9F  
                                   l6128 1FAF                                     l6240 09B2  
                                   l6216 0C72                                     l6312 0AC8  
                                   l6304 0AB4                                     l6400 1A37  
                                   l6138 1FD7                                     l6170 0BE9  
                                   l6260 0A09                                     l6332 1553  
                                   l6180 0BFF                                     l6316 0AD0  
                                   l6412 1A49                                     l6404 1A3D  
                                   l6430 27EA                                     l6158 1885  
                                   l6246 09C8                                     l6350 1583  
                                   l6174 0BF0                                     l6360 15A7  
                                   l6352 1591                                     l6192 0C19  
                                   l6408 1A43                                     l6434 27F5  
                                   l9002 1D49                                     l6362 15AA  
                                   l6282 0A5B                                     l6508 1F31  
                                   l6452 1871                                     l6268 0A22  
                                   l6366 15B8                                     l6358 159E  
                                   l6198 0C2C                                     l6550 0836  
                                   l6288 0A71                                     l6552 0843  
                                   l9026 1AF3                                     l6546 0830  
                                   l9106 07D8                                     l9202 1329  
                                   l6388 2671                                     l6804 1C46  
                                   l6396 1A31                                     l6556 084F  
                                   l7454 1C20                                     l6646 1B55  
                                   l9150 1219                                     l9070 1CCE  
                                   l9304 1507                                     l9400 11F7  
                                   l8610 2784                                     l7458 1C27  
                                   l6682 2774                                     l9170 125B  
                                   l9146 1209                                     l8700 1F73  
                                   l9316 1533                                     l6684 277A  
                                   l8630 1389                                     l9094 07C2  
                                   l8712 1F8F                                     l9432 0F00  
                                   l7930 0958                                     l8634 13A7  
                                   l6698 2649                                     l8730 1B3C  
                                   l9282 14C4                                     l9530 0EA4  
                                   l9522 0E87                                     l8810 16A0  
                                   l9434 0F09                                     l8708 1F89  
                                   l8716 1F95                                     l9532 0EAA  
                                   l9612 0667                                     l7942 098D  
                                   l8726 1B31                                     l8662 1AD0  
                                   l9286 14D1                                     l9390 1197  
                                   l9518 0E68                                     l6958 1D91  
                                   l8806 168A                                     l9550 15D5  
                                   l9622 0677                                     l9614 066D  
                                   l7936 0980                                     l7880 1B86  
                                   l8840 10E9                                     l9624 067F  
                                   l9472 0FAE                                     l9456 0F6F  
                                   l7938 0986                                     l8682 1F57  
                                   l8666 1ADA                                     l9298 14F5  
                                   l7882 1B92                                     l8842 10EE  
                                   l9554 15DC                                     l9466 0F9D  
                                   l9802 087E                                     l8692 1F67  
                                   l9396 11B0                                     l7892 1BAD  
                                   l8836 10D6                                     l9900 03D1  
                                   l8932 175A                                     l8924 1748  
                                   l9564 15F9                                     l9468 0FA3  
                                   l9812 08B7                                     l8678 1F51  
                                   l8686 1F5D                                     l8758 17D4  
                                   l8918 172C                                     l9662 0723  
                                   l9638 06AC                                     l8696 1F6D  
                                   l9744 0D30                                     l7888 1BA4  
                                   l9496 0DF5                                     l8936 1763  
                                   l8928 1751                                     l9592 163E  
                                   l9576 1614                                     l9648 06DE  
                                   l9672 0756                                     l9824 08EE  
                                   l9808 08AF                                     _CFGS 0CAE  
                                   l9922 044C                                     l9498 0DFF  
                                   l9578 1618                                     l9916 041E  
                                   l8964 1081                                     l8796 1666  
                                   l9836 1168                                     l8990 191C  
                                   l9942 04FD                                     l8966 1099  
                                   l8992 1927                                     l9960 0565  
                                   l9936 04E1                                     l9944 0515  
                                   l9864 1410                                     l9954 054C  
                                   l8978 10B2                                     l9972 059C  
                                   l9980 05D4                                     l9886 1DF9  
                                   l9982 05D7                                     l9994 0601  
                                   l9988 05EE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 24A2                                     _LATC 010E  
                                   u5000 1EF0                                     u4115 1FB4  
                                   u5005 1EEE                                     u4135 1FCD  
                                   u4305 0C1A                                     u4155 1FDA  
                                   u4335 0C2D                                     u4185 1FF0  
                                   u4505 0A23                                     _PEIE 005E  
                                   u4365 0C40                                     _INTE 005C  
                                   _INTF 0059                                     u4615 0AD1  
                                   u4465 09DA                                     u4625 0AD7  
                                   u4545 0A7D                                     u4475 09EA  
                                   u4715 159F                                     u4395 0C53  
                                   u4555 0A8D                                     u4485 0A0A  
                                   u4495 0A19                                     u4655 155A  
                                   u4575 0AB5                                     u7065 0919  
                                   u4585 0ABB                                     u4685 1584  
                                   u8185 278B                                     u8195 2790  
                                   u8470 241B                                     u6955 1B89  
                                   u8725 1911                                     u6975 1B93  
                                   u6985 1B9D                                     u6995 1BA5  
                                   u9915 1157                                     _LWLO 0CAD  
                                   u9845 0899                                     u9925 1180  
                                   _RFSW 00BC                                     _TMR0 0015  
                                   u9945 1C9F                                     u9965 13DF  
                                   u9885 08DA                                     u9975 1426  
                        __end_of_INT_Set 23BB                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 0148  
                                   _Load 006E                                     _Temp 007D  
                                   _main 126E                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 2396                      __end_of_DlyOff_Main 14B5  
                        __end_of_RF_Main 23B0                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 26F8                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1BB4                      DelayTimejudge@value 0022  
                          _RfPointSelect 243D               __end_of_setRFSW_AdjControl 1C6E  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 010E  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 24D2  
                                  l10050 12AB                                    l10046 1295  
                  ?_setDimmerLights_Main 0071                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 2623                                    ?_main 0071  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 0CB7  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0A44  
                                  u10015 1DE0                                    u10135 052D  
                                  u10085 0498                          __end_of___ftmul 0AF8  
                        __end_of___fttol 15C1             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1BB4  
                 _setDimmerLights_Switch 2550            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E6                                    _RFSW2 00E7  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0071  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 00E9                            setRF_Learn@rf 0023  
                                  _MainT 13C5                                    _Load1 02A0  
                          __CFG_WRT$HALF 0000                                    _Temp1 0120  
                       __end_of_TMR0_ISR 03A4             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 24F9                                    _getAD 264F  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1125  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 2580              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 25D1                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1EE6  
            __size_of_Flash_Memory_Write 0031                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 002A  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 1001                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 002A                     __end_of_getLoad_Safe 247F  
                      ??_setPercentValue 0059                             __end_of_main 12DD  
                    ?_setRF_DimmerLights 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 1800  
                   _setSw_Initialization 23FB               __size_of_setLoad_StatusOff 0031  
                                 ??_main 006C                            ___fttol@sign1 0053  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 16D9  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 2399                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 25E4                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 2590                     __end_of_getTemp_Safe 23D5  
                      i1RfPointSelect@rf 0072                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020                              _DlyOff_Main 143C  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0071  
                      ?_getPowerFault_AD 0071                           setRF_Enable@rf 0023  
                       __end_of___awtoft 189C                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 2000                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 2560                                   i1l1690 2706  
                                 i1l1685 0394                                   i1l8302 18FC  
                                 i1l8430 029E                                   i1l8406 023B  
                                 i1l8350 0114                                   i1l8326 00B1  
                                 i1l8424 0285                                   i1l8432 02A4  
                                 i1l8344 00FB                                   i1l8352 011A  
                                 i1l8442 02D7                                   i1l8426 028B  
                                 i1l8362 014D                                   i1l8346 0101  
                                 i1l8452 0306                                   i1l8372 017C  
                                 i1l8454 030C                                   i1l8438 02C0  
                                 i1l8446 02EB                                   i1l8374 0182  
                                 i1l8358 0136                                   i1l8366 0161  
                                 i1l7904 1A9F                                   i1l8464 0340  
                                 i1l8472 0375                                   i1l8384 01B6  
                                 i1l8392 01EB                                   i1l7908 1AA9  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   u800_25 036B  
                                 u801_25 0387                                   _OSCCON 0099  
                     __size_of_Load_Main 02AC                                   u764_25 0095  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u781_25 01E1                                   u783_25 021F  
                                 _IO_Set 26DF                       DelayTime_1us@count 0020  
                             _VarProduct 01A0                    _Dimmer_Initialization 23C7  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 25F9  
                                 _Dimmer 00B9                                   _DlySw1 00CB  
                                 _DlySw2 00D0              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 2694                      __end_of_Buzzer_Main 099B  
                                 _Memory 00E8                                   _Timer0 00EA  
     __end_of_setDimmerLights_TriggerAdj 25C0               _setDimmerLights_TriggerAdj 25B0  
          setDimmerLights_Switch@command 0022                                   ___wmul 2781  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0071                                ??___lwdiv 0024  
                        i1_RfPointSelect 241D              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 002A                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 1F41  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0071  
                  setDimmerLights@status 0024                                   _setBuz 134E  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 24DF  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0071  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 187A  
                        ?_setLoad_Enable 0071                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                           _setTemp_Enable 245E  
                        _RfSWPointSelect 2623             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 23B0                        ?_Sw_DimmerAdjFunc 0071  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 105C         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 25A0    __size_of_setPowerFault_Initialization 0010  
           _setPowerFault_Initialization 2590                  __end_of__initialization 0055  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0071  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0071  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0071  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                          __end_of_MainT 143C                               ___fttol@f1 004B  
                         __pcstackCOMMON 0071                       ??_Sw_DimmerOffFunc 0028  
                           __pidataBANK3 27BE                            __end_of_getAD 2665  
                              ?_TMR0_ISR 0071                                ?_TMR0_Set 0071  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 24BA                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0065                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0071                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000C  
                       ?_setDimmerLights 0024                        __end_of_Load_Main 0650  
                       ?_PowerFault_Main 0071                 __end_of_setDimmerReClock 2712  
                     __size_of_getRxData 0052                      ?_LED_Initialization 0071  
                 __end_of_setTemp_Enable 2469                        ?_CC2500_WriteByte 0071  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0079                           _DimmerLights22 007A  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 2399  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002B  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006C  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01C0                               __pbssBANK4 0220  
                             __pbssBANK5 02A0                              _Buzzer_Main 08F3  
                      ??_setRFSW_Control 002A                        __end_of_Temp_Main 0800  
                 ?_Dimmer_Initialization 0071                                  ?_IO_Set 0071  
                             ??_LED_Main 0025                  _DelayOff_Initialization 23E3  
                  __size_of_getLoad_Safe 000B            ?_setPowerFault_Initialization 0071  
                             _getPF_Safe 23F3                            ??_Switch_Main 0031  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006C  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 2427  
                    i1_setLoad_StatusOff 1A83                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000E  
                            setBuz@count 0029                               __pmaintext 126E  
                    _CC2500_WriteCommand 2540                     ?_Temp_Initialization 0071  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0073                            ?_setTemp_Main 0071  
                             ??_TMR0_Set 0020                               _getLoad_AD 085D  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0071                       __size_of_setTxData 00C9  
                ?_setDimmerLights_Switch 0022                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 23D5  
              _PowerFault_Initialization 2393                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1125             __end_of_setRF_Initialization 23E3  
                  __size_of_getTemp_Safe 0007                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1C2E                  __end_of_RfSWPointSelect 2639  
                      Sw_DimmerOnFunc@sw 002B                     ?i1_setLoad_StatusOff 0071  
                                _IOC_ISR 18E1                          ?_setTemp_Enable 0071  
                                _IOC_Set 24DF                     __size_of_setLog_Code 0048  
                                _INT_ISR 2496                                  _INT_Set 23B5  
                   ?_CC2500_WriteCommand 0071                        _Flash_Memory_Main 1DBC  
                      _Flash_Memory_Read 26C6                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0071  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 2474  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 23AC                       ?_Flash_Memory_Main 0071  
                     ?_Flash_Memory_Read 0071          __end_of_setControl_Lights_Table 176C  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 11FF  
                        _setPercentValue 1E01                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00E1             __end_of_CC2500_FrequencyCabr 24AE  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D9  
                                _VarLED2 00DD                        __end_of_getRxData 07FD  
             __end_of_setPowerFault_Main 0EBD                 _CC2500_registers_address 1800  
                         RF_RxDisable@rf 0024                    ??_Temp_Initialization 0021  
        __end_of_setDimmerLights_Trigger 2570                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 23CE  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 2560  
                                ___ftadd 0BC1                           ??_setSw_Enable 0022  
                                ___ftdiv 099B                          __size_of___wmul 001E  
                                ___ftmul 0A44                                  ___fttol 153A  
                    __end_of_Switch_Main 240B                                  ___lwdiv 1B7D  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 1125  
                                __ptext2 1C6E                                  __ptext3 085D  
                                __ptext4 264F                                  __ptext5 07FD  
                                __ptext6 0EBD                                  __ptext7 1CAF  
                                __ptext8 2399                                  __ptext9 247F  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 002A                    ??i1_setLoad_StatusOff 0072  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1E01  
              __end_of_Flash_Memory_Read 26DF                               _setRF_Main 15C1  
                          _DelayOff_Main 23EB                        _DimmerLights_Main 2453  
                      __end_of_setINT_GO 241D           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 243D  
                      ??_setRF_ReceiveGO 0074               __end_of_CC2500_ClearRXFIFO 23A0  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 23A4  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0071  
                     ?_DimmerLights_Main 0071                           _LedPointSelect 27DE  
                    _DelayOffPointSelect 2665                                  clrloop0 23C2  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 2506  
                   end_of_initialization 0055                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 2448                        _CC2500_InitSetREG 1979  
                          _DelayTime_1us 1906                        __end_of_setTxData 0BC1  
             __end_of_Flash_Memory_Write 1B16                                  init_ram 23BB  
                     ?_CC2500_InitSetREG 0071                      ??_DimmerLights_Main 002C  
                   Flash_Memory_Read@ret 0023                                  initloop 23BC  
                             _setSw_Main 0650                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 272D                              ?_getPF_Safe 0071  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 25C0                            _CC2500_Enable 0380  
                       ?i1_RfPointSelect 0071                       ?_CC2500_ReadStatus 0071  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 000B  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 105C  
                          _CC2500_TxData 1D78                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 19CD           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0041  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0071  
                    _Flash_Memory_Modify 1191                  _DimmerLights_Exceptions 10C0  
                            ?_getLoad_AD 0071                             __pstringtext 1800  
                    _Flash_Memory_Unlock 240B                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0071                         _setLoad_StatusOn 1B16  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0071                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 245E  
                     _Mcu_Initialization 267C                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0071  
                       ?_RfSWPointSelect 0071                          _setSw_Main$4703 002E  
                        _setSw_Main$4704 002F                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 2800                  __end_of_Sw_DimmerOnFunc 126E  
                __end_of_setPercentValue 1E47                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 19A3                      ?_Mcu_Initialization 0071  
       __end_of_setPowerFault_Exceptions 1BEE                     ?_Flash_Memory_Modify 0071  
            __size_of_setRF_DimmerLights 005B                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1D34                     ?_Flash_Memory_Unlock 0071  
              __end_of_CC2500_ReadStatus 2748                            ?_RF_RxDisable 0071  
             __end_of_setLoad_Exceptions 1D34                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 26F8                     _setRF_Initialization 23DC  
                            _Switch_Main 2403              setDimmerLights_Clear@lights 0023  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0071  
                         ?_CC2500_TxData 0071                  _DimmerLightsPointSelect 25D1  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 25E4  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0025                __size_of_Sw_DimmerAdjFunc 0026  
                   setRF_DimmerLights@on 0020                           __end_of___wmul 279F  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 034B  
        __size_of_setOverTemp_Exceptions 0042                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0085                           __end_of_setLED 1F9F  
                         __end_of_setBuz 13C5                            _setLoad_Count 260E  
        _getDimmerLights_StatusFlag$1814 0022                     _CC2500_FrequencyCabr 24A2  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 0019  
                            ?_setRF_Main 0071                          _setRFSW_Control 1649  
                    __size_of_getPF_Safe 0008                        ?_setDimmerReClock 0071  
                    start_initialization 0018                        _setRF_DimmerValue 1B48  
                        ?_LedPointSelect 0071               __end_of_DimmerLights_Close 272D  
                              _Load_Main 03A4                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0071                       ?_setRF_DimmerValue 0071  
             __end_of_CC2500_InitPATable 27BE          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 1000                              ?_setLoad_GO 0071  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 2764  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0071                                 ??_IO_Set 0020  
                              _VarErrLED 00D5                              ?_setSw_Main 0071  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0071                     __end_of_setSw_Status 2540  
                     Sw_DimmerAdjFunc@sw 0024                    ?_setRF_Initialization 0071  
              i1setLoad_StatusOff@lights 0072                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 2448  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00C4  
                              _Temp_Main 07FD                ??_DimmerLights_Exceptions 002A  
          setOverTemp_Exceptions@command 002C                                _Rx_Length 00BE  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0026  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00C0                              __pdataBANK3 01A0  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0071                                 ??_setBuz 0028  
                        ??_DelayOff_Main 002D                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0071                         _CC2500_SIDLEMode 23A4  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1B7D  
                  ?_CC2500_FrequencyCabr 0071                         setINT_GO@command 0020  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0071  
                        _setRF_Main$4352 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0071                                ___latbits 0003  
                             ?_Load_Main 0071                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0071                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0071                            __pcstackBANK0 0020  
                               ?_INT_Set 0071                         ?_setPercentValue 0071  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0094                            DlyOff_Main@sw 002C  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0071  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1CAF  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 012E                            _DimmerLights2 013B  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002A                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 18BE                  __size_of_setRF_RxStatus 000E  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00E8              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0071                               ?_Temp_Main 0071  
                    __size_of_setRF_Main 0088                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
                 _setTemp_Initialization 247F                         _getPowerFault_AD 1C6E  
      __size_of_setPowerFault_Exceptions 003A      __end_of_Flash_Memory_Initialization 0DAF  
            _Flash_Memory_Initialization 0CB7                ?_setPowerFault_Exceptions 0071  
                              __ptext100 2639                                __ptext101 25F9  
                              __ptext110 1EE6                                __ptext102 19F8  
                              __ptext111 2522                                __ptext103 23C7  
                              __ptext120 2665                                __ptext112 2623  
                              __ptext104 23EB                                __ptext121 25E4  
                              __ptext113 2560                                __ptext105 143C  
                              __ptext130 239C                                __ptext122 23A4  
                              __ptext114 2550                                __ptext106 0AF8  
                              __ptext131 2540                                __ptext123 1A53  
                              __ptext115 25D1                                __ptext107 243D  
                              __ptext140 2496                                __ptext132 2694  
                              __ptext124 1979                                __ptext116 134E  
                              __ptext108 2531                                __ptext141 248A  
                              __ptext133 08F3                                __ptext125 279F  
                              __ptext117 2781                                __ptext109 1866  
                               ?___ftadd 003E                                __ptext142 241D  
                              __ptext134 2427                                __ptext126 26AD  
                              __ptext118 23E3                                __ptext127 24A2  
                              __ptext119 2432                                __ptext136 0059  
                              __ptext128 1906                                __ptext137 1A83  
                              __ptext129 23A0                                __ptext138 18E1  
                              __ptext139 26F8                                _getRxData 07AB  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 16D9                          _setRF_ReceiveGO 248A  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 2432  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 23B5  
                     _setPowerFault_Main 0DAF       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 015B  
          __end_of_setDimmerLights_ERROR 1EE6             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 18E1            __end_of_setDimmerLights_AdjGo 25B0  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 2580                           __size_of_MainT 0077  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                    ?_setPowerFault_Main 0071                           __size_of_getAD 0016  
                           _setRF_Enable 19A3                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 1866  
                     Sw_DimmerOffFunc@sw 002A                                _setINT_GO 2414  
                    __end_of_setLED_Main 1C2E                 __end_of_setLoad_StatusOn 1B48  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 239C  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 24C6                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 23C1  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0AF8  
    __end_of_DimmerLights_Initialization 260E              _DimmerLights_Initialization 25F9  
                     _CC2500_ClearRXFIFO 239C                       _CC2500_ClearTXFIFO 23A0  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 2522  
                   ??_setPowerFault_Main 002D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0023                   setRF_ReceiveGO@command 0073  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1AE5  
                             ?_getRxData 0071                                 _TMR0_ISR 0059  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1AB4  
                      setRF_ReceiveGO@rf 0074                                 _TMR0_Set 24EC  
                       _Sw_DimmerAdjFunc 192C                      ?_CC2500_ClearRXFIFO 0071  
                    ?_CC2500_ClearTXFIFO 0071                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1979                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 2550                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 12DD  
                  __size_of_setTemp_Main 0143             __end_of_MainT_Initialization 2474  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 001C  
                               _DelayOff 00B8                             setSw_Main@sw 0030  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 23FB  
                       __size_of_IOC_ISR 0025                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 24BA                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1E8F  
                  _DlyOff_Initialization 2432                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0071                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 08F3                    _Switch_Initialization 24F9  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 2522                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 1191                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 2694  
                               _VarTMain 01C0                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 2496  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 002B                      _Load_Initialization 24D2  
                              setLED@led 0023                                 _RxStatus 0383  
   __end_of_setDimmerLights_TriggerERROR 19F8    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 19CD                                 _TxStatus 0386  
                           _setTemp_Main 0EBD                       _setLoad_Exceptions 1CF1  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 2748  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 187A                         ??_LedPointSelect 0020  
                               ___ftpack 1F9F                             _setSw_Status 2531  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1BEE  
                    ?_setLoad_Exceptions 0071                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 1F41                 ?_DelayOff_Initialization 0071  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0071                          ___lwdiv@counter 0027  
                               __ptext10 2403                                 __ptext11 0650  
                               __ptext20 23B0                                 __ptext12 2514  
                               __ptext21 23AC                                 __ptext13 11FF  
                               __ptext30 1B48                                 __ptext22 15C1  
                               __ptext14 12DD                                 __ptext31 18BE  
                               __ptext23 07AB                                 __ptext15 192C  
                               __ptext40 2764                                 __ptext32 1001  
                               __ptext24 1E47                                 __ptext16 25B0  
                               __ptext41 23A8                                 __ptext33 0A44  
                               __ptext25 16D9                                 __ptext17 25A0  
                               __ptext50 24EC                                 __ptext42 23DC  
                               __ptext34 0BC1                                 __ptext26 1649  
                               __ptext18 24F9                                 __ptext51 26DF  
                               __ptext43 2396                                 __ptext35 1952  
                               __ptext27 0801                                 __ptext19 23FB  
                               __ptext60 1CF1                                 __ptext52 24DF  
                               __ptext44 0DAF                                 __ptext36 1D78  
                               __ptext28 1A25                                 __ptext61 2748  
                               __ptext53 23B5                                 __ptext45 1BB4  
                               __ptext37 105C                                 __ptext29 1C2E  
                               __ptext70 1B7D                                 __ptext62 19A3  
                               __ptext54 23D5                                 __ptext46 2474  
                               __ptext38 2506                                 __ptext71 24D2  
                               __ptext63 2414                                 __ptext55 2469  
                               __ptext47 2393                                 __ptext39 272D  
                               __ptext80 0CB7                                 __ptext72 189C  
                               __ptext64 10C0                                 __ptext56 13C5  
                               __ptext48 2590                                 __ptext81 1E01  
                               __ptext73 24C6                                 __ptext65 19CD  
                               __ptext57 245E                                 __ptext49 267C  
                               __ptext90 14B5                                 __ptext82 153A  
                               __ptext74 1BEE                                 __ptext66 1E8F  
                               __ptext58 2580                                 __ptext91 1D34  
                               __ptext83 099B                                 __ptext75 24BA  
                               __ptext67 2570                                 __ptext59 03A4  
                               __ptext92 1AB4                                 __ptext84 187A  
                               __ptext76 25C0                                 __ptext68 23CE  
                               __ptext93 176C                                 __ptext85 1F9F  
                               __ptext77 1DBC                                 __ptext69 23F3  
                               __ptext94 1B16                                 __ptext86 1AE5  
                               __ptext78 1191                                 __ptext95 260E  
                               __ptext87 240B                                 __ptext79 24AE  
                               __ptext96 1F41                                 __ptext88 26C6  
                               __ptext97 27DE                                 __ptext89 2453  
                               __ptext98 2712                                 __ptext99 2448  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0016           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 2531            __end_of_Dimmer_Initialization 23CE  
           __end_of_setDimmerLights_Main 153A              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 002C                            setLED@command 0022  
                          __size_of_main 006F                              _setRF_Learn 2514  
               __end_of_CC2500_SIDLEMode 23A8                           _setRF_RxStatus 2506  
             setDimmerLights_Main@lights 002B              __end_of_DelayOffPointSelect 267C  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 2712  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 001A  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 2764  
                     _CC2500_InitPATable 279F      __size_of_getDimmerLights_StatusFlag 0016  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 1649  
            __size_of_Mcu_Initialization 0018                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0071  
       setDimmerLights_TriggerAdj@lights 0023            ?_setDimmerLights_TriggerERROR 0022  
                    ?_CC2500_InitPATable 0071                          _CC2500_PowerRST 1A53  
                     __end_of_setLoad_GO 2453              __end_of_Flash_Memory_Modify 11FF  
                      ??_getPercentValue 0059                              _setLog_Code 1E47  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 2414  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 26AD  
                     __end_of_setSw_Main 07AB                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_GO 0384  
                          _Transceive_OK 0385                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0071                  ?_setOverTemp_Exceptions 0071  
                         _DelayTimejudge 1A25                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1CAF  
                   ??_DimmerLights_Close 0023                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 2514                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1A25  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 19F8  
            __end_of_setDimmerLights_Adj 1D78                  ?_setTemp_Initialization 0071  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0073  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 2469  
                  __size_of_RF_RxDisable 0027                        _RF_Initialization 23A8  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0071                     _Flash_Memory_Erasing 24AE  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 23EB                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 23F3                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 0801  
       __size_of_setControl_Lights_Table 0093                        _setLoad_StatusOff 1AB4  
                 __end_of_DelayTimejudge 1A53           __end_of_setOverTemp_Exceptions 1CF1  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 002A                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 192C                 __end_of_Sw_DimmerAdjFunc 1952  
                __end_of_CC2500_ReadByte 2781             __end_of_setSw_Initialization 2403  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1952               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 24C6         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 248A  
               __size_of_Sw_DimmerOnFunc 006F                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 23AC  
               __end_of_Sw_DimmerOffFunc 134E                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 10C0                    __end_of_CC2500_TxData 1DBC  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 189C  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1A83  
