

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Sep 24 17:05:07 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942                           
  1943                           	psect	idataBANK3
  1944  26E6                     __pidataBANK3:	
  1945                           
  1946                           ;initializer for _VarProduct
  1947  26E6  3463               	retlw	99
  1948  26E7  3402               	retlw	2
  1949  26E8  3400               	retlw	0
  1950  26E9  3400               	retlw	0
  1951  26EA  3400               	retlw	0
  1952  26EB  3400               	retlw	0
  1953  26EC  3400               	retlw	0
  1954  26ED  3400               	retlw	0
  1955  26EE  3400               	retlw	0
  1956  26EF  3400               	retlw	0
  1957  26F0  3400               	retlw	0
  1958  26F1  3400               	retlw	0
  1959  26F2  34FF               	retlw	255
  1960  26F3  34FF               	retlw	255
  1961  26F4  34FF               	retlw	255
  1962  26F5  3400               	retlw	0
  1963  26F6  3400               	retlw	0
  1964  26F7  3400               	retlw	0
  1965  26F8  3400               	retlw	0
  1966  26F9  3400               	retlw	0
  1967  26FA  3400               	retlw	0
  1968  26FB  3400               	retlw	0
  1969  26FC  3400               	retlw	0
  1970  26FD  3400               	retlw	0
  1971  26FE  3400               	retlw	0
  1972  26FF  3400               	retlw	0
  1973  2700  3400               	retlw	0
  1974  2701  3400               	retlw	0
  1975  2702  3400               	retlw	0
  1976  2703  3400               	retlw	0
  1977  2704  3400               	retlw	0
  1978  2705  3400               	retlw	0
  1979                           
  1980                           	psect	stringtext
  1981  2000                     __pstringtext:	
  1982  2000                     _CC2500_registers_address:	
  1983  2000  3403               	retlw	3
  1984  2001  3416               	retlw	22
  1985  2002  3417               	retlw	23
  1986  2003  341E               	retlw	30
  1987  2004  341F               	retlw	31
  1988  2005  3420               	retlw	32
  1989  2006  342A               	retlw	42
  1990  2007  342B               	retlw	43
  1991  2008  340B               	retlw	11
  1992  2009  340C               	retlw	12
  1993  200A  340D               	retlw	13
  1994  200B  340E               	retlw	14
  1995  200C  340F               	retlw	15
  1996  200D  3410               	retlw	16
  1997  200E  3411               	retlw	17
  1998  200F  3412               	retlw	18
  1999  2010  3413               	retlw	19
  2000  2011  3414               	retlw	20
  2001  2012  340A               	retlw	10
  2002  2013  3415               	retlw	21
  2003  2014  3421               	retlw	33
  2004  2015  3422               	retlw	34
  2005  2016  3418               	retlw	24
  2006  2017  3419               	retlw	25
  2007  2018  341A               	retlw	26
  2008  2019  341B               	retlw	27
  2009  201A  341C               	retlw	28
  2010  201B  341D               	retlw	29
  2011  201C  3423               	retlw	35
  2012  201D  3424               	retlw	36
  2013  201E  3425               	retlw	37
  2014  201F  3426               	retlw	38
  2015  2020  3429               	retlw	41
  2016  2021  342C               	retlw	44
  2017  2022  342D               	retlw	45
  2018  2023  342E               	retlw	46
  2019  2024  3400               	retlw	0
  2020  2025  3401               	retlw	1
  2021  2026  3402               	retlw	2
  2022  2027  3407               	retlw	7
  2023  2028  3408               	retlw	8
  2024  2029  3409               	retlw	9
  2025  202A  3406               	retlw	6
  2026  202B  3404               	retlw	4
  2027  202C  3405               	retlw	5
  2028  202D  3427               	retlw	39
  2029  202E  3428               	retlw	40
  2030  202F                     __end_of_CC2500_registers_address:	
  2031  202F                     _CC2500_rfSettings:	
  2032  202F  3407               	retlw	7
  2033  2030  3407               	retlw	7
  2034  2031  3430               	retlw	48
  2035  2032  3487               	retlw	135
  2036  2033  346B               	retlw	107
  2037  2034  34F8               	retlw	248
  2038  2035  347F               	retlw	127
  2039  2036  343F               	retlw	63
  2040  2037  3409               	retlw	9
  2041  2038  3400               	retlw	0
  2042  2039  345C               	retlw	92
  2043  203A  34A7               	retlw	167
  2044  203B  3462               	retlw	98
  2045  203C  3486               	retlw	134
  2046  203D  3483               	retlw	131
  2047  203E  3403               	retlw	3
  2048  203F  3422               	retlw	34
  2049  2040  34F8               	retlw	248
  2050  2041  3400               	retlw	0
  2051  2042  3444               	retlw	68
  2052  2043  34B6               	retlw	182
  2053  2044  3410               	retlw	16
  2054  2045  3418               	retlw	24
  2055  2046  341D               	retlw	29
  2056  2047  341C               	retlw	28
  2057  2048  34C7               	retlw	199
  2058  2049  3400               	retlw	0
  2059  204A  34B2               	retlw	178
  2060  204B  34EA               	retlw	234
  2061  204C  340A               	retlw	10
  2062  204D  3400               	retlw	0
  2063  204E  3411               	retlw	17
  2064  204F  3459               	retlw	89
  2065  2050  3488               	retlw	136
  2066  2051  3431               	retlw	49
  2067  2052  340B               	retlw	11
  2068  2053  342F               	retlw	47
  2069  2054  342E               	retlw	46
  2070  2055  3406               	retlw	6
  2071  2056  3404               	retlw	4
  2072  2057  3405               	retlw	5
  2073  2058  3400               	retlw	0
  2074  2059  3430               	retlw	48
  2075  205A  34D3               	retlw	211
  2076  205B  3491               	retlw	145
  2077  205C  3441               	retlw	65
  2078  205D  3400               	retlw	0
  2079  205E                     __end_of_CC2500_rfSettings:	
  2080  205E                     _CC2500_patable_vaule:	
  2081  205E  34FE               	retlw	254
  2082  205F  34FE               	retlw	254
  2083  2060  34FE               	retlw	254
  2084  2061  34FE               	retlw	254
  2085  2062  34FE               	retlw	254
  2086  2063  34FE               	retlw	254
  2087  2064  34FE               	retlw	254
  2088  2065  34FE               	retlw	254
  2089  2066                     __end_of_CC2500_patable_vaule:	
  2090                           
  2091                           	psect	nvBANK0
  2092  006F                     __pnvBANK0:	
  2093  006F                     _Product:	
  2094  006F                     	ds	1
  2095                           
  2096                           	psect	nvBANK1
  2097  00E9                     __pnvBANK1:	
  2098  00E9                     _Memory:	
  2099  00E9                     	ds	1
  2100  00EA                     _TMain:	
  2101  00EA                     	ds	1
  2102  00EB                     _Timer0:	
  2103  00EB                     	ds	1
  2104  000C                     _PORTA	set	12
  2105  000D                     _PORTB	set	13
  2106  000E                     _PORTC	set	14
  2107  0015                     _TMR0	set	21
  2108  005F                     _GIE	set	95
  2109  005C                     _INTE	set	92
  2110  0059                     _INTF	set	89
  2111  005B                     _IOCIE	set	91
  2112  0058                     _IOCIF	set	88
  2113  005E                     _PEIE	set	94
  2114  0060                     _RA0	set	96
  2115  0063                     _RA3	set	99
  2116  0064                     _RA4	set	100
  2117  0066                     _RA6	set	102
  2118  0067                     _RA7	set	103
  2119  0068                     _RB0	set	104
  2120  0069                     _RB1	set	105
  2121  006A                     _RB2	set	106
  2122  006B                     _RB3	set	107
  2123  006C                     _RB4	set	108
  2124  006D                     _RB5	set	109
  2125  0070                     _RC0	set	112
  2126  0071                     _RC1	set	113
  2127  0072                     _RC2	set	114
  2128  0074                     _RC4	set	116
  2129  0075                     _RC5	set	117
  2130  0077                     _RC7	set	119
  2131  005D                     _TMR0IE	set	93
  2132  005A                     _TMR0IF	set	90
  2133  009D                     _ADCON0	set	157
  2134  009E                     _ADCON1	set	158
  2135  009C                     _ADRESH	set	156
  2136  009B                     _ADRESL	set	155
  2137  0095                     _OPTION_REG	set	149
  2138  0099                     _OSCCON	set	153
  2139  008C                     _TRISA	set	140
  2140  008D                     _TRISB	set	141
  2141  008E                     _TRISC	set	142
  2142  04E9                     _GO_nDONE	set	1257
  2143  0117                     _FVRCON	set	279
  2144  010C                     _LATA	set	268
  2145  010D                     _LATB	set	269
  2146  010E                     _LATC	set	270
  2147  018C                     _ANSELA	set	396
  2148  018D                     _ANSELB	set	397
  2149  018E                     _ANSELC	set	398
  2150  0192                     _PMADRH	set	402
  2151  0191                     _PMADRL	set	401
  2152  0196                     _PMCON2	set	406
  2153  0194                     _PMDATH	set	404
  2154  0193                     _PMDATL	set	403
  2155  0CAE                     _CFGS	set	3246
  2156  0CAC                     _FREE	set	3244
  2157  0CAD                     _LWLO	set	3245
  2158  0CA8                     _RD	set	3240
  2159  0CA9                     _WR	set	3241
  2160  0CAA                     _WREN	set	3242
  2161  1068                     _WPUB0	set	4200
  2162  1069                     _WPUB1	set	4201
  2163  106A                     _WPUB2	set	4202
  2164  0396                     _IOCBF	set	918
  2165  0395                     _IOCBN	set	917
  2166  0394                     _IOCBP	set	916
  2167  1CB2                     _IOCBF2	set	7346
  2168                           
  2169                           ; #config settings
  2170  0000                     
  2171                           	psect	cinit
  2172  0018                     start_initialization:	
  2173  0018                     __initialization:	
  2174                           
  2175                           ; Clear objects allocated to BITCOMMON
  2176  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2177                           
  2178                           ; Clear objects allocated to COMMON
  2179  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2180  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2181  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2182  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2183  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2184  001E  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  2185                           
  2186                           ; Clear objects allocated to BANK0
  2187  001F  01EC               	clrf	__pbssBANK0& (0+127)
  2188  0020  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2189  0021  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2190                           
  2191                           ; Clear objects allocated to BANK1
  2192  0022  30A0               	movlw	low __pbssBANK1
  2193  0023  0084               	movwf	4
  2194  0024  3000               	movlw	high __pbssBANK1
  2195  0025  0085               	movwf	5
  2196  0026  3049               	movlw	73
  2197  0027  31A2  22EA  3180   	fcall	clear_ram0
  2198                           
  2199                           ; Clear objects allocated to BANK2
  2200  002A  3020               	movlw	low __pbssBANK2
  2201  002B  0084               	movwf	4
  2202  002C  3001               	movlw	high __pbssBANK2
  2203  002D  0085               	movwf	5
  2204  002E  3050               	movlw	80
  2205  002F  31A2  22EA  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK3
  2208  0032  30C0               	movlw	low __pbssBANK3
  2209  0033  0084               	movwf	4
  2210  0034  3001               	movlw	high __pbssBANK3
  2211  0035  0085               	movwf	5
  2212  0036  3010               	movlw	16
  2213  0037  31A2  22EA  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Clear objects allocated to BANK4
  2216  003A  3020               	movlw	low __pbssBANK4
  2217  003B  0084               	movwf	4
  2218  003C  3002               	movlw	high __pbssBANK4
  2219  003D  0085               	movwf	5
  2220  003E  3025               	movlw	37
  2221  003F  31A2  22EA  3180   	fcall	clear_ram0
  2222                           
  2223                           ; Clear objects allocated to BANK5
  2224  0042  30A0               	movlw	low __pbssBANK5
  2225  0043  0084               	movwf	4
  2226  0044  3002               	movlw	high __pbssBANK5
  2227  0045  0085               	movwf	5
  2228  0046  3047               	movlw	71
  2229  0047  31A2  22EA  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Initialize objects allocated to BANK3
  2232  004A  30E6               	movlw	low __pidataBANK3
  2233  004B  0084               	movwf	4
  2234  004C  30A6               	movlw	(high __pidataBANK3)| (0+128)
  2235  004D  0085               	movwf	5
  2236  004E  30A0               	movlw	low __pdataBANK3
  2237  004F  0086               	movwf	6
  2238  0050  3001               	movlw	high __pdataBANK3
  2239  0051  0087               	movwf	7
  2240  0052  3020               	movlw	32
  2241  0053  31A2  22E4         	fcall	init_ram
  2242  0055                     end_of_initialization:	
  2243                           ;End of C runtime variable initialization code
  2244                           
  2245  0055                     __end_of__initialization:	
  2246  0055  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2247  0056  0020               	movlb	0
  2248  0057  3187  2F91         	ljmp	_main	;jump to C main() function
  2249                           
  2250                           	psect	bitbssCOMMON
  2251  0380                     __pbitbssCOMMON:	
  2252  0380                     _CC2500_Enable:	
  2253  0380                     	ds	1
  2254  0381                     _Receive_GO:	
  2255  0381                     	ds	1
  2256  0382                     _Receive_OK:	
  2257  0382                     	ds	1
  2258  0383                     _RxStatus:	
  2259  0383                     	ds	1
  2260  0384                     _Transceive_GO:	
  2261  0384                     	ds	1
  2262  0385                     _Transceive_OK:	
  2263  0385                     	ds	1
  2264  0386                     _TxStatus:	
  2265  0386                     	ds	1
  2266                           
  2267                           	psect	bssCOMMON
  2268  0078                     __pbssCOMMON:	
  2269  0078                     _Buz:	
  2270  0078                     	ds	1
  2271  0079                     _DimmerLights11:	
  2272  0079                     	ds	1
  2273  007A                     _DimmerLights22:	
  2274  007A                     	ds	1
  2275  007B                     _PF:	
  2276  007B                     	ds	1
  2277  007C                     _RF:	
  2278  007C                     	ds	1
  2279  007D                     _Temp:	
  2280  007D                     	ds	1
  2281                           
  2282                           	psect	bssBANK0
  2283  006C                     __pbssBANK0:	
  2284  006C                     _DimmerLights:	
  2285  006C                     	ds	1
  2286  006D                     _Sw:	
  2287  006D                     	ds	1
  2288  006E                     _Load:	
  2289  006E                     	ds	1
  2290                           
  2291                           	psect	bssBANK1
  2292  00A0                     __pbssBANK1:	
  2293  00A0                     _RF_Data:	
  2294  00A0                     	ds	21
  2295  00B5                     _RF_Count:	
  2296  00B5                     	ds	2
  2297  00B7                     _CRC:	
  2298  00B7                     	ds	1
  2299  00B8                     _DelayOff:	
  2300  00B8                     	ds	1
  2301  00B9                     _Dimmer:	
  2302  00B9                     	ds	1
  2303  00BA                     _DimmerLightsIntr:	
  2304  00BA                     	ds	1
  2305  00BB                     _LED:	
  2306  00BB                     	ds	1
  2307  00BC                     _RFSW:	
  2308  00BC                     	ds	1
  2309  00BD                     _RSSI:	
  2310  00BD                     	ds	1
  2311  00BE                     _Rx_Length:	
  2312  00BE                     	ds	1
  2313  00BF                     _SPI0Buffer:	
  2314  00BF                     	ds	1
  2315  00C0                     _Tx_Length:	
  2316  00C0                     	ds	1
  2317  00C1                     _r_address:	
  2318  00C1                     	ds	1
  2319  00C2                     _r_data:	
  2320  00C2                     	ds	1
  2321  00C3                     _s_data:	
  2322  00C3                     	ds	1
  2323  00C4                     _VarTimer0:	
  2324  00C4                     	ds	7
  2325  00CB                     _DlySw1:	
  2326  00CB                     	ds	5
  2327  00D0                     _DlySw2:	
  2328  00D0                     	ds	5
  2329  00D5                     _VarErrLED:	
  2330  00D5                     	ds	4
  2331  00D9                     _VarLED1:	
  2332  00D9                     	ds	4
  2333  00DD                     _VarLED2:	
  2334  00DD                     	ds	4
  2335  00E1                     _Dimmer1:	
  2336  00E1                     	ds	3
  2337  00E4                     _RF1:	
  2338  00E4                     	ds	3
  2339  00E7                     _RFSW1:	
  2340  00E7                     	ds	1
  2341  00E8                     _RFSW2:	
  2342  00E8                     	ds	1
  2343                           
  2344                           	psect	bssBANK2
  2345  0120                     __pbssBANK2:	
  2346  0120                     _DimmerLights1:	
  2347  0120                     	ds	14
  2348  012E                     _DimmerLights2:	
  2349  012E                     	ds	14
  2350  013C                     _Temp1:	
  2351  013C                     	ds	14
  2352  014A                     _Buz1:	
  2353  014A                     	ds	12
  2354  0156                     _Sw1:	
  2355  0156                     	ds	9
  2356  015F                     _Sw2:	
  2357  015F                     	ds	9
  2358  0168                     _PF1:	
  2359  0168                     	ds	8
  2360                           
  2361                           	psect	bssBANK3
  2362  01C0                     __pbssBANK3:	
  2363  01C0                     _VarTMain:	
  2364  01C0                     	ds	16
  2365                           
  2366                           	psect	dataBANK3
  2367  01A0                     __pdataBANK3:	
  2368  01A0                     _VarProduct:	
  2369  01A0                     	ds	32
  2370                           
  2371                           	psect	bssBANK4
  2372  0220                     __pbssBANK4:	
  2373  0220                     _VarMemory:	
  2374  0220                     	ds	37
  2375                           
  2376                           	psect	bssBANK5
  2377  02A0                     __pbssBANK5:	
  2378  02A0                     _Load1:	
  2379  02A0                     	ds	71
  2380                           
  2381                           	psect	clrtext
  2382  22EA                     clear_ram0:	
  2383                           ;	Called with FSR0 containing the base address, and
  2384                           ;	WREG with the size to clear
  2385                           
  2386  22EA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2387  22EB                     clrloop0:	
  2388  22EB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2389  22EC  3101               	addfsr 0,1
  2390  22ED  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2391  22EE  2AEB               	goto	clrloop0	;have we reached the end yet?
  2392  22EF  3400               	retlw	0	;all done for this memory range, return
  2393                           
  2394                           	psect	inittext
  2395  22E4                     init_ram:	
  2396  22E4  00FE               	movwf	126
  2397  22E5                     initloop:	
  2398  22E5  0012               	moviw fsr0++
  2399  22E6  001E               	movwi fsr1++
  2400  22E7  0BFE               	decfsz	126,f
  2401  22E8  2AE5               	goto	initloop
  2402  22E9  3400               	retlw	0
  2403                           
  2404                           	psect	cstackCOMMON
  2405  0071                     __pcstackCOMMON:	
  2406  0071                     ?_CC2500_WriteByte:	
  2407  0071                     ?_CC2500_WriteCommand:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0071                     ?_CC2500_ReadStatus:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0071                     ?_CC2500_ReadByte:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0071                     ?_CC2500_PowerRST:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0071                     ?_CC2500_InitSetREG:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0071                     ?_CC2500_InitPATable:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0071                     ?_CC2500_ClearTXFIFO:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0071                     ?_CC2500_ClearRXFIFO:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0071                     ?_CC2500_FrequencyCabr:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0071                     ?_CC2500_SIDLEMode:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0071                     ?_DlyOff_Initialization:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0071                     ?_DlyOff_Main:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0071                     ?_setTxData:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0071                     ?_setDimmerLights_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0071                     ?_Dimmer_Initialization:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0071                     ?_setLoad_GO:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0071                     ?_setDimmerLights_Main:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0071                     ?_setDimmerLights_ERROR:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0071                     ?_setLoad_Count:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0071                     ?_setLED_Initialization:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0071                     ?_setLED_Main:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0071                     ?_MainT_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0071                     ?_Mcu_Initialization:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0071                     ?_Flash_Memory_Initialization:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0071                     ?_Temp_Initialization:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0071                     ?_Load_Initialization:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0071                     ?_PowerFault_Initialization:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0071                     ?_Switch_Initialization:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0071                     ?_RF_Initialization:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0071                     ?_getLoad_AD:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0071                     ?_getTemp_AD:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0071                     ?_getPowerFault_AD:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0071                     ?_MainT:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0071                     ?_Flash_Memory_Main:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0071                     ?_Temp_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0071                     ?_Load_Main:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0071                     ?_PowerFault_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0071                     ?_Switch_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0071                     ?_RF_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0071                     ?_setTemp_Enable:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0071                     ?_setLoad_Enable:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0071                     ?_setSw_Enable:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0071                     ?_IO_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0071                     ?_TMR0_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0071                     ?_ADC_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0071                     ?_INT_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0071                     ?_IOC_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0071                     ?_IOC_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0071                     ??_IOC_ISR:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0071                     ?_TMR0_ISR:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0071                     ?_INT_ISR:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0071                     ?_Flash_Memory_Write:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0071                     ?_Flash_Memory_Modify:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0071                     ?_setLoad_AH_AL_Restore:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0071                     ?_setLoad_Exceptions:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0071                     ?_setTemp_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0071                     ?_setTemp_Main:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0071                     ?_setOverTemp_Exceptions:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0071                     ?_setPowerFault_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0071                     ?_setPowerFault_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0071                     ?_setPowerFault_Exceptions:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0071                     ?_setRF_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0071                     ?_setRF_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0071                     ?_getRxData:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0071                     ?_RF_RxDisable:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0071                     ?_setLog_Code:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0071                     ?_setControl_Lights_Table:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0071                     ?_setRFSW_Control:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0071                     ?_setRFSW_AdjControl:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0071                     ?_setRF_DimmerValue:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0071                     ?_setSw_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0071                     ?_setSw_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0071                     ?_Sw_DimmerOnFunc:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0071                     ?_Sw_DimmerAdjFunc:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0071                     ?_Sw_DimmerOffFunc:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0071                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0071                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0071                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0071                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0071                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0071                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0071                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0071                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0071                     ?_DimmerLightsPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0071                     ?_DimmerLights_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0071                     ?_DimmerLights_Close:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0071                     ?_DimmerLights_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0071                     ?_DimmerLights_Exceptions:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0071                     ?_setDimmerLights_AdjRF:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0071                     ?_LedPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0071                     ?_LED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0071                     ?_LED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0071                     ?_main:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0071                     ?_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0071                     ?_setDimmerReClock:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0071                     ??_setDimmerReClock:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0071                     ?_setINT_GO:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0071                     ?_Flash_Memory_Unlock:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0071                     ?_Flash_Memory_Erasing:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0071                     ?_RfPointSelect:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0071                     ?_RfSWPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0071                     ?_TouchPower:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0071                     ?_SwPointSelect:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0071                     ?i1_setLoad_StatusOff:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0071                     ?i1_RfPointSelect:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0071                     ??i1_RfPointSelect:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0071                     ?_DelayTimejudge:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0071                     ?_getDimmerLights_StatusFlag:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0071                     ?_getPercentValue:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0071                     ?_Flash_Memory_Read:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0071                     ?_getTemp_Safe:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0071                     ?_getPF_Safe:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0071                     ?_setPercentValue:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0071                     ?_getLoad_Safe:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0071                     setRF_Initialization@rf:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0071                     i1setLoad_StatusOff@command:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0x0
  2757  0071                     	ds	1
  2758  0072                     ??i1_setLoad_StatusOff:	
  2759  0072                     i1setLoad_StatusOff@lights:	
  2760                           ; 0 bytes @ 0x1
  2761                           
  2762  0072                     i1RfPointSelect@rf:	
  2763                           ; 1 bytes @ 0x1
  2764                           
  2765                           
  2766                           ; 1 bytes @ 0x1
  2767  0072                     	ds	1
  2768  0073                     ??_TMR0_ISR:	
  2769  0073                     ?_setRF_ReceiveGO:	
  2770                           ; 0 bytes @ 0x2
  2771                           
  2772  0073                     setRF_ReceiveGO@command:	
  2773                           ; 0 bytes @ 0x2
  2774                           
  2775                           
  2776                           ; 1 bytes @ 0x2
  2777  0073                     	ds	1
  2778  0074                     ??_setRF_ReceiveGO:	
  2779  0074                     setRF_ReceiveGO@rf:	
  2780                           ; 0 bytes @ 0x3
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x3
  2784  0074                     	ds	1
  2785  0075                     ??_INT_ISR:	
  2786                           
  2787                           ; 0 bytes @ 0x4
  2788  0075                     	ds	2
  2789  0077                     ??_ISR:	
  2790                           
  2791                           ; 0 bytes @ 0x6
  2792  0077                     	ds	1
  2793                           
  2794                           	psect	cstackBANK0
  2795  0020                     __pcstackBANK0:	
  2796  0020                     ??_CC2500_WriteByte:	
  2797  0020                     ??_CC2500_ReadByte:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ?_DelayTime_1us:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_DelayTimejudge:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_Dimmer_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_getDimmerLights_StatusFlag:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_setLoad_GO:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ?_setLoad_StatusOff:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_setLoad_Count:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ?_setLoad_StatusOn:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_MainT_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_setTemp_Enable:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_setLoad_Enable:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_IO_Set:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_TMR0_Set:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_ADC_Set:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_INT_Set:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_IOC_Set:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_Flash_Memory_Read:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Flash_Memory_Write:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_setLoad_AH_AL_Restore:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_getTemp_Safe:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_getPF_Safe:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_setTemp_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_setPowerFault_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_setRF_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_Buzzer_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Buzzer_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_DelayOffPointSelect:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_DimmerLightsPointSelect:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_LedPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_setINT_GO:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_Flash_Memory_Unlock:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Erasing:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_getLoad_Safe:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_RfPointSelect:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_RfSWPointSelect:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_TouchPower:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_SwPointSelect:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ?_getAD:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ?___wmul:	
  2915                           ; 2 bytes @ 0x0
  2916                           
  2917  0020                     ?___lwdiv:	
  2918                           ; 2 bytes @ 0x0
  2919                           
  2920  0020                     ?___ftpack:	
  2921                           ; 2 bytes @ 0x0
  2922                           
  2923  0020                     setINT_GO@command:	
  2924                           ; 3 bytes @ 0x0
  2925                           
  2926  0020                     getAD@adcon1:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0020                     setLoad_Enable@command:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     setLoad_GO@command:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0020                     setLoad_StatusOn@command:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0020                     setLoad_StatusOff@command:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0020                     setTemp_Enable@command:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0020                     DelayTime_1us@count:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0020                     ___wmul@multiplier:	
  2948                           ; 2 bytes @ 0x0
  2949                           
  2950  0020                     ___lwdiv@divisor:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     ___ftpack@arg:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956                           
  2957                           ; 3 bytes @ 0x0
  2958  0020                     	ds	1
  2959  0021                     ??_setLoad_StatusOff:	
  2960  0021                     ??_setLoad_StatusOn:	
  2961                           ; 0 bytes @ 0x1
  2962                           
  2963  0021                     ??_Mcu_Initialization:	
  2964                           ; 0 bytes @ 0x1
  2965                           
  2966  0021                     ??_Temp_Initialization:	
  2967                           ; 0 bytes @ 0x1
  2968                           
  2969  0021                     ??_PowerFault_Initialization:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972  0021                     ??_RF_Initialization:	
  2973                           ; 0 bytes @ 0x1
  2974                           
  2975  0021                     CC2500_WriteByte@loop_a:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978  0021                     CC2500_ReadByte@loop_b:	
  2979                           ; 1 bytes @ 0x1
  2980                           
  2981  0021                     DelayOffPointSelect@sw:	
  2982                           ; 1 bytes @ 0x1
  2983                           
  2984  0021                     DelayTimejudge@i:	
  2985                           ; 1 bytes @ 0x1
  2986                           
  2987  0021                     DimmerLightsPointSelect@lights:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0021                     getDimmerLights_StatusFlag@Status:	
  2991                           ; 1 bytes @ 0x1
  2992                           
  2993  0021                     LedPointSelect@led:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     Flash_Memory_Read@i:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     Flash_Memory_Write@i:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     setLoad_Count@command:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     setLoad_StatusOn@lights:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     setLoad_StatusOff@lights:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     setLoad_AH_AL_Restore@i:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     RfPointSelect@rf:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     RfSWPointSelect@sw:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     SwPointSelect@sw:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023                           
  3024                           ; 1 bytes @ 0x1
  3025  0021                     	ds	1
  3026  0022                     ??_CC2500_WriteCommand:	
  3027  0022                     ??_CC2500_ReadStatus:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0022                     ?_setRF_RxStatus:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0022                     ??_DelayTime_1us:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0022                     ?_CC2500_WriteREG:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ??_DlyOff_Initialization:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ?_setSw_Status:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_setRFSW_Status:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ?_setDimmerLights_Trigger:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setDimmerLights_Switch:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ??_setTxData:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ??_setDimmerLights_Initialization:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setDimmerLights_TriggerERROR:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ?_setLED:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_setLED_Main:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ??_Load_Initialization:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_setSw_Enable:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ?_setRF_Enable:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ?_setDimmerLights_AdjGo:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_TriggerAdj:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setDimmerLights_Clear:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ?_setRF_Learn:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     CC2500_WriteREG@value:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     DlyOff_Initialization@sw:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     DelayTimejudge@value:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     _getDimmerLights_StatusFlag$1840:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setDimmerLights_TriggerERROR@command:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setDimmerLights_Switch@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     setDimmerLights_AdjGo@command:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setDimmerLights_Trigger@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setDimmerLights_TriggerAdj@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setDimmerLights_Clear@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setLED@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     Flash_Memory_Read@address:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setRF_Learn@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setRF_RxStatus@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setRF_Enable@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setRFSW_Status@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setSw_Enable@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setSw_Status@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     DelayTime_1us@i:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     ___wmul@multiplicand:	
  3148                           ; 2 bytes @ 0x2
  3149                           
  3150  0022                     ___lwdiv@dividend:	
  3151                           ; 2 bytes @ 0x2
  3152                           
  3153                           
  3154                           ; 2 bytes @ 0x2
  3155  0022                     	ds	1
  3156  0023                     ??_setRF_RxStatus:	
  3157  0023                     ??_CC2500_WriteREG:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_setSw_Status:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_setRFSW_Status:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_setDimmerLights_Trigger:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setDimmerLights_Switch:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_setDimmerLights_TriggerERROR:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setLED:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_setRF_Enable:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_DelayOff_Initialization:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ?_setDelayOff_GO:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_DimmerLights_Close:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_AdjGo:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_setDimmerLights_TriggerAdj:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_setDimmerLights_Clear:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_getAD:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     ??_setRF_Learn:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     CC2500_WriteCommand@command:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0023                     CC2500_ReadStatus@status_addr:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setDelayOff_GO@command:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     setDimmerLights_Initialization@lights:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     setDimmerLights_TriggerERROR@lights:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     setDimmerLights_Switch@lights:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setDimmerLights_AdjGo@lights:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     setDimmerLights_Trigger@lights:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setDimmerLights_TriggerAdj@lights:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     setDimmerLights_Clear@lights:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     setLED@led:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     getAD@adcon0:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     Flash_Memory_Read@ret:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setRF_Learn@rf:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     setRF_RxStatus@rf:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     setTxData@rf:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setRF_Enable@rf:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     setRFSW_Status@sw:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     setSw_Status@sw:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     ___ftpack@exp:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265                           
  3266                           ; 1 bytes @ 0x3
  3267  0023                     	ds	1
  3268  0024                     ??_CC2500_ClearTXFIFO:	
  3269  0024                     ??_CC2500_ClearRXFIFO:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_CC2500_SIDLEMode:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ?_setDimmerLights:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_setDimmerLights_ERROR:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_setLED_Initialization:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_getLoad_AD:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_getTemp_AD:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_getPowerFault_AD:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_Flash_Memory_Modify:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_RF_RxDisable:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_setSw_Initialization:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_Sw_DimmerAdjFunc:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_CC2500_TxData:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_CC2500_RxData:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??_DimmerLights_Initialization:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     ??___wmul:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     ??___lwdiv:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0024                     CC2500_WriteREG@w_addr:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0024                     setDelayOff_GO@value:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setDimmerLights@status:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     setLED_Initialization@led:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     setLED_Main@led:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     RF_RxDisable@rf:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     setSw_Initialization@sw:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     Sw_DimmerAdjFunc@sw:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     ___ftpack@sign:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0024                     DelayTime_1us@j:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0024                     ___wmul@product:	
  3351                           ; 2 bytes @ 0x4
  3352                           
  3353                           
  3354                           ; 2 bytes @ 0x4
  3355  0024                     	ds	1
  3356  0025                     ??_CC2500_InitSetREG:	
  3357  0025                     ??_CC2500_InitPATable:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_setDimmerLights:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_Switch_Initialization:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??___ftpack:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     ??_setDelayOff_GO:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     ??_LED_Initialization:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     ??_LED_Main:	
  3376                           ; 0 bytes @ 0x5
  3377                           
  3378  0025                     CC2500_TxData@loop_e:	
  3379                           ; 0 bytes @ 0x5
  3380                           
  3381  0025                     CC2500_RxData@loop_f:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0025                     setDimmerLights_ERROR@lights:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387  0025                     ___lwdiv@quotient:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390                           
  3391                           ; 2 bytes @ 0x5
  3392  0025                     	ds	1
  3393  0026                     ??_CC2500_PowerRST:	
  3394  0026                     ??_CC2500_FrequencyCabr:	
  3395                           ; 0 bytes @ 0x6
  3396                           
  3397  0026                     ?_setBuz:	
  3398                           ; 0 bytes @ 0x6
  3399                           
  3400  0026                     CC2500_InitSetREG@temp1:	
  3401                           ; 0 bytes @ 0x6
  3402                           
  3403  0026                     CC2500_InitPATable@temp:	
  3404                           ; 1 bytes @ 0x6
  3405                           
  3406  0026                     setDimmerLights@lights:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0026                     Flash_Memory_Modify@i:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412  0026                     setBuz@time:	
  3413                           ; 1 bytes @ 0x6
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0x6
  3417  0026                     	ds	1
  3418  0027                     ??_Flash_Memory_Main:	
  3419  0027                     CC2500_InitSetREG@temp2:	
  3420                           ; 0 bytes @ 0x7
  3421                           
  3422  0027                     CC2500_InitPATable@loop_d:	
  3423                           ; 1 bytes @ 0x7
  3424                           
  3425  0027                     setDelayOff_GO@sw:	
  3426                           ; 1 bytes @ 0x7
  3427                           
  3428  0027                     ___lwdiv@counter:	
  3429                           ; 1 bytes @ 0x7
  3430                           
  3431                           
  3432                           ; 1 bytes @ 0x7
  3433  0027                     	ds	1
  3434  0028                     ??_setBuz:	
  3435  0028                     ?___awtoft:	
  3436                           ; 0 bytes @ 0x8
  3437                           
  3438  0028                     CC2500_InitSetREG@loop_c:	
  3439                           ; 3 bytes @ 0x8
  3440                           
  3441  0028                     getTemp_AD@channel:	
  3442                           ; 1 bytes @ 0x8
  3443                           
  3444  0028                     getPowerFault_AD@channel:	
  3445                           ; 1 bytes @ 0x8
  3446                           
  3447  0028                     ___awtoft@c:	
  3448                           ; 1 bytes @ 0x8
  3449                           
  3450                           
  3451                           ; 2 bytes @ 0x8
  3452  0028                     	ds	1
  3453  0029                     ??_CC2500_PowerOnInitial:	
  3454  0029                     setBuz@count:	
  3455                           ; 0 bytes @ 0x9
  3456                           
  3457  0029                     getLoad_AD@channel:	
  3458                           ; 1 bytes @ 0x9
  3459                           
  3460                           
  3461                           ; 1 bytes @ 0x9
  3462  0029                     	ds	1
  3463  002A                     ??_MainT:	
  3464  002A                     ??_setLog_Code:	
  3465                           ; 0 bytes @ 0xA
  3466                           
  3467  002A                     ??_DimmerLights_Exceptions:	
  3468                           ; 0 bytes @ 0xA
  3469                           
  3470  002A                     DimmerLights_Exceptions@status:	
  3471                           ; 0 bytes @ 0xA
  3472                           
  3473  002A                     getLoad_AD@j:	
  3474                           ; 1 bytes @ 0xA
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0xA
  3478  002A                     	ds	1
  3479  002B                     ??_setLoad_Exceptions:	
  3480  002B                     ??_setOverTemp_Exceptions:	
  3481                           ; 0 bytes @ 0xB
  3482                           
  3483  002B                     ??_setPowerFault_Exceptions:	
  3484                           ; 0 bytes @ 0xB
  3485                           
  3486  002B                     ??___awtoft:	
  3487                           ; 0 bytes @ 0xB
  3488                           
  3489  002B                     getLoad_AD@i:	
  3490                           ; 0 bytes @ 0xB
  3491                           
  3492  002B                     setLog_Code@rf:	
  3493                           ; 1 bytes @ 0xB
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0xB
  3497  002B                     	ds	1
  3498  002C                     setLoad_Exceptions@command:	
  3499  002C                     setOverTemp_Exceptions@command:	
  3500                           ; 1 bytes @ 0xC
  3501                           
  3502  002C                     setPowerFault_Exceptions@command:	
  3503                           ; 1 bytes @ 0xC
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0xC
  3507  002C                     	ds	1
  3508  002D                     ??_Load_Main:	
  3509  002D                     ??_setTemp_Main:	
  3510                           ; 0 bytes @ 0xD
  3511                           
  3512  002D                     ??_setPowerFault_Main:	
  3513                           ; 0 bytes @ 0xD
  3514                           
  3515  002D                     ___awtoft@sign:	
  3516                           ; 0 bytes @ 0xD
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0xD
  3520  002D                     	ds	1
  3521  002E                     ?___ftdiv:	
  3522  002E                     ?___ftmul:	
  3523                           ; 3 bytes @ 0xE
  3524                           
  3525  002E                     ___ftdiv@f2:	
  3526                           ; 3 bytes @ 0xE
  3527                           
  3528  002E                     ___ftmul@f1:	
  3529                           ; 3 bytes @ 0xE
  3530                           
  3531                           
  3532                           ; 3 bytes @ 0xE
  3533  002E                     	ds	1
  3534  002F                     ??_PowerFault_Main:	
  3535                           
  3536                           ; 0 bytes @ 0xF
  3537  002F                     	ds	1
  3538  0030                     ??_Temp_Main:	
  3539                           
  3540                           ; 0 bytes @ 0x10
  3541  0030                     	ds	1
  3542  0031                     Load_Main@i:	
  3543  0031                     ___ftdiv@f1:	
  3544                           ; 1 bytes @ 0x11
  3545                           
  3546  0031                     ___ftmul@f2:	
  3547                           ; 3 bytes @ 0x11
  3548                           
  3549                           
  3550                           ; 3 bytes @ 0x11
  3551  0031                     	ds	3
  3552  0034                     ??___ftdiv:	
  3553  0034                     ??___ftmul:	
  3554                           ; 0 bytes @ 0x14
  3555                           
  3556                           
  3557                           ; 0 bytes @ 0x14
  3558  0034                     	ds	4
  3559  0038                     ___ftdiv@cntr:	
  3560  0038                     ___ftmul@exp:	
  3561                           ; 1 bytes @ 0x18
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0x18
  3565  0038                     	ds	1
  3566  0039                     ___ftdiv@f3:	
  3567  0039                     ___ftmul@f3_as_product:	
  3568                           ; 3 bytes @ 0x19
  3569                           
  3570                           
  3571                           ; 3 bytes @ 0x19
  3572  0039                     	ds	3
  3573  003C                     ___ftdiv@exp:	
  3574  003C                     ___ftmul@cntr:	
  3575                           ; 1 bytes @ 0x1C
  3576                           
  3577                           
  3578                           ; 1 bytes @ 0x1C
  3579  003C                     	ds	1
  3580  003D                     ___ftdiv@sign:	
  3581  003D                     ___ftmul@sign:	
  3582                           ; 1 bytes @ 0x1D
  3583                           
  3584                           
  3585                           ; 1 bytes @ 0x1D
  3586  003D                     	ds	1
  3587  003E                     ?___ftadd:	
  3588  003E                     ___ftadd@f1:	
  3589                           ; 3 bytes @ 0x1E
  3590                           
  3591                           
  3592                           ; 3 bytes @ 0x1E
  3593  003E                     	ds	3
  3594  0041                     ___ftadd@f2:	
  3595                           
  3596                           ; 3 bytes @ 0x21
  3597  0041                     	ds	3
  3598  0044                     ??___ftadd:	
  3599                           
  3600                           ; 0 bytes @ 0x24
  3601  0044                     	ds	4
  3602  0048                     ___ftadd@sign:	
  3603                           
  3604                           ; 1 bytes @ 0x28
  3605  0048                     	ds	1
  3606  0049                     ___ftadd@exp2:	
  3607                           
  3608                           ; 1 bytes @ 0x29
  3609  0049                     	ds	1
  3610  004A                     ___ftadd@exp1:	
  3611                           
  3612                           ; 1 bytes @ 0x2A
  3613  004A                     	ds	1
  3614  004B                     ?___fttol:	
  3615  004B                     ___fttol@f1:	
  3616                           ; 4 bytes @ 0x2B
  3617                           
  3618                           
  3619                           ; 3 bytes @ 0x2B
  3620  004B                     	ds	4
  3621  004F                     ??___fttol:	
  3622                           
  3623                           ; 0 bytes @ 0x2F
  3624  004F                     	ds	4
  3625  0053                     ___fttol@sign1:	
  3626                           
  3627                           ; 1 bytes @ 0x33
  3628  0053                     	ds	1
  3629  0054                     ___fttol@lval:	
  3630                           
  3631                           ; 4 bytes @ 0x34
  3632  0054                     	ds	4
  3633  0058                     ___fttol@exp1:	
  3634                           
  3635                           ; 1 bytes @ 0x38
  3636  0058                     	ds	1
  3637  0059                     ??_getPercentValue:	
  3638  0059                     ??_setPercentValue:	
  3639                           ; 0 bytes @ 0x39
  3640                           
  3641  0059                     setPercentValue@value:	
  3642                           ; 0 bytes @ 0x39
  3643                           
  3644                           
  3645                           ; 1 bytes @ 0x39
  3646  0059                     	ds	1
  3647  005A                     setPercentValue@i:	
  3648                           
  3649                           ; 3 bytes @ 0x3A
  3650  005A                     	ds	1
  3651  005B                     getPercentValue@value:	
  3652                           
  3653                           ; 1 bytes @ 0x3B
  3654  005B                     	ds	1
  3655  005C                     getPercentValue@i:	
  3656                           
  3657                           ; 3 bytes @ 0x3C
  3658  005C                     	ds	1
  3659  005D                     ?_setRF_DimmerLights:	
  3660  005D                     ??_Flash_Memory_Initialization:	
  3661                           ; 0 bytes @ 0x3D
  3662                           
  3663  005D                     setRF_DimmerLights@on:	
  3664                           ; 0 bytes @ 0x3D
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x3D
  3668  005D                     	ds	1
  3669  005E                     ??_setRF_DimmerLights:	
  3670  005E                     Flash_Memory_Initialization@i:	
  3671                           ; 0 bytes @ 0x3E
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0x3E
  3675  005E                     	ds	1
  3676  005F                     ??_setDimmerLights_AdjRF:	
  3677                           
  3678                           ; 0 bytes @ 0x3F
  3679  005F                     	ds	1
  3680  0060                     setDimmerLights_AdjRF@lights:	
  3681  0060                     setRF_DimmerLights@status:	
  3682                           ; 1 bytes @ 0x40
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x40
  3686  0060                     	ds	1
  3687  0061                     ??_setRF_DimmerValue:	
  3688  0061                     setRF_DimmerLights@lights:	
  3689                           ; 0 bytes @ 0x41
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x41
  3693  0061                     	ds	1
  3694  0062                     ??_DlyOff_Main:	
  3695  0062                     ?_setDimmerLights_Adj:	
  3696                           ; 0 bytes @ 0x42
  3697                           
  3698  0062                     ??_setRFSW_Control:	
  3699                           ; 0 bytes @ 0x42
  3700                           
  3701  0062                     ??_Sw_DimmerOnFunc:	
  3702                           ; 0 bytes @ 0x42
  3703                           
  3704  0062                     ??_Sw_DimmerOffFunc:	
  3705                           ; 0 bytes @ 0x42
  3706                           
  3707  0062                     setDimmerLights_Adj@status:	
  3708                           ; 0 bytes @ 0x42
  3709                           
  3710  0062                     Sw_DimmerOnFunc@Idle:	
  3711                           ; 1 bytes @ 0x42
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x42
  3715  0062                     	ds	1
  3716  0063                     ??_setDimmerLights_Adj:	
  3717  0063                     setRFSW_Control@sw:	
  3718                           ; 0 bytes @ 0x43
  3719                           
  3720  0063                     setRF_DimmerValue@lights:	
  3721                           ; 1 bytes @ 0x43
  3722                           
  3723  0063                     Sw_DimmerOnFunc@sw:	
  3724                           ; 1 bytes @ 0x43
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x43
  3728  0063                     	ds	1
  3729  0064                     ??_setRFSW_AdjControl:	
  3730  0064                     DlyOff_Main@sw:	
  3731                           ; 0 bytes @ 0x44
  3732                           
  3733  0064                     setDimmerLights_Adj@lights:	
  3734                           ; 1 bytes @ 0x44
  3735                           
  3736  0064                     Sw_DimmerOffFunc@sw:	
  3737                           ; 1 bytes @ 0x44
  3738                           
  3739                           
  3740                           ; 1 bytes @ 0x44
  3741  0064                     	ds	1
  3742  0065                     ??_setDimmerLights_Main:	
  3743  0065                     ??_setSw_Main:	
  3744                           ; 0 bytes @ 0x45
  3745                           
  3746  0065                     ??_DelayOff_Main:	
  3747                           ; 0 bytes @ 0x45
  3748                           
  3749  0065                     setDimmerLights_Main@clear:	
  3750                           ; 0 bytes @ 0x45
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x45
  3754  0065                     	ds	1
  3755  0066                     setDimmerLights_Main@lights:	
  3756  0066                     setRFSW_AdjControl@sw:	
  3757                           ; 1 bytes @ 0x46
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x46
  3761  0066                     	ds	1
  3762  0067                     ??_setControl_Lights_Table:	
  3763  0067                     ??_DimmerLights_Main:	
  3764                           ; 0 bytes @ 0x47
  3765                           
  3766  0067                     setControl_Lights_Table@rf:	
  3767                           ; 0 bytes @ 0x47
  3768                           
  3769  0067                     _setSw_Main$4758:	
  3770                           ; 1 bytes @ 0x47
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0x47
  3774  0067                     	ds	1
  3775  0068                     ??_getRxData:	
  3776  0068                     getRxData@rf:	
  3777                           ; 0 bytes @ 0x48
  3778                           
  3779  0068                     _setSw_Main$4759:	
  3780                           ; 1 bytes @ 0x48
  3781                           
  3782                           
  3783                           ; 1 bytes @ 0x48
  3784  0068                     	ds	1
  3785  0069                     ??_setRF_Main:	
  3786  0069                     setSw_Main@sw:	
  3787                           ; 0 bytes @ 0x49
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x49
  3791  0069                     	ds	1
  3792  006A                     ??_Switch_Main:	
  3793  006A                     setRF_Main@rf:	
  3794                           ; 0 bytes @ 0x4A
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x4A
  3798  006A                     	ds	1
  3799  006B                     _setRF_Main$4404:	
  3800                           
  3801                           ; 1 bytes @ 0x4B
  3802  006B                     	ds	1
  3803  006C                     ??_RF_Main:	
  3804  006C                     ??_main:	
  3805                           ; 0 bytes @ 0x4C
  3806                           
  3807                           
  3808                           	psect	maintext
  3809  0791                     __pmaintext:	
  3810                           ; 0 bytes @ 0x4C
  3811 ;;
  3812 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3813 ;;
  3814 ;; *************** function _main *****************
  3815 ;; Defined at:
  3816 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;		None               void
  3823 ;; Registers used:
  3824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 17F/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels required when called:   14
  3836 ;; This function calls:
  3837 ;;		_Buzzer_Initialization
  3838 ;;		_Buzzer_Main
  3839 ;;		_CC2500_PowerOnInitial
  3840 ;;		_DelayOff_Initialization
  3841 ;;		_DelayOff_Main
  3842 ;;		_DimmerLights_Initialization
  3843 ;;		_DimmerLights_Main
  3844 ;;		_Flash_Memory_Initialization
  3845 ;;		_Flash_Memory_Main
  3846 ;;		_LED_Initialization
  3847 ;;		_LED_Main
  3848 ;;		_Load_Initialization
  3849 ;;		_Load_Main
  3850 ;;		_MainT
  3851 ;;		_MainT_Initialization
  3852 ;;		_Mcu_Initialization
  3853 ;;		_PowerFault_Initialization
  3854 ;;		_PowerFault_Main
  3855 ;;		_RF_Initialization
  3856 ;;		_RF_Main
  3857 ;;		_Switch_Initialization
  3858 ;;		_Switch_Main
  3859 ;;		_Temp_Initialization
  3860 ;;		_Temp_Main
  3861 ;;		_getLoad_AD
  3862 ;;		_getPowerFault_AD
  3863 ;;		_getTemp_AD
  3864 ;; This function is called by:
  3865 ;;		Startup code after reset
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _main
  3871  0791                     _main:	
  3872                           
  3873                           ;main.c: 9: MainT_Initialization();
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3877  0791  31A5  250E  3187   	fcall	_MainT_Initialization
  3878                           
  3879                           ;main.c: 10: Mcu_Initialization();
  3880  0794  31A5  25A4  3187   	fcall	_Mcu_Initialization
  3881                           
  3882                           ;main.c: 11: Flash_Memory_Initialization();
  3883  0797  318B  237C  3187   	fcall	_Flash_Memory_Initialization
  3884                           
  3885                           ;main.c: 12: LED_Initialization();
  3886  079A  31A3  23D0  3187   	fcall	_LED_Initialization
  3887                           
  3888                           ;main.c: 13: Buzzer_Initialization();
  3889  079D  31A3  2348  3187   	fcall	_Buzzer_Initialization
  3890                           
  3891                           ;main.c: 15: ;;
  3892                           ;main.c: 16: Temp_Initialization();
  3893  07A0  31A2  22BF  3187   	fcall	_Temp_Initialization
  3894                           
  3895                           ;main.c: 17: Load_Initialization();
  3896  07A3  31A3  23E8  3187   	fcall	_Load_Initialization
  3897                           
  3898                           ;main.c: 18: PowerFault_Initialization();
  3899  07A6  31A2  22B9  3187   	fcall	_PowerFault_Initialization
  3900                           
  3901                           ;main.c: 19: DelayOff_Initialization();
  3902  07A9  31A3  230C  3187   	fcall	_DelayOff_Initialization
  3903                           
  3904                           ;main.c: 21: DimmerLights_Initialization();
  3905  07AC  31A5  2537  3187   	fcall	_DimmerLights_Initialization
  3906                           
  3907                           ;main.c: 22: ;;
  3908                           ;main.c: 23: ;;
  3909                           ;main.c: 24: ;;
  3910                           ;main.c: 26: Switch_Initialization();
  3911  07AF  31A4  240F  3187   	fcall	_Switch_Initialization
  3912                           
  3913                           ;main.c: 27: RF_Initialization();
  3914  07B2  31A2  22D1  3187   	fcall	_RF_Initialization
  3915                           
  3916                           ;main.c: 28: CC2500_PowerOnInitial();
  3917  07B5  31A5  2522  3187   	fcall	_CC2500_PowerOnInitial
  3918  07B8                     l10198:	
  3919                           ;main.c: 30: while(1)
  3920                           
  3921                           
  3922                           ;main.c: 31: {
  3923                           ;main.c: 32: if(TMain->PowerON)
  3924  07B8  0021               	movlb	1	; select bank1
  3925  07B9  086A               	movf	_TMain^(0+128),w
  3926  07BA  0086               	movwf	6
  3927  07BB  3001               	movlw	1	; select bank2/3
  3928  07BC  0087               	movwf	7
  3929  07BD  1C01               	btfss	1,0
  3930  07BE  2FCE               	goto	l10202
  3931                           
  3932                           ;main.c: 33: {
  3933                           ;main.c: 35: ;;
  3934                           ;main.c: 39: getLoad_AD(0x05);
  3935  07BF  3005               	movlw	5
  3936  07C0  3196  26C2  3187   	fcall	_getLoad_AD
  3937                           
  3938                           ;main.c: 43: getTemp_AD(0x09);
  3939  07C3  3009               	movlw	9
  3940  07C4  3190  2050  3187   	fcall	_getTemp_AD
  3941                           
  3942                           ;main.c: 47: getPowerFault_AD(0x11);
  3943  07C7  3011               	movlw	17
  3944  07C8  319B  2332  3187   	fcall	_getPowerFault_AD
  3945                           
  3946                           ;main.c: 59: Buzzer_Main();
  3947  07CB  3197  2758  3187   	fcall	_Buzzer_Main
  3948  07CE                     l10202:	
  3949                           
  3950                           ;main.c: 61: }
  3951                           ;main.c: 63: if(TMain->T0_Timerout)
  3952  07CE  0021               	movlb	1	; select bank1
  3953  07CF  086A               	movf	_TMain^(0+128),w
  3954  07D0  0086               	movwf	6
  3955  07D1  3001               	movlw	1	; select bank2/3
  3956  07D2  0087               	movwf	7
  3957  07D3  1C81               	btfss	1,1
  3958  07D4  2FB8               	goto	l10198
  3959                           
  3960                           ;main.c: 64: {
  3961                           ;main.c: 65: TMain->T0_Timerout = 0;
  3962  07D5  086A               	movf	_TMain^(0+128),w
  3963  07D6  0086               	movwf	6
  3964  07D7  3001               	movlw	1	; select bank2/3
  3965  07D8  0087               	movwf	7
  3966  07D9  1081               	bcf	1,1
  3967                           
  3968                           ;main.c: 66: MainT();
  3969  07DA  3192  22FA  3187   	fcall	_MainT
  3970                           
  3971                           ;main.c: 67: if(TMain->PowerON)
  3972  07DD  0021               	movlb	1	; select bank1
  3973  07DE  086A               	movf	_TMain^(0+128),w
  3974  07DF  0086               	movwf	6
  3975  07E0  3001               	movlw	1	; select bank2/3
  3976  07E1  0087               	movwf	7
  3977  07E2  1C01               	btfss	1,0
  3978  07E3  2FB8               	goto	l10198
  3979                           
  3980                           ;main.c: 68: {
  3981                           ;main.c: 69: Flash_Memory_Main();
  3982  07E4  319C  2480  3187   	fcall	_Flash_Memory_Main
  3983                           
  3984                           ;main.c: 71: LED_Main();
  3985  07E7  31A3  23DC  3187   	fcall	_LED_Main
  3986                           
  3987                           ;main.c: 73: ;;
  3988                           ;main.c: 74: Temp_Main();
  3989  07EA  31A2  22C2  3187   	fcall	_Temp_Main
  3990                           
  3991                           ;main.c: 75: Load_Main();
  3992  07ED  3180  2059  3187   	fcall	_Load_Main
  3993                           
  3994                           ;main.c: 76: PowerFault_Main();
  3995  07F0  31A2  22BC  3187   	fcall	_PowerFault_Main
  3996                           
  3997                           ;main.c: 78: ;;
  3998                           ;main.c: 79: DimmerLights_Main();
  3999  07F3  31A3  2374  3187   	fcall	_DimmerLights_Main
  4000                           
  4001                           ;main.c: 80: Switch_Main();
  4002  07F6  3190  2000  3187   	fcall	_Switch_Main
  4003                           
  4004                           ;main.c: 81: ;;
  4005                           ;main.c: 82: ;;
  4006                           ;main.c: 84: RF_Main();
  4007  07F9  31A2  22D5  3187   	fcall	_RF_Main
  4008                           
  4009                           ;main.c: 85: DelayOff_Main();
  4010  07FC  31A3  2314  3187   	fcall	_DelayOff_Main
  4011  07FF  2FB8               	goto	l10198
  4012  0800                     __end_of_main:	
  4013                           
  4014                           	psect	text1
  4015  1050                     __ptext1:	
  4016 ;; *************** function _getTemp_AD *****************
  4017 ;; Defined at:
  4018 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  channel         1    wreg     unsigned char 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  channel         1    8[BANK0 ] unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;		None               void
  4025 ;; Registers used:
  4026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        5 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    5
  4039 ;; This function calls:
  4040 ;;		_getAD
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _getTemp_AD
  4048  1050                     _getTemp_AD:	
  4049                           
  4050                           ;incstack = 0
  4051                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4052                           ;getTemp_AD@channel stored from wreg
  4053  1050  0020               	movlb	0	; select bank0
  4054  1051  00A8               	movwf	getTemp_AD@channel
  4055                           
  4056                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4057  1052  087D               	movf	_Temp,w
  4058  1053  0086               	movwf	6
  4059  1054  3001               	movlw	1	; select bank2/3
  4060  1055  0087               	movwf	7
  4061  1056  1D01               	btfss	1,2
  4062  1057  0008               	return
  4063                           
  4064                           ;OverTemperature_B1.c: 38: {
  4065                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4066  1058  30F0               	movlw	240
  4067  1059  00A4               	movwf	??_getTemp_AD
  4068  105A  0824               	movf	??_getTemp_AD,w
  4069  105B  00A0               	movwf	getAD@adcon1
  4070  105C  0828               	movf	getTemp_AD@channel,w
  4071  105D  3198  2000  3190   	fcall	_getAD
  4072  1060  087D               	movf	_Temp,w
  4073  1061  3E0A               	addlw	10
  4074  1062  0086               	movwf	6
  4075  1063  3001               	movlw	1	; select bank2/3
  4076  1064  0087               	movwf	7
  4077  1065  0020               	movlb	0	; select bank0
  4078  1066  0820               	movf	?_getAD,w
  4079  1067  3FC0               	movwi [0]fsr1
  4080  1068  0821               	movf	?_getAD+1,w
  4081  1069  3FC1               	movwi [1]fsr1
  4082                           
  4083                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4084  106A  087D               	movf	_Temp,w
  4085  106B  3E0A               	addlw	10
  4086  106C  0086               	movwf	6
  4087  106D  3001               	movlw	1	; select bank2/3
  4088  106E  0087               	movwf	7
  4089  106F  3F40               	moviw [0]fsr1
  4090  1070  00A4               	movwf	??_getTemp_AD
  4091  1071  3F41               	moviw [1]fsr1
  4092  1072  00A5               	movwf	??_getTemp_AD+1
  4093  1073  087D               	movf	_Temp,w
  4094  1074  3E06               	addlw	6
  4095  1075  0086               	movwf	6
  4096  1076  3001               	movlw	1	; select bank2/3
  4097  1077  0087               	movwf	7
  4098  1078  3F40               	moviw [0]fsr1
  4099  1079  00A6               	movwf	??_getTemp_AD+2
  4100  107A  3F41               	moviw [1]fsr1
  4101  107B  00A7               	movwf	??_getTemp_AD+3
  4102  107C  0825               	movf	??_getTemp_AD+1,w
  4103  107D  0227               	subwf	??_getTemp_AD+3,w
  4104  107E  1D03               	skipz
  4105  107F  2882               	goto	u9935
  4106  1080  0824               	movf	??_getTemp_AD,w
  4107  1081  0226               	subwf	??_getTemp_AD+2,w
  4108  1082                     u9935:	
  4109  1082  1803               	skipnc
  4110  1083  2893               	goto	l9946
  4111                           
  4112                           ;OverTemperature_B1.c: 41: {
  4113                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4114  1084  087D               	movf	_Temp,w
  4115  1085  3E0A               	addlw	10
  4116  1086  0086               	movwf	6
  4117  1087  3001               	movlw	1	; select bank2/3
  4118  1088  0087               	movwf	7
  4119  1089  087D               	movf	_Temp,w
  4120  108A  3E06               	addlw	6
  4121  108B  0084               	movwf	4
  4122  108C  3001               	movlw	1	; select bank2/3
  4123  108D  0085               	movwf	5
  4124  108E  3F40               	moviw [0]fsr1
  4125  108F  3F80               	movwi [0]fsr0
  4126  1090  3F41               	moviw [1]fsr1
  4127  1091  3F81               	movwi [1]fsr0
  4128                           
  4129                           ;OverTemperature_B1.c: 43: }
  4130  1092  0008               	return
  4131  1093                     l9946:	
  4132                           
  4133                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4134  1093  087D               	movf	_Temp,w
  4135  1094  3E0A               	addlw	10
  4136  1095  0086               	movwf	6
  4137  1096  3001               	movlw	1	; select bank2/3
  4138  1097  0087               	movwf	7
  4139  1098  3F40               	moviw [0]fsr1
  4140  1099  00A4               	movwf	??_getTemp_AD
  4141  109A  3F41               	moviw [1]fsr1
  4142  109B  00A5               	movwf	??_getTemp_AD+1
  4143  109C  087D               	movf	_Temp,w
  4144  109D  3E08               	addlw	8
  4145  109E  0086               	movwf	6
  4146  109F  3001               	movlw	1	; select bank2/3
  4147  10A0  0087               	movwf	7
  4148  10A1  3F40               	moviw [0]fsr1
  4149  10A2  00A6               	movwf	??_getTemp_AD+2
  4150  10A3  3F41               	moviw [1]fsr1
  4151  10A4  00A7               	movwf	??_getTemp_AD+3
  4152  10A5  0825               	movf	??_getTemp_AD+1,w
  4153  10A6  0227               	subwf	??_getTemp_AD+3,w
  4154  10A7  1D03               	skipz
  4155  10A8  28AB               	goto	u9945
  4156  10A9  0824               	movf	??_getTemp_AD,w
  4157  10AA  0226               	subwf	??_getTemp_AD+2,w
  4158  10AB                     u9945:	
  4159  10AB  1803               	skipnc
  4160  10AC  0008               	return
  4161                           
  4162                           ;OverTemperature_B1.c: 45: {
  4163                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4164  10AD  087D               	movf	_Temp,w
  4165  10AE  3E0A               	addlw	10
  4166  10AF  0086               	movwf	6
  4167  10B0  3001               	movlw	1	; select bank2/3
  4168  10B1  0087               	movwf	7
  4169  10B2  087D               	movf	_Temp,w
  4170  10B3  3E08               	addlw	8
  4171  10B4  0084               	movwf	4
  4172  10B5  3001               	movlw	1	; select bank2/3
  4173  10B6  0085               	movwf	5
  4174  10B7  3F40               	moviw [0]fsr1
  4175  10B8  3F80               	movwi [0]fsr0
  4176  10B9  3F41               	moviw [1]fsr1
  4177  10BA  3F81               	movwi [1]fsr0
  4178  10BB  0008               	return
  4179  10BC                     __end_of_getTemp_AD:	
  4180                           
  4181                           	psect	text2
  4182  1B32                     __ptext2:	
  4183 ;; *************** function _getPowerFault_AD *****************
  4184 ;; Defined at:
  4185 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  channel         1    wreg     unsigned char 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  channel         1    8[BANK0 ] unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;Total ram usage:        5 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    5
  4206 ;; This function calls:
  4207 ;;		_getAD
  4208 ;; This function is called by:
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _getPowerFault_AD
  4215  1B32                     _getPowerFault_AD:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4219                           ;getPowerFault_AD@channel stored from wreg
  4220  1B32  0020               	movlb	0	; select bank0
  4221  1B33  00A8               	movwf	getPowerFault_AD@channel
  4222                           
  4223                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4224  1B34  087B               	movf	_PF,w
  4225  1B35  0086               	movwf	6
  4226  1B36  3001               	movlw	1	; select bank2/3
  4227  1B37  0087               	movwf	7
  4228  1B38  1D81               	btfss	1,3
  4229  1B39  0008               	return
  4230                           
  4231                           ;PowerFault_B1.c: 52: {
  4232                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4233  1B3A  30F0               	movlw	240
  4234  1B3B  00A4               	movwf	??_getPowerFault_AD
  4235  1B3C  0824               	movf	??_getPowerFault_AD,w
  4236  1B3D  00A0               	movwf	getAD@adcon1
  4237  1B3E  0828               	movf	getPowerFault_AD@channel,w
  4238  1B3F  3198  2000  319B   	fcall	_getAD
  4239  1B42  087B               	movf	_PF,w
  4240  1B43  3E03               	addlw	3
  4241  1B44  0086               	movwf	6
  4242  1B45  3001               	movlw	1	; select bank2/3
  4243  1B46  0087               	movwf	7
  4244  1B47  0020               	movlb	0	; select bank0
  4245  1B48  0820               	movf	?_getAD,w
  4246  1B49  3FC0               	movwi [0]fsr1
  4247  1B4A  0821               	movf	?_getAD+1,w
  4248  1B4B  3FC1               	movwi [1]fsr1
  4249                           
  4250                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4251  1B4C  087B               	movf	_PF,w
  4252  1B4D  3E03               	addlw	3
  4253  1B4E  0086               	movwf	6
  4254  1B4F  3001               	movlw	1	; select bank2/3
  4255  1B50  0087               	movwf	7
  4256  1B51  3F40               	moviw [0]fsr1
  4257  1B52  00A4               	movwf	??_getPowerFault_AD
  4258  1B53  3F41               	moviw [1]fsr1
  4259  1B54  00A5               	movwf	??_getPowerFault_AD+1
  4260  1B55  0A7B               	incf	_PF,w
  4261  1B56  0086               	movwf	6
  4262  1B57  3001               	movlw	1	; select bank2/3
  4263  1B58  0087               	movwf	7
  4264  1B59  3F40               	moviw [0]fsr1
  4265  1B5A  00A6               	movwf	??_getPowerFault_AD+2
  4266  1B5B  3F41               	moviw [1]fsr1
  4267  1B5C  00A7               	movwf	??_getPowerFault_AD+3
  4268  1B5D  0825               	movf	??_getPowerFault_AD+1,w
  4269  1B5E  0227               	subwf	??_getPowerFault_AD+3,w
  4270  1B5F  1D03               	skipz
  4271  1B60  2B63               	goto	u9965
  4272  1B61  0824               	movf	??_getPowerFault_AD,w
  4273  1B62  0226               	subwf	??_getPowerFault_AD+2,w
  4274  1B63                     u9965:	
  4275  1B63  1803               	skipnc
  4276  1B64  0008               	return
  4277                           
  4278                           ;PowerFault_B1.c: 55: {
  4279                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4280  1B65  087B               	movf	_PF,w
  4281  1B66  3E03               	addlw	3
  4282  1B67  0086               	movwf	6
  4283  1B68  3001               	movlw	1	; select bank2/3
  4284  1B69  0087               	movwf	7
  4285  1B6A  0A7B               	incf	_PF,w
  4286  1B6B  0084               	movwf	4
  4287  1B6C  3001               	movlw	1	; select bank2/3
  4288  1B6D  0085               	movwf	5
  4289  1B6E  3F40               	moviw [0]fsr1
  4290  1B6F  3F80               	movwi [0]fsr0
  4291  1B70  3F41               	moviw [1]fsr1
  4292  1B71  3F81               	movwi [1]fsr0
  4293  1B72  0008               	return
  4294  1B73                     __end_of_getPowerFault_AD:	
  4295                           
  4296                           	psect	text3
  4297  16C2                     __ptext3:	
  4298 ;; *************** function _getLoad_AD *****************
  4299 ;; Defined at:
  4300 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  channel         1    wreg     unsigned char 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  channel         1    9[BANK0 ] unsigned char 
  4305 ;;  i               1   11[BANK0 ] unsigned char 
  4306 ;;  j               1   10[BANK0 ] unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;		None               void
  4309 ;; Registers used:
  4310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;Total ram usage:        8 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    5
  4323 ;; This function calls:
  4324 ;;		_getAD
  4325 ;; This function is called by:
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _getLoad_AD
  4332  16C2                     _getLoad_AD:	
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4336                           ;getLoad_AD@channel stored from wreg
  4337  16C2  0020               	movlb	0	; select bank0
  4338  16C3  00A9               	movwf	getLoad_AD@channel
  4339                           
  4340                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4341  16C4  01AB               	clrf	getLoad_AD@i
  4342  16C5  01AA               	clrf	getLoad_AD@j
  4343                           
  4344                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4345  16C6  086E               	movf	_Load,w
  4346  16C7  0086               	movwf	6
  4347  16C8  3002               	movlw	2	; select bank4/5
  4348  16C9  0087               	movwf	7
  4349  16CA  1E01               	btfss	1,4
  4350  16CB  0008               	return
  4351                           
  4352                           ;OverLoad_B1.c: 20: {
  4353                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4354  16CC  30C0               	movlw	192
  4355  16CD  00A4               	movwf	??_getLoad_AD
  4356  16CE  0824               	movf	??_getLoad_AD,w
  4357  16CF  00A0               	movwf	getAD@adcon1
  4358  16D0  0829               	movf	getLoad_AD@channel,w
  4359  16D1  3198  2000  3196   	fcall	_getAD
  4360  16D4  0020               	movlb	0	; select bank0
  4361  16D5  086E               	movf	_Load,w
  4362  16D6  3E32               	addlw	50
  4363  16D7  0086               	movwf	6
  4364  16D8  3002               	movlw	2	; select bank4/5
  4365  16D9  0087               	movwf	7
  4366  16DA  0820               	movf	?_getAD,w
  4367  16DB  3FC0               	movwi [0]fsr1
  4368  16DC  0821               	movf	?_getAD+1,w
  4369  16DD  3FC1               	movwi [1]fsr1
  4370                           
  4371                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4372  16DE  01AB               	clrf	getLoad_AD@i
  4373  16DF  3005               	movlw	5
  4374  16E0  022B               	subwf	getLoad_AD@i,w
  4375  16E1  1803               	btfsc	3,0
  4376  16E2  2F1C               	goto	l9922
  4377  16E3                     l9912:	
  4378                           
  4379                           ;OverLoad_B1.c: 23: {
  4380                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4381  16E3  086E               	movf	_Load,w
  4382  16E4  3E32               	addlw	50
  4383  16E5  0086               	movwf	6
  4384  16E6  3002               	movlw	2	; select bank4/5
  4385  16E7  0087               	movwf	7
  4386  16E8  3F40               	moviw [0]fsr1
  4387  16E9  00A4               	movwf	??_getLoad_AD
  4388  16EA  3F41               	moviw [1]fsr1
  4389  16EB  00A5               	movwf	??_getLoad_AD+1
  4390  16EC  352B               	lslf	getLoad_AD@i,w
  4391  16ED  3E08               	addlw	8
  4392  16EE  076E               	addwf	_Load,w
  4393  16EF  00A6               	movwf	??_getLoad_AD+2
  4394  16F0  0826               	movf	??_getLoad_AD+2,w
  4395  16F1  0086               	movwf	6
  4396  16F2  3002               	movlw	2	; select bank4/5
  4397  16F3  0087               	movwf	7
  4398  16F4  3F40               	moviw [0]fsr1
  4399  16F5  00A7               	movwf	??_getLoad_AD+3
  4400  16F6  3F41               	moviw [1]fsr1
  4401  16F7  00A8               	movwf	??_getLoad_AD+4
  4402  16F8  0825               	movf	??_getLoad_AD+1,w
  4403  16F9  0228               	subwf	??_getLoad_AD+4,w
  4404  16FA  1D03               	skipz
  4405  16FB  2EFE               	goto	u9865
  4406  16FC  0824               	movf	??_getLoad_AD,w
  4407  16FD  0227               	subwf	??_getLoad_AD+3,w
  4408  16FE                     u9865:	
  4409  16FE  1803               	skipnc
  4410  16FF  2F14               	goto	l9918
  4411                           
  4412                           ;OverLoad_B1.c: 25: {
  4413                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4414  1700  086E               	movf	_Load,w
  4415  1701  3E32               	addlw	50
  4416  1702  0086               	movwf	6
  4417  1703  3002               	movlw	2	; select bank4/5
  4418  1704  0087               	movwf	7
  4419  1705  352B               	lslf	getLoad_AD@i,w
  4420  1706  3E08               	addlw	8
  4421  1707  076E               	addwf	_Load,w
  4422  1708  00A4               	movwf	??_getLoad_AD
  4423  1709  0824               	movf	??_getLoad_AD,w
  4424  170A  0084               	movwf	4
  4425  170B  3002               	movlw	2	; select bank4/5
  4426  170C  0085               	movwf	5
  4427  170D  3F40               	moviw [0]fsr1
  4428  170E  3F80               	movwi [0]fsr0
  4429  170F  3F41               	moviw [1]fsr1
  4430  1710  3F81               	movwi [1]fsr0
  4431                           
  4432                           ;OverLoad_B1.c: 27: j=1;
  4433  1711  01AA               	clrf	getLoad_AD@j
  4434  1712  0AAA               	incf	getLoad_AD@j,f
  4435                           
  4436                           ;OverLoad_B1.c: 28: break;
  4437  1713  2F1C               	goto	l9922
  4438  1714                     l9918:	
  4439  1714  3001               	movlw	1
  4440  1715  00A4               	movwf	??_getLoad_AD
  4441  1716  0824               	movf	??_getLoad_AD,w
  4442  1717  07AB               	addwf	getLoad_AD@i,f
  4443  1718  3005               	movlw	5
  4444  1719  022B               	subwf	getLoad_AD@i,w
  4445  171A  1C03               	skipc
  4446  171B  2EE3               	goto	l9912
  4447  171C                     l9922:	
  4448                           
  4449                           ;OverLoad_B1.c: 29: }
  4450                           ;OverLoad_B1.c: 30: }
  4451                           ;OverLoad_B1.c: 31: if(!j)
  4452  171C  08AA               	movf	getLoad_AD@j,f
  4453  171D  1D03               	skipz
  4454  171E  0008               	return
  4455                           
  4456                           ;OverLoad_B1.c: 32: {
  4457                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4458  171F  01AB               	clrf	getLoad_AD@i
  4459  1720                     L1:	
  4460  1720  3005               	movlw	5
  4461  1721  022B               	subwf	getLoad_AD@i,w
  4462  1722  1803               	btfsc	3,0
  4463  1723  0008               	return
  4464                           
  4465                           ;OverLoad_B1.c: 34: {
  4466                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4467  1724  352B               	lslf	getLoad_AD@i,w
  4468  1725  3E1A               	addlw	26
  4469  1726  076E               	addwf	_Load,w
  4470  1727  00A4               	movwf	??_getLoad_AD
  4471  1728  0824               	movf	??_getLoad_AD,w
  4472  1729  0086               	movwf	6
  4473  172A  3002               	movlw	2	; select bank4/5
  4474  172B  0087               	movwf	7
  4475  172C  3F40               	moviw [0]fsr1
  4476  172D  00A5               	movwf	??_getLoad_AD+1
  4477  172E  3F41               	moviw [1]fsr1
  4478  172F  00A6               	movwf	??_getLoad_AD+2
  4479  1730  086E               	movf	_Load,w
  4480  1731  3E32               	addlw	50
  4481  1732  0086               	movwf	6
  4482  1733  3002               	movlw	2	; select bank4/5
  4483  1734  0087               	movwf	7
  4484  1735  3F40               	moviw [0]fsr1
  4485  1736  00A7               	movwf	??_getLoad_AD+3
  4486  1737  3F41               	moviw [1]fsr1
  4487  1738  00A8               	movwf	??_getLoad_AD+4
  4488  1739  0826               	movf	??_getLoad_AD+2,w
  4489  173A  0228               	subwf	??_getLoad_AD+4,w
  4490  173B  1D03               	skipz
  4491  173C  2F3F               	goto	u9905
  4492  173D  0825               	movf	??_getLoad_AD+1,w
  4493  173E  0227               	subwf	??_getLoad_AD+3,w
  4494  173F                     u9905:	
  4495  173F  1803               	skipnc
  4496  1740  2F53               	goto	l9934
  4497                           
  4498                           ;OverLoad_B1.c: 36: {
  4499                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4500  1741  086E               	movf	_Load,w
  4501  1742  3E32               	addlw	50
  4502  1743  0086               	movwf	6
  4503  1744  3002               	movlw	2	; select bank4/5
  4504  1745  0087               	movwf	7
  4505  1746  352B               	lslf	getLoad_AD@i,w
  4506  1747  3E1A               	addlw	26
  4507  1748  076E               	addwf	_Load,w
  4508  1749  00A4               	movwf	??_getLoad_AD
  4509  174A  0824               	movf	??_getLoad_AD,w
  4510  174B  0084               	movwf	4
  4511  174C  3002               	movlw	2	; select bank4/5
  4512  174D  0085               	movwf	5
  4513  174E  3F40               	moviw [0]fsr1
  4514  174F  3F80               	movwi [0]fsr0
  4515  1750  3F41               	moviw [1]fsr1
  4516  1751  3F81               	movwi [1]fsr0
  4517                           
  4518                           ;OverLoad_B1.c: 38: break;
  4519  1752  0008               	return
  4520  1753                     l9934:	
  4521  1753  3001               	movlw	1
  4522  1754  00A4               	movwf	??_getLoad_AD
  4523  1755  0824               	movf	??_getLoad_AD,w
  4524  1756  07AB               	addwf	getLoad_AD@i,f
  4525  1757  2F20               	goto	L1
  4526  1758                     __end_of_getLoad_AD:	
  4527                           
  4528                           	psect	text4
  4529  1800                     __ptext4:	
  4530 ;; *************** function _getAD *****************
  4531 ;; Defined at:
  4532 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  adcon0          1    wreg     unsigned char 
  4535 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  2    0[BANK0 ] int 
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4547 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;Total ram usage:        4 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    4
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_getLoad_AD
  4558 ;;		_getTemp_AD
  4559 ;;		_getPowerFault_AD
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _getAD
  4565  1800                     _getAD:	
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4569                           ;getAD@adcon0 stored from wreg
  4570  1800  0020               	movlb	0	; select bank0
  4571  1801  00A3               	movwf	getAD@adcon0
  4572                           
  4573                           ;MCU_B1.c: 381: ADCON0=adcon0;
  4574  1802  0823               	movf	getAD@adcon0,w
  4575  1803  0021               	movlb	1	; select bank1
  4576  1804  009D               	movwf	29	;volatile
  4577                           
  4578                           ;MCU_B1.c: 382: ADCON1=adcon1;
  4579  1805  0020               	movlb	0	; select bank0
  4580  1806  0820               	movf	getAD@adcon1,w
  4581  1807  0021               	movlb	1	; select bank1
  4582  1808  009E               	movwf	30	;volatile
  4583                           
  4584                           ;MCU_B1.c: 383: GO_nDONE=1;
  4585  1809  149D               	bsf	29,1	;volatile
  4586  180A                     l1718:	
  4587                           ;MCU_B1.c: 384: while(GO_nDONE);
  4588                           
  4589  180A  189D               	btfsc	29,1	;volatile
  4590  180B  280A               	goto	l1718
  4591                           
  4592                           ;MCU_B1.c: 385: return ((ADRESH*256)+ADRESL);
  4593  180C  081C               	movf	28,w	;volatile
  4594  180D  0020               	movlb	0	; select bank0
  4595  180E  01A1               	clrf	?_getAD+1
  4596  180F  07A1               	addwf	?_getAD+1,f
  4597  1810  0021               	movlb	1	; select bank1
  4598  1811  081B               	movf	27,w	;volatile
  4599  1812  0020               	movlb	0	; select bank0
  4600  1813  01A0               	clrf	?_getAD
  4601  1814  07A0               	addwf	?_getAD,f
  4602  1815  0008               	return
  4603  1816                     __end_of_getAD:	
  4604                           
  4605                           	psect	text5
  4606  22C2                     __ptext5:	
  4607 ;; *************** function _Temp_Main *****************
  4608 ;; Defined at:
  4609 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;		None               void
  4616 ;; Registers used:
  4617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:   10
  4630 ;; This function calls:
  4631 ;;		_setTemp_Main
  4632 ;; This function is called by:
  4633 ;;		_main
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _Temp_Main
  4639  22C2                     _Temp_Main:	
  4640                           
  4641                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4645  22C2  318D  2582         	fcall	_setTemp_Main
  4646  22C4  0008               	return
  4647  22C5                     __end_of_Temp_Main:	
  4648                           
  4649                           	psect	text6
  4650  0D82                     __ptext6:	
  4651 ;; *************** function _setTemp_Main *****************
  4652 ;; Defined at:
  4653 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;		None               void
  4660 ;; Registers used:
  4661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;Total ram usage:        3 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    9
  4674 ;; This function calls:
  4675 ;;		_getLoad_Safe
  4676 ;;		_getPF_Safe
  4677 ;;		_setOverTemp_Exceptions
  4678 ;; This function is called by:
  4679 ;;		_Temp_Main
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _setTemp_Main
  4685  0D82                     _setTemp_Main:	
  4686                           
  4687                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4691  0D82  087D               	movf	_Temp,w
  4692  0D83  0086               	movwf	6
  4693  0D84  3001               	movlw	1	; select bank2/3
  4694  0D85  0087               	movwf	7
  4695  0D86  1C01               	btfss	1,0
  4696  0D87  0008               	return
  4697                           
  4698                           ;OverTemperature_B1.c: 67: {
  4699                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4700  0D88  087D               	movf	_Temp,w
  4701  0D89  0086               	movwf	6
  4702  0D8A  3001               	movlw	1	; select bank2/3
  4703  0D8B  0087               	movwf	7
  4704  0D8C  1901               	btfsc	1,2
  4705  0D8D  2DCE               	goto	l9546
  4706                           
  4707                           ;OverTemperature_B1.c: 69: {
  4708                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4709  0D8E  0A7D               	incf	_Temp,w
  4710  0D8F  0086               	movwf	6
  4711  0D90  3001               	movlw	1	; select bank2/3
  4712  0D91  0087               	movwf	7
  4713  0D92  3001               	movlw	1
  4714  0D93  0781               	addwf	1,f
  4715  0D94  3141               	addfsr 1,1
  4716  0D95  1803               	skipnc
  4717  0D96  0A81               	incf	1,f
  4718                           
  4719                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4720  0D97  0A7D               	incf	_Temp,w
  4721  0D98  0086               	movwf	6
  4722  0D99  3001               	movlw	1	; select bank2/3
  4723  0D9A  0087               	movwf	7
  4724  0D9B  3F40               	moviw [0]fsr1
  4725  0D9C  0020               	movlb	0	; select bank0
  4726  0D9D  00AD               	movwf	??_setTemp_Main
  4727  0D9E  3F41               	moviw [1]fsr1
  4728  0D9F  00AE               	movwf	??_setTemp_Main+1
  4729  0DA0  3001               	movlw	1
  4730  0DA1  022E               	subwf	??_setTemp_Main+1,w
  4731  0DA2  30F4               	movlw	244
  4732  0DA3  1903               	skipnz
  4733  0DA4  022D               	subwf	??_setTemp_Main,w
  4734  0DA5  1C03               	skipc
  4735  0DA6  0008               	return
  4736                           
  4737                           ;OverTemperature_B1.c: 72: {
  4738                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4739  0DA7  31A3  238A  318D   	fcall	_getLoad_Safe
  4740  0DAA  3A00               	xorlw	0
  4741  0DAB  1903               	skipnz
  4742  0DAC  2DC5               	goto	l9544
  4743  0DAD  31A3  231C  318D   	fcall	_getPF_Safe
  4744  0DB0  3A00               	xorlw	0
  4745  0DB1  1903               	skipnz
  4746  0DB2  2DC5               	goto	l9544
  4747                           
  4748                           ;OverTemperature_B1.c: 74: {
  4749                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4750  0DB3  0A7D               	incf	_Temp,w
  4751  0DB4  0086               	movwf	6
  4752  0DB5  3001               	movlw	1	; select bank2/3
  4753  0DB6  0087               	movwf	7
  4754  0DB7  3000               	movlw	0
  4755  0DB8  3FC0               	movwi [0]fsr1
  4756  0DB9  3FC1               	movwi [1]fsr1
  4757                           
  4758                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4759  0DBA  087D               	movf	_Temp,w
  4760  0DBB  0086               	movwf	6
  4761  0DBC  3001               	movlw	1	; select bank2/3
  4762  0DBD  0087               	movwf	7
  4763  0DBE  1501               	bsf	1,2
  4764                           
  4765                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4766  0DBF  087D               	movf	_Temp,w
  4767  0DC0  0086               	movwf	6
  4768  0DC1  3001               	movlw	1	; select bank2/3
  4769  0DC2  0087               	movwf	7
  4770  0DC3  1201               	bcf	1,4
  4771                           
  4772                           ;OverTemperature_B1.c: 78: }
  4773  0DC4  0008               	return
  4774  0DC5                     l9544:	
  4775                           
  4776                           ;OverTemperature_B1.c: 79: else
  4777                           ;OverTemperature_B1.c: 80: {
  4778                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4779  0DC5  0A7D               	incf	_Temp,w
  4780  0DC6  0086               	movwf	6
  4781  0DC7  3001               	movlw	1	; select bank2/3
  4782  0DC8  0087               	movwf	7
  4783  0DC9  30E8               	movlw	232
  4784  0DCA  3FC0               	movwi [0]fsr1
  4785  0DCB  3003               	movlw	3
  4786  0DCC  3FC1               	movwi [1]fsr1
  4787                           
  4788                           ;OverTemperature_B1.c: 82: }
  4789                           ;OverTemperature_B1.c: 83: }
  4790                           ;OverTemperature_B1.c: 84: }
  4791  0DCD  0008               	return
  4792  0DCE                     l9546:	
  4793                           
  4794                           ;OverTemperature_B1.c: 85: else
  4795                           ;OverTemperature_B1.c: 86: {
  4796                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4797  0DCE  0A7D               	incf	_Temp,w
  4798  0DCF  0086               	movwf	6
  4799  0DD0  3001               	movlw	1	; select bank2/3
  4800  0DD1  0087               	movwf	7
  4801  0DD2  3001               	movlw	1
  4802  0DD3  0781               	addwf	1,f
  4803  0DD4  3141               	addfsr 1,1
  4804  0DD5  1803               	skipnc
  4805  0DD6  0A81               	incf	1,f
  4806                           
  4807                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4808  0DD7  0A7D               	incf	_Temp,w
  4809  0DD8  0086               	movwf	6
  4810  0DD9  3001               	movlw	1	; select bank2/3
  4811  0DDA  0087               	movwf	7
  4812  0DDB  3F40               	moviw [0]fsr1
  4813  0DDC  0020               	movlb	0	; select bank0
  4814  0DDD  00AD               	movwf	??_setTemp_Main
  4815  0DDE  3F41               	moviw [1]fsr1
  4816  0DDF  00AE               	movwf	??_setTemp_Main+1
  4817  0DE0  3000               	movlw	0
  4818  0DE1  022E               	subwf	??_setTemp_Main+1,w
  4819  0DE2  3004               	movlw	4
  4820  0DE3  1903               	skipnz
  4821  0DE4  022D               	subwf	??_setTemp_Main,w
  4822  0DE5  1C03               	skipc
  4823  0DE6  0008               	return
  4824                           
  4825                           ;OverTemperature_B1.c: 89: {
  4826                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4827  0DE7  0A7D               	incf	_Temp,w
  4828  0DE8  0086               	movwf	6
  4829  0DE9  3001               	movlw	1	; select bank2/3
  4830  0DEA  0087               	movwf	7
  4831  0DEB  3000               	movlw	0
  4832  0DEC  3FC0               	movwi [0]fsr1
  4833  0DED  3FC1               	movwi [1]fsr1
  4834                           
  4835                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4836  0DEE  087D               	movf	_Temp,w
  4837  0DEF  0086               	movwf	6
  4838  0DF0  3001               	movlw	1	; select bank2/3
  4839  0DF1  0087               	movwf	7
  4840  0DF2  1101               	bcf	1,2
  4841                           
  4842                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4843  0DF3  087D               	movf	_Temp,w
  4844  0DF4  3E08               	addlw	8
  4845  0DF5  0086               	movwf	6
  4846  0DF6  3001               	movlw	1	; select bank2/3
  4847  0DF7  0087               	movwf	7
  4848  0DF8  087D               	movf	_Temp,w
  4849  0DF9  3E04               	addlw	4
  4850  0DFA  0084               	movwf	4
  4851  0DFB  3001               	movlw	1	; select bank2/3
  4852  0DFC  0085               	movwf	5
  4853  0DFD  3F40               	moviw [0]fsr1
  4854  0DFE  3F80               	movwi [0]fsr0
  4855  0DFF  3F41               	moviw [1]fsr1
  4856  0E00  3F81               	movwi [1]fsr0
  4857                           
  4858                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4859  0E01  087D               	movf	_Temp,w
  4860  0E02  0086               	movwf	6
  4861  0E03  3001               	movlw	1	; select bank2/3
  4862  0E04  0087               	movwf	7
  4863  0E05  1C81               	btfss	1,1
  4864  0E06  2E34               	goto	l9568
  4865                           
  4866                           ;OverTemperature_B1.c: 94: {
  4867                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4868  0E07  087D               	movf	_Temp,w
  4869  0E08  3E04               	addlw	4
  4870  0E09  0086               	movwf	6
  4871  0E0A  3001               	movlw	1	; select bank2/3
  4872  0E0B  0087               	movwf	7
  4873  0E0C  3F40               	moviw [0]fsr1
  4874  0E0D  00AD               	movwf	??_setTemp_Main
  4875  0E0E  3F41               	moviw [1]fsr1
  4876  0E0F  00AE               	movwf	??_setTemp_Main+1
  4877  0E10  3002               	movlw	2
  4878  0E11  022E               	subwf	??_setTemp_Main+1,w
  4879  0E12  3058               	movlw	88
  4880  0E13  1903               	skipnz
  4881  0E14  022D               	subwf	??_setTemp_Main,w
  4882  0E15  1C03               	skipc
  4883  0E16  2E62               	goto	l9578
  4884                           
  4885                           ;OverTemperature_B1.c: 96: {
  4886                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4887  0E17  3001               	movlw	1
  4888  0E18  00AD               	movwf	??_setTemp_Main
  4889  0E19  087D               	movf	_Temp,w
  4890  0E1A  3E03               	addlw	3
  4891  0E1B  0086               	movwf	6
  4892  0E1C  3001               	movlw	1	; select bank2/3
  4893  0E1D  0087               	movwf	7
  4894  0E1E  082D               	movf	??_setTemp_Main,w
  4895  0E1F  0781               	addwf	1,f
  4896                           
  4897                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4898  0E20  087D               	movf	_Temp,w
  4899  0E21  3E03               	addlw	3
  4900  0E22  0086               	movwf	6
  4901  0E23  3001               	movlw	1	; select bank2/3
  4902  0E24  0087               	movwf	7
  4903  0E25  3003               	movlw	3
  4904  0E26  0201               	subwf	1,w
  4905  0E27  1C03               	skipc
  4906  0E28  2E68               	goto	l9580
  4907                           
  4908                           ;OverTemperature_B1.c: 99: {
  4909                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4910  0E29  087D               	movf	_Temp,w
  4911  0E2A  3E03               	addlw	3
  4912  0E2B  0086               	movwf	6
  4913  0E2C  3001               	movlw	1	; select bank2/3
  4914  0E2D  0087               	movwf	7
  4915  0E2E  0181               	clrf	1
  4916                           
  4917                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4918  0E2F  3000               	movlw	0
  4919  0E30  319B  2373  318D   	fcall	_setOverTemp_Exceptions
  4920                           
  4921                           ;OverTemperature_B1.c: 102: }
  4922                           ;OverTemperature_B1.c: 103: }
  4923  0E33  2E68               	goto	l9580
  4924  0E34                     l9568:	
  4925                           ;OverTemperature_B1.c: 107: }
  4926                           ;OverTemperature_B1.c: 108: }
  4927                           
  4928                           ;OverTemperature_B1.c: 104: else
  4929                           ;OverTemperature_B1.c: 105: {
  4930                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4931                           
  4932                           
  4933                           ;OverTemperature_B1.c: 109: else
  4934                           ;OverTemperature_B1.c: 110: {
  4935                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4936  0E34  087D               	movf	_Temp,w
  4937  0E35  3E04               	addlw	4
  4938  0E36  0086               	movwf	6
  4939  0E37  3001               	movlw	1	; select bank2/3
  4940  0E38  0087               	movwf	7
  4941  0E39  3F40               	moviw [0]fsr1
  4942  0E3A  0020               	movlb	0	; select bank0
  4943  0E3B  00AD               	movwf	??_setTemp_Main
  4944  0E3C  3F41               	moviw [1]fsr1
  4945  0E3D  00AE               	movwf	??_setTemp_Main+1
  4946  0E3E  3002               	movlw	2
  4947  0E3F  022E               	subwf	??_setTemp_Main+1,w
  4948  0E40  3027               	movlw	39
  4949  0E41  1903               	skipnz
  4950  0E42  022D               	subwf	??_setTemp_Main,w
  4951  0E43  1803               	skipnc
  4952  0E44  2E62               	goto	l9578
  4953                           
  4954                           ;OverTemperature_B1.c: 112: {
  4955                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4956  0E45  3001               	movlw	1
  4957  0E46  00AD               	movwf	??_setTemp_Main
  4958  0E47  087D               	movf	_Temp,w
  4959  0E48  3E03               	addlw	3
  4960  0E49  0086               	movwf	6
  4961  0E4A  3001               	movlw	1	; select bank2/3
  4962  0E4B  0087               	movwf	7
  4963  0E4C  082D               	movf	??_setTemp_Main,w
  4964  0E4D  0781               	addwf	1,f
  4965                           
  4966                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4967  0E4E  087D               	movf	_Temp,w
  4968  0E4F  3E03               	addlw	3
  4969  0E50  0086               	movwf	6
  4970  0E51  3001               	movlw	1	; select bank2/3
  4971  0E52  0087               	movwf	7
  4972  0E53  3003               	movlw	3
  4973  0E54  0201               	subwf	1,w
  4974  0E55  1C03               	skipc
  4975  0E56  2E68               	goto	l9580
  4976                           
  4977                           ;OverTemperature_B1.c: 115: {
  4978                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4979  0E57  087D               	movf	_Temp,w
  4980  0E58  3E03               	addlw	3
  4981  0E59  0086               	movwf	6
  4982  0E5A  3001               	movlw	1	; select bank2/3
  4983  0E5B  0087               	movwf	7
  4984  0E5C  0181               	clrf	1
  4985                           
  4986                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4987  0E5D  3001               	movlw	1
  4988  0E5E  319B  2373  318D   	fcall	_setOverTemp_Exceptions
  4989                           
  4990                           ;OverTemperature_B1.c: 118: }
  4991                           ;OverTemperature_B1.c: 119: }
  4992  0E61  2E68               	goto	l9580
  4993  0E62                     l9578:	
  4994                           
  4995                           ;OverTemperature_B1.c: 120: else
  4996                           ;OverTemperature_B1.c: 121: {
  4997                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  4998  0E62  087D               	movf	_Temp,w
  4999  0E63  3E03               	addlw	3
  5000  0E64  0086               	movwf	6
  5001  0E65  3001               	movlw	1	; select bank2/3
  5002  0E66  0087               	movwf	7
  5003  0E67  0181               	clrf	1
  5004  0E68                     l9580:	
  5005                           
  5006                           ;OverTemperature_B1.c: 123: }
  5007                           ;OverTemperature_B1.c: 124: }
  5008                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5009  0E68  087D               	movf	_Temp,w
  5010  0E69  0086               	movwf	6
  5011  0E6A  3001               	movlw	1	; select bank2/3
  5012  0E6B  0087               	movwf	7
  5013  0E6C  1881               	btfsc	1,1
  5014  0E6D  2E73               	goto	l9584
  5015                           
  5016                           ;OverTemperature_B1.c: 126: {
  5017                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5018  0E6E  087D               	movf	_Temp,w
  5019  0E6F  0086               	movwf	6
  5020  0E70  3001               	movlw	1	; select bank2/3
  5021  0E71  0087               	movwf	7
  5022  0E72  1601               	bsf	1,4
  5023  0E73                     l9584:	
  5024                           
  5025                           ;OverTemperature_B1.c: 128: }
  5026                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5027  0E73  087D               	movf	_Temp,w
  5028  0E74  3E04               	addlw	4
  5029  0E75  0086               	movwf	6
  5030  0E76  3001               	movlw	1	; select bank2/3
  5031  0E77  0087               	movwf	7
  5032  0E78  3F40               	moviw [0]fsr1
  5033  0E79  0020               	movlb	0	; select bank0
  5034  0E7A  00AD               	movwf	??_setTemp_Main
  5035  0E7B  3F41               	moviw [1]fsr1
  5036  0E7C  00AE               	movwf	??_setTemp_Main+1
  5037  0E7D  082E               	movf	??_setTemp_Main+1,w
  5038  0E7E  00AF               	movwf	??_setTemp_Main+2
  5039  0E7F  086F               	movf	_Product,w
  5040  0E80  3E18               	addlw	24
  5041  0E81  0086               	movwf	6
  5042  0E82  3001               	movlw	1	; select bank2/3
  5043  0E83  0087               	movwf	7
  5044  0E84  082F               	movf	??_setTemp_Main+2,w
  5045  0E85  0081               	movwf	1
  5046                           
  5047                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5048  0E86  087D               	movf	_Temp,w
  5049  0E87  3E04               	addlw	4
  5050  0E88  0086               	movwf	6
  5051  0E89  3001               	movlw	1	; select bank2/3
  5052  0E8A  0087               	movwf	7
  5053  0E8B  0801               	movf	1,w
  5054  0E8C  00AD               	movwf	??_setTemp_Main
  5055  0E8D  086F               	movf	_Product,w
  5056  0E8E  3E19               	addlw	25
  5057  0E8F  0086               	movwf	6
  5058  0E90  3001               	movlw	1	; select bank2/3
  5059  0E91  0087               	movwf	7
  5060  0E92  082D               	movf	??_setTemp_Main,w
  5061  0E93  0081               	movwf	1
  5062                           
  5063                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5064  0E94  087D               	movf	_Temp,w
  5065  0E95  3E06               	addlw	6
  5066  0E96  0086               	movwf	6
  5067  0E97  3001               	movlw	1	; select bank2/3
  5068  0E98  0087               	movwf	7
  5069  0E99  3000               	movlw	0
  5070  0E9A  3FC0               	movwi [0]fsr1
  5071  0E9B  3FC1               	movwi [1]fsr1
  5072                           
  5073                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5074  0E9C  087D               	movf	_Temp,w
  5075  0E9D  3E08               	addlw	8
  5076  0E9E  0086               	movwf	6
  5077  0E9F  3001               	movlw	1	; select bank2/3
  5078  0EA0  0087               	movwf	7
  5079  0EA1  3000               	movlw	0
  5080  0EA2  3FC0               	movwi [0]fsr1
  5081  0EA3  3FC1               	movwi [1]fsr1
  5082  0EA4  0008               	return
  5083  0EA5                     __end_of_setTemp_Main:	
  5084                           
  5085                           	psect	text7
  5086  1B73                     __ptext7:	
  5087 ;; *************** function _setOverTemp_Exceptions *****************
  5088 ;; Defined at:
  5089 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  command         1    wreg     unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  command         1   12[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        2 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    8
  5110 ;; This function calls:
  5111 ;;		_DimmerLights_Exceptions
  5112 ;;		_setBuz
  5113 ;;		_setLED
  5114 ;;		_setRF_Enable
  5115 ;;		_setSw_Enable
  5116 ;; This function is called by:
  5117 ;;		_setTemp_Main
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _setOverTemp_Exceptions
  5123  1B73                     _setOverTemp_Exceptions:	
  5124                           
  5125                           ;incstack = 0
  5126                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5127                           ;setOverTemp_Exceptions@command stored from wreg
  5128  1B73  0020               	movlb	0	; select bank0
  5129  1B74  00AC               	movwf	setOverTemp_Exceptions@command
  5130                           
  5131                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5132  1B75  087D               	movf	_Temp,w
  5133  1B76  0086               	movwf	6
  5134  1B77  3001               	movlw	1	; select bank2/3
  5135  1B78  0087               	movwf	7
  5136  1B79  082C               	movf	setOverTemp_Exceptions@command,w
  5137  1B7A  1081               	bcf	1,1
  5138  1B7B  1D03               	skipz
  5139  1B7C  1481               	bsf	1,1
  5140                           
  5141                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5142  1B7D  092C               	comf	setOverTemp_Exceptions@command,w
  5143  1B7E  3901               	andlw	1
  5144  1B7F  00AB               	movwf	??_setOverTemp_Exceptions
  5145  1B80  087D               	movf	_Temp,w
  5146  1B81  0086               	movwf	6
  5147  1B82  3001               	movlw	1	; select bank2/3
  5148  1B83  0087               	movwf	7
  5149  1B84  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5150  1B85  0801               	movf	1,w
  5151  1B86  062B               	xorwf	??_setOverTemp_Exceptions,w
  5152  1B87  39EF               	andlw	-17
  5153  1B88  062B               	xorwf	??_setOverTemp_Exceptions,w
  5154  1B89  0081               	movwf	1
  5155                           
  5156                           ;OverTemperature_B1.c: 142: if(command)
  5157  1B8A  082C               	movf	setOverTemp_Exceptions@command,w
  5158  1B8B  1903               	btfsc	3,2
  5159  1B8C  2B92               	goto	l9190
  5160                           
  5161                           ;OverTemperature_B1.c: 143: {
  5162                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5163  1B8D  3001               	movlw	1
  5164  1B8E  319F  2730  319B   	fcall	_DimmerLights_Exceptions
  5165                           
  5166                           ;OverTemperature_B1.c: 148: }
  5167  1B91  2B9B               	goto	l2160
  5168  1B92                     l9190:	
  5169                           
  5170                           ;OverTemperature_B1.c: 149: else
  5171                           ;OverTemperature_B1.c: 150: {
  5172                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5173  1B92  3064               	movlw	100
  5174  1B93  0020               	movlb	0	; select bank0
  5175  1B94  00A6               	movwf	setBuz@time
  5176  1B95  3000               	movlw	0
  5177  1B96  00A7               	movwf	setBuz@time+1
  5178  1B97  3002               	movlw	2
  5179  1B98  3192  220A  319B   	fcall	_setBuz
  5180  1B9B                     l2160:	
  5181                           
  5182                           ;OverTemperature_B1.c: 152: }
  5183                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5184  1B9B  0020               	movlb	0	; select bank0
  5185  1B9C  082C               	movf	setOverTemp_Exceptions@command,w
  5186  1B9D  3E0A               	addlw	10
  5187  1B9E  00AB               	movwf	??_setOverTemp_Exceptions
  5188  1B9F  082B               	movf	??_setOverTemp_Exceptions,w
  5189  1BA0  00A2               	movwf	setLED@command
  5190  1BA1  3063               	movlw	99
  5191  1BA2  3188  2002  319B   	fcall	_setLED
  5192                           
  5193                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5194  1BA5  0020               	movlb	0	; select bank0
  5195  1BA6  092C               	comf	setOverTemp_Exceptions@command,w
  5196  1BA7  3901               	andlw	1
  5197  1BA8  31A6  2670  319B   	fcall	_setSw_Enable
  5198                           
  5199                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5200  1BAB  0020               	movlb	0	; select bank0
  5201  1BAC  092C               	comf	setOverTemp_Exceptions@command,w
  5202  1BAD  3901               	andlw	1
  5203  1BAE  00AB               	movwf	??_setOverTemp_Exceptions
  5204  1BAF  082B               	movf	??_setOverTemp_Exceptions,w
  5205  1BB0  00A2               	movwf	setRF_Enable@command
  5206  1BB1  3001               	movlw	1
  5207  1BB2  3198  2067         	fcall	_setRF_Enable
  5208  1BB4  0008               	return
  5209  1BB5                     __end_of_setOverTemp_Exceptions:	
  5210                           
  5211                           	psect	text8
  5212  22BF                     __ptext8:	
  5213 ;; *************** function _Temp_Initialization *****************
  5214 ;; Defined at:
  5215 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;Total ram usage:        0 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    5
  5236 ;; This function calls:
  5237 ;;		_setTemp_Initialization
  5238 ;; This function is called by:
  5239 ;;		_main
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           
  5244                           ;psect for function _Temp_Initialization
  5245  22BF                     _Temp_Initialization:	
  5246                           
  5247                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5251  22BF  31A3  2395         	fcall	_setTemp_Initialization
  5252  22C1  0008               	return
  5253  22C2                     __end_of_Temp_Initialization:	
  5254                           
  5255                           	psect	text9
  5256  2395                     __ptext9:	
  5257 ;; *************** function _setTemp_Initialization *****************
  5258 ;; Defined at:
  5259 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;		None
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;		None               void
  5266 ;; Registers used:
  5267 ;;		wreg, fsr1l, fsr1h
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;Total ram usage:        1 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    4
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_Temp_Initialization
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _setTemp_Initialization
  5289  2395                     _setTemp_Initialization:	
  5290                           
  5291                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5292                           
  5293                           ;incstack = 0
  5294                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5295  2395  303C               	movlw	_Temp1& (0+255)
  5296  2396  0020               	movlb	0	; select bank0
  5297  2397  00A0               	movwf	??_setTemp_Initialization
  5298  2398  0820               	movf	??_setTemp_Initialization,w
  5299  2399  00FD               	movwf	_Temp
  5300                           
  5301                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5302  239A  087D               	movf	_Temp,w
  5303  239B  0086               	movwf	6
  5304  239C  3001               	movlw	1	; select bank2/3
  5305  239D  0087               	movwf	7
  5306  239E  1601               	bsf	1,4
  5307  239F  0008               	return
  5308  23A0                     __end_of_setTemp_Initialization:	
  5309                           
  5310                           	psect	text10
  5311  1000                     __ptext10:	
  5312 ;; *************** function _Switch_Main *****************
  5313 ;; Defined at:
  5314 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:   10
  5335 ;; This function calls:
  5336 ;;		_setSw_Main
  5337 ;; This function is called by:
  5338 ;;		_main
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _Switch_Main
  5344  1000                     _Switch_Main:	
  5345                           
  5346                           ;Switch_B1.c: 65: setSw_Main(1);
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5350  1000  3001               	movlw	1
  5351  1001  318E  26A5  3190   	fcall	_setSw_Main
  5352                           
  5353                           ;Switch_B1.c: 69: setSw_Main(2);
  5354  1004  3002               	movlw	2
  5355  1005  318E  26A5         	fcall	_setSw_Main
  5356  1007  0008               	return
  5357  1008                     __end_of_Switch_Main:	
  5358                           
  5359                           	psect	text11
  5360  0EA5                     __ptext11:	
  5361 ;; *************** function _setSw_Main *****************
  5362 ;; Defined at:
  5363 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  sw              1    wreg     unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  sw              1   73[BANK0 ] unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;Total ram usage:        5 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    9
  5384 ;; This function calls:
  5385 ;;		_SwPointSelect
  5386 ;;		_Sw_DimmerAdjFunc
  5387 ;;		_Sw_DimmerOffFunc
  5388 ;;		_Sw_DimmerOnFunc
  5389 ;;		_setBuz
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  0EA5                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  0EA5  0020               	movlb	0	; select bank0
  5404  0EA6  00E9               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 114: if(Sw->Enable)
  5407  0EA7  086D               	movf	_Sw,w
  5408  0EA8  0086               	movwf	6
  5409  0EA9  3001               	movlw	1	; select bank2/3
  5410  0EAA  0087               	movwf	7
  5411  0EAB  1C01               	btfss	1,0
  5412  0EAC  0008               	return
  5413                           
  5414                           ;Switch_B1.c: 115: {
  5415                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5416  0EAD  0869               	movf	setSw_Main@sw,w
  5417  0EAE  31A4  24FA  318E   	fcall	_SwPointSelect
  5418                           
  5419                           ;Switch_B1.c: 133: if(sw == 1)
  5420  0EB1  0020               	movlb	0	; select bank0
  5421  0EB2  0869               	movf	setSw_Main@sw,w
  5422  0EB3  3A01               	xorlw	1
  5423  0EB4  1D03               	skipz
  5424  0EB5  2EC2               	goto	l9724
  5425                           
  5426                           ;Switch_B1.c: 134: {
  5427                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  5428  0EB6  01E7               	clrf	_setSw_Main$4758
  5429  0EB7  0AE7               	incf	_setSw_Main$4758,f
  5430  0EB8  1F0C               	btfss	12,6	;volatile
  5431  0EB9  1A0C               	btfsc	12,4	;volatile
  5432  0EBA  2EBC               	goto	l9722
  5433  0EBB  01E7               	clrf	_setSw_Main$4758
  5434  0EBC                     l9722:	
  5435  0EBC  086D               	movf	_Sw,w
  5436  0EBD  0086               	movwf	6
  5437  0EBE  3001               	movlw	1	; select bank2/3
  5438  0EBF  0087               	movwf	7
  5439  0EC0  0867               	movf	_setSw_Main$4758,w
  5440  0EC1  2ED1               	goto	L2
  5441  0EC2                     l9724:	
  5442                           ;Switch_B1.c: 136: }
  5443                           
  5444                           
  5445                           ;Switch_B1.c: 137: else if(sw == 2)
  5446  0EC2  0869               	movf	setSw_Main@sw,w
  5447  0EC3  3A02               	xorlw	2
  5448  0EC4  1D03               	skipz
  5449  0EC5  2ED4               	goto	l9734
  5450                           
  5451                           ;Switch_B1.c: 138: {
  5452                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  5453  0EC6  01E8               	clrf	_setSw_Main$4759
  5454  0EC7  0AE8               	incf	_setSw_Main$4759,f
  5455  0EC8  1C0C               	btfss	12,0	;volatile
  5456  0EC9  188D               	btfsc	13,1	;volatile
  5457  0ECA  2ECC               	goto	l9732
  5458  0ECB  01E8               	clrf	_setSw_Main$4759
  5459  0ECC                     l9732:	
  5460  0ECC  086D               	movf	_Sw,w
  5461  0ECD  0086               	movwf	6
  5462  0ECE  3001               	movlw	1	; select bank2/3
  5463  0ECF  0087               	movwf	7
  5464  0ED0  0868               	movf	_setSw_Main$4759,w
  5465  0ED1                     L2:	
  5466  0ED1  1081               	bcf	1,1
  5467  0ED2  1D03               	skipz
  5468  0ED3  1481               	bsf	1,1
  5469  0ED4                     l9734:	
  5470                           
  5471                           ;Switch_B1.c: 140: }
  5472                           ;Switch_B1.c: 148: if(Sw->Touch)
  5473  0ED4  086D               	movf	_Sw,w
  5474  0ED5  0086               	movwf	6
  5475  0ED6  3001               	movlw	1	; select bank2/3
  5476  0ED7  0087               	movwf	7
  5477  0ED8  1C81               	btfss	1,1
  5478  0ED9  2FAB               	goto	l9782
  5479                           
  5480                           ;Switch_B1.c: 149: {
  5481                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5482  0EDA  086D               	movf	_Sw,w
  5483  0EDB  0086               	movwf	6
  5484  0EDC  3001               	movlw	1	; select bank2/3
  5485  0EDD  0087               	movwf	7
  5486  0EDE  1901               	btfsc	1,2
  5487  0EDF  2F01               	goto	l9748
  5488                           
  5489                           ;Switch_B1.c: 151: {
  5490                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5491  0EE0  3001               	movlw	1
  5492  0EE1  00E5               	movwf	??_setSw_Main
  5493  0EE2  086D               	movf	_Sw,w
  5494  0EE3  3E02               	addlw	2
  5495  0EE4  0086               	movwf	6
  5496  0EE5  3001               	movlw	1	; select bank2/3
  5497  0EE6  0087               	movwf	7
  5498  0EE7  0865               	movf	??_setSw_Main,w
  5499  0EE8  0781               	addwf	1,f
  5500                           
  5501                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5502  0EE9  086D               	movf	_Sw,w
  5503  0EEA  3E02               	addlw	2
  5504  0EEB  0086               	movwf	6
  5505  0EEC  3001               	movlw	1	; select bank2/3
  5506  0EED  0087               	movwf	7
  5507  0EEE  3005               	movlw	5
  5508  0EEF  0201               	subwf	1,w
  5509  0EF0  1C03               	skipc
  5510  0EF1  0008               	return
  5511                           
  5512                           ;Switch_B1.c: 154: {
  5513                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5514  0EF2  086D               	movf	_Sw,w
  5515  0EF3  3E02               	addlw	2
  5516  0EF4  0086               	movwf	6
  5517  0EF5  3001               	movlw	1	; select bank2/3
  5518  0EF6  0087               	movwf	7
  5519  0EF7  0181               	clrf	1
  5520                           
  5521                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5522  0EF8  086D               	movf	_Sw,w
  5523  0EF9  0086               	movwf	6
  5524  0EFA  3001               	movlw	1	; select bank2/3
  5525  0EFB  0087               	movwf	7
  5526  0EFC  1501               	bsf	1,2
  5527                           
  5528                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5529  0EFD  0869               	movf	setSw_Main@sw,w
  5530  0EFE  3191  212A         	fcall	_Sw_DimmerOnFunc
  5531                           
  5532                           ;Switch_B1.c: 162: }
  5533                           ;Switch_B1.c: 163: }
  5534  0F00  0008               	return
  5535  0F01                     l9748:	
  5536                           
  5537                           ;Switch_B1.c: 164: else
  5538                           ;Switch_B1.c: 165: {
  5539                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5540  0F01  0020               	movlb	0	; select bank0
  5541  0F02  086D               	movf	_Sw,w
  5542  0F03  0086               	movwf	6
  5543  0F04  3001               	movlw	1	; select bank2/3
  5544  0F05  0087               	movwf	7
  5545  0F06  1981               	btfsc	1,3
  5546  0F07  2F33               	goto	l9758
  5547                           
  5548                           ;Switch_B1.c: 167: {
  5549                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5550  0F08  086D               	movf	_Sw,w
  5551  0F09  3E03               	addlw	3
  5552  0F0A  0086               	movwf	6
  5553  0F0B  3001               	movlw	1	; select bank2/3
  5554  0F0C  0087               	movwf	7
  5555  0F0D  3001               	movlw	1
  5556  0F0E  0781               	addwf	1,f
  5557  0F0F  3141               	addfsr 1,1
  5558  0F10  1803               	skipnc
  5559  0F11  0A81               	incf	1,f
  5560                           
  5561                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5562  0F12  086D               	movf	_Sw,w
  5563  0F13  3E03               	addlw	3
  5564  0F14  0086               	movwf	6
  5565  0F15  3001               	movlw	1	; select bank2/3
  5566  0F16  0087               	movwf	7
  5567  0F17  3F40               	moviw [0]fsr1
  5568  0F18  00E5               	movwf	??_setSw_Main
  5569  0F19  3F41               	moviw [1]fsr1
  5570  0F1A  00E6               	movwf	??_setSw_Main+1
  5571  0F1B  3000               	movlw	0
  5572  0F1C  0266               	subwf	??_setSw_Main+1,w
  5573  0F1D  3096               	movlw	150
  5574  0F1E  1903               	skipnz
  5575  0F1F  0265               	subwf	??_setSw_Main,w
  5576  0F20  1C03               	skipc
  5577  0F21  0008               	return
  5578                           
  5579                           ;Switch_B1.c: 170: {
  5580                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5581  0F22  086D               	movf	_Sw,w
  5582  0F23  3E03               	addlw	3
  5583  0F24  0086               	movwf	6
  5584  0F25  3001               	movlw	1	; select bank2/3
  5585  0F26  0087               	movwf	7
  5586  0F27  3000               	movlw	0
  5587  0F28  3FC0               	movwi [0]fsr1
  5588  0F29  3FC1               	movwi [1]fsr1
  5589                           
  5590                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5591  0F2A  086D               	movf	_Sw,w
  5592  0F2B  0086               	movwf	6
  5593  0F2C  3001               	movlw	1	; select bank2/3
  5594  0F2D  0087               	movwf	7
  5595  0F2E  1581               	bsf	1,3
  5596                           
  5597                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5598  0F2F  0869               	movf	setSw_Main@sw,w
  5599  0F30  31A7  27DA         	fcall	_Sw_DimmerAdjFunc
  5600                           
  5601                           ;Switch_B1.c: 178: }
  5602                           ;Switch_B1.c: 179: }
  5603  0F32  0008               	return
  5604  0F33                     l9758:	
  5605                           
  5606                           ;Switch_B1.c: 180: else
  5607                           ;Switch_B1.c: 181: {
  5608                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5609  0F33  0020               	movlb	0	; select bank0
  5610  0F34  086D               	movf	_Sw,w
  5611  0F35  0086               	movwf	6
  5612  0F36  3001               	movlw	1	; select bank2/3
  5613  0F37  0087               	movwf	7
  5614  0F38  1A01               	btfsc	1,4
  5615  0F39  2F78               	goto	l9772
  5616                           
  5617                           ;Switch_B1.c: 183: {
  5618                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5619  0F3A  086D               	movf	_Sw,w
  5620  0F3B  3E05               	addlw	5
  5621  0F3C  0086               	movwf	6
  5622  0F3D  3001               	movlw	1	; select bank2/3
  5623  0F3E  0087               	movwf	7
  5624  0F3F  3001               	movlw	1
  5625  0F40  0781               	addwf	1,f
  5626  0F41  3141               	addfsr 1,1
  5627  0F42  1803               	skipnc
  5628  0F43  0A81               	incf	1,f
  5629                           
  5630                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5631  0F44  086D               	movf	_Sw,w
  5632  0F45  3E05               	addlw	5
  5633  0F46  0086               	movwf	6
  5634  0F47  3001               	movlw	1	; select bank2/3
  5635  0F48  0087               	movwf	7
  5636  0F49  3F40               	moviw [0]fsr1
  5637  0F4A  00E5               	movwf	??_setSw_Main
  5638  0F4B  3F41               	moviw [1]fsr1
  5639  0F4C  00E6               	movwf	??_setSw_Main+1
  5640  0F4D  3000               	movlw	0
  5641  0F4E  0266               	subwf	??_setSw_Main+1,w
  5642  0F4F  3096               	movlw	150
  5643  0F50  1903               	skipnz
  5644  0F51  0265               	subwf	??_setSw_Main,w
  5645  0F52  1C03               	skipc
  5646  0F53  0008               	return
  5647                           
  5648                           ;Switch_B1.c: 186: {
  5649                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5650  0F54  086D               	movf	_Sw,w
  5651  0F55  3E05               	addlw	5
  5652  0F56  0086               	movwf	6
  5653  0F57  3001               	movlw	1	; select bank2/3
  5654  0F58  0087               	movwf	7
  5655  0F59  3000               	movlw	0
  5656  0F5A  3FC0               	movwi [0]fsr1
  5657  0F5B  3FC1               	movwi [1]fsr1
  5658                           
  5659                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5660  0F5C  086D               	movf	_Sw,w
  5661  0F5D  0086               	movwf	6
  5662  0F5E  3001               	movlw	1	; select bank2/3
  5663  0F5F  0087               	movwf	7
  5664  0F60  1601               	bsf	1,4
  5665                           
  5666                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5667  0F61  01A2               	clrf	setRF_Learn@command
  5668  0F62  0AA2               	incf	setRF_Learn@command,f
  5669  0F63  3001               	movlw	1
  5670  0F64  31A4  242A  318E   	fcall	_setRF_Learn
  5671                           
  5672                           ;Switch_B1.c: 194: if(TMain->First)
  5673  0F67  0021               	movlb	1	; select bank1
  5674  0F68  086A               	movf	_TMain^(0+128),w
  5675  0F69  3E03               	addlw	3
  5676  0F6A  0086               	movwf	6
  5677  0F6B  3001               	movlw	1	; select bank2/3
  5678  0F6C  0087               	movwf	7
  5679  0F6D  1C81               	btfss	1,1
  5680  0F6E  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 195: {
  5683                           ;Switch_B1.c: 196: setBuz(2,100);
  5684  0F6F  3064               	movlw	100
  5685  0F70  0020               	movlb	0	; select bank0
  5686  0F71  00A6               	movwf	setBuz@time
  5687  0F72  3000               	movlw	0
  5688  0F73  00A7               	movwf	setBuz@time+1
  5689  0F74  3002               	movlw	2
  5690  0F75  3192  220A         	fcall	_setBuz
  5691                           
  5692                           ;Switch_B1.c: 197: }
  5693                           ;Switch_B1.c: 199: }
  5694                           ;Switch_B1.c: 200: }
  5695  0F77  0008               	return
  5696  0F78                     l9772:	
  5697                           
  5698                           ;Switch_B1.c: 201: else
  5699                           ;Switch_B1.c: 202: {
  5700                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5701  0F78  0020               	movlb	0	; select bank0
  5702  0F79  086D               	movf	_Sw,w
  5703  0F7A  0086               	movwf	6
  5704  0F7B  3001               	movlw	1	; select bank2/3
  5705  0F7C  0087               	movwf	7
  5706  0F7D  1A81               	btfsc	1,5
  5707  0F7E  0008               	return
  5708                           
  5709                           ;Switch_B1.c: 204: {
  5710                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5711  0F7F  086D               	movf	_Sw,w
  5712  0F80  3E07               	addlw	7
  5713  0F81  0086               	movwf	6
  5714  0F82  3001               	movlw	1	; select bank2/3
  5715  0F83  0087               	movwf	7
  5716  0F84  3001               	movlw	1
  5717  0F85  0781               	addwf	1,f
  5718  0F86  3141               	addfsr 1,1
  5719  0F87  1803               	skipnc
  5720  0F88  0A81               	incf	1,f
  5721                           
  5722                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5723  0F89  086D               	movf	_Sw,w
  5724  0F8A  3E07               	addlw	7
  5725  0F8B  0086               	movwf	6
  5726  0F8C  3001               	movlw	1	; select bank2/3
  5727  0F8D  0087               	movwf	7
  5728  0F8E  3F40               	moviw [0]fsr1
  5729  0F8F  00E5               	movwf	??_setSw_Main
  5730  0F90  3F41               	moviw [1]fsr1
  5731  0F91  00E6               	movwf	??_setSw_Main+1
  5732  0F92  3001               	movlw	1
  5733  0F93  0266               	subwf	??_setSw_Main+1,w
  5734  0F94  302C               	movlw	44
  5735  0F95  1903               	skipnz
  5736  0F96  0265               	subwf	??_setSw_Main,w
  5737  0F97  1C03               	skipc
  5738  0F98  0008               	return
  5739                           
  5740                           ;Switch_B1.c: 207: {
  5741                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5742  0F99  086D               	movf	_Sw,w
  5743  0F9A  3E07               	addlw	7
  5744  0F9B  0086               	movwf	6
  5745  0F9C  3001               	movlw	1	; select bank2/3
  5746  0F9D  0087               	movwf	7
  5747  0F9E  3000               	movlw	0
  5748  0F9F  3FC0               	movwi [0]fsr1
  5749  0FA0  3FC1               	movwi [1]fsr1
  5750                           
  5751                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5752  0FA1  086D               	movf	_Sw,w
  5753  0FA2  0086               	movwf	6
  5754  0FA3  3001               	movlw	1	; select bank2/3
  5755  0FA4  0087               	movwf	7
  5756  0FA5  1681               	bsf	1,5
  5757                           
  5758                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5759  0FA6  01A2               	clrf	setRF_Learn@command
  5760  0FA7  3001               	movlw	1
  5761  0FA8  31A4  242A         	fcall	_setRF_Learn
  5762                           
  5763                           ;Switch_B1.c: 215: }
  5764                           ;Switch_B1.c: 216: }
  5765                           ;Switch_B1.c: 217: }
  5766                           ;Switch_B1.c: 218: }
  5767                           ;Switch_B1.c: 219: }
  5768                           ;Switch_B1.c: 220: }
  5769  0FAA  0008               	return
  5770  0FAB                     l9782:	
  5771                           
  5772                           ;Switch_B1.c: 221: else
  5773                           ;Switch_B1.c: 222: {
  5774                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5775  0FAB  0020               	movlb	0	; select bank0
  5776  0FAC  086D               	movf	_Sw,w
  5777  0FAD  0086               	movwf	6
  5778  0FAE  3001               	movlw	1	; select bank2/3
  5779  0FAF  0087               	movwf	7
  5780  0FB0  1D01               	btfss	1,2
  5781  0FB1  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 224: {
  5784                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5785  0FB2  3001               	movlw	1
  5786  0FB3  00E5               	movwf	??_setSw_Main
  5787  0FB4  086D               	movf	_Sw,w
  5788  0FB5  3E02               	addlw	2
  5789  0FB6  0086               	movwf	6
  5790  0FB7  3001               	movlw	1	; select bank2/3
  5791  0FB8  0087               	movwf	7
  5792  0FB9  0865               	movf	??_setSw_Main,w
  5793  0FBA  0781               	addwf	1,f
  5794                           
  5795                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5796  0FBB  086D               	movf	_Sw,w
  5797  0FBC  3E02               	addlw	2
  5798  0FBD  0086               	movwf	6
  5799  0FBE  3001               	movlw	1	; select bank2/3
  5800  0FBF  0087               	movwf	7
  5801  0FC0  3005               	movlw	5
  5802  0FC1  0201               	subwf	1,w
  5803  0FC2  1C03               	skipc
  5804  0FC3  0008               	return
  5805                           
  5806                           ;Switch_B1.c: 227: {
  5807                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5808  0FC4  086D               	movf	_Sw,w
  5809  0FC5  3E02               	addlw	2
  5810  0FC6  0086               	movwf	6
  5811  0FC7  3001               	movlw	1	; select bank2/3
  5812  0FC8  0087               	movwf	7
  5813  0FC9  0181               	clrf	1
  5814                           
  5815                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5816  0FCA  086D               	movf	_Sw,w
  5817  0FCB  0086               	movwf	6
  5818  0FCC  3001               	movlw	1	; select bank2/3
  5819  0FCD  0087               	movwf	7
  5820  0FCE  1101               	bcf	1,2
  5821                           
  5822                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5823  0FCF  086D               	movf	_Sw,w
  5824  0FD0  3E03               	addlw	3
  5825  0FD1  0086               	movwf	6
  5826  0FD2  3001               	movlw	1	; select bank2/3
  5827  0FD3  0087               	movwf	7
  5828  0FD4  3000               	movlw	0
  5829  0FD5  3FC0               	movwi [0]fsr1
  5830  0FD6  3FC1               	movwi [1]fsr1
  5831                           
  5832                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5833  0FD7  086D               	movf	_Sw,w
  5834  0FD8  0086               	movwf	6
  5835  0FD9  3001               	movlw	1	; select bank2/3
  5836  0FDA  0087               	movwf	7
  5837  0FDB  1181               	bcf	1,3
  5838                           
  5839                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5840  0FDC  086D               	movf	_Sw,w
  5841  0FDD  3E05               	addlw	5
  5842  0FDE  0086               	movwf	6
  5843  0FDF  3001               	movlw	1	; select bank2/3
  5844  0FE0  0087               	movwf	7
  5845  0FE1  3000               	movlw	0
  5846  0FE2  3FC0               	movwi [0]fsr1
  5847  0FE3  3FC1               	movwi [1]fsr1
  5848                           
  5849                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5850  0FE4  086D               	movf	_Sw,w
  5851  0FE5  0086               	movwf	6
  5852  0FE6  3001               	movlw	1	; select bank2/3
  5853  0FE7  0087               	movwf	7
  5854  0FE8  1201               	bcf	1,4
  5855                           
  5856                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5857  0FE9  086D               	movf	_Sw,w
  5858  0FEA  3E07               	addlw	7
  5859  0FEB  0086               	movwf	6
  5860  0FEC  3001               	movlw	1	; select bank2/3
  5861  0FED  0087               	movwf	7
  5862  0FEE  3000               	movlw	0
  5863  0FEF  3FC0               	movwi [0]fsr1
  5864  0FF0  3FC1               	movwi [1]fsr1
  5865                           
  5866                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5867  0FF1  086D               	movf	_Sw,w
  5868  0FF2  0086               	movwf	6
  5869  0FF3  3001               	movlw	1	; select bank2/3
  5870  0FF4  0087               	movwf	7
  5871  0FF5  1281               	bcf	1,5
  5872                           
  5873                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5874  0FF6  0869               	movf	setSw_Main@sw,w
  5875  0FF7  3191  2199  318E   	fcall	_Sw_DimmerOffFunc
  5876                           
  5877                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5878  0FFA  0020               	movlb	0	; select bank0
  5879  0FFB  01A2               	clrf	setRF_Learn@command
  5880  0FFC  3001               	movlw	1
  5881  0FFD  31A4  242A         	fcall	_setRF_Learn
  5882  0FFF  0008               	return
  5883  1000                     __end_of_setSw_Main:	
  5884                           
  5885                           	psect	text12
  5886  242A                     __ptext12:	
  5887 ;; *************** function _setRF_Learn *****************
  5888 ;; Defined at:
  5889 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  rf              1    wreg     unsigned char 
  5892 ;;  command         1    2[BANK0 ] unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  rf              1    3[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5904 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    5
  5911 ;; This function calls:
  5912 ;;		_RfPointSelect
  5913 ;; This function is called by:
  5914 ;;		_setSw_Main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _setRF_Learn
  5920  242A                     _setRF_Learn:	
  5921                           
  5922                           ;incstack = 0
  5923                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5924                           ;setRF_Learn@rf stored from wreg
  5925  242A  0020               	movlb	0	; select bank0
  5926  242B  00A3               	movwf	setRF_Learn@rf
  5927                           
  5928                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5929  242C  0823               	movf	setRF_Learn@rf,w
  5930  242D  31A3  235E         	fcall	_RfPointSelect
  5931                           
  5932                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5933  242F  087C               	movf	_RF,w
  5934  2430  0086               	movwf	6
  5935  2431  0187               	clrf	7
  5936  2432  0020               	movlb	0	; select bank0
  5937  2433  0822               	movf	setRF_Learn@command,w
  5938  2434  1301               	bcf	1,6
  5939  2435  1D03               	skipz
  5940  2436  1701               	bsf	1,6
  5941  2437  0008               	return
  5942  2438                     __end_of_setRF_Learn:	
  5943                           
  5944                           	psect	text13
  5945  112A                     __ptext13:	
  5946 ;; *************** function _Sw_DimmerOnFunc *****************
  5947 ;; Defined at:
  5948 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  sw              1    wreg     unsigned char 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  sw              1   67[BANK0 ] unsigned char 
  5953 ;;  Idle            1   66[BANK0 ] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;		None               void
  5956 ;; Registers used:
  5957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;Total ram usage:        2 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    8
  5970 ;; This function calls:
  5971 ;;		_setBuz
  5972 ;;		_setDimmerLights_Switch
  5973 ;;		_setDimmerLights_Trigger
  5974 ;;		_setRFSW_Status
  5975 ;;		_setRF_DimmerLights
  5976 ;;		_setTxData
  5977 ;; This function is called by:
  5978 ;;		_setSw_Main
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _Sw_DimmerOnFunc
  5984  112A                     _Sw_DimmerOnFunc:	
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5988                           ;Sw_DimmerOnFunc@sw stored from wreg
  5989  112A  0020               	movlb	0	; select bank0
  5990  112B  00E3               	movwf	Sw_DimmerOnFunc@sw
  5991                           
  5992                           ;Switch_B1.c: 253: char Idle=1;
  5993  112C  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5994  112D  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5995                           
  5996                           ;Switch_B1.c: 270: if(sw == 1)
  5997  112E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5998  112F  3A01               	xorlw	1
  5999  1130  1D03               	skipz
  6000  1131  2934               	goto	l9266
  6001                           
  6002                           ;Switch_B1.c: 271: {
  6003                           ;Switch_B1.c: 272: Idle=(DimmerLights22->AdjGo)?0:1;
  6004  1132  087A               	movf	_DimmerLights22,w
  6005  1133  2939               	goto	L3
  6006  1134                     l9266:	
  6007                           ;Switch_B1.c: 273: }
  6008                           
  6009                           
  6010                           ;Switch_B1.c: 274: else if(sw == 2)
  6011  1134  0863               	movf	Sw_DimmerOnFunc@sw,w
  6012  1135  3A02               	xorlw	2
  6013  1136  1D03               	skipz
  6014  1137  2944               	goto	l9270
  6015                           
  6016                           ;Switch_B1.c: 275: {
  6017                           ;Switch_B1.c: 276: Idle=(DimmerLights11->AdjGo)?0:1;
  6018  1138  0879               	movf	_DimmerLights11,w
  6019  1139                     L3:	
  6020  1139  3E09               	addlw	9
  6021  113A  0086               	movwf	6
  6022  113B  3001               	movlw	1	; select bank2/3
  6023  113C  0087               	movwf	7
  6024  113D  1003               	clrc
  6025  113E  1D01               	btfss	1,2
  6026  113F  1403               	setc
  6027  1140  3000               	movlw	0
  6028  1141  1803               	btfsc	3,0
  6029  1142  3001               	movlw	1
  6030  1143  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6031  1144                     l9270:	
  6032                           
  6033                           ;Switch_B1.c: 277: }
  6034                           ;Switch_B1.c: 280: if(Idle)
  6035  1144  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6036  1145  1903               	btfsc	3,2
  6037  1146  0008               	return
  6038                           
  6039                           ;Switch_B1.c: 281: {
  6040                           ;Switch_B1.c: 282: Sw->Flag=1;
  6041  1147  086D               	movf	_Sw,w
  6042  1148  0086               	movwf	6
  6043  1149  3001               	movlw	1	; select bank2/3
  6044  114A  0087               	movwf	7
  6045  114B  1781               	bsf	1,7
  6046                           
  6047                           ;Switch_B1.c: 283: setBuz(1,100);
  6048  114C  3064               	movlw	100
  6049  114D  00A6               	movwf	setBuz@time
  6050  114E  3000               	movlw	0
  6051  114F  00A7               	movwf	setBuz@time+1
  6052  1150  3001               	movlw	1
  6053  1151  3192  220A  3191   	fcall	_setBuz
  6054                           
  6055                           ;Switch_B1.c: 284: if(!Sw->Status)
  6056  1154  0020               	movlb	0	; select bank0
  6057  1155  086D               	movf	_Sw,w
  6058  1156  0086               	movwf	6
  6059  1157  3001               	movlw	1	; select bank2/3
  6060  1158  0087               	movwf	7
  6061  1159  1B01               	btfsc	1,6
  6062  115A  2986               	goto	l9290
  6063                           
  6064                           ;Switch_B1.c: 285: {
  6065                           ;Switch_B1.c: 286: Sw->Status=1;
  6066  115B  086D               	movf	_Sw,w
  6067  115C  0086               	movwf	6
  6068  115D  3001               	movlw	1	; select bank2/3
  6069  115E  0087               	movwf	7
  6070  115F  1701               	bsf	1,6
  6071                           
  6072                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  6073  1160  01A2               	clrf	setRFSW_Status@command
  6074  1161  0AA2               	incf	setRFSW_Status@command,f
  6075  1162  0863               	movf	Sw_DimmerOnFunc@sw,w
  6076  1163  31A4  2438  3191   	fcall	_setRFSW_Status
  6077                           
  6078                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  6079  1166  0020               	movlb	0	; select bank0
  6080  1167  01A2               	clrf	setDimmerLights_Trigger@command
  6081  1168  0AA2               	incf	setDimmerLights_Trigger@command,f
  6082  1169  0863               	movf	Sw_DimmerOnFunc@sw,w
  6083  116A  31A4  2476  3191   	fcall	_setDimmerLights_Trigger
  6084                           
  6085                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  6086  116D  0020               	movlb	0	; select bank0
  6087  116E  01A2               	clrf	setDimmerLights_Switch@command
  6088  116F  0AA2               	incf	setDimmerLights_Switch@command,f
  6089  1170  0863               	movf	Sw_DimmerOnFunc@sw,w
  6090  1171  31A4  2466  3191   	fcall	_setDimmerLights_Switch
  6091                           
  6092                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  6093  1174  0020               	movlb	0	; select bank0
  6094  1175  086D               	movf	_Sw,w
  6095  1176  0086               	movwf	6
  6096  1177  3001               	movlw	1	; select bank2/3
  6097  1178  0087               	movwf	7
  6098  1179  3000               	movlw	0
  6099  117A  1B01               	btfsc	1,6
  6100  117B  3001               	movlw	1
  6101  117C  00DD               	movwf	setRF_DimmerLights@on
  6102  117D  0863               	movf	Sw_DimmerOnFunc@sw,w
  6103  117E  319F  2795  3191   	fcall	_setRF_DimmerLights
  6104                           
  6105                           ;Switch_B1.c: 293: setTxData(1);
  6106  1181  3001               	movlw	1
  6107  1182  3189  21BD         	fcall	_setTxData
  6108                           
  6109                           ;Switch_B1.c: 294: }
  6110  1184  0020               	movlb	0	; select bank0
  6111  1185  0008               	return
  6112  1186                     l9290:	
  6113                           
  6114                           ;Switch_B1.c: 295: else
  6115                           ;Switch_B1.c: 296: {
  6116                           ;Switch_B1.c: 297: Sw->Status=0;
  6117  1186  0020               	movlb	0	; select bank0
  6118  1187  086D               	movf	_Sw,w
  6119  1188  0086               	movwf	6
  6120  1189  3001               	movlw	1	; select bank2/3
  6121  118A  0087               	movwf	7
  6122  118B  1301               	bcf	1,6
  6123                           
  6124                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6125  118C  086D               	movf	_Sw,w
  6126  118D  0086               	movwf	6
  6127  118E  3001               	movlw	1	; select bank2/3
  6128  118F  0087               	movwf	7
  6129  1190  3000               	movlw	0
  6130  1191  1B01               	btfsc	1,6
  6131  1192  3001               	movlw	1
  6132  1193  00A2               	movwf	setRFSW_Status@command
  6133  1194  0863               	movf	Sw_DimmerOnFunc@sw,w
  6134  1195  31A4  2438         	fcall	_setRFSW_Status
  6135  1197  0020               	movlb	0	; select bank0
  6136  1198  0008               	return
  6137  1199                     __end_of_Sw_DimmerOnFunc:	
  6138                           
  6139                           	psect	text14
  6140  1199                     __ptext14:	
  6141 ;; *************** function _Sw_DimmerOffFunc *****************
  6142 ;; Defined at:
  6143 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  sw              1    wreg     unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  sw              1   68[BANK0 ] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;		None               void
  6150 ;; Registers used:
  6151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;Total ram usage:        3 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    8
  6164 ;; This function calls:
  6165 ;;		_setDelayOff_GO
  6166 ;;		_setDimmerLights_AdjGo
  6167 ;;		_setDimmerLights_Switch
  6168 ;;		_setDimmerLights_Trigger
  6169 ;;		_setDimmerLights_TriggerAdj
  6170 ;;		_setRF_DimmerLights
  6171 ;;		_setTxData
  6172 ;; This function is called by:
  6173 ;;		_setSw_Main
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _Sw_DimmerOffFunc
  6179  1199                     _Sw_DimmerOffFunc:	
  6180                           
  6181                           ;incstack = 0
  6182                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6183                           ;Sw_DimmerOffFunc@sw stored from wreg
  6184  1199  0020               	movlb	0	; select bank0
  6185  119A  00E4               	movwf	Sw_DimmerOffFunc@sw
  6186                           
  6187                           ;Switch_B1.c: 305: if(Sw->Flag)
  6188  119B  086D               	movf	_Sw,w
  6189  119C  0086               	movwf	6
  6190  119D  3001               	movlw	1	; select bank2/3
  6191  119E  0087               	movwf	7
  6192  119F  1F81               	btfss	1,7
  6193  11A0  0008               	return
  6194                           
  6195                           ;Switch_B1.c: 306: {
  6196                           ;Switch_B1.c: 307: Sw->Flag=0;
  6197  11A1  086D               	movf	_Sw,w
  6198  11A2  0086               	movwf	6
  6199  11A3  3001               	movlw	1	; select bank2/3
  6200  11A4  0087               	movwf	7
  6201  11A5  1381               	bcf	1,7
  6202                           
  6203                           ;Switch_B1.c: 308: if(Sw->Status)
  6204  11A6  086D               	movf	_Sw,w
  6205  11A7  0086               	movwf	6
  6206  11A8  3001               	movlw	1	; select bank2/3
  6207  11A9  0087               	movwf	7
  6208  11AA  1F01               	btfss	1,6
  6209  11AB  29E5               	goto	l9322
  6210                           
  6211                           ;Switch_B1.c: 309: {
  6212                           ;Switch_B1.c: 310: if(Sw->Adj)
  6213  11AC  0A6D               	incf	_Sw,w
  6214  11AD  0086               	movwf	6
  6215  11AE  3001               	movlw	1	; select bank2/3
  6216  11AF  0087               	movwf	7
  6217  11B0  1C01               	btfss	1,0
  6218  11B1  0008               	return
  6219                           
  6220                           ;Switch_B1.c: 311: {
  6221                           ;Switch_B1.c: 312: Sw->Adj=0;
  6222  11B2  0A6D               	incf	_Sw,w
  6223  11B3  0086               	movwf	6
  6224  11B4  3001               	movlw	1	; select bank2/3
  6225  11B5  0087               	movwf	7
  6226  11B6  1001               	bcf	1,0
  6227                           
  6228                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6229  11B7  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6230  11B8  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6231  11B9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6232  11BA  31A4  24C6  3191   	fcall	_setDimmerLights_TriggerAdj
  6233                           
  6234                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6235  11BD  0020               	movlb	0	; select bank0
  6236  11BE  01A2               	clrf	setDimmerLights_AdjGo@command
  6237  11BF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6238  11C0  31A4  24B6  3191   	fcall	_setDimmerLights_AdjGo
  6239                           
  6240                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6241  11C3  0020               	movlb	0	; select bank0
  6242  11C4  0864               	movf	Sw_DimmerOffFunc@sw,w
  6243  11C5  3E1A               	addlw	26
  6244  11C6  076F               	addwf	_Product,w
  6245  11C7  00E2               	movwf	??_Sw_DimmerOffFunc
  6246  11C8  0862               	movf	??_Sw_DimmerOffFunc,w
  6247  11C9  0086               	movwf	6
  6248  11CA  3001               	movlw	1	; select bank2/3
  6249  11CB  0087               	movwf	7
  6250  11CC  0801               	movf	1,w
  6251  11CD  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6252  11CE  086F               	movf	_Product,w
  6253  11CF  3E11               	addlw	17
  6254  11D0  0086               	movwf	6
  6255  11D1  3001               	movlw	1	; select bank2/3
  6256  11D2  0087               	movwf	7
  6257  11D3  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6258  11D4  0081               	movwf	1
  6259                           
  6260                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6261  11D5  086D               	movf	_Sw,w
  6262  11D6  0086               	movwf	6
  6263  11D7  3001               	movlw	1	; select bank2/3
  6264  11D8  0087               	movwf	7
  6265  11D9  3000               	movlw	0
  6266  11DA  1B01               	btfsc	1,6
  6267  11DB  3001               	movlw	1
  6268  11DC  00DD               	movwf	setRF_DimmerLights@on
  6269  11DD  0864               	movf	Sw_DimmerOffFunc@sw,w
  6270  11DE  319F  2795  3191   	fcall	_setRF_DimmerLights
  6271                           
  6272                           ;Switch_B1.c: 318: setTxData(1);
  6273  11E1  3001               	movlw	1
  6274  11E2  3189  21BD         	fcall	_setTxData
  6275                           
  6276                           ;Switch_B1.c: 320: }
  6277                           ;Switch_B1.c: 321: }
  6278  11E4  0008               	return
  6279  11E5                     l9322:	
  6280                           
  6281                           ;Switch_B1.c: 322: else
  6282                           ;Switch_B1.c: 323: {
  6283                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6284  11E5  0020               	movlb	0	; select bank0
  6285  11E6  01A2               	clrf	setDimmerLights_Trigger@command
  6286  11E7  0AA2               	incf	setDimmerLights_Trigger@command,f
  6287  11E8  0864               	movf	Sw_DimmerOffFunc@sw,w
  6288  11E9  31A4  2476  3191   	fcall	_setDimmerLights_Trigger
  6289                           
  6290                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6291  11EC  0020               	movlb	0	; select bank0
  6292  11ED  01A2               	clrf	setDimmerLights_Switch@command
  6293  11EE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6294  11EF  31A4  2466  3191   	fcall	_setDimmerLights_Switch
  6295                           
  6296                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6297  11F2  0020               	movlb	0	; select bank0
  6298  11F3  01A3               	clrf	setDelayOff_GO@command
  6299  11F4  01A4               	clrf	setDelayOff_GO@value
  6300  11F5  0864               	movf	Sw_DimmerOffFunc@sw,w
  6301  11F6  319E  260F  3191   	fcall	_setDelayOff_GO
  6302                           
  6303                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6304  11F9  0020               	movlb	0	; select bank0
  6305  11FA  086D               	movf	_Sw,w
  6306  11FB  0086               	movwf	6
  6307  11FC  3001               	movlw	1	; select bank2/3
  6308  11FD  0087               	movwf	7
  6309  11FE  3000               	movlw	0
  6310  11FF  1B01               	btfsc	1,6
  6311  1200  3001               	movlw	1
  6312  1201  00DD               	movwf	setRF_DimmerLights@on
  6313  1202  0864               	movf	Sw_DimmerOffFunc@sw,w
  6314  1203  319F  2795  3191   	fcall	_setRF_DimmerLights
  6315                           
  6316                           ;Switch_B1.c: 329: setTxData(1);
  6317  1206  3001               	movlw	1
  6318  1207  3189  21BD         	fcall	_setTxData
  6319  1209  0008               	return
  6320  120A                     __end_of_Sw_DimmerOffFunc:	
  6321                           
  6322                           	psect	text15
  6323  27DA                     __ptext15:	
  6324 ;; *************** function _Sw_DimmerAdjFunc *****************
  6325 ;; Defined at:
  6326 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  sw              1    wreg     unsigned char 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  sw              1    4[BANK0 ] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        1 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    6
  6347 ;; This function calls:
  6348 ;;		_setDimmerLights_AdjGo
  6349 ;;		_setDimmerLights_TriggerAdj
  6350 ;;		_setRFSW_Status
  6351 ;; This function is called by:
  6352 ;;		_setSw_Main
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           
  6357                           ;psect for function _Sw_DimmerAdjFunc
  6358  27DA                     _Sw_DimmerAdjFunc:	
  6359                           
  6360                           ;incstack = 0
  6361                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6362                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6363  27DA  0020               	movlb	0	; select bank0
  6364  27DB  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6365                           
  6366                           ;Switch_B1.c: 336: if(Sw->Flag)
  6367  27DC  086D               	movf	_Sw,w
  6368  27DD  0086               	movwf	6
  6369  27DE  3001               	movlw	1	; select bank2/3
  6370  27DF  0087               	movwf	7
  6371  27E0  1F81               	btfss	1,7
  6372  27E1  0008               	return
  6373                           
  6374                           ;Switch_B1.c: 337: {
  6375                           ;Switch_B1.c: 338: Sw->Adj=1;
  6376  27E2  0A6D               	incf	_Sw,w
  6377  27E3  0086               	movwf	6
  6378  27E4  3001               	movlw	1	; select bank2/3
  6379  27E5  0087               	movwf	7
  6380  27E6  1401               	bsf	1,0
  6381                           
  6382                           ;Switch_B1.c: 339: Sw->Status=1;
  6383  27E7  086D               	movf	_Sw,w
  6384  27E8  0086               	movwf	6
  6385  27E9  3001               	movlw	1	; select bank2/3
  6386  27EA  0087               	movwf	7
  6387  27EB  1701               	bsf	1,6
  6388                           
  6389                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  6390  27EC  01A2               	clrf	setRFSW_Status@command
  6391  27ED  0AA2               	incf	setRFSW_Status@command,f
  6392  27EE  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6393  27EF  31A4  2438  31A7   	fcall	_setRFSW_Status
  6394                           
  6395                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  6396  27F2  0020               	movlb	0	; select bank0
  6397  27F3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6398  27F4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6399  27F5  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6400  27F6  31A4  24C6  31A7   	fcall	_setDimmerLights_TriggerAdj
  6401                           
  6402                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  6403  27F9  0020               	movlb	0	; select bank0
  6404  27FA  01A2               	clrf	setDimmerLights_AdjGo@command
  6405  27FB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6406  27FC  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6407  27FD  31A4  24B6         	fcall	_setDimmerLights_AdjGo
  6408  27FF  0008               	return
  6409  2800                     __end_of_Sw_DimmerAdjFunc:	
  6410                           
  6411                           	psect	text16
  6412  24C6                     __ptext16:	
  6413 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6414 ;; Defined at:
  6415 ;;		line 450 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  lights          1    wreg     unsigned char 
  6418 ;;  command         1    2[BANK0 ] unsigned char 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  lights          1    3[BANK0 ] unsigned char 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6430 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;Total ram usage:        2 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    5
  6437 ;; This function calls:
  6438 ;;		_DimmerLightsPointSelect
  6439 ;; This function is called by:
  6440 ;;		_Sw_DimmerOffFunc
  6441 ;;		_Sw_DimmerAdjFunc
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _setDimmerLights_TriggerAdj
  6447  24C6                     _setDimmerLights_TriggerAdj:	
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6451                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6452  24C6  0020               	movlb	0	; select bank0
  6453  24C7  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6454                           
  6455                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6456  24C8  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6457  24C9  31A4  24E7         	fcall	_DimmerLightsPointSelect
  6458                           
  6459                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6460  24CB  0020               	movlb	0	; select bank0
  6461  24CC  086C               	movf	_DimmerLights,w
  6462  24CD  3E09               	addlw	9
  6463  24CE  0086               	movwf	6
  6464  24CF  3001               	movlw	1	; select bank2/3
  6465  24D0  0087               	movwf	7
  6466  24D1  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6467  24D2  1181               	bcf	1,3
  6468  24D3  1D03               	skipz
  6469  24D4  1581               	bsf	1,3
  6470  24D5  0008               	return
  6471  24D6                     __end_of_setDimmerLights_TriggerAdj:	
  6472                           
  6473                           	psect	text17
  6474  24B6                     __ptext17:	
  6475 ;; *************** function _setDimmerLights_AdjGo *****************
  6476 ;; Defined at:
  6477 ;;		line 440 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  lights          1    wreg     unsigned char 
  6480 ;;  command         1    2[BANK0 ] unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  lights          1    3[BANK0 ] unsigned char 
  6483 ;; Return value:  Size  Location     Type
  6484 ;;		None               void
  6485 ;; Registers used:
  6486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6492 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;Total ram usage:        2 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    5
  6499 ;; This function calls:
  6500 ;;		_DimmerLightsPointSelect
  6501 ;; This function is called by:
  6502 ;;		_Sw_DimmerOffFunc
  6503 ;;		_Sw_DimmerAdjFunc
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _setDimmerLights_AdjGo
  6509  24B6                     _setDimmerLights_AdjGo:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6513                           ;setDimmerLights_AdjGo@lights stored from wreg
  6514  24B6  0020               	movlb	0	; select bank0
  6515  24B7  00A3               	movwf	setDimmerLights_AdjGo@lights
  6516                           
  6517                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6518  24B8  0823               	movf	setDimmerLights_AdjGo@lights,w
  6519  24B9  31A4  24E7         	fcall	_DimmerLightsPointSelect
  6520                           
  6521                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6522  24BB  0020               	movlb	0	; select bank0
  6523  24BC  086C               	movf	_DimmerLights,w
  6524  24BD  3E09               	addlw	9
  6525  24BE  0086               	movwf	6
  6526  24BF  3001               	movlw	1	; select bank2/3
  6527  24C0  0087               	movwf	7
  6528  24C1  0822               	movf	setDimmerLights_AdjGo@command,w
  6529  24C2  1101               	bcf	1,2
  6530  24C3  1D03               	skipz
  6531  24C4  1501               	bsf	1,2
  6532  24C5  0008               	return
  6533  24C6                     __end_of_setDimmerLights_AdjGo:	
  6534                           
  6535                           	psect	text18
  6536  240F                     __ptext18:	
  6537 ;; *************** function _Switch_Initialization *****************
  6538 ;; Defined at:
  6539 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;		None
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;		None               void
  6546 ;; Registers used:
  6547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;Total ram usage:        0 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    7
  6560 ;; This function calls:
  6561 ;;		_TouchPower
  6562 ;;		_setSw_Initialization
  6563 ;; This function is called by:
  6564 ;;		_main
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _Switch_Initialization
  6570  240F                     _Switch_Initialization:	
  6571                           
  6572                           ;Switch_B1.c: 40: TouchPower();
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6576  240F  31A2  22D9  31A4   	fcall	_TouchPower
  6577                           
  6578                           ;Switch_B1.c: 42: WPUB1=0;
  6579  2412  0024               	movlb	4	; select bank4
  6580  2413  108D               	bcf	13,1	;volatile
  6581                           
  6582                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6583  2414  3001               	movlw	1
  6584  2415  31A3  2324  31A4   	fcall	_setSw_Initialization
  6585                           
  6586                           ;Switch_B1.c: 54: setSw_Initialization(2);
  6587  2418  3002               	movlw	2
  6588  2419  31A3  2324         	fcall	_setSw_Initialization
  6589  241B  0008               	return
  6590  241C                     __end_of_Switch_Initialization:	
  6591                           
  6592                           	psect	text19
  6593  2324                     __ptext19:	
  6594 ;; *************** function _setSw_Initialization *****************
  6595 ;; Defined at:
  6596 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  sw              1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  sw              1    4[BANK0 ] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;		None               void
  6603 ;; Registers used:
  6604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;Total ram usage:        1 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    6
  6617 ;; This function calls:
  6618 ;;		_setLED
  6619 ;; This function is called by:
  6620 ;;		_Switch_Initialization
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _setSw_Initialization
  6626  2324                     _setSw_Initialization:	
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6630                           ;setSw_Initialization@sw stored from wreg
  6631  2324  0020               	movlb	0	; select bank0
  6632  2325  00A4               	movwf	setSw_Initialization@sw
  6633                           
  6634                           ;Switch_B1.c: 80: setLED(sw,1);
  6635  2326  01A2               	clrf	setLED@command
  6636  2327  0AA2               	incf	setLED@command,f
  6637  2328  0824               	movf	setSw_Initialization@sw,w
  6638  2329  3188  2002         	fcall	_setLED
  6639  232B  0008               	return
  6640  232C                     __end_of_setSw_Initialization:	
  6641                           
  6642                           	psect	text20
  6643  22D9                     __ptext20:	
  6644 ;; *************** function _TouchPower *****************
  6645 ;; Defined at:
  6646 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;		None               void
  6653 ;; Registers used:
  6654 ;;		None
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;Total ram usage:        0 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    4
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_Switch_Initialization
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           
  6675                           ;psect for function _TouchPower
  6676  22D9                     _TouchPower:	
  6677  22D9                     l2922:	
  6678                           ;Switch_B1.c: 11: while(!RC5)
  6679                           
  6680                           ;incstack = 0
  6681                           ; Regs used in _TouchPower: []
  6682                           
  6683  22D9  0020               	movlb	0	; select bank0
  6684  22DA  1A8E               	btfsc	14,5	;volatile
  6685  22DB  0008               	return
  6686                           
  6687                           ;Switch_B1.c: 12: RC5=1;
  6688  22DC  168E               	bsf	14,5	;volatile
  6689  22DD  2AD9               	goto	l2922
  6690  22DE                     __end_of_TouchPower:	
  6691                           
  6692                           	psect	text21
  6693  22D5                     __ptext21:	
  6694 ;; *************** function _RF_Main *****************
  6695 ;; Defined at:
  6696 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:   13
  6717 ;; This function calls:
  6718 ;;		_setRF_Main
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _RF_Main
  6726  22D5                     _RF_Main:	
  6727                           
  6728                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6732  22D5  3001               	movlw	1
  6733  22D6  3194  2483         	fcall	_setRF_Main
  6734  22D8  0008               	return
  6735  22D9                     __end_of_RF_Main:	
  6736                           
  6737                           	psect	text22
  6738  1483                     __ptext22:	
  6739 ;; *************** function _setRF_Main *****************
  6740 ;; Defined at:
  6741 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  rf              1    wreg     unsigned char 
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;  rf              1   74[BANK0 ] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;		None               void
  6748 ;; Registers used:
  6749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;Total ram usage:        3 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:   12
  6762 ;; This function calls:
  6763 ;;		_CC2500_RxData
  6764 ;;		_CC2500_TxData
  6765 ;;		_CC2500_WriteCommand
  6766 ;;		_RF_RxDisable
  6767 ;;		_RfPointSelect
  6768 ;;		_getRxData
  6769 ;;		_setINT_GO
  6770 ;; This function is called by:
  6771 ;;		_RF_Main
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           
  6776                           ;psect for function _setRF_Main
  6777  1483                     _setRF_Main:	
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6781                           ;setRF_Main@rf stored from wreg
  6782  1483  0020               	movlb	0	; select bank0
  6783  1484  00EA               	movwf	setRF_Main@rf
  6784                           
  6785                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6786  1485  086A               	movf	setRF_Main@rf,w
  6787  1486  31A3  235E  3194   	fcall	_RfPointSelect
  6788                           
  6789                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6790  1489  087C               	movf	_RF,w
  6791  148A  0086               	movwf	6
  6792  148B  0187               	clrf	7
  6793  148C  1C01               	btfss	1,0
  6794  148D  0008               	return
  6795                           
  6796                           ;RF_Control_B1.c: 62: {
  6797                           ;RF_Control_B1.c: 69: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  6798  148E  0020               	movlb	0	; select bank0
  6799  148F  01EB               	clrf	_setRF_Main$4404
  6800  1490  1F0C               	btfss	12,6	;volatile
  6801  1491  1A0C               	btfsc	12,4	;volatile
  6802  1492  2C97               	goto	l9660
  6803  1493  180C               	btfsc	12,0	;volatile
  6804  1494  2C97               	goto	l9660
  6805  1495  1C8D               	btfss	13,1	;volatile
  6806  1496  2C9E               	goto	l9664
  6807  1497                     l9660:	
  6808  1497  087C               	movf	_RF,w
  6809  1498  0086               	movwf	6
  6810  1499  0187               	clrf	7
  6811  149A  1B01               	btfsc	1,6
  6812  149B  2C9E               	goto	l9664
  6813  149C  01EB               	clrf	_setRF_Main$4404
  6814  149D  0AEB               	incf	_setRF_Main$4404,f
  6815  149E                     l9664:	
  6816  149E  087C               	movf	_RF,w
  6817  149F  0086               	movwf	6
  6818  14A0  0187               	clrf	7
  6819  14A1  086B               	movf	_setRF_Main$4404,w
  6820  14A2  1381               	bcf	1,7
  6821  14A3  1D03               	skipz
  6822  14A4  1781               	bsf	1,7
  6823                           
  6824                           ;RF_Control_B1.c: 77: if(!RF->Key)
  6825  14A5  087C               	movf	_RF,w
  6826  14A6  0086               	movwf	6
  6827  14A7  0187               	clrf	7
  6828  14A8  1B81               	btfsc	1,7
  6829  14A9  2CD6               	goto	l9686
  6830                           
  6831                           ;RF_Control_B1.c: 78: {
  6832                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  6833  14AA  087C               	movf	_RF,w
  6834  14AB  0086               	movwf	6
  6835  14AC  0187               	clrf	7
  6836  14AD  1C81               	btfss	1,1
  6837  14AE  2CBB               	goto	l9674
  6838                           
  6839                           ;RF_Control_B1.c: 80: {
  6840                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  6841  14AF  087C               	movf	_RF,w
  6842  14B0  0086               	movwf	6
  6843  14B1  0187               	clrf	7
  6844  14B2  1081               	bcf	1,1
  6845                           
  6846                           ;RF_Control_B1.c: 82: CC2500_RxData();
  6847  14B3  319E  26CC  3194   	fcall	_CC2500_RxData
  6848                           
  6849                           ;RF_Control_B1.c: 88: getRxData(1);
  6850  14B6  3001               	movlw	1
  6851  14B7  319D  250B  3194   	fcall	_getRxData
  6852                           
  6853                           ;RF_Control_B1.c: 91: }
  6854  14BA  2CDA               	goto	l9688
  6855  14BB                     l9674:	
  6856                           
  6857                           ;RF_Control_B1.c: 92: else
  6858                           ;RF_Control_B1.c: 93: {
  6859                           ;RF_Control_B1.c: 94: if(!RF->TransceiveGO)
  6860  14BB  087C               	movf	_RF,w
  6861  14BC  0086               	movwf	6
  6862  14BD  0187               	clrf	7
  6863  14BE  1901               	btfsc	1,2
  6864  14BF  2CDA               	goto	l9688
  6865                           
  6866                           ;RF_Control_B1.c: 95: {
  6867                           ;RF_Control_B1.c: 97: if(!RF->RxStatus)
  6868  14C0  087C               	movf	_RF,w
  6869  14C1  0086               	movwf	6
  6870  14C2  0187               	clrf	7
  6871  14C3  1981               	btfsc	1,3
  6872  14C4  2CDA               	goto	l9688
  6873                           
  6874                           ;RF_Control_B1.c: 98: {
  6875                           ;RF_Control_B1.c: 99: RF->RxStatus=1;
  6876  14C5  087C               	movf	_RF,w
  6877  14C6  0086               	movwf	6
  6878  14C7  0187               	clrf	7
  6879  14C8  1581               	bsf	1,3
  6880                           
  6881                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  6882  14C9  3036               	movlw	54
  6883  14CA  31A4  2456  3194   	fcall	_CC2500_WriteCommand
  6884                           
  6885                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x34);
  6886  14CD  3034               	movlw	52
  6887  14CE  31A4  2456  3194   	fcall	_CC2500_WriteCommand
  6888                           
  6889                           ;RF_Control_B1.c: 102: setINT_GO(1);
  6890  14D1  3001               	movlw	1
  6891  14D2  31A3  2335  3194   	fcall	_setINT_GO
  6892                           
  6893                           ;RF_Control_B1.c: 103: }
  6894                           ;RF_Control_B1.c: 105: }
  6895                           ;RF_Control_B1.c: 106: }
  6896                           ;RF_Control_B1.c: 107: }
  6897  14D5  2CDA               	goto	l9688
  6898  14D6                     l9686:	
  6899                           
  6900                           ;RF_Control_B1.c: 108: else
  6901                           ;RF_Control_B1.c: 109: {
  6902                           ;RF_Control_B1.c: 110: RF_RxDisable(1);
  6903  14D6  3001               	movlw	1
  6904  14D7  3198  2016  3194   	fcall	_RF_RxDisable
  6905  14DA                     l9688:	
  6906                           
  6907                           ;RF_Control_B1.c: 111: }
  6908                           ;RF_Control_B1.c: 112: if(RF->TransceiveGO)
  6909  14DA  087C               	movf	_RF,w
  6910  14DB  0086               	movwf	6
  6911  14DC  0187               	clrf	7
  6912  14DD  1D01               	btfss	1,2
  6913  14DE  0008               	return
  6914                           
  6915                           ;RF_Control_B1.c: 113: {
  6916                           ;RF_Control_B1.c: 114: RF_RxDisable(1);
  6917  14DF  3001               	movlw	1
  6918  14E0  3198  2016  3194   	fcall	_RF_RxDisable
  6919                           
  6920                           ;RF_Control_B1.c: 115: if(!RF->Debounce)
  6921  14E3  087C               	movf	_RF,w
  6922  14E4  0086               	movwf	6
  6923  14E5  0187               	clrf	7
  6924  14E6  1A81               	btfsc	1,5
  6925  14E7  2D00               	goto	l9702
  6926                           
  6927                           ;RF_Control_B1.c: 116: {
  6928                           ;RF_Control_B1.c: 117: RF->DebounceTime++;
  6929  14E8  3001               	movlw	1
  6930  14E9  0020               	movlb	0	; select bank0
  6931  14EA  00E9               	movwf	??_setRF_Main
  6932  14EB  0A7C               	incf	_RF,w
  6933  14EC  0086               	movwf	6
  6934  14ED  0187               	clrf	7
  6935  14EE  0869               	movf	??_setRF_Main,w
  6936  14EF  0781               	addwf	1,f
  6937                           
  6938                           ;RF_Control_B1.c: 118: if(RF->DebounceTime == 25)
  6939  14F0  0A7C               	incf	_RF,w
  6940  14F1  0086               	movwf	6
  6941  14F2  0187               	clrf	7
  6942  14F3  0801               	movf	1,w
  6943  14F4  3A19               	xorlw	25
  6944  14F5  1D03               	skipz
  6945  14F6  0008               	return
  6946                           
  6947                           ;RF_Control_B1.c: 119: {
  6948                           ;RF_Control_B1.c: 120: RF->DebounceTime=0;
  6949  14F7  0A7C               	incf	_RF,w
  6950  14F8  0086               	movwf	6
  6951  14F9  0187               	clrf	7
  6952  14FA  0181               	clrf	1
  6953                           
  6954                           ;RF_Control_B1.c: 121: RF->Debounce=1;
  6955  14FB  087C               	movf	_RF,w
  6956  14FC  0086               	movwf	6
  6957  14FD  0187               	clrf	7
  6958  14FE  1681               	bsf	1,5
  6959                           
  6960                           ;RF_Control_B1.c: 122: }
  6961                           ;RF_Control_B1.c: 123: }
  6962  14FF  0008               	return
  6963  1500                     l9702:	
  6964                           
  6965                           ;RF_Control_B1.c: 124: else
  6966                           ;RF_Control_B1.c: 125: {
  6967                           ;RF_Control_B1.c: 126: RF->Debounce=0;
  6968  1500  087C               	movf	_RF,w
  6969  1501  0086               	movwf	6
  6970  1502  0187               	clrf	7
  6971  1503  1281               	bcf	1,5
  6972                           
  6973                           ;RF_Control_B1.c: 127: RF->TransceiveGO=0;
  6974  1504  087C               	movf	_RF,w
  6975  1505  0086               	movwf	6
  6976  1506  0187               	clrf	7
  6977  1507  1101               	bcf	1,2
  6978                           
  6979                           ;RF_Control_B1.c: 128: CC2500_TxData();
  6980  1508  319C  243C         	fcall	_CC2500_TxData
  6981  150A  0008               	return
  6982  150B                     __end_of_setRF_Main:	
  6983                           
  6984                           	psect	text23
  6985  1D0B                     __ptext23:	
  6986 ;; *************** function _getRxData *****************
  6987 ;; Defined at:
  6988 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  rf              1    wreg     unsigned char 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  rf              1   72[BANK0 ] unsigned char 
  6993 ;;  i               1    0        unsigned char 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;		None               void
  6996 ;; Registers used:
  6997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;Total ram usage:        1 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:   11
  7010 ;; This function calls:
  7011 ;;		_RfPointSelect
  7012 ;;		_setControl_Lights_Table
  7013 ;;		_setLog_Code
  7014 ;; This function is called by:
  7015 ;;		_setRF_Main
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function _getRxData
  7021  1D0B                     _getRxData:	
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7025                           ;getRxData@rf stored from wreg
  7026  1D0B  0020               	movlb	0	; select bank0
  7027  1D0C  00E8               	movwf	getRxData@rf
  7028                           
  7029                           ;RF_Control_B1.c: 216: unsigned char i;
  7030                           ;RF_Control_B1.c: 217: RfPointSelect(rf);
  7031  1D0D  0868               	movf	getRxData@rf,w
  7032  1D0E  31A3  235E  319D   	fcall	_RfPointSelect
  7033                           
  7034                           ;RF_Control_B1.c: 218: if(RF->Learn)
  7035  1D11  087C               	movf	_RF,w
  7036  1D12  0086               	movwf	6
  7037  1D13  0187               	clrf	7
  7038  1D14  1F01               	btfss	1,6
  7039  1D15  2D22               	goto	l9214
  7040                           
  7041                           ;RF_Control_B1.c: 219: {
  7042                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7043  1D16  0021               	movlb	1	; select bank1
  7044  1D17  08A0               	movf	_RF_Data^(0+128),f
  7045  1D18  1D03               	skipz
  7046  1D19  0008               	return
  7047  1D1A  0821               	movf	(_RF_Data^(0+128)+1),w
  7048  1D1B  3A64               	xorlw	100
  7049  1D1C  1D03               	skipz
  7050  1D1D  0008               	return
  7051                           
  7052                           ;RF_Control_B1.c: 221: {
  7053                           ;RF_Control_B1.c: 222: setLog_Code(1);
  7054  1D1E  3001               	movlw	1
  7055  1D1F  3190  2008         	fcall	_setLog_Code
  7056                           
  7057                           ;RF_Control_B1.c: 223: }
  7058                           ;RF_Control_B1.c: 224: }
  7059  1D21  0008               	return
  7060  1D22                     l9214:	
  7061                           
  7062                           ;RF_Control_B1.c: 225: else
  7063                           ;RF_Control_B1.c: 226: {
  7064                           ;RF_Control_B1.c: 227: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7065  1D22  0021               	movlb	1	; select bank1
  7066  1D23  08A0               	movf	_RF_Data^(0+128),f
  7067  1D24  1D03               	skipz
  7068  1D25  0008               	return
  7069  1D26  0821               	movf	(_RF_Data^(0+128)+1),w
  7070  1D27  3A02               	xorlw	2
  7071  1D28  1D03               	skipz
  7072  1D29  0008               	return
  7073                           
  7074                           ;RF_Control_B1.c: 228: {
  7075                           ;RF_Control_B1.c: 229: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7076  1D2A  082C               	movf	(_RF_Data^(0+128)+12),w
  7077  1D2B  3AFF               	xorlw	255
  7078  1D2C  1D03               	skipz
  7079  1D2D  2D38               	goto	l9226
  7080  1D2E  082D               	movf	(_RF_Data^(0+128)+13),w
  7081  1D2F  3AFF               	xorlw	255
  7082  1D30  1D03               	skipz
  7083  1D31  2D38               	goto	l9226
  7084  1D32  082E               	movf	(_RF_Data^(0+128)+14),w
  7085  1D33  3AFF               	xorlw	255
  7086  1D34  1D03               	skipz
  7087  1D35  2D38               	goto	l9226
  7088                           
  7089                           ;RF_Control_B1.c: 230: {
  7090                           ;RF_Control_B1.c: 231: __nop();
  7091  1D36  0000               	nop
  7092                           
  7093                           ;RF_Control_B1.c: 232: }
  7094  1D37  0008               	return
  7095  1D38                     l9226:	
  7096                           
  7097                           ;RF_Control_B1.c: 233: else
  7098                           ;RF_Control_B1.c: 234: {
  7099                           ;RF_Control_B1.c: 235: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7100  1D38  0020               	movlb	0	; select bank0
  7101  1D39  086F               	movf	_Product,w
  7102  1D3A  3E0C               	addlw	12
  7103  1D3B  0086               	movwf	6
  7104  1D3C  3001               	movlw	1	; select bank2/3
  7105  1D3D  0087               	movwf	7
  7106  1D3E  0021               	movlb	1	; select bank1
  7107  1D3F  082C               	movf	(_RF_Data^(0+128)+12),w
  7108  1D40  0601               	xorwf	1,w
  7109  1D41  1D03               	skipz
  7110  1D42  0008               	return
  7111  1D43  0020               	movlb	0	; select bank0
  7112  1D44  086F               	movf	_Product,w
  7113  1D45  3E0D               	addlw	13
  7114  1D46  0086               	movwf	6
  7115  1D47  3001               	movlw	1	; select bank2/3
  7116  1D48  0087               	movwf	7
  7117  1D49  0021               	movlb	1	; select bank1
  7118  1D4A  082D               	movf	(_RF_Data^(0+128)+13),w
  7119  1D4B  0601               	xorwf	1,w
  7120  1D4C  1D03               	skipz
  7121  1D4D  0008               	return
  7122  1D4E  0020               	movlb	0	; select bank0
  7123  1D4F  086F               	movf	_Product,w
  7124  1D50  3E0E               	addlw	14
  7125  1D51  0086               	movwf	6
  7126  1D52  3001               	movlw	1	; select bank2/3
  7127  1D53  0087               	movwf	7
  7128  1D54  0021               	movlb	1	; select bank1
  7129  1D55  082E               	movf	(_RF_Data^(0+128)+14),w
  7130  1D56  0601               	xorwf	1,w
  7131  1D57  1D03               	skipz
  7132  1D58  0008               	return
  7133                           
  7134                           ;RF_Control_B1.c: 236: {
  7135                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  7136  1D59  3001               	movlw	1
  7137  1D5A  3195  259B         	fcall	_setControl_Lights_Table
  7138                           
  7139                           ;RF_Control_B1.c: 246: {
  7140                           ;RF_Control_B1.c: 247: ;
  7141                           
  7142                           ;RF_Control_B1.c: 242: {
  7143                           ;RF_Control_B1.c: 243: ;
  7144                           ;RF_Control_B1.c: 244: }
  7145                           
  7146                           ;RF_Control_B1.c: 238: }
  7147                           ;RF_Control_B1.c: 239: }
  7148                           ;RF_Control_B1.c: 240: }
  7149  1D5C  0008               	return
  7150  1D5D                     __end_of_getRxData:	
  7151                           
  7152                           	psect	text24
  7153  1008                     __ptext24:	
  7154 ;; *************** function _setLog_Code *****************
  7155 ;; Defined at:
  7156 ;;		line 256 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  rf              1    wreg     unsigned char 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  rf              1   11[BANK0 ] unsigned char 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;		None               void
  7163 ;; Registers used:
  7164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;Total ram usage:        2 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    6
  7177 ;; This function calls:
  7178 ;;		_RfPointSelect
  7179 ;;		_setBuz
  7180 ;; This function is called by:
  7181 ;;		_getRxData
  7182 ;; This function uses a non-reentrant model
  7183 ;;
  7184                           
  7185                           
  7186                           ;psect for function _setLog_Code
  7187  1008                     _setLog_Code:	
  7188                           
  7189                           ;incstack = 0
  7190                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7191                           ;setLog_Code@rf stored from wreg
  7192  1008  0020               	movlb	0	; select bank0
  7193  1009  00AB               	movwf	setLog_Code@rf
  7194                           
  7195                           ;RF_Control_B1.c: 258: RfPointSelect(rf);
  7196  100A  082B               	movf	setLog_Code@rf,w
  7197  100B  31A3  235E  3190   	fcall	_RfPointSelect
  7198                           
  7199                           ;RF_Control_B1.c: 259: Product->Data[12]=RF_Data[12];
  7200  100E  0021               	movlb	1	; select bank1
  7201  100F  082C               	movf	(_RF_Data^(0+128)+12),w
  7202  1010  0020               	movlb	0	; select bank0
  7203  1011  00AA               	movwf	??_setLog_Code
  7204  1012  086F               	movf	_Product,w
  7205  1013  3E0C               	addlw	12
  7206  1014  0086               	movwf	6
  7207  1015  3001               	movlw	1	; select bank2/3
  7208  1016  0087               	movwf	7
  7209  1017  082A               	movf	??_setLog_Code,w
  7210  1018  0081               	movwf	1
  7211                           
  7212                           ;RF_Control_B1.c: 260: Product->Data[13]=RF_Data[13];
  7213  1019  0021               	movlb	1	; select bank1
  7214  101A  082D               	movf	(_RF_Data^(0+128)+13),w
  7215  101B  0020               	movlb	0	; select bank0
  7216  101C  00AA               	movwf	??_setLog_Code
  7217  101D  086F               	movf	_Product,w
  7218  101E  3E0D               	addlw	13
  7219  101F  0086               	movwf	6
  7220  1020  3001               	movlw	1	; select bank2/3
  7221  1021  0087               	movwf	7
  7222  1022  082A               	movf	??_setLog_Code,w
  7223  1023  0081               	movwf	1
  7224                           
  7225                           ;RF_Control_B1.c: 261: Product->Data[14]=RF_Data[14];
  7226  1024  0021               	movlb	1	; select bank1
  7227  1025  082E               	movf	(_RF_Data^(0+128)+14),w
  7228  1026  0020               	movlb	0	; select bank0
  7229  1027  00AA               	movwf	??_setLog_Code
  7230  1028  086F               	movf	_Product,w
  7231  1029  3E0E               	addlw	14
  7232  102A  0086               	movwf	6
  7233  102B  3001               	movlw	1	; select bank2/3
  7234  102C  0087               	movwf	7
  7235  102D  082A               	movf	??_setLog_Code,w
  7236  102E  0081               	movwf	1
  7237                           
  7238                           ;RF_Control_B1.c: 262: setBuz(1,100);
  7239  102F  3064               	movlw	100
  7240  1030  00A6               	movwf	setBuz@time
  7241  1031  3000               	movlw	0
  7242  1032  00A7               	movwf	setBuz@time+1
  7243  1033  3001               	movlw	1
  7244  1034  3192  220A  3190   	fcall	_setBuz
  7245                           
  7246                           ;RF_Control_B1.c: 263: RF->Learn=0;
  7247  1037  087C               	movf	_RF,w
  7248  1038  0086               	movwf	6
  7249  1039  0187               	clrf	7
  7250  103A  1301               	bcf	1,6
  7251                           
  7252                           ;RF_Control_B1.c: 264: if(TMain->First)
  7253  103B  0021               	movlb	1	; select bank1
  7254  103C  086A               	movf	_TMain^(0+128),w
  7255  103D  3E03               	addlw	3
  7256  103E  0086               	movwf	6
  7257  103F  3001               	movlw	1	; select bank2/3
  7258  1040  0087               	movwf	7
  7259  1041  1C81               	btfss	1,1
  7260  1042  2849               	goto	l2706
  7261                           
  7262                           ;RF_Control_B1.c: 265: {
  7263                           ;RF_Control_B1.c: 266: Memory->LoopSave=1;
  7264  1043  0869               	movf	_Memory^(0+128),w
  7265  1044  3E22               	addlw	34
  7266  1045  0086               	movwf	6
  7267  1046  3002               	movlw	2	; select bank4/5
  7268  1047  0087               	movwf	7
  7269  1048  1501               	bsf	1,2
  7270  1049                     l2706:	
  7271                           
  7272                           ;RF_Control_B1.c: 267: }
  7273                           ;RF_Control_B1.c: 268: Memory->Modify=1;
  7274  1049  0869               	movf	_Memory^(0+128),w
  7275  104A  3E22               	addlw	34
  7276  104B  0086               	movwf	6
  7277  104C  3002               	movlw	2	; select bank4/5
  7278  104D  0087               	movwf	7
  7279  104E  1401               	bsf	1,0
  7280  104F  0008               	return
  7281  1050                     __end_of_setLog_Code:	
  7282                           
  7283                           	psect	text25
  7284  159B                     __ptext25:	
  7285 ;; *************** function _setControl_Lights_Table *****************
  7286 ;; Defined at:
  7287 ;;		line 271 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  rf              1    wreg     unsigned char 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  rf              1   71[BANK0 ] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;		None               void
  7294 ;; Registers used:
  7295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;Total ram usage:        1 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:   10
  7308 ;; This function calls:
  7309 ;;		_RfPointSelect
  7310 ;;		_setBuz
  7311 ;;		_setDimmerLights
  7312 ;;		_setRFSW_AdjControl
  7313 ;;		_setRFSW_Control
  7314 ;;		_setRFSW_Status
  7315 ;;		_setSw_Status
  7316 ;;		_setTxData
  7317 ;; This function is called by:
  7318 ;;		_getRxData
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           
  7323                           ;psect for function _setControl_Lights_Table
  7324  159B                     _setControl_Lights_Table:	
  7325                           
  7326                           ;incstack = 0
  7327                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7328                           ;setControl_Lights_Table@rf stored from wreg
  7329  159B  0020               	movlb	0	; select bank0
  7330  159C  00E7               	movwf	setControl_Lights_Table@rf
  7331                           
  7332                           ;RF_Control_B1.c: 273: RfPointSelect(rf);
  7333  159D  0867               	movf	setControl_Lights_Table@rf,w
  7334  159E  31A3  235E  3195   	fcall	_RfPointSelect
  7335                           
  7336                           ;RF_Control_B1.c: 274: if(RF_Data[15] == 0x00)
  7337  15A1  0021               	movlb	1	; select bank1
  7338  15A2  08AF               	movf	(_RF_Data^(0+128)+15),f
  7339  15A3  1D03               	skipz
  7340  15A4  2DEE               	goto	l9038
  7341                           
  7342                           ;RF_Control_B1.c: 275: {
  7343                           ;RF_Control_B1.c: 277: setDimmerLights(1,0);
  7344  15A5  0020               	movlb	0	; select bank0
  7345  15A6  01A4               	clrf	setDimmerLights@status
  7346  15A7  3001               	movlw	1
  7347  15A8  3196  262E  3195   	fcall	_setDimmerLights
  7348                           
  7349                           ;RF_Control_B1.c: 278: setRFSW_Status(1,0);
  7350  15AB  0020               	movlb	0	; select bank0
  7351  15AC  01A2               	clrf	setRFSW_Status@command
  7352  15AD  3001               	movlw	1
  7353  15AE  31A4  2438  3195   	fcall	_setRFSW_Status
  7354                           
  7355                           ;RF_Control_B1.c: 279: setSw_Status(1,0);
  7356  15B1  0020               	movlb	0	; select bank0
  7357  15B2  01A2               	clrf	setSw_Status@command
  7358  15B3  3001               	movlw	1
  7359  15B4  31A4  2447  3195   	fcall	_setSw_Status
  7360                           
  7361                           ;RF_Control_B1.c: 282: setDimmerLights(2,0);
  7362  15B7  0020               	movlb	0	; select bank0
  7363  15B8  01A4               	clrf	setDimmerLights@status
  7364  15B9  3002               	movlw	2
  7365  15BA  3196  262E  3195   	fcall	_setDimmerLights
  7366                           
  7367                           ;RF_Control_B1.c: 283: setRFSW_Status(2,0);
  7368  15BD  0020               	movlb	0	; select bank0
  7369  15BE  01A2               	clrf	setRFSW_Status@command
  7370  15BF  3002               	movlw	2
  7371  15C0  31A4  2438  3195   	fcall	_setRFSW_Status
  7372                           
  7373                           ;RF_Control_B1.c: 284: setSw_Status(2,0);
  7374  15C3  0020               	movlb	0	; select bank0
  7375  15C4  01A2               	clrf	setSw_Status@command
  7376  15C5  3002               	movlw	2
  7377  15C6  31A4  2447  3195   	fcall	_setSw_Status
  7378                           
  7379                           ;RF_Control_B1.c: 292: Product->Data[9]=0;
  7380  15C9  0020               	movlb	0	; select bank0
  7381  15CA  086F               	movf	_Product,w
  7382  15CB  3E09               	addlw	9
  7383  15CC  0086               	movwf	6
  7384  15CD  3001               	movlw	1	; select bank2/3
  7385  15CE  0087               	movwf	7
  7386  15CF  0181               	clrf	1
  7387                           
  7388                           ;RF_Control_B1.c: 293: Product->Data[11]=0;
  7389  15D0  086F               	movf	_Product,w
  7390  15D1  3E0B               	addlw	11
  7391  15D2  0086               	movwf	6
  7392  15D3  3001               	movlw	1	; select bank2/3
  7393  15D4  0087               	movwf	7
  7394  15D5  0181               	clrf	1
  7395                           
  7396                           ;RF_Control_B1.c: 294: Product->Data[15]=0;
  7397  15D6  086F               	movf	_Product,w
  7398  15D7  3E0F               	addlw	15
  7399  15D8  0086               	movwf	6
  7400  15D9  3001               	movlw	1	; select bank2/3
  7401  15DA  0087               	movwf	7
  7402  15DB  0181               	clrf	1
  7403                           
  7404                           ;RF_Control_B1.c: 295: Product->Data[17]=0;
  7405  15DC  086F               	movf	_Product,w
  7406  15DD  3E11               	addlw	17
  7407  15DE  0086               	movwf	6
  7408  15DF  3001               	movlw	1	; select bank2/3
  7409  15E0  0087               	movwf	7
  7410  15E1  0181               	clrf	1
  7411                           
  7412                           ;RF_Control_B1.c: 296: setBuz(1,100);
  7413  15E2  3064               	movlw	100
  7414  15E3  00A6               	movwf	setBuz@time
  7415  15E4  3000               	movlw	0
  7416  15E5  00A7               	movwf	setBuz@time+1
  7417  15E6  3001               	movlw	1
  7418  15E7  3192  220A  3195   	fcall	_setBuz
  7419                           
  7420                           ;RF_Control_B1.c: 297: setTxData(1);
  7421  15EA  3001               	movlw	1
  7422  15EB  3189  21BD         	fcall	_setTxData
  7423                           
  7424                           ;RF_Control_B1.c: 298: }
  7425  15ED  0008               	return
  7426  15EE                     l9038:	
  7427                           
  7428                           ;RF_Control_B1.c: 299: else if(RF_Data[15] == 0x20)
  7429  15EE  0021               	movlb	1	; select bank1
  7430  15EF  082F               	movf	(_RF_Data^(0+128)+15),w
  7431  15F0  3A20               	xorlw	32
  7432  15F1  1D03               	skipz
  7433  15F2  2E0A               	goto	l9044
  7434                           
  7435                           ;RF_Control_B1.c: 300: {
  7436                           ;RF_Control_B1.c: 301: Product->Data[9]=0;
  7437  15F3  0020               	movlb	0	; select bank0
  7438  15F4  086F               	movf	_Product,w
  7439  15F5  3E09               	addlw	9
  7440  15F6  0086               	movwf	6
  7441  15F7  3001               	movlw	1	; select bank2/3
  7442  15F8  0087               	movwf	7
  7443  15F9  0181               	clrf	1
  7444                           
  7445                           ;RF_Control_B1.c: 302: Product->Data[11]=0;
  7446  15FA  086F               	movf	_Product,w
  7447  15FB  3E0B               	addlw	11
  7448  15FC  0086               	movwf	6
  7449  15FD  3001               	movlw	1	; select bank2/3
  7450  15FE  0087               	movwf	7
  7451  15FF  0181               	clrf	1
  7452                           
  7453                           ;RF_Control_B1.c: 303: Product->Data[17]=0;
  7454  1600  086F               	movf	_Product,w
  7455  1601  3E11               	addlw	17
  7456  1602  0086               	movwf	6
  7457  1603  3001               	movlw	1	; select bank2/3
  7458  1604  0087               	movwf	7
  7459  1605  0181               	clrf	1
  7460                           
  7461                           ;RF_Control_B1.c: 304: setTxData(1);
  7462  1606  3001               	movlw	1
  7463  1607  3189  21BD         	fcall	_setTxData
  7464                           
  7465                           ;RF_Control_B1.c: 305: }
  7466  1609  0008               	return
  7467  160A                     l9044:	
  7468                           
  7469                           ;RF_Control_B1.c: 307: else if(RF_Data[15] == 0x01)
  7470  160A  0021               	movlb	1	; select bank1
  7471  160B  082F               	movf	(_RF_Data^(0+128)+15),w
  7472  160C  3A01               	xorlw	1
  7473  160D  1D03               	skipz
  7474  160E  2E13               	goto	l9048
  7475                           
  7476                           ;RF_Control_B1.c: 308: {
  7477                           ;RF_Control_B1.c: 309: setRFSW_Control(1);
  7478  160F  3001               	movlw	1
  7479  1610  3195  250B         	fcall	_setRFSW_Control
  7480                           
  7481                           ;RF_Control_B1.c: 310: }
  7482  1612  0008               	return
  7483  1613                     l9048:	
  7484                           
  7485                           ;RF_Control_B1.c: 312: else if(RF_Data[15] == 0x11)
  7486  1613  0021               	movlb	1	; select bank1
  7487  1614  082F               	movf	(_RF_Data^(0+128)+15),w
  7488  1615  3A11               	xorlw	17
  7489  1616  1D03               	skipz
  7490  1617  2E1C               	goto	l9052
  7491                           
  7492                           ;RF_Control_B1.c: 313: {
  7493                           ;RF_Control_B1.c: 314: setRFSW_AdjControl(1);
  7494  1618  3001               	movlw	1
  7495  1619  319A  22F2         	fcall	_setRFSW_AdjControl
  7496                           
  7497                           ;RF_Control_B1.c: 315: }
  7498  161B  0008               	return
  7499  161C                     l9052:	
  7500                           
  7501                           ;RF_Control_B1.c: 320: else if(RF_Data[15] == 0x02)
  7502  161C  0021               	movlb	1	; select bank1
  7503  161D  082F               	movf	(_RF_Data^(0+128)+15),w
  7504  161E  3A02               	xorlw	2
  7505  161F  1D03               	skipz
  7506  1620  2E25               	goto	l9056
  7507                           
  7508                           ;RF_Control_B1.c: 321: {
  7509                           ;RF_Control_B1.c: 322: setRFSW_Control(2);
  7510  1621  3002               	movlw	2
  7511  1622  3195  250B         	fcall	_setRFSW_Control
  7512                           
  7513                           ;RF_Control_B1.c: 323: }
  7514  1624  0008               	return
  7515  1625                     l9056:	
  7516                           
  7517                           ;RF_Control_B1.c: 325: else if(RF_Data[15] == 0x21)
  7518  1625  0021               	movlb	1	; select bank1
  7519  1626  082F               	movf	(_RF_Data^(0+128)+15),w
  7520  1627  3A21               	xorlw	33
  7521  1628  1D03               	skipz
  7522  1629  0008               	return
  7523                           
  7524                           ;RF_Control_B1.c: 326: {
  7525                           ;RF_Control_B1.c: 327: setRFSW_AdjControl(2);
  7526  162A  3002               	movlw	2
  7527  162B  319A  22F2         	fcall	_setRFSW_AdjControl
  7528  162D  0008               	return
  7529  162E                     __end_of_setControl_Lights_Table:	
  7530                           
  7531                           	psect	text26
  7532  150B                     __ptext26:	
  7533 ;; *************** function _setRFSW_Control *****************
  7534 ;; Defined at:
  7535 ;;		line 368 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  sw              1    wreg     unsigned char 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  sw              1   67[BANK0 ] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;		None               void
  7542 ;; Registers used:
  7543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;Total ram usage:        2 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    8
  7556 ;; This function calls:
  7557 ;;		_RfSWPointSelect
  7558 ;;		_setBuz
  7559 ;;		_setDelayOff_GO
  7560 ;;		_setDimmerLights_Switch
  7561 ;;		_setDimmerLights_Trigger
  7562 ;;		_setRF_DimmerLights
  7563 ;;		_setSw_Status
  7564 ;;		_setTxData
  7565 ;; This function is called by:
  7566 ;;		_setControl_Lights_Table
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           
  7571                           ;psect for function _setRFSW_Control
  7572  150B                     _setRFSW_Control:	
  7573                           
  7574                           ;incstack = 0
  7575                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7576                           ;setRFSW_Control@sw stored from wreg
  7577  150B  0020               	movlb	0	; select bank0
  7578  150C  00E3               	movwf	setRFSW_Control@sw
  7579                           
  7580                           ;RF_Control_B1.c: 370: RfSWPointSelect(sw);
  7581  150D  0863               	movf	setRFSW_Control@sw,w
  7582  150E  31A5  2561  3195   	fcall	_RfSWPointSelect
  7583                           
  7584                           ;RF_Control_B1.c: 371: if(!RFSW->Status)
  7585  1511  0021               	movlb	1	; select bank1
  7586  1512  083C               	movf	_RFSW^(0+128),w
  7587  1513  0086               	movwf	6
  7588  1514  0187               	clrf	7
  7589  1515  1801               	btfsc	1,0
  7590  1516  2D4C               	goto	l8926
  7591                           
  7592                           ;RF_Control_B1.c: 372: {
  7593                           ;RF_Control_B1.c: 373: if(RF_Data[16] == 0x80)
  7594  1517  0830               	movf	(_RF_Data^(0+128)+16),w
  7595  1518  3A80               	xorlw	128
  7596  1519  1D03               	skipz
  7597  151A  2D28               	goto	l8916
  7598                           
  7599                           ;RF_Control_B1.c: 374: {
  7600                           ;RF_Control_B1.c: 375: setDelayOff_GO(sw,1,RF_Data[17]);
  7601  151B  0020               	movlb	0	; select bank0
  7602  151C  01A3               	clrf	setDelayOff_GO@command
  7603  151D  0AA3               	incf	setDelayOff_GO@command,f
  7604  151E  0021               	movlb	1	; select bank1
  7605  151F  0831               	movf	(_RF_Data^(0+128)+17),w
  7606  1520  0020               	movlb	0	; select bank0
  7607  1521  00E2               	movwf	??_setRFSW_Control
  7608  1522  0862               	movf	??_setRFSW_Control,w
  7609  1523  00A4               	movwf	setDelayOff_GO@value
  7610  1524  0863               	movf	setRFSW_Control@sw,w
  7611  1525  319E  260F  3195   	fcall	_setDelayOff_GO
  7612  1528                     l8916:	
  7613                           
  7614                           ;RF_Control_B1.c: 376: }
  7615                           ;RF_Control_B1.c: 377: RFSW->Status=1;
  7616  1528  0021               	movlb	1	; select bank1
  7617  1529  083C               	movf	_RFSW^(0+128),w
  7618  152A  0086               	movwf	6
  7619  152B  0187               	clrf	7
  7620  152C  1401               	bsf	1,0
  7621                           
  7622                           ;RF_Control_B1.c: 378: setSw_Status(sw,1);
  7623  152D  0020               	movlb	0	; select bank0
  7624  152E  01A2               	clrf	setSw_Status@command
  7625  152F  0AA2               	incf	setSw_Status@command,f
  7626  1530  0863               	movf	setRFSW_Control@sw,w
  7627  1531  31A4  2447  3195   	fcall	_setSw_Status
  7628                           
  7629                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw,1);
  7630  1534  0020               	movlb	0	; select bank0
  7631  1535  01A2               	clrf	setDimmerLights_Trigger@command
  7632  1536  0AA2               	incf	setDimmerLights_Trigger@command,f
  7633  1537  0863               	movf	setRFSW_Control@sw,w
  7634  1538  31A4  2476  3195   	fcall	_setDimmerLights_Trigger
  7635                           
  7636                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw,1);
  7637  153B  0020               	movlb	0	; select bank0
  7638  153C  01A2               	clrf	setDimmerLights_Switch@command
  7639  153D  0AA2               	incf	setDimmerLights_Switch@command,f
  7640  153E  0863               	movf	setRFSW_Control@sw,w
  7641  153F  31A4  2466  3195   	fcall	_setDimmerLights_Switch
  7642                           
  7643                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,RFSW->Status);
  7644  1542  0021               	movlb	1	; select bank1
  7645  1543  083C               	movf	_RFSW^(0+128),w
  7646  1544  0086               	movwf	6
  7647  1545  0187               	clrf	7
  7648  1546  3000               	movlw	0
  7649  1547  1801               	btfsc	1,0
  7650  1548  3001               	movlw	1
  7651  1549  0020               	movlb	0	; select bank0
  7652  154A  00DD               	movwf	setRF_DimmerLights@on
  7653  154B  2D8A               	goto	L4
  7654  154C                     l8926:	
  7655                           ;RF_Control_B1.c: 384: }
  7656                           
  7657                           
  7658                           ;RF_Control_B1.c: 385: else
  7659                           ;RF_Control_B1.c: 386: {
  7660                           ;RF_Control_B1.c: 387: if(RF_Data[16] == 0x80)
  7661  154C  0021               	movlb	1	; select bank1
  7662  154D  0830               	movf	(_RF_Data^(0+128)+16),w
  7663  154E  3A80               	xorlw	128
  7664  154F  1D03               	skipz
  7665  1550  2D62               	goto	l8930
  7666                           
  7667                           ;RF_Control_B1.c: 388: {
  7668                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw,1,RF_Data[17]);
  7669  1551  0020               	movlb	0	; select bank0
  7670  1552  01A3               	clrf	setDelayOff_GO@command
  7671  1553  0AA3               	incf	setDelayOff_GO@command,f
  7672  1554  0021               	movlb	1	; select bank1
  7673  1555  0831               	movf	(_RF_Data^(0+128)+17),w
  7674  1556  0020               	movlb	0	; select bank0
  7675  1557  00E2               	movwf	??_setRFSW_Control
  7676  1558  0862               	movf	??_setRFSW_Control,w
  7677  1559  00A4               	movwf	setDelayOff_GO@value
  7678  155A  0863               	movf	setRFSW_Control@sw,w
  7679  155B  319E  260F  3195   	fcall	_setDelayOff_GO
  7680                           
  7681                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw,1);
  7682  155E  0020               	movlb	0	; select bank0
  7683  155F  01DD               	clrf	setRF_DimmerLights@on
  7684  1560  0ADD               	incf	setRF_DimmerLights@on,f
  7685  1561  2D8A               	goto	L4
  7686  1562                     l8930:	
  7687                           ;RF_Control_B1.c: 391: }
  7688                           
  7689                           
  7690                           ;RF_Control_B1.c: 392: else
  7691                           ;RF_Control_B1.c: 393: {
  7692                           ;RF_Control_B1.c: 394: RFSW->Status=0;
  7693  1562  0021               	movlb	1	; select bank1
  7694  1563  083C               	movf	_RFSW^(0+128),w
  7695  1564  0086               	movwf	6
  7696  1565  0187               	clrf	7
  7697  1566  1001               	bcf	1,0
  7698                           
  7699                           ;RF_Control_B1.c: 395: setSw_Status(sw,0);
  7700  1567  0020               	movlb	0	; select bank0
  7701  1568  01A2               	clrf	setSw_Status@command
  7702  1569  0863               	movf	setRFSW_Control@sw,w
  7703  156A  31A4  2447  3195   	fcall	_setSw_Status
  7704                           
  7705                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw,1);
  7706  156D  0020               	movlb	0	; select bank0
  7707  156E  01A2               	clrf	setDimmerLights_Trigger@command
  7708  156F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7709  1570  0863               	movf	setRFSW_Control@sw,w
  7710  1571  31A4  2476  3195   	fcall	_setDimmerLights_Trigger
  7711                           
  7712                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw,RFSW->Status);
  7713  1574  0021               	movlb	1	; select bank1
  7714  1575  083C               	movf	_RFSW^(0+128),w
  7715  1576  0086               	movwf	6
  7716  1577  0187               	clrf	7
  7717  1578  3000               	movlw	0
  7718  1579  1801               	btfsc	1,0
  7719  157A  3001               	movlw	1
  7720  157B  0020               	movlb	0	; select bank0
  7721  157C  00A2               	movwf	setDimmerLights_Switch@command
  7722  157D  0863               	movf	setRFSW_Control@sw,w
  7723  157E  31A4  2466  3195   	fcall	_setDimmerLights_Switch
  7724                           
  7725                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw,0,0);
  7726  1581  0020               	movlb	0	; select bank0
  7727  1582  01A3               	clrf	setDelayOff_GO@command
  7728  1583  01A4               	clrf	setDelayOff_GO@value
  7729  1584  0863               	movf	setRFSW_Control@sw,w
  7730  1585  319E  260F  3195   	fcall	_setDelayOff_GO
  7731                           
  7732                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw,0);
  7733  1588  0020               	movlb	0	; select bank0
  7734  1589  01DD               	clrf	setRF_DimmerLights@on
  7735  158A                     L4:	
  7736  158A  0863               	movf	setRFSW_Control@sw,w
  7737  158B  319F  2795  3195   	fcall	_setRF_DimmerLights
  7738                           
  7739                           ;RF_Control_B1.c: 402: }
  7740                           ;RF_Control_B1.c: 403: }
  7741                           ;RF_Control_B1.c: 404: setBuz(1,100);
  7742  158E  3064               	movlw	100
  7743  158F  0020               	movlb	0	; select bank0
  7744  1590  00A6               	movwf	setBuz@time
  7745  1591  3000               	movlw	0
  7746  1592  00A7               	movwf	setBuz@time+1
  7747  1593  3001               	movlw	1
  7748  1594  3192  220A  3195   	fcall	_setBuz
  7749                           
  7750                           ;RF_Control_B1.c: 405: setTxData(1);
  7751  1597  3001               	movlw	1
  7752  1598  3189  21BD         	fcall	_setTxData
  7753  159A  0008               	return
  7754  159B                     __end_of_setRFSW_Control:	
  7755                           
  7756                           	psect	text27
  7757  1E0F                     __ptext27:	
  7758 ;; *************** function _setDelayOff_GO *****************
  7759 ;; Defined at:
  7760 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;  sw              1    wreg     unsigned char 
  7763 ;;  command         1    3[BANK0 ] unsigned char 
  7764 ;;  value           1    4[BANK0 ] unsigned char 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  sw              1    7[BANK0 ] unsigned char 
  7767 ;; Return value:  Size  Location     Type
  7768 ;;		None               void
  7769 ;; Registers used:
  7770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;Total ram usage:        5 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    5
  7783 ;; This function calls:
  7784 ;;		_DelayOffPointSelect
  7785 ;;		_DelayTimejudge
  7786 ;; This function is called by:
  7787 ;;		_setRFSW_Control
  7788 ;;		_Sw_DimmerOffFunc
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _setDelayOff_GO
  7794  1E0F                     _setDelayOff_GO:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7798                           ;setDelayOff_GO@sw stored from wreg
  7799  1E0F  0020               	movlb	0	; select bank0
  7800  1E10  00A7               	movwf	setDelayOff_GO@sw
  7801                           
  7802                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7803  1E11  0827               	movf	setDelayOff_GO@sw,w
  7804  1E12  31A5  258D  319E   	fcall	_DelayOffPointSelect
  7805                           
  7806                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7807  1E15  0021               	movlb	1	; select bank1
  7808  1E16  0838               	movf	_DelayOff^(0+128),w
  7809  1E17  0086               	movwf	6
  7810  1E18  0187               	clrf	7
  7811  1E19  1C01               	btfss	1,0
  7812  1E1A  0008               	return
  7813                           
  7814                           ;DelayOff_B1.c: 96: {
  7815                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7816  1E1B  0838               	movf	_DelayOff^(0+128),w
  7817  1E1C  0086               	movwf	6
  7818  1E1D  0187               	clrf	7
  7819  1E1E  0020               	movlb	0	; select bank0
  7820  1E1F  0823               	movf	setDelayOff_GO@command,w
  7821  1E20  1081               	bcf	1,1
  7822  1E21  1D03               	skipz
  7823  1E22  1481               	bsf	1,1
  7824                           
  7825                           ;DelayOff_B1.c: 98: if(command)
  7826  1E23  0823               	movf	setDelayOff_GO@command,w
  7827  1E24  1903               	btfsc	3,2
  7828  1E25  2E51               	goto	l6610
  7829                           
  7830                           ;DelayOff_B1.c: 99: {
  7831                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7832  1E26  0824               	movf	setDelayOff_GO@value,w
  7833  1E27  3198  20E9  319E   	fcall	_DelayTimejudge
  7834  1E2A  0020               	movlb	0	; select bank0
  7835  1E2B  00A5               	movwf	??_setDelayOff_GO
  7836  1E2C  0021               	movlb	1	; select bank1
  7837  1E2D  0A38               	incf	_DelayOff^(0+128),w
  7838  1E2E  0086               	movwf	6
  7839  1E2F  0187               	clrf	7
  7840  1E30  0020               	movlb	0	; select bank0
  7841  1E31  0825               	movf	??_setDelayOff_GO,w
  7842  1E32  0081               	movwf	1
  7843                           
  7844                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7845  1E33  300F               	movlw	15
  7846  1E34  0524               	andwf	setDelayOff_GO@value,w
  7847  1E35  00A5               	movwf	??_setDelayOff_GO
  7848  1E36  0825               	movf	??_setDelayOff_GO,w
  7849  1E37  3A05               	xorlw	5
  7850  1E38  1903               	skipnz
  7851  1E39  2E3E               	goto	l6604
  7852  1E3A  0824               	movf	setDelayOff_GO@value,w
  7853  1E3B  390F               	andlw	15
  7854  1E3C  1D03               	btfss	3,2
  7855  1E3D  2E44               	goto	l6608
  7856  1E3E                     l6604:	
  7857  1E3E  3026               	movlw	38
  7858  1E3F  0224               	subwf	setDelayOff_GO@value,w
  7859  1E40  1803               	skipnc
  7860  1E41  2E44               	goto	l6608
  7861                           
  7862                           ;DelayOff_B1.c: 102: {
  7863                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7864  1E42  0824               	movf	setDelayOff_GO@value,w
  7865  1E43  2E45               	goto	L5
  7866  1E44                     l6608:	
  7867                           ;DelayOff_B1.c: 104: }
  7868                           
  7869                           
  7870                           ;DelayOff_B1.c: 105: else
  7871                           ;DelayOff_B1.c: 106: {
  7872                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7873  1E44  3005               	movlw	5
  7874  1E45                     L5:	
  7875  1E45  00A5               	movwf	??_setDelayOff_GO
  7876  1E46  0827               	movf	setDelayOff_GO@sw,w
  7877  1E47  3E1A               	addlw	26
  7878  1E48  076F               	addwf	_Product,w
  7879  1E49  00A6               	movwf	??_setDelayOff_GO+1
  7880  1E4A  0826               	movf	??_setDelayOff_GO+1,w
  7881  1E4B  0086               	movwf	6
  7882  1E4C  3001               	movlw	1	; select bank2/3
  7883  1E4D  0087               	movwf	7
  7884  1E4E  0825               	movf	??_setDelayOff_GO,w
  7885  1E4F  0081               	movwf	1
  7886                           
  7887                           ;DelayOff_B1.c: 108: }
  7888                           ;DelayOff_B1.c: 109: }
  7889  1E50  2E5D               	goto	l6614
  7890  1E51                     l6610:	
  7891                           
  7892                           ;DelayOff_B1.c: 110: else if(!command)
  7893  1E51  08A3               	movf	setDelayOff_GO@command,f
  7894  1E52  1D03               	skipz
  7895  1E53  2E5D               	goto	l6614
  7896                           
  7897                           ;DelayOff_B1.c: 111: {
  7898                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7899  1E54  0827               	movf	setDelayOff_GO@sw,w
  7900  1E55  3E1A               	addlw	26
  7901  1E56  076F               	addwf	_Product,w
  7902  1E57  00A5               	movwf	??_setDelayOff_GO
  7903  1E58  0825               	movf	??_setDelayOff_GO,w
  7904  1E59  0086               	movwf	6
  7905  1E5A  3001               	movlw	1	; select bank2/3
  7906  1E5B  0087               	movwf	7
  7907  1E5C  0181               	clrf	1
  7908  1E5D                     l6614:	
  7909                           
  7910                           ;DelayOff_B1.c: 113: }
  7911                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7912  1E5D  0021               	movlb	1	; select bank1
  7913  1E5E  0838               	movf	_DelayOff^(0+128),w
  7914  1E5F  3E02               	addlw	2
  7915  1E60  0086               	movwf	6
  7916  1E61  0187               	clrf	7
  7917  1E62  3000               	movlw	0
  7918  1E63  3FC0               	movwi [0]fsr1
  7919  1E64  3FC1               	movwi [1]fsr1
  7920                           
  7921                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7922  1E65  0838               	movf	_DelayOff^(0+128),w
  7923  1E66  3E04               	addlw	4
  7924  1E67  0086               	movwf	6
  7925  1E68  0187               	clrf	7
  7926  1E69  0181               	clrf	1
  7927  1E6A  0008               	return
  7928  1E6B                     __end_of_setDelayOff_GO:	
  7929                           
  7930                           	psect	text28
  7931  18E9                     __ptext28:	
  7932 ;; *************** function _DelayTimejudge *****************
  7933 ;; Defined at:
  7934 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  value           1    wreg     unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  value           1    2[BANK0 ] unsigned char 
  7939 ;;  i               1    1[BANK0 ] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      unsigned char 
  7942 ;; Registers used:
  7943 ;;		wreg
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;Total ram usage:        3 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    4
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		_setDelayOff_GO
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _DelayTimejudge
  7965  18E9                     _DelayTimejudge:	
  7966                           
  7967                           ;incstack = 0
  7968                           ; Regs used in _DelayTimejudge: [wreg]
  7969                           ;DelayTimejudge@value stored from wreg
  7970  18E9  0020               	movlb	0	; select bank0
  7971  18EA  00A2               	movwf	DelayTimejudge@value
  7972                           
  7973                           ;DelayOff_B1.c: 121: char i=5;
  7974  18EB  3005               	movlw	5
  7975  18EC  00A0               	movwf	??_DelayTimejudge
  7976  18ED  0820               	movf	??_DelayTimejudge,w
  7977  18EE  00A1               	movwf	DelayTimejudge@i
  7978                           
  7979                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7980  18EF  0822               	movf	DelayTimejudge@value,w
  7981  18F0  3A05               	xorlw	5
  7982  18F1  1D03               	skipz
  7983  18F2  28F5               	goto	l6444
  7984                           
  7985                           ;DelayOff_B1.c: 123: {
  7986                           ;DelayOff_B1.c: 124: i=5;
  7987  18F3  3005               	movlw	5
  7988  18F4  2912               	goto	L10
  7989  18F5                     l6444:	
  7990                           ;DelayOff_B1.c: 125: }
  7991                           
  7992                           
  7993                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7994  18F5  0822               	movf	DelayTimejudge@value,w
  7995  18F6  3A10               	xorlw	16
  7996  18F7  1D03               	skipz
  7997  18F8  28FB               	goto	l6448
  7998                           
  7999                           ;DelayOff_B1.c: 127: {
  8000                           ;DelayOff_B1.c: 128: i=10;
  8001  18F9  300A               	movlw	10
  8002  18FA  2912               	goto	L10
  8003  18FB                     l6448:	
  8004                           ;DelayOff_B1.c: 129: }
  8005                           
  8006                           
  8007                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  8008  18FB  0822               	movf	DelayTimejudge@value,w
  8009  18FC  3A15               	xorlw	21
  8010  18FD  1D03               	skipz
  8011  18FE  2901               	goto	l6452
  8012                           
  8013                           ;DelayOff_B1.c: 131: {
  8014                           ;DelayOff_B1.c: 132: i=15;
  8015  18FF  300F               	movlw	15
  8016  1900  2912               	goto	L10
  8017  1901                     l6452:	
  8018                           ;DelayOff_B1.c: 133: }
  8019                           
  8020                           
  8021                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8022  1901  0822               	movf	DelayTimejudge@value,w
  8023  1902  3A20               	xorlw	32
  8024  1903  1D03               	skipz
  8025  1904  2907               	goto	l6456
  8026                           
  8027                           ;DelayOff_B1.c: 135: {
  8028                           ;DelayOff_B1.c: 136: i=20;
  8029  1905  3014               	movlw	20
  8030  1906  2912               	goto	L10
  8031  1907                     l6456:	
  8032                           ;DelayOff_B1.c: 137: }
  8033                           
  8034                           
  8035                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8036  1907  0822               	movf	DelayTimejudge@value,w
  8037  1908  3A25               	xorlw	37
  8038  1909  1D03               	skipz
  8039  190A  290D               	goto	l6460
  8040                           
  8041                           ;DelayOff_B1.c: 139: {
  8042                           ;DelayOff_B1.c: 140: i=25;
  8043  190B  3019               	movlw	25
  8044  190C  2912               	goto	L10
  8045  190D                     l6460:	
  8046                           ;DelayOff_B1.c: 141: }
  8047                           
  8048                           
  8049                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8050  190D  0822               	movf	DelayTimejudge@value,w
  8051  190E  3A30               	xorlw	48
  8052  190F  1D03               	skipz
  8053  1910  2915               	goto	l706
  8054                           
  8055                           ;DelayOff_B1.c: 143: {
  8056                           ;DelayOff_B1.c: 144: i=30;
  8057  1911  301E               	movlw	30
  8058  1912                     L10:	
  8059  1912  00A0               	movwf	??_DelayTimejudge
  8060  1913  0820               	movf	??_DelayTimejudge,w
  8061  1914  00A1               	movwf	DelayTimejudge@i
  8062  1915                     l706:	
  8063                           
  8064                           ;DelayOff_B1.c: 145: }
  8065                           ;DelayOff_B1.c: 146: return i;
  8066  1915  0821               	movf	DelayTimejudge@i,w
  8067  1916  0008               	return
  8068  1917                     __end_of_DelayTimejudge:	
  8069                           
  8070                           	psect	text29
  8071  1AF2                     __ptext29:	
  8072 ;; *************** function _setRFSW_AdjControl *****************
  8073 ;; Defined at:
  8074 ;;		line 408 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  sw              1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  sw              1   70[BANK0 ] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;		None               void
  8081 ;; Registers used:
  8082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;Total ram usage:        3 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    9
  8095 ;; This function calls:
  8096 ;;		_RfSWPointSelect
  8097 ;;		_setRF_DimmerValue
  8098 ;;		_setTxData
  8099 ;; This function is called by:
  8100 ;;		_setControl_Lights_Table
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _setRFSW_AdjControl
  8106  1AF2                     _setRFSW_AdjControl:	
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8110                           ;setRFSW_AdjControl@sw stored from wreg
  8111  1AF2  0020               	movlb	0	; select bank0
  8112  1AF3  00E6               	movwf	setRFSW_AdjControl@sw
  8113                           
  8114                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  8115  1AF4  0866               	movf	setRFSW_AdjControl@sw,w
  8116  1AF5  31A5  2561  319A   	fcall	_RfSWPointSelect
  8117                           
  8118                           ;RF_Control_B1.c: 411: if(RFSW->Status)
  8119  1AF8  0021               	movlb	1	; select bank1
  8120  1AF9  083C               	movf	_RFSW^(0+128),w
  8121  1AFA  0086               	movwf	6
  8122  1AFB  0187               	clrf	7
  8123  1AFC  1C01               	btfss	1,0
  8124  1AFD  2B0A               	goto	l6862
  8125                           
  8126                           ;RF_Control_B1.c: 412: {
  8127                           ;RF_Control_B1.c: 413: Memory->Modify=1;
  8128  1AFE  0869               	movf	_Memory^(0+128),w
  8129  1AFF  3E22               	addlw	34
  8130  1B00  0086               	movwf	6
  8131  1B01  3002               	movlw	2	; select bank4/5
  8132  1B02  0087               	movwf	7
  8133  1B03  1401               	bsf	1,0
  8134                           
  8135                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  8136  1B04  0020               	movlb	0	; select bank0
  8137  1B05  0866               	movf	setRFSW_AdjControl@sw,w
  8138  1B06  319A  220C  319A   	fcall	_setRF_DimmerValue
  8139                           
  8140                           ;RF_Control_B1.c: 415: }
  8141  1B09  2B1C               	goto	l2738
  8142  1B0A                     l6862:	
  8143                           
  8144                           ;RF_Control_B1.c: 416: else
  8145                           ;RF_Control_B1.c: 417: {
  8146                           ;RF_Control_B1.c: 418: Product->Data[9]=Product->Data[20+sw];
  8147  1B0A  0020               	movlb	0	; select bank0
  8148  1B0B  0866               	movf	setRFSW_AdjControl@sw,w
  8149  1B0C  3E14               	addlw	20
  8150  1B0D  076F               	addwf	_Product,w
  8151  1B0E  00E4               	movwf	??_setRFSW_AdjControl
  8152  1B0F  0864               	movf	??_setRFSW_AdjControl,w
  8153  1B10  0086               	movwf	6
  8154  1B11  3001               	movlw	1	; select bank2/3
  8155  1B12  0087               	movwf	7
  8156  1B13  0801               	movf	1,w
  8157  1B14  00E5               	movwf	??_setRFSW_AdjControl+1
  8158  1B15  086F               	movf	_Product,w
  8159  1B16  3E09               	addlw	9
  8160  1B17  0086               	movwf	6
  8161  1B18  3001               	movlw	1	; select bank2/3
  8162  1B19  0087               	movwf	7
  8163  1B1A  0865               	movf	??_setRFSW_AdjControl+1,w
  8164  1B1B  0081               	movwf	1
  8165  1B1C                     l2738:	
  8166                           
  8167                           ;RF_Control_B1.c: 419: }
  8168                           ;RF_Control_B1.c: 420: Product->Data[17]=Product->Data[26+sw];
  8169  1B1C  0020               	movlb	0	; select bank0
  8170  1B1D  0866               	movf	setRFSW_AdjControl@sw,w
  8171  1B1E  3E1A               	addlw	26
  8172  1B1F  076F               	addwf	_Product,w
  8173  1B20  00E4               	movwf	??_setRFSW_AdjControl
  8174  1B21  0864               	movf	??_setRFSW_AdjControl,w
  8175  1B22  0086               	movwf	6
  8176  1B23  3001               	movlw	1	; select bank2/3
  8177  1B24  0087               	movwf	7
  8178  1B25  0801               	movf	1,w
  8179  1B26  00E5               	movwf	??_setRFSW_AdjControl+1
  8180  1B27  086F               	movf	_Product,w
  8181  1B28  3E11               	addlw	17
  8182  1B29  0086               	movwf	6
  8183  1B2A  3001               	movlw	1	; select bank2/3
  8184  1B2B  0087               	movwf	7
  8185  1B2C  0865               	movf	??_setRFSW_AdjControl+1,w
  8186  1B2D  0081               	movwf	1
  8187                           
  8188                           ;RF_Control_B1.c: 421: setTxData(1);
  8189  1B2E  3001               	movlw	1
  8190  1B2F  3189  21BD         	fcall	_setTxData
  8191  1B31  0008               	return
  8192  1B32                     __end_of_setRFSW_AdjControl:	
  8193                           
  8194                           	psect	text30
  8195  1A0C                     __ptext30:	
  8196 ;; *************** function _setRF_DimmerValue *****************
  8197 ;; Defined at:
  8198 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  lights          1    wreg     unsigned char 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  lights          1   67[BANK0 ] unsigned char 
  8203 ;; Return value:  Size  Location     Type
  8204 ;;		None               void
  8205 ;; Registers used:
  8206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;Total ram usage:        3 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    8
  8219 ;; This function calls:
  8220 ;;		_setDimmerLights_AdjRF
  8221 ;; This function is called by:
  8222 ;;		_setRFSW_AdjControl
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _setRF_DimmerValue
  8228  1A0C                     _setRF_DimmerValue:	
  8229                           
  8230                           ;incstack = 0
  8231                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8232                           ;setRF_DimmerValue@lights stored from wreg
  8233  1A0C  0020               	movlb	0	; select bank0
  8234  1A0D  00E3               	movwf	setRF_DimmerValue@lights
  8235                           
  8236                           ;RF_Control_B1.c: 434: if(RF_Data[9] > 0x64)
  8237  1A0E  3065               	movlw	101
  8238  1A0F  0021               	movlb	1	; select bank1
  8239  1A10  0229               	subwf	(_RF_Data^(0+128)+9),w
  8240  1A11  1C03               	skipc
  8241  1A12  2A19               	goto	l6704
  8242                           
  8243                           ;RF_Control_B1.c: 435: {
  8244                           ;RF_Control_B1.c: 436: RF_Data[9]=0x64;
  8245  1A13  3064               	movlw	100
  8246  1A14  0020               	movlb	0	; select bank0
  8247  1A15  00E1               	movwf	??_setRF_DimmerValue
  8248  1A16  0861               	movf	??_setRF_DimmerValue,w
  8249  1A17  0021               	movlb	1	; select bank1
  8250  1A18  00A9               	movwf	(_RF_Data^(0+128)+9)
  8251  1A19                     l6704:	
  8252                           
  8253                           ;RF_Control_B1.c: 437: }
  8254                           ;RF_Control_B1.c: 438: Product->Data[9]=RF_Data[9];
  8255  1A19  0829               	movf	(_RF_Data^(0+128)+9),w
  8256  1A1A  0020               	movlb	0	; select bank0
  8257  1A1B  00E1               	movwf	??_setRF_DimmerValue
  8258  1A1C  086F               	movf	_Product,w
  8259  1A1D  3E09               	addlw	9
  8260  1A1E  0086               	movwf	6
  8261  1A1F  3001               	movlw	1	; select bank2/3
  8262  1A20  0087               	movwf	7
  8263  1A21  0861               	movf	??_setRF_DimmerValue,w
  8264  1A22  0081               	movwf	1
  8265                           
  8266                           ;RF_Control_B1.c: 439: Product->Data[11]=lights;
  8267  1A23  0863               	movf	setRF_DimmerValue@lights,w
  8268  1A24  00E1               	movwf	??_setRF_DimmerValue
  8269  1A25  086F               	movf	_Product,w
  8270  1A26  3E0B               	addlw	11
  8271  1A27  0086               	movwf	6
  8272  1A28  3001               	movlw	1	; select bank2/3
  8273  1A29  0087               	movwf	7
  8274  1A2A  0861               	movf	??_setRF_DimmerValue,w
  8275  1A2B  0081               	movwf	1
  8276                           
  8277                           ;RF_Control_B1.c: 440: Product->Data[(20+lights)]=Product->Data[9];
  8278  1A2C  086F               	movf	_Product,w
  8279  1A2D  3E09               	addlw	9
  8280  1A2E  0086               	movwf	6
  8281  1A2F  3001               	movlw	1	; select bank2/3
  8282  1A30  0087               	movwf	7
  8283  1A31  0801               	movf	1,w
  8284  1A32  00E1               	movwf	??_setRF_DimmerValue
  8285  1A33  0863               	movf	setRF_DimmerValue@lights,w
  8286  1A34  3E14               	addlw	20
  8287  1A35  076F               	addwf	_Product,w
  8288  1A36  00E2               	movwf	??_setRF_DimmerValue+1
  8289  1A37  0862               	movf	??_setRF_DimmerValue+1,w
  8290  1A38  0086               	movwf	6
  8291  1A39  3001               	movlw	1	; select bank2/3
  8292  1A3A  0087               	movwf	7
  8293  1A3B  0861               	movf	??_setRF_DimmerValue,w
  8294  1A3C  0081               	movwf	1
  8295                           
  8296                           ;RF_Control_B1.c: 441: setDimmerLights_AdjRF(lights);
  8297  1A3D  0863               	movf	setRF_DimmerValue@lights,w
  8298  1A3E  31A7  276C         	fcall	_setDimmerLights_AdjRF
  8299  1A40  0008               	return
  8300  1A41                     __end_of_setRF_DimmerValue:	
  8301                           
  8302                           	psect	text31
  8303  276C                     __ptext31:	
  8304 ;; *************** function _setDimmerLights_AdjRF *****************
  8305 ;; Defined at:
  8306 ;;		line 423 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  lights          1    wreg     unsigned char 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  lights          1   64[BANK0 ] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;		None               void
  8313 ;; Registers used:
  8314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;Total ram usage:        2 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    7
  8327 ;; This function calls:
  8328 ;;		_DimmerLightsPointSelect
  8329 ;;		_getPercentValue
  8330 ;; This function is called by:
  8331 ;;		_setRF_DimmerValue
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _setDimmerLights_AdjRF
  8337  276C                     _setDimmerLights_AdjRF:	
  8338                           
  8339                           ;incstack = 0
  8340                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8341                           ;setDimmerLights_AdjRF@lights stored from wreg
  8342  276C  0020               	movlb	0	; select bank0
  8343  276D  00E0               	movwf	setDimmerLights_AdjRF@lights
  8344                           
  8345                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8346  276E  0860               	movf	setDimmerLights_AdjRF@lights,w
  8347  276F  31A4  24E7  31A7   	fcall	_DimmerLightsPointSelect
  8348                           
  8349                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8350  2772  0020               	movlb	0	; select bank0
  8351  2773  086C               	movf	_DimmerLights,w
  8352  2774  0086               	movwf	6
  8353  2775  3001               	movlw	1	; select bank2/3
  8354  2776  0087               	movwf	7
  8355  2777  1501               	bsf	1,2
  8356                           
  8357                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8358  2778  086C               	movf	_DimmerLights,w
  8359  2779  0086               	movwf	6
  8360  277A  3001               	movlw	1	; select bank2/3
  8361  277B  0087               	movwf	7
  8362  277C  1481               	bsf	1,1
  8363                           
  8364                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8365  277D  086F               	movf	_Product,w
  8366  277E  3E09               	addlw	9
  8367  277F  0086               	movwf	6
  8368  2780  3001               	movlw	1	; select bank2/3
  8369  2781  0087               	movwf	7
  8370  2782  0801               	movf	1,w
  8371  2783  319D  25B4         	fcall	_getPercentValue
  8372  2785  0020               	movlb	0	; select bank0
  8373  2786  00DF               	movwf	??_setDimmerLights_AdjRF
  8374  2787  086C               	movf	_DimmerLights,w
  8375  2788  3E05               	addlw	5
  8376  2789  0086               	movwf	6
  8377  278A  3001               	movlw	1	; select bank2/3
  8378  278B  0087               	movwf	7
  8379  278C  085F               	movf	??_setDimmerLights_AdjRF,w
  8380  278D  0081               	movwf	1
  8381  278E  0008               	return
  8382  278F                     __end_of_setDimmerLights_AdjRF:	
  8383                           
  8384                           	psect	text32
  8385  1DB4                     __ptext32:	
  8386 ;; *************** function _getPercentValue *****************
  8387 ;; Defined at:
  8388 ;;		line 490 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  value           1    wreg     unsigned char 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  value           1   59[BANK0 ] unsigned char 
  8393 ;;  i               3   60[BANK0 ] float 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      unsigned char 
  8396 ;; Registers used:
  8397 ;;		wreg, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:        6 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    6
  8410 ;; This function calls:
  8411 ;;		___awtoft
  8412 ;;		___ftadd
  8413 ;;		___ftdiv
  8414 ;;		___ftmul
  8415 ;;		___fttol
  8416 ;; This function is called by:
  8417 ;;		_setDimmerLights_AdjRF
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           
  8422                           ;psect for function _getPercentValue
  8423  1DB4                     _getPercentValue:	
  8424                           
  8425                           ;incstack = 0
  8426                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8427                           ;getPercentValue@value stored from wreg
  8428  1DB4  0020               	movlb	0	; select bank0
  8429  1DB5  00DB               	movwf	getPercentValue@value
  8430                           
  8431                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8432  1DB6  3000               	movlw	0
  8433  1DB7  00DC               	movwf	getPercentValue@i
  8434  1DB8  3054               	movlw	84
  8435  1DB9  00DD               	movwf	getPercentValue@i+1
  8436  1DBA  3042               	movlw	66
  8437  1DBB  00DE               	movwf	getPercentValue@i+2
  8438                           
  8439                           ;Dimmer_B1.c: 494: i/=100;
  8440  1DBC  3000               	movlw	0
  8441  1DBD  00AE               	movwf	___ftdiv@f2
  8442  1DBE  30C8               	movlw	200
  8443  1DBF  00AF               	movwf	___ftdiv@f2+1
  8444  1DC0  3042               	movlw	66
  8445  1DC1  00B0               	movwf	___ftdiv@f2+2
  8446  1DC2  085C               	movf	getPercentValue@i,w
  8447  1DC3  00B1               	movwf	___ftdiv@f1
  8448  1DC4  085D               	movf	getPercentValue@i+1,w
  8449  1DC5  00B2               	movwf	___ftdiv@f1+1
  8450  1DC6  085E               	movf	getPercentValue@i+2,w
  8451  1DC7  00B3               	movwf	___ftdiv@f1+2
  8452  1DC8  3188  2060  319D   	fcall	___ftdiv
  8453  1DCB  0020               	movlb	0	; select bank0
  8454  1DCC  082E               	movf	?___ftdiv,w
  8455  1DCD  00DC               	movwf	getPercentValue@i
  8456  1DCE  082F               	movf	?___ftdiv+1,w
  8457  1DCF  00DD               	movwf	getPercentValue@i+1
  8458  1DD0  0830               	movf	?___ftdiv+2,w
  8459  1DD1  00DE               	movwf	getPercentValue@i+2
  8460                           
  8461                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8462  1DD2  085B               	movf	getPercentValue@value,w
  8463  1DD3  00D9               	movwf	??_getPercentValue
  8464  1DD4  01DA               	clrf	??_getPercentValue+1
  8465  1DD5  09D9               	comf	??_getPercentValue,f
  8466  1DD6  09DA               	comf	??_getPercentValue+1,f
  8467  1DD7  0AD9               	incf	??_getPercentValue,f
  8468  1DD8  1903               	skipnz
  8469  1DD9  0ADA               	incf	??_getPercentValue+1,f
  8470  1DDA  0859               	movf	??_getPercentValue,w
  8471  1DDB  3E64               	addlw	100
  8472  1DDC  00A8               	movwf	___awtoft@c
  8473  1DDD  3000               	movlw	0
  8474  1DDE  3D5A               	addwfc	??_getPercentValue+1,w
  8475  1DDF  00A9               	movwf	___awtoft@c+1
  8476  1DE0  31A7  2706  319D   	fcall	___awtoft
  8477  1DE3  0020               	movlb	0	; select bank0
  8478  1DE4  0828               	movf	?___awtoft,w
  8479  1DE5  00B1               	movwf	___ftmul@f2
  8480  1DE6  0829               	movf	?___awtoft+1,w
  8481  1DE7  00B2               	movwf	___ftmul@f2+1
  8482  1DE8  082A               	movf	?___awtoft+2,w
  8483  1DE9  00B3               	movwf	___ftmul@f2+2
  8484  1DEA  085C               	movf	getPercentValue@i,w
  8485  1DEB  00AE               	movwf	___ftmul@f1
  8486  1DEC  085D               	movf	getPercentValue@i+1,w
  8487  1DED  00AF               	movwf	___ftmul@f1+1
  8488  1DEE  085E               	movf	getPercentValue@i+2,w
  8489  1DEF  00B0               	movwf	___ftmul@f1+2
  8490  1DF0  3189  2109  319D   	fcall	___ftmul
  8491  1DF3  0020               	movlb	0	; select bank0
  8492  1DF4  082E               	movf	?___ftmul,w
  8493  1DF5  00C1               	movwf	___ftadd@f2
  8494  1DF6  082F               	movf	?___ftmul+1,w
  8495  1DF7  00C2               	movwf	___ftadd@f2+1
  8496  1DF8  0830               	movf	?___ftmul+2,w
  8497  1DF9  00C3               	movwf	___ftadd@f2+2
  8498  1DFA  3000               	movlw	0
  8499  1DFB  00BE               	movwf	___ftadd@f1
  8500  1DFC  3086               	movlw	134
  8501  1DFD  00BF               	movwf	___ftadd@f1+1
  8502  1DFE  3042               	movlw	66
  8503  1DFF  00C0               	movwf	___ftadd@f1+2
  8504  1E00  318A  2286  319D   	fcall	___ftadd
  8505  1E03  0020               	movlb	0	; select bank0
  8506  1E04  083E               	movf	?___ftadd,w
  8507  1E05  00CB               	movwf	___fttol@f1
  8508  1E06  083F               	movf	?___ftadd+1,w
  8509  1E07  00CC               	movwf	___fttol@f1+1
  8510  1E08  0840               	movf	?___ftadd+2,w
  8511  1E09  00CD               	movwf	___fttol@f1+2
  8512  1E0A  3193  23FC         	fcall	___fttol
  8513  1E0C  0020               	movlb	0	; select bank0
  8514  1E0D  084B               	movf	?___fttol,w
  8515  1E0E  0008               	return
  8516  1E0F                     __end_of_getPercentValue:	
  8517                           
  8518                           	psect	text33
  8519  0909                     __ptext33:	
  8520 ;; *************** function ___ftmul *****************
  8521 ;; Defined at:
  8522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  f1              3   14[BANK0 ] float 
  8525 ;;  f2              3   17[BANK0 ] float 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8528 ;;  sign            1   29[BANK0 ] unsigned char 
  8529 ;;  cntr            1   28[BANK0 ] unsigned char 
  8530 ;;  exp             1   24[BANK0 ] unsigned char 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  3   14[BANK0 ] float 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0, pclath, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8540 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;Total ram usage:       16 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    5
  8547 ;; This function calls:
  8548 ;;		___ftpack
  8549 ;; This function is called by:
  8550 ;;		_getPercentValue
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function ___ftmul
  8556  0909                     ___ftmul:	
  8557                           
  8558                           ;incstack = 0
  8559                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8560  0909  0020               	movlb	0	; select bank0
  8561  090A  082E               	movf	___ftmul@f1,w
  8562  090B  00B4               	movwf	??___ftmul
  8563  090C  082F               	movf	___ftmul@f1+1,w
  8564  090D  00B5               	movwf	??___ftmul+1
  8565  090E  0830               	movf	___ftmul@f1+2,w
  8566  090F  00B6               	movwf	??___ftmul+2
  8567  0910  1003               	clrc
  8568  0911  0D35               	rlf	??___ftmul+1,w
  8569  0912  0D36               	rlf	??___ftmul+2,w
  8570  0913  00B7               	movwf	??___ftmul+3
  8571  0914  0837               	movf	??___ftmul+3,w
  8572  0915  00B8               	movwf	___ftmul@exp
  8573  0916  08B8               	movf	___ftmul@exp,f
  8574  0917  1D03               	skipz
  8575  0918  2920               	goto	l6330
  8576  0919  3000               	movlw	0
  8577  091A  00AE               	movwf	?___ftmul
  8578  091B  3000               	movlw	0
  8579  091C  00AF               	movwf	?___ftmul+1
  8580  091D  3000               	movlw	0
  8581  091E  00B0               	movwf	?___ftmul+2
  8582  091F  0008               	return
  8583  0920                     l6330:	
  8584  0920  0831               	movf	___ftmul@f2,w
  8585  0921  00B4               	movwf	??___ftmul
  8586  0922  0832               	movf	___ftmul@f2+1,w
  8587  0923  00B5               	movwf	??___ftmul+1
  8588  0924  0833               	movf	___ftmul@f2+2,w
  8589  0925  00B6               	movwf	??___ftmul+2
  8590  0926  1003               	clrc
  8591  0927  0D35               	rlf	??___ftmul+1,w
  8592  0928  0D36               	rlf	??___ftmul+2,w
  8593  0929  00B7               	movwf	??___ftmul+3
  8594  092A  0837               	movf	??___ftmul+3,w
  8595  092B  00BD               	movwf	___ftmul@sign
  8596  092C  08BD               	movf	___ftmul@sign,f
  8597  092D  1D03               	skipz
  8598  092E  2936               	goto	l6336
  8599  092F  3000               	movlw	0
  8600  0930  00AE               	movwf	?___ftmul
  8601  0931  3000               	movlw	0
  8602  0932  00AF               	movwf	?___ftmul+1
  8603  0933  3000               	movlw	0
  8604  0934  00B0               	movwf	?___ftmul+2
  8605  0935  0008               	return
  8606  0936                     l6336:	
  8607  0936  083D               	movf	___ftmul@sign,w
  8608  0937  3E7B               	addlw	123
  8609  0938  00B4               	movwf	??___ftmul
  8610  0939  0834               	movf	??___ftmul,w
  8611  093A  07B8               	addwf	___ftmul@exp,f
  8612  093B  082E               	movf	___ftmul@f1,w
  8613  093C  00B4               	movwf	??___ftmul
  8614  093D  082F               	movf	___ftmul@f1+1,w
  8615  093E  00B5               	movwf	??___ftmul+1
  8616  093F  0830               	movf	___ftmul@f1+2,w
  8617  0940  00B6               	movwf	??___ftmul+2
  8618  0941  3010               	movlw	16
  8619  0942                     u4545:	
  8620  0942  36B6               	lsrf	??___ftmul+2,f
  8621  0943  0CB5               	rrf	??___ftmul+1,f
  8622  0944  0CB4               	rrf	??___ftmul,f
  8623  0945  0B89               	decfsz	9,f
  8624  0946  2942               	goto	u4545
  8625  0947  0834               	movf	??___ftmul,w
  8626  0948  00B7               	movwf	??___ftmul+3
  8627  0949  0837               	movf	??___ftmul+3,w
  8628  094A  00BD               	movwf	___ftmul@sign
  8629  094B  0831               	movf	___ftmul@f2,w
  8630  094C  00B4               	movwf	??___ftmul
  8631  094D  0832               	movf	___ftmul@f2+1,w
  8632  094E  00B5               	movwf	??___ftmul+1
  8633  094F  0833               	movf	___ftmul@f2+2,w
  8634  0950  00B6               	movwf	??___ftmul+2
  8635  0951  3010               	movlw	16
  8636  0952                     u4555:	
  8637  0952  36B6               	lsrf	??___ftmul+2,f
  8638  0953  0CB5               	rrf	??___ftmul+1,f
  8639  0954  0CB4               	rrf	??___ftmul,f
  8640  0955  0B89               	decfsz	9,f
  8641  0956  2952               	goto	u4555
  8642  0957  0834               	movf	??___ftmul,w
  8643  0958  00B7               	movwf	??___ftmul+3
  8644  0959  0837               	movf	??___ftmul+3,w
  8645  095A  06BD               	xorwf	___ftmul@sign,f
  8646  095B  3080               	movlw	128
  8647  095C  00B4               	movwf	??___ftmul
  8648  095D  0834               	movf	??___ftmul,w
  8649  095E  05BD               	andwf	___ftmul@sign,f
  8650  095F  17AF               	bsf	___ftmul@f1+1,7
  8651  0960  17B2               	bsf	___ftmul@f2+1,7
  8652  0961  30FF               	movlw	255
  8653  0962  05B1               	andwf	___ftmul@f2,f
  8654  0963  30FF               	movlw	255
  8655  0964  05B2               	andwf	___ftmul@f2+1,f
  8656  0965  3000               	movlw	0
  8657  0966  05B3               	andwf	___ftmul@f2+2,f
  8658  0967  3000               	movlw	0
  8659  0968  00B9               	movwf	___ftmul@f3_as_product
  8660  0969  3000               	movlw	0
  8661  096A  00BA               	movwf	___ftmul@f3_as_product+1
  8662  096B  3000               	movlw	0
  8663  096C  00BB               	movwf	___ftmul@f3_as_product+2
  8664  096D  3007               	movlw	7
  8665  096E  00B4               	movwf	??___ftmul
  8666  096F  0834               	movf	??___ftmul,w
  8667  0970  00BC               	movwf	___ftmul@cntr
  8668  0971                     l6348:	
  8669  0971  1C2E               	btfss	___ftmul@f1,0
  8670  0972  2979               	goto	l6352
  8671  0973  0831               	movf	___ftmul@f2,w
  8672  0974  07B9               	addwf	___ftmul@f3_as_product,f
  8673  0975  0832               	movf	___ftmul@f2+1,w
  8674  0976  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8675  0977  0833               	movf	___ftmul@f2+2,w
  8676  0978  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8677  0979                     l6352:	
  8678  0979  3001               	movlw	1
  8679  097A                     u4575:	
  8680  097A  36B0               	lsrf	___ftmul@f1+2,f
  8681  097B  0CAF               	rrf	___ftmul@f1+1,f
  8682  097C  0CAE               	rrf	___ftmul@f1,f
  8683  097D  0B89               	decfsz	9,f
  8684  097E  297A               	goto	u4575
  8685  097F  3001               	movlw	1
  8686  0980                     u4585:	
  8687  0980  35B1               	lslf	___ftmul@f2,f
  8688  0981  0DB2               	rlf	___ftmul@f2+1,f
  8689  0982  0DB3               	rlf	___ftmul@f2+2,f
  8690  0983  0B89               	decfsz	9,f
  8691  0984  2980               	goto	u4585
  8692  0985  3001               	movlw	1
  8693  0986  02BC               	subwf	___ftmul@cntr,f
  8694  0987  1D03               	btfss	3,2
  8695  0988  2971               	goto	l6348
  8696  0989  3009               	movlw	9
  8697  098A  00B4               	movwf	??___ftmul
  8698  098B  0834               	movf	??___ftmul,w
  8699  098C  00BC               	movwf	___ftmul@cntr
  8700  098D                     l6360:	
  8701  098D  1C2E               	btfss	___ftmul@f1,0
  8702  098E  2995               	goto	l6364
  8703  098F  0831               	movf	___ftmul@f2,w
  8704  0990  07B9               	addwf	___ftmul@f3_as_product,f
  8705  0991  0832               	movf	___ftmul@f2+1,w
  8706  0992  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8707  0993  0833               	movf	___ftmul@f2+2,w
  8708  0994  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8709  0995                     l6364:	
  8710  0995  3001               	movlw	1
  8711  0996                     u4615:	
  8712  0996  36B0               	lsrf	___ftmul@f1+2,f
  8713  0997  0CAF               	rrf	___ftmul@f1+1,f
  8714  0998  0CAE               	rrf	___ftmul@f1,f
  8715  0999  0B89               	decfsz	9,f
  8716  099A  2996               	goto	u4615
  8717  099B  3001               	movlw	1
  8718  099C                     u4625:	
  8719  099C  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8720  099D  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8721  099E  0CB9               	rrf	___ftmul@f3_as_product,f
  8722  099F  0B89               	decfsz	9,f
  8723  09A0  299C               	goto	u4625
  8724  09A1  3001               	movlw	1
  8725  09A2  02BC               	subwf	___ftmul@cntr,f
  8726  09A3  1D03               	btfss	3,2
  8727  09A4  298D               	goto	l6360
  8728  09A5  0839               	movf	___ftmul@f3_as_product,w
  8729  09A6  00A0               	movwf	___ftpack@arg
  8730  09A7  083A               	movf	___ftmul@f3_as_product+1,w
  8731  09A8  00A1               	movwf	___ftpack@arg+1
  8732  09A9  083B               	movf	___ftmul@f3_as_product+2,w
  8733  09AA  00A2               	movwf	___ftpack@arg+2
  8734  09AB  0838               	movf	___ftmul@exp,w
  8735  09AC  00B4               	movwf	??___ftmul
  8736  09AD  0834               	movf	??___ftmul,w
  8737  09AE  00A3               	movwf	___ftpack@exp
  8738  09AF  083D               	movf	___ftmul@sign,w
  8739  09B0  00B5               	movwf	??___ftmul+1
  8740  09B1  0835               	movf	??___ftmul+1,w
  8741  09B2  00A4               	movwf	___ftpack@sign
  8742  09B3  319E  266B         	fcall	___ftpack
  8743  09B5  0020               	movlb	0	; select bank0
  8744  09B6  0820               	movf	?___ftpack,w
  8745  09B7  00AE               	movwf	?___ftmul
  8746  09B8  0821               	movf	?___ftpack+1,w
  8747  09B9  00AF               	movwf	?___ftmul+1
  8748  09BA  0822               	movf	?___ftpack+2,w
  8749  09BB  00B0               	movwf	?___ftmul+2
  8750  09BC  0008               	return
  8751  09BD                     __end_of___ftmul:	
  8752                           
  8753                           	psect	text34
  8754  0A86                     __ptext34:	
  8755 ;; *************** function ___ftadd *****************
  8756 ;; Defined at:
  8757 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;  f1              3   30[BANK0 ] float 
  8760 ;;  f2              3   33[BANK0 ] float 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  exp1            1   42[BANK0 ] unsigned char 
  8763 ;;  exp2            1   41[BANK0 ] unsigned char 
  8764 ;;  sign            1   40[BANK0 ] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  3   30[BANK0 ] float 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2, status,0, pclath, cstack
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8774 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;Total ram usage:       13 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    5
  8781 ;; This function calls:
  8782 ;;		___ftpack
  8783 ;; This function is called by:
  8784 ;;		_getPercentValue
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           
  8789                           ;psect for function ___ftadd
  8790  0A86                     ___ftadd:	
  8791                           
  8792                           ;incstack = 0
  8793                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8794  0A86  0020               	movlb	0	; select bank0
  8795  0A87  083E               	movf	___ftadd@f1,w
  8796  0A88  00C4               	movwf	??___ftadd
  8797  0A89  083F               	movf	___ftadd@f1+1,w
  8798  0A8A  00C5               	movwf	??___ftadd+1
  8799  0A8B  0840               	movf	___ftadd@f1+2,w
  8800  0A8C  00C6               	movwf	??___ftadd+2
  8801  0A8D  1003               	clrc
  8802  0A8E  0D45               	rlf	??___ftadd+1,w
  8803  0A8F  0D46               	rlf	??___ftadd+2,w
  8804  0A90  00C7               	movwf	??___ftadd+3
  8805  0A91  0847               	movf	??___ftadd+3,w
  8806  0A92  00CA               	movwf	___ftadd@exp1
  8807  0A93  0841               	movf	___ftadd@f2,w
  8808  0A94  00C4               	movwf	??___ftadd
  8809  0A95  0842               	movf	___ftadd@f2+1,w
  8810  0A96  00C5               	movwf	??___ftadd+1
  8811  0A97  0843               	movf	___ftadd@f2+2,w
  8812  0A98  00C6               	movwf	??___ftadd+2
  8813  0A99  1003               	clrc
  8814  0A9A  0D45               	rlf	??___ftadd+1,w
  8815  0A9B  0D46               	rlf	??___ftadd+2,w
  8816  0A9C  00C7               	movwf	??___ftadd+3
  8817  0A9D  0847               	movf	??___ftadd+3,w
  8818  0A9E  00C9               	movwf	___ftadd@exp2
  8819  0A9F  084A               	movf	___ftadd@exp1,w
  8820  0AA0  1903               	btfsc	3,2
  8821  0AA1  2AAE               	goto	l6218
  8822  0AA2  0849               	movf	___ftadd@exp2,w
  8823  0AA3  024A               	subwf	___ftadd@exp1,w
  8824  0AA4  1803               	skipnc
  8825  0AA5  2AB5               	goto	l6222
  8826  0AA6  034A               	decf	___ftadd@exp1,w
  8827  0AA7  3AFF               	xorlw	255
  8828  0AA8  0749               	addwf	___ftadd@exp2,w
  8829  0AA9  00C4               	movwf	??___ftadd
  8830  0AAA  3019               	movlw	25
  8831  0AAB  0244               	subwf	??___ftadd,w
  8832  0AAC  1C03               	skipc
  8833  0AAD  2AB5               	goto	l6222
  8834  0AAE                     l6218:	
  8835  0AAE  0841               	movf	___ftadd@f2,w
  8836  0AAF  00BE               	movwf	?___ftadd
  8837  0AB0  0842               	movf	___ftadd@f2+1,w
  8838  0AB1  00BF               	movwf	?___ftadd+1
  8839  0AB2  0843               	movf	___ftadd@f2+2,w
  8840  0AB3  00C0               	movwf	?___ftadd+2
  8841  0AB4  0008               	return
  8842  0AB5                     l6222:	
  8843  0AB5  0849               	movf	___ftadd@exp2,w
  8844  0AB6  1903               	btfsc	3,2
  8845  0AB7  0008               	return
  8846  0AB8  084A               	movf	___ftadd@exp1,w
  8847  0AB9  0249               	subwf	___ftadd@exp2,w
  8848  0ABA  1803               	skipnc
  8849  0ABB  2AC4               	goto	l6228
  8850  0ABC  0349               	decf	___ftadd@exp2,w
  8851  0ABD  3AFF               	xorlw	255
  8852  0ABE  074A               	addwf	___ftadd@exp1,w
  8853  0ABF  00C4               	movwf	??___ftadd
  8854  0AC0  3019               	movlw	25
  8855  0AC1  0244               	subwf	??___ftadd,w
  8856  0AC2  1803               	btfsc	3,0
  8857  0AC3  0008               	return
  8858  0AC4                     l6228:	
  8859  0AC4  3006               	movlw	6
  8860  0AC5  00C4               	movwf	??___ftadd
  8861  0AC6  0844               	movf	??___ftadd,w
  8862  0AC7  00C8               	movwf	___ftadd@sign
  8863  0AC8  1BC0               	btfsc	___ftadd@f1+2,7
  8864  0AC9  17C8               	bsf	___ftadd@sign,7
  8865  0ACA  1BC3               	btfsc	___ftadd@f2+2,7
  8866  0ACB  1748               	bsf	___ftadd@sign,6
  8867  0ACC  17BF               	bsf	___ftadd@f1+1,7
  8868  0ACD  30FF               	movlw	255
  8869  0ACE  05BE               	andwf	___ftadd@f1,f
  8870  0ACF  30FF               	movlw	255
  8871  0AD0  05BF               	andwf	___ftadd@f1+1,f
  8872  0AD1  3000               	movlw	0
  8873  0AD2  05C0               	andwf	___ftadd@f1+2,f
  8874  0AD3  17C2               	bsf	___ftadd@f2+1,7
  8875  0AD4  30FF               	movlw	255
  8876  0AD5  05C1               	andwf	___ftadd@f2,f
  8877  0AD6  30FF               	movlw	255
  8878  0AD7  05C2               	andwf	___ftadd@f2+1,f
  8879  0AD8  3000               	movlw	0
  8880  0AD9  05C3               	andwf	___ftadd@f2+2,f
  8881  0ADA  0849               	movf	___ftadd@exp2,w
  8882  0ADB  024A               	subwf	___ftadd@exp1,w
  8883  0ADC  1803               	skipnc
  8884  0ADD  2B00               	goto	l6250
  8885  0ADE                     l6240:	
  8886  0ADE  3001               	movlw	1
  8887  0ADF                     u4305:	
  8888  0ADF  35C1               	lslf	___ftadd@f2,f
  8889  0AE0  0DC2               	rlf	___ftadd@f2+1,f
  8890  0AE1  0DC3               	rlf	___ftadd@f2+2,f
  8891  0AE2  0B89               	decfsz	9,f
  8892  0AE3  2ADF               	goto	u4305
  8893  0AE4  3001               	movlw	1
  8894  0AE5  02C9               	subwf	___ftadd@exp2,f
  8895  0AE6  0849               	movf	___ftadd@exp2,w
  8896  0AE7  064A               	xorwf	___ftadd@exp1,w
  8897  0AE8  1903               	skipnz
  8898  0AE9  2AFB               	goto	l6248
  8899  0AEA  3001               	movlw	1
  8900  0AEB  02C8               	subwf	___ftadd@sign,f
  8901  0AEC  0848               	movf	___ftadd@sign,w
  8902  0AED  3907               	andlw	7
  8903  0AEE  1903               	btfsc	3,2
  8904  0AEF  2AFB               	goto	l6248
  8905  0AF0  2ADE               	goto	l6240
  8906  0AF1                     l6246:	
  8907  0AF1  3001               	movlw	1
  8908  0AF2                     u4335:	
  8909  0AF2  36C0               	lsrf	___ftadd@f1+2,f
  8910  0AF3  0CBF               	rrf	___ftadd@f1+1,f
  8911  0AF4  0CBE               	rrf	___ftadd@f1,f
  8912  0AF5  0B89               	decfsz	9,f
  8913  0AF6  2AF2               	goto	u4335
  8914  0AF7  3001               	movlw	1
  8915  0AF8  00C4               	movwf	??___ftadd
  8916  0AF9  0844               	movf	??___ftadd,w
  8917  0AFA  07CA               	addwf	___ftadd@exp1,f
  8918  0AFB                     l6248:	
  8919  0AFB  084A               	movf	___ftadd@exp1,w
  8920  0AFC  0649               	xorwf	___ftadd@exp2,w
  8921  0AFD  1903               	btfsc	3,2
  8922  0AFE  2B25               	goto	l3429
  8923  0AFF  2AF1               	goto	l6246
  8924  0B00                     l6250:	
  8925  0B00  084A               	movf	___ftadd@exp1,w
  8926  0B01  0249               	subwf	___ftadd@exp2,w
  8927  0B02  1803               	skipnc
  8928  0B03  2B25               	goto	l3429
  8929  0B04                     l6252:	
  8930  0B04  3001               	movlw	1
  8931  0B05                     u4365:	
  8932  0B05  35BE               	lslf	___ftadd@f1,f
  8933  0B06  0DBF               	rlf	___ftadd@f1+1,f
  8934  0B07  0DC0               	rlf	___ftadd@f1+2,f
  8935  0B08  0B89               	decfsz	9,f
  8936  0B09  2B05               	goto	u4365
  8937  0B0A  3001               	movlw	1
  8938  0B0B  02CA               	subwf	___ftadd@exp1,f
  8939  0B0C  0849               	movf	___ftadd@exp2,w
  8940  0B0D  064A               	xorwf	___ftadd@exp1,w
  8941  0B0E  1903               	skipnz
  8942  0B0F  2B21               	goto	l6260
  8943  0B10  3001               	movlw	1
  8944  0B11  02C8               	subwf	___ftadd@sign,f
  8945  0B12  0848               	movf	___ftadd@sign,w
  8946  0B13  3907               	andlw	7
  8947  0B14  1903               	btfsc	3,2
  8948  0B15  2B21               	goto	l6260
  8949  0B16  2B04               	goto	l6252
  8950  0B17                     l6258:	
  8951  0B17  3001               	movlw	1
  8952  0B18                     u4395:	
  8953  0B18  36C3               	lsrf	___ftadd@f2+2,f
  8954  0B19  0CC2               	rrf	___ftadd@f2+1,f
  8955  0B1A  0CC1               	rrf	___ftadd@f2,f
  8956  0B1B  0B89               	decfsz	9,f
  8957  0B1C  2B18               	goto	u4395
  8958  0B1D  3001               	movlw	1
  8959  0B1E  00C4               	movwf	??___ftadd
  8960  0B1F  0844               	movf	??___ftadd,w
  8961  0B20  07C9               	addwf	___ftadd@exp2,f
  8962  0B21                     l6260:	
  8963  0B21  084A               	movf	___ftadd@exp1,w
  8964  0B22  0649               	xorwf	___ftadd@exp2,w
  8965  0B23  1D03               	skipz
  8966  0B24  2B17               	goto	l6258
  8967  0B25                     l3429:	
  8968  0B25  1FC8               	btfss	___ftadd@sign,7
  8969  0B26  2B37               	goto	l6264
  8970  0B27  30FF               	movlw	255
  8971  0B28  06BE               	xorwf	___ftadd@f1,f
  8972  0B29  30FF               	movlw	255
  8973  0B2A  06BF               	xorwf	___ftadd@f1+1,f
  8974  0B2B  30FF               	movlw	255
  8975  0B2C  06C0               	xorwf	___ftadd@f1+2,f
  8976  0B2D  3001               	movlw	1
  8977  0B2E  07BE               	addwf	___ftadd@f1,f
  8978  0B2F  3000               	movlw	0
  8979  0B30  1803               	skipnc
  8980  0B31  3001               	movlw	1
  8981  0B32  07BF               	addwf	___ftadd@f1+1,f
  8982  0B33  3000               	movlw	0
  8983  0B34  1803               	skipnc
  8984  0B35  3001               	movlw	1
  8985  0B36  07C0               	addwf	___ftadd@f1+2,f
  8986  0B37                     l6264:	
  8987  0B37  1F48               	btfss	___ftadd@sign,6
  8988  0B38  2B49               	goto	l6268
  8989  0B39  30FF               	movlw	255
  8990  0B3A  06C1               	xorwf	___ftadd@f2,f
  8991  0B3B  30FF               	movlw	255
  8992  0B3C  06C2               	xorwf	___ftadd@f2+1,f
  8993  0B3D  30FF               	movlw	255
  8994  0B3E  06C3               	xorwf	___ftadd@f2+2,f
  8995  0B3F  3001               	movlw	1
  8996  0B40  07C1               	addwf	___ftadd@f2,f
  8997  0B41  3000               	movlw	0
  8998  0B42  1803               	skipnc
  8999  0B43  3001               	movlw	1
  9000  0B44  07C2               	addwf	___ftadd@f2+1,f
  9001  0B45  3000               	movlw	0
  9002  0B46  1803               	skipnc
  9003  0B47  3001               	movlw	1
  9004  0B48  07C3               	addwf	___ftadd@f2+2,f
  9005  0B49                     l6268:	
  9006  0B49  01C8               	clrf	___ftadd@sign
  9007  0B4A  083E               	movf	___ftadd@f1,w
  9008  0B4B  07C1               	addwf	___ftadd@f2,f
  9009  0B4C  083F               	movf	___ftadd@f1+1,w
  9010  0B4D  3DC2               	addwfc	___ftadd@f2+1,f
  9011  0B4E  0840               	movf	___ftadd@f1+2,w
  9012  0B4F  3DC3               	addwfc	___ftadd@f2+2,f
  9013  0B50  1FC3               	btfss	___ftadd@f2+2,7
  9014  0B51  2B64               	goto	l6278
  9015  0B52  30FF               	movlw	255
  9016  0B53  06C1               	xorwf	___ftadd@f2,f
  9017  0B54  30FF               	movlw	255
  9018  0B55  06C2               	xorwf	___ftadd@f2+1,f
  9019  0B56  30FF               	movlw	255
  9020  0B57  06C3               	xorwf	___ftadd@f2+2,f
  9021  0B58  3001               	movlw	1
  9022  0B59  07C1               	addwf	___ftadd@f2,f
  9023  0B5A  3000               	movlw	0
  9024  0B5B  1803               	skipnc
  9025  0B5C  3001               	movlw	1
  9026  0B5D  07C2               	addwf	___ftadd@f2+1,f
  9027  0B5E  3000               	movlw	0
  9028  0B5F  1803               	skipnc
  9029  0B60  3001               	movlw	1
  9030  0B61  07C3               	addwf	___ftadd@f2+2,f
  9031  0B62  01C8               	clrf	___ftadd@sign
  9032  0B63  0AC8               	incf	___ftadd@sign,f
  9033  0B64                     l6278:	
  9034  0B64  0841               	movf	___ftadd@f2,w
  9035  0B65  00A0               	movwf	___ftpack@arg
  9036  0B66  0842               	movf	___ftadd@f2+1,w
  9037  0B67  00A1               	movwf	___ftpack@arg+1
  9038  0B68  0843               	movf	___ftadd@f2+2,w
  9039  0B69  00A2               	movwf	___ftpack@arg+2
  9040  0B6A  084A               	movf	___ftadd@exp1,w
  9041  0B6B  00C4               	movwf	??___ftadd
  9042  0B6C  0844               	movf	??___ftadd,w
  9043  0B6D  00A3               	movwf	___ftpack@exp
  9044  0B6E  0848               	movf	___ftadd@sign,w
  9045  0B6F  00C5               	movwf	??___ftadd+1
  9046  0B70  0845               	movf	??___ftadd+1,w
  9047  0B71  00A4               	movwf	___ftpack@sign
  9048  0B72  319E  266B         	fcall	___ftpack
  9049  0B74  0020               	movlb	0	; select bank0
  9050  0B75  0820               	movf	?___ftpack,w
  9051  0B76  00BE               	movwf	?___ftadd
  9052  0B77  0821               	movf	?___ftpack+1,w
  9053  0B78  00BF               	movwf	?___ftadd+1
  9054  0B79  0822               	movf	?___ftpack+2,w
  9055  0B7A  00C0               	movwf	?___ftadd+2
  9056  0B7B  0008               	return
  9057  0B7C                     __end_of___ftadd:	
  9058                           
  9059                           	psect	text35
  9060  1816                     __ptext35:	
  9061 ;; *************** function _RF_RxDisable *****************
  9062 ;; Defined at:
  9063 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  rf              1    wreg     unsigned char 
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;  rf              1    4[BANK0 ] unsigned char 
  9068 ;; Return value:  Size  Location     Type
  9069 ;;		None               void
  9070 ;; Registers used:
  9071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;Total ram usage:        1 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    6
  9084 ;; This function calls:
  9085 ;;		_CC2500_WriteCommand
  9086 ;;		_RfPointSelect
  9087 ;;		_setINT_GO
  9088 ;; This function is called by:
  9089 ;;		_setRF_Main
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _RF_RxDisable
  9095  1816                     _RF_RxDisable:	
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9099                           ;RF_RxDisable@rf stored from wreg
  9100  1816  0020               	movlb	0	; select bank0
  9101  1817  00A4               	movwf	RF_RxDisable@rf
  9102                           
  9103                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  9104  1818  0824               	movf	RF_RxDisable@rf,w
  9105  1819  31A3  235E  3198   	fcall	_RfPointSelect
  9106                           
  9107                           ;RF_Control_B1.c: 202: if(RF->RxStatus)
  9108  181C  087C               	movf	_RF,w
  9109  181D  0086               	movwf	6
  9110  181E  0187               	clrf	7
  9111  181F  1D81               	btfss	1,3
  9112  1820  0008               	return
  9113                           
  9114                           ;RF_Control_B1.c: 203: {
  9115                           ;RF_Control_B1.c: 204: RF->RxStatus=0;
  9116  1821  087C               	movf	_RF,w
  9117  1822  0086               	movwf	6
  9118  1823  0187               	clrf	7
  9119  1824  1181               	bcf	1,3
  9120                           
  9121                           ;RF_Control_B1.c: 205: RF->ReceiveGO=0;
  9122  1825  087C               	movf	_RF,w
  9123  1826  0086               	movwf	6
  9124  1827  0187               	clrf	7
  9125  1828  1081               	bcf	1,1
  9126                           
  9127                           ;RF_Control_B1.c: 206: RF->DebounceTime=0;
  9128  1829  0A7C               	incf	_RF,w
  9129  182A  0086               	movwf	6
  9130  182B  0187               	clrf	7
  9131  182C  0181               	clrf	1
  9132                           
  9133                           ;RF_Control_B1.c: 207: RF->Debounce=0;
  9134  182D  087C               	movf	_RF,w
  9135  182E  0086               	movwf	6
  9136  182F  0187               	clrf	7
  9137  1830  1281               	bcf	1,5
  9138                           
  9139                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x36);
  9140  1831  3036               	movlw	54
  9141  1832  31A4  2456  3198   	fcall	_CC2500_WriteCommand
  9142                           
  9143                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x3A);
  9144  1835  303A               	movlw	58
  9145  1836  31A4  2456  3198   	fcall	_CC2500_WriteCommand
  9146                           
  9147                           ;RF_Control_B1.c: 210: setINT_GO(0);
  9148  1839  3000               	movlw	0
  9149  183A  31A3  2335         	fcall	_setINT_GO
  9150  183C  0008               	return
  9151  183D                     __end_of_RF_RxDisable:	
  9152                           
  9153                           	psect	text36
  9154  1C3C                     __ptext36:	
  9155 ;; *************** function _CC2500_TxData *****************
  9156 ;; Defined at:
  9157 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9162 ;; Return value:  Size  Location     Type
  9163 ;;		None               void
  9164 ;; Registers used:
  9165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        2 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    6
  9178 ;; This function calls:
  9179 ;;		_CC2500_WriteByte
  9180 ;;		_CC2500_WriteCommand
  9181 ;; This function is called by:
  9182 ;;		_setRF_Main
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _CC2500_TxData
  9188  1C3C                     _CC2500_TxData:	
  9189                           
  9190                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9191                           ;CC2500_B1.c: 34: RC4=0;
  9192                           
  9193                           ;incstack = 0
  9194                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9195  1C3C  0020               	movlb	0	; select bank0
  9196  1C3D  120E               	bcf	14,4	;volatile
  9197                           
  9198                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9199  1C3E  307F               	movlw	127
  9200  1C3F  00A4               	movwf	??_CC2500_TxData
  9201  1C40  0824               	movf	??_CC2500_TxData,w
  9202  1C41  0021               	movlb	1	; select bank1
  9203  1C42  00BF               	movwf	_SPI0Buffer^(0+128)
  9204  1C43                     l307:	
  9205                           ;CC2500_B1.c: 36: while(RC2==1);
  9206                           
  9207  1C43  0020               	movlb	0	; select bank0
  9208  1C44  190E               	btfsc	14,2	;volatile
  9209  1C45  2C43               	goto	l307
  9210                           
  9211                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9212  1C46  31A5  25BC  319C   	fcall	_CC2500_WriteByte
  9213                           
  9214                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9215  1C49  0021               	movlb	1	; select bank1
  9216  1C4A  0840               	movf	_Tx_Length^(0+128),w
  9217  1C4B  0020               	movlb	0	; select bank0
  9218  1C4C  00A4               	movwf	??_CC2500_TxData
  9219  1C4D  0824               	movf	??_CC2500_TxData,w
  9220  1C4E  0021               	movlb	1	; select bank1
  9221  1C4F  00BF               	movwf	_SPI0Buffer^(0+128)
  9222                           
  9223                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9224  1C50  31A5  25BC  319C   	fcall	_CC2500_WriteByte
  9225                           
  9226                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9227  1C53  0020               	movlb	0	; select bank0
  9228  1C54  01A5               	clrf	CC2500_TxData@loop_e
  9229  1C55                     l7016:	
  9230  1C55  0021               	movlb	1	; select bank1
  9231  1C56  0840               	movf	_Tx_Length^(0+128),w
  9232  1C57  0020               	movlb	0	; select bank0
  9233  1C58  0225               	subwf	CC2500_TxData@loop_e,w
  9234  1C59  1803               	btfsc	3,0
  9235  1C5A  2C6D               	goto	l312
  9236                           
  9237                           ;CC2500_B1.c: 41: {
  9238                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9239  1C5B  0825               	movf	CC2500_TxData@loop_e,w
  9240  1C5C  3EA0               	addlw	_RF_Data& (0+255)
  9241  1C5D  0086               	movwf	6
  9242  1C5E  0187               	clrf	7
  9243  1C5F  0801               	movf	1,w
  9244  1C60  00A4               	movwf	??_CC2500_TxData
  9245  1C61  0824               	movf	??_CC2500_TxData,w
  9246  1C62  0021               	movlb	1	; select bank1
  9247  1C63  00BF               	movwf	_SPI0Buffer^(0+128)
  9248                           
  9249                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9250  1C64  31A5  25BC  319C   	fcall	_CC2500_WriteByte
  9251  1C67  3001               	movlw	1
  9252  1C68  0020               	movlb	0	; select bank0
  9253  1C69  00A4               	movwf	??_CC2500_TxData
  9254  1C6A  0824               	movf	??_CC2500_TxData,w
  9255  1C6B  07A5               	addwf	CC2500_TxData@loop_e,f
  9256  1C6C  2C55               	goto	l7016
  9257  1C6D                     l312:	
  9258                           
  9259                           ;CC2500_B1.c: 44: }
  9260                           ;CC2500_B1.c: 45: RC4=1;
  9261  1C6D  160E               	bsf	14,4	;volatile
  9262                           
  9263                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9264  1C6E  3035               	movlw	53
  9265  1C6F  31A4  2456  319C   	fcall	_CC2500_WriteCommand
  9266  1C72                     l313:	
  9267                           ;CC2500_B1.c: 47: while(RB0==0);
  9268                           
  9269  1C72  0020               	movlb	0	; select bank0
  9270  1C73  1C0D               	btfss	13,0	;volatile
  9271  1C74  2C72               	goto	l313
  9272  1C75                     l316:	
  9273                           ;CC2500_B1.c: 48: while(RB0==1);
  9274                           
  9275  1C75  180D               	btfsc	13,0	;volatile
  9276  1C76  2C75               	goto	l316
  9277                           
  9278                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9279  1C77  3036               	movlw	54
  9280  1C78  31A4  2456  319C   	fcall	_CC2500_WriteCommand
  9281                           
  9282                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9283  1C7B  303B               	movlw	59
  9284  1C7C  31A4  2456         	fcall	_CC2500_WriteCommand
  9285                           
  9286                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9287  1C7E  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9288  1C7F  0008               	return
  9289  1C80                     __end_of_CC2500_TxData:	
  9290                           
  9291                           	psect	text37
  9292  1ECC                     __ptext37:	
  9293 ;; *************** function _CC2500_RxData *****************
  9294 ;; Defined at:
  9295 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;		None               void
  9302 ;; Registers used:
  9303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:        2 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    6
  9316 ;; This function calls:
  9317 ;;		_CC2500_ReadByte
  9318 ;;		_CC2500_ReadStatus
  9319 ;;		_CC2500_WriteByte
  9320 ;;		_CC2500_WriteCommand
  9321 ;;		_setRF_RxStatus
  9322 ;; This function is called by:
  9323 ;;		_setRF_Main
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           
  9328                           ;psect for function _CC2500_RxData
  9329  1ECC                     _CC2500_RxData:	
  9330                           
  9331                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9332                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9336  1ECC  0020               	movlb	0	; select bank0
  9337  1ECD  180D               	btfsc	13,0	;volatile
  9338  1ECE                     l323:	
  9339                           ;CC2500_B1.c: 63: {
  9340                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9341                           
  9342  1ECE  180D               	btfsc	13,0	;volatile
  9343  1ECF  2ECE               	goto	l323
  9344                           
  9345                           ;CC2500_B1.c: 65: }
  9346                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9347  1ED0  303B               	movlw	59
  9348  1ED1  31A6  2655  319E   	fcall	_CC2500_ReadStatus
  9349                           
  9350                           ;CC2500_B1.c: 67: if(s_data != 0)
  9351  1ED4  0021               	movlb	1	; select bank1
  9352  1ED5  0843               	movf	_s_data^(0+128),w
  9353  1ED6  1903               	btfsc	3,2
  9354  1ED7  2F22               	goto	l9098
  9355                           
  9356                           ;CC2500_B1.c: 69: {
  9357                           ;CC2500_B1.c: 70: RC4=0;
  9358  1ED8  0020               	movlb	0	; select bank0
  9359  1ED9  120E               	bcf	14,4	;volatile
  9360                           
  9361                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9362  1EDA  30FF               	movlw	255
  9363  1EDB  00A4               	movwf	??_CC2500_RxData
  9364  1EDC  0824               	movf	??_CC2500_RxData,w
  9365  1EDD  0021               	movlb	1	; select bank1
  9366  1EDE  00BF               	movwf	_SPI0Buffer^(0+128)
  9367  1EDF                     l327:	
  9368                           ;CC2500_B1.c: 72: while(RC2==1);
  9369                           
  9370  1EDF  0020               	movlb	0	; select bank0
  9371  1EE0  190E               	btfsc	14,2	;volatile
  9372  1EE1  2EDF               	goto	l327
  9373                           
  9374                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9375  1EE2  31A5  25BC  319E   	fcall	_CC2500_WriteByte
  9376                           
  9377                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9378  1EE5  31A6  268C  319E   	fcall	_CC2500_ReadByte
  9379                           
  9380                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9381  1EE8  0021               	movlb	1	; select bank1
  9382  1EE9  083F               	movf	_SPI0Buffer^(0+128),w
  9383  1EEA  0020               	movlb	0	; select bank0
  9384  1EEB  00A4               	movwf	??_CC2500_RxData
  9385  1EEC  0824               	movf	??_CC2500_RxData,w
  9386  1EED  0021               	movlb	1	; select bank1
  9387  1EEE  00BE               	movwf	_Rx_Length^(0+128)
  9388                           
  9389                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9390  1EEF  0020               	movlb	0	; select bank0
  9391  1EF0  01A5               	clrf	CC2500_RxData@loop_f
  9392  1EF1                     l9084:	
  9393  1EF1  0021               	movlb	1	; select bank1
  9394  1EF2  083E               	movf	_Rx_Length^(0+128),w
  9395  1EF3  0020               	movlb	0	; select bank0
  9396  1EF4  0225               	subwf	CC2500_RxData@loop_f,w
  9397  1EF5  1803               	btfsc	3,0
  9398  1EF6  2F09               	goto	l9086
  9399                           
  9400                           ;CC2500_B1.c: 78: {
  9401                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9402  1EF7  31A6  268C  319E   	fcall	_CC2500_ReadByte
  9403                           
  9404                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9405  1EFA  0021               	movlb	1	; select bank1
  9406  1EFB  083F               	movf	_SPI0Buffer^(0+128),w
  9407  1EFC  0020               	movlb	0	; select bank0
  9408  1EFD  00A4               	movwf	??_CC2500_RxData
  9409  1EFE  0825               	movf	CC2500_RxData@loop_f,w
  9410  1EFF  3EA0               	addlw	_RF_Data& (0+255)
  9411  1F00  0086               	movwf	6
  9412  1F01  0187               	clrf	7
  9413  1F02  0824               	movf	??_CC2500_RxData,w
  9414  1F03  0081               	movwf	1
  9415  1F04  3001               	movlw	1
  9416  1F05  00A4               	movwf	??_CC2500_RxData
  9417  1F06  0824               	movf	??_CC2500_RxData,w
  9418  1F07  07A5               	addwf	CC2500_RxData@loop_f,f
  9419  1F08  2EF1               	goto	l9084
  9420  1F09                     l9086:	
  9421                           
  9422                           ;CC2500_B1.c: 81: }
  9423                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9424  1F09  31A6  268C  319E   	fcall	_CC2500_ReadByte
  9425                           
  9426                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9427  1F0C  0021               	movlb	1	; select bank1
  9428  1F0D  083F               	movf	_SPI0Buffer^(0+128),w
  9429  1F0E  0020               	movlb	0	; select bank0
  9430  1F0F  00A4               	movwf	??_CC2500_RxData
  9431  1F10  0824               	movf	??_CC2500_RxData,w
  9432  1F11  0021               	movlb	1	; select bank1
  9433  1F12  00BD               	movwf	_RSSI^(0+128)
  9434                           
  9435                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9436  1F13  31A6  268C  319E   	fcall	_CC2500_ReadByte
  9437                           
  9438                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9439  1F16  0021               	movlb	1	; select bank1
  9440  1F17  083F               	movf	_SPI0Buffer^(0+128),w
  9441  1F18  0020               	movlb	0	; select bank0
  9442  1F19  00A4               	movwf	??_CC2500_RxData
  9443  1F1A  0824               	movf	??_CC2500_RxData,w
  9444  1F1B  0021               	movlb	1	; select bank1
  9445  1F1C  00B7               	movwf	_CRC^(0+128)
  9446                           
  9447                           ;CC2500_B1.c: 86: RC4=1;
  9448  1F1D  0020               	movlb	0	; select bank0
  9449  1F1E  160E               	bsf	14,4	;volatile
  9450                           
  9451                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9452  1F1F  0021               	movlb	1	; select bank1
  9453  1F20  1BB7               	btfsc	_CRC^(0+128),7
  9454                           
  9455                           ;CC2500_B1.c: 88: Receive_OK=1;
  9456  1F21  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9457  1F22                     l9098:	
  9458                           
  9459                           ;CC2500_B1.c: 89: }
  9460                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9461  1F22  3036               	movlw	54
  9462  1F23  31A4  2456  319E   	fcall	_CC2500_WriteCommand
  9463                           
  9464                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9465  1F26  303A               	movlw	58
  9466  1F27  31A4  2456  319E   	fcall	_CC2500_WriteCommand
  9467                           
  9468                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9469  1F2A  0020               	movlb	0	; select bank0
  9470  1F2B  01A2               	clrf	setRF_RxStatus@command
  9471  1F2C  3001               	movlw	1
  9472  1F2D  31A4  241C         	fcall	_setRF_RxStatus
  9473  1F2F  0008               	return
  9474  1F30                     __end_of_CC2500_RxData:	
  9475                           
  9476                           	psect	text38
  9477  241C                     __ptext38:	
  9478 ;; *************** function _setRF_RxStatus *****************
  9479 ;; Defined at:
  9480 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;  rf              1    wreg     unsigned char 
  9483 ;;  command         1    2[BANK0 ] unsigned char 
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;  rf              1    3[BANK0 ] unsigned char 
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9495 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;Total ram usage:        2 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    5
  9502 ;; This function calls:
  9503 ;;		_RfPointSelect
  9504 ;; This function is called by:
  9505 ;;		_CC2500_RxData
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function _setRF_RxStatus
  9511  241C                     _setRF_RxStatus:	
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9515                           ;setRF_RxStatus@rf stored from wreg
  9516  241C  0020               	movlb	0	; select bank0
  9517  241D  00A3               	movwf	setRF_RxStatus@rf
  9518                           
  9519                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9520  241E  0823               	movf	setRF_RxStatus@rf,w
  9521  241F  31A3  235E         	fcall	_RfPointSelect
  9522                           
  9523                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9524  2421  087C               	movf	_RF,w
  9525  2422  0086               	movwf	6
  9526  2423  0187               	clrf	7
  9527  2424  0020               	movlb	0	; select bank0
  9528  2425  0822               	movf	setRF_RxStatus@command,w
  9529  2426  1181               	bcf	1,3
  9530  2427  1D03               	skipz
  9531  2428  1581               	bsf	1,3
  9532  2429  0008               	return
  9533  242A                     __end_of_setRF_RxStatus:	
  9534                           
  9535                           	psect	text39
  9536  2655                     __ptext39:	
  9537 ;; *************** function _CC2500_ReadStatus *****************
  9538 ;; Defined at:
  9539 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  status_addr     1    wreg     unsigned char 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;		None               void
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:        2 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    5
  9560 ;; This function calls:
  9561 ;;		_CC2500_ReadByte
  9562 ;;		_CC2500_WriteByte
  9563 ;; This function is called by:
  9564 ;;		_CC2500_RxData
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           
  9569                           ;psect for function _CC2500_ReadStatus
  9570  2655                     _CC2500_ReadStatus:	
  9571                           
  9572                           ;incstack = 0
  9573                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9574                           ;CC2500_ReadStatus@status_addr stored from wreg
  9575  2655  0020               	movlb	0	; select bank0
  9576  2656  00A3               	movwf	CC2500_ReadStatus@status_addr
  9577                           
  9578                           ;CC2500_B1.c: 269: RC4=0;
  9579  2657  120E               	bcf	14,4	;volatile
  9580                           
  9581                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9582  2658  0823               	movf	CC2500_ReadStatus@status_addr,w
  9583  2659  3EC0               	addlw	192
  9584  265A  00A2               	movwf	??_CC2500_ReadStatus
  9585  265B  0822               	movf	??_CC2500_ReadStatus,w
  9586  265C  0021               	movlb	1	; select bank1
  9587  265D  00BF               	movwf	_SPI0Buffer^(0+128)
  9588  265E                     l403:	
  9589                           ;CC2500_B1.c: 272: while(RC2==1);
  9590                           
  9591  265E  0020               	movlb	0	; select bank0
  9592  265F  190E               	btfsc	14,2	;volatile
  9593  2660  2E5E               	goto	l403
  9594                           
  9595                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9596  2661  31A5  25BC  31A6   	fcall	_CC2500_WriteByte
  9597                           
  9598                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9599  2664  31A6  268C         	fcall	_CC2500_ReadByte
  9600                           
  9601                           ;CC2500_B1.c: 276: RC4=1;
  9602  2666  0020               	movlb	0	; select bank0
  9603  2667  160E               	bsf	14,4	;volatile
  9604                           
  9605                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9606  2668  0021               	movlb	1	; select bank1
  9607  2669  083F               	movf	_SPI0Buffer^(0+128),w
  9608  266A  0020               	movlb	0	; select bank0
  9609  266B  00A2               	movwf	??_CC2500_ReadStatus
  9610  266C  0822               	movf	??_CC2500_ReadStatus,w
  9611  266D  0021               	movlb	1	; select bank1
  9612  266E  00C3               	movwf	_s_data^(0+128)
  9613  266F  0008               	return
  9614  2670                     __end_of_CC2500_ReadStatus:	
  9615                           
  9616                           	psect	text40
  9617  268C                     __ptext40:	
  9618 ;; *************** function _CC2500_ReadByte *****************
  9619 ;; Defined at:
  9620 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;		None               void
  9627 ;; Registers used:
  9628 ;;		wreg, status,2, status,0
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:        2 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    4
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_CC2500_RxData
  9645 ;;		_CC2500_ReadStatus
  9646 ;;		_CC2500_ReadREG
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _CC2500_ReadByte
  9652  268C                     _CC2500_ReadByte:	
  9653                           
  9654                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9655                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9659  268C  0020               	movlb	0	; select bank0
  9660  268D  01A1               	clrf	CC2500_ReadByte@loop_b
  9661  268E                     L11:	
  9662  268E  3008               	movlw	8
  9663  268F  0221               	subwf	CC2500_ReadByte@loop_b,w
  9664  2690  1803               	btfsc	3,0
  9665  2691  0008               	return
  9666                           
  9667                           ;CC2500_B1.c: 214: {
  9668                           ;CC2500_B1.c: 215: RC1=1;
  9669  2692  148E               	bsf	14,1	;volatile
  9670                           
  9671                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9672  2693  1003               	clrc
  9673  2694  0021               	movlb	1	; select bank1
  9674  2695  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9675                           
  9676                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9677  2696  0020               	movlb	0	; select bank0
  9678  2697  1D0E               	btfss	14,2	;volatile
  9679  2698  2E9C               	goto	l6740
  9680                           
  9681                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9682  2699  0021               	movlb	1	; select bank1
  9683  269A  143F               	bsf	_SPI0Buffer^(0+128),0
  9684  269B  2EA2               	goto	l6742
  9685  269C                     l6740:	
  9686                           
  9687                           ;CC2500_B1.c: 219: else
  9688                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9689  269C  30FE               	movlw	254
  9690  269D  0020               	movlb	0	; select bank0
  9691  269E  00A0               	movwf	??_CC2500_ReadByte
  9692  269F  0820               	movf	??_CC2500_ReadByte,w
  9693  26A0  0021               	movlb	1	; select bank1
  9694  26A1  05BF               	andwf	_SPI0Buffer^(0+128),f
  9695  26A2                     l6742:	
  9696                           
  9697                           ;CC2500_B1.c: 221: RC1=0;
  9698  26A2  0020               	movlb	0	; select bank0
  9699  26A3  108E               	bcf	14,1	;volatile
  9700  26A4  3001               	movlw	1
  9701  26A5  00A0               	movwf	??_CC2500_ReadByte
  9702  26A6  0820               	movf	??_CC2500_ReadByte,w
  9703  26A7  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9704  26A8  2E8E               	goto	L11
  9705  26A9                     __end_of_CC2500_ReadByte:	
  9706                           
  9707                           	psect	text41
  9708  22D1                     __ptext41:	
  9709 ;; *************** function _RF_Initialization *****************
  9710 ;; Defined at:
  9711 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;		None               void
  9718 ;; Registers used:
  9719 ;;		wreg, status,2, status,0, pclath, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        0 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		_setRF_Initialization
  9734 ;; This function is called by:
  9735 ;;		_main
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _RF_Initialization
  9741  22D1                     _RF_Initialization:	
  9742                           
  9743                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9747  22D1  3001               	movlw	1
  9748  22D2  31A3  2305         	fcall	_setRF_Initialization
  9749  22D4  0008               	return
  9750  22D5                     __end_of_RF_Initialization:	
  9751                           
  9752                           	psect	text42
  9753  2305                     __ptext42:	
  9754 ;; *************** function _setRF_Initialization *****************
  9755 ;; Defined at:
  9756 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  rf              1    wreg     unsigned char 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  rf              1    0[COMMON] unsigned char 
  9761 ;; Return value:  Size  Location     Type
  9762 ;;		None               void
  9763 ;; Registers used:
  9764 ;;		wreg
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;Total ram usage:        1 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    4
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_RF_Initialization
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           
  9785                           ;psect for function _setRF_Initialization
  9786  2305                     _setRF_Initialization:	
  9787                           
  9788                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9789                           
  9790                           ;incstack = 0
  9791                           ; Regs used in _setRF_Initialization: [wreg]
  9792  2305  3015               	movlw	21
  9793  2306  0020               	movlb	0	; select bank0
  9794  2307  00A0               	movwf	??_setRF_Initialization
  9795  2308  0820               	movf	??_setRF_Initialization,w
  9796  2309  0021               	movlb	1	; select bank1
  9797  230A  00C0               	movwf	_Tx_Length^(0+128)
  9798  230B  0008               	return
  9799  230C                     __end_of_setRF_Initialization:	
  9800                           
  9801                           	psect	text43
  9802  22BC                     __ptext43:	
  9803 ;; *************** function _PowerFault_Main *****************
  9804 ;; Defined at:
  9805 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;		None
  9810 ;; Return value:  Size  Location     Type
  9811 ;;		None               void
  9812 ;; Registers used:
  9813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;Total ram usage:        0 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:   10
  9826 ;; This function calls:
  9827 ;;		_setPowerFault_Main
  9828 ;; This function is called by:
  9829 ;;		_main
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _PowerFault_Main
  9835  22BC                     _PowerFault_Main:	
  9836                           
  9837                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9838                           
  9839                           ;incstack = 0
  9840                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9841  22BC  318C  2474         	fcall	_setPowerFault_Main
  9842  22BE  0008               	return
  9843  22BF                     __end_of_PowerFault_Main:	
  9844                           
  9845                           	psect	text44
  9846  0C74                     __ptext44:	
  9847 ;; *************** function _setPowerFault_Main *****************
  9848 ;; Defined at:
  9849 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;		None
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;		None
  9854 ;; Return value:  Size  Location     Type
  9855 ;;		None               void
  9856 ;; Registers used:
  9857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;Total ram usage:        2 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; Hardware stack levels required when called:    9
  9870 ;; This function calls:
  9871 ;;		_getLoad_Safe
  9872 ;;		_getTemp_Safe
  9873 ;;		_setPowerFault_Exceptions
  9874 ;; This function is called by:
  9875 ;;		_PowerFault_Main
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           
  9880                           ;psect for function _setPowerFault_Main
  9881  0C74                     _setPowerFault_Main:	
  9882                           
  9883                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9884                           
  9885                           ;incstack = 0
  9886                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9887  0C74  087B               	movf	_PF,w
  9888  0C75  0086               	movwf	6
  9889  0C76  3001               	movlw	1	; select bank2/3
  9890  0C77  0087               	movwf	7
  9891  0C78  1C01               	btfss	1,0
  9892  0C79  0008               	return
  9893                           
  9894                           ;PowerFault_B1.c: 64: {
  9895                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9896  0C7A  087B               	movf	_PF,w
  9897  0C7B  0086               	movwf	6
  9898  0C7C  3001               	movlw	1	; select bank2/3
  9899  0C7D  0087               	movwf	7
  9900  0C7E  1981               	btfsc	1,3
  9901  0C7F  2CC4               	goto	l9608
  9902                           
  9903                           ;PowerFault_B1.c: 66: {
  9904                           ;PowerFault_B1.c: 67: PF->Time++;
  9905  0C80  087B               	movf	_PF,w
  9906  0C81  3E06               	addlw	6
  9907  0C82  0086               	movwf	6
  9908  0C83  3001               	movlw	1	; select bank2/3
  9909  0C84  0087               	movwf	7
  9910  0C85  3001               	movlw	1
  9911  0C86  0781               	addwf	1,f
  9912  0C87  3141               	addfsr 1,1
  9913  0C88  1803               	skipnc
  9914  0C89  0A81               	incf	1,f
  9915                           
  9916                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9917  0C8A  087B               	movf	_PF,w
  9918  0C8B  3E06               	addlw	6
  9919  0C8C  0086               	movwf	6
  9920  0C8D  3001               	movlw	1	; select bank2/3
  9921  0C8E  0087               	movwf	7
  9922  0C8F  3F40               	moviw [0]fsr1
  9923  0C90  0020               	movlb	0	; select bank0
  9924  0C91  00AD               	movwf	??_setPowerFault_Main
  9925  0C92  3F41               	moviw [1]fsr1
  9926  0C93  00AE               	movwf	??_setPowerFault_Main+1
  9927  0C94  3002               	movlw	2
  9928  0C95  022E               	subwf	??_setPowerFault_Main+1,w
  9929  0C96  30BC               	movlw	188
  9930  0C97  1903               	skipnz
  9931  0C98  022D               	subwf	??_setPowerFault_Main,w
  9932  0C99  1C03               	skipc
  9933  0C9A  0008               	return
  9934                           
  9935                           ;PowerFault_B1.c: 69: {
  9936                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9937  0C9B  31A3  238A  318C   	fcall	_getLoad_Safe
  9938  0C9E  3A00               	xorlw	0
  9939  0C9F  1903               	skipnz
  9940  0CA0  2CBA               	goto	l9606
  9941  0CA1  31A2  22F7  318C   	fcall	_getTemp_Safe
  9942  0CA4  3A00               	xorlw	0
  9943  0CA5  1903               	skipnz
  9944  0CA6  2CBA               	goto	l9606
  9945                           
  9946                           ;PowerFault_B1.c: 71: {
  9947                           ;PowerFault_B1.c: 72: PF->Time=0;
  9948  0CA7  087B               	movf	_PF,w
  9949  0CA8  3E06               	addlw	6
  9950  0CA9  0086               	movwf	6
  9951  0CAA  3001               	movlw	1	; select bank2/3
  9952  0CAB  0087               	movwf	7
  9953  0CAC  3000               	movlw	0
  9954  0CAD  3FC0               	movwi [0]fsr1
  9955  0CAE  3FC1               	movwi [1]fsr1
  9956                           
  9957                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9958  0CAF  087B               	movf	_PF,w
  9959  0CB0  0086               	movwf	6
  9960  0CB1  3001               	movlw	1	; select bank2/3
  9961  0CB2  0087               	movwf	7
  9962  0CB3  1581               	bsf	1,3
  9963                           
  9964                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9965  0CB4  087B               	movf	_PF,w
  9966  0CB5  0086               	movwf	6
  9967  0CB6  3001               	movlw	1	; select bank2/3
  9968  0CB7  0087               	movwf	7
  9969  0CB8  1101               	bcf	1,2
  9970                           
  9971                           ;PowerFault_B1.c: 75: }
  9972  0CB9  0008               	return
  9973  0CBA                     l9606:	
  9974                           
  9975                           ;PowerFault_B1.c: 76: else
  9976                           ;PowerFault_B1.c: 77: {
  9977                           ;PowerFault_B1.c: 78: PF->Time=700;
  9978  0CBA  087B               	movf	_PF,w
  9979  0CBB  3E06               	addlw	6
  9980  0CBC  0086               	movwf	6
  9981  0CBD  3001               	movlw	1	; select bank2/3
  9982  0CBE  0087               	movwf	7
  9983  0CBF  30BC               	movlw	188
  9984  0CC0  3FC0               	movwi [0]fsr1
  9985  0CC1  3002               	movlw	2
  9986  0CC2  3FC1               	movwi [1]fsr1
  9987                           
  9988                           ;PowerFault_B1.c: 79: }
  9989                           ;PowerFault_B1.c: 80: }
  9990                           ;PowerFault_B1.c: 81: }
  9991  0CC3  0008               	return
  9992  0CC4                     l9608:	
  9993                           
  9994                           ;PowerFault_B1.c: 82: else
  9995                           ;PowerFault_B1.c: 83: {
  9996                           ;PowerFault_B1.c: 84: PF->Time++;
  9997  0CC4  087B               	movf	_PF,w
  9998  0CC5  3E06               	addlw	6
  9999  0CC6  0086               	movwf	6
 10000  0CC7  3001               	movlw	1	; select bank2/3
 10001  0CC8  0087               	movwf	7
 10002  0CC9  3001               	movlw	1
 10003  0CCA  0781               	addwf	1,f
 10004  0CCB  3141               	addfsr 1,1
 10005  0CCC  1803               	skipnc
 10006  0CCD  0A81               	incf	1,f
 10007                           
 10008                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10009  0CCE  087B               	movf	_PF,w
 10010  0CCF  3E06               	addlw	6
 10011  0CD0  0086               	movwf	6
 10012  0CD1  3001               	movlw	1	; select bank2/3
 10013  0CD2  0087               	movwf	7
 10014  0CD3  3F40               	moviw [0]fsr1
 10015  0CD4  0020               	movlb	0	; select bank0
 10016  0CD5  00AD               	movwf	??_setPowerFault_Main
 10017  0CD6  3F41               	moviw [1]fsr1
 10018  0CD7  00AE               	movwf	??_setPowerFault_Main+1
 10019  0CD8  3000               	movlw	0
 10020  0CD9  022E               	subwf	??_setPowerFault_Main+1,w
 10021  0CDA  3002               	movlw	2
 10022  0CDB  1903               	skipnz
 10023  0CDC  022D               	subwf	??_setPowerFault_Main,w
 10024  0CDD  1C03               	skipc
 10025  0CDE  0008               	return
 10026                           
 10027                           ;PowerFault_B1.c: 86: {
 10028                           ;PowerFault_B1.c: 87: PF->Time=0;
 10029  0CDF  087B               	movf	_PF,w
 10030  0CE0  3E06               	addlw	6
 10031  0CE1  0086               	movwf	6
 10032  0CE2  3001               	movlw	1	; select bank2/3
 10033  0CE3  0087               	movwf	7
 10034  0CE4  3000               	movlw	0
 10035  0CE5  3FC0               	movwi [0]fsr1
 10036  0CE6  3FC1               	movwi [1]fsr1
 10037                           
 10038                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10039  0CE7  087B               	movf	_PF,w
 10040  0CE8  0086               	movwf	6
 10041  0CE9  3001               	movlw	1	; select bank2/3
 10042  0CEA  0087               	movwf	7
 10043  0CEB  1181               	bcf	1,3
 10044                           
 10045                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10046  0CEC  087B               	movf	_PF,w
 10047  0CED  0086               	movwf	6
 10048  0CEE  3001               	movlw	1	; select bank2/3
 10049  0CEF  0087               	movwf	7
 10050  0CF0  1C81               	btfss	1,1
 10051  0CF1  2D2D               	goto	l9628
 10052                           
 10053                           ;PowerFault_B1.c: 91: {
 10054                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10055  0CF2  0A7B               	incf	_PF,w
 10056  0CF3  0086               	movwf	6
 10057  0CF4  3001               	movlw	1	; select bank2/3
 10058  0CF5  0087               	movwf	7
 10059  0CF6  3F40               	moviw [0]fsr1
 10060  0CF7  00AD               	movwf	??_setPowerFault_Main
 10061  0CF8  3F41               	moviw [1]fsr1
 10062  0CF9  00AE               	movwf	??_setPowerFault_Main+1
 10063  0CFA  3001               	movlw	1
 10064  0CFB  022E               	subwf	??_setPowerFault_Main+1,w
 10065  0CFC  3091               	movlw	145
 10066  0CFD  1903               	skipnz
 10067  0CFE  022D               	subwf	??_setPowerFault_Main,w
 10068  0CFF  1803               	skipnc
 10069  0D00  2D69               	goto	l9640
 10070  0D01  0A7B               	incf	_PF,w
 10071  0D02  0086               	movwf	6
 10072  0D03  3001               	movlw	1	; select bank2/3
 10073  0D04  0087               	movwf	7
 10074  0D05  3F40               	moviw [0]fsr1
 10075  0D06  00AD               	movwf	??_setPowerFault_Main
 10076  0D07  3F41               	moviw [1]fsr1
 10077  0D08  00AE               	movwf	??_setPowerFault_Main+1
 10078  0D09  3000               	movlw	0
 10079  0D0A  022E               	subwf	??_setPowerFault_Main+1,w
 10080  0D0B  30C8               	movlw	200
 10081  0D0C  1903               	skipnz
 10082  0D0D  022D               	subwf	??_setPowerFault_Main,w
 10083  0D0E  1C03               	skipc
 10084  0D0F  2D69               	goto	l9640
 10085                           
 10086                           ;PowerFault_B1.c: 93: {
 10087                           ;PowerFault_B1.c: 94: PF->Count++;
 10088  0D10  3001               	movlw	1
 10089  0D11  00AD               	movwf	??_setPowerFault_Main
 10090  0D12  087B               	movf	_PF,w
 10091  0D13  3E05               	addlw	5
 10092  0D14  0086               	movwf	6
 10093  0D15  3001               	movlw	1	; select bank2/3
 10094  0D16  0087               	movwf	7
 10095  0D17  082D               	movf	??_setPowerFault_Main,w
 10096  0D18  0781               	addwf	1,f
 10097                           
 10098                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10099  0D19  087B               	movf	_PF,w
 10100  0D1A  3E05               	addlw	5
 10101  0D1B  0086               	movwf	6
 10102  0D1C  3001               	movlw	1	; select bank2/3
 10103  0D1D  0087               	movwf	7
 10104  0D1E  3002               	movlw	2
 10105  0D1F  0201               	subwf	1,w
 10106  0D20  1C03               	skipc
 10107  0D21  2D6F               	goto	l9642
 10108                           
 10109                           ;PowerFault_B1.c: 96: {
 10110                           ;PowerFault_B1.c: 97: PF->Count=0;
 10111  0D22  087B               	movf	_PF,w
 10112  0D23  3E05               	addlw	5
 10113  0D24  0086               	movwf	6
 10114  0D25  3001               	movlw	1	; select bank2/3
 10115  0D26  0087               	movwf	7
 10116  0D27  0181               	clrf	1
 10117                           
 10118                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10119  0D28  3000               	movlw	0
 10120  0D29  319A  2278  318C   	fcall	_setPowerFault_Exceptions
 10121                           
 10122                           ;PowerFault_B1.c: 99: }
 10123                           ;PowerFault_B1.c: 100: }
 10124  0D2C  2D6F               	goto	l9642
 10125  0D2D                     l9628:	
 10126                           ;PowerFault_B1.c: 104: }
 10127                           ;PowerFault_B1.c: 105: }
 10128                           
 10129                           ;PowerFault_B1.c: 101: else
 10130                           ;PowerFault_B1.c: 102: {
 10131                           ;PowerFault_B1.c: 103: PF->Count=0;
 10132                           
 10133                           
 10134                           ;PowerFault_B1.c: 106: else
 10135                           ;PowerFault_B1.c: 107: {
 10136                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10137  0D2D  0A7B               	incf	_PF,w
 10138  0D2E  0086               	movwf	6
 10139  0D2F  3001               	movlw	1	; select bank2/3
 10140  0D30  0087               	movwf	7
 10141  0D31  3F40               	moviw [0]fsr1
 10142  0D32  0020               	movlb	0	; select bank0
 10143  0D33  00AD               	movwf	??_setPowerFault_Main
 10144  0D34  3F41               	moviw [1]fsr1
 10145  0D35  00AE               	movwf	??_setPowerFault_Main+1
 10146  0D36  3001               	movlw	1
 10147  0D37  022E               	subwf	??_setPowerFault_Main+1,w
 10148  0D38  3090               	movlw	144
 10149  0D39  1903               	skipnz
 10150  0D3A  022D               	subwf	??_setPowerFault_Main,w
 10151  0D3B  1803               	skipnc
 10152  0D3C  2D4C               	goto	l9632
 10153  0D3D  0A7B               	incf	_PF,w
 10154  0D3E  0086               	movwf	6
 10155  0D3F  3001               	movlw	1	; select bank2/3
 10156  0D40  0087               	movwf	7
 10157  0D41  3F40               	moviw [0]fsr1
 10158  0D42  00AD               	movwf	??_setPowerFault_Main
 10159  0D43  3F41               	moviw [1]fsr1
 10160  0D44  00AE               	movwf	??_setPowerFault_Main+1
 10161  0D45  3000               	movlw	0
 10162  0D46  022E               	subwf	??_setPowerFault_Main+1,w
 10163  0D47  30D3               	movlw	211
 10164  0D48  1903               	skipnz
 10165  0D49  022D               	subwf	??_setPowerFault_Main,w
 10166  0D4A  1803               	skipnc
 10167  0D4B  2D69               	goto	l9640
 10168  0D4C                     l9632:	
 10169                           
 10170                           ;PowerFault_B1.c: 109: {
 10171                           ;PowerFault_B1.c: 110: PF->Count++;
 10172  0D4C  3001               	movlw	1
 10173  0D4D  00AD               	movwf	??_setPowerFault_Main
 10174  0D4E  087B               	movf	_PF,w
 10175  0D4F  3E05               	addlw	5
 10176  0D50  0086               	movwf	6
 10177  0D51  3001               	movlw	1	; select bank2/3
 10178  0D52  0087               	movwf	7
 10179  0D53  082D               	movf	??_setPowerFault_Main,w
 10180  0D54  0781               	addwf	1,f
 10181                           
 10182                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10183  0D55  087B               	movf	_PF,w
 10184  0D56  3E05               	addlw	5
 10185  0D57  0086               	movwf	6
 10186  0D58  3001               	movlw	1	; select bank2/3
 10187  0D59  0087               	movwf	7
 10188  0D5A  3002               	movlw	2
 10189  0D5B  0201               	subwf	1,w
 10190  0D5C  1C03               	skipc
 10191  0D5D  2D6F               	goto	l9642
 10192                           
 10193                           ;PowerFault_B1.c: 112: {
 10194                           ;PowerFault_B1.c: 113: PF->Count=0;
 10195  0D5E  087B               	movf	_PF,w
 10196  0D5F  3E05               	addlw	5
 10197  0D60  0086               	movwf	6
 10198  0D61  3001               	movlw	1	; select bank2/3
 10199  0D62  0087               	movwf	7
 10200  0D63  0181               	clrf	1
 10201                           
 10202                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10203  0D64  3001               	movlw	1
 10204  0D65  319A  2278  318C   	fcall	_setPowerFault_Exceptions
 10205                           
 10206                           ;PowerFault_B1.c: 115: }
 10207                           ;PowerFault_B1.c: 116: }
 10208  0D68  2D6F               	goto	l9642
 10209  0D69                     l9640:	
 10210                           
 10211                           ;PowerFault_B1.c: 117: else
 10212                           ;PowerFault_B1.c: 118: {
 10213                           ;PowerFault_B1.c: 119: PF->Count=0;
 10214  0D69  087B               	movf	_PF,w
 10215  0D6A  3E05               	addlw	5
 10216  0D6B  0086               	movwf	6
 10217  0D6C  3001               	movlw	1	; select bank2/3
 10218  0D6D  0087               	movwf	7
 10219  0D6E  0181               	clrf	1
 10220  0D6F                     l9642:	
 10221                           
 10222                           ;PowerFault_B1.c: 120: }
 10223                           ;PowerFault_B1.c: 122: }
 10224                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10225  0D6F  087B               	movf	_PF,w
 10226  0D70  0086               	movwf	6
 10227  0D71  3001               	movlw	1	; select bank2/3
 10228  0D72  0087               	movwf	7
 10229  0D73  1881               	btfsc	1,1
 10230  0D74  2D7A               	goto	l2460
 10231                           
 10232                           ;PowerFault_B1.c: 124: {
 10233                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10234  0D75  087B               	movf	_PF,w
 10235  0D76  0086               	movwf	6
 10236  0D77  3001               	movlw	1	; select bank2/3
 10237  0D78  0087               	movwf	7
 10238  0D79  1501               	bsf	1,2
 10239  0D7A                     l2460:	
 10240                           
 10241                           ;PowerFault_B1.c: 126: }
 10242                           ;PowerFault_B1.c: 127: PF->AD=0;
 10243  0D7A  0A7B               	incf	_PF,w
 10244  0D7B  0086               	movwf	6
 10245  0D7C  3001               	movlw	1	; select bank2/3
 10246  0D7D  0087               	movwf	7
 10247  0D7E  3000               	movlw	0
 10248  0D7F  3FC0               	movwi [0]fsr1
 10249  0D80  3FC1               	movwi [1]fsr1
 10250  0D81  0008               	return
 10251  0D82                     __end_of_setPowerFault_Main:	
 10252                           
 10253                           	psect	text45
 10254  1A78                     __ptext45:	
 10255 ;; *************** function _setPowerFault_Exceptions *****************
 10256 ;; Defined at:
 10257 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;  command         1    wreg     unsigned char 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  command         1   12[BANK0 ] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;		None               void
 10264 ;; Registers used:
 10265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        2 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    8
 10278 ;; This function calls:
 10279 ;;		_DimmerLights_Exceptions
 10280 ;;		_setLED
 10281 ;;		_setRF_Enable
 10282 ;;		_setSw_Enable
 10283 ;; This function is called by:
 10284 ;;		_setPowerFault_Main
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           
 10289                           ;psect for function _setPowerFault_Exceptions
 10290  1A78                     _setPowerFault_Exceptions:	
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10294                           ;setPowerFault_Exceptions@command stored from wreg
 10295  1A78  0020               	movlb	0	; select bank0
 10296  1A79  00AC               	movwf	setPowerFault_Exceptions@command
 10297                           
 10298                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10299  1A7A  087B               	movf	_PF,w
 10300  1A7B  0086               	movwf	6
 10301  1A7C  3001               	movlw	1	; select bank2/3
 10302  1A7D  0087               	movwf	7
 10303  1A7E  082C               	movf	setPowerFault_Exceptions@command,w
 10304  1A7F  1081               	bcf	1,1
 10305  1A80  1D03               	skipz
 10306  1A81  1481               	bsf	1,1
 10307                           
 10308                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10309  1A82  092C               	comf	setPowerFault_Exceptions@command,w
 10310  1A83  3901               	andlw	1
 10311  1A84  00AB               	movwf	??_setPowerFault_Exceptions
 10312  1A85  087B               	movf	_PF,w
 10313  1A86  0086               	movwf	6
 10314  1A87  3001               	movlw	1	; select bank2/3
 10315  1A88  0087               	movwf	7
 10316  1A89  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10317  1A8A  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10318  1A8B  0801               	movf	1,w
 10319  1A8C  062B               	xorwf	??_setPowerFault_Exceptions,w
 10320  1A8D  39FB               	andlw	-5
 10321  1A8E  062B               	xorwf	??_setPowerFault_Exceptions,w
 10322  1A8F  0081               	movwf	1
 10323                           
 10324                           ;PowerFault_B1.c: 137: if(command == 1)
 10325  1A90  082C               	movf	setPowerFault_Exceptions@command,w
 10326  1A91  3A01               	xorlw	1
 10327  1A92  1D03               	skipz
 10328  1A93  2A98               	goto	l2464
 10329                           
 10330                           ;PowerFault_B1.c: 138: {
 10331                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10332  1A94  3003               	movlw	3
 10333  1A95  319F  2730  319A   	fcall	_DimmerLights_Exceptions
 10334  1A98                     l2464:	
 10335                           
 10336                           ;PowerFault_B1.c: 143: }
 10337                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10338  1A98  0020               	movlb	0	; select bank0
 10339  1A99  082C               	movf	setPowerFault_Exceptions@command,w
 10340  1A9A  3E0A               	addlw	10
 10341  1A9B  00AB               	movwf	??_setPowerFault_Exceptions
 10342  1A9C  082B               	movf	??_setPowerFault_Exceptions,w
 10343  1A9D  00A2               	movwf	setLED@command
 10344  1A9E  3063               	movlw	99
 10345  1A9F  3188  2002  319A   	fcall	_setLED
 10346                           
 10347                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10348  1AA2  0020               	movlb	0	; select bank0
 10349  1AA3  092C               	comf	setPowerFault_Exceptions@command,w
 10350  1AA4  3901               	andlw	1
 10351  1AA5  31A6  2670  319A   	fcall	_setSw_Enable
 10352                           
 10353                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10354  1AA8  0020               	movlb	0	; select bank0
 10355  1AA9  092C               	comf	setPowerFault_Exceptions@command,w
 10356  1AAA  3901               	andlw	1
 10357  1AAB  00AB               	movwf	??_setPowerFault_Exceptions
 10358  1AAC  082B               	movf	??_setPowerFault_Exceptions,w
 10359  1AAD  00A2               	movwf	setRF_Enable@command
 10360  1AAE  3001               	movlw	1
 10361  1AAF  3198  2067         	fcall	_setRF_Enable
 10362  1AB1  0008               	return
 10363  1AB2                     __end_of_setPowerFault_Exceptions:	
 10364                           
 10365                           	psect	text46
 10366  238A                     __ptext46:	
 10367 ;; *************** function _getLoad_Safe *****************
 10368 ;; Defined at:
 10369 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;		None
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;		None
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  1    wreg      unsigned char 
 10376 ;; Registers used:
 10377 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;Total ram usage:        1 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    4
 10390 ;; This function calls:
 10391 ;;		Nothing
 10392 ;; This function is called by:
 10393 ;;		_setTemp_Main
 10394 ;;		_setPowerFault_Main
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           
 10399                           ;psect for function _getLoad_Safe
 10400  238A                     _getLoad_Safe:	
 10401                           
 10402                           ;OverLoad_B1.c: 341: return Load->Safe;
 10403                           
 10404                           ;incstack = 0
 10405                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10406  238A  0020               	movlb	0	; select bank0
 10407  238B  086E               	movf	_Load,w
 10408  238C  0086               	movwf	6
 10409  238D  3002               	movlw	2	; select bank4/5
 10410  238E  0087               	movwf	7
 10411  238F  0C01               	rrf	1,w
 10412  2390  00A0               	movwf	??_getLoad_Safe
 10413  2391  0CA0               	rrf	??_getLoad_Safe,f
 10414  2392  0C20               	rrf	??_getLoad_Safe,w
 10415  2393  3901               	andlw	1
 10416  2394  0008               	return
 10417  2395                     __end_of_getLoad_Safe:	
 10418                           
 10419                           	psect	text47
 10420  22B9                     __ptext47:	
 10421 ;; *************** function _PowerFault_Initialization *****************
 10422 ;; Defined at:
 10423 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;Total ram usage:        0 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    5
 10444 ;; This function calls:
 10445 ;;		_setPowerFault_Initialization
 10446 ;; This function is called by:
 10447 ;;		_main
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _PowerFault_Initialization
 10453  22B9                     _PowerFault_Initialization:	
 10454                           
 10455                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10459  22B9  31A4  24A6         	fcall	_setPowerFault_Initialization
 10460  22BB  0008               	return
 10461  22BC                     __end_of_PowerFault_Initialization:	
 10462                           
 10463                           	psect	text48
 10464  24A6                     __ptext48:	
 10465 ;; *************** function _setPowerFault_Initialization *****************
 10466 ;; Defined at:
 10467 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg, fsr1l, fsr1h
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        1 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    4
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_PowerFault_Initialization
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _setPowerFault_Initialization
 10497  24A6                     _setPowerFault_Initialization:	
 10498                           
 10499                           ;PowerFault_B1.c: 31: PF=&PF1;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10503  24A6  3068               	movlw	_PF1& (0+255)
 10504  24A7  0020               	movlb	0	; select bank0
 10505  24A8  00A0               	movwf	??_setPowerFault_Initialization
 10506  24A9  0820               	movf	??_setPowerFault_Initialization,w
 10507  24AA  00FB               	movwf	_PF
 10508                           
 10509                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10510  24AB  087B               	movf	_PF,w
 10511  24AC  0086               	movwf	6
 10512  24AD  3001               	movlw	1	; select bank2/3
 10513  24AE  0087               	movwf	7
 10514  24AF  1401               	bsf	1,0
 10515                           
 10516                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10517  24B0  087B               	movf	_PF,w
 10518  24B1  0086               	movwf	6
 10519  24B2  3001               	movlw	1	; select bank2/3
 10520  24B3  0087               	movwf	7
 10521  24B4  1501               	bsf	1,2
 10522  24B5  0008               	return
 10523  24B6                     __end_of_setPowerFault_Initialization:	
 10524                           
 10525                           	psect	text49
 10526  25A4                     __ptext49:	
 10527 ;; *************** function _Mcu_Initialization *****************
 10528 ;; Defined at:
 10529 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;		None
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;		None
 10534 ;; Return value:  Size  Location     Type
 10535 ;;		None               void
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0, pclath, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        1 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    5
 10550 ;; This function calls:
 10551 ;;		_ADC_Set
 10552 ;;		_INT_Set
 10553 ;;		_IOC_Set
 10554 ;;		_IO_Set
 10555 ;;		_TMR0_Set
 10556 ;; This function is called by:
 10557 ;;		_main
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _Mcu_Initialization
 10563  25A4                     _Mcu_Initialization:	
 10564                           
 10565                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10569  25A4  3078               	movlw	120
 10570  25A5  0021               	movlb	1	; select bank1
 10571  25A6  0099               	movwf	25	;volatile
 10572                           
 10573                           ;MCU_B1.c: 29: IO_Set();
 10574  25A7  31A6  2607  31A5   	fcall	_IO_Set
 10575                           
 10576                           ;MCU_B1.c: 31: TMR0_Set();
 10577  25AA  31A4  2402  31A5   	fcall	_TMR0_Set
 10578                           
 10579                           ;MCU_B1.c: 33: ;;
 10580                           ;MCU_B1.c: 35: ADC_Set();
 10581  25AD  31A2  22FE  31A5   	fcall	_ADC_Set
 10582                           
 10583                           ;MCU_B1.c: 39: INT_Set();
 10584  25B0  31A2  22DE  31A5   	fcall	_INT_Set
 10585                           
 10586                           ;MCU_B1.c: 41: IOC_Set();
 10587  25B3  31A3  23F5         	fcall	_IOC_Set
 10588                           
 10589                           ;MCU_B1.c: 43: ;;
 10590                           ;MCU_B1.c: 45: ;;
 10591                           ;MCU_B1.c: 47: Memory=&VarMemory;
 10592  25B5  3020               	movlw	_VarMemory& (0+255)
 10593  25B6  0020               	movlb	0	; select bank0
 10594  25B7  00A1               	movwf	??_Mcu_Initialization
 10595  25B8  0821               	movf	??_Mcu_Initialization,w
 10596  25B9  0021               	movlb	1	; select bank1
 10597  25BA  00E9               	movwf	_Memory^(0+128)
 10598  25BB  0008               	return
 10599  25BC                     __end_of_Mcu_Initialization:	
 10600                           
 10601                           	psect	text50
 10602  2402                     __ptext50:	
 10603 ;; *************** function _TMR0_Set *****************
 10604 ;; Defined at:
 10605 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;		None
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;		None
 10610 ;; Return value:  Size  Location     Type
 10611 ;;		None               void
 10612 ;; Registers used:
 10613 ;;		wreg, status,2
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;Total ram usage:        1 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:    4
 10626 ;; This function calls:
 10627 ;;		Nothing
 10628 ;; This function is called by:
 10629 ;;		_Mcu_Initialization
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function _TMR0_Set
 10635  2402                     _TMR0_Set:	
 10636                           
 10637                           ;MCU_B1.c: 116: Timer0=&VarTimer0;
 10638                           
 10639                           ;incstack = 0
 10640                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10641  2402  30C4               	movlw	_VarTimer0& (0+255)
 10642  2403  0020               	movlb	0	; select bank0
 10643  2404  00A0               	movwf	??_TMR0_Set
 10644  2405  0820               	movf	??_TMR0_Set,w
 10645  2406  0021               	movlb	1	; select bank1
 10646  2407  00EB               	movwf	_Timer0^(0+128)
 10647                           
 10648                           ;MCU_B1.c: 117: OPTION_REG=0x00;
 10649  2408  0195               	clrf	21	;volatile
 10650                           
 10651                           ;MCU_B1.c: 118: TMR0=(256-90);
 10652  2409  30A6               	movlw	166
 10653  240A  0020               	movlb	0	; select bank0
 10654  240B  0095               	movwf	21	;volatile
 10655                           
 10656                           ;MCU_B1.c: 119: TMR0IE=1;
 10657  240C  168B               	bsf	11,5	;volatile
 10658                           
 10659                           ;MCU_B1.c: 120: GIE=1;
 10660  240D  178B               	bsf	11,7	;volatile
 10661  240E  0008               	return
 10662  240F                     __end_of_TMR0_Set:	
 10663                           
 10664                           	psect	text51
 10665  2607                     __ptext51:	
 10666 ;; *************** function _IO_Set *****************
 10667 ;; Defined at:
 10668 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10669 ;; Parameters:    Size  Location     Type
 10670 ;;		None
 10671 ;; Auto vars:     Size  Location     Type
 10672 ;;		None
 10673 ;; Return value:  Size  Location     Type
 10674 ;;		None               void
 10675 ;; Registers used:
 10676 ;;		wreg, status,2
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;Total ram usage:        0 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; Hardware stack levels required when called:    4
 10689 ;; This function calls:
 10690 ;;		Nothing
 10691 ;; This function is called by:
 10692 ;;		_Mcu_Initialization
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           
 10697                           ;psect for function _IO_Set
 10698  2607                     _IO_Set:	
 10699                           
 10700                           ;MCU_B1.c: 79: TRISA=0b01110111;;
 10701                           
 10702                           ;incstack = 0
 10703                           ; Regs used in _IO_Set: [wreg+status,2]
 10704  2607  3077               	movlw	119
 10705  2608  0021               	movlb	1	; select bank1
 10706  2609  008C               	movwf	12	;volatile
 10707                           
 10708                           ;MCU_B1.c: 80: TRISB=0b00000111;;
 10709  260A  3007               	movlw	7
 10710  260B  008D               	movwf	13	;volatile
 10711                           
 10712                           ;MCU_B1.c: 81: TRISC=0b00001100;;
 10713  260C  300C               	movlw	12
 10714  260D  008E               	movwf	14	;volatile
 10715                           
 10716                           ;MCU_B1.c: 82: LATA=0b00000000;;
 10717  260E  0022               	movlb	2	; select bank2
 10718  260F  018C               	clrf	12	;volatile
 10719                           
 10720                           ;MCU_B1.c: 83: LATB=0b00000010;;
 10721  2610  3002               	movlw	2
 10722  2611  008D               	movwf	13	;volatile
 10723                           
 10724                           ;MCU_B1.c: 84: LATC=0b00000000;;
 10725  2612  018E               	clrf	14	;volatile
 10726                           
 10727                           ;MCU_B1.c: 85: ANSELA=0b00100010;;
 10728  2613  3022               	movlw	34
 10729  2614  0023               	movlb	3	; select bank3
 10730  2615  008C               	movwf	12	;volatile
 10731                           
 10732                           ;MCU_B1.c: 86: ANSELB=0b00000000;;
 10733  2616  018D               	clrf	13	;volatile
 10734                           
 10735                           ;MCU_B1.c: 87: ANSELC=0b00000000;;
 10736  2617  018E               	clrf	14	;volatile
 10737                           
 10738                           ;MCU_B1.c: 88: PORTA=0b01110111;;
 10739  2618  3077               	movlw	119
 10740  2619  0020               	movlb	0	; select bank0
 10741  261A  008C               	movwf	12	;volatile
 10742                           
 10743                           ;MCU_B1.c: 89: PORTB=0b00000111;;
 10744  261B  3007               	movlw	7
 10745  261C  008D               	movwf	13	;volatile
 10746                           
 10747                           ;MCU_B1.c: 90: PORTC=0b00001100;;
 10748  261D  300C               	movlw	12
 10749  261E  008E               	movwf	14	;volatile
 10750  261F  0008               	return
 10751  2620                     __end_of_IO_Set:	
 10752                           
 10753                           	psect	text52
 10754  23F5                     __ptext52:	
 10755 ;; *************** function _IOC_Set *****************
 10756 ;; Defined at:
 10757 ;;		line 308 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;		None
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;		None
 10762 ;; Return value:  Size  Location     Type
 10763 ;;		None               void
 10764 ;; Registers used:
 10765 ;;		wreg, status,2
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;Total ram usage:        0 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    4
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_Mcu_Initialization
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785                           
 10786                           ;psect for function _IOC_Set
 10787  23F5                     _IOC_Set:	
 10788                           
 10789                           ;MCU_B1.c: 310: WPUB2=0;
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in _IOC_Set: [wreg+status,2]
 10793  23F5  0024               	movlb	4	; select bank4
 10794  23F6  110D               	bcf	13,2	;volatile
 10795                           
 10796                           ;MCU_B1.c: 312: IOCBP=0b00000100;
 10797  23F7  3004               	movlw	4
 10798  23F8  0027               	movlb	7	; select bank7
 10799  23F9  0094               	movwf	20	;volatile
 10800                           
 10801                           ;MCU_B1.c: 313: IOCBN=0b00000100;
 10802  23FA  3004               	movlw	4
 10803  23FB  0095               	movwf	21	;volatile
 10804                           
 10805                           ;MCU_B1.c: 328: IOCBF=0b00000000;
 10806  23FC  0196               	clrf	22	;volatile
 10807                           
 10808                           ;MCU_B1.c: 330: IOCIE=1;
 10809  23FD  158B               	bsf	11,3	;volatile
 10810                           
 10811                           ;MCU_B1.c: 331: IOCIF=0;
 10812  23FE  100B               	bcf	11,0	;volatile
 10813                           
 10814                           ;MCU_B1.c: 332: PEIE=1;
 10815  23FF  170B               	bsf	11,6	;volatile
 10816                           
 10817                           ;MCU_B1.c: 333: GIE=1;
 10818  2400  178B               	bsf	11,7	;volatile
 10819  2401  0008               	return
 10820  2402                     __end_of_IOC_Set:	
 10821                           
 10822                           	psect	text53
 10823  22DE                     __ptext53:	
 10824 ;; *************** function _INT_Set *****************
 10825 ;; Defined at:
 10826 ;;		line 279 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;		None               void
 10833 ;; Registers used:
 10834 ;;		None
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:        0 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    4
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_Mcu_Initialization
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _INT_Set
 10856  22DE                     _INT_Set:	
 10857                           
 10858                           ;MCU_B1.c: 281: WPUB0=0;
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _INT_Set: []
 10862  22DE  0024               	movlb	4	; select bank4
 10863  22DF  100D               	bcf	13,0	;volatile
 10864                           
 10865                           ;MCU_B1.c: 282: INTE=1;
 10866  22E0  160B               	bsf	11,4	;volatile
 10867                           
 10868                           ;MCU_B1.c: 283: PEIE=1;
 10869  22E1  170B               	bsf	11,6	;volatile
 10870                           
 10871                           ;MCU_B1.c: 284: GIE=1;
 10872  22E2  178B               	bsf	11,7	;volatile
 10873  22E3  0008               	return
 10874  22E4                     __end_of_INT_Set:	
 10875                           
 10876                           	psect	text54
 10877  22FE                     __ptext54:	
 10878 ;; *************** function _ADC_Set *****************
 10879 ;; Defined at:
 10880 ;;		line 373 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;		None               void
 10887 ;; Registers used:
 10888 ;;		wreg
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;Total ram usage:        0 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    4
 10901 ;; This function calls:
 10902 ;;		Nothing
 10903 ;; This function is called by:
 10904 ;;		_Mcu_Initialization
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           
 10909                           ;psect for function _ADC_Set
 10910  22FE                     _ADC_Set:	
 10911                           
 10912                           ;MCU_B1.c: 375: ADCON1=0xf2;
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in _ADC_Set: [wreg]
 10916  22FE  30F2               	movlw	242
 10917  22FF  0021               	movlb	1	; select bank1
 10918  2300  009E               	movwf	30	;volatile
 10919                           
 10920                           ;MCU_B1.c: 376: FVRCON=0xc0;
 10921  2301  30C0               	movlw	192
 10922  2302  0022               	movlb	2	; select bank2
 10923  2303  0097               	movwf	23	;volatile
 10924  2304  0008               	return
 10925  2305                     __end_of_ADC_Set:	
 10926                           
 10927                           	psect	text55
 10928  250E                     __ptext55:	
 10929 ;; *************** function _MainT_Initialization *****************
 10930 ;; Defined at:
 10931 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;		None
 10936 ;; Return value:  Size  Location     Type
 10937 ;;		None               void
 10938 ;; Registers used:
 10939 ;;		wreg, fsr1l, fsr1h
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        1 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    4
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;;		_main
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _MainT_Initialization
 10961  250E                     _MainT_Initialization:	
 10962                           
 10963                           ;main.c: 95: Product=&VarProduct;
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _MainT_Initialization: [wregfsr1]
 10967  250E  30A0               	movlw	_VarProduct& (0+255)
 10968  250F  0020               	movlb	0	; select bank0
 10969  2510  00A0               	movwf	??_MainT_Initialization
 10970  2511  0820               	movf	??_MainT_Initialization,w
 10971  2512  00EF               	movwf	_Product
 10972                           
 10973                           ;main.c: 96: Product->Data[20]=210;
 10974  2513  30D2               	movlw	210
 10975  2514  00A0               	movwf	??_MainT_Initialization
 10976  2515  086F               	movf	_Product,w
 10977  2516  3E14               	addlw	20
 10978  2517  0086               	movwf	6
 10979  2518  3001               	movlw	1	; select bank2/3
 10980  2519  0087               	movwf	7
 10981  251A  0820               	movf	??_MainT_Initialization,w
 10982  251B  0081               	movwf	1
 10983                           
 10984                           ;main.c: 99: TMain=&VarTMain;
 10985  251C  30C0               	movlw	_VarTMain& (0+255)
 10986  251D  00A0               	movwf	??_MainT_Initialization
 10987  251E  0820               	movf	??_MainT_Initialization,w
 10988  251F  0021               	movlb	1	; select bank1
 10989  2520  00EA               	movwf	_TMain^(0+128)
 10990  2521  0008               	return
 10991  2522                     __end_of_MainT_Initialization:	
 10992                           
 10993                           	psect	text56
 10994  12FA                     __ptext56:	
 10995 ;; *************** function _MainT *****************
 10996 ;; Defined at:
 10997 ;;		line 104 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;		None
 11002 ;; Return value:  Size  Location     Type
 11003 ;;		None               void
 11004 ;; Registers used:
 11005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;Total ram usage:        0 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    6
 11018 ;; This function calls:
 11019 ;;		_setBuz
 11020 ;;		_setLoad_Enable
 11021 ;;		_setRF_Enable
 11022 ;;		_setSw_Enable
 11023 ;;		_setTemp_Enable
 11024 ;; This function is called by:
 11025 ;;		_main
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _MainT
 11031  12FA                     _MainT:	
 11032                           
 11033                           ;main.c: 107: if(!TMain->PowerON)
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11037  12FA  0021               	movlb	1	; select bank1
 11038  12FB  086A               	movf	_TMain^(0+128),w
 11039  12FC  0086               	movwf	6
 11040  12FD  3001               	movlw	1	; select bank2/3
 11041  12FE  0087               	movwf	7
 11042  12FF  1801               	btfsc	1,0
 11043  1300  2B45               	goto	l9974
 11044                           
 11045                           ;main.c: 108: {
 11046                           ;main.c: 109: TMain->PowerCount++;
 11047  1301  0A6A               	incf	_TMain^(0+128),w
 11048  1302  0086               	movwf	6
 11049  1303  3001               	movlw	1	; select bank2/3
 11050  1304  0087               	movwf	7
 11051  1305  3001               	movlw	1
 11052  1306  0781               	addwf	1,f
 11053  1307  3141               	addfsr 1,1
 11054  1308  1803               	skipnc
 11055  1309  0A81               	incf	1,f
 11056                           
 11057                           ;main.c: 110: if(TMain->PowerCount == 150)
 11058  130A  0A6A               	incf	_TMain^(0+128),w
 11059  130B  0086               	movwf	6
 11060  130C  3001               	movlw	1	; select bank2/3
 11061  130D  0087               	movwf	7
 11062  130E  3F40               	moviw [0]fsr1
 11063  130F  3A96               	xorlw	150
 11064  1310  1D03               	skipz
 11065  1311  2B14               	goto	u9985
 11066  1312  3F41               	moviw [1]fsr1
 11067  1313  3A00               	xorlw	0
 11068  1314                     u9985:	
 11069  1314  1D03               	skipz
 11070  1315  0008               	return
 11071                           
 11072                           ;main.c: 111: {
 11073                           ;main.c: 112: TMain->PowerCount=0;
 11074  1316  0A6A               	incf	_TMain^(0+128),w
 11075  1317  0086               	movwf	6
 11076  1318  3001               	movlw	1	; select bank2/3
 11077  1319  0087               	movwf	7
 11078  131A  3000               	movlw	0
 11079  131B  3FC0               	movwi [0]fsr1
 11080  131C  3FC1               	movwi [1]fsr1
 11081                           
 11082                           ;main.c: 113: TMain->PowerON=1;
 11083  131D  086A               	movf	_TMain^(0+128),w
 11084  131E  0086               	movwf	6
 11085  131F  3001               	movlw	1	; select bank2/3
 11086  1320  0087               	movwf	7
 11087  1321  1401               	bsf	1,0
 11088                           
 11089                           ;main.c: 116: setTemp_Enable(1);
 11090  1322  3001               	movlw	1
 11091  1323  31A3  237F  3192   	fcall	_setTemp_Enable
 11092                           
 11093                           ;main.c: 120: setLoad_Enable(1);
 11094  1326  3001               	movlw	1
 11095  1327  31A4  2496  3192   	fcall	_setLoad_Enable
 11096                           
 11097                           ;main.c: 126: setBuz(3,50);
 11098  132A  3032               	movlw	50
 11099  132B  0020               	movlb	0	; select bank0
 11100  132C  00A6               	movwf	setBuz@time
 11101  132D  3000               	movlw	0
 11102  132E  00A7               	movwf	setBuz@time+1
 11103  132F  3003               	movlw	3
 11104  1330  3192  220A  3192   	fcall	_setBuz
 11105                           
 11106                           ;main.c: 127: TMain->SelfTest=1;
 11107  1333  0021               	movlb	1	; select bank1
 11108  1334  086A               	movf	_TMain^(0+128),w
 11109  1335  3E03               	addlw	3
 11110  1336  0086               	movwf	6
 11111  1337  3001               	movlw	1	; select bank2/3
 11112  1338  0087               	movwf	7
 11113  1339  1401               	bsf	1,0
 11114                           
 11115                           ;main.c: 129: setSw_Enable(1);
 11116  133A  3001               	movlw	1
 11117  133B  31A6  2670  3192   	fcall	_setSw_Enable
 11118                           
 11119                           ;main.c: 132: setRF_Enable(1,1);
 11120  133E  0020               	movlb	0	; select bank0
 11121  133F  01A2               	clrf	setRF_Enable@command
 11122  1340  0AA2               	incf	setRF_Enable@command,f
 11123  1341  3001               	movlw	1
 11124  1342  3198  2067         	fcall	_setRF_Enable
 11125                           
 11126                           ;main.c: 136: }
 11127                           ;main.c: 137: }
 11128  1344  0008               	return
 11129  1345                     l9974:	
 11130                           
 11131                           ;main.c: 138: else
 11132                           ;main.c: 139: {
 11133                           ;main.c: 147: TMain->Count1++;
 11134  1345  0021               	movlb	1	; select bank1
 11135  1346  086A               	movf	_TMain^(0+128),w
 11136  1347  3E06               	addlw	6
 11137  1348  0086               	movwf	6
 11138  1349  3001               	movlw	1	; select bank2/3
 11139  134A  0087               	movwf	7
 11140  134B  3001               	movlw	1
 11141  134C  0781               	addwf	1,f
 11142  134D  3141               	addfsr 1,1
 11143  134E  1803               	skipnc
 11144  134F  0A81               	incf	1,f
 11145                           
 11146                           ;main.c: 148: if(TMain->Count1 == 100)
 11147  1350  086A               	movf	_TMain^(0+128),w
 11148  1351  3E06               	addlw	6
 11149  1352  0086               	movwf	6
 11150  1353  3001               	movlw	1	; select bank2/3
 11151  1354  0087               	movwf	7
 11152  1355  3F40               	moviw [0]fsr1
 11153  1356  3A64               	xorlw	100
 11154  1357  1D03               	skipz
 11155  1358  2B5B               	goto	u9995
 11156  1359  3F41               	moviw [1]fsr1
 11157  135A  3A00               	xorlw	0
 11158  135B                     u9995:	
 11159  135B  1D03               	skipz
 11160  135C  0008               	return
 11161                           
 11162                           ;main.c: 149: {
 11163                           ;main.c: 150: TMain->Count1=0;
 11164  135D  086A               	movf	_TMain^(0+128),w
 11165  135E  3E06               	addlw	6
 11166  135F  0086               	movwf	6
 11167  1360  3001               	movlw	1	; select bank2/3
 11168  1361  0087               	movwf	7
 11169  1362  3000               	movlw	0
 11170  1363  3FC0               	movwi [0]fsr1
 11171  1364  3FC1               	movwi [1]fsr1
 11172                           
 11173                           ;main.c: 163: if(TMain->Flag)
 11174  1365  086A               	movf	_TMain^(0+128),w
 11175  1366  0086               	movwf	6
 11176  1367  3001               	movlw	1	; select bank2/3
 11177  1368  0087               	movwf	7
 11178  1369  1D81               	btfss	1,3
 11179  136A  2B71               	goto	l9982
 11180                           
 11181                           ;main.c: 164: {
 11182                           ;main.c: 165: TMain->Flag=0;
 11183  136B  086A               	movf	_TMain^(0+128),w
 11184  136C  0086               	movwf	6
 11185  136D  3001               	movlw	1	; select bank2/3
 11186  136E  0087               	movwf	7
 11187  136F  1181               	bcf	1,3
 11188                           
 11189                           ;main.c: 167: ;;
 11190                           ;main.c: 168: ;;
 11191                           ;main.c: 174: }
 11192  1370  0008               	return
 11193  1371                     l9982:	
 11194                           
 11195                           ;main.c: 175: else
 11196                           ;main.c: 176: {
 11197                           ;main.c: 177: TMain->Flag=1;
 11198  1371  086A               	movf	_TMain^(0+128),w
 11199  1372  0086               	movwf	6
 11200  1373  3001               	movlw	1	; select bank2/3
 11201  1374  0087               	movwf	7
 11202  1375  1581               	bsf	1,3
 11203                           
 11204                           ;main.c: 179: ;;
 11205                           ;main.c: 180: ;;
 11206  1376  0008               	return
 11207  1377                     __end_of_MainT:	
 11208                           
 11209                           	psect	text57
 11210  237F                     __ptext57:	
 11211 ;; *************** function _setTemp_Enable *****************
 11212 ;; Defined at:
 11213 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  command         1    wreg     unsigned char 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  command         1    0[BANK0 ] unsigned char 
 11218 ;; Return value:  Size  Location     Type
 11219 ;;		None               void
 11220 ;; Registers used:
 11221 ;;		wreg, fsr1l, fsr1h
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;Total ram usage:        1 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    4
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_MainT
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           
 11242                           ;psect for function _setTemp_Enable
 11243  237F                     _setTemp_Enable:	
 11244                           
 11245                           ;incstack = 0
 11246                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11247                           ;setTemp_Enable@command stored from wreg
 11248  237F  0020               	movlb	0	; select bank0
 11249  2380  00A0               	movwf	setTemp_Enable@command
 11250                           
 11251                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11252  2381  087D               	movf	_Temp,w
 11253  2382  0086               	movwf	6
 11254  2383  3001               	movlw	1	; select bank2/3
 11255  2384  0087               	movwf	7
 11256  2385  0820               	movf	setTemp_Enable@command,w
 11257  2386  1001               	bcf	1,0
 11258  2387  1D03               	skipz
 11259  2388  1401               	bsf	1,0
 11260  2389  0008               	return
 11261  238A                     __end_of_setTemp_Enable:	
 11262                           
 11263                           	psect	text58
 11264  2496                     __ptext58:	
 11265 ;; *************** function _setLoad_Enable *****************
 11266 ;; Defined at:
 11267 ;;		line 295 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  command         1    wreg     unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  command         1    0[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;		None               void
 11274 ;; Registers used:
 11275 ;;		wreg, fsr1l, fsr1h
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        1 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    4
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_MainT
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _setLoad_Enable
 11297  2496                     _setLoad_Enable:	
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11301                           ;setLoad_Enable@command stored from wreg
 11302  2496  0020               	movlb	0	; select bank0
 11303  2497  00A0               	movwf	setLoad_Enable@command
 11304                           
 11305                           ;OverLoad_B1.c: 297: Load->Enable=command;
 11306  2498  086E               	movf	_Load,w
 11307  2499  0086               	movwf	6
 11308  249A  3002               	movlw	2	; select bank4/5
 11309  249B  0087               	movwf	7
 11310  249C  0820               	movf	setLoad_Enable@command,w
 11311  249D  1001               	bcf	1,0
 11312  249E  1D03               	skipz
 11313  249F  1401               	bsf	1,0
 11314                           
 11315                           ;OverLoad_B1.c: 298: Load->GO=0;
 11316  24A0  086E               	movf	_Load,w
 11317  24A1  0086               	movwf	6
 11318  24A2  3002               	movlw	2	; select bank4/5
 11319  24A3  0087               	movwf	7
 11320  24A4  1081               	bcf	1,1
 11321  24A5  0008               	return
 11322  24A6                     __end_of_setLoad_Enable:	
 11323                           
 11324                           	psect	text59
 11325  0059                     __ptext59:	
 11326 ;; *************** function _Load_Main *****************
 11327 ;; Defined at:
 11328 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;		None
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;  i               1   17[BANK0 ] unsigned char 
 11333 ;; Return value:  Size  Location     Type
 11334 ;;		None               void
 11335 ;; Registers used:
 11336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11344 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;Total ram usage:        5 bytes
 11347 ;; Hardware stack levels used:    1
 11348 ;; Hardware stack levels required when called:    9
 11349 ;; This function calls:
 11350 ;;		___lwdiv
 11351 ;;		___wmul
 11352 ;;		_getPF_Safe
 11353 ;;		_getTemp_Safe
 11354 ;;		_setDimmerLights_Clear
 11355 ;;		_setLoad_AH_AL_Restore
 11356 ;;		_setLoad_Exceptions
 11357 ;; This function is called by:
 11358 ;;		_main
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           
 11363                           ;psect for function _Load_Main
 11364  0059                     _Load_Main:	
 11365                           
 11366                           ;OverLoad_B1.c: 47: char i;
 11367                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11368                           
 11369                           ;incstack = 0
 11370                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11371  0059  0020               	movlb	0	; select bank0
 11372  005A  086E               	movf	_Load,w
 11373  005B  0086               	movwf	6
 11374  005C  3002               	movlw	2	; select bank4/5
 11375  005D  0087               	movwf	7
 11376  005E  1E81               	btfss	1,5
 11377  005F  2886               	goto	l10010
 11378                           
 11379                           ;OverLoad_B1.c: 49: {
 11380                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11381  0060  086E               	movf	_Load,w
 11382  0061  3E03               	addlw	3
 11383  0062  0086               	movwf	6
 11384  0063  3002               	movlw	2	; select bank4/5
 11385  0064  0087               	movwf	7
 11386  0065  3001               	movlw	1
 11387  0066  0781               	addwf	1,f
 11388  0067  3141               	addfsr 1,1
 11389  0068  1803               	skipnc
 11390  0069  0A81               	incf	1,f
 11391                           
 11392                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11393  006A  086E               	movf	_Load,w
 11394  006B  3E03               	addlw	3
 11395  006C  0086               	movwf	6
 11396  006D  3002               	movlw	2	; select bank4/5
 11397  006E  0087               	movwf	7
 11398  006F  3F40               	moviw [0]fsr1
 11399  0070  00AD               	movwf	??_Load_Main
 11400  0071  3F41               	moviw [1]fsr1
 11401  0072  00AE               	movwf	??_Load_Main+1
 11402  0073  3003               	movlw	3
 11403  0074  022E               	subwf	??_Load_Main+1,w
 11404  0075  30E8               	movlw	232
 11405  0076  1903               	skipnz
 11406  0077  022D               	subwf	??_Load_Main,w
 11407  0078  1C03               	skipc
 11408  0079  0008               	return
 11409                           
 11410                           ;OverLoad_B1.c: 52: {
 11411                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11412  007A  086E               	movf	_Load,w
 11413  007B  3E03               	addlw	3
 11414  007C  0086               	movwf	6
 11415  007D  3002               	movlw	2	; select bank4/5
 11416  007E  0087               	movwf	7
 11417  007F  3000               	movlw	0
 11418  0080  3FC0               	movwi [0]fsr1
 11419  0081  3FC1               	movwi [1]fsr1
 11420                           
 11421                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11422  0082  3000               	movlw	0
 11423  0083  319B  23B5         	fcall	_setLoad_Exceptions
 11424                           
 11425                           ;OverLoad_B1.c: 55: }
 11426                           ;OverLoad_B1.c: 56: }
 11427  0085  0008               	return
 11428  0086                     l10010:	
 11429                           
 11430                           ;OverLoad_B1.c: 57: else
 11431                           ;OverLoad_B1.c: 58: {
 11432                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11433  0086  0020               	movlb	0	; select bank0
 11434  0087  086E               	movf	_Load,w
 11435  0088  0086               	movwf	6
 11436  0089  3002               	movlw	2	; select bank4/5
 11437  008A  0087               	movwf	7
 11438  008B  1E01               	btfss	1,4
 11439  008C  2B54               	goto	l10118
 11440                           
 11441                           ;OverLoad_B1.c: 60: {
 11442                           ;OverLoad_B1.c: 61: Load->Time++;
 11443  008D  0A6E               	incf	_Load,w
 11444  008E  0086               	movwf	6
 11445  008F  3002               	movlw	2	; select bank4/5
 11446  0090  0087               	movwf	7
 11447  0091  3001               	movlw	1
 11448  0092  0781               	addwf	1,f
 11449  0093  3141               	addfsr 1,1
 11450  0094  1803               	skipnc
 11451  0095  0A81               	incf	1,f
 11452                           
 11453                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11454  0096  0A6E               	incf	_Load,w
 11455  0097  0086               	movwf	6
 11456  0098  3002               	movlw	2	; select bank4/5
 11457  0099  0087               	movwf	7
 11458  009A  3F40               	moviw [0]fsr1
 11459  009B  00AD               	movwf	??_Load_Main
 11460  009C  3F41               	moviw [1]fsr1
 11461  009D  00AE               	movwf	??_Load_Main+1
 11462  009E  3000               	movlw	0
 11463  009F  022E               	subwf	??_Load_Main+1,w
 11464  00A0  3005               	movlw	5
 11465  00A1  1903               	skipnz
 11466  00A2  022D               	subwf	??_Load_Main,w
 11467  00A3  1C03               	skipc
 11468  00A4  0008               	return
 11469                           
 11470                           ;OverLoad_B1.c: 63: {
 11471                           ;OverLoad_B1.c: 64: Load->Time=0;
 11472  00A5  0A6E               	incf	_Load,w
 11473  00A6  0086               	movwf	6
 11474  00A7  3002               	movlw	2	; select bank4/5
 11475  00A8  0087               	movwf	7
 11476  00A9  3000               	movlw	0
 11477  00AA  3FC0               	movwi [0]fsr1
 11478  00AB  3FC1               	movwi [1]fsr1
 11479                           
 11480                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11481  00AC  086E               	movf	_Load,w
 11482  00AD  0086               	movwf	6
 11483  00AE  3002               	movlw	2	; select bank4/5
 11484  00AF  0087               	movwf	7
 11485  00B0  1201               	bcf	1,4
 11486                           
 11487                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11488  00B1  086E               	movf	_Load,w
 11489  00B2  3E45               	addlw	69
 11490  00B3  0086               	movwf	6
 11491  00B4  3002               	movlw	2	; select bank4/5
 11492  00B5  0087               	movwf	7
 11493  00B6  086E               	movf	_Load,w
 11494  00B7  3E44               	addlw	68
 11495  00B8  0084               	movwf	4
 11496  00B9  3002               	movlw	2	; select bank4/5
 11497  00BA  0085               	movwf	5
 11498  00BB  0800               	movf	0,w
 11499  00BC  00AD               	movwf	??_Load_Main
 11500  00BD  086E               	movf	_Load,w
 11501  00BE  3E43               	addlw	67
 11502  00BF  0084               	movwf	4
 11503  00C0  3002               	movlw	2	; select bank4/5
 11504  00C1  0085               	movwf	5
 11505  00C2  0800               	movf	0,w
 11506  00C3  072D               	addwf	??_Load_Main,w
 11507  00C4  0701               	addwf	1,w
 11508  00C5  00AE               	movwf	??_Load_Main+1
 11509  00C6  086E               	movf	_Load,w
 11510  00C7  3E3E               	addlw	62
 11511  00C8  0086               	movwf	6
 11512  00C9  3002               	movlw	2	; select bank4/5
 11513  00CA  0087               	movwf	7
 11514  00CB  082E               	movf	??_Load_Main+1,w
 11515  00CC  0081               	movwf	1
 11516                           
 11517                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11518  00CD  01B1               	clrf	Load_Main@i
 11519  00CE  0AB1               	incf	Load_Main@i,f
 11520  00CF  3004               	movlw	4
 11521  00D0  0231               	subwf	Load_Main@i,w
 11522  00D1  1803               	btfsc	3,0
 11523  00D2  2901               	goto	l10032
 11524  00D3                     l10026:	
 11525                           
 11526                           ;OverLoad_B1.c: 68: {
 11527                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11528  00D3  3531               	lslf	Load_Main@i,w
 11529  00D4  3E08               	addlw	8
 11530  00D5  076E               	addwf	_Load,w
 11531  00D6  00AD               	movwf	??_Load_Main
 11532  00D7  082D               	movf	??_Load_Main,w
 11533  00D8  0086               	movwf	6
 11534  00D9  3002               	movlw	2	; select bank4/5
 11535  00DA  0087               	movwf	7
 11536  00DB  086E               	movf	_Load,w
 11537  00DC  3E2E               	addlw	46
 11538  00DD  0084               	movwf	4
 11539  00DE  3002               	movlw	2	; select bank4/5
 11540  00DF  0085               	movwf	5
 11541  00E0  3F40               	moviw [0]fsr1
 11542  00E1  0780               	addwf	0,f
 11543  00E2  3101               	addfsr 0,1
 11544  00E3  3F41               	moviw [1]fsr1
 11545  00E4  3D80               	addwfc	0,f
 11546  00E5  313F               	addfsr 0,-1
 11547                           
 11548                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11549  00E6  3531               	lslf	Load_Main@i,w
 11550  00E7  3E1A               	addlw	26
 11551  00E8  076E               	addwf	_Load,w
 11552  00E9  00AD               	movwf	??_Load_Main
 11553  00EA  082D               	movf	??_Load_Main,w
 11554  00EB  0086               	movwf	6
 11555  00EC  3002               	movlw	2	; select bank4/5
 11556  00ED  0087               	movwf	7
 11557  00EE  086E               	movf	_Load,w
 11558  00EF  3E30               	addlw	48
 11559  00F0  0084               	movwf	4
 11560  00F1  3002               	movlw	2	; select bank4/5
 11561  00F2  0085               	movwf	5
 11562  00F3  3F40               	moviw [0]fsr1
 11563  00F4  0780               	addwf	0,f
 11564  00F5  3101               	addfsr 0,1
 11565  00F6  3F41               	moviw [1]fsr1
 11566  00F7  3D80               	addwfc	0,f
 11567  00F8  313F               	addfsr 0,-1
 11568  00F9  3001               	movlw	1
 11569  00FA  00AD               	movwf	??_Load_Main
 11570  00FB  082D               	movf	??_Load_Main,w
 11571  00FC  07B1               	addwf	Load_Main@i,f
 11572  00FD  3004               	movlw	4
 11573  00FE  0231               	subwf	Load_Main@i,w
 11574  00FF  1C03               	skipc
 11575  0100  28D3               	goto	l10026
 11576  0101                     l10032:	
 11577                           
 11578                           ;OverLoad_B1.c: 71: }
 11579                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11580  0101  3003               	movlw	3
 11581  0102  00A0               	movwf	___lwdiv@divisor
 11582  0103  3000               	movlw	0
 11583  0104  00A1               	movwf	___lwdiv@divisor+1
 11584  0105  086E               	movf	_Load,w
 11585  0106  3E2E               	addlw	46
 11586  0107  0086               	movwf	6
 11587  0108  3002               	movlw	2	; select bank4/5
 11588  0109  0087               	movwf	7
 11589  010A  3F40               	moviw [0]fsr1
 11590  010B  00A2               	movwf	___lwdiv@dividend
 11591  010C  3F41               	moviw [1]fsr1
 11592  010D  00A3               	movwf	___lwdiv@dividend+1
 11593  010E  319A  2241  3180   	fcall	___lwdiv
 11594  0111  0020               	movlb	0	; select bank0
 11595  0112  086E               	movf	_Load,w
 11596  0113  3E2E               	addlw	46
 11597  0114  0086               	movwf	6
 11598  0115  3002               	movlw	2	; select bank4/5
 11599  0116  0087               	movwf	7
 11600  0117  0820               	movf	?___lwdiv,w
 11601  0118  3FC0               	movwi [0]fsr1
 11602  0119  0821               	movf	?___lwdiv+1,w
 11603  011A  3FC1               	movwi [1]fsr1
 11604                           
 11605                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11606  011B  3003               	movlw	3
 11607  011C  00A0               	movwf	___lwdiv@divisor
 11608  011D  3000               	movlw	0
 11609  011E  00A1               	movwf	___lwdiv@divisor+1
 11610  011F  086E               	movf	_Load,w
 11611  0120  3E30               	addlw	48
 11612  0121  0086               	movwf	6
 11613  0122  3002               	movlw	2	; select bank4/5
 11614  0123  0087               	movwf	7
 11615  0124  3F40               	moviw [0]fsr1
 11616  0125  00A2               	movwf	___lwdiv@dividend
 11617  0126  3F41               	moviw [1]fsr1
 11618  0127  00A3               	movwf	___lwdiv@dividend+1
 11619  0128  319A  2241  3180   	fcall	___lwdiv
 11620  012B  0020               	movlb	0	; select bank0
 11621  012C  086E               	movf	_Load,w
 11622  012D  3E30               	addlw	48
 11623  012E  0086               	movwf	6
 11624  012F  3002               	movlw	2	; select bank4/5
 11625  0130  0087               	movwf	7
 11626  0131  0820               	movf	?___lwdiv,w
 11627  0132  3FC0               	movwi [0]fsr1
 11628  0133  0821               	movf	?___lwdiv+1,w
 11629  0134  3FC1               	movwi [1]fsr1
 11630                           
 11631                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11632  0135  086E               	movf	_Load,w
 11633  0136  3E2E               	addlw	46
 11634  0137  0086               	movwf	6
 11635  0138  3002               	movlw	2	; select bank4/5
 11636  0139  0087               	movwf	7
 11637  013A  3F40               	moviw [0]fsr1
 11638  013B  00AD               	movwf	??_Load_Main
 11639  013C  3F41               	moviw [1]fsr1
 11640  013D  00AE               	movwf	??_Load_Main+1
 11641  013E  086E               	movf	_Load,w
 11642  013F  3E30               	addlw	48
 11643  0140  0086               	movwf	6
 11644  0141  3002               	movlw	2	; select bank4/5
 11645  0142  0087               	movwf	7
 11646  0143  3F40               	moviw [0]fsr1
 11647  0144  00AF               	movwf	??_Load_Main+2
 11648  0145  3F41               	moviw [1]fsr1
 11649  0146  00B0               	movwf	??_Load_Main+3
 11650  0147  082E               	movf	??_Load_Main+1,w
 11651  0148  0230               	subwf	??_Load_Main+3,w
 11652  0149  1D03               	skipz
 11653  014A  294D               	goto	u10105
 11654  014B  082D               	movf	??_Load_Main,w
 11655  014C  022F               	subwf	??_Load_Main+2,w
 11656  014D                     u10105:	
 11657  014D  1803               	skipnc
 11658  014E  2AD7               	goto	l10100
 11659                           
 11660                           ;OverLoad_B1.c: 75: {
 11661                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11662  014F  086E               	movf	_Load,w
 11663  0150  3E2E               	addlw	46
 11664  0151  0086               	movwf	6
 11665  0152  3002               	movlw	2	; select bank4/5
 11666  0153  0087               	movwf	7
 11667  0154  086E               	movf	_Load,w
 11668  0155  3E30               	addlw	48
 11669  0156  0084               	movwf	4
 11670  0157  3002               	movlw	2	; select bank4/5
 11671  0158  0085               	movwf	5
 11672  0159  3F00               	moviw [0]fsr0
 11673  015A  00AD               	movwf	??_Load_Main
 11674  015B  3F01               	moviw [1]fsr0
 11675  015C  00AE               	movwf	??_Load_Main+1
 11676  015D  09AD               	comf	??_Load_Main,f
 11677  015E  09AE               	comf	??_Load_Main+1,f
 11678  015F  0AAD               	incf	??_Load_Main,f
 11679  0160  1903               	skipnz
 11680  0161  0AAE               	incf	??_Load_Main+1,f
 11681  0162  3F40               	moviw [0]fsr1
 11682  0163  072D               	addwf	??_Load_Main,w
 11683  0164  00AF               	movwf	??_Load_Main+2
 11684  0165  3F41               	moviw [1]fsr1
 11685  0166  3D2E               	addwfc	??_Load_Main+1,w
 11686  0167  00B0               	movwf	??_Load_Main+3
 11687  0168  086E               	movf	_Load,w
 11688  0169  3E2C               	addlw	44
 11689  016A  0086               	movwf	6
 11690  016B  3002               	movlw	2	; select bank4/5
 11691  016C  0087               	movwf	7
 11692  016D  082F               	movf	??_Load_Main+2,w
 11693  016E  3FC0               	movwi [0]fsr1
 11694  016F  0830               	movf	??_Load_Main+3,w
 11695  0170  3FC1               	movwi [1]fsr1
 11696                           
 11697                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11698  0171  086E               	movf	_Load,w
 11699  0172  3E3A               	addlw	58
 11700  0173  0086               	movwf	6
 11701  0174  3002               	movlw	2	; select bank4/5
 11702  0175  0087               	movwf	7
 11703  0176  3002               	movlw	2
 11704  0177  0201               	subwf	1,w
 11705  0178  1803               	skipnc
 11706  0179  29CA               	goto	l10054
 11707                           
 11708                           ;OverLoad_B1.c: 79: {
 11709                           ;OverLoad_B1.c: 80: Load->Count++;
 11710  017A  3001               	movlw	1
 11711  017B  00AD               	movwf	??_Load_Main
 11712  017C  086E               	movf	_Load,w
 11713  017D  3E3A               	addlw	58
 11714  017E  0086               	movwf	6
 11715  017F  3002               	movlw	2	; select bank4/5
 11716  0180  0087               	movwf	7
 11717  0181  082D               	movf	??_Load_Main,w
 11718  0182  0781               	addwf	1,f
 11719                           
 11720                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11721  0183  086E               	movf	_Load,w
 11722  0184  3E3A               	addlw	58
 11723  0185  0086               	movwf	6
 11724  0186  3002               	movlw	2	; select bank4/5
 11725  0187  0087               	movwf	7
 11726  0188  0801               	movf	1,w
 11727  0189  3A01               	xorlw	1
 11728  018A  1D03               	skipz
 11729  018B  2996               	goto	l10046
 11730                           
 11731                           ;OverLoad_B1.c: 82: {
 11732                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11733  018C  086E               	movf	_Load,w
 11734  018D  3E36               	addlw	54
 11735  018E  0086               	movwf	6
 11736  018F  3002               	movlw	2	; select bank4/5
 11737  0190  0087               	movwf	7
 11738  0191  30F4               	movlw	244
 11739  0192  3FC0               	movwi [0]fsr1
 11740  0193  3001               	movlw	1
 11741  0194  3FC1               	movwi [1]fsr1
 11742                           
 11743                           ;OverLoad_B1.c: 84: }
 11744  0195  29CA               	goto	l10054
 11745  0196                     l10046:	
 11746                           
 11747                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11748  0196  086E               	movf	_Load,w
 11749  0197  3E3A               	addlw	58
 11750  0198  0086               	movwf	6
 11751  0199  3002               	movlw	2	; select bank4/5
 11752  019A  0087               	movwf	7
 11753  019B  0801               	movf	1,w
 11754  019C  3A02               	xorlw	2
 11755  019D  1D03               	skipz
 11756  019E  29CA               	goto	l10054
 11757                           
 11758                           ;OverLoad_B1.c: 86: {
 11759                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11760  019F  086E               	movf	_Load,w
 11761  01A0  3E3E               	addlw	62
 11762  01A1  0086               	movwf	6
 11763  01A2  3002               	movlw	2	; select bank4/5
 11764  01A3  0087               	movwf	7
 11765  01A4  0801               	movf	1,w
 11766  01A5  3A01               	xorlw	1
 11767  01A6  1D03               	skipz
 11768  01A7  29B2               	goto	l10052
 11769                           
 11770                           ;OverLoad_B1.c: 88: {
 11771                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
 11772  01A8  086E               	movf	_Load,w
 11773  01A9  3E36               	addlw	54
 11774  01AA  0086               	movwf	6
 11775  01AB  3002               	movlw	2	; select bank4/5
 11776  01AC  0087               	movwf	7
 11777  01AD  3032               	movlw	50
 11778  01AE  3FC0               	movwi [0]fsr1
 11779  01AF  3000               	movlw	0
 11780  01B0  3FC1               	movwi [1]fsr1
 11781                           
 11782                           ;OverLoad_B1.c: 90: }
 11783  01B1  29CA               	goto	l10054
 11784  01B2                     l10052:	
 11785                           
 11786                           ;OverLoad_B1.c: 91: else
 11787                           ;OverLoad_B1.c: 92: {
 11788                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
 11789  01B2  086E               	movf	_Load,w
 11790  01B3  3E06               	addlw	6
 11791  01B4  0086               	movwf	6
 11792  01B5  3002               	movlw	2	; select bank4/5
 11793  01B6  0087               	movwf	7
 11794  01B7  3F40               	moviw [0]fsr1
 11795  01B8  00AD               	movwf	??_Load_Main
 11796  01B9  3F41               	moviw [1]fsr1
 11797  01BA  00AE               	movwf	??_Load_Main+1
 11798  01BB  082D               	movf	??_Load_Main,w
 11799  01BC  3E2A               	addlw	42
 11800  01BD  00AF               	movwf	??_Load_Main+2
 11801  01BE  3000               	movlw	0
 11802  01BF  3D2E               	addwfc	??_Load_Main+1,w
 11803  01C0  00B0               	movwf	??_Load_Main+3
 11804  01C1  086E               	movf	_Load,w
 11805  01C2  3E36               	addlw	54
 11806  01C3  0086               	movwf	6
 11807  01C4  3002               	movlw	2	; select bank4/5
 11808  01C5  0087               	movwf	7
 11809  01C6  082F               	movf	??_Load_Main+2,w
 11810  01C7  3FC0               	movwi [0]fsr1
 11811  01C8  0830               	movf	??_Load_Main+3,w
 11812  01C9  3FC1               	movwi [1]fsr1
 11813  01CA                     l10054:	
 11814                           
 11815                           ;OverLoad_B1.c: 94: }
 11816                           ;OverLoad_B1.c: 95: }
 11817                           ;OverLoad_B1.c: 96: }
 11818                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11819  01CA  086E               	movf	_Load,w
 11820  01CB  3E36               	addlw	54
 11821  01CC  0086               	movwf	6
 11822  01CD  3002               	movlw	2	; select bank4/5
 11823  01CE  0087               	movwf	7
 11824  01CF  3F40               	moviw [0]fsr1
 11825  01D0  00AD               	movwf	??_Load_Main
 11826  01D1  3F41               	moviw [1]fsr1
 11827  01D2  00AE               	movwf	??_Load_Main+1
 11828  01D3  086E               	movf	_Load,w
 11829  01D4  3E2C               	addlw	44
 11830  01D5  0086               	movwf	6
 11831  01D6  3002               	movlw	2	; select bank4/5
 11832  01D7  0087               	movwf	7
 11833  01D8  3F40               	moviw [0]fsr1
 11834  01D9  00AF               	movwf	??_Load_Main+2
 11835  01DA  3F41               	moviw [1]fsr1
 11836  01DB  00B0               	movwf	??_Load_Main+3
 11837  01DC  082E               	movf	??_Load_Main+1,w
 11838  01DD  0230               	subwf	??_Load_Main+3,w
 11839  01DE  1D03               	skipz
 11840  01DF  29E2               	goto	u10155
 11841  01E0  082D               	movf	??_Load_Main,w
 11842  01E1  022F               	subwf	??_Load_Main+2,w
 11843  01E2                     u10155:	
 11844  01E2  1C03               	skipc
 11845  01E3  2A50               	goto	l10074
 11846                           
 11847                           ;OverLoad_B1.c: 99: {
 11848                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11849  01E4  3001               	movlw	1
 11850  01E5  00AD               	movwf	??_Load_Main
 11851  01E6  086E               	movf	_Load,w
 11852  01E7  3E3C               	addlw	60
 11853  01E8  0086               	movwf	6
 11854  01E9  3002               	movlw	2	; select bank4/5
 11855  01EA  0087               	movwf	7
 11856  01EB  082D               	movf	??_Load_Main,w
 11857  01EC  0781               	addwf	1,f
 11858                           
 11859                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11860  01ED  086E               	movf	_Load,w
 11861  01EE  3E3C               	addlw	60
 11862  01EF  0086               	movwf	6
 11863  01F0  3002               	movlw	2	; select bank4/5
 11864  01F1  0087               	movwf	7
 11865  01F2  3003               	movlw	3
 11866  01F3  0201               	subwf	1,w
 11867  01F4  1C03               	skipc
 11868  01F5  2AD7               	goto	l10100
 11869                           
 11870                           ;OverLoad_B1.c: 102: {
 11871                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11872  01F6  086E               	movf	_Load,w
 11873  01F7  3E3C               	addlw	60
 11874  01F8  0086               	movwf	6
 11875  01F9  3002               	movlw	2	; select bank4/5
 11876  01FA  0087               	movwf	7
 11877  01FB  0181               	clrf	1
 11878                           
 11879                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11880  01FC  3001               	movlw	1
 11881  01FD  319B  23B5  3180   	fcall	_setLoad_Exceptions
 11882                           
 11883                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 11884  0200  0020               	movlb	0	; select bank0
 11885  0201  086E               	movf	_Load,w
 11886  0202  3E2C               	addlw	44
 11887  0203  0086               	movwf	6
 11888  0204  3002               	movlw	2	; select bank4/5
 11889  0205  0087               	movwf	7
 11890  0206  3F40               	moviw [0]fsr1
 11891  0207  00AD               	movwf	??_Load_Main
 11892  0208  3F41               	moviw [1]fsr1
 11893  0209  00AE               	movwf	??_Load_Main+1
 11894  020A  082E               	movf	??_Load_Main+1,w
 11895  020B  00AF               	movwf	??_Load_Main+2
 11896  020C  086F               	movf	_Product,w
 11897  020D  3E04               	addlw	4
 11898  020E  0086               	movwf	6
 11899  020F  3001               	movlw	1	; select bank2/3
 11900  0210  0087               	movwf	7
 11901  0211  082F               	movf	??_Load_Main+2,w
 11902  0212  0081               	movwf	1
 11903                           
 11904                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 11905  0213  086E               	movf	_Load,w
 11906  0214  3E2C               	addlw	44
 11907  0215  0086               	movwf	6
 11908  0216  3002               	movlw	2	; select bank4/5
 11909  0217  0087               	movwf	7
 11910  0218  0801               	movf	1,w
 11911  0219  00AD               	movwf	??_Load_Main
 11912  021A  086F               	movf	_Product,w
 11913  021B  3E05               	addlw	5
 11914  021C  0086               	movwf	6
 11915  021D  3001               	movlw	1	; select bank2/3
 11916  021E  0087               	movwf	7
 11917  021F  082D               	movf	??_Load_Main,w
 11918  0220  0081               	movwf	1
 11919                           
 11920                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 11921  0221  086E               	movf	_Load,w
 11922  0222  3E36               	addlw	54
 11923  0223  0086               	movwf	6
 11924  0224  3002               	movlw	2	; select bank4/5
 11925  0225  0087               	movwf	7
 11926  0226  3F40               	moviw [0]fsr1
 11927  0227  00AD               	movwf	??_Load_Main
 11928  0228  3F41               	moviw [1]fsr1
 11929  0229  00AE               	movwf	??_Load_Main+1
 11930  022A  082E               	movf	??_Load_Main+1,w
 11931  022B  00AF               	movwf	??_Load_Main+2
 11932  022C  086F               	movf	_Product,w
 11933  022D  3E10               	addlw	16
 11934  022E  0086               	movwf	6
 11935  022F  3001               	movlw	1	; select bank2/3
 11936  0230  0087               	movwf	7
 11937  0231  082F               	movf	??_Load_Main+2,w
 11938  0232  0081               	movwf	1
 11939                           
 11940                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 11941  0233  086E               	movf	_Load,w
 11942  0234  3E36               	addlw	54
 11943  0235  0086               	movwf	6
 11944  0236  3002               	movlw	2	; select bank4/5
 11945  0237  0087               	movwf	7
 11946  0238  0801               	movf	1,w
 11947  0239  00AD               	movwf	??_Load_Main
 11948  023A  086F               	movf	_Product,w
 11949  023B  3E11               	addlw	17
 11950  023C  0086               	movwf	6
 11951  023D  3001               	movlw	1	; select bank2/3
 11952  023E  0087               	movwf	7
 11953  023F  082D               	movf	??_Load_Main,w
 11954  0240  0081               	movwf	1
 11955                           
 11956                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 11957  0241  086E               	movf	_Load,w
 11958  0242  3E3E               	addlw	62
 11959  0243  0086               	movwf	6
 11960  0244  3002               	movlw	2	; select bank4/5
 11961  0245  0087               	movwf	7
 11962  0246  0801               	movf	1,w
 11963  0247  00AD               	movwf	??_Load_Main
 11964  0248  086F               	movf	_Product,w
 11965  0249  3E08               	addlw	8
 11966  024A  0086               	movwf	6
 11967  024B  3001               	movlw	1	; select bank2/3
 11968  024C  0087               	movwf	7
 11969  024D  082D               	movf	??_Load_Main,w
 11970  024E  0081               	movwf	1
 11971                           
 11972                           ;OverLoad_B1.c: 113: }
 11973                           ;OverLoad_B1.c: 114: }
 11974  024F  2AD7               	goto	l10100
 11975  0250                     l10074:	
 11976                           
 11977                           ;OverLoad_B1.c: 115: else
 11978                           ;OverLoad_B1.c: 116: {
 11979                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11980  0250  086E               	movf	_Load,w
 11981  0251  3E3C               	addlw	60
 11982  0252  0086               	movwf	6
 11983  0253  3002               	movlw	2	; select bank4/5
 11984  0254  0087               	movwf	7
 11985  0255  0181               	clrf	1
 11986                           
 11987                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11988  0256  086E               	movf	_Load,w
 11989  0257  3E42               	addlw	66
 11990  0258  0086               	movwf	6
 11991  0259  3002               	movlw	2	; select bank4/5
 11992  025A  0087               	movwf	7
 11993  025B  300A               	movlw	10
 11994  025C  0201               	subwf	1,w
 11995  025D  1803               	skipnc
 11996  025E  2A68               	goto	l10080
 11997                           
 11998                           ;OverLoad_B1.c: 119: {
 11999                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 12000  025F  3001               	movlw	1
 12001  0260  00AD               	movwf	??_Load_Main
 12002  0261  086E               	movf	_Load,w
 12003  0262  3E42               	addlw	66
 12004  0263  0086               	movwf	6
 12005  0264  3002               	movlw	2	; select bank4/5
 12006  0265  0087               	movwf	7
 12007  0266  082D               	movf	??_Load_Main,w
 12008  0267  0781               	addwf	1,f
 12009  0268                     l10080:	
 12010                           
 12011                           ;OverLoad_B1.c: 121: }
 12012                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 12013  0268  086E               	movf	_Load,w
 12014  0269  3E42               	addlw	66
 12015  026A  0086               	movwf	6
 12016  026B  3002               	movlw	2	; select bank4/5
 12017  026C  0087               	movwf	7
 12018  026D  300A               	movlw	10
 12019  026E  0201               	subwf	1,w
 12020  026F  1C03               	skipc
 12021  0270  2AD7               	goto	l10100
 12022                           
 12023                           ;OverLoad_B1.c: 123: {
 12024                           ;OverLoad_B1.c: 124: Load->Safe=1;
 12025  0271  086E               	movf	_Load,w
 12026  0272  0086               	movwf	6
 12027  0273  3002               	movlw	2	; select bank4/5
 12028  0274  0087               	movwf	7
 12029  0275  1581               	bsf	1,3
 12030                           
 12031                           ;OverLoad_B1.c: 128: setDimmerLights_Clear(1,1);
 12032  0276  01A2               	clrf	setDimmerLights_Clear@command
 12033  0277  0AA2               	incf	setDimmerLights_Clear@command,f
 12034  0278  3001               	movlw	1
 12035  0279  31A4  2486  3180   	fcall	_setDimmerLights_Clear
 12036                           
 12037                           ;OverLoad_B1.c: 132: ;;
 12038                           ;OverLoad_B1.c: 138: setDimmerLights_Clear(2,1);
 12039  027C  0020               	movlb	0	; select bank0
 12040  027D  01A2               	clrf	setDimmerLights_Clear@command
 12041  027E  0AA2               	incf	setDimmerLights_Clear@command,f
 12042  027F  3002               	movlw	2
 12043  0280  31A4  2486  3180   	fcall	_setDimmerLights_Clear
 12044                           
 12045                           ;OverLoad_B1.c: 142: ;;
 12046                           ;OverLoad_B1.c: 157: if(Load->StatusOn)
 12047  0283  0020               	movlb	0	; select bank0
 12048  0284  086E               	movf	_Load,w
 12049  0285  3E46               	addlw	70
 12050  0286  0086               	movwf	6
 12051  0287  3002               	movlw	2	; select bank4/5
 12052  0288  0087               	movwf	7
 12053  0289  1C01               	btfss	1,0
 12054  028A  2A9F               	goto	l10092
 12055                           
 12056                           ;OverLoad_B1.c: 158: {
 12057                           ;OverLoad_B1.c: 159: Load->StatusOn=0;
 12058  028B  086E               	movf	_Load,w
 12059  028C  3E46               	addlw	70
 12060  028D  0086               	movwf	6
 12061  028E  3002               	movlw	2	; select bank4/5
 12062  028F  0087               	movwf	7
 12063  0290  1001               	bcf	1,0
 12064                           
 12065                           ;OverLoad_B1.c: 160: Load->TotalLoad=Load->AD;
 12066  0291  086E               	movf	_Load,w
 12067  0292  3E2C               	addlw	44
 12068  0293  0086               	movwf	6
 12069  0294  3002               	movlw	2	; select bank4/5
 12070  0295  0087               	movwf	7
 12071  0296  086E               	movf	_Load,w
 12072  0297  3E06               	addlw	6
 12073  0298  0084               	movwf	4
 12074  0299  3002               	movlw	2	; select bank4/5
 12075  029A  0085               	movwf	5
 12076  029B  3F40               	moviw [0]fsr1
 12077  029C  3F80               	movwi [0]fsr0
 12078  029D  3F41               	moviw [1]fsr1
 12079  029E  3F81               	movwi [1]fsr0
 12080  029F                     l10092:	
 12081                           
 12082                           ;OverLoad_B1.c: 162: }
 12083                           ;OverLoad_B1.c: 164: if(Load->StatusOff)
 12084  029F  086E               	movf	_Load,w
 12085  02A0  3E46               	addlw	70
 12086  02A1  0086               	movwf	6
 12087  02A2  3002               	movlw	2	; select bank4/5
 12088  02A3  0087               	movwf	7
 12089  02A4  1C81               	btfss	1,1
 12090  02A5  2AD7               	goto	l10100
 12091                           
 12092                           ;OverLoad_B1.c: 165: {
 12093                           ;OverLoad_B1.c: 166: Load->StatusOff=0;
 12094  02A6  086E               	movf	_Load,w
 12095  02A7  3E46               	addlw	70
 12096  02A8  0086               	movwf	6
 12097  02A9  3002               	movlw	2	; select bank4/5
 12098  02AA  0087               	movwf	7
 12099  02AB  1081               	bcf	1,1
 12100                           
 12101                           ;OverLoad_B1.c: 167: Load->TotalLoad=Load->AD;
 12102  02AC  086E               	movf	_Load,w
 12103  02AD  3E2C               	addlw	44
 12104  02AE  0086               	movwf	6
 12105  02AF  3002               	movlw	2	; select bank4/5
 12106  02B0  0087               	movwf	7
 12107  02B1  086E               	movf	_Load,w
 12108  02B2  3E06               	addlw	6
 12109  02B3  0084               	movwf	4
 12110  02B4  3002               	movlw	2	; select bank4/5
 12111  02B5  0085               	movwf	5
 12112  02B6  3F40               	moviw [0]fsr1
 12113  02B7  3F80               	movwi [0]fsr0
 12114  02B8  3F41               	moviw [1]fsr1
 12115  02B9  3F81               	movwi [1]fsr0
 12116                           
 12117                           ;OverLoad_B1.c: 168: Load->JudgeValue=0x32*Load->LightsCount;
 12118  02BA  086E               	movf	_Load,w
 12119  02BB  3E3E               	addlw	62
 12120  02BC  0086               	movwf	6
 12121  02BD  3002               	movlw	2	; select bank4/5
 12122  02BE  0087               	movwf	7
 12123  02BF  0801               	movf	1,w
 12124  02C0  00AD               	movwf	??_Load_Main
 12125  02C1  01AE               	clrf	??_Load_Main+1
 12126  02C2  082D               	movf	??_Load_Main,w
 12127  02C3  00A0               	movwf	___wmul@multiplier
 12128  02C4  082E               	movf	??_Load_Main+1,w
 12129  02C5  00A1               	movwf	___wmul@multiplier+1
 12130  02C6  3032               	movlw	50
 12131  02C7  00A2               	movwf	___wmul@multiplicand
 12132  02C8  3000               	movlw	0
 12133  02C9  00A3               	movwf	___wmul@multiplicand+1
 12134  02CA  31A6  26A9  3180   	fcall	___wmul
 12135  02CD  0020               	movlb	0	; select bank0
 12136  02CE  086E               	movf	_Load,w
 12137  02CF  3E36               	addlw	54
 12138  02D0  0086               	movwf	6
 12139  02D1  3002               	movlw	2	; select bank4/5
 12140  02D2  0087               	movwf	7
 12141  02D3  0820               	movf	?___wmul,w
 12142  02D4  3FC0               	movwi [0]fsr1
 12143  02D5  0821               	movf	?___wmul+1,w
 12144  02D6  3FC1               	movwi [1]fsr1
 12145  02D7                     l10100:	
 12146                           
 12147                           ;OverLoad_B1.c: 169: }
 12148                           ;OverLoad_B1.c: 170: }
 12149                           ;OverLoad_B1.c: 171: }
 12150                           ;OverLoad_B1.c: 172: }
 12151                           ;OverLoad_B1.c: 173: setLoad_AH_AL_Restore();
 12152  02D7  31A7  274A  3180   	fcall	_setLoad_AH_AL_Restore
 12153                           
 12154                           ;OverLoad_B1.c: 175: Product->Data[2]=(Load->AD >> 8);
 12155  02DA  0020               	movlb	0	; select bank0
 12156  02DB  086E               	movf	_Load,w
 12157  02DC  3E2C               	addlw	44
 12158  02DD  0086               	movwf	6
 12159  02DE  3002               	movlw	2	; select bank4/5
 12160  02DF  0087               	movwf	7
 12161  02E0  3F40               	moviw [0]fsr1
 12162  02E1  00AD               	movwf	??_Load_Main
 12163  02E2  3F41               	moviw [1]fsr1
 12164  02E3  00AE               	movwf	??_Load_Main+1
 12165  02E4  082E               	movf	??_Load_Main+1,w
 12166  02E5  00AF               	movwf	??_Load_Main+2
 12167  02E6  086F               	movf	_Product,w
 12168  02E7  3E02               	addlw	2
 12169  02E8  0086               	movwf	6
 12170  02E9  3001               	movlw	1	; select bank2/3
 12171  02EA  0087               	movwf	7
 12172  02EB  082F               	movf	??_Load_Main+2,w
 12173  02EC  0081               	movwf	1
 12174                           
 12175                           ;OverLoad_B1.c: 176: Product->Data[3]=Load->AD;
 12176  02ED  086E               	movf	_Load,w
 12177  02EE  3E2C               	addlw	44
 12178  02EF  0086               	movwf	6
 12179  02F0  3002               	movlw	2	; select bank4/5
 12180  02F1  0087               	movwf	7
 12181  02F2  0801               	movf	1,w
 12182  02F3  00AD               	movwf	??_Load_Main
 12183  02F4  086F               	movf	_Product,w
 12184  02F5  3E03               	addlw	3
 12185  02F6  0086               	movwf	6
 12186  02F7  3001               	movlw	1	; select bank2/3
 12187  02F8  0087               	movwf	7
 12188  02F9  082D               	movf	??_Load_Main,w
 12189  02FA  0081               	movwf	1
 12190                           
 12191                           ;OverLoad_B1.c: 177: Product->Data[8]=Load->LightsCount;
 12192  02FB  086E               	movf	_Load,w
 12193  02FC  3E3E               	addlw	62
 12194  02FD  0086               	movwf	6
 12195  02FE  3002               	movlw	2	; select bank4/5
 12196  02FF  0087               	movwf	7
 12197  0300  0801               	movf	1,w
 12198  0301  00AD               	movwf	??_Load_Main
 12199  0302  086F               	movf	_Product,w
 12200  0303  3E08               	addlw	8
 12201  0304  0086               	movwf	6
 12202  0305  3001               	movlw	1	; select bank2/3
 12203  0306  0087               	movwf	7
 12204  0307  082D               	movf	??_Load_Main,w
 12205  0308  0081               	movwf	1
 12206                           
 12207                           ;OverLoad_B1.c: 178: Product->Data[10]=Load->TotalLoad;
 12208  0309  086E               	movf	_Load,w
 12209  030A  3E06               	addlw	6
 12210  030B  0086               	movwf	6
 12211  030C  3002               	movlw	2	; select bank4/5
 12212  030D  0087               	movwf	7
 12213  030E  0801               	movf	1,w
 12214  030F  00AD               	movwf	??_Load_Main
 12215  0310  086F               	movf	_Product,w
 12216  0311  3E0A               	addlw	10
 12217  0312  0086               	movwf	6
 12218  0313  3001               	movlw	1	; select bank2/3
 12219  0314  0087               	movwf	7
 12220  0315  082D               	movf	??_Load_Main,w
 12221  0316  0081               	movwf	1
 12222                           
 12223                           ;OverLoad_B1.c: 179: Product->Data[16]=(Load->JudgeValue >> 8);
 12224  0317  086E               	movf	_Load,w
 12225  0318  3E36               	addlw	54
 12226  0319  0086               	movwf	6
 12227  031A  3002               	movlw	2	; select bank4/5
 12228  031B  0087               	movwf	7
 12229  031C  3F40               	moviw [0]fsr1
 12230  031D  00AD               	movwf	??_Load_Main
 12231  031E  3F41               	moviw [1]fsr1
 12232  031F  00AE               	movwf	??_Load_Main+1
 12233  0320  082E               	movf	??_Load_Main+1,w
 12234  0321  00AF               	movwf	??_Load_Main+2
 12235  0322  086F               	movf	_Product,w
 12236  0323  3E10               	addlw	16
 12237  0324  0086               	movwf	6
 12238  0325  3001               	movlw	1	; select bank2/3
 12239  0326  0087               	movwf	7
 12240  0327  082F               	movf	??_Load_Main+2,w
 12241  0328  0081               	movwf	1
 12242                           
 12243                           ;OverLoad_B1.c: 180: Product->Data[17]=Load->JudgeValue;
 12244  0329  086E               	movf	_Load,w
 12245  032A  3E36               	addlw	54
 12246  032B  0086               	movwf	6
 12247  032C  3002               	movlw	2	; select bank4/5
 12248  032D  0087               	movwf	7
 12249  032E  0801               	movf	1,w
 12250  032F  00AD               	movwf	??_Load_Main
 12251  0330  086F               	movf	_Product,w
 12252  0331  3E11               	addlw	17
 12253  0332  0086               	movwf	6
 12254  0333  3001               	movlw	1	; select bank2/3
 12255  0334  0087               	movwf	7
 12256  0335  082D               	movf	??_Load_Main,w
 12257  0336  0081               	movwf	1
 12258                           
 12259                           ;OverLoad_B1.c: 181: Product->Data[18]=Load->ErrorStatus;
 12260  0337  086E               	movf	_Load,w
 12261  0338  3E05               	addlw	5
 12262  0339  0086               	movwf	6
 12263  033A  3002               	movlw	2	; select bank4/5
 12264  033B  0087               	movwf	7
 12265  033C  0801               	movf	1,w
 12266  033D  00AD               	movwf	??_Load_Main
 12267  033E  086F               	movf	_Product,w
 12268  033F  3E12               	addlw	18
 12269  0340  0086               	movwf	6
 12270  0341  3001               	movlw	1	; select bank2/3
 12271  0342  0087               	movwf	7
 12272  0343  082D               	movf	??_Load_Main,w
 12273  0344  0081               	movwf	1
 12274                           
 12275                           ;OverLoad_B1.c: 182: Product->Data[19]=Load->Count;
 12276  0345  086E               	movf	_Load,w
 12277  0346  3E3A               	addlw	58
 12278  0347  0086               	movwf	6
 12279  0348  3002               	movlw	2	; select bank4/5
 12280  0349  0087               	movwf	7
 12281  034A  0801               	movf	1,w
 12282  034B  00AD               	movwf	??_Load_Main
 12283  034C  086F               	movf	_Product,w
 12284  034D  3E13               	addlw	19
 12285  034E  0086               	movwf	6
 12286  034F  3001               	movlw	1	; select bank2/3
 12287  0350  0087               	movwf	7
 12288  0351  082D               	movf	??_Load_Main,w
 12289  0352  0081               	movwf	1
 12290                           
 12291                           ;OverLoad_B1.c: 185: }
 12292                           ;OverLoad_B1.c: 186: }
 12293  0353  0008               	return
 12294  0354                     l10118:	
 12295                           
 12296                           ;OverLoad_B1.c: 187: else
 12297                           ;OverLoad_B1.c: 188: {
 12298                           ;OverLoad_B1.c: 189: if(Load->GO)
 12299  0354  086E               	movf	_Load,w
 12300  0355  0086               	movwf	6
 12301  0356  3002               	movlw	2	; select bank4/5
 12302  0357  0087               	movwf	7
 12303  0358  1C81               	btfss	1,1
 12304  0359  2B7D               	goto	l10130
 12305                           
 12306                           ;OverLoad_B1.c: 190: {
 12307                           ;OverLoad_B1.c: 191: if(!Load->LightsON)
 12308  035A  086E               	movf	_Load,w
 12309  035B  0086               	movwf	6
 12310  035C  3002               	movlw	2	; select bank4/5
 12311  035D  0087               	movwf	7
 12312  035E  1901               	btfsc	1,2
 12313  035F  2B6A               	goto	l10124
 12314                           
 12315                           ;OverLoad_B1.c: 192: {
 12316                           ;OverLoad_B1.c: 193: Load->LightsON=1;
 12317  0360  086E               	movf	_Load,w
 12318  0361  0086               	movwf	6
 12319  0362  3002               	movlw	2	; select bank4/5
 12320  0363  0087               	movwf	7
 12321  0364  1501               	bsf	1,2
 12322                           
 12323                           ;OverLoad_B1.c: 194: Load->Safe=0;
 12324  0365  086E               	movf	_Load,w
 12325  0366  0086               	movwf	6
 12326  0367  3002               	movlw	2	; select bank4/5
 12327  0368  0087               	movwf	7
 12328  0369  1181               	bcf	1,3
 12329  036A                     l10124:	
 12330                           
 12331                           ;OverLoad_B1.c: 195: }
 12332                           ;OverLoad_B1.c: 196: if(getTemp_Safe() && getPF_Safe())
 12333  036A  31A2  22F7  3180   	fcall	_getTemp_Safe
 12334  036D  3A00               	xorlw	0
 12335  036E  1903               	skipnz
 12336  036F  0008               	return
 12337  0370  31A3  231C  3180   	fcall	_getPF_Safe
 12338  0373  3A00               	xorlw	0
 12339  0374  1903               	skipnz
 12340  0375  0008               	return
 12341                           
 12342                           ;OverLoad_B1.c: 197: {
 12343                           ;OverLoad_B1.c: 198: Load->ADtoGO=1;
 12344  0376  0020               	movlb	0	; select bank0
 12345  0377  086E               	movf	_Load,w
 12346  0378  0086               	movwf	6
 12347  0379  3002               	movlw	2	; select bank4/5
 12348  037A  0087               	movwf	7
 12349  037B  1601               	bsf	1,4
 12350                           
 12351                           ;OverLoad_B1.c: 199: }
 12352                           ;OverLoad_B1.c: 200: }
 12353  037C  0008               	return
 12354  037D                     l10130:	
 12355                           
 12356                           ;OverLoad_B1.c: 201: else
 12357                           ;OverLoad_B1.c: 202: {
 12358                           ;OverLoad_B1.c: 203: if(Load->LightsON)
 12359  037D  086E               	movf	_Load,w
 12360  037E  0086               	movwf	6
 12361  037F  3002               	movlw	2	; select bank4/5
 12362  0380  0087               	movwf	7
 12363  0381  1D01               	btfss	1,2
 12364  0382  0008               	return
 12365                           
 12366                           ;OverLoad_B1.c: 204: {
 12367                           ;OverLoad_B1.c: 205: Load->LightsON=0;
 12368  0383  086E               	movf	_Load,w
 12369  0384  0086               	movwf	6
 12370  0385  3002               	movlw	2	; select bank4/5
 12371  0386  0087               	movwf	7
 12372  0387  1101               	bcf	1,2
 12373                           
 12374                           ;OverLoad_B1.c: 206: Load->Safe=1;
 12375  0388  086E               	movf	_Load,w
 12376  0389  0086               	movwf	6
 12377  038A  3002               	movlw	2	; select bank4/5
 12378  038B  0087               	movwf	7
 12379  038C  1581               	bsf	1,3
 12380                           
 12381                           ;OverLoad_B1.c: 207: Load->ErrorCount=0;
 12382  038D  086E               	movf	_Load,w
 12383  038E  3E3C               	addlw	60
 12384  038F  0086               	movwf	6
 12385  0390  3002               	movlw	2	; select bank4/5
 12386  0391  0087               	movwf	7
 12387  0392  0181               	clrf	1
 12388                           
 12389                           ;OverLoad_B1.c: 208: Load->Count=0;
 12390  0393  086E               	movf	_Load,w
 12391  0394  3E3A               	addlw	58
 12392  0395  0086               	movwf	6
 12393  0396  3002               	movlw	2	; select bank4/5
 12394  0397  0087               	movwf	7
 12395  0398  0181               	clrf	1
 12396                           
 12397                           ;OverLoad_B1.c: 209: Load->TotalLoad=0;
 12398  0399  086E               	movf	_Load,w
 12399  039A  3E06               	addlw	6
 12400  039B  0086               	movwf	6
 12401  039C  3002               	movlw	2	; select bank4/5
 12402  039D  0087               	movwf	7
 12403  039E  3000               	movlw	0
 12404  039F  3FC0               	movwi [0]fsr1
 12405  03A0  3FC1               	movwi [1]fsr1
 12406                           
 12407                           ;OverLoad_B1.c: 210: Load->NumberCount=0;
 12408  03A1  086E               	movf	_Load,w
 12409  03A2  3E3F               	addlw	63
 12410  03A3  0086               	movwf	6
 12411  03A4  3002               	movlw	2	; select bank4/5
 12412  03A5  0087               	movwf	7
 12413  03A6  0181               	clrf	1
 12414                           
 12415                           ;OverLoad_B1.c: 211: Load->StatusOn=0;
 12416  03A7  086E               	movf	_Load,w
 12417  03A8  3E46               	addlw	70
 12418  03A9  0086               	movwf	6
 12419  03AA  3002               	movlw	2	; select bank4/5
 12420  03AB  0087               	movwf	7
 12421  03AC  1001               	bcf	1,0
 12422                           
 12423                           ;OverLoad_B1.c: 212: Load->StatusOff=0;
 12424  03AD  086E               	movf	_Load,w
 12425  03AE  3E46               	addlw	70
 12426  03AF  0086               	movwf	6
 12427  03B0  3002               	movlw	2	; select bank4/5
 12428  03B1  0087               	movwf	7
 12429  03B2  1081               	bcf	1,1
 12430                           
 12431                           ;OverLoad_B1.c: 213: Load->AD=0;
 12432  03B3  086E               	movf	_Load,w
 12433  03B4  3E2C               	addlw	44
 12434  03B5  0086               	movwf	6
 12435  03B6  3002               	movlw	2	; select bank4/5
 12436  03B7  0087               	movwf	7
 12437  03B8  3000               	movlw	0
 12438  03B9  3FC0               	movwi [0]fsr1
 12439  03BA  3FC1               	movwi [1]fsr1
 12440                           
 12441                           ;OverLoad_B1.c: 214: setLoad_AH_AL_Restore();
 12442  03BB  31A7  274A  3180   	fcall	_setLoad_AH_AL_Restore
 12443                           
 12444                           ;OverLoad_B1.c: 218: setDimmerLights_Clear(1,1);
 12445  03BE  0020               	movlb	0	; select bank0
 12446  03BF  01A2               	clrf	setDimmerLights_Clear@command
 12447  03C0  0AA2               	incf	setDimmerLights_Clear@command,f
 12448  03C1  3001               	movlw	1
 12449  03C2  31A4  2486  3180   	fcall	_setDimmerLights_Clear
 12450                           
 12451                           ;OverLoad_B1.c: 222: ;;
 12452                           ;OverLoad_B1.c: 228: setDimmerLights_Clear(2,1);
 12453  03C5  0020               	movlb	0	; select bank0
 12454  03C6  01A2               	clrf	setDimmerLights_Clear@command
 12455  03C7  0AA2               	incf	setDimmerLights_Clear@command,f
 12456  03C8  3002               	movlw	2
 12457  03C9  31A4  2486  3180   	fcall	_setDimmerLights_Clear
 12458                           
 12459                           ;OverLoad_B1.c: 232: ;;
 12460                           ;OverLoad_B1.c: 247: Product->Data[2]=(Load->AD >> 8);
 12461  03CC  0020               	movlb	0	; select bank0
 12462  03CD  086E               	movf	_Load,w
 12463  03CE  3E2C               	addlw	44
 12464  03CF  0086               	movwf	6
 12465  03D0  3002               	movlw	2	; select bank4/5
 12466  03D1  0087               	movwf	7
 12467  03D2  3F40               	moviw [0]fsr1
 12468  03D3  00AD               	movwf	??_Load_Main
 12469  03D4  3F41               	moviw [1]fsr1
 12470  03D5  00AE               	movwf	??_Load_Main+1
 12471  03D6  082E               	movf	??_Load_Main+1,w
 12472  03D7  00AF               	movwf	??_Load_Main+2
 12473  03D8  086F               	movf	_Product,w
 12474  03D9  3E02               	addlw	2
 12475  03DA  0086               	movwf	6
 12476  03DB  3001               	movlw	1	; select bank2/3
 12477  03DC  0087               	movwf	7
 12478  03DD  082F               	movf	??_Load_Main+2,w
 12479  03DE  0081               	movwf	1
 12480                           
 12481                           ;OverLoad_B1.c: 248: Product->Data[3]=Load->AD;
 12482  03DF  086E               	movf	_Load,w
 12483  03E0  3E2C               	addlw	44
 12484  03E1  0086               	movwf	6
 12485  03E2  3002               	movlw	2	; select bank4/5
 12486  03E3  0087               	movwf	7
 12487  03E4  0801               	movf	1,w
 12488  03E5  00AD               	movwf	??_Load_Main
 12489  03E6  086F               	movf	_Product,w
 12490  03E7  3E03               	addlw	3
 12491  03E8  0086               	movwf	6
 12492  03E9  3001               	movlw	1	; select bank2/3
 12493  03EA  0087               	movwf	7
 12494  03EB  082D               	movf	??_Load_Main,w
 12495  03EC  0081               	movwf	1
 12496                           
 12497                           ;OverLoad_B1.c: 253: Product->Data[8]=Load->NumberCount;
 12498  03ED  086E               	movf	_Load,w
 12499  03EE  3E3F               	addlw	63
 12500  03EF  0086               	movwf	6
 12501  03F0  3002               	movlw	2	; select bank4/5
 12502  03F1  0087               	movwf	7
 12503  03F2  0801               	movf	1,w
 12504  03F3  00AD               	movwf	??_Load_Main
 12505  03F4  086F               	movf	_Product,w
 12506  03F5  3E08               	addlw	8
 12507  03F6  0086               	movwf	6
 12508  03F7  3001               	movlw	1	; select bank2/3
 12509  03F8  0087               	movwf	7
 12510  03F9  082D               	movf	??_Load_Main,w
 12511  03FA  0081               	movwf	1
 12512                           
 12513                           ;OverLoad_B1.c: 254: Product->Data[10]=Load->TotalLoad;
 12514  03FB  086E               	movf	_Load,w
 12515  03FC  3E06               	addlw	6
 12516  03FD  0086               	movwf	6
 12517  03FE  3002               	movlw	2	; select bank4/5
 12518  03FF  0087               	movwf	7
 12519  0400  0801               	movf	1,w
 12520  0401  00AD               	movwf	??_Load_Main
 12521  0402  086F               	movf	_Product,w
 12522  0403  3E0A               	addlw	10
 12523  0404  0086               	movwf	6
 12524  0405  3001               	movlw	1	; select bank2/3
 12525  0406  0087               	movwf	7
 12526  0407  082D               	movf	??_Load_Main,w
 12527  0408  0081               	movwf	1
 12528                           
 12529                           ;OverLoad_B1.c: 255: Product->Data[16]=(Load->JudgeValue >> 8);
 12530  0409  086E               	movf	_Load,w
 12531  040A  3E36               	addlw	54
 12532  040B  0086               	movwf	6
 12533  040C  3002               	movlw	2	; select bank4/5
 12534  040D  0087               	movwf	7
 12535  040E  3F40               	moviw [0]fsr1
 12536  040F  00AD               	movwf	??_Load_Main
 12537  0410  3F41               	moviw [1]fsr1
 12538  0411  00AE               	movwf	??_Load_Main+1
 12539  0412  082E               	movf	??_Load_Main+1,w
 12540  0413  00AF               	movwf	??_Load_Main+2
 12541  0414  086F               	movf	_Product,w
 12542  0415  3E10               	addlw	16
 12543  0416  0086               	movwf	6
 12544  0417  3001               	movlw	1	; select bank2/3
 12545  0418  0087               	movwf	7
 12546  0419  082F               	movf	??_Load_Main+2,w
 12547  041A  0081               	movwf	1
 12548                           
 12549                           ;OverLoad_B1.c: 256: Product->Data[17]=Load->JudgeValue;
 12550  041B  086E               	movf	_Load,w
 12551  041C  3E36               	addlw	54
 12552  041D  0086               	movwf	6
 12553  041E  3002               	movlw	2	; select bank4/5
 12554  041F  0087               	movwf	7
 12555  0420  0801               	movf	1,w
 12556  0421  00AD               	movwf	??_Load_Main
 12557  0422  086F               	movf	_Product,w
 12558  0423  3E11               	addlw	17
 12559  0424  0086               	movwf	6
 12560  0425  3001               	movlw	1	; select bank2/3
 12561  0426  0087               	movwf	7
 12562  0427  082D               	movf	??_Load_Main,w
 12563  0428  0081               	movwf	1
 12564                           
 12565                           ;OverLoad_B1.c: 257: Product->Data[18]=Load->ErrorStatus;
 12566  0429  086E               	movf	_Load,w
 12567  042A  3E05               	addlw	5
 12568  042B  0086               	movwf	6
 12569  042C  3002               	movlw	2	; select bank4/5
 12570  042D  0087               	movwf	7
 12571  042E  0801               	movf	1,w
 12572  042F  00AD               	movwf	??_Load_Main
 12573  0430  086F               	movf	_Product,w
 12574  0431  3E12               	addlw	18
 12575  0432  0086               	movwf	6
 12576  0433  3001               	movlw	1	; select bank2/3
 12577  0434  0087               	movwf	7
 12578  0435  082D               	movf	??_Load_Main,w
 12579  0436  0081               	movwf	1
 12580                           
 12581                           ;OverLoad_B1.c: 258: Product->Data[19]=Load->Count;
 12582  0437  086E               	movf	_Load,w
 12583  0438  3E3A               	addlw	58
 12584  0439  0086               	movwf	6
 12585  043A  3002               	movlw	2	; select bank4/5
 12586  043B  0087               	movwf	7
 12587  043C  0801               	movf	1,w
 12588  043D  00AD               	movwf	??_Load_Main
 12589  043E  086F               	movf	_Product,w
 12590  043F  3E13               	addlw	19
 12591  0440  0086               	movwf	6
 12592  0441  3001               	movlw	1	; select bank2/3
 12593  0442  0087               	movwf	7
 12594  0443  082D               	movf	??_Load_Main,w
 12595  0444  0081               	movwf	1
 12596  0445  0008               	return
 12597  0446                     __end_of_Load_Main:	
 12598                           
 12599                           	psect	text60
 12600  1BB5                     __ptext60:	
 12601 ;; *************** function _setLoad_Exceptions *****************
 12602 ;; Defined at:
 12603 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  command         1    wreg     unsigned char 
 12606 ;; Auto vars:     Size  Location     Type
 12607 ;;  command         1   12[BANK0 ] unsigned char 
 12608 ;; Return value:  Size  Location     Type
 12609 ;;		None               void
 12610 ;; Registers used:
 12611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12612 ;; Tracked objects:
 12613 ;;		On entry : 0/0
 12614 ;;		On exit  : 0/0
 12615 ;;		Unchanged: 0/0
 12616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;Total ram usage:        2 bytes
 12622 ;; Hardware stack levels used:    1
 12623 ;; Hardware stack levels required when called:    8
 12624 ;; This function calls:
 12625 ;;		_DimmerLights_Exceptions
 12626 ;;		_setLED
 12627 ;;		_setRF_Enable
 12628 ;;		_setSw_Enable
 12629 ;; This function is called by:
 12630 ;;		_Load_Main
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function _setLoad_Exceptions
 12636  1BB5                     _setLoad_Exceptions:	
 12637                           
 12638                           ;incstack = 0
 12639                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12640                           ;setLoad_Exceptions@command stored from wreg
 12641  1BB5  0020               	movlb	0	; select bank0
 12642  1BB6  00AC               	movwf	setLoad_Exceptions@command
 12643                           
 12644                           ;OverLoad_B1.c: 268: Load->ERROR=command;
 12645  1BB7  086E               	movf	_Load,w
 12646  1BB8  0086               	movwf	6
 12647  1BB9  3002               	movlw	2	; select bank4/5
 12648  1BBA  0087               	movwf	7
 12649  1BBB  082C               	movf	setLoad_Exceptions@command,w
 12650  1BBC  1281               	bcf	1,5
 12651  1BBD  1D03               	skipz
 12652  1BBE  1681               	bsf	1,5
 12653                           
 12654                           ;OverLoad_B1.c: 269: Load->Safe=(~command) & 0x01;
 12655  1BBF  092C               	comf	setLoad_Exceptions@command,w
 12656  1BC0  3901               	andlw	1
 12657  1BC1  00AB               	movwf	??_setLoad_Exceptions
 12658  1BC2  086E               	movf	_Load,w
 12659  1BC3  0086               	movwf	6
 12660  1BC4  3002               	movlw	2	; select bank4/5
 12661  1BC5  0087               	movwf	7
 12662  1BC6  0DAB               	rlf	??_setLoad_Exceptions,f
 12663  1BC7  0DAB               	rlf	??_setLoad_Exceptions,f
 12664  1BC8  0DAB               	rlf	??_setLoad_Exceptions,f
 12665  1BC9  0801               	movf	1,w
 12666  1BCA  062B               	xorwf	??_setLoad_Exceptions,w
 12667  1BCB  39F7               	andlw	-9
 12668  1BCC  062B               	xorwf	??_setLoad_Exceptions,w
 12669  1BCD  0081               	movwf	1
 12670                           
 12671                           ;OverLoad_B1.c: 270: Load->ErrorStatus=command;
 12672  1BCE  082C               	movf	setLoad_Exceptions@command,w
 12673  1BCF  00AB               	movwf	??_setLoad_Exceptions
 12674  1BD0  086E               	movf	_Load,w
 12675  1BD1  3E05               	addlw	5
 12676  1BD2  0086               	movwf	6
 12677  1BD3  3002               	movlw	2	; select bank4/5
 12678  1BD4  0087               	movwf	7
 12679  1BD5  082B               	movf	??_setLoad_Exceptions,w
 12680  1BD6  0081               	movwf	1
 12681                           
 12682                           ;OverLoad_B1.c: 272: if(command)
 12683  1BD7  082C               	movf	setLoad_Exceptions@command,w
 12684  1BD8  1903               	btfsc	3,2
 12685  1BD9  2BDE               	goto	l1939
 12686                           
 12687                           ;OverLoad_B1.c: 273: {
 12688                           ;OverLoad_B1.c: 274: DimmerLights_Exceptions(2);
 12689  1BDA  3002               	movlw	2
 12690  1BDB  319F  2730  319B   	fcall	_DimmerLights_Exceptions
 12691  1BDE                     l1939:	
 12692                           
 12693                           ;OverLoad_B1.c: 278: }
 12694                           ;OverLoad_B1.c: 279: setLED(99,command+10);
 12695  1BDE  0020               	movlb	0	; select bank0
 12696  1BDF  082C               	movf	setLoad_Exceptions@command,w
 12697  1BE0  3E0A               	addlw	10
 12698  1BE1  00AB               	movwf	??_setLoad_Exceptions
 12699  1BE2  082B               	movf	??_setLoad_Exceptions,w
 12700  1BE3  00A2               	movwf	setLED@command
 12701  1BE4  3063               	movlw	99
 12702  1BE5  3188  2002  319B   	fcall	_setLED
 12703                           
 12704                           ;OverLoad_B1.c: 281: setSw_Enable((~command) & 0x01);
 12705  1BE8  0020               	movlb	0	; select bank0
 12706  1BE9  092C               	comf	setLoad_Exceptions@command,w
 12707  1BEA  3901               	andlw	1
 12708  1BEB  31A6  2670  319B   	fcall	_setSw_Enable
 12709                           
 12710                           ;OverLoad_B1.c: 283: setRF_Enable(1,(~command) & 0x01);
 12711  1BEE  0020               	movlb	0	; select bank0
 12712  1BEF  092C               	comf	setLoad_Exceptions@command,w
 12713  1BF0  3901               	andlw	1
 12714  1BF1  00AB               	movwf	??_setLoad_Exceptions
 12715  1BF2  082B               	movf	??_setLoad_Exceptions,w
 12716  1BF3  00A2               	movwf	setRF_Enable@command
 12717  1BF4  3001               	movlw	1
 12718  1BF5  3198  2067         	fcall	_setRF_Enable
 12719  1BF7  0008               	return
 12720  1BF8                     __end_of_setLoad_Exceptions:	
 12721                           
 12722                           	psect	text61
 12723  2670                     __ptext61:	
 12724 ;; *************** function _setSw_Enable *****************
 12725 ;; Defined at:
 12726 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  command         1    wreg     unsigned char 
 12729 ;; Auto vars:     Size  Location     Type
 12730 ;;  command         1    2[BANK0 ] unsigned char 
 12731 ;; Return value:  Size  Location     Type
 12732 ;;		None               void
 12733 ;; Registers used:
 12734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12735 ;; Tracked objects:
 12736 ;;		On entry : 0/0
 12737 ;;		On exit  : 0/0
 12738 ;;		Unchanged: 0/0
 12739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;Total ram usage:        1 bytes
 12745 ;; Hardware stack levels used:    1
 12746 ;; Hardware stack levels required when called:    5
 12747 ;; This function calls:
 12748 ;;		_SwPointSelect
 12749 ;; This function is called by:
 12750 ;;		_MainT
 12751 ;;		_setLoad_Exceptions
 12752 ;;		_setOverTemp_Exceptions
 12753 ;;		_setPowerFault_Exceptions
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           
 12758                           ;psect for function _setSw_Enable
 12759  2670                     _setSw_Enable:	
 12760                           
 12761                           ;incstack = 0
 12762                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12763                           ;setSw_Enable@command stored from wreg
 12764  2670  0020               	movlb	0	; select bank0
 12765  2671  00A2               	movwf	setSw_Enable@command
 12766                           
 12767                           ;Switch_B1.c: 90: SwPointSelect(1);
 12768  2672  3001               	movlw	1
 12769  2673  31A4  24FA  31A6   	fcall	_SwPointSelect
 12770                           
 12771                           ;Switch_B1.c: 91: Sw->Enable=command;
 12772  2676  0020               	movlb	0	; select bank0
 12773  2677  086D               	movf	_Sw,w
 12774  2678  0086               	movwf	6
 12775  2679  3001               	movlw	1	; select bank2/3
 12776  267A  0087               	movwf	7
 12777  267B  0822               	movf	setSw_Enable@command,w
 12778  267C  1001               	bcf	1,0
 12779  267D  1D03               	skipz
 12780  267E  1401               	bsf	1,0
 12781                           
 12782                           ;Switch_B1.c: 95: SwPointSelect(2);
 12783  267F  3002               	movlw	2
 12784  2680  31A4  24FA         	fcall	_SwPointSelect
 12785                           
 12786                           ;Switch_B1.c: 96: Sw->Enable=command;
 12787  2682  0020               	movlb	0	; select bank0
 12788  2683  086D               	movf	_Sw,w
 12789  2684  0086               	movwf	6
 12790  2685  3001               	movlw	1	; select bank2/3
 12791  2686  0087               	movwf	7
 12792  2687  0822               	movf	setSw_Enable@command,w
 12793  2688  1001               	bcf	1,0
 12794  2689  1D03               	skipz
 12795  268A  1401               	bsf	1,0
 12796  268B  0008               	return
 12797  268C                     __end_of_setSw_Enable:	
 12798                           
 12799                           	psect	text62
 12800  1867                     __ptext62:	
 12801 ;; *************** function _setRF_Enable *****************
 12802 ;; Defined at:
 12803 ;;		line 185 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  rf              1    wreg     unsigned char 
 12806 ;;  command         1    2[BANK0 ] unsigned char 
 12807 ;; Auto vars:     Size  Location     Type
 12808 ;;  rf              1    3[BANK0 ] unsigned char 
 12809 ;; Return value:  Size  Location     Type
 12810 ;;		None               void
 12811 ;; Registers used:
 12812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12818 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;Total ram usage:        2 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    5
 12825 ;; This function calls:
 12826 ;;		_RfPointSelect
 12827 ;;		_setINT_GO
 12828 ;; This function is called by:
 12829 ;;		_MainT
 12830 ;;		_setLoad_Exceptions
 12831 ;;		_setOverTemp_Exceptions
 12832 ;;		_setPowerFault_Exceptions
 12833 ;; This function uses a non-reentrant model
 12834 ;;
 12835                           
 12836                           
 12837                           ;psect for function _setRF_Enable
 12838  1867                     _setRF_Enable:	
 12839                           
 12840                           ;incstack = 0
 12841                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12842                           ;setRF_Enable@rf stored from wreg
 12843  1867  0020               	movlb	0	; select bank0
 12844  1868  00A3               	movwf	setRF_Enable@rf
 12845                           
 12846                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
 12847  1869  0823               	movf	setRF_Enable@rf,w
 12848  186A  31A3  235E  3198   	fcall	_RfPointSelect
 12849                           
 12850                           ;RF_Control_B1.c: 188: RF->Enable=command;
 12851  186D  087C               	movf	_RF,w
 12852  186E  0086               	movwf	6
 12853  186F  0187               	clrf	7
 12854  1870  0020               	movlb	0	; select bank0
 12855  1871  0822               	movf	setRF_Enable@command,w
 12856  1872  1001               	bcf	1,0
 12857  1873  1D03               	skipz
 12858  1874  1401               	bsf	1,0
 12859                           
 12860                           ;RF_Control_B1.c: 189: RF->Learn=0;
 12861  1875  087C               	movf	_RF,w
 12862  1876  0086               	movwf	6
 12863  1877  0187               	clrf	7
 12864  1878  1301               	bcf	1,6
 12865                           
 12866                           ;RF_Control_B1.c: 190: RF->TransceiveGO=0;
 12867  1879  087C               	movf	_RF,w
 12868  187A  0086               	movwf	6
 12869  187B  0187               	clrf	7
 12870  187C  1101               	bcf	1,2
 12871                           
 12872                           ;RF_Control_B1.c: 191: RF->RxStatus=0;
 12873  187D  087C               	movf	_RF,w
 12874  187E  0086               	movwf	6
 12875  187F  0187               	clrf	7
 12876  1880  1181               	bcf	1,3
 12877                           
 12878                           ;RF_Control_B1.c: 192: RF->ReceiveGO=0;
 12879  1881  087C               	movf	_RF,w
 12880  1882  0086               	movwf	6
 12881  1883  0187               	clrf	7
 12882  1884  1081               	bcf	1,1
 12883                           
 12884                           ;RF_Control_B1.c: 193: RF->DebounceTime=0;
 12885  1885  0A7C               	incf	_RF,w
 12886  1886  0086               	movwf	6
 12887  1887  0187               	clrf	7
 12888  1888  0181               	clrf	1
 12889                           
 12890                           ;RF_Control_B1.c: 194: RF->Debounce=0;
 12891  1889  087C               	movf	_RF,w
 12892  188A  0086               	movwf	6
 12893  188B  0187               	clrf	7
 12894  188C  1281               	bcf	1,5
 12895                           
 12896                           ;RF_Control_B1.c: 195: setINT_GO(0);
 12897  188D  3000               	movlw	0
 12898  188E  31A3  2335         	fcall	_setINT_GO
 12899  1890  0008               	return
 12900  1891                     __end_of_setRF_Enable:	
 12901                           
 12902                           	psect	text63
 12903  2335                     __ptext63:	
 12904 ;; *************** function _setINT_GO *****************
 12905 ;; Defined at:
 12906 ;;		line 297 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;  command         1    wreg     unsigned char 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  command         1    0[BANK0 ] unsigned char 
 12911 ;; Return value:  Size  Location     Type
 12912 ;;		None               void
 12913 ;; Registers used:
 12914 ;;		wreg
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        1 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    4
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_setRF_Main
 12931 ;;		_setRF_Enable
 12932 ;;		_RF_RxDisable
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           
 12937                           ;psect for function _setINT_GO
 12938  2335                     _setINT_GO:	
 12939                           
 12940                           ;incstack = 0
 12941                           ; Regs used in _setINT_GO: [wreg]
 12942                           ;setINT_GO@command stored from wreg
 12943  2335  0020               	movlb	0	; select bank0
 12944  2336  00A0               	movwf	setINT_GO@command
 12945                           
 12946                           ;MCU_B1.c: 299: INTF=0;
 12947  2337  108B               	bcf	11,1	;volatile
 12948                           
 12949                           ;MCU_B1.c: 300: INTE=command;
 12950  2338  1C20               	btfss	setINT_GO@command,0
 12951  2339  2B3C               	goto	u8490
 12952  233A  160B               	bsf	11,4	;volatile
 12953  233B  0008               	return
 12954  233C                     u8490:	
 12955  233C  120B               	bcf	11,4	;volatile
 12956  233D  0008               	return
 12957  233E                     __end_of_setINT_GO:	
 12958                           
 12959                           	psect	text64
 12960  1F30                     __ptext64:	
 12961 ;; *************** function _DimmerLights_Exceptions *****************
 12962 ;; Defined at:
 12963 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12964 ;; Parameters:    Size  Location     Type
 12965 ;;  status          1    wreg     unsigned char 
 12966 ;; Auto vars:     Size  Location     Type
 12967 ;;  status          1   10[BANK0 ] unsigned char 
 12968 ;; Return value:  Size  Location     Type
 12969 ;;		None               void
 12970 ;; Registers used:
 12971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12972 ;; Tracked objects:
 12973 ;;		On entry : 0/0
 12974 ;;		On exit  : 0/0
 12975 ;;		Unchanged: 0/0
 12976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;Total ram usage:        1 bytes
 12982 ;; Hardware stack levels used:    1
 12983 ;; Hardware stack levels required when called:    7
 12984 ;; This function calls:
 12985 ;;		_getDimmerLights_StatusFlag
 12986 ;;		_setBuz
 12987 ;;		_setDimmerLights_ERROR
 12988 ;;		_setDimmerLights_TriggerERROR
 12989 ;; This function is called by:
 12990 ;;		_setLoad_Exceptions
 12991 ;;		_setOverTemp_Exceptions
 12992 ;;		_setPowerFault_Exceptions
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function _DimmerLights_Exceptions
 12998  1F30                     _DimmerLights_Exceptions:	
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13002                           ;DimmerLights_Exceptions@status stored from wreg
 13003  1F30  0020               	movlb	0	; select bank0
 13004  1F31  00AA               	movwf	DimmerLights_Exceptions@status
 13005                           
 13006                           ;Dimmer_B1.c: 248: if(status == 1)
 13007  1F32  082A               	movf	DimmerLights_Exceptions@status,w
 13008  1F33  3A01               	xorlw	1
 13009  1F34  1D03               	skipz
 13010  1F35  2F46               	goto	l8956
 13011                           
 13012                           ;Dimmer_B1.c: 249: {
 13013                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 13014  1F36  31A5  2577  319F   	fcall	_getDimmerLights_StatusFlag
 13015  1F39  3A00               	xorlw	0
 13016  1F3A  1903               	skipnz
 13017  1F3B  2F5E               	goto	l8962
 13018                           
 13019                           ;Dimmer_B1.c: 251: {
 13020                           ;Dimmer_B1.c: 252: setBuz(10,300);
 13021  1F3C  302C               	movlw	44
 13022  1F3D  0020               	movlb	0	; select bank0
 13023  1F3E  00A6               	movwf	setBuz@time
 13024  1F3F  3001               	movlw	1
 13025  1F40  00A7               	movwf	setBuz@time+1
 13026  1F41  300A               	movlw	10
 13027  1F42  3192  220A  319F   	fcall	_setBuz
 13028  1F45  2F5E               	goto	l8962
 13029  1F46                     l8956:	
 13030                           ;Dimmer_B1.c: 264: }
 13031                           
 13032                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(2);
 13033                           
 13034                           ;Dimmer_B1.c: 253: }
 13035                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 13036                           
 13037                           
 13038                           ;Dimmer_B1.c: 265: else if(status == 2)
 13039  1F46  0020               	movlb	0	; select bank0
 13040  1F47  082A               	movf	DimmerLights_Exceptions@status,w
 13041  1F48  3A02               	xorlw	2
 13042  1F49  1D03               	skipz
 13043  1F4A  2F59               	goto	l8960
 13044                           
 13045                           ;Dimmer_B1.c: 266: {
 13046                           ;Dimmer_B1.c: 267: setBuz(5,300);
 13047  1F4B  302C               	movlw	44
 13048  1F4C  00A6               	movwf	setBuz@time
 13049  1F4D  3001               	movlw	1
 13050  1F4E  00A7               	movwf	setBuz@time+1
 13051  1F4F  3005               	movlw	5
 13052  1F50  3192  220A  319F   	fcall	_setBuz
 13053                           
 13054                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 13055  1F53  0021               	movlb	1	; select bank1
 13056  1F54  0A39               	incf	_Dimmer^(0+128),w
 13057  1F55  0086               	movwf	6
 13058  1F56  0187               	clrf	7
 13059  1F57  0801               	movf	1,w
 13060  1F58  2F63               	goto	L12
 13061  1F59                     l8960:	
 13062                           ;Dimmer_B1.c: 269: }
 13063                           
 13064                           
 13065                           ;Dimmer_B1.c: 270: else if(status == 3)
 13066  1F59  0020               	movlb	0	; select bank0
 13067  1F5A  082A               	movf	DimmerLights_Exceptions@status,w
 13068  1F5B  3A03               	xorlw	3
 13069  1F5C  1D03               	skipz
 13070  1F5D  2F66               	goto	l922
 13071  1F5E                     l8962:	
 13072                           
 13073                           ;Dimmer_B1.c: 271: {
 13074                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 13075  1F5E  3001               	movlw	1
 13076  1F5F  319D  255D  319F   	fcall	_setDimmerLights_ERROR
 13077                           
 13078                           ;Dimmer_B1.c: 276: setDimmerLights_ERROR(2);
 13079  1F62  3002               	movlw	2
 13080  1F63                     L12:	
 13081  1F63  319D  255D  319F   	fcall	_setDimmerLights_ERROR
 13082  1F66                     l922:	
 13083                           
 13084                           ;Dimmer_B1.c: 281: }
 13085                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 13086  1F66  0020               	movlb	0	; select bank0
 13087  1F67  01A2               	clrf	setDimmerLights_TriggerERROR@command
 13088  1F68  3001               	movlw	1
 13089  1F69  3198  2091  319F   	fcall	_setDimmerLights_TriggerERROR
 13090                           
 13091                           ;Dimmer_B1.c: 287: setDimmerLights_TriggerERROR(2,0);
 13092  1F6C  0020               	movlb	0	; select bank0
 13093  1F6D  01A2               	clrf	setDimmerLights_TriggerERROR@command
 13094  1F6E  3002               	movlw	2
 13095  1F6F  3198  2091  319F   	fcall	_setDimmerLights_TriggerERROR
 13096                           
 13097                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 13098  1F72  0021               	movlb	1	; select bank1
 13099  1F73  086A               	movf	_TMain^(0+128),w
 13100  1F74  3E03               	addlw	3
 13101  1F75  0086               	movwf	6
 13102  1F76  3001               	movlw	1	; select bank2/3
 13103  1F77  0087               	movwf	7
 13104  1F78  1801               	btfsc	1,0
 13105  1F79  0008               	return
 13106                           
 13107                           ;Dimmer_B1.c: 294: {
 13108                           ;Dimmer_B1.c: 295: TMain->i=0;
 13109  1F7A  086A               	movf	_TMain^(0+128),w
 13110  1F7B  3E0E               	addlw	14
 13111  1F7C  0086               	movwf	6
 13112  1F7D  3001               	movlw	1	; select bank2/3
 13113  1F7E  0087               	movwf	7
 13114  1F7F  1001               	bcf	1,0
 13115                           
 13116                           ;Dimmer_B1.c: 296: TMain->j=0;
 13117  1F80  086A               	movf	_TMain^(0+128),w
 13118  1F81  3E0E               	addlw	14
 13119  1F82  0086               	movwf	6
 13120  1F83  3001               	movlw	1	; select bank2/3
 13121  1F84  0087               	movwf	7
 13122  1F85  1081               	bcf	1,1
 13123                           
 13124                           ;Dimmer_B1.c: 297: TMain->k=1;
 13125  1F86  086A               	movf	_TMain^(0+128),w
 13126  1F87  3E0E               	addlw	14
 13127  1F88  0086               	movwf	6
 13128  1F89  3001               	movlw	1	; select bank2/3
 13129  1F8A  0087               	movwf	7
 13130  1F8B  1501               	bsf	1,2
 13131                           
 13132                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 13133  1F8C  086A               	movf	_TMain^(0+128),w
 13134  1F8D  3E08               	addlw	8
 13135  1F8E  0086               	movwf	6
 13136  1F8F  3001               	movlw	1	; select bank2/3
 13137  1F90  0087               	movwf	7
 13138  1F91  3000               	movlw	0
 13139  1F92  3FC0               	movwi [0]fsr1
 13140  1F93  3FC1               	movwi [1]fsr1
 13141  1F94  0008               	return
 13142  1F95                     __end_of_DimmerLights_Exceptions:	
 13143                           
 13144                           	psect	text65
 13145  1891                     __ptext65:	
 13146 ;; *************** function _setDimmerLights_TriggerERROR *****************
 13147 ;; Defined at:
 13148 ;;		line 320 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;  lights          1    wreg     unsigned char 
 13151 ;;  command         1    2[BANK0 ] unsigned char 
 13152 ;; Auto vars:     Size  Location     Type
 13153 ;;  lights          1    3[BANK0 ] unsigned char 
 13154 ;; Return value:  Size  Location     Type
 13155 ;;		None               void
 13156 ;; Registers used:
 13157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13158 ;; Tracked objects:
 13159 ;;		On entry : 0/0
 13160 ;;		On exit  : 0/0
 13161 ;;		Unchanged: 0/0
 13162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;Total ram usage:        2 bytes
 13168 ;; Hardware stack levels used:    1
 13169 ;; Hardware stack levels required when called:    5
 13170 ;; This function calls:
 13171 ;;		_DimmerLightsPointSelect
 13172 ;; This function is called by:
 13173 ;;		_DimmerLights_Exceptions
 13174 ;; This function uses a non-reentrant model
 13175 ;;
 13176                           
 13177                           
 13178                           ;psect for function _setDimmerLights_TriggerERROR
 13179  1891                     _setDimmerLights_TriggerERROR:	
 13180                           
 13181                           ;incstack = 0
 13182                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13183                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 13184  1891  0020               	movlb	0	; select bank0
 13185  1892  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 13186                           
 13187                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 13188  1893  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 13189  1894  31A4  24E7         	fcall	_DimmerLightsPointSelect
 13190                           
 13191                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 13192  1896  0020               	movlb	0	; select bank0
 13193  1897  086C               	movf	_DimmerLights,w
 13194  1898  3E09               	addlw	9
 13195  1899  0086               	movwf	6
 13196  189A  3001               	movlw	1	; select bank2/3
 13197  189B  0087               	movwf	7
 13198  189C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13199  189D  1081               	bcf	1,1
 13200  189E  1D03               	skipz
 13201  189F  1481               	bsf	1,1
 13202                           
 13203                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 13204  18A0  086C               	movf	_DimmerLights,w
 13205  18A1  3E09               	addlw	9
 13206  18A2  0086               	movwf	6
 13207  18A3  3001               	movlw	1	; select bank2/3
 13208  18A4  0087               	movwf	7
 13209  18A5  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13210  18A6  1001               	bcf	1,0
 13211  18A7  1D03               	skipz
 13212  18A8  1401               	bsf	1,0
 13213                           
 13214                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 13215  18A9  086C               	movf	_DimmerLights,w
 13216  18AA  3E09               	addlw	9
 13217  18AB  0086               	movwf	6
 13218  18AC  3001               	movlw	1	; select bank2/3
 13219  18AD  0087               	movwf	7
 13220  18AE  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13221  18AF  1181               	bcf	1,3
 13222  18B0  1D03               	skipz
 13223  18B1  1581               	bsf	1,3
 13224                           
 13225                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13226  18B2  086C               	movf	_DimmerLights,w
 13227  18B3  3E09               	addlw	9
 13228  18B4  0086               	movwf	6
 13229  18B5  3001               	movlw	1	; select bank2/3
 13230  18B6  0087               	movwf	7
 13231  18B7  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13232  18B8  1101               	bcf	1,2
 13233  18B9  1D03               	skipz
 13234  18BA  1501               	bsf	1,2
 13235  18BB  0008               	return
 13236  18BC                     __end_of_setDimmerLights_TriggerERROR:	
 13237                           
 13238                           	psect	text66
 13239  1D5D                     __ptext66:	
 13240 ;; *************** function _setDimmerLights_ERROR *****************
 13241 ;; Defined at:
 13242 ;;		line 302 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  lights          1    wreg     unsigned char 
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;  lights          1    5[BANK0 ] unsigned char 
 13247 ;; Return value:  Size  Location     Type
 13248 ;;		None               void
 13249 ;; Registers used:
 13250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;Total ram usage:        2 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    6
 13263 ;; This function calls:
 13264 ;;		_DimmerLightsPointSelect
 13265 ;;		_setLED
 13266 ;;		_setLoad_StatusOff
 13267 ;;		_setRFSW_Status
 13268 ;;		_setSw_Status
 13269 ;; This function is called by:
 13270 ;;		_DimmerLights_Exceptions
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _setDimmerLights_ERROR
 13276  1D5D                     _setDimmerLights_ERROR:	
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13280                           ;setDimmerLights_ERROR@lights stored from wreg
 13281  1D5D  0020               	movlb	0	; select bank0
 13282  1D5E  00A5               	movwf	setDimmerLights_ERROR@lights
 13283                           
 13284                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13285  1D5F  0825               	movf	setDimmerLights_ERROR@lights,w
 13286  1D60  31A4  24E7  319D   	fcall	_DimmerLightsPointSelect
 13287                           
 13288                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13289  1D63  0020               	movlb	0	; select bank0
 13290  1D64  086C               	movf	_DimmerLights,w
 13291  1D65  0086               	movwf	6
 13292  1D66  3001               	movlw	1	; select bank2/3
 13293  1D67  0087               	movwf	7
 13294  1D68  1E81               	btfss	1,5
 13295  1D69  0008               	return
 13296                           
 13297                           ;Dimmer_B1.c: 306: {
 13298                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13299  1D6A  086C               	movf	_DimmerLights,w
 13300  1D6B  0086               	movwf	6
 13301  1D6C  3001               	movlw	1	; select bank2/3
 13302  1D6D  0087               	movwf	7
 13303  1D6E  1081               	bcf	1,1
 13304                           
 13305                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13306  1D6F  086C               	movf	_DimmerLights,w
 13307  1D70  0086               	movwf	6
 13308  1D71  3001               	movlw	1	; select bank2/3
 13309  1D72  0087               	movwf	7
 13310  1D73  1181               	bcf	1,3
 13311                           
 13312                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13313  1D74  086C               	movf	_DimmerLights,w
 13314  1D75  0086               	movwf	6
 13315  1D76  3001               	movlw	1	; select bank2/3
 13316  1D77  0087               	movwf	7
 13317  1D78  1201               	bcf	1,4
 13318                           
 13319                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13320  1D79  086C               	movf	_DimmerLights,w
 13321  1D7A  0086               	movwf	6
 13322  1D7B  3001               	movlw	1	; select bank2/3
 13323  1D7C  0087               	movwf	7
 13324  1D7D  1301               	bcf	1,6
 13325                           
 13326                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13327  1D7E  3003               	movlw	3
 13328  1D7F  00A4               	movwf	??_setDimmerLights_ERROR
 13329  1D80  086C               	movf	_DimmerLights,w
 13330  1D81  3E02               	addlw	2
 13331  1D82  0086               	movwf	6
 13332  1D83  3001               	movlw	1	; select bank2/3
 13333  1D84  0087               	movwf	7
 13334  1D85  0824               	movf	??_setDimmerLights_ERROR,w
 13335  1D86  0081               	movwf	1
 13336                           
 13337                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13338  1D87  086C               	movf	_DimmerLights,w
 13339  1D88  3E06               	addlw	6
 13340  1D89  0086               	movwf	6
 13341  1D8A  3001               	movlw	1	; select bank2/3
 13342  1D8B  0087               	movwf	7
 13343  1D8C  0801               	movf	1,w
 13344  1D8D  00A4               	movwf	??_setDimmerLights_ERROR
 13345  1D8E  086C               	movf	_DimmerLights,w
 13346  1D8F  3E04               	addlw	4
 13347  1D90  0086               	movwf	6
 13348  1D91  3001               	movlw	1	; select bank2/3
 13349  1D92  0087               	movwf	7
 13350  1D93  0824               	movf	??_setDimmerLights_ERROR,w
 13351  1D94  0081               	movwf	1
 13352                           
 13353                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13354  1D95  0021               	movlb	1	; select bank1
 13355  1D96  0839               	movf	_Dimmer^(0+128),w
 13356  1D97  0086               	movwf	6
 13357  1D98  0187               	clrf	7
 13358  1D99  1401               	bsf	1,0
 13359                           
 13360                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13361  1D9A  0020               	movlb	0	; select bank0
 13362  1D9B  01A0               	clrf	setLoad_StatusOff@command
 13363  1D9C  0AA0               	incf	setLoad_StatusOff@command,f
 13364  1D9D  0825               	movf	setDimmerLights_ERROR@lights,w
 13365  1D9E  3199  2178  319D   	fcall	_setLoad_StatusOff
 13366                           
 13367                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13368  1DA1  0020               	movlb	0	; select bank0
 13369  1DA2  01A2               	clrf	setLED@command
 13370  1DA3  0AA2               	incf	setLED@command,f
 13371  1DA4  0825               	movf	setDimmerLights_ERROR@lights,w
 13372  1DA5  3188  2002  319D   	fcall	_setLED
 13373                           
 13374                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13375  1DA8  0020               	movlb	0	; select bank0
 13376  1DA9  01A2               	clrf	setSw_Status@command
 13377  1DAA  0825               	movf	setDimmerLights_ERROR@lights,w
 13378  1DAB  31A4  2447  319D   	fcall	_setSw_Status
 13379                           
 13380                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13381  1DAE  0020               	movlb	0	; select bank0
 13382  1DAF  01A2               	clrf	setRFSW_Status@command
 13383  1DB0  0825               	movf	setDimmerLights_ERROR@lights,w
 13384  1DB1  31A4  2438         	fcall	_setRFSW_Status
 13385  1DB3  0008               	return
 13386  1DB4                     __end_of_setDimmerLights_ERROR:	
 13387                           
 13388                           	psect	text67
 13389  2486                     __ptext67:	
 13390 ;; *************** function _setDimmerLights_Clear *****************
 13391 ;; Defined at:
 13392 ;;		line 456 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;  lights          1    wreg     unsigned char 
 13395 ;;  command         1    2[BANK0 ] unsigned char 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  lights          1    3[BANK0 ] unsigned char 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;		None               void
 13400 ;; Registers used:
 13401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        2 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    5
 13414 ;; This function calls:
 13415 ;;		_DimmerLightsPointSelect
 13416 ;; This function is called by:
 13417 ;;		_Load_Main
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           
 13422                           ;psect for function _setDimmerLights_Clear
 13423  2486                     _setDimmerLights_Clear:	
 13424                           
 13425                           ;incstack = 0
 13426                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13427                           ;setDimmerLights_Clear@lights stored from wreg
 13428  2486  0020               	movlb	0	; select bank0
 13429  2487  00A3               	movwf	setDimmerLights_Clear@lights
 13430                           
 13431                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13432  2488  0823               	movf	setDimmerLights_Clear@lights,w
 13433  2489  31A4  24E7         	fcall	_DimmerLightsPointSelect
 13434                           
 13435                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13436  248B  0020               	movlb	0	; select bank0
 13437  248C  086C               	movf	_DimmerLights,w
 13438  248D  3E0C               	addlw	12
 13439  248E  0086               	movwf	6
 13440  248F  3001               	movlw	1	; select bank2/3
 13441  2490  0087               	movwf	7
 13442  2491  0822               	movf	setDimmerLights_Clear@command,w
 13443  2492  1001               	bcf	1,0
 13444  2493  1D03               	skipz
 13445  2494  1401               	bsf	1,0
 13446  2495  0008               	return
 13447  2496                     __end_of_setDimmerLights_Clear:	
 13448                           
 13449                           	psect	text68
 13450  22F7                     __ptext68:	
 13451 ;; *************** function _getTemp_Safe *****************
 13452 ;; Defined at:
 13453 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;		None
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;		None
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  1    wreg      unsigned char 
 13460 ;; Registers used:
 13461 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;Total ram usage:        0 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    4
 13474 ;; This function calls:
 13475 ;;		Nothing
 13476 ;; This function is called by:
 13477 ;;		_Load_Main
 13478 ;;		_setPowerFault_Main
 13479 ;; This function uses a non-reentrant model
 13480 ;;
 13481                           
 13482                           
 13483                           ;psect for function _getTemp_Safe
 13484  22F7                     _getTemp_Safe:	
 13485                           
 13486                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13487                           
 13488                           ;incstack = 0
 13489                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13490  22F7  087D               	movf	_Temp,w
 13491  22F8  0086               	movwf	6
 13492  22F9  3001               	movlw	1	; select bank2/3
 13493  22FA  0087               	movwf	7
 13494  22FB  0E01               	swapf	1,w
 13495  22FC  3901               	andlw	1
 13496  22FD  0008               	return
 13497  22FE                     __end_of_getTemp_Safe:	
 13498                           
 13499                           	psect	text69
 13500  231C                     __ptext69:	
 13501 ;; *************** function _getPF_Safe *****************
 13502 ;; Defined at:
 13503 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;		None
 13506 ;; Auto vars:     Size  Location     Type
 13507 ;;		None
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  1    wreg      unsigned char 
 13510 ;; Registers used:
 13511 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;Total ram usage:        0 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    4
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_Load_Main
 13528 ;;		_setTemp_Main
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           
 13533                           ;psect for function _getPF_Safe
 13534  231C                     _getPF_Safe:	
 13535                           
 13536                           ;PowerFault_B1.c: 42: return PF->Safe;
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13540  231C  087B               	movf	_PF,w
 13541  231D  0086               	movwf	6
 13542  231E  3001               	movlw	1	; select bank2/3
 13543  231F  0087               	movwf	7
 13544  2320  0C01               	rrf	1,w
 13545  2321  0C89               	rrf	9,f
 13546  2322  3901               	andlw	1
 13547  2323  0008               	return
 13548  2324                     __end_of_getPF_Safe:	
 13549                           
 13550                           	psect	text70
 13551  1A41                     __ptext70:	
 13552 ;; *************** function ___lwdiv *****************
 13553 ;; Defined at:
 13554 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;  divisor         2    0[BANK0 ] unsigned int 
 13557 ;;  dividend        2    2[BANK0 ] unsigned int 
 13558 ;; Auto vars:     Size  Location     Type
 13559 ;;  quotient        2    5[BANK0 ] unsigned int 
 13560 ;;  counter         1    7[BANK0 ] unsigned char 
 13561 ;; Return value:  Size  Location     Type
 13562 ;;                  2    0[BANK0 ] unsigned int 
 13563 ;; Registers used:
 13564 ;;		wreg, status,2, status,0
 13565 ;; Tracked objects:
 13566 ;;		On entry : 0/0
 13567 ;;		On exit  : 0/0
 13568 ;;		Unchanged: 0/0
 13569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13570 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;Total ram usage:        8 bytes
 13575 ;; Hardware stack levels used:    1
 13576 ;; Hardware stack levels required when called:    4
 13577 ;; This function calls:
 13578 ;;		Nothing
 13579 ;; This function is called by:
 13580 ;;		_Load_Main
 13581 ;; This function uses a non-reentrant model
 13582 ;;
 13583                           
 13584                           
 13585                           ;psect for function ___lwdiv
 13586  1A41                     ___lwdiv:	
 13587                           
 13588                           ;incstack = 0
 13589                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13590  1A41  0020               	movlb	0	; select bank0
 13591  1A42  01A5               	clrf	___lwdiv@quotient
 13592  1A43  01A6               	clrf	___lwdiv@quotient+1
 13593  1A44  0821               	movf	___lwdiv@divisor+1,w
 13594  1A45  0420               	iorwf	___lwdiv@divisor,w
 13595  1A46  1903               	skipnz
 13596  1A47  2A71               	goto	l7940
 13597  1A48  01A7               	clrf	___lwdiv@counter
 13598  1A49  0AA7               	incf	___lwdiv@counter,f
 13599  1A4A                     l7928:	
 13600  1A4A  1BA1               	btfsc	___lwdiv@divisor+1,7
 13601  1A4B  2A56               	goto	l7930
 13602  1A4C  3001               	movlw	1
 13603  1A4D                     u6955:	
 13604  1A4D  35A0               	lslf	___lwdiv@divisor,f
 13605  1A4E  0DA1               	rlf	___lwdiv@divisor+1,f
 13606  1A4F  0B89               	decfsz	9,f
 13607  1A50  2A4D               	goto	u6955
 13608  1A51  3001               	movlw	1
 13609  1A52  00A4               	movwf	??___lwdiv
 13610  1A53  0824               	movf	??___lwdiv,w
 13611  1A54  07A7               	addwf	___lwdiv@counter,f
 13612  1A55  2A4A               	goto	l7928
 13613  1A56                     l7930:	
 13614  1A56  3001               	movlw	1
 13615  1A57                     u6975:	
 13616  1A57  35A5               	lslf	___lwdiv@quotient,f
 13617  1A58  0DA6               	rlf	___lwdiv@quotient+1,f
 13618  1A59  0B89               	decfsz	9,f
 13619  1A5A  2A57               	goto	u6975
 13620  1A5B  0821               	movf	___lwdiv@divisor+1,w
 13621  1A5C  0223               	subwf	___lwdiv@dividend+1,w
 13622  1A5D  1D03               	skipz
 13623  1A5E  2A61               	goto	u6985
 13624  1A5F  0820               	movf	___lwdiv@divisor,w
 13625  1A60  0222               	subwf	___lwdiv@dividend,w
 13626  1A61                     u6985:	
 13627  1A61  1C03               	skipc
 13628  1A62  2A68               	goto	l7936
 13629  1A63  0820               	movf	___lwdiv@divisor,w
 13630  1A64  02A2               	subwf	___lwdiv@dividend,f
 13631  1A65  0821               	movf	___lwdiv@divisor+1,w
 13632  1A66  3BA3               	subwfb	___lwdiv@dividend+1,f
 13633  1A67  1425               	bsf	___lwdiv@quotient,0
 13634  1A68                     l7936:	
 13635  1A68  3001               	movlw	1
 13636  1A69                     u6995:	
 13637  1A69  36A1               	lsrf	___lwdiv@divisor+1,f
 13638  1A6A  0CA0               	rrf	___lwdiv@divisor,f
 13639  1A6B  0B89               	decfsz	9,f
 13640  1A6C  2A69               	goto	u6995
 13641  1A6D  3001               	movlw	1
 13642  1A6E  02A7               	subwf	___lwdiv@counter,f
 13643  1A6F  1D03               	btfss	3,2
 13644  1A70  2A56               	goto	l7930
 13645  1A71                     l7940:	
 13646  1A71  0826               	movf	___lwdiv@quotient+1,w
 13647  1A72  01A1               	clrf	?___lwdiv+1
 13648  1A73  07A1               	addwf	?___lwdiv+1,f
 13649  1A74  0825               	movf	___lwdiv@quotient,w
 13650  1A75  01A0               	clrf	?___lwdiv
 13651  1A76  07A0               	addwf	?___lwdiv,f
 13652  1A77  0008               	return
 13653  1A78                     __end_of___lwdiv:	
 13654                           
 13655                           	psect	text71
 13656  23E8                     __ptext71:	
 13657 ;; *************** function _Load_Initialization *****************
 13658 ;; Defined at:
 13659 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;		None
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;		None
 13664 ;; Return value:  Size  Location     Type
 13665 ;;		None               void
 13666 ;; Registers used:
 13667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;Total ram usage:        1 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    5
 13680 ;; This function calls:
 13681 ;;		_setLoad_AH_AL_Restore
 13682 ;; This function is called by:
 13683 ;;		_main
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function _Load_Initialization
 13689  23E8                     _Load_Initialization:	
 13690                           
 13691                           ;OverLoad_B1.c: 10: Load=&Load1;
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13695  23E8  30A0               	movlw	_Load1& (0+255)
 13696  23E9  0020               	movlb	0	; select bank0
 13697  23EA  00A2               	movwf	??_Load_Initialization
 13698  23EB  0822               	movf	??_Load_Initialization,w
 13699  23EC  00EE               	movwf	_Load
 13700                           
 13701                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13702  23ED  086E               	movf	_Load,w
 13703  23EE  0086               	movwf	6
 13704  23EF  3002               	movlw	2	; select bank4/5
 13705  23F0  0087               	movwf	7
 13706  23F1  1581               	bsf	1,3
 13707                           
 13708                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13709  23F2  31A7  274A         	fcall	_setLoad_AH_AL_Restore
 13710  23F4  0008               	return
 13711  23F5                     __end_of_Load_Initialization:	
 13712                           
 13713                           	psect	text72
 13714  274A                     __ptext72:	
 13715 ;; *************** function _setLoad_AH_AL_Restore *****************
 13716 ;; Defined at:
 13717 ;;		line 348 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;  i               1    1[BANK0 ] unsigned char 
 13722 ;; Return value:  Size  Location     Type
 13723 ;;		None               void
 13724 ;; Registers used:
 13725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;Total ram usage:        2 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    4
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_Load_Initialization
 13742 ;;		_Load_Main
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           
 13747                           ;psect for function _setLoad_AH_AL_Restore
 13748  274A                     _setLoad_AH_AL_Restore:	
 13749                           
 13750                           ;OverLoad_B1.c: 350: char i;
 13751                           ;OverLoad_B1.c: 351: for(i=0 ; i<5 ;i++)
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13755  274A  0020               	movlb	0	; select bank0
 13756  274B  01A1               	clrf	setLoad_AH_AL_Restore@i
 13757  274C                     L13:	
 13758  274C  3005               	movlw	5
 13759  274D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13760  274E  1803               	btfsc	3,0
 13761  274F  0008               	return
 13762                           
 13763                           ;OverLoad_B1.c: 352: {
 13764                           ;OverLoad_B1.c: 353: Load->AH[i]=0;
 13765  2750  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13766  2751  3E08               	addlw	8
 13767  2752  076E               	addwf	_Load,w
 13768  2753  00A0               	movwf	??_setLoad_AH_AL_Restore
 13769  2754  0820               	movf	??_setLoad_AH_AL_Restore,w
 13770  2755  0086               	movwf	6
 13771  2756  3002               	movlw	2	; select bank4/5
 13772  2757  0087               	movwf	7
 13773  2758  3000               	movlw	0
 13774  2759  3FC0               	movwi [0]fsr1
 13775  275A  3FC1               	movwi [1]fsr1
 13776                           
 13777                           ;OverLoad_B1.c: 354: Load->AL[i]=0xffff;
 13778  275B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13779  275C  3E1A               	addlw	26
 13780  275D  076E               	addwf	_Load,w
 13781  275E  00A0               	movwf	??_setLoad_AH_AL_Restore
 13782  275F  0820               	movf	??_setLoad_AH_AL_Restore,w
 13783  2760  0086               	movwf	6
 13784  2761  3002               	movlw	2	; select bank4/5
 13785  2762  0087               	movwf	7
 13786  2763  30FF               	movlw	255
 13787  2764  3FC0               	movwi [0]fsr1
 13788  2765  30FF               	movlw	255
 13789  2766  3FC1               	movwi [1]fsr1
 13790  2767  3001               	movlw	1
 13791  2768  00A0               	movwf	??_setLoad_AH_AL_Restore
 13792  2769  0820               	movf	??_setLoad_AH_AL_Restore,w
 13793  276A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13794  276B  2F4C               	goto	L13
 13795  276C                     __end_of_setLoad_AH_AL_Restore:	
 13796                           
 13797                           	psect	text73
 13798  23DC                     __ptext73:	
 13799 ;; *************** function _LED_Main *****************
 13800 ;; Defined at:
 13801 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;		None               void
 13808 ;; Registers used:
 13809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13810 ;; Tracked objects:
 13811 ;;		On entry : 0/0
 13812 ;;		On exit  : 0/0
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;Total ram usage:        0 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; Hardware stack levels required when called:    6
 13822 ;; This function calls:
 13823 ;;		_setLED_Main
 13824 ;; This function is called by:
 13825 ;;		_main
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           
 13830                           ;psect for function _LED_Main
 13831  23DC                     _LED_Main:	
 13832                           
 13833                           ;LED_B1.c: 54: setLED_Main(1);
 13834                           
 13835                           ;incstack = 0
 13836                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13837  23DC  3001               	movlw	1
 13838  23DD  319A  22B2  31A3   	fcall	_setLED_Main
 13839                           
 13840                           ;LED_B1.c: 57: setLED_Main(2);
 13841  23E0  3002               	movlw	2
 13842  23E1  319A  22B2  31A3   	fcall	_setLED_Main
 13843                           
 13844                           ;LED_B1.c: 63: setLED_Main(99);
 13845  23E4  3063               	movlw	99
 13846  23E5  319A  22B2         	fcall	_setLED_Main
 13847  23E7  0008               	return
 13848  23E8                     __end_of_LED_Main:	
 13849                           
 13850                           	psect	text74
 13851  1AB2                     __ptext74:	
 13852 ;; *************** function _setLED_Main *****************
 13853 ;; Defined at:
 13854 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;  led             1    wreg     unsigned char 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  led             1    4[BANK0 ] unsigned char 
 13859 ;; Return value:  Size  Location     Type
 13860 ;;		None               void
 13861 ;; Registers used:
 13862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        3 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    5
 13875 ;; This function calls:
 13876 ;;		_LedPointSelect
 13877 ;; This function is called by:
 13878 ;;		_LED_Main
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           
 13883                           ;psect for function _setLED_Main
 13884  1AB2                     _setLED_Main:	
 13885                           
 13886                           ;incstack = 0
 13887                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13888                           ;setLED_Main@led stored from wreg
 13889  1AB2  0020               	movlb	0	; select bank0
 13890  1AB3  00A4               	movwf	setLED_Main@led
 13891                           
 13892                           ;LED_B1.c: 216: LedPointSelect(led);
 13893  1AB4  0824               	movf	setLED_Main@led,w
 13894  1AB5  31A7  2728  319A   	fcall	_LedPointSelect
 13895                           
 13896                           ;LED_B1.c: 217: if(LED->GO)
 13897  1AB8  0021               	movlb	1	; select bank1
 13898  1AB9  083B               	movf	_LED^(0+128),w
 13899  1ABA  0086               	movwf	6
 13900  1ABB  0187               	clrf	7
 13901  1ABC  1C81               	btfss	1,1
 13902  1ABD  0008               	return
 13903                           
 13904                           ;LED_B1.c: 218: {
 13905                           ;LED_B1.c: 219: LED->Time++;
 13906  1ABE  0A3B               	incf	_LED^(0+128),w
 13907  1ABF  0086               	movwf	6
 13908  1AC0  0187               	clrf	7
 13909  1AC1  3001               	movlw	1
 13910  1AC2  0781               	addwf	1,f
 13911  1AC3  3141               	addfsr 1,1
 13912  1AC4  1803               	skipnc
 13913  1AC5  0A81               	incf	1,f
 13914                           
 13915                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13916  1AC6  0A3B               	incf	_LED^(0+128),w
 13917  1AC7  0086               	movwf	6
 13918  1AC8  0187               	clrf	7
 13919  1AC9  3F40               	moviw [0]fsr1
 13920  1ACA  0020               	movlb	0	; select bank0
 13921  1ACB  00A2               	movwf	??_setLED_Main
 13922  1ACC  3F41               	moviw [1]fsr1
 13923  1ACD  00A3               	movwf	??_setLED_Main+1
 13924  1ACE  3000               	movlw	0
 13925  1ACF  0223               	subwf	??_setLED_Main+1,w
 13926  1AD0  3032               	movlw	50
 13927  1AD1  1903               	skipnz
 13928  1AD2  0222               	subwf	??_setLED_Main,w
 13929  1AD3  1C03               	skipc
 13930  1AD4  0008               	return
 13931                           
 13932                           ;LED_B1.c: 221: {
 13933                           ;LED_B1.c: 222: LED->Time=0;
 13934  1AD5  0021               	movlb	1	; select bank1
 13935  1AD6  0A3B               	incf	_LED^(0+128),w
 13936  1AD7  0086               	movwf	6
 13937  1AD8  0187               	clrf	7
 13938  1AD9  3000               	movlw	0
 13939  1ADA  3FC0               	movwi [0]fsr1
 13940  1ADB  3FC1               	movwi [1]fsr1
 13941                           
 13942                           ;LED_B1.c: 224: if(led == 1)
 13943  1ADC  0020               	movlb	0	; select bank0
 13944  1ADD  0824               	movf	setLED_Main@led,w
 13945  1ADE  3A01               	xorlw	1
 13946  1ADF  1D03               	skipz
 13947  1AE0  2AE4               	goto	l7504
 13948                           
 13949                           ;LED_B1.c: 225: {
 13950                           ;LED_B1.c: 226: RA3=~RA3;
 13951  1AE1  3008               	movlw	8
 13952  1AE2  068C               	xorwf	12,f
 13953                           
 13954                           ;LED_B1.c: 227: }
 13955  1AE3  0008               	return
 13956  1AE4                     l7504:	
 13957                           
 13958                           ;LED_B1.c: 230: else if(led == 2)
 13959  1AE4  0824               	movf	setLED_Main@led,w
 13960  1AE5  3A02               	xorlw	2
 13961  1AE6  1D03               	skipz
 13962  1AE7  2AEB               	goto	l7508
 13963                           
 13964                           ;LED_B1.c: 231: {
 13965                           ;LED_B1.c: 232: RC7=~RC7;
 13966  1AE8  3080               	movlw	128
 13967  1AE9  068E               	xorwf	14,f
 13968                           
 13969                           ;LED_B1.c: 233: }
 13970  1AEA  0008               	return
 13971  1AEB                     l7508:	
 13972                           
 13973                           ;LED_B1.c: 242: else if(led == 99)
 13974  1AEB  0824               	movf	setLED_Main@led,w
 13975  1AEC  3A63               	xorlw	99
 13976  1AED  1D03               	skipz
 13977  1AEE  0008               	return
 13978                           
 13979                           ;LED_B1.c: 243: {
 13980                           ;LED_B1.c: 244: RB5=~RB5;
 13981  1AEF  3020               	movlw	32
 13982  1AF0  068D               	xorwf	13,f
 13983  1AF1  0008               	return
 13984  1AF2                     __end_of_setLED_Main:	
 13985                           
 13986                           	psect	text75
 13987  23D0                     __ptext75:	
 13988 ;; *************** function _LED_Initialization *****************
 13989 ;; Defined at:
 13990 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13991 ;; Parameters:    Size  Location     Type
 13992 ;;		None
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;		None
 13995 ;; Return value:  Size  Location     Type
 13996 ;;		None               void
 13997 ;; Registers used:
 13998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;Total ram usage:        0 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    7
 14011 ;; This function calls:
 14012 ;;		_setLED_Initialization
 14013 ;; This function is called by:
 14014 ;;		_main
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           
 14019                           ;psect for function _LED_Initialization
 14020  23D0                     _LED_Initialization:	
 14021                           
 14022                           ;LED_B1.c: 38: setLED_Initialization(1);
 14023                           
 14024                           ;incstack = 0
 14025                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14026  23D0  3001               	movlw	1
 14027  23D1  31A4  24D6  31A3   	fcall	_setLED_Initialization
 14028                           
 14029                           ;LED_B1.c: 41: setLED_Initialization(2);
 14030  23D4  3002               	movlw	2
 14031  23D5  31A4  24D6  31A3   	fcall	_setLED_Initialization
 14032                           
 14033                           ;LED_B1.c: 47: setLED_Initialization(99);
 14034  23D8  3063               	movlw	99
 14035  23D9  31A4  24D6         	fcall	_setLED_Initialization
 14036  23DB  0008               	return
 14037  23DC                     __end_of_LED_Initialization:	
 14038                           
 14039                           	psect	text76
 14040  24D6                     __ptext76:	
 14041 ;; *************** function _setLED_Initialization *****************
 14042 ;; Defined at:
 14043 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  led             1    wreg     unsigned char 
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;  led             1    4[BANK0 ] unsigned char 
 14048 ;; Return value:  Size  Location     Type
 14049 ;;		None               void
 14050 ;; Registers used:
 14051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;Total ram usage:        1 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    6
 14064 ;; This function calls:
 14065 ;;		_LedPointSelect
 14066 ;;		_setLED
 14067 ;; This function is called by:
 14068 ;;		_LED_Initialization
 14069 ;; This function uses a non-reentrant model
 14070 ;;
 14071                           
 14072                           
 14073                           ;psect for function _setLED_Initialization
 14074  24D6                     _setLED_Initialization:	
 14075                           
 14076                           ;incstack = 0
 14077                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14078                           ;setLED_Initialization@led stored from wreg
 14079  24D6  0020               	movlb	0	; select bank0
 14080  24D7  00A4               	movwf	setLED_Initialization@led
 14081                           
 14082                           ;LED_B1.c: 69: LedPointSelect(led);
 14083  24D8  0824               	movf	setLED_Initialization@led,w
 14084  24D9  31A7  2728  31A4   	fcall	_LedPointSelect
 14085                           
 14086                           ;LED_B1.c: 70: LED->Enable=1;
 14087  24DC  0021               	movlb	1	; select bank1
 14088  24DD  083B               	movf	_LED^(0+128),w
 14089  24DE  0086               	movwf	6
 14090  24DF  0187               	clrf	7
 14091  24E0  1401               	bsf	1,0
 14092                           
 14093                           ;LED_B1.c: 71: setLED(led,0);
 14094  24E1  0020               	movlb	0	; select bank0
 14095  24E2  01A2               	clrf	setLED@command
 14096  24E3  0824               	movf	setLED_Initialization@led,w
 14097  24E4  3188  2002         	fcall	_setLED
 14098  24E6  0008               	return
 14099  24E7                     __end_of_setLED_Initialization:	
 14100                           
 14101                           	psect	text77
 14102  1C80                     __ptext77:	
 14103 ;; *************** function _Flash_Memory_Main *****************
 14104 ;; Defined at:
 14105 ;;		line 852 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14106 ;; Parameters:    Size  Location     Type
 14107 ;;		None
 14108 ;; Auto vars:     Size  Location     Type
 14109 ;;		None
 14110 ;; Return value:  Size  Location     Type
 14111 ;;		None               void
 14112 ;; Registers used:
 14113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14114 ;; Tracked objects:
 14115 ;;		On entry : 0/0
 14116 ;;		On exit  : 0/0
 14117 ;;		Unchanged: 0/0
 14118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;Total ram usage:        0 bytes
 14124 ;; Hardware stack levels used:    1
 14125 ;; Hardware stack levels required when called:    7
 14126 ;; This function calls:
 14127 ;;		_Flash_Memory_Modify
 14128 ;; This function is called by:
 14129 ;;		_main
 14130 ;; This function uses a non-reentrant model
 14131 ;;
 14132                           
 14133                           
 14134                           ;psect for function _Flash_Memory_Main
 14135  1C80                     _Flash_Memory_Main:	
 14136                           
 14137                           ;MCU_B1.c: 854: if(Memory->GO)
 14138                           
 14139                           ;incstack = 0
 14140                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14141  1C80  0021               	movlb	1	; select bank1
 14142  1C81  0869               	movf	_Memory^(0+128),w
 14143  1C82  3E22               	addlw	34
 14144  1C83  0086               	movwf	6
 14145  1C84  3002               	movlw	2	; select bank4/5
 14146  1C85  0087               	movwf	7
 14147  1C86  1C81               	btfss	1,1
 14148  1C87  0008               	return
 14149                           
 14150                           ;MCU_B1.c: 855: {
 14151                           ;MCU_B1.c: 856: if(Memory->Modify)
 14152  1C88  0869               	movf	_Memory^(0+128),w
 14153  1C89  3E22               	addlw	34
 14154  1C8A  0086               	movwf	6
 14155  1C8B  3002               	movlw	2	; select bank4/5
 14156  1C8C  0087               	movwf	7
 14157  1C8D  1C01               	btfss	1,0
 14158  1C8E  2CBD               	goto	l9996
 14159                           
 14160                           ;MCU_B1.c: 857: {
 14161                           ;MCU_B1.c: 858: Memory->Time++;
 14162  1C8F  0869               	movf	_Memory^(0+128),w
 14163  1C90  3E23               	addlw	35
 14164  1C91  0086               	movwf	6
 14165  1C92  3002               	movlw	2	; select bank4/5
 14166  1C93  0087               	movwf	7
 14167  1C94  3001               	movlw	1
 14168  1C95  0781               	addwf	1,f
 14169  1C96  3141               	addfsr 1,1
 14170  1C97  1803               	skipnc
 14171  1C98  0A81               	incf	1,f
 14172                           
 14173                           ;MCU_B1.c: 859: if(Memory->Time == 25)
 14174  1C99  0869               	movf	_Memory^(0+128),w
 14175  1C9A  3E23               	addlw	35
 14176  1C9B  0086               	movwf	6
 14177  1C9C  3002               	movlw	2	; select bank4/5
 14178  1C9D  0087               	movwf	7
 14179  1C9E  3F40               	moviw [0]fsr1
 14180  1C9F  3A19               	xorlw	25
 14181  1CA0  1D03               	skipz
 14182  1CA1  2CA4               	goto	u10035
 14183  1CA2  3F41               	moviw [1]fsr1
 14184  1CA3  3A00               	xorlw	0
 14185  1CA4                     u10035:	
 14186  1CA4  1D03               	skipz
 14187  1CA5  0008               	return
 14188                           
 14189                           ;MCU_B1.c: 860: {
 14190                           ;MCU_B1.c: 861: Memory->Time=0;
 14191  1CA6  0869               	movf	_Memory^(0+128),w
 14192  1CA7  3E23               	addlw	35
 14193  1CA8  0086               	movwf	6
 14194  1CA9  3002               	movlw	2	; select bank4/5
 14195  1CAA  0087               	movwf	7
 14196  1CAB  3000               	movlw	0
 14197  1CAC  3FC0               	movwi [0]fsr1
 14198  1CAD  3FC1               	movwi [1]fsr1
 14199                           
 14200                           ;MCU_B1.c: 862: Memory->Modify=0;
 14201  1CAE  0869               	movf	_Memory^(0+128),w
 14202  1CAF  3E22               	addlw	34
 14203  1CB0  0086               	movwf	6
 14204  1CB1  3002               	movlw	2	; select bank4/5
 14205  1CB2  0087               	movwf	7
 14206  1CB3  1001               	bcf	1,0
 14207                           
 14208                           ;MCU_B1.c: 863: Memory->GO=0;
 14209  1CB4  0869               	movf	_Memory^(0+128),w
 14210  1CB5  3E22               	addlw	34
 14211  1CB6  0086               	movwf	6
 14212  1CB7  3002               	movlw	2	; select bank4/5
 14213  1CB8  0087               	movwf	7
 14214  1CB9  1081               	bcf	1,1
 14215                           
 14216                           ;MCU_B1.c: 864: Flash_Memory_Modify();
 14217  1CBA  3190  20BC         	fcall	_Flash_Memory_Modify
 14218                           
 14219                           ;MCU_B1.c: 866: }
 14220                           ;MCU_B1.c: 867: }
 14221  1CBC  0008               	return
 14222  1CBD                     l9996:	
 14223                           
 14224                           ;MCU_B1.c: 868: else
 14225                           ;MCU_B1.c: 869: {
 14226                           ;MCU_B1.c: 870: Memory->GO=0;
 14227  1CBD  0021               	movlb	1	; select bank1
 14228  1CBE  0869               	movf	_Memory^(0+128),w
 14229  1CBF  3E22               	addlw	34
 14230  1CC0  0086               	movwf	6
 14231  1CC1  3002               	movlw	2	; select bank4/5
 14232  1CC2  0087               	movwf	7
 14233  1CC3  1081               	bcf	1,1
 14234  1CC4  0008               	return
 14235  1CC5                     __end_of_Flash_Memory_Main:	
 14236                           
 14237                           	psect	text78
 14238  10BC                     __ptext78:	
 14239 ;; *************** function _Flash_Memory_Modify *****************
 14240 ;; Defined at:
 14241 ;;		line 927 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;  i               1    6[BANK0 ] unsigned char 
 14246 ;; Return value:  Size  Location     Type
 14247 ;;		None               void
 14248 ;; Registers used:
 14249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;Total ram usage:        3 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    6
 14262 ;; This function calls:
 14263 ;;		_Flash_Memory_Erasing
 14264 ;;		_Flash_Memory_Read
 14265 ;;		_Flash_Memory_Write
 14266 ;; This function is called by:
 14267 ;;		_Flash_Memory_Main
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           
 14272                           ;psect for function _Flash_Memory_Modify
 14273  10BC                     _Flash_Memory_Modify:	
 14274                           
 14275                           ;MCU_B1.c: 929: char i;
 14276                           ;MCU_B1.c: 930: for(i=0;i<32;i++)
 14277                           
 14278                           ;incstack = 0
 14279                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14280  10BC  0020               	movlb	0	; select bank0
 14281  10BD  01A6               	clrf	Flash_Memory_Modify@i
 14282  10BE  3020               	movlw	32
 14283  10BF  0226               	subwf	Flash_Memory_Modify@i,w
 14284  10C0  1803               	btfsc	3,0
 14285  10C1  28DB               	goto	l9508
 14286  10C2                     l9502:	
 14287                           
 14288                           ;MCU_B1.c: 931: {
 14289                           ;MCU_B1.c: 932: Memory->Data[i]=Flash_Memory_Read(i);
 14290  10C2  0826               	movf	Flash_Memory_Modify@i,w
 14291  10C3  31A5  25EE  3190   	fcall	_Flash_Memory_Read
 14292  10C6  0020               	movlb	0	; select bank0
 14293  10C7  00A4               	movwf	??_Flash_Memory_Modify
 14294  10C8  0826               	movf	Flash_Memory_Modify@i,w
 14295  10C9  0021               	movlb	1	; select bank1
 14296  10CA  0769               	addwf	_Memory^(0+128),w
 14297  10CB  0020               	movlb	0	; select bank0
 14298  10CC  00A5               	movwf	??_Flash_Memory_Modify+1
 14299  10CD  0825               	movf	??_Flash_Memory_Modify+1,w
 14300  10CE  0086               	movwf	6
 14301  10CF  3002               	movlw	2	; select bank4/5
 14302  10D0  0087               	movwf	7
 14303  10D1  0824               	movf	??_Flash_Memory_Modify,w
 14304  10D2  0081               	movwf	1
 14305  10D3  3001               	movlw	1
 14306  10D4  00A4               	movwf	??_Flash_Memory_Modify
 14307  10D5  0824               	movf	??_Flash_Memory_Modify,w
 14308  10D6  07A6               	addwf	Flash_Memory_Modify@i,f
 14309  10D7  3020               	movlw	32
 14310  10D8  0226               	subwf	Flash_Memory_Modify@i,w
 14311  10D9  1C03               	skipc
 14312  10DA  28C2               	goto	l9502
 14313  10DB                     l9508:	
 14314                           
 14315                           ;MCU_B1.c: 933: }
 14316                           ;MCU_B1.c: 934: Memory->Data[0]=Product->Data[12];
 14317  10DB  086F               	movf	_Product,w
 14318  10DC  3E0C               	addlw	12
 14319  10DD  0086               	movwf	6
 14320  10DE  3001               	movlw	1	; select bank2/3
 14321  10DF  0087               	movwf	7
 14322  10E0  0801               	movf	1,w
 14323  10E1  00A4               	movwf	??_Flash_Memory_Modify
 14324  10E2  0021               	movlb	1	; select bank1
 14325  10E3  0869               	movf	_Memory^(0+128),w
 14326  10E4  0086               	movwf	6
 14327  10E5  3002               	movlw	2	; select bank4/5
 14328  10E6  0087               	movwf	7
 14329  10E7  0020               	movlb	0	; select bank0
 14330  10E8  0824               	movf	??_Flash_Memory_Modify,w
 14331  10E9  0081               	movwf	1
 14332                           
 14333                           ;MCU_B1.c: 935: Memory->Data[1]=Product->Data[13];
 14334  10EA  086F               	movf	_Product,w
 14335  10EB  3E0D               	addlw	13
 14336  10EC  0086               	movwf	6
 14337  10ED  3001               	movlw	1	; select bank2/3
 14338  10EE  0087               	movwf	7
 14339  10EF  0801               	movf	1,w
 14340  10F0  00A4               	movwf	??_Flash_Memory_Modify
 14341  10F1  0021               	movlb	1	; select bank1
 14342  10F2  0A69               	incf	_Memory^(0+128),w
 14343  10F3  0086               	movwf	6
 14344  10F4  3002               	movlw	2	; select bank4/5
 14345  10F5  0087               	movwf	7
 14346  10F6  0020               	movlb	0	; select bank0
 14347  10F7  0824               	movf	??_Flash_Memory_Modify,w
 14348  10F8  0081               	movwf	1
 14349                           
 14350                           ;MCU_B1.c: 936: Memory->Data[2]=Product->Data[14];
 14351  10F9  086F               	movf	_Product,w
 14352  10FA  3E0E               	addlw	14
 14353  10FB  0086               	movwf	6
 14354  10FC  3001               	movlw	1	; select bank2/3
 14355  10FD  0087               	movwf	7
 14356  10FE  0801               	movf	1,w
 14357  10FF  00A4               	movwf	??_Flash_Memory_Modify
 14358  1100  0021               	movlb	1	; select bank1
 14359  1101  0869               	movf	_Memory^(0+128),w
 14360  1102  3E02               	addlw	2
 14361  1103  0086               	movwf	6
 14362  1104  3002               	movlw	2	; select bank4/5
 14363  1105  0087               	movwf	7
 14364  1106  0020               	movlb	0	; select bank0
 14365  1107  0824               	movf	??_Flash_Memory_Modify,w
 14366  1108  0081               	movwf	1
 14367                           
 14368                           ;MCU_B1.c: 942: if(Memory->LoopSave)
 14369  1109  0021               	movlb	1	; select bank1
 14370  110A  0869               	movf	_Memory^(0+128),w
 14371  110B  3E22               	addlw	34
 14372  110C  0086               	movwf	6
 14373  110D  3002               	movlw	2	; select bank4/5
 14374  110E  0087               	movwf	7
 14375  110F  1D01               	btfss	1,2
 14376  1110  2922               	goto	l9512
 14377                           
 14378                           ;MCU_B1.c: 943: {
 14379                           ;MCU_B1.c: 944: Memory->LoopSave=0;
 14380  1111  0869               	movf	_Memory^(0+128),w
 14381  1112  3E22               	addlw	34
 14382  1113  0086               	movwf	6
 14383  1114  3002               	movlw	2	; select bank4/5
 14384  1115  0087               	movwf	7
 14385  1116  1101               	bcf	1,2
 14386                           
 14387                           ;MCU_B1.c: 945: TMain->FirstOpen=0;
 14388  1117  086A               	movf	_TMain^(0+128),w
 14389  1118  0086               	movwf	6
 14390  1119  3001               	movlw	1	; select bank2/3
 14391  111A  0087               	movwf	7
 14392  111B  1281               	bcf	1,5
 14393                           
 14394                           ;MCU_B1.c: 946: TMain->First=0;
 14395  111C  086A               	movf	_TMain^(0+128),w
 14396  111D  3E03               	addlw	3
 14397  111E  0086               	movwf	6
 14398  111F  3001               	movlw	1	; select bank2/3
 14399  1120  0087               	movwf	7
 14400  1121  1081               	bcf	1,1
 14401  1122                     l9512:	
 14402                           
 14403                           ;MCU_B1.c: 948: }
 14404                           ;MCU_B1.c: 949: GIE=0;
 14405  1122  138B               	bcf	11,7	;volatile
 14406                           
 14407                           ;MCU_B1.c: 950: Flash_Memory_Erasing();
 14408  1123  31A3  23C4  3190   	fcall	_Flash_Memory_Erasing
 14409                           
 14410                           ;MCU_B1.c: 951: Flash_Memory_Write();
 14411  1126  3199  21A9         	fcall	_Flash_Memory_Write
 14412                           
 14413                           ;MCU_B1.c: 952: GIE=1;
 14414  1128  178B               	bsf	11,7	;volatile
 14415  1129  0008               	return
 14416  112A                     __end_of_Flash_Memory_Modify:	
 14417                           
 14418                           	psect	text79
 14419  23C4                     __ptext79:	
 14420 ;; *************** function _Flash_Memory_Erasing *****************
 14421 ;; Defined at:
 14422 ;;		line 916 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;		None
 14425 ;; Auto vars:     Size  Location     Type
 14426 ;;		None
 14427 ;; Return value:  Size  Location     Type
 14428 ;;		None               void
 14429 ;; Registers used:
 14430 ;;		wreg, status,2, status,0, pclath, cstack
 14431 ;; Tracked objects:
 14432 ;;		On entry : 0/0
 14433 ;;		On exit  : 0/0
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used:    1
 14442 ;; Hardware stack levels required when called:    5
 14443 ;; This function calls:
 14444 ;;		_Flash_Memory_Unlock
 14445 ;; This function is called by:
 14446 ;;		_Flash_Memory_Modify
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           
 14451                           ;psect for function _Flash_Memory_Erasing
 14452  23C4                     _Flash_Memory_Erasing:	
 14453                           
 14454                           ;MCU_B1.c: 918: CFGS=0;
 14455                           
 14456                           ;incstack = 0
 14457                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14458  23C4  0023               	movlb	3	; select bank3
 14459  23C5  1315               	bcf	21,6	;volatile
 14460                           
 14461                           ;MCU_B1.c: 919: PMADRH=0x30;
 14462  23C6  3030               	movlw	48
 14463  23C7  0092               	movwf	18	;volatile
 14464                           
 14465                           ;MCU_B1.c: 920: PMADRL=0x00;
 14466  23C8  0191               	clrf	17	;volatile
 14467                           
 14468                           ;MCU_B1.c: 921: FREE=1;
 14469  23C9  1615               	bsf	21,4	;volatile
 14470                           
 14471                           ;MCU_B1.c: 922: WREN=1;
 14472  23CA  1515               	bsf	21,2	;volatile
 14473                           
 14474                           ;MCU_B1.c: 923: Flash_Memory_Unlock();
 14475  23CB  31A3  232C         	fcall	_Flash_Memory_Unlock
 14476                           
 14477                           ;MCU_B1.c: 924: WREN=0;
 14478  23CD  0023               	movlb	3	; select bank3
 14479  23CE  1115               	bcf	21,2	;volatile
 14480  23CF  0008               	return
 14481  23D0                     __end_of_Flash_Memory_Erasing:	
 14482                           
 14483                           	psect	text80
 14484  0B7C                     __ptext80:	
 14485 ;; *************** function _Flash_Memory_Initialization *****************
 14486 ;; Defined at:
 14487 ;;		line 807 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14488 ;; Parameters:    Size  Location     Type
 14489 ;;		None
 14490 ;; Auto vars:     Size  Location     Type
 14491 ;;  i               1   62[BANK0 ] unsigned char 
 14492 ;; Return value:  Size  Location     Type
 14493 ;;		None               void
 14494 ;; Registers used:
 14495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14496 ;; Tracked objects:
 14497 ;;		On entry : 0/0
 14498 ;;		On exit  : 0/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;Total ram usage:        2 bytes
 14506 ;; Hardware stack levels used:    1
 14507 ;; Hardware stack levels required when called:    7
 14508 ;; This function calls:
 14509 ;;		_Flash_Memory_Read
 14510 ;;		_Flash_Memory_Write
 14511 ;;		_setPercentValue
 14512 ;; This function is called by:
 14513 ;;		_main
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           
 14518                           ;psect for function _Flash_Memory_Initialization
 14519  0B7C                     _Flash_Memory_Initialization:	
 14520                           
 14521                           ;MCU_B1.c: 809: char i;
 14522                           ;MCU_B1.c: 810: if(Flash_Memory_Read(31) == 0xaa)
 14523                           
 14524                           ;incstack = 0
 14525                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14526  0B7C  301F               	movlw	31
 14527  0B7D  31A5  25EE  318B   	fcall	_Flash_Memory_Read
 14528  0B80  3AAA               	xorlw	170
 14529  0B81  1D03               	skipz
 14530  0B82  2BF5               	goto	l9854
 14531                           
 14532                           ;MCU_B1.c: 811: {
 14533                           ;MCU_B1.c: 812: Product->Data[12]=Flash_Memory_Read(0);
 14534  0B83  3000               	movlw	0
 14535  0B84  31A5  25EE  318B   	fcall	_Flash_Memory_Read
 14536  0B87  0020               	movlb	0	; select bank0
 14537  0B88  00DD               	movwf	??_Flash_Memory_Initialization
 14538  0B89  086F               	movf	_Product,w
 14539  0B8A  3E0C               	addlw	12
 14540  0B8B  0086               	movwf	6
 14541  0B8C  3001               	movlw	1	; select bank2/3
 14542  0B8D  0087               	movwf	7
 14543  0B8E  085D               	movf	??_Flash_Memory_Initialization,w
 14544  0B8F  0081               	movwf	1
 14545                           
 14546                           ;MCU_B1.c: 813: Product->Data[13]=Flash_Memory_Read(1);
 14547  0B90  3001               	movlw	1
 14548  0B91  31A5  25EE  318B   	fcall	_Flash_Memory_Read
 14549  0B94  0020               	movlb	0	; select bank0
 14550  0B95  00DD               	movwf	??_Flash_Memory_Initialization
 14551  0B96  086F               	movf	_Product,w
 14552  0B97  3E0D               	addlw	13
 14553  0B98  0086               	movwf	6
 14554  0B99  3001               	movlw	1	; select bank2/3
 14555  0B9A  0087               	movwf	7
 14556  0B9B  085D               	movf	??_Flash_Memory_Initialization,w
 14557  0B9C  0081               	movwf	1
 14558                           
 14559                           ;MCU_B1.c: 814: Product->Data[14]=Flash_Memory_Read(2);
 14560  0B9D  3002               	movlw	2
 14561  0B9E  31A5  25EE  318B   	fcall	_Flash_Memory_Read
 14562  0BA1  0020               	movlb	0	; select bank0
 14563  0BA2  00DD               	movwf	??_Flash_Memory_Initialization
 14564  0BA3  086F               	movf	_Product,w
 14565  0BA4  3E0E               	addlw	14
 14566  0BA5  0086               	movwf	6
 14567  0BA6  3001               	movlw	1	; select bank2/3
 14568  0BA7  0087               	movwf	7
 14569  0BA8  085D               	movf	??_Flash_Memory_Initialization,w
 14570  0BA9  0081               	movwf	1
 14571                           
 14572                           ;MCU_B1.c: 820: i=setPercentValue(((char)((100-55)*1.5)));
 14573  0BAA  3043               	movlw	67
 14574  0BAB  319C  24C5  318B   	fcall	_setPercentValue
 14575  0BAE  0020               	movlb	0	; select bank0
 14576  0BAF  00DD               	movwf	??_Flash_Memory_Initialization
 14577  0BB0  085D               	movf	??_Flash_Memory_Initialization,w
 14578  0BB1  00DE               	movwf	Flash_Memory_Initialization@i
 14579                           
 14580                           ;MCU_B1.c: 821: Product->Data[21]=i;
 14581  0BB2  085E               	movf	Flash_Memory_Initialization@i,w
 14582  0BB3  00DD               	movwf	??_Flash_Memory_Initialization
 14583  0BB4  086F               	movf	_Product,w
 14584  0BB5  3E15               	addlw	21
 14585  0BB6  0086               	movwf	6
 14586  0BB7  3001               	movlw	1	; select bank2/3
 14587  0BB8  0087               	movwf	7
 14588  0BB9  085D               	movf	??_Flash_Memory_Initialization,w
 14589  0BBA  0081               	movwf	1
 14590                           
 14591                           ;MCU_B1.c: 822: Product->Data[22]=i;
 14592  0BBB  085E               	movf	Flash_Memory_Initialization@i,w
 14593  0BBC  00DD               	movwf	??_Flash_Memory_Initialization
 14594  0BBD  086F               	movf	_Product,w
 14595  0BBE  3E16               	addlw	22
 14596  0BBF  0086               	movwf	6
 14597  0BC0  3001               	movlw	1	; select bank2/3
 14598  0BC1  0087               	movwf	7
 14599  0BC2  085D               	movf	??_Flash_Memory_Initialization,w
 14600  0BC3  0081               	movwf	1
 14601                           
 14602                           ;MCU_B1.c: 823: Product->Data[23]=i;
 14603  0BC4  085E               	movf	Flash_Memory_Initialization@i,w
 14604  0BC5  00DD               	movwf	??_Flash_Memory_Initialization
 14605  0BC6  086F               	movf	_Product,w
 14606  0BC7  3E17               	addlw	23
 14607  0BC8  0086               	movwf	6
 14608  0BC9  3001               	movlw	1	; select bank2/3
 14609  0BCA  0087               	movwf	7
 14610  0BCB  085D               	movf	??_Flash_Memory_Initialization,w
 14611  0BCC  0081               	movwf	1
 14612                           
 14613                           ;MCU_B1.c: 825: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product->Data[1
      +                          4]==0xff)
 14614  0BCD  086F               	movf	_Product,w
 14615  0BCE  3E0C               	addlw	12
 14616  0BCF  0086               	movwf	6
 14617  0BD0  3001               	movlw	1	; select bank2/3
 14618  0BD1  0087               	movwf	7
 14619  0BD2  0801               	movf	1,w
 14620  0BD3  3AFF               	xorlw	255
 14621  0BD4  1D03               	skipz
 14622  0BD5  0008               	return
 14623  0BD6  086F               	movf	_Product,w
 14624  0BD7  3E0D               	addlw	13
 14625  0BD8  0086               	movwf	6
 14626  0BD9  3001               	movlw	1	; select bank2/3
 14627  0BDA  0087               	movwf	7
 14628  0BDB  0801               	movf	1,w
 14629  0BDC  3AFF               	xorlw	255
 14630  0BDD  1D03               	skipz
 14631  0BDE  0008               	return
 14632  0BDF  086F               	movf	_Product,w
 14633  0BE0  3E0E               	addlw	14
 14634  0BE1  0086               	movwf	6
 14635  0BE2  3001               	movlw	1	; select bank2/3
 14636  0BE3  0087               	movwf	7
 14637  0BE4  0801               	movf	1,w
 14638  0BE5  3AFF               	xorlw	255
 14639  0BE6  1D03               	skipz
 14640  0BE7  0008               	return
 14641                           
 14642                           ;MCU_B1.c: 826: {
 14643                           ;MCU_B1.c: 827: TMain->FirstOpen=1;
 14644  0BE8  0021               	movlb	1	; select bank1
 14645  0BE9  086A               	movf	_TMain^(0+128),w
 14646  0BEA  0086               	movwf	6
 14647  0BEB  3001               	movlw	1	; select bank2/3
 14648  0BEC  0087               	movwf	7
 14649  0BED  1681               	bsf	1,5
 14650                           
 14651                           ;MCU_B1.c: 828: TMain->First=1;
 14652  0BEE  086A               	movf	_TMain^(0+128),w
 14653  0BEF  3E03               	addlw	3
 14654  0BF0  0086               	movwf	6
 14655  0BF1  3001               	movlw	1	; select bank2/3
 14656  0BF2  0087               	movwf	7
 14657  0BF3  1481               	bsf	1,1
 14658                           
 14659                           ;MCU_B1.c: 829: }
 14660                           ;MCU_B1.c: 830: }
 14661  0BF4  0008               	return
 14662  0BF5                     l9854:	
 14663                           
 14664                           ;MCU_B1.c: 831: else
 14665                           ;MCU_B1.c: 832: {
 14666                           ;MCU_B1.c: 833: i=setPercentValue(((char)((100-55)*1.5)));
 14667  0BF5  3043               	movlw	67
 14668  0BF6  319C  24C5  318B   	fcall	_setPercentValue
 14669  0BF9  0020               	movlb	0	; select bank0
 14670  0BFA  00DD               	movwf	??_Flash_Memory_Initialization
 14671  0BFB  085D               	movf	??_Flash_Memory_Initialization,w
 14672  0BFC  00DE               	movwf	Flash_Memory_Initialization@i
 14673                           
 14674                           ;MCU_B1.c: 834: Memory->Data[0]=0xff;
 14675  0BFD  30FF               	movlw	255
 14676  0BFE  00DD               	movwf	??_Flash_Memory_Initialization
 14677  0BFF  0021               	movlb	1	; select bank1
 14678  0C00  0869               	movf	_Memory^(0+128),w
 14679  0C01  0086               	movwf	6
 14680  0C02  3002               	movlw	2	; select bank4/5
 14681  0C03  0087               	movwf	7
 14682  0C04  0020               	movlb	0	; select bank0
 14683  0C05  085D               	movf	??_Flash_Memory_Initialization,w
 14684  0C06  0081               	movwf	1
 14685                           
 14686                           ;MCU_B1.c: 835: Memory->Data[1]=0xff;
 14687  0C07  30FF               	movlw	255
 14688  0C08  00DD               	movwf	??_Flash_Memory_Initialization
 14689  0C09  0021               	movlb	1	; select bank1
 14690  0C0A  0A69               	incf	_Memory^(0+128),w
 14691  0C0B  0086               	movwf	6
 14692  0C0C  3002               	movlw	2	; select bank4/5
 14693  0C0D  0087               	movwf	7
 14694  0C0E  0020               	movlb	0	; select bank0
 14695  0C0F  085D               	movf	??_Flash_Memory_Initialization,w
 14696  0C10  0081               	movwf	1
 14697                           
 14698                           ;MCU_B1.c: 836: Memory->Data[2]=0xff;
 14699  0C11  30FF               	movlw	255
 14700  0C12  00DD               	movwf	??_Flash_Memory_Initialization
 14701  0C13  0021               	movlb	1	; select bank1
 14702  0C14  0869               	movf	_Memory^(0+128),w
 14703  0C15  3E02               	addlw	2
 14704  0C16  0086               	movwf	6
 14705  0C17  3002               	movlw	2	; select bank4/5
 14706  0C18  0087               	movwf	7
 14707  0C19  0020               	movlb	0	; select bank0
 14708  0C1A  085D               	movf	??_Flash_Memory_Initialization,w
 14709  0C1B  0081               	movwf	1
 14710                           
 14711                           ;MCU_B1.c: 837: Memory->Data[3]=0xff;
 14712  0C1C  30FF               	movlw	255
 14713  0C1D  00DD               	movwf	??_Flash_Memory_Initialization
 14714  0C1E  0021               	movlb	1	; select bank1
 14715  0C1F  0869               	movf	_Memory^(0+128),w
 14716  0C20  3E03               	addlw	3
 14717  0C21  0086               	movwf	6
 14718  0C22  3002               	movlw	2	; select bank4/5
 14719  0C23  0087               	movwf	7
 14720  0C24  0020               	movlb	0	; select bank0
 14721  0C25  085D               	movf	??_Flash_Memory_Initialization,w
 14722  0C26  0081               	movwf	1
 14723                           
 14724                           ;MCU_B1.c: 838: Memory->Data[4]=0xff;
 14725  0C27  30FF               	movlw	255
 14726  0C28  00DD               	movwf	??_Flash_Memory_Initialization
 14727  0C29  0021               	movlb	1	; select bank1
 14728  0C2A  0869               	movf	_Memory^(0+128),w
 14729  0C2B  3E04               	addlw	4
 14730  0C2C  0086               	movwf	6
 14731  0C2D  3002               	movlw	2	; select bank4/5
 14732  0C2E  0087               	movwf	7
 14733  0C2F  0020               	movlb	0	; select bank0
 14734  0C30  085D               	movf	??_Flash_Memory_Initialization,w
 14735  0C31  0081               	movwf	1
 14736                           
 14737                           ;MCU_B1.c: 839: Memory->Data[5]=0xff;
 14738  0C32  30FF               	movlw	255
 14739  0C33  00DD               	movwf	??_Flash_Memory_Initialization
 14740  0C34  0021               	movlb	1	; select bank1
 14741  0C35  0869               	movf	_Memory^(0+128),w
 14742  0C36  3E05               	addlw	5
 14743  0C37  0086               	movwf	6
 14744  0C38  3002               	movlw	2	; select bank4/5
 14745  0C39  0087               	movwf	7
 14746  0C3A  0020               	movlb	0	; select bank0
 14747  0C3B  085D               	movf	??_Flash_Memory_Initialization,w
 14748  0C3C  0081               	movwf	1
 14749                           
 14750                           ;MCU_B1.c: 840: Memory->Data[31]=0xaa;
 14751  0C3D  30AA               	movlw	170
 14752  0C3E  00DD               	movwf	??_Flash_Memory_Initialization
 14753  0C3F  0021               	movlb	1	; select bank1
 14754  0C40  0869               	movf	_Memory^(0+128),w
 14755  0C41  3E1F               	addlw	31
 14756  0C42  0086               	movwf	6
 14757  0C43  3002               	movlw	2	; select bank4/5
 14758  0C44  0087               	movwf	7
 14759  0C45  0020               	movlb	0	; select bank0
 14760  0C46  085D               	movf	??_Flash_Memory_Initialization,w
 14761  0C47  0081               	movwf	1
 14762                           
 14763                           ;MCU_B1.c: 841: Product->Data[21]=i;
 14764  0C48  085E               	movf	Flash_Memory_Initialization@i,w
 14765  0C49  00DD               	movwf	??_Flash_Memory_Initialization
 14766  0C4A  086F               	movf	_Product,w
 14767  0C4B  3E15               	addlw	21
 14768  0C4C  0086               	movwf	6
 14769  0C4D  3001               	movlw	1	; select bank2/3
 14770  0C4E  0087               	movwf	7
 14771  0C4F  085D               	movf	??_Flash_Memory_Initialization,w
 14772  0C50  0081               	movwf	1
 14773                           
 14774                           ;MCU_B1.c: 842: Product->Data[22]=i;
 14775  0C51  085E               	movf	Flash_Memory_Initialization@i,w
 14776  0C52  00DD               	movwf	??_Flash_Memory_Initialization
 14777  0C53  086F               	movf	_Product,w
 14778  0C54  3E16               	addlw	22
 14779  0C55  0086               	movwf	6
 14780  0C56  3001               	movlw	1	; select bank2/3
 14781  0C57  0087               	movwf	7
 14782  0C58  085D               	movf	??_Flash_Memory_Initialization,w
 14783  0C59  0081               	movwf	1
 14784                           
 14785                           ;MCU_B1.c: 843: Product->Data[23]=i;
 14786  0C5A  085E               	movf	Flash_Memory_Initialization@i,w
 14787  0C5B  00DD               	movwf	??_Flash_Memory_Initialization
 14788  0C5C  086F               	movf	_Product,w
 14789  0C5D  3E17               	addlw	23
 14790  0C5E  0086               	movwf	6
 14791  0C5F  3001               	movlw	1	; select bank2/3
 14792  0C60  0087               	movwf	7
 14793  0C61  085D               	movf	??_Flash_Memory_Initialization,w
 14794  0C62  0081               	movwf	1
 14795                           
 14796                           ;MCU_B1.c: 844: GIE=0;
 14797  0C63  138B               	bcf	11,7	;volatile
 14798                           
 14799                           ;MCU_B1.c: 845: Flash_Memory_Write();
 14800  0C64  3199  21A9         	fcall	_Flash_Memory_Write
 14801                           
 14802                           ;MCU_B1.c: 846: GIE=1;
 14803  0C66  178B               	bsf	11,7	;volatile
 14804                           
 14805                           ;MCU_B1.c: 847: TMain->FirstOpen=1;
 14806  0C67  0021               	movlb	1	; select bank1
 14807  0C68  086A               	movf	_TMain^(0+128),w
 14808  0C69  0086               	movwf	6
 14809  0C6A  3001               	movlw	1	; select bank2/3
 14810  0C6B  0087               	movwf	7
 14811  0C6C  1681               	bsf	1,5
 14812                           
 14813                           ;MCU_B1.c: 848: TMain->First=1;
 14814  0C6D  086A               	movf	_TMain^(0+128),w
 14815  0C6E  3E03               	addlw	3
 14816  0C6F  0086               	movwf	6
 14817  0C70  3001               	movlw	1	; select bank2/3
 14818  0C71  0087               	movwf	7
 14819  0C72  1481               	bsf	1,1
 14820  0C73  0008               	return
 14821  0C74                     __end_of_Flash_Memory_Initialization:	
 14822                           
 14823                           	psect	text81
 14824  19A9                     __ptext81:	
 14825 ;; *************** function _Flash_Memory_Write *****************
 14826 ;; Defined at:
 14827 ;;		line 896 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;		None
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;  i               1    1[BANK0 ] unsigned char 
 14832 ;; Return value:  Size  Location     Type
 14833 ;;		None               void
 14834 ;; Registers used:
 14835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14836 ;; Tracked objects:
 14837 ;;		On entry : 0/0
 14838 ;;		On exit  : 0/0
 14839 ;;		Unchanged: 0/0
 14840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;Total ram usage:        2 bytes
 14846 ;; Hardware stack levels used:    1
 14847 ;; Hardware stack levels required when called:    5
 14848 ;; This function calls:
 14849 ;;		_Flash_Memory_Unlock
 14850 ;; This function is called by:
 14851 ;;		_Flash_Memory_Initialization
 14852 ;;		_Flash_Memory_Modify
 14853 ;; This function uses a non-reentrant model
 14854 ;;
 14855                           
 14856                           
 14857                           ;psect for function _Flash_Memory_Write
 14858  19A9                     _Flash_Memory_Write:	
 14859                           
 14860                           ;MCU_B1.c: 898: char i;
 14861                           ;MCU_B1.c: 899: CFGS=0;
 14862                           
 14863                           ;incstack = 0
 14864                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14865  19A9  0023               	movlb	3	; select bank3
 14866  19AA  1315               	bcf	21,6	;volatile
 14867                           
 14868                           ;MCU_B1.c: 900: PMADRH=0x30;
 14869  19AB  3030               	movlw	48
 14870  19AC  0092               	movwf	18	;volatile
 14871                           
 14872                           ;MCU_B1.c: 901: PMDATH=0;
 14873  19AD  0194               	clrf	20	;volatile
 14874                           
 14875                           ;MCU_B1.c: 902: FREE=0;
 14876  19AE  1215               	bcf	21,4	;volatile
 14877                           
 14878                           ;MCU_B1.c: 903: LWLO=1;
 14879  19AF  1695               	bsf	21,5	;volatile
 14880                           
 14881                           ;MCU_B1.c: 904: WREN=1;
 14882  19B0  1515               	bsf	21,2	;volatile
 14883                           
 14884                           ;MCU_B1.c: 905: for(i=0 ; i<32 ; i++)
 14885  19B1  0020               	movlb	0	; select bank0
 14886  19B2  01A1               	clrf	Flash_Memory_Write@i
 14887  19B3  3020               	movlw	32
 14888  19B4  0221               	subwf	Flash_Memory_Write@i,w
 14889  19B5  1803               	btfsc	3,0
 14890  19B6  29D3               	goto	l1744
 14891  19B7                     l9146:	
 14892                           
 14893                           ;MCU_B1.c: 906: {
 14894                           ;MCU_B1.c: 907: PMADRL=i;
 14895  19B7  0821               	movf	Flash_Memory_Write@i,w
 14896  19B8  0023               	movlb	3	; select bank3
 14897  19B9  0091               	movwf	17	;volatile
 14898                           
 14899                           ;MCU_B1.c: 908: PMDATL=Memory->Data[i];
 14900  19BA  0020               	movlb	0	; select bank0
 14901  19BB  0821               	movf	Flash_Memory_Write@i,w
 14902  19BC  0021               	movlb	1	; select bank1
 14903  19BD  0769               	addwf	_Memory^(0+128),w
 14904  19BE  0020               	movlb	0	; select bank0
 14905  19BF  00A0               	movwf	??_Flash_Memory_Write
 14906  19C0  0820               	movf	??_Flash_Memory_Write,w
 14907  19C1  0086               	movwf	6
 14908  19C2  3002               	movlw	2	; select bank4/5
 14909  19C3  0087               	movwf	7
 14910  19C4  0801               	movf	1,w
 14911  19C5  0023               	movlb	3	; select bank3
 14912  19C6  0093               	movwf	19	;volatile
 14913                           
 14914                           ;MCU_B1.c: 909: Flash_Memory_Unlock();
 14915  19C7  31A3  232C  3199   	fcall	_Flash_Memory_Unlock
 14916  19CA  3001               	movlw	1
 14917  19CB  0020               	movlb	0	; select bank0
 14918  19CC  00A0               	movwf	??_Flash_Memory_Write
 14919  19CD  0820               	movf	??_Flash_Memory_Write,w
 14920  19CE  07A1               	addwf	Flash_Memory_Write@i,f
 14921  19CF  3020               	movlw	32
 14922  19D0  0221               	subwf	Flash_Memory_Write@i,w
 14923  19D1  1C03               	skipc
 14924  19D2  29B7               	goto	l9146
 14925  19D3                     l1744:	
 14926                           
 14927                           ;MCU_B1.c: 910: }
 14928                           ;MCU_B1.c: 911: LWLO=0;
 14929  19D3  0023               	movlb	3	; select bank3
 14930  19D4  1295               	bcf	21,5	;volatile
 14931                           
 14932                           ;MCU_B1.c: 912: Flash_Memory_Unlock();
 14933  19D5  31A3  232C         	fcall	_Flash_Memory_Unlock
 14934                           
 14935                           ;MCU_B1.c: 913: WREN=0;
 14936  19D7  0023               	movlb	3	; select bank3
 14937  19D8  1115               	bcf	21,2	;volatile
 14938  19D9  0008               	return
 14939  19DA                     __end_of_Flash_Memory_Write:	
 14940                           
 14941                           	psect	text82
 14942  232C                     __ptext82:	
 14943 ;; *************** function _Flash_Memory_Unlock *****************
 14944 ;; Defined at:
 14945 ;;		line 875 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;		None
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;		None
 14950 ;; Return value:  Size  Location     Type
 14951 ;;		None               void
 14952 ;; Registers used:
 14953 ;;		wreg
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;Total ram usage:        0 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; Hardware stack levels required when called:    4
 14966 ;; This function calls:
 14967 ;;		Nothing
 14968 ;; This function is called by:
 14969 ;;		_Flash_Memory_Write
 14970 ;;		_Flash_Memory_Erasing
 14971 ;; This function uses a non-reentrant model
 14972 ;;
 14973                           
 14974                           
 14975                           ;psect for function _Flash_Memory_Unlock
 14976  232C                     _Flash_Memory_Unlock:	
 14977                           
 14978                           ;MCU_B1.c: 877: PMCON2=0x55;
 14979                           
 14980                           ;incstack = 0
 14981                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14982  232C  3055               	movlw	85
 14983  232D  0023               	movlb	3	; select bank3
 14984  232E  0096               	movwf	22	;volatile
 14985                           
 14986                           ;MCU_B1.c: 878: PMCON2=0xaa;
 14987  232F  30AA               	movlw	170
 14988  2330  0096               	movwf	22	;volatile
 14989                           
 14990                           ;MCU_B1.c: 879: WR=1;
 14991  2331  1495               	bsf	21,1	;volatile
 14992                           
 14993                           ;MCU_B1.c: 880: __nop();
 14994  2332  0000               	nop
 14995                           
 14996                           ;MCU_B1.c: 881: __nop();
 14997  2333  0000               	nop
 14998  2334  0008               	return
 14999  2335                     __end_of_Flash_Memory_Unlock:	
 15000                           
 15001                           	psect	text83
 15002  25EE                     __ptext83:	
 15003 ;; *************** function _Flash_Memory_Read *****************
 15004 ;; Defined at:
 15005 ;;		line 884 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;  address         1    wreg     unsigned char 
 15008 ;; Auto vars:     Size  Location     Type
 15009 ;;  address         1    2[BANK0 ] unsigned char 
 15010 ;;  ret             1    3[BANK0 ] unsigned char 
 15011 ;;  i               1    1[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      unsigned char 
 15014 ;; Registers used:
 15015 ;;		wreg, status,2
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        4 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    4
 15028 ;; This function calls:
 15029 ;;		Nothing
 15030 ;; This function is called by:
 15031 ;;		_Flash_Memory_Initialization
 15032 ;;		_Flash_Memory_Modify
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function _Flash_Memory_Read
 15038  25EE                     _Flash_Memory_Read:	
 15039                           
 15040                           ;incstack = 0
 15041                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 15042                           ;Flash_Memory_Read@address stored from wreg
 15043  25EE  0020               	movlb	0	; select bank0
 15044  25EF  00A2               	movwf	Flash_Memory_Read@address
 15045                           
 15046                           ;MCU_B1.c: 886: char i,ret=0;
 15047  25F0  01A3               	clrf	Flash_Memory_Read@ret
 15048                           
 15049                           ;MCU_B1.c: 887: PMADRH=0x30;
 15050  25F1  3030               	movlw	48
 15051  25F2  0023               	movlb	3	; select bank3
 15052  25F3  0092               	movwf	18	;volatile
 15053                           
 15054                           ;MCU_B1.c: 888: PMADRL=address;
 15055  25F4  0020               	movlb	0	; select bank0
 15056  25F5  0822               	movf	Flash_Memory_Read@address,w
 15057  25F6  0023               	movlb	3	; select bank3
 15058  25F7  0091               	movwf	17	;volatile
 15059                           
 15060                           ;MCU_B1.c: 889: CFGS=0;
 15061  25F8  1315               	bcf	21,6	;volatile
 15062                           
 15063                           ;MCU_B1.c: 890: RD=1;
 15064  25F9  1415               	bsf	21,0	;volatile
 15065                           
 15066                           ;MCU_B1.c: 891: i=PMDATH;
 15067  25FA  0814               	movf	20,w	;volatile
 15068  25FB  0020               	movlb	0	; select bank0
 15069  25FC  00A0               	movwf	??_Flash_Memory_Read
 15070  25FD  0820               	movf	??_Flash_Memory_Read,w
 15071  25FE  00A1               	movwf	Flash_Memory_Read@i
 15072                           
 15073                           ;MCU_B1.c: 892: ret=PMDATL;
 15074  25FF  0023               	movlb	3	; select bank3
 15075  2600  0813               	movf	19,w	;volatile
 15076  2601  0020               	movlb	0	; select bank0
 15077  2602  00A0               	movwf	??_Flash_Memory_Read
 15078  2603  0820               	movf	??_Flash_Memory_Read,w
 15079  2604  00A3               	movwf	Flash_Memory_Read@ret
 15080                           
 15081                           ;MCU_B1.c: 893: return ret;
 15082  2605  0823               	movf	Flash_Memory_Read@ret,w
 15083  2606  0008               	return
 15084  2607                     __end_of_Flash_Memory_Read:	
 15085                           
 15086                           	psect	text84
 15087  2374                     __ptext84:	
 15088 ;; *************** function _DimmerLights_Main *****************
 15089 ;; Defined at:
 15090 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;		None
 15093 ;; Auto vars:     Size  Location     Type
 15094 ;;		None
 15095 ;; Return value:  Size  Location     Type
 15096 ;;		None               void
 15097 ;; Registers used:
 15098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15099 ;; Tracked objects:
 15100 ;;		On entry : 0/0
 15101 ;;		On exit  : 0/0
 15102 ;;		Unchanged: 0/0
 15103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15108 ;;Total ram usage:        0 bytes
 15109 ;; Hardware stack levels used:    1
 15110 ;; Hardware stack levels required when called:   10
 15111 ;; This function calls:
 15112 ;;		_DimmerLights_Close
 15113 ;;		_setDimmerLights_Main
 15114 ;; This function is called by:
 15115 ;;		_main
 15116 ;; This function uses a non-reentrant model
 15117 ;;
 15118                           
 15119                           
 15120                           ;psect for function _DimmerLights_Main
 15121  2374                     _DimmerLights_Main:	
 15122                           
 15123                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 15124                           
 15125                           ;incstack = 0
 15126                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15127  2374  3001               	movlw	1
 15128  2375  3193  2377  31A3   	fcall	_setDimmerLights_Main
 15129                           
 15130                           ;Dimmer_B1.c: 121: setDimmerLights_Main(2);
 15131  2378  3002               	movlw	2
 15132  2379  3193  2377  31A3   	fcall	_setDimmerLights_Main
 15133                           
 15134                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 15135  237C  31A6  263A         	fcall	_DimmerLights_Close
 15136  237E  0008               	return
 15137  237F                     __end_of_DimmerLights_Main:	
 15138                           
 15139                           	psect	text85
 15140  1377                     __ptext85:	
 15141 ;; *************** function _setDimmerLights_Main *****************
 15142 ;; Defined at:
 15143 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15144 ;; Parameters:    Size  Location     Type
 15145 ;;  lights          1    wreg     unsigned char 
 15146 ;; Auto vars:     Size  Location     Type
 15147 ;;  lights          1   70[BANK0 ] unsigned char 
 15148 ;;  clear           1   69[BANK0 ] unsigned char 
 15149 ;; Return value:  Size  Location     Type
 15150 ;;		None               void
 15151 ;; Registers used:
 15152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15153 ;; Tracked objects:
 15154 ;;		On entry : 0/0
 15155 ;;		On exit  : 0/0
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;Total ram usage:        2 bytes
 15163 ;; Hardware stack levels used:    1
 15164 ;; Hardware stack levels required when called:    9
 15165 ;; This function calls:
 15166 ;;		_DimmerLightsPointSelect
 15167 ;;		_setBuz
 15168 ;;		_setDimmerLights
 15169 ;;		_setDimmerLights_Adj
 15170 ;; This function is called by:
 15171 ;;		_DimmerLights_Main
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           
 15176                           ;psect for function _setDimmerLights_Main
 15177  1377                     _setDimmerLights_Main:	
 15178                           
 15179                           ;incstack = 0
 15180                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15181                           ;setDimmerLights_Main@lights stored from wreg
 15182  1377  0020               	movlb	0	; select bank0
 15183  1378  00E6               	movwf	setDimmerLights_Main@lights
 15184                           
 15185                           ;Dimmer_B1.c: 133: char clear=1;
 15186  1379  01E5               	clrf	setDimmerLights_Main@clear
 15187  137A  0AE5               	incf	setDimmerLights_Main@clear,f
 15188                           
 15189                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 15190  137B  0866               	movf	setDimmerLights_Main@lights,w
 15191  137C  31A4  24E7  3193   	fcall	_DimmerLightsPointSelect
 15192                           
 15193                           ;Dimmer_B1.c: 152: if(lights == 1)
 15194  137F  0020               	movlb	0	; select bank0
 15195  1380  0866               	movf	setDimmerLights_Main@lights,w
 15196  1381  3A01               	xorlw	1
 15197  1382  1D03               	skipz
 15198  1383  2B86               	goto	l9402
 15199                           
 15200                           ;Dimmer_B1.c: 153: {
 15201                           ;Dimmer_B1.c: 154: clear=(!DimmerLights22->Clear)?0:1;
 15202  1384  087A               	movf	_DimmerLights22,w
 15203  1385  2B8B               	goto	L14
 15204  1386                     l9402:	
 15205                           ;Dimmer_B1.c: 155: }
 15206                           
 15207                           
 15208                           ;Dimmer_B1.c: 156: else if(lights == 2)
 15209  1386  0866               	movf	setDimmerLights_Main@lights,w
 15210  1387  3A02               	xorlw	2
 15211  1388  1D03               	skipz
 15212  1389  2B93               	goto	l9406
 15213                           
 15214                           ;Dimmer_B1.c: 157: {
 15215                           ;Dimmer_B1.c: 158: clear=(!DimmerLights11->Clear)?0:1;
 15216  138A  0879               	movf	_DimmerLights11,w
 15217  138B                     L14:	
 15218  138B  3E0C               	addlw	12
 15219  138C  0086               	movwf	6
 15220  138D  3001               	movlw	1	; select bank2/3
 15221  138E  0087               	movwf	7
 15222  138F  3000               	movlw	0
 15223  1390  1801               	btfsc	1,0
 15224  1391  3001               	movlw	1
 15225  1392  00E5               	movwf	setDimmerLights_Main@clear
 15226  1393                     l9406:	
 15227                           
 15228                           ;Dimmer_B1.c: 159: }
 15229                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 15230  1393  086C               	movf	_DimmerLights,w
 15231  1394  3E09               	addlw	9
 15232  1395  0086               	movwf	6
 15233  1396  3001               	movlw	1	; select bank2/3
 15234  1397  0087               	movwf	7
 15235  1398  1C81               	btfss	1,1
 15236  1399  2BC9               	goto	l9424
 15237                           
 15238                           ;Dimmer_B1.c: 163: {
 15239                           ;Dimmer_B1.c: 164: if(clear)
 15240  139A  0865               	movf	setDimmerLights_Main@clear,w
 15241  139B  1903               	btfsc	3,2
 15242  139C  0008               	return
 15243                           
 15244                           ;Dimmer_B1.c: 165: {
 15245                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 15246  139D  086C               	movf	_DimmerLights,w
 15247  139E  3E09               	addlw	9
 15248  139F  0086               	movwf	6
 15249  13A0  3001               	movlw	1	; select bank2/3
 15250  13A1  0087               	movwf	7
 15251  13A2  1C01               	btfss	1,0
 15252  13A3  2BB7               	goto	l9418
 15253                           
 15254                           ;Dimmer_B1.c: 167: {
 15255                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15256  13A4  086C               	movf	_DimmerLights,w
 15257  13A5  3E09               	addlw	9
 15258  13A6  0086               	movwf	6
 15259  13A7  3001               	movlw	1	; select bank2/3
 15260  13A8  0087               	movwf	7
 15261  13A9  1081               	bcf	1,1
 15262                           
 15263                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 15264  13AA  01A4               	clrf	setDimmerLights@status
 15265  13AB  0AA4               	incf	setDimmerLights@status,f
 15266  13AC  0866               	movf	setDimmerLights_Main@lights,w
 15267  13AD  3196  262E         	fcall	_setDimmerLights
 15268                           
 15269                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15270  13AF  0020               	movlb	0	; select bank0
 15271  13B0  086C               	movf	_DimmerLights,w
 15272  13B1  3E0C               	addlw	12
 15273  13B2  0086               	movwf	6
 15274  13B3  3001               	movlw	1	; select bank2/3
 15275  13B4  0087               	movwf	7
 15276  13B5  1001               	bcf	1,0
 15277                           
 15278                           ;Dimmer_B1.c: 174: }
 15279  13B6  0008               	return
 15280  13B7                     l9418:	
 15281                           
 15282                           ;Dimmer_B1.c: 175: else
 15283                           ;Dimmer_B1.c: 176: {
 15284                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15285  13B7  086C               	movf	_DimmerLights,w
 15286  13B8  3E09               	addlw	9
 15287  13B9  0086               	movwf	6
 15288  13BA  3001               	movlw	1	; select bank2/3
 15289  13BB  0087               	movwf	7
 15290  13BC  1081               	bcf	1,1
 15291                           
 15292                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15293  13BD  01A4               	clrf	setDimmerLights@status
 15294  13BE  0866               	movf	setDimmerLights_Main@lights,w
 15295  13BF  3196  262E         	fcall	_setDimmerLights
 15296                           
 15297                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15298  13C1  0020               	movlb	0	; select bank0
 15299  13C2  086C               	movf	_DimmerLights,w
 15300  13C3  3E0C               	addlw	12
 15301  13C4  0086               	movwf	6
 15302  13C5  3001               	movlw	1	; select bank2/3
 15303  13C6  0087               	movwf	7
 15304  13C7  1001               	bcf	1,0
 15305                           
 15306                           ;Dimmer_B1.c: 183: }
 15307                           ;Dimmer_B1.c: 184: }
 15308                           ;Dimmer_B1.c: 185: }
 15309  13C8  0008               	return
 15310  13C9                     l9424:	
 15311                           
 15312                           ;Dimmer_B1.c: 186: else
 15313                           ;Dimmer_B1.c: 187: {
 15314                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15315  13C9  086C               	movf	_DimmerLights,w
 15316  13CA  3E09               	addlw	9
 15317  13CB  0086               	movwf	6
 15318  13CC  3001               	movlw	1	; select bank2/3
 15319  13CD  0087               	movwf	7
 15320  13CE  1D81               	btfss	1,3
 15321  13CF  0008               	return
 15322                           
 15323                           ;Dimmer_B1.c: 189: {
 15324                           ;Dimmer_B1.c: 190: if(clear)
 15325  13D0  0865               	movf	setDimmerLights_Main@clear,w
 15326  13D1  1903               	btfsc	3,2
 15327  13D2  0008               	return
 15328                           
 15329                           ;Dimmer_B1.c: 191: {
 15330                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15331  13D3  0866               	movf	setDimmerLights_Main@lights,w
 15332  13D4  31A4  24E7  3193   	fcall	_DimmerLightsPointSelect
 15333                           
 15334                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15335  13D7  0020               	movlb	0	; select bank0
 15336  13D8  086C               	movf	_DimmerLights,w
 15337  13D9  3E09               	addlw	9
 15338  13DA  0086               	movwf	6
 15339  13DB  3001               	movlw	1	; select bank2/3
 15340  13DC  0087               	movwf	7
 15341  13DD  1181               	bcf	1,3
 15342                           
 15343                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15344  13DE  086C               	movf	_DimmerLights,w
 15345  13DF  3E09               	addlw	9
 15346  13E0  0086               	movwf	6
 15347  13E1  3001               	movlw	1	; select bank2/3
 15348  13E2  0087               	movwf	7
 15349  13E3  1D01               	btfss	1,2
 15350  13E4  2BF5               	goto	l9436
 15351                           
 15352                           ;Dimmer_B1.c: 195: {
 15353                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15354  13E5  01E2               	clrf	setDimmerLights_Adj@status
 15355  13E6  0AE2               	incf	setDimmerLights_Adj@status,f
 15356  13E7  0866               	movf	setDimmerLights_Main@lights,w
 15357  13E8  319B  23F8  3193   	fcall	_setDimmerLights_Adj
 15358                           
 15359                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15360  13EB  3064               	movlw	100
 15361  13EC  0020               	movlb	0	; select bank0
 15362  13ED  00A6               	movwf	setBuz@time
 15363  13EE  3000               	movlw	0
 15364  13EF  00A7               	movwf	setBuz@time+1
 15365  13F0  3001               	movlw	1
 15366  13F1  3192  220A         	fcall	_setBuz
 15367                           
 15368                           ;Dimmer_B1.c: 198: }
 15369  13F3  0020               	movlb	0	; select bank0
 15370  13F4  0008               	return
 15371  13F5                     l9436:	
 15372                           
 15373                           ;Dimmer_B1.c: 199: else
 15374                           ;Dimmer_B1.c: 200: {
 15375                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15376  13F5  0020               	movlb	0	; select bank0
 15377  13F6  01E2               	clrf	setDimmerLights_Adj@status
 15378  13F7  0866               	movf	setDimmerLights_Main@lights,w
 15379  13F8  319B  23F8         	fcall	_setDimmerLights_Adj
 15380  13FA  0020               	movlb	0	; select bank0
 15381  13FB  0008               	return
 15382  13FC                     __end_of_setDimmerLights_Main:	
 15383                           
 15384                           	psect	text86
 15385  1BF8                     __ptext86:	
 15386 ;; *************** function _setDimmerLights_Adj *****************
 15387 ;; Defined at:
 15388 ;;		line 388 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15389 ;; Parameters:    Size  Location     Type
 15390 ;;  lights          1    wreg     unsigned char 
 15391 ;;  status          1   66[BANK0 ] unsigned char 
 15392 ;; Auto vars:     Size  Location     Type
 15393 ;;  lights          1   68[BANK0 ] unsigned char 
 15394 ;; Return value:  Size  Location     Type
 15395 ;;		None               void
 15396 ;; Registers used:
 15397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15398 ;; Tracked objects:
 15399 ;;		On entry : 0/0
 15400 ;;		On exit  : 0/0
 15401 ;;		Unchanged: 0/0
 15402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15403 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;Total ram usage:        3 bytes
 15408 ;; Hardware stack levels used:    1
 15409 ;; Hardware stack levels required when called:    8
 15410 ;; This function calls:
 15411 ;;		_DimmerLightsPointSelect
 15412 ;;		_setLoad_StatusOff
 15413 ;;		_setRF_DimmerLights
 15414 ;;		_setTxData
 15415 ;; This function is called by:
 15416 ;;		_setDimmerLights_Main
 15417 ;; This function uses a non-reentrant model
 15418 ;;
 15419                           
 15420                           
 15421                           ;psect for function _setDimmerLights_Adj
 15422  1BF8                     _setDimmerLights_Adj:	
 15423                           
 15424                           ;incstack = 0
 15425                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15426                           ;setDimmerLights_Adj@lights stored from wreg
 15427  1BF8  0020               	movlb	0	; select bank0
 15428  1BF9  00E4               	movwf	setDimmerLights_Adj@lights
 15429                           
 15430                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15431  1BFA  0864               	movf	setDimmerLights_Adj@lights,w
 15432  1BFB  31A4  24E7  319B   	fcall	_DimmerLightsPointSelect
 15433                           
 15434                           ;Dimmer_B1.c: 391: if(status)
 15435  1BFE  0020               	movlb	0	; select bank0
 15436  1BFF  0862               	movf	setDimmerLights_Adj@status,w
 15437  1C00  1903               	btfsc	3,2
 15438  1C01  2C0D               	goto	l9122
 15439                           
 15440                           ;Dimmer_B1.c: 392: {
 15441                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15442  1C02  086C               	movf	_DimmerLights,w
 15443  1C03  0086               	movwf	6
 15444  1C04  3001               	movlw	1	; select bank2/3
 15445  1C05  0087               	movwf	7
 15446  1C06  1581               	bsf	1,3
 15447                           
 15448                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15449  1C07  086C               	movf	_DimmerLights,w
 15450  1C08  0086               	movwf	6
 15451  1C09  3001               	movlw	1	; select bank2/3
 15452  1C0A  0087               	movwf	7
 15453  1C0B  1481               	bsf	1,1
 15454                           
 15455                           ;Dimmer_B1.c: 395: }
 15456  1C0C  0008               	return
 15457  1C0D                     l9122:	
 15458                           
 15459                           ;Dimmer_B1.c: 396: else
 15460                           ;Dimmer_B1.c: 397: {
 15461                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15462  1C0D  086C               	movf	_DimmerLights,w
 15463  1C0E  0086               	movwf	6
 15464  1C0F  3001               	movlw	1	; select bank2/3
 15465  1C10  0087               	movwf	7
 15466  1C11  1D81               	btfss	1,3
 15467  1C12  0008               	return
 15468                           
 15469                           ;Dimmer_B1.c: 399: {
 15470                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15471  1C13  086C               	movf	_DimmerLights,w
 15472  1C14  0086               	movwf	6
 15473  1C15  3001               	movlw	1	; select bank2/3
 15474  1C16  0087               	movwf	7
 15475  1C17  1081               	bcf	1,1
 15476                           
 15477                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15478  1C18  086C               	movf	_DimmerLights,w
 15479  1C19  0086               	movwf	6
 15480  1C1A  3001               	movlw	1	; select bank2/3
 15481  1C1B  0087               	movwf	7
 15482  1C1C  1181               	bcf	1,3
 15483                           
 15484                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15485  1C1D  01A0               	clrf	setLoad_StatusOff@command
 15486  1C1E  0AA0               	incf	setLoad_StatusOff@command,f
 15487  1C1F  3000               	movlw	0
 15488  1C20  3199  2178  319B   	fcall	_setLoad_StatusOff
 15489                           
 15490                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15491  1C23  0020               	movlb	0	; select bank0
 15492  1C24  086C               	movf	_DimmerLights,w
 15493  1C25  3E04               	addlw	4
 15494  1C26  0086               	movwf	6
 15495  1C27  3001               	movlw	1	; select bank2/3
 15496  1C28  0087               	movwf	7
 15497  1C29  0801               	movf	1,w
 15498  1C2A  00E3               	movwf	??_setDimmerLights_Adj
 15499  1C2B  086C               	movf	_DimmerLights,w
 15500  1C2C  3E05               	addlw	5
 15501  1C2D  0086               	movwf	6
 15502  1C2E  3001               	movlw	1	; select bank2/3
 15503  1C2F  0087               	movwf	7
 15504  1C30  0863               	movf	??_setDimmerLights_Adj,w
 15505  1C31  0081               	movwf	1
 15506                           
 15507                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15508  1C32  01DD               	clrf	setRF_DimmerLights@on
 15509  1C33  0ADD               	incf	setRF_DimmerLights@on,f
 15510  1C34  0864               	movf	setDimmerLights_Adj@lights,w
 15511  1C35  319F  2795  319B   	fcall	_setRF_DimmerLights
 15512                           
 15513                           ;Dimmer_B1.c: 412: setTxData(1);
 15514  1C38  3001               	movlw	1
 15515  1C39  3189  21BD         	fcall	_setTxData
 15516  1C3B  0008               	return
 15517  1C3C                     __end_of_setDimmerLights_Adj:	
 15518                           
 15519                           	psect	text87
 15520  1978                     __ptext87:	
 15521 ;; *************** function _setLoad_StatusOff *****************
 15522 ;; Defined at:
 15523 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  lights          1    wreg     unsigned char 
 15526 ;;  command         1    0[BANK0 ] unsigned char 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;  lights          1    1[BANK0 ] unsigned char 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;		None               void
 15531 ;; Registers used:
 15532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;Total ram usage:        2 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    4
 15545 ;; This function calls:
 15546 ;;		Nothing
 15547 ;; This function is called by:
 15548 ;;		_setDimmerLights_ERROR
 15549 ;;		_setDimmerLights_Adj
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           
 15554                           ;psect for function _setLoad_StatusOff
 15555  1978                     _setLoad_StatusOff:	
 15556                           
 15557                           ;incstack = 0
 15558                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15559                           ;setLoad_StatusOff@lights stored from wreg
 15560  1978  0020               	movlb	0	; select bank0
 15561  1979  00A1               	movwf	setLoad_StatusOff@lights
 15562                           
 15563                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 15564  197A  086E               	movf	_Load,w
 15565  197B  3E46               	addlw	70
 15566  197C  0086               	movwf	6
 15567  197D  3002               	movlw	2	; select bank4/5
 15568  197E  0087               	movwf	7
 15569  197F  0820               	movf	setLoad_StatusOff@command,w
 15570  1980  1081               	bcf	1,1
 15571  1981  1D03               	skipz
 15572  1982  1481               	bsf	1,1
 15573                           
 15574                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 15575  1983  086E               	movf	_Load,w
 15576  1984  3E42               	addlw	66
 15577  1985  0086               	movwf	6
 15578  1986  3002               	movlw	2	; select bank4/5
 15579  1987  0087               	movwf	7
 15580  1988  3002               	movlw	2
 15581  1989  0281               	subwf	1,f
 15582                           
 15583                           ;OverLoad_B1.c: 326: if(lights == 1)
 15584  198A  0821               	movf	setLoad_StatusOff@lights,w
 15585  198B  3A01               	xorlw	1
 15586  198C  1D03               	skipz
 15587  198D  2994               	goto	l8782
 15588                           
 15589                           ;OverLoad_B1.c: 327: {
 15590                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 15591  198E  086E               	movf	_Load,w
 15592  198F  3E43               	addlw	67
 15593  1990  0086               	movwf	6
 15594  1991  3002               	movlw	2	; select bank4/5
 15595  1992  0087               	movwf	7
 15596  1993  0181               	clrf	1
 15597  1994                     l8782:	
 15598                           
 15599                           ;OverLoad_B1.c: 329: }
 15600                           ;OverLoad_B1.c: 330: if(lights == 2)
 15601  1994  0821               	movf	setLoad_StatusOff@lights,w
 15602  1995  3A02               	xorlw	2
 15603  1996  1D03               	skipz
 15604  1997  299E               	goto	l8786
 15605                           
 15606                           ;OverLoad_B1.c: 331: {
 15607                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 15608  1998  086E               	movf	_Load,w
 15609  1999  3E44               	addlw	68
 15610  199A  0086               	movwf	6
 15611  199B  3002               	movlw	2	; select bank4/5
 15612  199C  0087               	movwf	7
 15613  199D  0181               	clrf	1
 15614  199E                     l8786:	
 15615                           
 15616                           ;OverLoad_B1.c: 333: }
 15617                           ;OverLoad_B1.c: 334: if(lights == 3)
 15618  199E  0821               	movf	setLoad_StatusOff@lights,w
 15619  199F  3A03               	xorlw	3
 15620  19A0  1D03               	skipz
 15621  19A1  0008               	return
 15622                           
 15623                           ;OverLoad_B1.c: 335: {
 15624                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 15625  19A2  086E               	movf	_Load,w
 15626  19A3  3E45               	addlw	69
 15627  19A4  0086               	movwf	6
 15628  19A5  3002               	movlw	2	; select bank4/5
 15629  19A6  0087               	movwf	7
 15630  19A7  0181               	clrf	1
 15631  19A8  0008               	return
 15632  19A9                     __end_of_setLoad_StatusOff:	
 15633                           
 15634                           	psect	text88
 15635  162E                     __ptext88:	
 15636 ;; *************** function _setDimmerLights *****************
 15637 ;; Defined at:
 15638 ;;		line 330 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  lights          1    wreg     unsigned char 
 15641 ;;  status          1    4[BANK0 ] unsigned char 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  lights          1    6[BANK0 ] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;		None               void
 15646 ;; Registers used:
 15647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15653 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15657 ;;Total ram usage:        3 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    6
 15660 ;; This function calls:
 15661 ;;		_DimmerLightsPointSelect
 15662 ;;		_setLED
 15663 ;;		_setLoad_Count
 15664 ;;		_setLoad_StatusOn
 15665 ;; This function is called by:
 15666 ;;		_setDimmerLights_Main
 15667 ;;		_setControl_Lights_Table
 15668 ;; This function uses a non-reentrant model
 15669 ;;
 15670                           
 15671                           
 15672                           ;psect for function _setDimmerLights
 15673  162E                     _setDimmerLights:	
 15674                           
 15675                           ;incstack = 0
 15676                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15677                           ;setDimmerLights@lights stored from wreg
 15678  162E  0020               	movlb	0	; select bank0
 15679  162F  00A6               	movwf	setDimmerLights@lights
 15680                           
 15681                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15682  1630  0826               	movf	setDimmerLights@lights,w
 15683  1631  31A4  24E7  3196   	fcall	_DimmerLightsPointSelect
 15684                           
 15685                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15686  1634  0020               	movlb	0	; select bank0
 15687  1635  0826               	movf	setDimmerLights@lights,w
 15688  1636  00A5               	movwf	??_setDimmerLights
 15689  1637  0021               	movlb	1	; select bank1
 15690  1638  0A39               	incf	_Dimmer^(0+128),w
 15691  1639  0086               	movwf	6
 15692  163A  0187               	clrf	7
 15693  163B  0020               	movlb	0	; select bank0
 15694  163C  0825               	movf	??_setDimmerLights,w
 15695  163D  0081               	movwf	1
 15696                           
 15697                           ;Dimmer_B1.c: 334: if(status)
 15698  163E  0824               	movf	setDimmerLights@status,w
 15699  163F  1903               	btfsc	3,2
 15700  1640  2E96               	goto	l8878
 15701                           
 15702                           ;Dimmer_B1.c: 335: {
 15703                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15704  1641  086C               	movf	_DimmerLights,w
 15705  1642  0086               	movwf	6
 15706  1643  3001               	movlw	1	; select bank2/3
 15707  1644  0087               	movwf	7
 15708  1645  1681               	bsf	1,5
 15709                           
 15710                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15711  1646  01A2               	clrf	setLED@command
 15712  1647  0826               	movf	setDimmerLights@lights,w
 15713  1648  3188  2002  3196   	fcall	_setLED
 15714                           
 15715                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15716  164B  3000               	movlw	0
 15717  164C  31A5  254C  3196   	fcall	_setLoad_Count
 15718                           
 15719                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15720  164F  0020               	movlb	0	; select bank0
 15721  1650  086C               	movf	_DimmerLights,w
 15722  1651  0086               	movwf	6
 15723  1652  3001               	movlw	1	; select bank2/3
 15724  1653  0087               	movwf	7
 15725  1654  1481               	bsf	1,1
 15726                           
 15727                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15728  1655  3003               	movlw	3
 15729  1656  00A5               	movwf	??_setDimmerLights
 15730  1657  086C               	movf	_DimmerLights,w
 15731  1658  3E02               	addlw	2
 15732  1659  0086               	movwf	6
 15733  165A  3001               	movlw	1	; select bank2/3
 15734  165B  0087               	movwf	7
 15735  165C  0825               	movf	??_setDimmerLights,w
 15736  165D  0081               	movwf	1
 15737                           
 15738                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15739  165E  086C               	movf	_DimmerLights,w
 15740  165F  0086               	movwf	6
 15741  1660  3001               	movlw	1	; select bank2/3
 15742  1661  0087               	movwf	7
 15743  1662  1B01               	btfsc	1,6
 15744  1663  0008               	return
 15745                           
 15746                           ;Dimmer_B1.c: 345: {
 15747                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15748  1664  086C               	movf	_DimmerLights,w
 15749  1665  0086               	movwf	6
 15750  1666  3001               	movlw	1	; select bank2/3
 15751  1667  0087               	movwf	7
 15752  1668  1701               	bsf	1,6
 15753                           
 15754                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15755  1669  01A0               	clrf	setLoad_StatusOn@command
 15756  166A  0AA0               	incf	setLoad_StatusOn@command,f
 15757  166B  0826               	movf	setDimmerLights@lights,w
 15758  166C  3199  21DA         	fcall	_setLoad_StatusOn
 15759                           
 15760                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15761  166E  0021               	movlb	1	; select bank1
 15762  166F  0869               	movf	_Memory^(0+128),w
 15763  1670  3E22               	addlw	34
 15764  1671  0086               	movwf	6
 15765  1672  3002               	movlw	2	; select bank4/5
 15766  1673  0087               	movwf	7
 15767  1674  1081               	bcf	1,1
 15768  1675  0869               	movf	_Memory^(0+128),w
 15769  1676  3E23               	addlw	35
 15770  1677  0086               	movwf	6
 15771  1678  3002               	movlw	2	; select bank4/5
 15772  1679  0087               	movwf	7
 15773  167A  3000               	movlw	0
 15774  167B  3FC0               	movwi [0]fsr1
 15775  167C  3FC1               	movwi [1]fsr1
 15776                           
 15777                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15778  167D  0020               	movlb	0	; select bank0
 15779  167E  086C               	movf	_DimmerLights,w
 15780  167F  3E05               	addlw	5
 15781  1680  0086               	movwf	6
 15782  1681  3001               	movlw	1	; select bank2/3
 15783  1682  0087               	movwf	7
 15784  1683  0801               	movf	1,w
 15785  1684  00A5               	movwf	??_setDimmerLights
 15786  1685  086C               	movf	_DimmerLights,w
 15787  1686  3E04               	addlw	4
 15788  1687  0086               	movwf	6
 15789  1688  3001               	movlw	1	; select bank2/3
 15790  1689  0087               	movwf	7
 15791  168A  0825               	movf	??_setDimmerLights,w
 15792  168B  0081               	movwf	1
 15793                           
 15794                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15795  168C  3043               	movlw	67
 15796  168D  00A5               	movwf	??_setDimmerLights
 15797  168E  086C               	movf	_DimmerLights,w
 15798  168F  3E04               	addlw	4
 15799  1690  0086               	movwf	6
 15800  1691  3001               	movlw	1	; select bank2/3
 15801  1692  0087               	movwf	7
 15802  1693  0825               	movf	??_setDimmerLights,w
 15803  1694  0081               	movwf	1
 15804                           
 15805                           ;Dimmer_B1.c: 357: }
 15806                           ;Dimmer_B1.c: 358: }
 15807  1695  0008               	return
 15808  1696                     l8878:	
 15809                           
 15810                           ;Dimmer_B1.c: 359: else
 15811                           ;Dimmer_B1.c: 360: {
 15812                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15813  1696  086C               	movf	_DimmerLights,w
 15814  1697  0086               	movwf	6
 15815  1698  3001               	movlw	1	; select bank2/3
 15816  1699  0087               	movwf	7
 15817  169A  1281               	bcf	1,5
 15818                           
 15819                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15820  169B  086C               	movf	_DimmerLights,w
 15821  169C  3E06               	addlw	6
 15822  169D  0086               	movwf	6
 15823  169E  3001               	movlw	1	; select bank2/3
 15824  169F  0087               	movwf	7
 15825  16A0  0801               	movf	1,w
 15826  16A1  00A5               	movwf	??_setDimmerLights
 15827  16A2  086C               	movf	_DimmerLights,w
 15828  16A3  3E04               	addlw	4
 15829  16A4  0086               	movwf	6
 15830  16A5  3001               	movlw	1	; select bank2/3
 15831  16A6  0087               	movwf	7
 15832  16A7  0825               	movf	??_setDimmerLights,w
 15833  16A8  0081               	movwf	1
 15834                           
 15835                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15836  16A9  086C               	movf	_DimmerLights,w
 15837  16AA  0086               	movwf	6
 15838  16AB  3001               	movlw	1	; select bank2/3
 15839  16AC  0087               	movwf	7
 15840  16AD  1481               	bsf	1,1
 15841                           
 15842                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15843  16AE  086C               	movf	_DimmerLights,w
 15844  16AF  0086               	movwf	6
 15845  16B0  3001               	movlw	1	; select bank2/3
 15846  16B1  0087               	movwf	7
 15847  16B2  1181               	bcf	1,3
 15848                           
 15849                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15850  16B3  086C               	movf	_DimmerLights,w
 15851  16B4  0086               	movwf	6
 15852  16B5  3001               	movlw	1	; select bank2/3
 15853  16B6  0087               	movwf	7
 15854  16B7  1201               	bcf	1,4
 15855                           
 15856                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15857  16B8  3003               	movlw	3
 15858  16B9  00A5               	movwf	??_setDimmerLights
 15859  16BA  086C               	movf	_DimmerLights,w
 15860  16BB  3E02               	addlw	2
 15861  16BC  0086               	movwf	6
 15862  16BD  3001               	movlw	1	; select bank2/3
 15863  16BE  0087               	movwf	7
 15864  16BF  0825               	movf	??_setDimmerLights,w
 15865  16C0  0081               	movwf	1
 15866  16C1  0008               	return
 15867  16C2                     __end_of_setDimmerLights:	
 15868                           
 15869                           	psect	text89
 15870  19DA                     __ptext89:	
 15871 ;; *************** function _setLoad_StatusOn *****************
 15872 ;; Defined at:
 15873 ;;		line 304 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15874 ;; Parameters:    Size  Location     Type
 15875 ;;  lights          1    wreg     unsigned char 
 15876 ;;  command         1    0[BANK0 ] unsigned char 
 15877 ;; Auto vars:     Size  Location     Type
 15878 ;;  lights          1    1[BANK0 ] unsigned char 
 15879 ;; Return value:  Size  Location     Type
 15880 ;;		None               void
 15881 ;; Registers used:
 15882 ;;		wreg, fsr1l, fsr1h
 15883 ;; Tracked objects:
 15884 ;;		On entry : 0/0
 15885 ;;		On exit  : 0/0
 15886 ;;		Unchanged: 0/0
 15887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15888 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;Total ram usage:        2 bytes
 15893 ;; Hardware stack levels used:    1
 15894 ;; Hardware stack levels required when called:    4
 15895 ;; This function calls:
 15896 ;;		Nothing
 15897 ;; This function is called by:
 15898 ;;		_setDimmerLights
 15899 ;; This function uses a non-reentrant model
 15900 ;;
 15901                           
 15902                           
 15903                           ;psect for function _setLoad_StatusOn
 15904  19DA                     _setLoad_StatusOn:	
 15905                           
 15906                           ;incstack = 0
 15907                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15908                           ;setLoad_StatusOn@lights stored from wreg
 15909  19DA  0020               	movlb	0	; select bank0
 15910  19DB  00A1               	movwf	setLoad_StatusOn@lights
 15911                           
 15912                           ;OverLoad_B1.c: 306: Load->GO=1;
 15913  19DC  086E               	movf	_Load,w
 15914  19DD  0086               	movwf	6
 15915  19DE  3002               	movlw	2	; select bank4/5
 15916  19DF  0087               	movwf	7
 15917  19E0  1481               	bsf	1,1
 15918                           
 15919                           ;OverLoad_B1.c: 307: Load->StatusOn=command;
 15920  19E1  086E               	movf	_Load,w
 15921  19E2  3E46               	addlw	70
 15922  19E3  0086               	movwf	6
 15923  19E4  3002               	movlw	2	; select bank4/5
 15924  19E5  0087               	movwf	7
 15925  19E6  0820               	movf	setLoad_StatusOn@command,w
 15926  19E7  1001               	bcf	1,0
 15927  19E8  1D03               	skipz
 15928  19E9  1401               	bsf	1,0
 15929                           
 15930                           ;OverLoad_B1.c: 309: if(lights == 1)
 15931  19EA  0821               	movf	setLoad_StatusOn@lights,w
 15932  19EB  3A01               	xorlw	1
 15933  19EC  1D03               	skipz
 15934  19ED  29F5               	goto	l8846
 15935                           
 15936                           ;OverLoad_B1.c: 310: {
 15937                           ;OverLoad_B1.c: 311: Load->Lights1Status=1;
 15938  19EE  086E               	movf	_Load,w
 15939  19EF  3E43               	addlw	67
 15940  19F0  0086               	movwf	6
 15941  19F1  3002               	movlw	2	; select bank4/5
 15942  19F2  0087               	movwf	7
 15943  19F3  0181               	clrf	1
 15944  19F4  0A81               	incf	1,f
 15945  19F5                     l8846:	
 15946                           
 15947                           ;OverLoad_B1.c: 312: }
 15948                           ;OverLoad_B1.c: 313: if(lights == 2)
 15949  19F5  0821               	movf	setLoad_StatusOn@lights,w
 15950  19F6  3A02               	xorlw	2
 15951  19F7  1D03               	skipz
 15952  19F8  2A00               	goto	l8850
 15953                           
 15954                           ;OverLoad_B1.c: 314: {
 15955                           ;OverLoad_B1.c: 315: Load->Lights2Status=1;
 15956  19F9  086E               	movf	_Load,w
 15957  19FA  3E44               	addlw	68
 15958  19FB  0086               	movwf	6
 15959  19FC  3002               	movlw	2	; select bank4/5
 15960  19FD  0087               	movwf	7
 15961  19FE  0181               	clrf	1
 15962  19FF  0A81               	incf	1,f
 15963  1A00                     l8850:	
 15964                           
 15965                           ;OverLoad_B1.c: 316: }
 15966                           ;OverLoad_B1.c: 317: if(lights == 3)
 15967  1A00  0821               	movf	setLoad_StatusOn@lights,w
 15968  1A01  3A03               	xorlw	3
 15969  1A02  1D03               	skipz
 15970  1A03  0008               	return
 15971                           
 15972                           ;OverLoad_B1.c: 318: {
 15973                           ;OverLoad_B1.c: 319: Load->Lights3Status=1;
 15974  1A04  086E               	movf	_Load,w
 15975  1A05  3E45               	addlw	69
 15976  1A06  0086               	movwf	6
 15977  1A07  3002               	movlw	2	; select bank4/5
 15978  1A08  0087               	movwf	7
 15979  1A09  0181               	clrf	1
 15980  1A0A  0A81               	incf	1,f
 15981  1A0B  0008               	return
 15982  1A0C                     __end_of_setLoad_StatusOn:	
 15983                           
 15984                           	psect	text90
 15985  254C                     __ptext90:	
 15986 ;; *************** function _setLoad_Count *****************
 15987 ;; Defined at:
 15988 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  command         1    wreg     unsigned char 
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  command         1    1[BANK0 ] unsigned char 
 15993 ;; Return value:  Size  Location     Type
 15994 ;;		None               void
 15995 ;; Registers used:
 15996 ;;		wreg, fsr1l, fsr1h
 15997 ;; Tracked objects:
 15998 ;;		On entry : 0/0
 15999 ;;		On exit  : 0/0
 16000 ;;		Unchanged: 0/0
 16001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;Total ram usage:        2 bytes
 16007 ;; Hardware stack levels used:    1
 16008 ;; Hardware stack levels required when called:    4
 16009 ;; This function calls:
 16010 ;;		Nothing
 16011 ;; This function is called by:
 16012 ;;		_setDimmerLights
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016                           
 16017                           ;psect for function _setLoad_Count
 16018  254C                     _setLoad_Count:	
 16019                           
 16020                           ;incstack = 0
 16021                           ; Regs used in _setLoad_Count: [wregfsr1]
 16022                           ;setLoad_Count@command stored from wreg
 16023  254C  0020               	movlb	0	; select bank0
 16024  254D  00A1               	movwf	setLoad_Count@command
 16025                           
 16026                           ;OverLoad_B1.c: 291: Load->Count=command;
 16027  254E  0821               	movf	setLoad_Count@command,w
 16028  254F  00A0               	movwf	??_setLoad_Count
 16029  2550  086E               	movf	_Load,w
 16030  2551  3E3A               	addlw	58
 16031  2552  0086               	movwf	6
 16032  2553  3002               	movlw	2	; select bank4/5
 16033  2554  0087               	movwf	7
 16034  2555  0820               	movf	??_setLoad_Count,w
 16035  2556  0081               	movwf	1
 16036                           
 16037                           ;OverLoad_B1.c: 292: Load->SafeCount=command;
 16038  2557  0821               	movf	setLoad_Count@command,w
 16039  2558  00A0               	movwf	??_setLoad_Count
 16040  2559  086E               	movf	_Load,w
 16041  255A  3E42               	addlw	66
 16042  255B  0086               	movwf	6
 16043  255C  3002               	movlw	2	; select bank4/5
 16044  255D  0087               	movwf	7
 16045  255E  0820               	movf	??_setLoad_Count,w
 16046  255F  0081               	movwf	1
 16047  2560  0008               	return
 16048  2561                     __end_of_setLoad_Count:	
 16049                           
 16050                           	psect	text91
 16051  0802                     __ptext91:	
 16052 ;; *************** function _setLED *****************
 16053 ;; Defined at:
 16054 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16055 ;; Parameters:    Size  Location     Type
 16056 ;;  led             1    wreg     unsigned char 
 16057 ;;  command         1    2[BANK0 ] unsigned char 
 16058 ;; Auto vars:     Size  Location     Type
 16059 ;;  led             1    3[BANK0 ] unsigned char 
 16060 ;; Return value:  Size  Location     Type
 16061 ;;		None               void
 16062 ;; Registers used:
 16063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16064 ;; Tracked objects:
 16065 ;;		On entry : 0/0
 16066 ;;		On exit  : 0/0
 16067 ;;		Unchanged: 0/0
 16068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16073 ;;Total ram usage:        2 bytes
 16074 ;; Hardware stack levels used:    1
 16075 ;; Hardware stack levels required when called:    5
 16076 ;; This function calls:
 16077 ;;		_LedPointSelect
 16078 ;; This function is called by:
 16079 ;;		_setDimmerLights_ERROR
 16080 ;;		_setDimmerLights
 16081 ;;		_setLED_Initialization
 16082 ;;		_setLoad_Exceptions
 16083 ;;		_setOverTemp_Exceptions
 16084 ;;		_setPowerFault_Exceptions
 16085 ;;		_setSw_Initialization
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           
 16090                           ;psect for function _setLED
 16091  0802                     _setLED:	
 16092                           
 16093                           ;incstack = 0
 16094                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16095                           ;setLED@led stored from wreg
 16096  0802  0020               	movlb	0	; select bank0
 16097  0803  00A3               	movwf	setLED@led
 16098                           
 16099                           ;LED_B1.c: 76: LedPointSelect(led);
 16100  0804  0823               	movf	setLED@led,w
 16101  0805  31A7  2728  3188   	fcall	_LedPointSelect
 16102                           
 16103                           ;LED_B1.c: 77: if(command == 0)
 16104  0808  0020               	movlb	0	; select bank0
 16105  0809  08A2               	movf	setLED@command,f
 16106  080A  1D03               	skipz
 16107  080B  281E               	goto	l8806
 16108                           
 16109                           ;LED_B1.c: 78: {
 16110                           ;LED_B1.c: 80: if(led == 1)
 16111  080C  0823               	movf	setLED@led,w
 16112  080D  3A01               	xorlw	1
 16113  080E  1D03               	skipz
 16114  080F  2812               	goto	l8798
 16115                           
 16116                           ;LED_B1.c: 81: {
 16117                           ;LED_B1.c: 85: RA3=1;
 16118  0810  158C               	bsf	12,3	;volatile
 16119                           
 16120                           ;LED_B1.c: 87: }
 16121  0811  0008               	return
 16122  0812                     l8798:	
 16123                           
 16124                           ;LED_B1.c: 90: else if(led == 2)
 16125  0812  0823               	movf	setLED@led,w
 16126  0813  3A02               	xorlw	2
 16127  0814  1D03               	skipz
 16128  0815  2818               	goto	l8802
 16129                           
 16130                           ;LED_B1.c: 91: {
 16131                           ;LED_B1.c: 95: RC7=1;
 16132  0816  178E               	bsf	14,7	;volatile
 16133                           
 16134                           ;LED_B1.c: 97: }
 16135  0817  0008               	return
 16136  0818                     l8802:	
 16137                           
 16138                           ;LED_B1.c: 110: else if(led == 99)
 16139  0818  0823               	movf	setLED@led,w
 16140  0819  3A63               	xorlw	99
 16141  081A  1D03               	skipz
 16142  081B  0008               	return
 16143                           
 16144                           ;LED_B1.c: 111: {
 16145                           ;LED_B1.c: 115: RB5=1;
 16146  081C  168D               	bsf	13,5	;volatile
 16147                           
 16148                           ;LED_B1.c: 117: }
 16149                           ;LED_B1.c: 119: }
 16150  081D  0008               	return
 16151  081E                     l8806:	
 16152                           
 16153                           ;LED_B1.c: 120: else if(command == 1)
 16154  081E  0822               	movf	setLED@command,w
 16155  081F  3A01               	xorlw	1
 16156  0820  1D03               	skipz
 16157  0821  2834               	goto	l8820
 16158                           
 16159                           ;LED_B1.c: 121: {
 16160                           ;LED_B1.c: 123: if(led == 1)
 16161  0822  0823               	movf	setLED@led,w
 16162  0823  3A01               	xorlw	1
 16163  0824  1D03               	skipz
 16164  0825  2828               	goto	l8812
 16165                           
 16166                           ;LED_B1.c: 124: {
 16167                           ;LED_B1.c: 128: RA3=0;
 16168  0826  118C               	bcf	12,3	;volatile
 16169                           
 16170                           ;LED_B1.c: 130: }
 16171  0827  0008               	return
 16172  0828                     l8812:	
 16173                           
 16174                           ;LED_B1.c: 133: else if(led == 2)
 16175  0828  0823               	movf	setLED@led,w
 16176  0829  3A02               	xorlw	2
 16177  082A  1D03               	skipz
 16178  082B  282E               	goto	l8816
 16179                           
 16180                           ;LED_B1.c: 134: {
 16181                           ;LED_B1.c: 138: RC7=0;
 16182  082C  138E               	bcf	14,7	;volatile
 16183                           
 16184                           ;LED_B1.c: 140: }
 16185  082D  0008               	return
 16186  082E                     l8816:	
 16187                           
 16188                           ;LED_B1.c: 153: else if(led == 99)
 16189  082E  0823               	movf	setLED@led,w
 16190  082F  3A63               	xorlw	99
 16191  0830  1D03               	skipz
 16192  0831  0008               	return
 16193                           
 16194                           ;LED_B1.c: 154: {
 16195                           ;LED_B1.c: 158: RB5=0;
 16196  0832  128D               	bcf	13,5	;volatile
 16197                           
 16198                           ;LED_B1.c: 160: }
 16199                           ;LED_B1.c: 162: }
 16200  0833  0008               	return
 16201  0834                     l8820:	
 16202                           
 16203                           ;LED_B1.c: 163: else if(command == 10)
 16204  0834  0822               	movf	setLED@command,w
 16205  0835  3A0A               	xorlw	10
 16206  0836  1D03               	skipz
 16207  0837  2856               	goto	l8836
 16208                           
 16209                           ;LED_B1.c: 164: {
 16210                           ;LED_B1.c: 165: LED->GO=0;
 16211  0838  0021               	movlb	1	; select bank1
 16212  0839  083B               	movf	_LED^(0+128),w
 16213  083A  0086               	movwf	6
 16214  083B  0187               	clrf	7
 16215  083C  1081               	bcf	1,1
 16216                           
 16217                           ;LED_B1.c: 166: LED->Time=0;
 16218  083D  0A3B               	incf	_LED^(0+128),w
 16219  083E  0086               	movwf	6
 16220  083F  0187               	clrf	7
 16221  0840  3000               	movlw	0
 16222  0841  3FC0               	movwi [0]fsr1
 16223  0842  3FC1               	movwi [1]fsr1
 16224                           
 16225                           ;LED_B1.c: 168: if(led == 1)
 16226  0843  0020               	movlb	0	; select bank0
 16227  0844  0823               	movf	setLED@led,w
 16228  0845  3A01               	xorlw	1
 16229  0846  1D03               	skipz
 16230  0847  284A               	goto	l8828
 16231                           
 16232                           ;LED_B1.c: 169: {
 16233                           ;LED_B1.c: 173: RA3=1;
 16234  0848  158C               	bsf	12,3	;volatile
 16235                           
 16236                           ;LED_B1.c: 175: }
 16237  0849  0008               	return
 16238  084A                     l8828:	
 16239                           
 16240                           ;LED_B1.c: 178: else if(led == 2)
 16241  084A  0823               	movf	setLED@led,w
 16242  084B  3A02               	xorlw	2
 16243  084C  1D03               	skipz
 16244  084D  2850               	goto	l8832
 16245                           
 16246                           ;LED_B1.c: 179: {
 16247                           ;LED_B1.c: 183: RC7=1;
 16248  084E  178E               	bsf	14,7	;volatile
 16249                           
 16250                           ;LED_B1.c: 185: }
 16251  084F  0008               	return
 16252  0850                     l8832:	
 16253                           
 16254                           ;LED_B1.c: 198: else if(led == 99)
 16255  0850  0823               	movf	setLED@led,w
 16256  0851  3A63               	xorlw	99
 16257  0852  1D03               	skipz
 16258  0853  0008               	return
 16259                           
 16260                           ;LED_B1.c: 199: {
 16261                           ;LED_B1.c: 203: RB5=1;
 16262  0854  168D               	bsf	13,5	;volatile
 16263                           
 16264                           ;LED_B1.c: 205: }
 16265                           ;LED_B1.c: 207: }
 16266  0855  0008               	return
 16267  0856                     l8836:	
 16268                           
 16269                           ;LED_B1.c: 208: else if(command == 11)
 16270  0856  0822               	movf	setLED@command,w
 16271  0857  3A0B               	xorlw	11
 16272  0858  1D03               	skipz
 16273  0859  0008               	return
 16274                           
 16275                           ;LED_B1.c: 209: {
 16276                           ;LED_B1.c: 210: LED->GO=1;
 16277  085A  0021               	movlb	1	; select bank1
 16278  085B  083B               	movf	_LED^(0+128),w
 16279  085C  0086               	movwf	6
 16280  085D  0187               	clrf	7
 16281  085E  1481               	bsf	1,1
 16282  085F  0008               	return
 16283  0860                     __end_of_setLED:	
 16284                           
 16285                           	psect	text92
 16286  2728                     __ptext92:	
 16287 ;; *************** function _LedPointSelect *****************
 16288 ;; Defined at:
 16289 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16290 ;; Parameters:    Size  Location     Type
 16291 ;;  led             1    wreg     unsigned char 
 16292 ;; Auto vars:     Size  Location     Type
 16293 ;;  led             1    1[BANK0 ] unsigned char 
 16294 ;; Return value:  Size  Location     Type
 16295 ;;		None               void
 16296 ;; Registers used:
 16297 ;;		wreg
 16298 ;; Tracked objects:
 16299 ;;		On entry : 0/0
 16300 ;;		On exit  : 0/0
 16301 ;;		Unchanged: 0/0
 16302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;Total ram usage:        2 bytes
 16308 ;; Hardware stack levels used:    1
 16309 ;; Hardware stack levels required when called:    4
 16310 ;; This function calls:
 16311 ;;		Nothing
 16312 ;; This function is called by:
 16313 ;;		_setLED_Initialization
 16314 ;;		_setLED
 16315 ;;		_setLED_Main
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           
 16320                           ;psect for function _LedPointSelect
 16321  2728                     _LedPointSelect:	
 16322                           
 16323                           ;incstack = 0
 16324                           ; Regs used in _LedPointSelect: [wreg]
 16325                           ;LedPointSelect@led stored from wreg
 16326  2728  0020               	movlb	0	; select bank0
 16327  2729  00A1               	movwf	LedPointSelect@led
 16328                           
 16329                           ;LED_B1.c: 10: if(led == 1)
 16330  272A  0821               	movf	LedPointSelect@led,w
 16331  272B  3A01               	xorlw	1
 16332  272C  1D03               	skipz
 16333  272D  2F34               	goto	l6486
 16334                           
 16335                           ;LED_B1.c: 11: {
 16336                           ;LED_B1.c: 12: LED=&VarLED1;
 16337  272E  30D9               	movlw	_VarLED1& (0+255)
 16338  272F  00A0               	movwf	??_LedPointSelect
 16339  2730  0820               	movf	??_LedPointSelect,w
 16340  2731  0021               	movlb	1	; select bank1
 16341  2732  00BB               	movwf	_LED^(0+128)
 16342                           
 16343                           ;LED_B1.c: 13: }
 16344  2733  0008               	return
 16345  2734                     l6486:	
 16346                           
 16347                           ;LED_B1.c: 16: else if(led == 2)
 16348  2734  0020               	movlb	0	; select bank0
 16349  2735  0821               	movf	LedPointSelect@led,w
 16350  2736  3A02               	xorlw	2
 16351  2737  1D03               	skipz
 16352  2738  2F3F               	goto	l6490
 16353                           
 16354                           ;LED_B1.c: 17: {
 16355                           ;LED_B1.c: 18: LED=&VarLED2;
 16356  2739  30DD               	movlw	_VarLED2& (0+255)
 16357  273A  00A0               	movwf	??_LedPointSelect
 16358  273B  0820               	movf	??_LedPointSelect,w
 16359  273C  0021               	movlb	1	; select bank1
 16360  273D  00BB               	movwf	_LED^(0+128)
 16361                           
 16362                           ;LED_B1.c: 19: }
 16363  273E  0008               	return
 16364  273F                     l6490:	
 16365                           
 16366                           ;LED_B1.c: 28: else if(led == 99)
 16367  273F  0020               	movlb	0	; select bank0
 16368  2740  0821               	movf	LedPointSelect@led,w
 16369  2741  3A63               	xorlw	99
 16370  2742  1D03               	skipz
 16371  2743  0008               	return
 16372                           
 16373                           ;LED_B1.c: 29: {
 16374                           ;LED_B1.c: 30: LED=&VarErrLED;
 16375  2744  30D5               	movlw	_VarErrLED& (0+255)
 16376  2745  00A0               	movwf	??_LedPointSelect
 16377  2746  0820               	movf	??_LedPointSelect,w
 16378  2747  0021               	movlb	1	; select bank1
 16379  2748  00BB               	movwf	_LED^(0+128)
 16380  2749  0008               	return
 16381  274A                     __end_of_LedPointSelect:	
 16382                           
 16383                           	psect	text93
 16384  263A                     __ptext93:	
 16385 ;; *************** function _DimmerLights_Close *****************
 16386 ;; Defined at:
 16387 ;;		line 101 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16388 ;; Parameters:    Size  Location     Type
 16389 ;;		None
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;		None
 16392 ;; Return value:  Size  Location     Type
 16393 ;;		None               void
 16394 ;; Registers used:
 16395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;Total ram usage:        0 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; Hardware stack levels required when called:    5
 16408 ;; This function calls:
 16409 ;;		_getDimmerLights_StatusFlag
 16410 ;;		_setLoad_GO
 16411 ;; This function is called by:
 16412 ;;		_DimmerLights_Main
 16413 ;; This function uses a non-reentrant model
 16414 ;;
 16415                           
 16416                           
 16417                           ;psect for function _DimmerLights_Close
 16418  263A                     _DimmerLights_Close:	
 16419                           
 16420                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16421                           
 16422                           ;incstack = 0
 16423                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16424  263A  0021               	movlb	1	; select bank1
 16425  263B  0839               	movf	_Dimmer^(0+128),w
 16426  263C  0086               	movwf	6
 16427  263D  0187               	clrf	7
 16428  263E  1C01               	btfss	1,0
 16429  263F  0008               	return
 16430                           
 16431                           ;Dimmer_B1.c: 104: {
 16432                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16433  2640  0839               	movf	_Dimmer^(0+128),w
 16434  2641  0086               	movwf	6
 16435  2642  0187               	clrf	7
 16436  2643  1001               	bcf	1,0
 16437                           
 16438                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16439  2644  31A5  2577  31A6   	fcall	_getDimmerLights_StatusFlag
 16440  2647  3800               	iorlw	0
 16441  2648  1D03               	skipz
 16442  2649  0008               	return
 16443                           
 16444                           ;Dimmer_B1.c: 107: {
 16445                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16446  264A  3000               	movlw	0
 16447  264B  31A3  2369         	fcall	_setLoad_GO
 16448                           
 16449                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16450  264D  0021               	movlb	1	; select bank1
 16451  264E  0869               	movf	_Memory^(0+128),w
 16452  264F  3E22               	addlw	34
 16453  2650  0086               	movwf	6
 16454  2651  3002               	movlw	2	; select bank4/5
 16455  2652  0087               	movwf	7
 16456  2653  1481               	bsf	1,1
 16457  2654  0008               	return
 16458  2655                     __end_of_DimmerLights_Close:	
 16459                           
 16460                           	psect	text94
 16461  2369                     __ptext94:	
 16462 ;; *************** function _setLoad_GO *****************
 16463 ;; Defined at:
 16464 ;;		line 300 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16465 ;; Parameters:    Size  Location     Type
 16466 ;;  command         1    wreg     unsigned char 
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;  command         1    0[BANK0 ] unsigned char 
 16469 ;; Return value:  Size  Location     Type
 16470 ;;		None               void
 16471 ;; Registers used:
 16472 ;;		wreg, fsr1l, fsr1h
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;Total ram usage:        1 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    4
 16485 ;; This function calls:
 16486 ;;		Nothing
 16487 ;; This function is called by:
 16488 ;;		_DimmerLights_Close
 16489 ;; This function uses a non-reentrant model
 16490 ;;
 16491                           
 16492                           
 16493                           ;psect for function _setLoad_GO
 16494  2369                     _setLoad_GO:	
 16495                           
 16496                           ;incstack = 0
 16497                           ; Regs used in _setLoad_GO: [wregfsr1]
 16498                           ;setLoad_GO@command stored from wreg
 16499  2369  0020               	movlb	0	; select bank0
 16500  236A  00A0               	movwf	setLoad_GO@command
 16501                           
 16502                           ;OverLoad_B1.c: 302: Load->GO=command;
 16503  236B  086E               	movf	_Load,w
 16504  236C  0086               	movwf	6
 16505  236D  3002               	movlw	2	; select bank4/5
 16506  236E  0087               	movwf	7
 16507  236F  0820               	movf	setLoad_GO@command,w
 16508  2370  1081               	bcf	1,1
 16509  2371  1D03               	skipz
 16510  2372  1481               	bsf	1,1
 16511  2373  0008               	return
 16512  2374                     __end_of_setLoad_GO:	
 16513                           
 16514                           	psect	text95
 16515  2577                     __ptext95:	
 16516 ;; *************** function _getDimmerLights_StatusFlag *****************
 16517 ;; Defined at:
 16518 ;;		line 208 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;		None
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  Status          1    1[BANK0 ] unsigned char 
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  1    wreg      unsigned char 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr1l, fsr1h, status,2
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;Total ram usage:        3 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    4
 16539 ;; This function calls:
 16540 ;;		Nothing
 16541 ;; This function is called by:
 16542 ;;		_DimmerLights_Close
 16543 ;;		_DimmerLights_Exceptions
 16544 ;; This function uses a non-reentrant model
 16545 ;;
 16546                           
 16547                           
 16548                           ;psect for function _getDimmerLights_StatusFlag
 16549  2577                     _getDimmerLights_StatusFlag:	
 16550                           
 16551                           ;Dimmer_B1.c: 210: char Status=0;
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16555  2577  0020               	movlb	0	; select bank0
 16556  2578  01A1               	clrf	getDimmerLights_StatusFlag@Status
 16557                           
 16558                           ;Dimmer_B1.c: 217: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 16559  2579  01A2               	clrf	_getDimmerLights_StatusFlag$1840
 16560  257A  0AA2               	incf	_getDimmerLights_StatusFlag$1840,f
 16561  257B  0879               	movf	_DimmerLights11,w
 16562  257C  0086               	movwf	6
 16563  257D  3001               	movlw	1	; select bank2/3
 16564  257E  0087               	movwf	7
 16565  257F  1B01               	btfsc	1,6
 16566  2580  2D87               	goto	l6756
 16567  2581  087A               	movf	_DimmerLights22,w
 16568  2582  0086               	movwf	6
 16569  2583  3001               	movlw	1	; select bank2/3
 16570  2584  0087               	movwf	7
 16571  2585  1F01               	btfss	1,6
 16572  2586  01A2               	clrf	_getDimmerLights_StatusFlag$1840
 16573  2587                     l6756:	
 16574  2587  0822               	movf	_getDimmerLights_StatusFlag$1840,w
 16575  2588  00A0               	movwf	??_getDimmerLights_StatusFlag
 16576  2589  0820               	movf	??_getDimmerLights_StatusFlag,w
 16577  258A  00A1               	movwf	getDimmerLights_StatusFlag@Status
 16578                           
 16579                           ;Dimmer_B1.c: 224: return Status;
 16580  258B  0821               	movf	getDimmerLights_StatusFlag@Status,w
 16581  258C  0008               	return
 16582  258D                     __end_of_getDimmerLights_StatusFlag:	
 16583                           
 16584                           	psect	text96
 16585  2537                     __ptext96:	
 16586 ;; *************** function _DimmerLights_Initialization *****************
 16587 ;; Defined at:
 16588 ;;		line 41 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16589 ;; Parameters:    Size  Location     Type
 16590 ;;		None
 16591 ;; Auto vars:     Size  Location     Type
 16592 ;;		None
 16593 ;; Return value:  Size  Location     Type
 16594 ;;		None               void
 16595 ;; Registers used:
 16596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16597 ;; Tracked objects:
 16598 ;;		On entry : 0/0
 16599 ;;		On exit  : 0/0
 16600 ;;		Unchanged: 0/0
 16601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16606 ;;Total ram usage:        1 bytes
 16607 ;; Hardware stack levels used:    1
 16608 ;; Hardware stack levels required when called:    6
 16609 ;; This function calls:
 16610 ;;		_Dimmer_Initialization
 16611 ;;		_setDimmerLights_Initialization
 16612 ;; This function is called by:
 16613 ;;		_main
 16614 ;; This function uses a non-reentrant model
 16615 ;;
 16616                           
 16617                           
 16618                           ;psect for function _DimmerLights_Initialization
 16619  2537                     _DimmerLights_Initialization:	
 16620                           
 16621                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16622                           
 16623                           ;incstack = 0
 16624                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16625  2537  3020               	movlw	_DimmerLights1& (0+255)
 16626  2538  0020               	movlb	0	; select bank0
 16627  2539  00A4               	movwf	??_DimmerLights_Initialization
 16628  253A  0824               	movf	??_DimmerLights_Initialization,w
 16629  253B  00F9               	movwf	_DimmerLights11
 16630                           
 16631                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16632  253C  3001               	movlw	1
 16633  253D  3198  20BC  31A5   	fcall	_setDimmerLights_Initialization
 16634                           
 16635                           ;Dimmer_B1.c: 49: DimmerLights22=&DimmerLights2;
 16636  2540  302E               	movlw	_DimmerLights2& (0+255)
 16637  2541  0020               	movlb	0	; select bank0
 16638  2542  00A4               	movwf	??_DimmerLights_Initialization
 16639  2543  0824               	movf	??_DimmerLights_Initialization,w
 16640  2544  00FA               	movwf	_DimmerLights22
 16641                           
 16642                           ;Dimmer_B1.c: 50: setDimmerLights_Initialization(2);
 16643  2545  3002               	movlw	2
 16644  2546  3198  20BC  31A5   	fcall	_setDimmerLights_Initialization
 16645                           
 16646                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16647  2549  31A2  22F0         	fcall	_Dimmer_Initialization
 16648  254B  0008               	return
 16649  254C                     __end_of_DimmerLights_Initialization:	
 16650                           
 16651                           	psect	text97
 16652  18BC                     __ptext97:	
 16653 ;; *************** function _setDimmerLights_Initialization *****************
 16654 ;; Defined at:
 16655 ;;		line 63 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  lights          1    wreg     unsigned char 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  lights          1    3[BANK0 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;		None               void
 16662 ;; Registers used:
 16663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;Total ram usage:        2 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    5
 16676 ;; This function calls:
 16677 ;;		_DimmerLightsPointSelect
 16678 ;; This function is called by:
 16679 ;;		_DimmerLights_Initialization
 16680 ;; This function uses a non-reentrant model
 16681 ;;
 16682                           
 16683                           
 16684                           ;psect for function _setDimmerLights_Initialization
 16685  18BC                     _setDimmerLights_Initialization:	
 16686                           
 16687                           ;incstack = 0
 16688                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16689                           ;setDimmerLights_Initialization@lights stored from wreg
 16690  18BC  0020               	movlb	0	; select bank0
 16691  18BD  00A3               	movwf	setDimmerLights_Initialization@lights
 16692                           
 16693                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16694  18BE  0823               	movf	setDimmerLights_Initialization@lights,w
 16695  18BF  31A4  24E7         	fcall	_DimmerLightsPointSelect
 16696                           
 16697                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16698  18C1  0020               	movlb	0	; select bank0
 16699  18C2  086C               	movf	_DimmerLights,w
 16700  18C3  3E0C               	addlw	12
 16701  18C4  0086               	movwf	6
 16702  18C5  3001               	movlw	1	; select bank2/3
 16703  18C6  0087               	movwf	7
 16704  18C7  1401               	bsf	1,0
 16705                           
 16706                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16707  18C8  3043               	movlw	67
 16708  18C9  00A2               	movwf	??_setDimmerLights_Initialization
 16709  18CA  086C               	movf	_DimmerLights,w
 16710  18CB  3E05               	addlw	5
 16711  18CC  0086               	movwf	6
 16712  18CD  3001               	movlw	1	; select bank2/3
 16713  18CE  0087               	movwf	7
 16714  18CF  0822               	movf	??_setDimmerLights_Initialization,w
 16715  18D0  0081               	movwf	1
 16716                           
 16717                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16718  18D1  3078               	movlw	120
 16719  18D2  00A2               	movwf	??_setDimmerLights_Initialization
 16720  18D3  086C               	movf	_DimmerLights,w
 16721  18D4  3E06               	addlw	6
 16722  18D5  0086               	movwf	6
 16723  18D6  3001               	movlw	1	; select bank2/3
 16724  18D7  0087               	movwf	7
 16725  18D8  0822               	movf	??_setDimmerLights_Initialization,w
 16726  18D9  0081               	movwf	1
 16727                           
 16728                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16729  18DA  086C               	movf	_DimmerLights,w
 16730  18DB  3E06               	addlw	6
 16731  18DC  0086               	movwf	6
 16732  18DD  3001               	movlw	1	; select bank2/3
 16733  18DE  0087               	movwf	7
 16734  18DF  0801               	movf	1,w
 16735  18E0  00A2               	movwf	??_setDimmerLights_Initialization
 16736  18E1  086C               	movf	_DimmerLights,w
 16737  18E2  3E04               	addlw	4
 16738  18E3  0086               	movwf	6
 16739  18E4  3001               	movlw	1	; select bank2/3
 16740  18E5  0087               	movwf	7
 16741  18E6  0822               	movf	??_setDimmerLights_Initialization,w
 16742  18E7  0081               	movwf	1
 16743  18E8  0008               	return
 16744  18E9                     __end_of_setDimmerLights_Initialization:	
 16745                           
 16746                           	psect	text98
 16747  22F0                     __ptext98:	
 16748 ;; *************** function _Dimmer_Initialization *****************
 16749 ;; Defined at:
 16750 ;;		line 520 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16751 ;; Parameters:    Size  Location     Type
 16752 ;;		None
 16753 ;; Auto vars:     Size  Location     Type
 16754 ;;		None
 16755 ;; Return value:  Size  Location     Type
 16756 ;;		None               void
 16757 ;; Registers used:
 16758 ;;		wreg
 16759 ;; Tracked objects:
 16760 ;;		On entry : 0/0
 16761 ;;		On exit  : 0/0
 16762 ;;		Unchanged: 0/0
 16763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;Total ram usage:        1 bytes
 16769 ;; Hardware stack levels used:    1
 16770 ;; Hardware stack levels required when called:    4
 16771 ;; This function calls:
 16772 ;;		Nothing
 16773 ;; This function is called by:
 16774 ;;		_DimmerLights_Initialization
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           
 16779                           ;psect for function _Dimmer_Initialization
 16780  22F0                     _Dimmer_Initialization:	
 16781                           
 16782                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16783                           
 16784                           ;incstack = 0
 16785                           ; Regs used in _Dimmer_Initialization: [wreg]
 16786  22F0  30E1               	movlw	_Dimmer1& (0+255)
 16787  22F1  0020               	movlb	0	; select bank0
 16788  22F2  00A0               	movwf	??_Dimmer_Initialization
 16789  22F3  0820               	movf	??_Dimmer_Initialization,w
 16790  22F4  0021               	movlb	1	; select bank1
 16791  22F5  00B9               	movwf	_Dimmer^(0+128)
 16792  22F6  0008               	return
 16793  22F7                     __end_of_Dimmer_Initialization:	
 16794                           
 16795                           	psect	text99
 16796  2314                     __ptext99:	
 16797 ;; *************** function _DelayOff_Main *****************
 16798 ;; Defined at:
 16799 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;		None
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;		None
 16804 ;; Return value:  Size  Location     Type
 16805 ;;		None               void
 16806 ;; Registers used:
 16807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;Total ram usage:        0 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    9
 16820 ;; This function calls:
 16821 ;;		_DlyOff_Main
 16822 ;; This function is called by:
 16823 ;;		_main
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           
 16828                           ;psect for function _DelayOff_Main
 16829  2314                     _DelayOff_Main:	
 16830                           
 16831                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16832                           
 16833                           ;incstack = 0
 16834                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16835  2314  3001               	movlw	1
 16836  2315  3192  2281  31A3   	fcall	_DlyOff_Main
 16837                           
 16838                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 16839  2318  3002               	movlw	2
 16840  2319  3192  2281         	fcall	_DlyOff_Main
 16841  231B  0008               	return
 16842  231C                     __end_of_DelayOff_Main:	
 16843                           
 16844                           	psect	text100
 16845  1281                     __ptext100:	
 16846 ;; *************** function _DlyOff_Main *****************
 16847 ;; Defined at:
 16848 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16849 ;; Parameters:    Size  Location     Type
 16850 ;;  sw              1    wreg     unsigned char 
 16851 ;; Auto vars:     Size  Location     Type
 16852 ;;  sw              1   68[BANK0 ] unsigned char 
 16853 ;; Return value:  Size  Location     Type
 16854 ;;		None               void
 16855 ;; Registers used:
 16856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16857 ;; Tracked objects:
 16858 ;;		On entry : 0/0
 16859 ;;		On exit  : 0/0
 16860 ;;		Unchanged: 0/0
 16861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;Total ram usage:        3 bytes
 16867 ;; Hardware stack levels used:    1
 16868 ;; Hardware stack levels required when called:    8
 16869 ;; This function calls:
 16870 ;;		_DelayOffPointSelect
 16871 ;;		_setBuz
 16872 ;;		_setDimmerLights_Switch
 16873 ;;		_setDimmerLights_Trigger
 16874 ;;		_setRFSW_Status
 16875 ;;		_setRF_DimmerLights
 16876 ;;		_setSw_Status
 16877 ;;		_setTxData
 16878 ;; This function is called by:
 16879 ;;		_DelayOff_Main
 16880 ;; This function uses a non-reentrant model
 16881 ;;
 16882                           
 16883                           
 16884                           ;psect for function _DlyOff_Main
 16885  1281                     _DlyOff_Main:	
 16886                           
 16887                           ;incstack = 0
 16888                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16889                           ;DlyOff_Main@sw stored from wreg
 16890  1281  0020               	movlb	0	; select bank0
 16891  1282  00E4               	movwf	DlyOff_Main@sw
 16892                           
 16893                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16894  1283  0864               	movf	DlyOff_Main@sw,w
 16895  1284  31A5  258D  3192   	fcall	_DelayOffPointSelect
 16896                           
 16897                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16898  1287  0021               	movlb	1	; select bank1
 16899  1288  0838               	movf	_DelayOff^(0+128),w
 16900  1289  0086               	movwf	6
 16901  128A  0187               	clrf	7
 16902  128B  1C81               	btfss	1,1
 16903  128C  0008               	return
 16904                           
 16905                           ;DelayOff_B1.c: 70: {
 16906                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16907  128D  0838               	movf	_DelayOff^(0+128),w
 16908  128E  3E02               	addlw	2
 16909  128F  0086               	movwf	6
 16910  1290  0187               	clrf	7
 16911  1291  3001               	movlw	1
 16912  1292  0781               	addwf	1,f
 16913  1293  3141               	addfsr 1,1
 16914  1294  1803               	skipnc
 16915  1295  0A81               	incf	1,f
 16916                           
 16917                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 16918  1296  0838               	movf	_DelayOff^(0+128),w
 16919  1297  3E02               	addlw	2
 16920  1298  0086               	movwf	6
 16921  1299  0187               	clrf	7
 16922  129A  3F40               	moviw [0]fsr1
 16923  129B  0020               	movlb	0	; select bank0
 16924  129C  00E2               	movwf	??_DlyOff_Main
 16925  129D  3F41               	moviw [1]fsr1
 16926  129E  00E3               	movwf	??_DlyOff_Main+1
 16927  129F  3016               	movlw	22
 16928  12A0  0263               	subwf	??_DlyOff_Main+1,w
 16929  12A1  3012               	movlw	18
 16930  12A2  1903               	skipnz
 16931  12A3  0262               	subwf	??_DlyOff_Main,w
 16932  12A4  1C03               	skipc
 16933  12A5  0008               	return
 16934                           
 16935                           ;DelayOff_B1.c: 73: {
 16936                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16937  12A6  0021               	movlb	1	; select bank1
 16938  12A7  0838               	movf	_DelayOff^(0+128),w
 16939  12A8  3E02               	addlw	2
 16940  12A9  0086               	movwf	6
 16941  12AA  0187               	clrf	7
 16942  12AB  3000               	movlw	0
 16943  12AC  3FC0               	movwi [0]fsr1
 16944  12AD  3FC1               	movwi [1]fsr1
 16945                           
 16946                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16947  12AE  3001               	movlw	1
 16948  12AF  0020               	movlb	0	; select bank0
 16949  12B0  00E2               	movwf	??_DlyOff_Main
 16950  12B1  0021               	movlb	1	; select bank1
 16951  12B2  0838               	movf	_DelayOff^(0+128),w
 16952  12B3  3E04               	addlw	4
 16953  12B4  0086               	movwf	6
 16954  12B5  0187               	clrf	7
 16955  12B6  0020               	movlb	0	; select bank0
 16956  12B7  0862               	movf	??_DlyOff_Main,w
 16957  12B8  0781               	addwf	1,f
 16958                           
 16959                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16960  12B9  0021               	movlb	1	; select bank1
 16961  12BA  0838               	movf	_DelayOff^(0+128),w
 16962  12BB  3E04               	addlw	4
 16963  12BC  0086               	movwf	6
 16964  12BD  0187               	clrf	7
 16965  12BE  0A38               	incf	_DelayOff^(0+128),w
 16966  12BF  0084               	movwf	4
 16967  12C0  0185               	clrf	5
 16968  12C1  0800               	movf	0,w
 16969  12C2  0201               	subwf	1,w
 16970  12C3  1C03               	skipc
 16971  12C4  0008               	return
 16972                           
 16973                           ;DelayOff_B1.c: 77: {
 16974                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16975  12C5  0838               	movf	_DelayOff^(0+128),w
 16976  12C6  3E04               	addlw	4
 16977  12C7  0086               	movwf	6
 16978  12C8  0187               	clrf	7
 16979  12C9  0181               	clrf	1
 16980                           
 16981                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16982  12CA  0838               	movf	_DelayOff^(0+128),w
 16983  12CB  0086               	movwf	6
 16984  12CC  0187               	clrf	7
 16985  12CD  1081               	bcf	1,1
 16986                           
 16987                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16988  12CE  0020               	movlb	0	; select bank0
 16989  12CF  01A2               	clrf	setSw_Status@command
 16990  12D0  0864               	movf	DlyOff_Main@sw,w
 16991  12D1  31A4  2447  3192   	fcall	_setSw_Status
 16992                           
 16993                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16994  12D4  0020               	movlb	0	; select bank0
 16995  12D5  01A2               	clrf	setRFSW_Status@command
 16996  12D6  0864               	movf	DlyOff_Main@sw,w
 16997  12D7  31A4  2438  3192   	fcall	_setRFSW_Status
 16998                           
 16999                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 17000  12DA  0020               	movlb	0	; select bank0
 17001  12DB  01DD               	clrf	setRF_DimmerLights@on
 17002  12DC  0864               	movf	DlyOff_Main@sw,w
 17003  12DD  319F  2795  3192   	fcall	_setRF_DimmerLights
 17004                           
 17005                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17006  12E0  0020               	movlb	0	; select bank0
 17007  12E1  01A2               	clrf	setDimmerLights_Trigger@command
 17008  12E2  0AA2               	incf	setDimmerLights_Trigger@command,f
 17009  12E3  0864               	movf	DlyOff_Main@sw,w
 17010  12E4  31A4  2476  3192   	fcall	_setDimmerLights_Trigger
 17011                           
 17012                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17013  12E7  0020               	movlb	0	; select bank0
 17014  12E8  01A2               	clrf	setDimmerLights_Switch@command
 17015  12E9  0864               	movf	DlyOff_Main@sw,w
 17016  12EA  31A4  2466  3192   	fcall	_setDimmerLights_Switch
 17017                           
 17018                           ;DelayOff_B1.c: 85: setTxData(1);
 17019  12ED  3001               	movlw	1
 17020  12EE  3189  21BD  3192   	fcall	_setTxData
 17021                           
 17022                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17023  12F1  3064               	movlw	100
 17024  12F2  0020               	movlb	0	; select bank0
 17025  12F3  00A6               	movwf	setBuz@time
 17026  12F4  3000               	movlw	0
 17027  12F5  00A7               	movwf	setBuz@time+1
 17028  12F6  3001               	movlw	1
 17029  12F7  3192  220A         	fcall	_setBuz
 17030  12F9  0008               	return
 17031  12FA                     __end_of_DlyOff_Main:	
 17032                           
 17033                           	psect	text101
 17034  09BD                     __ptext101:	
 17035 ;; *************** function _setTxData *****************
 17036 ;; Defined at:
 17037 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17038 ;; Parameters:    Size  Location     Type
 17039 ;;  rf              1    wreg     unsigned char 
 17040 ;; Auto vars:     Size  Location     Type
 17041 ;;  rf              1    3[BANK0 ] unsigned char 
 17042 ;;  i               1    0        unsigned char 
 17043 ;; Return value:  Size  Location     Type
 17044 ;;		None               void
 17045 ;; Registers used:
 17046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17047 ;; Tracked objects:
 17048 ;;		On entry : 0/0
 17049 ;;		On exit  : 0/0
 17050 ;;		Unchanged: 0/0
 17051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17056 ;;Total ram usage:        2 bytes
 17057 ;; Hardware stack levels used:    1
 17058 ;; Hardware stack levels required when called:    5
 17059 ;; This function calls:
 17060 ;;		_RfPointSelect
 17061 ;; This function is called by:
 17062 ;;		_DlyOff_Main
 17063 ;;		_setDimmerLights_Adj
 17064 ;;		_setControl_Lights_Table
 17065 ;;		_setRFSW_Control
 17066 ;;		_setRFSW_AdjControl
 17067 ;;		_Sw_DimmerOnFunc
 17068 ;;		_Sw_DimmerOffFunc
 17069 ;; This function uses a non-reentrant model
 17070 ;;
 17071                           
 17072                           
 17073                           ;psect for function _setTxData
 17074  09BD                     _setTxData:	
 17075                           
 17076                           ;incstack = 0
 17077                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17078                           ;setTxData@rf stored from wreg
 17079  09BD  0020               	movlb	0	; select bank0
 17080  09BE  00A3               	movwf	setTxData@rf
 17081                           
 17082                           ;RF_Control_B1.c: 142: char i;
 17083                           ;RF_Control_B1.c: 143: RfPointSelect(rf);
 17084  09BF  0823               	movf	setTxData@rf,w
 17085  09C0  31A3  235E  3189   	fcall	_RfPointSelect
 17086                           
 17087                           ;RF_Control_B1.c: 144: if(RF->Enable)
 17088  09C3  087C               	movf	_RF,w
 17089  09C4  0086               	movwf	6
 17090  09C5  0187               	clrf	7
 17091  09C6  1C01               	btfss	1,0
 17092  09C7  0008               	return
 17093                           
 17094                           ;RF_Control_B1.c: 145: {
 17095                           ;RF_Control_B1.c: 147: if(!RF->TransceiveGO)
 17096  09C8  087C               	movf	_RF,w
 17097  09C9  0086               	movwf	6
 17098  09CA  0187               	clrf	7
 17099  09CB  1901               	btfsc	1,2
 17100  09CC  0008               	return
 17101                           
 17102                           ;RF_Control_B1.c: 148: {
 17103                           ;RF_Control_B1.c: 149: RF->TransceiveGO=1;
 17104  09CD  087C               	movf	_RF,w
 17105  09CE  0086               	movwf	6
 17106  09CF  0187               	clrf	7
 17107  09D0  1501               	bsf	1,2
 17108                           
 17109                           ;RF_Control_B1.c: 158: RF_Data[0]=0x63;
 17110  09D1  3063               	movlw	99
 17111  09D2  0020               	movlb	0	; select bank0
 17112  09D3  00A2               	movwf	??_setTxData
 17113  09D4  0822               	movf	??_setTxData,w
 17114  09D5  0021               	movlb	1	; select bank1
 17115  09D6  00A0               	movwf	_RF_Data^(0+128)
 17116                           
 17117                           ;RF_Control_B1.c: 159: RF_Data[1]=0x02;
 17118  09D7  3002               	movlw	2
 17119  09D8  0020               	movlb	0	; select bank0
 17120  09D9  00A2               	movwf	??_setTxData
 17121  09DA  0822               	movf	??_setTxData,w
 17122  09DB  0021               	movlb	1	; select bank1
 17123  09DC  00A1               	movwf	(_RF_Data^(0+128)+1)
 17124                           
 17125                           ;RF_Control_B1.c: 160: RF_Data[2]=Product->Data[2];
 17126  09DD  0020               	movlb	0	; select bank0
 17127  09DE  086F               	movf	_Product,w
 17128  09DF  0086               	movwf	6
 17129  09E0  3001               	movlw	1	; select bank2/3
 17130  09E1  0087               	movwf	7
 17131  09E2  3001               	movlw	1	; select bank2/3
 17132  09E3  3F42               	moviw [2]fsr1
 17133  09E4  0021               	movlb	1	; select bank1
 17134  09E5  00A2               	movwf	(_RF_Data^(0+128)+2)
 17135                           
 17136                           ;RF_Control_B1.c: 161: RF_Data[3]=Product->Data[3];
 17137  09E6  0020               	movlb	0	; select bank0
 17138  09E7  086F               	movf	_Product,w
 17139  09E8  0086               	movwf	6
 17140  09E9  3001               	movlw	1	; select bank2/3
 17141  09EA  0087               	movwf	7
 17142  09EB  3001               	movlw	1	; select bank2/3
 17143  09EC  3F43               	moviw [3]fsr1
 17144  09ED  0021               	movlb	1	; select bank1
 17145  09EE  00A3               	movwf	(_RF_Data^(0+128)+3)
 17146                           
 17147                           ;RF_Control_B1.c: 162: RF_Data[4]=Product->Data[4];
 17148  09EF  0020               	movlb	0	; select bank0
 17149  09F0  086F               	movf	_Product,w
 17150  09F1  0086               	movwf	6
 17151  09F2  3001               	movlw	1	; select bank2/3
 17152  09F3  0087               	movwf	7
 17153  09F4  3001               	movlw	1	; select bank2/3
 17154  09F5  3F44               	moviw [4]fsr1
 17155  09F6  0021               	movlb	1	; select bank1
 17156  09F7  00A4               	movwf	(_RF_Data^(0+128)+4)
 17157                           
 17158                           ;RF_Control_B1.c: 163: RF_Data[5]=Product->Data[5];
 17159  09F8  0020               	movlb	0	; select bank0
 17160  09F9  086F               	movf	_Product,w
 17161  09FA  0086               	movwf	6
 17162  09FB  3001               	movlw	1	; select bank2/3
 17163  09FC  0087               	movwf	7
 17164  09FD  3001               	movlw	1	; select bank2/3
 17165  09FE  3F45               	moviw [5]fsr1
 17166  09FF  0021               	movlb	1	; select bank1
 17167  0A00  00A5               	movwf	(_RF_Data^(0+128)+5)
 17168                           
 17169                           ;RF_Control_B1.c: 164: RF_Data[6]=Product->Data[6];
 17170  0A01  0020               	movlb	0	; select bank0
 17171  0A02  086F               	movf	_Product,w
 17172  0A03  0086               	movwf	6
 17173  0A04  3001               	movlw	1	; select bank2/3
 17174  0A05  0087               	movwf	7
 17175  0A06  3001               	movlw	1	; select bank2/3
 17176  0A07  3F46               	moviw [6]fsr1
 17177  0A08  0021               	movlb	1	; select bank1
 17178  0A09  00A6               	movwf	(_RF_Data^(0+128)+6)
 17179                           
 17180                           ;RF_Control_B1.c: 165: RF_Data[7]=Product->Data[7];
 17181  0A0A  0020               	movlb	0	; select bank0
 17182  0A0B  086F               	movf	_Product,w
 17183  0A0C  0086               	movwf	6
 17184  0A0D  3001               	movlw	1	; select bank2/3
 17185  0A0E  0087               	movwf	7
 17186  0A0F  3001               	movlw	1	; select bank2/3
 17187  0A10  3F47               	moviw [7]fsr1
 17188  0A11  0021               	movlb	1	; select bank1
 17189  0A12  00A7               	movwf	(_RF_Data^(0+128)+7)
 17190                           
 17191                           ;RF_Control_B1.c: 166: RF_Data[8]=Product->Data[8];
 17192  0A13  0020               	movlb	0	; select bank0
 17193  0A14  086F               	movf	_Product,w
 17194  0A15  0086               	movwf	6
 17195  0A16  3001               	movlw	1	; select bank2/3
 17196  0A17  0087               	movwf	7
 17197  0A18  3001               	movlw	1	; select bank2/3
 17198  0A19  3F48               	moviw [8]fsr1
 17199  0A1A  0021               	movlb	1	; select bank1
 17200  0A1B  00A8               	movwf	(_RF_Data^(0+128)+8)
 17201                           
 17202                           ;RF_Control_B1.c: 167: RF_Data[9]=Product->Data[9];
 17203  0A1C  0020               	movlb	0	; select bank0
 17204  0A1D  086F               	movf	_Product,w
 17205  0A1E  0086               	movwf	6
 17206  0A1F  3001               	movlw	1	; select bank2/3
 17207  0A20  0087               	movwf	7
 17208  0A21  3001               	movlw	1	; select bank2/3
 17209  0A22  3F49               	moviw [9]fsr1
 17210  0A23  0021               	movlb	1	; select bank1
 17211  0A24  00A9               	movwf	(_RF_Data^(0+128)+9)
 17212                           
 17213                           ;RF_Control_B1.c: 168: RF_Data[10]=Product->Data[10];
 17214  0A25  0020               	movlb	0	; select bank0
 17215  0A26  086F               	movf	_Product,w
 17216  0A27  0086               	movwf	6
 17217  0A28  3001               	movlw	1	; select bank2/3
 17218  0A29  0087               	movwf	7
 17219  0A2A  3001               	movlw	1	; select bank2/3
 17220  0A2B  3F4A               	moviw [10]fsr1
 17221  0A2C  0021               	movlb	1	; select bank1
 17222  0A2D  00AA               	movwf	(_RF_Data^(0+128)+10)
 17223                           
 17224                           ;RF_Control_B1.c: 169: RF_Data[11]=Product->Data[11];
 17225  0A2E  0020               	movlb	0	; select bank0
 17226  0A2F  086F               	movf	_Product,w
 17227  0A30  0086               	movwf	6
 17228  0A31  3001               	movlw	1	; select bank2/3
 17229  0A32  0087               	movwf	7
 17230  0A33  3001               	movlw	1	; select bank2/3
 17231  0A34  3F4B               	moviw [11]fsr1
 17232  0A35  0021               	movlb	1	; select bank1
 17233  0A36  00AB               	movwf	(_RF_Data^(0+128)+11)
 17234                           
 17235                           ;RF_Control_B1.c: 170: RF_Data[12]=Product->Data[12];
 17236  0A37  0020               	movlb	0	; select bank0
 17237  0A38  086F               	movf	_Product,w
 17238  0A39  0086               	movwf	6
 17239  0A3A  3001               	movlw	1	; select bank2/3
 17240  0A3B  0087               	movwf	7
 17241  0A3C  3001               	movlw	1	; select bank2/3
 17242  0A3D  3F4C               	moviw [12]fsr1
 17243  0A3E  0021               	movlb	1	; select bank1
 17244  0A3F  00AC               	movwf	(_RF_Data^(0+128)+12)
 17245                           
 17246                           ;RF_Control_B1.c: 171: RF_Data[13]=Product->Data[13];
 17247  0A40  0020               	movlb	0	; select bank0
 17248  0A41  086F               	movf	_Product,w
 17249  0A42  0086               	movwf	6
 17250  0A43  3001               	movlw	1	; select bank2/3
 17251  0A44  0087               	movwf	7
 17252  0A45  3001               	movlw	1	; select bank2/3
 17253  0A46  3F4D               	moviw [13]fsr1
 17254  0A47  0021               	movlb	1	; select bank1
 17255  0A48  00AD               	movwf	(_RF_Data^(0+128)+13)
 17256                           
 17257                           ;RF_Control_B1.c: 172: RF_Data[14]=Product->Data[14];
 17258  0A49  0020               	movlb	0	; select bank0
 17259  0A4A  086F               	movf	_Product,w
 17260  0A4B  0086               	movwf	6
 17261  0A4C  3001               	movlw	1	; select bank2/3
 17262  0A4D  0087               	movwf	7
 17263  0A4E  3001               	movlw	1	; select bank2/3
 17264  0A4F  3F4E               	moviw [14]fsr1
 17265  0A50  0021               	movlb	1	; select bank1
 17266  0A51  00AE               	movwf	(_RF_Data^(0+128)+14)
 17267                           
 17268                           ;RF_Control_B1.c: 173: RF_Data[15]=Product->Data[15];
 17269  0A52  0020               	movlb	0	; select bank0
 17270  0A53  086F               	movf	_Product,w
 17271  0A54  0086               	movwf	6
 17272  0A55  3001               	movlw	1	; select bank2/3
 17273  0A56  0087               	movwf	7
 17274  0A57  3001               	movlw	1	; select bank2/3
 17275  0A58  3F4F               	moviw [15]fsr1
 17276  0A59  0021               	movlb	1	; select bank1
 17277  0A5A  00AF               	movwf	(_RF_Data^(0+128)+15)
 17278                           
 17279                           ;RF_Control_B1.c: 174: RF_Data[16]=Product->Data[16];
 17280  0A5B  0020               	movlb	0	; select bank0
 17281  0A5C  086F               	movf	_Product,w
 17282  0A5D  0086               	movwf	6
 17283  0A5E  3001               	movlw	1	; select bank2/3
 17284  0A5F  0087               	movwf	7
 17285  0A60  3001               	movlw	1	; select bank2/3
 17286  0A61  3F50               	moviw [16]fsr1
 17287  0A62  0021               	movlb	1	; select bank1
 17288  0A63  00B0               	movwf	(_RF_Data^(0+128)+16)
 17289                           
 17290                           ;RF_Control_B1.c: 175: RF_Data[17]=Product->Data[17];
 17291  0A64  0020               	movlb	0	; select bank0
 17292  0A65  086F               	movf	_Product,w
 17293  0A66  0086               	movwf	6
 17294  0A67  3001               	movlw	1	; select bank2/3
 17295  0A68  0087               	movwf	7
 17296  0A69  3001               	movlw	1	; select bank2/3
 17297  0A6A  3F51               	moviw [17]fsr1
 17298  0A6B  0021               	movlb	1	; select bank1
 17299  0A6C  00B1               	movwf	(_RF_Data^(0+128)+17)
 17300                           
 17301                           ;RF_Control_B1.c: 176: RF_Data[18]=Product->Data[18];
 17302  0A6D  0020               	movlb	0	; select bank0
 17303  0A6E  086F               	movf	_Product,w
 17304  0A6F  0086               	movwf	6
 17305  0A70  3001               	movlw	1	; select bank2/3
 17306  0A71  0087               	movwf	7
 17307  0A72  3001               	movlw	1	; select bank2/3
 17308  0A73  3F52               	moviw [18]fsr1
 17309  0A74  0021               	movlb	1	; select bank1
 17310  0A75  00B2               	movwf	(_RF_Data^(0+128)+18)
 17311                           
 17312                           ;RF_Control_B1.c: 177: RF_Data[19]=Product->Data[19];
 17313  0A76  0020               	movlb	0	; select bank0
 17314  0A77  086F               	movf	_Product,w
 17315  0A78  0086               	movwf	6
 17316  0A79  3001               	movlw	1	; select bank2/3
 17317  0A7A  0087               	movwf	7
 17318  0A7B  3001               	movlw	1	; select bank2/3
 17319  0A7C  3F53               	moviw [19]fsr1
 17320  0A7D  0021               	movlb	1	; select bank1
 17321  0A7E  00B3               	movwf	(_RF_Data^(0+128)+19)
 17322                           
 17323                           ;RF_Control_B1.c: 178: RF_Data[20]=210;
 17324  0A7F  30D2               	movlw	210
 17325  0A80  0020               	movlb	0	; select bank0
 17326  0A81  00A2               	movwf	??_setTxData
 17327  0A82  0822               	movf	??_setTxData,w
 17328  0A83  0021               	movlb	1	; select bank1
 17329  0A84  00B4               	movwf	(_RF_Data^(0+128)+20)
 17330  0A85  0008               	return
 17331  0A86                     __end_of_setTxData:	
 17332                           
 17333                           	psect	text102
 17334  235E                     __ptext102:	
 17335 ;; *************** function _RfPointSelect *****************
 17336 ;; Defined at:
 17337 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17338 ;; Parameters:    Size  Location     Type
 17339 ;;  rf              1    wreg     unsigned char 
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;  rf              1    1[BANK0 ] unsigned char 
 17342 ;; Return value:  Size  Location     Type
 17343 ;;		None               void
 17344 ;; Registers used:
 17345 ;;		wreg
 17346 ;; Tracked objects:
 17347 ;;		On entry : 0/0
 17348 ;;		On exit  : 0/0
 17349 ;;		Unchanged: 0/0
 17350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;Total ram usage:        2 bytes
 17356 ;; Hardware stack levels used:    1
 17357 ;; Hardware stack levels required when called:    4
 17358 ;; This function calls:
 17359 ;;		Nothing
 17360 ;; This function is called by:
 17361 ;;		_setRF_Learn
 17362 ;;		_setRF_RxStatus
 17363 ;;		_setRF_Main
 17364 ;;		_setTxData
 17365 ;;		_setRF_Enable
 17366 ;;		_RF_RxDisable
 17367 ;;		_getRxData
 17368 ;;		_setLog_Code
 17369 ;;		_setControl_Lights_Table
 17370 ;; This function uses a non-reentrant model
 17371 ;;
 17372                           
 17373                           
 17374                           ;psect for function _RfPointSelect
 17375  235E                     _RfPointSelect:	
 17376                           
 17377                           ;incstack = 0
 17378                           ; Regs used in _RfPointSelect: [wreg]
 17379                           ;RfPointSelect@rf stored from wreg
 17380  235E  0020               	movlb	0	; select bank0
 17381  235F  00A1               	movwf	RfPointSelect@rf
 17382                           
 17383                           ;RF_Control_B1.c: 10: if(rf == 1)
 17384  2360  0821               	movf	RfPointSelect@rf,w
 17385  2361  3A01               	xorlw	1
 17386  2362  1D03               	skipz
 17387  2363  0008               	return
 17388                           
 17389                           ;RF_Control_B1.c: 11: {
 17390                           ;RF_Control_B1.c: 12: RF=&RF1;
 17391  2364  30E4               	movlw	_RF1& (0+255)
 17392  2365  00A0               	movwf	??_RfPointSelect
 17393  2366  0820               	movf	??_RfPointSelect,w
 17394  2367  00FC               	movwf	_RF
 17395  2368  0008               	return
 17396  2369                     __end_of_RfPointSelect:	
 17397                           
 17398                           	psect	text103
 17399  2447                     __ptext103:	
 17400 ;; *************** function _setSw_Status *****************
 17401 ;; Defined at:
 17402 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17403 ;; Parameters:    Size  Location     Type
 17404 ;;  sw              1    wreg     unsigned char 
 17405 ;;  command         1    2[BANK0 ] unsigned char 
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;  sw              1    3[BANK0 ] unsigned char 
 17408 ;; Return value:  Size  Location     Type
 17409 ;;		None               void
 17410 ;; Registers used:
 17411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17412 ;; Tracked objects:
 17413 ;;		On entry : 0/0
 17414 ;;		On exit  : 0/0
 17415 ;;		Unchanged: 0/0
 17416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;Total ram usage:        2 bytes
 17422 ;; Hardware stack levels used:    1
 17423 ;; Hardware stack levels required when called:    5
 17424 ;; This function calls:
 17425 ;;		_SwPointSelect
 17426 ;; This function is called by:
 17427 ;;		_DlyOff_Main
 17428 ;;		_setDimmerLights_ERROR
 17429 ;;		_setControl_Lights_Table
 17430 ;;		_setRFSW_Control
 17431 ;; This function uses a non-reentrant model
 17432 ;;
 17433                           
 17434                           
 17435                           ;psect for function _setSw_Status
 17436  2447                     _setSw_Status:	
 17437                           
 17438                           ;incstack = 0
 17439                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17440                           ;setSw_Status@sw stored from wreg
 17441  2447  0020               	movlb	0	; select bank0
 17442  2448  00A3               	movwf	setSw_Status@sw
 17443                           
 17444                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17445  2449  0823               	movf	setSw_Status@sw,w
 17446  244A  31A4  24FA         	fcall	_SwPointSelect
 17447                           
 17448                           ;Switch_B1.c: 109: Sw->Status=command;
 17449  244C  0020               	movlb	0	; select bank0
 17450  244D  086D               	movf	_Sw,w
 17451  244E  0086               	movwf	6
 17452  244F  3001               	movlw	1	; select bank2/3
 17453  2450  0087               	movwf	7
 17454  2451  0822               	movf	setSw_Status@command,w
 17455  2452  1301               	bcf	1,6
 17456  2453  1D03               	skipz
 17457  2454  1701               	bsf	1,6
 17458  2455  0008               	return
 17459  2456                     __end_of_setSw_Status:	
 17460                           
 17461                           	psect	text104
 17462  24FA                     __ptext104:	
 17463 ;; *************** function _SwPointSelect *****************
 17464 ;; Defined at:
 17465 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;  sw              1    wreg     unsigned char 
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;  sw              1    1[BANK0 ] unsigned char 
 17470 ;; Return value:  Size  Location     Type
 17471 ;;		None               void
 17472 ;; Registers used:
 17473 ;;		wreg
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;Total ram usage:        2 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    4
 17486 ;; This function calls:
 17487 ;;		Nothing
 17488 ;; This function is called by:
 17489 ;;		_setSw_Enable
 17490 ;;		_setSw_Status
 17491 ;;		_setSw_Main
 17492 ;;		_Sw_Detect
 17493 ;; This function uses a non-reentrant model
 17494 ;;
 17495                           
 17496                           
 17497                           ;psect for function _SwPointSelect
 17498  24FA                     _SwPointSelect:	
 17499                           
 17500                           ;incstack = 0
 17501                           ; Regs used in _SwPointSelect: [wreg]
 17502                           ;SwPointSelect@sw stored from wreg
 17503  24FA  0020               	movlb	0	; select bank0
 17504  24FB  00A1               	movwf	SwPointSelect@sw
 17505                           
 17506                           ;Switch_B1.c: 19: if(sw == 1)
 17507  24FC  0821               	movf	SwPointSelect@sw,w
 17508  24FD  3A01               	xorlw	1
 17509  24FE  1D03               	skipz
 17510  24FF  2D05               	goto	l6508
 17511                           
 17512                           ;Switch_B1.c: 20: {
 17513                           ;Switch_B1.c: 21: Sw=&Sw1;
 17514  2500  3056               	movlw	_Sw1& (0+255)
 17515  2501  00A0               	movwf	??_SwPointSelect
 17516  2502  0820               	movf	??_SwPointSelect,w
 17517  2503  00ED               	movwf	_Sw
 17518                           
 17519                           ;Switch_B1.c: 22: }
 17520  2504  0008               	return
 17521  2505                     l6508:	
 17522                           
 17523                           ;Switch_B1.c: 25: else if(sw == 2)
 17524  2505  0821               	movf	SwPointSelect@sw,w
 17525  2506  3A02               	xorlw	2
 17526  2507  1D03               	skipz
 17527  2508  0008               	return
 17528                           
 17529                           ;Switch_B1.c: 26: {
 17530                           ;Switch_B1.c: 27: Sw=&Sw2;
 17531  2509  305F               	movlw	_Sw2& (0+255)
 17532  250A  00A0               	movwf	??_SwPointSelect
 17533  250B  0820               	movf	??_SwPointSelect,w
 17534  250C  00ED               	movwf	_Sw
 17535  250D  0008               	return
 17536  250E                     __end_of_SwPointSelect:	
 17537                           
 17538                           	psect	text105
 17539  1F95                     __ptext105:	
 17540 ;; *************** function _setRF_DimmerLights *****************
 17541 ;; Defined at:
 17542 ;;		line 444 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17543 ;; Parameters:    Size  Location     Type
 17544 ;;  lights          1    wreg     unsigned char 
 17545 ;;  on              1   61[BANK0 ] unsigned char 
 17546 ;; Auto vars:     Size  Location     Type
 17547 ;;  lights          1   65[BANK0 ] unsigned char 
 17548 ;;  status          1   64[BANK0 ] unsigned char 
 17549 ;; Return value:  Size  Location     Type
 17550 ;;		None               void
 17551 ;; Registers used:
 17552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17553 ;; Tracked objects:
 17554 ;;		On entry : 0/0
 17555 ;;		On exit  : 0/0
 17556 ;;		Unchanged: 0/0
 17557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17558 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;Total ram usage:        5 bytes
 17563 ;; Hardware stack levels used:    1
 17564 ;; Hardware stack levels required when called:    7
 17565 ;; This function calls:
 17566 ;;		_setPercentValue
 17567 ;; This function is called by:
 17568 ;;		_DlyOff_Main
 17569 ;;		_setDimmerLights_Adj
 17570 ;;		_setRFSW_Control
 17571 ;;		_Sw_DimmerOnFunc
 17572 ;;		_Sw_DimmerOffFunc
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576                           
 17577                           ;psect for function _setRF_DimmerLights
 17578  1F95                     _setRF_DimmerLights:	
 17579                           
 17580                           ;incstack = 0
 17581                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17582                           ;setRF_DimmerLights@lights stored from wreg
 17583  1F95  0020               	movlb	0	; select bank0
 17584  1F96  00E1               	movwf	setRF_DimmerLights@lights
 17585                           
 17586                           ;RF_Control_B1.c: 446: char status;
 17587                           ;RF_Control_B1.c: 447: status=1;
 17588  1F97  01E0               	clrf	setRF_DimmerLights@status
 17589  1F98  0AE0               	incf	setRF_DimmerLights@status,f
 17590                           
 17591                           ;RF_Control_B1.c: 448: status<<=(lights-1);
 17592  1F99  0861               	movf	setRF_DimmerLights@lights,w
 17593  1F9A  3EFF               	addlw	-1
 17594  1F9B  0A89               	incf	9,f
 17595  1F9C  2F9F               	goto	u8250
 17596  1F9D                     u8255:	
 17597  1F9D  1003               	clrc
 17598  1F9E  0DE0               	rlf	setRF_DimmerLights@status,f
 17599  1F9F                     u8250:	
 17600  1F9F  3EFF               	addlw	-1
 17601  1FA0  1D03               	skipz
 17602  1FA1  2F9D               	goto	u8255
 17603                           
 17604                           ;RF_Control_B1.c: 449: Product->Data[11]=lights;
 17605  1FA2  0861               	movf	setRF_DimmerLights@lights,w
 17606  1FA3  00DE               	movwf	??_setRF_DimmerLights
 17607  1FA4  086F               	movf	_Product,w
 17608  1FA5  3E0B               	addlw	11
 17609  1FA6  0086               	movwf	6
 17610  1FA7  3001               	movlw	1	; select bank2/3
 17611  1FA8  0087               	movwf	7
 17612  1FA9  085E               	movf	??_setRF_DimmerLights,w
 17613  1FAA  0081               	movwf	1
 17614                           
 17615                           ;RF_Control_B1.c: 452: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 17616  1FAB  3043               	movlw	67
 17617  1FAC  319C  24C5  319F   	fcall	_setPercentValue
 17618  1FAF  0020               	movlb	0	; select bank0
 17619  1FB0  00DE               	movwf	??_setRF_DimmerLights
 17620  1FB1  0861               	movf	setRF_DimmerLights@lights,w
 17621  1FB2  3E14               	addlw	20
 17622  1FB3  076F               	addwf	_Product,w
 17623  1FB4  00DF               	movwf	??_setRF_DimmerLights+1
 17624  1FB5  085F               	movf	??_setRF_DimmerLights+1,w
 17625  1FB6  0086               	movwf	6
 17626  1FB7  3001               	movlw	1	; select bank2/3
 17627  1FB8  0087               	movwf	7
 17628  1FB9  085E               	movf	??_setRF_DimmerLights,w
 17629  1FBA  0081               	movwf	1
 17630                           
 17631                           ;RF_Control_B1.c: 455: Product->Data[9]=Product->Data[20+lights];
 17632  1FBB  0861               	movf	setRF_DimmerLights@lights,w
 17633  1FBC  3E14               	addlw	20
 17634  1FBD  076F               	addwf	_Product,w
 17635  1FBE  00DE               	movwf	??_setRF_DimmerLights
 17636  1FBF  085E               	movf	??_setRF_DimmerLights,w
 17637  1FC0  0086               	movwf	6
 17638  1FC1  3001               	movlw	1	; select bank2/3
 17639  1FC2  0087               	movwf	7
 17640  1FC3  0801               	movf	1,w
 17641  1FC4  00DF               	movwf	??_setRF_DimmerLights+1
 17642  1FC5  086F               	movf	_Product,w
 17643  1FC6  3E09               	addlw	9
 17644  1FC7  0086               	movwf	6
 17645  1FC8  3001               	movlw	1	; select bank2/3
 17646  1FC9  0087               	movwf	7
 17647  1FCA  085F               	movf	??_setRF_DimmerLights+1,w
 17648  1FCB  0081               	movwf	1
 17649                           
 17650                           ;RF_Control_B1.c: 456: Product->Data[17]=Product->Data[26+lights];
 17651  1FCC  0861               	movf	setRF_DimmerLights@lights,w
 17652  1FCD  3E1A               	addlw	26
 17653  1FCE  076F               	addwf	_Product,w
 17654  1FCF  00DE               	movwf	??_setRF_DimmerLights
 17655  1FD0  085E               	movf	??_setRF_DimmerLights,w
 17656  1FD1  0086               	movwf	6
 17657  1FD2  3001               	movlw	1	; select bank2/3
 17658  1FD3  0087               	movwf	7
 17659  1FD4  0801               	movf	1,w
 17660  1FD5  00DF               	movwf	??_setRF_DimmerLights+1
 17661  1FD6  086F               	movf	_Product,w
 17662  1FD7  3E11               	addlw	17
 17663  1FD8  0086               	movwf	6
 17664  1FD9  3001               	movlw	1	; select bank2/3
 17665  1FDA  0087               	movwf	7
 17666  1FDB  085F               	movf	??_setRF_DimmerLights+1,w
 17667  1FDC  0081               	movwf	1
 17668                           
 17669                           ;RF_Control_B1.c: 457: if(on)
 17670  1FDD  085D               	movf	setRF_DimmerLights@on,w
 17671  1FDE  1903               	btfsc	3,2
 17672  1FDF  2FF0               	goto	l8764
 17673                           
 17674                           ;RF_Control_B1.c: 458: {
 17675                           ;RF_Control_B1.c: 459: Product->Data[15]=(Product->Data[15]|status);
 17676  1FE0  086F               	movf	_Product,w
 17677  1FE1  3E0F               	addlw	15
 17678  1FE2  0086               	movwf	6
 17679  1FE3  3001               	movlw	1	; select bank2/3
 17680  1FE4  0087               	movwf	7
 17681  1FE5  0801               	movf	1,w
 17682  1FE6  0460               	iorwf	setRF_DimmerLights@status,w
 17683  1FE7  00DE               	movwf	??_setRF_DimmerLights
 17684  1FE8  086F               	movf	_Product,w
 17685  1FE9  3E0F               	addlw	15
 17686  1FEA  0086               	movwf	6
 17687  1FEB  3001               	movlw	1	; select bank2/3
 17688  1FEC  0087               	movwf	7
 17689  1FED  085E               	movf	??_setRF_DimmerLights,w
 17690  1FEE  0081               	movwf	1
 17691                           
 17692                           ;RF_Control_B1.c: 460: }
 17693  1FEF  0008               	return
 17694  1FF0                     l8764:	
 17695                           
 17696                           ;RF_Control_B1.c: 461: else
 17697                           ;RF_Control_B1.c: 462: {
 17698                           ;RF_Control_B1.c: 463: Product->Data[15]=(Product->Data[15]&(~status));
 17699  1FF0  086F               	movf	_Product,w
 17700  1FF1  3E0F               	addlw	15
 17701  1FF2  0086               	movwf	6
 17702  1FF3  3001               	movlw	1	; select bank2/3
 17703  1FF4  0087               	movwf	7
 17704  1FF5  0960               	comf	setRF_DimmerLights@status,w
 17705  1FF6  0501               	andwf	1,w
 17706  1FF7  00DE               	movwf	??_setRF_DimmerLights
 17707  1FF8  086F               	movf	_Product,w
 17708  1FF9  3E0F               	addlw	15
 17709  1FFA  0086               	movwf	6
 17710  1FFB  3001               	movlw	1	; select bank2/3
 17711  1FFC  0087               	movwf	7
 17712  1FFD  085E               	movf	??_setRF_DimmerLights,w
 17713  1FFE  0081               	movwf	1
 17714  1FFF  0008               	return
 17715  2000                     __end_of_setRF_DimmerLights:	
 17716                           
 17717                           	psect	text106
 17718  1CC5                     __ptext106:	
 17719 ;; *************** function _setPercentValue *****************
 17720 ;; Defined at:
 17721 ;;		line 505 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17722 ;; Parameters:    Size  Location     Type
 17723 ;;  value           1    wreg     unsigned char 
 17724 ;; Auto vars:     Size  Location     Type
 17725 ;;  value           1   57[BANK0 ] unsigned char 
 17726 ;;  i               3   58[BANK0 ] float 
 17727 ;; Return value:  Size  Location     Type
 17728 ;;                  1    wreg      unsigned char 
 17729 ;; Registers used:
 17730 ;;		wreg, status,2, status,0, pclath, cstack
 17731 ;; Tracked objects:
 17732 ;;		On entry : 0/0
 17733 ;;		On exit  : 0/0
 17734 ;;		Unchanged: 0/0
 17735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;Total ram usage:        4 bytes
 17741 ;; Hardware stack levels used:    1
 17742 ;; Hardware stack levels required when called:    6
 17743 ;; This function calls:
 17744 ;;		___awtoft
 17745 ;;		___ftdiv
 17746 ;;		___fttol
 17747 ;; This function is called by:
 17748 ;;		_Flash_Memory_Initialization
 17749 ;;		_setRF_DimmerLights
 17750 ;; This function uses a non-reentrant model
 17751 ;;
 17752                           
 17753                           
 17754                           ;psect for function _setPercentValue
 17755  1CC5                     _setPercentValue:	
 17756                           
 17757                           ;incstack = 0
 17758                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17759                           ;setPercentValue@value stored from wreg
 17760  1CC5  0020               	movlb	0	; select bank0
 17761  1CC6  00D9               	movwf	setPercentValue@value
 17762                           
 17763                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17764  1CC7  3000               	movlw	0
 17765  1CC8  00DA               	movwf	setPercentValue@i
 17766  1CC9  3054               	movlw	84
 17767  1CCA  00DB               	movwf	setPercentValue@i+1
 17768  1CCB  3042               	movlw	66
 17769  1CCC  00DC               	movwf	setPercentValue@i+2
 17770                           
 17771                           ;Dimmer_B1.c: 509: i/=100;
 17772  1CCD  3000               	movlw	0
 17773  1CCE  00AE               	movwf	___ftdiv@f2
 17774  1CCF  30C8               	movlw	200
 17775  1CD0  00AF               	movwf	___ftdiv@f2+1
 17776  1CD1  3042               	movlw	66
 17777  1CD2  00B0               	movwf	___ftdiv@f2+2
 17778  1CD3  085A               	movf	setPercentValue@i,w
 17779  1CD4  00B1               	movwf	___ftdiv@f1
 17780  1CD5  085B               	movf	setPercentValue@i+1,w
 17781  1CD6  00B2               	movwf	___ftdiv@f1+1
 17782  1CD7  085C               	movf	setPercentValue@i+2,w
 17783  1CD8  00B3               	movwf	___ftdiv@f1+2
 17784  1CD9  3188  2060  319C   	fcall	___ftdiv
 17785  1CDC  0020               	movlb	0	; select bank0
 17786  1CDD  082E               	movf	?___ftdiv,w
 17787  1CDE  00DA               	movwf	setPercentValue@i
 17788  1CDF  082F               	movf	?___ftdiv+1,w
 17789  1CE0  00DB               	movwf	setPercentValue@i+1
 17790  1CE1  0830               	movf	?___ftdiv+2,w
 17791  1CE2  00DC               	movwf	setPercentValue@i+2
 17792                           
 17793                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17794  1CE3  0859               	movf	setPercentValue@value,w
 17795  1CE4  3EBD               	addlw	189
 17796  1CE5  00A8               	movwf	___awtoft@c
 17797  1CE6  30FF               	movlw	255
 17798  1CE7  1803               	skipnc
 17799  1CE8  3000               	movlw	0
 17800  1CE9  00A9               	movwf	___awtoft@c+1
 17801  1CEA  31A7  2706  319C   	fcall	___awtoft
 17802  1CED  0020               	movlb	0	; select bank0
 17803  1CEE  0828               	movf	?___awtoft,w
 17804  1CEF  00B1               	movwf	___ftdiv@f1
 17805  1CF0  0829               	movf	?___awtoft+1,w
 17806  1CF1  00B2               	movwf	___ftdiv@f1+1
 17807  1CF2  082A               	movf	?___awtoft+2,w
 17808  1CF3  00B3               	movwf	___ftdiv@f1+2
 17809  1CF4  085A               	movf	setPercentValue@i,w
 17810  1CF5  00AE               	movwf	___ftdiv@f2
 17811  1CF6  085B               	movf	setPercentValue@i+1,w
 17812  1CF7  00AF               	movwf	___ftdiv@f2+1
 17813  1CF8  085C               	movf	setPercentValue@i+2,w
 17814  1CF9  00B0               	movwf	___ftdiv@f2+2
 17815  1CFA  3188  2060  319C   	fcall	___ftdiv
 17816  1CFD  0020               	movlb	0	; select bank0
 17817  1CFE  082E               	movf	?___ftdiv,w
 17818  1CFF  00CB               	movwf	___fttol@f1
 17819  1D00  082F               	movf	?___ftdiv+1,w
 17820  1D01  00CC               	movwf	___fttol@f1+1
 17821  1D02  0830               	movf	?___ftdiv+2,w
 17822  1D03  00CD               	movwf	___fttol@f1+2
 17823  1D04  3193  23FC         	fcall	___fttol
 17824  1D06  0020               	movlb	0	; select bank0
 17825  1D07  034B               	decf	?___fttol,w
 17826  1D08  3AFF               	xorlw	255
 17827  1D09  3E64               	addlw	100
 17828  1D0A  0008               	return
 17829  1D0B                     __end_of_setPercentValue:	
 17830                           
 17831                           	psect	text107
 17832  13FC                     __ptext107:	
 17833 ;; *************** function ___fttol *****************
 17834 ;; Defined at:
 17835 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17836 ;; Parameters:    Size  Location     Type
 17837 ;;  f1              3   43[BANK0 ] float 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;  lval            4   52[BANK0 ] unsigned long 
 17840 ;;  exp1            1   56[BANK0 ] unsigned char 
 17841 ;;  sign1           1   51[BANK0 ] unsigned char 
 17842 ;; Return value:  Size  Location     Type
 17843 ;;                  4   43[BANK0 ] long 
 17844 ;; Registers used:
 17845 ;;		wreg, status,2, status,0
 17846 ;; Tracked objects:
 17847 ;;		On entry : 0/0
 17848 ;;		On exit  : 0/0
 17849 ;;		Unchanged: 0/0
 17850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17851 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17854 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17855 ;;Total ram usage:       14 bytes
 17856 ;; Hardware stack levels used:    1
 17857 ;; Hardware stack levels required when called:    4
 17858 ;; This function calls:
 17859 ;;		Nothing
 17860 ;; This function is called by:
 17861 ;;		_getPercentValue
 17862 ;;		_setPercentValue
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function ___fttol
 17868  13FC                     ___fttol:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17872  13FC  0020               	movlb	0	; select bank0
 17873  13FD  084B               	movf	___fttol@f1,w
 17874  13FE  00CF               	movwf	??___fttol
 17875  13FF  084C               	movf	___fttol@f1+1,w
 17876  1400  00D0               	movwf	??___fttol+1
 17877  1401  084D               	movf	___fttol@f1+2,w
 17878  1402  00D1               	movwf	??___fttol+2
 17879  1403  1003               	clrc
 17880  1404  0D50               	rlf	??___fttol+1,w
 17881  1405  0D51               	rlf	??___fttol+2,w
 17882  1406  00D2               	movwf	??___fttol+3
 17883  1407  0852               	movf	??___fttol+3,w
 17884  1408  00D8               	movwf	___fttol@exp1
 17885  1409  08D8               	movf	___fttol@exp1,f
 17886  140A  1D03               	skipz
 17887  140B  2C15               	goto	l6380
 17888  140C  3000               	movlw	0
 17889  140D  00CE               	movwf	?___fttol+3
 17890  140E  3000               	movlw	0
 17891  140F  00CD               	movwf	?___fttol+2
 17892  1410  3000               	movlw	0
 17893  1411  00CC               	movwf	?___fttol+1
 17894  1412  3000               	movlw	0
 17895  1413  00CB               	movwf	?___fttol
 17896  1414  0008               	return
 17897  1415                     l6380:	
 17898  1415  084B               	movf	___fttol@f1,w
 17899  1416  00CF               	movwf	??___fttol
 17900  1417  084C               	movf	___fttol@f1+1,w
 17901  1418  00D0               	movwf	??___fttol+1
 17902  1419  084D               	movf	___fttol@f1+2,w
 17903  141A  00D1               	movwf	??___fttol+2
 17904  141B  3017               	movlw	23
 17905  141C                     u4655:	
 17906  141C  36D1               	lsrf	??___fttol+2,f
 17907  141D  0CD0               	rrf	??___fttol+1,f
 17908  141E  0CCF               	rrf	??___fttol,f
 17909  141F  0B89               	decfsz	9,f
 17910  1420  2C1C               	goto	u4655
 17911  1421  084F               	movf	??___fttol,w
 17912  1422  00D2               	movwf	??___fttol+3
 17913  1423  0852               	movf	??___fttol+3,w
 17914  1424  00D3               	movwf	___fttol@sign1
 17915  1425  17CC               	bsf	___fttol@f1+1,7
 17916  1426  30FF               	movlw	255
 17917  1427  05CB               	andwf	___fttol@f1,f
 17918  1428  30FF               	movlw	255
 17919  1429  05CC               	andwf	___fttol@f1+1,f
 17920  142A  3000               	movlw	0
 17921  142B  05CD               	andwf	___fttol@f1+2,f
 17922  142C  084B               	movf	___fttol@f1,w
 17923  142D  00D4               	movwf	___fttol@lval
 17924  142E  084C               	movf	___fttol@f1+1,w
 17925  142F  00D5               	movwf	___fttol@lval+1
 17926  1430  084D               	movf	___fttol@f1+2,w
 17927  1431  00D6               	movwf	___fttol@lval+2
 17928  1432  01D7               	clrf	___fttol@lval+3
 17929  1433  308E               	movlw	142
 17930  1434  02D8               	subwf	___fttol@exp1,f
 17931  1435  1FD8               	btfss	___fttol@exp1,7
 17932  1436  2C53               	goto	l6400
 17933  1437  0858               	movf	___fttol@exp1,w
 17934  1438  3A80               	xorlw	128
 17935  1439  3E8F               	addlw	143
 17936  143A  1803               	skipnc
 17937  143B  2C45               	goto	l6398
 17938  143C  3000               	movlw	0
 17939  143D  00CE               	movwf	?___fttol+3
 17940  143E  3000               	movlw	0
 17941  143F  00CD               	movwf	?___fttol+2
 17942  1440  3000               	movlw	0
 17943  1441  00CC               	movwf	?___fttol+1
 17944  1442  3000               	movlw	0
 17945  1443  00CB               	movwf	?___fttol
 17946  1444  0008               	return
 17947  1445                     l6398:	
 17948  1445  3001               	movlw	1
 17949  1446                     u4685:	
 17950  1446  36D7               	lsrf	___fttol@lval+3,f
 17951  1447  0CD6               	rrf	___fttol@lval+2,f
 17952  1448  0CD5               	rrf	___fttol@lval+1,f
 17953  1449  0CD4               	rrf	___fttol@lval,f
 17954  144A  0B89               	decfsz	9,f
 17955  144B  2C46               	goto	u4685
 17956  144C  3001               	movlw	1
 17957  144D  00CF               	movwf	??___fttol
 17958  144E  084F               	movf	??___fttol,w
 17959  144F  07D8               	addwf	___fttol@exp1,f
 17960  1450  1903               	btfsc	3,2
 17961  1451  2C6C               	goto	l6410
 17962  1452  2C45               	goto	l6398
 17963  1453                     l6400:	
 17964  1453  3018               	movlw	24
 17965  1454  0258               	subwf	___fttol@exp1,w
 17966  1455  1C03               	skipc
 17967  1456  2C69               	goto	l6408
 17968  1457  3000               	movlw	0
 17969  1458  00CE               	movwf	?___fttol+3
 17970  1459  3000               	movlw	0
 17971  145A  00CD               	movwf	?___fttol+2
 17972  145B  3000               	movlw	0
 17973  145C  00CC               	movwf	?___fttol+1
 17974  145D  3000               	movlw	0
 17975  145E  00CB               	movwf	?___fttol
 17976  145F  0008               	return
 17977  1460                     l6406:	
 17978  1460  3001               	movlw	1
 17979  1461                     u4715:	
 17980  1461  35D4               	lslf	___fttol@lval,f
 17981  1462  0DD5               	rlf	___fttol@lval+1,f
 17982  1463  0DD6               	rlf	___fttol@lval+2,f
 17983  1464  0DD7               	rlf	___fttol@lval+3,f
 17984  1465  0B89               	decfsz	9,f
 17985  1466  2C61               	goto	u4715
 17986  1467  3001               	movlw	1
 17987  1468  02D8               	subwf	___fttol@exp1,f
 17988  1469                     l6408:	
 17989  1469  08D8               	movf	___fttol@exp1,f
 17990  146A  1D03               	skipz
 17991  146B  2C60               	goto	l6406
 17992  146C                     l6410:	
 17993  146C  0853               	movf	___fttol@sign1,w
 17994  146D  1903               	btfsc	3,2
 17995  146E  2C7A               	goto	l6414
 17996  146F  09D4               	comf	___fttol@lval,f
 17997  1470  09D5               	comf	___fttol@lval+1,f
 17998  1471  09D6               	comf	___fttol@lval+2,f
 17999  1472  09D7               	comf	___fttol@lval+3,f
 18000  1473  0AD4               	incf	___fttol@lval,f
 18001  1474  1903               	skipnz
 18002  1475  0AD5               	incf	___fttol@lval+1,f
 18003  1476  1903               	skipnz
 18004  1477  0AD6               	incf	___fttol@lval+2,f
 18005  1478  1903               	skipnz
 18006  1479  0AD7               	incf	___fttol@lval+3,f
 18007  147A                     l6414:	
 18008  147A  0857               	movf	___fttol@lval+3,w
 18009  147B  00CE               	movwf	?___fttol+3
 18010  147C  0856               	movf	___fttol@lval+2,w
 18011  147D  00CD               	movwf	?___fttol+2
 18012  147E  0855               	movf	___fttol@lval+1,w
 18013  147F  00CC               	movwf	?___fttol+1
 18014  1480  0854               	movf	___fttol@lval,w
 18015  1481  00CB               	movwf	?___fttol
 18016  1482  0008               	return
 18017  1483                     __end_of___fttol:	
 18018                           
 18019                           	psect	text108
 18020  0860                     __ptext108:	
 18021 ;; *************** function ___ftdiv *****************
 18022 ;; Defined at:
 18023 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;  f2              3   14[BANK0 ] float 
 18026 ;;  f1              3   17[BANK0 ] float 
 18027 ;; Auto vars:     Size  Location     Type
 18028 ;;  f3              3   25[BANK0 ] float 
 18029 ;;  sign            1   29[BANK0 ] unsigned char 
 18030 ;;  exp             1   28[BANK0 ] unsigned char 
 18031 ;;  cntr            1   24[BANK0 ] unsigned char 
 18032 ;; Return value:  Size  Location     Type
 18033 ;;                  3   14[BANK0 ] float 
 18034 ;; Registers used:
 18035 ;;		wreg, status,2, status,0, pclath, cstack
 18036 ;; Tracked objects:
 18037 ;;		On entry : 0/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18041 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18043 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18044 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18045 ;;Total ram usage:       16 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    5
 18048 ;; This function calls:
 18049 ;;		___ftpack
 18050 ;; This function is called by:
 18051 ;;		_getPercentValue
 18052 ;;		_setPercentValue
 18053 ;; This function uses a non-reentrant model
 18054 ;;
 18055                           
 18056                           
 18057                           ;psect for function ___ftdiv
 18058  0860                     ___ftdiv:	
 18059                           
 18060                           ;incstack = 0
 18061                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18062  0860  0020               	movlb	0	; select bank0
 18063  0861  0831               	movf	___ftdiv@f1,w
 18064  0862  00B4               	movwf	??___ftdiv
 18065  0863  0832               	movf	___ftdiv@f1+1,w
 18066  0864  00B5               	movwf	??___ftdiv+1
 18067  0865  0833               	movf	___ftdiv@f1+2,w
 18068  0866  00B6               	movwf	??___ftdiv+2
 18069  0867  1003               	clrc
 18070  0868  0D35               	rlf	??___ftdiv+1,w
 18071  0869  0D36               	rlf	??___ftdiv+2,w
 18072  086A  00B7               	movwf	??___ftdiv+3
 18073  086B  0837               	movf	??___ftdiv+3,w
 18074  086C  00BC               	movwf	___ftdiv@exp
 18075  086D  08BC               	movf	___ftdiv@exp,f
 18076  086E  1D03               	skipz
 18077  086F  2877               	goto	l6288
 18078  0870  3000               	movlw	0
 18079  0871  00AE               	movwf	?___ftdiv
 18080  0872  3000               	movlw	0
 18081  0873  00AF               	movwf	?___ftdiv+1
 18082  0874  3000               	movlw	0
 18083  0875  00B0               	movwf	?___ftdiv+2
 18084  0876  0008               	return
 18085  0877                     l6288:	
 18086  0877  082E               	movf	___ftdiv@f2,w
 18087  0878  00B4               	movwf	??___ftdiv
 18088  0879  082F               	movf	___ftdiv@f2+1,w
 18089  087A  00B5               	movwf	??___ftdiv+1
 18090  087B  0830               	movf	___ftdiv@f2+2,w
 18091  087C  00B6               	movwf	??___ftdiv+2
 18092  087D  1003               	clrc
 18093  087E  0D35               	rlf	??___ftdiv+1,w
 18094  087F  0D36               	rlf	??___ftdiv+2,w
 18095  0880  00B7               	movwf	??___ftdiv+3
 18096  0881  0837               	movf	??___ftdiv+3,w
 18097  0882  00BD               	movwf	___ftdiv@sign
 18098  0883  08BD               	movf	___ftdiv@sign,f
 18099  0884  1D03               	skipz
 18100  0885  288D               	goto	l6294
 18101  0886  3000               	movlw	0
 18102  0887  00AE               	movwf	?___ftdiv
 18103  0888  3000               	movlw	0
 18104  0889  00AF               	movwf	?___ftdiv+1
 18105  088A  3000               	movlw	0
 18106  088B  00B0               	movwf	?___ftdiv+2
 18107  088C  0008               	return
 18108  088D                     l6294:	
 18109  088D  3000               	movlw	0
 18110  088E  00B9               	movwf	___ftdiv@f3
 18111  088F  3000               	movlw	0
 18112  0890  00BA               	movwf	___ftdiv@f3+1
 18113  0891  3000               	movlw	0
 18114  0892  00BB               	movwf	___ftdiv@f3+2
 18115  0893  3089               	movlw	137
 18116  0894  073D               	addwf	___ftdiv@sign,w
 18117  0895  00B4               	movwf	??___ftdiv
 18118  0896  0834               	movf	??___ftdiv,w
 18119  0897  02BC               	subwf	___ftdiv@exp,f
 18120  0898  0831               	movf	___ftdiv@f1,w
 18121  0899  00B4               	movwf	??___ftdiv
 18122  089A  0832               	movf	___ftdiv@f1+1,w
 18123  089B  00B5               	movwf	??___ftdiv+1
 18124  089C  0833               	movf	___ftdiv@f1+2,w
 18125  089D  00B6               	movwf	??___ftdiv+2
 18126  089E  3010               	movlw	16
 18127  089F                     u4465:	
 18128  089F  36B6               	lsrf	??___ftdiv+2,f
 18129  08A0  0CB5               	rrf	??___ftdiv+1,f
 18130  08A1  0CB4               	rrf	??___ftdiv,f
 18131  08A2  0B89               	decfsz	9,f
 18132  08A3  289F               	goto	u4465
 18133  08A4  0834               	movf	??___ftdiv,w
 18134  08A5  00B7               	movwf	??___ftdiv+3
 18135  08A6  0837               	movf	??___ftdiv+3,w
 18136  08A7  00BD               	movwf	___ftdiv@sign
 18137  08A8  082E               	movf	___ftdiv@f2,w
 18138  08A9  00B4               	movwf	??___ftdiv
 18139  08AA  082F               	movf	___ftdiv@f2+1,w
 18140  08AB  00B5               	movwf	??___ftdiv+1
 18141  08AC  0830               	movf	___ftdiv@f2+2,w
 18142  08AD  00B6               	movwf	??___ftdiv+2
 18143  08AE  3010               	movlw	16
 18144  08AF                     u4475:	
 18145  08AF  36B6               	lsrf	??___ftdiv+2,f
 18146  08B0  0CB5               	rrf	??___ftdiv+1,f
 18147  08B1  0CB4               	rrf	??___ftdiv,f
 18148  08B2  0B89               	decfsz	9,f
 18149  08B3  28AF               	goto	u4475
 18150  08B4  0834               	movf	??___ftdiv,w
 18151  08B5  00B7               	movwf	??___ftdiv+3
 18152  08B6  0837               	movf	??___ftdiv+3,w
 18153  08B7  06BD               	xorwf	___ftdiv@sign,f
 18154  08B8  3080               	movlw	128
 18155  08B9  00B4               	movwf	??___ftdiv
 18156  08BA  0834               	movf	??___ftdiv,w
 18157  08BB  05BD               	andwf	___ftdiv@sign,f
 18158  08BC  17B2               	bsf	___ftdiv@f1+1,7
 18159  08BD  30FF               	movlw	255
 18160  08BE  05B1               	andwf	___ftdiv@f1,f
 18161  08BF  30FF               	movlw	255
 18162  08C0  05B2               	andwf	___ftdiv@f1+1,f
 18163  08C1  3000               	movlw	0
 18164  08C2  05B3               	andwf	___ftdiv@f1+2,f
 18165  08C3  17AF               	bsf	___ftdiv@f2+1,7
 18166  08C4  30FF               	movlw	255
 18167  08C5  05AE               	andwf	___ftdiv@f2,f
 18168  08C6  30FF               	movlw	255
 18169  08C7  05AF               	andwf	___ftdiv@f2+1,f
 18170  08C8  3000               	movlw	0
 18171  08C9  05B0               	andwf	___ftdiv@f2+2,f
 18172  08CA  3018               	movlw	24
 18173  08CB  00B4               	movwf	??___ftdiv
 18174  08CC  0834               	movf	??___ftdiv,w
 18175  08CD  00B8               	movwf	___ftdiv@cntr
 18176  08CE                     l6308:	
 18177  08CE  3001               	movlw	1
 18178  08CF                     u4485:	
 18179  08CF  35B9               	lslf	___ftdiv@f3,f
 18180  08D0  0DBA               	rlf	___ftdiv@f3+1,f
 18181  08D1  0DBB               	rlf	___ftdiv@f3+2,f
 18182  08D2  0B89               	decfsz	9,f
 18183  08D3  28CF               	goto	u4485
 18184  08D4  0830               	movf	___ftdiv@f2+2,w
 18185  08D5  0233               	subwf	___ftdiv@f1+2,w
 18186  08D6  1D03               	skipz
 18187  08D7  28DE               	goto	u4495
 18188  08D8  082F               	movf	___ftdiv@f2+1,w
 18189  08D9  0232               	subwf	___ftdiv@f1+1,w
 18190  08DA  1D03               	skipz
 18191  08DB  28DE               	goto	u4495
 18192  08DC  082E               	movf	___ftdiv@f2,w
 18193  08DD  0231               	subwf	___ftdiv@f1,w
 18194  08DE                     u4495:	
 18195  08DE  1C03               	skipc
 18196  08DF  28E7               	goto	l6316
 18197  08E0  082E               	movf	___ftdiv@f2,w
 18198  08E1  02B1               	subwf	___ftdiv@f1,f
 18199  08E2  082F               	movf	___ftdiv@f2+1,w
 18200  08E3  3BB2               	subwfb	___ftdiv@f1+1,f
 18201  08E4  0830               	movf	___ftdiv@f2+2,w
 18202  08E5  3BB3               	subwfb	___ftdiv@f1+2,f
 18203  08E6  1439               	bsf	___ftdiv@f3,0
 18204  08E7                     l6316:	
 18205  08E7  3001               	movlw	1
 18206  08E8                     u4505:	
 18207  08E8  35B1               	lslf	___ftdiv@f1,f
 18208  08E9  0DB2               	rlf	___ftdiv@f1+1,f
 18209  08EA  0DB3               	rlf	___ftdiv@f1+2,f
 18210  08EB  0B89               	decfsz	9,f
 18211  08EC  28E8               	goto	u4505
 18212  08ED  3001               	movlw	1
 18213  08EE  02B8               	subwf	___ftdiv@cntr,f
 18214  08EF  1D03               	btfss	3,2
 18215  08F0  28CE               	goto	l6308
 18216  08F1  0839               	movf	___ftdiv@f3,w
 18217  08F2  00A0               	movwf	___ftpack@arg
 18218  08F3  083A               	movf	___ftdiv@f3+1,w
 18219  08F4  00A1               	movwf	___ftpack@arg+1
 18220  08F5  083B               	movf	___ftdiv@f3+2,w
 18221  08F6  00A2               	movwf	___ftpack@arg+2
 18222  08F7  083C               	movf	___ftdiv@exp,w
 18223  08F8  00B4               	movwf	??___ftdiv
 18224  08F9  0834               	movf	??___ftdiv,w
 18225  08FA  00A3               	movwf	___ftpack@exp
 18226  08FB  083D               	movf	___ftdiv@sign,w
 18227  08FC  00B5               	movwf	??___ftdiv+1
 18228  08FD  0835               	movf	??___ftdiv+1,w
 18229  08FE  00A4               	movwf	___ftpack@sign
 18230  08FF  319E  266B         	fcall	___ftpack
 18231  0901  0020               	movlb	0	; select bank0
 18232  0902  0820               	movf	?___ftpack,w
 18233  0903  00AE               	movwf	?___ftdiv
 18234  0904  0821               	movf	?___ftpack+1,w
 18235  0905  00AF               	movwf	?___ftdiv+1
 18236  0906  0822               	movf	?___ftpack+2,w
 18237  0907  00B0               	movwf	?___ftdiv+2
 18238  0908  0008               	return
 18239  0909                     __end_of___ftdiv:	
 18240                           
 18241                           	psect	text109
 18242  2706                     __ptext109:	
 18243 ;; *************** function ___awtoft *****************
 18244 ;; Defined at:
 18245 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18246 ;; Parameters:    Size  Location     Type
 18247 ;;  c               2    8[BANK0 ] int 
 18248 ;; Auto vars:     Size  Location     Type
 18249 ;;  sign            1   13[BANK0 ] unsigned char 
 18250 ;; Return value:  Size  Location     Type
 18251 ;;                  3    8[BANK0 ] float 
 18252 ;; Registers used:
 18253 ;;		wreg, status,2, status,0, pclath, cstack
 18254 ;; Tracked objects:
 18255 ;;		On entry : 0/0
 18256 ;;		On exit  : 0/0
 18257 ;;		Unchanged: 0/0
 18258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18259 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18263 ;;Total ram usage:        6 bytes
 18264 ;; Hardware stack levels used:    1
 18265 ;; Hardware stack levels required when called:    5
 18266 ;; This function calls:
 18267 ;;		___ftpack
 18268 ;; This function is called by:
 18269 ;;		_getPercentValue
 18270 ;;		_setPercentValue
 18271 ;; This function uses a non-reentrant model
 18272 ;;
 18273                           
 18274                           
 18275                           ;psect for function ___awtoft
 18276  2706                     ___awtoft:	
 18277                           
 18278                           ;incstack = 0
 18279                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18280  2706  0020               	movlb	0	; select bank0
 18281  2707  01AD               	clrf	___awtoft@sign
 18282  2708  1FA9               	btfss	___awtoft@c+1,7
 18283  2709  2F11               	goto	l6206
 18284  270A  09A8               	comf	___awtoft@c,f
 18285  270B  09A9               	comf	___awtoft@c+1,f
 18286  270C  0AA8               	incf	___awtoft@c,f
 18287  270D  1903               	skipnz
 18288  270E  0AA9               	incf	___awtoft@c+1,f
 18289  270F  01AD               	clrf	___awtoft@sign
 18290  2710  0AAD               	incf	___awtoft@sign,f
 18291  2711                     l6206:	
 18292  2711  0828               	movf	___awtoft@c,w
 18293  2712  00A0               	movwf	___ftpack@arg
 18294  2713  0829               	movf	___awtoft@c+1,w
 18295  2714  00A1               	movwf	___ftpack@arg+1
 18296  2715  01A2               	clrf	___ftpack@arg+2
 18297  2716  308E               	movlw	142
 18298  2717  00AB               	movwf	??___awtoft
 18299  2718  082B               	movf	??___awtoft,w
 18300  2719  00A3               	movwf	___ftpack@exp
 18301  271A  082D               	movf	___awtoft@sign,w
 18302  271B  00AC               	movwf	??___awtoft+1
 18303  271C  082C               	movf	??___awtoft+1,w
 18304  271D  00A4               	movwf	___ftpack@sign
 18305  271E  319E  266B         	fcall	___ftpack
 18306  2720  0020               	movlb	0	; select bank0
 18307  2721  0820               	movf	?___ftpack,w
 18308  2722  00A8               	movwf	?___awtoft
 18309  2723  0821               	movf	?___ftpack+1,w
 18310  2724  00A9               	movwf	?___awtoft+1
 18311  2725  0822               	movf	?___ftpack+2,w
 18312  2726  00AA               	movwf	?___awtoft+2
 18313  2727  0008               	return
 18314  2728                     __end_of___awtoft:	
 18315                           
 18316                           	psect	text110
 18317  1E6B                     __ptext110:	
 18318 ;; *************** function ___ftpack *****************
 18319 ;; Defined at:
 18320 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;  arg             3    0[BANK0 ] unsigned um
 18323 ;;  exp             1    3[BANK0 ] unsigned char 
 18324 ;;  sign            1    4[BANK0 ] unsigned char 
 18325 ;; Auto vars:     Size  Location     Type
 18326 ;;		None
 18327 ;; Return value:  Size  Location     Type
 18328 ;;                  3    0[BANK0 ] float 
 18329 ;; Registers used:
 18330 ;;		wreg, status,2, status,0
 18331 ;; Tracked objects:
 18332 ;;		On entry : 0/0
 18333 ;;		On exit  : 0/0
 18334 ;;		Unchanged: 0/0
 18335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18336 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;Total ram usage:        8 bytes
 18341 ;; Hardware stack levels used:    1
 18342 ;; Hardware stack levels required when called:    4
 18343 ;; This function calls:
 18344 ;;		Nothing
 18345 ;; This function is called by:
 18346 ;;		___awtoft
 18347 ;;		___ftadd
 18348 ;;		___ftdiv
 18349 ;;		___ftmul
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353                           
 18354                           ;psect for function ___ftpack
 18355  1E6B                     ___ftpack:	
 18356                           
 18357                           ;incstack = 0
 18358                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18359  1E6B  0020               	movlb	0	; select bank0
 18360  1E6C  0823               	movf	___ftpack@exp,w
 18361  1E6D  1903               	btfsc	3,2
 18362  1E6E  2E74               	goto	l6172
 18363  1E6F  0822               	movf	___ftpack@arg+2,w
 18364  1E70  0421               	iorwf	___ftpack@arg+1,w
 18365  1E71  0420               	iorwf	___ftpack@arg,w
 18366  1E72  1D03               	skipz
 18367  1E73  2E85               	goto	l6178
 18368  1E74                     l6172:	
 18369  1E74  3000               	movlw	0
 18370  1E75  00A0               	movwf	?___ftpack
 18371  1E76  3000               	movlw	0
 18372  1E77  00A1               	movwf	?___ftpack+1
 18373  1E78  3000               	movlw	0
 18374  1E79  00A2               	movwf	?___ftpack+2
 18375  1E7A  0008               	return
 18376  1E7B                     l6176:	
 18377  1E7B  3001               	movlw	1
 18378  1E7C  00A5               	movwf	??___ftpack
 18379  1E7D  0825               	movf	??___ftpack,w
 18380  1E7E  07A3               	addwf	___ftpack@exp,f
 18381  1E7F  3001               	movlw	1
 18382  1E80                     u4115:	
 18383  1E80  36A2               	lsrf	___ftpack@arg+2,f
 18384  1E81  0CA1               	rrf	___ftpack@arg+1,f
 18385  1E82  0CA0               	rrf	___ftpack@arg,f
 18386  1E83  0B89               	decfsz	9,f
 18387  1E84  2E80               	goto	u4115
 18388  1E85                     l6178:	
 18389  1E85  30FE               	movlw	254
 18390  1E86  0522               	andwf	___ftpack@arg+2,w
 18391  1E87  1903               	btfsc	3,2
 18392  1E88  2E9E               	goto	l3400
 18393  1E89  2E7B               	goto	l6176
 18394  1E8A                     l6180:	
 18395  1E8A  3001               	movlw	1
 18396  1E8B  00A5               	movwf	??___ftpack
 18397  1E8C  0825               	movf	??___ftpack,w
 18398  1E8D  07A3               	addwf	___ftpack@exp,f
 18399  1E8E  3001               	movlw	1
 18400  1E8F  07A0               	addwf	___ftpack@arg,f
 18401  1E90  3000               	movlw	0
 18402  1E91  1803               	skipnc
 18403  1E92  3001               	movlw	1
 18404  1E93  07A1               	addwf	___ftpack@arg+1,f
 18405  1E94  3000               	movlw	0
 18406  1E95  1803               	skipnc
 18407  1E96  3001               	movlw	1
 18408  1E97  07A2               	addwf	___ftpack@arg+2,f
 18409  1E98  3001               	movlw	1
 18410  1E99                     u4135:	
 18411  1E99  36A2               	lsrf	___ftpack@arg+2,f
 18412  1E9A  0CA1               	rrf	___ftpack@arg+1,f
 18413  1E9B  0CA0               	rrf	___ftpack@arg,f
 18414  1E9C  0B89               	decfsz	9,f
 18415  1E9D  2E99               	goto	u4135
 18416  1E9E                     l3400:	
 18417  1E9E  30FF               	movlw	255
 18418  1E9F  0522               	andwf	___ftpack@arg+2,w
 18419  1EA0  1903               	btfsc	3,2
 18420  1EA1  2EAB               	goto	l6188
 18421  1EA2  2E8A               	goto	l6180
 18422  1EA3                     l6186:	
 18423  1EA3  3001               	movlw	1
 18424  1EA4  02A3               	subwf	___ftpack@exp,f
 18425  1EA5  3001               	movlw	1
 18426  1EA6                     u4155:	
 18427  1EA6  35A0               	lslf	___ftpack@arg,f
 18428  1EA7  0DA1               	rlf	___ftpack@arg+1,f
 18429  1EA8  0DA2               	rlf	___ftpack@arg+2,f
 18430  1EA9  0B89               	decfsz	9,f
 18431  1EAA  2EA6               	goto	u4155
 18432  1EAB                     l6188:	
 18433  1EAB  1FA1               	btfss	___ftpack@arg+1,7
 18434  1EAC  2EA3               	goto	l6186
 18435  1EAD  1823               	btfsc	___ftpack@exp,0
 18436  1EAE  2EB5               	goto	l3406
 18437  1EAF  30FF               	movlw	255
 18438  1EB0  05A0               	andwf	___ftpack@arg,f
 18439  1EB1  307F               	movlw	127
 18440  1EB2  05A1               	andwf	___ftpack@arg+1,f
 18441  1EB3  30FF               	movlw	255
 18442  1EB4  05A2               	andwf	___ftpack@arg+2,f
 18443  1EB5                     l3406:	
 18444  1EB5  1003               	clrc
 18445  1EB6  0CA3               	rrf	___ftpack@exp,f
 18446  1EB7  0823               	movf	___ftpack@exp,w
 18447  1EB8  00A5               	movwf	??___ftpack
 18448  1EB9  01A6               	clrf	??___ftpack+1
 18449  1EBA  01A7               	clrf	??___ftpack+2
 18450  1EBB  3010               	movlw	16
 18451  1EBC                     u4185:	
 18452  1EBC  35A5               	lslf	??___ftpack,f
 18453  1EBD  0DA6               	rlf	??___ftpack+1,f
 18454  1EBE  0DA7               	rlf	??___ftpack+2,f
 18455  1EBF  0B89               	decfsz	9,f
 18456  1EC0  2EBC               	goto	u4185
 18457  1EC1  0825               	movf	??___ftpack,w
 18458  1EC2  04A0               	iorwf	___ftpack@arg,f
 18459  1EC3  0826               	movf	??___ftpack+1,w
 18460  1EC4  04A1               	iorwf	___ftpack@arg+1,f
 18461  1EC5  0827               	movf	??___ftpack+2,w
 18462  1EC6  04A2               	iorwf	___ftpack@arg+2,f
 18463  1EC7  0824               	movf	___ftpack@sign,w
 18464  1EC8  1903               	btfsc	3,2
 18465  1EC9  0008               	return
 18466  1ECA  17A2               	bsf	___ftpack@arg+2,7
 18467  1ECB  0008               	return
 18468  1ECC                     __end_of___ftpack:	
 18469                           
 18470                           	psect	text111
 18471  2438                     __ptext111:	
 18472 ;; *************** function _setRFSW_Status *****************
 18473 ;; Defined at:
 18474 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18475 ;; Parameters:    Size  Location     Type
 18476 ;;  sw              1    wreg     unsigned char 
 18477 ;;  command         1    2[BANK0 ] unsigned char 
 18478 ;; Auto vars:     Size  Location     Type
 18479 ;;  sw              1    3[BANK0 ] unsigned char 
 18480 ;; Return value:  Size  Location     Type
 18481 ;;		None               void
 18482 ;; Registers used:
 18483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18484 ;; Tracked objects:
 18485 ;;		On entry : 0/0
 18486 ;;		On exit  : 0/0
 18487 ;;		Unchanged: 0/0
 18488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18493 ;;Total ram usage:        2 bytes
 18494 ;; Hardware stack levels used:    1
 18495 ;; Hardware stack levels required when called:    5
 18496 ;; This function calls:
 18497 ;;		_RfSWPointSelect
 18498 ;; This function is called by:
 18499 ;;		_DlyOff_Main
 18500 ;;		_setDimmerLights_ERROR
 18501 ;;		_setControl_Lights_Table
 18502 ;;		_Sw_DimmerOnFunc
 18503 ;;		_Sw_DimmerAdjFunc
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           
 18508                           ;psect for function _setRFSW_Status
 18509  2438                     _setRFSW_Status:	
 18510                           
 18511                           ;incstack = 0
 18512                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18513                           ;setRFSW_Status@sw stored from wreg
 18514  2438  0020               	movlb	0	; select bank0
 18515  2439  00A3               	movwf	setRFSW_Status@sw
 18516                           
 18517                           ;RF_Control_B1.c: 426: RfSWPointSelect(sw);
 18518  243A  0823               	movf	setRFSW_Status@sw,w
 18519  243B  31A5  2561         	fcall	_RfSWPointSelect
 18520                           
 18521                           ;RF_Control_B1.c: 427: RFSW->Status=command;
 18522  243D  0021               	movlb	1	; select bank1
 18523  243E  083C               	movf	_RFSW^(0+128),w
 18524  243F  0086               	movwf	6
 18525  2440  0187               	clrf	7
 18526  2441  0020               	movlb	0	; select bank0
 18527  2442  0822               	movf	setRFSW_Status@command,w
 18528  2443  1001               	bcf	1,0
 18529  2444  1D03               	skipz
 18530  2445  1401               	bsf	1,0
 18531  2446  0008               	return
 18532  2447                     __end_of_setRFSW_Status:	
 18533                           
 18534                           	psect	text112
 18535  2561                     __ptext112:	
 18536 ;; *************** function _RfSWPointSelect *****************
 18537 ;; Defined at:
 18538 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18539 ;; Parameters:    Size  Location     Type
 18540 ;;  sw              1    wreg     unsigned char 
 18541 ;; Auto vars:     Size  Location     Type
 18542 ;;  sw              1    1[BANK0 ] unsigned char 
 18543 ;; Return value:  Size  Location     Type
 18544 ;;		None               void
 18545 ;; Registers used:
 18546 ;;		wreg
 18547 ;; Tracked objects:
 18548 ;;		On entry : 0/0
 18549 ;;		On exit  : 0/0
 18550 ;;		Unchanged: 0/0
 18551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18556 ;;Total ram usage:        2 bytes
 18557 ;; Hardware stack levels used:    1
 18558 ;; Hardware stack levels required when called:    4
 18559 ;; This function calls:
 18560 ;;		Nothing
 18561 ;; This function is called by:
 18562 ;;		_setRFSW_Control
 18563 ;;		_setRFSW_AdjControl
 18564 ;;		_setRFSW_Status
 18565 ;; This function uses a non-reentrant model
 18566 ;;
 18567                           
 18568                           
 18569                           ;psect for function _RfSWPointSelect
 18570  2561                     _RfSWPointSelect:	
 18571                           
 18572                           ;incstack = 0
 18573                           ; Regs used in _RfSWPointSelect: [wreg]
 18574                           ;RfSWPointSelect@sw stored from wreg
 18575  2561  0020               	movlb	0	; select bank0
 18576  2562  00A1               	movwf	RfSWPointSelect@sw
 18577                           
 18578                           ;RF_Control_B1.c: 349: if(sw == 1)
 18579  2563  0821               	movf	RfSWPointSelect@sw,w
 18580  2564  3A01               	xorlw	1
 18581  2565  1D03               	skipz
 18582  2566  2D6C               	goto	l2724
 18583                           
 18584                           ;RF_Control_B1.c: 350: {
 18585                           ;RF_Control_B1.c: 351: RFSW=&RFSW1;
 18586  2567  30E7               	movlw	_RFSW1& (0+255)
 18587  2568  00A0               	movwf	??_RfSWPointSelect
 18588  2569  0820               	movf	??_RfSWPointSelect,w
 18589  256A  0021               	movlb	1	; select bank1
 18590  256B  00BC               	movwf	_RFSW^(0+128)
 18591  256C                     l2724:	
 18592                           
 18593                           ;RF_Control_B1.c: 352: }
 18594                           ;RF_Control_B1.c: 355: if(sw == 2)
 18595  256C  0020               	movlb	0	; select bank0
 18596  256D  0821               	movf	RfSWPointSelect@sw,w
 18597  256E  3A02               	xorlw	2
 18598  256F  1D03               	skipz
 18599  2570  0008               	return
 18600                           
 18601                           ;RF_Control_B1.c: 356: {
 18602                           ;RF_Control_B1.c: 357: RFSW=&RFSW2;
 18603  2571  30E8               	movlw	_RFSW2& (0+255)
 18604  2572  00A0               	movwf	??_RfSWPointSelect
 18605  2573  0820               	movf	??_RfSWPointSelect,w
 18606  2574  0021               	movlb	1	; select bank1
 18607  2575  00BC               	movwf	_RFSW^(0+128)
 18608  2576  0008               	return
 18609  2577                     __end_of_RfSWPointSelect:	
 18610                           
 18611                           	psect	text113
 18612  2476                     __ptext113:	
 18613 ;; *************** function _setDimmerLights_Trigger *****************
 18614 ;; Defined at:
 18615 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18616 ;; Parameters:    Size  Location     Type
 18617 ;;  lights          1    wreg     unsigned char 
 18618 ;;  command         1    2[BANK0 ] unsigned char 
 18619 ;; Auto vars:     Size  Location     Type
 18620 ;;  lights          1    3[BANK0 ] unsigned char 
 18621 ;; Return value:  Size  Location     Type
 18622 ;;		None               void
 18623 ;; Registers used:
 18624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18625 ;; Tracked objects:
 18626 ;;		On entry : 0/0
 18627 ;;		On exit  : 0/0
 18628 ;;		Unchanged: 0/0
 18629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18630 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18634 ;;Total ram usage:        2 bytes
 18635 ;; Hardware stack levels used:    1
 18636 ;; Hardware stack levels required when called:    5
 18637 ;; This function calls:
 18638 ;;		_DimmerLightsPointSelect
 18639 ;; This function is called by:
 18640 ;;		_DlyOff_Main
 18641 ;;		_setRFSW_Control
 18642 ;;		_Sw_DimmerOnFunc
 18643 ;;		_Sw_DimmerOffFunc
 18644 ;; This function uses a non-reentrant model
 18645 ;;
 18646                           
 18647                           
 18648                           ;psect for function _setDimmerLights_Trigger
 18649  2476                     _setDimmerLights_Trigger:	
 18650                           
 18651                           ;incstack = 0
 18652                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18653                           ;setDimmerLights_Trigger@lights stored from wreg
 18654  2476  0020               	movlb	0	; select bank0
 18655  2477  00A3               	movwf	setDimmerLights_Trigger@lights
 18656                           
 18657                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18658  2478  0823               	movf	setDimmerLights_Trigger@lights,w
 18659  2479  31A4  24E7         	fcall	_DimmerLightsPointSelect
 18660                           
 18661                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18662  247B  0020               	movlb	0	; select bank0
 18663  247C  086C               	movf	_DimmerLights,w
 18664  247D  3E09               	addlw	9
 18665  247E  0086               	movwf	6
 18666  247F  3001               	movlw	1	; select bank2/3
 18667  2480  0087               	movwf	7
 18668  2481  0822               	movf	setDimmerLights_Trigger@command,w
 18669  2482  1081               	bcf	1,1
 18670  2483  1D03               	skipz
 18671  2484  1481               	bsf	1,1
 18672  2485  0008               	return
 18673  2486                     __end_of_setDimmerLights_Trigger:	
 18674                           
 18675                           	psect	text114
 18676  2466                     __ptext114:	
 18677 ;; *************** function _setDimmerLights_Switch *****************
 18678 ;; Defined at:
 18679 ;;		line 435 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18680 ;; Parameters:    Size  Location     Type
 18681 ;;  lights          1    wreg     unsigned char 
 18682 ;;  command         1    2[BANK0 ] unsigned char 
 18683 ;; Auto vars:     Size  Location     Type
 18684 ;;  lights          1    3[BANK0 ] unsigned char 
 18685 ;; Return value:  Size  Location     Type
 18686 ;;		None               void
 18687 ;; Registers used:
 18688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18689 ;; Tracked objects:
 18690 ;;		On entry : 0/0
 18691 ;;		On exit  : 0/0
 18692 ;;		Unchanged: 0/0
 18693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18694 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;Total ram usage:        2 bytes
 18699 ;; Hardware stack levels used:    1
 18700 ;; Hardware stack levels required when called:    5
 18701 ;; This function calls:
 18702 ;;		_DimmerLightsPointSelect
 18703 ;; This function is called by:
 18704 ;;		_DlyOff_Main
 18705 ;;		_setRFSW_Control
 18706 ;;		_Sw_DimmerOnFunc
 18707 ;;		_Sw_DimmerOffFunc
 18708 ;; This function uses a non-reentrant model
 18709 ;;
 18710                           
 18711                           
 18712                           ;psect for function _setDimmerLights_Switch
 18713  2466                     _setDimmerLights_Switch:	
 18714                           
 18715                           ;incstack = 0
 18716                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18717                           ;setDimmerLights_Switch@lights stored from wreg
 18718  2466  0020               	movlb	0	; select bank0
 18719  2467  00A3               	movwf	setDimmerLights_Switch@lights
 18720                           
 18721                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18722  2468  0823               	movf	setDimmerLights_Switch@lights,w
 18723  2469  31A4  24E7         	fcall	_DimmerLightsPointSelect
 18724                           
 18725                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18726  246B  0020               	movlb	0	; select bank0
 18727  246C  086C               	movf	_DimmerLights,w
 18728  246D  3E09               	addlw	9
 18729  246E  0086               	movwf	6
 18730  246F  3001               	movlw	1	; select bank2/3
 18731  2470  0087               	movwf	7
 18732  2471  0822               	movf	setDimmerLights_Switch@command,w
 18733  2472  1001               	bcf	1,0
 18734  2473  1D03               	skipz
 18735  2474  1401               	bsf	1,0
 18736  2475  0008               	return
 18737  2476                     __end_of_setDimmerLights_Switch:	
 18738                           
 18739                           	psect	text115
 18740  24E7                     __ptext115:	
 18741 ;; *************** function _DimmerLightsPointSelect *****************
 18742 ;; Defined at:
 18743 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18744 ;; Parameters:    Size  Location     Type
 18745 ;;  lights          1    wreg     unsigned char 
 18746 ;; Auto vars:     Size  Location     Type
 18747 ;;  lights          1    1[BANK0 ] unsigned char 
 18748 ;; Return value:  Size  Location     Type
 18749 ;;		None               void
 18750 ;; Registers used:
 18751 ;;		wreg
 18752 ;; Tracked objects:
 18753 ;;		On entry : 0/0
 18754 ;;		On exit  : 0/0
 18755 ;;		Unchanged: 0/0
 18756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18761 ;;Total ram usage:        2 bytes
 18762 ;; Hardware stack levels used:    1
 18763 ;; Hardware stack levels required when called:    4
 18764 ;; This function calls:
 18765 ;;		Nothing
 18766 ;; This function is called by:
 18767 ;;		_setDimmerLights_Initialization
 18768 ;;		_setDimmerLights_Main
 18769 ;;		_setDimmerLights_ERROR
 18770 ;;		_setDimmerLights_TriggerERROR
 18771 ;;		_setDimmerLights
 18772 ;;		_setDimmerLights_Adj
 18773 ;;		_setDimmerLights_AdjRF
 18774 ;;		_setDimmerLights_Switch
 18775 ;;		_setDimmerLights_AdjGo
 18776 ;;		_setDimmerLights_Trigger
 18777 ;;		_setDimmerLights_TriggerAdj
 18778 ;;		_setDimmerLights_Clear
 18779 ;;		_setDimmerLights_GO
 18780 ;;		_setDimmerLights_MaxmumValue
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _DimmerLightsPointSelect
 18786  24E7                     _DimmerLightsPointSelect:	
 18787                           
 18788                           ;incstack = 0
 18789                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18790                           ;DimmerLightsPointSelect@lights stored from wreg
 18791  24E7  0020               	movlb	0	; select bank0
 18792  24E8  00A1               	movwf	DimmerLightsPointSelect@lights
 18793                           
 18794                           ;Dimmer_B1.c: 10: if(lights == 1)
 18795  24E9  0821               	movf	DimmerLightsPointSelect@lights,w
 18796  24EA  3A01               	xorlw	1
 18797  24EB  1D03               	skipz
 18798  24EC  2CF1               	goto	l875
 18799                           
 18800                           ;Dimmer_B1.c: 11: {
 18801                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18802  24ED  3020               	movlw	_DimmerLights1& (0+255)
 18803  24EE  00A0               	movwf	??_DimmerLightsPointSelect
 18804  24EF  0820               	movf	??_DimmerLightsPointSelect,w
 18805  24F0  00EC               	movwf	_DimmerLights
 18806  24F1                     l875:	
 18807                           
 18808                           ;Dimmer_B1.c: 13: }
 18809                           ;Dimmer_B1.c: 20: if(lights == 2)
 18810  24F1  0821               	movf	DimmerLightsPointSelect@lights,w
 18811  24F2  3A02               	xorlw	2
 18812  24F3  1D03               	skipz
 18813  24F4  0008               	return
 18814                           
 18815                           ;Dimmer_B1.c: 21: {
 18816                           ;Dimmer_B1.c: 22: DimmerLights=&DimmerLights2;
 18817  24F5  302E               	movlw	_DimmerLights2& (0+255)
 18818  24F6  00A0               	movwf	??_DimmerLightsPointSelect
 18819  24F7  0820               	movf	??_DimmerLightsPointSelect,w
 18820  24F8  00EC               	movwf	_DimmerLights
 18821  24F9  0008               	return
 18822  24FA                     __end_of_DimmerLightsPointSelect:	
 18823                           
 18824                           	psect	text116
 18825  120A                     __ptext116:	
 18826 ;; *************** function _setBuz *****************
 18827 ;; Defined at:
 18828 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18829 ;; Parameters:    Size  Location     Type
 18830 ;;  count           1    wreg     unsigned char 
 18831 ;;  time            2    6[BANK0 ] int 
 18832 ;; Auto vars:     Size  Location     Type
 18833 ;;  count           1    9[BANK0 ] unsigned char 
 18834 ;; Return value:  Size  Location     Type
 18835 ;;		None               void
 18836 ;; Registers used:
 18837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18838 ;; Tracked objects:
 18839 ;;		On entry : 0/0
 18840 ;;		On exit  : 0/0
 18841 ;;		Unchanged: 0/0
 18842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18846 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18847 ;;Total ram usage:        4 bytes
 18848 ;; Hardware stack levels used:    1
 18849 ;; Hardware stack levels required when called:    5
 18850 ;; This function calls:
 18851 ;;		___wmul
 18852 ;; This function is called by:
 18853 ;;		_DlyOff_Main
 18854 ;;		_setDimmerLights_Main
 18855 ;;		_DimmerLights_Exceptions
 18856 ;;		_MainT
 18857 ;;		_setOverTemp_Exceptions
 18858 ;;		_setLog_Code
 18859 ;;		_setControl_Lights_Table
 18860 ;;		_setRFSW_Control
 18861 ;;		_setSw_Main
 18862 ;;		_Sw_DimmerOnFunc
 18863 ;; This function uses a non-reentrant model
 18864 ;;
 18865                           
 18866                           
 18867                           ;psect for function _setBuz
 18868  120A                     _setBuz:	
 18869                           
 18870                           ;incstack = 0
 18871                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18872                           ;setBuz@count stored from wreg
 18873  120A  0020               	movlb	0	; select bank0
 18874  120B  00A9               	movwf	setBuz@count
 18875                           
 18876                           ;Buzzer_B1.c: 24: time*=20;
 18877  120C  3014               	movlw	20
 18878  120D  00A0               	movwf	___wmul@multiplier
 18879  120E  3000               	movlw	0
 18880  120F  00A1               	movwf	___wmul@multiplier+1
 18881  1210  0827               	movf	setBuz@time+1,w
 18882  1211  01A3               	clrf	___wmul@multiplicand+1
 18883  1212  07A3               	addwf	___wmul@multiplicand+1,f
 18884  1213  0826               	movf	setBuz@time,w
 18885  1214  01A2               	clrf	___wmul@multiplicand
 18886  1215  07A2               	addwf	___wmul@multiplicand,f
 18887  1216  31A6  26A9  3192   	fcall	___wmul
 18888  1219  0020               	movlb	0	; select bank0
 18889  121A  0821               	movf	?___wmul+1,w
 18890  121B  01A7               	clrf	setBuz@time+1
 18891  121C  07A7               	addwf	setBuz@time+1,f
 18892  121D  0820               	movf	?___wmul,w
 18893  121E  01A6               	clrf	setBuz@time
 18894  121F  07A6               	addwf	setBuz@time,f
 18895                           
 18896                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18897  1220  0878               	movf	_Buz,w
 18898  1221  0086               	movwf	6
 18899  1222  3001               	movlw	1	; select bank2/3
 18900  1223  0087               	movwf	7
 18901  1224  1C01               	btfss	1,0
 18902  1225  0008               	return
 18903                           
 18904                           ;Buzzer_B1.c: 26: {
 18905                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18906  1226  0878               	movf	_Buz,w
 18907  1227  0086               	movwf	6
 18908  1228  3001               	movlw	1	; select bank2/3
 18909  1229  0087               	movwf	7
 18910  122A  1881               	btfsc	1,1
 18911  122B  2A45               	goto	l8732
 18912                           
 18913                           ;Buzzer_B1.c: 28: {
 18914                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18915  122C  0878               	movf	_Buz,w
 18916  122D  0086               	movwf	6
 18917  122E  3001               	movlw	1	; select bank2/3
 18918  122F  0087               	movwf	7
 18919  1230  1481               	bsf	1,1
 18920                           
 18921                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18922  1231  0829               	movf	setBuz@count,w
 18923  1232  00A8               	movwf	??_setBuz
 18924  1233  0878               	movf	_Buz,w
 18925  1234  3E03               	addlw	3
 18926  1235  0086               	movwf	6
 18927  1236  3001               	movlw	1	; select bank2/3
 18928  1237  0087               	movwf	7
 18929  1238  0828               	movf	??_setBuz,w
 18930  1239  0081               	movwf	1
 18931                           
 18932                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18933  123A  0878               	movf	_Buz,w
 18934  123B  3E06               	addlw	6
 18935  123C  0086               	movwf	6
 18936  123D  3001               	movlw	1	; select bank2/3
 18937  123E  0087               	movwf	7
 18938  123F  0826               	movf	setBuz@time,w
 18939  1240  3FC0               	movwi [0]fsr1
 18940  1241  0827               	movf	setBuz@time+1,w
 18941  1242  3FC1               	movwi [1]fsr1
 18942                           
 18943                           ;Buzzer_B1.c: 33: RB3=1;
 18944  1243  158D               	bsf	13,3	;volatile
 18945                           
 18946                           ;Buzzer_B1.c: 34: }
 18947  1244  0008               	return
 18948  1245                     l8732:	
 18949                           
 18950                           ;Buzzer_B1.c: 35: else
 18951                           ;Buzzer_B1.c: 36: {
 18952                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18953  1245  0878               	movf	_Buz,w
 18954  1246  0086               	movwf	6
 18955  1247  3001               	movlw	1	; select bank2/3
 18956  1248  0087               	movwf	7
 18957  1249  1981               	btfsc	1,3
 18958  124A  2A63               	goto	l8736
 18959                           
 18960                           ;Buzzer_B1.c: 38: {
 18961                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18962  124B  0878               	movf	_Buz,w
 18963  124C  0086               	movwf	6
 18964  124D  3001               	movlw	1	; select bank2/3
 18965  124E  0087               	movwf	7
 18966  124F  1581               	bsf	1,3
 18967                           
 18968                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18969  1250  0829               	movf	setBuz@count,w
 18970  1251  00A8               	movwf	??_setBuz
 18971  1252  0878               	movf	_Buz,w
 18972  1253  3E04               	addlw	4
 18973  1254  0086               	movwf	6
 18974  1255  3001               	movlw	1	; select bank2/3
 18975  1256  0087               	movwf	7
 18976  1257  0828               	movf	??_setBuz,w
 18977  1258  0081               	movwf	1
 18978                           
 18979                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18980  1259  0878               	movf	_Buz,w
 18981  125A  3E08               	addlw	8
 18982  125B  0086               	movwf	6
 18983  125C  3001               	movlw	1	; select bank2/3
 18984  125D  0087               	movwf	7
 18985  125E  0826               	movf	setBuz@time,w
 18986  125F  3FC0               	movwi [0]fsr1
 18987  1260  0827               	movf	setBuz@time+1,w
 18988  1261  3FC1               	movwi [1]fsr1
 18989                           
 18990                           ;Buzzer_B1.c: 42: }
 18991  1262  0008               	return
 18992  1263                     l8736:	
 18993                           
 18994                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18995  1263  0878               	movf	_Buz,w
 18996  1264  0086               	movwf	6
 18997  1265  3001               	movlw	1	; select bank2/3
 18998  1266  0087               	movwf	7
 18999  1267  1A01               	btfsc	1,4
 19000  1268  0008               	return
 19001                           
 19002                           ;Buzzer_B1.c: 44: {
 19003                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 19004  1269  0878               	movf	_Buz,w
 19005  126A  0086               	movwf	6
 19006  126B  3001               	movlw	1	; select bank2/3
 19007  126C  0087               	movwf	7
 19008  126D  1601               	bsf	1,4
 19009                           
 19010                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 19011  126E  0829               	movf	setBuz@count,w
 19012  126F  00A8               	movwf	??_setBuz
 19013  1270  0878               	movf	_Buz,w
 19014  1271  3E05               	addlw	5
 19015  1272  0086               	movwf	6
 19016  1273  3001               	movlw	1	; select bank2/3
 19017  1274  0087               	movwf	7
 19018  1275  0828               	movf	??_setBuz,w
 19019  1276  0081               	movwf	1
 19020                           
 19021                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 19022  1277  0878               	movf	_Buz,w
 19023  1278  3E0A               	addlw	10
 19024  1279  0086               	movwf	6
 19025  127A  3001               	movlw	1	; select bank2/3
 19026  127B  0087               	movwf	7
 19027  127C  0826               	movf	setBuz@time,w
 19028  127D  3FC0               	movwi [0]fsr1
 19029  127E  0827               	movf	setBuz@time+1,w
 19030  127F  3FC1               	movwi [1]fsr1
 19031  1280  0008               	return
 19032  1281                     __end_of_setBuz:	
 19033                           
 19034                           	psect	text117
 19035  26A9                     __ptext117:	
 19036 ;; *************** function ___wmul *****************
 19037 ;; Defined at:
 19038 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 19039 ;; Parameters:    Size  Location     Type
 19040 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19041 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19042 ;; Auto vars:     Size  Location     Type
 19043 ;;  product         2    4[BANK0 ] unsigned int 
 19044 ;; Return value:  Size  Location     Type
 19045 ;;                  2    0[BANK0 ] unsigned int 
 19046 ;; Registers used:
 19047 ;;		wreg, status,2, status,0
 19048 ;; Tracked objects:
 19049 ;;		On entry : 0/0
 19050 ;;		On exit  : 0/0
 19051 ;;		Unchanged: 0/0
 19052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19057 ;;Total ram usage:        6 bytes
 19058 ;; Hardware stack levels used:    1
 19059 ;; Hardware stack levels required when called:    4
 19060 ;; This function calls:
 19061 ;;		Nothing
 19062 ;; This function is called by:
 19063 ;;		_setBuz
 19064 ;;		_Load_Main
 19065 ;; This function uses a non-reentrant model
 19066 ;;
 19067                           
 19068                           
 19069                           ;psect for function ___wmul
 19070  26A9                     ___wmul:	
 19071                           
 19072                           ;incstack = 0
 19073                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 19074  26A9  0020               	movlb	0	; select bank0
 19075  26AA  01A4               	clrf	___wmul@product
 19076  26AB  01A5               	clrf	___wmul@product+1
 19077  26AC                     l8712:	
 19078  26AC  1C20               	btfss	___wmul@multiplier,0
 19079  26AD  2EB2               	goto	l3239
 19080  26AE  0822               	movf	___wmul@multiplicand,w
 19081  26AF  07A4               	addwf	___wmul@product,f
 19082  26B0  0823               	movf	___wmul@multiplicand+1,w
 19083  26B1  3DA5               	addwfc	___wmul@product+1,f
 19084  26B2                     l3239:	
 19085  26B2  3001               	movlw	1
 19086  26B3                     u8185:	
 19087  26B3  35A2               	lslf	___wmul@multiplicand,f
 19088  26B4  0DA3               	rlf	___wmul@multiplicand+1,f
 19089  26B5  0B89               	decfsz	9,f
 19090  26B6  2EB3               	goto	u8185
 19091  26B7  3001               	movlw	1
 19092  26B8                     u8195:	
 19093  26B8  36A1               	lsrf	___wmul@multiplier+1,f
 19094  26B9  0CA0               	rrf	___wmul@multiplier,f
 19095  26BA  0B89               	decfsz	9,f
 19096  26BB  2EB8               	goto	u8195
 19097  26BC  0821               	movf	___wmul@multiplier+1,w
 19098  26BD  0420               	iorwf	___wmul@multiplier,w
 19099  26BE  1D03               	skipz
 19100  26BF  2EAC               	goto	l8712
 19101  26C0  0825               	movf	___wmul@product+1,w
 19102  26C1  01A1               	clrf	?___wmul+1
 19103  26C2  07A1               	addwf	?___wmul+1,f
 19104  26C3  0824               	movf	___wmul@product,w
 19105  26C4  01A0               	clrf	?___wmul
 19106  26C5  07A0               	addwf	?___wmul,f
 19107  26C6  0008               	return
 19108  26C7                     __end_of___wmul:	
 19109                           
 19110                           	psect	text118
 19111  230C                     __ptext118:	
 19112 ;; *************** function _DelayOff_Initialization *****************
 19113 ;; Defined at:
 19114 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19115 ;; Parameters:    Size  Location     Type
 19116 ;;		None
 19117 ;; Auto vars:     Size  Location     Type
 19118 ;;		None
 19119 ;; Return value:  Size  Location     Type
 19120 ;;		None               void
 19121 ;; Registers used:
 19122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19123 ;; Tracked objects:
 19124 ;;		On entry : 0/0
 19125 ;;		On exit  : 0/0
 19126 ;;		Unchanged: 0/0
 19127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19132 ;;Total ram usage:        0 bytes
 19133 ;; Hardware stack levels used:    1
 19134 ;; Hardware stack levels required when called:    6
 19135 ;; This function calls:
 19136 ;;		_DlyOff_Initialization
 19137 ;; This function is called by:
 19138 ;;		_main
 19139 ;; This function uses a non-reentrant model
 19140 ;;
 19141                           
 19142                           
 19143                           ;psect for function _DelayOff_Initialization
 19144  230C                     _DelayOff_Initialization:	
 19145                           
 19146                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 19147                           
 19148                           ;incstack = 0
 19149                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 19150  230C  3001               	movlw	1
 19151  230D  31A3  2353  31A3   	fcall	_DlyOff_Initialization
 19152                           
 19153                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 19154  2310  3002               	movlw	2
 19155  2311  31A3  2353         	fcall	_DlyOff_Initialization
 19156  2313  0008               	return
 19157  2314                     __end_of_DelayOff_Initialization:	
 19158                           
 19159                           	psect	text119
 19160  2353                     __ptext119:	
 19161 ;; *************** function _DlyOff_Initialization *****************
 19162 ;; Defined at:
 19163 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;  sw              1    wreg     unsigned char 
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;  sw              1    2[BANK0 ] unsigned char 
 19168 ;; Return value:  Size  Location     Type
 19169 ;;		None               void
 19170 ;; Registers used:
 19171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19181 ;;Total ram usage:        1 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    5
 19184 ;; This function calls:
 19185 ;;		_DelayOffPointSelect
 19186 ;; This function is called by:
 19187 ;;		_DelayOff_Initialization
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           
 19192                           ;psect for function _DlyOff_Initialization
 19193  2353                     _DlyOff_Initialization:	
 19194                           
 19195                           ;incstack = 0
 19196                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19197                           ;DlyOff_Initialization@sw stored from wreg
 19198  2353  0020               	movlb	0	; select bank0
 19199  2354  00A2               	movwf	DlyOff_Initialization@sw
 19200                           
 19201                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 19202  2355  0822               	movf	DlyOff_Initialization@sw,w
 19203  2356  31A5  258D         	fcall	_DelayOffPointSelect
 19204                           
 19205                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 19206  2358  0021               	movlb	1	; select bank1
 19207  2359  0838               	movf	_DelayOff^(0+128),w
 19208  235A  0086               	movwf	6
 19209  235B  0187               	clrf	7
 19210  235C  1401               	bsf	1,0
 19211  235D  0008               	return
 19212  235E                     __end_of_DlyOff_Initialization:	
 19213                           
 19214                           	psect	text120
 19215  258D                     __ptext120:	
 19216 ;; *************** function _DelayOffPointSelect *****************
 19217 ;; Defined at:
 19218 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19219 ;; Parameters:    Size  Location     Type
 19220 ;;  sw              1    wreg     unsigned char 
 19221 ;; Auto vars:     Size  Location     Type
 19222 ;;  sw              1    1[BANK0 ] unsigned char 
 19223 ;; Return value:  Size  Location     Type
 19224 ;;		None               void
 19225 ;; Registers used:
 19226 ;;		wreg
 19227 ;; Tracked objects:
 19228 ;;		On entry : 0/0
 19229 ;;		On exit  : 0/0
 19230 ;;		Unchanged: 0/0
 19231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;Total ram usage:        2 bytes
 19237 ;; Hardware stack levels used:    1
 19238 ;; Hardware stack levels required when called:    4
 19239 ;; This function calls:
 19240 ;;		Nothing
 19241 ;; This function is called by:
 19242 ;;		_DlyOff_Initialization
 19243 ;;		_DlyOff_Main
 19244 ;;		_setDelayOff_GO
 19245 ;; This function uses a non-reentrant model
 19246 ;;
 19247                           
 19248                           
 19249                           ;psect for function _DelayOffPointSelect
 19250  258D                     _DelayOffPointSelect:	
 19251                           
 19252                           ;incstack = 0
 19253                           ; Regs used in _DelayOffPointSelect: [wreg]
 19254                           ;DelayOffPointSelect@sw stored from wreg
 19255  258D  0020               	movlb	0	; select bank0
 19256  258E  00A1               	movwf	DelayOffPointSelect@sw
 19257                           
 19258                           ;DelayOff_B1.c: 11: if(sw == 1)
 19259  258F  0821               	movf	DelayOffPointSelect@sw,w
 19260  2590  3A01               	xorlw	1
 19261  2591  1D03               	skipz
 19262  2592  2D99               	goto	l6436
 19263                           
 19264                           ;DelayOff_B1.c: 12: {
 19265                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 19266  2593  30CB               	movlw	_DlySw1& (0+255)
 19267  2594  00A0               	movwf	??_DelayOffPointSelect
 19268  2595  0820               	movf	??_DelayOffPointSelect,w
 19269  2596  0021               	movlb	1	; select bank1
 19270  2597  00B8               	movwf	_DelayOff^(0+128)
 19271                           
 19272                           ;DelayOff_B1.c: 14: }
 19273  2598  0008               	return
 19274  2599                     l6436:	
 19275                           
 19276                           ;DelayOff_B1.c: 17: else if(sw == 2)
 19277  2599  0020               	movlb	0	; select bank0
 19278  259A  0821               	movf	DelayOffPointSelect@sw,w
 19279  259B  3A02               	xorlw	2
 19280  259C  1D03               	skipz
 19281  259D  0008               	return
 19282                           
 19283                           ;DelayOff_B1.c: 18: {
 19284                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 19285  259E  30D0               	movlw	_DlySw2& (0+255)
 19286  259F  00A0               	movwf	??_DelayOffPointSelect
 19287  25A0  0820               	movf	??_DelayOffPointSelect,w
 19288  25A1  0021               	movlb	1	; select bank1
 19289  25A2  00B8               	movwf	_DelayOff^(0+128)
 19290  25A3  0008               	return
 19291  25A4                     __end_of_DelayOffPointSelect:	
 19292                           
 19293                           	psect	text121
 19294  2522                     __ptext121:	
 19295 ;; *************** function _CC2500_PowerOnInitial *****************
 19296 ;; Defined at:
 19297 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19298 ;; Parameters:    Size  Location     Type
 19299 ;;		None
 19300 ;; Auto vars:     Size  Location     Type
 19301 ;;		None
 19302 ;; Return value:  Size  Location     Type
 19303 ;;		None               void
 19304 ;; Registers used:
 19305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19306 ;; Tracked objects:
 19307 ;;		On entry : 0/0
 19308 ;;		On exit  : 0/0
 19309 ;;		Unchanged: 0/0
 19310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19315 ;;Total ram usage:        0 bytes
 19316 ;; Hardware stack levels used:    1
 19317 ;; Hardware stack levels required when called:    7
 19318 ;; This function calls:
 19319 ;;		_CC2500_ClearRXFIFO
 19320 ;;		_CC2500_ClearTXFIFO
 19321 ;;		_CC2500_FrequencyCabr
 19322 ;;		_CC2500_InitPATable
 19323 ;;		_CC2500_InitSetREG
 19324 ;;		_CC2500_PowerRST
 19325 ;;		_CC2500_SIDLEMode
 19326 ;; This function is called by:
 19327 ;;		_main
 19328 ;; This function uses a non-reentrant model
 19329 ;;
 19330                           
 19331                           
 19332                           ;psect for function _CC2500_PowerOnInitial
 19333  2522                     _CC2500_PowerOnInitial:	
 19334                           
 19335                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 19336                           
 19337                           ;incstack = 0
 19338                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19339  2522  3199  2117  31A5   	fcall	_CC2500_PowerRST
 19340                           
 19341                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19342  2525  3198  203D  31A5   	fcall	_CC2500_InitSetREG
 19343                           
 19344                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19345  2528  31A6  26C7  31A5   	fcall	_CC2500_InitPATable
 19346                           
 19347                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19348  252B  31A2  22C9  31A5   	fcall	_CC2500_ClearTXFIFO
 19349                           
 19350                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19351  252E  31A2  22C5  31A5   	fcall	_CC2500_ClearRXFIFO
 19352                           
 19353                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19354  2531  31A3  23B8  31A5   	fcall	_CC2500_FrequencyCabr
 19355                           
 19356                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19357  2534  31A2  22CD         	fcall	_CC2500_SIDLEMode
 19358  2536  0008               	return
 19359  2537                     __end_of_CC2500_PowerOnInitial:	
 19360                           
 19361                           	psect	text122
 19362  22CD                     __ptext122:	
 19363 ;; *************** function _CC2500_SIDLEMode *****************
 19364 ;; Defined at:
 19365 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19366 ;; Parameters:    Size  Location     Type
 19367 ;;		None
 19368 ;; Auto vars:     Size  Location     Type
 19369 ;;		None
 19370 ;; Return value:  Size  Location     Type
 19371 ;;		None               void
 19372 ;; Registers used:
 19373 ;;		wreg, status,2, status,0, pclath, cstack
 19374 ;; Tracked objects:
 19375 ;;		On entry : 0/0
 19376 ;;		On exit  : 0/0
 19377 ;;		Unchanged: 0/0
 19378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19383 ;;Total ram usage:        0 bytes
 19384 ;; Hardware stack levels used:    1
 19385 ;; Hardware stack levels required when called:    6
 19386 ;; This function calls:
 19387 ;;		_CC2500_WriteCommand
 19388 ;; This function is called by:
 19389 ;;		_CC2500_PowerOnInitial
 19390 ;; This function uses a non-reentrant model
 19391 ;;
 19392                           
 19393                           
 19394                           ;psect for function _CC2500_SIDLEMode
 19395  22CD                     _CC2500_SIDLEMode:	
 19396                           
 19397                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19398                           
 19399                           ;incstack = 0
 19400                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19401  22CD  3036               	movlw	54
 19402  22CE  31A4  2456         	fcall	_CC2500_WriteCommand
 19403  22D0  0008               	return
 19404  22D1                     __end_of_CC2500_SIDLEMode:	
 19405                           
 19406                           	psect	text123
 19407  1917                     __ptext123:	
 19408 ;; *************** function _CC2500_PowerRST *****************
 19409 ;; Defined at:
 19410 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19411 ;; Parameters:    Size  Location     Type
 19412 ;;		None
 19413 ;; Auto vars:     Size  Location     Type
 19414 ;;		None
 19415 ;; Return value:  Size  Location     Type
 19416 ;;		None               void
 19417 ;; Registers used:
 19418 ;;		wreg, status,2, status,0, pclath, cstack
 19419 ;; Tracked objects:
 19420 ;;		On entry : 0/0
 19421 ;;		On exit  : 0/0
 19422 ;;		Unchanged: 0/0
 19423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;Total ram usage:        1 bytes
 19429 ;; Hardware stack levels used:    1
 19430 ;; Hardware stack levels required when called:    5
 19431 ;; This function calls:
 19432 ;;		_CC2500_WriteByte
 19433 ;;		_DelayTime_1us
 19434 ;; This function is called by:
 19435 ;;		_CC2500_PowerOnInitial
 19436 ;; This function uses a non-reentrant model
 19437 ;;
 19438                           
 19439                           
 19440                           ;psect for function _CC2500_PowerRST
 19441  1917                     _CC2500_PowerRST:	
 19442                           
 19443                           ;CC2500_B1.c: 112: RC1=0;
 19444                           
 19445                           ;incstack = 0
 19446                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19447  1917  0020               	movlb	0	; select bank0
 19448  1918  108E               	bcf	14,1	;volatile
 19449                           
 19450                           ;CC2500_B1.c: 113: RC0=0;
 19451  1919  100E               	bcf	14,0	;volatile
 19452                           
 19453                           ;CC2500_B1.c: 114: RC4=1;
 19454  191A  160E               	bsf	14,4	;volatile
 19455                           
 19456                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19457  191B  300A               	movlw	10
 19458  191C  00A0               	movwf	DelayTime_1us@count
 19459  191D  3000               	movlw	0
 19460  191E  00A1               	movwf	DelayTime_1us@count+1
 19461  191F  31A7  27B4  3199   	fcall	_DelayTime_1us
 19462                           
 19463                           ;CC2500_B1.c: 116: RC4=0;
 19464  1922  0020               	movlb	0	; select bank0
 19465  1923  120E               	bcf	14,4	;volatile
 19466                           
 19467                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19468  1924  300A               	movlw	10
 19469  1925  00A0               	movwf	DelayTime_1us@count
 19470  1926  3000               	movlw	0
 19471  1927  00A1               	movwf	DelayTime_1us@count+1
 19472  1928  31A7  27B4  3199   	fcall	_DelayTime_1us
 19473                           
 19474                           ;CC2500_B1.c: 118: RC4=1;
 19475  192B  0020               	movlb	0	; select bank0
 19476  192C  160E               	bsf	14,4	;volatile
 19477                           
 19478                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19479  192D  3028               	movlw	40
 19480  192E  00A0               	movwf	DelayTime_1us@count
 19481  192F  3000               	movlw	0
 19482  1930  00A1               	movwf	DelayTime_1us@count+1
 19483  1931  31A7  27B4  3199   	fcall	_DelayTime_1us
 19484                           
 19485                           ;CC2500_B1.c: 120: RC4=0;
 19486  1934  0020               	movlb	0	; select bank0
 19487  1935  120E               	bcf	14,4	;volatile
 19488                           
 19489                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19490  1936  3030               	movlw	48
 19491  1937  00A6               	movwf	??_CC2500_PowerRST
 19492  1938  0826               	movf	??_CC2500_PowerRST,w
 19493  1939  0021               	movlb	1	; select bank1
 19494  193A  00BF               	movwf	_SPI0Buffer^(0+128)
 19495  193B                     l340:	
 19496                           ;CC2500_B1.c: 122: while(RC2==1);
 19497                           
 19498  193B  0020               	movlb	0	; select bank0
 19499  193C  190E               	btfsc	14,2	;volatile
 19500  193D  293B               	goto	l340
 19501                           
 19502                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19503  193E  31A5  25BC  3199   	fcall	_CC2500_WriteByte
 19504  1941                     l343:	
 19505                           ;CC2500_B1.c: 124: while(RC2==1);
 19506                           
 19507  1941  0020               	movlb	0	; select bank0
 19508  1942  190E               	btfsc	14,2	;volatile
 19509  1943  2941               	goto	l343
 19510                           
 19511                           ;CC2500_B1.c: 125: RC0=0;
 19512  1944  100E               	bcf	14,0	;volatile
 19513                           
 19514                           ;CC2500_B1.c: 126: RC4=1;
 19515  1945  160E               	bsf	14,4	;volatile
 19516  1946  0008               	return
 19517  1947                     __end_of_CC2500_PowerRST:	
 19518                           
 19519                           	psect	text124
 19520  183D                     __ptext124:	
 19521 ;; *************** function _CC2500_InitSetREG *****************
 19522 ;; Defined at:
 19523 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19524 ;; Parameters:    Size  Location     Type
 19525 ;;		None
 19526 ;; Auto vars:     Size  Location     Type
 19527 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19528 ;;  temp2           1    7[BANK0 ] unsigned char 
 19529 ;;  temp1           1    6[BANK0 ] unsigned char 
 19530 ;; Return value:  Size  Location     Type
 19531 ;;		None               void
 19532 ;; Registers used:
 19533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19534 ;; Tracked objects:
 19535 ;;		On entry : 0/0
 19536 ;;		On exit  : 0/0
 19537 ;;		Unchanged: 0/0
 19538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19540 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19542 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19543 ;;Total ram usage:        4 bytes
 19544 ;; Hardware stack levels used:    1
 19545 ;; Hardware stack levels required when called:    6
 19546 ;; This function calls:
 19547 ;;		_CC2500_WriteREG
 19548 ;; This function is called by:
 19549 ;;		_CC2500_PowerOnInitial
 19550 ;; This function uses a non-reentrant model
 19551 ;;
 19552                           
 19553                           
 19554                           ;psect for function _CC2500_InitSetREG
 19555  183D                     _CC2500_InitSetREG:	
 19556                           
 19557                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19558                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19559                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19560                           
 19561                           ;incstack = 0
 19562                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19563  183D  0020               	movlb	0	; select bank0
 19564  183E  01A8               	clrf	CC2500_InitSetREG@loop_c
 19565  183F                     L15:	
 19566  183F  302F               	movlw	47
 19567  1840  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19568  1841  1803               	btfsc	3,0
 19569  1842  0008               	return
 19570                           
 19571                           ;CC2500_B1.c: 137: {
 19572                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19573  1843  0828               	movf	CC2500_InitSetREG@loop_c,w
 19574  1844  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19575  1845  0084               	movwf	4
 19576  1846  30A0               	movlw	high (_CC2500_registers_address| (0+32768))
 19577  1847  1803               	skipnc
 19578  1848  3E01               	addlw	1
 19579  1849  0085               	movwf	5
 19580  184A  0800               	movf	0,w	;code access
 19581  184B  00A5               	movwf	??_CC2500_InitSetREG
 19582  184C  0825               	movf	??_CC2500_InitSetREG,w
 19583  184D  00A6               	movwf	CC2500_InitSetREG@temp1
 19584                           
 19585                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19586  184E  0828               	movf	CC2500_InitSetREG@loop_c,w
 19587  184F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19588  1850  0084               	movwf	4
 19589  1851  30A0               	movlw	high (_CC2500_rfSettings| (0+32768))
 19590  1852  1803               	skipnc
 19591  1853  3E01               	addlw	1
 19592  1854  0085               	movwf	5
 19593  1855  0800               	movf	0,w	;code access
 19594  1856  00A5               	movwf	??_CC2500_InitSetREG
 19595  1857  0825               	movf	??_CC2500_InitSetREG,w
 19596  1858  00A7               	movwf	CC2500_InitSetREG@temp2
 19597                           
 19598                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19599  1859  0827               	movf	CC2500_InitSetREG@temp2,w
 19600  185A  00A5               	movwf	??_CC2500_InitSetREG
 19601  185B  0825               	movf	??_CC2500_InitSetREG,w
 19602  185C  00A2               	movwf	CC2500_WriteREG@value
 19603  185D  0826               	movf	CC2500_InitSetREG@temp1,w
 19604  185E  31A5  25D5  3198   	fcall	_CC2500_WriteREG
 19605  1861  3001               	movlw	1
 19606  1862  0020               	movlb	0	; select bank0
 19607  1863  00A5               	movwf	??_CC2500_InitSetREG
 19608  1864  0825               	movf	??_CC2500_InitSetREG,w
 19609  1865  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19610  1866  283F               	goto	L15
 19611  1867                     __end_of_CC2500_InitSetREG:	
 19612                           
 19613                           	psect	text125
 19614  26C7                     __ptext125:	
 19615 ;; *************** function _CC2500_InitPATable *****************
 19616 ;; Defined at:
 19617 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19618 ;; Parameters:    Size  Location     Type
 19619 ;;		None
 19620 ;; Auto vars:     Size  Location     Type
 19621 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19622 ;;  temp            1    6[BANK0 ] unsigned char 
 19623 ;; Return value:  Size  Location     Type
 19624 ;;		None               void
 19625 ;; Registers used:
 19626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19627 ;; Tracked objects:
 19628 ;;		On entry : 0/0
 19629 ;;		On exit  : 0/0
 19630 ;;		Unchanged: 0/0
 19631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19636 ;;Total ram usage:        3 bytes
 19637 ;; Hardware stack levels used:    1
 19638 ;; Hardware stack levels required when called:    6
 19639 ;; This function calls:
 19640 ;;		_CC2500_WriteREG
 19641 ;; This function is called by:
 19642 ;;		_CC2500_PowerOnInitial
 19643 ;; This function uses a non-reentrant model
 19644 ;;
 19645                           
 19646                           
 19647                           ;psect for function _CC2500_InitPATable
 19648  26C7                     _CC2500_InitPATable:	
 19649                           
 19650                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19651                           ;CC2500_B1.c: 150: unsigned char temp;
 19652                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19653                           
 19654                           ;incstack = 0
 19655                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19656  26C7  0020               	movlb	0	; select bank0
 19657  26C8  01A7               	clrf	CC2500_InitPATable@loop_d
 19658  26C9                     L16:	
 19659  26C9  3008               	movlw	8
 19660  26CA  0227               	subwf	CC2500_InitPATable@loop_d,w
 19661  26CB  1803               	btfsc	3,0
 19662  26CC  0008               	return
 19663                           
 19664                           ;CC2500_B1.c: 153: {
 19665                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19666  26CD  0827               	movf	CC2500_InitPATable@loop_d,w
 19667  26CE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19668  26CF  0084               	movwf	4
 19669  26D0  30A0               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19670  26D1  1803               	skipnc
 19671  26D2  3E01               	addlw	1
 19672  26D3  0085               	movwf	5
 19673  26D4  0800               	movf	0,w	;code access
 19674  26D5  00A5               	movwf	??_CC2500_InitPATable
 19675  26D6  0825               	movf	??_CC2500_InitPATable,w
 19676  26D7  00A6               	movwf	CC2500_InitPATable@temp
 19677                           
 19678                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19679  26D8  0826               	movf	CC2500_InitPATable@temp,w
 19680  26D9  00A5               	movwf	??_CC2500_InitPATable
 19681  26DA  0825               	movf	??_CC2500_InitPATable,w
 19682  26DB  00A2               	movwf	CC2500_WriteREG@value
 19683  26DC  303E               	movlw	62
 19684  26DD  31A5  25D5  31A6   	fcall	_CC2500_WriteREG
 19685  26E0  3001               	movlw	1
 19686  26E1  0020               	movlb	0	; select bank0
 19687  26E2  00A5               	movwf	??_CC2500_InitPATable
 19688  26E3  0825               	movf	??_CC2500_InitPATable,w
 19689  26E4  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19690  26E5  2EC9               	goto	L16
 19691  26E6                     __end_of_CC2500_InitPATable:	
 19692                           
 19693                           	psect	text126
 19694  25D5                     __ptext126:	
 19695 ;; *************** function _CC2500_WriteREG *****************
 19696 ;; Defined at:
 19697 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19698 ;; Parameters:    Size  Location     Type
 19699 ;;  w_addr          1    wreg     unsigned char 
 19700 ;;  value           1    2[BANK0 ] unsigned char 
 19701 ;; Auto vars:     Size  Location     Type
 19702 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19703 ;; Return value:  Size  Location     Type
 19704 ;;		None               void
 19705 ;; Registers used:
 19706 ;;		wreg, status,2, status,0, pclath, cstack
 19707 ;; Tracked objects:
 19708 ;;		On entry : 0/0
 19709 ;;		On exit  : 0/0
 19710 ;;		Unchanged: 0/0
 19711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19712 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19715 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19716 ;;Total ram usage:        3 bytes
 19717 ;; Hardware stack levels used:    1
 19718 ;; Hardware stack levels required when called:    5
 19719 ;; This function calls:
 19720 ;;		_CC2500_WriteByte
 19721 ;; This function is called by:
 19722 ;;		_CC2500_InitSetREG
 19723 ;;		_CC2500_InitPATable
 19724 ;; This function uses a non-reentrant model
 19725 ;;
 19726                           
 19727                           
 19728                           ;psect for function _CC2500_WriteREG
 19729  25D5                     _CC2500_WriteREG:	
 19730                           
 19731                           ;incstack = 0
 19732                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19733                           ;CC2500_WriteREG@w_addr stored from wreg
 19734  25D5  0020               	movlb	0	; select bank0
 19735  25D6  00A4               	movwf	CC2500_WriteREG@w_addr
 19736                           
 19737                           ;CC2500_B1.c: 229: RC4=0;
 19738  25D7  120E               	bcf	14,4	;volatile
 19739                           
 19740                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19741  25D8  0824               	movf	CC2500_WriteREG@w_addr,w
 19742  25D9  00A3               	movwf	??_CC2500_WriteREG
 19743  25DA  0823               	movf	??_CC2500_WriteREG,w
 19744  25DB  0021               	movlb	1	; select bank1
 19745  25DC  00BF               	movwf	_SPI0Buffer^(0+128)
 19746  25DD                     l385:	
 19747                           ;CC2500_B1.c: 231: while(RC2==1);
 19748                           
 19749  25DD  0020               	movlb	0	; select bank0
 19750  25DE  190E               	btfsc	14,2	;volatile
 19751  25DF  2DDD               	goto	l385
 19752                           
 19753                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19754  25E0  31A5  25BC  31A5   	fcall	_CC2500_WriteByte
 19755                           
 19756                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19757  25E3  0020               	movlb	0	; select bank0
 19758  25E4  0822               	movf	CC2500_WriteREG@value,w
 19759  25E5  00A3               	movwf	??_CC2500_WriteREG
 19760  25E6  0823               	movf	??_CC2500_WriteREG,w
 19761  25E7  0021               	movlb	1	; select bank1
 19762  25E8  00BF               	movwf	_SPI0Buffer^(0+128)
 19763                           
 19764                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19765  25E9  31A5  25BC         	fcall	_CC2500_WriteByte
 19766                           
 19767                           ;CC2500_B1.c: 235: RC4=1;
 19768  25EB  0020               	movlb	0	; select bank0
 19769  25EC  160E               	bsf	14,4	;volatile
 19770  25ED  0008               	return
 19771  25EE                     __end_of_CC2500_WriteREG:	
 19772                           
 19773                           	psect	text127
 19774  23B8                     __ptext127:	
 19775 ;; *************** function _CC2500_FrequencyCabr *****************
 19776 ;; Defined at:
 19777 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19778 ;; Parameters:    Size  Location     Type
 19779 ;;		None
 19780 ;; Auto vars:     Size  Location     Type
 19781 ;;		None
 19782 ;; Return value:  Size  Location     Type
 19783 ;;		None               void
 19784 ;; Registers used:
 19785 ;;		wreg, status,2, status,0, pclath, cstack
 19786 ;; Tracked objects:
 19787 ;;		On entry : 0/0
 19788 ;;		On exit  : 0/0
 19789 ;;		Unchanged: 0/0
 19790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19795 ;;Total ram usage:        0 bytes
 19796 ;; Hardware stack levels used:    1
 19797 ;; Hardware stack levels required when called:    6
 19798 ;; This function calls:
 19799 ;;		_CC2500_WriteCommand
 19800 ;;		_DelayTime_1us
 19801 ;; This function is called by:
 19802 ;;		_CC2500_PowerOnInitial
 19803 ;; This function uses a non-reentrant model
 19804 ;;
 19805                           
 19806                           
 19807                           ;psect for function _CC2500_FrequencyCabr
 19808  23B8                     _CC2500_FrequencyCabr:	
 19809                           
 19810                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19811                           
 19812                           ;incstack = 0
 19813                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19814  23B8  3033               	movlw	51
 19815  23B9  31A4  2456  31A3   	fcall	_CC2500_WriteCommand
 19816                           
 19817                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19818  23BC  30E8               	movlw	232
 19819  23BD  0020               	movlb	0	; select bank0
 19820  23BE  00A0               	movwf	DelayTime_1us@count
 19821  23BF  3003               	movlw	3
 19822  23C0  00A1               	movwf	DelayTime_1us@count+1
 19823  23C1  31A7  27B4         	fcall	_DelayTime_1us
 19824  23C3  0008               	return
 19825  23C4                     __end_of_CC2500_FrequencyCabr:	
 19826                           
 19827                           	psect	text128
 19828  27B4                     __ptext128:	
 19829 ;; *************** function _DelayTime_1us *****************
 19830 ;; Defined at:
 19831 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;  count           2    0[BANK0 ] int 
 19834 ;; Auto vars:     Size  Location     Type
 19835 ;;  j               2    4[BANK0 ] unsigned int 
 19836 ;;  i               2    2[BANK0 ] unsigned int 
 19837 ;; Return value:  Size  Location     Type
 19838 ;;		None               void
 19839 ;; Registers used:
 19840 ;;		wreg, status,2
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19849 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19850 ;;Total ram usage:        6 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    4
 19853 ;; This function calls:
 19854 ;;		Nothing
 19855 ;; This function is called by:
 19856 ;;		_CC2500_PowerRST
 19857 ;;		_CC2500_FrequencyCabr
 19858 ;; This function uses a non-reentrant model
 19859 ;;
 19860                           
 19861                           
 19862                           ;psect for function _DelayTime_1us
 19863  27B4                     _DelayTime_1us:	
 19864                           
 19865                           ;CC2500_B1.c: 285: unsigned int i,j;
 19866                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19867                           
 19868                           ;incstack = 0
 19869                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19870  27B4  3001               	movlw	1
 19871  27B5  0020               	movlb	0	; select bank0
 19872  27B6  00A2               	movwf	DelayTime_1us@i
 19873  27B7  3000               	movlw	0
 19874  27B8  00A3               	movwf	DelayTime_1us@i+1
 19875  27B9                     l409:	
 19876  27B9  0821               	movf	DelayTime_1us@count+1,w
 19877  27BA  0223               	subwf	DelayTime_1us@i+1,w
 19878  27BB  1D03               	skipz
 19879  27BC  2FBF               	goto	u8745
 19880  27BD  0820               	movf	DelayTime_1us@count,w
 19881  27BE  0222               	subwf	DelayTime_1us@i,w
 19882  27BF                     u8745:	
 19883  27BF  1803               	btfsc	3,0
 19884  27C0  0008               	return
 19885                           
 19886                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19887  27C1  01A4               	clrf	DelayTime_1us@j
 19888  27C2  01A5               	clrf	DelayTime_1us@j+1
 19889  27C3  3000               	movlw	0
 19890  27C4  0225               	subwf	DelayTime_1us@j+1,w
 19891  27C5  3002               	movlw	2
 19892  27C6  1903               	skipnz
 19893  27C7  0224               	subwf	DelayTime_1us@j,w
 19894  27C8  1803               	btfsc	3,0
 19895  27C9  2FD5               	goto	l9112
 19896  27CA                     l9110:	
 19897  27CA  3001               	movlw	1
 19898  27CB  07A4               	addwf	DelayTime_1us@j,f
 19899  27CC  3000               	movlw	0
 19900  27CD  3DA5               	addwfc	DelayTime_1us@j+1,f
 19901  27CE  3000               	movlw	0
 19902  27CF  0225               	subwf	DelayTime_1us@j+1,w
 19903  27D0  3002               	movlw	2
 19904  27D1  1903               	skipnz
 19905  27D2  0224               	subwf	DelayTime_1us@j,w
 19906  27D3  1C03               	skipc
 19907  27D4  2FCA               	goto	l9110
 19908  27D5                     l9112:	
 19909  27D5  3001               	movlw	1
 19910  27D6  07A2               	addwf	DelayTime_1us@i,f
 19911  27D7  3000               	movlw	0
 19912  27D8  3DA3               	addwfc	DelayTime_1us@i+1,f
 19913  27D9  2FB9               	goto	l409
 19914  27DA                     __end_of_DelayTime_1us:	
 19915                           
 19916                           	psect	text129
 19917  22C9                     __ptext129:	
 19918 ;; *************** function _CC2500_ClearTXFIFO *****************
 19919 ;; Defined at:
 19920 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19921 ;; Parameters:    Size  Location     Type
 19922 ;;		None
 19923 ;; Auto vars:     Size  Location     Type
 19924 ;;		None
 19925 ;; Return value:  Size  Location     Type
 19926 ;;		None               void
 19927 ;; Registers used:
 19928 ;;		wreg, status,2, status,0, pclath, cstack
 19929 ;; Tracked objects:
 19930 ;;		On entry : 0/0
 19931 ;;		On exit  : 0/0
 19932 ;;		Unchanged: 0/0
 19933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19938 ;;Total ram usage:        0 bytes
 19939 ;; Hardware stack levels used:    1
 19940 ;; Hardware stack levels required when called:    6
 19941 ;; This function calls:
 19942 ;;		_CC2500_WriteCommand
 19943 ;; This function is called by:
 19944 ;;		_CC2500_PowerOnInitial
 19945 ;; This function uses a non-reentrant model
 19946 ;;
 19947                           
 19948                           
 19949                           ;psect for function _CC2500_ClearTXFIFO
 19950  22C9                     _CC2500_ClearTXFIFO:	
 19951                           
 19952                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19953                           
 19954                           ;incstack = 0
 19955                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19956  22C9  303B               	movlw	59
 19957  22CA  31A4  2456         	fcall	_CC2500_WriteCommand
 19958  22CC  0008               	return
 19959  22CD                     __end_of_CC2500_ClearTXFIFO:	
 19960                           
 19961                           	psect	text130
 19962  22C5                     __ptext130:	
 19963 ;; *************** function _CC2500_ClearRXFIFO *****************
 19964 ;; Defined at:
 19965 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19966 ;; Parameters:    Size  Location     Type
 19967 ;;		None
 19968 ;; Auto vars:     Size  Location     Type
 19969 ;;		None
 19970 ;; Return value:  Size  Location     Type
 19971 ;;		None               void
 19972 ;; Registers used:
 19973 ;;		wreg, status,2, status,0, pclath, cstack
 19974 ;; Tracked objects:
 19975 ;;		On entry : 0/0
 19976 ;;		On exit  : 0/0
 19977 ;;		Unchanged: 0/0
 19978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19983 ;;Total ram usage:        0 bytes
 19984 ;; Hardware stack levels used:    1
 19985 ;; Hardware stack levels required when called:    6
 19986 ;; This function calls:
 19987 ;;		_CC2500_WriteCommand
 19988 ;; This function is called by:
 19989 ;;		_CC2500_PowerOnInitial
 19990 ;; This function uses a non-reentrant model
 19991 ;;
 19992                           
 19993                           
 19994                           ;psect for function _CC2500_ClearRXFIFO
 19995  22C5                     _CC2500_ClearRXFIFO:	
 19996                           
 19997                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19998                           
 19999                           ;incstack = 0
 20000                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 20001  22C5  303A               	movlw	58
 20002  22C6  31A4  2456         	fcall	_CC2500_WriteCommand
 20003  22C8  0008               	return
 20004  22C9                     __end_of_CC2500_ClearRXFIFO:	
 20005                           
 20006                           	psect	text131
 20007  2456                     __ptext131:	
 20008 ;; *************** function _CC2500_WriteCommand *****************
 20009 ;; Defined at:
 20010 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;  command         1    wreg     unsigned char 
 20013 ;; Auto vars:     Size  Location     Type
 20014 ;;  command         1    3[BANK0 ] unsigned char 
 20015 ;; Return value:  Size  Location     Type
 20016 ;;		None               void
 20017 ;; Registers used:
 20018 ;;		wreg, status,2, status,0, pclath, cstack
 20019 ;; Tracked objects:
 20020 ;;		On entry : 0/0
 20021 ;;		On exit  : 0/0
 20022 ;;		Unchanged: 0/0
 20023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20028 ;;Total ram usage:        2 bytes
 20029 ;; Hardware stack levels used:    1
 20030 ;; Hardware stack levels required when called:    5
 20031 ;; This function calls:
 20032 ;;		_CC2500_WriteByte
 20033 ;; This function is called by:
 20034 ;;		_CC2500_TxData
 20035 ;;		_CC2500_RxData
 20036 ;;		_CC2500_ClearTXFIFO
 20037 ;;		_CC2500_ClearRXFIFO
 20038 ;;		_CC2500_FrequencyCabr
 20039 ;;		_CC2500_SIDLEMode
 20040 ;;		_setRF_Main
 20041 ;;		_RF_RxDisable
 20042 ;; This function uses a non-reentrant model
 20043 ;;
 20044                           
 20045                           
 20046                           ;psect for function _CC2500_WriteCommand
 20047  2456                     _CC2500_WriteCommand:	
 20048                           
 20049                           ;incstack = 0
 20050                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 20051                           ;CC2500_WriteCommand@command stored from wreg
 20052  2456  0020               	movlb	0	; select bank0
 20053  2457  00A3               	movwf	CC2500_WriteCommand@command
 20054                           
 20055                           ;CC2500_B1.c: 255: RC4=0;
 20056  2458  120E               	bcf	14,4	;volatile
 20057                           
 20058                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 20059  2459  0823               	movf	CC2500_WriteCommand@command,w
 20060  245A  00A2               	movwf	??_CC2500_WriteCommand
 20061  245B  0822               	movf	??_CC2500_WriteCommand,w
 20062  245C  0021               	movlb	1	; select bank1
 20063  245D  00BF               	movwf	_SPI0Buffer^(0+128)
 20064  245E                     l397:	
 20065                           ;CC2500_B1.c: 258: while(RC2==1);
 20066                           
 20067  245E  0020               	movlb	0	; select bank0
 20068  245F  190E               	btfsc	14,2	;volatile
 20069  2460  2C5E               	goto	l397
 20070                           
 20071                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 20072  2461  31A5  25BC         	fcall	_CC2500_WriteByte
 20073                           
 20074                           ;CC2500_B1.c: 261: RC4=1;
 20075  2463  0020               	movlb	0	; select bank0
 20076  2464  160E               	bsf	14,4	;volatile
 20077  2465  0008               	return
 20078  2466                     __end_of_CC2500_WriteCommand:	
 20079                           
 20080                           	psect	text132
 20081  25BC                     __ptext132:	
 20082 ;; *************** function _CC2500_WriteByte *****************
 20083 ;; Defined at:
 20084 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20085 ;; Parameters:    Size  Location     Type
 20086 ;;		None
 20087 ;; Auto vars:     Size  Location     Type
 20088 ;;  loop_a          1    1[BANK0 ] unsigned char 
 20089 ;; Return value:  Size  Location     Type
 20090 ;;		None               void
 20091 ;; Registers used:
 20092 ;;		wreg, status,2, status,0
 20093 ;; Tracked objects:
 20094 ;;		On entry : 0/0
 20095 ;;		On exit  : 0/0
 20096 ;;		Unchanged: 0/0
 20097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20102 ;;Total ram usage:        2 bytes
 20103 ;; Hardware stack levels used:    1
 20104 ;; Hardware stack levels required when called:    4
 20105 ;; This function calls:
 20106 ;;		Nothing
 20107 ;; This function is called by:
 20108 ;;		_CC2500_TxData
 20109 ;;		_CC2500_RxData
 20110 ;;		_CC2500_PowerRST
 20111 ;;		_CC2500_WriteREG
 20112 ;;		_CC2500_WriteCommand
 20113 ;;		_CC2500_ReadStatus
 20114 ;;		_CC2500_ReadREG
 20115 ;; This function uses a non-reentrant model
 20116 ;;
 20117                           
 20118                           
 20119                           ;psect for function _CC2500_WriteByte
 20120  25BC                     _CC2500_WriteByte:	
 20121                           
 20122                           ;CC2500_B1.c: 195: unsigned char loop_a;
 20123                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 20124                           
 20125                           ;incstack = 0
 20126                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 20127  25BC  0020               	movlb	0	; select bank0
 20128  25BD  01A1               	clrf	CC2500_WriteByte@loop_a
 20129  25BE                     L17:	
 20130  25BE  3008               	movlw	8
 20131  25BF  0221               	subwf	CC2500_WriteByte@loop_a,w
 20132  25C0  1803               	btfsc	3,0
 20133  25C1  0008               	return
 20134                           
 20135                           ;CC2500_B1.c: 197: {
 20136                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 20137  25C2  0021               	movlb	1	; select bank1
 20138  25C3  1FBF               	btfss	_SPI0Buffer^(0+128),7
 20139  25C4  2DC8               	goto	l373
 20140                           
 20141                           ;CC2500_B1.c: 199: RC0=1;
 20142  25C5  0020               	movlb	0	; select bank0
 20143  25C6  140E               	bsf	14,0	;volatile
 20144  25C7  2DCA               	goto	l374
 20145  25C8                     l373:	
 20146                           
 20147                           ;CC2500_B1.c: 200: else
 20148                           ;CC2500_B1.c: 201: RC0=0;
 20149  25C8  0020               	movlb	0	; select bank0
 20150  25C9  100E               	bcf	14,0	;volatile
 20151  25CA                     l374:	
 20152                           
 20153                           ;CC2500_B1.c: 202: RC1=1;
 20154  25CA  148E               	bsf	14,1	;volatile
 20155                           
 20156                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 20157  25CB  1003               	clrc
 20158  25CC  0021               	movlb	1	; select bank1
 20159  25CD  0DBF               	rlf	_SPI0Buffer^(0+128),f
 20160                           
 20161                           ;CC2500_B1.c: 204: RC1=0;
 20162  25CE  0020               	movlb	0	; select bank0
 20163  25CF  108E               	bcf	14,1	;volatile
 20164  25D0  3001               	movlw	1
 20165  25D1  00A0               	movwf	??_CC2500_WriteByte
 20166  25D2  0820               	movf	??_CC2500_WriteByte,w
 20167  25D3  07A1               	addwf	CC2500_WriteByte@loop_a,f
 20168  25D4  2DBE               	goto	L17
 20169  25D5                     __end_of_CC2500_WriteByte:	
 20170                           
 20171                           	psect	text133
 20172  1758                     __ptext133:	
 20173 ;; *************** function _Buzzer_Main *****************
 20174 ;; Defined at:
 20175 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20176 ;; Parameters:    Size  Location     Type
 20177 ;;		None
 20178 ;; Auto vars:     Size  Location     Type
 20179 ;;		None
 20180 ;; Return value:  Size  Location     Type
 20181 ;;		None               void
 20182 ;; Registers used:
 20183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20184 ;; Tracked objects:
 20185 ;;		On entry : 0/0
 20186 ;;		On exit  : 0/0
 20187 ;;		Unchanged: 0/0
 20188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20191 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20192 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20193 ;;Total ram usage:        4 bytes
 20194 ;; Hardware stack levels used:    1
 20195 ;; Hardware stack levels required when called:    4
 20196 ;; This function calls:
 20197 ;;		Nothing
 20198 ;; This function is called by:
 20199 ;;		_main
 20200 ;; This function uses a non-reentrant model
 20201 ;;
 20202                           
 20203                           
 20204                           ;psect for function _Buzzer_Main
 20205  1758                     _Buzzer_Main:	
 20206                           
 20207                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 20208                           
 20209                           ;incstack = 0
 20210                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 20211  1758  0878               	movf	_Buz,w
 20212  1759  0086               	movwf	6
 20213  175A  3001               	movlw	1	; select bank2/3
 20214  175B  0087               	movwf	7
 20215  175C  1281               	bcf	1,5
 20216  175D  0020               	movlb	0	; select bank0
 20217  175E  198D               	btfsc	13,3	;volatile
 20218  175F  1681               	bsf	1,5
 20219                           
 20220                           ;Buzzer_B1.c: 57: if(Buz->GO)
 20221  1760  0878               	movf	_Buz,w
 20222  1761  0086               	movwf	6
 20223  1762  3001               	movlw	1	; select bank2/3
 20224  1763  0087               	movwf	7
 20225  1764  1C81               	btfss	1,1
 20226  1765  0008               	return
 20227                           
 20228                           ;Buzzer_B1.c: 58: {
 20229                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 20230  1766  0878               	movf	_Buz,w
 20231  1767  3E06               	addlw	6
 20232  1768  0086               	movwf	6
 20233  1769  3001               	movlw	1	; select bank2/3
 20234  176A  0087               	movwf	7
 20235  176B  3F40               	moviw [0]fsr1
 20236  176C  0020               	movlb	0	; select bank0
 20237  176D  00A0               	movwf	??_Buzzer_Main
 20238  176E  3F41               	moviw [1]fsr1
 20239  176F  00A1               	movwf	??_Buzzer_Main+1
 20240  1770  0A78               	incf	_Buz,w
 20241  1771  0086               	movwf	6
 20242  1772  3001               	movlw	1	; select bank2/3
 20243  1773  0087               	movwf	7
 20244  1774  3F40               	moviw [0]fsr1
 20245  1775  00A2               	movwf	??_Buzzer_Main+2
 20246  1776  3F41               	moviw [1]fsr1
 20247  1777  00A3               	movwf	??_Buzzer_Main+3
 20248  1778  0821               	movf	??_Buzzer_Main+1,w
 20249  1779  0223               	subwf	??_Buzzer_Main+3,w
 20250  177A  1D03               	skipz
 20251  177B  2F7E               	goto	u7065
 20252  177C  0820               	movf	??_Buzzer_Main,w
 20253  177D  0222               	subwf	??_Buzzer_Main+2,w
 20254  177E                     u7065:	
 20255  177E  1C03               	skipc
 20256  177F  0008               	return
 20257                           
 20258                           ;Buzzer_B1.c: 61: {
 20259                           ;Buzzer_B1.c: 62: Buz->Time=0;
 20260  1780  0A78               	incf	_Buz,w
 20261  1781  0086               	movwf	6
 20262  1782  3001               	movlw	1	; select bank2/3
 20263  1783  0087               	movwf	7
 20264  1784  3000               	movlw	0
 20265  1785  3FC0               	movwi [0]fsr1
 20266  1786  3FC1               	movwi [1]fsr1
 20267                           
 20268                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 20269  1787  0878               	movf	_Buz,w
 20270  1788  0086               	movwf	6
 20271  1789  3001               	movlw	1	; select bank2/3
 20272  178A  0087               	movwf	7
 20273  178B  1A81               	btfsc	1,5
 20274  178C  2FF2               	goto	l7990
 20275                           
 20276                           ;Buzzer_B1.c: 64: {
 20277                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 20278  178D  0878               	movf	_Buz,w
 20279  178E  3E03               	addlw	3
 20280  178F  0086               	movwf	6
 20281  1790  3001               	movlw	1	; select bank2/3
 20282  1791  0087               	movwf	7
 20283  1792  0881               	movf	1,f
 20284  1793  1D03               	skipz
 20285  1794  2FEB               	goto	l7986
 20286                           
 20287                           ;Buzzer_B1.c: 66: {
 20288                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 20289  1795  0878               	movf	_Buz,w
 20290  1796  0086               	movwf	6
 20291  1797  3001               	movlw	1	; select bank2/3
 20292  1798  0087               	movwf	7
 20293  1799  1D81               	btfss	1,3
 20294  179A  2FBD               	goto	l7978
 20295                           
 20296                           ;Buzzer_B1.c: 68: {
 20297                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 20298  179B  0878               	movf	_Buz,w
 20299  179C  0086               	movwf	6
 20300  179D  3001               	movlw	1	; select bank2/3
 20301  179E  0087               	movwf	7
 20302  179F  1181               	bcf	1,3
 20303                           
 20304                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 20305  17A0  0878               	movf	_Buz,w
 20306  17A1  3E04               	addlw	4
 20307  17A2  0086               	movwf	6
 20308  17A3  3001               	movlw	1	; select bank2/3
 20309  17A4  0087               	movwf	7
 20310  17A5  0801               	movf	1,w
 20311  17A6  00A0               	movwf	??_Buzzer_Main
 20312  17A7  0878               	movf	_Buz,w
 20313  17A8  3E03               	addlw	3
 20314  17A9  0086               	movwf	6
 20315  17AA  3001               	movlw	1	; select bank2/3
 20316  17AB  0087               	movwf	7
 20317  17AC  0820               	movf	??_Buzzer_Main,w
 20318  17AD  0081               	movwf	1
 20319                           
 20320                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 20321  17AE  0878               	movf	_Buz,w
 20322  17AF  3E08               	addlw	8
 20323  17B0  0086               	movwf	6
 20324  17B1  3001               	movlw	1	; select bank2/3
 20325  17B2  0087               	movwf	7
 20326  17B3  0878               	movf	_Buz,w
 20327  17B4  3E06               	addlw	6
 20328  17B5  0084               	movwf	4
 20329  17B6  3001               	movlw	1	; select bank2/3
 20330  17B7  0085               	movwf	5
 20331  17B8  3F40               	moviw [0]fsr1
 20332  17B9  3F80               	movwi [0]fsr0
 20333  17BA  3F41               	moviw [1]fsr1
 20334  17BB  3F81               	movwi [1]fsr0
 20335                           
 20336                           ;Buzzer_B1.c: 72: }
 20337  17BC  0008               	return
 20338  17BD                     l7978:	
 20339                           
 20340                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20341  17BD  0878               	movf	_Buz,w
 20342  17BE  0086               	movwf	6
 20343  17BF  3001               	movlw	1	; select bank2/3
 20344  17C0  0087               	movwf	7
 20345  17C1  1E01               	btfss	1,4
 20346  17C2  2FE5               	goto	l7984
 20347                           
 20348                           ;Buzzer_B1.c: 74: {
 20349                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20350  17C3  0878               	movf	_Buz,w
 20351  17C4  0086               	movwf	6
 20352  17C5  3001               	movlw	1	; select bank2/3
 20353  17C6  0087               	movwf	7
 20354  17C7  1201               	bcf	1,4
 20355                           
 20356                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20357  17C8  0878               	movf	_Buz,w
 20358  17C9  3E05               	addlw	5
 20359  17CA  0086               	movwf	6
 20360  17CB  3001               	movlw	1	; select bank2/3
 20361  17CC  0087               	movwf	7
 20362  17CD  0801               	movf	1,w
 20363  17CE  00A0               	movwf	??_Buzzer_Main
 20364  17CF  0878               	movf	_Buz,w
 20365  17D0  3E03               	addlw	3
 20366  17D1  0086               	movwf	6
 20367  17D2  3001               	movlw	1	; select bank2/3
 20368  17D3  0087               	movwf	7
 20369  17D4  0820               	movf	??_Buzzer_Main,w
 20370  17D5  0081               	movwf	1
 20371                           
 20372                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20373  17D6  0878               	movf	_Buz,w
 20374  17D7  3E0A               	addlw	10
 20375  17D8  0086               	movwf	6
 20376  17D9  3001               	movlw	1	; select bank2/3
 20377  17DA  0087               	movwf	7
 20378  17DB  0878               	movf	_Buz,w
 20379  17DC  3E06               	addlw	6
 20380  17DD  0084               	movwf	4
 20381  17DE  3001               	movlw	1	; select bank2/3
 20382  17DF  0085               	movwf	5
 20383  17E0  3F40               	moviw [0]fsr1
 20384  17E1  3F80               	movwi [0]fsr0
 20385  17E2  3F41               	moviw [1]fsr1
 20386  17E3  3F81               	movwi [1]fsr0
 20387                           
 20388                           ;Buzzer_B1.c: 78: }
 20389  17E4  0008               	return
 20390  17E5                     l7984:	
 20391                           
 20392                           ;Buzzer_B1.c: 79: else
 20393                           ;Buzzer_B1.c: 80: {
 20394                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20395  17E5  0878               	movf	_Buz,w
 20396  17E6  0086               	movwf	6
 20397  17E7  3001               	movlw	1	; select bank2/3
 20398  17E8  0087               	movwf	7
 20399  17E9  1081               	bcf	1,1
 20400                           
 20401                           ;Buzzer_B1.c: 82: }
 20402                           ;Buzzer_B1.c: 83: }
 20403  17EA  0008               	return
 20404  17EB                     l7986:	
 20405                           
 20406                           ;Buzzer_B1.c: 84: else
 20407                           ;Buzzer_B1.c: 85: {
 20408                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20409  17EB  0878               	movf	_Buz,w
 20410  17EC  0086               	movwf	6
 20411  17ED  3001               	movlw	1	; select bank2/3
 20412  17EE  0087               	movwf	7
 20413  17EF  1681               	bsf	1,5
 20414                           
 20415                           ;Buzzer_B1.c: 88: RB3=1;
 20416  17F0  158D               	bsf	13,3	;volatile
 20417                           
 20418                           ;Buzzer_B1.c: 89: }
 20419                           ;Buzzer_B1.c: 90: }
 20420  17F1  0008               	return
 20421  17F2                     l7990:	
 20422                           
 20423                           ;Buzzer_B1.c: 91: else
 20424                           ;Buzzer_B1.c: 92: {
 20425                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20426  17F2  0878               	movf	_Buz,w
 20427  17F3  0086               	movwf	6
 20428  17F4  3001               	movlw	1	; select bank2/3
 20429  17F5  0087               	movwf	7
 20430  17F6  1281               	bcf	1,5
 20431                           
 20432                           ;Buzzer_B1.c: 95: RB3=0;
 20433  17F7  118D               	bcf	13,3	;volatile
 20434                           
 20435                           ;Buzzer_B1.c: 97: Buz->Count--;
 20436  17F8  0878               	movf	_Buz,w
 20437  17F9  3E03               	addlw	3
 20438  17FA  0086               	movwf	6
 20439  17FB  3001               	movlw	1	; select bank2/3
 20440  17FC  0087               	movwf	7
 20441  17FD  3001               	movlw	1
 20442  17FE  0281               	subwf	1,f
 20443  17FF  0008               	return
 20444  1800                     __end_of_Buzzer_Main:	
 20445                           
 20446                           	psect	text134
 20447  2348                     __ptext134:	
 20448 ;; *************** function _Buzzer_Initialization *****************
 20449 ;; Defined at:
 20450 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20451 ;; Parameters:    Size  Location     Type
 20452 ;;		None
 20453 ;; Auto vars:     Size  Location     Type
 20454 ;;		None
 20455 ;; Return value:  Size  Location     Type
 20456 ;;		None               void
 20457 ;; Registers used:
 20458 ;;		wreg, fsr1l, fsr1h
 20459 ;; Tracked objects:
 20460 ;;		On entry : 0/0
 20461 ;;		On exit  : 0/0
 20462 ;;		Unchanged: 0/0
 20463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20467 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20468 ;;Total ram usage:        1 bytes
 20469 ;; Hardware stack levels used:    1
 20470 ;; Hardware stack levels required when called:    4
 20471 ;; This function calls:
 20472 ;;		Nothing
 20473 ;; This function is called by:
 20474 ;;		_main
 20475 ;; This function uses a non-reentrant model
 20476 ;;
 20477                           
 20478                           
 20479                           ;psect for function _Buzzer_Initialization
 20480  2348                     _Buzzer_Initialization:	
 20481                           
 20482                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20483                           
 20484                           ;incstack = 0
 20485                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20486  2348  304A               	movlw	_Buz1& (0+255)
 20487  2349  0020               	movlb	0	; select bank0
 20488  234A  00A0               	movwf	??_Buzzer_Initialization
 20489  234B  0820               	movf	??_Buzzer_Initialization,w
 20490  234C  00F8               	movwf	_Buz
 20491                           
 20492                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20493  234D  0878               	movf	_Buz,w
 20494  234E  0086               	movwf	6
 20495  234F  3001               	movlw	1	; select bank2/3
 20496  2350  0087               	movwf	7
 20497  2351  1401               	bsf	1,0
 20498  2352  0008               	return
 20499  2353                     __end_of_Buzzer_Initialization:	
 20500                           
 20501                           	psect	intentry
 20502  0004                     __pintentry:	
 20503 ;; *************** function _ISR *****************
 20504 ;; Defined at:
 20505 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20506 ;; Parameters:    Size  Location     Type
 20507 ;;		None
 20508 ;; Auto vars:     Size  Location     Type
 20509 ;;		None
 20510 ;; Return value:  Size  Location     Type
 20511 ;;		None               void
 20512 ;; Registers used:
 20513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20514 ;; Tracked objects:
 20515 ;;		On entry : 0/0
 20516 ;;		On exit  : 0/0
 20517 ;;		Unchanged: 0/0
 20518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20522 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20523 ;;Total ram usage:        1 bytes
 20524 ;; Hardware stack levels used:    1
 20525 ;; Hardware stack levels required when called:    3
 20526 ;; This function calls:
 20527 ;;		_INT_ISR
 20528 ;;		_IOC_ISR
 20529 ;;		_TMR0_ISR
 20530 ;; This function is called by:
 20531 ;;		Interrupt level 1
 20532 ;; This function uses a non-reentrant model
 20533 ;;
 20534                           
 20535  0004                     _ISR:	
 20536                           
 20537                           ;incstack = 0
 20538                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20539  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20540  0005  3180               	pagesel	$
 20541  0006  0020               	movlb	0	; select bank0
 20542  0007  087F               	movf	127,w
 20543  0008  00F7               	movwf	??_ISR
 20544                           
 20545                           ;MCU_B1.c: 99: IOC_ISR();
 20546  0009  31A7  278F  3180   	fcall	_IOC_ISR
 20547                           
 20548                           ;MCU_B1.c: 101: TMR0_ISR();
 20549  000C  3184  2446  3180   	fcall	_TMR0_ISR
 20550                           
 20551                           ;MCU_B1.c: 103: ;;
 20552                           ;MCU_B1.c: 107: INT_ISR();
 20553  000F  31A3  23AC         	fcall	_INT_ISR
 20554  0011  0877               	movf	??_ISR,w
 20555  0012  0020               	movlb	0	; select bank0
 20556  0013  00FF               	movwf	127
 20557  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20558  0015  0009               	retfie
 20559  0016                     __end_of_ISR:	
 20560                           
 20561                           	psect	text136
 20562  0446                     __ptext136:	
 20563 ;; *************** function _TMR0_ISR *****************
 20564 ;; Defined at:
 20565 ;;		line 123 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20566 ;; Parameters:    Size  Location     Type
 20567 ;;		None
 20568 ;; Auto vars:     Size  Location     Type
 20569 ;;		None
 20570 ;; Return value:  Size  Location     Type
 20571 ;;		None               void
 20572 ;; Registers used:
 20573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20574 ;; Tracked objects:
 20575 ;;		On entry : 0/0
 20576 ;;		On exit  : 0/0
 20577 ;;		Unchanged: 0/0
 20578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20581 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20582 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20583 ;;Total ram usage:        4 bytes
 20584 ;; Hardware stack levels used:    1
 20585 ;; Hardware stack levels required when called:    1
 20586 ;; This function calls:
 20587 ;;		i1_setLoad_StatusOff
 20588 ;; This function is called by:
 20589 ;;		_ISR
 20590 ;; This function uses a non-reentrant model
 20591 ;;
 20592                           
 20593                           
 20594                           ;psect for function _TMR0_ISR
 20595  0446                     _TMR0_ISR:	
 20596                           
 20597                           ;MCU_B1.c: 125: if(TMR0IE && TMR0IF)
 20598                           
 20599                           ;incstack = 0
 20600                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20601  0446  1E8B               	btfss	11,5	;volatile
 20602  0447  0008               	return
 20603  0448  1D0B               	btfss	11,2	;volatile
 20604  0449  0008               	return
 20605                           
 20606                           ;MCU_B1.c: 126: {
 20607                           ;MCU_B1.c: 127: TMR0=(256-90);
 20608  044A  30A6               	movlw	166
 20609  044B  0020               	movlb	0	; select bank0
 20610  044C  0095               	movwf	21	;volatile
 20611                           
 20612                           ;MCU_B1.c: 128: TMR0IF=0;
 20613  044D  110B               	bcf	11,2	;volatile
 20614                           
 20615                           ;MCU_B1.c: 133: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; ;; } }
      +                           }
 20616  044E  0879               	movf	_DimmerLights11,w
 20617  044F  0086               	movwf	6
 20618  0450  3001               	movlw	1	; select bank2/3
 20619  0451  0087               	movwf	7
 20620  0452  1C01               	btfss	1,0
 20621  0453  2C9E               	goto	i1l8420
 20622  0454  3001               	movlw	1
 20623  0455  00F3               	movwf	??_TMR0_ISR
 20624  0456  0879               	movf	_DimmerLights11,w
 20625  0457  3E03               	addlw	3
 20626  0458  0086               	movwf	6
 20627  0459  3001               	movlw	1	; select bank2/3
 20628  045A  0087               	movwf	7
 20629  045B  0873               	movf	??_TMR0_ISR,w
 20630  045C  0781               	addwf	1,f
 20631  045D  0021               	movlb	1	; select bank1
 20632  045E  0839               	movf	_Dimmer^(0+128),w
 20633  045F  3E02               	addlw	2
 20634  0460  0086               	movwf	6
 20635  0461  0187               	clrf	7
 20636  0462  0801               	movf	1,w
 20637  0463  00F3               	movwf	??_TMR0_ISR
 20638  0464  01F4               	clrf	??_TMR0_ISR+1
 20639  0465  09F3               	comf	??_TMR0_ISR,f
 20640  0466  09F4               	comf	??_TMR0_ISR+1,f
 20641  0467  0AF3               	incf	??_TMR0_ISR,f
 20642  0468  1903               	skipnz
 20643  0469  0AF4               	incf	??_TMR0_ISR+1,f
 20644  046A  0879               	movf	_DimmerLights11,w
 20645  046B  3E04               	addlw	4
 20646  046C  0086               	movwf	6
 20647  046D  3001               	movlw	1	; select bank2/3
 20648  046E  0087               	movwf	7
 20649  046F  0801               	movf	1,w
 20650  0470  0773               	addwf	??_TMR0_ISR,w
 20651  0471  00F5               	movwf	??_TMR0_ISR+2
 20652  0472  0874               	movf	??_TMR0_ISR+1,w
 20653  0473  1803               	skipnc
 20654  0474  0A74               	incf	??_TMR0_ISR+1,w
 20655  0475  00F6               	movwf	??_TMR0_ISR+3
 20656  0476  0879               	movf	_DimmerLights11,w
 20657  0477  3E03               	addlw	3
 20658  0478  0086               	movwf	6
 20659  0479  3001               	movlw	1	; select bank2/3
 20660  047A  0087               	movwf	7
 20661  047B  0876               	movf	??_TMR0_ISR+3,w
 20662  047C  3A80               	xorlw	128
 20663  047D  3C80               	sublw	128
 20664  047E  1D03               	skipz
 20665  047F  2C82               	goto	u764_25
 20666  0480  0875               	movf	??_TMR0_ISR+2,w
 20667  0481  0201               	subwf	1,w
 20668  0482                     u764_25:	
 20669  0482  1C03               	skipc
 20670  0483  2DD8               	goto	i1l8486
 20671  0484  0879               	movf	_DimmerLights11,w
 20672  0485  3E03               	addlw	3
 20673  0486  0086               	movwf	6
 20674  0487  3001               	movlw	1	; select bank2/3
 20675  0488  0087               	movwf	7
 20676  0489  0181               	clrf	1
 20677  048A  0879               	movf	_DimmerLights11,w
 20678  048B  0086               	movwf	6
 20679  048C  3001               	movlw	1	; select bank2/3
 20680  048D  0087               	movwf	7
 20681  048E  1001               	bcf	1,0
 20682  048F  0879               	movf	_DimmerLights11,w
 20683  0490  3E07               	addlw	7
 20684  0491  0086               	movwf	6
 20685  0492  3001               	movlw	1	; select bank2/3
 20686  0493  0087               	movwf	7
 20687  0494  1401               	bsf	1,0
 20688  0495  0879               	movf	_DimmerLights11,w
 20689  0496  0086               	movwf	6
 20690  0497  3001               	movlw	1	; select bank2/3
 20691  0498  0087               	movwf	7
 20692  0499  1F01               	btfss	1,6
 20693  049A  2DD8               	goto	i1l8486
 20694  049B  0020               	movlb	0	; select bank0
 20695  049C  178C               	bsf	12,7	;volatile
 20696  049D  2DD8               	goto	i1l8486
 20697  049E                     i1l8420:	
 20698  049E  0879               	movf	_DimmerLights11,w
 20699  049F  3E07               	addlw	7
 20700  04A0  0086               	movwf	6
 20701  04A1  3001               	movlw	1	; select bank2/3
 20702  04A2  0087               	movwf	7
 20703  04A3  1C01               	btfss	1,0
 20704  04A4  2DA3               	goto	i1l8478
 20705  04A5  0879               	movf	_DimmerLights11,w
 20706  04A6  3E07               	addlw	7
 20707  04A7  0086               	movwf	6
 20708  04A8  3001               	movlw	1	; select bank2/3
 20709  04A9  0087               	movwf	7
 20710  04AA  1001               	bcf	1,0
 20711  04AB  0879               	movf	_DimmerLights11,w
 20712  04AC  0086               	movwf	6
 20713  04AD  3001               	movlw	1	; select bank2/3
 20714  04AE  0087               	movwf	7
 20715  04AF  1C81               	btfss	1,1
 20716  04B0  2DA3               	goto	i1l8478
 20717  04B1  3001               	movlw	1
 20718  04B2  00F3               	movwf	??_TMR0_ISR
 20719  04B3  0A79               	incf	_DimmerLights11,w
 20720  04B4  0086               	movwf	6
 20721  04B5  3001               	movlw	1	; select bank2/3
 20722  04B6  0087               	movwf	7
 20723  04B7  0873               	movf	??_TMR0_ISR,w
 20724  04B8  0781               	addwf	1,f
 20725  04B9  0A79               	incf	_DimmerLights11,w
 20726  04BA  0086               	movwf	6
 20727  04BB  3001               	movlw	1	; select bank2/3
 20728  04BC  0087               	movwf	7
 20729  04BD  0879               	movf	_DimmerLights11,w
 20730  04BE  3E02               	addlw	2
 20731  04BF  0084               	movwf	4
 20732  04C0  3001               	movlw	1	; select bank2/3
 20733  04C1  0085               	movwf	5
 20734  04C2  0800               	movf	0,w
 20735  04C3  0201               	subwf	1,w
 20736  04C4  1C03               	skipc
 20737  04C5  2DA3               	goto	i1l8478
 20738  04C6  0A79               	incf	_DimmerLights11,w
 20739  04C7  0086               	movwf	6
 20740  04C8  3001               	movlw	1	; select bank2/3
 20741  04C9  0087               	movwf	7
 20742  04CA  0181               	clrf	1
 20743  04CB  0879               	movf	_DimmerLights11,w
 20744  04CC  0086               	movwf	6
 20745  04CD  3001               	movlw	1	; select bank2/3
 20746  04CE  0087               	movwf	7
 20747  04CF  1D81               	btfss	1,3
 20748  04D0  2D07               	goto	i1l8446
 20749  04D1  0879               	movf	_DimmerLights11,w
 20750  04D2  0086               	movwf	6
 20751  04D3  3001               	movlw	1	; select bank2/3
 20752  04D4  0087               	movwf	7
 20753  04D5  1A01               	btfsc	1,4
 20754  04D6  2CEE               	goto	i1l8440
 20755  04D7  0879               	movf	_DimmerLights11,w
 20756  04D8  3E04               	addlw	4
 20757  04D9  0086               	movwf	6
 20758  04DA  3001               	movlw	1	; select bank2/3
 20759  04DB  0087               	movwf	7
 20760  04DC  3044               	movlw	68
 20761  04DD  0201               	subwf	1,w
 20762  04DE  1C03               	skipc
 20763  04DF  2CE8               	goto	i1l8438
 20764  04E0  0879               	movf	_DimmerLights11,w
 20765  04E1  3E04               	addlw	4
 20766  04E2  0086               	movwf	6
 20767  04E3  3001               	movlw	1	; select bank2/3
 20768  04E4  0087               	movwf	7
 20769  04E5  3001               	movlw	1
 20770  04E6  0281               	subwf	1,f
 20771  04E7  2DA3               	goto	i1l8478
 20772  04E8                     i1l8438:	
 20773  04E8  0879               	movf	_DimmerLights11,w
 20774  04E9  0086               	movwf	6
 20775  04EA  3001               	movlw	1	; select bank2/3
 20776  04EB  0087               	movwf	7
 20777  04EC  1601               	bsf	1,4
 20778  04ED  2DA3               	goto	i1l8478
 20779  04EE                     i1l8440:	
 20780  04EE  0879               	movf	_DimmerLights11,w
 20781  04EF  3E04               	addlw	4
 20782  04F0  0086               	movwf	6
 20783  04F1  3001               	movlw	1	; select bank2/3
 20784  04F2  0087               	movwf	7
 20785  04F3  3078               	movlw	120
 20786  04F4  0201               	subwf	1,w
 20787  04F5  1803               	skipnc
 20788  04F6  2D01               	goto	i1l8444
 20789  04F7  3001               	movlw	1
 20790  04F8  00F3               	movwf	??_TMR0_ISR
 20791  04F9  0879               	movf	_DimmerLights11,w
 20792  04FA  3E04               	addlw	4
 20793  04FB  0086               	movwf	6
 20794  04FC  3001               	movlw	1	; select bank2/3
 20795  04FD  0087               	movwf	7
 20796  04FE  0873               	movf	??_TMR0_ISR,w
 20797  04FF  0781               	addwf	1,f
 20798  0500  2DA3               	goto	i1l8478
 20799  0501                     i1l8444:	
 20800  0501  0879               	movf	_DimmerLights11,w
 20801  0502  0086               	movwf	6
 20802  0503  3001               	movlw	1	; select bank2/3
 20803  0504  0087               	movwf	7
 20804  0505  1201               	bcf	1,4
 20805  0506  2DA3               	goto	i1l8478
 20806  0507                     i1l8446:	
 20807  0507  0879               	movf	_DimmerLights11,w
 20808  0508  0086               	movwf	6
 20809  0509  3001               	movlw	1	; select bank2/3
 20810  050A  0087               	movwf	7
 20811  050B  1D01               	btfss	1,2
 20812  050C  2D4E               	goto	i1l8460
 20813  050D  0879               	movf	_DimmerLights11,w
 20814  050E  3E05               	addlw	5
 20815  050F  0086               	movwf	6
 20816  0510  3001               	movlw	1	; select bank2/3
 20817  0511  0087               	movwf	7
 20818  0512  0879               	movf	_DimmerLights11,w
 20819  0513  3E04               	addlw	4
 20820  0514  0084               	movwf	4
 20821  0515  3001               	movlw	1	; select bank2/3
 20822  0516  0085               	movwf	5
 20823  0517  0800               	movf	0,w
 20824  0518  0201               	subwf	1,w
 20825  0519  1803               	skipnc
 20826  051A  2D23               	goto	i1l8452
 20827  051B  0879               	movf	_DimmerLights11,w
 20828  051C  3E04               	addlw	4
 20829  051D  0086               	movwf	6
 20830  051E  3001               	movlw	1	; select bank2/3
 20831  051F  0087               	movwf	7
 20832  0520  3001               	movlw	1
 20833  0521  0281               	subwf	1,f
 20834  0522  2D3A               	goto	i1l8456
 20835  0523                     i1l8452:	
 20836  0523  0879               	movf	_DimmerLights11,w
 20837  0524  3E04               	addlw	4
 20838  0525  0086               	movwf	6
 20839  0526  3001               	movlw	1	; select bank2/3
 20840  0527  0087               	movwf	7
 20841  0528  0879               	movf	_DimmerLights11,w
 20842  0529  3E05               	addlw	5
 20843  052A  0084               	movwf	4
 20844  052B  3001               	movlw	1	; select bank2/3
 20845  052C  0085               	movwf	5
 20846  052D  0800               	movf	0,w
 20847  052E  0201               	subwf	1,w
 20848  052F  1803               	skipnc
 20849  0530  2D3A               	goto	i1l8456
 20850  0531  3001               	movlw	1
 20851  0532  00F3               	movwf	??_TMR0_ISR
 20852  0533  0879               	movf	_DimmerLights11,w
 20853  0534  3E04               	addlw	4
 20854  0535  0086               	movwf	6
 20855  0536  3001               	movlw	1	; select bank2/3
 20856  0537  0087               	movwf	7
 20857  0538  0873               	movf	??_TMR0_ISR,w
 20858  0539  0781               	addwf	1,f
 20859  053A                     i1l8456:	
 20860  053A  0879               	movf	_DimmerLights11,w
 20861  053B  3E05               	addlw	5
 20862  053C  0086               	movwf	6
 20863  053D  3001               	movlw	1	; select bank2/3
 20864  053E  0087               	movwf	7
 20865  053F  0879               	movf	_DimmerLights11,w
 20866  0540  3E04               	addlw	4
 20867  0541  0084               	movwf	4
 20868  0542  3001               	movlw	1	; select bank2/3
 20869  0543  0085               	movwf	5
 20870  0544  0800               	movf	0,w
 20871  0545  0601               	xorwf	1,w
 20872  0546  1D03               	skipz
 20873  0547  2DA3               	goto	i1l8478
 20874  0548  0879               	movf	_DimmerLights11,w
 20875  0549  0086               	movwf	6
 20876  054A  3001               	movlw	1	; select bank2/3
 20877  054B  0087               	movwf	7
 20878  054C  1101               	bcf	1,2
 20879  054D  2D69               	goto	i1l8466
 20880  054E                     i1l8460:	
 20881  054E  0879               	movf	_DimmerLights11,w
 20882  054F  0086               	movwf	6
 20883  0550  3001               	movlw	1	; select bank2/3
 20884  0551  0087               	movwf	7
 20885  0552  1E81               	btfss	1,5
 20886  0553  2D6F               	goto	i1l8468
 20887  0554  0879               	movf	_DimmerLights11,w
 20888  0555  3E04               	addlw	4
 20889  0556  0086               	movwf	6
 20890  0557  3001               	movlw	1	; select bank2/3
 20891  0558  0087               	movwf	7
 20892  0559  3001               	movlw	1
 20893  055A  0281               	subwf	1,f
 20894  055B  0879               	movf	_DimmerLights11,w
 20895  055C  3E05               	addlw	5
 20896  055D  0086               	movwf	6
 20897  055E  3001               	movlw	1	; select bank2/3
 20898  055F  0087               	movwf	7
 20899  0560  0879               	movf	_DimmerLights11,w
 20900  0561  3E04               	addlw	4
 20901  0562  0084               	movwf	4
 20902  0563  3001               	movlw	1	; select bank2/3
 20903  0564  0085               	movwf	5
 20904  0565  0800               	movf	0,w
 20905  0566  0201               	subwf	1,w
 20906  0567  1C03               	skipc
 20907  0568  2DA3               	goto	i1l8478
 20908  0569                     i1l8466:	
 20909  0569  0879               	movf	_DimmerLights11,w
 20910  056A  0086               	movwf	6
 20911  056B  3001               	movlw	1	; select bank2/3
 20912  056C  0087               	movwf	7
 20913  056D  1081               	bcf	1,1
 20914  056E  2DA3               	goto	i1l8478
 20915  056F                     i1l8468:	
 20916  056F  3001               	movlw	1
 20917  0570  00F3               	movwf	??_TMR0_ISR
 20918  0571  0879               	movf	_DimmerLights11,w
 20919  0572  3E04               	addlw	4
 20920  0573  0086               	movwf	6
 20921  0574  3001               	movlw	1	; select bank2/3
 20922  0575  0087               	movwf	7
 20923  0576  0873               	movf	??_TMR0_ISR,w
 20924  0577  0781               	addwf	1,f
 20925  0578  0879               	movf	_DimmerLights11,w
 20926  0579  3E04               	addlw	4
 20927  057A  0086               	movwf	6
 20928  057B  3001               	movlw	1	; select bank2/3
 20929  057C  0087               	movwf	7
 20930  057D  0879               	movf	_DimmerLights11,w
 20931  057E  3E06               	addlw	6
 20932  057F  0084               	movwf	4
 20933  0580  3001               	movlw	1	; select bank2/3
 20934  0581  0085               	movwf	5
 20935  0582  0800               	movf	0,w
 20936  0583  0201               	subwf	1,w
 20937  0584  1C03               	skipc
 20938  0585  2DA3               	goto	i1l8478
 20939  0586  0879               	movf	_DimmerLights11,w
 20940  0587  0086               	movwf	6
 20941  0588  3001               	movlw	1	; select bank2/3
 20942  0589  0087               	movwf	7
 20943  058A  1081               	bcf	1,1
 20944  058B  0879               	movf	_DimmerLights11,w
 20945  058C  0086               	movwf	6
 20946  058D  3001               	movlw	1	; select bank2/3
 20947  058E  0087               	movwf	7
 20948  058F  1301               	bcf	1,6
 20949  0590  0879               	movf	_DimmerLights11,w
 20950  0591  3E0C               	addlw	12
 20951  0592  0086               	movwf	6
 20952  0593  3001               	movlw	1	; select bank2/3
 20953  0594  0087               	movwf	7
 20954  0595  1401               	bsf	1,0
 20955  0596  0021               	movlb	1	; select bank1
 20956  0597  0839               	movf	_Dimmer^(0+128),w
 20957  0598  0086               	movwf	6
 20958  0599  0187               	clrf	7
 20959  059A  1401               	bsf	1,0
 20960  059B  0020               	movlb	0	; select bank0
 20961  059C  118C               	bcf	12,3	;volatile
 20962  059D  01F1               	clrf	i1setLoad_StatusOff@command
 20963  059E  0AF1               	incf	i1setLoad_StatusOff@command,f
 20964  059F  3001               	movlw	1
 20965  05A0  3199  2147  3184   	fcall	i1_setLoad_StatusOff
 20966  05A3                     i1l8478:	
 20967  05A3  0020               	movlb	0	; select bank0
 20968  05A4  1F8C               	btfss	12,7	;volatile
 20969  05A5  2DD8               	goto	i1l8486
 20970  05A6  3001               	movlw	1
 20971  05A7  00F3               	movwf	??_TMR0_ISR
 20972  05A8  0879               	movf	_DimmerLights11,w
 20973  05A9  3E08               	addlw	8
 20974  05AA  0086               	movwf	6
 20975  05AB  3001               	movlw	1	; select bank2/3
 20976  05AC  0087               	movwf	7
 20977  05AD  0873               	movf	??_TMR0_ISR,w
 20978  05AE  0781               	addwf	1,f
 20979  05AF  0879               	movf	_DimmerLights11,w
 20980  05B0  3E04               	addlw	4
 20981  05B1  0086               	movwf	6
 20982  05B2  3001               	movlw	1	; select bank2/3
 20983  05B3  0087               	movwf	7
 20984  05B4  0801               	movf	1,w
 20985  05B5  00F3               	movwf	??_TMR0_ISR
 20986  05B6  01F4               	clrf	??_TMR0_ISR+1
 20987  05B7  09F3               	comf	??_TMR0_ISR,f
 20988  05B8  09F4               	comf	??_TMR0_ISR+1,f
 20989  05B9  0AF3               	incf	??_TMR0_ISR,f
 20990  05BA  1903               	skipnz
 20991  05BB  0AF4               	incf	??_TMR0_ISR+1,f
 20992  05BC  0873               	movf	??_TMR0_ISR,w
 20993  05BD  3E78               	addlw	120
 20994  05BE  00F5               	movwf	??_TMR0_ISR+2
 20995  05BF  3000               	movlw	0
 20996  05C0  3D74               	addwfc	??_TMR0_ISR+1,w
 20997  05C1  00F6               	movwf	??_TMR0_ISR+3
 20998  05C2  0879               	movf	_DimmerLights11,w
 20999  05C3  3E08               	addlw	8
 21000  05C4  0086               	movwf	6
 21001  05C5  3001               	movlw	1	; select bank2/3
 21002  05C6  0087               	movwf	7
 21003  05C7  0876               	movf	??_TMR0_ISR+3,w
 21004  05C8  3A80               	xorlw	128
 21005  05C9  3C80               	sublw	128
 21006  05CA  1D03               	skipz
 21007  05CB  2DCE               	goto	u781_25
 21008  05CC  0875               	movf	??_TMR0_ISR+2,w
 21009  05CD  0201               	subwf	1,w
 21010  05CE                     u781_25:	
 21011  05CE  1C03               	skipc
 21012  05CF  2DD8               	goto	i1l8486
 21013  05D0  0879               	movf	_DimmerLights11,w
 21014  05D1  3E08               	addlw	8
 21015  05D2  0086               	movwf	6
 21016  05D3  3001               	movlw	1	; select bank2/3
 21017  05D4  0087               	movwf	7
 21018  05D5  0181               	clrf	1
 21019  05D6  0020               	movlb	0	; select bank0
 21020  05D7  138C               	bcf	12,7	;volatile
 21021  05D8                     i1l8486:	
 21022                           
 21023                           ;MCU_B1.c: 137: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLights22->Cou
      +                          nt >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count=0; Dimm
      +                          erLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=1; } } } 
      +                          el
 21024  05D8  087A               	movf	_DimmerLights22,w
 21025  05D9  0086               	movwf	6
 21026  05DA  3001               	movlw	1	; select bank2/3
 21027  05DB  0087               	movwf	7
 21028  05DC  1C01               	btfss	1,0
 21029  05DD  2E28               	goto	i1l8500
 21030  05DE  3001               	movlw	1
 21031  05DF  00F3               	movwf	??_TMR0_ISR
 21032  05E0  087A               	movf	_DimmerLights22,w
 21033  05E1  3E03               	addlw	3
 21034  05E2  0086               	movwf	6
 21035  05E3  3001               	movlw	1	; select bank2/3
 21036  05E4  0087               	movwf	7
 21037  05E5  0873               	movf	??_TMR0_ISR,w
 21038  05E6  0781               	addwf	1,f
 21039  05E7  0021               	movlb	1	; select bank1
 21040  05E8  0839               	movf	_Dimmer^(0+128),w
 21041  05E9  3E02               	addlw	2
 21042  05EA  0086               	movwf	6
 21043  05EB  0187               	clrf	7
 21044  05EC  0801               	movf	1,w
 21045  05ED  00F3               	movwf	??_TMR0_ISR
 21046  05EE  01F4               	clrf	??_TMR0_ISR+1
 21047  05EF  09F3               	comf	??_TMR0_ISR,f
 21048  05F0  09F4               	comf	??_TMR0_ISR+1,f
 21049  05F1  0AF3               	incf	??_TMR0_ISR,f
 21050  05F2  1903               	skipnz
 21051  05F3  0AF4               	incf	??_TMR0_ISR+1,f
 21052  05F4  087A               	movf	_DimmerLights22,w
 21053  05F5  3E04               	addlw	4
 21054  05F6  0086               	movwf	6
 21055  05F7  3001               	movlw	1	; select bank2/3
 21056  05F8  0087               	movwf	7
 21057  05F9  0801               	movf	1,w
 21058  05FA  0773               	addwf	??_TMR0_ISR,w
 21059  05FB  00F5               	movwf	??_TMR0_ISR+2
 21060  05FC  0874               	movf	??_TMR0_ISR+1,w
 21061  05FD  1803               	skipnc
 21062  05FE  0A74               	incf	??_TMR0_ISR+1,w
 21063  05FF  00F6               	movwf	??_TMR0_ISR+3
 21064  0600  087A               	movf	_DimmerLights22,w
 21065  0601  3E03               	addlw	3
 21066  0602  0086               	movwf	6
 21067  0603  3001               	movlw	1	; select bank2/3
 21068  0604  0087               	movwf	7
 21069  0605  0876               	movf	??_TMR0_ISR+3,w
 21070  0606  3A80               	xorlw	128
 21071  0607  3C80               	sublw	128
 21072  0608  1D03               	skipz
 21073  0609  2E0C               	goto	u783_25
 21074  060A  0875               	movf	??_TMR0_ISR+2,w
 21075  060B  0201               	subwf	1,w
 21076  060C                     u783_25:	
 21077  060C  1C03               	skipc
 21078  060D  2F62               	goto	i1l8566
 21079  060E  087A               	movf	_DimmerLights22,w
 21080  060F  3E03               	addlw	3
 21081  0610  0086               	movwf	6
 21082  0611  3001               	movlw	1	; select bank2/3
 21083  0612  0087               	movwf	7
 21084  0613  0181               	clrf	1
 21085  0614  087A               	movf	_DimmerLights22,w
 21086  0615  0086               	movwf	6
 21087  0616  3001               	movlw	1	; select bank2/3
 21088  0617  0087               	movwf	7
 21089  0618  1001               	bcf	1,0
 21090  0619  087A               	movf	_DimmerLights22,w
 21091  061A  3E07               	addlw	7
 21092  061B  0086               	movwf	6
 21093  061C  3001               	movlw	1	; select bank2/3
 21094  061D  0087               	movwf	7
 21095  061E  1401               	bsf	1,0
 21096  061F  087A               	movf	_DimmerLights22,w
 21097  0620  0086               	movwf	6
 21098  0621  3001               	movlw	1	; select bank2/3
 21099  0622  0087               	movwf	7
 21100  0623  1F01               	btfss	1,6
 21101  0624  2F62               	goto	i1l8566
 21102  0625  0020               	movlb	0	; select bank0
 21103  0626  160D               	bsf	13,4	;volatile
 21104  0627  2F62               	goto	i1l8566
 21105  0628                     i1l8500:	
 21106  0628  087A               	movf	_DimmerLights22,w
 21107  0629  3E07               	addlw	7
 21108  062A  0086               	movwf	6
 21109  062B  3001               	movlw	1	; select bank2/3
 21110  062C  0087               	movwf	7
 21111  062D  1C01               	btfss	1,0
 21112  062E  2F2D               	goto	i1l8558
 21113  062F  087A               	movf	_DimmerLights22,w
 21114  0630  3E07               	addlw	7
 21115  0631  0086               	movwf	6
 21116  0632  3001               	movlw	1	; select bank2/3
 21117  0633  0087               	movwf	7
 21118  0634  1001               	bcf	1,0
 21119  0635  087A               	movf	_DimmerLights22,w
 21120  0636  0086               	movwf	6
 21121  0637  3001               	movlw	1	; select bank2/3
 21122  0638  0087               	movwf	7
 21123  0639  1C81               	btfss	1,1
 21124  063A  2F2D               	goto	i1l8558
 21125  063B  3001               	movlw	1
 21126  063C  00F3               	movwf	??_TMR0_ISR
 21127  063D  0A7A               	incf	_DimmerLights22,w
 21128  063E  0086               	movwf	6
 21129  063F  3001               	movlw	1	; select bank2/3
 21130  0640  0087               	movwf	7
 21131  0641  0873               	movf	??_TMR0_ISR,w
 21132  0642  0781               	addwf	1,f
 21133  0643  0A7A               	incf	_DimmerLights22,w
 21134  0644  0086               	movwf	6
 21135  0645  3001               	movlw	1	; select bank2/3
 21136  0646  0087               	movwf	7
 21137  0647  087A               	movf	_DimmerLights22,w
 21138  0648  3E02               	addlw	2
 21139  0649  0084               	movwf	4
 21140  064A  3001               	movlw	1	; select bank2/3
 21141  064B  0085               	movwf	5
 21142  064C  0800               	movf	0,w
 21143  064D  0201               	subwf	1,w
 21144  064E  1C03               	skipc
 21145  064F  2F2D               	goto	i1l8558
 21146  0650  0A7A               	incf	_DimmerLights22,w
 21147  0651  0086               	movwf	6
 21148  0652  3001               	movlw	1	; select bank2/3
 21149  0653  0087               	movwf	7
 21150  0654  0181               	clrf	1
 21151  0655  087A               	movf	_DimmerLights22,w
 21152  0656  0086               	movwf	6
 21153  0657  3001               	movlw	1	; select bank2/3
 21154  0658  0087               	movwf	7
 21155  0659  1D81               	btfss	1,3
 21156  065A  2E91               	goto	i1l8526
 21157  065B  087A               	movf	_DimmerLights22,w
 21158  065C  0086               	movwf	6
 21159  065D  3001               	movlw	1	; select bank2/3
 21160  065E  0087               	movwf	7
 21161  065F  1A01               	btfsc	1,4
 21162  0660  2E78               	goto	i1l8520
 21163  0661  087A               	movf	_DimmerLights22,w
 21164  0662  3E04               	addlw	4
 21165  0663  0086               	movwf	6
 21166  0664  3001               	movlw	1	; select bank2/3
 21167  0665  0087               	movwf	7
 21168  0666  3044               	movlw	68
 21169  0667  0201               	subwf	1,w
 21170  0668  1C03               	skipc
 21171  0669  2E72               	goto	i1l8518
 21172  066A  087A               	movf	_DimmerLights22,w
 21173  066B  3E04               	addlw	4
 21174  066C  0086               	movwf	6
 21175  066D  3001               	movlw	1	; select bank2/3
 21176  066E  0087               	movwf	7
 21177  066F  3001               	movlw	1
 21178  0670  0281               	subwf	1,f
 21179  0671  2F2D               	goto	i1l8558
 21180  0672                     i1l8518:	
 21181  0672  087A               	movf	_DimmerLights22,w
 21182  0673  0086               	movwf	6
 21183  0674  3001               	movlw	1	; select bank2/3
 21184  0675  0087               	movwf	7
 21185  0676  1601               	bsf	1,4
 21186  0677  2F2D               	goto	i1l8558
 21187  0678                     i1l8520:	
 21188  0678  087A               	movf	_DimmerLights22,w
 21189  0679  3E04               	addlw	4
 21190  067A  0086               	movwf	6
 21191  067B  3001               	movlw	1	; select bank2/3
 21192  067C  0087               	movwf	7
 21193  067D  3078               	movlw	120
 21194  067E  0201               	subwf	1,w
 21195  067F  1803               	skipnc
 21196  0680  2E8B               	goto	i1l8524
 21197  0681  3001               	movlw	1
 21198  0682  00F3               	movwf	??_TMR0_ISR
 21199  0683  087A               	movf	_DimmerLights22,w
 21200  0684  3E04               	addlw	4
 21201  0685  0086               	movwf	6
 21202  0686  3001               	movlw	1	; select bank2/3
 21203  0687  0087               	movwf	7
 21204  0688  0873               	movf	??_TMR0_ISR,w
 21205  0689  0781               	addwf	1,f
 21206  068A  2F2D               	goto	i1l8558
 21207  068B                     i1l8524:	
 21208  068B  087A               	movf	_DimmerLights22,w
 21209  068C  0086               	movwf	6
 21210  068D  3001               	movlw	1	; select bank2/3
 21211  068E  0087               	movwf	7
 21212  068F  1201               	bcf	1,4
 21213  0690  2F2D               	goto	i1l8558
 21214  0691                     i1l8526:	
 21215  0691  087A               	movf	_DimmerLights22,w
 21216  0692  0086               	movwf	6
 21217  0693  3001               	movlw	1	; select bank2/3
 21218  0694  0087               	movwf	7
 21219  0695  1D01               	btfss	1,2
 21220  0696  2ED8               	goto	i1l8540
 21221  0697  087A               	movf	_DimmerLights22,w
 21222  0698  3E05               	addlw	5
 21223  0699  0086               	movwf	6
 21224  069A  3001               	movlw	1	; select bank2/3
 21225  069B  0087               	movwf	7
 21226  069C  087A               	movf	_DimmerLights22,w
 21227  069D  3E04               	addlw	4
 21228  069E  0084               	movwf	4
 21229  069F  3001               	movlw	1	; select bank2/3
 21230  06A0  0085               	movwf	5
 21231  06A1  0800               	movf	0,w
 21232  06A2  0201               	subwf	1,w
 21233  06A3  1803               	skipnc
 21234  06A4  2EAD               	goto	i1l8532
 21235  06A5  087A               	movf	_DimmerLights22,w
 21236  06A6  3E04               	addlw	4
 21237  06A7  0086               	movwf	6
 21238  06A8  3001               	movlw	1	; select bank2/3
 21239  06A9  0087               	movwf	7
 21240  06AA  3001               	movlw	1
 21241  06AB  0281               	subwf	1,f
 21242  06AC  2EC4               	goto	i1l8536
 21243  06AD                     i1l8532:	
 21244  06AD  087A               	movf	_DimmerLights22,w
 21245  06AE  3E04               	addlw	4
 21246  06AF  0086               	movwf	6
 21247  06B0  3001               	movlw	1	; select bank2/3
 21248  06B1  0087               	movwf	7
 21249  06B2  087A               	movf	_DimmerLights22,w
 21250  06B3  3E05               	addlw	5
 21251  06B4  0084               	movwf	4
 21252  06B5  3001               	movlw	1	; select bank2/3
 21253  06B6  0085               	movwf	5
 21254  06B7  0800               	movf	0,w
 21255  06B8  0201               	subwf	1,w
 21256  06B9  1803               	skipnc
 21257  06BA  2EC4               	goto	i1l8536
 21258  06BB  3001               	movlw	1
 21259  06BC  00F3               	movwf	??_TMR0_ISR
 21260  06BD  087A               	movf	_DimmerLights22,w
 21261  06BE  3E04               	addlw	4
 21262  06BF  0086               	movwf	6
 21263  06C0  3001               	movlw	1	; select bank2/3
 21264  06C1  0087               	movwf	7
 21265  06C2  0873               	movf	??_TMR0_ISR,w
 21266  06C3  0781               	addwf	1,f
 21267  06C4                     i1l8536:	
 21268  06C4  087A               	movf	_DimmerLights22,w
 21269  06C5  3E05               	addlw	5
 21270  06C6  0086               	movwf	6
 21271  06C7  3001               	movlw	1	; select bank2/3
 21272  06C8  0087               	movwf	7
 21273  06C9  087A               	movf	_DimmerLights22,w
 21274  06CA  3E04               	addlw	4
 21275  06CB  0084               	movwf	4
 21276  06CC  3001               	movlw	1	; select bank2/3
 21277  06CD  0085               	movwf	5
 21278  06CE  0800               	movf	0,w
 21279  06CF  0601               	xorwf	1,w
 21280  06D0  1D03               	skipz
 21281  06D1  2F2D               	goto	i1l8558
 21282  06D2  087A               	movf	_DimmerLights22,w
 21283  06D3  0086               	movwf	6
 21284  06D4  3001               	movlw	1	; select bank2/3
 21285  06D5  0087               	movwf	7
 21286  06D6  1101               	bcf	1,2
 21287  06D7  2EF3               	goto	i1l8546
 21288  06D8                     i1l8540:	
 21289  06D8  087A               	movf	_DimmerLights22,w
 21290  06D9  0086               	movwf	6
 21291  06DA  3001               	movlw	1	; select bank2/3
 21292  06DB  0087               	movwf	7
 21293  06DC  1E81               	btfss	1,5
 21294  06DD  2EF9               	goto	i1l8548
 21295  06DE  087A               	movf	_DimmerLights22,w
 21296  06DF  3E04               	addlw	4
 21297  06E0  0086               	movwf	6
 21298  06E1  3001               	movlw	1	; select bank2/3
 21299  06E2  0087               	movwf	7
 21300  06E3  3001               	movlw	1
 21301  06E4  0281               	subwf	1,f
 21302  06E5  087A               	movf	_DimmerLights22,w
 21303  06E6  3E05               	addlw	5
 21304  06E7  0086               	movwf	6
 21305  06E8  3001               	movlw	1	; select bank2/3
 21306  06E9  0087               	movwf	7
 21307  06EA  087A               	movf	_DimmerLights22,w
 21308  06EB  3E04               	addlw	4
 21309  06EC  0084               	movwf	4
 21310  06ED  3001               	movlw	1	; select bank2/3
 21311  06EE  0085               	movwf	5
 21312  06EF  0800               	movf	0,w
 21313  06F0  0201               	subwf	1,w
 21314  06F1  1C03               	skipc
 21315  06F2  2F2D               	goto	i1l8558
 21316  06F3                     i1l8546:	
 21317  06F3  087A               	movf	_DimmerLights22,w
 21318  06F4  0086               	movwf	6
 21319  06F5  3001               	movlw	1	; select bank2/3
 21320  06F6  0087               	movwf	7
 21321  06F7  1081               	bcf	1,1
 21322  06F8  2F2D               	goto	i1l8558
 21323  06F9                     i1l8548:	
 21324  06F9  3001               	movlw	1
 21325  06FA  00F3               	movwf	??_TMR0_ISR
 21326  06FB  087A               	movf	_DimmerLights22,w
 21327  06FC  3E04               	addlw	4
 21328  06FD  0086               	movwf	6
 21329  06FE  3001               	movlw	1	; select bank2/3
 21330  06FF  0087               	movwf	7
 21331  0700  0873               	movf	??_TMR0_ISR,w
 21332  0701  0781               	addwf	1,f
 21333  0702  087A               	movf	_DimmerLights22,w
 21334  0703  3E04               	addlw	4
 21335  0704  0086               	movwf	6
 21336  0705  3001               	movlw	1	; select bank2/3
 21337  0706  0087               	movwf	7
 21338  0707  087A               	movf	_DimmerLights22,w
 21339  0708  3E06               	addlw	6
 21340  0709  0084               	movwf	4
 21341  070A  3001               	movlw	1	; select bank2/3
 21342  070B  0085               	movwf	5
 21343  070C  0800               	movf	0,w
 21344  070D  0201               	subwf	1,w
 21345  070E  1C03               	skipc
 21346  070F  2F2D               	goto	i1l8558
 21347  0710  087A               	movf	_DimmerLights22,w
 21348  0711  0086               	movwf	6
 21349  0712  3001               	movlw	1	; select bank2/3
 21350  0713  0087               	movwf	7
 21351  0714  1081               	bcf	1,1
 21352  0715  087A               	movf	_DimmerLights22,w
 21353  0716  0086               	movwf	6
 21354  0717  3001               	movlw	1	; select bank2/3
 21355  0718  0087               	movwf	7
 21356  0719  1301               	bcf	1,6
 21357  071A  087A               	movf	_DimmerLights22,w
 21358  071B  3E0C               	addlw	12
 21359  071C  0086               	movwf	6
 21360  071D  3001               	movlw	1	; select bank2/3
 21361  071E  0087               	movwf	7
 21362  071F  1401               	bsf	1,0
 21363  0720  0021               	movlb	1	; select bank1
 21364  0721  0839               	movf	_Dimmer^(0+128),w
 21365  0722  0086               	movwf	6
 21366  0723  0187               	clrf	7
 21367  0724  1401               	bsf	1,0
 21368  0725  0020               	movlb	0	; select bank0
 21369  0726  138E               	bcf	14,7	;volatile
 21370  0727  01F1               	clrf	i1setLoad_StatusOff@command
 21371  0728  0AF1               	incf	i1setLoad_StatusOff@command,f
 21372  0729  3002               	movlw	2
 21373  072A  3199  2147  3184   	fcall	i1_setLoad_StatusOff
 21374  072D                     i1l8558:	
 21375  072D  0020               	movlb	0	; select bank0
 21376  072E  1E0D               	btfss	13,4	;volatile
 21377  072F  2F62               	goto	i1l8566
 21378  0730  3001               	movlw	1
 21379  0731  00F3               	movwf	??_TMR0_ISR
 21380  0732  087A               	movf	_DimmerLights22,w
 21381  0733  3E08               	addlw	8
 21382  0734  0086               	movwf	6
 21383  0735  3001               	movlw	1	; select bank2/3
 21384  0736  0087               	movwf	7
 21385  0737  0873               	movf	??_TMR0_ISR,w
 21386  0738  0781               	addwf	1,f
 21387  0739  087A               	movf	_DimmerLights22,w
 21388  073A  3E04               	addlw	4
 21389  073B  0086               	movwf	6
 21390  073C  3001               	movlw	1	; select bank2/3
 21391  073D  0087               	movwf	7
 21392  073E  0801               	movf	1,w
 21393  073F  00F3               	movwf	??_TMR0_ISR
 21394  0740  01F4               	clrf	??_TMR0_ISR+1
 21395  0741  09F3               	comf	??_TMR0_ISR,f
 21396  0742  09F4               	comf	??_TMR0_ISR+1,f
 21397  0743  0AF3               	incf	??_TMR0_ISR,f
 21398  0744  1903               	skipnz
 21399  0745  0AF4               	incf	??_TMR0_ISR+1,f
 21400  0746  0873               	movf	??_TMR0_ISR,w
 21401  0747  3E78               	addlw	120
 21402  0748  00F5               	movwf	??_TMR0_ISR+2
 21403  0749  3000               	movlw	0
 21404  074A  3D74               	addwfc	??_TMR0_ISR+1,w
 21405  074B  00F6               	movwf	??_TMR0_ISR+3
 21406  074C  087A               	movf	_DimmerLights22,w
 21407  074D  3E08               	addlw	8
 21408  074E  0086               	movwf	6
 21409  074F  3001               	movlw	1	; select bank2/3
 21410  0750  0087               	movwf	7
 21411  0751  0876               	movf	??_TMR0_ISR+3,w
 21412  0752  3A80               	xorlw	128
 21413  0753  3C80               	sublw	128
 21414  0754  1D03               	skipz
 21415  0755  2F58               	goto	u800_25
 21416  0756  0875               	movf	??_TMR0_ISR+2,w
 21417  0757  0201               	subwf	1,w
 21418  0758                     u800_25:	
 21419  0758  1C03               	skipc
 21420  0759  2F62               	goto	i1l8566
 21421  075A  087A               	movf	_DimmerLights22,w
 21422  075B  3E08               	addlw	8
 21423  075C  0086               	movwf	6
 21424  075D  3001               	movlw	1	; select bank2/3
 21425  075E  0087               	movwf	7
 21426  075F  0181               	clrf	1
 21427  0760  0020               	movlb	0	; select bank0
 21428  0761  120D               	bcf	13,4	;volatile
 21429  0762                     i1l8566:	
 21430                           
 21431                           ;MCU_B1.c: 146: Timer0->Count++;
 21432  0762  0021               	movlb	1	; select bank1
 21433  0763  0A6B               	incf	_Timer0^(0+128),w
 21434  0764  0086               	movwf	6
 21435  0765  0187               	clrf	7
 21436  0766  3001               	movlw	1
 21437  0767  0781               	addwf	1,f
 21438  0768  3141               	addfsr 1,1
 21439  0769  1803               	skipnc
 21440  076A  0A81               	incf	1,f
 21441                           
 21442                           ;MCU_B1.c: 147: if(Timer0->Count == 200)
 21443  076B  0A6B               	incf	_Timer0^(0+128),w
 21444  076C  0086               	movwf	6
 21445  076D  0187               	clrf	7
 21446  076E  3F40               	moviw [0]fsr1
 21447  076F  3AC8               	xorlw	200
 21448  0770  1D03               	skipz
 21449  0771  2F74               	goto	u801_25
 21450  0772  3F41               	moviw [1]fsr1
 21451  0773  3A00               	xorlw	0
 21452  0774                     u801_25:	
 21453  0774  1D03               	skipz
 21454  0775  2F81               	goto	i1l1685
 21455                           
 21456                           ;MCU_B1.c: 148: {
 21457                           ;MCU_B1.c: 149: Timer0->Count=0;
 21458  0776  0A6B               	incf	_Timer0^(0+128),w
 21459  0777  0086               	movwf	6
 21460  0778  0187               	clrf	7
 21461  0779  3000               	movlw	0
 21462  077A  3FC0               	movwi [0]fsr1
 21463  077B  3FC1               	movwi [1]fsr1
 21464                           
 21465                           ;MCU_B1.c: 150: TMain->T0_Timerout=1;
 21466  077C  086A               	movf	_TMain^(0+128),w
 21467  077D  0086               	movwf	6
 21468  077E  3001               	movlw	1	; select bank2/3
 21469  077F  0087               	movwf	7
 21470  0780  1481               	bsf	1,1
 21471  0781                     i1l1685:	
 21472                           
 21473                           ;MCU_B1.c: 151: }
 21474                           ;MCU_B1.c: 154: if(Buz->GO)
 21475  0781  0878               	movf	_Buz,w
 21476  0782  0086               	movwf	6
 21477  0783  3001               	movlw	1	; select bank2/3
 21478  0784  0087               	movwf	7
 21479  0785  1C81               	btfss	1,1
 21480  0786  0008               	return
 21481                           
 21482                           ;MCU_B1.c: 155: {
 21483                           ;MCU_B1.c: 156: Buz->Time++;
 21484  0787  0A78               	incf	_Buz,w
 21485  0788  0086               	movwf	6
 21486  0789  3001               	movlw	1	; select bank2/3
 21487  078A  0087               	movwf	7
 21488  078B  3001               	movlw	1
 21489  078C  0781               	addwf	1,f
 21490  078D  3141               	addfsr 1,1
 21491  078E  1803               	skipnc
 21492  078F  0A81               	incf	1,f
 21493  0790  0008               	return
 21494  0791                     __end_of_TMR0_ISR:	
 21495                           
 21496                           	psect	text137
 21497  1947                     __ptext137:	
 21498 ;; *************** function i1_setLoad_StatusOff *****************
 21499 ;; Defined at:
 21500 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21501 ;; Parameters:    Size  Location     Type
 21502 ;;  lights          1    wreg     unsigned char 
 21503 ;;  command         1    0[COMMON] unsigned char 
 21504 ;; Auto vars:     Size  Location     Type
 21505 ;;  lights          1    1[COMMON] unsigned char 
 21506 ;; Return value:  Size  Location     Type
 21507 ;;		None               void
 21508 ;; Registers used:
 21509 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21510 ;; Tracked objects:
 21511 ;;		On entry : 0/0
 21512 ;;		On exit  : 0/0
 21513 ;;		Unchanged: 0/0
 21514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21519 ;;Total ram usage:        2 bytes
 21520 ;; Hardware stack levels used:    1
 21521 ;; This function calls:
 21522 ;;		Nothing
 21523 ;; This function is called by:
 21524 ;;		_TMR0_ISR
 21525 ;; This function uses a non-reentrant model
 21526 ;;
 21527                           
 21528                           
 21529                           ;psect for function i1_setLoad_StatusOff
 21530  1947                     i1_setLoad_StatusOff:	
 21531                           
 21532                           ;incstack = 0
 21533                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21534                           ;i1setLoad_StatusOff@lights stored from wreg
 21535  1947  00F2               	movwf	i1setLoad_StatusOff@lights
 21536                           
 21537                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 21538  1948  0020               	movlb	0	; select bank0
 21539  1949  086E               	movf	_Load,w
 21540  194A  3E46               	addlw	70
 21541  194B  0086               	movwf	6
 21542  194C  3002               	movlw	2	; select bank4/5
 21543  194D  0087               	movwf	7
 21544  194E  0871               	movf	i1setLoad_StatusOff@command,w
 21545  194F  1081               	bcf	1,1
 21546  1950  1D03               	skipz
 21547  1951  1481               	bsf	1,1
 21548                           
 21549                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 21550  1952  086E               	movf	_Load,w
 21551  1953  3E42               	addlw	66
 21552  1954  0086               	movwf	6
 21553  1955  3002               	movlw	2	; select bank4/5
 21554  1956  0087               	movwf	7
 21555  1957  3002               	movlw	2
 21556  1958  0281               	subwf	1,f
 21557                           
 21558                           ;OverLoad_B1.c: 326: if(lights == 1)
 21559  1959  0872               	movf	i1setLoad_StatusOff@lights,w
 21560  195A  3A01               	xorlw	1
 21561  195B  1D03               	skipz
 21562  195C  2963               	goto	i1l7952
 21563                           
 21564                           ;OverLoad_B1.c: 327: {
 21565                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 21566  195D  086E               	movf	_Load,w
 21567  195E  3E43               	addlw	67
 21568  195F  0086               	movwf	6
 21569  1960  3002               	movlw	2	; select bank4/5
 21570  1961  0087               	movwf	7
 21571  1962  0181               	clrf	1
 21572  1963                     i1l7952:	
 21573                           
 21574                           ;OverLoad_B1.c: 329: }
 21575                           ;OverLoad_B1.c: 330: if(lights == 2)
 21576  1963  0872               	movf	i1setLoad_StatusOff@lights,w
 21577  1964  3A02               	xorlw	2
 21578  1965  1D03               	skipz
 21579  1966  296D               	goto	i1l7956
 21580                           
 21581                           ;OverLoad_B1.c: 331: {
 21582                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 21583  1967  086E               	movf	_Load,w
 21584  1968  3E44               	addlw	68
 21585  1969  0086               	movwf	6
 21586  196A  3002               	movlw	2	; select bank4/5
 21587  196B  0087               	movwf	7
 21588  196C  0181               	clrf	1
 21589  196D                     i1l7956:	
 21590                           
 21591                           ;OverLoad_B1.c: 333: }
 21592                           ;OverLoad_B1.c: 334: if(lights == 3)
 21593  196D  0872               	movf	i1setLoad_StatusOff@lights,w
 21594  196E  3A03               	xorlw	3
 21595  196F  1D03               	skipz
 21596  1970  0008               	return
 21597                           
 21598                           ;OverLoad_B1.c: 335: {
 21599                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 21600  1971  086E               	movf	_Load,w
 21601  1972  3E45               	addlw	69
 21602  1973  0086               	movwf	6
 21603  1974  3002               	movlw	2	; select bank4/5
 21604  1975  0087               	movwf	7
 21605  1976  0181               	clrf	1
 21606  1977  0008               	return
 21607  1978                     __end_ofi1_setLoad_StatusOff:	
 21608                           
 21609                           	psect	text138
 21610  278F                     __ptext138:	
 21611 ;; *************** function _IOC_ISR *****************
 21612 ;; Defined at:
 21613 ;;		line 336 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21614 ;; Parameters:    Size  Location     Type
 21615 ;;		None
 21616 ;; Auto vars:     Size  Location     Type
 21617 ;;		None
 21618 ;; Return value:  Size  Location     Type
 21619 ;;		None               void
 21620 ;; Registers used:
 21621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21622 ;; Tracked objects:
 21623 ;;		On entry : 0/0
 21624 ;;		On exit  : 0/0
 21625 ;;		Unchanged: 0/0
 21626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21631 ;;Total ram usage:        1 bytes
 21632 ;; Hardware stack levels used:    1
 21633 ;; Hardware stack levels required when called:    1
 21634 ;; This function calls:
 21635 ;;		_setDimmerReClock
 21636 ;; This function is called by:
 21637 ;;		_ISR
 21638 ;; This function uses a non-reentrant model
 21639 ;;
 21640                           
 21641                           
 21642                           ;psect for function _IOC_ISR
 21643  278F                     _IOC_ISR:	
 21644                           
 21645                           ;MCU_B1.c: 338: if(IOCIE && IOCBF2)
 21646                           
 21647                           ;incstack = 0
 21648                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21649  278F  1D8B               	btfss	11,3	;volatile
 21650  2790  0008               	return
 21651  2791  0027               	movlb	7	; select bank7
 21652  2792  1D16               	btfss	22,2	;volatile
 21653  2793  0008               	return
 21654                           
 21655                           ;MCU_B1.c: 339: {
 21656                           ;MCU_B1.c: 340: IOCBF2=0;
 21657  2794  1116               	bcf	22,2	;volatile
 21658                           
 21659                           ;MCU_B1.c: 341: IOCIF=0;
 21660  2795  100B               	bcf	11,0	;volatile
 21661                           
 21662                           ;MCU_B1.c: 342: if(TMain->PowerON)
 21663  2796  0021               	movlb	1	; select bank1
 21664  2797  086A               	movf	_TMain^(0+128),w
 21665  2798  0086               	movwf	6
 21666  2799  3001               	movlw	1	; select bank2/3
 21667  279A  0087               	movwf	7
 21668  279B  1C01               	btfss	1,0
 21669  279C  0008               	return
 21670                           
 21671                           ;MCU_B1.c: 343: {
 21672                           ;MCU_B1.c: 347: setDimmerReClock();
 21673  279D  31A6  2620  31A7   	fcall	_setDimmerReClock
 21674                           
 21675                           ;MCU_B1.c: 348: if(RB2)
 21676  27A0  0020               	movlb	0	; select bank0
 21677  27A1  1D0D               	btfss	13,2	;volatile
 21678  27A2  2FAA               	goto	i1l8396
 21679                           
 21680                           ;MCU_B1.c: 349: {
 21681                           ;MCU_B1.c: 350: Dimmer->Correction=0;
 21682  27A3  0021               	movlb	1	; select bank1
 21683  27A4  0839               	movf	_Dimmer^(0+128),w
 21684  27A5  3E02               	addlw	2
 21685  27A6  0086               	movwf	6
 21686  27A7  0187               	clrf	7
 21687  27A8  0181               	clrf	1
 21688                           
 21689                           ;MCU_B1.c: 351: }
 21690  27A9  0008               	return
 21691  27AA                     i1l8396:	
 21692                           
 21693                           ;MCU_B1.c: 352: else
 21694                           ;MCU_B1.c: 353: {
 21695                           ;MCU_B1.c: 354: Dimmer->Correction=8;
 21696  27AA  3008               	movlw	8
 21697  27AB  00F1               	movwf	??_IOC_ISR
 21698  27AC  0021               	movlb	1	; select bank1
 21699  27AD  0839               	movf	_Dimmer^(0+128),w
 21700  27AE  3E02               	addlw	2
 21701  27AF  0086               	movwf	6
 21702  27B0  0187               	clrf	7
 21703  27B1  0871               	movf	??_IOC_ISR,w
 21704  27B2  0081               	movwf	1
 21705  27B3  0008               	return
 21706  27B4                     __end_of_IOC_ISR:	
 21707                           
 21708                           	psect	text139
 21709  2620                     __ptext139:	
 21710 ;; *************** function _setDimmerReClock *****************
 21711 ;; Defined at:
 21712 ;;		line 162 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21713 ;; Parameters:    Size  Location     Type
 21714 ;;		None
 21715 ;; Auto vars:     Size  Location     Type
 21716 ;;		None
 21717 ;; Return value:  Size  Location     Type
 21718 ;;		None               void
 21719 ;; Registers used:
 21720 ;;		wreg, fsr1l, fsr1h
 21721 ;; Tracked objects:
 21722 ;;		On entry : 0/0
 21723 ;;		On exit  : 0/0
 21724 ;;		Unchanged: 0/0
 21725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21730 ;;Total ram usage:        0 bytes
 21731 ;; Hardware stack levels used:    1
 21732 ;; This function calls:
 21733 ;;		Nothing
 21734 ;; This function is called by:
 21735 ;;		_IOC_ISR
 21736 ;; This function uses a non-reentrant model
 21737 ;;
 21738                           
 21739                           
 21740                           ;psect for function _setDimmerReClock
 21741  2620                     _setDimmerReClock:	
 21742                           
 21743                           ;MCU_B1.c: 164: TMR0=255;
 21744                           
 21745                           ;incstack = 0
 21746                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21747  2620  30FF               	movlw	255
 21748  2621  0020               	movlb	0	; select bank0
 21749  2622  0095               	movwf	21	;volatile
 21750                           
 21751                           ;MCU_B1.c: 169: if(!DimmerLights11->GO)
 21752  2623  0879               	movf	_DimmerLights11,w
 21753  2624  0086               	movwf	6
 21754  2625  3001               	movlw	1	; select bank2/3
 21755  2626  0087               	movwf	7
 21756  2627  1801               	btfsc	1,0
 21757  2628  2E2E               	goto	i1l1690
 21758                           
 21759                           ;MCU_B1.c: 170: {
 21760                           ;MCU_B1.c: 171: DimmerLights11->GO=1;
 21761  2629  0879               	movf	_DimmerLights11,w
 21762  262A  0086               	movwf	6
 21763  262B  3001               	movlw	1	; select bank2/3
 21764  262C  0087               	movwf	7
 21765  262D  1401               	bsf	1,0
 21766  262E                     i1l1690:	
 21767                           
 21768                           ;MCU_B1.c: 172: }
 21769                           ;MCU_B1.c: 196: if(!DimmerLights22->GO)
 21770  262E  087A               	movf	_DimmerLights22,w
 21771  262F  0086               	movwf	6
 21772  2630  3001               	movlw	1	; select bank2/3
 21773  2631  0087               	movwf	7
 21774  2632  1801               	btfsc	1,0
 21775  2633  0008               	return
 21776                           
 21777                           ;MCU_B1.c: 197: {
 21778                           ;MCU_B1.c: 198: DimmerLights22->GO=1;
 21779  2634  087A               	movf	_DimmerLights22,w
 21780  2635  0086               	movwf	6
 21781  2636  3001               	movlw	1	; select bank2/3
 21782  2637  0087               	movwf	7
 21783  2638  1401               	bsf	1,0
 21784  2639  0008               	return
 21785  263A                     __end_of_setDimmerReClock:	
 21786                           
 21787                           	psect	text140
 21788  23AC                     __ptext140:	
 21789 ;; *************** function _INT_ISR *****************
 21790 ;; Defined at:
 21791 ;;		line 287 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21792 ;; Parameters:    Size  Location     Type
 21793 ;;		None
 21794 ;; Auto vars:     Size  Location     Type
 21795 ;;		None
 21796 ;; Return value:  Size  Location     Type
 21797 ;;		None               void
 21798 ;; Registers used:
 21799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21800 ;; Tracked objects:
 21801 ;;		On entry : 0/0
 21802 ;;		On exit  : 0/0
 21803 ;;		Unchanged: 0/0
 21804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21809 ;;Total ram usage:        0 bytes
 21810 ;; Hardware stack levels used:    1
 21811 ;; Hardware stack levels required when called:    2
 21812 ;; This function calls:
 21813 ;;		_setRF_ReceiveGO
 21814 ;; This function is called by:
 21815 ;;		_ISR
 21816 ;; This function uses a non-reentrant model
 21817 ;;
 21818                           
 21819                           
 21820                           ;psect for function _INT_ISR
 21821  23AC                     _INT_ISR:	
 21822                           
 21823                           ;MCU_B1.c: 289: if(INTE && INTF)
 21824                           
 21825                           ;incstack = 0
 21826                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21827  23AC  1E0B               	btfss	11,4	;volatile
 21828  23AD  0008               	return
 21829  23AE  1C8B               	btfss	11,1	;volatile
 21830  23AF  0008               	return
 21831                           
 21832                           ;MCU_B1.c: 290: {
 21833                           ;MCU_B1.c: 291: INTF=0;
 21834  23B0  108B               	bcf	11,1	;volatile
 21835                           
 21836                           ;MCU_B1.c: 292: INTE=0;
 21837  23B1  120B               	bcf	11,4	;volatile
 21838                           
 21839                           ;MCU_B1.c: 293: setRF_ReceiveGO(1,1);
 21840  23B2  01F3               	clrf	setRF_ReceiveGO@command
 21841  23B3  0AF3               	incf	setRF_ReceiveGO@command,f
 21842  23B4  3001               	movlw	1
 21843  23B5  31A3  23A0         	fcall	_setRF_ReceiveGO
 21844  23B7  0008               	return
 21845  23B8                     __end_of_INT_ISR:	
 21846                           
 21847                           	psect	text141
 21848  23A0                     __ptext141:	
 21849 ;; *************** function _setRF_ReceiveGO *****************
 21850 ;; Defined at:
 21851 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21852 ;; Parameters:    Size  Location     Type
 21853 ;;  rf              1    wreg     unsigned char 
 21854 ;;  command         1    2[COMMON] unsigned char 
 21855 ;; Auto vars:     Size  Location     Type
 21856 ;;  rf              1    3[COMMON] unsigned char 
 21857 ;; Return value:  Size  Location     Type
 21858 ;;		None               void
 21859 ;; Registers used:
 21860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21861 ;; Tracked objects:
 21862 ;;		On entry : 0/0
 21863 ;;		On exit  : 0/0
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21866 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21870 ;;Total ram usage:        2 bytes
 21871 ;; Hardware stack levels used:    1
 21872 ;; Hardware stack levels required when called:    1
 21873 ;; This function calls:
 21874 ;;		i1_RfPointSelect
 21875 ;; This function is called by:
 21876 ;;		_INT_ISR
 21877 ;; This function uses a non-reentrant model
 21878 ;;
 21879                           
 21880                           
 21881                           ;psect for function _setRF_ReceiveGO
 21882  23A0                     _setRF_ReceiveGO:	
 21883                           
 21884                           ;incstack = 0
 21885                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21886                           ;setRF_ReceiveGO@rf stored from wreg
 21887  23A0  00F4               	movwf	setRF_ReceiveGO@rf
 21888                           
 21889                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21890  23A1  0874               	movf	setRF_ReceiveGO@rf,w
 21891  23A2  31A3  233E         	fcall	i1_RfPointSelect
 21892                           
 21893                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21894  23A4  087C               	movf	_RF,w
 21895  23A5  0086               	movwf	6
 21896  23A6  0187               	clrf	7
 21897  23A7  0873               	movf	setRF_ReceiveGO@command,w
 21898  23A8  1081               	bcf	1,1
 21899  23A9  1D03               	skipz
 21900  23AA  1481               	bsf	1,1
 21901  23AB  0008               	return
 21902  23AC                     __end_of_setRF_ReceiveGO:	
 21903                           
 21904                           	psect	text142
 21905  233E                     __ptext142:	
 21906 ;; *************** function i1_RfPointSelect *****************
 21907 ;; Defined at:
 21908 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21909 ;; Parameters:    Size  Location     Type
 21910 ;;  rf              1    wreg     unsigned char 
 21911 ;; Auto vars:     Size  Location     Type
 21912 ;;  rf              1    1[COMMON] unsigned char 
 21913 ;; Return value:  Size  Location     Type
 21914 ;;		None               void
 21915 ;; Registers used:
 21916 ;;		wreg
 21917 ;; Tracked objects:
 21918 ;;		On entry : 0/0
 21919 ;;		On exit  : 0/0
 21920 ;;		Unchanged: 0/0
 21921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21925 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21926 ;;Total ram usage:        2 bytes
 21927 ;; Hardware stack levels used:    1
 21928 ;; This function calls:
 21929 ;;		Nothing
 21930 ;; This function is called by:
 21931 ;;		_setRF_ReceiveGO
 21932 ;; This function uses a non-reentrant model
 21933 ;;
 21934                           
 21935                           
 21936                           ;psect for function i1_RfPointSelect
 21937  233E                     i1_RfPointSelect:	
 21938                           
 21939                           ;incstack = 0
 21940                           ; Regs used in i1_RfPointSelect: [wreg]
 21941                           ;i1RfPointSelect@rf stored from wreg
 21942  233E  00F2               	movwf	i1RfPointSelect@rf
 21943                           
 21944                           ;RF_Control_B1.c: 10: if(rf == 1)
 21945  233F  0872               	movf	i1RfPointSelect@rf,w
 21946  2340  3A01               	xorlw	1
 21947  2341  1D03               	skipz
 21948  2342  0008               	return
 21949                           
 21950                           ;RF_Control_B1.c: 11: {
 21951                           ;RF_Control_B1.c: 12: RF=&RF1;
 21952  2343  30E4               	movlw	_RF1& (0+255)
 21953  2344  00F1               	movwf	??i1_RfPointSelect
 21954  2345  0871               	movf	??i1_RfPointSelect,w
 21955  2346  00FC               	movwf	_RF
 21956  2347  0008               	return
 21957  2348                     __end_ofi1_RfPointSelect:	
 21958  007E                     btemp	set	126	;btemp
 21959  007E                     pic14e$flags	set	126
 21960  007E                     wtemp	set	126
 21961  007E                     wtemp0	set	126
 21962  0080                     wtemp1	set	128
 21963  0082                     wtemp2	set	130
 21964  0084                     wtemp3	set	132
 21965  0086                     wtemp4	set	134
 21966  0088                     wtemp5	set	136
 21967  007F                     wtemp6	set	127
 21968  007E                     ttemp	set	126
 21969  007E                     ttemp0	set	126
 21970  0081                     ttemp1	set	129
 21971  0084                     ttemp2	set	132
 21972  0087                     ttemp3	set	135
 21973  007F                     ttemp4	set	127
 21974  007E                     ltemp	set	126
 21975  007E                     ltemp0	set	126
 21976  0082                     ltemp1	set	130
 21977  0086                     ltemp2	set	134
 21978  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         286
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      76
    BANK2            80      0      80
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK3[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109537
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8083
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8083
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8083
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   22258
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   22258
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9767
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9103
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1258
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1070
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1070
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29449
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29449
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28445
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26828
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10861
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6572
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6572
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6572
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2102
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8099
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6603
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4818
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2813
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1167
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1167
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10769
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10690
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    7025
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1791
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1039
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10308
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10308
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     196      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     196      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Sep 24 17:05:07 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007B  
                                     _RD 0CA8                                       _RF 007C  
                __end_of_CC2500_WriteREG 25EE                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 258D  
             _getDimmerLights_StatusFlag 2577                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1E6B                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 19A9                     _setDimmerLights_Main 1377  
                           ___ftadd@sign 0048                                      l312 1C6D  
                                    l313 1C72                                      l403 265E  
                                    l323 1ECE                                      l307 1C43  
                                    l340 193B                                      l316 1C75  
                                    l343 1941                                      l327 1EDF  
                                    l409 27B9                                      l373 25C8  
                                    l374 25CA                                      l385 25DD  
                                    l706 1915                                      l397 245E  
                                    l922 1F66                                      l875 24F1  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0015                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0168  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E4                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 0156  
                                    _Sw2 015F                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 25D5  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2348  
                        __end_of_ADC_Set 2305                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 162E                    _setDimmerLights_ERROR 1D5D  
                  _setDimmerLights_AdjRF 276C                    _setDimmerLights_AdjGo 24B6  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 2486  
                                   ?_ISR 0071                          _PowerFault_Main 22BC  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 27B4  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2160 1B9B                 ?_DimmerLightsPointSelect 0071  
                                   l3400 1E9E                                     l2460 0D7A  
                        __end_of_IOC_Set 2402                                     l3406 1EB5  
                                   l1718 180A                                     l3239 26B2  
                                   l1744 19D3                                     l2464 1A98  
                                   l2706 1049                                     l2724 256C  
                                   l3429 0B25                                     l2738 1B1C  
                                   l2922 22D9                                     l1939 1BDE  
                                   l6206 2711                                     l6222 0AB5  
                                   l6400 1453                                     l7016 1C55  
                                   l6240 0ADE                                     l6410 146C  
                                   l6250 0B00                                     l6218 0AAE  
                                   l6330 0920                                     l6180 1E8A  
                                   l6172 1E74                                     l6316 08E7  
                                   l6308 08CE                                     l6260 0B21  
                                   l6252 0B04                                     l6228 0AC4  
                                   l6414 147A                                     l6406 1460  
                                   l6246 0AF1                                     l6176 1E7B  
                                   l6408 1469                                     l6264 0B37  
                                   l6248 0AFB                                     l6360 098D  
                                   l6352 0979                                     l6336 0936  
                                   l6186 1EA3                                     l6178 1E85  
                                   l6258 0B17                                     l6610 1E51  
                                   l6436 2599                                     l6188 1EAB  
                                   l6380 1415                                     l6508 2505  
                                   l6268 0B49                                     l6364 0995  
                                   l6348 0971                                     l6460 190D  
                                   l6452 1901                                     l6444 18F5  
                                   l6604 1E3E                                     l9110 27CA  
                                   l6294 088D                                     l6278 0B64  
                                   l6614 1E5D                                     l9112 27D5  
                                   l6288 0877                                     l7504 1AE4  
                                   l6704 1A19                                     l6456 1907  
                                   l6448 18FB                                     l6608 1E44  
                                   l6490 273F                                     l9122 1C0D  
                                   l7508 1AEB                                     l6740 269C  
                                   l9052 161C                                     l9044 160A  
                                   l6398 1445                                     l6486 2734  
                                   l6742 26A2                                     l9038 15EE  
                                   l9214 1D22                                     l9056 1625  
                                   l9048 1613                                     l9402 1386  
                                   l9146 19B7                                     l9226 1D38  
                                   l9322 11E5                                     l6756 2587  
                                   l9084 1EF1                                     l9406 1393  
                                   l9502 10C2                                     l9086 1F09  
                                   l6862 1B0A                                     l9270 1144  
                                   l9190 1B92                                     l8712 26AC  
                                   l9424 13C9                                     l9512 1122  
                                   l8802 0818                                     l9418 13B7  
                                   l7930 1A56                                     l9098 1F22  
                                   l9290 1186                                     l9266 1134  
                                   l8732 1245                                     l8812 0828  
                                   l8820 0834                                     l9436 13F5  
                                   l9508 10DB                                     l7940 1A71  
                                   l8806 081E                                     l9606 0CBA  
                                   l9702 1500                                     l8736 1263  
                                   l8832 0850                                     l8816 082E  
                                   l7936 1A68                                     l7928 1A4A  
                                   l9640 0D69                                     l9632 0D4C  
                                   l9608 0CC4                                     l9544 0DC5  
                                   l8850 1A00                                     l9642 0D6F  
                                   l8930 1562                                     l9722 0EBC  
                                   l9546 0DCE                                     l8764 1FF0  
                                   l8828 084A                                     l8836 0856  
                                   l9628 0D2D                                     l8916 1528  
                                   l9660 1497                                     l9732 0ECC  
                                   l9724 0EC2                                     l9580 0E68  
                                   l7990 17F2                                     l8846 19F5  
                                   l8782 1994                                     l8926 154C  
                                   l9734 0ED4                                     l7984 17E5  
                                   l8960 1F59                                     l9664 149E  
                                   l9584 0E73                                     l9568 0E34  
                                   l9912 16E3                                     _CFGS 0CAE  
                                   l7978 17BD                                     l7986 17EB  
                                   l8786 199E                                     l8962 1F5E  
                                   l9674 14BB                                     l9578 0E62  
                                   l9922 171C                                     l8956 1F46  
                                   l9772 0F78                                     l9748 0F01  
                                   l8798 0812                                     l8878 1696  
                                   l9854 0BF5                                     l9686 14D6  
                                   l9758 0F33                                     l9782 0FAB  
                                   l9934 1753                                     l9918 1714  
                                   l9688 14DA                                     l9946 1093  
                                   l9982 1371                                     l9974 1345  
                                   l9996 1CBD                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 23B8                                     _LATC 010E  
                                   u4115 1E80                                     u4135 1E99  
                                   u4305 0ADF                                     u4155 1EA6  
                                   u4335 0AF2                                     u4185 1EBC  
                                   u4505 08E8                                     _PEIE 005E  
                                   u4365 0B05                                     _INTE 005C  
                                   _INTF 0059                                     u4615 0996  
                                   u4465 089F                                     u4625 099C  
                                   u4545 0942                                     u4475 08AF  
                                   u4715 1461                                     u4395 0B18  
                                   u4555 0952                                     u4485 08CF  
                                   u4495 08DE                                     u4655 141C  
                                   u4575 097A                                     u7065 177E  
                                   u4585 0980                                     u4685 1446  
                                   u8250 1F9F                                     u8255 1F9D  
                                   u8185 26B3                                     u8195 26B8  
                                   u8490 233C                                     u6955 1A4D  
                                   u6975 1A57                                     u8745 27BF  
                                   u6985 1A61                                     u6995 1A69  
                                   u9905 173F                                     _LWLO 0CAD  
                                   _RFSW 00BC                                     u9935 1082  
                                   _TMR0 0015                                     u9865 16FE  
                                   u9945 10AB                                     u9965 1B63  
                                   u9985 1314                                     u9995 135B  
                        __end_of_INT_Set 22E4                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 014A  
                                   _Load 006E                                     _Temp 007D  
                                   _main 0791                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 22BC                      __end_of_DlyOff_Main 12FA  
                        __end_of_RF_Main 22D9                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 2620                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1A78                      DelayTimejudge@value 0022  
                          _RfPointSelect 235E               __end_of_setRFSW_AdjControl 1B32  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 010E  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 23E8  
                                  l10010 0086                                    l10100 02D7  
                                  l10032 0101                                    l10130 037D  
                                  l10026 00D3                                    l10202 07CE  
                                  l10124 036A                                    l10052 01B2  
                                  l10046 0196                                    l10054 01CA  
                                  l10118 0354                                    l10080 0268  
                                  l10074 0250                                    l10092 029F  
                                  l10198 07B8                    ?_setDimmerLights_Main 0071  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 2561  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0B7C                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0909                                    u10105 014D  
                                  u10035 1CA4                                    u10155 01E2  
                        __end_of___ftmul 09BD                          __end_of___fttol 1483  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1A78                   _setDimmerLights_Switch 2466  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E7  
                                  _RFSW2 00E8                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 00EA  
                          setRF_Learn@rf 0023                                    _MainT 12FA  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                                  _Temp1 013C                         __end_of_TMR0_ISR 0791  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 240F  
                                  _getAD 1800                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1F95            DimmerLights_Exceptions@status 002A  
                          ___ftpack@sign 0024                           _setLoad_Enable 2496  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 0380                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0071  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 24E7  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1F95              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0071  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0071  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0071  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1DB4  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0071                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 2395                        ??_setPercentValue 0059  
                           __end_of_main 0800                      ?_setRF_DimmerLights 005D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 16C2                     _setSw_Initialization 2324  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0071  
                _setControl_Lights_Table 159B                   ?_Buzzer_Initialization 0071  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 22BF  
                             _Receive_GO 0381                               _Receive_OK 0382  
                              ??_IOC_ISR 0071                   ?_setDimmerLights_ERROR 0071  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 24FA  
                                 ?_MainT 0071                   ?_setDimmerLights_AdjRF 0071  
                              ??_INT_ISR 0075                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 24A6  
                   __end_of_getTemp_Safe 22FE                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 1281                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                        ?_getPowerFault_AD 0071  
                         setRF_Enable@rf 0023                         __end_of___awtoft 2728  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 1ECC  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 2476  
                                 i1l1690 262E                                   i1l1685 0781  
                                 i1l8500 0628                                   i1l8420 049E  
                                 i1l8520 0678                                   i1l8440 04EE  
                                 i1l8532 06AD                                   i1l8540 06D8  
                                 i1l8524 068B                                   i1l8452 0523  
                                 i1l8460 054E                                   i1l8444 0501  
                                 i1l8518 0672                                   i1l8526 0691  
                                 i1l8438 04E8                                   i1l8446 0507  
                                 i1l8536 06C4                                   i1l8456 053A  
                                 i1l8546 06F3                                   i1l8466 0569  
                                 i1l8396 27AA                                   i1l8548 06F9  
                                 i1l8468 056F                                   i1l8558 072D  
                                 i1l8566 0762                                   i1l8478 05A3  
                                 i1l8486 05D8                                   i1l7952 1963  
                                 i1l7956 196D                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 u800_25 0758                                   u801_25 0774  
                                 _OSCCON 0099                       __size_of_Load_Main 03ED  
                                 u764_25 0482                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   u781_25 05CE  
                                 u783_25 060C                                   _IO_Set 2607  
                     DelayTime_1us@count 0020                               _VarProduct 01A0  
                  _Dimmer_Initialization 22F0           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 2537                                   _Dimmer 00B9  
                                 _DlySw1 00CB                                   _DlySw2 00D0  
            __size_of_setLoad_Exceptions 0043               __end_of_Mcu_Initialization 25BC  
                    __end_of_Buzzer_Main 1800                                   _Memory 00E9  
                                 _Timer0 00EB       __end_of_setDimmerLights_TriggerAdj 24D6  
             _setDimmerLights_TriggerAdj 24C6            setDimmerLights_Switch@command 0022  
                                 ___wmul 26A9                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 233E  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 0802                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 120A                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 23F5         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 250E                          ?_setLoad_Enable 0071  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0022  
                         _setTemp_Enable 237F                          _RfSWPointSelect 2561  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 22D9  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1E0F  
       __end_of_CC2500_registers_address 202F     __end_of_setPowerFault_Initialization 24B6  
  __size_of_setPowerFault_Initialization 0010             _setPowerFault_Initialization 24A6  
                __end_of__initialization 0055              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 1377  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 26E6  
                          __end_of_getAD 1816                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 23D0  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0065  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 0446                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 263A                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                   __end_of_setTemp_Enable 238A  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0023                           _DimmerLights11 0079  
                         _DimmerLights22 007A                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 22BF                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                            _Buzzer_Main 1758                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 22C5                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 230C                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 231C  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 2348                      i1_setLoad_StatusOff 1947  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 0791                      _CC2500_WriteCommand 2456  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 16C2                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 22FE                _PowerFault_Initialization 22B9  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1050  
           __end_of_setRF_Initialization 230C                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1AF2  
                __end_of_RfSWPointSelect 2577                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 278F  
                        ?_setTemp_Enable 0071                                  _IOC_Set 23F5  
                   __size_of_setLog_Code 0048                                  _INT_ISR 23AC  
                                _INT_Set 22DE                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1C80                        _Flash_Memory_Read 25EE  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 238A                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 22D5  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_setControl_Lights_Table 162E                              ?_TouchPower 0071  
                        _Sw_DimmerOnFunc 112A                          _setPercentValue 1CC5  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0071                                  _Dimmer1 00E1  
           __end_of_CC2500_FrequencyCabr 23C4                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D9                                  _VarLED2 00DD  
                      __end_of_getRxData 1D5D               __end_of_setPowerFault_Main 0D82  
               _CC2500_registers_address 2000                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 2486  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 22F7                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 2476                                  ___ftadd 0A86  
                         ??_setSw_Enable 0022                                  ___ftdiv 0860  
                        __size_of___wmul 001E                                  ___ftmul 0909  
                                ___fttol 13FC                      __end_of_Switch_Main 1008  
                                ___lwdiv 1A41                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 1050                                  __ptext2 1B32  
                                __ptext3 16C2                                  __ptext4 1800  
                                __ptext5 22C2                                  __ptext6 0D82  
                                __ptext7 1B73                                  __ptext8 22BF  
                                __ptext9 2395                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1CC5                __end_of_Flash_Memory_Read 2607  
                             _setRF_Main 1483                            _DelayOff_Main 2314  
                      _DimmerLights_Main 2374                        __end_of_setINT_GO 233E  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 235E                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 22C9                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 22CD            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 2728                      _DelayOffPointSelect 258D  
                                clrloop0 22EB           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 241C                     end_of_initialization 0055  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 2369  
                      _CC2500_InitSetREG 183D                            _DelayTime_1us 27B4  
                      __end_of_setTxData 0A86               __end_of_Flash_Memory_Write 19DA  
                                init_ram 22E4                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 22E5                               _setSw_Main 0EA5  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 2655  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 24D6  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 0014                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1ECC                            _CC2500_TxData 1C3C  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1891  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0041            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 10BC  
                _DimmerLights_Exceptions 1F30                              ?_getLoad_AD 0071  
                           __pstringtext 2000                      _Flash_Memory_Unlock 232C  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 19DA         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 237F                       _Mcu_Initialization 25A4  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4758 0067                          _setSw_Main$4759 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 274A  
                __end_of_Sw_DimmerOnFunc 1199                  __end_of_setPercentValue 1D0B  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1867  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1AB2  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1BF8  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 2670  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 1BF8  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 2620  
                   _setRF_Initialization 2305                              _Switch_Main 1000  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 24E7                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 2522                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0026                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 26C7                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 034B          __size_of_setOverTemp_Exceptions 0042  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0085  
                         __end_of_setLED 0860                           __end_of_setBuz 1281  
                          _setLoad_Count 254C          _getDimmerLights_StatusFlag$1840 0022  
                   _CC2500_FrequencyCabr 23B8                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 150B                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1A0C                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 2655                                _Load_Main 0059  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 26E6  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA5  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 268C                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D5  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 2456                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 2369                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C4                                _Temp_Main 22C2  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C0  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 22CD               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1A41                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4404 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0094  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1B73                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012E                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002A  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 276C  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E9  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                             ?_Temp_Main 0071                      __size_of_setRF_Main 0088  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0071                   _setTemp_Initialization 2395  
                       _getPowerFault_AD 1B32        __size_of_setPowerFault_Exceptions 003A  
    __end_of_Flash_Memory_Initialization 0C74              _Flash_Memory_Initialization 0B7C  
              ?_setPowerFault_Exceptions 0071                                __ptext100 1281  
                              __ptext101 09BD                                __ptext110 1E6B  
                              __ptext102 235E                                __ptext111 2438  
                              __ptext103 2447                                __ptext120 258D  
                              __ptext112 2561                                __ptext104 24FA  
                              __ptext121 2522                                __ptext113 2476  
                              __ptext105 1F95                                __ptext130 22C5  
                              __ptext122 22CD                                __ptext114 2466  
                              __ptext106 1CC5                                __ptext131 2456  
                              __ptext123 1917                                __ptext115 24E7  
                              __ptext107 13FC                                __ptext140 23AC  
                              __ptext132 25BC                                __ptext124 183D  
                              __ptext116 120A                                __ptext108 0860  
                              __ptext141 23A0                                __ptext133 1758  
                              __ptext125 26C7                                __ptext117 26A9  
                              __ptext109 2706                                 ?___ftadd 003E  
                              __ptext142 233E                                __ptext134 2348  
                              __ptext126 25D5                                __ptext118 230C  
                              __ptext127 23B8                                __ptext119 2353  
                              __ptext136 0446                                __ptext128 27B4  
                              __ptext137 1947                                __ptext129 22C9  
                              __ptext138 278F                                __ptext139 2620  
                              _getRxData 1D0B                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 159B  
                        _setRF_ReceiveGO 23A0                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 2353                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 22DE                       _setPowerFault_Main 0C74  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 015B            __end_of_setDimmerLights_ERROR 1DB4  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 278F  
          __end_of_setDimmerLights_AdjGo 24C6                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 2496  
                         __size_of_MainT 007D                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 2066                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1867  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 24FA                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 2335                      __end_of_setLED_Main 1AF2  
               __end_of_setLoad_StatusOn 1A0C                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 22C2                        _CC2500_rfSettings 202F  
                         ___wmul@product 0024                                 _LED_Main 23DC  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 22EA                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 09BD      __end_of_DimmerLights_Initialization 254C  
            _DimmerLights_Initialization 2537                       _CC2500_ClearRXFIFO 22C5  
                     _CC2500_ClearTXFIFO 22C9           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 2438                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 19A9                               ?_getRxData 0071  
                               _TMR0_ISR 0446                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1978                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 2402                         _Sw_DimmerAdjFunc 27DA  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 183D  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 2466  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0071  
                       _Sw_DimmerOffFunc 1199                    __size_of_setTemp_Main 0123  
           __end_of_MainT_Initialization 2522                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 2324                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 23D0  
                         ?_SwPointSelect 0071                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 1050                    _DlyOff_Initialization 2353  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 205E                         __size_of_RF_Main 0004  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 1758  
                  _Switch_Initialization 240F                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 2438  
                   __size_of_Buzzer_Main 00A8                       __end_of_getTemp_AD 10BC  
                             ?_setTxData 0071                             ?_Switch_Main 0071  
                       _CC2500_WriteByte 25BC                                 _VarTMain 01C0  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 23AC                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 0063  
                    _Load_Initialization 23E8                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 18BC  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1891  
                               _TxStatus 0386                             _setTemp_Main 0D82  
                     _setLoad_Exceptions 1BB5                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0071                         __size_of___ftdiv 00A9  
                           _setSw_Enable 2670                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000A                                 ___awtoft 2706  
                       ??_LedPointSelect 0020                                 ___ftpack 1E6B  
                           _setSw_Status 2447                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1AB2                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 2000  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 1000  
                               __ptext11 0EA5                                 __ptext20 22D9  
                               __ptext12 242A                                 __ptext21 22D5  
                               __ptext13 112A                                 __ptext30 1A0C  
                               __ptext22 1483                                 __ptext14 1199  
                               __ptext31 276C                                 __ptext23 1D0B  
                               __ptext15 27DA                                 __ptext40 268C  
                               __ptext32 1DB4                                 __ptext24 1008  
                               __ptext16 24C6                                 __ptext41 22D1  
                               __ptext33 0909                                 __ptext25 159B  
                               __ptext17 24B6                                 __ptext50 2402  
                               __ptext42 2305                                 __ptext34 0A86  
                               __ptext26 150B                                 __ptext18 240F  
                               __ptext51 2607                                 __ptext43 22BC  
                               __ptext35 1816                                 __ptext27 1E0F  
                               __ptext19 2324                                 __ptext60 1BB5  
                               __ptext52 23F5                                 __ptext44 0C74  
                               __ptext36 1C3C                                 __ptext28 18E9  
                               __ptext61 2670                                 __ptext53 22DE  
                               __ptext45 1A78                                 __ptext37 1ECC  
                               __ptext29 1AF2                                 __ptext70 1A41  
                               __ptext62 1867                                 __ptext54 22FE  
                               __ptext46 238A                                 __ptext38 241C  
                               __ptext71 23E8                                 __ptext63 2335  
                               __ptext55 250E                                 __ptext47 22B9  
                               __ptext39 2655                                 __ptext80 0B7C  
                               __ptext72 274A                                 __ptext64 1F30  
                               __ptext56 12FA                                 __ptext48 24A6  
                               __ptext81 19A9                                 __ptext73 23DC  
                               __ptext65 1891                                 __ptext57 237F  
                               __ptext49 25A4                                 __ptext90 254C  
                               __ptext82 232C                                 __ptext74 1AB2  
                               __ptext66 1D5D                                 __ptext58 2496  
                               __ptext91 0802                                 __ptext83 25EE  
                               __ptext75 23D0                                 __ptext67 2486  
                               __ptext59 0059                                 __ptext92 2728  
                               __ptext84 2374                                 __ptext76 24D6  
                               __ptext68 22F7                                 __ptext93 263A  
                               __ptext85 1377                                 __ptext77 1C80  
                               __ptext69 231C                                 __ptext94 2369  
                               __ptext86 1BF8                                 __ptext78 10BC  
                               __ptext95 2577                                 __ptext87 1978  
                               __ptext79 23C4                                 __ptext96 2537  
                               __ptext88 162E                                 __ptext97 18BC  
                               __ptext89 19DA                                 __ptext98 22F0  
                               __ptext99 2314                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 2447  
          __end_of_Dimmer_Initialization 22F7             __end_of_setDimmerLights_Main 13FC  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 006F  
                            _setRF_Learn 242A                 __end_of_CC2500_SIDLEMode 22D1  
                         _setRF_RxStatus 241C               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 25A4               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 263A                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 001A                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 268C                       _CC2500_InitPATable 26C7  
    __size_of_getDimmerLights_StatusFlag 0016            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 150B              __size_of_Mcu_Initialization 0018  
                   _CC2500_patable_vaule 205E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 1917                       __end_of_setLoad_GO 2374  
            __end_of_Flash_Memory_Modify 112A                        ??_getPercentValue 0059  
                            _setLog_Code 1008                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 2335                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 25D5                       __end_of_setSw_Main 1000  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                ?_setOverTemp_Exceptions 0071                           _DelayTimejudge 18E9  
                          ?_getLoad_Safe 0071                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1B73                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0071                   __end_of_setRF_RxStatus 242A  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 18E9  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 18BC              __end_of_setDimmerLights_Adj 1C3C  
                ?_setTemp_Initialization 0071                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 250E                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 22D1                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0071  
                   _Flash_Memory_Erasing 23C4                       ?_RF_Initialization 0071  
                             _SPI0Buffer 00BF          __end_of_DelayOff_Initialization 2314  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 231C  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 1E0F         __size_of_setControl_Lights_Table 0093  
                      _setLoad_StatusOff 1978                   __end_of_DelayTimejudge 1917  
         __end_of_setOverTemp_Exceptions 1BB5                   __size_of_RfPointSelect 000B  
                      ??i1_RfPointSelect 0071                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 27DA  
               __end_of_Sw_DimmerAdjFunc 2800                  __end_of_CC2500_ReadByte 26A9  
           __end_of_setSw_Initialization 232C                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 1816  
             ?_PowerFault_Initialization 0071               __end_of_LED_Initialization 23DC  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 23A0                 __size_of_Sw_DimmerOnFunc 006F  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0071  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 22D5                 __end_of_Sw_DimmerOffFunc 120A  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    ?_MainT_Initialization 0071  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1F30  
                  __end_of_CC2500_TxData 1C80                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 274A                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1947  
