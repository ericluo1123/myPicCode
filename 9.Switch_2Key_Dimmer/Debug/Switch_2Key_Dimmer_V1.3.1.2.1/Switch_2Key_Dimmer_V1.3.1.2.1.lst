

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Sep 25 15:23:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	psect	text143,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943                           
  1944                           	psect	idataBANK3
  1945  26E0                     __pidataBANK3:	
  1946                           
  1947                           ;initializer for _VarProduct
  1948  26E0  3463               	retlw	99
  1949  26E1  3402               	retlw	2
  1950  26E2  3400               	retlw	0
  1951  26E3  3400               	retlw	0
  1952  26E4  3400               	retlw	0
  1953  26E5  3400               	retlw	0
  1954  26E6  3400               	retlw	0
  1955  26E7  3400               	retlw	0
  1956  26E8  3400               	retlw	0
  1957  26E9  3400               	retlw	0
  1958  26EA  3400               	retlw	0
  1959  26EB  3400               	retlw	0
  1960  26EC  34FF               	retlw	255
  1961  26ED  34FF               	retlw	255
  1962  26EE  34FF               	retlw	255
  1963  26EF  3400               	retlw	0
  1964  26F0  3400               	retlw	0
  1965  26F1  3400               	retlw	0
  1966  26F2  3400               	retlw	0
  1967  26F3  3400               	retlw	0
  1968  26F4  3400               	retlw	0
  1969  26F5  3400               	retlw	0
  1970  26F6  3400               	retlw	0
  1971  26F7  3400               	retlw	0
  1972  26F8  3400               	retlw	0
  1973  26F9  3400               	retlw	0
  1974  26FA  3400               	retlw	0
  1975  26FB  3400               	retlw	0
  1976  26FC  3400               	retlw	0
  1977  26FD  3400               	retlw	0
  1978  26FE  3400               	retlw	0
  1979  26FF  3400               	retlw	0
  1980                           
  1981                           	psect	stringtext
  1982  2000                     __pstringtext:	
  1983  2000                     _CC2500_registers_address:	
  1984  2000  3403               	retlw	3
  1985  2001  3416               	retlw	22
  1986  2002  3417               	retlw	23
  1987  2003  341E               	retlw	30
  1988  2004  341F               	retlw	31
  1989  2005  3420               	retlw	32
  1990  2006  342A               	retlw	42
  1991  2007  342B               	retlw	43
  1992  2008  340B               	retlw	11
  1993  2009  340C               	retlw	12
  1994  200A  340D               	retlw	13
  1995  200B  340E               	retlw	14
  1996  200C  340F               	retlw	15
  1997  200D  3410               	retlw	16
  1998  200E  3411               	retlw	17
  1999  200F  3412               	retlw	18
  2000  2010  3413               	retlw	19
  2001  2011  3414               	retlw	20
  2002  2012  340A               	retlw	10
  2003  2013  3415               	retlw	21
  2004  2014  3421               	retlw	33
  2005  2015  3422               	retlw	34
  2006  2016  3418               	retlw	24
  2007  2017  3419               	retlw	25
  2008  2018  341A               	retlw	26
  2009  2019  341B               	retlw	27
  2010  201A  341C               	retlw	28
  2011  201B  341D               	retlw	29
  2012  201C  3423               	retlw	35
  2013  201D  3424               	retlw	36
  2014  201E  3425               	retlw	37
  2015  201F  3426               	retlw	38
  2016  2020  3429               	retlw	41
  2017  2021  342C               	retlw	44
  2018  2022  342D               	retlw	45
  2019  2023  342E               	retlw	46
  2020  2024  3400               	retlw	0
  2021  2025  3401               	retlw	1
  2022  2026  3402               	retlw	2
  2023  2027  3407               	retlw	7
  2024  2028  3408               	retlw	8
  2025  2029  3409               	retlw	9
  2026  202A  3406               	retlw	6
  2027  202B  3404               	retlw	4
  2028  202C  3405               	retlw	5
  2029  202D  3427               	retlw	39
  2030  202E  3428               	retlw	40
  2031  202F                     __end_of_CC2500_registers_address:	
  2032  202F                     _CC2500_rfSettings:	
  2033  202F  3407               	retlw	7
  2034  2030  3407               	retlw	7
  2035  2031  3430               	retlw	48
  2036  2032  3487               	retlw	135
  2037  2033  346B               	retlw	107
  2038  2034  34F8               	retlw	248
  2039  2035  347F               	retlw	127
  2040  2036  343F               	retlw	63
  2041  2037  3409               	retlw	9
  2042  2038  3400               	retlw	0
  2043  2039  345C               	retlw	92
  2044  203A  34A7               	retlw	167
  2045  203B  3462               	retlw	98
  2046  203C  3486               	retlw	134
  2047  203D  3483               	retlw	131
  2048  203E  3403               	retlw	3
  2049  203F  3422               	retlw	34
  2050  2040  34F8               	retlw	248
  2051  2041  3400               	retlw	0
  2052  2042  3444               	retlw	68
  2053  2043  34B6               	retlw	182
  2054  2044  3410               	retlw	16
  2055  2045  3418               	retlw	24
  2056  2046  341D               	retlw	29
  2057  2047  341C               	retlw	28
  2058  2048  34C7               	retlw	199
  2059  2049  3400               	retlw	0
  2060  204A  34B2               	retlw	178
  2061  204B  34EA               	retlw	234
  2062  204C  340A               	retlw	10
  2063  204D  3400               	retlw	0
  2064  204E  3411               	retlw	17
  2065  204F  3459               	retlw	89
  2066  2050  3488               	retlw	136
  2067  2051  3431               	retlw	49
  2068  2052  340B               	retlw	11
  2069  2053  342F               	retlw	47
  2070  2054  342E               	retlw	46
  2071  2055  3406               	retlw	6
  2072  2056  3404               	retlw	4
  2073  2057  3405               	retlw	5
  2074  2058  3400               	retlw	0
  2075  2059  3430               	retlw	48
  2076  205A  34D3               	retlw	211
  2077  205B  3491               	retlw	145
  2078  205C  3441               	retlw	65
  2079  205D  3400               	retlw	0
  2080  205E                     __end_of_CC2500_rfSettings:	
  2081  205E                     _CC2500_patable_vaule:	
  2082  205E  34FE               	retlw	254
  2083  205F  34FE               	retlw	254
  2084  2060  34FE               	retlw	254
  2085  2061  34FE               	retlw	254
  2086  2062  34FE               	retlw	254
  2087  2063  34FE               	retlw	254
  2088  2064  34FE               	retlw	254
  2089  2065  34FE               	retlw	254
  2090  2066                     __end_of_CC2500_patable_vaule:	
  2091                           
  2092                           	psect	nvBANK0
  2093  006F                     __pnvBANK0:	
  2094  006F                     _Product:	
  2095  006F                     	ds	1
  2096                           
  2097                           	psect	nvBANK1
  2098  00EB                     __pnvBANK1:	
  2099  00EB                     _Memory:	
  2100  00EB                     	ds	1
  2101  00EC                     _TMain:	
  2102  00EC                     	ds	1
  2103  00ED                     _Timer0:	
  2104  00ED                     	ds	1
  2105  000C                     _PORTA	set	12
  2106  000D                     _PORTB	set	13
  2107  000E                     _PORTC	set	14
  2108  0015                     _TMR0	set	21
  2109  005F                     _GIE	set	95
  2110  005C                     _INTE	set	92
  2111  0059                     _INTF	set	89
  2112  005B                     _IOCIE	set	91
  2113  0058                     _IOCIF	set	88
  2114  005E                     _PEIE	set	94
  2115  0060                     _RA0	set	96
  2116  0063                     _RA3	set	99
  2117  0064                     _RA4	set	100
  2118  0066                     _RA6	set	102
  2119  0067                     _RA7	set	103
  2120  0068                     _RB0	set	104
  2121  0069                     _RB1	set	105
  2122  006A                     _RB2	set	106
  2123  006B                     _RB3	set	107
  2124  006C                     _RB4	set	108
  2125  006D                     _RB5	set	109
  2126  0070                     _RC0	set	112
  2127  0071                     _RC1	set	113
  2128  0072                     _RC2	set	114
  2129  0074                     _RC4	set	116
  2130  0075                     _RC5	set	117
  2131  0077                     _RC7	set	119
  2132  005D                     _TMR0IE	set	93
  2133  005A                     _TMR0IF	set	90
  2134  009D                     _ADCON0	set	157
  2135  009E                     _ADCON1	set	158
  2136  009C                     _ADRESH	set	156
  2137  009B                     _ADRESL	set	155
  2138  0095                     _OPTION_REG	set	149
  2139  0099                     _OSCCON	set	153
  2140  008C                     _TRISA	set	140
  2141  008D                     _TRISB	set	141
  2142  008E                     _TRISC	set	142
  2143  04E9                     _GO_nDONE	set	1257
  2144  0117                     _FVRCON	set	279
  2145  010C                     _LATA	set	268
  2146  010D                     _LATB	set	269
  2147  010E                     _LATC	set	270
  2148  018C                     _ANSELA	set	396
  2149  018D                     _ANSELB	set	397
  2150  018E                     _ANSELC	set	398
  2151  0192                     _PMADRH	set	402
  2152  0191                     _PMADRL	set	401
  2153  0196                     _PMCON2	set	406
  2154  0194                     _PMDATH	set	404
  2155  0193                     _PMDATL	set	403
  2156  0CAE                     _CFGS	set	3246
  2157  0CAC                     _FREE	set	3244
  2158  0CAD                     _LWLO	set	3245
  2159  0CA8                     _RD	set	3240
  2160  0CA9                     _WR	set	3241
  2161  0CAA                     _WREN	set	3242
  2162  1068                     _WPUB0	set	4200
  2163  1069                     _WPUB1	set	4201
  2164  106A                     _WPUB2	set	4202
  2165  0396                     _IOCBF	set	918
  2166  0395                     _IOCBN	set	917
  2167  0394                     _IOCBP	set	916
  2168  1CB2                     _IOCBF2	set	7346
  2169                           
  2170                           ; #config settings
  2171  0000                     
  2172                           	psect	cinit
  2173  0018                     start_initialization:	
  2174  0018                     __initialization:	
  2175                           
  2176                           ; Clear objects allocated to BITCOMMON
  2177  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2178                           
  2179                           ; Clear objects allocated to COMMON
  2180  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2181  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2182  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2183  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2184  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2185  001E  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  2186                           
  2187                           ; Clear objects allocated to BANK0
  2188  001F  01EC               	clrf	__pbssBANK0& (0+127)
  2189  0020  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2190  0021  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2191                           
  2192                           ; Clear objects allocated to BANK1
  2193  0022  30A0               	movlw	low __pbssBANK1
  2194  0023  0084               	movwf	4
  2195  0024  3000               	movlw	high __pbssBANK1
  2196  0025  0085               	movwf	5
  2197  0026  304B               	movlw	75
  2198  0027  31A2  22B3  3180   	fcall	clear_ram0
  2199                           
  2200                           ; Clear objects allocated to BANK2
  2201  002A  3020               	movlw	low __pbssBANK2
  2202  002B  0084               	movwf	4
  2203  002C  3001               	movlw	high __pbssBANK2
  2204  002D  0085               	movwf	5
  2205  002E  3050               	movlw	80
  2206  002F  31A2  22B3  3180   	fcall	clear_ram0
  2207                           
  2208                           ; Clear objects allocated to BANK3
  2209  0032  30C0               	movlw	low __pbssBANK3
  2210  0033  0084               	movwf	4
  2211  0034  3001               	movlw	high __pbssBANK3
  2212  0035  0085               	movwf	5
  2213  0036  3010               	movlw	16
  2214  0037  31A2  22B3  3180   	fcall	clear_ram0
  2215                           
  2216                           ; Clear objects allocated to BANK4
  2217  003A  3020               	movlw	low __pbssBANK4
  2218  003B  0084               	movwf	4
  2219  003C  3002               	movlw	high __pbssBANK4
  2220  003D  0085               	movwf	5
  2221  003E  3025               	movlw	37
  2222  003F  31A2  22B3  3180   	fcall	clear_ram0
  2223                           
  2224                           ; Clear objects allocated to BANK5
  2225  0042  30A0               	movlw	low __pbssBANK5
  2226  0043  0084               	movwf	4
  2227  0044  3002               	movlw	high __pbssBANK5
  2228  0045  0085               	movwf	5
  2229  0046  3047               	movlw	71
  2230  0047  31A2  22B3  3180   	fcall	clear_ram0
  2231                           
  2232                           ; Initialize objects allocated to BANK3
  2233  004A  30E0               	movlw	low __pidataBANK3
  2234  004B  0084               	movwf	4
  2235  004C  30A6               	movlw	(high __pidataBANK3)| (0+128)
  2236  004D  0085               	movwf	5
  2237  004E  30A0               	movlw	low __pdataBANK3
  2238  004F  0086               	movwf	6
  2239  0050  3001               	movlw	high __pdataBANK3
  2240  0051  0087               	movwf	7
  2241  0052  3020               	movlw	32
  2242  0053  31A2  22AD         	fcall	init_ram
  2243  0055                     end_of_initialization:	
  2244                           ;End of C runtime variable initialization code
  2245                           
  2246  0055                     __end_of__initialization:	
  2247  0055  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2248  0056  0020               	movlb	0
  2249  0057  3191  2998         	ljmp	_main	;jump to C main() function
  2250                           
  2251                           	psect	bitbssCOMMON
  2252  0380                     __pbitbssCOMMON:	
  2253  0380                     _CC2500_Enable:	
  2254  0380                     	ds	1
  2255  0381                     _Receive_GO:	
  2256  0381                     	ds	1
  2257  0382                     _Receive_OK:	
  2258  0382                     	ds	1
  2259  0383                     _RxStatus:	
  2260  0383                     	ds	1
  2261  0384                     _Transceive_GO:	
  2262  0384                     	ds	1
  2263  0385                     _Transceive_OK:	
  2264  0385                     	ds	1
  2265  0386                     _TxStatus:	
  2266  0386                     	ds	1
  2267                           
  2268                           	psect	bssCOMMON
  2269  0078                     __pbssCOMMON:	
  2270  0078                     _Buz:	
  2271  0078                     	ds	1
  2272  0079                     _DimmerLights11:	
  2273  0079                     	ds	1
  2274  007A                     _DimmerLights22:	
  2275  007A                     	ds	1
  2276  007B                     _PF:	
  2277  007B                     	ds	1
  2278  007C                     _RF:	
  2279  007C                     	ds	1
  2280  007D                     _Temp:	
  2281  007D                     	ds	1
  2282                           
  2283                           	psect	bssBANK0
  2284  006C                     __pbssBANK0:	
  2285  006C                     _DimmerLights:	
  2286  006C                     	ds	1
  2287  006D                     _Sw:	
  2288  006D                     	ds	1
  2289  006E                     _Load:	
  2290  006E                     	ds	1
  2291                           
  2292                           	psect	bssBANK1
  2293  00A0                     __pbssBANK1:	
  2294  00A0                     _RF_Data:	
  2295  00A0                     	ds	21
  2296  00B5                     _RF_Count:	
  2297  00B5                     	ds	2
  2298  00B7                     _CRC:	
  2299  00B7                     	ds	1
  2300  00B8                     _DelayOff:	
  2301  00B8                     	ds	1
  2302  00B9                     _Dimmer:	
  2303  00B9                     	ds	1
  2304  00BA                     _DimmerLightsIntr:	
  2305  00BA                     	ds	1
  2306  00BB                     _LED:	
  2307  00BB                     	ds	1
  2308  00BC                     _RFSW:	
  2309  00BC                     	ds	1
  2310  00BD                     _RSSI:	
  2311  00BD                     	ds	1
  2312  00BE                     _Rx_Length:	
  2313  00BE                     	ds	1
  2314  00BF                     _SPI0Buffer:	
  2315  00BF                     	ds	1
  2316  00C0                     _Tx_Length:	
  2317  00C0                     	ds	1
  2318  00C1                     _r_address:	
  2319  00C1                     	ds	1
  2320  00C2                     _r_data:	
  2321  00C2                     	ds	1
  2322  00C3                     _s_data:	
  2323  00C3                     	ds	1
  2324  00C4                     _VarTimer0:	
  2325  00C4                     	ds	9
  2326  00CD                     _DlySw1:	
  2327  00CD                     	ds	5
  2328  00D2                     _DlySw2:	
  2329  00D2                     	ds	5
  2330  00D7                     _VarErrLED:	
  2331  00D7                     	ds	4
  2332  00DB                     _VarLED1:	
  2333  00DB                     	ds	4
  2334  00DF                     _VarLED2:	
  2335  00DF                     	ds	4
  2336  00E3                     _Dimmer1:	
  2337  00E3                     	ds	3
  2338  00E6                     _RF1:	
  2339  00E6                     	ds	3
  2340  00E9                     _RFSW1:	
  2341  00E9                     	ds	1
  2342  00EA                     _RFSW2:	
  2343  00EA                     	ds	1
  2344                           
  2345                           	psect	bssBANK2
  2346  0120                     __pbssBANK2:	
  2347  0120                     _DimmerLights1:	
  2348  0120                     	ds	14
  2349  012E                     _DimmerLights2:	
  2350  012E                     	ds	14
  2351  013C                     _Temp1:	
  2352  013C                     	ds	14
  2353  014A                     _Buz1:	
  2354  014A                     	ds	12
  2355  0156                     _Sw1:	
  2356  0156                     	ds	9
  2357  015F                     _Sw2:	
  2358  015F                     	ds	9
  2359  0168                     _PF1:	
  2360  0168                     	ds	8
  2361                           
  2362                           	psect	bssBANK3
  2363  01C0                     __pbssBANK3:	
  2364  01C0                     _VarTMain:	
  2365  01C0                     	ds	16
  2366                           
  2367                           	psect	dataBANK3
  2368  01A0                     __pdataBANK3:	
  2369  01A0                     _VarProduct:	
  2370  01A0                     	ds	32
  2371                           
  2372                           	psect	bssBANK4
  2373  0220                     __pbssBANK4:	
  2374  0220                     _VarMemory:	
  2375  0220                     	ds	37
  2376                           
  2377                           	psect	bssBANK5
  2378  02A0                     __pbssBANK5:	
  2379  02A0                     _Load1:	
  2380  02A0                     	ds	71
  2381                           
  2382                           	psect	clrtext
  2383  22B3                     clear_ram0:	
  2384                           ;	Called with FSR0 containing the base address, and
  2385                           ;	WREG with the size to clear
  2386                           
  2387  22B3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2388  22B4                     clrloop0:	
  2389  22B4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2390  22B5  3101               	addfsr 0,1
  2391  22B6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2392  22B7  2AB4               	goto	clrloop0	;have we reached the end yet?
  2393  22B8  3400               	retlw	0	;all done for this memory range, return
  2394                           
  2395                           	psect	inittext
  2396  22AD                     init_ram:	
  2397  22AD  00FE               	movwf	126
  2398  22AE                     initloop:	
  2399  22AE  0012               	moviw fsr0++
  2400  22AF  001E               	movwi fsr1++
  2401  22B0  0BFE               	decfsz	126,f
  2402  22B1  2AAE               	goto	initloop
  2403  22B2  3400               	retlw	0
  2404                           
  2405                           	psect	cstackCOMMON
  2406  0071                     __pcstackCOMMON:	
  2407  0071                     ?_CC2500_WriteByte:	
  2408  0071                     ?_CC2500_WriteCommand:	
  2409                           ; 0 bytes @ 0x0
  2410                           
  2411  0071                     ?_CC2500_ReadStatus:	
  2412                           ; 0 bytes @ 0x0
  2413                           
  2414  0071                     ?_CC2500_ReadByte:	
  2415                           ; 0 bytes @ 0x0
  2416                           
  2417  0071                     ?_CC2500_PowerRST:	
  2418                           ; 0 bytes @ 0x0
  2419                           
  2420  0071                     ?_CC2500_InitSetREG:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0071                     ?_CC2500_InitPATable:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0071                     ?_CC2500_ClearTXFIFO:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0071                     ?_CC2500_ClearRXFIFO:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0071                     ?_CC2500_FrequencyCabr:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0071                     ?_CC2500_SIDLEMode:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0071                     ?_DlyOff_Initialization:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0071                     ?_DlyOff_Main:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0071                     ?_setTxData:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0071                     ?_setDimmerLights_Initialization:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0071                     ?_Dimmer_Initialization:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0071                     ?_setLoad_GO:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0071                     ?_setDimmerLights_Main:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0071                     ?_setDimmerLights_ERROR:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0071                     ?_setLoad_Count:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0071                     ?_setLED_Initialization:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0071                     ?_setLED_Main:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0071                     ?_MainT_Initialization:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0071                     ?_Mcu_Initialization:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0071                     ?_Flash_Memory_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0071                     ?_Temp_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0071                     ?_Load_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0071                     ?_PowerFault_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0071                     ?_Switch_Initialization:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0071                     ?_RF_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0071                     ?_getLoad_AD:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0071                     ?_getTemp_AD:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0071                     ?_getPowerFault_AD:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0071                     ?_MainT:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0071                     ?_MainT_Clock:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0071                     ?_Flash_Memory_Main:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0071                     ?_Temp_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0071                     ?_Load_Main:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0071                     ?_PowerFault_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0071                     ?_Switch_Main:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0071                     ?_RF_Main:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0071                     ?_setTemp_Enable:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0071                     ?_setLoad_Enable:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0071                     ?_setSw_Enable:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0071                     ?_IO_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0071                     ?_TMR0_Set:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0071                     ?_ADC_Set:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0071                     ?_INT_Set:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0071                     ?_IOC_Set:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0071                     ?_IOC_ISR:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0071                     ??_IOC_ISR:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0071                     ?_TMR0_ISR:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0071                     ?_INT_ISR:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0071                     ?_Flash_Memory_Write:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0071                     ?_Flash_Memory_Modify:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0071                     ?_setLoad_AH_AL_Restore:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0071                     ?_setLoad_Exceptions:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0071                     ?_setTemp_Initialization:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0071                     ?_setTemp_Main:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0071                     ?_setOverTemp_Exceptions:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0071                     ?_setPowerFault_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0071                     ?_setPowerFault_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0071                     ?_setPowerFault_Exceptions:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0071                     ?_setRF_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0071                     ?_setRF_Main:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0071                     ?_getRxData:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0071                     ?_RF_RxDisable:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0071                     ?_setLog_Code:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0071                     ?_setControl_Lights_Table:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0071                     ?_setRFSW_Control:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0071                     ?_setRFSW_AdjControl:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0071                     ?_setRF_DimmerValue:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0071                     ?_setSw_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0071                     ?_setSw_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0071                     ?_Sw_DimmerOnFunc:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0071                     ?_Sw_DimmerAdjFunc:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0071                     ?_Sw_DimmerOffFunc:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0071                     ?_Buzzer_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0071                     ?_Buzzer_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0071                     ?_CC2500_TxData:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0071                     ?_CC2500_RxData:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0071                     ?_CC2500_PowerOnInitial:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0071                     ?_DelayOffPointSelect:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0071                     ?_DelayOff_Initialization:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0071                     ?_DelayOff_Main:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0071                     ?_DimmerLightsPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0071                     ?_DimmerLights_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0071                     ?_DimmerLights_Close:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0071                     ?_DimmerLights_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0071                     ?_DimmerLights_Exceptions:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0071                     ?_setDimmerLights_AdjRF:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0071                     ?_LedPointSelect:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0071                     ?_LED_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0071                     ?_LED_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0071                     ?_main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0071                     ?_ISR:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0071                     ?_setDimmerReClock:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0071                     ??_setDimmerReClock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0071                     ?_setINT_GO:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0071                     ?_Flash_Memory_Unlock:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0071                     ?_Flash_Memory_Erasing:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0071                     ?_RfPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0071                     ?_RfSWPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0071                     ?_TouchPower:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0071                     ?_SwPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0071                     ?i1_setLoad_StatusOff:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0071                     ?i1_RfPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0071                     ??i1_RfPointSelect:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0071                     ?_DelayTimejudge:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0071                     ?_getDimmerLights_StatusFlag:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0071                     ?_getPercentValue:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0071                     ?_Flash_Memory_Read:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0071                     ?_getTemp_Safe:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0071                     ?_getPF_Safe:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0071                     ?_setPercentValue:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0071                     ?_getLoad_Safe:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0071                     setRF_Initialization@rf:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0071                     i1setLoad_StatusOff@command:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x0
  2761  0071                     	ds	1
  2762  0072                     ??i1_setLoad_StatusOff:	
  2763  0072                     i1setLoad_StatusOff@lights:	
  2764                           ; 0 bytes @ 0x1
  2765                           
  2766  0072                     i1RfPointSelect@rf:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769                           
  2770                           ; 1 bytes @ 0x1
  2771  0072                     	ds	1
  2772  0073                     ??_TMR0_ISR:	
  2773  0073                     ?_setRF_ReceiveGO:	
  2774                           ; 0 bytes @ 0x2
  2775                           
  2776  0073                     setRF_ReceiveGO@command:	
  2777                           ; 0 bytes @ 0x2
  2778                           
  2779                           
  2780                           ; 1 bytes @ 0x2
  2781  0073                     	ds	1
  2782  0074                     ??_setRF_ReceiveGO:	
  2783  0074                     setRF_ReceiveGO@rf:	
  2784                           ; 0 bytes @ 0x3
  2785                           
  2786                           
  2787                           ; 1 bytes @ 0x3
  2788  0074                     	ds	1
  2789  0075                     ??_INT_ISR:	
  2790                           
  2791                           ; 0 bytes @ 0x4
  2792  0075                     	ds	2
  2793  0077                     ??_ISR:	
  2794                           
  2795                           ; 0 bytes @ 0x6
  2796  0077                     	ds	1
  2797                           
  2798                           	psect	cstackBANK0
  2799  0020                     __pcstackBANK0:	
  2800  0020                     ??_CC2500_WriteByte:	
  2801  0020                     ??_CC2500_ReadByte:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ?_DelayTime_1us:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_DelayTimejudge:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_Dimmer_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_getDimmerLights_StatusFlag:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_setLoad_GO:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ?_setLoad_StatusOff:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_setLoad_Count:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ?_setLoad_StatusOn:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_MainT_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_MainT_Clock:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_setTemp_Enable:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_setLoad_Enable:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_IO_Set:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_TMR0_Set:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_ADC_Set:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_INT_Set:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_IOC_Set:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_Flash_Memory_Read:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_Flash_Memory_Write:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_setLoad_AH_AL_Restore:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_getTemp_Safe:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_getPF_Safe:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_setTemp_Initialization:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_setPowerFault_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setRF_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_Buzzer_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Buzzer_Main:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_DelayOffPointSelect:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_DimmerLightsPointSelect:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_LedPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_setINT_GO:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_Flash_Memory_Unlock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Erasing:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_getLoad_Safe:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_RfPointSelect:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_RfSWPointSelect:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_TouchPower:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_SwPointSelect:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ?_getAD:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ?___wmul:	
  2922                           ; 2 bytes @ 0x0
  2923                           
  2924  0020                     ?___lwdiv:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     ?___ftpack:	
  2928                           ; 2 bytes @ 0x0
  2929                           
  2930  0020                     setINT_GO@command:	
  2931                           ; 3 bytes @ 0x0
  2932                           
  2933  0020                     getAD@adcon1:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0020                     setLoad_Enable@command:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0020                     setLoad_GO@command:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0020                     setLoad_StatusOn@command:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0020                     setLoad_StatusOff@command:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0020                     setTemp_Enable@command:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     DelayTime_1us@count:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     ___wmul@multiplier:	
  2955                           ; 2 bytes @ 0x0
  2956                           
  2957  0020                     ___lwdiv@divisor:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0020                     ___ftpack@arg:	
  2961                           ; 2 bytes @ 0x0
  2962                           
  2963                           
  2964                           ; 3 bytes @ 0x0
  2965  0020                     	ds	1
  2966  0021                     ??_setLoad_StatusOff:	
  2967  0021                     ??_setLoad_StatusOn:	
  2968                           ; 0 bytes @ 0x1
  2969                           
  2970  0021                     ??_Mcu_Initialization:	
  2971                           ; 0 bytes @ 0x1
  2972                           
  2973  0021                     ??_Temp_Initialization:	
  2974                           ; 0 bytes @ 0x1
  2975                           
  2976  0021                     ??_PowerFault_Initialization:	
  2977                           ; 0 bytes @ 0x1
  2978                           
  2979  0021                     ??_RF_Initialization:	
  2980                           ; 0 bytes @ 0x1
  2981                           
  2982  0021                     CC2500_WriteByte@loop_a:	
  2983                           ; 0 bytes @ 0x1
  2984                           
  2985  0021                     CC2500_ReadByte@loop_b:	
  2986                           ; 1 bytes @ 0x1
  2987                           
  2988  0021                     DelayOffPointSelect@sw:	
  2989                           ; 1 bytes @ 0x1
  2990                           
  2991  0021                     DelayTimejudge@i:	
  2992                           ; 1 bytes @ 0x1
  2993                           
  2994  0021                     DimmerLightsPointSelect@lights:	
  2995                           ; 1 bytes @ 0x1
  2996                           
  2997  0021                     getDimmerLights_StatusFlag@Status:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0021                     LedPointSelect@led:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003  0021                     MainT_Clock@i:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0021                     Flash_Memory_Read@i:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0021                     Flash_Memory_Write@i:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0021                     setLoad_Count@command:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0021                     setLoad_StatusOn@lights:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0021                     setLoad_StatusOff@lights:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021  0021                     setLoad_AH_AL_Restore@i:	
  3022                           ; 1 bytes @ 0x1
  3023                           
  3024  0021                     RfPointSelect@rf:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0021                     RfSWPointSelect@sw:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0021                     SwPointSelect@sw:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033                           
  3034                           ; 1 bytes @ 0x1
  3035  0021                     	ds	1
  3036  0022                     ??_CC2500_WriteCommand:	
  3037  0022                     ??_CC2500_ReadStatus:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0022                     ?_setRF_RxStatus:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0022                     ??_DelayTime_1us:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0022                     ?_CC2500_WriteREG:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0022                     ??_DlyOff_Initialization:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0022                     ?_setSw_Status:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0022                     ?_setRFSW_Status:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0022                     ?_setDimmerLights_Trigger:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0022                     ?_setDimmerLights_Switch:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0022                     ??_setTxData:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0022                     ??_setDimmerLights_Initialization:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0022                     ?_setDimmerLights_TriggerERROR:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0022                     ?_setLED:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0022                     ??_setLED_Main:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0022                     ??_Load_Initialization:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0022                     ??_setSw_Enable:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0022                     ?_setRF_Enable:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0022                     ?_setDimmerLights_AdjGo:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0022                     ?_setDimmerLights_TriggerAdj:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0022                     ?_setDimmerLights_Clear:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0022                     ?_setRF_Learn:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0022                     CC2500_WriteREG@value:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0022                     DlyOff_Initialization@sw:	
  3104                           ; 1 bytes @ 0x2
  3105                           
  3106  0022                     DelayTimejudge@value:	
  3107                           ; 1 bytes @ 0x2
  3108                           
  3109  0022                     _getDimmerLights_StatusFlag$1852:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0022                     setDimmerLights_TriggerERROR@command:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0022                     setDimmerLights_Switch@command:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0022                     setDimmerLights_AdjGo@command:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0022                     setDimmerLights_Trigger@command:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0022                     setDimmerLights_TriggerAdj@command:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0022                     setDimmerLights_Clear@command:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0022                     setLED@command:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0022                     Flash_Memory_Read@address:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0022                     setRF_Learn@command:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0022                     setRF_RxStatus@command:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0022                     setRF_Enable@command:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0022                     setRFSW_Status@command:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     setSw_Enable@command:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     setSw_Status@command:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     DelayTime_1us@i:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     ___wmul@multiplicand:	
  3158                           ; 2 bytes @ 0x2
  3159                           
  3160  0022                     ___lwdiv@dividend:	
  3161                           ; 2 bytes @ 0x2
  3162                           
  3163                           
  3164                           ; 2 bytes @ 0x2
  3165  0022                     	ds	1
  3166  0023                     ??_setRF_RxStatus:	
  3167  0023                     ??_CC2500_WriteREG:	
  3168                           ; 0 bytes @ 0x3
  3169                           
  3170  0023                     ??_setSw_Status:	
  3171                           ; 0 bytes @ 0x3
  3172                           
  3173  0023                     ??_setRFSW_Status:	
  3174                           ; 0 bytes @ 0x3
  3175                           
  3176  0023                     ??_setDimmerLights_Trigger:	
  3177                           ; 0 bytes @ 0x3
  3178                           
  3179  0023                     ??_setDimmerLights_Switch:	
  3180                           ; 0 bytes @ 0x3
  3181                           
  3182  0023                     ??_setDimmerLights_TriggerERROR:	
  3183                           ; 0 bytes @ 0x3
  3184                           
  3185  0023                     ??_setLED:	
  3186                           ; 0 bytes @ 0x3
  3187                           
  3188  0023                     ??_setRF_Enable:	
  3189                           ; 0 bytes @ 0x3
  3190                           
  3191  0023                     ??_DelayOff_Initialization:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0023                     ?_setDelayOff_GO:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0023                     ??_DimmerLights_Close:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0023                     ??_setDimmerLights_AdjGo:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0023                     ??_setDimmerLights_TriggerAdj:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     ??_setDimmerLights_Clear:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     ??_getAD:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0023                     ??_setRF_Learn:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0023                     CC2500_WriteCommand@command:	
  3216                           ; 0 bytes @ 0x3
  3217                           
  3218  0023                     CC2500_ReadStatus@status_addr:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0023                     setDelayOff_GO@command:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     setDimmerLights_Initialization@lights:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     setDimmerLights_TriggerERROR@lights:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     setDimmerLights_Switch@lights:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     setDimmerLights_AdjGo@lights:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     setDimmerLights_Trigger@lights:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     setDimmerLights_TriggerAdj@lights:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0023                     setDimmerLights_Clear@lights:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0023                     setLED@led:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0023                     getAD@adcon0:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0023                     Flash_Memory_Read@ret:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0023                     setRF_Learn@rf:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0023                     setRF_RxStatus@rf:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0023                     setTxData@rf:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0023                     setRF_Enable@rf:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0023                     setRFSW_Status@sw:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269  0023                     setSw_Status@sw:	
  3270                           ; 1 bytes @ 0x3
  3271                           
  3272  0023                     ___ftpack@exp:	
  3273                           ; 1 bytes @ 0x3
  3274                           
  3275                           
  3276                           ; 1 bytes @ 0x3
  3277  0023                     	ds	1
  3278  0024                     ??_CC2500_ClearTXFIFO:	
  3279  0024                     ??_CC2500_ClearRXFIFO:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??_CC2500_SIDLEMode:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     ?_setDimmerLights:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     ??_setDimmerLights_ERROR:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0024                     ??_setLED_Initialization:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0024                     ??_getLoad_AD:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0024                     ??_getTemp_AD:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0024                     ??_getPowerFault_AD:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0024                     ??_Flash_Memory_Modify:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0024                     ??_RF_RxDisable:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0024                     ??_setSw_Initialization:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0024                     ??_Sw_DimmerAdjFunc:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0024                     ??_CC2500_TxData:	
  3316                           ; 0 bytes @ 0x4
  3317                           
  3318  0024                     ??_CC2500_RxData:	
  3319                           ; 0 bytes @ 0x4
  3320                           
  3321  0024                     ??_DimmerLights_Initialization:	
  3322                           ; 0 bytes @ 0x4
  3323                           
  3324  0024                     ??___wmul:	
  3325                           ; 0 bytes @ 0x4
  3326                           
  3327  0024                     ??___lwdiv:	
  3328                           ; 0 bytes @ 0x4
  3329                           
  3330  0024                     CC2500_WriteREG@w_addr:	
  3331                           ; 0 bytes @ 0x4
  3332                           
  3333  0024                     setDelayOff_GO@value:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0024                     setDimmerLights@status:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0024                     setLED_Initialization@led:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0024                     setLED_Main@led:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0024                     RF_RxDisable@rf:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0024                     setSw_Initialization@sw:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0024                     Sw_DimmerAdjFunc@Idle:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0024                     ___ftpack@sign:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0024                     DelayTime_1us@j:	
  3358                           ; 1 bytes @ 0x4
  3359                           
  3360  0024                     ___wmul@product:	
  3361                           ; 2 bytes @ 0x4
  3362                           
  3363                           
  3364                           ; 2 bytes @ 0x4
  3365  0024                     	ds	1
  3366  0025                     ??_CC2500_InitSetREG:	
  3367  0025                     ??_CC2500_InitPATable:	
  3368                           ; 0 bytes @ 0x5
  3369                           
  3370  0025                     ??_setDimmerLights:	
  3371                           ; 0 bytes @ 0x5
  3372                           
  3373  0025                     ??_Switch_Initialization:	
  3374                           ; 0 bytes @ 0x5
  3375                           
  3376  0025                     ??___ftpack:	
  3377                           ; 0 bytes @ 0x5
  3378                           
  3379  0025                     ??_setDelayOff_GO:	
  3380                           ; 0 bytes @ 0x5
  3381                           
  3382  0025                     ??_LED_Initialization:	
  3383                           ; 0 bytes @ 0x5
  3384                           
  3385  0025                     ??_LED_Main:	
  3386                           ; 0 bytes @ 0x5
  3387                           
  3388  0025                     CC2500_TxData@loop_e:	
  3389                           ; 0 bytes @ 0x5
  3390                           
  3391  0025                     CC2500_RxData@loop_f:	
  3392                           ; 1 bytes @ 0x5
  3393                           
  3394  0025                     setDimmerLights_ERROR@lights:	
  3395                           ; 1 bytes @ 0x5
  3396                           
  3397  0025                     Sw_DimmerAdjFunc@sw:	
  3398                           ; 1 bytes @ 0x5
  3399                           
  3400  0025                     ___lwdiv@quotient:	
  3401                           ; 1 bytes @ 0x5
  3402                           
  3403                           
  3404                           ; 2 bytes @ 0x5
  3405  0025                     	ds	1
  3406  0026                     ??_CC2500_PowerRST:	
  3407  0026                     ??_CC2500_FrequencyCabr:	
  3408                           ; 0 bytes @ 0x6
  3409                           
  3410  0026                     ?_setBuz:	
  3411                           ; 0 bytes @ 0x6
  3412                           
  3413  0026                     CC2500_InitSetREG@temp1:	
  3414                           ; 0 bytes @ 0x6
  3415                           
  3416  0026                     CC2500_InitPATable@temp:	
  3417                           ; 1 bytes @ 0x6
  3418                           
  3419  0026                     setDimmerLights@lights:	
  3420                           ; 1 bytes @ 0x6
  3421                           
  3422  0026                     Flash_Memory_Modify@i:	
  3423                           ; 1 bytes @ 0x6
  3424                           
  3425  0026                     setBuz@time:	
  3426                           ; 1 bytes @ 0x6
  3427                           
  3428                           
  3429                           ; 2 bytes @ 0x6
  3430  0026                     	ds	1
  3431  0027                     ??_Flash_Memory_Main:	
  3432  0027                     CC2500_InitSetREG@temp2:	
  3433                           ; 0 bytes @ 0x7
  3434                           
  3435  0027                     CC2500_InitPATable@loop_d:	
  3436                           ; 1 bytes @ 0x7
  3437                           
  3438  0027                     setDelayOff_GO@sw:	
  3439                           ; 1 bytes @ 0x7
  3440                           
  3441  0027                     ___lwdiv@counter:	
  3442                           ; 1 bytes @ 0x7
  3443                           
  3444                           
  3445                           ; 1 bytes @ 0x7
  3446  0027                     	ds	1
  3447  0028                     ??_setBuz:	
  3448  0028                     ?___awtoft:	
  3449                           ; 0 bytes @ 0x8
  3450                           
  3451  0028                     CC2500_InitSetREG@loop_c:	
  3452                           ; 3 bytes @ 0x8
  3453                           
  3454  0028                     getTemp_AD@channel:	
  3455                           ; 1 bytes @ 0x8
  3456                           
  3457  0028                     getPowerFault_AD@channel:	
  3458                           ; 1 bytes @ 0x8
  3459                           
  3460  0028                     ___awtoft@c:	
  3461                           ; 1 bytes @ 0x8
  3462                           
  3463                           
  3464                           ; 2 bytes @ 0x8
  3465  0028                     	ds	1
  3466  0029                     ??_CC2500_PowerOnInitial:	
  3467  0029                     setBuz@count:	
  3468                           ; 0 bytes @ 0x9
  3469                           
  3470  0029                     getLoad_AD@channel:	
  3471                           ; 1 bytes @ 0x9
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x9
  3475  0029                     	ds	1
  3476  002A                     ??_MainT:	
  3477  002A                     ??_setLog_Code:	
  3478                           ; 0 bytes @ 0xA
  3479                           
  3480  002A                     ??_DimmerLights_Exceptions:	
  3481                           ; 0 bytes @ 0xA
  3482                           
  3483  002A                     DimmerLights_Exceptions@status:	
  3484                           ; 0 bytes @ 0xA
  3485                           
  3486  002A                     getLoad_AD@j:	
  3487                           ; 1 bytes @ 0xA
  3488                           
  3489                           
  3490                           ; 1 bytes @ 0xA
  3491  002A                     	ds	1
  3492  002B                     ??_setLoad_Exceptions:	
  3493  002B                     ??_setOverTemp_Exceptions:	
  3494                           ; 0 bytes @ 0xB
  3495                           
  3496  002B                     ??_setPowerFault_Exceptions:	
  3497                           ; 0 bytes @ 0xB
  3498                           
  3499  002B                     ??___awtoft:	
  3500                           ; 0 bytes @ 0xB
  3501                           
  3502  002B                     getLoad_AD@i:	
  3503                           ; 0 bytes @ 0xB
  3504                           
  3505  002B                     setLog_Code@rf:	
  3506                           ; 1 bytes @ 0xB
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0xB
  3510  002B                     	ds	1
  3511  002C                     setLoad_Exceptions@command:	
  3512  002C                     setOverTemp_Exceptions@command:	
  3513                           ; 1 bytes @ 0xC
  3514                           
  3515  002C                     setPowerFault_Exceptions@command:	
  3516                           ; 1 bytes @ 0xC
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0xC
  3520  002C                     	ds	1
  3521  002D                     ??_Load_Main:	
  3522  002D                     ??_setTemp_Main:	
  3523                           ; 0 bytes @ 0xD
  3524                           
  3525  002D                     ??_setPowerFault_Main:	
  3526                           ; 0 bytes @ 0xD
  3527                           
  3528  002D                     ___awtoft@sign:	
  3529                           ; 0 bytes @ 0xD
  3530                           
  3531                           
  3532                           ; 1 bytes @ 0xD
  3533  002D                     	ds	1
  3534  002E                     ?___ftdiv:	
  3535  002E                     ?___ftmul:	
  3536                           ; 3 bytes @ 0xE
  3537                           
  3538  002E                     ___ftdiv@f2:	
  3539                           ; 3 bytes @ 0xE
  3540                           
  3541  002E                     ___ftmul@f1:	
  3542                           ; 3 bytes @ 0xE
  3543                           
  3544                           
  3545                           ; 3 bytes @ 0xE
  3546  002E                     	ds	1
  3547  002F                     ??_PowerFault_Main:	
  3548                           
  3549                           ; 0 bytes @ 0xF
  3550  002F                     	ds	1
  3551  0030                     ??_Temp_Main:	
  3552                           
  3553                           ; 0 bytes @ 0x10
  3554  0030                     	ds	1
  3555  0031                     Load_Main@i:	
  3556  0031                     ___ftdiv@f1:	
  3557                           ; 1 bytes @ 0x11
  3558                           
  3559  0031                     ___ftmul@f2:	
  3560                           ; 3 bytes @ 0x11
  3561                           
  3562                           
  3563                           ; 3 bytes @ 0x11
  3564  0031                     	ds	3
  3565  0034                     ??___ftdiv:	
  3566  0034                     ??___ftmul:	
  3567                           ; 0 bytes @ 0x14
  3568                           
  3569                           
  3570                           ; 0 bytes @ 0x14
  3571  0034                     	ds	4
  3572  0038                     ___ftdiv@cntr:	
  3573  0038                     ___ftmul@exp:	
  3574                           ; 1 bytes @ 0x18
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0x18
  3578  0038                     	ds	1
  3579  0039                     ___ftdiv@f3:	
  3580  0039                     ___ftmul@f3_as_product:	
  3581                           ; 3 bytes @ 0x19
  3582                           
  3583                           
  3584                           ; 3 bytes @ 0x19
  3585  0039                     	ds	3
  3586  003C                     ___ftdiv@exp:	
  3587  003C                     ___ftmul@cntr:	
  3588                           ; 1 bytes @ 0x1C
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x1C
  3592  003C                     	ds	1
  3593  003D                     ___ftdiv@sign:	
  3594  003D                     ___ftmul@sign:	
  3595                           ; 1 bytes @ 0x1D
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x1D
  3599  003D                     	ds	1
  3600  003E                     ?___ftadd:	
  3601  003E                     ___ftadd@f1:	
  3602                           ; 3 bytes @ 0x1E
  3603                           
  3604                           
  3605                           ; 3 bytes @ 0x1E
  3606  003E                     	ds	3
  3607  0041                     ___ftadd@f2:	
  3608                           
  3609                           ; 3 bytes @ 0x21
  3610  0041                     	ds	3
  3611  0044                     ??___ftadd:	
  3612                           
  3613                           ; 0 bytes @ 0x24
  3614  0044                     	ds	4
  3615  0048                     ___ftadd@sign:	
  3616                           
  3617                           ; 1 bytes @ 0x28
  3618  0048                     	ds	1
  3619  0049                     ___ftadd@exp2:	
  3620                           
  3621                           ; 1 bytes @ 0x29
  3622  0049                     	ds	1
  3623  004A                     ___ftadd@exp1:	
  3624                           
  3625                           ; 1 bytes @ 0x2A
  3626  004A                     	ds	1
  3627  004B                     ?___fttol:	
  3628  004B                     ___fttol@f1:	
  3629                           ; 4 bytes @ 0x2B
  3630                           
  3631                           
  3632                           ; 3 bytes @ 0x2B
  3633  004B                     	ds	4
  3634  004F                     ??___fttol:	
  3635                           
  3636                           ; 0 bytes @ 0x2F
  3637  004F                     	ds	4
  3638  0053                     ___fttol@sign1:	
  3639                           
  3640                           ; 1 bytes @ 0x33
  3641  0053                     	ds	1
  3642  0054                     ___fttol@lval:	
  3643                           
  3644                           ; 4 bytes @ 0x34
  3645  0054                     	ds	4
  3646  0058                     ___fttol@exp1:	
  3647                           
  3648                           ; 1 bytes @ 0x38
  3649  0058                     	ds	1
  3650  0059                     ??_getPercentValue:	
  3651  0059                     ??_setPercentValue:	
  3652                           ; 0 bytes @ 0x39
  3653                           
  3654  0059                     setPercentValue@value:	
  3655                           ; 0 bytes @ 0x39
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x39
  3659  0059                     	ds	1
  3660  005A                     setPercentValue@i:	
  3661                           
  3662                           ; 3 bytes @ 0x3A
  3663  005A                     	ds	1
  3664  005B                     getPercentValue@value:	
  3665                           
  3666                           ; 1 bytes @ 0x3B
  3667  005B                     	ds	1
  3668  005C                     getPercentValue@i:	
  3669                           
  3670                           ; 3 bytes @ 0x3C
  3671  005C                     	ds	1
  3672  005D                     ?_setRF_DimmerLights:	
  3673  005D                     ??_Flash_Memory_Initialization:	
  3674                           ; 0 bytes @ 0x3D
  3675                           
  3676  005D                     setRF_DimmerLights@on:	
  3677                           ; 0 bytes @ 0x3D
  3678                           
  3679                           
  3680                           ; 1 bytes @ 0x3D
  3681  005D                     	ds	1
  3682  005E                     ??_setRF_DimmerLights:	
  3683  005E                     Flash_Memory_Initialization@i:	
  3684                           ; 0 bytes @ 0x3E
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0x3E
  3688  005E                     	ds	1
  3689  005F                     ??_setDimmerLights_AdjRF:	
  3690                           
  3691                           ; 0 bytes @ 0x3F
  3692  005F                     	ds	1
  3693  0060                     setDimmerLights_AdjRF@lights:	
  3694  0060                     setRF_DimmerLights@status:	
  3695                           ; 1 bytes @ 0x40
  3696                           
  3697                           
  3698                           ; 1 bytes @ 0x40
  3699  0060                     	ds	1
  3700  0061                     ??_setRF_DimmerValue:	
  3701  0061                     setRF_DimmerLights@lights:	
  3702                           ; 0 bytes @ 0x41
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x41
  3706  0061                     	ds	1
  3707  0062                     ??_DlyOff_Main:	
  3708  0062                     ?_setDimmerLights_Adj:	
  3709                           ; 0 bytes @ 0x42
  3710                           
  3711  0062                     ??_setRFSW_Control:	
  3712                           ; 0 bytes @ 0x42
  3713                           
  3714  0062                     ??_Sw_DimmerOnFunc:	
  3715                           ; 0 bytes @ 0x42
  3716                           
  3717  0062                     ??_Sw_DimmerOffFunc:	
  3718                           ; 0 bytes @ 0x42
  3719                           
  3720  0062                     setDimmerLights_Adj@status:	
  3721                           ; 0 bytes @ 0x42
  3722                           
  3723  0062                     Sw_DimmerOnFunc@Idle:	
  3724                           ; 1 bytes @ 0x42
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x42
  3728  0062                     	ds	1
  3729  0063                     ??_setDimmerLights_Adj:	
  3730  0063                     setRFSW_Control@sw:	
  3731                           ; 0 bytes @ 0x43
  3732                           
  3733  0063                     setRF_DimmerValue@lights:	
  3734                           ; 1 bytes @ 0x43
  3735                           
  3736  0063                     Sw_DimmerOnFunc@sw:	
  3737                           ; 1 bytes @ 0x43
  3738                           
  3739                           
  3740                           ; 1 bytes @ 0x43
  3741  0063                     	ds	1
  3742  0064                     ??_setRFSW_AdjControl:	
  3743  0064                     DlyOff_Main@sw:	
  3744                           ; 0 bytes @ 0x44
  3745                           
  3746  0064                     setDimmerLights_Adj@lights:	
  3747                           ; 1 bytes @ 0x44
  3748                           
  3749  0064                     Sw_DimmerOffFunc@sw:	
  3750                           ; 1 bytes @ 0x44
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x44
  3754  0064                     	ds	1
  3755  0065                     ??_setDimmerLights_Main:	
  3756  0065                     ??_setSw_Main:	
  3757                           ; 0 bytes @ 0x45
  3758                           
  3759  0065                     ??_DelayOff_Main:	
  3760                           ; 0 bytes @ 0x45
  3761                           
  3762  0065                     setDimmerLights_Main@clear:	
  3763                           ; 0 bytes @ 0x45
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x45
  3767  0065                     	ds	1
  3768  0066                     setDimmerLights_Main@lights:	
  3769  0066                     setRFSW_AdjControl@sw:	
  3770                           ; 1 bytes @ 0x46
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0x46
  3774  0066                     	ds	1
  3775  0067                     ??_setControl_Lights_Table:	
  3776  0067                     ??_DimmerLights_Main:	
  3777                           ; 0 bytes @ 0x47
  3778                           
  3779  0067                     setControl_Lights_Table@rf:	
  3780                           ; 0 bytes @ 0x47
  3781                           
  3782  0067                     _setSw_Main$4797:	
  3783                           ; 1 bytes @ 0x47
  3784                           
  3785                           
  3786                           ; 1 bytes @ 0x47
  3787  0067                     	ds	1
  3788  0068                     ??_getRxData:	
  3789  0068                     getRxData@rf:	
  3790                           ; 0 bytes @ 0x48
  3791                           
  3792  0068                     _setSw_Main$4798:	
  3793                           ; 1 bytes @ 0x48
  3794                           
  3795                           
  3796                           ; 1 bytes @ 0x48
  3797  0068                     	ds	1
  3798  0069                     ??_setRF_Main:	
  3799  0069                     setSw_Main@sw:	
  3800                           ; 0 bytes @ 0x49
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0x49
  3804  0069                     	ds	1
  3805  006A                     ??_Switch_Main:	
  3806  006A                     setRF_Main@rf:	
  3807                           ; 0 bytes @ 0x4A
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0x4A
  3811  006A                     	ds	1
  3812  006B                     _setRF_Main$4441:	
  3813                           
  3814                           ; 1 bytes @ 0x4B
  3815  006B                     	ds	1
  3816  006C                     ??_RF_Main:	
  3817  006C                     ??_main:	
  3818                           ; 0 bytes @ 0x4C
  3819                           
  3820                           
  3821                           	psect	maintext
  3822  1198                     __pmaintext:	
  3823                           ; 0 bytes @ 0x4C
  3824 ;;
  3825 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3826 ;;
  3827 ;; *************** function _main *****************
  3828 ;; Defined at:
  3829 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;		None
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;		None
  3834 ;; Return value:  Size  Location     Type
  3835 ;;		None               void
  3836 ;; Registers used:
  3837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 17F/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;Total ram usage:        0 bytes
  3848 ;; Hardware stack levels required when called:   14
  3849 ;; This function calls:
  3850 ;;		_Buzzer_Initialization
  3851 ;;		_Buzzer_Main
  3852 ;;		_CC2500_PowerOnInitial
  3853 ;;		_DelayOff_Initialization
  3854 ;;		_DelayOff_Main
  3855 ;;		_DimmerLights_Initialization
  3856 ;;		_DimmerLights_Main
  3857 ;;		_Flash_Memory_Initialization
  3858 ;;		_Flash_Memory_Main
  3859 ;;		_LED_Initialization
  3860 ;;		_LED_Main
  3861 ;;		_Load_Initialization
  3862 ;;		_Load_Main
  3863 ;;		_MainT
  3864 ;;		_MainT_Clock
  3865 ;;		_MainT_Initialization
  3866 ;;		_Mcu_Initialization
  3867 ;;		_PowerFault_Initialization
  3868 ;;		_PowerFault_Main
  3869 ;;		_RF_Initialization
  3870 ;;		_RF_Main
  3871 ;;		_Switch_Initialization
  3872 ;;		_Switch_Main
  3873 ;;		_Temp_Initialization
  3874 ;;		_Temp_Main
  3875 ;;		_getLoad_AD
  3876 ;;		_getPowerFault_AD
  3877 ;;		_getTemp_AD
  3878 ;; This function is called by:
  3879 ;;		Startup code after reset
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _main
  3885  1198                     _main:	
  3886                           
  3887                           ;main.c: 9: MainT_Initialization();
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3891  1198  31A4  24F2  3191   	fcall	_MainT_Initialization
  3892                           
  3893                           ;main.c: 10: Mcu_Initialization();
  3894  119B  31A5  259E  3191   	fcall	_Mcu_Initialization
  3895                           
  3896                           ;main.c: 11: Flash_Memory_Initialization();
  3897  119E  318B  237C  3191   	fcall	_Flash_Memory_Initialization
  3898                           
  3899                           ;main.c: 12: LED_Initialization();
  3900  11A1  31A3  23A1  3191   	fcall	_LED_Initialization
  3901                           
  3902                           ;main.c: 13: Buzzer_Initialization();
  3903  11A4  31A3  2319  3191   	fcall	_Buzzer_Initialization
  3904                           
  3905                           ;main.c: 15: ;;
  3906                           ;main.c: 16: Temp_Initialization();
  3907  11A7  31A2  228D  3191   	fcall	_Temp_Initialization
  3908                           
  3909                           ;main.c: 17: Load_Initialization();
  3910  11AA  31A3  23B9  3191   	fcall	_Load_Initialization
  3911                           
  3912                           ;main.c: 18: PowerFault_Initialization();
  3913  11AD  31A2  2287  3191   	fcall	_PowerFault_Initialization
  3914                           
  3915                           ;main.c: 19: DelayOff_Initialization();
  3916  11B0  31A2  22D5  3191   	fcall	_DelayOff_Initialization
  3917                           
  3918                           ;main.c: 21: DimmerLights_Initialization();
  3919  11B3  31A5  251B  3191   	fcall	_DimmerLights_Initialization
  3920                           
  3921                           ;main.c: 22: ;;
  3922                           ;main.c: 23: ;;
  3923                           ;main.c: 24: ;;
  3924                           ;main.c: 26: Switch_Initialization();
  3925  11B6  31A3  23E0  3191   	fcall	_Switch_Initialization
  3926                           
  3927                           ;main.c: 27: RF_Initialization();
  3928  11B9  31A2  229F  3191   	fcall	_RF_Initialization
  3929                           
  3930                           ;main.c: 28: CC2500_PowerOnInitial();
  3931  11BC  31A5  2506  3191   	fcall	_CC2500_PowerOnInitial
  3932  11BF                     l10280:	
  3933                           ;main.c: 30: while(1)
  3934                           
  3935                           
  3936                           ;main.c: 31: {
  3937                           ;main.c: 32: if(TMain->PowerON)
  3938  11BF  0021               	movlb	1	; select bank1
  3939  11C0  086C               	movf	_TMain^(0+128),w
  3940  11C1  0086               	movwf	6
  3941  11C2  3001               	movlw	1	; select bank2/3
  3942  11C3  0087               	movwf	7
  3943  11C4  1C01               	btfss	1,0
  3944  11C5  29D5               	goto	l10284
  3945                           
  3946                           ;main.c: 33: {
  3947                           ;main.c: 35: ;;
  3948                           ;main.c: 39: getLoad_AD(0x05);
  3949  11C6  3005               	movlw	5
  3950  11C7  3196  26C2  3191   	fcall	_getLoad_AD
  3951                           
  3952                           ;main.c: 43: getTemp_AD(0x09);
  3953  11CA  3009               	movlw	9
  3954  11CB  3190  204D  3191   	fcall	_getTemp_AD
  3955                           
  3956                           ;main.c: 47: getPowerFault_AD(0x11);
  3957  11CE  3011               	movlw	17
  3958  11CF  319A  22F0  3191   	fcall	_getPowerFault_AD
  3959                           
  3960                           ;main.c: 59: Buzzer_Main();
  3961  11D2  3197  2758  3191   	fcall	_Buzzer_Main
  3962  11D5                     l10284:	
  3963                           
  3964                           ;main.c: 61: }
  3965                           ;main.c: 63: if(TMain->T0_Timerout)
  3966  11D5  0021               	movlb	1	; select bank1
  3967  11D6  086C               	movf	_TMain^(0+128),w
  3968  11D7  0086               	movwf	6
  3969  11D8  3001               	movlw	1	; select bank2/3
  3970  11D9  0087               	movwf	7
  3971  11DA  1C81               	btfss	1,1
  3972  11DB  29BF               	goto	l10280
  3973                           
  3974                           ;main.c: 64: {
  3975                           ;main.c: 65: TMain->T0_Timerout = 0;
  3976  11DC  086C               	movf	_TMain^(0+128),w
  3977  11DD  0086               	movwf	6
  3978  11DE  3001               	movlw	1	; select bank2/3
  3979  11DF  0087               	movwf	7
  3980  11E0  1081               	bcf	1,1
  3981                           
  3982                           ;main.c: 66: MainT();
  3983  11E1  3192  22FA  3191   	fcall	_MainT
  3984                           
  3985                           ;main.c: 67: MainT_Clock();
  3986  11E4  31A4  24CB  3191   	fcall	_MainT_Clock
  3987                           
  3988                           ;main.c: 68: if(TMain->PowerON)
  3989  11E7  0021               	movlb	1	; select bank1
  3990  11E8  086C               	movf	_TMain^(0+128),w
  3991  11E9  0086               	movwf	6
  3992  11EA  3001               	movlw	1	; select bank2/3
  3993  11EB  0087               	movwf	7
  3994  11EC  1C01               	btfss	1,0
  3995  11ED  29BF               	goto	l10280
  3996                           
  3997                           ;main.c: 69: {
  3998                           ;main.c: 70: Flash_Memory_Main();
  3999  11EE  319C  2480  3191   	fcall	_Flash_Memory_Main
  4000                           
  4001                           ;main.c: 72: LED_Main();
  4002  11F1  31A3  23AD  3191   	fcall	_LED_Main
  4003                           
  4004                           ;main.c: 74: ;;
  4005                           ;main.c: 75: Temp_Main();
  4006  11F4  31A2  2290  3191   	fcall	_Temp_Main
  4007                           
  4008                           ;main.c: 76: Load_Main();
  4009  11F7  3180  2059  3191   	fcall	_Load_Main
  4010                           
  4011                           ;main.c: 77: PowerFault_Main();
  4012  11FA  31A2  228A  3191   	fcall	_PowerFault_Main
  4013                           
  4014                           ;main.c: 79: ;;
  4015                           ;main.c: 80: DimmerLights_Main();
  4016  11FD  31A3  2345  3191   	fcall	_DimmerLights_Main
  4017                           
  4018                           ;main.c: 81: Switch_Main();
  4019  1200  31A2  22F5  3191   	fcall	_Switch_Main
  4020                           
  4021                           ;main.c: 82: ;;
  4022                           ;main.c: 83: ;;
  4023                           ;main.c: 85: RF_Main();
  4024  1203  31A2  22A3  3191   	fcall	_RF_Main
  4025                           
  4026                           ;main.c: 86: DelayOff_Main();
  4027  1206  31A2  22DD  3191   	fcall	_DelayOff_Main
  4028  1209  29BF               	goto	l10280
  4029  120A                     __end_of_main:	
  4030                           
  4031                           	psect	text1
  4032  104D                     __ptext1:	
  4033 ;; *************** function _getTemp_AD *****************
  4034 ;; Defined at:
  4035 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  channel         1    wreg     unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  channel         1    8[BANK0 ] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;		None               void
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;Total ram usage:        5 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		_getAD
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _getTemp_AD
  4065  104D                     _getTemp_AD:	
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4069                           ;getTemp_AD@channel stored from wreg
  4070  104D  0020               	movlb	0	; select bank0
  4071  104E  00A8               	movwf	getTemp_AD@channel
  4072                           
  4073                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4074  104F  087D               	movf	_Temp,w
  4075  1050  0086               	movwf	6
  4076  1051  3001               	movlw	1	; select bank2/3
  4077  1052  0087               	movwf	7
  4078  1053  1D01               	btfss	1,2
  4079  1054  0008               	return
  4080                           
  4081                           ;OverTemperature_B1.c: 38: {
  4082                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4083  1055  30F0               	movlw	240
  4084  1056  00A4               	movwf	??_getTemp_AD
  4085  1057  0824               	movf	??_getTemp_AD,w
  4086  1058  00A0               	movwf	getAD@adcon1
  4087  1059  0828               	movf	getTemp_AD@channel,w
  4088  105A  31A5  2571  3190   	fcall	_getAD
  4089  105D  087D               	movf	_Temp,w
  4090  105E  3E0A               	addlw	10
  4091  105F  0086               	movwf	6
  4092  1060  3001               	movlw	1	; select bank2/3
  4093  1061  0087               	movwf	7
  4094  1062  0020               	movlb	0	; select bank0
  4095  1063  0820               	movf	?_getAD,w
  4096  1064  3FC0               	movwi [0]fsr1
  4097  1065  0821               	movf	?_getAD+1,w
  4098  1066  3FC1               	movwi [1]fsr1
  4099                           
  4100                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4101  1067  087D               	movf	_Temp,w
  4102  1068  3E0A               	addlw	10
  4103  1069  0086               	movwf	6
  4104  106A  3001               	movlw	1	; select bank2/3
  4105  106B  0087               	movwf	7
  4106  106C  3F40               	moviw [0]fsr1
  4107  106D  00A4               	movwf	??_getTemp_AD
  4108  106E  3F41               	moviw [1]fsr1
  4109  106F  00A5               	movwf	??_getTemp_AD+1
  4110  1070  087D               	movf	_Temp,w
  4111  1071  3E06               	addlw	6
  4112  1072  0086               	movwf	6
  4113  1073  3001               	movlw	1	; select bank2/3
  4114  1074  0087               	movwf	7
  4115  1075  3F40               	moviw [0]fsr1
  4116  1076  00A6               	movwf	??_getTemp_AD+2
  4117  1077  3F41               	moviw [1]fsr1
  4118  1078  00A7               	movwf	??_getTemp_AD+3
  4119  1079  0825               	movf	??_getTemp_AD+1,w
  4120  107A  0227               	subwf	??_getTemp_AD+3,w
  4121  107B  1D03               	skipz
  4122  107C  287F               	goto	u10085
  4123  107D  0824               	movf	??_getTemp_AD,w
  4124  107E  0226               	subwf	??_getTemp_AD+2,w
  4125  107F                     u10085:	
  4126  107F  1803               	skipnc
  4127  1080  2890               	goto	l10028
  4128                           
  4129                           ;OverTemperature_B1.c: 41: {
  4130                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4131  1081  087D               	movf	_Temp,w
  4132  1082  3E0A               	addlw	10
  4133  1083  0086               	movwf	6
  4134  1084  3001               	movlw	1	; select bank2/3
  4135  1085  0087               	movwf	7
  4136  1086  087D               	movf	_Temp,w
  4137  1087  3E06               	addlw	6
  4138  1088  0084               	movwf	4
  4139  1089  3001               	movlw	1	; select bank2/3
  4140  108A  0085               	movwf	5
  4141  108B  3F40               	moviw [0]fsr1
  4142  108C  3F80               	movwi [0]fsr0
  4143  108D  3F41               	moviw [1]fsr1
  4144  108E  3F81               	movwi [1]fsr0
  4145                           
  4146                           ;OverTemperature_B1.c: 43: }
  4147  108F  0008               	return
  4148  1090                     l10028:	
  4149                           
  4150                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4151  1090  087D               	movf	_Temp,w
  4152  1091  3E0A               	addlw	10
  4153  1092  0086               	movwf	6
  4154  1093  3001               	movlw	1	; select bank2/3
  4155  1094  0087               	movwf	7
  4156  1095  3F40               	moviw [0]fsr1
  4157  1096  00A4               	movwf	??_getTemp_AD
  4158  1097  3F41               	moviw [1]fsr1
  4159  1098  00A5               	movwf	??_getTemp_AD+1
  4160  1099  087D               	movf	_Temp,w
  4161  109A  3E08               	addlw	8
  4162  109B  0086               	movwf	6
  4163  109C  3001               	movlw	1	; select bank2/3
  4164  109D  0087               	movwf	7
  4165  109E  3F40               	moviw [0]fsr1
  4166  109F  00A6               	movwf	??_getTemp_AD+2
  4167  10A0  3F41               	moviw [1]fsr1
  4168  10A1  00A7               	movwf	??_getTemp_AD+3
  4169  10A2  0825               	movf	??_getTemp_AD+1,w
  4170  10A3  0227               	subwf	??_getTemp_AD+3,w
  4171  10A4  1D03               	skipz
  4172  10A5  28A8               	goto	u10095
  4173  10A6  0824               	movf	??_getTemp_AD,w
  4174  10A7  0226               	subwf	??_getTemp_AD+2,w
  4175  10A8                     u10095:	
  4176  10A8  1803               	skipnc
  4177  10A9  0008               	return
  4178                           
  4179                           ;OverTemperature_B1.c: 45: {
  4180                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4181  10AA  087D               	movf	_Temp,w
  4182  10AB  3E0A               	addlw	10
  4183  10AC  0086               	movwf	6
  4184  10AD  3001               	movlw	1	; select bank2/3
  4185  10AE  0087               	movwf	7
  4186  10AF  087D               	movf	_Temp,w
  4187  10B0  3E08               	addlw	8
  4188  10B1  0084               	movwf	4
  4189  10B2  3001               	movlw	1	; select bank2/3
  4190  10B3  0085               	movwf	5
  4191  10B4  3F40               	moviw [0]fsr1
  4192  10B5  3F80               	movwi [0]fsr0
  4193  10B6  3F41               	moviw [1]fsr1
  4194  10B7  3F81               	movwi [1]fsr0
  4195  10B8  0008               	return
  4196  10B9                     __end_of_getTemp_AD:	
  4197                           
  4198                           	psect	text2
  4199  1AF0                     __ptext2:	
  4200 ;; *************** function _getPowerFault_AD *****************
  4201 ;; Defined at:
  4202 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  channel         1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  channel         1    8[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;Total ram usage:        5 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    5
  4223 ;; This function calls:
  4224 ;;		_getAD
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _getPowerFault_AD
  4232  1AF0                     _getPowerFault_AD:	
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4236                           ;getPowerFault_AD@channel stored from wreg
  4237  1AF0  0020               	movlb	0	; select bank0
  4238  1AF1  00A8               	movwf	getPowerFault_AD@channel
  4239                           
  4240                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4241  1AF2  087B               	movf	_PF,w
  4242  1AF3  0086               	movwf	6
  4243  1AF4  3001               	movlw	1	; select bank2/3
  4244  1AF5  0087               	movwf	7
  4245  1AF6  1D81               	btfss	1,3
  4246  1AF7  0008               	return
  4247                           
  4248                           ;PowerFault_B1.c: 52: {
  4249                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4250  1AF8  30F0               	movlw	240
  4251  1AF9  00A4               	movwf	??_getPowerFault_AD
  4252  1AFA  0824               	movf	??_getPowerFault_AD,w
  4253  1AFB  00A0               	movwf	getAD@adcon1
  4254  1AFC  0828               	movf	getPowerFault_AD@channel,w
  4255  1AFD  31A5  2571  319A   	fcall	_getAD
  4256  1B00  087B               	movf	_PF,w
  4257  1B01  3E03               	addlw	3
  4258  1B02  0086               	movwf	6
  4259  1B03  3001               	movlw	1	; select bank2/3
  4260  1B04  0087               	movwf	7
  4261  1B05  0020               	movlb	0	; select bank0
  4262  1B06  0820               	movf	?_getAD,w
  4263  1B07  3FC0               	movwi [0]fsr1
  4264  1B08  0821               	movf	?_getAD+1,w
  4265  1B09  3FC1               	movwi [1]fsr1
  4266                           
  4267                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4268  1B0A  087B               	movf	_PF,w
  4269  1B0B  3E03               	addlw	3
  4270  1B0C  0086               	movwf	6
  4271  1B0D  3001               	movlw	1	; select bank2/3
  4272  1B0E  0087               	movwf	7
  4273  1B0F  3F40               	moviw [0]fsr1
  4274  1B10  00A4               	movwf	??_getPowerFault_AD
  4275  1B11  3F41               	moviw [1]fsr1
  4276  1B12  00A5               	movwf	??_getPowerFault_AD+1
  4277  1B13  0A7B               	incf	_PF,w
  4278  1B14  0086               	movwf	6
  4279  1B15  3001               	movlw	1	; select bank2/3
  4280  1B16  0087               	movwf	7
  4281  1B17  3F40               	moviw [0]fsr1
  4282  1B18  00A6               	movwf	??_getPowerFault_AD+2
  4283  1B19  3F41               	moviw [1]fsr1
  4284  1B1A  00A7               	movwf	??_getPowerFault_AD+3
  4285  1B1B  0825               	movf	??_getPowerFault_AD+1,w
  4286  1B1C  0227               	subwf	??_getPowerFault_AD+3,w
  4287  1B1D  1D03               	skipz
  4288  1B1E  2B21               	goto	u10115
  4289  1B1F  0824               	movf	??_getPowerFault_AD,w
  4290  1B20  0226               	subwf	??_getPowerFault_AD+2,w
  4291  1B21                     u10115:	
  4292  1B21  1803               	skipnc
  4293  1B22  0008               	return
  4294                           
  4295                           ;PowerFault_B1.c: 55: {
  4296                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4297  1B23  087B               	movf	_PF,w
  4298  1B24  3E03               	addlw	3
  4299  1B25  0086               	movwf	6
  4300  1B26  3001               	movlw	1	; select bank2/3
  4301  1B27  0087               	movwf	7
  4302  1B28  0A7B               	incf	_PF,w
  4303  1B29  0084               	movwf	4
  4304  1B2A  3001               	movlw	1	; select bank2/3
  4305  1B2B  0085               	movwf	5
  4306  1B2C  3F40               	moviw [0]fsr1
  4307  1B2D  3F80               	movwi [0]fsr0
  4308  1B2E  3F41               	moviw [1]fsr1
  4309  1B2F  3F81               	movwi [1]fsr0
  4310  1B30  0008               	return
  4311  1B31                     __end_of_getPowerFault_AD:	
  4312                           
  4313                           	psect	text3
  4314  16C2                     __ptext3:	
  4315 ;; *************** function _getLoad_AD *****************
  4316 ;; Defined at:
  4317 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  channel         1    wreg     unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  channel         1    9[BANK0 ] unsigned char 
  4322 ;;  i               1   11[BANK0 ] unsigned char 
  4323 ;;  j               1   10[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;		None               void
  4326 ;; Registers used:
  4327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;Total ram usage:        8 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    5
  4340 ;; This function calls:
  4341 ;;		_getAD
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _getLoad_AD
  4349  16C2                     _getLoad_AD:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4353                           ;getLoad_AD@channel stored from wreg
  4354  16C2  0020               	movlb	0	; select bank0
  4355  16C3  00A9               	movwf	getLoad_AD@channel
  4356                           
  4357                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4358  16C4  01AB               	clrf	getLoad_AD@i
  4359  16C5  01AA               	clrf	getLoad_AD@j
  4360                           
  4361                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4362  16C6  086E               	movf	_Load,w
  4363  16C7  0086               	movwf	6
  4364  16C8  3002               	movlw	2	; select bank4/5
  4365  16C9  0087               	movwf	7
  4366  16CA  1E01               	btfss	1,4
  4367  16CB  0008               	return
  4368                           
  4369                           ;OverLoad_B1.c: 20: {
  4370                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4371  16CC  30C0               	movlw	192
  4372  16CD  00A4               	movwf	??_getLoad_AD
  4373  16CE  0824               	movf	??_getLoad_AD,w
  4374  16CF  00A0               	movwf	getAD@adcon1
  4375  16D0  0829               	movf	getLoad_AD@channel,w
  4376  16D1  31A5  2571  3196   	fcall	_getAD
  4377  16D4  0020               	movlb	0	; select bank0
  4378  16D5  086E               	movf	_Load,w
  4379  16D6  3E32               	addlw	50
  4380  16D7  0086               	movwf	6
  4381  16D8  3002               	movlw	2	; select bank4/5
  4382  16D9  0087               	movwf	7
  4383  16DA  0820               	movf	?_getAD,w
  4384  16DB  3FC0               	movwi [0]fsr1
  4385  16DC  0821               	movf	?_getAD+1,w
  4386  16DD  3FC1               	movwi [1]fsr1
  4387                           
  4388                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4389  16DE  01AB               	clrf	getLoad_AD@i
  4390  16DF  3005               	movlw	5
  4391  16E0  022B               	subwf	getLoad_AD@i,w
  4392  16E1  1803               	btfsc	3,0
  4393  16E2  2F1C               	goto	l10004
  4394  16E3                     l9994:	
  4395                           
  4396                           ;OverLoad_B1.c: 23: {
  4397                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4398  16E3  086E               	movf	_Load,w
  4399  16E4  3E32               	addlw	50
  4400  16E5  0086               	movwf	6
  4401  16E6  3002               	movlw	2	; select bank4/5
  4402  16E7  0087               	movwf	7
  4403  16E8  3F40               	moviw [0]fsr1
  4404  16E9  00A4               	movwf	??_getLoad_AD
  4405  16EA  3F41               	moviw [1]fsr1
  4406  16EB  00A5               	movwf	??_getLoad_AD+1
  4407  16EC  352B               	lslf	getLoad_AD@i,w
  4408  16ED  3E08               	addlw	8
  4409  16EE  076E               	addwf	_Load,w
  4410  16EF  00A6               	movwf	??_getLoad_AD+2
  4411  16F0  0826               	movf	??_getLoad_AD+2,w
  4412  16F1  0086               	movwf	6
  4413  16F2  3002               	movlw	2	; select bank4/5
  4414  16F3  0087               	movwf	7
  4415  16F4  3F40               	moviw [0]fsr1
  4416  16F5  00A7               	movwf	??_getLoad_AD+3
  4417  16F6  3F41               	moviw [1]fsr1
  4418  16F7  00A8               	movwf	??_getLoad_AD+4
  4419  16F8  0825               	movf	??_getLoad_AD+1,w
  4420  16F9  0228               	subwf	??_getLoad_AD+4,w
  4421  16FA  1D03               	skipz
  4422  16FB  2EFE               	goto	u10015
  4423  16FC  0824               	movf	??_getLoad_AD,w
  4424  16FD  0227               	subwf	??_getLoad_AD+3,w
  4425  16FE                     u10015:	
  4426  16FE  1803               	skipnc
  4427  16FF  2F14               	goto	l10000
  4428                           
  4429                           ;OverLoad_B1.c: 25: {
  4430                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4431  1700  086E               	movf	_Load,w
  4432  1701  3E32               	addlw	50
  4433  1702  0086               	movwf	6
  4434  1703  3002               	movlw	2	; select bank4/5
  4435  1704  0087               	movwf	7
  4436  1705  352B               	lslf	getLoad_AD@i,w
  4437  1706  3E08               	addlw	8
  4438  1707  076E               	addwf	_Load,w
  4439  1708  00A4               	movwf	??_getLoad_AD
  4440  1709  0824               	movf	??_getLoad_AD,w
  4441  170A  0084               	movwf	4
  4442  170B  3002               	movlw	2	; select bank4/5
  4443  170C  0085               	movwf	5
  4444  170D  3F40               	moviw [0]fsr1
  4445  170E  3F80               	movwi [0]fsr0
  4446  170F  3F41               	moviw [1]fsr1
  4447  1710  3F81               	movwi [1]fsr0
  4448                           
  4449                           ;OverLoad_B1.c: 27: j=1;
  4450  1711  01AA               	clrf	getLoad_AD@j
  4451  1712  0AAA               	incf	getLoad_AD@j,f
  4452                           
  4453                           ;OverLoad_B1.c: 28: break;
  4454  1713  2F1C               	goto	l10004
  4455  1714                     l10000:	
  4456  1714  3001               	movlw	1
  4457  1715  00A4               	movwf	??_getLoad_AD
  4458  1716  0824               	movf	??_getLoad_AD,w
  4459  1717  07AB               	addwf	getLoad_AD@i,f
  4460  1718  3005               	movlw	5
  4461  1719  022B               	subwf	getLoad_AD@i,w
  4462  171A  1C03               	skipc
  4463  171B  2EE3               	goto	l9994
  4464  171C                     l10004:	
  4465                           
  4466                           ;OverLoad_B1.c: 29: }
  4467                           ;OverLoad_B1.c: 30: }
  4468                           ;OverLoad_B1.c: 31: if(!j)
  4469  171C  08AA               	movf	getLoad_AD@j,f
  4470  171D  1D03               	skipz
  4471  171E  0008               	return
  4472                           
  4473                           ;OverLoad_B1.c: 32: {
  4474                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4475  171F  01AB               	clrf	getLoad_AD@i
  4476  1720                     L1:	
  4477  1720  3005               	movlw	5
  4478  1721  022B               	subwf	getLoad_AD@i,w
  4479  1722  1803               	btfsc	3,0
  4480  1723  0008               	return
  4481                           
  4482                           ;OverLoad_B1.c: 34: {
  4483                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4484  1724  352B               	lslf	getLoad_AD@i,w
  4485  1725  3E1A               	addlw	26
  4486  1726  076E               	addwf	_Load,w
  4487  1727  00A4               	movwf	??_getLoad_AD
  4488  1728  0824               	movf	??_getLoad_AD,w
  4489  1729  0086               	movwf	6
  4490  172A  3002               	movlw	2	; select bank4/5
  4491  172B  0087               	movwf	7
  4492  172C  3F40               	moviw [0]fsr1
  4493  172D  00A5               	movwf	??_getLoad_AD+1
  4494  172E  3F41               	moviw [1]fsr1
  4495  172F  00A6               	movwf	??_getLoad_AD+2
  4496  1730  086E               	movf	_Load,w
  4497  1731  3E32               	addlw	50
  4498  1732  0086               	movwf	6
  4499  1733  3002               	movlw	2	; select bank4/5
  4500  1734  0087               	movwf	7
  4501  1735  3F40               	moviw [0]fsr1
  4502  1736  00A7               	movwf	??_getLoad_AD+3
  4503  1737  3F41               	moviw [1]fsr1
  4504  1738  00A8               	movwf	??_getLoad_AD+4
  4505  1739  0826               	movf	??_getLoad_AD+2,w
  4506  173A  0228               	subwf	??_getLoad_AD+4,w
  4507  173B  1D03               	skipz
  4508  173C  2F3F               	goto	u10055
  4509  173D  0825               	movf	??_getLoad_AD+1,w
  4510  173E  0227               	subwf	??_getLoad_AD+3,w
  4511  173F                     u10055:	
  4512  173F  1803               	skipnc
  4513  1740  2F53               	goto	l10016
  4514                           
  4515                           ;OverLoad_B1.c: 36: {
  4516                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4517  1741  086E               	movf	_Load,w
  4518  1742  3E32               	addlw	50
  4519  1743  0086               	movwf	6
  4520  1744  3002               	movlw	2	; select bank4/5
  4521  1745  0087               	movwf	7
  4522  1746  352B               	lslf	getLoad_AD@i,w
  4523  1747  3E1A               	addlw	26
  4524  1748  076E               	addwf	_Load,w
  4525  1749  00A4               	movwf	??_getLoad_AD
  4526  174A  0824               	movf	??_getLoad_AD,w
  4527  174B  0084               	movwf	4
  4528  174C  3002               	movlw	2	; select bank4/5
  4529  174D  0085               	movwf	5
  4530  174E  3F40               	moviw [0]fsr1
  4531  174F  3F80               	movwi [0]fsr0
  4532  1750  3F41               	moviw [1]fsr1
  4533  1751  3F81               	movwi [1]fsr0
  4534                           
  4535                           ;OverLoad_B1.c: 38: break;
  4536  1752  0008               	return
  4537  1753                     l10016:	
  4538  1753  3001               	movlw	1
  4539  1754  00A4               	movwf	??_getLoad_AD
  4540  1755  0824               	movf	??_getLoad_AD,w
  4541  1756  07AB               	addwf	getLoad_AD@i,f
  4542  1757  2F20               	goto	L1
  4543  1758                     __end_of_getLoad_AD:	
  4544                           
  4545                           	psect	text4
  4546  2571                     __ptext4:	
  4547 ;; *************** function _getAD *****************
  4548 ;; Defined at:
  4549 ;;		line 381 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  adcon0          1    wreg     unsigned char 
  4552 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  2    0[BANK0 ] int 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4564 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;Total ram usage:        4 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    4
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_getLoad_AD
  4575 ;;		_getTemp_AD
  4576 ;;		_getPowerFault_AD
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function _getAD
  4582  2571                     _getAD:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4586                           ;getAD@adcon0 stored from wreg
  4587  2571  0020               	movlb	0	; select bank0
  4588  2572  00A3               	movwf	getAD@adcon0
  4589                           
  4590                           ;MCU_B1.c: 383: ADCON0=adcon0;
  4591  2573  0823               	movf	getAD@adcon0,w
  4592  2574  0021               	movlb	1	; select bank1
  4593  2575  009D               	movwf	29	;volatile
  4594                           
  4595                           ;MCU_B1.c: 384: ADCON1=adcon1;
  4596  2576  0020               	movlb	0	; select bank0
  4597  2577  0820               	movf	getAD@adcon1,w
  4598  2578  0021               	movlb	1	; select bank1
  4599  2579  009E               	movwf	30	;volatile
  4600                           
  4601                           ;MCU_B1.c: 385: GO_nDONE=1;
  4602  257A  149D               	bsf	29,1	;volatile
  4603  257B                     l1728:	
  4604                           ;MCU_B1.c: 386: while(GO_nDONE);
  4605                           
  4606  257B  189D               	btfsc	29,1	;volatile
  4607  257C  2D7B               	goto	l1728
  4608                           
  4609                           ;MCU_B1.c: 387: return ((ADRESH*256)+ADRESL);
  4610  257D  081C               	movf	28,w	;volatile
  4611  257E  0020               	movlb	0	; select bank0
  4612  257F  01A1               	clrf	?_getAD+1
  4613  2580  07A1               	addwf	?_getAD+1,f
  4614  2581  0021               	movlb	1	; select bank1
  4615  2582  081B               	movf	27,w	;volatile
  4616  2583  0020               	movlb	0	; select bank0
  4617  2584  01A0               	clrf	?_getAD
  4618  2585  07A0               	addwf	?_getAD,f
  4619  2586  0008               	return
  4620  2587                     __end_of_getAD:	
  4621                           
  4622                           	psect	text5
  4623  2290                     __ptext5:	
  4624 ;; *************** function _Temp_Main *****************
  4625 ;; Defined at:
  4626 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;		None               void
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:   10
  4647 ;; This function calls:
  4648 ;;		_setTemp_Main
  4649 ;; This function is called by:
  4650 ;;		_main
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _Temp_Main
  4656  2290                     _Temp_Main:	
  4657                           
  4658                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4662  2290  318D  2582         	fcall	_setTemp_Main
  4663  2292  0008               	return
  4664  2293                     __end_of_Temp_Main:	
  4665                           
  4666                           	psect	text6
  4667  0D82                     __ptext6:	
  4668 ;; *************** function _setTemp_Main *****************
  4669 ;; Defined at:
  4670 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;Total ram usage:        3 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    9
  4691 ;; This function calls:
  4692 ;;		_getLoad_Safe
  4693 ;;		_getPF_Safe
  4694 ;;		_setOverTemp_Exceptions
  4695 ;; This function is called by:
  4696 ;;		_Temp_Main
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _setTemp_Main
  4702  0D82                     _setTemp_Main:	
  4703                           
  4704                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4705                           
  4706                           ;incstack = 0
  4707                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4708  0D82  087D               	movf	_Temp,w
  4709  0D83  0086               	movwf	6
  4710  0D84  3001               	movlw	1	; select bank2/3
  4711  0D85  0087               	movwf	7
  4712  0D86  1C01               	btfss	1,0
  4713  0D87  0008               	return
  4714                           
  4715                           ;OverTemperature_B1.c: 67: {
  4716                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4717  0D88  087D               	movf	_Temp,w
  4718  0D89  0086               	movwf	6
  4719  0D8A  3001               	movlw	1	; select bank2/3
  4720  0D8B  0087               	movwf	7
  4721  0D8C  1901               	btfsc	1,2
  4722  0D8D  2DCE               	goto	l9628
  4723                           
  4724                           ;OverTemperature_B1.c: 69: {
  4725                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4726  0D8E  0A7D               	incf	_Temp,w
  4727  0D8F  0086               	movwf	6
  4728  0D90  3001               	movlw	1	; select bank2/3
  4729  0D91  0087               	movwf	7
  4730  0D92  3001               	movlw	1
  4731  0D93  0781               	addwf	1,f
  4732  0D94  3141               	addfsr 1,1
  4733  0D95  1803               	skipnc
  4734  0D96  0A81               	incf	1,f
  4735                           
  4736                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4737  0D97  0A7D               	incf	_Temp,w
  4738  0D98  0086               	movwf	6
  4739  0D99  3001               	movlw	1	; select bank2/3
  4740  0D9A  0087               	movwf	7
  4741  0D9B  3F40               	moviw [0]fsr1
  4742  0D9C  0020               	movlb	0	; select bank0
  4743  0D9D  00AD               	movwf	??_setTemp_Main
  4744  0D9E  3F41               	moviw [1]fsr1
  4745  0D9F  00AE               	movwf	??_setTemp_Main+1
  4746  0DA0  3001               	movlw	1
  4747  0DA1  022E               	subwf	??_setTemp_Main+1,w
  4748  0DA2  30F4               	movlw	244
  4749  0DA3  1903               	skipnz
  4750  0DA4  022D               	subwf	??_setTemp_Main,w
  4751  0DA5  1C03               	skipc
  4752  0DA6  0008               	return
  4753                           
  4754                           ;OverTemperature_B1.c: 72: {
  4755                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4756  0DA7  31A3  235B  318D   	fcall	_getLoad_Safe
  4757  0DAA  3A00               	xorlw	0
  4758  0DAB  1903               	skipnz
  4759  0DAC  2DC5               	goto	l9626
  4760  0DAD  31A2  22E5  318D   	fcall	_getPF_Safe
  4761  0DB0  3A00               	xorlw	0
  4762  0DB1  1903               	skipnz
  4763  0DB2  2DC5               	goto	l9626
  4764                           
  4765                           ;OverTemperature_B1.c: 74: {
  4766                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4767  0DB3  0A7D               	incf	_Temp,w
  4768  0DB4  0086               	movwf	6
  4769  0DB5  3001               	movlw	1	; select bank2/3
  4770  0DB6  0087               	movwf	7
  4771  0DB7  3000               	movlw	0
  4772  0DB8  3FC0               	movwi [0]fsr1
  4773  0DB9  3FC1               	movwi [1]fsr1
  4774                           
  4775                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4776  0DBA  087D               	movf	_Temp,w
  4777  0DBB  0086               	movwf	6
  4778  0DBC  3001               	movlw	1	; select bank2/3
  4779  0DBD  0087               	movwf	7
  4780  0DBE  1501               	bsf	1,2
  4781                           
  4782                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4783  0DBF  087D               	movf	_Temp,w
  4784  0DC0  0086               	movwf	6
  4785  0DC1  3001               	movlw	1	; select bank2/3
  4786  0DC2  0087               	movwf	7
  4787  0DC3  1201               	bcf	1,4
  4788                           
  4789                           ;OverTemperature_B1.c: 78: }
  4790  0DC4  0008               	return
  4791  0DC5                     l9626:	
  4792                           
  4793                           ;OverTemperature_B1.c: 79: else
  4794                           ;OverTemperature_B1.c: 80: {
  4795                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4796  0DC5  0A7D               	incf	_Temp,w
  4797  0DC6  0086               	movwf	6
  4798  0DC7  3001               	movlw	1	; select bank2/3
  4799  0DC8  0087               	movwf	7
  4800  0DC9  30E8               	movlw	232
  4801  0DCA  3FC0               	movwi [0]fsr1
  4802  0DCB  3003               	movlw	3
  4803  0DCC  3FC1               	movwi [1]fsr1
  4804                           
  4805                           ;OverTemperature_B1.c: 82: }
  4806                           ;OverTemperature_B1.c: 83: }
  4807                           ;OverTemperature_B1.c: 84: }
  4808  0DCD  0008               	return
  4809  0DCE                     l9628:	
  4810                           
  4811                           ;OverTemperature_B1.c: 85: else
  4812                           ;OverTemperature_B1.c: 86: {
  4813                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4814  0DCE  0A7D               	incf	_Temp,w
  4815  0DCF  0086               	movwf	6
  4816  0DD0  3001               	movlw	1	; select bank2/3
  4817  0DD1  0087               	movwf	7
  4818  0DD2  3001               	movlw	1
  4819  0DD3  0781               	addwf	1,f
  4820  0DD4  3141               	addfsr 1,1
  4821  0DD5  1803               	skipnc
  4822  0DD6  0A81               	incf	1,f
  4823                           
  4824                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4825  0DD7  0A7D               	incf	_Temp,w
  4826  0DD8  0086               	movwf	6
  4827  0DD9  3001               	movlw	1	; select bank2/3
  4828  0DDA  0087               	movwf	7
  4829  0DDB  3F40               	moviw [0]fsr1
  4830  0DDC  0020               	movlb	0	; select bank0
  4831  0DDD  00AD               	movwf	??_setTemp_Main
  4832  0DDE  3F41               	moviw [1]fsr1
  4833  0DDF  00AE               	movwf	??_setTemp_Main+1
  4834  0DE0  3000               	movlw	0
  4835  0DE1  022E               	subwf	??_setTemp_Main+1,w
  4836  0DE2  3004               	movlw	4
  4837  0DE3  1903               	skipnz
  4838  0DE4  022D               	subwf	??_setTemp_Main,w
  4839  0DE5  1C03               	skipc
  4840  0DE6  0008               	return
  4841                           
  4842                           ;OverTemperature_B1.c: 89: {
  4843                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4844  0DE7  0A7D               	incf	_Temp,w
  4845  0DE8  0086               	movwf	6
  4846  0DE9  3001               	movlw	1	; select bank2/3
  4847  0DEA  0087               	movwf	7
  4848  0DEB  3000               	movlw	0
  4849  0DEC  3FC0               	movwi [0]fsr1
  4850  0DED  3FC1               	movwi [1]fsr1
  4851                           
  4852                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4853  0DEE  087D               	movf	_Temp,w
  4854  0DEF  0086               	movwf	6
  4855  0DF0  3001               	movlw	1	; select bank2/3
  4856  0DF1  0087               	movwf	7
  4857  0DF2  1101               	bcf	1,2
  4858                           
  4859                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4860  0DF3  087D               	movf	_Temp,w
  4861  0DF4  3E08               	addlw	8
  4862  0DF5  0086               	movwf	6
  4863  0DF6  3001               	movlw	1	; select bank2/3
  4864  0DF7  0087               	movwf	7
  4865  0DF8  087D               	movf	_Temp,w
  4866  0DF9  3E04               	addlw	4
  4867  0DFA  0084               	movwf	4
  4868  0DFB  3001               	movlw	1	; select bank2/3
  4869  0DFC  0085               	movwf	5
  4870  0DFD  3F40               	moviw [0]fsr1
  4871  0DFE  3F80               	movwi [0]fsr0
  4872  0DFF  3F41               	moviw [1]fsr1
  4873  0E00  3F81               	movwi [1]fsr0
  4874                           
  4875                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4876  0E01  087D               	movf	_Temp,w
  4877  0E02  0086               	movwf	6
  4878  0E03  3001               	movlw	1	; select bank2/3
  4879  0E04  0087               	movwf	7
  4880  0E05  1C81               	btfss	1,1
  4881  0E06  2E34               	goto	l9650
  4882                           
  4883                           ;OverTemperature_B1.c: 94: {
  4884                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4885  0E07  087D               	movf	_Temp,w
  4886  0E08  3E04               	addlw	4
  4887  0E09  0086               	movwf	6
  4888  0E0A  3001               	movlw	1	; select bank2/3
  4889  0E0B  0087               	movwf	7
  4890  0E0C  3F40               	moviw [0]fsr1
  4891  0E0D  00AD               	movwf	??_setTemp_Main
  4892  0E0E  3F41               	moviw [1]fsr1
  4893  0E0F  00AE               	movwf	??_setTemp_Main+1
  4894  0E10  3002               	movlw	2
  4895  0E11  022E               	subwf	??_setTemp_Main+1,w
  4896  0E12  3058               	movlw	88
  4897  0E13  1903               	skipnz
  4898  0E14  022D               	subwf	??_setTemp_Main,w
  4899  0E15  1C03               	skipc
  4900  0E16  2E62               	goto	l9660
  4901                           
  4902                           ;OverTemperature_B1.c: 96: {
  4903                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4904  0E17  3001               	movlw	1
  4905  0E18  00AD               	movwf	??_setTemp_Main
  4906  0E19  087D               	movf	_Temp,w
  4907  0E1A  3E03               	addlw	3
  4908  0E1B  0086               	movwf	6
  4909  0E1C  3001               	movlw	1	; select bank2/3
  4910  0E1D  0087               	movwf	7
  4911  0E1E  082D               	movf	??_setTemp_Main,w
  4912  0E1F  0781               	addwf	1,f
  4913                           
  4914                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4915  0E20  087D               	movf	_Temp,w
  4916  0E21  3E03               	addlw	3
  4917  0E22  0086               	movwf	6
  4918  0E23  3001               	movlw	1	; select bank2/3
  4919  0E24  0087               	movwf	7
  4920  0E25  3003               	movlw	3
  4921  0E26  0201               	subwf	1,w
  4922  0E27  1C03               	skipc
  4923  0E28  2E68               	goto	l9662
  4924                           
  4925                           ;OverTemperature_B1.c: 99: {
  4926                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4927  0E29  087D               	movf	_Temp,w
  4928  0E2A  3E03               	addlw	3
  4929  0E2B  0086               	movwf	6
  4930  0E2C  3001               	movlw	1	; select bank2/3
  4931  0E2D  0087               	movwf	7
  4932  0E2E  0181               	clrf	1
  4933                           
  4934                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4935  0E2F  3000               	movlw	0
  4936  0E30  319B  2373  318D   	fcall	_setOverTemp_Exceptions
  4937                           
  4938                           ;OverTemperature_B1.c: 102: }
  4939                           ;OverTemperature_B1.c: 103: }
  4940  0E33  2E68               	goto	l9662
  4941  0E34                     l9650:	
  4942                           ;OverTemperature_B1.c: 107: }
  4943                           ;OverTemperature_B1.c: 108: }
  4944                           
  4945                           ;OverTemperature_B1.c: 104: else
  4946                           ;OverTemperature_B1.c: 105: {
  4947                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4948                           
  4949                           
  4950                           ;OverTemperature_B1.c: 109: else
  4951                           ;OverTemperature_B1.c: 110: {
  4952                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4953  0E34  087D               	movf	_Temp,w
  4954  0E35  3E04               	addlw	4
  4955  0E36  0086               	movwf	6
  4956  0E37  3001               	movlw	1	; select bank2/3
  4957  0E38  0087               	movwf	7
  4958  0E39  3F40               	moviw [0]fsr1
  4959  0E3A  0020               	movlb	0	; select bank0
  4960  0E3B  00AD               	movwf	??_setTemp_Main
  4961  0E3C  3F41               	moviw [1]fsr1
  4962  0E3D  00AE               	movwf	??_setTemp_Main+1
  4963  0E3E  3002               	movlw	2
  4964  0E3F  022E               	subwf	??_setTemp_Main+1,w
  4965  0E40  3027               	movlw	39
  4966  0E41  1903               	skipnz
  4967  0E42  022D               	subwf	??_setTemp_Main,w
  4968  0E43  1803               	skipnc
  4969  0E44  2E62               	goto	l9660
  4970                           
  4971                           ;OverTemperature_B1.c: 112: {
  4972                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4973  0E45  3001               	movlw	1
  4974  0E46  00AD               	movwf	??_setTemp_Main
  4975  0E47  087D               	movf	_Temp,w
  4976  0E48  3E03               	addlw	3
  4977  0E49  0086               	movwf	6
  4978  0E4A  3001               	movlw	1	; select bank2/3
  4979  0E4B  0087               	movwf	7
  4980  0E4C  082D               	movf	??_setTemp_Main,w
  4981  0E4D  0781               	addwf	1,f
  4982                           
  4983                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4984  0E4E  087D               	movf	_Temp,w
  4985  0E4F  3E03               	addlw	3
  4986  0E50  0086               	movwf	6
  4987  0E51  3001               	movlw	1	; select bank2/3
  4988  0E52  0087               	movwf	7
  4989  0E53  3003               	movlw	3
  4990  0E54  0201               	subwf	1,w
  4991  0E55  1C03               	skipc
  4992  0E56  2E68               	goto	l9662
  4993                           
  4994                           ;OverTemperature_B1.c: 115: {
  4995                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4996  0E57  087D               	movf	_Temp,w
  4997  0E58  3E03               	addlw	3
  4998  0E59  0086               	movwf	6
  4999  0E5A  3001               	movlw	1	; select bank2/3
  5000  0E5B  0087               	movwf	7
  5001  0E5C  0181               	clrf	1
  5002                           
  5003                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5004  0E5D  3001               	movlw	1
  5005  0E5E  319B  2373  318D   	fcall	_setOverTemp_Exceptions
  5006                           
  5007                           ;OverTemperature_B1.c: 118: }
  5008                           ;OverTemperature_B1.c: 119: }
  5009  0E61  2E68               	goto	l9662
  5010  0E62                     l9660:	
  5011                           
  5012                           ;OverTemperature_B1.c: 120: else
  5013                           ;OverTemperature_B1.c: 121: {
  5014                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5015  0E62  087D               	movf	_Temp,w
  5016  0E63  3E03               	addlw	3
  5017  0E64  0086               	movwf	6
  5018  0E65  3001               	movlw	1	; select bank2/3
  5019  0E66  0087               	movwf	7
  5020  0E67  0181               	clrf	1
  5021  0E68                     l9662:	
  5022                           
  5023                           ;OverTemperature_B1.c: 123: }
  5024                           ;OverTemperature_B1.c: 124: }
  5025                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5026  0E68  087D               	movf	_Temp,w
  5027  0E69  0086               	movwf	6
  5028  0E6A  3001               	movlw	1	; select bank2/3
  5029  0E6B  0087               	movwf	7
  5030  0E6C  1881               	btfsc	1,1
  5031  0E6D  2E73               	goto	l9666
  5032                           
  5033                           ;OverTemperature_B1.c: 126: {
  5034                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5035  0E6E  087D               	movf	_Temp,w
  5036  0E6F  0086               	movwf	6
  5037  0E70  3001               	movlw	1	; select bank2/3
  5038  0E71  0087               	movwf	7
  5039  0E72  1601               	bsf	1,4
  5040  0E73                     l9666:	
  5041                           
  5042                           ;OverTemperature_B1.c: 128: }
  5043                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5044  0E73  087D               	movf	_Temp,w
  5045  0E74  3E04               	addlw	4
  5046  0E75  0086               	movwf	6
  5047  0E76  3001               	movlw	1	; select bank2/3
  5048  0E77  0087               	movwf	7
  5049  0E78  3F40               	moviw [0]fsr1
  5050  0E79  0020               	movlb	0	; select bank0
  5051  0E7A  00AD               	movwf	??_setTemp_Main
  5052  0E7B  3F41               	moviw [1]fsr1
  5053  0E7C  00AE               	movwf	??_setTemp_Main+1
  5054  0E7D  082E               	movf	??_setTemp_Main+1,w
  5055  0E7E  00AF               	movwf	??_setTemp_Main+2
  5056  0E7F  086F               	movf	_Product,w
  5057  0E80  3E18               	addlw	24
  5058  0E81  0086               	movwf	6
  5059  0E82  3001               	movlw	1	; select bank2/3
  5060  0E83  0087               	movwf	7
  5061  0E84  082F               	movf	??_setTemp_Main+2,w
  5062  0E85  0081               	movwf	1
  5063                           
  5064                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5065  0E86  087D               	movf	_Temp,w
  5066  0E87  3E04               	addlw	4
  5067  0E88  0086               	movwf	6
  5068  0E89  3001               	movlw	1	; select bank2/3
  5069  0E8A  0087               	movwf	7
  5070  0E8B  0801               	movf	1,w
  5071  0E8C  00AD               	movwf	??_setTemp_Main
  5072  0E8D  086F               	movf	_Product,w
  5073  0E8E  3E19               	addlw	25
  5074  0E8F  0086               	movwf	6
  5075  0E90  3001               	movlw	1	; select bank2/3
  5076  0E91  0087               	movwf	7
  5077  0E92  082D               	movf	??_setTemp_Main,w
  5078  0E93  0081               	movwf	1
  5079                           
  5080                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5081  0E94  087D               	movf	_Temp,w
  5082  0E95  3E06               	addlw	6
  5083  0E96  0086               	movwf	6
  5084  0E97  3001               	movlw	1	; select bank2/3
  5085  0E98  0087               	movwf	7
  5086  0E99  3000               	movlw	0
  5087  0E9A  3FC0               	movwi [0]fsr1
  5088  0E9B  3FC1               	movwi [1]fsr1
  5089                           
  5090                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5091  0E9C  087D               	movf	_Temp,w
  5092  0E9D  3E08               	addlw	8
  5093  0E9E  0086               	movwf	6
  5094  0E9F  3001               	movlw	1	; select bank2/3
  5095  0EA0  0087               	movwf	7
  5096  0EA1  3000               	movlw	0
  5097  0EA2  3FC0               	movwi [0]fsr1
  5098  0EA3  3FC1               	movwi [1]fsr1
  5099  0EA4  0008               	return
  5100  0EA5                     __end_of_setTemp_Main:	
  5101                           
  5102                           	psect	text7
  5103  1B73                     __ptext7:	
  5104 ;; *************** function _setOverTemp_Exceptions *****************
  5105 ;; Defined at:
  5106 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  command         1    wreg     unsigned char 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  command         1   12[BANK0 ] unsigned char 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;Total ram usage:        2 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    8
  5127 ;; This function calls:
  5128 ;;		_DimmerLights_Exceptions
  5129 ;;		_setBuz
  5130 ;;		_setLED
  5131 ;;		_setRF_Enable
  5132 ;;		_setSw_Enable
  5133 ;; This function is called by:
  5134 ;;		_setTemp_Main
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _setOverTemp_Exceptions
  5140  1B73                     _setOverTemp_Exceptions:	
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5144                           ;setOverTemp_Exceptions@command stored from wreg
  5145  1B73  0020               	movlb	0	; select bank0
  5146  1B74  00AC               	movwf	setOverTemp_Exceptions@command
  5147                           
  5148                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5149  1B75  087D               	movf	_Temp,w
  5150  1B76  0086               	movwf	6
  5151  1B77  3001               	movlw	1	; select bank2/3
  5152  1B78  0087               	movwf	7
  5153  1B79  082C               	movf	setOverTemp_Exceptions@command,w
  5154  1B7A  1081               	bcf	1,1
  5155  1B7B  1D03               	skipz
  5156  1B7C  1481               	bsf	1,1
  5157                           
  5158                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5159  1B7D  092C               	comf	setOverTemp_Exceptions@command,w
  5160  1B7E  3901               	andlw	1
  5161  1B7F  00AB               	movwf	??_setOverTemp_Exceptions
  5162  1B80  087D               	movf	_Temp,w
  5163  1B81  0086               	movwf	6
  5164  1B82  3001               	movlw	1	; select bank2/3
  5165  1B83  0087               	movwf	7
  5166  1B84  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5167  1B85  0801               	movf	1,w
  5168  1B86  062B               	xorwf	??_setOverTemp_Exceptions,w
  5169  1B87  39EF               	andlw	-17
  5170  1B88  062B               	xorwf	??_setOverTemp_Exceptions,w
  5171  1B89  0081               	movwf	1
  5172                           
  5173                           ;OverTemperature_B1.c: 142: if(command)
  5174  1B8A  082C               	movf	setOverTemp_Exceptions@command,w
  5175  1B8B  1903               	btfsc	3,2
  5176  1B8C  2B92               	goto	l9260
  5177                           
  5178                           ;OverTemperature_B1.c: 143: {
  5179                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5180  1B8D  3001               	movlw	1
  5181  1B8E  319F  2730  319B   	fcall	_DimmerLights_Exceptions
  5182                           
  5183                           ;OverTemperature_B1.c: 148: }
  5184  1B91  2B9B               	goto	l2170
  5185  1B92                     l9260:	
  5186                           
  5187                           ;OverTemperature_B1.c: 149: else
  5188                           ;OverTemperature_B1.c: 150: {
  5189                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5190  1B92  3064               	movlw	100
  5191  1B93  0020               	movlb	0	; select bank0
  5192  1B94  00A6               	movwf	setBuz@time
  5193  1B95  3000               	movlw	0
  5194  1B96  00A7               	movwf	setBuz@time+1
  5195  1B97  3002               	movlw	2
  5196  1B98  3192  220A  319B   	fcall	_setBuz
  5197  1B9B                     l2170:	
  5198                           
  5199                           ;OverTemperature_B1.c: 152: }
  5200                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5201  1B9B  0020               	movlb	0	; select bank0
  5202  1B9C  082C               	movf	setOverTemp_Exceptions@command,w
  5203  1B9D  3E0A               	addlw	10
  5204  1B9E  00AB               	movwf	??_setOverTemp_Exceptions
  5205  1B9F  082B               	movf	??_setOverTemp_Exceptions,w
  5206  1BA0  00A2               	movwf	setLED@command
  5207  1BA1  3063               	movlw	99
  5208  1BA2  3188  2002  319B   	fcall	_setLED
  5209                           
  5210                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5211  1BA5  0020               	movlb	0	; select bank0
  5212  1BA6  092C               	comf	setOverTemp_Exceptions@command,w
  5213  1BA7  3901               	andlw	1
  5214  1BA8  31A6  266A  319B   	fcall	_setSw_Enable
  5215                           
  5216                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5217  1BAB  0020               	movlb	0	; select bank0
  5218  1BAC  092C               	comf	setOverTemp_Exceptions@command,w
  5219  1BAD  3901               	andlw	1
  5220  1BAE  00AB               	movwf	??_setOverTemp_Exceptions
  5221  1BAF  082B               	movf	??_setOverTemp_Exceptions,w
  5222  1BB0  00A2               	movwf	setRF_Enable@command
  5223  1BB1  3001               	movlw	1
  5224  1BB2  3198  2025         	fcall	_setRF_Enable
  5225  1BB4  0008               	return
  5226  1BB5                     __end_of_setOverTemp_Exceptions:	
  5227                           
  5228                           	psect	text8
  5229  228D                     __ptext8:	
  5230 ;; *************** function _Temp_Initialization *****************
  5231 ;; Defined at:
  5232 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;		None
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        0 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    5
  5253 ;; This function calls:
  5254 ;;		_setTemp_Initialization
  5255 ;; This function is called by:
  5256 ;;		_main
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _Temp_Initialization
  5262  228D                     _Temp_Initialization:	
  5263                           
  5264                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5268  228D  31A3  2366         	fcall	_setTemp_Initialization
  5269  228F  0008               	return
  5270  2290                     __end_of_Temp_Initialization:	
  5271                           
  5272                           	psect	text9
  5273  2366                     __ptext9:	
  5274 ;; *************** function _setTemp_Initialization *****************
  5275 ;; Defined at:
  5276 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;		None               void
  5283 ;; Registers used:
  5284 ;;		wreg, fsr1l, fsr1h
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        1 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    4
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_Temp_Initialization
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _setTemp_Initialization
  5306  2366                     _setTemp_Initialization:	
  5307                           
  5308                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5312  2366  303C               	movlw	_Temp1& (0+255)
  5313  2367  0020               	movlb	0	; select bank0
  5314  2368  00A0               	movwf	??_setTemp_Initialization
  5315  2369  0820               	movf	??_setTemp_Initialization,w
  5316  236A  00FD               	movwf	_Temp
  5317                           
  5318                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5319  236B  087D               	movf	_Temp,w
  5320  236C  0086               	movwf	6
  5321  236D  3001               	movlw	1	; select bank2/3
  5322  236E  0087               	movwf	7
  5323  236F  1601               	bsf	1,4
  5324  2370  0008               	return
  5325  2371                     __end_of_setTemp_Initialization:	
  5326                           
  5327                           	psect	text10
  5328  22F5                     __ptext10:	
  5329 ;; *************** function _Switch_Main *****************
  5330 ;; Defined at:
  5331 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;		None               void
  5338 ;; Registers used:
  5339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:   10
  5352 ;; This function calls:
  5353 ;;		_setSw_Main
  5354 ;; This function is called by:
  5355 ;;		_main
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _Switch_Main
  5361  22F5                     _Switch_Main:	
  5362                           
  5363                           ;Switch_B1.c: 65: setSw_Main(1);
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5367  22F5  3001               	movlw	1
  5368  22F6  318E  26A5  31A2   	fcall	_setSw_Main
  5369                           
  5370                           ;Switch_B1.c: 69: setSw_Main(2);
  5371  22F9  3002               	movlw	2
  5372  22FA  318E  26A5         	fcall	_setSw_Main
  5373  22FC  0008               	return
  5374  22FD                     __end_of_Switch_Main:	
  5375                           
  5376                           	psect	text11
  5377  0EA5                     __ptext11:	
  5378 ;; *************** function _setSw_Main *****************
  5379 ;; Defined at:
  5380 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  sw              1    wreg     unsigned char 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  sw              1   73[BANK0 ] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;		None               void
  5387 ;; Registers used:
  5388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:        5 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    9
  5401 ;; This function calls:
  5402 ;;		_SwPointSelect
  5403 ;;		_Sw_DimmerAdjFunc
  5404 ;;		_Sw_DimmerOffFunc
  5405 ;;		_Sw_DimmerOnFunc
  5406 ;;		_setBuz
  5407 ;;		_setRF_Learn
  5408 ;; This function is called by:
  5409 ;;		_Switch_Main
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _setSw_Main
  5415  0EA5                     _setSw_Main:	
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5419                           ;setSw_Main@sw stored from wreg
  5420  0EA5  0020               	movlb	0	; select bank0
  5421  0EA6  00E9               	movwf	setSw_Main@sw
  5422                           
  5423                           ;Switch_B1.c: 114: if(Sw->Enable)
  5424  0EA7  086D               	movf	_Sw,w
  5425  0EA8  0086               	movwf	6
  5426  0EA9  3001               	movlw	1	; select bank2/3
  5427  0EAA  0087               	movwf	7
  5428  0EAB  1C01               	btfss	1,0
  5429  0EAC  0008               	return
  5430                           
  5431                           ;Switch_B1.c: 115: {
  5432                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5433  0EAD  0869               	movf	setSw_Main@sw,w
  5434  0EAE  31A4  24DE  318E   	fcall	_SwPointSelect
  5435                           
  5436                           ;Switch_B1.c: 133: if(sw == 1)
  5437  0EB1  0020               	movlb	0	; select bank0
  5438  0EB2  0869               	movf	setSw_Main@sw,w
  5439  0EB3  3A01               	xorlw	1
  5440  0EB4  1D03               	skipz
  5441  0EB5  2EC2               	goto	l9806
  5442                           
  5443                           ;Switch_B1.c: 134: {
  5444                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  5445  0EB6  01E7               	clrf	_setSw_Main$4797
  5446  0EB7  0AE7               	incf	_setSw_Main$4797,f
  5447  0EB8  1F0C               	btfss	12,6	;volatile
  5448  0EB9  1A0C               	btfsc	12,4	;volatile
  5449  0EBA  2EBC               	goto	l9804
  5450  0EBB  01E7               	clrf	_setSw_Main$4797
  5451  0EBC                     l9804:	
  5452  0EBC  086D               	movf	_Sw,w
  5453  0EBD  0086               	movwf	6
  5454  0EBE  3001               	movlw	1	; select bank2/3
  5455  0EBF  0087               	movwf	7
  5456  0EC0  0867               	movf	_setSw_Main$4797,w
  5457  0EC1  2ED1               	goto	L2
  5458  0EC2                     l9806:	
  5459                           ;Switch_B1.c: 136: }
  5460                           
  5461                           
  5462                           ;Switch_B1.c: 137: else if(sw == 2)
  5463  0EC2  0869               	movf	setSw_Main@sw,w
  5464  0EC3  3A02               	xorlw	2
  5465  0EC4  1D03               	skipz
  5466  0EC5  2ED4               	goto	l9816
  5467                           
  5468                           ;Switch_B1.c: 138: {
  5469                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  5470  0EC6  01E8               	clrf	_setSw_Main$4798
  5471  0EC7  0AE8               	incf	_setSw_Main$4798,f
  5472  0EC8  1C0C               	btfss	12,0	;volatile
  5473  0EC9  188D               	btfsc	13,1	;volatile
  5474  0ECA  2ECC               	goto	l9814
  5475  0ECB  01E8               	clrf	_setSw_Main$4798
  5476  0ECC                     l9814:	
  5477  0ECC  086D               	movf	_Sw,w
  5478  0ECD  0086               	movwf	6
  5479  0ECE  3001               	movlw	1	; select bank2/3
  5480  0ECF  0087               	movwf	7
  5481  0ED0  0868               	movf	_setSw_Main$4798,w
  5482  0ED1                     L2:	
  5483  0ED1  1081               	bcf	1,1
  5484  0ED2  1D03               	skipz
  5485  0ED3  1481               	bsf	1,1
  5486  0ED4                     l9816:	
  5487                           
  5488                           ;Switch_B1.c: 140: }
  5489                           ;Switch_B1.c: 148: if(Sw->Touch)
  5490  0ED4  086D               	movf	_Sw,w
  5491  0ED5  0086               	movwf	6
  5492  0ED6  3001               	movlw	1	; select bank2/3
  5493  0ED7  0087               	movwf	7
  5494  0ED8  1C81               	btfss	1,1
  5495  0ED9  2FAB               	goto	l9864
  5496                           
  5497                           ;Switch_B1.c: 149: {
  5498                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5499  0EDA  086D               	movf	_Sw,w
  5500  0EDB  0086               	movwf	6
  5501  0EDC  3001               	movlw	1	; select bank2/3
  5502  0EDD  0087               	movwf	7
  5503  0EDE  1901               	btfsc	1,2
  5504  0EDF  2F01               	goto	l9830
  5505                           
  5506                           ;Switch_B1.c: 151: {
  5507                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5508  0EE0  3001               	movlw	1
  5509  0EE1  00E5               	movwf	??_setSw_Main
  5510  0EE2  086D               	movf	_Sw,w
  5511  0EE3  3E02               	addlw	2
  5512  0EE4  0086               	movwf	6
  5513  0EE5  3001               	movlw	1	; select bank2/3
  5514  0EE6  0087               	movwf	7
  5515  0EE7  0865               	movf	??_setSw_Main,w
  5516  0EE8  0781               	addwf	1,f
  5517                           
  5518                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5519  0EE9  086D               	movf	_Sw,w
  5520  0EEA  3E02               	addlw	2
  5521  0EEB  0086               	movwf	6
  5522  0EEC  3001               	movlw	1	; select bank2/3
  5523  0EED  0087               	movwf	7
  5524  0EEE  3005               	movlw	5
  5525  0EEF  0201               	subwf	1,w
  5526  0EF0  1C03               	skipc
  5527  0EF1  0008               	return
  5528                           
  5529                           ;Switch_B1.c: 154: {
  5530                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5531  0EF2  086D               	movf	_Sw,w
  5532  0EF3  3E02               	addlw	2
  5533  0EF4  0086               	movwf	6
  5534  0EF5  3001               	movlw	1	; select bank2/3
  5535  0EF6  0087               	movwf	7
  5536  0EF7  0181               	clrf	1
  5537                           
  5538                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5539  0EF8  086D               	movf	_Sw,w
  5540  0EF9  0086               	movwf	6
  5541  0EFA  3001               	movlw	1	; select bank2/3
  5542  0EFB  0087               	movwf	7
  5543  0EFC  1501               	bsf	1,2
  5544                           
  5545                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5546  0EFD  0869               	movf	setSw_Main@sw,w
  5547  0EFE  3187  2791         	fcall	_Sw_DimmerOnFunc
  5548                           
  5549                           ;Switch_B1.c: 162: }
  5550                           ;Switch_B1.c: 163: }
  5551  0F00  0008               	return
  5552  0F01                     l9830:	
  5553                           
  5554                           ;Switch_B1.c: 164: else
  5555                           ;Switch_B1.c: 165: {
  5556                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5557  0F01  0020               	movlb	0	; select bank0
  5558  0F02  086D               	movf	_Sw,w
  5559  0F03  0086               	movwf	6
  5560  0F04  3001               	movlw	1	; select bank2/3
  5561  0F05  0087               	movwf	7
  5562  0F06  1981               	btfsc	1,3
  5563  0F07  2F33               	goto	l9840
  5564                           
  5565                           ;Switch_B1.c: 167: {
  5566                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5567  0F08  086D               	movf	_Sw,w
  5568  0F09  3E03               	addlw	3
  5569  0F0A  0086               	movwf	6
  5570  0F0B  3001               	movlw	1	; select bank2/3
  5571  0F0C  0087               	movwf	7
  5572  0F0D  3001               	movlw	1
  5573  0F0E  0781               	addwf	1,f
  5574  0F0F  3141               	addfsr 1,1
  5575  0F10  1803               	skipnc
  5576  0F11  0A81               	incf	1,f
  5577                           
  5578                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5579  0F12  086D               	movf	_Sw,w
  5580  0F13  3E03               	addlw	3
  5581  0F14  0086               	movwf	6
  5582  0F15  3001               	movlw	1	; select bank2/3
  5583  0F16  0087               	movwf	7
  5584  0F17  3F40               	moviw [0]fsr1
  5585  0F18  00E5               	movwf	??_setSw_Main
  5586  0F19  3F41               	moviw [1]fsr1
  5587  0F1A  00E6               	movwf	??_setSw_Main+1
  5588  0F1B  3000               	movlw	0
  5589  0F1C  0266               	subwf	??_setSw_Main+1,w
  5590  0F1D  3096               	movlw	150
  5591  0F1E  1903               	skipnz
  5592  0F1F  0265               	subwf	??_setSw_Main,w
  5593  0F20  1C03               	skipc
  5594  0F21  0008               	return
  5595                           
  5596                           ;Switch_B1.c: 170: {
  5597                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5598  0F22  086D               	movf	_Sw,w
  5599  0F23  3E03               	addlw	3
  5600  0F24  0086               	movwf	6
  5601  0F25  3001               	movlw	1	; select bank2/3
  5602  0F26  0087               	movwf	7
  5603  0F27  3000               	movlw	0
  5604  0F28  3FC0               	movwi [0]fsr1
  5605  0F29  3FC1               	movwi [1]fsr1
  5606                           
  5607                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5608  0F2A  086D               	movf	_Sw,w
  5609  0F2B  0086               	movwf	6
  5610  0F2C  3001               	movlw	1	; select bank2/3
  5611  0F2D  0087               	movwf	7
  5612  0F2E  1581               	bsf	1,3
  5613                           
  5614                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5615  0F2F  0869               	movf	setSw_Main@sw,w
  5616  0F30  319B  2331         	fcall	_Sw_DimmerAdjFunc
  5617                           
  5618                           ;Switch_B1.c: 178: }
  5619                           ;Switch_B1.c: 179: }
  5620  0F32  0008               	return
  5621  0F33                     l9840:	
  5622                           
  5623                           ;Switch_B1.c: 180: else
  5624                           ;Switch_B1.c: 181: {
  5625                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5626  0F33  0020               	movlb	0	; select bank0
  5627  0F34  086D               	movf	_Sw,w
  5628  0F35  0086               	movwf	6
  5629  0F36  3001               	movlw	1	; select bank2/3
  5630  0F37  0087               	movwf	7
  5631  0F38  1A01               	btfsc	1,4
  5632  0F39  2F78               	goto	l9854
  5633                           
  5634                           ;Switch_B1.c: 183: {
  5635                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5636  0F3A  086D               	movf	_Sw,w
  5637  0F3B  3E05               	addlw	5
  5638  0F3C  0086               	movwf	6
  5639  0F3D  3001               	movlw	1	; select bank2/3
  5640  0F3E  0087               	movwf	7
  5641  0F3F  3001               	movlw	1
  5642  0F40  0781               	addwf	1,f
  5643  0F41  3141               	addfsr 1,1
  5644  0F42  1803               	skipnc
  5645  0F43  0A81               	incf	1,f
  5646                           
  5647                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5648  0F44  086D               	movf	_Sw,w
  5649  0F45  3E05               	addlw	5
  5650  0F46  0086               	movwf	6
  5651  0F47  3001               	movlw	1	; select bank2/3
  5652  0F48  0087               	movwf	7
  5653  0F49  3F40               	moviw [0]fsr1
  5654  0F4A  00E5               	movwf	??_setSw_Main
  5655  0F4B  3F41               	moviw [1]fsr1
  5656  0F4C  00E6               	movwf	??_setSw_Main+1
  5657  0F4D  3000               	movlw	0
  5658  0F4E  0266               	subwf	??_setSw_Main+1,w
  5659  0F4F  3096               	movlw	150
  5660  0F50  1903               	skipnz
  5661  0F51  0265               	subwf	??_setSw_Main,w
  5662  0F52  1C03               	skipc
  5663  0F53  0008               	return
  5664                           
  5665                           ;Switch_B1.c: 186: {
  5666                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5667  0F54  086D               	movf	_Sw,w
  5668  0F55  3E05               	addlw	5
  5669  0F56  0086               	movwf	6
  5670  0F57  3001               	movlw	1	; select bank2/3
  5671  0F58  0087               	movwf	7
  5672  0F59  3000               	movlw	0
  5673  0F5A  3FC0               	movwi [0]fsr1
  5674  0F5B  3FC1               	movwi [1]fsr1
  5675                           
  5676                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5677  0F5C  086D               	movf	_Sw,w
  5678  0F5D  0086               	movwf	6
  5679  0F5E  3001               	movlw	1	; select bank2/3
  5680  0F5F  0087               	movwf	7
  5681  0F60  1601               	bsf	1,4
  5682                           
  5683                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5684  0F61  01A2               	clrf	setRF_Learn@command
  5685  0F62  0AA2               	incf	setRF_Learn@command,f
  5686  0F63  3001               	movlw	1
  5687  0F64  31A3  23FB  318E   	fcall	_setRF_Learn
  5688                           
  5689                           ;Switch_B1.c: 194: if(TMain->First)
  5690  0F67  0021               	movlb	1	; select bank1
  5691  0F68  086C               	movf	_TMain^(0+128),w
  5692  0F69  3E03               	addlw	3
  5693  0F6A  0086               	movwf	6
  5694  0F6B  3001               	movlw	1	; select bank2/3
  5695  0F6C  0087               	movwf	7
  5696  0F6D  1C81               	btfss	1,1
  5697  0F6E  0008               	return
  5698                           
  5699                           ;Switch_B1.c: 195: {
  5700                           ;Switch_B1.c: 196: setBuz(2,100);
  5701  0F6F  3064               	movlw	100
  5702  0F70  0020               	movlb	0	; select bank0
  5703  0F71  00A6               	movwf	setBuz@time
  5704  0F72  3000               	movlw	0
  5705  0F73  00A7               	movwf	setBuz@time+1
  5706  0F74  3002               	movlw	2
  5707  0F75  3192  220A         	fcall	_setBuz
  5708                           
  5709                           ;Switch_B1.c: 197: }
  5710                           ;Switch_B1.c: 199: }
  5711                           ;Switch_B1.c: 200: }
  5712  0F77  0008               	return
  5713  0F78                     l9854:	
  5714                           
  5715                           ;Switch_B1.c: 201: else
  5716                           ;Switch_B1.c: 202: {
  5717                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5718  0F78  0020               	movlb	0	; select bank0
  5719  0F79  086D               	movf	_Sw,w
  5720  0F7A  0086               	movwf	6
  5721  0F7B  3001               	movlw	1	; select bank2/3
  5722  0F7C  0087               	movwf	7
  5723  0F7D  1A81               	btfsc	1,5
  5724  0F7E  0008               	return
  5725                           
  5726                           ;Switch_B1.c: 204: {
  5727                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5728  0F7F  086D               	movf	_Sw,w
  5729  0F80  3E07               	addlw	7
  5730  0F81  0086               	movwf	6
  5731  0F82  3001               	movlw	1	; select bank2/3
  5732  0F83  0087               	movwf	7
  5733  0F84  3001               	movlw	1
  5734  0F85  0781               	addwf	1,f
  5735  0F86  3141               	addfsr 1,1
  5736  0F87  1803               	skipnc
  5737  0F88  0A81               	incf	1,f
  5738                           
  5739                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5740  0F89  086D               	movf	_Sw,w
  5741  0F8A  3E07               	addlw	7
  5742  0F8B  0086               	movwf	6
  5743  0F8C  3001               	movlw	1	; select bank2/3
  5744  0F8D  0087               	movwf	7
  5745  0F8E  3F40               	moviw [0]fsr1
  5746  0F8F  00E5               	movwf	??_setSw_Main
  5747  0F90  3F41               	moviw [1]fsr1
  5748  0F91  00E6               	movwf	??_setSw_Main+1
  5749  0F92  3001               	movlw	1
  5750  0F93  0266               	subwf	??_setSw_Main+1,w
  5751  0F94  302C               	movlw	44
  5752  0F95  1903               	skipnz
  5753  0F96  0265               	subwf	??_setSw_Main,w
  5754  0F97  1C03               	skipc
  5755  0F98  0008               	return
  5756                           
  5757                           ;Switch_B1.c: 207: {
  5758                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5759  0F99  086D               	movf	_Sw,w
  5760  0F9A  3E07               	addlw	7
  5761  0F9B  0086               	movwf	6
  5762  0F9C  3001               	movlw	1	; select bank2/3
  5763  0F9D  0087               	movwf	7
  5764  0F9E  3000               	movlw	0
  5765  0F9F  3FC0               	movwi [0]fsr1
  5766  0FA0  3FC1               	movwi [1]fsr1
  5767                           
  5768                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5769  0FA1  086D               	movf	_Sw,w
  5770  0FA2  0086               	movwf	6
  5771  0FA3  3001               	movlw	1	; select bank2/3
  5772  0FA4  0087               	movwf	7
  5773  0FA5  1681               	bsf	1,5
  5774                           
  5775                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5776  0FA6  01A2               	clrf	setRF_Learn@command
  5777  0FA7  3001               	movlw	1
  5778  0FA8  31A3  23FB         	fcall	_setRF_Learn
  5779                           
  5780                           ;Switch_B1.c: 215: }
  5781                           ;Switch_B1.c: 216: }
  5782                           ;Switch_B1.c: 217: }
  5783                           ;Switch_B1.c: 218: }
  5784                           ;Switch_B1.c: 219: }
  5785                           ;Switch_B1.c: 220: }
  5786  0FAA  0008               	return
  5787  0FAB                     l9864:	
  5788                           
  5789                           ;Switch_B1.c: 221: else
  5790                           ;Switch_B1.c: 222: {
  5791                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5792  0FAB  0020               	movlb	0	; select bank0
  5793  0FAC  086D               	movf	_Sw,w
  5794  0FAD  0086               	movwf	6
  5795  0FAE  3001               	movlw	1	; select bank2/3
  5796  0FAF  0087               	movwf	7
  5797  0FB0  1D01               	btfss	1,2
  5798  0FB1  0008               	return
  5799                           
  5800                           ;Switch_B1.c: 224: {
  5801                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5802  0FB2  3001               	movlw	1
  5803  0FB3  00E5               	movwf	??_setSw_Main
  5804  0FB4  086D               	movf	_Sw,w
  5805  0FB5  3E02               	addlw	2
  5806  0FB6  0086               	movwf	6
  5807  0FB7  3001               	movlw	1	; select bank2/3
  5808  0FB8  0087               	movwf	7
  5809  0FB9  0865               	movf	??_setSw_Main,w
  5810  0FBA  0781               	addwf	1,f
  5811                           
  5812                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5813  0FBB  086D               	movf	_Sw,w
  5814  0FBC  3E02               	addlw	2
  5815  0FBD  0086               	movwf	6
  5816  0FBE  3001               	movlw	1	; select bank2/3
  5817  0FBF  0087               	movwf	7
  5818  0FC0  3005               	movlw	5
  5819  0FC1  0201               	subwf	1,w
  5820  0FC2  1C03               	skipc
  5821  0FC3  0008               	return
  5822                           
  5823                           ;Switch_B1.c: 227: {
  5824                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5825  0FC4  086D               	movf	_Sw,w
  5826  0FC5  3E02               	addlw	2
  5827  0FC6  0086               	movwf	6
  5828  0FC7  3001               	movlw	1	; select bank2/3
  5829  0FC8  0087               	movwf	7
  5830  0FC9  0181               	clrf	1
  5831                           
  5832                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5833  0FCA  086D               	movf	_Sw,w
  5834  0FCB  0086               	movwf	6
  5835  0FCC  3001               	movlw	1	; select bank2/3
  5836  0FCD  0087               	movwf	7
  5837  0FCE  1101               	bcf	1,2
  5838                           
  5839                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5840  0FCF  086D               	movf	_Sw,w
  5841  0FD0  3E03               	addlw	3
  5842  0FD1  0086               	movwf	6
  5843  0FD2  3001               	movlw	1	; select bank2/3
  5844  0FD3  0087               	movwf	7
  5845  0FD4  3000               	movlw	0
  5846  0FD5  3FC0               	movwi [0]fsr1
  5847  0FD6  3FC1               	movwi [1]fsr1
  5848                           
  5849                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5850  0FD7  086D               	movf	_Sw,w
  5851  0FD8  0086               	movwf	6
  5852  0FD9  3001               	movlw	1	; select bank2/3
  5853  0FDA  0087               	movwf	7
  5854  0FDB  1181               	bcf	1,3
  5855                           
  5856                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5857  0FDC  086D               	movf	_Sw,w
  5858  0FDD  3E05               	addlw	5
  5859  0FDE  0086               	movwf	6
  5860  0FDF  3001               	movlw	1	; select bank2/3
  5861  0FE0  0087               	movwf	7
  5862  0FE1  3000               	movlw	0
  5863  0FE2  3FC0               	movwi [0]fsr1
  5864  0FE3  3FC1               	movwi [1]fsr1
  5865                           
  5866                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5867  0FE4  086D               	movf	_Sw,w
  5868  0FE5  0086               	movwf	6
  5869  0FE6  3001               	movlw	1	; select bank2/3
  5870  0FE7  0087               	movwf	7
  5871  0FE8  1201               	bcf	1,4
  5872                           
  5873                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5874  0FE9  086D               	movf	_Sw,w
  5875  0FEA  3E07               	addlw	7
  5876  0FEB  0086               	movwf	6
  5877  0FEC  3001               	movlw	1	; select bank2/3
  5878  0FED  0087               	movwf	7
  5879  0FEE  3000               	movlw	0
  5880  0FEF  3FC0               	movwi [0]fsr1
  5881  0FF0  3FC1               	movwi [1]fsr1
  5882                           
  5883                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5884  0FF1  086D               	movf	_Sw,w
  5885  0FF2  0086               	movwf	6
  5886  0FF3  3001               	movlw	1	; select bank2/3
  5887  0FF4  0087               	movwf	7
  5888  0FF5  1281               	bcf	1,5
  5889                           
  5890                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5891  0FF6  0869               	movf	setSw_Main@sw,w
  5892  0FF7  3191  2127  318E   	fcall	_Sw_DimmerOffFunc
  5893                           
  5894                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5895  0FFA  0020               	movlb	0	; select bank0
  5896  0FFB  01A2               	clrf	setRF_Learn@command
  5897  0FFC  3001               	movlw	1
  5898  0FFD  31A3  23FB         	fcall	_setRF_Learn
  5899  0FFF  0008               	return
  5900  1000                     __end_of_setSw_Main:	
  5901                           
  5902                           	psect	text12
  5903  23FB                     __ptext12:	
  5904 ;; *************** function _setRF_Learn *****************
  5905 ;; Defined at:
  5906 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  rf              1    wreg     unsigned char 
  5909 ;;  command         1    2[BANK0 ] unsigned char 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  rf              1    3[BANK0 ] unsigned char 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;		None               void
  5914 ;; Registers used:
  5915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5921 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;Total ram usage:        2 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    5
  5928 ;; This function calls:
  5929 ;;		_RfPointSelect
  5930 ;; This function is called by:
  5931 ;;		_setSw_Main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           
  5936                           ;psect for function _setRF_Learn
  5937  23FB                     _setRF_Learn:	
  5938                           
  5939                           ;incstack = 0
  5940                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5941                           ;setRF_Learn@rf stored from wreg
  5942  23FB  0020               	movlb	0	; select bank0
  5943  23FC  00A3               	movwf	setRF_Learn@rf
  5944                           
  5945                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5946  23FD  0823               	movf	setRF_Learn@rf,w
  5947  23FE  31A3  232F         	fcall	_RfPointSelect
  5948                           
  5949                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5950  2400  087C               	movf	_RF,w
  5951  2401  0086               	movwf	6
  5952  2402  0187               	clrf	7
  5953  2403  0020               	movlb	0	; select bank0
  5954  2404  0822               	movf	setRF_Learn@command,w
  5955  2405  1301               	bcf	1,6
  5956  2406  1D03               	skipz
  5957  2407  1701               	bsf	1,6
  5958  2408  0008               	return
  5959  2409                     __end_of_setRF_Learn:	
  5960                           
  5961                           	psect	text13
  5962  0791                     __ptext13:	
  5963 ;; *************** function _Sw_DimmerOnFunc *****************
  5964 ;; Defined at:
  5965 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  sw              1    wreg     unsigned char 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  sw              1   67[BANK0 ] unsigned char 
  5970 ;;  Idle            1   66[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        2 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    8
  5987 ;; This function calls:
  5988 ;;		_setBuz
  5989 ;;		_setDimmerLights_Switch
  5990 ;;		_setDimmerLights_Trigger
  5991 ;;		_setRFSW_Status
  5992 ;;		_setRF_DimmerLights
  5993 ;;		_setTxData
  5994 ;; This function is called by:
  5995 ;;		_setSw_Main
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           
  6000                           ;psect for function _Sw_DimmerOnFunc
  6001  0791                     _Sw_DimmerOnFunc:	
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6005                           ;Sw_DimmerOnFunc@sw stored from wreg
  6006  0791  0020               	movlb	0	; select bank0
  6007  0792  00E3               	movwf	Sw_DimmerOnFunc@sw
  6008                           
  6009                           ;Switch_B1.c: 253: char Idle=1;
  6010  0793  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6011  0794  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6012                           
  6013                           ;Switch_B1.c: 270: if(sw == 1)
  6014  0795  0863               	movf	Sw_DimmerOnFunc@sw,w
  6015  0796  3A01               	xorlw	1
  6016  0797  1D03               	skipz
  6017  0798  2F9B               	goto	l9336
  6018                           
  6019                           ;Switch_B1.c: 271: {
  6020                           ;Switch_B1.c: 272: Idle=(DimmerLights22->AdjGo)?0:1;
  6021  0799  087A               	movf	_DimmerLights22,w
  6022  079A  2FA0               	goto	L3
  6023  079B                     l9336:	
  6024                           ;Switch_B1.c: 273: }
  6025                           
  6026                           
  6027                           ;Switch_B1.c: 274: else if(sw == 2)
  6028  079B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6029  079C  3A02               	xorlw	2
  6030  079D  1D03               	skipz
  6031  079E  2FAB               	goto	l9340
  6032                           
  6033                           ;Switch_B1.c: 275: {
  6034                           ;Switch_B1.c: 276: Idle=(DimmerLights11->AdjGo)?0:1;
  6035  079F  0879               	movf	_DimmerLights11,w
  6036  07A0                     L3:	
  6037  07A0  3E09               	addlw	9
  6038  07A1  0086               	movwf	6
  6039  07A2  3001               	movlw	1	; select bank2/3
  6040  07A3  0087               	movwf	7
  6041  07A4  1003               	clrc
  6042  07A5  1D01               	btfss	1,2
  6043  07A6  1403               	setc
  6044  07A7  3000               	movlw	0
  6045  07A8  1803               	btfsc	3,0
  6046  07A9  3001               	movlw	1
  6047  07AA  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6048  07AB                     l9340:	
  6049                           
  6050                           ;Switch_B1.c: 277: }
  6051                           ;Switch_B1.c: 280: if(Idle)
  6052  07AB  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6053  07AC  1903               	btfsc	3,2
  6054  07AD  0008               	return
  6055                           
  6056                           ;Switch_B1.c: 281: {
  6057                           ;Switch_B1.c: 282: Sw->Flag=1;
  6058  07AE  086D               	movf	_Sw,w
  6059  07AF  0086               	movwf	6
  6060  07B0  3001               	movlw	1	; select bank2/3
  6061  07B1  0087               	movwf	7
  6062  07B2  1781               	bsf	1,7
  6063                           
  6064                           ;Switch_B1.c: 283: setBuz(1,100);
  6065  07B3  3064               	movlw	100
  6066  07B4  00A6               	movwf	setBuz@time
  6067  07B5  3000               	movlw	0
  6068  07B6  00A7               	movwf	setBuz@time+1
  6069  07B7  3001               	movlw	1
  6070  07B8  3192  220A  3187   	fcall	_setBuz
  6071                           
  6072                           ;Switch_B1.c: 284: if(!Sw->Status)
  6073  07BB  0020               	movlb	0	; select bank0
  6074  07BC  086D               	movf	_Sw,w
  6075  07BD  0086               	movwf	6
  6076  07BE  3001               	movlw	1	; select bank2/3
  6077  07BF  0087               	movwf	7
  6078  07C0  1B01               	btfsc	1,6
  6079  07C1  2FED               	goto	l9360
  6080                           
  6081                           ;Switch_B1.c: 285: {
  6082                           ;Switch_B1.c: 286: Sw->Status=1;
  6083  07C2  086D               	movf	_Sw,w
  6084  07C3  0086               	movwf	6
  6085  07C4  3001               	movlw	1	; select bank2/3
  6086  07C5  0087               	movwf	7
  6087  07C6  1701               	bsf	1,6
  6088                           
  6089                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  6090  07C7  01A2               	clrf	setRFSW_Status@command
  6091  07C8  0AA2               	incf	setRFSW_Status@command,f
  6092  07C9  0863               	movf	Sw_DimmerOnFunc@sw,w
  6093  07CA  31A4  2409  3187   	fcall	_setRFSW_Status
  6094                           
  6095                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  6096  07CD  0020               	movlb	0	; select bank0
  6097  07CE  01A2               	clrf	setDimmerLights_Trigger@command
  6098  07CF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6099  07D0  0863               	movf	Sw_DimmerOnFunc@sw,w
  6100  07D1  31A4  2447  3187   	fcall	_setDimmerLights_Trigger
  6101                           
  6102                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  6103  07D4  0020               	movlb	0	; select bank0
  6104  07D5  01A2               	clrf	setDimmerLights_Switch@command
  6105  07D6  0AA2               	incf	setDimmerLights_Switch@command,f
  6106  07D7  0863               	movf	Sw_DimmerOnFunc@sw,w
  6107  07D8  31A4  2437  3187   	fcall	_setDimmerLights_Switch
  6108                           
  6109                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  6110  07DB  0020               	movlb	0	; select bank0
  6111  07DC  086D               	movf	_Sw,w
  6112  07DD  0086               	movwf	6
  6113  07DE  3001               	movlw	1	; select bank2/3
  6114  07DF  0087               	movwf	7
  6115  07E0  3000               	movlw	0
  6116  07E1  1B01               	btfsc	1,6
  6117  07E2  3001               	movlw	1
  6118  07E3  00DD               	movwf	setRF_DimmerLights@on
  6119  07E4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6120  07E5  319F  2795  3187   	fcall	_setRF_DimmerLights
  6121                           
  6122                           ;Switch_B1.c: 293: setTxData(1);
  6123  07E8  3001               	movlw	1
  6124  07E9  3189  21BD         	fcall	_setTxData
  6125                           
  6126                           ;Switch_B1.c: 294: }
  6127  07EB  0020               	movlb	0	; select bank0
  6128  07EC  0008               	return
  6129  07ED                     l9360:	
  6130                           
  6131                           ;Switch_B1.c: 295: else
  6132                           ;Switch_B1.c: 296: {
  6133                           ;Switch_B1.c: 297: Sw->Status=0;
  6134  07ED  0020               	movlb	0	; select bank0
  6135  07EE  086D               	movf	_Sw,w
  6136  07EF  0086               	movwf	6
  6137  07F0  3001               	movlw	1	; select bank2/3
  6138  07F1  0087               	movwf	7
  6139  07F2  1301               	bcf	1,6
  6140                           
  6141                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6142  07F3  086D               	movf	_Sw,w
  6143  07F4  0086               	movwf	6
  6144  07F5  3001               	movlw	1	; select bank2/3
  6145  07F6  0087               	movwf	7
  6146  07F7  3000               	movlw	0
  6147  07F8  1B01               	btfsc	1,6
  6148  07F9  3001               	movlw	1
  6149  07FA  00A2               	movwf	setRFSW_Status@command
  6150  07FB  0863               	movf	Sw_DimmerOnFunc@sw,w
  6151  07FC  31A4  2409         	fcall	_setRFSW_Status
  6152  07FE  0020               	movlb	0	; select bank0
  6153  07FF  0008               	return
  6154  0800                     __end_of_Sw_DimmerOnFunc:	
  6155                           
  6156                           	psect	text14
  6157  1127                     __ptext14:	
  6158 ;; *************** function _Sw_DimmerOffFunc *****************
  6159 ;; Defined at:
  6160 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  sw              1    wreg     unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  sw              1   68[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;Total ram usage:        3 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    8
  6181 ;; This function calls:
  6182 ;;		_setDelayOff_GO
  6183 ;;		_setDimmerLights_AdjGo
  6184 ;;		_setDimmerLights_Switch
  6185 ;;		_setDimmerLights_Trigger
  6186 ;;		_setDimmerLights_TriggerAdj
  6187 ;;		_setRF_DimmerLights
  6188 ;;		_setTxData
  6189 ;; This function is called by:
  6190 ;;		_setSw_Main
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _Sw_DimmerOffFunc
  6196  1127                     _Sw_DimmerOffFunc:	
  6197                           
  6198                           ;incstack = 0
  6199                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6200                           ;Sw_DimmerOffFunc@sw stored from wreg
  6201  1127  0020               	movlb	0	; select bank0
  6202  1128  00E4               	movwf	Sw_DimmerOffFunc@sw
  6203                           
  6204                           ;Switch_B1.c: 305: if(Sw->Flag)
  6205  1129  086D               	movf	_Sw,w
  6206  112A  0086               	movwf	6
  6207  112B  3001               	movlw	1	; select bank2/3
  6208  112C  0087               	movwf	7
  6209  112D  1F81               	btfss	1,7
  6210  112E  0008               	return
  6211                           
  6212                           ;Switch_B1.c: 306: {
  6213                           ;Switch_B1.c: 307: Sw->Flag=0;
  6214  112F  086D               	movf	_Sw,w
  6215  1130  0086               	movwf	6
  6216  1131  3001               	movlw	1	; select bank2/3
  6217  1132  0087               	movwf	7
  6218  1133  1381               	bcf	1,7
  6219                           
  6220                           ;Switch_B1.c: 308: if(Sw->Status)
  6221  1134  086D               	movf	_Sw,w
  6222  1135  0086               	movwf	6
  6223  1136  3001               	movlw	1	; select bank2/3
  6224  1137  0087               	movwf	7
  6225  1138  1F01               	btfss	1,6
  6226  1139  2973               	goto	l9404
  6227                           
  6228                           ;Switch_B1.c: 309: {
  6229                           ;Switch_B1.c: 310: if(Sw->Adj)
  6230  113A  0A6D               	incf	_Sw,w
  6231  113B  0086               	movwf	6
  6232  113C  3001               	movlw	1	; select bank2/3
  6233  113D  0087               	movwf	7
  6234  113E  1C01               	btfss	1,0
  6235  113F  0008               	return
  6236                           
  6237                           ;Switch_B1.c: 311: {
  6238                           ;Switch_B1.c: 312: Sw->Adj=0;
  6239  1140  0A6D               	incf	_Sw,w
  6240  1141  0086               	movwf	6
  6241  1142  3001               	movlw	1	; select bank2/3
  6242  1143  0087               	movwf	7
  6243  1144  1001               	bcf	1,0
  6244                           
  6245                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6246  1145  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6247  1146  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6248  1147  0864               	movf	Sw_DimmerOffFunc@sw,w
  6249  1148  31A4  2497  3191   	fcall	_setDimmerLights_TriggerAdj
  6250                           
  6251                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6252  114B  0020               	movlb	0	; select bank0
  6253  114C  01A2               	clrf	setDimmerLights_AdjGo@command
  6254  114D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6255  114E  31A4  2487  3191   	fcall	_setDimmerLights_AdjGo
  6256                           
  6257                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6258  1151  0020               	movlb	0	; select bank0
  6259  1152  0864               	movf	Sw_DimmerOffFunc@sw,w
  6260  1153  3E1A               	addlw	26
  6261  1154  076F               	addwf	_Product,w
  6262  1155  00E2               	movwf	??_Sw_DimmerOffFunc
  6263  1156  0862               	movf	??_Sw_DimmerOffFunc,w
  6264  1157  0086               	movwf	6
  6265  1158  3001               	movlw	1	; select bank2/3
  6266  1159  0087               	movwf	7
  6267  115A  0801               	movf	1,w
  6268  115B  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6269  115C  086F               	movf	_Product,w
  6270  115D  3E11               	addlw	17
  6271  115E  0086               	movwf	6
  6272  115F  3001               	movlw	1	; select bank2/3
  6273  1160  0087               	movwf	7
  6274  1161  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6275  1162  0081               	movwf	1
  6276                           
  6277                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6278  1163  086D               	movf	_Sw,w
  6279  1164  0086               	movwf	6
  6280  1165  3001               	movlw	1	; select bank2/3
  6281  1166  0087               	movwf	7
  6282  1167  3000               	movlw	0
  6283  1168  1B01               	btfsc	1,6
  6284  1169  3001               	movlw	1
  6285  116A  00DD               	movwf	setRF_DimmerLights@on
  6286  116B  0864               	movf	Sw_DimmerOffFunc@sw,w
  6287  116C  319F  2795  3191   	fcall	_setRF_DimmerLights
  6288                           
  6289                           ;Switch_B1.c: 318: setTxData(1);
  6290  116F  3001               	movlw	1
  6291  1170  3189  21BD         	fcall	_setTxData
  6292                           
  6293                           ;Switch_B1.c: 320: }
  6294                           ;Switch_B1.c: 321: }
  6295  1172  0008               	return
  6296  1173                     l9404:	
  6297                           
  6298                           ;Switch_B1.c: 322: else
  6299                           ;Switch_B1.c: 323: {
  6300                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6301  1173  0020               	movlb	0	; select bank0
  6302  1174  01A2               	clrf	setDimmerLights_Trigger@command
  6303  1175  0AA2               	incf	setDimmerLights_Trigger@command,f
  6304  1176  0864               	movf	Sw_DimmerOffFunc@sw,w
  6305  1177  31A4  2447  3191   	fcall	_setDimmerLights_Trigger
  6306                           
  6307                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6308  117A  0020               	movlb	0	; select bank0
  6309  117B  01A2               	clrf	setDimmerLights_Switch@command
  6310  117C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6311  117D  31A4  2437  3191   	fcall	_setDimmerLights_Switch
  6312                           
  6313                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6314  1180  0020               	movlb	0	; select bank0
  6315  1181  01A3               	clrf	setDelayOff_GO@command
  6316  1182  01A4               	clrf	setDelayOff_GO@value
  6317  1183  0864               	movf	Sw_DimmerOffFunc@sw,w
  6318  1184  319E  260F  3191   	fcall	_setDelayOff_GO
  6319                           
  6320                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6321  1187  0020               	movlb	0	; select bank0
  6322  1188  086D               	movf	_Sw,w
  6323  1189  0086               	movwf	6
  6324  118A  3001               	movlw	1	; select bank2/3
  6325  118B  0087               	movwf	7
  6326  118C  3000               	movlw	0
  6327  118D  1B01               	btfsc	1,6
  6328  118E  3001               	movlw	1
  6329  118F  00DD               	movwf	setRF_DimmerLights@on
  6330  1190  0864               	movf	Sw_DimmerOffFunc@sw,w
  6331  1191  319F  2795  3191   	fcall	_setRF_DimmerLights
  6332                           
  6333                           ;Switch_B1.c: 329: setTxData(1);
  6334  1194  3001               	movlw	1
  6335  1195  3189  21BD         	fcall	_setTxData
  6336  1197  0008               	return
  6337  1198                     __end_of_Sw_DimmerOffFunc:	
  6338                           
  6339                           	psect	text15
  6340  1B31                     __ptext15:	
  6341 ;; *************** function _Sw_DimmerAdjFunc *****************
  6342 ;; Defined at:
  6343 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  sw              1    wreg     unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  sw              1    5[BANK0 ] unsigned char 
  6348 ;;  Idle            1    4[BANK0 ] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        2 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    6
  6365 ;; This function calls:
  6366 ;;		_setDimmerLights_AdjGo
  6367 ;;		_setDimmerLights_TriggerAdj
  6368 ;;		_setRFSW_Status
  6369 ;; This function is called by:
  6370 ;;		_setSw_Main
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _Sw_DimmerAdjFunc
  6376  1B31                     _Sw_DimmerAdjFunc:	
  6377                           
  6378                           ;incstack = 0
  6379                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6380                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6381  1B31  0020               	movlb	0	; select bank0
  6382  1B32  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6383                           
  6384                           ;Switch_B1.c: 336: char Idle=1;
  6385  1B33  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6386  1B34  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6387                           
  6388                           ;Switch_B1.c: 353: if(sw == 1)
  6389  1B35  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6390  1B36  3A01               	xorlw	1
  6391  1B37  1D03               	skipz
  6392  1B38  2B3B               	goto	l9370
  6393                           
  6394                           ;Switch_B1.c: 354: {
  6395                           ;Switch_B1.c: 355: Idle=(DimmerLights22->AdjGo)?0:1;
  6396  1B39  087A               	movf	_DimmerLights22,w
  6397  1B3A  2B40               	goto	L4
  6398  1B3B                     l9370:	
  6399                           ;Switch_B1.c: 356: }
  6400                           
  6401                           
  6402                           ;Switch_B1.c: 357: else if(sw == 2)
  6403  1B3B  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6404  1B3C  3A02               	xorlw	2
  6405  1B3D  1D03               	skipz
  6406  1B3E  2B4B               	goto	l9374
  6407                           
  6408                           ;Switch_B1.c: 358: {
  6409                           ;Switch_B1.c: 359: Idle=(DimmerLights11->AdjGo)?0:1;
  6410  1B3F  0879               	movf	_DimmerLights11,w
  6411  1B40                     L4:	
  6412  1B40  3E09               	addlw	9
  6413  1B41  0086               	movwf	6
  6414  1B42  3001               	movlw	1	; select bank2/3
  6415  1B43  0087               	movwf	7
  6416  1B44  1003               	clrc
  6417  1B45  1D01               	btfss	1,2
  6418  1B46  1403               	setc
  6419  1B47  3000               	movlw	0
  6420  1B48  1803               	btfsc	3,0
  6421  1B49  3001               	movlw	1
  6422  1B4A  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6423  1B4B                     l9374:	
  6424                           
  6425                           ;Switch_B1.c: 360: }
  6426                           ;Switch_B1.c: 363: if(Idle)
  6427  1B4B  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6428  1B4C  1903               	btfsc	3,2
  6429  1B4D  0008               	return
  6430                           
  6431                           ;Switch_B1.c: 364: {
  6432                           ;Switch_B1.c: 365: if(Sw->Flag)
  6433  1B4E  086D               	movf	_Sw,w
  6434  1B4F  0086               	movwf	6
  6435  1B50  3001               	movlw	1	; select bank2/3
  6436  1B51  0087               	movwf	7
  6437  1B52  1F81               	btfss	1,7
  6438  1B53  0008               	return
  6439                           
  6440                           ;Switch_B1.c: 366: {
  6441                           ;Switch_B1.c: 367: Sw->Adj=1;
  6442  1B54  0A6D               	incf	_Sw,w
  6443  1B55  0086               	movwf	6
  6444  1B56  3001               	movlw	1	; select bank2/3
  6445  1B57  0087               	movwf	7
  6446  1B58  1401               	bsf	1,0
  6447                           
  6448                           ;Switch_B1.c: 368: Sw->Status=1;
  6449  1B59  086D               	movf	_Sw,w
  6450  1B5A  0086               	movwf	6
  6451  1B5B  3001               	movlw	1	; select bank2/3
  6452  1B5C  0087               	movwf	7
  6453  1B5D  1701               	bsf	1,6
  6454                           
  6455                           ;Switch_B1.c: 369: setRFSW_Status(sw,1);
  6456  1B5E  01A2               	clrf	setRFSW_Status@command
  6457  1B5F  0AA2               	incf	setRFSW_Status@command,f
  6458  1B60  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6459  1B61  31A4  2409  319B   	fcall	_setRFSW_Status
  6460                           
  6461                           ;Switch_B1.c: 371: setDimmerLights_TriggerAdj(sw,1);
  6462  1B64  0020               	movlb	0	; select bank0
  6463  1B65  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6464  1B66  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6465  1B67  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6466  1B68  31A4  2497  319B   	fcall	_setDimmerLights_TriggerAdj
  6467                           
  6468                           ;Switch_B1.c: 372: setDimmerLights_AdjGo(sw,1);
  6469  1B6B  0020               	movlb	0	; select bank0
  6470  1B6C  01A2               	clrf	setDimmerLights_AdjGo@command
  6471  1B6D  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6472  1B6E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6473  1B6F  31A4  2487         	fcall	_setDimmerLights_AdjGo
  6474  1B71  0020               	movlb	0	; select bank0
  6475  1B72  0008               	return
  6476  1B73                     __end_of_Sw_DimmerAdjFunc:	
  6477                           
  6478                           	psect	text16
  6479  2497                     __ptext16:	
  6480 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6481 ;; Defined at:
  6482 ;;		line 450 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  lights          1    wreg     unsigned char 
  6485 ;;  command         1    2[BANK0 ] unsigned char 
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  lights          1    3[BANK0 ] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6497 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;Total ram usage:        2 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    5
  6504 ;; This function calls:
  6505 ;;		_DimmerLightsPointSelect
  6506 ;; This function is called by:
  6507 ;;		_Sw_DimmerOffFunc
  6508 ;;		_Sw_DimmerAdjFunc
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _setDimmerLights_TriggerAdj
  6514  2497                     _setDimmerLights_TriggerAdj:	
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6518                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6519  2497  0020               	movlb	0	; select bank0
  6520  2498  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6521                           
  6522                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6523  2499  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6524  249A  31A4  24B8         	fcall	_DimmerLightsPointSelect
  6525                           
  6526                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6527  249C  0020               	movlb	0	; select bank0
  6528  249D  086C               	movf	_DimmerLights,w
  6529  249E  3E09               	addlw	9
  6530  249F  0086               	movwf	6
  6531  24A0  3001               	movlw	1	; select bank2/3
  6532  24A1  0087               	movwf	7
  6533  24A2  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6534  24A3  1181               	bcf	1,3
  6535  24A4  1D03               	skipz
  6536  24A5  1581               	bsf	1,3
  6537  24A6  0008               	return
  6538  24A7                     __end_of_setDimmerLights_TriggerAdj:	
  6539                           
  6540                           	psect	text17
  6541  2487                     __ptext17:	
  6542 ;; *************** function _setDimmerLights_AdjGo *****************
  6543 ;; Defined at:
  6544 ;;		line 440 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;  lights          1    wreg     unsigned char 
  6547 ;;  command         1    2[BANK0 ] unsigned char 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  lights          1    3[BANK0 ] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;		None               void
  6552 ;; Registers used:
  6553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6559 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;Total ram usage:        2 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    5
  6566 ;; This function calls:
  6567 ;;		_DimmerLightsPointSelect
  6568 ;; This function is called by:
  6569 ;;		_Sw_DimmerOffFunc
  6570 ;;		_Sw_DimmerAdjFunc
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _setDimmerLights_AdjGo
  6576  2487                     _setDimmerLights_AdjGo:	
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6580                           ;setDimmerLights_AdjGo@lights stored from wreg
  6581  2487  0020               	movlb	0	; select bank0
  6582  2488  00A3               	movwf	setDimmerLights_AdjGo@lights
  6583                           
  6584                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6585  2489  0823               	movf	setDimmerLights_AdjGo@lights,w
  6586  248A  31A4  24B8         	fcall	_DimmerLightsPointSelect
  6587                           
  6588                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6589  248C  0020               	movlb	0	; select bank0
  6590  248D  086C               	movf	_DimmerLights,w
  6591  248E  3E09               	addlw	9
  6592  248F  0086               	movwf	6
  6593  2490  3001               	movlw	1	; select bank2/3
  6594  2491  0087               	movwf	7
  6595  2492  0822               	movf	setDimmerLights_AdjGo@command,w
  6596  2493  1101               	bcf	1,2
  6597  2494  1D03               	skipz
  6598  2495  1501               	bsf	1,2
  6599  2496  0008               	return
  6600  2497                     __end_of_setDimmerLights_AdjGo:	
  6601                           
  6602                           	psect	text18
  6603  23E0                     __ptext18:	
  6604 ;; *************** function _Switch_Initialization *****************
  6605 ;; Defined at:
  6606 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;		None               void
  6613 ;; Registers used:
  6614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    7
  6627 ;; This function calls:
  6628 ;;		_TouchPower
  6629 ;;		_setSw_Initialization
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _Switch_Initialization
  6637  23E0                     _Switch_Initialization:	
  6638                           
  6639                           ;Switch_B1.c: 40: TouchPower();
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6643  23E0  3190  2000  31A3   	fcall	_TouchPower
  6644                           
  6645                           ;Switch_B1.c: 42: WPUB1=0;
  6646  23E3  0024               	movlb	4	; select bank4
  6647  23E4  108D               	bcf	13,1	;volatile
  6648                           
  6649                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6650  23E5  3001               	movlw	1
  6651  23E6  31A2  22ED  31A3   	fcall	_setSw_Initialization
  6652                           
  6653                           ;Switch_B1.c: 54: setSw_Initialization(2);
  6654  23E9  3002               	movlw	2
  6655  23EA  31A2  22ED         	fcall	_setSw_Initialization
  6656  23EC  0008               	return
  6657  23ED                     __end_of_Switch_Initialization:	
  6658                           
  6659                           	psect	text19
  6660  22ED                     __ptext19:	
  6661 ;; *************** function _setSw_Initialization *****************
  6662 ;; Defined at:
  6663 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  sw              1    wreg     unsigned char 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  sw              1    4[BANK0 ] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        1 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    6
  6684 ;; This function calls:
  6685 ;;		_setLED
  6686 ;; This function is called by:
  6687 ;;		_Switch_Initialization
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _setSw_Initialization
  6693  22ED                     _setSw_Initialization:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6697                           ;setSw_Initialization@sw stored from wreg
  6698  22ED  0020               	movlb	0	; select bank0
  6699  22EE  00A4               	movwf	setSw_Initialization@sw
  6700                           
  6701                           ;Switch_B1.c: 80: setLED(sw,1);
  6702  22EF  01A2               	clrf	setLED@command
  6703  22F0  0AA2               	incf	setLED@command,f
  6704  22F1  0824               	movf	setSw_Initialization@sw,w
  6705  22F2  3188  2002         	fcall	_setLED
  6706  22F4  0008               	return
  6707  22F5                     __end_of_setSw_Initialization:	
  6708                           
  6709                           	psect	text20
  6710  1000                     __ptext20:	
  6711 ;; *************** function _TouchPower *****************
  6712 ;; Defined at:
  6713 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;		None
  6718 ;; Return value:  Size  Location     Type
  6719 ;;		None               void
  6720 ;; Registers used:
  6721 ;;		None
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;Total ram usage:        0 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    4
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_Switch_Initialization
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           
  6742                           ;psect for function _TouchPower
  6743  1000                     _TouchPower:	
  6744  1000                     l2932:	
  6745                           ;Switch_B1.c: 11: while(!RC5)
  6746                           
  6747                           ;incstack = 0
  6748                           ; Regs used in _TouchPower: []
  6749                           
  6750  1000  0020               	movlb	0	; select bank0
  6751  1001  1A8E               	btfsc	14,5	;volatile
  6752  1002  0008               	return
  6753                           
  6754                           ;Switch_B1.c: 12: RC5=1;
  6755  1003  168E               	bsf	14,5	;volatile
  6756  1004  2800               	goto	l2932
  6757  1005                     __end_of_TouchPower:	
  6758                           
  6759                           	psect	text21
  6760  22A3                     __ptext21:	
  6761 ;; *************** function _RF_Main *****************
  6762 ;; Defined at:
  6763 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;		None               void
  6770 ;; Registers used:
  6771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;Total ram usage:        0 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:   13
  6784 ;; This function calls:
  6785 ;;		_setRF_Main
  6786 ;; This function is called by:
  6787 ;;		_main
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           
  6792                           ;psect for function _RF_Main
  6793  22A3                     _RF_Main:	
  6794                           
  6795                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6796                           
  6797                           ;incstack = 0
  6798                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6799  22A3  3001               	movlw	1
  6800  22A4  3194  2483         	fcall	_setRF_Main
  6801  22A6  0008               	return
  6802  22A7                     __end_of_RF_Main:	
  6803                           
  6804                           	psect	text22
  6805  1483                     __ptext22:	
  6806 ;; *************** function _setRF_Main *****************
  6807 ;; Defined at:
  6808 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  rf              1    wreg     unsigned char 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  rf              1   74[BANK0 ] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;		None               void
  6815 ;; Registers used:
  6816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;Total ram usage:        3 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:   12
  6829 ;; This function calls:
  6830 ;;		_CC2500_RxData
  6831 ;;		_CC2500_TxData
  6832 ;;		_CC2500_WriteCommand
  6833 ;;		_RF_RxDisable
  6834 ;;		_RfPointSelect
  6835 ;;		_getRxData
  6836 ;;		_setINT_GO
  6837 ;; This function is called by:
  6838 ;;		_RF_Main
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function _setRF_Main
  6844  1483                     _setRF_Main:	
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6848                           ;setRF_Main@rf stored from wreg
  6849  1483  0020               	movlb	0	; select bank0
  6850  1484  00EA               	movwf	setRF_Main@rf
  6851                           
  6852                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6853  1485  086A               	movf	setRF_Main@rf,w
  6854  1486  31A3  232F  3194   	fcall	_RfPointSelect
  6855                           
  6856                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6857  1489  087C               	movf	_RF,w
  6858  148A  0086               	movwf	6
  6859  148B  0187               	clrf	7
  6860  148C  1C01               	btfss	1,0
  6861  148D  0008               	return
  6862                           
  6863                           ;RF_Control_B1.c: 62: {
  6864                           ;RF_Control_B1.c: 69: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  6865  148E  0020               	movlb	0	; select bank0
  6866  148F  01EB               	clrf	_setRF_Main$4441
  6867  1490  1F0C               	btfss	12,6	;volatile
  6868  1491  1A0C               	btfsc	12,4	;volatile
  6869  1492  2C97               	goto	l9742
  6870  1493  180C               	btfsc	12,0	;volatile
  6871  1494  2C97               	goto	l9742
  6872  1495  1C8D               	btfss	13,1	;volatile
  6873  1496  2C9E               	goto	l9746
  6874  1497                     l9742:	
  6875  1497  087C               	movf	_RF,w
  6876  1498  0086               	movwf	6
  6877  1499  0187               	clrf	7
  6878  149A  1B01               	btfsc	1,6
  6879  149B  2C9E               	goto	l9746
  6880  149C  01EB               	clrf	_setRF_Main$4441
  6881  149D  0AEB               	incf	_setRF_Main$4441,f
  6882  149E                     l9746:	
  6883  149E  087C               	movf	_RF,w
  6884  149F  0086               	movwf	6
  6885  14A0  0187               	clrf	7
  6886  14A1  086B               	movf	_setRF_Main$4441,w
  6887  14A2  1381               	bcf	1,7
  6888  14A3  1D03               	skipz
  6889  14A4  1781               	bsf	1,7
  6890                           
  6891                           ;RF_Control_B1.c: 77: if(!RF->Key)
  6892  14A5  087C               	movf	_RF,w
  6893  14A6  0086               	movwf	6
  6894  14A7  0187               	clrf	7
  6895  14A8  1B81               	btfsc	1,7
  6896  14A9  2CD6               	goto	l9768
  6897                           
  6898                           ;RF_Control_B1.c: 78: {
  6899                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  6900  14AA  087C               	movf	_RF,w
  6901  14AB  0086               	movwf	6
  6902  14AC  0187               	clrf	7
  6903  14AD  1C81               	btfss	1,1
  6904  14AE  2CBB               	goto	l9756
  6905                           
  6906                           ;RF_Control_B1.c: 80: {
  6907                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  6908  14AF  087C               	movf	_RF,w
  6909  14B0  0086               	movwf	6
  6910  14B1  0187               	clrf	7
  6911  14B2  1081               	bcf	1,1
  6912                           
  6913                           ;RF_Control_B1.c: 82: CC2500_RxData();
  6914  14B3  319E  26CC  3194   	fcall	_CC2500_RxData
  6915                           
  6916                           ;RF_Control_B1.c: 88: getRxData(1);
  6917  14B6  3001               	movlw	1
  6918  14B7  319D  250B  3194   	fcall	_getRxData
  6919                           
  6920                           ;RF_Control_B1.c: 91: }
  6921  14BA  2CDA               	goto	l9770
  6922  14BB                     l9756:	
  6923                           
  6924                           ;RF_Control_B1.c: 92: else
  6925                           ;RF_Control_B1.c: 93: {
  6926                           ;RF_Control_B1.c: 94: if(!RF->TransceiveGO)
  6927  14BB  087C               	movf	_RF,w
  6928  14BC  0086               	movwf	6
  6929  14BD  0187               	clrf	7
  6930  14BE  1901               	btfsc	1,2
  6931  14BF  2CDA               	goto	l9770
  6932                           
  6933                           ;RF_Control_B1.c: 95: {
  6934                           ;RF_Control_B1.c: 97: if(!RF->RxStatus)
  6935  14C0  087C               	movf	_RF,w
  6936  14C1  0086               	movwf	6
  6937  14C2  0187               	clrf	7
  6938  14C3  1981               	btfsc	1,3
  6939  14C4  2CDA               	goto	l9770
  6940                           
  6941                           ;RF_Control_B1.c: 98: {
  6942                           ;RF_Control_B1.c: 99: RF->RxStatus=1;
  6943  14C5  087C               	movf	_RF,w
  6944  14C6  0086               	movwf	6
  6945  14C7  0187               	clrf	7
  6946  14C8  1581               	bsf	1,3
  6947                           
  6948                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  6949  14C9  3036               	movlw	54
  6950  14CA  31A4  2427  3194   	fcall	_CC2500_WriteCommand
  6951                           
  6952                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x34);
  6953  14CD  3034               	movlw	52
  6954  14CE  31A4  2427  3194   	fcall	_CC2500_WriteCommand
  6955                           
  6956                           ;RF_Control_B1.c: 102: setINT_GO(1);
  6957  14D1  3001               	movlw	1
  6958  14D2  31A3  2306  3194   	fcall	_setINT_GO
  6959                           
  6960                           ;RF_Control_B1.c: 103: }
  6961                           ;RF_Control_B1.c: 105: }
  6962                           ;RF_Control_B1.c: 106: }
  6963                           ;RF_Control_B1.c: 107: }
  6964  14D5  2CDA               	goto	l9770
  6965  14D6                     l9768:	
  6966                           
  6967                           ;RF_Control_B1.c: 108: else
  6968                           ;RF_Control_B1.c: 109: {
  6969                           ;RF_Control_B1.c: 110: RF_RxDisable(1);
  6970  14D6  3001               	movlw	1
  6971  14D7  31A7  27AF  3194   	fcall	_RF_RxDisable
  6972  14DA                     l9770:	
  6973                           
  6974                           ;RF_Control_B1.c: 111: }
  6975                           ;RF_Control_B1.c: 112: if(RF->TransceiveGO)
  6976  14DA  087C               	movf	_RF,w
  6977  14DB  0086               	movwf	6
  6978  14DC  0187               	clrf	7
  6979  14DD  1D01               	btfss	1,2
  6980  14DE  0008               	return
  6981                           
  6982                           ;RF_Control_B1.c: 113: {
  6983                           ;RF_Control_B1.c: 114: RF_RxDisable(1);
  6984  14DF  3001               	movlw	1
  6985  14E0  31A7  27AF  3194   	fcall	_RF_RxDisable
  6986                           
  6987                           ;RF_Control_B1.c: 115: if(!RF->Debounce)
  6988  14E3  087C               	movf	_RF,w
  6989  14E4  0086               	movwf	6
  6990  14E5  0187               	clrf	7
  6991  14E6  1A81               	btfsc	1,5
  6992  14E7  2D00               	goto	l9784
  6993                           
  6994                           ;RF_Control_B1.c: 116: {
  6995                           ;RF_Control_B1.c: 117: RF->DebounceTime++;
  6996  14E8  3001               	movlw	1
  6997  14E9  0020               	movlb	0	; select bank0
  6998  14EA  00E9               	movwf	??_setRF_Main
  6999  14EB  0A7C               	incf	_RF,w
  7000  14EC  0086               	movwf	6
  7001  14ED  0187               	clrf	7
  7002  14EE  0869               	movf	??_setRF_Main,w
  7003  14EF  0781               	addwf	1,f
  7004                           
  7005                           ;RF_Control_B1.c: 118: if(RF->DebounceTime == 25)
  7006  14F0  0A7C               	incf	_RF,w
  7007  14F1  0086               	movwf	6
  7008  14F2  0187               	clrf	7
  7009  14F3  0801               	movf	1,w
  7010  14F4  3A19               	xorlw	25
  7011  14F5  1D03               	skipz
  7012  14F6  0008               	return
  7013                           
  7014                           ;RF_Control_B1.c: 119: {
  7015                           ;RF_Control_B1.c: 120: RF->DebounceTime=0;
  7016  14F7  0A7C               	incf	_RF,w
  7017  14F8  0086               	movwf	6
  7018  14F9  0187               	clrf	7
  7019  14FA  0181               	clrf	1
  7020                           
  7021                           ;RF_Control_B1.c: 121: RF->Debounce=1;
  7022  14FB  087C               	movf	_RF,w
  7023  14FC  0086               	movwf	6
  7024  14FD  0187               	clrf	7
  7025  14FE  1681               	bsf	1,5
  7026                           
  7027                           ;RF_Control_B1.c: 122: }
  7028                           ;RF_Control_B1.c: 123: }
  7029  14FF  0008               	return
  7030  1500                     l9784:	
  7031                           
  7032                           ;RF_Control_B1.c: 124: else
  7033                           ;RF_Control_B1.c: 125: {
  7034                           ;RF_Control_B1.c: 126: RF->Debounce=0;
  7035  1500  087C               	movf	_RF,w
  7036  1501  0086               	movwf	6
  7037  1502  0187               	clrf	7
  7038  1503  1281               	bcf	1,5
  7039                           
  7040                           ;RF_Control_B1.c: 127: RF->TransceiveGO=0;
  7041  1504  087C               	movf	_RF,w
  7042  1505  0086               	movwf	6
  7043  1506  0187               	clrf	7
  7044  1507  1101               	bcf	1,2
  7045                           
  7046                           ;RF_Control_B1.c: 128: CC2500_TxData();
  7047  1508  319C  243C         	fcall	_CC2500_TxData
  7048  150A  0008               	return
  7049  150B                     __end_of_setRF_Main:	
  7050                           
  7051                           	psect	text23
  7052  1D0B                     __ptext23:	
  7053 ;; *************** function _getRxData *****************
  7054 ;; Defined at:
  7055 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  rf              1    wreg     unsigned char 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  rf              1   72[BANK0 ] unsigned char 
  7060 ;;  i               1    0        unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;		None               void
  7063 ;; Registers used:
  7064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;Total ram usage:        1 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:   11
  7077 ;; This function calls:
  7078 ;;		_RfPointSelect
  7079 ;;		_setControl_Lights_Table
  7080 ;;		_setLog_Code
  7081 ;; This function is called by:
  7082 ;;		_setRF_Main
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function _getRxData
  7088  1D0B                     _getRxData:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7092                           ;getRxData@rf stored from wreg
  7093  1D0B  0020               	movlb	0	; select bank0
  7094  1D0C  00E8               	movwf	getRxData@rf
  7095                           
  7096                           ;RF_Control_B1.c: 216: unsigned char i;
  7097                           ;RF_Control_B1.c: 217: RfPointSelect(rf);
  7098  1D0D  0868               	movf	getRxData@rf,w
  7099  1D0E  31A3  232F  319D   	fcall	_RfPointSelect
  7100                           
  7101                           ;RF_Control_B1.c: 218: if(RF->Learn)
  7102  1D11  087C               	movf	_RF,w
  7103  1D12  0086               	movwf	6
  7104  1D13  0187               	clrf	7
  7105  1D14  1F01               	btfss	1,6
  7106  1D15  2D22               	goto	l9284
  7107                           
  7108                           ;RF_Control_B1.c: 219: {
  7109                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7110  1D16  0021               	movlb	1	; select bank1
  7111  1D17  08A0               	movf	_RF_Data^(0+128),f
  7112  1D18  1D03               	skipz
  7113  1D19  0008               	return
  7114  1D1A  0821               	movf	(_RF_Data^(0+128)+1),w
  7115  1D1B  3A64               	xorlw	100
  7116  1D1C  1D03               	skipz
  7117  1D1D  0008               	return
  7118                           
  7119                           ;RF_Control_B1.c: 221: {
  7120                           ;RF_Control_B1.c: 222: setLog_Code(1);
  7121  1D1E  3001               	movlw	1
  7122  1D1F  3190  2005         	fcall	_setLog_Code
  7123                           
  7124                           ;RF_Control_B1.c: 223: }
  7125                           ;RF_Control_B1.c: 224: }
  7126  1D21  0008               	return
  7127  1D22                     l9284:	
  7128                           
  7129                           ;RF_Control_B1.c: 225: else
  7130                           ;RF_Control_B1.c: 226: {
  7131                           ;RF_Control_B1.c: 227: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7132  1D22  0021               	movlb	1	; select bank1
  7133  1D23  08A0               	movf	_RF_Data^(0+128),f
  7134  1D24  1D03               	skipz
  7135  1D25  0008               	return
  7136  1D26  0821               	movf	(_RF_Data^(0+128)+1),w
  7137  1D27  3A02               	xorlw	2
  7138  1D28  1D03               	skipz
  7139  1D29  0008               	return
  7140                           
  7141                           ;RF_Control_B1.c: 228: {
  7142                           ;RF_Control_B1.c: 229: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7143  1D2A  082C               	movf	(_RF_Data^(0+128)+12),w
  7144  1D2B  3AFF               	xorlw	255
  7145  1D2C  1D03               	skipz
  7146  1D2D  2D38               	goto	l9296
  7147  1D2E  082D               	movf	(_RF_Data^(0+128)+13),w
  7148  1D2F  3AFF               	xorlw	255
  7149  1D30  1D03               	skipz
  7150  1D31  2D38               	goto	l9296
  7151  1D32  082E               	movf	(_RF_Data^(0+128)+14),w
  7152  1D33  3AFF               	xorlw	255
  7153  1D34  1D03               	skipz
  7154  1D35  2D38               	goto	l9296
  7155                           
  7156                           ;RF_Control_B1.c: 230: {
  7157                           ;RF_Control_B1.c: 231: __nop();
  7158  1D36  0000               	nop
  7159                           
  7160                           ;RF_Control_B1.c: 232: }
  7161  1D37  0008               	return
  7162  1D38                     l9296:	
  7163                           
  7164                           ;RF_Control_B1.c: 233: else
  7165                           ;RF_Control_B1.c: 234: {
  7166                           ;RF_Control_B1.c: 235: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7167  1D38  0020               	movlb	0	; select bank0
  7168  1D39  086F               	movf	_Product,w
  7169  1D3A  3E0C               	addlw	12
  7170  1D3B  0086               	movwf	6
  7171  1D3C  3001               	movlw	1	; select bank2/3
  7172  1D3D  0087               	movwf	7
  7173  1D3E  0021               	movlb	1	; select bank1
  7174  1D3F  082C               	movf	(_RF_Data^(0+128)+12),w
  7175  1D40  0601               	xorwf	1,w
  7176  1D41  1D03               	skipz
  7177  1D42  0008               	return
  7178  1D43  0020               	movlb	0	; select bank0
  7179  1D44  086F               	movf	_Product,w
  7180  1D45  3E0D               	addlw	13
  7181  1D46  0086               	movwf	6
  7182  1D47  3001               	movlw	1	; select bank2/3
  7183  1D48  0087               	movwf	7
  7184  1D49  0021               	movlb	1	; select bank1
  7185  1D4A  082D               	movf	(_RF_Data^(0+128)+13),w
  7186  1D4B  0601               	xorwf	1,w
  7187  1D4C  1D03               	skipz
  7188  1D4D  0008               	return
  7189  1D4E  0020               	movlb	0	; select bank0
  7190  1D4F  086F               	movf	_Product,w
  7191  1D50  3E0E               	addlw	14
  7192  1D51  0086               	movwf	6
  7193  1D52  3001               	movlw	1	; select bank2/3
  7194  1D53  0087               	movwf	7
  7195  1D54  0021               	movlb	1	; select bank1
  7196  1D55  082E               	movf	(_RF_Data^(0+128)+14),w
  7197  1D56  0601               	xorwf	1,w
  7198  1D57  1D03               	skipz
  7199  1D58  0008               	return
  7200                           
  7201                           ;RF_Control_B1.c: 236: {
  7202                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  7203  1D59  3001               	movlw	1
  7204  1D5A  3195  259B         	fcall	_setControl_Lights_Table
  7205                           
  7206                           ;RF_Control_B1.c: 246: {
  7207                           ;RF_Control_B1.c: 247: ;
  7208                           
  7209                           ;RF_Control_B1.c: 242: {
  7210                           ;RF_Control_B1.c: 243: ;
  7211                           ;RF_Control_B1.c: 244: }
  7212                           
  7213                           ;RF_Control_B1.c: 238: }
  7214                           ;RF_Control_B1.c: 239: }
  7215                           ;RF_Control_B1.c: 240: }
  7216  1D5C  0008               	return
  7217  1D5D                     __end_of_getRxData:	
  7218                           
  7219                           	psect	text24
  7220  1005                     __ptext24:	
  7221 ;; *************** function _setLog_Code *****************
  7222 ;; Defined at:
  7223 ;;		line 256 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  rf              1    wreg     unsigned char 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  rf              1   11[BANK0 ] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;		None               void
  7230 ;; Registers used:
  7231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;Total ram usage:        2 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    6
  7244 ;; This function calls:
  7245 ;;		_RfPointSelect
  7246 ;;		_setBuz
  7247 ;; This function is called by:
  7248 ;;		_getRxData
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _setLog_Code
  7254  1005                     _setLog_Code:	
  7255                           
  7256                           ;incstack = 0
  7257                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7258                           ;setLog_Code@rf stored from wreg
  7259  1005  0020               	movlb	0	; select bank0
  7260  1006  00AB               	movwf	setLog_Code@rf
  7261                           
  7262                           ;RF_Control_B1.c: 258: RfPointSelect(rf);
  7263  1007  082B               	movf	setLog_Code@rf,w
  7264  1008  31A3  232F  3190   	fcall	_RfPointSelect
  7265                           
  7266                           ;RF_Control_B1.c: 259: Product->Data[12]=RF_Data[12];
  7267  100B  0021               	movlb	1	; select bank1
  7268  100C  082C               	movf	(_RF_Data^(0+128)+12),w
  7269  100D  0020               	movlb	0	; select bank0
  7270  100E  00AA               	movwf	??_setLog_Code
  7271  100F  086F               	movf	_Product,w
  7272  1010  3E0C               	addlw	12
  7273  1011  0086               	movwf	6
  7274  1012  3001               	movlw	1	; select bank2/3
  7275  1013  0087               	movwf	7
  7276  1014  082A               	movf	??_setLog_Code,w
  7277  1015  0081               	movwf	1
  7278                           
  7279                           ;RF_Control_B1.c: 260: Product->Data[13]=RF_Data[13];
  7280  1016  0021               	movlb	1	; select bank1
  7281  1017  082D               	movf	(_RF_Data^(0+128)+13),w
  7282  1018  0020               	movlb	0	; select bank0
  7283  1019  00AA               	movwf	??_setLog_Code
  7284  101A  086F               	movf	_Product,w
  7285  101B  3E0D               	addlw	13
  7286  101C  0086               	movwf	6
  7287  101D  3001               	movlw	1	; select bank2/3
  7288  101E  0087               	movwf	7
  7289  101F  082A               	movf	??_setLog_Code,w
  7290  1020  0081               	movwf	1
  7291                           
  7292                           ;RF_Control_B1.c: 261: Product->Data[14]=RF_Data[14];
  7293  1021  0021               	movlb	1	; select bank1
  7294  1022  082E               	movf	(_RF_Data^(0+128)+14),w
  7295  1023  0020               	movlb	0	; select bank0
  7296  1024  00AA               	movwf	??_setLog_Code
  7297  1025  086F               	movf	_Product,w
  7298  1026  3E0E               	addlw	14
  7299  1027  0086               	movwf	6
  7300  1028  3001               	movlw	1	; select bank2/3
  7301  1029  0087               	movwf	7
  7302  102A  082A               	movf	??_setLog_Code,w
  7303  102B  0081               	movwf	1
  7304                           
  7305                           ;RF_Control_B1.c: 262: setBuz(1,100);
  7306  102C  3064               	movlw	100
  7307  102D  00A6               	movwf	setBuz@time
  7308  102E  3000               	movlw	0
  7309  102F  00A7               	movwf	setBuz@time+1
  7310  1030  3001               	movlw	1
  7311  1031  3192  220A  3190   	fcall	_setBuz
  7312                           
  7313                           ;RF_Control_B1.c: 263: RF->Learn=0;
  7314  1034  087C               	movf	_RF,w
  7315  1035  0086               	movwf	6
  7316  1036  0187               	clrf	7
  7317  1037  1301               	bcf	1,6
  7318                           
  7319                           ;RF_Control_B1.c: 264: if(TMain->First)
  7320  1038  0021               	movlb	1	; select bank1
  7321  1039  086C               	movf	_TMain^(0+128),w
  7322  103A  3E03               	addlw	3
  7323  103B  0086               	movwf	6
  7324  103C  3001               	movlw	1	; select bank2/3
  7325  103D  0087               	movwf	7
  7326  103E  1C81               	btfss	1,1
  7327  103F  2846               	goto	l2716
  7328                           
  7329                           ;RF_Control_B1.c: 265: {
  7330                           ;RF_Control_B1.c: 266: Memory->LoopSave=1;
  7331  1040  086B               	movf	_Memory^(0+128),w
  7332  1041  3E22               	addlw	34
  7333  1042  0086               	movwf	6
  7334  1043  3002               	movlw	2	; select bank4/5
  7335  1044  0087               	movwf	7
  7336  1045  1501               	bsf	1,2
  7337  1046                     l2716:	
  7338                           
  7339                           ;RF_Control_B1.c: 267: }
  7340                           ;RF_Control_B1.c: 268: Memory->Modify=1;
  7341  1046  086B               	movf	_Memory^(0+128),w
  7342  1047  3E22               	addlw	34
  7343  1048  0086               	movwf	6
  7344  1049  3002               	movlw	2	; select bank4/5
  7345  104A  0087               	movwf	7
  7346  104B  1401               	bsf	1,0
  7347  104C  0008               	return
  7348  104D                     __end_of_setLog_Code:	
  7349                           
  7350                           	psect	text25
  7351  159B                     __ptext25:	
  7352 ;; *************** function _setControl_Lights_Table *****************
  7353 ;; Defined at:
  7354 ;;		line 271 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  rf              1    wreg     unsigned char 
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;  rf              1   71[BANK0 ] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;		None               void
  7361 ;; Registers used:
  7362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;Total ram usage:        1 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:   10
  7375 ;; This function calls:
  7376 ;;		_RfPointSelect
  7377 ;;		_setBuz
  7378 ;;		_setDimmerLights
  7379 ;;		_setRFSW_AdjControl
  7380 ;;		_setRFSW_Control
  7381 ;;		_setRFSW_Status
  7382 ;;		_setSw_Status
  7383 ;;		_setTxData
  7384 ;; This function is called by:
  7385 ;;		_getRxData
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _setControl_Lights_Table
  7391  159B                     _setControl_Lights_Table:	
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7395                           ;setControl_Lights_Table@rf stored from wreg
  7396  159B  0020               	movlb	0	; select bank0
  7397  159C  00E7               	movwf	setControl_Lights_Table@rf
  7398                           
  7399                           ;RF_Control_B1.c: 273: RfPointSelect(rf);
  7400  159D  0867               	movf	setControl_Lights_Table@rf,w
  7401  159E  31A3  232F  3195   	fcall	_RfPointSelect
  7402                           
  7403                           ;RF_Control_B1.c: 274: if(RF_Data[15] == 0x00)
  7404  15A1  0021               	movlb	1	; select bank1
  7405  15A2  08AF               	movf	(_RF_Data^(0+128)+15),f
  7406  15A3  1D03               	skipz
  7407  15A4  2DEE               	goto	l9108
  7408                           
  7409                           ;RF_Control_B1.c: 275: {
  7410                           ;RF_Control_B1.c: 277: setDimmerLights(1,0);
  7411  15A5  0020               	movlb	0	; select bank0
  7412  15A6  01A4               	clrf	setDimmerLights@status
  7413  15A7  3001               	movlw	1
  7414  15A8  3196  262E  3195   	fcall	_setDimmerLights
  7415                           
  7416                           ;RF_Control_B1.c: 278: setRFSW_Status(1,0);
  7417  15AB  0020               	movlb	0	; select bank0
  7418  15AC  01A2               	clrf	setRFSW_Status@command
  7419  15AD  3001               	movlw	1
  7420  15AE  31A4  2409  3195   	fcall	_setRFSW_Status
  7421                           
  7422                           ;RF_Control_B1.c: 279: setSw_Status(1,0);
  7423  15B1  0020               	movlb	0	; select bank0
  7424  15B2  01A2               	clrf	setSw_Status@command
  7425  15B3  3001               	movlw	1
  7426  15B4  31A4  2418  3195   	fcall	_setSw_Status
  7427                           
  7428                           ;RF_Control_B1.c: 282: setDimmerLights(2,0);
  7429  15B7  0020               	movlb	0	; select bank0
  7430  15B8  01A4               	clrf	setDimmerLights@status
  7431  15B9  3002               	movlw	2
  7432  15BA  3196  262E  3195   	fcall	_setDimmerLights
  7433                           
  7434                           ;RF_Control_B1.c: 283: setRFSW_Status(2,0);
  7435  15BD  0020               	movlb	0	; select bank0
  7436  15BE  01A2               	clrf	setRFSW_Status@command
  7437  15BF  3002               	movlw	2
  7438  15C0  31A4  2409  3195   	fcall	_setRFSW_Status
  7439                           
  7440                           ;RF_Control_B1.c: 284: setSw_Status(2,0);
  7441  15C3  0020               	movlb	0	; select bank0
  7442  15C4  01A2               	clrf	setSw_Status@command
  7443  15C5  3002               	movlw	2
  7444  15C6  31A4  2418  3195   	fcall	_setSw_Status
  7445                           
  7446                           ;RF_Control_B1.c: 292: Product->Data[9]=0;
  7447  15C9  0020               	movlb	0	; select bank0
  7448  15CA  086F               	movf	_Product,w
  7449  15CB  3E09               	addlw	9
  7450  15CC  0086               	movwf	6
  7451  15CD  3001               	movlw	1	; select bank2/3
  7452  15CE  0087               	movwf	7
  7453  15CF  0181               	clrf	1
  7454                           
  7455                           ;RF_Control_B1.c: 293: Product->Data[11]=0;
  7456  15D0  086F               	movf	_Product,w
  7457  15D1  3E0B               	addlw	11
  7458  15D2  0086               	movwf	6
  7459  15D3  3001               	movlw	1	; select bank2/3
  7460  15D4  0087               	movwf	7
  7461  15D5  0181               	clrf	1
  7462                           
  7463                           ;RF_Control_B1.c: 294: Product->Data[15]=0;
  7464  15D6  086F               	movf	_Product,w
  7465  15D7  3E0F               	addlw	15
  7466  15D8  0086               	movwf	6
  7467  15D9  3001               	movlw	1	; select bank2/3
  7468  15DA  0087               	movwf	7
  7469  15DB  0181               	clrf	1
  7470                           
  7471                           ;RF_Control_B1.c: 295: Product->Data[17]=0;
  7472  15DC  086F               	movf	_Product,w
  7473  15DD  3E11               	addlw	17
  7474  15DE  0086               	movwf	6
  7475  15DF  3001               	movlw	1	; select bank2/3
  7476  15E0  0087               	movwf	7
  7477  15E1  0181               	clrf	1
  7478                           
  7479                           ;RF_Control_B1.c: 296: setBuz(1,100);
  7480  15E2  3064               	movlw	100
  7481  15E3  00A6               	movwf	setBuz@time
  7482  15E4  3000               	movlw	0
  7483  15E5  00A7               	movwf	setBuz@time+1
  7484  15E6  3001               	movlw	1
  7485  15E7  3192  220A  3195   	fcall	_setBuz
  7486                           
  7487                           ;RF_Control_B1.c: 297: setTxData(1);
  7488  15EA  3001               	movlw	1
  7489  15EB  3189  21BD         	fcall	_setTxData
  7490                           
  7491                           ;RF_Control_B1.c: 298: }
  7492  15ED  0008               	return
  7493  15EE                     l9108:	
  7494                           
  7495                           ;RF_Control_B1.c: 299: else if(RF_Data[15] == 0x20)
  7496  15EE  0021               	movlb	1	; select bank1
  7497  15EF  082F               	movf	(_RF_Data^(0+128)+15),w
  7498  15F0  3A20               	xorlw	32
  7499  15F1  1D03               	skipz
  7500  15F2  2E0A               	goto	l9114
  7501                           
  7502                           ;RF_Control_B1.c: 300: {
  7503                           ;RF_Control_B1.c: 301: Product->Data[9]=0;
  7504  15F3  0020               	movlb	0	; select bank0
  7505  15F4  086F               	movf	_Product,w
  7506  15F5  3E09               	addlw	9
  7507  15F6  0086               	movwf	6
  7508  15F7  3001               	movlw	1	; select bank2/3
  7509  15F8  0087               	movwf	7
  7510  15F9  0181               	clrf	1
  7511                           
  7512                           ;RF_Control_B1.c: 302: Product->Data[11]=0;
  7513  15FA  086F               	movf	_Product,w
  7514  15FB  3E0B               	addlw	11
  7515  15FC  0086               	movwf	6
  7516  15FD  3001               	movlw	1	; select bank2/3
  7517  15FE  0087               	movwf	7
  7518  15FF  0181               	clrf	1
  7519                           
  7520                           ;RF_Control_B1.c: 303: Product->Data[17]=0;
  7521  1600  086F               	movf	_Product,w
  7522  1601  3E11               	addlw	17
  7523  1602  0086               	movwf	6
  7524  1603  3001               	movlw	1	; select bank2/3
  7525  1604  0087               	movwf	7
  7526  1605  0181               	clrf	1
  7527                           
  7528                           ;RF_Control_B1.c: 304: setTxData(1);
  7529  1606  3001               	movlw	1
  7530  1607  3189  21BD         	fcall	_setTxData
  7531                           
  7532                           ;RF_Control_B1.c: 305: }
  7533  1609  0008               	return
  7534  160A                     l9114:	
  7535                           
  7536                           ;RF_Control_B1.c: 307: else if(RF_Data[15] == 0x01)
  7537  160A  0021               	movlb	1	; select bank1
  7538  160B  082F               	movf	(_RF_Data^(0+128)+15),w
  7539  160C  3A01               	xorlw	1
  7540  160D  1D03               	skipz
  7541  160E  2E13               	goto	l9118
  7542                           
  7543                           ;RF_Control_B1.c: 308: {
  7544                           ;RF_Control_B1.c: 309: setRFSW_Control(1);
  7545  160F  3001               	movlw	1
  7546  1610  3195  250B         	fcall	_setRFSW_Control
  7547                           
  7548                           ;RF_Control_B1.c: 310: }
  7549  1612  0008               	return
  7550  1613                     l9118:	
  7551                           
  7552                           ;RF_Control_B1.c: 312: else if(RF_Data[15] == 0x11)
  7553  1613  0021               	movlb	1	; select bank1
  7554  1614  082F               	movf	(_RF_Data^(0+128)+15),w
  7555  1615  3A11               	xorlw	17
  7556  1616  1D03               	skipz
  7557  1617  2E1C               	goto	l9122
  7558                           
  7559                           ;RF_Control_B1.c: 313: {
  7560                           ;RF_Control_B1.c: 314: setRFSW_AdjControl(1);
  7561  1618  3001               	movlw	1
  7562  1619  319A  22B0         	fcall	_setRFSW_AdjControl
  7563                           
  7564                           ;RF_Control_B1.c: 315: }
  7565  161B  0008               	return
  7566  161C                     l9122:	
  7567                           
  7568                           ;RF_Control_B1.c: 320: else if(RF_Data[15] == 0x02)
  7569  161C  0021               	movlb	1	; select bank1
  7570  161D  082F               	movf	(_RF_Data^(0+128)+15),w
  7571  161E  3A02               	xorlw	2
  7572  161F  1D03               	skipz
  7573  1620  2E25               	goto	l9126
  7574                           
  7575                           ;RF_Control_B1.c: 321: {
  7576                           ;RF_Control_B1.c: 322: setRFSW_Control(2);
  7577  1621  3002               	movlw	2
  7578  1622  3195  250B         	fcall	_setRFSW_Control
  7579                           
  7580                           ;RF_Control_B1.c: 323: }
  7581  1624  0008               	return
  7582  1625                     l9126:	
  7583                           
  7584                           ;RF_Control_B1.c: 325: else if(RF_Data[15] == 0x21)
  7585  1625  0021               	movlb	1	; select bank1
  7586  1626  082F               	movf	(_RF_Data^(0+128)+15),w
  7587  1627  3A21               	xorlw	33
  7588  1628  1D03               	skipz
  7589  1629  0008               	return
  7590                           
  7591                           ;RF_Control_B1.c: 326: {
  7592                           ;RF_Control_B1.c: 327: setRFSW_AdjControl(2);
  7593  162A  3002               	movlw	2
  7594  162B  319A  22B0         	fcall	_setRFSW_AdjControl
  7595  162D  0008               	return
  7596  162E                     __end_of_setControl_Lights_Table:	
  7597                           
  7598                           	psect	text26
  7599  150B                     __ptext26:	
  7600 ;; *************** function _setRFSW_Control *****************
  7601 ;; Defined at:
  7602 ;;		line 368 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  sw              1    wreg     unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  sw              1   67[BANK0 ] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;Total ram usage:        2 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    8
  7623 ;; This function calls:
  7624 ;;		_RfSWPointSelect
  7625 ;;		_setBuz
  7626 ;;		_setDelayOff_GO
  7627 ;;		_setDimmerLights_Switch
  7628 ;;		_setDimmerLights_Trigger
  7629 ;;		_setRF_DimmerLights
  7630 ;;		_setSw_Status
  7631 ;;		_setTxData
  7632 ;; This function is called by:
  7633 ;;		_setControl_Lights_Table
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function _setRFSW_Control
  7639  150B                     _setRFSW_Control:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7643                           ;setRFSW_Control@sw stored from wreg
  7644  150B  0020               	movlb	0	; select bank0
  7645  150C  00E3               	movwf	setRFSW_Control@sw
  7646                           
  7647                           ;RF_Control_B1.c: 370: RfSWPointSelect(sw);
  7648  150D  0863               	movf	setRFSW_Control@sw,w
  7649  150E  31A5  2545  3195   	fcall	_RfSWPointSelect
  7650                           
  7651                           ;RF_Control_B1.c: 371: if(!RFSW->Status)
  7652  1511  0021               	movlb	1	; select bank1
  7653  1512  083C               	movf	_RFSW^(0+128),w
  7654  1513  0086               	movwf	6
  7655  1514  0187               	clrf	7
  7656  1515  1801               	btfsc	1,0
  7657  1516  2D4C               	goto	l8996
  7658                           
  7659                           ;RF_Control_B1.c: 372: {
  7660                           ;RF_Control_B1.c: 373: if(RF_Data[16] == 0x80)
  7661  1517  0830               	movf	(_RF_Data^(0+128)+16),w
  7662  1518  3A80               	xorlw	128
  7663  1519  1D03               	skipz
  7664  151A  2D28               	goto	l8986
  7665                           
  7666                           ;RF_Control_B1.c: 374: {
  7667                           ;RF_Control_B1.c: 375: setDelayOff_GO(sw,1,RF_Data[17]);
  7668  151B  0020               	movlb	0	; select bank0
  7669  151C  01A3               	clrf	setDelayOff_GO@command
  7670  151D  0AA3               	incf	setDelayOff_GO@command,f
  7671  151E  0021               	movlb	1	; select bank1
  7672  151F  0831               	movf	(_RF_Data^(0+128)+17),w
  7673  1520  0020               	movlb	0	; select bank0
  7674  1521  00E2               	movwf	??_setRFSW_Control
  7675  1522  0862               	movf	??_setRFSW_Control,w
  7676  1523  00A4               	movwf	setDelayOff_GO@value
  7677  1524  0863               	movf	setRFSW_Control@sw,w
  7678  1525  319E  260F  3195   	fcall	_setDelayOff_GO
  7679  1528                     l8986:	
  7680                           
  7681                           ;RF_Control_B1.c: 376: }
  7682                           ;RF_Control_B1.c: 377: RFSW->Status=1;
  7683  1528  0021               	movlb	1	; select bank1
  7684  1529  083C               	movf	_RFSW^(0+128),w
  7685  152A  0086               	movwf	6
  7686  152B  0187               	clrf	7
  7687  152C  1401               	bsf	1,0
  7688                           
  7689                           ;RF_Control_B1.c: 378: setSw_Status(sw,1);
  7690  152D  0020               	movlb	0	; select bank0
  7691  152E  01A2               	clrf	setSw_Status@command
  7692  152F  0AA2               	incf	setSw_Status@command,f
  7693  1530  0863               	movf	setRFSW_Control@sw,w
  7694  1531  31A4  2418  3195   	fcall	_setSw_Status
  7695                           
  7696                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw,1);
  7697  1534  0020               	movlb	0	; select bank0
  7698  1535  01A2               	clrf	setDimmerLights_Trigger@command
  7699  1536  0AA2               	incf	setDimmerLights_Trigger@command,f
  7700  1537  0863               	movf	setRFSW_Control@sw,w
  7701  1538  31A4  2447  3195   	fcall	_setDimmerLights_Trigger
  7702                           
  7703                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw,1);
  7704  153B  0020               	movlb	0	; select bank0
  7705  153C  01A2               	clrf	setDimmerLights_Switch@command
  7706  153D  0AA2               	incf	setDimmerLights_Switch@command,f
  7707  153E  0863               	movf	setRFSW_Control@sw,w
  7708  153F  31A4  2437  3195   	fcall	_setDimmerLights_Switch
  7709                           
  7710                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,RFSW->Status);
  7711  1542  0021               	movlb	1	; select bank1
  7712  1543  083C               	movf	_RFSW^(0+128),w
  7713  1544  0086               	movwf	6
  7714  1545  0187               	clrf	7
  7715  1546  3000               	movlw	0
  7716  1547  1801               	btfsc	1,0
  7717  1548  3001               	movlw	1
  7718  1549  0020               	movlb	0	; select bank0
  7719  154A  00DD               	movwf	setRF_DimmerLights@on
  7720  154B  2D8A               	goto	L5
  7721  154C                     l8996:	
  7722                           ;RF_Control_B1.c: 384: }
  7723                           
  7724                           
  7725                           ;RF_Control_B1.c: 385: else
  7726                           ;RF_Control_B1.c: 386: {
  7727                           ;RF_Control_B1.c: 387: if(RF_Data[16] == 0x80)
  7728  154C  0021               	movlb	1	; select bank1
  7729  154D  0830               	movf	(_RF_Data^(0+128)+16),w
  7730  154E  3A80               	xorlw	128
  7731  154F  1D03               	skipz
  7732  1550  2D62               	goto	l9000
  7733                           
  7734                           ;RF_Control_B1.c: 388: {
  7735                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw,1,RF_Data[17]);
  7736  1551  0020               	movlb	0	; select bank0
  7737  1552  01A3               	clrf	setDelayOff_GO@command
  7738  1553  0AA3               	incf	setDelayOff_GO@command,f
  7739  1554  0021               	movlb	1	; select bank1
  7740  1555  0831               	movf	(_RF_Data^(0+128)+17),w
  7741  1556  0020               	movlb	0	; select bank0
  7742  1557  00E2               	movwf	??_setRFSW_Control
  7743  1558  0862               	movf	??_setRFSW_Control,w
  7744  1559  00A4               	movwf	setDelayOff_GO@value
  7745  155A  0863               	movf	setRFSW_Control@sw,w
  7746  155B  319E  260F  3195   	fcall	_setDelayOff_GO
  7747                           
  7748                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw,1);
  7749  155E  0020               	movlb	0	; select bank0
  7750  155F  01DD               	clrf	setRF_DimmerLights@on
  7751  1560  0ADD               	incf	setRF_DimmerLights@on,f
  7752  1561  2D8A               	goto	L5
  7753  1562                     l9000:	
  7754                           ;RF_Control_B1.c: 391: }
  7755                           
  7756                           
  7757                           ;RF_Control_B1.c: 392: else
  7758                           ;RF_Control_B1.c: 393: {
  7759                           ;RF_Control_B1.c: 394: RFSW->Status=0;
  7760  1562  0021               	movlb	1	; select bank1
  7761  1563  083C               	movf	_RFSW^(0+128),w
  7762  1564  0086               	movwf	6
  7763  1565  0187               	clrf	7
  7764  1566  1001               	bcf	1,0
  7765                           
  7766                           ;RF_Control_B1.c: 395: setSw_Status(sw,0);
  7767  1567  0020               	movlb	0	; select bank0
  7768  1568  01A2               	clrf	setSw_Status@command
  7769  1569  0863               	movf	setRFSW_Control@sw,w
  7770  156A  31A4  2418  3195   	fcall	_setSw_Status
  7771                           
  7772                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw,1);
  7773  156D  0020               	movlb	0	; select bank0
  7774  156E  01A2               	clrf	setDimmerLights_Trigger@command
  7775  156F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7776  1570  0863               	movf	setRFSW_Control@sw,w
  7777  1571  31A4  2447  3195   	fcall	_setDimmerLights_Trigger
  7778                           
  7779                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw,RFSW->Status);
  7780  1574  0021               	movlb	1	; select bank1
  7781  1575  083C               	movf	_RFSW^(0+128),w
  7782  1576  0086               	movwf	6
  7783  1577  0187               	clrf	7
  7784  1578  3000               	movlw	0
  7785  1579  1801               	btfsc	1,0
  7786  157A  3001               	movlw	1
  7787  157B  0020               	movlb	0	; select bank0
  7788  157C  00A2               	movwf	setDimmerLights_Switch@command
  7789  157D  0863               	movf	setRFSW_Control@sw,w
  7790  157E  31A4  2437  3195   	fcall	_setDimmerLights_Switch
  7791                           
  7792                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw,0,0);
  7793  1581  0020               	movlb	0	; select bank0
  7794  1582  01A3               	clrf	setDelayOff_GO@command
  7795  1583  01A4               	clrf	setDelayOff_GO@value
  7796  1584  0863               	movf	setRFSW_Control@sw,w
  7797  1585  319E  260F  3195   	fcall	_setDelayOff_GO
  7798                           
  7799                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw,0);
  7800  1588  0020               	movlb	0	; select bank0
  7801  1589  01DD               	clrf	setRF_DimmerLights@on
  7802  158A                     L5:	
  7803  158A  0863               	movf	setRFSW_Control@sw,w
  7804  158B  319F  2795  3195   	fcall	_setRF_DimmerLights
  7805                           
  7806                           ;RF_Control_B1.c: 402: }
  7807                           ;RF_Control_B1.c: 403: }
  7808                           ;RF_Control_B1.c: 404: setBuz(1,100);
  7809  158E  3064               	movlw	100
  7810  158F  0020               	movlb	0	; select bank0
  7811  1590  00A6               	movwf	setBuz@time
  7812  1591  3000               	movlw	0
  7813  1592  00A7               	movwf	setBuz@time+1
  7814  1593  3001               	movlw	1
  7815  1594  3192  220A  3195   	fcall	_setBuz
  7816                           
  7817                           ;RF_Control_B1.c: 405: setTxData(1);
  7818  1597  3001               	movlw	1
  7819  1598  3189  21BD         	fcall	_setTxData
  7820  159A  0008               	return
  7821  159B                     __end_of_setRFSW_Control:	
  7822                           
  7823                           	psect	text27
  7824  1E0F                     __ptext27:	
  7825 ;; *************** function _setDelayOff_GO *****************
  7826 ;; Defined at:
  7827 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;  sw              1    wreg     unsigned char 
  7830 ;;  command         1    3[BANK0 ] unsigned char 
  7831 ;;  value           1    4[BANK0 ] unsigned char 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  sw              1    7[BANK0 ] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;		None               void
  7836 ;; Registers used:
  7837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;Total ram usage:        5 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    5
  7850 ;; This function calls:
  7851 ;;		_DelayOffPointSelect
  7852 ;;		_DelayTimejudge
  7853 ;; This function is called by:
  7854 ;;		_setRFSW_Control
  7855 ;;		_Sw_DimmerOffFunc
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _setDelayOff_GO
  7861  1E0F                     _setDelayOff_GO:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7865                           ;setDelayOff_GO@sw stored from wreg
  7866  1E0F  0020               	movlb	0	; select bank0
  7867  1E10  00A7               	movwf	setDelayOff_GO@sw
  7868                           
  7869                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7870  1E11  0827               	movf	setDelayOff_GO@sw,w
  7871  1E12  31A5  2587  319E   	fcall	_DelayOffPointSelect
  7872                           
  7873                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7874  1E15  0021               	movlb	1	; select bank1
  7875  1E16  0838               	movf	_DelayOff^(0+128),w
  7876  1E17  0086               	movwf	6
  7877  1E18  0187               	clrf	7
  7878  1E19  1C01               	btfss	1,0
  7879  1E1A  0008               	return
  7880                           
  7881                           ;DelayOff_B1.c: 96: {
  7882                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7883  1E1B  0838               	movf	_DelayOff^(0+128),w
  7884  1E1C  0086               	movwf	6
  7885  1E1D  0187               	clrf	7
  7886  1E1E  0020               	movlb	0	; select bank0
  7887  1E1F  0823               	movf	setDelayOff_GO@command,w
  7888  1E20  1081               	bcf	1,1
  7889  1E21  1D03               	skipz
  7890  1E22  1481               	bsf	1,1
  7891                           
  7892                           ;DelayOff_B1.c: 98: if(command)
  7893  1E23  0823               	movf	setDelayOff_GO@command,w
  7894  1E24  1903               	btfsc	3,2
  7895  1E25  2E51               	goto	l6652
  7896                           
  7897                           ;DelayOff_B1.c: 99: {
  7898                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7899  1E26  0824               	movf	setDelayOff_GO@value,w
  7900  1E27  3198  20A7  319E   	fcall	_DelayTimejudge
  7901  1E2A  0020               	movlb	0	; select bank0
  7902  1E2B  00A5               	movwf	??_setDelayOff_GO
  7903  1E2C  0021               	movlb	1	; select bank1
  7904  1E2D  0A38               	incf	_DelayOff^(0+128),w
  7905  1E2E  0086               	movwf	6
  7906  1E2F  0187               	clrf	7
  7907  1E30  0020               	movlb	0	; select bank0
  7908  1E31  0825               	movf	??_setDelayOff_GO,w
  7909  1E32  0081               	movwf	1
  7910                           
  7911                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7912  1E33  300F               	movlw	15
  7913  1E34  0524               	andwf	setDelayOff_GO@value,w
  7914  1E35  00A5               	movwf	??_setDelayOff_GO
  7915  1E36  0825               	movf	??_setDelayOff_GO,w
  7916  1E37  3A05               	xorlw	5
  7917  1E38  1903               	skipnz
  7918  1E39  2E3E               	goto	l6646
  7919  1E3A  0824               	movf	setDelayOff_GO@value,w
  7920  1E3B  390F               	andlw	15
  7921  1E3C  1D03               	btfss	3,2
  7922  1E3D  2E44               	goto	l6650
  7923  1E3E                     l6646:	
  7924  1E3E  3026               	movlw	38
  7925  1E3F  0224               	subwf	setDelayOff_GO@value,w
  7926  1E40  1803               	skipnc
  7927  1E41  2E44               	goto	l6650
  7928                           
  7929                           ;DelayOff_B1.c: 102: {
  7930                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7931  1E42  0824               	movf	setDelayOff_GO@value,w
  7932  1E43  2E45               	goto	L6
  7933  1E44                     l6650:	
  7934                           ;DelayOff_B1.c: 104: }
  7935                           
  7936                           
  7937                           ;DelayOff_B1.c: 105: else
  7938                           ;DelayOff_B1.c: 106: {
  7939                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7940  1E44  3005               	movlw	5
  7941  1E45                     L6:	
  7942  1E45  00A5               	movwf	??_setDelayOff_GO
  7943  1E46  0827               	movf	setDelayOff_GO@sw,w
  7944  1E47  3E1A               	addlw	26
  7945  1E48  076F               	addwf	_Product,w
  7946  1E49  00A6               	movwf	??_setDelayOff_GO+1
  7947  1E4A  0826               	movf	??_setDelayOff_GO+1,w
  7948  1E4B  0086               	movwf	6
  7949  1E4C  3001               	movlw	1	; select bank2/3
  7950  1E4D  0087               	movwf	7
  7951  1E4E  0825               	movf	??_setDelayOff_GO,w
  7952  1E4F  0081               	movwf	1
  7953                           
  7954                           ;DelayOff_B1.c: 108: }
  7955                           ;DelayOff_B1.c: 109: }
  7956  1E50  2E5D               	goto	l6656
  7957  1E51                     l6652:	
  7958                           
  7959                           ;DelayOff_B1.c: 110: else if(!command)
  7960  1E51  08A3               	movf	setDelayOff_GO@command,f
  7961  1E52  1D03               	skipz
  7962  1E53  2E5D               	goto	l6656
  7963                           
  7964                           ;DelayOff_B1.c: 111: {
  7965                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7966  1E54  0827               	movf	setDelayOff_GO@sw,w
  7967  1E55  3E1A               	addlw	26
  7968  1E56  076F               	addwf	_Product,w
  7969  1E57  00A5               	movwf	??_setDelayOff_GO
  7970  1E58  0825               	movf	??_setDelayOff_GO,w
  7971  1E59  0086               	movwf	6
  7972  1E5A  3001               	movlw	1	; select bank2/3
  7973  1E5B  0087               	movwf	7
  7974  1E5C  0181               	clrf	1
  7975  1E5D                     l6656:	
  7976                           
  7977                           ;DelayOff_B1.c: 113: }
  7978                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7979  1E5D  0021               	movlb	1	; select bank1
  7980  1E5E  0838               	movf	_DelayOff^(0+128),w
  7981  1E5F  3E02               	addlw	2
  7982  1E60  0086               	movwf	6
  7983  1E61  0187               	clrf	7
  7984  1E62  3000               	movlw	0
  7985  1E63  3FC0               	movwi [0]fsr1
  7986  1E64  3FC1               	movwi [1]fsr1
  7987                           
  7988                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7989  1E65  0838               	movf	_DelayOff^(0+128),w
  7990  1E66  3E04               	addlw	4
  7991  1E67  0086               	movwf	6
  7992  1E68  0187               	clrf	7
  7993  1E69  0181               	clrf	1
  7994  1E6A  0008               	return
  7995  1E6B                     __end_of_setDelayOff_GO:	
  7996                           
  7997                           	psect	text28
  7998  18A7                     __ptext28:	
  7999 ;; *************** function _DelayTimejudge *****************
  8000 ;; Defined at:
  8001 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  value           1    wreg     unsigned char 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  value           1    2[BANK0 ] unsigned char 
  8006 ;;  i               1    1[BANK0 ] unsigned char 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      unsigned char 
  8009 ;; Registers used:
  8010 ;;		wreg
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;Total ram usage:        3 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    4
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		_setDelayOff_GO
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           
  8031                           ;psect for function _DelayTimejudge
  8032  18A7                     _DelayTimejudge:	
  8033                           
  8034                           ;incstack = 0
  8035                           ; Regs used in _DelayTimejudge: [wreg]
  8036                           ;DelayTimejudge@value stored from wreg
  8037  18A7  0020               	movlb	0	; select bank0
  8038  18A8  00A2               	movwf	DelayTimejudge@value
  8039                           
  8040                           ;DelayOff_B1.c: 121: char i=5;
  8041  18A9  3005               	movlw	5
  8042  18AA  00A0               	movwf	??_DelayTimejudge
  8043  18AB  0820               	movf	??_DelayTimejudge,w
  8044  18AC  00A1               	movwf	DelayTimejudge@i
  8045                           
  8046                           ;DelayOff_B1.c: 122: if(value == 0x05)
  8047  18AD  0822               	movf	DelayTimejudge@value,w
  8048  18AE  3A05               	xorlw	5
  8049  18AF  1D03               	skipz
  8050  18B0  28B3               	goto	l6486
  8051                           
  8052                           ;DelayOff_B1.c: 123: {
  8053                           ;DelayOff_B1.c: 124: i=5;
  8054  18B1  3005               	movlw	5
  8055  18B2  28D0               	goto	L11
  8056  18B3                     l6486:	
  8057                           ;DelayOff_B1.c: 125: }
  8058                           
  8059                           
  8060                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  8061  18B3  0822               	movf	DelayTimejudge@value,w
  8062  18B4  3A10               	xorlw	16
  8063  18B5  1D03               	skipz
  8064  18B6  28B9               	goto	l6490
  8065                           
  8066                           ;DelayOff_B1.c: 127: {
  8067                           ;DelayOff_B1.c: 128: i=10;
  8068  18B7  300A               	movlw	10
  8069  18B8  28D0               	goto	L11
  8070  18B9                     l6490:	
  8071                           ;DelayOff_B1.c: 129: }
  8072                           
  8073                           
  8074                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  8075  18B9  0822               	movf	DelayTimejudge@value,w
  8076  18BA  3A15               	xorlw	21
  8077  18BB  1D03               	skipz
  8078  18BC  28BF               	goto	l6494
  8079                           
  8080                           ;DelayOff_B1.c: 131: {
  8081                           ;DelayOff_B1.c: 132: i=15;
  8082  18BD  300F               	movlw	15
  8083  18BE  28D0               	goto	L11
  8084  18BF                     l6494:	
  8085                           ;DelayOff_B1.c: 133: }
  8086                           
  8087                           
  8088                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8089  18BF  0822               	movf	DelayTimejudge@value,w
  8090  18C0  3A20               	xorlw	32
  8091  18C1  1D03               	skipz
  8092  18C2  28C5               	goto	l6498
  8093                           
  8094                           ;DelayOff_B1.c: 135: {
  8095                           ;DelayOff_B1.c: 136: i=20;
  8096  18C3  3014               	movlw	20
  8097  18C4  28D0               	goto	L11
  8098  18C5                     l6498:	
  8099                           ;DelayOff_B1.c: 137: }
  8100                           
  8101                           
  8102                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8103  18C5  0822               	movf	DelayTimejudge@value,w
  8104  18C6  3A25               	xorlw	37
  8105  18C7  1D03               	skipz
  8106  18C8  28CB               	goto	l6502
  8107                           
  8108                           ;DelayOff_B1.c: 139: {
  8109                           ;DelayOff_B1.c: 140: i=25;
  8110  18C9  3019               	movlw	25
  8111  18CA  28D0               	goto	L11
  8112  18CB                     l6502:	
  8113                           ;DelayOff_B1.c: 141: }
  8114                           
  8115                           
  8116                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8117  18CB  0822               	movf	DelayTimejudge@value,w
  8118  18CC  3A30               	xorlw	48
  8119  18CD  1D03               	skipz
  8120  18CE  28D3               	goto	l706
  8121                           
  8122                           ;DelayOff_B1.c: 143: {
  8123                           ;DelayOff_B1.c: 144: i=30;
  8124  18CF  301E               	movlw	30
  8125  18D0                     L11:	
  8126  18D0  00A0               	movwf	??_DelayTimejudge
  8127  18D1  0820               	movf	??_DelayTimejudge,w
  8128  18D2  00A1               	movwf	DelayTimejudge@i
  8129  18D3                     l706:	
  8130                           
  8131                           ;DelayOff_B1.c: 145: }
  8132                           ;DelayOff_B1.c: 146: return i;
  8133  18D3  0821               	movf	DelayTimejudge@i,w
  8134  18D4  0008               	return
  8135  18D5                     __end_of_DelayTimejudge:	
  8136                           
  8137                           	psect	text29
  8138  1AB0                     __ptext29:	
  8139 ;; *************** function _setRFSW_AdjControl *****************
  8140 ;; Defined at:
  8141 ;;		line 408 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;  sw              1    wreg     unsigned char 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  sw              1   70[BANK0 ] unsigned char 
  8146 ;; Return value:  Size  Location     Type
  8147 ;;		None               void
  8148 ;; Registers used:
  8149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;Total ram usage:        3 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    9
  8162 ;; This function calls:
  8163 ;;		_RfSWPointSelect
  8164 ;;		_setRF_DimmerValue
  8165 ;;		_setTxData
  8166 ;; This function is called by:
  8167 ;;		_setControl_Lights_Table
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           
  8172                           ;psect for function _setRFSW_AdjControl
  8173  1AB0                     _setRFSW_AdjControl:	
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8177                           ;setRFSW_AdjControl@sw stored from wreg
  8178  1AB0  0020               	movlb	0	; select bank0
  8179  1AB1  00E6               	movwf	setRFSW_AdjControl@sw
  8180                           
  8181                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  8182  1AB2  0866               	movf	setRFSW_AdjControl@sw,w
  8183  1AB3  31A5  2545  319A   	fcall	_RfSWPointSelect
  8184                           
  8185                           ;RF_Control_B1.c: 411: if(RFSW->Status)
  8186  1AB6  0021               	movlb	1	; select bank1
  8187  1AB7  083C               	movf	_RFSW^(0+128),w
  8188  1AB8  0086               	movwf	6
  8189  1AB9  0187               	clrf	7
  8190  1ABA  1C01               	btfss	1,0
  8191  1ABB  2AC8               	goto	l6904
  8192                           
  8193                           ;RF_Control_B1.c: 412: {
  8194                           ;RF_Control_B1.c: 413: Memory->Modify=1;
  8195  1ABC  086B               	movf	_Memory^(0+128),w
  8196  1ABD  3E22               	addlw	34
  8197  1ABE  0086               	movwf	6
  8198  1ABF  3002               	movlw	2	; select bank4/5
  8199  1AC0  0087               	movwf	7
  8200  1AC1  1401               	bsf	1,0
  8201                           
  8202                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  8203  1AC2  0020               	movlb	0	; select bank0
  8204  1AC3  0866               	movf	setRFSW_AdjControl@sw,w
  8205  1AC4  3199  21CA  319A   	fcall	_setRF_DimmerValue
  8206                           
  8207                           ;RF_Control_B1.c: 415: }
  8208  1AC7  2ADA               	goto	l2748
  8209  1AC8                     l6904:	
  8210                           
  8211                           ;RF_Control_B1.c: 416: else
  8212                           ;RF_Control_B1.c: 417: {
  8213                           ;RF_Control_B1.c: 418: Product->Data[9]=Product->Data[20+sw];
  8214  1AC8  0020               	movlb	0	; select bank0
  8215  1AC9  0866               	movf	setRFSW_AdjControl@sw,w
  8216  1ACA  3E14               	addlw	20
  8217  1ACB  076F               	addwf	_Product,w
  8218  1ACC  00E4               	movwf	??_setRFSW_AdjControl
  8219  1ACD  0864               	movf	??_setRFSW_AdjControl,w
  8220  1ACE  0086               	movwf	6
  8221  1ACF  3001               	movlw	1	; select bank2/3
  8222  1AD0  0087               	movwf	7
  8223  1AD1  0801               	movf	1,w
  8224  1AD2  00E5               	movwf	??_setRFSW_AdjControl+1
  8225  1AD3  086F               	movf	_Product,w
  8226  1AD4  3E09               	addlw	9
  8227  1AD5  0086               	movwf	6
  8228  1AD6  3001               	movlw	1	; select bank2/3
  8229  1AD7  0087               	movwf	7
  8230  1AD8  0865               	movf	??_setRFSW_AdjControl+1,w
  8231  1AD9  0081               	movwf	1
  8232  1ADA                     l2748:	
  8233                           
  8234                           ;RF_Control_B1.c: 419: }
  8235                           ;RF_Control_B1.c: 420: Product->Data[17]=Product->Data[26+sw];
  8236  1ADA  0020               	movlb	0	; select bank0
  8237  1ADB  0866               	movf	setRFSW_AdjControl@sw,w
  8238  1ADC  3E1A               	addlw	26
  8239  1ADD  076F               	addwf	_Product,w
  8240  1ADE  00E4               	movwf	??_setRFSW_AdjControl
  8241  1ADF  0864               	movf	??_setRFSW_AdjControl,w
  8242  1AE0  0086               	movwf	6
  8243  1AE1  3001               	movlw	1	; select bank2/3
  8244  1AE2  0087               	movwf	7
  8245  1AE3  0801               	movf	1,w
  8246  1AE4  00E5               	movwf	??_setRFSW_AdjControl+1
  8247  1AE5  086F               	movf	_Product,w
  8248  1AE6  3E11               	addlw	17
  8249  1AE7  0086               	movwf	6
  8250  1AE8  3001               	movlw	1	; select bank2/3
  8251  1AE9  0087               	movwf	7
  8252  1AEA  0865               	movf	??_setRFSW_AdjControl+1,w
  8253  1AEB  0081               	movwf	1
  8254                           
  8255                           ;RF_Control_B1.c: 421: setTxData(1);
  8256  1AEC  3001               	movlw	1
  8257  1AED  3189  21BD         	fcall	_setTxData
  8258  1AEF  0008               	return
  8259  1AF0                     __end_of_setRFSW_AdjControl:	
  8260                           
  8261                           	psect	text30
  8262  19CA                     __ptext30:	
  8263 ;; *************** function _setRF_DimmerValue *****************
  8264 ;; Defined at:
  8265 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  lights          1    wreg     unsigned char 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  lights          1   67[BANK0 ] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;		None               void
  8272 ;; Registers used:
  8273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;Total ram usage:        3 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    8
  8286 ;; This function calls:
  8287 ;;		_setDimmerLights_AdjRF
  8288 ;; This function is called by:
  8289 ;;		_setRFSW_AdjControl
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function _setRF_DimmerValue
  8295  19CA                     _setRF_DimmerValue:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8299                           ;setRF_DimmerValue@lights stored from wreg
  8300  19CA  0020               	movlb	0	; select bank0
  8301  19CB  00E3               	movwf	setRF_DimmerValue@lights
  8302                           
  8303                           ;RF_Control_B1.c: 434: if(RF_Data[9] > 0x64)
  8304  19CC  3065               	movlw	101
  8305  19CD  0021               	movlb	1	; select bank1
  8306  19CE  0229               	subwf	(_RF_Data^(0+128)+9),w
  8307  19CF  1C03               	skipc
  8308  19D0  29D7               	goto	l6746
  8309                           
  8310                           ;RF_Control_B1.c: 435: {
  8311                           ;RF_Control_B1.c: 436: RF_Data[9]=0x64;
  8312  19D1  3064               	movlw	100
  8313  19D2  0020               	movlb	0	; select bank0
  8314  19D3  00E1               	movwf	??_setRF_DimmerValue
  8315  19D4  0861               	movf	??_setRF_DimmerValue,w
  8316  19D5  0021               	movlb	1	; select bank1
  8317  19D6  00A9               	movwf	(_RF_Data^(0+128)+9)
  8318  19D7                     l6746:	
  8319                           
  8320                           ;RF_Control_B1.c: 437: }
  8321                           ;RF_Control_B1.c: 438: Product->Data[9]=RF_Data[9];
  8322  19D7  0829               	movf	(_RF_Data^(0+128)+9),w
  8323  19D8  0020               	movlb	0	; select bank0
  8324  19D9  00E1               	movwf	??_setRF_DimmerValue
  8325  19DA  086F               	movf	_Product,w
  8326  19DB  3E09               	addlw	9
  8327  19DC  0086               	movwf	6
  8328  19DD  3001               	movlw	1	; select bank2/3
  8329  19DE  0087               	movwf	7
  8330  19DF  0861               	movf	??_setRF_DimmerValue,w
  8331  19E0  0081               	movwf	1
  8332                           
  8333                           ;RF_Control_B1.c: 439: Product->Data[11]=lights;
  8334  19E1  0863               	movf	setRF_DimmerValue@lights,w
  8335  19E2  00E1               	movwf	??_setRF_DimmerValue
  8336  19E3  086F               	movf	_Product,w
  8337  19E4  3E0B               	addlw	11
  8338  19E5  0086               	movwf	6
  8339  19E6  3001               	movlw	1	; select bank2/3
  8340  19E7  0087               	movwf	7
  8341  19E8  0861               	movf	??_setRF_DimmerValue,w
  8342  19E9  0081               	movwf	1
  8343                           
  8344                           ;RF_Control_B1.c: 440: Product->Data[(20+lights)]=Product->Data[9];
  8345  19EA  086F               	movf	_Product,w
  8346  19EB  3E09               	addlw	9
  8347  19EC  0086               	movwf	6
  8348  19ED  3001               	movlw	1	; select bank2/3
  8349  19EE  0087               	movwf	7
  8350  19EF  0801               	movf	1,w
  8351  19F0  00E1               	movwf	??_setRF_DimmerValue
  8352  19F1  0863               	movf	setRF_DimmerValue@lights,w
  8353  19F2  3E14               	addlw	20
  8354  19F3  076F               	addwf	_Product,w
  8355  19F4  00E2               	movwf	??_setRF_DimmerValue+1
  8356  19F5  0862               	movf	??_setRF_DimmerValue+1,w
  8357  19F6  0086               	movwf	6
  8358  19F7  3001               	movlw	1	; select bank2/3
  8359  19F8  0087               	movwf	7
  8360  19F9  0861               	movf	??_setRF_DimmerValue,w
  8361  19FA  0081               	movwf	1
  8362                           
  8363                           ;RF_Control_B1.c: 441: setDimmerLights_AdjRF(lights);
  8364  19FB  0863               	movf	setRF_DimmerValue@lights,w
  8365  19FC  31A7  2766         	fcall	_setDimmerLights_AdjRF
  8366  19FE  0008               	return
  8367  19FF                     __end_of_setRF_DimmerValue:	
  8368                           
  8369                           	psect	text31
  8370  2766                     __ptext31:	
  8371 ;; *************** function _setDimmerLights_AdjRF *****************
  8372 ;; Defined at:
  8373 ;;		line 423 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  lights          1    wreg     unsigned char 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  lights          1   64[BANK0 ] unsigned char 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;		None               void
  8380 ;; Registers used:
  8381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;Total ram usage:        2 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    7
  8394 ;; This function calls:
  8395 ;;		_DimmerLightsPointSelect
  8396 ;;		_getPercentValue
  8397 ;; This function is called by:
  8398 ;;		_setRF_DimmerValue
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _setDimmerLights_AdjRF
  8404  2766                     _setDimmerLights_AdjRF:	
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8408                           ;setDimmerLights_AdjRF@lights stored from wreg
  8409  2766  0020               	movlb	0	; select bank0
  8410  2767  00E0               	movwf	setDimmerLights_AdjRF@lights
  8411                           
  8412                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8413  2768  0860               	movf	setDimmerLights_AdjRF@lights,w
  8414  2769  31A4  24B8  31A7   	fcall	_DimmerLightsPointSelect
  8415                           
  8416                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8417  276C  0020               	movlb	0	; select bank0
  8418  276D  086C               	movf	_DimmerLights,w
  8419  276E  0086               	movwf	6
  8420  276F  3001               	movlw	1	; select bank2/3
  8421  2770  0087               	movwf	7
  8422  2771  1501               	bsf	1,2
  8423                           
  8424                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8425  2772  086C               	movf	_DimmerLights,w
  8426  2773  0086               	movwf	6
  8427  2774  3001               	movlw	1	; select bank2/3
  8428  2775  0087               	movwf	7
  8429  2776  1481               	bsf	1,1
  8430                           
  8431                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8432  2777  086F               	movf	_Product,w
  8433  2778  3E09               	addlw	9
  8434  2779  0086               	movwf	6
  8435  277A  3001               	movlw	1	; select bank2/3
  8436  277B  0087               	movwf	7
  8437  277C  0801               	movf	1,w
  8438  277D  319D  25B4         	fcall	_getPercentValue
  8439  277F  0020               	movlb	0	; select bank0
  8440  2780  00DF               	movwf	??_setDimmerLights_AdjRF
  8441  2781  086C               	movf	_DimmerLights,w
  8442  2782  3E05               	addlw	5
  8443  2783  0086               	movwf	6
  8444  2784  3001               	movlw	1	; select bank2/3
  8445  2785  0087               	movwf	7
  8446  2786  085F               	movf	??_setDimmerLights_AdjRF,w
  8447  2787  0081               	movwf	1
  8448  2788  0008               	return
  8449  2789                     __end_of_setDimmerLights_AdjRF:	
  8450                           
  8451                           	psect	text32
  8452  1DB4                     __ptext32:	
  8453 ;; *************** function _getPercentValue *****************
  8454 ;; Defined at:
  8455 ;;		line 490 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;  value           1    wreg     unsigned char 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  value           1   59[BANK0 ] unsigned char 
  8460 ;;  i               3   60[BANK0 ] float 
  8461 ;; Return value:  Size  Location     Type
  8462 ;;                  1    wreg      unsigned char 
  8463 ;; Registers used:
  8464 ;;		wreg, status,2, status,0, pclath, cstack
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;Total ram usage:        6 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    6
  8477 ;; This function calls:
  8478 ;;		___awtoft
  8479 ;;		___ftadd
  8480 ;;		___ftdiv
  8481 ;;		___ftmul
  8482 ;;		___fttol
  8483 ;; This function is called by:
  8484 ;;		_setDimmerLights_AdjRF
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function _getPercentValue
  8490  1DB4                     _getPercentValue:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8494                           ;getPercentValue@value stored from wreg
  8495  1DB4  0020               	movlb	0	; select bank0
  8496  1DB5  00DB               	movwf	getPercentValue@value
  8497                           
  8498                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8499  1DB6  3000               	movlw	0
  8500  1DB7  00DC               	movwf	getPercentValue@i
  8501  1DB8  3054               	movlw	84
  8502  1DB9  00DD               	movwf	getPercentValue@i+1
  8503  1DBA  3042               	movlw	66
  8504  1DBB  00DE               	movwf	getPercentValue@i+2
  8505                           
  8506                           ;Dimmer_B1.c: 494: i/=100;
  8507  1DBC  3000               	movlw	0
  8508  1DBD  00AE               	movwf	___ftdiv@f2
  8509  1DBE  30C8               	movlw	200
  8510  1DBF  00AF               	movwf	___ftdiv@f2+1
  8511  1DC0  3042               	movlw	66
  8512  1DC1  00B0               	movwf	___ftdiv@f2+2
  8513  1DC2  085C               	movf	getPercentValue@i,w
  8514  1DC3  00B1               	movwf	___ftdiv@f1
  8515  1DC4  085D               	movf	getPercentValue@i+1,w
  8516  1DC5  00B2               	movwf	___ftdiv@f1+1
  8517  1DC6  085E               	movf	getPercentValue@i+2,w
  8518  1DC7  00B3               	movwf	___ftdiv@f1+2
  8519  1DC8  3188  2060  319D   	fcall	___ftdiv
  8520  1DCB  0020               	movlb	0	; select bank0
  8521  1DCC  082E               	movf	?___ftdiv,w
  8522  1DCD  00DC               	movwf	getPercentValue@i
  8523  1DCE  082F               	movf	?___ftdiv+1,w
  8524  1DCF  00DD               	movwf	getPercentValue@i+1
  8525  1DD0  0830               	movf	?___ftdiv+2,w
  8526  1DD1  00DE               	movwf	getPercentValue@i+2
  8527                           
  8528                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8529  1DD2  085B               	movf	getPercentValue@value,w
  8530  1DD3  00D9               	movwf	??_getPercentValue
  8531  1DD4  01DA               	clrf	??_getPercentValue+1
  8532  1DD5  09D9               	comf	??_getPercentValue,f
  8533  1DD6  09DA               	comf	??_getPercentValue+1,f
  8534  1DD7  0AD9               	incf	??_getPercentValue,f
  8535  1DD8  1903               	skipnz
  8536  1DD9  0ADA               	incf	??_getPercentValue+1,f
  8537  1DDA  0859               	movf	??_getPercentValue,w
  8538  1DDB  3E64               	addlw	100
  8539  1DDC  00A8               	movwf	___awtoft@c
  8540  1DDD  3000               	movlw	0
  8541  1DDE  3D5A               	addwfc	??_getPercentValue+1,w
  8542  1DDF  00A9               	movwf	___awtoft@c+1
  8543  1DE0  31A7  2700  319D   	fcall	___awtoft
  8544  1DE3  0020               	movlb	0	; select bank0
  8545  1DE4  0828               	movf	?___awtoft,w
  8546  1DE5  00B1               	movwf	___ftmul@f2
  8547  1DE6  0829               	movf	?___awtoft+1,w
  8548  1DE7  00B2               	movwf	___ftmul@f2+1
  8549  1DE8  082A               	movf	?___awtoft+2,w
  8550  1DE9  00B3               	movwf	___ftmul@f2+2
  8551  1DEA  085C               	movf	getPercentValue@i,w
  8552  1DEB  00AE               	movwf	___ftmul@f1
  8553  1DEC  085D               	movf	getPercentValue@i+1,w
  8554  1DED  00AF               	movwf	___ftmul@f1+1
  8555  1DEE  085E               	movf	getPercentValue@i+2,w
  8556  1DEF  00B0               	movwf	___ftmul@f1+2
  8557  1DF0  3189  2109  319D   	fcall	___ftmul
  8558  1DF3  0020               	movlb	0	; select bank0
  8559  1DF4  082E               	movf	?___ftmul,w
  8560  1DF5  00C1               	movwf	___ftadd@f2
  8561  1DF6  082F               	movf	?___ftmul+1,w
  8562  1DF7  00C2               	movwf	___ftadd@f2+1
  8563  1DF8  0830               	movf	?___ftmul+2,w
  8564  1DF9  00C3               	movwf	___ftadd@f2+2
  8565  1DFA  3000               	movlw	0
  8566  1DFB  00BE               	movwf	___ftadd@f1
  8567  1DFC  3086               	movlw	134
  8568  1DFD  00BF               	movwf	___ftadd@f1+1
  8569  1DFE  3042               	movlw	66
  8570  1DFF  00C0               	movwf	___ftadd@f1+2
  8571  1E00  318A  2286  319D   	fcall	___ftadd
  8572  1E03  0020               	movlb	0	; select bank0
  8573  1E04  083E               	movf	?___ftadd,w
  8574  1E05  00CB               	movwf	___fttol@f1
  8575  1E06  083F               	movf	?___ftadd+1,w
  8576  1E07  00CC               	movwf	___fttol@f1+1
  8577  1E08  0840               	movf	?___ftadd+2,w
  8578  1E09  00CD               	movwf	___fttol@f1+2
  8579  1E0A  3193  23FC         	fcall	___fttol
  8580  1E0C  0020               	movlb	0	; select bank0
  8581  1E0D  084B               	movf	?___fttol,w
  8582  1E0E  0008               	return
  8583  1E0F                     __end_of_getPercentValue:	
  8584                           
  8585                           	psect	text33
  8586  0909                     __ptext33:	
  8587 ;; *************** function ___ftmul *****************
  8588 ;; Defined at:
  8589 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  f1              3   14[BANK0 ] float 
  8592 ;;  f2              3   17[BANK0 ] float 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8595 ;;  sign            1   29[BANK0 ] unsigned char 
  8596 ;;  cntr            1   28[BANK0 ] unsigned char 
  8597 ;;  exp             1   24[BANK0 ] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  3   14[BANK0 ] float 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8607 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;Total ram usage:       16 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    5
  8614 ;; This function calls:
  8615 ;;		___ftpack
  8616 ;; This function is called by:
  8617 ;;		_getPercentValue
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function ___ftmul
  8623  0909                     ___ftmul:	
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8627  0909  0020               	movlb	0	; select bank0
  8628  090A  082E               	movf	___ftmul@f1,w
  8629  090B  00B4               	movwf	??___ftmul
  8630  090C  082F               	movf	___ftmul@f1+1,w
  8631  090D  00B5               	movwf	??___ftmul+1
  8632  090E  0830               	movf	___ftmul@f1+2,w
  8633  090F  00B6               	movwf	??___ftmul+2
  8634  0910  1003               	clrc
  8635  0911  0D35               	rlf	??___ftmul+1,w
  8636  0912  0D36               	rlf	??___ftmul+2,w
  8637  0913  00B7               	movwf	??___ftmul+3
  8638  0914  0837               	movf	??___ftmul+3,w
  8639  0915  00B8               	movwf	___ftmul@exp
  8640  0916  08B8               	movf	___ftmul@exp,f
  8641  0917  1D03               	skipz
  8642  0918  2920               	goto	l6372
  8643  0919  3000               	movlw	0
  8644  091A  00AE               	movwf	?___ftmul
  8645  091B  3000               	movlw	0
  8646  091C  00AF               	movwf	?___ftmul+1
  8647  091D  3000               	movlw	0
  8648  091E  00B0               	movwf	?___ftmul+2
  8649  091F  0008               	return
  8650  0920                     l6372:	
  8651  0920  0831               	movf	___ftmul@f2,w
  8652  0921  00B4               	movwf	??___ftmul
  8653  0922  0832               	movf	___ftmul@f2+1,w
  8654  0923  00B5               	movwf	??___ftmul+1
  8655  0924  0833               	movf	___ftmul@f2+2,w
  8656  0925  00B6               	movwf	??___ftmul+2
  8657  0926  1003               	clrc
  8658  0927  0D35               	rlf	??___ftmul+1,w
  8659  0928  0D36               	rlf	??___ftmul+2,w
  8660  0929  00B7               	movwf	??___ftmul+3
  8661  092A  0837               	movf	??___ftmul+3,w
  8662  092B  00BD               	movwf	___ftmul@sign
  8663  092C  08BD               	movf	___ftmul@sign,f
  8664  092D  1D03               	skipz
  8665  092E  2936               	goto	l6378
  8666  092F  3000               	movlw	0
  8667  0930  00AE               	movwf	?___ftmul
  8668  0931  3000               	movlw	0
  8669  0932  00AF               	movwf	?___ftmul+1
  8670  0933  3000               	movlw	0
  8671  0934  00B0               	movwf	?___ftmul+2
  8672  0935  0008               	return
  8673  0936                     l6378:	
  8674  0936  083D               	movf	___ftmul@sign,w
  8675  0937  3E7B               	addlw	123
  8676  0938  00B4               	movwf	??___ftmul
  8677  0939  0834               	movf	??___ftmul,w
  8678  093A  07B8               	addwf	___ftmul@exp,f
  8679  093B  082E               	movf	___ftmul@f1,w
  8680  093C  00B4               	movwf	??___ftmul
  8681  093D  082F               	movf	___ftmul@f1+1,w
  8682  093E  00B5               	movwf	??___ftmul+1
  8683  093F  0830               	movf	___ftmul@f1+2,w
  8684  0940  00B6               	movwf	??___ftmul+2
  8685  0941  3010               	movlw	16
  8686  0942                     u4605:	
  8687  0942  36B6               	lsrf	??___ftmul+2,f
  8688  0943  0CB5               	rrf	??___ftmul+1,f
  8689  0944  0CB4               	rrf	??___ftmul,f
  8690  0945  0B89               	decfsz	9,f
  8691  0946  2942               	goto	u4605
  8692  0947  0834               	movf	??___ftmul,w
  8693  0948  00B7               	movwf	??___ftmul+3
  8694  0949  0837               	movf	??___ftmul+3,w
  8695  094A  00BD               	movwf	___ftmul@sign
  8696  094B  0831               	movf	___ftmul@f2,w
  8697  094C  00B4               	movwf	??___ftmul
  8698  094D  0832               	movf	___ftmul@f2+1,w
  8699  094E  00B5               	movwf	??___ftmul+1
  8700  094F  0833               	movf	___ftmul@f2+2,w
  8701  0950  00B6               	movwf	??___ftmul+2
  8702  0951  3010               	movlw	16
  8703  0952                     u4615:	
  8704  0952  36B6               	lsrf	??___ftmul+2,f
  8705  0953  0CB5               	rrf	??___ftmul+1,f
  8706  0954  0CB4               	rrf	??___ftmul,f
  8707  0955  0B89               	decfsz	9,f
  8708  0956  2952               	goto	u4615
  8709  0957  0834               	movf	??___ftmul,w
  8710  0958  00B7               	movwf	??___ftmul+3
  8711  0959  0837               	movf	??___ftmul+3,w
  8712  095A  06BD               	xorwf	___ftmul@sign,f
  8713  095B  3080               	movlw	128
  8714  095C  00B4               	movwf	??___ftmul
  8715  095D  0834               	movf	??___ftmul,w
  8716  095E  05BD               	andwf	___ftmul@sign,f
  8717  095F  17AF               	bsf	___ftmul@f1+1,7
  8718  0960  17B2               	bsf	___ftmul@f2+1,7
  8719  0961  30FF               	movlw	255
  8720  0962  05B1               	andwf	___ftmul@f2,f
  8721  0963  30FF               	movlw	255
  8722  0964  05B2               	andwf	___ftmul@f2+1,f
  8723  0965  3000               	movlw	0
  8724  0966  05B3               	andwf	___ftmul@f2+2,f
  8725  0967  3000               	movlw	0
  8726  0968  00B9               	movwf	___ftmul@f3_as_product
  8727  0969  3000               	movlw	0
  8728  096A  00BA               	movwf	___ftmul@f3_as_product+1
  8729  096B  3000               	movlw	0
  8730  096C  00BB               	movwf	___ftmul@f3_as_product+2
  8731  096D  3007               	movlw	7
  8732  096E  00B4               	movwf	??___ftmul
  8733  096F  0834               	movf	??___ftmul,w
  8734  0970  00BC               	movwf	___ftmul@cntr
  8735  0971                     l6390:	
  8736  0971  1C2E               	btfss	___ftmul@f1,0
  8737  0972  2979               	goto	l6394
  8738  0973  0831               	movf	___ftmul@f2,w
  8739  0974  07B9               	addwf	___ftmul@f3_as_product,f
  8740  0975  0832               	movf	___ftmul@f2+1,w
  8741  0976  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8742  0977  0833               	movf	___ftmul@f2+2,w
  8743  0978  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8744  0979                     l6394:	
  8745  0979  3001               	movlw	1
  8746  097A                     u4635:	
  8747  097A  36B0               	lsrf	___ftmul@f1+2,f
  8748  097B  0CAF               	rrf	___ftmul@f1+1,f
  8749  097C  0CAE               	rrf	___ftmul@f1,f
  8750  097D  0B89               	decfsz	9,f
  8751  097E  297A               	goto	u4635
  8752  097F  3001               	movlw	1
  8753  0980                     u4645:	
  8754  0980  35B1               	lslf	___ftmul@f2,f
  8755  0981  0DB2               	rlf	___ftmul@f2+1,f
  8756  0982  0DB3               	rlf	___ftmul@f2+2,f
  8757  0983  0B89               	decfsz	9,f
  8758  0984  2980               	goto	u4645
  8759  0985  3001               	movlw	1
  8760  0986  02BC               	subwf	___ftmul@cntr,f
  8761  0987  1D03               	btfss	3,2
  8762  0988  2971               	goto	l6390
  8763  0989  3009               	movlw	9
  8764  098A  00B4               	movwf	??___ftmul
  8765  098B  0834               	movf	??___ftmul,w
  8766  098C  00BC               	movwf	___ftmul@cntr
  8767  098D                     l6402:	
  8768  098D  1C2E               	btfss	___ftmul@f1,0
  8769  098E  2995               	goto	l6406
  8770  098F  0831               	movf	___ftmul@f2,w
  8771  0990  07B9               	addwf	___ftmul@f3_as_product,f
  8772  0991  0832               	movf	___ftmul@f2+1,w
  8773  0992  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8774  0993  0833               	movf	___ftmul@f2+2,w
  8775  0994  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8776  0995                     l6406:	
  8777  0995  3001               	movlw	1
  8778  0996                     u4675:	
  8779  0996  36B0               	lsrf	___ftmul@f1+2,f
  8780  0997  0CAF               	rrf	___ftmul@f1+1,f
  8781  0998  0CAE               	rrf	___ftmul@f1,f
  8782  0999  0B89               	decfsz	9,f
  8783  099A  2996               	goto	u4675
  8784  099B  3001               	movlw	1
  8785  099C                     u4685:	
  8786  099C  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8787  099D  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8788  099E  0CB9               	rrf	___ftmul@f3_as_product,f
  8789  099F  0B89               	decfsz	9,f
  8790  09A0  299C               	goto	u4685
  8791  09A1  3001               	movlw	1
  8792  09A2  02BC               	subwf	___ftmul@cntr,f
  8793  09A3  1D03               	btfss	3,2
  8794  09A4  298D               	goto	l6402
  8795  09A5  0839               	movf	___ftmul@f3_as_product,w
  8796  09A6  00A0               	movwf	___ftpack@arg
  8797  09A7  083A               	movf	___ftmul@f3_as_product+1,w
  8798  09A8  00A1               	movwf	___ftpack@arg+1
  8799  09A9  083B               	movf	___ftmul@f3_as_product+2,w
  8800  09AA  00A2               	movwf	___ftpack@arg+2
  8801  09AB  0838               	movf	___ftmul@exp,w
  8802  09AC  00B4               	movwf	??___ftmul
  8803  09AD  0834               	movf	??___ftmul,w
  8804  09AE  00A3               	movwf	___ftpack@exp
  8805  09AF  083D               	movf	___ftmul@sign,w
  8806  09B0  00B5               	movwf	??___ftmul+1
  8807  09B1  0835               	movf	??___ftmul+1,w
  8808  09B2  00A4               	movwf	___ftpack@sign
  8809  09B3  319E  266B         	fcall	___ftpack
  8810  09B5  0020               	movlb	0	; select bank0
  8811  09B6  0820               	movf	?___ftpack,w
  8812  09B7  00AE               	movwf	?___ftmul
  8813  09B8  0821               	movf	?___ftpack+1,w
  8814  09B9  00AF               	movwf	?___ftmul+1
  8815  09BA  0822               	movf	?___ftpack+2,w
  8816  09BB  00B0               	movwf	?___ftmul+2
  8817  09BC  0008               	return
  8818  09BD                     __end_of___ftmul:	
  8819                           
  8820                           	psect	text34
  8821  0A86                     __ptext34:	
  8822 ;; *************** function ___ftadd *****************
  8823 ;; Defined at:
  8824 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  f1              3   30[BANK0 ] float 
  8827 ;;  f2              3   33[BANK0 ] float 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  exp1            1   42[BANK0 ] unsigned char 
  8830 ;;  exp2            1   41[BANK0 ] unsigned char 
  8831 ;;  sign            1   40[BANK0 ] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  3   30[BANK0 ] float 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0, pclath, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:       13 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    5
  8848 ;; This function calls:
  8849 ;;		___ftpack
  8850 ;; This function is called by:
  8851 ;;		_getPercentValue
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           
  8856                           ;psect for function ___ftadd
  8857  0A86                     ___ftadd:	
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8861  0A86  0020               	movlb	0	; select bank0
  8862  0A87  083E               	movf	___ftadd@f1,w
  8863  0A88  00C4               	movwf	??___ftadd
  8864  0A89  083F               	movf	___ftadd@f1+1,w
  8865  0A8A  00C5               	movwf	??___ftadd+1
  8866  0A8B  0840               	movf	___ftadd@f1+2,w
  8867  0A8C  00C6               	movwf	??___ftadd+2
  8868  0A8D  1003               	clrc
  8869  0A8E  0D45               	rlf	??___ftadd+1,w
  8870  0A8F  0D46               	rlf	??___ftadd+2,w
  8871  0A90  00C7               	movwf	??___ftadd+3
  8872  0A91  0847               	movf	??___ftadd+3,w
  8873  0A92  00CA               	movwf	___ftadd@exp1
  8874  0A93  0841               	movf	___ftadd@f2,w
  8875  0A94  00C4               	movwf	??___ftadd
  8876  0A95  0842               	movf	___ftadd@f2+1,w
  8877  0A96  00C5               	movwf	??___ftadd+1
  8878  0A97  0843               	movf	___ftadd@f2+2,w
  8879  0A98  00C6               	movwf	??___ftadd+2
  8880  0A99  1003               	clrc
  8881  0A9A  0D45               	rlf	??___ftadd+1,w
  8882  0A9B  0D46               	rlf	??___ftadd+2,w
  8883  0A9C  00C7               	movwf	??___ftadd+3
  8884  0A9D  0847               	movf	??___ftadd+3,w
  8885  0A9E  00C9               	movwf	___ftadd@exp2
  8886  0A9F  084A               	movf	___ftadd@exp1,w
  8887  0AA0  1903               	btfsc	3,2
  8888  0AA1  2AAE               	goto	l6260
  8889  0AA2  0849               	movf	___ftadd@exp2,w
  8890  0AA3  024A               	subwf	___ftadd@exp1,w
  8891  0AA4  1803               	skipnc
  8892  0AA5  2AB5               	goto	l6264
  8893  0AA6  034A               	decf	___ftadd@exp1,w
  8894  0AA7  3AFF               	xorlw	255
  8895  0AA8  0749               	addwf	___ftadd@exp2,w
  8896  0AA9  00C4               	movwf	??___ftadd
  8897  0AAA  3019               	movlw	25
  8898  0AAB  0244               	subwf	??___ftadd,w
  8899  0AAC  1C03               	skipc
  8900  0AAD  2AB5               	goto	l6264
  8901  0AAE                     l6260:	
  8902  0AAE  0841               	movf	___ftadd@f2,w
  8903  0AAF  00BE               	movwf	?___ftadd
  8904  0AB0  0842               	movf	___ftadd@f2+1,w
  8905  0AB1  00BF               	movwf	?___ftadd+1
  8906  0AB2  0843               	movf	___ftadd@f2+2,w
  8907  0AB3  00C0               	movwf	?___ftadd+2
  8908  0AB4  0008               	return
  8909  0AB5                     l6264:	
  8910  0AB5  0849               	movf	___ftadd@exp2,w
  8911  0AB6  1903               	btfsc	3,2
  8912  0AB7  0008               	return
  8913  0AB8  084A               	movf	___ftadd@exp1,w
  8914  0AB9  0249               	subwf	___ftadd@exp2,w
  8915  0ABA  1803               	skipnc
  8916  0ABB  2AC4               	goto	l6270
  8917  0ABC  0349               	decf	___ftadd@exp2,w
  8918  0ABD  3AFF               	xorlw	255
  8919  0ABE  074A               	addwf	___ftadd@exp1,w
  8920  0ABF  00C4               	movwf	??___ftadd
  8921  0AC0  3019               	movlw	25
  8922  0AC1  0244               	subwf	??___ftadd,w
  8923  0AC2  1803               	btfsc	3,0
  8924  0AC3  0008               	return
  8925  0AC4                     l6270:	
  8926  0AC4  3006               	movlw	6
  8927  0AC5  00C4               	movwf	??___ftadd
  8928  0AC6  0844               	movf	??___ftadd,w
  8929  0AC7  00C8               	movwf	___ftadd@sign
  8930  0AC8  1BC0               	btfsc	___ftadd@f1+2,7
  8931  0AC9  17C8               	bsf	___ftadd@sign,7
  8932  0ACA  1BC3               	btfsc	___ftadd@f2+2,7
  8933  0ACB  1748               	bsf	___ftadd@sign,6
  8934  0ACC  17BF               	bsf	___ftadd@f1+1,7
  8935  0ACD  30FF               	movlw	255
  8936  0ACE  05BE               	andwf	___ftadd@f1,f
  8937  0ACF  30FF               	movlw	255
  8938  0AD0  05BF               	andwf	___ftadd@f1+1,f
  8939  0AD1  3000               	movlw	0
  8940  0AD2  05C0               	andwf	___ftadd@f1+2,f
  8941  0AD3  17C2               	bsf	___ftadd@f2+1,7
  8942  0AD4  30FF               	movlw	255
  8943  0AD5  05C1               	andwf	___ftadd@f2,f
  8944  0AD6  30FF               	movlw	255
  8945  0AD7  05C2               	andwf	___ftadd@f2+1,f
  8946  0AD8  3000               	movlw	0
  8947  0AD9  05C3               	andwf	___ftadd@f2+2,f
  8948  0ADA  0849               	movf	___ftadd@exp2,w
  8949  0ADB  024A               	subwf	___ftadd@exp1,w
  8950  0ADC  1803               	skipnc
  8951  0ADD  2B00               	goto	l6292
  8952  0ADE                     l6282:	
  8953  0ADE  3001               	movlw	1
  8954  0ADF                     u4365:	
  8955  0ADF  35C1               	lslf	___ftadd@f2,f
  8956  0AE0  0DC2               	rlf	___ftadd@f2+1,f
  8957  0AE1  0DC3               	rlf	___ftadd@f2+2,f
  8958  0AE2  0B89               	decfsz	9,f
  8959  0AE3  2ADF               	goto	u4365
  8960  0AE4  3001               	movlw	1
  8961  0AE5  02C9               	subwf	___ftadd@exp2,f
  8962  0AE6  0849               	movf	___ftadd@exp2,w
  8963  0AE7  064A               	xorwf	___ftadd@exp1,w
  8964  0AE8  1903               	skipnz
  8965  0AE9  2AFB               	goto	l6290
  8966  0AEA  3001               	movlw	1
  8967  0AEB  02C8               	subwf	___ftadd@sign,f
  8968  0AEC  0848               	movf	___ftadd@sign,w
  8969  0AED  3907               	andlw	7
  8970  0AEE  1903               	btfsc	3,2
  8971  0AEF  2AFB               	goto	l6290
  8972  0AF0  2ADE               	goto	l6282
  8973  0AF1                     l6288:	
  8974  0AF1  3001               	movlw	1
  8975  0AF2                     u4395:	
  8976  0AF2  36C0               	lsrf	___ftadd@f1+2,f
  8977  0AF3  0CBF               	rrf	___ftadd@f1+1,f
  8978  0AF4  0CBE               	rrf	___ftadd@f1,f
  8979  0AF5  0B89               	decfsz	9,f
  8980  0AF6  2AF2               	goto	u4395
  8981  0AF7  3001               	movlw	1
  8982  0AF8  00C4               	movwf	??___ftadd
  8983  0AF9  0844               	movf	??___ftadd,w
  8984  0AFA  07CA               	addwf	___ftadd@exp1,f
  8985  0AFB                     l6290:	
  8986  0AFB  084A               	movf	___ftadd@exp1,w
  8987  0AFC  0649               	xorwf	___ftadd@exp2,w
  8988  0AFD  1903               	btfsc	3,2
  8989  0AFE  2B25               	goto	l3443
  8990  0AFF  2AF1               	goto	l6288
  8991  0B00                     l6292:	
  8992  0B00  084A               	movf	___ftadd@exp1,w
  8993  0B01  0249               	subwf	___ftadd@exp2,w
  8994  0B02  1803               	skipnc
  8995  0B03  2B25               	goto	l3443
  8996  0B04                     l6294:	
  8997  0B04  3001               	movlw	1
  8998  0B05                     u4425:	
  8999  0B05  35BE               	lslf	___ftadd@f1,f
  9000  0B06  0DBF               	rlf	___ftadd@f1+1,f
  9001  0B07  0DC0               	rlf	___ftadd@f1+2,f
  9002  0B08  0B89               	decfsz	9,f
  9003  0B09  2B05               	goto	u4425
  9004  0B0A  3001               	movlw	1
  9005  0B0B  02CA               	subwf	___ftadd@exp1,f
  9006  0B0C  0849               	movf	___ftadd@exp2,w
  9007  0B0D  064A               	xorwf	___ftadd@exp1,w
  9008  0B0E  1903               	skipnz
  9009  0B0F  2B21               	goto	l6302
  9010  0B10  3001               	movlw	1
  9011  0B11  02C8               	subwf	___ftadd@sign,f
  9012  0B12  0848               	movf	___ftadd@sign,w
  9013  0B13  3907               	andlw	7
  9014  0B14  1903               	btfsc	3,2
  9015  0B15  2B21               	goto	l6302
  9016  0B16  2B04               	goto	l6294
  9017  0B17                     l6300:	
  9018  0B17  3001               	movlw	1
  9019  0B18                     u4455:	
  9020  0B18  36C3               	lsrf	___ftadd@f2+2,f
  9021  0B19  0CC2               	rrf	___ftadd@f2+1,f
  9022  0B1A  0CC1               	rrf	___ftadd@f2,f
  9023  0B1B  0B89               	decfsz	9,f
  9024  0B1C  2B18               	goto	u4455
  9025  0B1D  3001               	movlw	1
  9026  0B1E  00C4               	movwf	??___ftadd
  9027  0B1F  0844               	movf	??___ftadd,w
  9028  0B20  07C9               	addwf	___ftadd@exp2,f
  9029  0B21                     l6302:	
  9030  0B21  084A               	movf	___ftadd@exp1,w
  9031  0B22  0649               	xorwf	___ftadd@exp2,w
  9032  0B23  1D03               	skipz
  9033  0B24  2B17               	goto	l6300
  9034  0B25                     l3443:	
  9035  0B25  1FC8               	btfss	___ftadd@sign,7
  9036  0B26  2B37               	goto	l6306
  9037  0B27  30FF               	movlw	255
  9038  0B28  06BE               	xorwf	___ftadd@f1,f
  9039  0B29  30FF               	movlw	255
  9040  0B2A  06BF               	xorwf	___ftadd@f1+1,f
  9041  0B2B  30FF               	movlw	255
  9042  0B2C  06C0               	xorwf	___ftadd@f1+2,f
  9043  0B2D  3001               	movlw	1
  9044  0B2E  07BE               	addwf	___ftadd@f1,f
  9045  0B2F  3000               	movlw	0
  9046  0B30  1803               	skipnc
  9047  0B31  3001               	movlw	1
  9048  0B32  07BF               	addwf	___ftadd@f1+1,f
  9049  0B33  3000               	movlw	0
  9050  0B34  1803               	skipnc
  9051  0B35  3001               	movlw	1
  9052  0B36  07C0               	addwf	___ftadd@f1+2,f
  9053  0B37                     l6306:	
  9054  0B37  1F48               	btfss	___ftadd@sign,6
  9055  0B38  2B49               	goto	l6310
  9056  0B39  30FF               	movlw	255
  9057  0B3A  06C1               	xorwf	___ftadd@f2,f
  9058  0B3B  30FF               	movlw	255
  9059  0B3C  06C2               	xorwf	___ftadd@f2+1,f
  9060  0B3D  30FF               	movlw	255
  9061  0B3E  06C3               	xorwf	___ftadd@f2+2,f
  9062  0B3F  3001               	movlw	1
  9063  0B40  07C1               	addwf	___ftadd@f2,f
  9064  0B41  3000               	movlw	0
  9065  0B42  1803               	skipnc
  9066  0B43  3001               	movlw	1
  9067  0B44  07C2               	addwf	___ftadd@f2+1,f
  9068  0B45  3000               	movlw	0
  9069  0B46  1803               	skipnc
  9070  0B47  3001               	movlw	1
  9071  0B48  07C3               	addwf	___ftadd@f2+2,f
  9072  0B49                     l6310:	
  9073  0B49  01C8               	clrf	___ftadd@sign
  9074  0B4A  083E               	movf	___ftadd@f1,w
  9075  0B4B  07C1               	addwf	___ftadd@f2,f
  9076  0B4C  083F               	movf	___ftadd@f1+1,w
  9077  0B4D  3DC2               	addwfc	___ftadd@f2+1,f
  9078  0B4E  0840               	movf	___ftadd@f1+2,w
  9079  0B4F  3DC3               	addwfc	___ftadd@f2+2,f
  9080  0B50  1FC3               	btfss	___ftadd@f2+2,7
  9081  0B51  2B64               	goto	l6320
  9082  0B52  30FF               	movlw	255
  9083  0B53  06C1               	xorwf	___ftadd@f2,f
  9084  0B54  30FF               	movlw	255
  9085  0B55  06C2               	xorwf	___ftadd@f2+1,f
  9086  0B56  30FF               	movlw	255
  9087  0B57  06C3               	xorwf	___ftadd@f2+2,f
  9088  0B58  3001               	movlw	1
  9089  0B59  07C1               	addwf	___ftadd@f2,f
  9090  0B5A  3000               	movlw	0
  9091  0B5B  1803               	skipnc
  9092  0B5C  3001               	movlw	1
  9093  0B5D  07C2               	addwf	___ftadd@f2+1,f
  9094  0B5E  3000               	movlw	0
  9095  0B5F  1803               	skipnc
  9096  0B60  3001               	movlw	1
  9097  0B61  07C3               	addwf	___ftadd@f2+2,f
  9098  0B62  01C8               	clrf	___ftadd@sign
  9099  0B63  0AC8               	incf	___ftadd@sign,f
  9100  0B64                     l6320:	
  9101  0B64  0841               	movf	___ftadd@f2,w
  9102  0B65  00A0               	movwf	___ftpack@arg
  9103  0B66  0842               	movf	___ftadd@f2+1,w
  9104  0B67  00A1               	movwf	___ftpack@arg+1
  9105  0B68  0843               	movf	___ftadd@f2+2,w
  9106  0B69  00A2               	movwf	___ftpack@arg+2
  9107  0B6A  084A               	movf	___ftadd@exp1,w
  9108  0B6B  00C4               	movwf	??___ftadd
  9109  0B6C  0844               	movf	??___ftadd,w
  9110  0B6D  00A3               	movwf	___ftpack@exp
  9111  0B6E  0848               	movf	___ftadd@sign,w
  9112  0B6F  00C5               	movwf	??___ftadd+1
  9113  0B70  0845               	movf	??___ftadd+1,w
  9114  0B71  00A4               	movwf	___ftpack@sign
  9115  0B72  319E  266B         	fcall	___ftpack
  9116  0B74  0020               	movlb	0	; select bank0
  9117  0B75  0820               	movf	?___ftpack,w
  9118  0B76  00BE               	movwf	?___ftadd
  9119  0B77  0821               	movf	?___ftpack+1,w
  9120  0B78  00BF               	movwf	?___ftadd+1
  9121  0B79  0822               	movf	?___ftpack+2,w
  9122  0B7A  00C0               	movwf	?___ftadd+2
  9123  0B7B  0008               	return
  9124  0B7C                     __end_of___ftadd:	
  9125                           
  9126                           	psect	text35
  9127  27AF                     __ptext35:	
  9128 ;; *************** function _RF_RxDisable *****************
  9129 ;; Defined at:
  9130 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;  rf              1    wreg     unsigned char 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;  rf              1    4[BANK0 ] unsigned char 
  9135 ;; Return value:  Size  Location     Type
  9136 ;;		None               void
  9137 ;; Registers used:
  9138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;Total ram usage:        1 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    6
  9151 ;; This function calls:
  9152 ;;		_CC2500_WriteCommand
  9153 ;;		_RfPointSelect
  9154 ;;		_setINT_GO
  9155 ;; This function is called by:
  9156 ;;		_setRF_Main
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _RF_RxDisable
  9162  27AF                     _RF_RxDisable:	
  9163                           
  9164                           ;incstack = 0
  9165                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9166                           ;RF_RxDisable@rf stored from wreg
  9167  27AF  0020               	movlb	0	; select bank0
  9168  27B0  00A4               	movwf	RF_RxDisable@rf
  9169                           
  9170                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  9171  27B1  0824               	movf	RF_RxDisable@rf,w
  9172  27B2  31A3  232F  31A7   	fcall	_RfPointSelect
  9173                           
  9174                           ;RF_Control_B1.c: 202: if(RF->RxStatus)
  9175  27B5  087C               	movf	_RF,w
  9176  27B6  0086               	movwf	6
  9177  27B7  0187               	clrf	7
  9178  27B8  1D81               	btfss	1,3
  9179  27B9  0008               	return
  9180                           
  9181                           ;RF_Control_B1.c: 203: {
  9182                           ;RF_Control_B1.c: 204: RF->RxStatus=0;
  9183  27BA  087C               	movf	_RF,w
  9184  27BB  0086               	movwf	6
  9185  27BC  0187               	clrf	7
  9186  27BD  1181               	bcf	1,3
  9187                           
  9188                           ;RF_Control_B1.c: 205: RF->ReceiveGO=0;
  9189  27BE  087C               	movf	_RF,w
  9190  27BF  0086               	movwf	6
  9191  27C0  0187               	clrf	7
  9192  27C1  1081               	bcf	1,1
  9193                           
  9194                           ;RF_Control_B1.c: 206: RF->DebounceTime=0;
  9195  27C2  0A7C               	incf	_RF,w
  9196  27C3  0086               	movwf	6
  9197  27C4  0187               	clrf	7
  9198  27C5  0181               	clrf	1
  9199                           
  9200                           ;RF_Control_B1.c: 207: RF->Debounce=0;
  9201  27C6  087C               	movf	_RF,w
  9202  27C7  0086               	movwf	6
  9203  27C8  0187               	clrf	7
  9204  27C9  1281               	bcf	1,5
  9205                           
  9206                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x36);
  9207  27CA  3036               	movlw	54
  9208  27CB  31A4  2427  31A7   	fcall	_CC2500_WriteCommand
  9209                           
  9210                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x3A);
  9211  27CE  303A               	movlw	58
  9212  27CF  31A4  2427  31A7   	fcall	_CC2500_WriteCommand
  9213                           
  9214                           ;RF_Control_B1.c: 210: setINT_GO(0);
  9215  27D2  3000               	movlw	0
  9216  27D3  31A3  2306         	fcall	_setINT_GO
  9217  27D5  0008               	return
  9218  27D6                     __end_of_RF_RxDisable:	
  9219                           
  9220                           	psect	text36
  9221  1C3C                     __ptext36:	
  9222 ;; *************** function _CC2500_TxData *****************
  9223 ;; Defined at:
  9224 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;		None
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9229 ;; Return value:  Size  Location     Type
  9230 ;;		None               void
  9231 ;; Registers used:
  9232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;Total ram usage:        2 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    6
  9245 ;; This function calls:
  9246 ;;		_CC2500_WriteByte
  9247 ;;		_CC2500_WriteCommand
  9248 ;; This function is called by:
  9249 ;;		_setRF_Main
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           
  9254                           ;psect for function _CC2500_TxData
  9255  1C3C                     _CC2500_TxData:	
  9256                           
  9257                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9258                           ;CC2500_B1.c: 34: RC4=0;
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9262  1C3C  0020               	movlb	0	; select bank0
  9263  1C3D  120E               	bcf	14,4	;volatile
  9264                           
  9265                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9266  1C3E  307F               	movlw	127
  9267  1C3F  00A4               	movwf	??_CC2500_TxData
  9268  1C40  0824               	movf	??_CC2500_TxData,w
  9269  1C41  0021               	movlb	1	; select bank1
  9270  1C42  00BF               	movwf	_SPI0Buffer^(0+128)
  9271  1C43                     l307:	
  9272                           ;CC2500_B1.c: 36: while(RC2==1);
  9273                           
  9274  1C43  0020               	movlb	0	; select bank0
  9275  1C44  190E               	btfsc	14,2	;volatile
  9276  1C45  2C43               	goto	l307
  9277                           
  9278                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9279  1C46  31A5  25B6  319C   	fcall	_CC2500_WriteByte
  9280                           
  9281                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9282  1C49  0021               	movlb	1	; select bank1
  9283  1C4A  0840               	movf	_Tx_Length^(0+128),w
  9284  1C4B  0020               	movlb	0	; select bank0
  9285  1C4C  00A4               	movwf	??_CC2500_TxData
  9286  1C4D  0824               	movf	??_CC2500_TxData,w
  9287  1C4E  0021               	movlb	1	; select bank1
  9288  1C4F  00BF               	movwf	_SPI0Buffer^(0+128)
  9289                           
  9290                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9291  1C50  31A5  25B6  319C   	fcall	_CC2500_WriteByte
  9292                           
  9293                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9294  1C53  0020               	movlb	0	; select bank0
  9295  1C54  01A5               	clrf	CC2500_TxData@loop_e
  9296  1C55                     l7058:	
  9297  1C55  0021               	movlb	1	; select bank1
  9298  1C56  0840               	movf	_Tx_Length^(0+128),w
  9299  1C57  0020               	movlb	0	; select bank0
  9300  1C58  0225               	subwf	CC2500_TxData@loop_e,w
  9301  1C59  1803               	btfsc	3,0
  9302  1C5A  2C6D               	goto	l312
  9303                           
  9304                           ;CC2500_B1.c: 41: {
  9305                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9306  1C5B  0825               	movf	CC2500_TxData@loop_e,w
  9307  1C5C  3EA0               	addlw	_RF_Data& (0+255)
  9308  1C5D  0086               	movwf	6
  9309  1C5E  0187               	clrf	7
  9310  1C5F  0801               	movf	1,w
  9311  1C60  00A4               	movwf	??_CC2500_TxData
  9312  1C61  0824               	movf	??_CC2500_TxData,w
  9313  1C62  0021               	movlb	1	; select bank1
  9314  1C63  00BF               	movwf	_SPI0Buffer^(0+128)
  9315                           
  9316                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9317  1C64  31A5  25B6  319C   	fcall	_CC2500_WriteByte
  9318  1C67  3001               	movlw	1
  9319  1C68  0020               	movlb	0	; select bank0
  9320  1C69  00A4               	movwf	??_CC2500_TxData
  9321  1C6A  0824               	movf	??_CC2500_TxData,w
  9322  1C6B  07A5               	addwf	CC2500_TxData@loop_e,f
  9323  1C6C  2C55               	goto	l7058
  9324  1C6D                     l312:	
  9325                           
  9326                           ;CC2500_B1.c: 44: }
  9327                           ;CC2500_B1.c: 45: RC4=1;
  9328  1C6D  160E               	bsf	14,4	;volatile
  9329                           
  9330                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9331  1C6E  3035               	movlw	53
  9332  1C6F  31A4  2427  319C   	fcall	_CC2500_WriteCommand
  9333  1C72                     l313:	
  9334                           ;CC2500_B1.c: 47: while(RB0==0);
  9335                           
  9336  1C72  0020               	movlb	0	; select bank0
  9337  1C73  1C0D               	btfss	13,0	;volatile
  9338  1C74  2C72               	goto	l313
  9339  1C75                     l316:	
  9340                           ;CC2500_B1.c: 48: while(RB0==1);
  9341                           
  9342  1C75  180D               	btfsc	13,0	;volatile
  9343  1C76  2C75               	goto	l316
  9344                           
  9345                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9346  1C77  3036               	movlw	54
  9347  1C78  31A4  2427  319C   	fcall	_CC2500_WriteCommand
  9348                           
  9349                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9350  1C7B  303B               	movlw	59
  9351  1C7C  31A4  2427         	fcall	_CC2500_WriteCommand
  9352                           
  9353                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9354  1C7E  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9355  1C7F  0008               	return
  9356  1C80                     __end_of_CC2500_TxData:	
  9357                           
  9358                           	psect	text37
  9359  1ECC                     __ptext37:	
  9360 ;; *************** function _CC2500_RxData *****************
  9361 ;; Defined at:
  9362 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;		None               void
  9369 ;; Registers used:
  9370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        2 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    6
  9383 ;; This function calls:
  9384 ;;		_CC2500_ReadByte
  9385 ;;		_CC2500_ReadStatus
  9386 ;;		_CC2500_WriteByte
  9387 ;;		_CC2500_WriteCommand
  9388 ;;		_setRF_RxStatus
  9389 ;; This function is called by:
  9390 ;;		_setRF_Main
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           
  9395                           ;psect for function _CC2500_RxData
  9396  1ECC                     _CC2500_RxData:	
  9397                           
  9398                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9399                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9403  1ECC  0020               	movlb	0	; select bank0
  9404  1ECD  180D               	btfsc	13,0	;volatile
  9405  1ECE                     l323:	
  9406                           ;CC2500_B1.c: 63: {
  9407                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9408                           
  9409  1ECE  180D               	btfsc	13,0	;volatile
  9410  1ECF  2ECE               	goto	l323
  9411                           
  9412                           ;CC2500_B1.c: 65: }
  9413                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9414  1ED0  303B               	movlw	59
  9415  1ED1  31A6  264F  319E   	fcall	_CC2500_ReadStatus
  9416                           
  9417                           ;CC2500_B1.c: 67: if(s_data != 0)
  9418  1ED4  0021               	movlb	1	; select bank1
  9419  1ED5  0843               	movf	_s_data^(0+128),w
  9420  1ED6  1903               	btfsc	3,2
  9421  1ED7  2F22               	goto	l9168
  9422                           
  9423                           ;CC2500_B1.c: 69: {
  9424                           ;CC2500_B1.c: 70: RC4=0;
  9425  1ED8  0020               	movlb	0	; select bank0
  9426  1ED9  120E               	bcf	14,4	;volatile
  9427                           
  9428                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9429  1EDA  30FF               	movlw	255
  9430  1EDB  00A4               	movwf	??_CC2500_RxData
  9431  1EDC  0824               	movf	??_CC2500_RxData,w
  9432  1EDD  0021               	movlb	1	; select bank1
  9433  1EDE  00BF               	movwf	_SPI0Buffer^(0+128)
  9434  1EDF                     l327:	
  9435                           ;CC2500_B1.c: 72: while(RC2==1);
  9436                           
  9437  1EDF  0020               	movlb	0	; select bank0
  9438  1EE0  190E               	btfsc	14,2	;volatile
  9439  1EE1  2EDF               	goto	l327
  9440                           
  9441                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9442  1EE2  31A5  25B6  319E   	fcall	_CC2500_WriteByte
  9443                           
  9444                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9445  1EE5  31A6  2686  319E   	fcall	_CC2500_ReadByte
  9446                           
  9447                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9448  1EE8  0021               	movlb	1	; select bank1
  9449  1EE9  083F               	movf	_SPI0Buffer^(0+128),w
  9450  1EEA  0020               	movlb	0	; select bank0
  9451  1EEB  00A4               	movwf	??_CC2500_RxData
  9452  1EEC  0824               	movf	??_CC2500_RxData,w
  9453  1EED  0021               	movlb	1	; select bank1
  9454  1EEE  00BE               	movwf	_Rx_Length^(0+128)
  9455                           
  9456                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9457  1EEF  0020               	movlb	0	; select bank0
  9458  1EF0  01A5               	clrf	CC2500_RxData@loop_f
  9459  1EF1                     l9154:	
  9460  1EF1  0021               	movlb	1	; select bank1
  9461  1EF2  083E               	movf	_Rx_Length^(0+128),w
  9462  1EF3  0020               	movlb	0	; select bank0
  9463  1EF4  0225               	subwf	CC2500_RxData@loop_f,w
  9464  1EF5  1803               	btfsc	3,0
  9465  1EF6  2F09               	goto	l9156
  9466                           
  9467                           ;CC2500_B1.c: 78: {
  9468                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9469  1EF7  31A6  2686  319E   	fcall	_CC2500_ReadByte
  9470                           
  9471                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9472  1EFA  0021               	movlb	1	; select bank1
  9473  1EFB  083F               	movf	_SPI0Buffer^(0+128),w
  9474  1EFC  0020               	movlb	0	; select bank0
  9475  1EFD  00A4               	movwf	??_CC2500_RxData
  9476  1EFE  0825               	movf	CC2500_RxData@loop_f,w
  9477  1EFF  3EA0               	addlw	_RF_Data& (0+255)
  9478  1F00  0086               	movwf	6
  9479  1F01  0187               	clrf	7
  9480  1F02  0824               	movf	??_CC2500_RxData,w
  9481  1F03  0081               	movwf	1
  9482  1F04  3001               	movlw	1
  9483  1F05  00A4               	movwf	??_CC2500_RxData
  9484  1F06  0824               	movf	??_CC2500_RxData,w
  9485  1F07  07A5               	addwf	CC2500_RxData@loop_f,f
  9486  1F08  2EF1               	goto	l9154
  9487  1F09                     l9156:	
  9488                           
  9489                           ;CC2500_B1.c: 81: }
  9490                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9491  1F09  31A6  2686  319E   	fcall	_CC2500_ReadByte
  9492                           
  9493                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9494  1F0C  0021               	movlb	1	; select bank1
  9495  1F0D  083F               	movf	_SPI0Buffer^(0+128),w
  9496  1F0E  0020               	movlb	0	; select bank0
  9497  1F0F  00A4               	movwf	??_CC2500_RxData
  9498  1F10  0824               	movf	??_CC2500_RxData,w
  9499  1F11  0021               	movlb	1	; select bank1
  9500  1F12  00BD               	movwf	_RSSI^(0+128)
  9501                           
  9502                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9503  1F13  31A6  2686  319E   	fcall	_CC2500_ReadByte
  9504                           
  9505                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9506  1F16  0021               	movlb	1	; select bank1
  9507  1F17  083F               	movf	_SPI0Buffer^(0+128),w
  9508  1F18  0020               	movlb	0	; select bank0
  9509  1F19  00A4               	movwf	??_CC2500_RxData
  9510  1F1A  0824               	movf	??_CC2500_RxData,w
  9511  1F1B  0021               	movlb	1	; select bank1
  9512  1F1C  00B7               	movwf	_CRC^(0+128)
  9513                           
  9514                           ;CC2500_B1.c: 86: RC4=1;
  9515  1F1D  0020               	movlb	0	; select bank0
  9516  1F1E  160E               	bsf	14,4	;volatile
  9517                           
  9518                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9519  1F1F  0021               	movlb	1	; select bank1
  9520  1F20  1BB7               	btfsc	_CRC^(0+128),7
  9521                           
  9522                           ;CC2500_B1.c: 88: Receive_OK=1;
  9523  1F21  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9524  1F22                     l9168:	
  9525                           
  9526                           ;CC2500_B1.c: 89: }
  9527                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9528  1F22  3036               	movlw	54
  9529  1F23  31A4  2427  319E   	fcall	_CC2500_WriteCommand
  9530                           
  9531                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9532  1F26  303A               	movlw	58
  9533  1F27  31A4  2427  319E   	fcall	_CC2500_WriteCommand
  9534                           
  9535                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9536  1F2A  0020               	movlb	0	; select bank0
  9537  1F2B  01A2               	clrf	setRF_RxStatus@command
  9538  1F2C  3001               	movlw	1
  9539  1F2D  31A3  23ED         	fcall	_setRF_RxStatus
  9540  1F2F  0008               	return
  9541  1F30                     __end_of_CC2500_RxData:	
  9542                           
  9543                           	psect	text38
  9544  23ED                     __ptext38:	
  9545 ;; *************** function _setRF_RxStatus *****************
  9546 ;; Defined at:
  9547 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  rf              1    wreg     unsigned char 
  9550 ;;  command         1    2[BANK0 ] unsigned char 
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;  rf              1    3[BANK0 ] unsigned char 
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9562 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;Total ram usage:        2 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:    5
  9569 ;; This function calls:
  9570 ;;		_RfPointSelect
  9571 ;; This function is called by:
  9572 ;;		_CC2500_RxData
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _setRF_RxStatus
  9578  23ED                     _setRF_RxStatus:	
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9582                           ;setRF_RxStatus@rf stored from wreg
  9583  23ED  0020               	movlb	0	; select bank0
  9584  23EE  00A3               	movwf	setRF_RxStatus@rf
  9585                           
  9586                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9587  23EF  0823               	movf	setRF_RxStatus@rf,w
  9588  23F0  31A3  232F         	fcall	_RfPointSelect
  9589                           
  9590                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9591  23F2  087C               	movf	_RF,w
  9592  23F3  0086               	movwf	6
  9593  23F4  0187               	clrf	7
  9594  23F5  0020               	movlb	0	; select bank0
  9595  23F6  0822               	movf	setRF_RxStatus@command,w
  9596  23F7  1181               	bcf	1,3
  9597  23F8  1D03               	skipz
  9598  23F9  1581               	bsf	1,3
  9599  23FA  0008               	return
  9600  23FB                     __end_of_setRF_RxStatus:	
  9601                           
  9602                           	psect	text39
  9603  264F                     __ptext39:	
  9604 ;; *************** function _CC2500_ReadStatus *****************
  9605 ;; Defined at:
  9606 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;  status_addr     1    wreg     unsigned char 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0, pclath, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        2 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    5
  9627 ;; This function calls:
  9628 ;;		_CC2500_ReadByte
  9629 ;;		_CC2500_WriteByte
  9630 ;; This function is called by:
  9631 ;;		_CC2500_RxData
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           
  9636                           ;psect for function _CC2500_ReadStatus
  9637  264F                     _CC2500_ReadStatus:	
  9638                           
  9639                           ;incstack = 0
  9640                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9641                           ;CC2500_ReadStatus@status_addr stored from wreg
  9642  264F  0020               	movlb	0	; select bank0
  9643  2650  00A3               	movwf	CC2500_ReadStatus@status_addr
  9644                           
  9645                           ;CC2500_B1.c: 269: RC4=0;
  9646  2651  120E               	bcf	14,4	;volatile
  9647                           
  9648                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9649  2652  0823               	movf	CC2500_ReadStatus@status_addr,w
  9650  2653  3EC0               	addlw	192
  9651  2654  00A2               	movwf	??_CC2500_ReadStatus
  9652  2655  0822               	movf	??_CC2500_ReadStatus,w
  9653  2656  0021               	movlb	1	; select bank1
  9654  2657  00BF               	movwf	_SPI0Buffer^(0+128)
  9655  2658                     l403:	
  9656                           ;CC2500_B1.c: 272: while(RC2==1);
  9657                           
  9658  2658  0020               	movlb	0	; select bank0
  9659  2659  190E               	btfsc	14,2	;volatile
  9660  265A  2E58               	goto	l403
  9661                           
  9662                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9663  265B  31A5  25B6  31A6   	fcall	_CC2500_WriteByte
  9664                           
  9665                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9666  265E  31A6  2686         	fcall	_CC2500_ReadByte
  9667                           
  9668                           ;CC2500_B1.c: 276: RC4=1;
  9669  2660  0020               	movlb	0	; select bank0
  9670  2661  160E               	bsf	14,4	;volatile
  9671                           
  9672                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9673  2662  0021               	movlb	1	; select bank1
  9674  2663  083F               	movf	_SPI0Buffer^(0+128),w
  9675  2664  0020               	movlb	0	; select bank0
  9676  2665  00A2               	movwf	??_CC2500_ReadStatus
  9677  2666  0822               	movf	??_CC2500_ReadStatus,w
  9678  2667  0021               	movlb	1	; select bank1
  9679  2668  00C3               	movwf	_s_data^(0+128)
  9680  2669  0008               	return
  9681  266A                     __end_of_CC2500_ReadStatus:	
  9682                           
  9683                           	psect	text40
  9684  2686                     __ptext40:	
  9685 ;; *************** function _CC2500_ReadByte *****************
  9686 ;; Defined at:
  9687 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;		None               void
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;Total ram usage:        2 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    4
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_CC2500_RxData
  9712 ;;		_CC2500_ReadStatus
  9713 ;;		_CC2500_ReadREG
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           
  9718                           ;psect for function _CC2500_ReadByte
  9719  2686                     _CC2500_ReadByte:	
  9720                           
  9721                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9722                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9726  2686  0020               	movlb	0	; select bank0
  9727  2687  01A1               	clrf	CC2500_ReadByte@loop_b
  9728  2688                     L12:	
  9729  2688  3008               	movlw	8
  9730  2689  0221               	subwf	CC2500_ReadByte@loop_b,w
  9731  268A  1803               	btfsc	3,0
  9732  268B  0008               	return
  9733                           
  9734                           ;CC2500_B1.c: 214: {
  9735                           ;CC2500_B1.c: 215: RC1=1;
  9736  268C  148E               	bsf	14,1	;volatile
  9737                           
  9738                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9739  268D  1003               	clrc
  9740  268E  0021               	movlb	1	; select bank1
  9741  268F  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9742                           
  9743                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9744  2690  0020               	movlb	0	; select bank0
  9745  2691  1D0E               	btfss	14,2	;volatile
  9746  2692  2E96               	goto	l6782
  9747                           
  9748                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9749  2693  0021               	movlb	1	; select bank1
  9750  2694  143F               	bsf	_SPI0Buffer^(0+128),0
  9751  2695  2E9C               	goto	l6784
  9752  2696                     l6782:	
  9753                           
  9754                           ;CC2500_B1.c: 219: else
  9755                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9756  2696  30FE               	movlw	254
  9757  2697  0020               	movlb	0	; select bank0
  9758  2698  00A0               	movwf	??_CC2500_ReadByte
  9759  2699  0820               	movf	??_CC2500_ReadByte,w
  9760  269A  0021               	movlb	1	; select bank1
  9761  269B  05BF               	andwf	_SPI0Buffer^(0+128),f
  9762  269C                     l6784:	
  9763                           
  9764                           ;CC2500_B1.c: 221: RC1=0;
  9765  269C  0020               	movlb	0	; select bank0
  9766  269D  108E               	bcf	14,1	;volatile
  9767  269E  3001               	movlw	1
  9768  269F  00A0               	movwf	??_CC2500_ReadByte
  9769  26A0  0820               	movf	??_CC2500_ReadByte,w
  9770  26A1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9771  26A2  2E88               	goto	L12
  9772  26A3                     __end_of_CC2500_ReadByte:	
  9773                           
  9774                           	psect	text41
  9775  229F                     __ptext41:	
  9776 ;; *************** function _RF_Initialization *****************
  9777 ;; Defined at:
  9778 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;		None               void
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0, pclath, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        0 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    5
  9799 ;; This function calls:
  9800 ;;		_setRF_Initialization
  9801 ;; This function is called by:
  9802 ;;		_main
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _RF_Initialization
  9808  229F                     _RF_Initialization:	
  9809                           
  9810                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9814  229F  3001               	movlw	1
  9815  22A0  31A2  22CE         	fcall	_setRF_Initialization
  9816  22A2  0008               	return
  9817  22A3                     __end_of_RF_Initialization:	
  9818                           
  9819                           	psect	text42
  9820  22CE                     __ptext42:	
  9821 ;; *************** function _setRF_Initialization *****************
  9822 ;; Defined at:
  9823 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  rf              1    wreg     unsigned char 
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;  rf              1    0[COMMON] unsigned char 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;		None               void
  9830 ;; Registers used:
  9831 ;;		wreg
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;Total ram usage:        1 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    4
  9844 ;; This function calls:
  9845 ;;		Nothing
  9846 ;; This function is called by:
  9847 ;;		_RF_Initialization
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _setRF_Initialization
  9853  22CE                     _setRF_Initialization:	
  9854                           
  9855                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _setRF_Initialization: [wreg]
  9859  22CE  3015               	movlw	21
  9860  22CF  0020               	movlb	0	; select bank0
  9861  22D0  00A0               	movwf	??_setRF_Initialization
  9862  22D1  0820               	movf	??_setRF_Initialization,w
  9863  22D2  0021               	movlb	1	; select bank1
  9864  22D3  00C0               	movwf	_Tx_Length^(0+128)
  9865  22D4  0008               	return
  9866  22D5                     __end_of_setRF_Initialization:	
  9867                           
  9868                           	psect	text43
  9869  228A                     __ptext43:	
  9870 ;; *************** function _PowerFault_Main *****************
  9871 ;; Defined at:
  9872 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;		None
  9877 ;; Return value:  Size  Location     Type
  9878 ;;		None               void
  9879 ;; Registers used:
  9880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;Total ram usage:        0 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; Hardware stack levels required when called:   10
  9893 ;; This function calls:
  9894 ;;		_setPowerFault_Main
  9895 ;; This function is called by:
  9896 ;;		_main
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _PowerFault_Main
  9902  228A                     _PowerFault_Main:	
  9903                           
  9904                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9908  228A  318C  2474         	fcall	_setPowerFault_Main
  9909  228C  0008               	return
  9910  228D                     __end_of_PowerFault_Main:	
  9911                           
  9912                           	psect	text44
  9913  0C74                     __ptext44:	
  9914 ;; *************** function _setPowerFault_Main *****************
  9915 ;; Defined at:
  9916 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        2 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    9
  9937 ;; This function calls:
  9938 ;;		_getLoad_Safe
  9939 ;;		_getTemp_Safe
  9940 ;;		_setPowerFault_Exceptions
  9941 ;; This function is called by:
  9942 ;;		_PowerFault_Main
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _setPowerFault_Main
  9948  0C74                     _setPowerFault_Main:	
  9949                           
  9950                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9951                           
  9952                           ;incstack = 0
  9953                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9954  0C74  087B               	movf	_PF,w
  9955  0C75  0086               	movwf	6
  9956  0C76  3001               	movlw	1	; select bank2/3
  9957  0C77  0087               	movwf	7
  9958  0C78  1C01               	btfss	1,0
  9959  0C79  0008               	return
  9960                           
  9961                           ;PowerFault_B1.c: 64: {
  9962                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9963  0C7A  087B               	movf	_PF,w
  9964  0C7B  0086               	movwf	6
  9965  0C7C  3001               	movlw	1	; select bank2/3
  9966  0C7D  0087               	movwf	7
  9967  0C7E  1981               	btfsc	1,3
  9968  0C7F  2CC4               	goto	l9690
  9969                           
  9970                           ;PowerFault_B1.c: 66: {
  9971                           ;PowerFault_B1.c: 67: PF->Time++;
  9972  0C80  087B               	movf	_PF,w
  9973  0C81  3E06               	addlw	6
  9974  0C82  0086               	movwf	6
  9975  0C83  3001               	movlw	1	; select bank2/3
  9976  0C84  0087               	movwf	7
  9977  0C85  3001               	movlw	1
  9978  0C86  0781               	addwf	1,f
  9979  0C87  3141               	addfsr 1,1
  9980  0C88  1803               	skipnc
  9981  0C89  0A81               	incf	1,f
  9982                           
  9983                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9984  0C8A  087B               	movf	_PF,w
  9985  0C8B  3E06               	addlw	6
  9986  0C8C  0086               	movwf	6
  9987  0C8D  3001               	movlw	1	; select bank2/3
  9988  0C8E  0087               	movwf	7
  9989  0C8F  3F40               	moviw [0]fsr1
  9990  0C90  0020               	movlb	0	; select bank0
  9991  0C91  00AD               	movwf	??_setPowerFault_Main
  9992  0C92  3F41               	moviw [1]fsr1
  9993  0C93  00AE               	movwf	??_setPowerFault_Main+1
  9994  0C94  3002               	movlw	2
  9995  0C95  022E               	subwf	??_setPowerFault_Main+1,w
  9996  0C96  30BC               	movlw	188
  9997  0C97  1903               	skipnz
  9998  0C98  022D               	subwf	??_setPowerFault_Main,w
  9999  0C99  1C03               	skipc
 10000  0C9A  0008               	return
 10001                           
 10002                           ;PowerFault_B1.c: 69: {
 10003                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
 10004  0C9B  31A3  235B  318C   	fcall	_getLoad_Safe
 10005  0C9E  3A00               	xorlw	0
 10006  0C9F  1903               	skipnz
 10007  0CA0  2CBA               	goto	l9688
 10008  0CA1  31A2  22C0  318C   	fcall	_getTemp_Safe
 10009  0CA4  3A00               	xorlw	0
 10010  0CA5  1903               	skipnz
 10011  0CA6  2CBA               	goto	l9688
 10012                           
 10013                           ;PowerFault_B1.c: 71: {
 10014                           ;PowerFault_B1.c: 72: PF->Time=0;
 10015  0CA7  087B               	movf	_PF,w
 10016  0CA8  3E06               	addlw	6
 10017  0CA9  0086               	movwf	6
 10018  0CAA  3001               	movlw	1	; select bank2/3
 10019  0CAB  0087               	movwf	7
 10020  0CAC  3000               	movlw	0
 10021  0CAD  3FC0               	movwi [0]fsr1
 10022  0CAE  3FC1               	movwi [1]fsr1
 10023                           
 10024                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
 10025  0CAF  087B               	movf	_PF,w
 10026  0CB0  0086               	movwf	6
 10027  0CB1  3001               	movlw	1	; select bank2/3
 10028  0CB2  0087               	movwf	7
 10029  0CB3  1581               	bsf	1,3
 10030                           
 10031                           ;PowerFault_B1.c: 74: PF->Safe=0;
 10032  0CB4  087B               	movf	_PF,w
 10033  0CB5  0086               	movwf	6
 10034  0CB6  3001               	movlw	1	; select bank2/3
 10035  0CB7  0087               	movwf	7
 10036  0CB8  1101               	bcf	1,2
 10037                           
 10038                           ;PowerFault_B1.c: 75: }
 10039  0CB9  0008               	return
 10040  0CBA                     l9688:	
 10041                           
 10042                           ;PowerFault_B1.c: 76: else
 10043                           ;PowerFault_B1.c: 77: {
 10044                           ;PowerFault_B1.c: 78: PF->Time=700;
 10045  0CBA  087B               	movf	_PF,w
 10046  0CBB  3E06               	addlw	6
 10047  0CBC  0086               	movwf	6
 10048  0CBD  3001               	movlw	1	; select bank2/3
 10049  0CBE  0087               	movwf	7
 10050  0CBF  30BC               	movlw	188
 10051  0CC0  3FC0               	movwi [0]fsr1
 10052  0CC1  3002               	movlw	2
 10053  0CC2  3FC1               	movwi [1]fsr1
 10054                           
 10055                           ;PowerFault_B1.c: 79: }
 10056                           ;PowerFault_B1.c: 80: }
 10057                           ;PowerFault_B1.c: 81: }
 10058  0CC3  0008               	return
 10059  0CC4                     l9690:	
 10060                           
 10061                           ;PowerFault_B1.c: 82: else
 10062                           ;PowerFault_B1.c: 83: {
 10063                           ;PowerFault_B1.c: 84: PF->Time++;
 10064  0CC4  087B               	movf	_PF,w
 10065  0CC5  3E06               	addlw	6
 10066  0CC6  0086               	movwf	6
 10067  0CC7  3001               	movlw	1	; select bank2/3
 10068  0CC8  0087               	movwf	7
 10069  0CC9  3001               	movlw	1
 10070  0CCA  0781               	addwf	1,f
 10071  0CCB  3141               	addfsr 1,1
 10072  0CCC  1803               	skipnc
 10073  0CCD  0A81               	incf	1,f
 10074                           
 10075                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10076  0CCE  087B               	movf	_PF,w
 10077  0CCF  3E06               	addlw	6
 10078  0CD0  0086               	movwf	6
 10079  0CD1  3001               	movlw	1	; select bank2/3
 10080  0CD2  0087               	movwf	7
 10081  0CD3  3F40               	moviw [0]fsr1
 10082  0CD4  0020               	movlb	0	; select bank0
 10083  0CD5  00AD               	movwf	??_setPowerFault_Main
 10084  0CD6  3F41               	moviw [1]fsr1
 10085  0CD7  00AE               	movwf	??_setPowerFault_Main+1
 10086  0CD8  3000               	movlw	0
 10087  0CD9  022E               	subwf	??_setPowerFault_Main+1,w
 10088  0CDA  3002               	movlw	2
 10089  0CDB  1903               	skipnz
 10090  0CDC  022D               	subwf	??_setPowerFault_Main,w
 10091  0CDD  1C03               	skipc
 10092  0CDE  0008               	return
 10093                           
 10094                           ;PowerFault_B1.c: 86: {
 10095                           ;PowerFault_B1.c: 87: PF->Time=0;
 10096  0CDF  087B               	movf	_PF,w
 10097  0CE0  3E06               	addlw	6
 10098  0CE1  0086               	movwf	6
 10099  0CE2  3001               	movlw	1	; select bank2/3
 10100  0CE3  0087               	movwf	7
 10101  0CE4  3000               	movlw	0
 10102  0CE5  3FC0               	movwi [0]fsr1
 10103  0CE6  3FC1               	movwi [1]fsr1
 10104                           
 10105                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10106  0CE7  087B               	movf	_PF,w
 10107  0CE8  0086               	movwf	6
 10108  0CE9  3001               	movlw	1	; select bank2/3
 10109  0CEA  0087               	movwf	7
 10110  0CEB  1181               	bcf	1,3
 10111                           
 10112                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10113  0CEC  087B               	movf	_PF,w
 10114  0CED  0086               	movwf	6
 10115  0CEE  3001               	movlw	1	; select bank2/3
 10116  0CEF  0087               	movwf	7
 10117  0CF0  1C81               	btfss	1,1
 10118  0CF1  2D2D               	goto	l9710
 10119                           
 10120                           ;PowerFault_B1.c: 91: {
 10121                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10122  0CF2  0A7B               	incf	_PF,w
 10123  0CF3  0086               	movwf	6
 10124  0CF4  3001               	movlw	1	; select bank2/3
 10125  0CF5  0087               	movwf	7
 10126  0CF6  3F40               	moviw [0]fsr1
 10127  0CF7  00AD               	movwf	??_setPowerFault_Main
 10128  0CF8  3F41               	moviw [1]fsr1
 10129  0CF9  00AE               	movwf	??_setPowerFault_Main+1
 10130  0CFA  3001               	movlw	1
 10131  0CFB  022E               	subwf	??_setPowerFault_Main+1,w
 10132  0CFC  3091               	movlw	145
 10133  0CFD  1903               	skipnz
 10134  0CFE  022D               	subwf	??_setPowerFault_Main,w
 10135  0CFF  1803               	skipnc
 10136  0D00  2D69               	goto	l9722
 10137  0D01  0A7B               	incf	_PF,w
 10138  0D02  0086               	movwf	6
 10139  0D03  3001               	movlw	1	; select bank2/3
 10140  0D04  0087               	movwf	7
 10141  0D05  3F40               	moviw [0]fsr1
 10142  0D06  00AD               	movwf	??_setPowerFault_Main
 10143  0D07  3F41               	moviw [1]fsr1
 10144  0D08  00AE               	movwf	??_setPowerFault_Main+1
 10145  0D09  3000               	movlw	0
 10146  0D0A  022E               	subwf	??_setPowerFault_Main+1,w
 10147  0D0B  30C8               	movlw	200
 10148  0D0C  1903               	skipnz
 10149  0D0D  022D               	subwf	??_setPowerFault_Main,w
 10150  0D0E  1C03               	skipc
 10151  0D0F  2D69               	goto	l9722
 10152                           
 10153                           ;PowerFault_B1.c: 93: {
 10154                           ;PowerFault_B1.c: 94: PF->Count++;
 10155  0D10  3001               	movlw	1
 10156  0D11  00AD               	movwf	??_setPowerFault_Main
 10157  0D12  087B               	movf	_PF,w
 10158  0D13  3E05               	addlw	5
 10159  0D14  0086               	movwf	6
 10160  0D15  3001               	movlw	1	; select bank2/3
 10161  0D16  0087               	movwf	7
 10162  0D17  082D               	movf	??_setPowerFault_Main,w
 10163  0D18  0781               	addwf	1,f
 10164                           
 10165                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10166  0D19  087B               	movf	_PF,w
 10167  0D1A  3E05               	addlw	5
 10168  0D1B  0086               	movwf	6
 10169  0D1C  3001               	movlw	1	; select bank2/3
 10170  0D1D  0087               	movwf	7
 10171  0D1E  3002               	movlw	2
 10172  0D1F  0201               	subwf	1,w
 10173  0D20  1C03               	skipc
 10174  0D21  2D6F               	goto	l9724
 10175                           
 10176                           ;PowerFault_B1.c: 96: {
 10177                           ;PowerFault_B1.c: 97: PF->Count=0;
 10178  0D22  087B               	movf	_PF,w
 10179  0D23  3E05               	addlw	5
 10180  0D24  0086               	movwf	6
 10181  0D25  3001               	movlw	1	; select bank2/3
 10182  0D26  0087               	movwf	7
 10183  0D27  0181               	clrf	1
 10184                           
 10185                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10186  0D28  3000               	movlw	0
 10187  0D29  319A  2236  318C   	fcall	_setPowerFault_Exceptions
 10188                           
 10189                           ;PowerFault_B1.c: 99: }
 10190                           ;PowerFault_B1.c: 100: }
 10191  0D2C  2D6F               	goto	l9724
 10192  0D2D                     l9710:	
 10193                           ;PowerFault_B1.c: 104: }
 10194                           ;PowerFault_B1.c: 105: }
 10195                           
 10196                           ;PowerFault_B1.c: 101: else
 10197                           ;PowerFault_B1.c: 102: {
 10198                           ;PowerFault_B1.c: 103: PF->Count=0;
 10199                           
 10200                           
 10201                           ;PowerFault_B1.c: 106: else
 10202                           ;PowerFault_B1.c: 107: {
 10203                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10204  0D2D  0A7B               	incf	_PF,w
 10205  0D2E  0086               	movwf	6
 10206  0D2F  3001               	movlw	1	; select bank2/3
 10207  0D30  0087               	movwf	7
 10208  0D31  3F40               	moviw [0]fsr1
 10209  0D32  0020               	movlb	0	; select bank0
 10210  0D33  00AD               	movwf	??_setPowerFault_Main
 10211  0D34  3F41               	moviw [1]fsr1
 10212  0D35  00AE               	movwf	??_setPowerFault_Main+1
 10213  0D36  3001               	movlw	1
 10214  0D37  022E               	subwf	??_setPowerFault_Main+1,w
 10215  0D38  3090               	movlw	144
 10216  0D39  1903               	skipnz
 10217  0D3A  022D               	subwf	??_setPowerFault_Main,w
 10218  0D3B  1803               	skipnc
 10219  0D3C  2D4C               	goto	l9714
 10220  0D3D  0A7B               	incf	_PF,w
 10221  0D3E  0086               	movwf	6
 10222  0D3F  3001               	movlw	1	; select bank2/3
 10223  0D40  0087               	movwf	7
 10224  0D41  3F40               	moviw [0]fsr1
 10225  0D42  00AD               	movwf	??_setPowerFault_Main
 10226  0D43  3F41               	moviw [1]fsr1
 10227  0D44  00AE               	movwf	??_setPowerFault_Main+1
 10228  0D45  3000               	movlw	0
 10229  0D46  022E               	subwf	??_setPowerFault_Main+1,w
 10230  0D47  30D3               	movlw	211
 10231  0D48  1903               	skipnz
 10232  0D49  022D               	subwf	??_setPowerFault_Main,w
 10233  0D4A  1803               	skipnc
 10234  0D4B  2D69               	goto	l9722
 10235  0D4C                     l9714:	
 10236                           
 10237                           ;PowerFault_B1.c: 109: {
 10238                           ;PowerFault_B1.c: 110: PF->Count++;
 10239  0D4C  3001               	movlw	1
 10240  0D4D  00AD               	movwf	??_setPowerFault_Main
 10241  0D4E  087B               	movf	_PF,w
 10242  0D4F  3E05               	addlw	5
 10243  0D50  0086               	movwf	6
 10244  0D51  3001               	movlw	1	; select bank2/3
 10245  0D52  0087               	movwf	7
 10246  0D53  082D               	movf	??_setPowerFault_Main,w
 10247  0D54  0781               	addwf	1,f
 10248                           
 10249                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10250  0D55  087B               	movf	_PF,w
 10251  0D56  3E05               	addlw	5
 10252  0D57  0086               	movwf	6
 10253  0D58  3001               	movlw	1	; select bank2/3
 10254  0D59  0087               	movwf	7
 10255  0D5A  3002               	movlw	2
 10256  0D5B  0201               	subwf	1,w
 10257  0D5C  1C03               	skipc
 10258  0D5D  2D6F               	goto	l9724
 10259                           
 10260                           ;PowerFault_B1.c: 112: {
 10261                           ;PowerFault_B1.c: 113: PF->Count=0;
 10262  0D5E  087B               	movf	_PF,w
 10263  0D5F  3E05               	addlw	5
 10264  0D60  0086               	movwf	6
 10265  0D61  3001               	movlw	1	; select bank2/3
 10266  0D62  0087               	movwf	7
 10267  0D63  0181               	clrf	1
 10268                           
 10269                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10270  0D64  3001               	movlw	1
 10271  0D65  319A  2236  318C   	fcall	_setPowerFault_Exceptions
 10272                           
 10273                           ;PowerFault_B1.c: 115: }
 10274                           ;PowerFault_B1.c: 116: }
 10275  0D68  2D6F               	goto	l9724
 10276  0D69                     l9722:	
 10277                           
 10278                           ;PowerFault_B1.c: 117: else
 10279                           ;PowerFault_B1.c: 118: {
 10280                           ;PowerFault_B1.c: 119: PF->Count=0;
 10281  0D69  087B               	movf	_PF,w
 10282  0D6A  3E05               	addlw	5
 10283  0D6B  0086               	movwf	6
 10284  0D6C  3001               	movlw	1	; select bank2/3
 10285  0D6D  0087               	movwf	7
 10286  0D6E  0181               	clrf	1
 10287  0D6F                     l9724:	
 10288                           
 10289                           ;PowerFault_B1.c: 120: }
 10290                           ;PowerFault_B1.c: 122: }
 10291                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10292  0D6F  087B               	movf	_PF,w
 10293  0D70  0086               	movwf	6
 10294  0D71  3001               	movlw	1	; select bank2/3
 10295  0D72  0087               	movwf	7
 10296  0D73  1881               	btfsc	1,1
 10297  0D74  2D7A               	goto	l2470
 10298                           
 10299                           ;PowerFault_B1.c: 124: {
 10300                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10301  0D75  087B               	movf	_PF,w
 10302  0D76  0086               	movwf	6
 10303  0D77  3001               	movlw	1	; select bank2/3
 10304  0D78  0087               	movwf	7
 10305  0D79  1501               	bsf	1,2
 10306  0D7A                     l2470:	
 10307                           
 10308                           ;PowerFault_B1.c: 126: }
 10309                           ;PowerFault_B1.c: 127: PF->AD=0;
 10310  0D7A  0A7B               	incf	_PF,w
 10311  0D7B  0086               	movwf	6
 10312  0D7C  3001               	movlw	1	; select bank2/3
 10313  0D7D  0087               	movwf	7
 10314  0D7E  3000               	movlw	0
 10315  0D7F  3FC0               	movwi [0]fsr1
 10316  0D80  3FC1               	movwi [1]fsr1
 10317  0D81  0008               	return
 10318  0D82                     __end_of_setPowerFault_Main:	
 10319                           
 10320                           	psect	text45
 10321  1A36                     __ptext45:	
 10322 ;; *************** function _setPowerFault_Exceptions *****************
 10323 ;; Defined at:
 10324 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;  command         1    wreg     unsigned char 
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;  command         1   12[BANK0 ] unsigned char 
 10329 ;; Return value:  Size  Location     Type
 10330 ;;		None               void
 10331 ;; Registers used:
 10332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;Total ram usage:        2 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    8
 10345 ;; This function calls:
 10346 ;;		_DimmerLights_Exceptions
 10347 ;;		_setLED
 10348 ;;		_setRF_Enable
 10349 ;;		_setSw_Enable
 10350 ;; This function is called by:
 10351 ;;		_setPowerFault_Main
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _setPowerFault_Exceptions
 10357  1A36                     _setPowerFault_Exceptions:	
 10358                           
 10359                           ;incstack = 0
 10360                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10361                           ;setPowerFault_Exceptions@command stored from wreg
 10362  1A36  0020               	movlb	0	; select bank0
 10363  1A37  00AC               	movwf	setPowerFault_Exceptions@command
 10364                           
 10365                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10366  1A38  087B               	movf	_PF,w
 10367  1A39  0086               	movwf	6
 10368  1A3A  3001               	movlw	1	; select bank2/3
 10369  1A3B  0087               	movwf	7
 10370  1A3C  082C               	movf	setPowerFault_Exceptions@command,w
 10371  1A3D  1081               	bcf	1,1
 10372  1A3E  1D03               	skipz
 10373  1A3F  1481               	bsf	1,1
 10374                           
 10375                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10376  1A40  092C               	comf	setPowerFault_Exceptions@command,w
 10377  1A41  3901               	andlw	1
 10378  1A42  00AB               	movwf	??_setPowerFault_Exceptions
 10379  1A43  087B               	movf	_PF,w
 10380  1A44  0086               	movwf	6
 10381  1A45  3001               	movlw	1	; select bank2/3
 10382  1A46  0087               	movwf	7
 10383  1A47  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10384  1A48  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10385  1A49  0801               	movf	1,w
 10386  1A4A  062B               	xorwf	??_setPowerFault_Exceptions,w
 10387  1A4B  39FB               	andlw	-5
 10388  1A4C  062B               	xorwf	??_setPowerFault_Exceptions,w
 10389  1A4D  0081               	movwf	1
 10390                           
 10391                           ;PowerFault_B1.c: 137: if(command == 1)
 10392  1A4E  082C               	movf	setPowerFault_Exceptions@command,w
 10393  1A4F  3A01               	xorlw	1
 10394  1A50  1D03               	skipz
 10395  1A51  2A56               	goto	l2474
 10396                           
 10397                           ;PowerFault_B1.c: 138: {
 10398                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10399  1A52  3003               	movlw	3
 10400  1A53  319F  2730  319A   	fcall	_DimmerLights_Exceptions
 10401  1A56                     l2474:	
 10402                           
 10403                           ;PowerFault_B1.c: 143: }
 10404                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10405  1A56  0020               	movlb	0	; select bank0
 10406  1A57  082C               	movf	setPowerFault_Exceptions@command,w
 10407  1A58  3E0A               	addlw	10
 10408  1A59  00AB               	movwf	??_setPowerFault_Exceptions
 10409  1A5A  082B               	movf	??_setPowerFault_Exceptions,w
 10410  1A5B  00A2               	movwf	setLED@command
 10411  1A5C  3063               	movlw	99
 10412  1A5D  3188  2002  319A   	fcall	_setLED
 10413                           
 10414                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10415  1A60  0020               	movlb	0	; select bank0
 10416  1A61  092C               	comf	setPowerFault_Exceptions@command,w
 10417  1A62  3901               	andlw	1
 10418  1A63  31A6  266A  319A   	fcall	_setSw_Enable
 10419                           
 10420                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10421  1A66  0020               	movlb	0	; select bank0
 10422  1A67  092C               	comf	setPowerFault_Exceptions@command,w
 10423  1A68  3901               	andlw	1
 10424  1A69  00AB               	movwf	??_setPowerFault_Exceptions
 10425  1A6A  082B               	movf	??_setPowerFault_Exceptions,w
 10426  1A6B  00A2               	movwf	setRF_Enable@command
 10427  1A6C  3001               	movlw	1
 10428  1A6D  3198  2025         	fcall	_setRF_Enable
 10429  1A6F  0008               	return
 10430  1A70                     __end_of_setPowerFault_Exceptions:	
 10431                           
 10432                           	psect	text46
 10433  235B                     __ptext46:	
 10434 ;; *************** function _getLoad_Safe *****************
 10435 ;; Defined at:
 10436 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10437 ;; Parameters:    Size  Location     Type
 10438 ;;		None
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;		None
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      unsigned char 
 10443 ;; Registers used:
 10444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;Total ram usage:        1 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:    4
 10457 ;; This function calls:
 10458 ;;		Nothing
 10459 ;; This function is called by:
 10460 ;;		_setTemp_Main
 10461 ;;		_setPowerFault_Main
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _getLoad_Safe
 10467  235B                     _getLoad_Safe:	
 10468                           
 10469                           ;OverLoad_B1.c: 341: return Load->Safe;
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10473  235B  0020               	movlb	0	; select bank0
 10474  235C  086E               	movf	_Load,w
 10475  235D  0086               	movwf	6
 10476  235E  3002               	movlw	2	; select bank4/5
 10477  235F  0087               	movwf	7
 10478  2360  0C01               	rrf	1,w
 10479  2361  00A0               	movwf	??_getLoad_Safe
 10480  2362  0CA0               	rrf	??_getLoad_Safe,f
 10481  2363  0C20               	rrf	??_getLoad_Safe,w
 10482  2364  3901               	andlw	1
 10483  2365  0008               	return
 10484  2366                     __end_of_getLoad_Safe:	
 10485                           
 10486                           	psect	text47
 10487  2287                     __ptext47:	
 10488 ;; *************** function _PowerFault_Initialization *****************
 10489 ;; Defined at:
 10490 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10491 ;; Parameters:    Size  Location     Type
 10492 ;;		None
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;		None
 10495 ;; Return value:  Size  Location     Type
 10496 ;;		None               void
 10497 ;; Registers used:
 10498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;Total ram usage:        0 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    5
 10511 ;; This function calls:
 10512 ;;		_setPowerFault_Initialization
 10513 ;; This function is called by:
 10514 ;;		_main
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           
 10519                           ;psect for function _PowerFault_Initialization
 10520  2287                     _PowerFault_Initialization:	
 10521                           
 10522                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10523                           
 10524                           ;incstack = 0
 10525                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10526  2287  31A4  2477         	fcall	_setPowerFault_Initialization
 10527  2289  0008               	return
 10528  228A                     __end_of_PowerFault_Initialization:	
 10529                           
 10530                           	psect	text48
 10531  2477                     __ptext48:	
 10532 ;; *************** function _setPowerFault_Initialization *****************
 10533 ;; Defined at:
 10534 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg, fsr1l, fsr1h
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        1 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    4
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_PowerFault_Initialization
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _setPowerFault_Initialization
 10564  2477                     _setPowerFault_Initialization:	
 10565                           
 10566                           ;PowerFault_B1.c: 31: PF=&PF1;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10570  2477  3068               	movlw	_PF1& (0+255)
 10571  2478  0020               	movlb	0	; select bank0
 10572  2479  00A0               	movwf	??_setPowerFault_Initialization
 10573  247A  0820               	movf	??_setPowerFault_Initialization,w
 10574  247B  00FB               	movwf	_PF
 10575                           
 10576                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10577  247C  087B               	movf	_PF,w
 10578  247D  0086               	movwf	6
 10579  247E  3001               	movlw	1	; select bank2/3
 10580  247F  0087               	movwf	7
 10581  2480  1401               	bsf	1,0
 10582                           
 10583                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10584  2481  087B               	movf	_PF,w
 10585  2482  0086               	movwf	6
 10586  2483  3001               	movlw	1	; select bank2/3
 10587  2484  0087               	movwf	7
 10588  2485  1501               	bsf	1,2
 10589  2486  0008               	return
 10590  2487                     __end_of_setPowerFault_Initialization:	
 10591                           
 10592                           	psect	text49
 10593  259E                     __ptext49:	
 10594 ;; *************** function _Mcu_Initialization *****************
 10595 ;; Defined at:
 10596 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;		None
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;		None
 10601 ;; Return value:  Size  Location     Type
 10602 ;;		None               void
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0, pclath, cstack
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        1 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    5
 10617 ;; This function calls:
 10618 ;;		_ADC_Set
 10619 ;;		_INT_Set
 10620 ;;		_IOC_Set
 10621 ;;		_IO_Set
 10622 ;;		_TMR0_Set
 10623 ;; This function is called by:
 10624 ;;		_main
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           
 10629                           ;psect for function _Mcu_Initialization
 10630  259E                     _Mcu_Initialization:	
 10631                           
 10632                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
 10633                           
 10634                           ;incstack = 0
 10635                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10636  259E  3078               	movlw	120
 10637  259F  0021               	movlb	1	; select bank1
 10638  25A0  0099               	movwf	25	;volatile
 10639                           
 10640                           ;MCU_B1.c: 29: IO_Set();
 10641  25A1  31A6  2601  31A5   	fcall	_IO_Set
 10642                           
 10643                           ;MCU_B1.c: 31: TMR0_Set();
 10644  25A4  31A3  23D3  31A5   	fcall	_TMR0_Set
 10645                           
 10646                           ;MCU_B1.c: 33: ;;
 10647                           ;MCU_B1.c: 35: ADC_Set();
 10648  25A7  31A2  22C7  31A5   	fcall	_ADC_Set
 10649                           
 10650                           ;MCU_B1.c: 39: INT_Set();
 10651  25AA  31A2  22A7  31A5   	fcall	_INT_Set
 10652                           
 10653                           ;MCU_B1.c: 41: IOC_Set();
 10654  25AD  31A3  23C6         	fcall	_IOC_Set
 10655                           
 10656                           ;MCU_B1.c: 43: ;;
 10657                           ;MCU_B1.c: 45: ;;
 10658                           ;MCU_B1.c: 47: Memory=&VarMemory;
 10659  25AF  3020               	movlw	_VarMemory& (0+255)
 10660  25B0  0020               	movlb	0	; select bank0
 10661  25B1  00A1               	movwf	??_Mcu_Initialization
 10662  25B2  0821               	movf	??_Mcu_Initialization,w
 10663  25B3  0021               	movlb	1	; select bank1
 10664  25B4  00EB               	movwf	_Memory^(0+128)
 10665  25B5  0008               	return
 10666  25B6                     __end_of_Mcu_Initialization:	
 10667                           
 10668                           	psect	text50
 10669  23D3                     __ptext50:	
 10670 ;; *************** function _TMR0_Set *****************
 10671 ;; Defined at:
 10672 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;		None
 10675 ;; Auto vars:     Size  Location     Type
 10676 ;;		None
 10677 ;; Return value:  Size  Location     Type
 10678 ;;		None               void
 10679 ;; Registers used:
 10680 ;;		wreg, status,2
 10681 ;; Tracked objects:
 10682 ;;		On entry : 0/0
 10683 ;;		On exit  : 0/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;Total ram usage:        1 bytes
 10691 ;; Hardware stack levels used:    1
 10692 ;; Hardware stack levels required when called:    4
 10693 ;; This function calls:
 10694 ;;		Nothing
 10695 ;; This function is called by:
 10696 ;;		_Mcu_Initialization
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           
 10701                           ;psect for function _TMR0_Set
 10702  23D3                     _TMR0_Set:	
 10703                           
 10704                           ;MCU_B1.c: 116: Timer0=&VarTimer0;
 10705                           
 10706                           ;incstack = 0
 10707                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10708  23D3  30C4               	movlw	_VarTimer0& (0+255)
 10709  23D4  0020               	movlb	0	; select bank0
 10710  23D5  00A0               	movwf	??_TMR0_Set
 10711  23D6  0820               	movf	??_TMR0_Set,w
 10712  23D7  0021               	movlb	1	; select bank1
 10713  23D8  00ED               	movwf	_Timer0^(0+128)
 10714                           
 10715                           ;MCU_B1.c: 117: OPTION_REG=0x00;
 10716  23D9  0195               	clrf	21	;volatile
 10717                           
 10718                           ;MCU_B1.c: 118: TMR0=(256-90);
 10719  23DA  30A6               	movlw	166
 10720  23DB  0020               	movlb	0	; select bank0
 10721  23DC  0095               	movwf	21	;volatile
 10722                           
 10723                           ;MCU_B1.c: 119: TMR0IE=1;
 10724  23DD  168B               	bsf	11,5	;volatile
 10725                           
 10726                           ;MCU_B1.c: 120: GIE=1;
 10727  23DE  178B               	bsf	11,7	;volatile
 10728  23DF  0008               	return
 10729  23E0                     __end_of_TMR0_Set:	
 10730                           
 10731                           	psect	text51
 10732  2601                     __ptext51:	
 10733 ;; *************** function _IO_Set *****************
 10734 ;; Defined at:
 10735 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;		None
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;		None
 10740 ;; Return value:  Size  Location     Type
 10741 ;;		None               void
 10742 ;; Registers used:
 10743 ;;		wreg, status,2
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        0 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:    4
 10756 ;; This function calls:
 10757 ;;		Nothing
 10758 ;; This function is called by:
 10759 ;;		_Mcu_Initialization
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _IO_Set
 10765  2601                     _IO_Set:	
 10766                           
 10767                           ;MCU_B1.c: 79: TRISA=0b01110111;;
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _IO_Set: [wreg+status,2]
 10771  2601  3077               	movlw	119
 10772  2602  0021               	movlb	1	; select bank1
 10773  2603  008C               	movwf	12	;volatile
 10774                           
 10775                           ;MCU_B1.c: 80: TRISB=0b00000111;;
 10776  2604  3007               	movlw	7
 10777  2605  008D               	movwf	13	;volatile
 10778                           
 10779                           ;MCU_B1.c: 81: TRISC=0b00001100;;
 10780  2606  300C               	movlw	12
 10781  2607  008E               	movwf	14	;volatile
 10782                           
 10783                           ;MCU_B1.c: 82: LATA=0b00000000;;
 10784  2608  0022               	movlb	2	; select bank2
 10785  2609  018C               	clrf	12	;volatile
 10786                           
 10787                           ;MCU_B1.c: 83: LATB=0b00000010;;
 10788  260A  3002               	movlw	2
 10789  260B  008D               	movwf	13	;volatile
 10790                           
 10791                           ;MCU_B1.c: 84: LATC=0b00000000;;
 10792  260C  018E               	clrf	14	;volatile
 10793                           
 10794                           ;MCU_B1.c: 85: ANSELA=0b00100010;;
 10795  260D  3022               	movlw	34
 10796  260E  0023               	movlb	3	; select bank3
 10797  260F  008C               	movwf	12	;volatile
 10798                           
 10799                           ;MCU_B1.c: 86: ANSELB=0b00000000;;
 10800  2610  018D               	clrf	13	;volatile
 10801                           
 10802                           ;MCU_B1.c: 87: ANSELC=0b00000000;;
 10803  2611  018E               	clrf	14	;volatile
 10804                           
 10805                           ;MCU_B1.c: 88: PORTA=0b01110111;;
 10806  2612  3077               	movlw	119
 10807  2613  0020               	movlb	0	; select bank0
 10808  2614  008C               	movwf	12	;volatile
 10809                           
 10810                           ;MCU_B1.c: 89: PORTB=0b00000111;;
 10811  2615  3007               	movlw	7
 10812  2616  008D               	movwf	13	;volatile
 10813                           
 10814                           ;MCU_B1.c: 90: PORTC=0b00001100;;
 10815  2617  300C               	movlw	12
 10816  2618  008E               	movwf	14	;volatile
 10817  2619  0008               	return
 10818  261A                     __end_of_IO_Set:	
 10819                           
 10820                           	psect	text52
 10821  23C6                     __ptext52:	
 10822 ;; *************** function _IOC_Set *****************
 10823 ;; Defined at:
 10824 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;		None
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;		None
 10829 ;; Return value:  Size  Location     Type
 10830 ;;		None               void
 10831 ;; Registers used:
 10832 ;;		wreg, status,2
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;Total ram usage:        0 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    4
 10845 ;; This function calls:
 10846 ;;		Nothing
 10847 ;; This function is called by:
 10848 ;;		_Mcu_Initialization
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           
 10853                           ;psect for function _IOC_Set
 10854  23C6                     _IOC_Set:	
 10855                           
 10856                           ;MCU_B1.c: 312: WPUB2=0;
 10857                           
 10858                           ;incstack = 0
 10859                           ; Regs used in _IOC_Set: [wreg+status,2]
 10860  23C6  0024               	movlb	4	; select bank4
 10861  23C7  110D               	bcf	13,2	;volatile
 10862                           
 10863                           ;MCU_B1.c: 314: IOCBP=0b00000100;
 10864  23C8  3004               	movlw	4
 10865  23C9  0027               	movlb	7	; select bank7
 10866  23CA  0094               	movwf	20	;volatile
 10867                           
 10868                           ;MCU_B1.c: 315: IOCBN=0b00000100;
 10869  23CB  3004               	movlw	4
 10870  23CC  0095               	movwf	21	;volatile
 10871                           
 10872                           ;MCU_B1.c: 330: IOCBF=0b00000000;
 10873  23CD  0196               	clrf	22	;volatile
 10874                           
 10875                           ;MCU_B1.c: 332: IOCIE=1;
 10876  23CE  158B               	bsf	11,3	;volatile
 10877                           
 10878                           ;MCU_B1.c: 333: IOCIF=0;
 10879  23CF  100B               	bcf	11,0	;volatile
 10880                           
 10881                           ;MCU_B1.c: 334: PEIE=1;
 10882  23D0  170B               	bsf	11,6	;volatile
 10883                           
 10884                           ;MCU_B1.c: 335: GIE=1;
 10885  23D1  178B               	bsf	11,7	;volatile
 10886  23D2  0008               	return
 10887  23D3                     __end_of_IOC_Set:	
 10888                           
 10889                           	psect	text53
 10890  22A7                     __ptext53:	
 10891 ;; *************** function _INT_Set *****************
 10892 ;; Defined at:
 10893 ;;		line 281 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;		None
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;		None               void
 10900 ;; Registers used:
 10901 ;;		None
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;Total ram usage:        0 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    4
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_Mcu_Initialization
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function _INT_Set
 10923  22A7                     _INT_Set:	
 10924                           
 10925                           ;MCU_B1.c: 283: WPUB0=0;
 10926                           
 10927                           ;incstack = 0
 10928                           ; Regs used in _INT_Set: []
 10929  22A7  0024               	movlb	4	; select bank4
 10930  22A8  100D               	bcf	13,0	;volatile
 10931                           
 10932                           ;MCU_B1.c: 284: INTE=1;
 10933  22A9  160B               	bsf	11,4	;volatile
 10934                           
 10935                           ;MCU_B1.c: 285: PEIE=1;
 10936  22AA  170B               	bsf	11,6	;volatile
 10937                           
 10938                           ;MCU_B1.c: 286: GIE=1;
 10939  22AB  178B               	bsf	11,7	;volatile
 10940  22AC  0008               	return
 10941  22AD                     __end_of_INT_Set:	
 10942                           
 10943                           	psect	text54
 10944  22C7                     __ptext54:	
 10945 ;; *************** function _ADC_Set *****************
 10946 ;; Defined at:
 10947 ;;		line 375 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        0 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    4
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_Mcu_Initialization
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _ADC_Set
 10977  22C7                     _ADC_Set:	
 10978                           
 10979                           ;MCU_B1.c: 377: ADCON1=0xf2;
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _ADC_Set: [wreg]
 10983  22C7  30F2               	movlw	242
 10984  22C8  0021               	movlb	1	; select bank1
 10985  22C9  009E               	movwf	30	;volatile
 10986                           
 10987                           ;MCU_B1.c: 378: FVRCON=0xc0;
 10988  22CA  30C0               	movlw	192
 10989  22CB  0022               	movlb	2	; select bank2
 10990  22CC  0097               	movwf	23	;volatile
 10991  22CD  0008               	return
 10992  22CE                     __end_of_ADC_Set:	
 10993                           
 10994                           	psect	text55
 10995  24F2                     __ptext55:	
 10996 ;; *************** function _MainT_Initialization *****************
 10997 ;; Defined at:
 10998 ;;		line 93 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;		None               void
 11005 ;; Registers used:
 11006 ;;		wreg, fsr1l, fsr1h
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:        1 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    4
 11019 ;; This function calls:
 11020 ;;		Nothing
 11021 ;; This function is called by:
 11022 ;;		_main
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _MainT_Initialization
 11028  24F2                     _MainT_Initialization:	
 11029                           
 11030                           ;main.c: 96: Product=&VarProduct;
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _MainT_Initialization: [wregfsr1]
 11034  24F2  30A0               	movlw	_VarProduct& (0+255)
 11035  24F3  0020               	movlb	0	; select bank0
 11036  24F4  00A0               	movwf	??_MainT_Initialization
 11037  24F5  0820               	movf	??_MainT_Initialization,w
 11038  24F6  00EF               	movwf	_Product
 11039                           
 11040                           ;main.c: 97: Product->Data[20]=210;
 11041  24F7  30D2               	movlw	210
 11042  24F8  00A0               	movwf	??_MainT_Initialization
 11043  24F9  086F               	movf	_Product,w
 11044  24FA  3E14               	addlw	20
 11045  24FB  0086               	movwf	6
 11046  24FC  3001               	movlw	1	; select bank2/3
 11047  24FD  0087               	movwf	7
 11048  24FE  0820               	movf	??_MainT_Initialization,w
 11049  24FF  0081               	movwf	1
 11050                           
 11051                           ;main.c: 100: TMain=&VarTMain;
 11052  2500  30C0               	movlw	_VarTMain& (0+255)
 11053  2501  00A0               	movwf	??_MainT_Initialization
 11054  2502  0820               	movf	??_MainT_Initialization,w
 11055  2503  0021               	movlb	1	; select bank1
 11056  2504  00EC               	movwf	_TMain^(0+128)
 11057  2505  0008               	return
 11058  2506                     __end_of_MainT_Initialization:	
 11059                           
 11060                           	psect	text56
 11061  24CB                     __ptext56:	
 11062 ;; *************** function _MainT_Clock *****************
 11063 ;; Defined at:
 11064 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;		None
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  i               1    1[BANK0 ] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;		None               void
 11071 ;; Registers used:
 11072 ;;		wreg, status,2, status,0
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;Total ram usage:        2 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    4
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_main
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _MainT_Clock
 11094  24CB                     _MainT_Clock:	
 11095                           
 11096                           ;main.c: 194: char i;
 11097                           ;main.c: 196: if(RB5){
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _MainT_Clock: [wreg+status,2+status,0]
 11101  24CB  0020               	movlb	0	; select bank0
 11102  24CC  1E8D               	btfss	13,5	;volatile
 11103  24CD  0008               	return
 11104                           
 11105                           ;main.c: 197: RB5=0;
 11106  24CE  128D               	bcf	13,5	;volatile
 11107                           
 11108                           ;main.c: 198: for(i=0 ;i<10 ; i++);
 11109  24CF  01A1               	clrf	MainT_Clock@i
 11110  24D0  300A               	movlw	10
 11111  24D1  0221               	subwf	MainT_Clock@i,w
 11112  24D2  1803               	btfsc	3,0
 11113  24D3  2CDC               	goto	l1374
 11114  24D4                     l8256:	
 11115  24D4  3001               	movlw	1
 11116  24D5  00A0               	movwf	??_MainT_Clock
 11117  24D6  0820               	movf	??_MainT_Clock,w
 11118  24D7  07A1               	addwf	MainT_Clock@i,f
 11119  24D8  300A               	movlw	10
 11120  24D9  0221               	subwf	MainT_Clock@i,w
 11121  24DA  1C03               	skipc
 11122  24DB  2CD4               	goto	l8256
 11123  24DC                     l1374:	
 11124                           
 11125                           ;main.c: 199: RB5=1;
 11126  24DC  168D               	bsf	13,5	;volatile
 11127  24DD  0008               	return
 11128  24DE                     __end_of_MainT_Clock:	
 11129                           
 11130                           	psect	text57
 11131  12FA                     __ptext57:	
 11132 ;; *************** function _MainT *****************
 11133 ;; Defined at:
 11134 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;		None
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;		None               void
 11141 ;; Registers used:
 11142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;Total ram usage:        0 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    6
 11155 ;; This function calls:
 11156 ;;		_setBuz
 11157 ;;		_setLoad_Enable
 11158 ;;		_setRF_Enable
 11159 ;;		_setSw_Enable
 11160 ;;		_setTemp_Enable
 11161 ;; This function is called by:
 11162 ;;		_main
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           
 11167                           ;psect for function _MainT
 11168  12FA                     _MainT:	
 11169                           
 11170                           ;main.c: 108: if(!TMain->PowerON)
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11174  12FA  0021               	movlb	1	; select bank1
 11175  12FB  086C               	movf	_TMain^(0+128),w
 11176  12FC  0086               	movwf	6
 11177  12FD  3001               	movlw	1	; select bank2/3
 11178  12FE  0087               	movwf	7
 11179  12FF  1801               	btfsc	1,0
 11180  1300  2B45               	goto	l10056
 11181                           
 11182                           ;main.c: 109: {
 11183                           ;main.c: 110: TMain->PowerCount++;
 11184  1301  0A6C               	incf	_TMain^(0+128),w
 11185  1302  0086               	movwf	6
 11186  1303  3001               	movlw	1	; select bank2/3
 11187  1304  0087               	movwf	7
 11188  1305  3001               	movlw	1
 11189  1306  0781               	addwf	1,f
 11190  1307  3141               	addfsr 1,1
 11191  1308  1803               	skipnc
 11192  1309  0A81               	incf	1,f
 11193                           
 11194                           ;main.c: 111: if(TMain->PowerCount == 150)
 11195  130A  0A6C               	incf	_TMain^(0+128),w
 11196  130B  0086               	movwf	6
 11197  130C  3001               	movlw	1	; select bank2/3
 11198  130D  0087               	movwf	7
 11199  130E  3F40               	moviw [0]fsr1
 11200  130F  3A96               	xorlw	150
 11201  1310  1D03               	skipz
 11202  1311  2B14               	goto	u10135
 11203  1312  3F41               	moviw [1]fsr1
 11204  1313  3A00               	xorlw	0
 11205  1314                     u10135:	
 11206  1314  1D03               	skipz
 11207  1315  0008               	return
 11208                           
 11209                           ;main.c: 112: {
 11210                           ;main.c: 113: TMain->PowerCount=0;
 11211  1316  0A6C               	incf	_TMain^(0+128),w
 11212  1317  0086               	movwf	6
 11213  1318  3001               	movlw	1	; select bank2/3
 11214  1319  0087               	movwf	7
 11215  131A  3000               	movlw	0
 11216  131B  3FC0               	movwi [0]fsr1
 11217  131C  3FC1               	movwi [1]fsr1
 11218                           
 11219                           ;main.c: 114: TMain->PowerON=1;
 11220  131D  086C               	movf	_TMain^(0+128),w
 11221  131E  0086               	movwf	6
 11222  131F  3001               	movlw	1	; select bank2/3
 11223  1320  0087               	movwf	7
 11224  1321  1401               	bsf	1,0
 11225                           
 11226                           ;main.c: 117: setTemp_Enable(1);
 11227  1322  3001               	movlw	1
 11228  1323  31A3  2350  3192   	fcall	_setTemp_Enable
 11229                           
 11230                           ;main.c: 121: setLoad_Enable(1);
 11231  1326  3001               	movlw	1
 11232  1327  31A4  2467  3192   	fcall	_setLoad_Enable
 11233                           
 11234                           ;main.c: 127: setBuz(3,50);
 11235  132A  3032               	movlw	50
 11236  132B  0020               	movlb	0	; select bank0
 11237  132C  00A6               	movwf	setBuz@time
 11238  132D  3000               	movlw	0
 11239  132E  00A7               	movwf	setBuz@time+1
 11240  132F  3003               	movlw	3
 11241  1330  3192  220A  3192   	fcall	_setBuz
 11242                           
 11243                           ;main.c: 128: TMain->SelfTest=1;
 11244  1333  0021               	movlb	1	; select bank1
 11245  1334  086C               	movf	_TMain^(0+128),w
 11246  1335  3E03               	addlw	3
 11247  1336  0086               	movwf	6
 11248  1337  3001               	movlw	1	; select bank2/3
 11249  1338  0087               	movwf	7
 11250  1339  1401               	bsf	1,0
 11251                           
 11252                           ;main.c: 130: setSw_Enable(1);
 11253  133A  3001               	movlw	1
 11254  133B  31A6  266A  3192   	fcall	_setSw_Enable
 11255                           
 11256                           ;main.c: 133: setRF_Enable(1,1);
 11257  133E  0020               	movlb	0	; select bank0
 11258  133F  01A2               	clrf	setRF_Enable@command
 11259  1340  0AA2               	incf	setRF_Enable@command,f
 11260  1341  3001               	movlw	1
 11261  1342  3198  2025         	fcall	_setRF_Enable
 11262                           
 11263                           ;main.c: 137: }
 11264                           ;main.c: 138: }
 11265  1344  0008               	return
 11266  1345                     l10056:	
 11267                           
 11268                           ;main.c: 139: else
 11269                           ;main.c: 140: {
 11270                           ;main.c: 148: TMain->Count1++;
 11271  1345  0021               	movlb	1	; select bank1
 11272  1346  086C               	movf	_TMain^(0+128),w
 11273  1347  3E06               	addlw	6
 11274  1348  0086               	movwf	6
 11275  1349  3001               	movlw	1	; select bank2/3
 11276  134A  0087               	movwf	7
 11277  134B  3001               	movlw	1
 11278  134C  0781               	addwf	1,f
 11279  134D  3141               	addfsr 1,1
 11280  134E  1803               	skipnc
 11281  134F  0A81               	incf	1,f
 11282                           
 11283                           ;main.c: 149: if(TMain->Count1 == 100)
 11284  1350  086C               	movf	_TMain^(0+128),w
 11285  1351  3E06               	addlw	6
 11286  1352  0086               	movwf	6
 11287  1353  3001               	movlw	1	; select bank2/3
 11288  1354  0087               	movwf	7
 11289  1355  3F40               	moviw [0]fsr1
 11290  1356  3A64               	xorlw	100
 11291  1357  1D03               	skipz
 11292  1358  2B5B               	goto	u10145
 11293  1359  3F41               	moviw [1]fsr1
 11294  135A  3A00               	xorlw	0
 11295  135B                     u10145:	
 11296  135B  1D03               	skipz
 11297  135C  0008               	return
 11298                           
 11299                           ;main.c: 150: {
 11300                           ;main.c: 151: TMain->Count1=0;
 11301  135D  086C               	movf	_TMain^(0+128),w
 11302  135E  3E06               	addlw	6
 11303  135F  0086               	movwf	6
 11304  1360  3001               	movlw	1	; select bank2/3
 11305  1361  0087               	movwf	7
 11306  1362  3000               	movlw	0
 11307  1363  3FC0               	movwi [0]fsr1
 11308  1364  3FC1               	movwi [1]fsr1
 11309                           
 11310                           ;main.c: 164: if(TMain->Flag)
 11311  1365  086C               	movf	_TMain^(0+128),w
 11312  1366  0086               	movwf	6
 11313  1367  3001               	movlw	1	; select bank2/3
 11314  1368  0087               	movwf	7
 11315  1369  1D81               	btfss	1,3
 11316  136A  2B71               	goto	l10064
 11317                           
 11318                           ;main.c: 165: {
 11319                           ;main.c: 166: TMain->Flag=0;
 11320  136B  086C               	movf	_TMain^(0+128),w
 11321  136C  0086               	movwf	6
 11322  136D  3001               	movlw	1	; select bank2/3
 11323  136E  0087               	movwf	7
 11324  136F  1181               	bcf	1,3
 11325                           
 11326                           ;main.c: 175: }
 11327  1370  0008               	return
 11328  1371                     l10064:	
 11329                           
 11330                           ;main.c: 176: else
 11331                           ;main.c: 177: {
 11332                           ;main.c: 178: TMain->Flag=1;
 11333  1371  086C               	movf	_TMain^(0+128),w
 11334  1372  0086               	movwf	6
 11335  1373  3001               	movlw	1	; select bank2/3
 11336  1374  0087               	movwf	7
 11337  1375  1581               	bsf	1,3
 11338  1376  0008               	return
 11339  1377                     __end_of_MainT:	
 11340                           
 11341                           	psect	text58
 11342  2350                     __ptext58:	
 11343 ;; *************** function _setTemp_Enable *****************
 11344 ;; Defined at:
 11345 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;  command         1    wreg     unsigned char 
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  command         1    0[BANK0 ] unsigned char 
 11350 ;; Return value:  Size  Location     Type
 11351 ;;		None               void
 11352 ;; Registers used:
 11353 ;;		wreg, fsr1l, fsr1h
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;Total ram usage:        1 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    4
 11366 ;; This function calls:
 11367 ;;		Nothing
 11368 ;; This function is called by:
 11369 ;;		_MainT
 11370 ;; This function uses a non-reentrant model
 11371 ;;
 11372                           
 11373                           
 11374                           ;psect for function _setTemp_Enable
 11375  2350                     _setTemp_Enable:	
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11379                           ;setTemp_Enable@command stored from wreg
 11380  2350  0020               	movlb	0	; select bank0
 11381  2351  00A0               	movwf	setTemp_Enable@command
 11382                           
 11383                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11384  2352  087D               	movf	_Temp,w
 11385  2353  0086               	movwf	6
 11386  2354  3001               	movlw	1	; select bank2/3
 11387  2355  0087               	movwf	7
 11388  2356  0820               	movf	setTemp_Enable@command,w
 11389  2357  1001               	bcf	1,0
 11390  2358  1D03               	skipz
 11391  2359  1401               	bsf	1,0
 11392  235A  0008               	return
 11393  235B                     __end_of_setTemp_Enable:	
 11394                           
 11395                           	psect	text59
 11396  2467                     __ptext59:	
 11397 ;; *************** function _setLoad_Enable *****************
 11398 ;; Defined at:
 11399 ;;		line 295 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;  command         1    wreg     unsigned char 
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  command         1    0[BANK0 ] unsigned char 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;		None               void
 11406 ;; Registers used:
 11407 ;;		wreg, fsr1l, fsr1h
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        1 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    4
 11420 ;; This function calls:
 11421 ;;		Nothing
 11422 ;; This function is called by:
 11423 ;;		_MainT
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function _setLoad_Enable
 11429  2467                     _setLoad_Enable:	
 11430                           
 11431                           ;incstack = 0
 11432                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11433                           ;setLoad_Enable@command stored from wreg
 11434  2467  0020               	movlb	0	; select bank0
 11435  2468  00A0               	movwf	setLoad_Enable@command
 11436                           
 11437                           ;OverLoad_B1.c: 297: Load->Enable=command;
 11438  2469  086E               	movf	_Load,w
 11439  246A  0086               	movwf	6
 11440  246B  3002               	movlw	2	; select bank4/5
 11441  246C  0087               	movwf	7
 11442  246D  0820               	movf	setLoad_Enable@command,w
 11443  246E  1001               	bcf	1,0
 11444  246F  1D03               	skipz
 11445  2470  1401               	bsf	1,0
 11446                           
 11447                           ;OverLoad_B1.c: 298: Load->GO=0;
 11448  2471  086E               	movf	_Load,w
 11449  2472  0086               	movwf	6
 11450  2473  3002               	movlw	2	; select bank4/5
 11451  2474  0087               	movwf	7
 11452  2475  1081               	bcf	1,1
 11453  2476  0008               	return
 11454  2477                     __end_of_setLoad_Enable:	
 11455                           
 11456                           	psect	text60
 11457  0059                     __ptext60:	
 11458 ;; *************** function _Load_Main *****************
 11459 ;; Defined at:
 11460 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;		None
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;  i               1   17[BANK0 ] unsigned char 
 11465 ;; Return value:  Size  Location     Type
 11466 ;;		None               void
 11467 ;; Registers used:
 11468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;Total ram usage:        5 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:    9
 11481 ;; This function calls:
 11482 ;;		___lwdiv
 11483 ;;		___wmul
 11484 ;;		_getPF_Safe
 11485 ;;		_getTemp_Safe
 11486 ;;		_setDimmerLights_Clear
 11487 ;;		_setLoad_AH_AL_Restore
 11488 ;;		_setLoad_Exceptions
 11489 ;; This function is called by:
 11490 ;;		_main
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           
 11495                           ;psect for function _Load_Main
 11496  0059                     _Load_Main:	
 11497                           
 11498                           ;OverLoad_B1.c: 47: char i;
 11499                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11500                           
 11501                           ;incstack = 0
 11502                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11503  0059  0020               	movlb	0	; select bank0
 11504  005A  086E               	movf	_Load,w
 11505  005B  0086               	movwf	6
 11506  005C  3002               	movlw	2	; select bank4/5
 11507  005D  0087               	movwf	7
 11508  005E  1E81               	btfss	1,5
 11509  005F  2886               	goto	l10092
 11510                           
 11511                           ;OverLoad_B1.c: 49: {
 11512                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11513  0060  086E               	movf	_Load,w
 11514  0061  3E03               	addlw	3
 11515  0062  0086               	movwf	6
 11516  0063  3002               	movlw	2	; select bank4/5
 11517  0064  0087               	movwf	7
 11518  0065  3001               	movlw	1
 11519  0066  0781               	addwf	1,f
 11520  0067  3141               	addfsr 1,1
 11521  0068  1803               	skipnc
 11522  0069  0A81               	incf	1,f
 11523                           
 11524                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11525  006A  086E               	movf	_Load,w
 11526  006B  3E03               	addlw	3
 11527  006C  0086               	movwf	6
 11528  006D  3002               	movlw	2	; select bank4/5
 11529  006E  0087               	movwf	7
 11530  006F  3F40               	moviw [0]fsr1
 11531  0070  00AD               	movwf	??_Load_Main
 11532  0071  3F41               	moviw [1]fsr1
 11533  0072  00AE               	movwf	??_Load_Main+1
 11534  0073  3003               	movlw	3
 11535  0074  022E               	subwf	??_Load_Main+1,w
 11536  0075  30E8               	movlw	232
 11537  0076  1903               	skipnz
 11538  0077  022D               	subwf	??_Load_Main,w
 11539  0078  1C03               	skipc
 11540  0079  0008               	return
 11541                           
 11542                           ;OverLoad_B1.c: 52: {
 11543                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11544  007A  086E               	movf	_Load,w
 11545  007B  3E03               	addlw	3
 11546  007C  0086               	movwf	6
 11547  007D  3002               	movlw	2	; select bank4/5
 11548  007E  0087               	movwf	7
 11549  007F  3000               	movlw	0
 11550  0080  3FC0               	movwi [0]fsr1
 11551  0081  3FC1               	movwi [1]fsr1
 11552                           
 11553                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11554  0082  3000               	movlw	0
 11555  0083  319B  23B5         	fcall	_setLoad_Exceptions
 11556                           
 11557                           ;OverLoad_B1.c: 55: }
 11558                           ;OverLoad_B1.c: 56: }
 11559  0085  0008               	return
 11560  0086                     l10092:	
 11561                           
 11562                           ;OverLoad_B1.c: 57: else
 11563                           ;OverLoad_B1.c: 58: {
 11564                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11565  0086  0020               	movlb	0	; select bank0
 11566  0087  086E               	movf	_Load,w
 11567  0088  0086               	movwf	6
 11568  0089  3002               	movlw	2	; select bank4/5
 11569  008A  0087               	movwf	7
 11570  008B  1E01               	btfss	1,4
 11571  008C  2B54               	goto	l10200
 11572                           
 11573                           ;OverLoad_B1.c: 60: {
 11574                           ;OverLoad_B1.c: 61: Load->Time++;
 11575  008D  0A6E               	incf	_Load,w
 11576  008E  0086               	movwf	6
 11577  008F  3002               	movlw	2	; select bank4/5
 11578  0090  0087               	movwf	7
 11579  0091  3001               	movlw	1
 11580  0092  0781               	addwf	1,f
 11581  0093  3141               	addfsr 1,1
 11582  0094  1803               	skipnc
 11583  0095  0A81               	incf	1,f
 11584                           
 11585                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11586  0096  0A6E               	incf	_Load,w
 11587  0097  0086               	movwf	6
 11588  0098  3002               	movlw	2	; select bank4/5
 11589  0099  0087               	movwf	7
 11590  009A  3F40               	moviw [0]fsr1
 11591  009B  00AD               	movwf	??_Load_Main
 11592  009C  3F41               	moviw [1]fsr1
 11593  009D  00AE               	movwf	??_Load_Main+1
 11594  009E  3000               	movlw	0
 11595  009F  022E               	subwf	??_Load_Main+1,w
 11596  00A0  3005               	movlw	5
 11597  00A1  1903               	skipnz
 11598  00A2  022D               	subwf	??_Load_Main,w
 11599  00A3  1C03               	skipc
 11600  00A4  0008               	return
 11601                           
 11602                           ;OverLoad_B1.c: 63: {
 11603                           ;OverLoad_B1.c: 64: Load->Time=0;
 11604  00A5  0A6E               	incf	_Load,w
 11605  00A6  0086               	movwf	6
 11606  00A7  3002               	movlw	2	; select bank4/5
 11607  00A8  0087               	movwf	7
 11608  00A9  3000               	movlw	0
 11609  00AA  3FC0               	movwi [0]fsr1
 11610  00AB  3FC1               	movwi [1]fsr1
 11611                           
 11612                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11613  00AC  086E               	movf	_Load,w
 11614  00AD  0086               	movwf	6
 11615  00AE  3002               	movlw	2	; select bank4/5
 11616  00AF  0087               	movwf	7
 11617  00B0  1201               	bcf	1,4
 11618                           
 11619                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11620  00B1  086E               	movf	_Load,w
 11621  00B2  3E45               	addlw	69
 11622  00B3  0086               	movwf	6
 11623  00B4  3002               	movlw	2	; select bank4/5
 11624  00B5  0087               	movwf	7
 11625  00B6  086E               	movf	_Load,w
 11626  00B7  3E44               	addlw	68
 11627  00B8  0084               	movwf	4
 11628  00B9  3002               	movlw	2	; select bank4/5
 11629  00BA  0085               	movwf	5
 11630  00BB  0800               	movf	0,w
 11631  00BC  00AD               	movwf	??_Load_Main
 11632  00BD  086E               	movf	_Load,w
 11633  00BE  3E43               	addlw	67
 11634  00BF  0084               	movwf	4
 11635  00C0  3002               	movlw	2	; select bank4/5
 11636  00C1  0085               	movwf	5
 11637  00C2  0800               	movf	0,w
 11638  00C3  072D               	addwf	??_Load_Main,w
 11639  00C4  0701               	addwf	1,w
 11640  00C5  00AE               	movwf	??_Load_Main+1
 11641  00C6  086E               	movf	_Load,w
 11642  00C7  3E3E               	addlw	62
 11643  00C8  0086               	movwf	6
 11644  00C9  3002               	movlw	2	; select bank4/5
 11645  00CA  0087               	movwf	7
 11646  00CB  082E               	movf	??_Load_Main+1,w
 11647  00CC  0081               	movwf	1
 11648                           
 11649                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11650  00CD  01B1               	clrf	Load_Main@i
 11651  00CE  0AB1               	incf	Load_Main@i,f
 11652  00CF  3004               	movlw	4
 11653  00D0  0231               	subwf	Load_Main@i,w
 11654  00D1  1803               	btfsc	3,0
 11655  00D2  2901               	goto	l10114
 11656  00D3                     l10108:	
 11657                           
 11658                           ;OverLoad_B1.c: 68: {
 11659                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11660  00D3  3531               	lslf	Load_Main@i,w
 11661  00D4  3E08               	addlw	8
 11662  00D5  076E               	addwf	_Load,w
 11663  00D6  00AD               	movwf	??_Load_Main
 11664  00D7  082D               	movf	??_Load_Main,w
 11665  00D8  0086               	movwf	6
 11666  00D9  3002               	movlw	2	; select bank4/5
 11667  00DA  0087               	movwf	7
 11668  00DB  086E               	movf	_Load,w
 11669  00DC  3E2E               	addlw	46
 11670  00DD  0084               	movwf	4
 11671  00DE  3002               	movlw	2	; select bank4/5
 11672  00DF  0085               	movwf	5
 11673  00E0  3F40               	moviw [0]fsr1
 11674  00E1  0780               	addwf	0,f
 11675  00E2  3101               	addfsr 0,1
 11676  00E3  3F41               	moviw [1]fsr1
 11677  00E4  3D80               	addwfc	0,f
 11678  00E5  313F               	addfsr 0,-1
 11679                           
 11680                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11681  00E6  3531               	lslf	Load_Main@i,w
 11682  00E7  3E1A               	addlw	26
 11683  00E8  076E               	addwf	_Load,w
 11684  00E9  00AD               	movwf	??_Load_Main
 11685  00EA  082D               	movf	??_Load_Main,w
 11686  00EB  0086               	movwf	6
 11687  00EC  3002               	movlw	2	; select bank4/5
 11688  00ED  0087               	movwf	7
 11689  00EE  086E               	movf	_Load,w
 11690  00EF  3E30               	addlw	48
 11691  00F0  0084               	movwf	4
 11692  00F1  3002               	movlw	2	; select bank4/5
 11693  00F2  0085               	movwf	5
 11694  00F3  3F40               	moviw [0]fsr1
 11695  00F4  0780               	addwf	0,f
 11696  00F5  3101               	addfsr 0,1
 11697  00F6  3F41               	moviw [1]fsr1
 11698  00F7  3D80               	addwfc	0,f
 11699  00F8  313F               	addfsr 0,-1
 11700  00F9  3001               	movlw	1
 11701  00FA  00AD               	movwf	??_Load_Main
 11702  00FB  082D               	movf	??_Load_Main,w
 11703  00FC  07B1               	addwf	Load_Main@i,f
 11704  00FD  3004               	movlw	4
 11705  00FE  0231               	subwf	Load_Main@i,w
 11706  00FF  1C03               	skipc
 11707  0100  28D3               	goto	l10108
 11708  0101                     l10114:	
 11709                           
 11710                           ;OverLoad_B1.c: 71: }
 11711                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11712  0101  3003               	movlw	3
 11713  0102  00A0               	movwf	___lwdiv@divisor
 11714  0103  3000               	movlw	0
 11715  0104  00A1               	movwf	___lwdiv@divisor+1
 11716  0105  086E               	movf	_Load,w
 11717  0106  3E2E               	addlw	46
 11718  0107  0086               	movwf	6
 11719  0108  3002               	movlw	2	; select bank4/5
 11720  0109  0087               	movwf	7
 11721  010A  3F40               	moviw [0]fsr1
 11722  010B  00A2               	movwf	___lwdiv@dividend
 11723  010C  3F41               	moviw [1]fsr1
 11724  010D  00A3               	movwf	___lwdiv@dividend+1
 11725  010E  3199  21FF  3180   	fcall	___lwdiv
 11726  0111  0020               	movlb	0	; select bank0
 11727  0112  086E               	movf	_Load,w
 11728  0113  3E2E               	addlw	46
 11729  0114  0086               	movwf	6
 11730  0115  3002               	movlw	2	; select bank4/5
 11731  0116  0087               	movwf	7
 11732  0117  0820               	movf	?___lwdiv,w
 11733  0118  3FC0               	movwi [0]fsr1
 11734  0119  0821               	movf	?___lwdiv+1,w
 11735  011A  3FC1               	movwi [1]fsr1
 11736                           
 11737                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11738  011B  3003               	movlw	3
 11739  011C  00A0               	movwf	___lwdiv@divisor
 11740  011D  3000               	movlw	0
 11741  011E  00A1               	movwf	___lwdiv@divisor+1
 11742  011F  086E               	movf	_Load,w
 11743  0120  3E30               	addlw	48
 11744  0121  0086               	movwf	6
 11745  0122  3002               	movlw	2	; select bank4/5
 11746  0123  0087               	movwf	7
 11747  0124  3F40               	moviw [0]fsr1
 11748  0125  00A2               	movwf	___lwdiv@dividend
 11749  0126  3F41               	moviw [1]fsr1
 11750  0127  00A3               	movwf	___lwdiv@dividend+1
 11751  0128  3199  21FF  3180   	fcall	___lwdiv
 11752  012B  0020               	movlb	0	; select bank0
 11753  012C  086E               	movf	_Load,w
 11754  012D  3E30               	addlw	48
 11755  012E  0086               	movwf	6
 11756  012F  3002               	movlw	2	; select bank4/5
 11757  0130  0087               	movwf	7
 11758  0131  0820               	movf	?___lwdiv,w
 11759  0132  3FC0               	movwi [0]fsr1
 11760  0133  0821               	movf	?___lwdiv+1,w
 11761  0134  3FC1               	movwi [1]fsr1
 11762                           
 11763                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11764  0135  086E               	movf	_Load,w
 11765  0136  3E2E               	addlw	46
 11766  0137  0086               	movwf	6
 11767  0138  3002               	movlw	2	; select bank4/5
 11768  0139  0087               	movwf	7
 11769  013A  3F40               	moviw [0]fsr1
 11770  013B  00AD               	movwf	??_Load_Main
 11771  013C  3F41               	moviw [1]fsr1
 11772  013D  00AE               	movwf	??_Load_Main+1
 11773  013E  086E               	movf	_Load,w
 11774  013F  3E30               	addlw	48
 11775  0140  0086               	movwf	6
 11776  0141  3002               	movlw	2	; select bank4/5
 11777  0142  0087               	movwf	7
 11778  0143  3F40               	moviw [0]fsr1
 11779  0144  00AF               	movwf	??_Load_Main+2
 11780  0145  3F41               	moviw [1]fsr1
 11781  0146  00B0               	movwf	??_Load_Main+3
 11782  0147  082E               	movf	??_Load_Main+1,w
 11783  0148  0230               	subwf	??_Load_Main+3,w
 11784  0149  1D03               	skipz
 11785  014A  294D               	goto	u10255
 11786  014B  082D               	movf	??_Load_Main,w
 11787  014C  022F               	subwf	??_Load_Main+2,w
 11788  014D                     u10255:	
 11789  014D  1803               	skipnc
 11790  014E  2AD7               	goto	l10182
 11791                           
 11792                           ;OverLoad_B1.c: 75: {
 11793                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11794  014F  086E               	movf	_Load,w
 11795  0150  3E2E               	addlw	46
 11796  0151  0086               	movwf	6
 11797  0152  3002               	movlw	2	; select bank4/5
 11798  0153  0087               	movwf	7
 11799  0154  086E               	movf	_Load,w
 11800  0155  3E30               	addlw	48
 11801  0156  0084               	movwf	4
 11802  0157  3002               	movlw	2	; select bank4/5
 11803  0158  0085               	movwf	5
 11804  0159  3F00               	moviw [0]fsr0
 11805  015A  00AD               	movwf	??_Load_Main
 11806  015B  3F01               	moviw [1]fsr0
 11807  015C  00AE               	movwf	??_Load_Main+1
 11808  015D  09AD               	comf	??_Load_Main,f
 11809  015E  09AE               	comf	??_Load_Main+1,f
 11810  015F  0AAD               	incf	??_Load_Main,f
 11811  0160  1903               	skipnz
 11812  0161  0AAE               	incf	??_Load_Main+1,f
 11813  0162  3F40               	moviw [0]fsr1
 11814  0163  072D               	addwf	??_Load_Main,w
 11815  0164  00AF               	movwf	??_Load_Main+2
 11816  0165  3F41               	moviw [1]fsr1
 11817  0166  3D2E               	addwfc	??_Load_Main+1,w
 11818  0167  00B0               	movwf	??_Load_Main+3
 11819  0168  086E               	movf	_Load,w
 11820  0169  3E2C               	addlw	44
 11821  016A  0086               	movwf	6
 11822  016B  3002               	movlw	2	; select bank4/5
 11823  016C  0087               	movwf	7
 11824  016D  082F               	movf	??_Load_Main+2,w
 11825  016E  3FC0               	movwi [0]fsr1
 11826  016F  0830               	movf	??_Load_Main+3,w
 11827  0170  3FC1               	movwi [1]fsr1
 11828                           
 11829                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11830  0171  086E               	movf	_Load,w
 11831  0172  3E3A               	addlw	58
 11832  0173  0086               	movwf	6
 11833  0174  3002               	movlw	2	; select bank4/5
 11834  0175  0087               	movwf	7
 11835  0176  3002               	movlw	2
 11836  0177  0201               	subwf	1,w
 11837  0178  1803               	skipnc
 11838  0179  29CA               	goto	l10136
 11839                           
 11840                           ;OverLoad_B1.c: 79: {
 11841                           ;OverLoad_B1.c: 80: Load->Count++;
 11842  017A  3001               	movlw	1
 11843  017B  00AD               	movwf	??_Load_Main
 11844  017C  086E               	movf	_Load,w
 11845  017D  3E3A               	addlw	58
 11846  017E  0086               	movwf	6
 11847  017F  3002               	movlw	2	; select bank4/5
 11848  0180  0087               	movwf	7
 11849  0181  082D               	movf	??_Load_Main,w
 11850  0182  0781               	addwf	1,f
 11851                           
 11852                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11853  0183  086E               	movf	_Load,w
 11854  0184  3E3A               	addlw	58
 11855  0185  0086               	movwf	6
 11856  0186  3002               	movlw	2	; select bank4/5
 11857  0187  0087               	movwf	7
 11858  0188  0801               	movf	1,w
 11859  0189  3A01               	xorlw	1
 11860  018A  1D03               	skipz
 11861  018B  2996               	goto	l10128
 11862                           
 11863                           ;OverLoad_B1.c: 82: {
 11864                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11865  018C  086E               	movf	_Load,w
 11866  018D  3E36               	addlw	54
 11867  018E  0086               	movwf	6
 11868  018F  3002               	movlw	2	; select bank4/5
 11869  0190  0087               	movwf	7
 11870  0191  30F4               	movlw	244
 11871  0192  3FC0               	movwi [0]fsr1
 11872  0193  3001               	movlw	1
 11873  0194  3FC1               	movwi [1]fsr1
 11874                           
 11875                           ;OverLoad_B1.c: 84: }
 11876  0195  29CA               	goto	l10136
 11877  0196                     l10128:	
 11878                           
 11879                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11880  0196  086E               	movf	_Load,w
 11881  0197  3E3A               	addlw	58
 11882  0198  0086               	movwf	6
 11883  0199  3002               	movlw	2	; select bank4/5
 11884  019A  0087               	movwf	7
 11885  019B  0801               	movf	1,w
 11886  019C  3A02               	xorlw	2
 11887  019D  1D03               	skipz
 11888  019E  29CA               	goto	l10136
 11889                           
 11890                           ;OverLoad_B1.c: 86: {
 11891                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11892  019F  086E               	movf	_Load,w
 11893  01A0  3E3E               	addlw	62
 11894  01A1  0086               	movwf	6
 11895  01A2  3002               	movlw	2	; select bank4/5
 11896  01A3  0087               	movwf	7
 11897  01A4  0801               	movf	1,w
 11898  01A5  3A01               	xorlw	1
 11899  01A6  1D03               	skipz
 11900  01A7  29B2               	goto	l10134
 11901                           
 11902                           ;OverLoad_B1.c: 88: {
 11903                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
 11904  01A8  086E               	movf	_Load,w
 11905  01A9  3E36               	addlw	54
 11906  01AA  0086               	movwf	6
 11907  01AB  3002               	movlw	2	; select bank4/5
 11908  01AC  0087               	movwf	7
 11909  01AD  3032               	movlw	50
 11910  01AE  3FC0               	movwi [0]fsr1
 11911  01AF  3000               	movlw	0
 11912  01B0  3FC1               	movwi [1]fsr1
 11913                           
 11914                           ;OverLoad_B1.c: 90: }
 11915  01B1  29CA               	goto	l10136
 11916  01B2                     l10134:	
 11917                           
 11918                           ;OverLoad_B1.c: 91: else
 11919                           ;OverLoad_B1.c: 92: {
 11920                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
 11921  01B2  086E               	movf	_Load,w
 11922  01B3  3E06               	addlw	6
 11923  01B4  0086               	movwf	6
 11924  01B5  3002               	movlw	2	; select bank4/5
 11925  01B6  0087               	movwf	7
 11926  01B7  3F40               	moviw [0]fsr1
 11927  01B8  00AD               	movwf	??_Load_Main
 11928  01B9  3F41               	moviw [1]fsr1
 11929  01BA  00AE               	movwf	??_Load_Main+1
 11930  01BB  082D               	movf	??_Load_Main,w
 11931  01BC  3E2A               	addlw	42
 11932  01BD  00AF               	movwf	??_Load_Main+2
 11933  01BE  3000               	movlw	0
 11934  01BF  3D2E               	addwfc	??_Load_Main+1,w
 11935  01C0  00B0               	movwf	??_Load_Main+3
 11936  01C1  086E               	movf	_Load,w
 11937  01C2  3E36               	addlw	54
 11938  01C3  0086               	movwf	6
 11939  01C4  3002               	movlw	2	; select bank4/5
 11940  01C5  0087               	movwf	7
 11941  01C6  082F               	movf	??_Load_Main+2,w
 11942  01C7  3FC0               	movwi [0]fsr1
 11943  01C8  0830               	movf	??_Load_Main+3,w
 11944  01C9  3FC1               	movwi [1]fsr1
 11945  01CA                     l10136:	
 11946                           
 11947                           ;OverLoad_B1.c: 94: }
 11948                           ;OverLoad_B1.c: 95: }
 11949                           ;OverLoad_B1.c: 96: }
 11950                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11951  01CA  086E               	movf	_Load,w
 11952  01CB  3E36               	addlw	54
 11953  01CC  0086               	movwf	6
 11954  01CD  3002               	movlw	2	; select bank4/5
 11955  01CE  0087               	movwf	7
 11956  01CF  3F40               	moviw [0]fsr1
 11957  01D0  00AD               	movwf	??_Load_Main
 11958  01D1  3F41               	moviw [1]fsr1
 11959  01D2  00AE               	movwf	??_Load_Main+1
 11960  01D3  086E               	movf	_Load,w
 11961  01D4  3E2C               	addlw	44
 11962  01D5  0086               	movwf	6
 11963  01D6  3002               	movlw	2	; select bank4/5
 11964  01D7  0087               	movwf	7
 11965  01D8  3F40               	moviw [0]fsr1
 11966  01D9  00AF               	movwf	??_Load_Main+2
 11967  01DA  3F41               	moviw [1]fsr1
 11968  01DB  00B0               	movwf	??_Load_Main+3
 11969  01DC  082E               	movf	??_Load_Main+1,w
 11970  01DD  0230               	subwf	??_Load_Main+3,w
 11971  01DE  1D03               	skipz
 11972  01DF  29E2               	goto	u10305
 11973  01E0  082D               	movf	??_Load_Main,w
 11974  01E1  022F               	subwf	??_Load_Main+2,w
 11975  01E2                     u10305:	
 11976  01E2  1C03               	skipc
 11977  01E3  2A50               	goto	l10156
 11978                           
 11979                           ;OverLoad_B1.c: 99: {
 11980                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11981  01E4  3001               	movlw	1
 11982  01E5  00AD               	movwf	??_Load_Main
 11983  01E6  086E               	movf	_Load,w
 11984  01E7  3E3C               	addlw	60
 11985  01E8  0086               	movwf	6
 11986  01E9  3002               	movlw	2	; select bank4/5
 11987  01EA  0087               	movwf	7
 11988  01EB  082D               	movf	??_Load_Main,w
 11989  01EC  0781               	addwf	1,f
 11990                           
 11991                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11992  01ED  086E               	movf	_Load,w
 11993  01EE  3E3C               	addlw	60
 11994  01EF  0086               	movwf	6
 11995  01F0  3002               	movlw	2	; select bank4/5
 11996  01F1  0087               	movwf	7
 11997  01F2  3003               	movlw	3
 11998  01F3  0201               	subwf	1,w
 11999  01F4  1C03               	skipc
 12000  01F5  2AD7               	goto	l10182
 12001                           
 12002                           ;OverLoad_B1.c: 102: {
 12003                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 12004  01F6  086E               	movf	_Load,w
 12005  01F7  3E3C               	addlw	60
 12006  01F8  0086               	movwf	6
 12007  01F9  3002               	movlw	2	; select bank4/5
 12008  01FA  0087               	movwf	7
 12009  01FB  0181               	clrf	1
 12010                           
 12011                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 12012  01FC  3001               	movlw	1
 12013  01FD  319B  23B5  3180   	fcall	_setLoad_Exceptions
 12014                           
 12015                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 12016  0200  0020               	movlb	0	; select bank0
 12017  0201  086E               	movf	_Load,w
 12018  0202  3E2C               	addlw	44
 12019  0203  0086               	movwf	6
 12020  0204  3002               	movlw	2	; select bank4/5
 12021  0205  0087               	movwf	7
 12022  0206  3F40               	moviw [0]fsr1
 12023  0207  00AD               	movwf	??_Load_Main
 12024  0208  3F41               	moviw [1]fsr1
 12025  0209  00AE               	movwf	??_Load_Main+1
 12026  020A  082E               	movf	??_Load_Main+1,w
 12027  020B  00AF               	movwf	??_Load_Main+2
 12028  020C  086F               	movf	_Product,w
 12029  020D  3E04               	addlw	4
 12030  020E  0086               	movwf	6
 12031  020F  3001               	movlw	1	; select bank2/3
 12032  0210  0087               	movwf	7
 12033  0211  082F               	movf	??_Load_Main+2,w
 12034  0212  0081               	movwf	1
 12035                           
 12036                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 12037  0213  086E               	movf	_Load,w
 12038  0214  3E2C               	addlw	44
 12039  0215  0086               	movwf	6
 12040  0216  3002               	movlw	2	; select bank4/5
 12041  0217  0087               	movwf	7
 12042  0218  0801               	movf	1,w
 12043  0219  00AD               	movwf	??_Load_Main
 12044  021A  086F               	movf	_Product,w
 12045  021B  3E05               	addlw	5
 12046  021C  0086               	movwf	6
 12047  021D  3001               	movlw	1	; select bank2/3
 12048  021E  0087               	movwf	7
 12049  021F  082D               	movf	??_Load_Main,w
 12050  0220  0081               	movwf	1
 12051                           
 12052                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 12053  0221  086E               	movf	_Load,w
 12054  0222  3E36               	addlw	54
 12055  0223  0086               	movwf	6
 12056  0224  3002               	movlw	2	; select bank4/5
 12057  0225  0087               	movwf	7
 12058  0226  3F40               	moviw [0]fsr1
 12059  0227  00AD               	movwf	??_Load_Main
 12060  0228  3F41               	moviw [1]fsr1
 12061  0229  00AE               	movwf	??_Load_Main+1
 12062  022A  082E               	movf	??_Load_Main+1,w
 12063  022B  00AF               	movwf	??_Load_Main+2
 12064  022C  086F               	movf	_Product,w
 12065  022D  3E10               	addlw	16
 12066  022E  0086               	movwf	6
 12067  022F  3001               	movlw	1	; select bank2/3
 12068  0230  0087               	movwf	7
 12069  0231  082F               	movf	??_Load_Main+2,w
 12070  0232  0081               	movwf	1
 12071                           
 12072                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 12073  0233  086E               	movf	_Load,w
 12074  0234  3E36               	addlw	54
 12075  0235  0086               	movwf	6
 12076  0236  3002               	movlw	2	; select bank4/5
 12077  0237  0087               	movwf	7
 12078  0238  0801               	movf	1,w
 12079  0239  00AD               	movwf	??_Load_Main
 12080  023A  086F               	movf	_Product,w
 12081  023B  3E11               	addlw	17
 12082  023C  0086               	movwf	6
 12083  023D  3001               	movlw	1	; select bank2/3
 12084  023E  0087               	movwf	7
 12085  023F  082D               	movf	??_Load_Main,w
 12086  0240  0081               	movwf	1
 12087                           
 12088                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 12089  0241  086E               	movf	_Load,w
 12090  0242  3E3E               	addlw	62
 12091  0243  0086               	movwf	6
 12092  0244  3002               	movlw	2	; select bank4/5
 12093  0245  0087               	movwf	7
 12094  0246  0801               	movf	1,w
 12095  0247  00AD               	movwf	??_Load_Main
 12096  0248  086F               	movf	_Product,w
 12097  0249  3E08               	addlw	8
 12098  024A  0086               	movwf	6
 12099  024B  3001               	movlw	1	; select bank2/3
 12100  024C  0087               	movwf	7
 12101  024D  082D               	movf	??_Load_Main,w
 12102  024E  0081               	movwf	1
 12103                           
 12104                           ;OverLoad_B1.c: 113: }
 12105                           ;OverLoad_B1.c: 114: }
 12106  024F  2AD7               	goto	l10182
 12107  0250                     l10156:	
 12108                           
 12109                           ;OverLoad_B1.c: 115: else
 12110                           ;OverLoad_B1.c: 116: {
 12111                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 12112  0250  086E               	movf	_Load,w
 12113  0251  3E3C               	addlw	60
 12114  0252  0086               	movwf	6
 12115  0253  3002               	movlw	2	; select bank4/5
 12116  0254  0087               	movwf	7
 12117  0255  0181               	clrf	1
 12118                           
 12119                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 12120  0256  086E               	movf	_Load,w
 12121  0257  3E42               	addlw	66
 12122  0258  0086               	movwf	6
 12123  0259  3002               	movlw	2	; select bank4/5
 12124  025A  0087               	movwf	7
 12125  025B  300A               	movlw	10
 12126  025C  0201               	subwf	1,w
 12127  025D  1803               	skipnc
 12128  025E  2A68               	goto	l10162
 12129                           
 12130                           ;OverLoad_B1.c: 119: {
 12131                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 12132  025F  3001               	movlw	1
 12133  0260  00AD               	movwf	??_Load_Main
 12134  0261  086E               	movf	_Load,w
 12135  0262  3E42               	addlw	66
 12136  0263  0086               	movwf	6
 12137  0264  3002               	movlw	2	; select bank4/5
 12138  0265  0087               	movwf	7
 12139  0266  082D               	movf	??_Load_Main,w
 12140  0267  0781               	addwf	1,f
 12141  0268                     l10162:	
 12142                           
 12143                           ;OverLoad_B1.c: 121: }
 12144                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 12145  0268  086E               	movf	_Load,w
 12146  0269  3E42               	addlw	66
 12147  026A  0086               	movwf	6
 12148  026B  3002               	movlw	2	; select bank4/5
 12149  026C  0087               	movwf	7
 12150  026D  300A               	movlw	10
 12151  026E  0201               	subwf	1,w
 12152  026F  1C03               	skipc
 12153  0270  2AD7               	goto	l10182
 12154                           
 12155                           ;OverLoad_B1.c: 123: {
 12156                           ;OverLoad_B1.c: 124: Load->Safe=1;
 12157  0271  086E               	movf	_Load,w
 12158  0272  0086               	movwf	6
 12159  0273  3002               	movlw	2	; select bank4/5
 12160  0274  0087               	movwf	7
 12161  0275  1581               	bsf	1,3
 12162                           
 12163                           ;OverLoad_B1.c: 128: setDimmerLights_Clear(1,1);
 12164  0276  01A2               	clrf	setDimmerLights_Clear@command
 12165  0277  0AA2               	incf	setDimmerLights_Clear@command,f
 12166  0278  3001               	movlw	1
 12167  0279  31A4  2457  3180   	fcall	_setDimmerLights_Clear
 12168                           
 12169                           ;OverLoad_B1.c: 132: ;;
 12170                           ;OverLoad_B1.c: 138: setDimmerLights_Clear(2,1);
 12171  027C  0020               	movlb	0	; select bank0
 12172  027D  01A2               	clrf	setDimmerLights_Clear@command
 12173  027E  0AA2               	incf	setDimmerLights_Clear@command,f
 12174  027F  3002               	movlw	2
 12175  0280  31A4  2457  3180   	fcall	_setDimmerLights_Clear
 12176                           
 12177                           ;OverLoad_B1.c: 142: ;;
 12178                           ;OverLoad_B1.c: 157: if(Load->StatusOn)
 12179  0283  0020               	movlb	0	; select bank0
 12180  0284  086E               	movf	_Load,w
 12181  0285  3E46               	addlw	70
 12182  0286  0086               	movwf	6
 12183  0287  3002               	movlw	2	; select bank4/5
 12184  0288  0087               	movwf	7
 12185  0289  1C01               	btfss	1,0
 12186  028A  2A9F               	goto	l10174
 12187                           
 12188                           ;OverLoad_B1.c: 158: {
 12189                           ;OverLoad_B1.c: 159: Load->StatusOn=0;
 12190  028B  086E               	movf	_Load,w
 12191  028C  3E46               	addlw	70
 12192  028D  0086               	movwf	6
 12193  028E  3002               	movlw	2	; select bank4/5
 12194  028F  0087               	movwf	7
 12195  0290  1001               	bcf	1,0
 12196                           
 12197                           ;OverLoad_B1.c: 160: Load->TotalLoad=Load->AD;
 12198  0291  086E               	movf	_Load,w
 12199  0292  3E2C               	addlw	44
 12200  0293  0086               	movwf	6
 12201  0294  3002               	movlw	2	; select bank4/5
 12202  0295  0087               	movwf	7
 12203  0296  086E               	movf	_Load,w
 12204  0297  3E06               	addlw	6
 12205  0298  0084               	movwf	4
 12206  0299  3002               	movlw	2	; select bank4/5
 12207  029A  0085               	movwf	5
 12208  029B  3F40               	moviw [0]fsr1
 12209  029C  3F80               	movwi [0]fsr0
 12210  029D  3F41               	moviw [1]fsr1
 12211  029E  3F81               	movwi [1]fsr0
 12212  029F                     l10174:	
 12213                           
 12214                           ;OverLoad_B1.c: 162: }
 12215                           ;OverLoad_B1.c: 164: if(Load->StatusOff)
 12216  029F  086E               	movf	_Load,w
 12217  02A0  3E46               	addlw	70
 12218  02A1  0086               	movwf	6
 12219  02A2  3002               	movlw	2	; select bank4/5
 12220  02A3  0087               	movwf	7
 12221  02A4  1C81               	btfss	1,1
 12222  02A5  2AD7               	goto	l10182
 12223                           
 12224                           ;OverLoad_B1.c: 165: {
 12225                           ;OverLoad_B1.c: 166: Load->StatusOff=0;
 12226  02A6  086E               	movf	_Load,w
 12227  02A7  3E46               	addlw	70
 12228  02A8  0086               	movwf	6
 12229  02A9  3002               	movlw	2	; select bank4/5
 12230  02AA  0087               	movwf	7
 12231  02AB  1081               	bcf	1,1
 12232                           
 12233                           ;OverLoad_B1.c: 167: Load->TotalLoad=Load->AD;
 12234  02AC  086E               	movf	_Load,w
 12235  02AD  3E2C               	addlw	44
 12236  02AE  0086               	movwf	6
 12237  02AF  3002               	movlw	2	; select bank4/5
 12238  02B0  0087               	movwf	7
 12239  02B1  086E               	movf	_Load,w
 12240  02B2  3E06               	addlw	6
 12241  02B3  0084               	movwf	4
 12242  02B4  3002               	movlw	2	; select bank4/5
 12243  02B5  0085               	movwf	5
 12244  02B6  3F40               	moviw [0]fsr1
 12245  02B7  3F80               	movwi [0]fsr0
 12246  02B8  3F41               	moviw [1]fsr1
 12247  02B9  3F81               	movwi [1]fsr0
 12248                           
 12249                           ;OverLoad_B1.c: 168: Load->JudgeValue=0x32*Load->LightsCount;
 12250  02BA  086E               	movf	_Load,w
 12251  02BB  3E3E               	addlw	62
 12252  02BC  0086               	movwf	6
 12253  02BD  3002               	movlw	2	; select bank4/5
 12254  02BE  0087               	movwf	7
 12255  02BF  0801               	movf	1,w
 12256  02C0  00AD               	movwf	??_Load_Main
 12257  02C1  01AE               	clrf	??_Load_Main+1
 12258  02C2  082D               	movf	??_Load_Main,w
 12259  02C3  00A0               	movwf	___wmul@multiplier
 12260  02C4  082E               	movf	??_Load_Main+1,w
 12261  02C5  00A1               	movwf	___wmul@multiplier+1
 12262  02C6  3032               	movlw	50
 12263  02C7  00A2               	movwf	___wmul@multiplicand
 12264  02C8  3000               	movlw	0
 12265  02C9  00A3               	movwf	___wmul@multiplicand+1
 12266  02CA  31A6  26A3  3180   	fcall	___wmul
 12267  02CD  0020               	movlb	0	; select bank0
 12268  02CE  086E               	movf	_Load,w
 12269  02CF  3E36               	addlw	54
 12270  02D0  0086               	movwf	6
 12271  02D1  3002               	movlw	2	; select bank4/5
 12272  02D2  0087               	movwf	7
 12273  02D3  0820               	movf	?___wmul,w
 12274  02D4  3FC0               	movwi [0]fsr1
 12275  02D5  0821               	movf	?___wmul+1,w
 12276  02D6  3FC1               	movwi [1]fsr1
 12277  02D7                     l10182:	
 12278                           
 12279                           ;OverLoad_B1.c: 169: }
 12280                           ;OverLoad_B1.c: 170: }
 12281                           ;OverLoad_B1.c: 171: }
 12282                           ;OverLoad_B1.c: 172: }
 12283                           ;OverLoad_B1.c: 173: setLoad_AH_AL_Restore();
 12284  02D7  31A7  2744  3180   	fcall	_setLoad_AH_AL_Restore
 12285                           
 12286                           ;OverLoad_B1.c: 175: Product->Data[2]=(Load->AD >> 8);
 12287  02DA  0020               	movlb	0	; select bank0
 12288  02DB  086E               	movf	_Load,w
 12289  02DC  3E2C               	addlw	44
 12290  02DD  0086               	movwf	6
 12291  02DE  3002               	movlw	2	; select bank4/5
 12292  02DF  0087               	movwf	7
 12293  02E0  3F40               	moviw [0]fsr1
 12294  02E1  00AD               	movwf	??_Load_Main
 12295  02E2  3F41               	moviw [1]fsr1
 12296  02E3  00AE               	movwf	??_Load_Main+1
 12297  02E4  082E               	movf	??_Load_Main+1,w
 12298  02E5  00AF               	movwf	??_Load_Main+2
 12299  02E6  086F               	movf	_Product,w
 12300  02E7  3E02               	addlw	2
 12301  02E8  0086               	movwf	6
 12302  02E9  3001               	movlw	1	; select bank2/3
 12303  02EA  0087               	movwf	7
 12304  02EB  082F               	movf	??_Load_Main+2,w
 12305  02EC  0081               	movwf	1
 12306                           
 12307                           ;OverLoad_B1.c: 176: Product->Data[3]=Load->AD;
 12308  02ED  086E               	movf	_Load,w
 12309  02EE  3E2C               	addlw	44
 12310  02EF  0086               	movwf	6
 12311  02F0  3002               	movlw	2	; select bank4/5
 12312  02F1  0087               	movwf	7
 12313  02F2  0801               	movf	1,w
 12314  02F3  00AD               	movwf	??_Load_Main
 12315  02F4  086F               	movf	_Product,w
 12316  02F5  3E03               	addlw	3
 12317  02F6  0086               	movwf	6
 12318  02F7  3001               	movlw	1	; select bank2/3
 12319  02F8  0087               	movwf	7
 12320  02F9  082D               	movf	??_Load_Main,w
 12321  02FA  0081               	movwf	1
 12322                           
 12323                           ;OverLoad_B1.c: 177: Product->Data[8]=Load->LightsCount;
 12324  02FB  086E               	movf	_Load,w
 12325  02FC  3E3E               	addlw	62
 12326  02FD  0086               	movwf	6
 12327  02FE  3002               	movlw	2	; select bank4/5
 12328  02FF  0087               	movwf	7
 12329  0300  0801               	movf	1,w
 12330  0301  00AD               	movwf	??_Load_Main
 12331  0302  086F               	movf	_Product,w
 12332  0303  3E08               	addlw	8
 12333  0304  0086               	movwf	6
 12334  0305  3001               	movlw	1	; select bank2/3
 12335  0306  0087               	movwf	7
 12336  0307  082D               	movf	??_Load_Main,w
 12337  0308  0081               	movwf	1
 12338                           
 12339                           ;OverLoad_B1.c: 178: Product->Data[10]=Load->TotalLoad;
 12340  0309  086E               	movf	_Load,w
 12341  030A  3E06               	addlw	6
 12342  030B  0086               	movwf	6
 12343  030C  3002               	movlw	2	; select bank4/5
 12344  030D  0087               	movwf	7
 12345  030E  0801               	movf	1,w
 12346  030F  00AD               	movwf	??_Load_Main
 12347  0310  086F               	movf	_Product,w
 12348  0311  3E0A               	addlw	10
 12349  0312  0086               	movwf	6
 12350  0313  3001               	movlw	1	; select bank2/3
 12351  0314  0087               	movwf	7
 12352  0315  082D               	movf	??_Load_Main,w
 12353  0316  0081               	movwf	1
 12354                           
 12355                           ;OverLoad_B1.c: 179: Product->Data[16]=(Load->JudgeValue >> 8);
 12356  0317  086E               	movf	_Load,w
 12357  0318  3E36               	addlw	54
 12358  0319  0086               	movwf	6
 12359  031A  3002               	movlw	2	; select bank4/5
 12360  031B  0087               	movwf	7
 12361  031C  3F40               	moviw [0]fsr1
 12362  031D  00AD               	movwf	??_Load_Main
 12363  031E  3F41               	moviw [1]fsr1
 12364  031F  00AE               	movwf	??_Load_Main+1
 12365  0320  082E               	movf	??_Load_Main+1,w
 12366  0321  00AF               	movwf	??_Load_Main+2
 12367  0322  086F               	movf	_Product,w
 12368  0323  3E10               	addlw	16
 12369  0324  0086               	movwf	6
 12370  0325  3001               	movlw	1	; select bank2/3
 12371  0326  0087               	movwf	7
 12372  0327  082F               	movf	??_Load_Main+2,w
 12373  0328  0081               	movwf	1
 12374                           
 12375                           ;OverLoad_B1.c: 180: Product->Data[17]=Load->JudgeValue;
 12376  0329  086E               	movf	_Load,w
 12377  032A  3E36               	addlw	54
 12378  032B  0086               	movwf	6
 12379  032C  3002               	movlw	2	; select bank4/5
 12380  032D  0087               	movwf	7
 12381  032E  0801               	movf	1,w
 12382  032F  00AD               	movwf	??_Load_Main
 12383  0330  086F               	movf	_Product,w
 12384  0331  3E11               	addlw	17
 12385  0332  0086               	movwf	6
 12386  0333  3001               	movlw	1	; select bank2/3
 12387  0334  0087               	movwf	7
 12388  0335  082D               	movf	??_Load_Main,w
 12389  0336  0081               	movwf	1
 12390                           
 12391                           ;OverLoad_B1.c: 181: Product->Data[18]=Load->ErrorStatus;
 12392  0337  086E               	movf	_Load,w
 12393  0338  3E05               	addlw	5
 12394  0339  0086               	movwf	6
 12395  033A  3002               	movlw	2	; select bank4/5
 12396  033B  0087               	movwf	7
 12397  033C  0801               	movf	1,w
 12398  033D  00AD               	movwf	??_Load_Main
 12399  033E  086F               	movf	_Product,w
 12400  033F  3E12               	addlw	18
 12401  0340  0086               	movwf	6
 12402  0341  3001               	movlw	1	; select bank2/3
 12403  0342  0087               	movwf	7
 12404  0343  082D               	movf	??_Load_Main,w
 12405  0344  0081               	movwf	1
 12406                           
 12407                           ;OverLoad_B1.c: 182: Product->Data[19]=Load->Count;
 12408  0345  086E               	movf	_Load,w
 12409  0346  3E3A               	addlw	58
 12410  0347  0086               	movwf	6
 12411  0348  3002               	movlw	2	; select bank4/5
 12412  0349  0087               	movwf	7
 12413  034A  0801               	movf	1,w
 12414  034B  00AD               	movwf	??_Load_Main
 12415  034C  086F               	movf	_Product,w
 12416  034D  3E13               	addlw	19
 12417  034E  0086               	movwf	6
 12418  034F  3001               	movlw	1	; select bank2/3
 12419  0350  0087               	movwf	7
 12420  0351  082D               	movf	??_Load_Main,w
 12421  0352  0081               	movwf	1
 12422                           
 12423                           ;OverLoad_B1.c: 185: }
 12424                           ;OverLoad_B1.c: 186: }
 12425  0353  0008               	return
 12426  0354                     l10200:	
 12427                           
 12428                           ;OverLoad_B1.c: 187: else
 12429                           ;OverLoad_B1.c: 188: {
 12430                           ;OverLoad_B1.c: 189: if(Load->GO)
 12431  0354  086E               	movf	_Load,w
 12432  0355  0086               	movwf	6
 12433  0356  3002               	movlw	2	; select bank4/5
 12434  0357  0087               	movwf	7
 12435  0358  1C81               	btfss	1,1
 12436  0359  2B7D               	goto	l10212
 12437                           
 12438                           ;OverLoad_B1.c: 190: {
 12439                           ;OverLoad_B1.c: 191: if(!Load->LightsON)
 12440  035A  086E               	movf	_Load,w
 12441  035B  0086               	movwf	6
 12442  035C  3002               	movlw	2	; select bank4/5
 12443  035D  0087               	movwf	7
 12444  035E  1901               	btfsc	1,2
 12445  035F  2B6A               	goto	l10206
 12446                           
 12447                           ;OverLoad_B1.c: 192: {
 12448                           ;OverLoad_B1.c: 193: Load->LightsON=1;
 12449  0360  086E               	movf	_Load,w
 12450  0361  0086               	movwf	6
 12451  0362  3002               	movlw	2	; select bank4/5
 12452  0363  0087               	movwf	7
 12453  0364  1501               	bsf	1,2
 12454                           
 12455                           ;OverLoad_B1.c: 194: Load->Safe=0;
 12456  0365  086E               	movf	_Load,w
 12457  0366  0086               	movwf	6
 12458  0367  3002               	movlw	2	; select bank4/5
 12459  0368  0087               	movwf	7
 12460  0369  1181               	bcf	1,3
 12461  036A                     l10206:	
 12462                           
 12463                           ;OverLoad_B1.c: 195: }
 12464                           ;OverLoad_B1.c: 196: if(getTemp_Safe() && getPF_Safe())
 12465  036A  31A2  22C0  3180   	fcall	_getTemp_Safe
 12466  036D  3A00               	xorlw	0
 12467  036E  1903               	skipnz
 12468  036F  0008               	return
 12469  0370  31A2  22E5  3180   	fcall	_getPF_Safe
 12470  0373  3A00               	xorlw	0
 12471  0374  1903               	skipnz
 12472  0375  0008               	return
 12473                           
 12474                           ;OverLoad_B1.c: 197: {
 12475                           ;OverLoad_B1.c: 198: Load->ADtoGO=1;
 12476  0376  0020               	movlb	0	; select bank0
 12477  0377  086E               	movf	_Load,w
 12478  0378  0086               	movwf	6
 12479  0379  3002               	movlw	2	; select bank4/5
 12480  037A  0087               	movwf	7
 12481  037B  1601               	bsf	1,4
 12482                           
 12483                           ;OverLoad_B1.c: 199: }
 12484                           ;OverLoad_B1.c: 200: }
 12485  037C  0008               	return
 12486  037D                     l10212:	
 12487                           
 12488                           ;OverLoad_B1.c: 201: else
 12489                           ;OverLoad_B1.c: 202: {
 12490                           ;OverLoad_B1.c: 203: if(Load->LightsON)
 12491  037D  086E               	movf	_Load,w
 12492  037E  0086               	movwf	6
 12493  037F  3002               	movlw	2	; select bank4/5
 12494  0380  0087               	movwf	7
 12495  0381  1D01               	btfss	1,2
 12496  0382  0008               	return
 12497                           
 12498                           ;OverLoad_B1.c: 204: {
 12499                           ;OverLoad_B1.c: 205: Load->LightsON=0;
 12500  0383  086E               	movf	_Load,w
 12501  0384  0086               	movwf	6
 12502  0385  3002               	movlw	2	; select bank4/5
 12503  0386  0087               	movwf	7
 12504  0387  1101               	bcf	1,2
 12505                           
 12506                           ;OverLoad_B1.c: 206: Load->Safe=1;
 12507  0388  086E               	movf	_Load,w
 12508  0389  0086               	movwf	6
 12509  038A  3002               	movlw	2	; select bank4/5
 12510  038B  0087               	movwf	7
 12511  038C  1581               	bsf	1,3
 12512                           
 12513                           ;OverLoad_B1.c: 207: Load->ErrorCount=0;
 12514  038D  086E               	movf	_Load,w
 12515  038E  3E3C               	addlw	60
 12516  038F  0086               	movwf	6
 12517  0390  3002               	movlw	2	; select bank4/5
 12518  0391  0087               	movwf	7
 12519  0392  0181               	clrf	1
 12520                           
 12521                           ;OverLoad_B1.c: 208: Load->Count=0;
 12522  0393  086E               	movf	_Load,w
 12523  0394  3E3A               	addlw	58
 12524  0395  0086               	movwf	6
 12525  0396  3002               	movlw	2	; select bank4/5
 12526  0397  0087               	movwf	7
 12527  0398  0181               	clrf	1
 12528                           
 12529                           ;OverLoad_B1.c: 209: Load->TotalLoad=0;
 12530  0399  086E               	movf	_Load,w
 12531  039A  3E06               	addlw	6
 12532  039B  0086               	movwf	6
 12533  039C  3002               	movlw	2	; select bank4/5
 12534  039D  0087               	movwf	7
 12535  039E  3000               	movlw	0
 12536  039F  3FC0               	movwi [0]fsr1
 12537  03A0  3FC1               	movwi [1]fsr1
 12538                           
 12539                           ;OverLoad_B1.c: 210: Load->NumberCount=0;
 12540  03A1  086E               	movf	_Load,w
 12541  03A2  3E3F               	addlw	63
 12542  03A3  0086               	movwf	6
 12543  03A4  3002               	movlw	2	; select bank4/5
 12544  03A5  0087               	movwf	7
 12545  03A6  0181               	clrf	1
 12546                           
 12547                           ;OverLoad_B1.c: 211: Load->StatusOn=0;
 12548  03A7  086E               	movf	_Load,w
 12549  03A8  3E46               	addlw	70
 12550  03A9  0086               	movwf	6
 12551  03AA  3002               	movlw	2	; select bank4/5
 12552  03AB  0087               	movwf	7
 12553  03AC  1001               	bcf	1,0
 12554                           
 12555                           ;OverLoad_B1.c: 212: Load->StatusOff=0;
 12556  03AD  086E               	movf	_Load,w
 12557  03AE  3E46               	addlw	70
 12558  03AF  0086               	movwf	6
 12559  03B0  3002               	movlw	2	; select bank4/5
 12560  03B1  0087               	movwf	7
 12561  03B2  1081               	bcf	1,1
 12562                           
 12563                           ;OverLoad_B1.c: 213: Load->AD=0;
 12564  03B3  086E               	movf	_Load,w
 12565  03B4  3E2C               	addlw	44
 12566  03B5  0086               	movwf	6
 12567  03B6  3002               	movlw	2	; select bank4/5
 12568  03B7  0087               	movwf	7
 12569  03B8  3000               	movlw	0
 12570  03B9  3FC0               	movwi [0]fsr1
 12571  03BA  3FC1               	movwi [1]fsr1
 12572                           
 12573                           ;OverLoad_B1.c: 214: setLoad_AH_AL_Restore();
 12574  03BB  31A7  2744  3180   	fcall	_setLoad_AH_AL_Restore
 12575                           
 12576                           ;OverLoad_B1.c: 218: setDimmerLights_Clear(1,1);
 12577  03BE  0020               	movlb	0	; select bank0
 12578  03BF  01A2               	clrf	setDimmerLights_Clear@command
 12579  03C0  0AA2               	incf	setDimmerLights_Clear@command,f
 12580  03C1  3001               	movlw	1
 12581  03C2  31A4  2457  3180   	fcall	_setDimmerLights_Clear
 12582                           
 12583                           ;OverLoad_B1.c: 222: ;;
 12584                           ;OverLoad_B1.c: 228: setDimmerLights_Clear(2,1);
 12585  03C5  0020               	movlb	0	; select bank0
 12586  03C6  01A2               	clrf	setDimmerLights_Clear@command
 12587  03C7  0AA2               	incf	setDimmerLights_Clear@command,f
 12588  03C8  3002               	movlw	2
 12589  03C9  31A4  2457  3180   	fcall	_setDimmerLights_Clear
 12590                           
 12591                           ;OverLoad_B1.c: 232: ;;
 12592                           ;OverLoad_B1.c: 247: Product->Data[2]=(Load->AD >> 8);
 12593  03CC  0020               	movlb	0	; select bank0
 12594  03CD  086E               	movf	_Load,w
 12595  03CE  3E2C               	addlw	44
 12596  03CF  0086               	movwf	6
 12597  03D0  3002               	movlw	2	; select bank4/5
 12598  03D1  0087               	movwf	7
 12599  03D2  3F40               	moviw [0]fsr1
 12600  03D3  00AD               	movwf	??_Load_Main
 12601  03D4  3F41               	moviw [1]fsr1
 12602  03D5  00AE               	movwf	??_Load_Main+1
 12603  03D6  082E               	movf	??_Load_Main+1,w
 12604  03D7  00AF               	movwf	??_Load_Main+2
 12605  03D8  086F               	movf	_Product,w
 12606  03D9  3E02               	addlw	2
 12607  03DA  0086               	movwf	6
 12608  03DB  3001               	movlw	1	; select bank2/3
 12609  03DC  0087               	movwf	7
 12610  03DD  082F               	movf	??_Load_Main+2,w
 12611  03DE  0081               	movwf	1
 12612                           
 12613                           ;OverLoad_B1.c: 248: Product->Data[3]=Load->AD;
 12614  03DF  086E               	movf	_Load,w
 12615  03E0  3E2C               	addlw	44
 12616  03E1  0086               	movwf	6
 12617  03E2  3002               	movlw	2	; select bank4/5
 12618  03E3  0087               	movwf	7
 12619  03E4  0801               	movf	1,w
 12620  03E5  00AD               	movwf	??_Load_Main
 12621  03E6  086F               	movf	_Product,w
 12622  03E7  3E03               	addlw	3
 12623  03E8  0086               	movwf	6
 12624  03E9  3001               	movlw	1	; select bank2/3
 12625  03EA  0087               	movwf	7
 12626  03EB  082D               	movf	??_Load_Main,w
 12627  03EC  0081               	movwf	1
 12628                           
 12629                           ;OverLoad_B1.c: 253: Product->Data[8]=Load->NumberCount;
 12630  03ED  086E               	movf	_Load,w
 12631  03EE  3E3F               	addlw	63
 12632  03EF  0086               	movwf	6
 12633  03F0  3002               	movlw	2	; select bank4/5
 12634  03F1  0087               	movwf	7
 12635  03F2  0801               	movf	1,w
 12636  03F3  00AD               	movwf	??_Load_Main
 12637  03F4  086F               	movf	_Product,w
 12638  03F5  3E08               	addlw	8
 12639  03F6  0086               	movwf	6
 12640  03F7  3001               	movlw	1	; select bank2/3
 12641  03F8  0087               	movwf	7
 12642  03F9  082D               	movf	??_Load_Main,w
 12643  03FA  0081               	movwf	1
 12644                           
 12645                           ;OverLoad_B1.c: 254: Product->Data[10]=Load->TotalLoad;
 12646  03FB  086E               	movf	_Load,w
 12647  03FC  3E06               	addlw	6
 12648  03FD  0086               	movwf	6
 12649  03FE  3002               	movlw	2	; select bank4/5
 12650  03FF  0087               	movwf	7
 12651  0400  0801               	movf	1,w
 12652  0401  00AD               	movwf	??_Load_Main
 12653  0402  086F               	movf	_Product,w
 12654  0403  3E0A               	addlw	10
 12655  0404  0086               	movwf	6
 12656  0405  3001               	movlw	1	; select bank2/3
 12657  0406  0087               	movwf	7
 12658  0407  082D               	movf	??_Load_Main,w
 12659  0408  0081               	movwf	1
 12660                           
 12661                           ;OverLoad_B1.c: 255: Product->Data[16]=(Load->JudgeValue >> 8);
 12662  0409  086E               	movf	_Load,w
 12663  040A  3E36               	addlw	54
 12664  040B  0086               	movwf	6
 12665  040C  3002               	movlw	2	; select bank4/5
 12666  040D  0087               	movwf	7
 12667  040E  3F40               	moviw [0]fsr1
 12668  040F  00AD               	movwf	??_Load_Main
 12669  0410  3F41               	moviw [1]fsr1
 12670  0411  00AE               	movwf	??_Load_Main+1
 12671  0412  082E               	movf	??_Load_Main+1,w
 12672  0413  00AF               	movwf	??_Load_Main+2
 12673  0414  086F               	movf	_Product,w
 12674  0415  3E10               	addlw	16
 12675  0416  0086               	movwf	6
 12676  0417  3001               	movlw	1	; select bank2/3
 12677  0418  0087               	movwf	7
 12678  0419  082F               	movf	??_Load_Main+2,w
 12679  041A  0081               	movwf	1
 12680                           
 12681                           ;OverLoad_B1.c: 256: Product->Data[17]=Load->JudgeValue;
 12682  041B  086E               	movf	_Load,w
 12683  041C  3E36               	addlw	54
 12684  041D  0086               	movwf	6
 12685  041E  3002               	movlw	2	; select bank4/5
 12686  041F  0087               	movwf	7
 12687  0420  0801               	movf	1,w
 12688  0421  00AD               	movwf	??_Load_Main
 12689  0422  086F               	movf	_Product,w
 12690  0423  3E11               	addlw	17
 12691  0424  0086               	movwf	6
 12692  0425  3001               	movlw	1	; select bank2/3
 12693  0426  0087               	movwf	7
 12694  0427  082D               	movf	??_Load_Main,w
 12695  0428  0081               	movwf	1
 12696                           
 12697                           ;OverLoad_B1.c: 257: Product->Data[18]=Load->ErrorStatus;
 12698  0429  086E               	movf	_Load,w
 12699  042A  3E05               	addlw	5
 12700  042B  0086               	movwf	6
 12701  042C  3002               	movlw	2	; select bank4/5
 12702  042D  0087               	movwf	7
 12703  042E  0801               	movf	1,w
 12704  042F  00AD               	movwf	??_Load_Main
 12705  0430  086F               	movf	_Product,w
 12706  0431  3E12               	addlw	18
 12707  0432  0086               	movwf	6
 12708  0433  3001               	movlw	1	; select bank2/3
 12709  0434  0087               	movwf	7
 12710  0435  082D               	movf	??_Load_Main,w
 12711  0436  0081               	movwf	1
 12712                           
 12713                           ;OverLoad_B1.c: 258: Product->Data[19]=Load->Count;
 12714  0437  086E               	movf	_Load,w
 12715  0438  3E3A               	addlw	58
 12716  0439  0086               	movwf	6
 12717  043A  3002               	movlw	2	; select bank4/5
 12718  043B  0087               	movwf	7
 12719  043C  0801               	movf	1,w
 12720  043D  00AD               	movwf	??_Load_Main
 12721  043E  086F               	movf	_Product,w
 12722  043F  3E13               	addlw	19
 12723  0440  0086               	movwf	6
 12724  0441  3001               	movlw	1	; select bank2/3
 12725  0442  0087               	movwf	7
 12726  0443  082D               	movf	??_Load_Main,w
 12727  0444  0081               	movwf	1
 12728  0445  0008               	return
 12729  0446                     __end_of_Load_Main:	
 12730                           
 12731                           	psect	text61
 12732  1BB5                     __ptext61:	
 12733 ;; *************** function _setLoad_Exceptions *****************
 12734 ;; Defined at:
 12735 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;  command         1    wreg     unsigned char 
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;  command         1   12[BANK0 ] unsigned char 
 12740 ;; Return value:  Size  Location     Type
 12741 ;;		None               void
 12742 ;; Registers used:
 12743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;Total ram usage:        2 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    8
 12756 ;; This function calls:
 12757 ;;		_DimmerLights_Exceptions
 12758 ;;		_setLED
 12759 ;;		_setRF_Enable
 12760 ;;		_setSw_Enable
 12761 ;; This function is called by:
 12762 ;;		_Load_Main
 12763 ;; This function uses a non-reentrant model
 12764 ;;
 12765                           
 12766                           
 12767                           ;psect for function _setLoad_Exceptions
 12768  1BB5                     _setLoad_Exceptions:	
 12769                           
 12770                           ;incstack = 0
 12771                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12772                           ;setLoad_Exceptions@command stored from wreg
 12773  1BB5  0020               	movlb	0	; select bank0
 12774  1BB6  00AC               	movwf	setLoad_Exceptions@command
 12775                           
 12776                           ;OverLoad_B1.c: 268: Load->ERROR=command;
 12777  1BB7  086E               	movf	_Load,w
 12778  1BB8  0086               	movwf	6
 12779  1BB9  3002               	movlw	2	; select bank4/5
 12780  1BBA  0087               	movwf	7
 12781  1BBB  082C               	movf	setLoad_Exceptions@command,w
 12782  1BBC  1281               	bcf	1,5
 12783  1BBD  1D03               	skipz
 12784  1BBE  1681               	bsf	1,5
 12785                           
 12786                           ;OverLoad_B1.c: 269: Load->Safe=(~command) & 0x01;
 12787  1BBF  092C               	comf	setLoad_Exceptions@command,w
 12788  1BC0  3901               	andlw	1
 12789  1BC1  00AB               	movwf	??_setLoad_Exceptions
 12790  1BC2  086E               	movf	_Load,w
 12791  1BC3  0086               	movwf	6
 12792  1BC4  3002               	movlw	2	; select bank4/5
 12793  1BC5  0087               	movwf	7
 12794  1BC6  0DAB               	rlf	??_setLoad_Exceptions,f
 12795  1BC7  0DAB               	rlf	??_setLoad_Exceptions,f
 12796  1BC8  0DAB               	rlf	??_setLoad_Exceptions,f
 12797  1BC9  0801               	movf	1,w
 12798  1BCA  062B               	xorwf	??_setLoad_Exceptions,w
 12799  1BCB  39F7               	andlw	-9
 12800  1BCC  062B               	xorwf	??_setLoad_Exceptions,w
 12801  1BCD  0081               	movwf	1
 12802                           
 12803                           ;OverLoad_B1.c: 270: Load->ErrorStatus=command;
 12804  1BCE  082C               	movf	setLoad_Exceptions@command,w
 12805  1BCF  00AB               	movwf	??_setLoad_Exceptions
 12806  1BD0  086E               	movf	_Load,w
 12807  1BD1  3E05               	addlw	5
 12808  1BD2  0086               	movwf	6
 12809  1BD3  3002               	movlw	2	; select bank4/5
 12810  1BD4  0087               	movwf	7
 12811  1BD5  082B               	movf	??_setLoad_Exceptions,w
 12812  1BD6  0081               	movwf	1
 12813                           
 12814                           ;OverLoad_B1.c: 272: if(command)
 12815  1BD7  082C               	movf	setLoad_Exceptions@command,w
 12816  1BD8  1903               	btfsc	3,2
 12817  1BD9  2BDE               	goto	l1949
 12818                           
 12819                           ;OverLoad_B1.c: 273: {
 12820                           ;OverLoad_B1.c: 274: DimmerLights_Exceptions(2);
 12821  1BDA  3002               	movlw	2
 12822  1BDB  319F  2730  319B   	fcall	_DimmerLights_Exceptions
 12823  1BDE                     l1949:	
 12824                           
 12825                           ;OverLoad_B1.c: 278: }
 12826                           ;OverLoad_B1.c: 279: setLED(99,command+10);
 12827  1BDE  0020               	movlb	0	; select bank0
 12828  1BDF  082C               	movf	setLoad_Exceptions@command,w
 12829  1BE0  3E0A               	addlw	10
 12830  1BE1  00AB               	movwf	??_setLoad_Exceptions
 12831  1BE2  082B               	movf	??_setLoad_Exceptions,w
 12832  1BE3  00A2               	movwf	setLED@command
 12833  1BE4  3063               	movlw	99
 12834  1BE5  3188  2002  319B   	fcall	_setLED
 12835                           
 12836                           ;OverLoad_B1.c: 281: setSw_Enable((~command) & 0x01);
 12837  1BE8  0020               	movlb	0	; select bank0
 12838  1BE9  092C               	comf	setLoad_Exceptions@command,w
 12839  1BEA  3901               	andlw	1
 12840  1BEB  31A6  266A  319B   	fcall	_setSw_Enable
 12841                           
 12842                           ;OverLoad_B1.c: 283: setRF_Enable(1,(~command) & 0x01);
 12843  1BEE  0020               	movlb	0	; select bank0
 12844  1BEF  092C               	comf	setLoad_Exceptions@command,w
 12845  1BF0  3901               	andlw	1
 12846  1BF1  00AB               	movwf	??_setLoad_Exceptions
 12847  1BF2  082B               	movf	??_setLoad_Exceptions,w
 12848  1BF3  00A2               	movwf	setRF_Enable@command
 12849  1BF4  3001               	movlw	1
 12850  1BF5  3198  2025         	fcall	_setRF_Enable
 12851  1BF7  0008               	return
 12852  1BF8                     __end_of_setLoad_Exceptions:	
 12853                           
 12854                           	psect	text62
 12855  266A                     __ptext62:	
 12856 ;; *************** function _setSw_Enable *****************
 12857 ;; Defined at:
 12858 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  command         1    wreg     unsigned char 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;  command         1    2[BANK0 ] unsigned char 
 12863 ;; Return value:  Size  Location     Type
 12864 ;;		None               void
 12865 ;; Registers used:
 12866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;Total ram usage:        1 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    5
 12879 ;; This function calls:
 12880 ;;		_SwPointSelect
 12881 ;; This function is called by:
 12882 ;;		_MainT
 12883 ;;		_setLoad_Exceptions
 12884 ;;		_setOverTemp_Exceptions
 12885 ;;		_setPowerFault_Exceptions
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _setSw_Enable
 12891  266A                     _setSw_Enable:	
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12895                           ;setSw_Enable@command stored from wreg
 12896  266A  0020               	movlb	0	; select bank0
 12897  266B  00A2               	movwf	setSw_Enable@command
 12898                           
 12899                           ;Switch_B1.c: 90: SwPointSelect(1);
 12900  266C  3001               	movlw	1
 12901  266D  31A4  24DE  31A6   	fcall	_SwPointSelect
 12902                           
 12903                           ;Switch_B1.c: 91: Sw->Enable=command;
 12904  2670  0020               	movlb	0	; select bank0
 12905  2671  086D               	movf	_Sw,w
 12906  2672  0086               	movwf	6
 12907  2673  3001               	movlw	1	; select bank2/3
 12908  2674  0087               	movwf	7
 12909  2675  0822               	movf	setSw_Enable@command,w
 12910  2676  1001               	bcf	1,0
 12911  2677  1D03               	skipz
 12912  2678  1401               	bsf	1,0
 12913                           
 12914                           ;Switch_B1.c: 95: SwPointSelect(2);
 12915  2679  3002               	movlw	2
 12916  267A  31A4  24DE         	fcall	_SwPointSelect
 12917                           
 12918                           ;Switch_B1.c: 96: Sw->Enable=command;
 12919  267C  0020               	movlb	0	; select bank0
 12920  267D  086D               	movf	_Sw,w
 12921  267E  0086               	movwf	6
 12922  267F  3001               	movlw	1	; select bank2/3
 12923  2680  0087               	movwf	7
 12924  2681  0822               	movf	setSw_Enable@command,w
 12925  2682  1001               	bcf	1,0
 12926  2683  1D03               	skipz
 12927  2684  1401               	bsf	1,0
 12928  2685  0008               	return
 12929  2686                     __end_of_setSw_Enable:	
 12930                           
 12931                           	psect	text63
 12932  1825                     __ptext63:	
 12933 ;; *************** function _setRF_Enable *****************
 12934 ;; Defined at:
 12935 ;;		line 185 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12936 ;; Parameters:    Size  Location     Type
 12937 ;;  rf              1    wreg     unsigned char 
 12938 ;;  command         1    2[BANK0 ] unsigned char 
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;  rf              1    3[BANK0 ] unsigned char 
 12941 ;; Return value:  Size  Location     Type
 12942 ;;		None               void
 12943 ;; Registers used:
 12944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12950 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;Total ram usage:        2 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    5
 12957 ;; This function calls:
 12958 ;;		_RfPointSelect
 12959 ;;		_setINT_GO
 12960 ;; This function is called by:
 12961 ;;		_MainT
 12962 ;;		_setLoad_Exceptions
 12963 ;;		_setOverTemp_Exceptions
 12964 ;;		_setPowerFault_Exceptions
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _setRF_Enable
 12970  1825                     _setRF_Enable:	
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12974                           ;setRF_Enable@rf stored from wreg
 12975  1825  0020               	movlb	0	; select bank0
 12976  1826  00A3               	movwf	setRF_Enable@rf
 12977                           
 12978                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
 12979  1827  0823               	movf	setRF_Enable@rf,w
 12980  1828  31A3  232F  3198   	fcall	_RfPointSelect
 12981                           
 12982                           ;RF_Control_B1.c: 188: RF->Enable=command;
 12983  182B  087C               	movf	_RF,w
 12984  182C  0086               	movwf	6
 12985  182D  0187               	clrf	7
 12986  182E  0020               	movlb	0	; select bank0
 12987  182F  0822               	movf	setRF_Enable@command,w
 12988  1830  1001               	bcf	1,0
 12989  1831  1D03               	skipz
 12990  1832  1401               	bsf	1,0
 12991                           
 12992                           ;RF_Control_B1.c: 189: RF->Learn=0;
 12993  1833  087C               	movf	_RF,w
 12994  1834  0086               	movwf	6
 12995  1835  0187               	clrf	7
 12996  1836  1301               	bcf	1,6
 12997                           
 12998                           ;RF_Control_B1.c: 190: RF->TransceiveGO=0;
 12999  1837  087C               	movf	_RF,w
 13000  1838  0086               	movwf	6
 13001  1839  0187               	clrf	7
 13002  183A  1101               	bcf	1,2
 13003                           
 13004                           ;RF_Control_B1.c: 191: RF->RxStatus=0;
 13005  183B  087C               	movf	_RF,w
 13006  183C  0086               	movwf	6
 13007  183D  0187               	clrf	7
 13008  183E  1181               	bcf	1,3
 13009                           
 13010                           ;RF_Control_B1.c: 192: RF->ReceiveGO=0;
 13011  183F  087C               	movf	_RF,w
 13012  1840  0086               	movwf	6
 13013  1841  0187               	clrf	7
 13014  1842  1081               	bcf	1,1
 13015                           
 13016                           ;RF_Control_B1.c: 193: RF->DebounceTime=0;
 13017  1843  0A7C               	incf	_RF,w
 13018  1844  0086               	movwf	6
 13019  1845  0187               	clrf	7
 13020  1846  0181               	clrf	1
 13021                           
 13022                           ;RF_Control_B1.c: 194: RF->Debounce=0;
 13023  1847  087C               	movf	_RF,w
 13024  1848  0086               	movwf	6
 13025  1849  0187               	clrf	7
 13026  184A  1281               	bcf	1,5
 13027                           
 13028                           ;RF_Control_B1.c: 195: setINT_GO(0);
 13029  184B  3000               	movlw	0
 13030  184C  31A3  2306         	fcall	_setINT_GO
 13031  184E  0008               	return
 13032  184F                     __end_of_setRF_Enable:	
 13033                           
 13034                           	psect	text64
 13035  2306                     __ptext64:	
 13036 ;; *************** function _setINT_GO *****************
 13037 ;; Defined at:
 13038 ;;		line 299 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;  command         1    wreg     unsigned char 
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  command         1    0[BANK0 ] unsigned char 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;		None               void
 13045 ;; Registers used:
 13046 ;;		wreg
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;Total ram usage:        1 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    4
 13059 ;; This function calls:
 13060 ;;		Nothing
 13061 ;; This function is called by:
 13062 ;;		_setRF_Main
 13063 ;;		_setRF_Enable
 13064 ;;		_RF_RxDisable
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function _setINT_GO
 13070  2306                     _setINT_GO:	
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _setINT_GO: [wreg]
 13074                           ;setINT_GO@command stored from wreg
 13075  2306  0020               	movlb	0	; select bank0
 13076  2307  00A0               	movwf	setINT_GO@command
 13077                           
 13078                           ;MCU_B1.c: 301: INTF=0;
 13079  2308  108B               	bcf	11,1	;volatile
 13080                           
 13081                           ;MCU_B1.c: 302: INTE=command;
 13082  2309  1C20               	btfss	setINT_GO@command,0
 13083  230A  2B0D               	goto	u8610
 13084  230B  160B               	bsf	11,4	;volatile
 13085  230C  0008               	return
 13086  230D                     u8610:	
 13087  230D  120B               	bcf	11,4	;volatile
 13088  230E  0008               	return
 13089  230F                     __end_of_setINT_GO:	
 13090                           
 13091                           	psect	text65
 13092  1F30                     __ptext65:	
 13093 ;; *************** function _DimmerLights_Exceptions *****************
 13094 ;; Defined at:
 13095 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13096 ;; Parameters:    Size  Location     Type
 13097 ;;  status          1    wreg     unsigned char 
 13098 ;; Auto vars:     Size  Location     Type
 13099 ;;  status          1   10[BANK0 ] unsigned char 
 13100 ;; Return value:  Size  Location     Type
 13101 ;;		None               void
 13102 ;; Registers used:
 13103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13104 ;; Tracked objects:
 13105 ;;		On entry : 0/0
 13106 ;;		On exit  : 0/0
 13107 ;;		Unchanged: 0/0
 13108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;Total ram usage:        1 bytes
 13114 ;; Hardware stack levels used:    1
 13115 ;; Hardware stack levels required when called:    7
 13116 ;; This function calls:
 13117 ;;		_getDimmerLights_StatusFlag
 13118 ;;		_setBuz
 13119 ;;		_setDimmerLights_ERROR
 13120 ;;		_setDimmerLights_TriggerERROR
 13121 ;; This function is called by:
 13122 ;;		_setLoad_Exceptions
 13123 ;;		_setOverTemp_Exceptions
 13124 ;;		_setPowerFault_Exceptions
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           
 13129                           ;psect for function _DimmerLights_Exceptions
 13130  1F30                     _DimmerLights_Exceptions:	
 13131                           
 13132                           ;incstack = 0
 13133                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13134                           ;DimmerLights_Exceptions@status stored from wreg
 13135  1F30  0020               	movlb	0	; select bank0
 13136  1F31  00AA               	movwf	DimmerLights_Exceptions@status
 13137                           
 13138                           ;Dimmer_B1.c: 248: if(status == 1)
 13139  1F32  082A               	movf	DimmerLights_Exceptions@status,w
 13140  1F33  3A01               	xorlw	1
 13141  1F34  1D03               	skipz
 13142  1F35  2F46               	goto	l9026
 13143                           
 13144                           ;Dimmer_B1.c: 249: {
 13145                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 13146  1F36  31A5  255B  319F   	fcall	_getDimmerLights_StatusFlag
 13147  1F39  3A00               	xorlw	0
 13148  1F3A  1903               	skipnz
 13149  1F3B  2F5E               	goto	l9032
 13150                           
 13151                           ;Dimmer_B1.c: 251: {
 13152                           ;Dimmer_B1.c: 252: setBuz(10,300);
 13153  1F3C  302C               	movlw	44
 13154  1F3D  0020               	movlb	0	; select bank0
 13155  1F3E  00A6               	movwf	setBuz@time
 13156  1F3F  3001               	movlw	1
 13157  1F40  00A7               	movwf	setBuz@time+1
 13158  1F41  300A               	movlw	10
 13159  1F42  3192  220A  319F   	fcall	_setBuz
 13160  1F45  2F5E               	goto	l9032
 13161  1F46                     l9026:	
 13162                           ;Dimmer_B1.c: 264: }
 13163                           
 13164                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(2);
 13165                           
 13166                           ;Dimmer_B1.c: 253: }
 13167                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 13168                           
 13169                           
 13170                           ;Dimmer_B1.c: 265: else if(status == 2)
 13171  1F46  0020               	movlb	0	; select bank0
 13172  1F47  082A               	movf	DimmerLights_Exceptions@status,w
 13173  1F48  3A02               	xorlw	2
 13174  1F49  1D03               	skipz
 13175  1F4A  2F59               	goto	l9030
 13176                           
 13177                           ;Dimmer_B1.c: 266: {
 13178                           ;Dimmer_B1.c: 267: setBuz(5,300);
 13179  1F4B  302C               	movlw	44
 13180  1F4C  00A6               	movwf	setBuz@time
 13181  1F4D  3001               	movlw	1
 13182  1F4E  00A7               	movwf	setBuz@time+1
 13183  1F4F  3005               	movlw	5
 13184  1F50  3192  220A  319F   	fcall	_setBuz
 13185                           
 13186                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 13187  1F53  0021               	movlb	1	; select bank1
 13188  1F54  0A39               	incf	_Dimmer^(0+128),w
 13189  1F55  0086               	movwf	6
 13190  1F56  0187               	clrf	7
 13191  1F57  0801               	movf	1,w
 13192  1F58  2F63               	goto	L13
 13193  1F59                     l9030:	
 13194                           ;Dimmer_B1.c: 269: }
 13195                           
 13196                           
 13197                           ;Dimmer_B1.c: 270: else if(status == 3)
 13198  1F59  0020               	movlb	0	; select bank0
 13199  1F5A  082A               	movf	DimmerLights_Exceptions@status,w
 13200  1F5B  3A03               	xorlw	3
 13201  1F5C  1D03               	skipz
 13202  1F5D  2F66               	goto	l922
 13203  1F5E                     l9032:	
 13204                           
 13205                           ;Dimmer_B1.c: 271: {
 13206                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 13207  1F5E  3001               	movlw	1
 13208  1F5F  319D  255D  319F   	fcall	_setDimmerLights_ERROR
 13209                           
 13210                           ;Dimmer_B1.c: 276: setDimmerLights_ERROR(2);
 13211  1F62  3002               	movlw	2
 13212  1F63                     L13:	
 13213  1F63  319D  255D  319F   	fcall	_setDimmerLights_ERROR
 13214  1F66                     l922:	
 13215                           
 13216                           ;Dimmer_B1.c: 281: }
 13217                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 13218  1F66  0020               	movlb	0	; select bank0
 13219  1F67  01A2               	clrf	setDimmerLights_TriggerERROR@command
 13220  1F68  3001               	movlw	1
 13221  1F69  3198  204F  319F   	fcall	_setDimmerLights_TriggerERROR
 13222                           
 13223                           ;Dimmer_B1.c: 287: setDimmerLights_TriggerERROR(2,0);
 13224  1F6C  0020               	movlb	0	; select bank0
 13225  1F6D  01A2               	clrf	setDimmerLights_TriggerERROR@command
 13226  1F6E  3002               	movlw	2
 13227  1F6F  3198  204F  319F   	fcall	_setDimmerLights_TriggerERROR
 13228                           
 13229                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 13230  1F72  0021               	movlb	1	; select bank1
 13231  1F73  086C               	movf	_TMain^(0+128),w
 13232  1F74  3E03               	addlw	3
 13233  1F75  0086               	movwf	6
 13234  1F76  3001               	movlw	1	; select bank2/3
 13235  1F77  0087               	movwf	7
 13236  1F78  1801               	btfsc	1,0
 13237  1F79  0008               	return
 13238                           
 13239                           ;Dimmer_B1.c: 294: {
 13240                           ;Dimmer_B1.c: 295: TMain->i=0;
 13241  1F7A  086C               	movf	_TMain^(0+128),w
 13242  1F7B  3E0E               	addlw	14
 13243  1F7C  0086               	movwf	6
 13244  1F7D  3001               	movlw	1	; select bank2/3
 13245  1F7E  0087               	movwf	7
 13246  1F7F  1001               	bcf	1,0
 13247                           
 13248                           ;Dimmer_B1.c: 296: TMain->j=0;
 13249  1F80  086C               	movf	_TMain^(0+128),w
 13250  1F81  3E0E               	addlw	14
 13251  1F82  0086               	movwf	6
 13252  1F83  3001               	movlw	1	; select bank2/3
 13253  1F84  0087               	movwf	7
 13254  1F85  1081               	bcf	1,1
 13255                           
 13256                           ;Dimmer_B1.c: 297: TMain->k=1;
 13257  1F86  086C               	movf	_TMain^(0+128),w
 13258  1F87  3E0E               	addlw	14
 13259  1F88  0086               	movwf	6
 13260  1F89  3001               	movlw	1	; select bank2/3
 13261  1F8A  0087               	movwf	7
 13262  1F8B  1501               	bsf	1,2
 13263                           
 13264                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 13265  1F8C  086C               	movf	_TMain^(0+128),w
 13266  1F8D  3E08               	addlw	8
 13267  1F8E  0086               	movwf	6
 13268  1F8F  3001               	movlw	1	; select bank2/3
 13269  1F90  0087               	movwf	7
 13270  1F91  3000               	movlw	0
 13271  1F92  3FC0               	movwi [0]fsr1
 13272  1F93  3FC1               	movwi [1]fsr1
 13273  1F94  0008               	return
 13274  1F95                     __end_of_DimmerLights_Exceptions:	
 13275                           
 13276                           	psect	text66
 13277  184F                     __ptext66:	
 13278 ;; *************** function _setDimmerLights_TriggerERROR *****************
 13279 ;; Defined at:
 13280 ;;		line 320 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;  lights          1    wreg     unsigned char 
 13283 ;;  command         1    2[BANK0 ] unsigned char 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  lights          1    3[BANK0 ] unsigned char 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;		None               void
 13288 ;; Registers used:
 13289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13290 ;; Tracked objects:
 13291 ;;		On entry : 0/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;Total ram usage:        2 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:    5
 13302 ;; This function calls:
 13303 ;;		_DimmerLightsPointSelect
 13304 ;; This function is called by:
 13305 ;;		_DimmerLights_Exceptions
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function _setDimmerLights_TriggerERROR
 13311  184F                     _setDimmerLights_TriggerERROR:	
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13315                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 13316  184F  0020               	movlb	0	; select bank0
 13317  1850  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 13318                           
 13319                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 13320  1851  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 13321  1852  31A4  24B8         	fcall	_DimmerLightsPointSelect
 13322                           
 13323                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 13324  1854  0020               	movlb	0	; select bank0
 13325  1855  086C               	movf	_DimmerLights,w
 13326  1856  3E09               	addlw	9
 13327  1857  0086               	movwf	6
 13328  1858  3001               	movlw	1	; select bank2/3
 13329  1859  0087               	movwf	7
 13330  185A  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13331  185B  1081               	bcf	1,1
 13332  185C  1D03               	skipz
 13333  185D  1481               	bsf	1,1
 13334                           
 13335                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 13336  185E  086C               	movf	_DimmerLights,w
 13337  185F  3E09               	addlw	9
 13338  1860  0086               	movwf	6
 13339  1861  3001               	movlw	1	; select bank2/3
 13340  1862  0087               	movwf	7
 13341  1863  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13342  1864  1001               	bcf	1,0
 13343  1865  1D03               	skipz
 13344  1866  1401               	bsf	1,0
 13345                           
 13346                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 13347  1867  086C               	movf	_DimmerLights,w
 13348  1868  3E09               	addlw	9
 13349  1869  0086               	movwf	6
 13350  186A  3001               	movlw	1	; select bank2/3
 13351  186B  0087               	movwf	7
 13352  186C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13353  186D  1181               	bcf	1,3
 13354  186E  1D03               	skipz
 13355  186F  1581               	bsf	1,3
 13356                           
 13357                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13358  1870  086C               	movf	_DimmerLights,w
 13359  1871  3E09               	addlw	9
 13360  1872  0086               	movwf	6
 13361  1873  3001               	movlw	1	; select bank2/3
 13362  1874  0087               	movwf	7
 13363  1875  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13364  1876  1101               	bcf	1,2
 13365  1877  1D03               	skipz
 13366  1878  1501               	bsf	1,2
 13367  1879  0008               	return
 13368  187A                     __end_of_setDimmerLights_TriggerERROR:	
 13369                           
 13370                           	psect	text67
 13371  1D5D                     __ptext67:	
 13372 ;; *************** function _setDimmerLights_ERROR *****************
 13373 ;; Defined at:
 13374 ;;		line 302 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13375 ;; Parameters:    Size  Location     Type
 13376 ;;  lights          1    wreg     unsigned char 
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;  lights          1    5[BANK0 ] unsigned char 
 13379 ;; Return value:  Size  Location     Type
 13380 ;;		None               void
 13381 ;; Registers used:
 13382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;Total ram usage:        2 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    6
 13395 ;; This function calls:
 13396 ;;		_DimmerLightsPointSelect
 13397 ;;		_setLED
 13398 ;;		_setLoad_StatusOff
 13399 ;;		_setRFSW_Status
 13400 ;;		_setSw_Status
 13401 ;; This function is called by:
 13402 ;;		_DimmerLights_Exceptions
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _setDimmerLights_ERROR
 13408  1D5D                     _setDimmerLights_ERROR:	
 13409                           
 13410                           ;incstack = 0
 13411                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13412                           ;setDimmerLights_ERROR@lights stored from wreg
 13413  1D5D  0020               	movlb	0	; select bank0
 13414  1D5E  00A5               	movwf	setDimmerLights_ERROR@lights
 13415                           
 13416                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13417  1D5F  0825               	movf	setDimmerLights_ERROR@lights,w
 13418  1D60  31A4  24B8  319D   	fcall	_DimmerLightsPointSelect
 13419                           
 13420                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13421  1D63  0020               	movlb	0	; select bank0
 13422  1D64  086C               	movf	_DimmerLights,w
 13423  1D65  0086               	movwf	6
 13424  1D66  3001               	movlw	1	; select bank2/3
 13425  1D67  0087               	movwf	7
 13426  1D68  1E81               	btfss	1,5
 13427  1D69  0008               	return
 13428                           
 13429                           ;Dimmer_B1.c: 306: {
 13430                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13431  1D6A  086C               	movf	_DimmerLights,w
 13432  1D6B  0086               	movwf	6
 13433  1D6C  3001               	movlw	1	; select bank2/3
 13434  1D6D  0087               	movwf	7
 13435  1D6E  1081               	bcf	1,1
 13436                           
 13437                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13438  1D6F  086C               	movf	_DimmerLights,w
 13439  1D70  0086               	movwf	6
 13440  1D71  3001               	movlw	1	; select bank2/3
 13441  1D72  0087               	movwf	7
 13442  1D73  1181               	bcf	1,3
 13443                           
 13444                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13445  1D74  086C               	movf	_DimmerLights,w
 13446  1D75  0086               	movwf	6
 13447  1D76  3001               	movlw	1	; select bank2/3
 13448  1D77  0087               	movwf	7
 13449  1D78  1201               	bcf	1,4
 13450                           
 13451                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13452  1D79  086C               	movf	_DimmerLights,w
 13453  1D7A  0086               	movwf	6
 13454  1D7B  3001               	movlw	1	; select bank2/3
 13455  1D7C  0087               	movwf	7
 13456  1D7D  1301               	bcf	1,6
 13457                           
 13458                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13459  1D7E  3003               	movlw	3
 13460  1D7F  00A4               	movwf	??_setDimmerLights_ERROR
 13461  1D80  086C               	movf	_DimmerLights,w
 13462  1D81  3E02               	addlw	2
 13463  1D82  0086               	movwf	6
 13464  1D83  3001               	movlw	1	; select bank2/3
 13465  1D84  0087               	movwf	7
 13466  1D85  0824               	movf	??_setDimmerLights_ERROR,w
 13467  1D86  0081               	movwf	1
 13468                           
 13469                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13470  1D87  086C               	movf	_DimmerLights,w
 13471  1D88  3E06               	addlw	6
 13472  1D89  0086               	movwf	6
 13473  1D8A  3001               	movlw	1	; select bank2/3
 13474  1D8B  0087               	movwf	7
 13475  1D8C  0801               	movf	1,w
 13476  1D8D  00A4               	movwf	??_setDimmerLights_ERROR
 13477  1D8E  086C               	movf	_DimmerLights,w
 13478  1D8F  3E04               	addlw	4
 13479  1D90  0086               	movwf	6
 13480  1D91  3001               	movlw	1	; select bank2/3
 13481  1D92  0087               	movwf	7
 13482  1D93  0824               	movf	??_setDimmerLights_ERROR,w
 13483  1D94  0081               	movwf	1
 13484                           
 13485                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13486  1D95  0021               	movlb	1	; select bank1
 13487  1D96  0839               	movf	_Dimmer^(0+128),w
 13488  1D97  0086               	movwf	6
 13489  1D98  0187               	clrf	7
 13490  1D99  1401               	bsf	1,0
 13491                           
 13492                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13493  1D9A  0020               	movlb	0	; select bank0
 13494  1D9B  01A0               	clrf	setLoad_StatusOff@command
 13495  1D9C  0AA0               	incf	setLoad_StatusOff@command,f
 13496  1D9D  0825               	movf	setDimmerLights_ERROR@lights,w
 13497  1D9E  3199  2136  319D   	fcall	_setLoad_StatusOff
 13498                           
 13499                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13500  1DA1  0020               	movlb	0	; select bank0
 13501  1DA2  01A2               	clrf	setLED@command
 13502  1DA3  0AA2               	incf	setLED@command,f
 13503  1DA4  0825               	movf	setDimmerLights_ERROR@lights,w
 13504  1DA5  3188  2002  319D   	fcall	_setLED
 13505                           
 13506                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13507  1DA8  0020               	movlb	0	; select bank0
 13508  1DA9  01A2               	clrf	setSw_Status@command
 13509  1DAA  0825               	movf	setDimmerLights_ERROR@lights,w
 13510  1DAB  31A4  2418  319D   	fcall	_setSw_Status
 13511                           
 13512                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13513  1DAE  0020               	movlb	0	; select bank0
 13514  1DAF  01A2               	clrf	setRFSW_Status@command
 13515  1DB0  0825               	movf	setDimmerLights_ERROR@lights,w
 13516  1DB1  31A4  2409         	fcall	_setRFSW_Status
 13517  1DB3  0008               	return
 13518  1DB4                     __end_of_setDimmerLights_ERROR:	
 13519                           
 13520                           	psect	text68
 13521  2457                     __ptext68:	
 13522 ;; *************** function _setDimmerLights_Clear *****************
 13523 ;; Defined at:
 13524 ;;		line 456 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13525 ;; Parameters:    Size  Location     Type
 13526 ;;  lights          1    wreg     unsigned char 
 13527 ;;  command         1    2[BANK0 ] unsigned char 
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;  lights          1    3[BANK0 ] unsigned char 
 13530 ;; Return value:  Size  Location     Type
 13531 ;;		None               void
 13532 ;; Registers used:
 13533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13539 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13543 ;;Total ram usage:        2 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    5
 13546 ;; This function calls:
 13547 ;;		_DimmerLightsPointSelect
 13548 ;; This function is called by:
 13549 ;;		_Load_Main
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _setDimmerLights_Clear
 13555  2457                     _setDimmerLights_Clear:	
 13556                           
 13557                           ;incstack = 0
 13558                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13559                           ;setDimmerLights_Clear@lights stored from wreg
 13560  2457  0020               	movlb	0	; select bank0
 13561  2458  00A3               	movwf	setDimmerLights_Clear@lights
 13562                           
 13563                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13564  2459  0823               	movf	setDimmerLights_Clear@lights,w
 13565  245A  31A4  24B8         	fcall	_DimmerLightsPointSelect
 13566                           
 13567                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13568  245C  0020               	movlb	0	; select bank0
 13569  245D  086C               	movf	_DimmerLights,w
 13570  245E  3E0C               	addlw	12
 13571  245F  0086               	movwf	6
 13572  2460  3001               	movlw	1	; select bank2/3
 13573  2461  0087               	movwf	7
 13574  2462  0822               	movf	setDimmerLights_Clear@command,w
 13575  2463  1001               	bcf	1,0
 13576  2464  1D03               	skipz
 13577  2465  1401               	bsf	1,0
 13578  2466  0008               	return
 13579  2467                     __end_of_setDimmerLights_Clear:	
 13580                           
 13581                           	psect	text69
 13582  22C0                     __ptext69:	
 13583 ;; *************** function _getTemp_Safe *****************
 13584 ;; Defined at:
 13585 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;		None
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;		None
 13590 ;; Return value:  Size  Location     Type
 13591 ;;                  1    wreg      unsigned char 
 13592 ;; Registers used:
 13593 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13594 ;; Tracked objects:
 13595 ;;		On entry : 0/0
 13596 ;;		On exit  : 0/0
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;Total ram usage:        0 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    4
 13606 ;; This function calls:
 13607 ;;		Nothing
 13608 ;; This function is called by:
 13609 ;;		_Load_Main
 13610 ;;		_setPowerFault_Main
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _getTemp_Safe
 13616  22C0                     _getTemp_Safe:	
 13617                           
 13618                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13619                           
 13620                           ;incstack = 0
 13621                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13622  22C0  087D               	movf	_Temp,w
 13623  22C1  0086               	movwf	6
 13624  22C2  3001               	movlw	1	; select bank2/3
 13625  22C3  0087               	movwf	7
 13626  22C4  0E01               	swapf	1,w
 13627  22C5  3901               	andlw	1
 13628  22C6  0008               	return
 13629  22C7                     __end_of_getTemp_Safe:	
 13630                           
 13631                           	psect	text70
 13632  22E5                     __ptext70:	
 13633 ;; *************** function _getPF_Safe *****************
 13634 ;; Defined at:
 13635 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;		None
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      unsigned char 
 13642 ;; Registers used:
 13643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;Total ram usage:        0 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    4
 13656 ;; This function calls:
 13657 ;;		Nothing
 13658 ;; This function is called by:
 13659 ;;		_Load_Main
 13660 ;;		_setTemp_Main
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           
 13665                           ;psect for function _getPF_Safe
 13666  22E5                     _getPF_Safe:	
 13667                           
 13668                           ;PowerFault_B1.c: 42: return PF->Safe;
 13669                           
 13670                           ;incstack = 0
 13671                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13672  22E5  087B               	movf	_PF,w
 13673  22E6  0086               	movwf	6
 13674  22E7  3001               	movlw	1	; select bank2/3
 13675  22E8  0087               	movwf	7
 13676  22E9  0C01               	rrf	1,w
 13677  22EA  0C89               	rrf	9,f
 13678  22EB  3901               	andlw	1
 13679  22EC  0008               	return
 13680  22ED                     __end_of_getPF_Safe:	
 13681                           
 13682                           	psect	text71
 13683  19FF                     __ptext71:	
 13684 ;; *************** function ___lwdiv *****************
 13685 ;; Defined at:
 13686 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  divisor         2    0[BANK0 ] unsigned int 
 13689 ;;  dividend        2    2[BANK0 ] unsigned int 
 13690 ;; Auto vars:     Size  Location     Type
 13691 ;;  quotient        2    5[BANK0 ] unsigned int 
 13692 ;;  counter         1    7[BANK0 ] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  2    0[BANK0 ] unsigned int 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13702 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;Total ram usage:        8 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    4
 13709 ;; This function calls:
 13710 ;;		Nothing
 13711 ;; This function is called by:
 13712 ;;		_Load_Main
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           
 13717                           ;psect for function ___lwdiv
 13718  19FF                     ___lwdiv:	
 13719                           
 13720                           ;incstack = 0
 13721                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13722  19FF  0020               	movlb	0	; select bank0
 13723  1A00  01A5               	clrf	___lwdiv@quotient
 13724  1A01  01A6               	clrf	___lwdiv@quotient+1
 13725  1A02  0821               	movf	___lwdiv@divisor+1,w
 13726  1A03  0420               	iorwf	___lwdiv@divisor,w
 13727  1A04  1903               	skipnz
 13728  1A05  2A2F               	goto	l7994
 13729  1A06  01A7               	clrf	___lwdiv@counter
 13730  1A07  0AA7               	incf	___lwdiv@counter,f
 13731  1A08                     l7982:	
 13732  1A08  1BA1               	btfsc	___lwdiv@divisor+1,7
 13733  1A09  2A14               	goto	l7984
 13734  1A0A  3001               	movlw	1
 13735  1A0B                     u7045:	
 13736  1A0B  35A0               	lslf	___lwdiv@divisor,f
 13737  1A0C  0DA1               	rlf	___lwdiv@divisor+1,f
 13738  1A0D  0B89               	decfsz	9,f
 13739  1A0E  2A0B               	goto	u7045
 13740  1A0F  3001               	movlw	1
 13741  1A10  00A4               	movwf	??___lwdiv
 13742  1A11  0824               	movf	??___lwdiv,w
 13743  1A12  07A7               	addwf	___lwdiv@counter,f
 13744  1A13  2A08               	goto	l7982
 13745  1A14                     l7984:	
 13746  1A14  3001               	movlw	1
 13747  1A15                     u7065:	
 13748  1A15  35A5               	lslf	___lwdiv@quotient,f
 13749  1A16  0DA6               	rlf	___lwdiv@quotient+1,f
 13750  1A17  0B89               	decfsz	9,f
 13751  1A18  2A15               	goto	u7065
 13752  1A19  0821               	movf	___lwdiv@divisor+1,w
 13753  1A1A  0223               	subwf	___lwdiv@dividend+1,w
 13754  1A1B  1D03               	skipz
 13755  1A1C  2A1F               	goto	u7075
 13756  1A1D  0820               	movf	___lwdiv@divisor,w
 13757  1A1E  0222               	subwf	___lwdiv@dividend,w
 13758  1A1F                     u7075:	
 13759  1A1F  1C03               	skipc
 13760  1A20  2A26               	goto	l7990
 13761  1A21  0820               	movf	___lwdiv@divisor,w
 13762  1A22  02A2               	subwf	___lwdiv@dividend,f
 13763  1A23  0821               	movf	___lwdiv@divisor+1,w
 13764  1A24  3BA3               	subwfb	___lwdiv@dividend+1,f
 13765  1A25  1425               	bsf	___lwdiv@quotient,0
 13766  1A26                     l7990:	
 13767  1A26  3001               	movlw	1
 13768  1A27                     u7085:	
 13769  1A27  36A1               	lsrf	___lwdiv@divisor+1,f
 13770  1A28  0CA0               	rrf	___lwdiv@divisor,f
 13771  1A29  0B89               	decfsz	9,f
 13772  1A2A  2A27               	goto	u7085
 13773  1A2B  3001               	movlw	1
 13774  1A2C  02A7               	subwf	___lwdiv@counter,f
 13775  1A2D  1D03               	btfss	3,2
 13776  1A2E  2A14               	goto	l7984
 13777  1A2F                     l7994:	
 13778  1A2F  0826               	movf	___lwdiv@quotient+1,w
 13779  1A30  01A1               	clrf	?___lwdiv+1
 13780  1A31  07A1               	addwf	?___lwdiv+1,f
 13781  1A32  0825               	movf	___lwdiv@quotient,w
 13782  1A33  01A0               	clrf	?___lwdiv
 13783  1A34  07A0               	addwf	?___lwdiv,f
 13784  1A35  0008               	return
 13785  1A36                     __end_of___lwdiv:	
 13786                           
 13787                           	psect	text72
 13788  23B9                     __ptext72:	
 13789 ;; *************** function _Load_Initialization *****************
 13790 ;; Defined at:
 13791 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13792 ;; Parameters:    Size  Location     Type
 13793 ;;		None
 13794 ;; Auto vars:     Size  Location     Type
 13795 ;;		None
 13796 ;; Return value:  Size  Location     Type
 13797 ;;		None               void
 13798 ;; Registers used:
 13799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13800 ;; Tracked objects:
 13801 ;;		On entry : 0/0
 13802 ;;		On exit  : 0/0
 13803 ;;		Unchanged: 0/0
 13804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;Total ram usage:        1 bytes
 13810 ;; Hardware stack levels used:    1
 13811 ;; Hardware stack levels required when called:    5
 13812 ;; This function calls:
 13813 ;;		_setLoad_AH_AL_Restore
 13814 ;; This function is called by:
 13815 ;;		_main
 13816 ;; This function uses a non-reentrant model
 13817 ;;
 13818                           
 13819                           
 13820                           ;psect for function _Load_Initialization
 13821  23B9                     _Load_Initialization:	
 13822                           
 13823                           ;OverLoad_B1.c: 10: Load=&Load1;
 13824                           
 13825                           ;incstack = 0
 13826                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13827  23B9  30A0               	movlw	_Load1& (0+255)
 13828  23BA  0020               	movlb	0	; select bank0
 13829  23BB  00A2               	movwf	??_Load_Initialization
 13830  23BC  0822               	movf	??_Load_Initialization,w
 13831  23BD  00EE               	movwf	_Load
 13832                           
 13833                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13834  23BE  086E               	movf	_Load,w
 13835  23BF  0086               	movwf	6
 13836  23C0  3002               	movlw	2	; select bank4/5
 13837  23C1  0087               	movwf	7
 13838  23C2  1581               	bsf	1,3
 13839                           
 13840                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13841  23C3  31A7  2744         	fcall	_setLoad_AH_AL_Restore
 13842  23C5  0008               	return
 13843  23C6                     __end_of_Load_Initialization:	
 13844                           
 13845                           	psect	text73
 13846  2744                     __ptext73:	
 13847 ;; *************** function _setLoad_AH_AL_Restore *****************
 13848 ;; Defined at:
 13849 ;;		line 348 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;		None
 13852 ;; Auto vars:     Size  Location     Type
 13853 ;;  i               1    1[BANK0 ] unsigned char 
 13854 ;; Return value:  Size  Location     Type
 13855 ;;		None               void
 13856 ;; Registers used:
 13857 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13858 ;; Tracked objects:
 13859 ;;		On entry : 0/0
 13860 ;;		On exit  : 0/0
 13861 ;;		Unchanged: 0/0
 13862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;Total ram usage:        2 bytes
 13868 ;; Hardware stack levels used:    1
 13869 ;; Hardware stack levels required when called:    4
 13870 ;; This function calls:
 13871 ;;		Nothing
 13872 ;; This function is called by:
 13873 ;;		_Load_Initialization
 13874 ;;		_Load_Main
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           
 13879                           ;psect for function _setLoad_AH_AL_Restore
 13880  2744                     _setLoad_AH_AL_Restore:	
 13881                           
 13882                           ;OverLoad_B1.c: 350: char i;
 13883                           ;OverLoad_B1.c: 351: for(i=0 ; i<5 ;i++)
 13884                           
 13885                           ;incstack = 0
 13886                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13887  2744  0020               	movlb	0	; select bank0
 13888  2745  01A1               	clrf	setLoad_AH_AL_Restore@i
 13889  2746                     L14:	
 13890  2746  3005               	movlw	5
 13891  2747  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13892  2748  1803               	btfsc	3,0
 13893  2749  0008               	return
 13894                           
 13895                           ;OverLoad_B1.c: 352: {
 13896                           ;OverLoad_B1.c: 353: Load->AH[i]=0;
 13897  274A  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13898  274B  3E08               	addlw	8
 13899  274C  076E               	addwf	_Load,w
 13900  274D  00A0               	movwf	??_setLoad_AH_AL_Restore
 13901  274E  0820               	movf	??_setLoad_AH_AL_Restore,w
 13902  274F  0086               	movwf	6
 13903  2750  3002               	movlw	2	; select bank4/5
 13904  2751  0087               	movwf	7
 13905  2752  3000               	movlw	0
 13906  2753  3FC0               	movwi [0]fsr1
 13907  2754  3FC1               	movwi [1]fsr1
 13908                           
 13909                           ;OverLoad_B1.c: 354: Load->AL[i]=0xffff;
 13910  2755  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13911  2756  3E1A               	addlw	26
 13912  2757  076E               	addwf	_Load,w
 13913  2758  00A0               	movwf	??_setLoad_AH_AL_Restore
 13914  2759  0820               	movf	??_setLoad_AH_AL_Restore,w
 13915  275A  0086               	movwf	6
 13916  275B  3002               	movlw	2	; select bank4/5
 13917  275C  0087               	movwf	7
 13918  275D  30FF               	movlw	255
 13919  275E  3FC0               	movwi [0]fsr1
 13920  275F  30FF               	movlw	255
 13921  2760  3FC1               	movwi [1]fsr1
 13922  2761  3001               	movlw	1
 13923  2762  00A0               	movwf	??_setLoad_AH_AL_Restore
 13924  2763  0820               	movf	??_setLoad_AH_AL_Restore,w
 13925  2764  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13926  2765  2F46               	goto	L14
 13927  2766                     __end_of_setLoad_AH_AL_Restore:	
 13928                           
 13929                           	psect	text74
 13930  23AD                     __ptext74:	
 13931 ;; *************** function _LED_Main *****************
 13932 ;; Defined at:
 13933 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;		None
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;		None
 13938 ;; Return value:  Size  Location     Type
 13939 ;;		None               void
 13940 ;; Registers used:
 13941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;Total ram usage:        0 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    6
 13954 ;; This function calls:
 13955 ;;		_setLED_Main
 13956 ;; This function is called by:
 13957 ;;		_main
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _LED_Main
 13963  23AD                     _LED_Main:	
 13964                           
 13965                           ;LED_B1.c: 54: setLED_Main(1);
 13966                           
 13967                           ;incstack = 0
 13968                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13969  23AD  3001               	movlw	1
 13970  23AE  319A  2270  31A3   	fcall	_setLED_Main
 13971                           
 13972                           ;LED_B1.c: 57: setLED_Main(2);
 13973  23B1  3002               	movlw	2
 13974  23B2  319A  2270  31A3   	fcall	_setLED_Main
 13975                           
 13976                           ;LED_B1.c: 63: setLED_Main(99);
 13977  23B5  3063               	movlw	99
 13978  23B6  319A  2270         	fcall	_setLED_Main
 13979  23B8  0008               	return
 13980  23B9                     __end_of_LED_Main:	
 13981                           
 13982                           	psect	text75
 13983  1A70                     __ptext75:	
 13984 ;; *************** function _setLED_Main *****************
 13985 ;; Defined at:
 13986 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  led             1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  led             1    4[BANK0 ] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;Total ram usage:        3 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    5
 14007 ;; This function calls:
 14008 ;;		_LedPointSelect
 14009 ;; This function is called by:
 14010 ;;		_LED_Main
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _setLED_Main
 14016  1A70                     _setLED_Main:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14020                           ;setLED_Main@led stored from wreg
 14021  1A70  0020               	movlb	0	; select bank0
 14022  1A71  00A4               	movwf	setLED_Main@led
 14023                           
 14024                           ;LED_B1.c: 216: LedPointSelect(led);
 14025  1A72  0824               	movf	setLED_Main@led,w
 14026  1A73  31A7  2722  319A   	fcall	_LedPointSelect
 14027                           
 14028                           ;LED_B1.c: 217: if(LED->GO)
 14029  1A76  0021               	movlb	1	; select bank1
 14030  1A77  083B               	movf	_LED^(0+128),w
 14031  1A78  0086               	movwf	6
 14032  1A79  0187               	clrf	7
 14033  1A7A  1C81               	btfss	1,1
 14034  1A7B  0008               	return
 14035                           
 14036                           ;LED_B1.c: 218: {
 14037                           ;LED_B1.c: 219: LED->Time++;
 14038  1A7C  0A3B               	incf	_LED^(0+128),w
 14039  1A7D  0086               	movwf	6
 14040  1A7E  0187               	clrf	7
 14041  1A7F  3001               	movlw	1
 14042  1A80  0781               	addwf	1,f
 14043  1A81  3141               	addfsr 1,1
 14044  1A82  1803               	skipnc
 14045  1A83  0A81               	incf	1,f
 14046                           
 14047                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 14048  1A84  0A3B               	incf	_LED^(0+128),w
 14049  1A85  0086               	movwf	6
 14050  1A86  0187               	clrf	7
 14051  1A87  3F40               	moviw [0]fsr1
 14052  1A88  0020               	movlb	0	; select bank0
 14053  1A89  00A2               	movwf	??_setLED_Main
 14054  1A8A  3F41               	moviw [1]fsr1
 14055  1A8B  00A3               	movwf	??_setLED_Main+1
 14056  1A8C  3000               	movlw	0
 14057  1A8D  0223               	subwf	??_setLED_Main+1,w
 14058  1A8E  3032               	movlw	50
 14059  1A8F  1903               	skipnz
 14060  1A90  0222               	subwf	??_setLED_Main,w
 14061  1A91  1C03               	skipc
 14062  1A92  0008               	return
 14063                           
 14064                           ;LED_B1.c: 221: {
 14065                           ;LED_B1.c: 222: LED->Time=0;
 14066  1A93  0021               	movlb	1	; select bank1
 14067  1A94  0A3B               	incf	_LED^(0+128),w
 14068  1A95  0086               	movwf	6
 14069  1A96  0187               	clrf	7
 14070  1A97  3000               	movlw	0
 14071  1A98  3FC0               	movwi [0]fsr1
 14072  1A99  3FC1               	movwi [1]fsr1
 14073                           
 14074                           ;LED_B1.c: 224: if(led == 1)
 14075  1A9A  0020               	movlb	0	; select bank0
 14076  1A9B  0824               	movf	setLED_Main@led,w
 14077  1A9C  3A01               	xorlw	1
 14078  1A9D  1D03               	skipz
 14079  1A9E  2AA2               	goto	l7558
 14080                           
 14081                           ;LED_B1.c: 225: {
 14082                           ;LED_B1.c: 226: RA3=~RA3;
 14083  1A9F  3008               	movlw	8
 14084  1AA0  068C               	xorwf	12,f
 14085                           
 14086                           ;LED_B1.c: 227: }
 14087  1AA1  0008               	return
 14088  1AA2                     l7558:	
 14089                           
 14090                           ;LED_B1.c: 230: else if(led == 2)
 14091  1AA2  0824               	movf	setLED_Main@led,w
 14092  1AA3  3A02               	xorlw	2
 14093  1AA4  1D03               	skipz
 14094  1AA5  2AA9               	goto	l7562
 14095                           
 14096                           ;LED_B1.c: 231: {
 14097                           ;LED_B1.c: 232: RC7=~RC7;
 14098  1AA6  3080               	movlw	128
 14099  1AA7  068E               	xorwf	14,f
 14100                           
 14101                           ;LED_B1.c: 233: }
 14102  1AA8  0008               	return
 14103  1AA9                     l7562:	
 14104                           
 14105                           ;LED_B1.c: 242: else if(led == 99)
 14106  1AA9  0824               	movf	setLED_Main@led,w
 14107  1AAA  3A63               	xorlw	99
 14108  1AAB  1D03               	skipz
 14109  1AAC  0008               	return
 14110                           
 14111                           ;LED_B1.c: 243: {
 14112                           ;LED_B1.c: 244: RB5=~RB5;
 14113  1AAD  3020               	movlw	32
 14114  1AAE  068D               	xorwf	13,f
 14115  1AAF  0008               	return
 14116  1AB0                     __end_of_setLED_Main:	
 14117                           
 14118                           	psect	text76
 14119  23A1                     __ptext76:	
 14120 ;; *************** function _LED_Initialization *****************
 14121 ;; Defined at:
 14122 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;		None
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;		None
 14127 ;; Return value:  Size  Location     Type
 14128 ;;		None               void
 14129 ;; Registers used:
 14130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        0 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    7
 14143 ;; This function calls:
 14144 ;;		_setLED_Initialization
 14145 ;; This function is called by:
 14146 ;;		_main
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           
 14151                           ;psect for function _LED_Initialization
 14152  23A1                     _LED_Initialization:	
 14153                           
 14154                           ;LED_B1.c: 38: setLED_Initialization(1);
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14158  23A1  3001               	movlw	1
 14159  23A2  31A4  24A7  31A3   	fcall	_setLED_Initialization
 14160                           
 14161                           ;LED_B1.c: 41: setLED_Initialization(2);
 14162  23A5  3002               	movlw	2
 14163  23A6  31A4  24A7  31A3   	fcall	_setLED_Initialization
 14164                           
 14165                           ;LED_B1.c: 47: setLED_Initialization(99);
 14166  23A9  3063               	movlw	99
 14167  23AA  31A4  24A7         	fcall	_setLED_Initialization
 14168  23AC  0008               	return
 14169  23AD                     __end_of_LED_Initialization:	
 14170                           
 14171                           	psect	text77
 14172  24A7                     __ptext77:	
 14173 ;; *************** function _setLED_Initialization *****************
 14174 ;; Defined at:
 14175 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  led             1    wreg     unsigned char 
 14178 ;; Auto vars:     Size  Location     Type
 14179 ;;  led             1    4[BANK0 ] unsigned char 
 14180 ;; Return value:  Size  Location     Type
 14181 ;;		None               void
 14182 ;; Registers used:
 14183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;Total ram usage:        1 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; Hardware stack levels required when called:    6
 14196 ;; This function calls:
 14197 ;;		_LedPointSelect
 14198 ;;		_setLED
 14199 ;; This function is called by:
 14200 ;;		_LED_Initialization
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           
 14205                           ;psect for function _setLED_Initialization
 14206  24A7                     _setLED_Initialization:	
 14207                           
 14208                           ;incstack = 0
 14209                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14210                           ;setLED_Initialization@led stored from wreg
 14211  24A7  0020               	movlb	0	; select bank0
 14212  24A8  00A4               	movwf	setLED_Initialization@led
 14213                           
 14214                           ;LED_B1.c: 69: LedPointSelect(led);
 14215  24A9  0824               	movf	setLED_Initialization@led,w
 14216  24AA  31A7  2722  31A4   	fcall	_LedPointSelect
 14217                           
 14218                           ;LED_B1.c: 70: LED->Enable=1;
 14219  24AD  0021               	movlb	1	; select bank1
 14220  24AE  083B               	movf	_LED^(0+128),w
 14221  24AF  0086               	movwf	6
 14222  24B0  0187               	clrf	7
 14223  24B1  1401               	bsf	1,0
 14224                           
 14225                           ;LED_B1.c: 71: setLED(led,0);
 14226  24B2  0020               	movlb	0	; select bank0
 14227  24B3  01A2               	clrf	setLED@command
 14228  24B4  0824               	movf	setLED_Initialization@led,w
 14229  24B5  3188  2002         	fcall	_setLED
 14230  24B7  0008               	return
 14231  24B8                     __end_of_setLED_Initialization:	
 14232                           
 14233                           	psect	text78
 14234  1C80                     __ptext78:	
 14235 ;; *************** function _Flash_Memory_Main *****************
 14236 ;; Defined at:
 14237 ;;		line 852 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;		None
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;		None
 14242 ;; Return value:  Size  Location     Type
 14243 ;;		None               void
 14244 ;; Registers used:
 14245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;Total ram usage:        0 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; Hardware stack levels required when called:    7
 14258 ;; This function calls:
 14259 ;;		_Flash_Memory_Modify
 14260 ;; This function is called by:
 14261 ;;		_main
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           
 14266                           ;psect for function _Flash_Memory_Main
 14267  1C80                     _Flash_Memory_Main:	
 14268                           
 14269                           ;MCU_B1.c: 854: if(Memory->GO)
 14270                           
 14271                           ;incstack = 0
 14272                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14273  1C80  0021               	movlb	1	; select bank1
 14274  1C81  086B               	movf	_Memory^(0+128),w
 14275  1C82  3E22               	addlw	34
 14276  1C83  0086               	movwf	6
 14277  1C84  3002               	movlw	2	; select bank4/5
 14278  1C85  0087               	movwf	7
 14279  1C86  1C81               	btfss	1,1
 14280  1C87  0008               	return
 14281                           
 14282                           ;MCU_B1.c: 855: {
 14283                           ;MCU_B1.c: 856: if(Memory->Modify)
 14284  1C88  086B               	movf	_Memory^(0+128),w
 14285  1C89  3E22               	addlw	34
 14286  1C8A  0086               	movwf	6
 14287  1C8B  3002               	movlw	2	; select bank4/5
 14288  1C8C  0087               	movwf	7
 14289  1C8D  1C01               	btfss	1,0
 14290  1C8E  2CBD               	goto	l10078
 14291                           
 14292                           ;MCU_B1.c: 857: {
 14293                           ;MCU_B1.c: 858: Memory->Time++;
 14294  1C8F  086B               	movf	_Memory^(0+128),w
 14295  1C90  3E23               	addlw	35
 14296  1C91  0086               	movwf	6
 14297  1C92  3002               	movlw	2	; select bank4/5
 14298  1C93  0087               	movwf	7
 14299  1C94  3001               	movlw	1
 14300  1C95  0781               	addwf	1,f
 14301  1C96  3141               	addfsr 1,1
 14302  1C97  1803               	skipnc
 14303  1C98  0A81               	incf	1,f
 14304                           
 14305                           ;MCU_B1.c: 859: if(Memory->Time == 25)
 14306  1C99  086B               	movf	_Memory^(0+128),w
 14307  1C9A  3E23               	addlw	35
 14308  1C9B  0086               	movwf	6
 14309  1C9C  3002               	movlw	2	; select bank4/5
 14310  1C9D  0087               	movwf	7
 14311  1C9E  3F40               	moviw [0]fsr1
 14312  1C9F  3A19               	xorlw	25
 14313  1CA0  1D03               	skipz
 14314  1CA1  2CA4               	goto	u10185
 14315  1CA2  3F41               	moviw [1]fsr1
 14316  1CA3  3A00               	xorlw	0
 14317  1CA4                     u10185:	
 14318  1CA4  1D03               	skipz
 14319  1CA5  0008               	return
 14320                           
 14321                           ;MCU_B1.c: 860: {
 14322                           ;MCU_B1.c: 861: Memory->Time=0;
 14323  1CA6  086B               	movf	_Memory^(0+128),w
 14324  1CA7  3E23               	addlw	35
 14325  1CA8  0086               	movwf	6
 14326  1CA9  3002               	movlw	2	; select bank4/5
 14327  1CAA  0087               	movwf	7
 14328  1CAB  3000               	movlw	0
 14329  1CAC  3FC0               	movwi [0]fsr1
 14330  1CAD  3FC1               	movwi [1]fsr1
 14331                           
 14332                           ;MCU_B1.c: 862: Memory->Modify=0;
 14333  1CAE  086B               	movf	_Memory^(0+128),w
 14334  1CAF  3E22               	addlw	34
 14335  1CB0  0086               	movwf	6
 14336  1CB1  3002               	movlw	2	; select bank4/5
 14337  1CB2  0087               	movwf	7
 14338  1CB3  1001               	bcf	1,0
 14339                           
 14340                           ;MCU_B1.c: 863: Memory->GO=0;
 14341  1CB4  086B               	movf	_Memory^(0+128),w
 14342  1CB5  3E22               	addlw	34
 14343  1CB6  0086               	movwf	6
 14344  1CB7  3002               	movlw	2	; select bank4/5
 14345  1CB8  0087               	movwf	7
 14346  1CB9  1081               	bcf	1,1
 14347                           
 14348                           ;MCU_B1.c: 864: Flash_Memory_Modify();
 14349  1CBA  3190  20B9         	fcall	_Flash_Memory_Modify
 14350                           
 14351                           ;MCU_B1.c: 866: }
 14352                           ;MCU_B1.c: 867: }
 14353  1CBC  0008               	return
 14354  1CBD                     l10078:	
 14355                           
 14356                           ;MCU_B1.c: 868: else
 14357                           ;MCU_B1.c: 869: {
 14358                           ;MCU_B1.c: 870: Memory->GO=0;
 14359  1CBD  0021               	movlb	1	; select bank1
 14360  1CBE  086B               	movf	_Memory^(0+128),w
 14361  1CBF  3E22               	addlw	34
 14362  1CC0  0086               	movwf	6
 14363  1CC1  3002               	movlw	2	; select bank4/5
 14364  1CC2  0087               	movwf	7
 14365  1CC3  1081               	bcf	1,1
 14366  1CC4  0008               	return
 14367  1CC5                     __end_of_Flash_Memory_Main:	
 14368                           
 14369                           	psect	text79
 14370  10B9                     __ptext79:	
 14371 ;; *************** function _Flash_Memory_Modify *****************
 14372 ;; Defined at:
 14373 ;;		line 927 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14374 ;; Parameters:    Size  Location     Type
 14375 ;;		None
 14376 ;; Auto vars:     Size  Location     Type
 14377 ;;  i               1    6[BANK0 ] unsigned char 
 14378 ;; Return value:  Size  Location     Type
 14379 ;;		None               void
 14380 ;; Registers used:
 14381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14382 ;; Tracked objects:
 14383 ;;		On entry : 0/0
 14384 ;;		On exit  : 0/0
 14385 ;;		Unchanged: 0/0
 14386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;Total ram usage:        3 bytes
 14392 ;; Hardware stack levels used:    1
 14393 ;; Hardware stack levels required when called:    6
 14394 ;; This function calls:
 14395 ;;		_Flash_Memory_Erasing
 14396 ;;		_Flash_Memory_Read
 14397 ;;		_Flash_Memory_Write
 14398 ;; This function is called by:
 14399 ;;		_Flash_Memory_Main
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           
 14404                           ;psect for function _Flash_Memory_Modify
 14405  10B9                     _Flash_Memory_Modify:	
 14406                           
 14407                           ;MCU_B1.c: 929: char i;
 14408                           ;MCU_B1.c: 930: for(i=0;i<32;i++)
 14409                           
 14410                           ;incstack = 0
 14411                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14412  10B9  0020               	movlb	0	; select bank0
 14413  10BA  01A6               	clrf	Flash_Memory_Modify@i
 14414  10BB  3020               	movlw	32
 14415  10BC  0226               	subwf	Flash_Memory_Modify@i,w
 14416  10BD  1803               	btfsc	3,0
 14417  10BE  28D8               	goto	l9590
 14418  10BF                     l9584:	
 14419                           
 14420                           ;MCU_B1.c: 931: {
 14421                           ;MCU_B1.c: 932: Memory->Data[i]=Flash_Memory_Read(i);
 14422  10BF  0826               	movf	Flash_Memory_Modify@i,w
 14423  10C0  31A5  25E8  3190   	fcall	_Flash_Memory_Read
 14424  10C3  0020               	movlb	0	; select bank0
 14425  10C4  00A4               	movwf	??_Flash_Memory_Modify
 14426  10C5  0826               	movf	Flash_Memory_Modify@i,w
 14427  10C6  0021               	movlb	1	; select bank1
 14428  10C7  076B               	addwf	_Memory^(0+128),w
 14429  10C8  0020               	movlb	0	; select bank0
 14430  10C9  00A5               	movwf	??_Flash_Memory_Modify+1
 14431  10CA  0825               	movf	??_Flash_Memory_Modify+1,w
 14432  10CB  0086               	movwf	6
 14433  10CC  3002               	movlw	2	; select bank4/5
 14434  10CD  0087               	movwf	7
 14435  10CE  0824               	movf	??_Flash_Memory_Modify,w
 14436  10CF  0081               	movwf	1
 14437  10D0  3001               	movlw	1
 14438  10D1  00A4               	movwf	??_Flash_Memory_Modify
 14439  10D2  0824               	movf	??_Flash_Memory_Modify,w
 14440  10D3  07A6               	addwf	Flash_Memory_Modify@i,f
 14441  10D4  3020               	movlw	32
 14442  10D5  0226               	subwf	Flash_Memory_Modify@i,w
 14443  10D6  1C03               	skipc
 14444  10D7  28BF               	goto	l9584
 14445  10D8                     l9590:	
 14446                           
 14447                           ;MCU_B1.c: 933: }
 14448                           ;MCU_B1.c: 934: Memory->Data[0]=Product->Data[12];
 14449  10D8  086F               	movf	_Product,w
 14450  10D9  3E0C               	addlw	12
 14451  10DA  0086               	movwf	6
 14452  10DB  3001               	movlw	1	; select bank2/3
 14453  10DC  0087               	movwf	7
 14454  10DD  0801               	movf	1,w
 14455  10DE  00A4               	movwf	??_Flash_Memory_Modify
 14456  10DF  0021               	movlb	1	; select bank1
 14457  10E0  086B               	movf	_Memory^(0+128),w
 14458  10E1  0086               	movwf	6
 14459  10E2  3002               	movlw	2	; select bank4/5
 14460  10E3  0087               	movwf	7
 14461  10E4  0020               	movlb	0	; select bank0
 14462  10E5  0824               	movf	??_Flash_Memory_Modify,w
 14463  10E6  0081               	movwf	1
 14464                           
 14465                           ;MCU_B1.c: 935: Memory->Data[1]=Product->Data[13];
 14466  10E7  086F               	movf	_Product,w
 14467  10E8  3E0D               	addlw	13
 14468  10E9  0086               	movwf	6
 14469  10EA  3001               	movlw	1	; select bank2/3
 14470  10EB  0087               	movwf	7
 14471  10EC  0801               	movf	1,w
 14472  10ED  00A4               	movwf	??_Flash_Memory_Modify
 14473  10EE  0021               	movlb	1	; select bank1
 14474  10EF  0A6B               	incf	_Memory^(0+128),w
 14475  10F0  0086               	movwf	6
 14476  10F1  3002               	movlw	2	; select bank4/5
 14477  10F2  0087               	movwf	7
 14478  10F3  0020               	movlb	0	; select bank0
 14479  10F4  0824               	movf	??_Flash_Memory_Modify,w
 14480  10F5  0081               	movwf	1
 14481                           
 14482                           ;MCU_B1.c: 936: Memory->Data[2]=Product->Data[14];
 14483  10F6  086F               	movf	_Product,w
 14484  10F7  3E0E               	addlw	14
 14485  10F8  0086               	movwf	6
 14486  10F9  3001               	movlw	1	; select bank2/3
 14487  10FA  0087               	movwf	7
 14488  10FB  0801               	movf	1,w
 14489  10FC  00A4               	movwf	??_Flash_Memory_Modify
 14490  10FD  0021               	movlb	1	; select bank1
 14491  10FE  086B               	movf	_Memory^(0+128),w
 14492  10FF  3E02               	addlw	2
 14493  1100  0086               	movwf	6
 14494  1101  3002               	movlw	2	; select bank4/5
 14495  1102  0087               	movwf	7
 14496  1103  0020               	movlb	0	; select bank0
 14497  1104  0824               	movf	??_Flash_Memory_Modify,w
 14498  1105  0081               	movwf	1
 14499                           
 14500                           ;MCU_B1.c: 942: if(Memory->LoopSave)
 14501  1106  0021               	movlb	1	; select bank1
 14502  1107  086B               	movf	_Memory^(0+128),w
 14503  1108  3E22               	addlw	34
 14504  1109  0086               	movwf	6
 14505  110A  3002               	movlw	2	; select bank4/5
 14506  110B  0087               	movwf	7
 14507  110C  1D01               	btfss	1,2
 14508  110D  291F               	goto	l9594
 14509                           
 14510                           ;MCU_B1.c: 943: {
 14511                           ;MCU_B1.c: 944: Memory->LoopSave=0;
 14512  110E  086B               	movf	_Memory^(0+128),w
 14513  110F  3E22               	addlw	34
 14514  1110  0086               	movwf	6
 14515  1111  3002               	movlw	2	; select bank4/5
 14516  1112  0087               	movwf	7
 14517  1113  1101               	bcf	1,2
 14518                           
 14519                           ;MCU_B1.c: 945: TMain->FirstOpen=0;
 14520  1114  086C               	movf	_TMain^(0+128),w
 14521  1115  0086               	movwf	6
 14522  1116  3001               	movlw	1	; select bank2/3
 14523  1117  0087               	movwf	7
 14524  1118  1281               	bcf	1,5
 14525                           
 14526                           ;MCU_B1.c: 946: TMain->First=0;
 14527  1119  086C               	movf	_TMain^(0+128),w
 14528  111A  3E03               	addlw	3
 14529  111B  0086               	movwf	6
 14530  111C  3001               	movlw	1	; select bank2/3
 14531  111D  0087               	movwf	7
 14532  111E  1081               	bcf	1,1
 14533  111F                     l9594:	
 14534                           
 14535                           ;MCU_B1.c: 948: }
 14536                           ;MCU_B1.c: 949: GIE=0;
 14537  111F  138B               	bcf	11,7	;volatile
 14538                           
 14539                           ;MCU_B1.c: 950: Flash_Memory_Erasing();
 14540  1120  31A3  2395  3190   	fcall	_Flash_Memory_Erasing
 14541                           
 14542                           ;MCU_B1.c: 951: Flash_Memory_Write();
 14543  1123  3199  2167         	fcall	_Flash_Memory_Write
 14544                           
 14545                           ;MCU_B1.c: 952: GIE=1;
 14546  1125  178B               	bsf	11,7	;volatile
 14547  1126  0008               	return
 14548  1127                     __end_of_Flash_Memory_Modify:	
 14549                           
 14550                           	psect	text80
 14551  2395                     __ptext80:	
 14552 ;; *************** function _Flash_Memory_Erasing *****************
 14553 ;; Defined at:
 14554 ;;		line 916 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14555 ;; Parameters:    Size  Location     Type
 14556 ;;		None
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;		None
 14559 ;; Return value:  Size  Location     Type
 14560 ;;		None               void
 14561 ;; Registers used:
 14562 ;;		wreg, status,2, status,0, pclath, cstack
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;Total ram usage:        0 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:    5
 14575 ;; This function calls:
 14576 ;;		_Flash_Memory_Unlock
 14577 ;; This function is called by:
 14578 ;;		_Flash_Memory_Modify
 14579 ;; This function uses a non-reentrant model
 14580 ;;
 14581                           
 14582                           
 14583                           ;psect for function _Flash_Memory_Erasing
 14584  2395                     _Flash_Memory_Erasing:	
 14585                           
 14586                           ;MCU_B1.c: 918: CFGS=0;
 14587                           
 14588                           ;incstack = 0
 14589                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14590  2395  0023               	movlb	3	; select bank3
 14591  2396  1315               	bcf	21,6	;volatile
 14592                           
 14593                           ;MCU_B1.c: 919: PMADRH=0x30;
 14594  2397  3030               	movlw	48
 14595  2398  0092               	movwf	18	;volatile
 14596                           
 14597                           ;MCU_B1.c: 920: PMADRL=0x00;
 14598  2399  0191               	clrf	17	;volatile
 14599                           
 14600                           ;MCU_B1.c: 921: FREE=1;
 14601  239A  1615               	bsf	21,4	;volatile
 14602                           
 14603                           ;MCU_B1.c: 922: WREN=1;
 14604  239B  1515               	bsf	21,2	;volatile
 14605                           
 14606                           ;MCU_B1.c: 923: Flash_Memory_Unlock();
 14607  239C  31A2  22FD         	fcall	_Flash_Memory_Unlock
 14608                           
 14609                           ;MCU_B1.c: 924: WREN=0;
 14610  239E  0023               	movlb	3	; select bank3
 14611  239F  1115               	bcf	21,2	;volatile
 14612  23A0  0008               	return
 14613  23A1                     __end_of_Flash_Memory_Erasing:	
 14614                           
 14615                           	psect	text81
 14616  0B7C                     __ptext81:	
 14617 ;; *************** function _Flash_Memory_Initialization *****************
 14618 ;; Defined at:
 14619 ;;		line 807 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;		None
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  i               1   62[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;		None               void
 14626 ;; Registers used:
 14627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        2 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    7
 14640 ;; This function calls:
 14641 ;;		_Flash_Memory_Read
 14642 ;;		_Flash_Memory_Write
 14643 ;;		_setPercentValue
 14644 ;; This function is called by:
 14645 ;;		_main
 14646 ;; This function uses a non-reentrant model
 14647 ;;
 14648                           
 14649                           
 14650                           ;psect for function _Flash_Memory_Initialization
 14651  0B7C                     _Flash_Memory_Initialization:	
 14652                           
 14653                           ;MCU_B1.c: 809: char i;
 14654                           ;MCU_B1.c: 810: if(Flash_Memory_Read(31) == 0xaa)
 14655                           
 14656                           ;incstack = 0
 14657                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14658  0B7C  301F               	movlw	31
 14659  0B7D  31A5  25E8  318B   	fcall	_Flash_Memory_Read
 14660  0B80  3AAA               	xorlw	170
 14661  0B81  1D03               	skipz
 14662  0B82  2BF5               	goto	l9936
 14663                           
 14664                           ;MCU_B1.c: 811: {
 14665                           ;MCU_B1.c: 812: Product->Data[12]=Flash_Memory_Read(0);
 14666  0B83  3000               	movlw	0
 14667  0B84  31A5  25E8  318B   	fcall	_Flash_Memory_Read
 14668  0B87  0020               	movlb	0	; select bank0
 14669  0B88  00DD               	movwf	??_Flash_Memory_Initialization
 14670  0B89  086F               	movf	_Product,w
 14671  0B8A  3E0C               	addlw	12
 14672  0B8B  0086               	movwf	6
 14673  0B8C  3001               	movlw	1	; select bank2/3
 14674  0B8D  0087               	movwf	7
 14675  0B8E  085D               	movf	??_Flash_Memory_Initialization,w
 14676  0B8F  0081               	movwf	1
 14677                           
 14678                           ;MCU_B1.c: 813: Product->Data[13]=Flash_Memory_Read(1);
 14679  0B90  3001               	movlw	1
 14680  0B91  31A5  25E8  318B   	fcall	_Flash_Memory_Read
 14681  0B94  0020               	movlb	0	; select bank0
 14682  0B95  00DD               	movwf	??_Flash_Memory_Initialization
 14683  0B96  086F               	movf	_Product,w
 14684  0B97  3E0D               	addlw	13
 14685  0B98  0086               	movwf	6
 14686  0B99  3001               	movlw	1	; select bank2/3
 14687  0B9A  0087               	movwf	7
 14688  0B9B  085D               	movf	??_Flash_Memory_Initialization,w
 14689  0B9C  0081               	movwf	1
 14690                           
 14691                           ;MCU_B1.c: 814: Product->Data[14]=Flash_Memory_Read(2);
 14692  0B9D  3002               	movlw	2
 14693  0B9E  31A5  25E8  318B   	fcall	_Flash_Memory_Read
 14694  0BA1  0020               	movlb	0	; select bank0
 14695  0BA2  00DD               	movwf	??_Flash_Memory_Initialization
 14696  0BA3  086F               	movf	_Product,w
 14697  0BA4  3E0E               	addlw	14
 14698  0BA5  0086               	movwf	6
 14699  0BA6  3001               	movlw	1	; select bank2/3
 14700  0BA7  0087               	movwf	7
 14701  0BA8  085D               	movf	??_Flash_Memory_Initialization,w
 14702  0BA9  0081               	movwf	1
 14703                           
 14704                           ;MCU_B1.c: 820: i=setPercentValue(((char)((100-55)*1.5)));
 14705  0BAA  3043               	movlw	67
 14706  0BAB  319C  24C5  318B   	fcall	_setPercentValue
 14707  0BAE  0020               	movlb	0	; select bank0
 14708  0BAF  00DD               	movwf	??_Flash_Memory_Initialization
 14709  0BB0  085D               	movf	??_Flash_Memory_Initialization,w
 14710  0BB1  00DE               	movwf	Flash_Memory_Initialization@i
 14711                           
 14712                           ;MCU_B1.c: 821: Product->Data[21]=i;
 14713  0BB2  085E               	movf	Flash_Memory_Initialization@i,w
 14714  0BB3  00DD               	movwf	??_Flash_Memory_Initialization
 14715  0BB4  086F               	movf	_Product,w
 14716  0BB5  3E15               	addlw	21
 14717  0BB6  0086               	movwf	6
 14718  0BB7  3001               	movlw	1	; select bank2/3
 14719  0BB8  0087               	movwf	7
 14720  0BB9  085D               	movf	??_Flash_Memory_Initialization,w
 14721  0BBA  0081               	movwf	1
 14722                           
 14723                           ;MCU_B1.c: 822: Product->Data[22]=i;
 14724  0BBB  085E               	movf	Flash_Memory_Initialization@i,w
 14725  0BBC  00DD               	movwf	??_Flash_Memory_Initialization
 14726  0BBD  086F               	movf	_Product,w
 14727  0BBE  3E16               	addlw	22
 14728  0BBF  0086               	movwf	6
 14729  0BC0  3001               	movlw	1	; select bank2/3
 14730  0BC1  0087               	movwf	7
 14731  0BC2  085D               	movf	??_Flash_Memory_Initialization,w
 14732  0BC3  0081               	movwf	1
 14733                           
 14734                           ;MCU_B1.c: 823: Product->Data[23]=i;
 14735  0BC4  085E               	movf	Flash_Memory_Initialization@i,w
 14736  0BC5  00DD               	movwf	??_Flash_Memory_Initialization
 14737  0BC6  086F               	movf	_Product,w
 14738  0BC7  3E17               	addlw	23
 14739  0BC8  0086               	movwf	6
 14740  0BC9  3001               	movlw	1	; select bank2/3
 14741  0BCA  0087               	movwf	7
 14742  0BCB  085D               	movf	??_Flash_Memory_Initialization,w
 14743  0BCC  0081               	movwf	1
 14744                           
 14745                           ;MCU_B1.c: 825: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product->Data[1
      +                          4]==0xff)
 14746  0BCD  086F               	movf	_Product,w
 14747  0BCE  3E0C               	addlw	12
 14748  0BCF  0086               	movwf	6
 14749  0BD0  3001               	movlw	1	; select bank2/3
 14750  0BD1  0087               	movwf	7
 14751  0BD2  0801               	movf	1,w
 14752  0BD3  3AFF               	xorlw	255
 14753  0BD4  1D03               	skipz
 14754  0BD5  0008               	return
 14755  0BD6  086F               	movf	_Product,w
 14756  0BD7  3E0D               	addlw	13
 14757  0BD8  0086               	movwf	6
 14758  0BD9  3001               	movlw	1	; select bank2/3
 14759  0BDA  0087               	movwf	7
 14760  0BDB  0801               	movf	1,w
 14761  0BDC  3AFF               	xorlw	255
 14762  0BDD  1D03               	skipz
 14763  0BDE  0008               	return
 14764  0BDF  086F               	movf	_Product,w
 14765  0BE0  3E0E               	addlw	14
 14766  0BE1  0086               	movwf	6
 14767  0BE2  3001               	movlw	1	; select bank2/3
 14768  0BE3  0087               	movwf	7
 14769  0BE4  0801               	movf	1,w
 14770  0BE5  3AFF               	xorlw	255
 14771  0BE6  1D03               	skipz
 14772  0BE7  0008               	return
 14773                           
 14774                           ;MCU_B1.c: 826: {
 14775                           ;MCU_B1.c: 827: TMain->FirstOpen=1;
 14776  0BE8  0021               	movlb	1	; select bank1
 14777  0BE9  086C               	movf	_TMain^(0+128),w
 14778  0BEA  0086               	movwf	6
 14779  0BEB  3001               	movlw	1	; select bank2/3
 14780  0BEC  0087               	movwf	7
 14781  0BED  1681               	bsf	1,5
 14782                           
 14783                           ;MCU_B1.c: 828: TMain->First=1;
 14784  0BEE  086C               	movf	_TMain^(0+128),w
 14785  0BEF  3E03               	addlw	3
 14786  0BF0  0086               	movwf	6
 14787  0BF1  3001               	movlw	1	; select bank2/3
 14788  0BF2  0087               	movwf	7
 14789  0BF3  1481               	bsf	1,1
 14790                           
 14791                           ;MCU_B1.c: 829: }
 14792                           ;MCU_B1.c: 830: }
 14793  0BF4  0008               	return
 14794  0BF5                     l9936:	
 14795                           
 14796                           ;MCU_B1.c: 831: else
 14797                           ;MCU_B1.c: 832: {
 14798                           ;MCU_B1.c: 833: i=setPercentValue(((char)((100-55)*1.5)));
 14799  0BF5  3043               	movlw	67
 14800  0BF6  319C  24C5  318B   	fcall	_setPercentValue
 14801  0BF9  0020               	movlb	0	; select bank0
 14802  0BFA  00DD               	movwf	??_Flash_Memory_Initialization
 14803  0BFB  085D               	movf	??_Flash_Memory_Initialization,w
 14804  0BFC  00DE               	movwf	Flash_Memory_Initialization@i
 14805                           
 14806                           ;MCU_B1.c: 834: Memory->Data[0]=0xff;
 14807  0BFD  30FF               	movlw	255
 14808  0BFE  00DD               	movwf	??_Flash_Memory_Initialization
 14809  0BFF  0021               	movlb	1	; select bank1
 14810  0C00  086B               	movf	_Memory^(0+128),w
 14811  0C01  0086               	movwf	6
 14812  0C02  3002               	movlw	2	; select bank4/5
 14813  0C03  0087               	movwf	7
 14814  0C04  0020               	movlb	0	; select bank0
 14815  0C05  085D               	movf	??_Flash_Memory_Initialization,w
 14816  0C06  0081               	movwf	1
 14817                           
 14818                           ;MCU_B1.c: 835: Memory->Data[1]=0xff;
 14819  0C07  30FF               	movlw	255
 14820  0C08  00DD               	movwf	??_Flash_Memory_Initialization
 14821  0C09  0021               	movlb	1	; select bank1
 14822  0C0A  0A6B               	incf	_Memory^(0+128),w
 14823  0C0B  0086               	movwf	6
 14824  0C0C  3002               	movlw	2	; select bank4/5
 14825  0C0D  0087               	movwf	7
 14826  0C0E  0020               	movlb	0	; select bank0
 14827  0C0F  085D               	movf	??_Flash_Memory_Initialization,w
 14828  0C10  0081               	movwf	1
 14829                           
 14830                           ;MCU_B1.c: 836: Memory->Data[2]=0xff;
 14831  0C11  30FF               	movlw	255
 14832  0C12  00DD               	movwf	??_Flash_Memory_Initialization
 14833  0C13  0021               	movlb	1	; select bank1
 14834  0C14  086B               	movf	_Memory^(0+128),w
 14835  0C15  3E02               	addlw	2
 14836  0C16  0086               	movwf	6
 14837  0C17  3002               	movlw	2	; select bank4/5
 14838  0C18  0087               	movwf	7
 14839  0C19  0020               	movlb	0	; select bank0
 14840  0C1A  085D               	movf	??_Flash_Memory_Initialization,w
 14841  0C1B  0081               	movwf	1
 14842                           
 14843                           ;MCU_B1.c: 837: Memory->Data[3]=0xff;
 14844  0C1C  30FF               	movlw	255
 14845  0C1D  00DD               	movwf	??_Flash_Memory_Initialization
 14846  0C1E  0021               	movlb	1	; select bank1
 14847  0C1F  086B               	movf	_Memory^(0+128),w
 14848  0C20  3E03               	addlw	3
 14849  0C21  0086               	movwf	6
 14850  0C22  3002               	movlw	2	; select bank4/5
 14851  0C23  0087               	movwf	7
 14852  0C24  0020               	movlb	0	; select bank0
 14853  0C25  085D               	movf	??_Flash_Memory_Initialization,w
 14854  0C26  0081               	movwf	1
 14855                           
 14856                           ;MCU_B1.c: 838: Memory->Data[4]=0xff;
 14857  0C27  30FF               	movlw	255
 14858  0C28  00DD               	movwf	??_Flash_Memory_Initialization
 14859  0C29  0021               	movlb	1	; select bank1
 14860  0C2A  086B               	movf	_Memory^(0+128),w
 14861  0C2B  3E04               	addlw	4
 14862  0C2C  0086               	movwf	6
 14863  0C2D  3002               	movlw	2	; select bank4/5
 14864  0C2E  0087               	movwf	7
 14865  0C2F  0020               	movlb	0	; select bank0
 14866  0C30  085D               	movf	??_Flash_Memory_Initialization,w
 14867  0C31  0081               	movwf	1
 14868                           
 14869                           ;MCU_B1.c: 839: Memory->Data[5]=0xff;
 14870  0C32  30FF               	movlw	255
 14871  0C33  00DD               	movwf	??_Flash_Memory_Initialization
 14872  0C34  0021               	movlb	1	; select bank1
 14873  0C35  086B               	movf	_Memory^(0+128),w
 14874  0C36  3E05               	addlw	5
 14875  0C37  0086               	movwf	6
 14876  0C38  3002               	movlw	2	; select bank4/5
 14877  0C39  0087               	movwf	7
 14878  0C3A  0020               	movlb	0	; select bank0
 14879  0C3B  085D               	movf	??_Flash_Memory_Initialization,w
 14880  0C3C  0081               	movwf	1
 14881                           
 14882                           ;MCU_B1.c: 840: Memory->Data[31]=0xaa;
 14883  0C3D  30AA               	movlw	170
 14884  0C3E  00DD               	movwf	??_Flash_Memory_Initialization
 14885  0C3F  0021               	movlb	1	; select bank1
 14886  0C40  086B               	movf	_Memory^(0+128),w
 14887  0C41  3E1F               	addlw	31
 14888  0C42  0086               	movwf	6
 14889  0C43  3002               	movlw	2	; select bank4/5
 14890  0C44  0087               	movwf	7
 14891  0C45  0020               	movlb	0	; select bank0
 14892  0C46  085D               	movf	??_Flash_Memory_Initialization,w
 14893  0C47  0081               	movwf	1
 14894                           
 14895                           ;MCU_B1.c: 841: Product->Data[21]=i;
 14896  0C48  085E               	movf	Flash_Memory_Initialization@i,w
 14897  0C49  00DD               	movwf	??_Flash_Memory_Initialization
 14898  0C4A  086F               	movf	_Product,w
 14899  0C4B  3E15               	addlw	21
 14900  0C4C  0086               	movwf	6
 14901  0C4D  3001               	movlw	1	; select bank2/3
 14902  0C4E  0087               	movwf	7
 14903  0C4F  085D               	movf	??_Flash_Memory_Initialization,w
 14904  0C50  0081               	movwf	1
 14905                           
 14906                           ;MCU_B1.c: 842: Product->Data[22]=i;
 14907  0C51  085E               	movf	Flash_Memory_Initialization@i,w
 14908  0C52  00DD               	movwf	??_Flash_Memory_Initialization
 14909  0C53  086F               	movf	_Product,w
 14910  0C54  3E16               	addlw	22
 14911  0C55  0086               	movwf	6
 14912  0C56  3001               	movlw	1	; select bank2/3
 14913  0C57  0087               	movwf	7
 14914  0C58  085D               	movf	??_Flash_Memory_Initialization,w
 14915  0C59  0081               	movwf	1
 14916                           
 14917                           ;MCU_B1.c: 843: Product->Data[23]=i;
 14918  0C5A  085E               	movf	Flash_Memory_Initialization@i,w
 14919  0C5B  00DD               	movwf	??_Flash_Memory_Initialization
 14920  0C5C  086F               	movf	_Product,w
 14921  0C5D  3E17               	addlw	23
 14922  0C5E  0086               	movwf	6
 14923  0C5F  3001               	movlw	1	; select bank2/3
 14924  0C60  0087               	movwf	7
 14925  0C61  085D               	movf	??_Flash_Memory_Initialization,w
 14926  0C62  0081               	movwf	1
 14927                           
 14928                           ;MCU_B1.c: 844: GIE=0;
 14929  0C63  138B               	bcf	11,7	;volatile
 14930                           
 14931                           ;MCU_B1.c: 845: Flash_Memory_Write();
 14932  0C64  3199  2167         	fcall	_Flash_Memory_Write
 14933                           
 14934                           ;MCU_B1.c: 846: GIE=1;
 14935  0C66  178B               	bsf	11,7	;volatile
 14936                           
 14937                           ;MCU_B1.c: 847: TMain->FirstOpen=1;
 14938  0C67  0021               	movlb	1	; select bank1
 14939  0C68  086C               	movf	_TMain^(0+128),w
 14940  0C69  0086               	movwf	6
 14941  0C6A  3001               	movlw	1	; select bank2/3
 14942  0C6B  0087               	movwf	7
 14943  0C6C  1681               	bsf	1,5
 14944                           
 14945                           ;MCU_B1.c: 848: TMain->First=1;
 14946  0C6D  086C               	movf	_TMain^(0+128),w
 14947  0C6E  3E03               	addlw	3
 14948  0C6F  0086               	movwf	6
 14949  0C70  3001               	movlw	1	; select bank2/3
 14950  0C71  0087               	movwf	7
 14951  0C72  1481               	bsf	1,1
 14952  0C73  0008               	return
 14953  0C74                     __end_of_Flash_Memory_Initialization:	
 14954                           
 14955                           	psect	text82
 14956  1967                     __ptext82:	
 14957 ;; *************** function _Flash_Memory_Write *****************
 14958 ;; Defined at:
 14959 ;;		line 896 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;		None
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;  i               1    1[BANK0 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;		None               void
 14966 ;; Registers used:
 14967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;Total ram usage:        2 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    5
 14980 ;; This function calls:
 14981 ;;		_Flash_Memory_Unlock
 14982 ;; This function is called by:
 14983 ;;		_Flash_Memory_Initialization
 14984 ;;		_Flash_Memory_Modify
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           
 14989                           ;psect for function _Flash_Memory_Write
 14990  1967                     _Flash_Memory_Write:	
 14991                           
 14992                           ;MCU_B1.c: 898: char i;
 14993                           ;MCU_B1.c: 899: CFGS=0;
 14994                           
 14995                           ;incstack = 0
 14996                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14997  1967  0023               	movlb	3	; select bank3
 14998  1968  1315               	bcf	21,6	;volatile
 14999                           
 15000                           ;MCU_B1.c: 900: PMADRH=0x30;
 15001  1969  3030               	movlw	48
 15002  196A  0092               	movwf	18	;volatile
 15003                           
 15004                           ;MCU_B1.c: 901: PMDATH=0;
 15005  196B  0194               	clrf	20	;volatile
 15006                           
 15007                           ;MCU_B1.c: 902: FREE=0;
 15008  196C  1215               	bcf	21,4	;volatile
 15009                           
 15010                           ;MCU_B1.c: 903: LWLO=1;
 15011  196D  1695               	bsf	21,5	;volatile
 15012                           
 15013                           ;MCU_B1.c: 904: WREN=1;
 15014  196E  1515               	bsf	21,2	;volatile
 15015                           
 15016                           ;MCU_B1.c: 905: for(i=0 ; i<32 ; i++)
 15017  196F  0020               	movlb	0	; select bank0
 15018  1970  01A1               	clrf	Flash_Memory_Write@i
 15019  1971  3020               	movlw	32
 15020  1972  0221               	subwf	Flash_Memory_Write@i,w
 15021  1973  1803               	btfsc	3,0
 15022  1974  2991               	goto	l1754
 15023  1975                     l9216:	
 15024                           
 15025                           ;MCU_B1.c: 906: {
 15026                           ;MCU_B1.c: 907: PMADRL=i;
 15027  1975  0821               	movf	Flash_Memory_Write@i,w
 15028  1976  0023               	movlb	3	; select bank3
 15029  1977  0091               	movwf	17	;volatile
 15030                           
 15031                           ;MCU_B1.c: 908: PMDATL=Memory->Data[i];
 15032  1978  0020               	movlb	0	; select bank0
 15033  1979  0821               	movf	Flash_Memory_Write@i,w
 15034  197A  0021               	movlb	1	; select bank1
 15035  197B  076B               	addwf	_Memory^(0+128),w
 15036  197C  0020               	movlb	0	; select bank0
 15037  197D  00A0               	movwf	??_Flash_Memory_Write
 15038  197E  0820               	movf	??_Flash_Memory_Write,w
 15039  197F  0086               	movwf	6
 15040  1980  3002               	movlw	2	; select bank4/5
 15041  1981  0087               	movwf	7
 15042  1982  0801               	movf	1,w
 15043  1983  0023               	movlb	3	; select bank3
 15044  1984  0093               	movwf	19	;volatile
 15045                           
 15046                           ;MCU_B1.c: 909: Flash_Memory_Unlock();
 15047  1985  31A2  22FD  3199   	fcall	_Flash_Memory_Unlock
 15048  1988  3001               	movlw	1
 15049  1989  0020               	movlb	0	; select bank0
 15050  198A  00A0               	movwf	??_Flash_Memory_Write
 15051  198B  0820               	movf	??_Flash_Memory_Write,w
 15052  198C  07A1               	addwf	Flash_Memory_Write@i,f
 15053  198D  3020               	movlw	32
 15054  198E  0221               	subwf	Flash_Memory_Write@i,w
 15055  198F  1C03               	skipc
 15056  1990  2975               	goto	l9216
 15057  1991                     l1754:	
 15058                           
 15059                           ;MCU_B1.c: 910: }
 15060                           ;MCU_B1.c: 911: LWLO=0;
 15061  1991  0023               	movlb	3	; select bank3
 15062  1992  1295               	bcf	21,5	;volatile
 15063                           
 15064                           ;MCU_B1.c: 912: Flash_Memory_Unlock();
 15065  1993  31A2  22FD         	fcall	_Flash_Memory_Unlock
 15066                           
 15067                           ;MCU_B1.c: 913: WREN=0;
 15068  1995  0023               	movlb	3	; select bank3
 15069  1996  1115               	bcf	21,2	;volatile
 15070  1997  0008               	return
 15071  1998                     __end_of_Flash_Memory_Write:	
 15072                           
 15073                           	psect	text83
 15074  22FD                     __ptext83:	
 15075 ;; *************** function _Flash_Memory_Unlock *****************
 15076 ;; Defined at:
 15077 ;;		line 875 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;		None
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;		None
 15082 ;; Return value:  Size  Location     Type
 15083 ;;		None               void
 15084 ;; Registers used:
 15085 ;;		wreg
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;Total ram usage:        0 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    4
 15098 ;; This function calls:
 15099 ;;		Nothing
 15100 ;; This function is called by:
 15101 ;;		_Flash_Memory_Write
 15102 ;;		_Flash_Memory_Erasing
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           
 15107                           ;psect for function _Flash_Memory_Unlock
 15108  22FD                     _Flash_Memory_Unlock:	
 15109                           
 15110                           ;MCU_B1.c: 877: PMCON2=0x55;
 15111                           
 15112                           ;incstack = 0
 15113                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 15114  22FD  3055               	movlw	85
 15115  22FE  0023               	movlb	3	; select bank3
 15116  22FF  0096               	movwf	22	;volatile
 15117                           
 15118                           ;MCU_B1.c: 878: PMCON2=0xaa;
 15119  2300  30AA               	movlw	170
 15120  2301  0096               	movwf	22	;volatile
 15121                           
 15122                           ;MCU_B1.c: 879: WR=1;
 15123  2302  1495               	bsf	21,1	;volatile
 15124                           
 15125                           ;MCU_B1.c: 880: __nop();
 15126  2303  0000               	nop
 15127                           
 15128                           ;MCU_B1.c: 881: __nop();
 15129  2304  0000               	nop
 15130  2305  0008               	return
 15131  2306                     __end_of_Flash_Memory_Unlock:	
 15132                           
 15133                           	psect	text84
 15134  25E8                     __ptext84:	
 15135 ;; *************** function _Flash_Memory_Read *****************
 15136 ;; Defined at:
 15137 ;;		line 884 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  address         1    wreg     unsigned char 
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;  address         1    2[BANK0 ] unsigned char 
 15142 ;;  ret             1    3[BANK0 ] unsigned char 
 15143 ;;  i               1    1[BANK0 ] unsigned char 
 15144 ;; Return value:  Size  Location     Type
 15145 ;;                  1    wreg      unsigned char 
 15146 ;; Registers used:
 15147 ;;		wreg, status,2
 15148 ;; Tracked objects:
 15149 ;;		On entry : 0/0
 15150 ;;		On exit  : 0/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;Total ram usage:        4 bytes
 15158 ;; Hardware stack levels used:    1
 15159 ;; Hardware stack levels required when called:    4
 15160 ;; This function calls:
 15161 ;;		Nothing
 15162 ;; This function is called by:
 15163 ;;		_Flash_Memory_Initialization
 15164 ;;		_Flash_Memory_Modify
 15165 ;; This function uses a non-reentrant model
 15166 ;;
 15167                           
 15168                           
 15169                           ;psect for function _Flash_Memory_Read
 15170  25E8                     _Flash_Memory_Read:	
 15171                           
 15172                           ;incstack = 0
 15173                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 15174                           ;Flash_Memory_Read@address stored from wreg
 15175  25E8  0020               	movlb	0	; select bank0
 15176  25E9  00A2               	movwf	Flash_Memory_Read@address
 15177                           
 15178                           ;MCU_B1.c: 886: char i,ret=0;
 15179  25EA  01A3               	clrf	Flash_Memory_Read@ret
 15180                           
 15181                           ;MCU_B1.c: 887: PMADRH=0x30;
 15182  25EB  3030               	movlw	48
 15183  25EC  0023               	movlb	3	; select bank3
 15184  25ED  0092               	movwf	18	;volatile
 15185                           
 15186                           ;MCU_B1.c: 888: PMADRL=address;
 15187  25EE  0020               	movlb	0	; select bank0
 15188  25EF  0822               	movf	Flash_Memory_Read@address,w
 15189  25F0  0023               	movlb	3	; select bank3
 15190  25F1  0091               	movwf	17	;volatile
 15191                           
 15192                           ;MCU_B1.c: 889: CFGS=0;
 15193  25F2  1315               	bcf	21,6	;volatile
 15194                           
 15195                           ;MCU_B1.c: 890: RD=1;
 15196  25F3  1415               	bsf	21,0	;volatile
 15197                           
 15198                           ;MCU_B1.c: 891: i=PMDATH;
 15199  25F4  0814               	movf	20,w	;volatile
 15200  25F5  0020               	movlb	0	; select bank0
 15201  25F6  00A0               	movwf	??_Flash_Memory_Read
 15202  25F7  0820               	movf	??_Flash_Memory_Read,w
 15203  25F8  00A1               	movwf	Flash_Memory_Read@i
 15204                           
 15205                           ;MCU_B1.c: 892: ret=PMDATL;
 15206  25F9  0023               	movlb	3	; select bank3
 15207  25FA  0813               	movf	19,w	;volatile
 15208  25FB  0020               	movlb	0	; select bank0
 15209  25FC  00A0               	movwf	??_Flash_Memory_Read
 15210  25FD  0820               	movf	??_Flash_Memory_Read,w
 15211  25FE  00A3               	movwf	Flash_Memory_Read@ret
 15212                           
 15213                           ;MCU_B1.c: 893: return ret;
 15214  25FF  0823               	movf	Flash_Memory_Read@ret,w
 15215  2600  0008               	return
 15216  2601                     __end_of_Flash_Memory_Read:	
 15217                           
 15218                           	psect	text85
 15219  2345                     __ptext85:	
 15220 ;; *************** function _DimmerLights_Main *****************
 15221 ;; Defined at:
 15222 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15223 ;; Parameters:    Size  Location     Type
 15224 ;;		None
 15225 ;; Auto vars:     Size  Location     Type
 15226 ;;		None
 15227 ;; Return value:  Size  Location     Type
 15228 ;;		None               void
 15229 ;; Registers used:
 15230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15231 ;; Tracked objects:
 15232 ;;		On entry : 0/0
 15233 ;;		On exit  : 0/0
 15234 ;;		Unchanged: 0/0
 15235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;Total ram usage:        0 bytes
 15241 ;; Hardware stack levels used:    1
 15242 ;; Hardware stack levels required when called:   10
 15243 ;; This function calls:
 15244 ;;		_DimmerLights_Close
 15245 ;;		_setDimmerLights_Main
 15246 ;; This function is called by:
 15247 ;;		_main
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _DimmerLights_Main
 15253  2345                     _DimmerLights_Main:	
 15254                           
 15255                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 15256                           
 15257                           ;incstack = 0
 15258                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15259  2345  3001               	movlw	1
 15260  2346  3193  2377  31A3   	fcall	_setDimmerLights_Main
 15261                           
 15262                           ;Dimmer_B1.c: 121: setDimmerLights_Main(2);
 15263  2349  3002               	movlw	2
 15264  234A  3193  2377  31A3   	fcall	_setDimmerLights_Main
 15265                           
 15266                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 15267  234D  31A6  2634         	fcall	_DimmerLights_Close
 15268  234F  0008               	return
 15269  2350                     __end_of_DimmerLights_Main:	
 15270                           
 15271                           	psect	text86
 15272  1377                     __ptext86:	
 15273 ;; *************** function _setDimmerLights_Main *****************
 15274 ;; Defined at:
 15275 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;  lights          1    wreg     unsigned char 
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;  lights          1   70[BANK0 ] unsigned char 
 15280 ;;  clear           1   69[BANK0 ] unsigned char 
 15281 ;; Return value:  Size  Location     Type
 15282 ;;		None               void
 15283 ;; Registers used:
 15284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;Total ram usage:        2 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:    9
 15297 ;; This function calls:
 15298 ;;		_DimmerLightsPointSelect
 15299 ;;		_setBuz
 15300 ;;		_setDimmerLights
 15301 ;;		_setDimmerLights_Adj
 15302 ;; This function is called by:
 15303 ;;		_DimmerLights_Main
 15304 ;; This function uses a non-reentrant model
 15305 ;;
 15306                           
 15307                           
 15308                           ;psect for function _setDimmerLights_Main
 15309  1377                     _setDimmerLights_Main:	
 15310                           
 15311                           ;incstack = 0
 15312                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15313                           ;setDimmerLights_Main@lights stored from wreg
 15314  1377  0020               	movlb	0	; select bank0
 15315  1378  00E6               	movwf	setDimmerLights_Main@lights
 15316                           
 15317                           ;Dimmer_B1.c: 133: char clear=1;
 15318  1379  01E5               	clrf	setDimmerLights_Main@clear
 15319  137A  0AE5               	incf	setDimmerLights_Main@clear,f
 15320                           
 15321                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 15322  137B  0866               	movf	setDimmerLights_Main@lights,w
 15323  137C  31A4  24B8  3193   	fcall	_DimmerLightsPointSelect
 15324                           
 15325                           ;Dimmer_B1.c: 152: if(lights == 1)
 15326  137F  0020               	movlb	0	; select bank0
 15327  1380  0866               	movf	setDimmerLights_Main@lights,w
 15328  1381  3A01               	xorlw	1
 15329  1382  1D03               	skipz
 15330  1383  2B86               	goto	l9484
 15331                           
 15332                           ;Dimmer_B1.c: 153: {
 15333                           ;Dimmer_B1.c: 154: clear=(!DimmerLights22->Clear)?0:1;
 15334  1384  087A               	movf	_DimmerLights22,w
 15335  1385  2B8B               	goto	L15
 15336  1386                     l9484:	
 15337                           ;Dimmer_B1.c: 155: }
 15338                           
 15339                           
 15340                           ;Dimmer_B1.c: 156: else if(lights == 2)
 15341  1386  0866               	movf	setDimmerLights_Main@lights,w
 15342  1387  3A02               	xorlw	2
 15343  1388  1D03               	skipz
 15344  1389  2B93               	goto	l9488
 15345                           
 15346                           ;Dimmer_B1.c: 157: {
 15347                           ;Dimmer_B1.c: 158: clear=(!DimmerLights11->Clear)?0:1;
 15348  138A  0879               	movf	_DimmerLights11,w
 15349  138B                     L15:	
 15350  138B  3E0C               	addlw	12
 15351  138C  0086               	movwf	6
 15352  138D  3001               	movlw	1	; select bank2/3
 15353  138E  0087               	movwf	7
 15354  138F  3000               	movlw	0
 15355  1390  1801               	btfsc	1,0
 15356  1391  3001               	movlw	1
 15357  1392  00E5               	movwf	setDimmerLights_Main@clear
 15358  1393                     l9488:	
 15359                           
 15360                           ;Dimmer_B1.c: 159: }
 15361                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 15362  1393  086C               	movf	_DimmerLights,w
 15363  1394  3E09               	addlw	9
 15364  1395  0086               	movwf	6
 15365  1396  3001               	movlw	1	; select bank2/3
 15366  1397  0087               	movwf	7
 15367  1398  1C81               	btfss	1,1
 15368  1399  2BC9               	goto	l9506
 15369                           
 15370                           ;Dimmer_B1.c: 163: {
 15371                           ;Dimmer_B1.c: 164: if(clear)
 15372  139A  0865               	movf	setDimmerLights_Main@clear,w
 15373  139B  1903               	btfsc	3,2
 15374  139C  0008               	return
 15375                           
 15376                           ;Dimmer_B1.c: 165: {
 15377                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 15378  139D  086C               	movf	_DimmerLights,w
 15379  139E  3E09               	addlw	9
 15380  139F  0086               	movwf	6
 15381  13A0  3001               	movlw	1	; select bank2/3
 15382  13A1  0087               	movwf	7
 15383  13A2  1C01               	btfss	1,0
 15384  13A3  2BB7               	goto	l9500
 15385                           
 15386                           ;Dimmer_B1.c: 167: {
 15387                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15388  13A4  086C               	movf	_DimmerLights,w
 15389  13A5  3E09               	addlw	9
 15390  13A6  0086               	movwf	6
 15391  13A7  3001               	movlw	1	; select bank2/3
 15392  13A8  0087               	movwf	7
 15393  13A9  1081               	bcf	1,1
 15394                           
 15395                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 15396  13AA  01A4               	clrf	setDimmerLights@status
 15397  13AB  0AA4               	incf	setDimmerLights@status,f
 15398  13AC  0866               	movf	setDimmerLights_Main@lights,w
 15399  13AD  3196  262E         	fcall	_setDimmerLights
 15400                           
 15401                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15402  13AF  0020               	movlb	0	; select bank0
 15403  13B0  086C               	movf	_DimmerLights,w
 15404  13B1  3E0C               	addlw	12
 15405  13B2  0086               	movwf	6
 15406  13B3  3001               	movlw	1	; select bank2/3
 15407  13B4  0087               	movwf	7
 15408  13B5  1001               	bcf	1,0
 15409                           
 15410                           ;Dimmer_B1.c: 174: }
 15411  13B6  0008               	return
 15412  13B7                     l9500:	
 15413                           
 15414                           ;Dimmer_B1.c: 175: else
 15415                           ;Dimmer_B1.c: 176: {
 15416                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15417  13B7  086C               	movf	_DimmerLights,w
 15418  13B8  3E09               	addlw	9
 15419  13B9  0086               	movwf	6
 15420  13BA  3001               	movlw	1	; select bank2/3
 15421  13BB  0087               	movwf	7
 15422  13BC  1081               	bcf	1,1
 15423                           
 15424                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15425  13BD  01A4               	clrf	setDimmerLights@status
 15426  13BE  0866               	movf	setDimmerLights_Main@lights,w
 15427  13BF  3196  262E         	fcall	_setDimmerLights
 15428                           
 15429                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15430  13C1  0020               	movlb	0	; select bank0
 15431  13C2  086C               	movf	_DimmerLights,w
 15432  13C3  3E0C               	addlw	12
 15433  13C4  0086               	movwf	6
 15434  13C5  3001               	movlw	1	; select bank2/3
 15435  13C6  0087               	movwf	7
 15436  13C7  1001               	bcf	1,0
 15437                           
 15438                           ;Dimmer_B1.c: 183: }
 15439                           ;Dimmer_B1.c: 184: }
 15440                           ;Dimmer_B1.c: 185: }
 15441  13C8  0008               	return
 15442  13C9                     l9506:	
 15443                           
 15444                           ;Dimmer_B1.c: 186: else
 15445                           ;Dimmer_B1.c: 187: {
 15446                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15447  13C9  086C               	movf	_DimmerLights,w
 15448  13CA  3E09               	addlw	9
 15449  13CB  0086               	movwf	6
 15450  13CC  3001               	movlw	1	; select bank2/3
 15451  13CD  0087               	movwf	7
 15452  13CE  1D81               	btfss	1,3
 15453  13CF  0008               	return
 15454                           
 15455                           ;Dimmer_B1.c: 189: {
 15456                           ;Dimmer_B1.c: 190: if(clear)
 15457  13D0  0865               	movf	setDimmerLights_Main@clear,w
 15458  13D1  1903               	btfsc	3,2
 15459  13D2  0008               	return
 15460                           
 15461                           ;Dimmer_B1.c: 191: {
 15462                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15463  13D3  0866               	movf	setDimmerLights_Main@lights,w
 15464  13D4  31A4  24B8  3193   	fcall	_DimmerLightsPointSelect
 15465                           
 15466                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15467  13D7  0020               	movlb	0	; select bank0
 15468  13D8  086C               	movf	_DimmerLights,w
 15469  13D9  3E09               	addlw	9
 15470  13DA  0086               	movwf	6
 15471  13DB  3001               	movlw	1	; select bank2/3
 15472  13DC  0087               	movwf	7
 15473  13DD  1181               	bcf	1,3
 15474                           
 15475                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15476  13DE  086C               	movf	_DimmerLights,w
 15477  13DF  3E09               	addlw	9
 15478  13E0  0086               	movwf	6
 15479  13E1  3001               	movlw	1	; select bank2/3
 15480  13E2  0087               	movwf	7
 15481  13E3  1D01               	btfss	1,2
 15482  13E4  2BF5               	goto	l9518
 15483                           
 15484                           ;Dimmer_B1.c: 195: {
 15485                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15486  13E5  01E2               	clrf	setDimmerLights_Adj@status
 15487  13E6  0AE2               	incf	setDimmerLights_Adj@status,f
 15488  13E7  0866               	movf	setDimmerLights_Main@lights,w
 15489  13E8  319B  23F8  3193   	fcall	_setDimmerLights_Adj
 15490                           
 15491                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15492  13EB  3064               	movlw	100
 15493  13EC  0020               	movlb	0	; select bank0
 15494  13ED  00A6               	movwf	setBuz@time
 15495  13EE  3000               	movlw	0
 15496  13EF  00A7               	movwf	setBuz@time+1
 15497  13F0  3001               	movlw	1
 15498  13F1  3192  220A         	fcall	_setBuz
 15499                           
 15500                           ;Dimmer_B1.c: 198: }
 15501  13F3  0020               	movlb	0	; select bank0
 15502  13F4  0008               	return
 15503  13F5                     l9518:	
 15504                           
 15505                           ;Dimmer_B1.c: 199: else
 15506                           ;Dimmer_B1.c: 200: {
 15507                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15508  13F5  0020               	movlb	0	; select bank0
 15509  13F6  01E2               	clrf	setDimmerLights_Adj@status
 15510  13F7  0866               	movf	setDimmerLights_Main@lights,w
 15511  13F8  319B  23F8         	fcall	_setDimmerLights_Adj
 15512  13FA  0020               	movlb	0	; select bank0
 15513  13FB  0008               	return
 15514  13FC                     __end_of_setDimmerLights_Main:	
 15515                           
 15516                           	psect	text87
 15517  1BF8                     __ptext87:	
 15518 ;; *************** function _setDimmerLights_Adj *****************
 15519 ;; Defined at:
 15520 ;;		line 388 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;  lights          1    wreg     unsigned char 
 15523 ;;  status          1   66[BANK0 ] unsigned char 
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;  lights          1   68[BANK0 ] unsigned char 
 15526 ;; Return value:  Size  Location     Type
 15527 ;;		None               void
 15528 ;; Registers used:
 15529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;Total ram usage:        3 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    8
 15542 ;; This function calls:
 15543 ;;		_DimmerLightsPointSelect
 15544 ;;		_setLoad_StatusOff
 15545 ;;		_setRF_DimmerLights
 15546 ;;		_setTxData
 15547 ;; This function is called by:
 15548 ;;		_setDimmerLights_Main
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           
 15553                           ;psect for function _setDimmerLights_Adj
 15554  1BF8                     _setDimmerLights_Adj:	
 15555                           
 15556                           ;incstack = 0
 15557                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15558                           ;setDimmerLights_Adj@lights stored from wreg
 15559  1BF8  0020               	movlb	0	; select bank0
 15560  1BF9  00E4               	movwf	setDimmerLights_Adj@lights
 15561                           
 15562                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15563  1BFA  0864               	movf	setDimmerLights_Adj@lights,w
 15564  1BFB  31A4  24B8  319B   	fcall	_DimmerLightsPointSelect
 15565                           
 15566                           ;Dimmer_B1.c: 391: if(status)
 15567  1BFE  0020               	movlb	0	; select bank0
 15568  1BFF  0862               	movf	setDimmerLights_Adj@status,w
 15569  1C00  1903               	btfsc	3,2
 15570  1C01  2C0D               	goto	l9192
 15571                           
 15572                           ;Dimmer_B1.c: 392: {
 15573                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15574  1C02  086C               	movf	_DimmerLights,w
 15575  1C03  0086               	movwf	6
 15576  1C04  3001               	movlw	1	; select bank2/3
 15577  1C05  0087               	movwf	7
 15578  1C06  1581               	bsf	1,3
 15579                           
 15580                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15581  1C07  086C               	movf	_DimmerLights,w
 15582  1C08  0086               	movwf	6
 15583  1C09  3001               	movlw	1	; select bank2/3
 15584  1C0A  0087               	movwf	7
 15585  1C0B  1481               	bsf	1,1
 15586                           
 15587                           ;Dimmer_B1.c: 395: }
 15588  1C0C  0008               	return
 15589  1C0D                     l9192:	
 15590                           
 15591                           ;Dimmer_B1.c: 396: else
 15592                           ;Dimmer_B1.c: 397: {
 15593                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15594  1C0D  086C               	movf	_DimmerLights,w
 15595  1C0E  0086               	movwf	6
 15596  1C0F  3001               	movlw	1	; select bank2/3
 15597  1C10  0087               	movwf	7
 15598  1C11  1D81               	btfss	1,3
 15599  1C12  0008               	return
 15600                           
 15601                           ;Dimmer_B1.c: 399: {
 15602                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15603  1C13  086C               	movf	_DimmerLights,w
 15604  1C14  0086               	movwf	6
 15605  1C15  3001               	movlw	1	; select bank2/3
 15606  1C16  0087               	movwf	7
 15607  1C17  1081               	bcf	1,1
 15608                           
 15609                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15610  1C18  086C               	movf	_DimmerLights,w
 15611  1C19  0086               	movwf	6
 15612  1C1A  3001               	movlw	1	; select bank2/3
 15613  1C1B  0087               	movwf	7
 15614  1C1C  1181               	bcf	1,3
 15615                           
 15616                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15617  1C1D  01A0               	clrf	setLoad_StatusOff@command
 15618  1C1E  0AA0               	incf	setLoad_StatusOff@command,f
 15619  1C1F  3000               	movlw	0
 15620  1C20  3199  2136  319B   	fcall	_setLoad_StatusOff
 15621                           
 15622                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15623  1C23  0020               	movlb	0	; select bank0
 15624  1C24  086C               	movf	_DimmerLights,w
 15625  1C25  3E04               	addlw	4
 15626  1C26  0086               	movwf	6
 15627  1C27  3001               	movlw	1	; select bank2/3
 15628  1C28  0087               	movwf	7
 15629  1C29  0801               	movf	1,w
 15630  1C2A  00E3               	movwf	??_setDimmerLights_Adj
 15631  1C2B  086C               	movf	_DimmerLights,w
 15632  1C2C  3E05               	addlw	5
 15633  1C2D  0086               	movwf	6
 15634  1C2E  3001               	movlw	1	; select bank2/3
 15635  1C2F  0087               	movwf	7
 15636  1C30  0863               	movf	??_setDimmerLights_Adj,w
 15637  1C31  0081               	movwf	1
 15638                           
 15639                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15640  1C32  01DD               	clrf	setRF_DimmerLights@on
 15641  1C33  0ADD               	incf	setRF_DimmerLights@on,f
 15642  1C34  0864               	movf	setDimmerLights_Adj@lights,w
 15643  1C35  319F  2795  319B   	fcall	_setRF_DimmerLights
 15644                           
 15645                           ;Dimmer_B1.c: 412: setTxData(1);
 15646  1C38  3001               	movlw	1
 15647  1C39  3189  21BD         	fcall	_setTxData
 15648  1C3B  0008               	return
 15649  1C3C                     __end_of_setDimmerLights_Adj:	
 15650                           
 15651                           	psect	text88
 15652  1936                     __ptext88:	
 15653 ;; *************** function _setLoad_StatusOff *****************
 15654 ;; Defined at:
 15655 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  lights          1    wreg     unsigned char 
 15658 ;;  command         1    0[BANK0 ] unsigned char 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;  lights          1    1[BANK0 ] unsigned char 
 15661 ;; Return value:  Size  Location     Type
 15662 ;;		None               void
 15663 ;; Registers used:
 15664 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;Total ram usage:        2 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    4
 15677 ;; This function calls:
 15678 ;;		Nothing
 15679 ;; This function is called by:
 15680 ;;		_setDimmerLights_ERROR
 15681 ;;		_setDimmerLights_Adj
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           
 15686                           ;psect for function _setLoad_StatusOff
 15687  1936                     _setLoad_StatusOff:	
 15688                           
 15689                           ;incstack = 0
 15690                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15691                           ;setLoad_StatusOff@lights stored from wreg
 15692  1936  0020               	movlb	0	; select bank0
 15693  1937  00A1               	movwf	setLoad_StatusOff@lights
 15694                           
 15695                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 15696  1938  086E               	movf	_Load,w
 15697  1939  3E46               	addlw	70
 15698  193A  0086               	movwf	6
 15699  193B  3002               	movlw	2	; select bank4/5
 15700  193C  0087               	movwf	7
 15701  193D  0820               	movf	setLoad_StatusOff@command,w
 15702  193E  1081               	bcf	1,1
 15703  193F  1D03               	skipz
 15704  1940  1481               	bsf	1,1
 15705                           
 15706                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 15707  1941  086E               	movf	_Load,w
 15708  1942  3E42               	addlw	66
 15709  1943  0086               	movwf	6
 15710  1944  3002               	movlw	2	; select bank4/5
 15711  1945  0087               	movwf	7
 15712  1946  3002               	movlw	2
 15713  1947  0281               	subwf	1,f
 15714                           
 15715                           ;OverLoad_B1.c: 326: if(lights == 1)
 15716  1948  0821               	movf	setLoad_StatusOff@lights,w
 15717  1949  3A01               	xorlw	1
 15718  194A  1D03               	skipz
 15719  194B  2952               	goto	l8852
 15720                           
 15721                           ;OverLoad_B1.c: 327: {
 15722                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 15723  194C  086E               	movf	_Load,w
 15724  194D  3E43               	addlw	67
 15725  194E  0086               	movwf	6
 15726  194F  3002               	movlw	2	; select bank4/5
 15727  1950  0087               	movwf	7
 15728  1951  0181               	clrf	1
 15729  1952                     l8852:	
 15730                           
 15731                           ;OverLoad_B1.c: 329: }
 15732                           ;OverLoad_B1.c: 330: if(lights == 2)
 15733  1952  0821               	movf	setLoad_StatusOff@lights,w
 15734  1953  3A02               	xorlw	2
 15735  1954  1D03               	skipz
 15736  1955  295C               	goto	l8856
 15737                           
 15738                           ;OverLoad_B1.c: 331: {
 15739                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 15740  1956  086E               	movf	_Load,w
 15741  1957  3E44               	addlw	68
 15742  1958  0086               	movwf	6
 15743  1959  3002               	movlw	2	; select bank4/5
 15744  195A  0087               	movwf	7
 15745  195B  0181               	clrf	1
 15746  195C                     l8856:	
 15747                           
 15748                           ;OverLoad_B1.c: 333: }
 15749                           ;OverLoad_B1.c: 334: if(lights == 3)
 15750  195C  0821               	movf	setLoad_StatusOff@lights,w
 15751  195D  3A03               	xorlw	3
 15752  195E  1D03               	skipz
 15753  195F  0008               	return
 15754                           
 15755                           ;OverLoad_B1.c: 335: {
 15756                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 15757  1960  086E               	movf	_Load,w
 15758  1961  3E45               	addlw	69
 15759  1962  0086               	movwf	6
 15760  1963  3002               	movlw	2	; select bank4/5
 15761  1964  0087               	movwf	7
 15762  1965  0181               	clrf	1
 15763  1966  0008               	return
 15764  1967                     __end_of_setLoad_StatusOff:	
 15765                           
 15766                           	psect	text89
 15767  162E                     __ptext89:	
 15768 ;; *************** function _setDimmerLights *****************
 15769 ;; Defined at:
 15770 ;;		line 330 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15771 ;; Parameters:    Size  Location     Type
 15772 ;;  lights          1    wreg     unsigned char 
 15773 ;;  status          1    4[BANK0 ] unsigned char 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  lights          1    6[BANK0 ] unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;		None               void
 15778 ;; Registers used:
 15779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15785 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;Total ram usage:        3 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    6
 15792 ;; This function calls:
 15793 ;;		_DimmerLightsPointSelect
 15794 ;;		_setLED
 15795 ;;		_setLoad_Count
 15796 ;;		_setLoad_StatusOn
 15797 ;; This function is called by:
 15798 ;;		_setDimmerLights_Main
 15799 ;;		_setControl_Lights_Table
 15800 ;; This function uses a non-reentrant model
 15801 ;;
 15802                           
 15803                           
 15804                           ;psect for function _setDimmerLights
 15805  162E                     _setDimmerLights:	
 15806                           
 15807                           ;incstack = 0
 15808                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15809                           ;setDimmerLights@lights stored from wreg
 15810  162E  0020               	movlb	0	; select bank0
 15811  162F  00A6               	movwf	setDimmerLights@lights
 15812                           
 15813                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15814  1630  0826               	movf	setDimmerLights@lights,w
 15815  1631  31A4  24B8  3196   	fcall	_DimmerLightsPointSelect
 15816                           
 15817                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15818  1634  0020               	movlb	0	; select bank0
 15819  1635  0826               	movf	setDimmerLights@lights,w
 15820  1636  00A5               	movwf	??_setDimmerLights
 15821  1637  0021               	movlb	1	; select bank1
 15822  1638  0A39               	incf	_Dimmer^(0+128),w
 15823  1639  0086               	movwf	6
 15824  163A  0187               	clrf	7
 15825  163B  0020               	movlb	0	; select bank0
 15826  163C  0825               	movf	??_setDimmerLights,w
 15827  163D  0081               	movwf	1
 15828                           
 15829                           ;Dimmer_B1.c: 334: if(status)
 15830  163E  0824               	movf	setDimmerLights@status,w
 15831  163F  1903               	btfsc	3,2
 15832  1640  2E96               	goto	l8948
 15833                           
 15834                           ;Dimmer_B1.c: 335: {
 15835                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15836  1641  086C               	movf	_DimmerLights,w
 15837  1642  0086               	movwf	6
 15838  1643  3001               	movlw	1	; select bank2/3
 15839  1644  0087               	movwf	7
 15840  1645  1681               	bsf	1,5
 15841                           
 15842                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15843  1646  01A2               	clrf	setLED@command
 15844  1647  0826               	movf	setDimmerLights@lights,w
 15845  1648  3188  2002  3196   	fcall	_setLED
 15846                           
 15847                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15848  164B  3000               	movlw	0
 15849  164C  31A5  2530  3196   	fcall	_setLoad_Count
 15850                           
 15851                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15852  164F  0020               	movlb	0	; select bank0
 15853  1650  086C               	movf	_DimmerLights,w
 15854  1651  0086               	movwf	6
 15855  1652  3001               	movlw	1	; select bank2/3
 15856  1653  0087               	movwf	7
 15857  1654  1481               	bsf	1,1
 15858                           
 15859                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15860  1655  3003               	movlw	3
 15861  1656  00A5               	movwf	??_setDimmerLights
 15862  1657  086C               	movf	_DimmerLights,w
 15863  1658  3E02               	addlw	2
 15864  1659  0086               	movwf	6
 15865  165A  3001               	movlw	1	; select bank2/3
 15866  165B  0087               	movwf	7
 15867  165C  0825               	movf	??_setDimmerLights,w
 15868  165D  0081               	movwf	1
 15869                           
 15870                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15871  165E  086C               	movf	_DimmerLights,w
 15872  165F  0086               	movwf	6
 15873  1660  3001               	movlw	1	; select bank2/3
 15874  1661  0087               	movwf	7
 15875  1662  1B01               	btfsc	1,6
 15876  1663  0008               	return
 15877                           
 15878                           ;Dimmer_B1.c: 345: {
 15879                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15880  1664  086C               	movf	_DimmerLights,w
 15881  1665  0086               	movwf	6
 15882  1666  3001               	movlw	1	; select bank2/3
 15883  1667  0087               	movwf	7
 15884  1668  1701               	bsf	1,6
 15885                           
 15886                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15887  1669  01A0               	clrf	setLoad_StatusOn@command
 15888  166A  0AA0               	incf	setLoad_StatusOn@command,f
 15889  166B  0826               	movf	setDimmerLights@lights,w
 15890  166C  3199  2198         	fcall	_setLoad_StatusOn
 15891                           
 15892                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15893  166E  0021               	movlb	1	; select bank1
 15894  166F  086B               	movf	_Memory^(0+128),w
 15895  1670  3E22               	addlw	34
 15896  1671  0086               	movwf	6
 15897  1672  3002               	movlw	2	; select bank4/5
 15898  1673  0087               	movwf	7
 15899  1674  1081               	bcf	1,1
 15900  1675  086B               	movf	_Memory^(0+128),w
 15901  1676  3E23               	addlw	35
 15902  1677  0086               	movwf	6
 15903  1678  3002               	movlw	2	; select bank4/5
 15904  1679  0087               	movwf	7
 15905  167A  3000               	movlw	0
 15906  167B  3FC0               	movwi [0]fsr1
 15907  167C  3FC1               	movwi [1]fsr1
 15908                           
 15909                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15910  167D  0020               	movlb	0	; select bank0
 15911  167E  086C               	movf	_DimmerLights,w
 15912  167F  3E05               	addlw	5
 15913  1680  0086               	movwf	6
 15914  1681  3001               	movlw	1	; select bank2/3
 15915  1682  0087               	movwf	7
 15916  1683  0801               	movf	1,w
 15917  1684  00A5               	movwf	??_setDimmerLights
 15918  1685  086C               	movf	_DimmerLights,w
 15919  1686  3E04               	addlw	4
 15920  1687  0086               	movwf	6
 15921  1688  3001               	movlw	1	; select bank2/3
 15922  1689  0087               	movwf	7
 15923  168A  0825               	movf	??_setDimmerLights,w
 15924  168B  0081               	movwf	1
 15925                           
 15926                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15927  168C  3043               	movlw	67
 15928  168D  00A5               	movwf	??_setDimmerLights
 15929  168E  086C               	movf	_DimmerLights,w
 15930  168F  3E04               	addlw	4
 15931  1690  0086               	movwf	6
 15932  1691  3001               	movlw	1	; select bank2/3
 15933  1692  0087               	movwf	7
 15934  1693  0825               	movf	??_setDimmerLights,w
 15935  1694  0081               	movwf	1
 15936                           
 15937                           ;Dimmer_B1.c: 357: }
 15938                           ;Dimmer_B1.c: 358: }
 15939  1695  0008               	return
 15940  1696                     l8948:	
 15941                           
 15942                           ;Dimmer_B1.c: 359: else
 15943                           ;Dimmer_B1.c: 360: {
 15944                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15945  1696  086C               	movf	_DimmerLights,w
 15946  1697  0086               	movwf	6
 15947  1698  3001               	movlw	1	; select bank2/3
 15948  1699  0087               	movwf	7
 15949  169A  1281               	bcf	1,5
 15950                           
 15951                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15952  169B  086C               	movf	_DimmerLights,w
 15953  169C  3E06               	addlw	6
 15954  169D  0086               	movwf	6
 15955  169E  3001               	movlw	1	; select bank2/3
 15956  169F  0087               	movwf	7
 15957  16A0  0801               	movf	1,w
 15958  16A1  00A5               	movwf	??_setDimmerLights
 15959  16A2  086C               	movf	_DimmerLights,w
 15960  16A3  3E04               	addlw	4
 15961  16A4  0086               	movwf	6
 15962  16A5  3001               	movlw	1	; select bank2/3
 15963  16A6  0087               	movwf	7
 15964  16A7  0825               	movf	??_setDimmerLights,w
 15965  16A8  0081               	movwf	1
 15966                           
 15967                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15968  16A9  086C               	movf	_DimmerLights,w
 15969  16AA  0086               	movwf	6
 15970  16AB  3001               	movlw	1	; select bank2/3
 15971  16AC  0087               	movwf	7
 15972  16AD  1481               	bsf	1,1
 15973                           
 15974                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15975  16AE  086C               	movf	_DimmerLights,w
 15976  16AF  0086               	movwf	6
 15977  16B0  3001               	movlw	1	; select bank2/3
 15978  16B1  0087               	movwf	7
 15979  16B2  1181               	bcf	1,3
 15980                           
 15981                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15982  16B3  086C               	movf	_DimmerLights,w
 15983  16B4  0086               	movwf	6
 15984  16B5  3001               	movlw	1	; select bank2/3
 15985  16B6  0087               	movwf	7
 15986  16B7  1201               	bcf	1,4
 15987                           
 15988                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15989  16B8  3003               	movlw	3
 15990  16B9  00A5               	movwf	??_setDimmerLights
 15991  16BA  086C               	movf	_DimmerLights,w
 15992  16BB  3E02               	addlw	2
 15993  16BC  0086               	movwf	6
 15994  16BD  3001               	movlw	1	; select bank2/3
 15995  16BE  0087               	movwf	7
 15996  16BF  0825               	movf	??_setDimmerLights,w
 15997  16C0  0081               	movwf	1
 15998  16C1  0008               	return
 15999  16C2                     __end_of_setDimmerLights:	
 16000                           
 16001                           	psect	text90
 16002  1998                     __ptext90:	
 16003 ;; *************** function _setLoad_StatusOn *****************
 16004 ;; Defined at:
 16005 ;;		line 304 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;  lights          1    wreg     unsigned char 
 16008 ;;  command         1    0[BANK0 ] unsigned char 
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;  lights          1    1[BANK0 ] unsigned char 
 16011 ;; Return value:  Size  Location     Type
 16012 ;;		None               void
 16013 ;; Registers used:
 16014 ;;		wreg, fsr1l, fsr1h
 16015 ;; Tracked objects:
 16016 ;;		On entry : 0/0
 16017 ;;		On exit  : 0/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16020 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;Total ram usage:        2 bytes
 16025 ;; Hardware stack levels used:    1
 16026 ;; Hardware stack levels required when called:    4
 16027 ;; This function calls:
 16028 ;;		Nothing
 16029 ;; This function is called by:
 16030 ;;		_setDimmerLights
 16031 ;; This function uses a non-reentrant model
 16032 ;;
 16033                           
 16034                           
 16035                           ;psect for function _setLoad_StatusOn
 16036  1998                     _setLoad_StatusOn:	
 16037                           
 16038                           ;incstack = 0
 16039                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 16040                           ;setLoad_StatusOn@lights stored from wreg
 16041  1998  0020               	movlb	0	; select bank0
 16042  1999  00A1               	movwf	setLoad_StatusOn@lights
 16043                           
 16044                           ;OverLoad_B1.c: 306: Load->GO=1;
 16045  199A  086E               	movf	_Load,w
 16046  199B  0086               	movwf	6
 16047  199C  3002               	movlw	2	; select bank4/5
 16048  199D  0087               	movwf	7
 16049  199E  1481               	bsf	1,1
 16050                           
 16051                           ;OverLoad_B1.c: 307: Load->StatusOn=command;
 16052  199F  086E               	movf	_Load,w
 16053  19A0  3E46               	addlw	70
 16054  19A1  0086               	movwf	6
 16055  19A2  3002               	movlw	2	; select bank4/5
 16056  19A3  0087               	movwf	7
 16057  19A4  0820               	movf	setLoad_StatusOn@command,w
 16058  19A5  1001               	bcf	1,0
 16059  19A6  1D03               	skipz
 16060  19A7  1401               	bsf	1,0
 16061                           
 16062                           ;OverLoad_B1.c: 309: if(lights == 1)
 16063  19A8  0821               	movf	setLoad_StatusOn@lights,w
 16064  19A9  3A01               	xorlw	1
 16065  19AA  1D03               	skipz
 16066  19AB  29B3               	goto	l8916
 16067                           
 16068                           ;OverLoad_B1.c: 310: {
 16069                           ;OverLoad_B1.c: 311: Load->Lights1Status=1;
 16070  19AC  086E               	movf	_Load,w
 16071  19AD  3E43               	addlw	67
 16072  19AE  0086               	movwf	6
 16073  19AF  3002               	movlw	2	; select bank4/5
 16074  19B0  0087               	movwf	7
 16075  19B1  0181               	clrf	1
 16076  19B2  0A81               	incf	1,f
 16077  19B3                     l8916:	
 16078                           
 16079                           ;OverLoad_B1.c: 312: }
 16080                           ;OverLoad_B1.c: 313: if(lights == 2)
 16081  19B3  0821               	movf	setLoad_StatusOn@lights,w
 16082  19B4  3A02               	xorlw	2
 16083  19B5  1D03               	skipz
 16084  19B6  29BE               	goto	l8920
 16085                           
 16086                           ;OverLoad_B1.c: 314: {
 16087                           ;OverLoad_B1.c: 315: Load->Lights2Status=1;
 16088  19B7  086E               	movf	_Load,w
 16089  19B8  3E44               	addlw	68
 16090  19B9  0086               	movwf	6
 16091  19BA  3002               	movlw	2	; select bank4/5
 16092  19BB  0087               	movwf	7
 16093  19BC  0181               	clrf	1
 16094  19BD  0A81               	incf	1,f
 16095  19BE                     l8920:	
 16096                           
 16097                           ;OverLoad_B1.c: 316: }
 16098                           ;OverLoad_B1.c: 317: if(lights == 3)
 16099  19BE  0821               	movf	setLoad_StatusOn@lights,w
 16100  19BF  3A03               	xorlw	3
 16101  19C0  1D03               	skipz
 16102  19C1  0008               	return
 16103                           
 16104                           ;OverLoad_B1.c: 318: {
 16105                           ;OverLoad_B1.c: 319: Load->Lights3Status=1;
 16106  19C2  086E               	movf	_Load,w
 16107  19C3  3E45               	addlw	69
 16108  19C4  0086               	movwf	6
 16109  19C5  3002               	movlw	2	; select bank4/5
 16110  19C6  0087               	movwf	7
 16111  19C7  0181               	clrf	1
 16112  19C8  0A81               	incf	1,f
 16113  19C9  0008               	return
 16114  19CA                     __end_of_setLoad_StatusOn:	
 16115                           
 16116                           	psect	text91
 16117  2530                     __ptext91:	
 16118 ;; *************** function _setLoad_Count *****************
 16119 ;; Defined at:
 16120 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;  command         1    wreg     unsigned char 
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;  command         1    1[BANK0 ] unsigned char 
 16125 ;; Return value:  Size  Location     Type
 16126 ;;		None               void
 16127 ;; Registers used:
 16128 ;;		wreg, fsr1l, fsr1h
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;Total ram usage:        2 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:    4
 16141 ;; This function calls:
 16142 ;;		Nothing
 16143 ;; This function is called by:
 16144 ;;		_setDimmerLights
 16145 ;; This function uses a non-reentrant model
 16146 ;;
 16147                           
 16148                           
 16149                           ;psect for function _setLoad_Count
 16150  2530                     _setLoad_Count:	
 16151                           
 16152                           ;incstack = 0
 16153                           ; Regs used in _setLoad_Count: [wregfsr1]
 16154                           ;setLoad_Count@command stored from wreg
 16155  2530  0020               	movlb	0	; select bank0
 16156  2531  00A1               	movwf	setLoad_Count@command
 16157                           
 16158                           ;OverLoad_B1.c: 291: Load->Count=command;
 16159  2532  0821               	movf	setLoad_Count@command,w
 16160  2533  00A0               	movwf	??_setLoad_Count
 16161  2534  086E               	movf	_Load,w
 16162  2535  3E3A               	addlw	58
 16163  2536  0086               	movwf	6
 16164  2537  3002               	movlw	2	; select bank4/5
 16165  2538  0087               	movwf	7
 16166  2539  0820               	movf	??_setLoad_Count,w
 16167  253A  0081               	movwf	1
 16168                           
 16169                           ;OverLoad_B1.c: 292: Load->SafeCount=command;
 16170  253B  0821               	movf	setLoad_Count@command,w
 16171  253C  00A0               	movwf	??_setLoad_Count
 16172  253D  086E               	movf	_Load,w
 16173  253E  3E42               	addlw	66
 16174  253F  0086               	movwf	6
 16175  2540  3002               	movlw	2	; select bank4/5
 16176  2541  0087               	movwf	7
 16177  2542  0820               	movf	??_setLoad_Count,w
 16178  2543  0081               	movwf	1
 16179  2544  0008               	return
 16180  2545                     __end_of_setLoad_Count:	
 16181                           
 16182                           	psect	text92
 16183  0802                     __ptext92:	
 16184 ;; *************** function _setLED *****************
 16185 ;; Defined at:
 16186 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16187 ;; Parameters:    Size  Location     Type
 16188 ;;  led             1    wreg     unsigned char 
 16189 ;;  command         1    2[BANK0 ] unsigned char 
 16190 ;; Auto vars:     Size  Location     Type
 16191 ;;  led             1    3[BANK0 ] unsigned char 
 16192 ;; Return value:  Size  Location     Type
 16193 ;;		None               void
 16194 ;; Registers used:
 16195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16196 ;; Tracked objects:
 16197 ;;		On entry : 0/0
 16198 ;;		On exit  : 0/0
 16199 ;;		Unchanged: 0/0
 16200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16201 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;Total ram usage:        2 bytes
 16206 ;; Hardware stack levels used:    1
 16207 ;; Hardware stack levels required when called:    5
 16208 ;; This function calls:
 16209 ;;		_LedPointSelect
 16210 ;; This function is called by:
 16211 ;;		_setDimmerLights_ERROR
 16212 ;;		_setDimmerLights
 16213 ;;		_setLED_Initialization
 16214 ;;		_setLoad_Exceptions
 16215 ;;		_setOverTemp_Exceptions
 16216 ;;		_setPowerFault_Exceptions
 16217 ;;		_setSw_Initialization
 16218 ;; This function uses a non-reentrant model
 16219 ;;
 16220                           
 16221                           
 16222                           ;psect for function _setLED
 16223  0802                     _setLED:	
 16224                           
 16225                           ;incstack = 0
 16226                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16227                           ;setLED@led stored from wreg
 16228  0802  0020               	movlb	0	; select bank0
 16229  0803  00A3               	movwf	setLED@led
 16230                           
 16231                           ;LED_B1.c: 76: LedPointSelect(led);
 16232  0804  0823               	movf	setLED@led,w
 16233  0805  31A7  2722  3188   	fcall	_LedPointSelect
 16234                           
 16235                           ;LED_B1.c: 77: if(command == 0)
 16236  0808  0020               	movlb	0	; select bank0
 16237  0809  08A2               	movf	setLED@command,f
 16238  080A  1D03               	skipz
 16239  080B  281E               	goto	l8876
 16240                           
 16241                           ;LED_B1.c: 78: {
 16242                           ;LED_B1.c: 80: if(led == 1)
 16243  080C  0823               	movf	setLED@led,w
 16244  080D  3A01               	xorlw	1
 16245  080E  1D03               	skipz
 16246  080F  2812               	goto	l8868
 16247                           
 16248                           ;LED_B1.c: 81: {
 16249                           ;LED_B1.c: 85: RA3=1;
 16250  0810  158C               	bsf	12,3	;volatile
 16251                           
 16252                           ;LED_B1.c: 87: }
 16253  0811  0008               	return
 16254  0812                     l8868:	
 16255                           
 16256                           ;LED_B1.c: 90: else if(led == 2)
 16257  0812  0823               	movf	setLED@led,w
 16258  0813  3A02               	xorlw	2
 16259  0814  1D03               	skipz
 16260  0815  2818               	goto	l8872
 16261                           
 16262                           ;LED_B1.c: 91: {
 16263                           ;LED_B1.c: 95: RC7=1;
 16264  0816  178E               	bsf	14,7	;volatile
 16265                           
 16266                           ;LED_B1.c: 97: }
 16267  0817  0008               	return
 16268  0818                     l8872:	
 16269                           
 16270                           ;LED_B1.c: 110: else if(led == 99)
 16271  0818  0823               	movf	setLED@led,w
 16272  0819  3A63               	xorlw	99
 16273  081A  1D03               	skipz
 16274  081B  0008               	return
 16275                           
 16276                           ;LED_B1.c: 111: {
 16277                           ;LED_B1.c: 115: RB5=1;
 16278  081C  168D               	bsf	13,5	;volatile
 16279                           
 16280                           ;LED_B1.c: 117: }
 16281                           ;LED_B1.c: 119: }
 16282  081D  0008               	return
 16283  081E                     l8876:	
 16284                           
 16285                           ;LED_B1.c: 120: else if(command == 1)
 16286  081E  0822               	movf	setLED@command,w
 16287  081F  3A01               	xorlw	1
 16288  0820  1D03               	skipz
 16289  0821  2834               	goto	l8890
 16290                           
 16291                           ;LED_B1.c: 121: {
 16292                           ;LED_B1.c: 123: if(led == 1)
 16293  0822  0823               	movf	setLED@led,w
 16294  0823  3A01               	xorlw	1
 16295  0824  1D03               	skipz
 16296  0825  2828               	goto	l8882
 16297                           
 16298                           ;LED_B1.c: 124: {
 16299                           ;LED_B1.c: 128: RA3=0;
 16300  0826  118C               	bcf	12,3	;volatile
 16301                           
 16302                           ;LED_B1.c: 130: }
 16303  0827  0008               	return
 16304  0828                     l8882:	
 16305                           
 16306                           ;LED_B1.c: 133: else if(led == 2)
 16307  0828  0823               	movf	setLED@led,w
 16308  0829  3A02               	xorlw	2
 16309  082A  1D03               	skipz
 16310  082B  282E               	goto	l8886
 16311                           
 16312                           ;LED_B1.c: 134: {
 16313                           ;LED_B1.c: 138: RC7=0;
 16314  082C  138E               	bcf	14,7	;volatile
 16315                           
 16316                           ;LED_B1.c: 140: }
 16317  082D  0008               	return
 16318  082E                     l8886:	
 16319                           
 16320                           ;LED_B1.c: 153: else if(led == 99)
 16321  082E  0823               	movf	setLED@led,w
 16322  082F  3A63               	xorlw	99
 16323  0830  1D03               	skipz
 16324  0831  0008               	return
 16325                           
 16326                           ;LED_B1.c: 154: {
 16327                           ;LED_B1.c: 158: RB5=0;
 16328  0832  128D               	bcf	13,5	;volatile
 16329                           
 16330                           ;LED_B1.c: 160: }
 16331                           ;LED_B1.c: 162: }
 16332  0833  0008               	return
 16333  0834                     l8890:	
 16334                           
 16335                           ;LED_B1.c: 163: else if(command == 10)
 16336  0834  0822               	movf	setLED@command,w
 16337  0835  3A0A               	xorlw	10
 16338  0836  1D03               	skipz
 16339  0837  2856               	goto	l8906
 16340                           
 16341                           ;LED_B1.c: 164: {
 16342                           ;LED_B1.c: 165: LED->GO=0;
 16343  0838  0021               	movlb	1	; select bank1
 16344  0839  083B               	movf	_LED^(0+128),w
 16345  083A  0086               	movwf	6
 16346  083B  0187               	clrf	7
 16347  083C  1081               	bcf	1,1
 16348                           
 16349                           ;LED_B1.c: 166: LED->Time=0;
 16350  083D  0A3B               	incf	_LED^(0+128),w
 16351  083E  0086               	movwf	6
 16352  083F  0187               	clrf	7
 16353  0840  3000               	movlw	0
 16354  0841  3FC0               	movwi [0]fsr1
 16355  0842  3FC1               	movwi [1]fsr1
 16356                           
 16357                           ;LED_B1.c: 168: if(led == 1)
 16358  0843  0020               	movlb	0	; select bank0
 16359  0844  0823               	movf	setLED@led,w
 16360  0845  3A01               	xorlw	1
 16361  0846  1D03               	skipz
 16362  0847  284A               	goto	l8898
 16363                           
 16364                           ;LED_B1.c: 169: {
 16365                           ;LED_B1.c: 173: RA3=1;
 16366  0848  158C               	bsf	12,3	;volatile
 16367                           
 16368                           ;LED_B1.c: 175: }
 16369  0849  0008               	return
 16370  084A                     l8898:	
 16371                           
 16372                           ;LED_B1.c: 178: else if(led == 2)
 16373  084A  0823               	movf	setLED@led,w
 16374  084B  3A02               	xorlw	2
 16375  084C  1D03               	skipz
 16376  084D  2850               	goto	l8902
 16377                           
 16378                           ;LED_B1.c: 179: {
 16379                           ;LED_B1.c: 183: RC7=1;
 16380  084E  178E               	bsf	14,7	;volatile
 16381                           
 16382                           ;LED_B1.c: 185: }
 16383  084F  0008               	return
 16384  0850                     l8902:	
 16385                           
 16386                           ;LED_B1.c: 198: else if(led == 99)
 16387  0850  0823               	movf	setLED@led,w
 16388  0851  3A63               	xorlw	99
 16389  0852  1D03               	skipz
 16390  0853  0008               	return
 16391                           
 16392                           ;LED_B1.c: 199: {
 16393                           ;LED_B1.c: 203: RB5=1;
 16394  0854  168D               	bsf	13,5	;volatile
 16395                           
 16396                           ;LED_B1.c: 205: }
 16397                           ;LED_B1.c: 207: }
 16398  0855  0008               	return
 16399  0856                     l8906:	
 16400                           
 16401                           ;LED_B1.c: 208: else if(command == 11)
 16402  0856  0822               	movf	setLED@command,w
 16403  0857  3A0B               	xorlw	11
 16404  0858  1D03               	skipz
 16405  0859  0008               	return
 16406                           
 16407                           ;LED_B1.c: 209: {
 16408                           ;LED_B1.c: 210: LED->GO=1;
 16409  085A  0021               	movlb	1	; select bank1
 16410  085B  083B               	movf	_LED^(0+128),w
 16411  085C  0086               	movwf	6
 16412  085D  0187               	clrf	7
 16413  085E  1481               	bsf	1,1
 16414  085F  0008               	return
 16415  0860                     __end_of_setLED:	
 16416                           
 16417                           	psect	text93
 16418  2722                     __ptext93:	
 16419 ;; *************** function _LedPointSelect *****************
 16420 ;; Defined at:
 16421 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;  led             1    wreg     unsigned char 
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;  led             1    1[BANK0 ] unsigned char 
 16426 ;; Return value:  Size  Location     Type
 16427 ;;		None               void
 16428 ;; Registers used:
 16429 ;;		wreg
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;Total ram usage:        2 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    4
 16442 ;; This function calls:
 16443 ;;		Nothing
 16444 ;; This function is called by:
 16445 ;;		_setLED_Initialization
 16446 ;;		_setLED
 16447 ;;		_setLED_Main
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function _LedPointSelect
 16453  2722                     _LedPointSelect:	
 16454                           
 16455                           ;incstack = 0
 16456                           ; Regs used in _LedPointSelect: [wreg]
 16457                           ;LedPointSelect@led stored from wreg
 16458  2722  0020               	movlb	0	; select bank0
 16459  2723  00A1               	movwf	LedPointSelect@led
 16460                           
 16461                           ;LED_B1.c: 10: if(led == 1)
 16462  2724  0821               	movf	LedPointSelect@led,w
 16463  2725  3A01               	xorlw	1
 16464  2726  1D03               	skipz
 16465  2727  2F2E               	goto	l6528
 16466                           
 16467                           ;LED_B1.c: 11: {
 16468                           ;LED_B1.c: 12: LED=&VarLED1;
 16469  2728  30DB               	movlw	_VarLED1& (0+255)
 16470  2729  00A0               	movwf	??_LedPointSelect
 16471  272A  0820               	movf	??_LedPointSelect,w
 16472  272B  0021               	movlb	1	; select bank1
 16473  272C  00BB               	movwf	_LED^(0+128)
 16474                           
 16475                           ;LED_B1.c: 13: }
 16476  272D  0008               	return
 16477  272E                     l6528:	
 16478                           
 16479                           ;LED_B1.c: 16: else if(led == 2)
 16480  272E  0020               	movlb	0	; select bank0
 16481  272F  0821               	movf	LedPointSelect@led,w
 16482  2730  3A02               	xorlw	2
 16483  2731  1D03               	skipz
 16484  2732  2F39               	goto	l6532
 16485                           
 16486                           ;LED_B1.c: 17: {
 16487                           ;LED_B1.c: 18: LED=&VarLED2;
 16488  2733  30DF               	movlw	_VarLED2& (0+255)
 16489  2734  00A0               	movwf	??_LedPointSelect
 16490  2735  0820               	movf	??_LedPointSelect,w
 16491  2736  0021               	movlb	1	; select bank1
 16492  2737  00BB               	movwf	_LED^(0+128)
 16493                           
 16494                           ;LED_B1.c: 19: }
 16495  2738  0008               	return
 16496  2739                     l6532:	
 16497                           
 16498                           ;LED_B1.c: 28: else if(led == 99)
 16499  2739  0020               	movlb	0	; select bank0
 16500  273A  0821               	movf	LedPointSelect@led,w
 16501  273B  3A63               	xorlw	99
 16502  273C  1D03               	skipz
 16503  273D  0008               	return
 16504                           
 16505                           ;LED_B1.c: 29: {
 16506                           ;LED_B1.c: 30: LED=&VarErrLED;
 16507  273E  30D7               	movlw	_VarErrLED& (0+255)
 16508  273F  00A0               	movwf	??_LedPointSelect
 16509  2740  0820               	movf	??_LedPointSelect,w
 16510  2741  0021               	movlb	1	; select bank1
 16511  2742  00BB               	movwf	_LED^(0+128)
 16512  2743  0008               	return
 16513  2744                     __end_of_LedPointSelect:	
 16514                           
 16515                           	psect	text94
 16516  2634                     __ptext94:	
 16517 ;; *************** function _DimmerLights_Close *****************
 16518 ;; Defined at:
 16519 ;;		line 101 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16520 ;; Parameters:    Size  Location     Type
 16521 ;;		None
 16522 ;; Auto vars:     Size  Location     Type
 16523 ;;		None
 16524 ;; Return value:  Size  Location     Type
 16525 ;;		None               void
 16526 ;; Registers used:
 16527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16528 ;; Tracked objects:
 16529 ;;		On entry : 0/0
 16530 ;;		On exit  : 0/0
 16531 ;;		Unchanged: 0/0
 16532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;Total ram usage:        0 bytes
 16538 ;; Hardware stack levels used:    1
 16539 ;; Hardware stack levels required when called:    5
 16540 ;; This function calls:
 16541 ;;		_getDimmerLights_StatusFlag
 16542 ;;		_setLoad_GO
 16543 ;; This function is called by:
 16544 ;;		_DimmerLights_Main
 16545 ;; This function uses a non-reentrant model
 16546 ;;
 16547                           
 16548                           
 16549                           ;psect for function _DimmerLights_Close
 16550  2634                     _DimmerLights_Close:	
 16551                           
 16552                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16553                           
 16554                           ;incstack = 0
 16555                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16556  2634  0021               	movlb	1	; select bank1
 16557  2635  0839               	movf	_Dimmer^(0+128),w
 16558  2636  0086               	movwf	6
 16559  2637  0187               	clrf	7
 16560  2638  1C01               	btfss	1,0
 16561  2639  0008               	return
 16562                           
 16563                           ;Dimmer_B1.c: 104: {
 16564                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16565  263A  0839               	movf	_Dimmer^(0+128),w
 16566  263B  0086               	movwf	6
 16567  263C  0187               	clrf	7
 16568  263D  1001               	bcf	1,0
 16569                           
 16570                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16571  263E  31A5  255B  31A6   	fcall	_getDimmerLights_StatusFlag
 16572  2641  3800               	iorlw	0
 16573  2642  1D03               	skipz
 16574  2643  0008               	return
 16575                           
 16576                           ;Dimmer_B1.c: 107: {
 16577                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16578  2644  3000               	movlw	0
 16579  2645  31A3  233A         	fcall	_setLoad_GO
 16580                           
 16581                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16582  2647  0021               	movlb	1	; select bank1
 16583  2648  086B               	movf	_Memory^(0+128),w
 16584  2649  3E22               	addlw	34
 16585  264A  0086               	movwf	6
 16586  264B  3002               	movlw	2	; select bank4/5
 16587  264C  0087               	movwf	7
 16588  264D  1481               	bsf	1,1
 16589  264E  0008               	return
 16590  264F                     __end_of_DimmerLights_Close:	
 16591                           
 16592                           	psect	text95
 16593  233A                     __ptext95:	
 16594 ;; *************** function _setLoad_GO *****************
 16595 ;; Defined at:
 16596 ;;		line 300 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16597 ;; Parameters:    Size  Location     Type
 16598 ;;  command         1    wreg     unsigned char 
 16599 ;; Auto vars:     Size  Location     Type
 16600 ;;  command         1    0[BANK0 ] unsigned char 
 16601 ;; Return value:  Size  Location     Type
 16602 ;;		None               void
 16603 ;; Registers used:
 16604 ;;		wreg, fsr1l, fsr1h
 16605 ;; Tracked objects:
 16606 ;;		On entry : 0/0
 16607 ;;		On exit  : 0/0
 16608 ;;		Unchanged: 0/0
 16609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;Total ram usage:        1 bytes
 16615 ;; Hardware stack levels used:    1
 16616 ;; Hardware stack levels required when called:    4
 16617 ;; This function calls:
 16618 ;;		Nothing
 16619 ;; This function is called by:
 16620 ;;		_DimmerLights_Close
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           
 16625                           ;psect for function _setLoad_GO
 16626  233A                     _setLoad_GO:	
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _setLoad_GO: [wregfsr1]
 16630                           ;setLoad_GO@command stored from wreg
 16631  233A  0020               	movlb	0	; select bank0
 16632  233B  00A0               	movwf	setLoad_GO@command
 16633                           
 16634                           ;OverLoad_B1.c: 302: Load->GO=command;
 16635  233C  086E               	movf	_Load,w
 16636  233D  0086               	movwf	6
 16637  233E  3002               	movlw	2	; select bank4/5
 16638  233F  0087               	movwf	7
 16639  2340  0820               	movf	setLoad_GO@command,w
 16640  2341  1081               	bcf	1,1
 16641  2342  1D03               	skipz
 16642  2343  1481               	bsf	1,1
 16643  2344  0008               	return
 16644  2345                     __end_of_setLoad_GO:	
 16645                           
 16646                           	psect	text96
 16647  255B                     __ptext96:	
 16648 ;; *************** function _getDimmerLights_StatusFlag *****************
 16649 ;; Defined at:
 16650 ;;		line 208 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;		None
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;  Status          1    1[BANK0 ] unsigned char 
 16655 ;; Return value:  Size  Location     Type
 16656 ;;                  1    wreg      unsigned char 
 16657 ;; Registers used:
 16658 ;;		wreg, fsr1l, fsr1h, status,2
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;Total ram usage:        3 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    4
 16671 ;; This function calls:
 16672 ;;		Nothing
 16673 ;; This function is called by:
 16674 ;;		_DimmerLights_Close
 16675 ;;		_DimmerLights_Exceptions
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           
 16680                           ;psect for function _getDimmerLights_StatusFlag
 16681  255B                     _getDimmerLights_StatusFlag:	
 16682                           
 16683                           ;Dimmer_B1.c: 210: char Status=0;
 16684                           
 16685                           ;incstack = 0
 16686                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16687  255B  0020               	movlb	0	; select bank0
 16688  255C  01A1               	clrf	getDimmerLights_StatusFlag@Status
 16689                           
 16690                           ;Dimmer_B1.c: 217: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 16691  255D  01A2               	clrf	_getDimmerLights_StatusFlag$1852
 16692  255E  0AA2               	incf	_getDimmerLights_StatusFlag$1852,f
 16693  255F  0879               	movf	_DimmerLights11,w
 16694  2560  0086               	movwf	6
 16695  2561  3001               	movlw	1	; select bank2/3
 16696  2562  0087               	movwf	7
 16697  2563  1B01               	btfsc	1,6
 16698  2564  2D6B               	goto	l6798
 16699  2565  087A               	movf	_DimmerLights22,w
 16700  2566  0086               	movwf	6
 16701  2567  3001               	movlw	1	; select bank2/3
 16702  2568  0087               	movwf	7
 16703  2569  1F01               	btfss	1,6
 16704  256A  01A2               	clrf	_getDimmerLights_StatusFlag$1852
 16705  256B                     l6798:	
 16706  256B  0822               	movf	_getDimmerLights_StatusFlag$1852,w
 16707  256C  00A0               	movwf	??_getDimmerLights_StatusFlag
 16708  256D  0820               	movf	??_getDimmerLights_StatusFlag,w
 16709  256E  00A1               	movwf	getDimmerLights_StatusFlag@Status
 16710                           
 16711                           ;Dimmer_B1.c: 224: return Status;
 16712  256F  0821               	movf	getDimmerLights_StatusFlag@Status,w
 16713  2570  0008               	return
 16714  2571                     __end_of_getDimmerLights_StatusFlag:	
 16715                           
 16716                           	psect	text97
 16717  251B                     __ptext97:	
 16718 ;; *************** function _DimmerLights_Initialization *****************
 16719 ;; Defined at:
 16720 ;;		line 41 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16721 ;; Parameters:    Size  Location     Type
 16722 ;;		None
 16723 ;; Auto vars:     Size  Location     Type
 16724 ;;		None
 16725 ;; Return value:  Size  Location     Type
 16726 ;;		None               void
 16727 ;; Registers used:
 16728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16729 ;; Tracked objects:
 16730 ;;		On entry : 0/0
 16731 ;;		On exit  : 0/0
 16732 ;;		Unchanged: 0/0
 16733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;Total ram usage:        1 bytes
 16739 ;; Hardware stack levels used:    1
 16740 ;; Hardware stack levels required when called:    6
 16741 ;; This function calls:
 16742 ;;		_Dimmer_Initialization
 16743 ;;		_setDimmerLights_Initialization
 16744 ;; This function is called by:
 16745 ;;		_main
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           
 16750                           ;psect for function _DimmerLights_Initialization
 16751  251B                     _DimmerLights_Initialization:	
 16752                           
 16753                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16754                           
 16755                           ;incstack = 0
 16756                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16757  251B  3020               	movlw	_DimmerLights1& (0+255)
 16758  251C  0020               	movlb	0	; select bank0
 16759  251D  00A4               	movwf	??_DimmerLights_Initialization
 16760  251E  0824               	movf	??_DimmerLights_Initialization,w
 16761  251F  00F9               	movwf	_DimmerLights11
 16762                           
 16763                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16764  2520  3001               	movlw	1
 16765  2521  3198  207A  31A5   	fcall	_setDimmerLights_Initialization
 16766                           
 16767                           ;Dimmer_B1.c: 49: DimmerLights22=&DimmerLights2;
 16768  2524  302E               	movlw	_DimmerLights2& (0+255)
 16769  2525  0020               	movlb	0	; select bank0
 16770  2526  00A4               	movwf	??_DimmerLights_Initialization
 16771  2527  0824               	movf	??_DimmerLights_Initialization,w
 16772  2528  00FA               	movwf	_DimmerLights22
 16773                           
 16774                           ;Dimmer_B1.c: 50: setDimmerLights_Initialization(2);
 16775  2529  3002               	movlw	2
 16776  252A  3198  207A  31A5   	fcall	_setDimmerLights_Initialization
 16777                           
 16778                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16779  252D  31A2  22B9         	fcall	_Dimmer_Initialization
 16780  252F  0008               	return
 16781  2530                     __end_of_DimmerLights_Initialization:	
 16782                           
 16783                           	psect	text98
 16784  187A                     __ptext98:	
 16785 ;; *************** function _setDimmerLights_Initialization *****************
 16786 ;; Defined at:
 16787 ;;		line 63 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16788 ;; Parameters:    Size  Location     Type
 16789 ;;  lights          1    wreg     unsigned char 
 16790 ;; Auto vars:     Size  Location     Type
 16791 ;;  lights          1    3[BANK0 ] unsigned char 
 16792 ;; Return value:  Size  Location     Type
 16793 ;;		None               void
 16794 ;; Registers used:
 16795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16796 ;; Tracked objects:
 16797 ;;		On entry : 0/0
 16798 ;;		On exit  : 0/0
 16799 ;;		Unchanged: 0/0
 16800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16805 ;;Total ram usage:        2 bytes
 16806 ;; Hardware stack levels used:    1
 16807 ;; Hardware stack levels required when called:    5
 16808 ;; This function calls:
 16809 ;;		_DimmerLightsPointSelect
 16810 ;; This function is called by:
 16811 ;;		_DimmerLights_Initialization
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           
 16816                           ;psect for function _setDimmerLights_Initialization
 16817  187A                     _setDimmerLights_Initialization:	
 16818                           
 16819                           ;incstack = 0
 16820                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16821                           ;setDimmerLights_Initialization@lights stored from wreg
 16822  187A  0020               	movlb	0	; select bank0
 16823  187B  00A3               	movwf	setDimmerLights_Initialization@lights
 16824                           
 16825                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16826  187C  0823               	movf	setDimmerLights_Initialization@lights,w
 16827  187D  31A4  24B8         	fcall	_DimmerLightsPointSelect
 16828                           
 16829                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16830  187F  0020               	movlb	0	; select bank0
 16831  1880  086C               	movf	_DimmerLights,w
 16832  1881  3E0C               	addlw	12
 16833  1882  0086               	movwf	6
 16834  1883  3001               	movlw	1	; select bank2/3
 16835  1884  0087               	movwf	7
 16836  1885  1401               	bsf	1,0
 16837                           
 16838                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16839  1886  3043               	movlw	67
 16840  1887  00A2               	movwf	??_setDimmerLights_Initialization
 16841  1888  086C               	movf	_DimmerLights,w
 16842  1889  3E05               	addlw	5
 16843  188A  0086               	movwf	6
 16844  188B  3001               	movlw	1	; select bank2/3
 16845  188C  0087               	movwf	7
 16846  188D  0822               	movf	??_setDimmerLights_Initialization,w
 16847  188E  0081               	movwf	1
 16848                           
 16849                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16850  188F  3078               	movlw	120
 16851  1890  00A2               	movwf	??_setDimmerLights_Initialization
 16852  1891  086C               	movf	_DimmerLights,w
 16853  1892  3E06               	addlw	6
 16854  1893  0086               	movwf	6
 16855  1894  3001               	movlw	1	; select bank2/3
 16856  1895  0087               	movwf	7
 16857  1896  0822               	movf	??_setDimmerLights_Initialization,w
 16858  1897  0081               	movwf	1
 16859                           
 16860                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16861  1898  086C               	movf	_DimmerLights,w
 16862  1899  3E06               	addlw	6
 16863  189A  0086               	movwf	6
 16864  189B  3001               	movlw	1	; select bank2/3
 16865  189C  0087               	movwf	7
 16866  189D  0801               	movf	1,w
 16867  189E  00A2               	movwf	??_setDimmerLights_Initialization
 16868  189F  086C               	movf	_DimmerLights,w
 16869  18A0  3E04               	addlw	4
 16870  18A1  0086               	movwf	6
 16871  18A2  3001               	movlw	1	; select bank2/3
 16872  18A3  0087               	movwf	7
 16873  18A4  0822               	movf	??_setDimmerLights_Initialization,w
 16874  18A5  0081               	movwf	1
 16875  18A6  0008               	return
 16876  18A7                     __end_of_setDimmerLights_Initialization:	
 16877                           
 16878                           	psect	text99
 16879  22B9                     __ptext99:	
 16880 ;; *************** function _Dimmer_Initialization *****************
 16881 ;; Defined at:
 16882 ;;		line 520 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16883 ;; Parameters:    Size  Location     Type
 16884 ;;		None
 16885 ;; Auto vars:     Size  Location     Type
 16886 ;;		None
 16887 ;; Return value:  Size  Location     Type
 16888 ;;		None               void
 16889 ;; Registers used:
 16890 ;;		wreg
 16891 ;; Tracked objects:
 16892 ;;		On entry : 0/0
 16893 ;;		On exit  : 0/0
 16894 ;;		Unchanged: 0/0
 16895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;Total ram usage:        1 bytes
 16901 ;; Hardware stack levels used:    1
 16902 ;; Hardware stack levels required when called:    4
 16903 ;; This function calls:
 16904 ;;		Nothing
 16905 ;; This function is called by:
 16906 ;;		_DimmerLights_Initialization
 16907 ;; This function uses a non-reentrant model
 16908 ;;
 16909                           
 16910                           
 16911                           ;psect for function _Dimmer_Initialization
 16912  22B9                     _Dimmer_Initialization:	
 16913                           
 16914                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16915                           
 16916                           ;incstack = 0
 16917                           ; Regs used in _Dimmer_Initialization: [wreg]
 16918  22B9  30E3               	movlw	_Dimmer1& (0+255)
 16919  22BA  0020               	movlb	0	; select bank0
 16920  22BB  00A0               	movwf	??_Dimmer_Initialization
 16921  22BC  0820               	movf	??_Dimmer_Initialization,w
 16922  22BD  0021               	movlb	1	; select bank1
 16923  22BE  00B9               	movwf	_Dimmer^(0+128)
 16924  22BF  0008               	return
 16925  22C0                     __end_of_Dimmer_Initialization:	
 16926                           
 16927                           	psect	text100
 16928  22DD                     __ptext100:	
 16929 ;; *************** function _DelayOff_Main *****************
 16930 ;; Defined at:
 16931 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16932 ;; Parameters:    Size  Location     Type
 16933 ;;		None
 16934 ;; Auto vars:     Size  Location     Type
 16935 ;;		None
 16936 ;; Return value:  Size  Location     Type
 16937 ;;		None               void
 16938 ;; Registers used:
 16939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16940 ;; Tracked objects:
 16941 ;;		On entry : 0/0
 16942 ;;		On exit  : 0/0
 16943 ;;		Unchanged: 0/0
 16944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;Total ram usage:        0 bytes
 16950 ;; Hardware stack levels used:    1
 16951 ;; Hardware stack levels required when called:    9
 16952 ;; This function calls:
 16953 ;;		_DlyOff_Main
 16954 ;; This function is called by:
 16955 ;;		_main
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           
 16960                           ;psect for function _DelayOff_Main
 16961  22DD                     _DelayOff_Main:	
 16962                           
 16963                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16964                           
 16965                           ;incstack = 0
 16966                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16967  22DD  3001               	movlw	1
 16968  22DE  3192  2281  31A2   	fcall	_DlyOff_Main
 16969                           
 16970                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 16971  22E1  3002               	movlw	2
 16972  22E2  3192  2281         	fcall	_DlyOff_Main
 16973  22E4  0008               	return
 16974  22E5                     __end_of_DelayOff_Main:	
 16975                           
 16976                           	psect	text101
 16977  1281                     __ptext101:	
 16978 ;; *************** function _DlyOff_Main *****************
 16979 ;; Defined at:
 16980 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16981 ;; Parameters:    Size  Location     Type
 16982 ;;  sw              1    wreg     unsigned char 
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;  sw              1   68[BANK0 ] unsigned char 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;		None               void
 16987 ;; Registers used:
 16988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;Total ram usage:        3 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    8
 17001 ;; This function calls:
 17002 ;;		_DelayOffPointSelect
 17003 ;;		_setBuz
 17004 ;;		_setDimmerLights_Switch
 17005 ;;		_setDimmerLights_Trigger
 17006 ;;		_setRFSW_Status
 17007 ;;		_setRF_DimmerLights
 17008 ;;		_setSw_Status
 17009 ;;		_setTxData
 17010 ;; This function is called by:
 17011 ;;		_DelayOff_Main
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           
 17016                           ;psect for function _DlyOff_Main
 17017  1281                     _DlyOff_Main:	
 17018                           
 17019                           ;incstack = 0
 17020                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17021                           ;DlyOff_Main@sw stored from wreg
 17022  1281  0020               	movlb	0	; select bank0
 17023  1282  00E4               	movwf	DlyOff_Main@sw
 17024                           
 17025                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 17026  1283  0864               	movf	DlyOff_Main@sw,w
 17027  1284  31A5  2587  3192   	fcall	_DelayOffPointSelect
 17028                           
 17029                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 17030  1287  0021               	movlb	1	; select bank1
 17031  1288  0838               	movf	_DelayOff^(0+128),w
 17032  1289  0086               	movwf	6
 17033  128A  0187               	clrf	7
 17034  128B  1C81               	btfss	1,1
 17035  128C  0008               	return
 17036                           
 17037                           ;DelayOff_B1.c: 70: {
 17038                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 17039  128D  0838               	movf	_DelayOff^(0+128),w
 17040  128E  3E02               	addlw	2
 17041  128F  0086               	movwf	6
 17042  1290  0187               	clrf	7
 17043  1291  3001               	movlw	1
 17044  1292  0781               	addwf	1,f
 17045  1293  3141               	addfsr 1,1
 17046  1294  1803               	skipnc
 17047  1295  0A81               	incf	1,f
 17048                           
 17049                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 17050  1296  0838               	movf	_DelayOff^(0+128),w
 17051  1297  3E02               	addlw	2
 17052  1298  0086               	movwf	6
 17053  1299  0187               	clrf	7
 17054  129A  3F40               	moviw [0]fsr1
 17055  129B  0020               	movlb	0	; select bank0
 17056  129C  00E2               	movwf	??_DlyOff_Main
 17057  129D  3F41               	moviw [1]fsr1
 17058  129E  00E3               	movwf	??_DlyOff_Main+1
 17059  129F  3016               	movlw	22
 17060  12A0  0263               	subwf	??_DlyOff_Main+1,w
 17061  12A1  3012               	movlw	18
 17062  12A2  1903               	skipnz
 17063  12A3  0262               	subwf	??_DlyOff_Main,w
 17064  12A4  1C03               	skipc
 17065  12A5  0008               	return
 17066                           
 17067                           ;DelayOff_B1.c: 73: {
 17068                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 17069  12A6  0021               	movlb	1	; select bank1
 17070  12A7  0838               	movf	_DelayOff^(0+128),w
 17071  12A8  3E02               	addlw	2
 17072  12A9  0086               	movwf	6
 17073  12AA  0187               	clrf	7
 17074  12AB  3000               	movlw	0
 17075  12AC  3FC0               	movwi [0]fsr1
 17076  12AD  3FC1               	movwi [1]fsr1
 17077                           
 17078                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 17079  12AE  3001               	movlw	1
 17080  12AF  0020               	movlb	0	; select bank0
 17081  12B0  00E2               	movwf	??_DlyOff_Main
 17082  12B1  0021               	movlb	1	; select bank1
 17083  12B2  0838               	movf	_DelayOff^(0+128),w
 17084  12B3  3E04               	addlw	4
 17085  12B4  0086               	movwf	6
 17086  12B5  0187               	clrf	7
 17087  12B6  0020               	movlb	0	; select bank0
 17088  12B7  0862               	movf	??_DlyOff_Main,w
 17089  12B8  0781               	addwf	1,f
 17090                           
 17091                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 17092  12B9  0021               	movlb	1	; select bank1
 17093  12BA  0838               	movf	_DelayOff^(0+128),w
 17094  12BB  3E04               	addlw	4
 17095  12BC  0086               	movwf	6
 17096  12BD  0187               	clrf	7
 17097  12BE  0A38               	incf	_DelayOff^(0+128),w
 17098  12BF  0084               	movwf	4
 17099  12C0  0185               	clrf	5
 17100  12C1  0800               	movf	0,w
 17101  12C2  0201               	subwf	1,w
 17102  12C3  1C03               	skipc
 17103  12C4  0008               	return
 17104                           
 17105                           ;DelayOff_B1.c: 77: {
 17106                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 17107  12C5  0838               	movf	_DelayOff^(0+128),w
 17108  12C6  3E04               	addlw	4
 17109  12C7  0086               	movwf	6
 17110  12C8  0187               	clrf	7
 17111  12C9  0181               	clrf	1
 17112                           
 17113                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 17114  12CA  0838               	movf	_DelayOff^(0+128),w
 17115  12CB  0086               	movwf	6
 17116  12CC  0187               	clrf	7
 17117  12CD  1081               	bcf	1,1
 17118                           
 17119                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 17120  12CE  0020               	movlb	0	; select bank0
 17121  12CF  01A2               	clrf	setSw_Status@command
 17122  12D0  0864               	movf	DlyOff_Main@sw,w
 17123  12D1  31A4  2418  3192   	fcall	_setSw_Status
 17124                           
 17125                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 17126  12D4  0020               	movlb	0	; select bank0
 17127  12D5  01A2               	clrf	setRFSW_Status@command
 17128  12D6  0864               	movf	DlyOff_Main@sw,w
 17129  12D7  31A4  2409  3192   	fcall	_setRFSW_Status
 17130                           
 17131                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 17132  12DA  0020               	movlb	0	; select bank0
 17133  12DB  01DD               	clrf	setRF_DimmerLights@on
 17134  12DC  0864               	movf	DlyOff_Main@sw,w
 17135  12DD  319F  2795  3192   	fcall	_setRF_DimmerLights
 17136                           
 17137                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17138  12E0  0020               	movlb	0	; select bank0
 17139  12E1  01A2               	clrf	setDimmerLights_Trigger@command
 17140  12E2  0AA2               	incf	setDimmerLights_Trigger@command,f
 17141  12E3  0864               	movf	DlyOff_Main@sw,w
 17142  12E4  31A4  2447  3192   	fcall	_setDimmerLights_Trigger
 17143                           
 17144                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17145  12E7  0020               	movlb	0	; select bank0
 17146  12E8  01A2               	clrf	setDimmerLights_Switch@command
 17147  12E9  0864               	movf	DlyOff_Main@sw,w
 17148  12EA  31A4  2437  3192   	fcall	_setDimmerLights_Switch
 17149                           
 17150                           ;DelayOff_B1.c: 85: setTxData(1);
 17151  12ED  3001               	movlw	1
 17152  12EE  3189  21BD  3192   	fcall	_setTxData
 17153                           
 17154                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17155  12F1  3064               	movlw	100
 17156  12F2  0020               	movlb	0	; select bank0
 17157  12F3  00A6               	movwf	setBuz@time
 17158  12F4  3000               	movlw	0
 17159  12F5  00A7               	movwf	setBuz@time+1
 17160  12F6  3001               	movlw	1
 17161  12F7  3192  220A         	fcall	_setBuz
 17162  12F9  0008               	return
 17163  12FA                     __end_of_DlyOff_Main:	
 17164                           
 17165                           	psect	text102
 17166  09BD                     __ptext102:	
 17167 ;; *************** function _setTxData *****************
 17168 ;; Defined at:
 17169 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17170 ;; Parameters:    Size  Location     Type
 17171 ;;  rf              1    wreg     unsigned char 
 17172 ;; Auto vars:     Size  Location     Type
 17173 ;;  rf              1    3[BANK0 ] unsigned char 
 17174 ;;  i               1    0        unsigned char 
 17175 ;; Return value:  Size  Location     Type
 17176 ;;		None               void
 17177 ;; Registers used:
 17178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17179 ;; Tracked objects:
 17180 ;;		On entry : 0/0
 17181 ;;		On exit  : 0/0
 17182 ;;		Unchanged: 0/0
 17183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;Total ram usage:        2 bytes
 17189 ;; Hardware stack levels used:    1
 17190 ;; Hardware stack levels required when called:    5
 17191 ;; This function calls:
 17192 ;;		_RfPointSelect
 17193 ;; This function is called by:
 17194 ;;		_DlyOff_Main
 17195 ;;		_setDimmerLights_Adj
 17196 ;;		_setControl_Lights_Table
 17197 ;;		_setRFSW_Control
 17198 ;;		_setRFSW_AdjControl
 17199 ;;		_Sw_DimmerOnFunc
 17200 ;;		_Sw_DimmerOffFunc
 17201 ;; This function uses a non-reentrant model
 17202 ;;
 17203                           
 17204                           
 17205                           ;psect for function _setTxData
 17206  09BD                     _setTxData:	
 17207                           
 17208                           ;incstack = 0
 17209                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17210                           ;setTxData@rf stored from wreg
 17211  09BD  0020               	movlb	0	; select bank0
 17212  09BE  00A3               	movwf	setTxData@rf
 17213                           
 17214                           ;RF_Control_B1.c: 142: char i;
 17215                           ;RF_Control_B1.c: 143: RfPointSelect(rf);
 17216  09BF  0823               	movf	setTxData@rf,w
 17217  09C0  31A3  232F  3189   	fcall	_RfPointSelect
 17218                           
 17219                           ;RF_Control_B1.c: 144: if(RF->Enable)
 17220  09C3  087C               	movf	_RF,w
 17221  09C4  0086               	movwf	6
 17222  09C5  0187               	clrf	7
 17223  09C6  1C01               	btfss	1,0
 17224  09C7  0008               	return
 17225                           
 17226                           ;RF_Control_B1.c: 145: {
 17227                           ;RF_Control_B1.c: 147: if(!RF->TransceiveGO)
 17228  09C8  087C               	movf	_RF,w
 17229  09C9  0086               	movwf	6
 17230  09CA  0187               	clrf	7
 17231  09CB  1901               	btfsc	1,2
 17232  09CC  0008               	return
 17233                           
 17234                           ;RF_Control_B1.c: 148: {
 17235                           ;RF_Control_B1.c: 149: RF->TransceiveGO=1;
 17236  09CD  087C               	movf	_RF,w
 17237  09CE  0086               	movwf	6
 17238  09CF  0187               	clrf	7
 17239  09D0  1501               	bsf	1,2
 17240                           
 17241                           ;RF_Control_B1.c: 158: RF_Data[0]=0x63;
 17242  09D1  3063               	movlw	99
 17243  09D2  0020               	movlb	0	; select bank0
 17244  09D3  00A2               	movwf	??_setTxData
 17245  09D4  0822               	movf	??_setTxData,w
 17246  09D5  0021               	movlb	1	; select bank1
 17247  09D6  00A0               	movwf	_RF_Data^(0+128)
 17248                           
 17249                           ;RF_Control_B1.c: 159: RF_Data[1]=0x02;
 17250  09D7  3002               	movlw	2
 17251  09D8  0020               	movlb	0	; select bank0
 17252  09D9  00A2               	movwf	??_setTxData
 17253  09DA  0822               	movf	??_setTxData,w
 17254  09DB  0021               	movlb	1	; select bank1
 17255  09DC  00A1               	movwf	(_RF_Data^(0+128)+1)
 17256                           
 17257                           ;RF_Control_B1.c: 160: RF_Data[2]=Product->Data[2];
 17258  09DD  0020               	movlb	0	; select bank0
 17259  09DE  086F               	movf	_Product,w
 17260  09DF  0086               	movwf	6
 17261  09E0  3001               	movlw	1	; select bank2/3
 17262  09E1  0087               	movwf	7
 17263  09E2  3001               	movlw	1	; select bank2/3
 17264  09E3  3F42               	moviw [2]fsr1
 17265  09E4  0021               	movlb	1	; select bank1
 17266  09E5  00A2               	movwf	(_RF_Data^(0+128)+2)
 17267                           
 17268                           ;RF_Control_B1.c: 161: RF_Data[3]=Product->Data[3];
 17269  09E6  0020               	movlb	0	; select bank0
 17270  09E7  086F               	movf	_Product,w
 17271  09E8  0086               	movwf	6
 17272  09E9  3001               	movlw	1	; select bank2/3
 17273  09EA  0087               	movwf	7
 17274  09EB  3001               	movlw	1	; select bank2/3
 17275  09EC  3F43               	moviw [3]fsr1
 17276  09ED  0021               	movlb	1	; select bank1
 17277  09EE  00A3               	movwf	(_RF_Data^(0+128)+3)
 17278                           
 17279                           ;RF_Control_B1.c: 162: RF_Data[4]=Product->Data[4];
 17280  09EF  0020               	movlb	0	; select bank0
 17281  09F0  086F               	movf	_Product,w
 17282  09F1  0086               	movwf	6
 17283  09F2  3001               	movlw	1	; select bank2/3
 17284  09F3  0087               	movwf	7
 17285  09F4  3001               	movlw	1	; select bank2/3
 17286  09F5  3F44               	moviw [4]fsr1
 17287  09F6  0021               	movlb	1	; select bank1
 17288  09F7  00A4               	movwf	(_RF_Data^(0+128)+4)
 17289                           
 17290                           ;RF_Control_B1.c: 163: RF_Data[5]=Product->Data[5];
 17291  09F8  0020               	movlb	0	; select bank0
 17292  09F9  086F               	movf	_Product,w
 17293  09FA  0086               	movwf	6
 17294  09FB  3001               	movlw	1	; select bank2/3
 17295  09FC  0087               	movwf	7
 17296  09FD  3001               	movlw	1	; select bank2/3
 17297  09FE  3F45               	moviw [5]fsr1
 17298  09FF  0021               	movlb	1	; select bank1
 17299  0A00  00A5               	movwf	(_RF_Data^(0+128)+5)
 17300                           
 17301                           ;RF_Control_B1.c: 164: RF_Data[6]=Product->Data[6];
 17302  0A01  0020               	movlb	0	; select bank0
 17303  0A02  086F               	movf	_Product,w
 17304  0A03  0086               	movwf	6
 17305  0A04  3001               	movlw	1	; select bank2/3
 17306  0A05  0087               	movwf	7
 17307  0A06  3001               	movlw	1	; select bank2/3
 17308  0A07  3F46               	moviw [6]fsr1
 17309  0A08  0021               	movlb	1	; select bank1
 17310  0A09  00A6               	movwf	(_RF_Data^(0+128)+6)
 17311                           
 17312                           ;RF_Control_B1.c: 165: RF_Data[7]=Product->Data[7];
 17313  0A0A  0020               	movlb	0	; select bank0
 17314  0A0B  086F               	movf	_Product,w
 17315  0A0C  0086               	movwf	6
 17316  0A0D  3001               	movlw	1	; select bank2/3
 17317  0A0E  0087               	movwf	7
 17318  0A0F  3001               	movlw	1	; select bank2/3
 17319  0A10  3F47               	moviw [7]fsr1
 17320  0A11  0021               	movlb	1	; select bank1
 17321  0A12  00A7               	movwf	(_RF_Data^(0+128)+7)
 17322                           
 17323                           ;RF_Control_B1.c: 166: RF_Data[8]=Product->Data[8];
 17324  0A13  0020               	movlb	0	; select bank0
 17325  0A14  086F               	movf	_Product,w
 17326  0A15  0086               	movwf	6
 17327  0A16  3001               	movlw	1	; select bank2/3
 17328  0A17  0087               	movwf	7
 17329  0A18  3001               	movlw	1	; select bank2/3
 17330  0A19  3F48               	moviw [8]fsr1
 17331  0A1A  0021               	movlb	1	; select bank1
 17332  0A1B  00A8               	movwf	(_RF_Data^(0+128)+8)
 17333                           
 17334                           ;RF_Control_B1.c: 167: RF_Data[9]=Product->Data[9];
 17335  0A1C  0020               	movlb	0	; select bank0
 17336  0A1D  086F               	movf	_Product,w
 17337  0A1E  0086               	movwf	6
 17338  0A1F  3001               	movlw	1	; select bank2/3
 17339  0A20  0087               	movwf	7
 17340  0A21  3001               	movlw	1	; select bank2/3
 17341  0A22  3F49               	moviw [9]fsr1
 17342  0A23  0021               	movlb	1	; select bank1
 17343  0A24  00A9               	movwf	(_RF_Data^(0+128)+9)
 17344                           
 17345                           ;RF_Control_B1.c: 168: RF_Data[10]=Product->Data[10];
 17346  0A25  0020               	movlb	0	; select bank0
 17347  0A26  086F               	movf	_Product,w
 17348  0A27  0086               	movwf	6
 17349  0A28  3001               	movlw	1	; select bank2/3
 17350  0A29  0087               	movwf	7
 17351  0A2A  3001               	movlw	1	; select bank2/3
 17352  0A2B  3F4A               	moviw [10]fsr1
 17353  0A2C  0021               	movlb	1	; select bank1
 17354  0A2D  00AA               	movwf	(_RF_Data^(0+128)+10)
 17355                           
 17356                           ;RF_Control_B1.c: 169: RF_Data[11]=Product->Data[11];
 17357  0A2E  0020               	movlb	0	; select bank0
 17358  0A2F  086F               	movf	_Product,w
 17359  0A30  0086               	movwf	6
 17360  0A31  3001               	movlw	1	; select bank2/3
 17361  0A32  0087               	movwf	7
 17362  0A33  3001               	movlw	1	; select bank2/3
 17363  0A34  3F4B               	moviw [11]fsr1
 17364  0A35  0021               	movlb	1	; select bank1
 17365  0A36  00AB               	movwf	(_RF_Data^(0+128)+11)
 17366                           
 17367                           ;RF_Control_B1.c: 170: RF_Data[12]=Product->Data[12];
 17368  0A37  0020               	movlb	0	; select bank0
 17369  0A38  086F               	movf	_Product,w
 17370  0A39  0086               	movwf	6
 17371  0A3A  3001               	movlw	1	; select bank2/3
 17372  0A3B  0087               	movwf	7
 17373  0A3C  3001               	movlw	1	; select bank2/3
 17374  0A3D  3F4C               	moviw [12]fsr1
 17375  0A3E  0021               	movlb	1	; select bank1
 17376  0A3F  00AC               	movwf	(_RF_Data^(0+128)+12)
 17377                           
 17378                           ;RF_Control_B1.c: 171: RF_Data[13]=Product->Data[13];
 17379  0A40  0020               	movlb	0	; select bank0
 17380  0A41  086F               	movf	_Product,w
 17381  0A42  0086               	movwf	6
 17382  0A43  3001               	movlw	1	; select bank2/3
 17383  0A44  0087               	movwf	7
 17384  0A45  3001               	movlw	1	; select bank2/3
 17385  0A46  3F4D               	moviw [13]fsr1
 17386  0A47  0021               	movlb	1	; select bank1
 17387  0A48  00AD               	movwf	(_RF_Data^(0+128)+13)
 17388                           
 17389                           ;RF_Control_B1.c: 172: RF_Data[14]=Product->Data[14];
 17390  0A49  0020               	movlb	0	; select bank0
 17391  0A4A  086F               	movf	_Product,w
 17392  0A4B  0086               	movwf	6
 17393  0A4C  3001               	movlw	1	; select bank2/3
 17394  0A4D  0087               	movwf	7
 17395  0A4E  3001               	movlw	1	; select bank2/3
 17396  0A4F  3F4E               	moviw [14]fsr1
 17397  0A50  0021               	movlb	1	; select bank1
 17398  0A51  00AE               	movwf	(_RF_Data^(0+128)+14)
 17399                           
 17400                           ;RF_Control_B1.c: 173: RF_Data[15]=Product->Data[15];
 17401  0A52  0020               	movlb	0	; select bank0
 17402  0A53  086F               	movf	_Product,w
 17403  0A54  0086               	movwf	6
 17404  0A55  3001               	movlw	1	; select bank2/3
 17405  0A56  0087               	movwf	7
 17406  0A57  3001               	movlw	1	; select bank2/3
 17407  0A58  3F4F               	moviw [15]fsr1
 17408  0A59  0021               	movlb	1	; select bank1
 17409  0A5A  00AF               	movwf	(_RF_Data^(0+128)+15)
 17410                           
 17411                           ;RF_Control_B1.c: 174: RF_Data[16]=Product->Data[16];
 17412  0A5B  0020               	movlb	0	; select bank0
 17413  0A5C  086F               	movf	_Product,w
 17414  0A5D  0086               	movwf	6
 17415  0A5E  3001               	movlw	1	; select bank2/3
 17416  0A5F  0087               	movwf	7
 17417  0A60  3001               	movlw	1	; select bank2/3
 17418  0A61  3F50               	moviw [16]fsr1
 17419  0A62  0021               	movlb	1	; select bank1
 17420  0A63  00B0               	movwf	(_RF_Data^(0+128)+16)
 17421                           
 17422                           ;RF_Control_B1.c: 175: RF_Data[17]=Product->Data[17];
 17423  0A64  0020               	movlb	0	; select bank0
 17424  0A65  086F               	movf	_Product,w
 17425  0A66  0086               	movwf	6
 17426  0A67  3001               	movlw	1	; select bank2/3
 17427  0A68  0087               	movwf	7
 17428  0A69  3001               	movlw	1	; select bank2/3
 17429  0A6A  3F51               	moviw [17]fsr1
 17430  0A6B  0021               	movlb	1	; select bank1
 17431  0A6C  00B1               	movwf	(_RF_Data^(0+128)+17)
 17432                           
 17433                           ;RF_Control_B1.c: 176: RF_Data[18]=Product->Data[18];
 17434  0A6D  0020               	movlb	0	; select bank0
 17435  0A6E  086F               	movf	_Product,w
 17436  0A6F  0086               	movwf	6
 17437  0A70  3001               	movlw	1	; select bank2/3
 17438  0A71  0087               	movwf	7
 17439  0A72  3001               	movlw	1	; select bank2/3
 17440  0A73  3F52               	moviw [18]fsr1
 17441  0A74  0021               	movlb	1	; select bank1
 17442  0A75  00B2               	movwf	(_RF_Data^(0+128)+18)
 17443                           
 17444                           ;RF_Control_B1.c: 177: RF_Data[19]=Product->Data[19];
 17445  0A76  0020               	movlb	0	; select bank0
 17446  0A77  086F               	movf	_Product,w
 17447  0A78  0086               	movwf	6
 17448  0A79  3001               	movlw	1	; select bank2/3
 17449  0A7A  0087               	movwf	7
 17450  0A7B  3001               	movlw	1	; select bank2/3
 17451  0A7C  3F53               	moviw [19]fsr1
 17452  0A7D  0021               	movlb	1	; select bank1
 17453  0A7E  00B3               	movwf	(_RF_Data^(0+128)+19)
 17454                           
 17455                           ;RF_Control_B1.c: 178: RF_Data[20]=210;
 17456  0A7F  30D2               	movlw	210
 17457  0A80  0020               	movlb	0	; select bank0
 17458  0A81  00A2               	movwf	??_setTxData
 17459  0A82  0822               	movf	??_setTxData,w
 17460  0A83  0021               	movlb	1	; select bank1
 17461  0A84  00B4               	movwf	(_RF_Data^(0+128)+20)
 17462  0A85  0008               	return
 17463  0A86                     __end_of_setTxData:	
 17464                           
 17465                           	psect	text103
 17466  232F                     __ptext103:	
 17467 ;; *************** function _RfPointSelect *****************
 17468 ;; Defined at:
 17469 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;  rf              1    wreg     unsigned char 
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;  rf              1    1[BANK0 ] unsigned char 
 17474 ;; Return value:  Size  Location     Type
 17475 ;;		None               void
 17476 ;; Registers used:
 17477 ;;		wreg
 17478 ;; Tracked objects:
 17479 ;;		On entry : 0/0
 17480 ;;		On exit  : 0/0
 17481 ;;		Unchanged: 0/0
 17482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;Total ram usage:        2 bytes
 17488 ;; Hardware stack levels used:    1
 17489 ;; Hardware stack levels required when called:    4
 17490 ;; This function calls:
 17491 ;;		Nothing
 17492 ;; This function is called by:
 17493 ;;		_setRF_Learn
 17494 ;;		_setRF_RxStatus
 17495 ;;		_setRF_Main
 17496 ;;		_setTxData
 17497 ;;		_setRF_Enable
 17498 ;;		_RF_RxDisable
 17499 ;;		_getRxData
 17500 ;;		_setLog_Code
 17501 ;;		_setControl_Lights_Table
 17502 ;; This function uses a non-reentrant model
 17503 ;;
 17504                           
 17505                           
 17506                           ;psect for function _RfPointSelect
 17507  232F                     _RfPointSelect:	
 17508                           
 17509                           ;incstack = 0
 17510                           ; Regs used in _RfPointSelect: [wreg]
 17511                           ;RfPointSelect@rf stored from wreg
 17512  232F  0020               	movlb	0	; select bank0
 17513  2330  00A1               	movwf	RfPointSelect@rf
 17514                           
 17515                           ;RF_Control_B1.c: 10: if(rf == 1)
 17516  2331  0821               	movf	RfPointSelect@rf,w
 17517  2332  3A01               	xorlw	1
 17518  2333  1D03               	skipz
 17519  2334  0008               	return
 17520                           
 17521                           ;RF_Control_B1.c: 11: {
 17522                           ;RF_Control_B1.c: 12: RF=&RF1;
 17523  2335  30E6               	movlw	_RF1& (0+255)
 17524  2336  00A0               	movwf	??_RfPointSelect
 17525  2337  0820               	movf	??_RfPointSelect,w
 17526  2338  00FC               	movwf	_RF
 17527  2339  0008               	return
 17528  233A                     __end_of_RfPointSelect:	
 17529                           
 17530                           	psect	text104
 17531  2418                     __ptext104:	
 17532 ;; *************** function _setSw_Status *****************
 17533 ;; Defined at:
 17534 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17535 ;; Parameters:    Size  Location     Type
 17536 ;;  sw              1    wreg     unsigned char 
 17537 ;;  command         1    2[BANK0 ] unsigned char 
 17538 ;; Auto vars:     Size  Location     Type
 17539 ;;  sw              1    3[BANK0 ] unsigned char 
 17540 ;; Return value:  Size  Location     Type
 17541 ;;		None               void
 17542 ;; Registers used:
 17543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17549 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;Total ram usage:        2 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    5
 17556 ;; This function calls:
 17557 ;;		_SwPointSelect
 17558 ;; This function is called by:
 17559 ;;		_DlyOff_Main
 17560 ;;		_setDimmerLights_ERROR
 17561 ;;		_setControl_Lights_Table
 17562 ;;		_setRFSW_Control
 17563 ;; This function uses a non-reentrant model
 17564 ;;
 17565                           
 17566                           
 17567                           ;psect for function _setSw_Status
 17568  2418                     _setSw_Status:	
 17569                           
 17570                           ;incstack = 0
 17571                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17572                           ;setSw_Status@sw stored from wreg
 17573  2418  0020               	movlb	0	; select bank0
 17574  2419  00A3               	movwf	setSw_Status@sw
 17575                           
 17576                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17577  241A  0823               	movf	setSw_Status@sw,w
 17578  241B  31A4  24DE         	fcall	_SwPointSelect
 17579                           
 17580                           ;Switch_B1.c: 109: Sw->Status=command;
 17581  241D  0020               	movlb	0	; select bank0
 17582  241E  086D               	movf	_Sw,w
 17583  241F  0086               	movwf	6
 17584  2420  3001               	movlw	1	; select bank2/3
 17585  2421  0087               	movwf	7
 17586  2422  0822               	movf	setSw_Status@command,w
 17587  2423  1301               	bcf	1,6
 17588  2424  1D03               	skipz
 17589  2425  1701               	bsf	1,6
 17590  2426  0008               	return
 17591  2427                     __end_of_setSw_Status:	
 17592                           
 17593                           	psect	text105
 17594  24DE                     __ptext105:	
 17595 ;; *************** function _SwPointSelect *****************
 17596 ;; Defined at:
 17597 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17598 ;; Parameters:    Size  Location     Type
 17599 ;;  sw              1    wreg     unsigned char 
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;  sw              1    1[BANK0 ] unsigned char 
 17602 ;; Return value:  Size  Location     Type
 17603 ;;		None               void
 17604 ;; Registers used:
 17605 ;;		wreg
 17606 ;; Tracked objects:
 17607 ;;		On entry : 0/0
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17615 ;;Total ram usage:        2 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    4
 17618 ;; This function calls:
 17619 ;;		Nothing
 17620 ;; This function is called by:
 17621 ;;		_setSw_Enable
 17622 ;;		_setSw_Status
 17623 ;;		_setSw_Main
 17624 ;;		_Sw_Detect
 17625 ;; This function uses a non-reentrant model
 17626 ;;
 17627                           
 17628                           
 17629                           ;psect for function _SwPointSelect
 17630  24DE                     _SwPointSelect:	
 17631                           
 17632                           ;incstack = 0
 17633                           ; Regs used in _SwPointSelect: [wreg]
 17634                           ;SwPointSelect@sw stored from wreg
 17635  24DE  0020               	movlb	0	; select bank0
 17636  24DF  00A1               	movwf	SwPointSelect@sw
 17637                           
 17638                           ;Switch_B1.c: 19: if(sw == 1)
 17639  24E0  0821               	movf	SwPointSelect@sw,w
 17640  24E1  3A01               	xorlw	1
 17641  24E2  1D03               	skipz
 17642  24E3  2CE9               	goto	l6550
 17643                           
 17644                           ;Switch_B1.c: 20: {
 17645                           ;Switch_B1.c: 21: Sw=&Sw1;
 17646  24E4  3056               	movlw	_Sw1& (0+255)
 17647  24E5  00A0               	movwf	??_SwPointSelect
 17648  24E6  0820               	movf	??_SwPointSelect,w
 17649  24E7  00ED               	movwf	_Sw
 17650                           
 17651                           ;Switch_B1.c: 22: }
 17652  24E8  0008               	return
 17653  24E9                     l6550:	
 17654                           
 17655                           ;Switch_B1.c: 25: else if(sw == 2)
 17656  24E9  0821               	movf	SwPointSelect@sw,w
 17657  24EA  3A02               	xorlw	2
 17658  24EB  1D03               	skipz
 17659  24EC  0008               	return
 17660                           
 17661                           ;Switch_B1.c: 26: {
 17662                           ;Switch_B1.c: 27: Sw=&Sw2;
 17663  24ED  305F               	movlw	_Sw2& (0+255)
 17664  24EE  00A0               	movwf	??_SwPointSelect
 17665  24EF  0820               	movf	??_SwPointSelect,w
 17666  24F0  00ED               	movwf	_Sw
 17667  24F1  0008               	return
 17668  24F2                     __end_of_SwPointSelect:	
 17669                           
 17670                           	psect	text106
 17671  1F95                     __ptext106:	
 17672 ;; *************** function _setRF_DimmerLights *****************
 17673 ;; Defined at:
 17674 ;;		line 444 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;  lights          1    wreg     unsigned char 
 17677 ;;  on              1   61[BANK0 ] unsigned char 
 17678 ;; Auto vars:     Size  Location     Type
 17679 ;;  lights          1   65[BANK0 ] unsigned char 
 17680 ;;  status          1   64[BANK0 ] unsigned char 
 17681 ;; Return value:  Size  Location     Type
 17682 ;;		None               void
 17683 ;; Registers used:
 17684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17685 ;; Tracked objects:
 17686 ;;		On entry : 0/0
 17687 ;;		On exit  : 0/0
 17688 ;;		Unchanged: 0/0
 17689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17690 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;Total ram usage:        5 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    7
 17697 ;; This function calls:
 17698 ;;		_setPercentValue
 17699 ;; This function is called by:
 17700 ;;		_DlyOff_Main
 17701 ;;		_setDimmerLights_Adj
 17702 ;;		_setRFSW_Control
 17703 ;;		_Sw_DimmerOnFunc
 17704 ;;		_Sw_DimmerOffFunc
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           
 17709                           ;psect for function _setRF_DimmerLights
 17710  1F95                     _setRF_DimmerLights:	
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17714                           ;setRF_DimmerLights@lights stored from wreg
 17715  1F95  0020               	movlb	0	; select bank0
 17716  1F96  00E1               	movwf	setRF_DimmerLights@lights
 17717                           
 17718                           ;RF_Control_B1.c: 446: char status;
 17719                           ;RF_Control_B1.c: 447: status=1;
 17720  1F97  01E0               	clrf	setRF_DimmerLights@status
 17721  1F98  0AE0               	incf	setRF_DimmerLights@status,f
 17722                           
 17723                           ;RF_Control_B1.c: 448: status<<=(lights-1);
 17724  1F99  0861               	movf	setRF_DimmerLights@lights,w
 17725  1F9A  3EFF               	addlw	-1
 17726  1F9B  0A89               	incf	9,f
 17727  1F9C  2F9F               	goto	u8370
 17728  1F9D                     u8375:	
 17729  1F9D  1003               	clrc
 17730  1F9E  0DE0               	rlf	setRF_DimmerLights@status,f
 17731  1F9F                     u8370:	
 17732  1F9F  3EFF               	addlw	-1
 17733  1FA0  1D03               	skipz
 17734  1FA1  2F9D               	goto	u8375
 17735                           
 17736                           ;RF_Control_B1.c: 449: Product->Data[11]=lights;
 17737  1FA2  0861               	movf	setRF_DimmerLights@lights,w
 17738  1FA3  00DE               	movwf	??_setRF_DimmerLights
 17739  1FA4  086F               	movf	_Product,w
 17740  1FA5  3E0B               	addlw	11
 17741  1FA6  0086               	movwf	6
 17742  1FA7  3001               	movlw	1	; select bank2/3
 17743  1FA8  0087               	movwf	7
 17744  1FA9  085E               	movf	??_setRF_DimmerLights,w
 17745  1FAA  0081               	movwf	1
 17746                           
 17747                           ;RF_Control_B1.c: 452: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 17748  1FAB  3043               	movlw	67
 17749  1FAC  319C  24C5  319F   	fcall	_setPercentValue
 17750  1FAF  0020               	movlb	0	; select bank0
 17751  1FB0  00DE               	movwf	??_setRF_DimmerLights
 17752  1FB1  0861               	movf	setRF_DimmerLights@lights,w
 17753  1FB2  3E14               	addlw	20
 17754  1FB3  076F               	addwf	_Product,w
 17755  1FB4  00DF               	movwf	??_setRF_DimmerLights+1
 17756  1FB5  085F               	movf	??_setRF_DimmerLights+1,w
 17757  1FB6  0086               	movwf	6
 17758  1FB7  3001               	movlw	1	; select bank2/3
 17759  1FB8  0087               	movwf	7
 17760  1FB9  085E               	movf	??_setRF_DimmerLights,w
 17761  1FBA  0081               	movwf	1
 17762                           
 17763                           ;RF_Control_B1.c: 455: Product->Data[9]=Product->Data[20+lights];
 17764  1FBB  0861               	movf	setRF_DimmerLights@lights,w
 17765  1FBC  3E14               	addlw	20
 17766  1FBD  076F               	addwf	_Product,w
 17767  1FBE  00DE               	movwf	??_setRF_DimmerLights
 17768  1FBF  085E               	movf	??_setRF_DimmerLights,w
 17769  1FC0  0086               	movwf	6
 17770  1FC1  3001               	movlw	1	; select bank2/3
 17771  1FC2  0087               	movwf	7
 17772  1FC3  0801               	movf	1,w
 17773  1FC4  00DF               	movwf	??_setRF_DimmerLights+1
 17774  1FC5  086F               	movf	_Product,w
 17775  1FC6  3E09               	addlw	9
 17776  1FC7  0086               	movwf	6
 17777  1FC8  3001               	movlw	1	; select bank2/3
 17778  1FC9  0087               	movwf	7
 17779  1FCA  085F               	movf	??_setRF_DimmerLights+1,w
 17780  1FCB  0081               	movwf	1
 17781                           
 17782                           ;RF_Control_B1.c: 456: Product->Data[17]=Product->Data[26+lights];
 17783  1FCC  0861               	movf	setRF_DimmerLights@lights,w
 17784  1FCD  3E1A               	addlw	26
 17785  1FCE  076F               	addwf	_Product,w
 17786  1FCF  00DE               	movwf	??_setRF_DimmerLights
 17787  1FD0  085E               	movf	??_setRF_DimmerLights,w
 17788  1FD1  0086               	movwf	6
 17789  1FD2  3001               	movlw	1	; select bank2/3
 17790  1FD3  0087               	movwf	7
 17791  1FD4  0801               	movf	1,w
 17792  1FD5  00DF               	movwf	??_setRF_DimmerLights+1
 17793  1FD6  086F               	movf	_Product,w
 17794  1FD7  3E11               	addlw	17
 17795  1FD8  0086               	movwf	6
 17796  1FD9  3001               	movlw	1	; select bank2/3
 17797  1FDA  0087               	movwf	7
 17798  1FDB  085F               	movf	??_setRF_DimmerLights+1,w
 17799  1FDC  0081               	movwf	1
 17800                           
 17801                           ;RF_Control_B1.c: 457: if(on)
 17802  1FDD  085D               	movf	setRF_DimmerLights@on,w
 17803  1FDE  1903               	btfsc	3,2
 17804  1FDF  2FF0               	goto	l8834
 17805                           
 17806                           ;RF_Control_B1.c: 458: {
 17807                           ;RF_Control_B1.c: 459: Product->Data[15]=(Product->Data[15]|status);
 17808  1FE0  086F               	movf	_Product,w
 17809  1FE1  3E0F               	addlw	15
 17810  1FE2  0086               	movwf	6
 17811  1FE3  3001               	movlw	1	; select bank2/3
 17812  1FE4  0087               	movwf	7
 17813  1FE5  0801               	movf	1,w
 17814  1FE6  0460               	iorwf	setRF_DimmerLights@status,w
 17815  1FE7  00DE               	movwf	??_setRF_DimmerLights
 17816  1FE8  086F               	movf	_Product,w
 17817  1FE9  3E0F               	addlw	15
 17818  1FEA  0086               	movwf	6
 17819  1FEB  3001               	movlw	1	; select bank2/3
 17820  1FEC  0087               	movwf	7
 17821  1FED  085E               	movf	??_setRF_DimmerLights,w
 17822  1FEE  0081               	movwf	1
 17823                           
 17824                           ;RF_Control_B1.c: 460: }
 17825  1FEF  0008               	return
 17826  1FF0                     l8834:	
 17827                           
 17828                           ;RF_Control_B1.c: 461: else
 17829                           ;RF_Control_B1.c: 462: {
 17830                           ;RF_Control_B1.c: 463: Product->Data[15]=(Product->Data[15]&(~status));
 17831  1FF0  086F               	movf	_Product,w
 17832  1FF1  3E0F               	addlw	15
 17833  1FF2  0086               	movwf	6
 17834  1FF3  3001               	movlw	1	; select bank2/3
 17835  1FF4  0087               	movwf	7
 17836  1FF5  0960               	comf	setRF_DimmerLights@status,w
 17837  1FF6  0501               	andwf	1,w
 17838  1FF7  00DE               	movwf	??_setRF_DimmerLights
 17839  1FF8  086F               	movf	_Product,w
 17840  1FF9  3E0F               	addlw	15
 17841  1FFA  0086               	movwf	6
 17842  1FFB  3001               	movlw	1	; select bank2/3
 17843  1FFC  0087               	movwf	7
 17844  1FFD  085E               	movf	??_setRF_DimmerLights,w
 17845  1FFE  0081               	movwf	1
 17846  1FFF  0008               	return
 17847  2000                     __end_of_setRF_DimmerLights:	
 17848                           
 17849                           	psect	text107
 17850  1CC5                     __ptext107:	
 17851 ;; *************** function _setPercentValue *****************
 17852 ;; Defined at:
 17853 ;;		line 505 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;  value           1    wreg     unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  value           1   57[BANK0 ] unsigned char 
 17858 ;;  i               3   58[BANK0 ] float 
 17859 ;; Return value:  Size  Location     Type
 17860 ;;                  1    wreg      unsigned char 
 17861 ;; Registers used:
 17862 ;;		wreg, status,2, status,0, pclath, cstack
 17863 ;; Tracked objects:
 17864 ;;		On entry : 0/0
 17865 ;;		On exit  : 0/0
 17866 ;;		Unchanged: 0/0
 17867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;Total ram usage:        4 bytes
 17873 ;; Hardware stack levels used:    1
 17874 ;; Hardware stack levels required when called:    6
 17875 ;; This function calls:
 17876 ;;		___awtoft
 17877 ;;		___ftdiv
 17878 ;;		___fttol
 17879 ;; This function is called by:
 17880 ;;		_Flash_Memory_Initialization
 17881 ;;		_setRF_DimmerLights
 17882 ;; This function uses a non-reentrant model
 17883 ;;
 17884                           
 17885                           
 17886                           ;psect for function _setPercentValue
 17887  1CC5                     _setPercentValue:	
 17888                           
 17889                           ;incstack = 0
 17890                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17891                           ;setPercentValue@value stored from wreg
 17892  1CC5  0020               	movlb	0	; select bank0
 17893  1CC6  00D9               	movwf	setPercentValue@value
 17894                           
 17895                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17896  1CC7  3000               	movlw	0
 17897  1CC8  00DA               	movwf	setPercentValue@i
 17898  1CC9  3054               	movlw	84
 17899  1CCA  00DB               	movwf	setPercentValue@i+1
 17900  1CCB  3042               	movlw	66
 17901  1CCC  00DC               	movwf	setPercentValue@i+2
 17902                           
 17903                           ;Dimmer_B1.c: 509: i/=100;
 17904  1CCD  3000               	movlw	0
 17905  1CCE  00AE               	movwf	___ftdiv@f2
 17906  1CCF  30C8               	movlw	200
 17907  1CD0  00AF               	movwf	___ftdiv@f2+1
 17908  1CD1  3042               	movlw	66
 17909  1CD2  00B0               	movwf	___ftdiv@f2+2
 17910  1CD3  085A               	movf	setPercentValue@i,w
 17911  1CD4  00B1               	movwf	___ftdiv@f1
 17912  1CD5  085B               	movf	setPercentValue@i+1,w
 17913  1CD6  00B2               	movwf	___ftdiv@f1+1
 17914  1CD7  085C               	movf	setPercentValue@i+2,w
 17915  1CD8  00B3               	movwf	___ftdiv@f1+2
 17916  1CD9  3188  2060  319C   	fcall	___ftdiv
 17917  1CDC  0020               	movlb	0	; select bank0
 17918  1CDD  082E               	movf	?___ftdiv,w
 17919  1CDE  00DA               	movwf	setPercentValue@i
 17920  1CDF  082F               	movf	?___ftdiv+1,w
 17921  1CE0  00DB               	movwf	setPercentValue@i+1
 17922  1CE1  0830               	movf	?___ftdiv+2,w
 17923  1CE2  00DC               	movwf	setPercentValue@i+2
 17924                           
 17925                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17926  1CE3  0859               	movf	setPercentValue@value,w
 17927  1CE4  3EBD               	addlw	189
 17928  1CE5  00A8               	movwf	___awtoft@c
 17929  1CE6  30FF               	movlw	255
 17930  1CE7  1803               	skipnc
 17931  1CE8  3000               	movlw	0
 17932  1CE9  00A9               	movwf	___awtoft@c+1
 17933  1CEA  31A7  2700  319C   	fcall	___awtoft
 17934  1CED  0020               	movlb	0	; select bank0
 17935  1CEE  0828               	movf	?___awtoft,w
 17936  1CEF  00B1               	movwf	___ftdiv@f1
 17937  1CF0  0829               	movf	?___awtoft+1,w
 17938  1CF1  00B2               	movwf	___ftdiv@f1+1
 17939  1CF2  082A               	movf	?___awtoft+2,w
 17940  1CF3  00B3               	movwf	___ftdiv@f1+2
 17941  1CF4  085A               	movf	setPercentValue@i,w
 17942  1CF5  00AE               	movwf	___ftdiv@f2
 17943  1CF6  085B               	movf	setPercentValue@i+1,w
 17944  1CF7  00AF               	movwf	___ftdiv@f2+1
 17945  1CF8  085C               	movf	setPercentValue@i+2,w
 17946  1CF9  00B0               	movwf	___ftdiv@f2+2
 17947  1CFA  3188  2060  319C   	fcall	___ftdiv
 17948  1CFD  0020               	movlb	0	; select bank0
 17949  1CFE  082E               	movf	?___ftdiv,w
 17950  1CFF  00CB               	movwf	___fttol@f1
 17951  1D00  082F               	movf	?___ftdiv+1,w
 17952  1D01  00CC               	movwf	___fttol@f1+1
 17953  1D02  0830               	movf	?___ftdiv+2,w
 17954  1D03  00CD               	movwf	___fttol@f1+2
 17955  1D04  3193  23FC         	fcall	___fttol
 17956  1D06  0020               	movlb	0	; select bank0
 17957  1D07  034B               	decf	?___fttol,w
 17958  1D08  3AFF               	xorlw	255
 17959  1D09  3E64               	addlw	100
 17960  1D0A  0008               	return
 17961  1D0B                     __end_of_setPercentValue:	
 17962                           
 17963                           	psect	text108
 17964  13FC                     __ptext108:	
 17965 ;; *************** function ___fttol *****************
 17966 ;; Defined at:
 17967 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17968 ;; Parameters:    Size  Location     Type
 17969 ;;  f1              3   43[BANK0 ] float 
 17970 ;; Auto vars:     Size  Location     Type
 17971 ;;  lval            4   52[BANK0 ] unsigned long 
 17972 ;;  exp1            1   56[BANK0 ] unsigned char 
 17973 ;;  sign1           1   51[BANK0 ] unsigned char 
 17974 ;; Return value:  Size  Location     Type
 17975 ;;                  4   43[BANK0 ] long 
 17976 ;; Registers used:
 17977 ;;		wreg, status,2, status,0
 17978 ;; Tracked objects:
 17979 ;;		On entry : 0/0
 17980 ;;		On exit  : 0/0
 17981 ;;		Unchanged: 0/0
 17982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17983 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;Total ram usage:       14 bytes
 17988 ;; Hardware stack levels used:    1
 17989 ;; Hardware stack levels required when called:    4
 17990 ;; This function calls:
 17991 ;;		Nothing
 17992 ;; This function is called by:
 17993 ;;		_getPercentValue
 17994 ;;		_setPercentValue
 17995 ;; This function uses a non-reentrant model
 17996 ;;
 17997                           
 17998                           
 17999                           ;psect for function ___fttol
 18000  13FC                     ___fttol:	
 18001                           
 18002                           ;incstack = 0
 18003                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18004  13FC  0020               	movlb	0	; select bank0
 18005  13FD  084B               	movf	___fttol@f1,w
 18006  13FE  00CF               	movwf	??___fttol
 18007  13FF  084C               	movf	___fttol@f1+1,w
 18008  1400  00D0               	movwf	??___fttol+1
 18009  1401  084D               	movf	___fttol@f1+2,w
 18010  1402  00D1               	movwf	??___fttol+2
 18011  1403  1003               	clrc
 18012  1404  0D50               	rlf	??___fttol+1,w
 18013  1405  0D51               	rlf	??___fttol+2,w
 18014  1406  00D2               	movwf	??___fttol+3
 18015  1407  0852               	movf	??___fttol+3,w
 18016  1408  00D8               	movwf	___fttol@exp1
 18017  1409  08D8               	movf	___fttol@exp1,f
 18018  140A  1D03               	skipz
 18019  140B  2C15               	goto	l6422
 18020  140C  3000               	movlw	0
 18021  140D  00CE               	movwf	?___fttol+3
 18022  140E  3000               	movlw	0
 18023  140F  00CD               	movwf	?___fttol+2
 18024  1410  3000               	movlw	0
 18025  1411  00CC               	movwf	?___fttol+1
 18026  1412  3000               	movlw	0
 18027  1413  00CB               	movwf	?___fttol
 18028  1414  0008               	return
 18029  1415                     l6422:	
 18030  1415  084B               	movf	___fttol@f1,w
 18031  1416  00CF               	movwf	??___fttol
 18032  1417  084C               	movf	___fttol@f1+1,w
 18033  1418  00D0               	movwf	??___fttol+1
 18034  1419  084D               	movf	___fttol@f1+2,w
 18035  141A  00D1               	movwf	??___fttol+2
 18036  141B  3017               	movlw	23
 18037  141C                     u4715:	
 18038  141C  36D1               	lsrf	??___fttol+2,f
 18039  141D  0CD0               	rrf	??___fttol+1,f
 18040  141E  0CCF               	rrf	??___fttol,f
 18041  141F  0B89               	decfsz	9,f
 18042  1420  2C1C               	goto	u4715
 18043  1421  084F               	movf	??___fttol,w
 18044  1422  00D2               	movwf	??___fttol+3
 18045  1423  0852               	movf	??___fttol+3,w
 18046  1424  00D3               	movwf	___fttol@sign1
 18047  1425  17CC               	bsf	___fttol@f1+1,7
 18048  1426  30FF               	movlw	255
 18049  1427  05CB               	andwf	___fttol@f1,f
 18050  1428  30FF               	movlw	255
 18051  1429  05CC               	andwf	___fttol@f1+1,f
 18052  142A  3000               	movlw	0
 18053  142B  05CD               	andwf	___fttol@f1+2,f
 18054  142C  084B               	movf	___fttol@f1,w
 18055  142D  00D4               	movwf	___fttol@lval
 18056  142E  084C               	movf	___fttol@f1+1,w
 18057  142F  00D5               	movwf	___fttol@lval+1
 18058  1430  084D               	movf	___fttol@f1+2,w
 18059  1431  00D6               	movwf	___fttol@lval+2
 18060  1432  01D7               	clrf	___fttol@lval+3
 18061  1433  308E               	movlw	142
 18062  1434  02D8               	subwf	___fttol@exp1,f
 18063  1435  1FD8               	btfss	___fttol@exp1,7
 18064  1436  2C53               	goto	l6442
 18065  1437  0858               	movf	___fttol@exp1,w
 18066  1438  3A80               	xorlw	128
 18067  1439  3E8F               	addlw	143
 18068  143A  1803               	skipnc
 18069  143B  2C45               	goto	l6440
 18070  143C  3000               	movlw	0
 18071  143D  00CE               	movwf	?___fttol+3
 18072  143E  3000               	movlw	0
 18073  143F  00CD               	movwf	?___fttol+2
 18074  1440  3000               	movlw	0
 18075  1441  00CC               	movwf	?___fttol+1
 18076  1442  3000               	movlw	0
 18077  1443  00CB               	movwf	?___fttol
 18078  1444  0008               	return
 18079  1445                     l6440:	
 18080  1445  3001               	movlw	1
 18081  1446                     u4745:	
 18082  1446  36D7               	lsrf	___fttol@lval+3,f
 18083  1447  0CD6               	rrf	___fttol@lval+2,f
 18084  1448  0CD5               	rrf	___fttol@lval+1,f
 18085  1449  0CD4               	rrf	___fttol@lval,f
 18086  144A  0B89               	decfsz	9,f
 18087  144B  2C46               	goto	u4745
 18088  144C  3001               	movlw	1
 18089  144D  00CF               	movwf	??___fttol
 18090  144E  084F               	movf	??___fttol,w
 18091  144F  07D8               	addwf	___fttol@exp1,f
 18092  1450  1903               	btfsc	3,2
 18093  1451  2C6C               	goto	l6452
 18094  1452  2C45               	goto	l6440
 18095  1453                     l6442:	
 18096  1453  3018               	movlw	24
 18097  1454  0258               	subwf	___fttol@exp1,w
 18098  1455  1C03               	skipc
 18099  1456  2C69               	goto	l6450
 18100  1457  3000               	movlw	0
 18101  1458  00CE               	movwf	?___fttol+3
 18102  1459  3000               	movlw	0
 18103  145A  00CD               	movwf	?___fttol+2
 18104  145B  3000               	movlw	0
 18105  145C  00CC               	movwf	?___fttol+1
 18106  145D  3000               	movlw	0
 18107  145E  00CB               	movwf	?___fttol
 18108  145F  0008               	return
 18109  1460                     l6448:	
 18110  1460  3001               	movlw	1
 18111  1461                     u4775:	
 18112  1461  35D4               	lslf	___fttol@lval,f
 18113  1462  0DD5               	rlf	___fttol@lval+1,f
 18114  1463  0DD6               	rlf	___fttol@lval+2,f
 18115  1464  0DD7               	rlf	___fttol@lval+3,f
 18116  1465  0B89               	decfsz	9,f
 18117  1466  2C61               	goto	u4775
 18118  1467  3001               	movlw	1
 18119  1468  02D8               	subwf	___fttol@exp1,f
 18120  1469                     l6450:	
 18121  1469  08D8               	movf	___fttol@exp1,f
 18122  146A  1D03               	skipz
 18123  146B  2C60               	goto	l6448
 18124  146C                     l6452:	
 18125  146C  0853               	movf	___fttol@sign1,w
 18126  146D  1903               	btfsc	3,2
 18127  146E  2C7A               	goto	l6456
 18128  146F  09D4               	comf	___fttol@lval,f
 18129  1470  09D5               	comf	___fttol@lval+1,f
 18130  1471  09D6               	comf	___fttol@lval+2,f
 18131  1472  09D7               	comf	___fttol@lval+3,f
 18132  1473  0AD4               	incf	___fttol@lval,f
 18133  1474  1903               	skipnz
 18134  1475  0AD5               	incf	___fttol@lval+1,f
 18135  1476  1903               	skipnz
 18136  1477  0AD6               	incf	___fttol@lval+2,f
 18137  1478  1903               	skipnz
 18138  1479  0AD7               	incf	___fttol@lval+3,f
 18139  147A                     l6456:	
 18140  147A  0857               	movf	___fttol@lval+3,w
 18141  147B  00CE               	movwf	?___fttol+3
 18142  147C  0856               	movf	___fttol@lval+2,w
 18143  147D  00CD               	movwf	?___fttol+2
 18144  147E  0855               	movf	___fttol@lval+1,w
 18145  147F  00CC               	movwf	?___fttol+1
 18146  1480  0854               	movf	___fttol@lval,w
 18147  1481  00CB               	movwf	?___fttol
 18148  1482  0008               	return
 18149  1483                     __end_of___fttol:	
 18150                           
 18151                           	psect	text109
 18152  0860                     __ptext109:	
 18153 ;; *************** function ___ftdiv *****************
 18154 ;; Defined at:
 18155 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18156 ;; Parameters:    Size  Location     Type
 18157 ;;  f2              3   14[BANK0 ] float 
 18158 ;;  f1              3   17[BANK0 ] float 
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;  f3              3   25[BANK0 ] float 
 18161 ;;  sign            1   29[BANK0 ] unsigned char 
 18162 ;;  exp             1   28[BANK0 ] unsigned char 
 18163 ;;  cntr            1   24[BANK0 ] unsigned char 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  3   14[BANK0 ] float 
 18166 ;; Registers used:
 18167 ;;		wreg, status,2, status,0, pclath, cstack
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18173 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;Total ram usage:       16 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:    5
 18180 ;; This function calls:
 18181 ;;		___ftpack
 18182 ;; This function is called by:
 18183 ;;		_getPercentValue
 18184 ;;		_setPercentValue
 18185 ;; This function uses a non-reentrant model
 18186 ;;
 18187                           
 18188                           
 18189                           ;psect for function ___ftdiv
 18190  0860                     ___ftdiv:	
 18191                           
 18192                           ;incstack = 0
 18193                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18194  0860  0020               	movlb	0	; select bank0
 18195  0861  0831               	movf	___ftdiv@f1,w
 18196  0862  00B4               	movwf	??___ftdiv
 18197  0863  0832               	movf	___ftdiv@f1+1,w
 18198  0864  00B5               	movwf	??___ftdiv+1
 18199  0865  0833               	movf	___ftdiv@f1+2,w
 18200  0866  00B6               	movwf	??___ftdiv+2
 18201  0867  1003               	clrc
 18202  0868  0D35               	rlf	??___ftdiv+1,w
 18203  0869  0D36               	rlf	??___ftdiv+2,w
 18204  086A  00B7               	movwf	??___ftdiv+3
 18205  086B  0837               	movf	??___ftdiv+3,w
 18206  086C  00BC               	movwf	___ftdiv@exp
 18207  086D  08BC               	movf	___ftdiv@exp,f
 18208  086E  1D03               	skipz
 18209  086F  2877               	goto	l6330
 18210  0870  3000               	movlw	0
 18211  0871  00AE               	movwf	?___ftdiv
 18212  0872  3000               	movlw	0
 18213  0873  00AF               	movwf	?___ftdiv+1
 18214  0874  3000               	movlw	0
 18215  0875  00B0               	movwf	?___ftdiv+2
 18216  0876  0008               	return
 18217  0877                     l6330:	
 18218  0877  082E               	movf	___ftdiv@f2,w
 18219  0878  00B4               	movwf	??___ftdiv
 18220  0879  082F               	movf	___ftdiv@f2+1,w
 18221  087A  00B5               	movwf	??___ftdiv+1
 18222  087B  0830               	movf	___ftdiv@f2+2,w
 18223  087C  00B6               	movwf	??___ftdiv+2
 18224  087D  1003               	clrc
 18225  087E  0D35               	rlf	??___ftdiv+1,w
 18226  087F  0D36               	rlf	??___ftdiv+2,w
 18227  0880  00B7               	movwf	??___ftdiv+3
 18228  0881  0837               	movf	??___ftdiv+3,w
 18229  0882  00BD               	movwf	___ftdiv@sign
 18230  0883  08BD               	movf	___ftdiv@sign,f
 18231  0884  1D03               	skipz
 18232  0885  288D               	goto	l6336
 18233  0886  3000               	movlw	0
 18234  0887  00AE               	movwf	?___ftdiv
 18235  0888  3000               	movlw	0
 18236  0889  00AF               	movwf	?___ftdiv+1
 18237  088A  3000               	movlw	0
 18238  088B  00B0               	movwf	?___ftdiv+2
 18239  088C  0008               	return
 18240  088D                     l6336:	
 18241  088D  3000               	movlw	0
 18242  088E  00B9               	movwf	___ftdiv@f3
 18243  088F  3000               	movlw	0
 18244  0890  00BA               	movwf	___ftdiv@f3+1
 18245  0891  3000               	movlw	0
 18246  0892  00BB               	movwf	___ftdiv@f3+2
 18247  0893  3089               	movlw	137
 18248  0894  073D               	addwf	___ftdiv@sign,w
 18249  0895  00B4               	movwf	??___ftdiv
 18250  0896  0834               	movf	??___ftdiv,w
 18251  0897  02BC               	subwf	___ftdiv@exp,f
 18252  0898  0831               	movf	___ftdiv@f1,w
 18253  0899  00B4               	movwf	??___ftdiv
 18254  089A  0832               	movf	___ftdiv@f1+1,w
 18255  089B  00B5               	movwf	??___ftdiv+1
 18256  089C  0833               	movf	___ftdiv@f1+2,w
 18257  089D  00B6               	movwf	??___ftdiv+2
 18258  089E  3010               	movlw	16
 18259  089F                     u4525:	
 18260  089F  36B6               	lsrf	??___ftdiv+2,f
 18261  08A0  0CB5               	rrf	??___ftdiv+1,f
 18262  08A1  0CB4               	rrf	??___ftdiv,f
 18263  08A2  0B89               	decfsz	9,f
 18264  08A3  289F               	goto	u4525
 18265  08A4  0834               	movf	??___ftdiv,w
 18266  08A5  00B7               	movwf	??___ftdiv+3
 18267  08A6  0837               	movf	??___ftdiv+3,w
 18268  08A7  00BD               	movwf	___ftdiv@sign
 18269  08A8  082E               	movf	___ftdiv@f2,w
 18270  08A9  00B4               	movwf	??___ftdiv
 18271  08AA  082F               	movf	___ftdiv@f2+1,w
 18272  08AB  00B5               	movwf	??___ftdiv+1
 18273  08AC  0830               	movf	___ftdiv@f2+2,w
 18274  08AD  00B6               	movwf	??___ftdiv+2
 18275  08AE  3010               	movlw	16
 18276  08AF                     u4535:	
 18277  08AF  36B6               	lsrf	??___ftdiv+2,f
 18278  08B0  0CB5               	rrf	??___ftdiv+1,f
 18279  08B1  0CB4               	rrf	??___ftdiv,f
 18280  08B2  0B89               	decfsz	9,f
 18281  08B3  28AF               	goto	u4535
 18282  08B4  0834               	movf	??___ftdiv,w
 18283  08B5  00B7               	movwf	??___ftdiv+3
 18284  08B6  0837               	movf	??___ftdiv+3,w
 18285  08B7  06BD               	xorwf	___ftdiv@sign,f
 18286  08B8  3080               	movlw	128
 18287  08B9  00B4               	movwf	??___ftdiv
 18288  08BA  0834               	movf	??___ftdiv,w
 18289  08BB  05BD               	andwf	___ftdiv@sign,f
 18290  08BC  17B2               	bsf	___ftdiv@f1+1,7
 18291  08BD  30FF               	movlw	255
 18292  08BE  05B1               	andwf	___ftdiv@f1,f
 18293  08BF  30FF               	movlw	255
 18294  08C0  05B2               	andwf	___ftdiv@f1+1,f
 18295  08C1  3000               	movlw	0
 18296  08C2  05B3               	andwf	___ftdiv@f1+2,f
 18297  08C3  17AF               	bsf	___ftdiv@f2+1,7
 18298  08C4  30FF               	movlw	255
 18299  08C5  05AE               	andwf	___ftdiv@f2,f
 18300  08C6  30FF               	movlw	255
 18301  08C7  05AF               	andwf	___ftdiv@f2+1,f
 18302  08C8  3000               	movlw	0
 18303  08C9  05B0               	andwf	___ftdiv@f2+2,f
 18304  08CA  3018               	movlw	24
 18305  08CB  00B4               	movwf	??___ftdiv
 18306  08CC  0834               	movf	??___ftdiv,w
 18307  08CD  00B8               	movwf	___ftdiv@cntr
 18308  08CE                     l6350:	
 18309  08CE  3001               	movlw	1
 18310  08CF                     u4545:	
 18311  08CF  35B9               	lslf	___ftdiv@f3,f
 18312  08D0  0DBA               	rlf	___ftdiv@f3+1,f
 18313  08D1  0DBB               	rlf	___ftdiv@f3+2,f
 18314  08D2  0B89               	decfsz	9,f
 18315  08D3  28CF               	goto	u4545
 18316  08D4  0830               	movf	___ftdiv@f2+2,w
 18317  08D5  0233               	subwf	___ftdiv@f1+2,w
 18318  08D6  1D03               	skipz
 18319  08D7  28DE               	goto	u4555
 18320  08D8  082F               	movf	___ftdiv@f2+1,w
 18321  08D9  0232               	subwf	___ftdiv@f1+1,w
 18322  08DA  1D03               	skipz
 18323  08DB  28DE               	goto	u4555
 18324  08DC  082E               	movf	___ftdiv@f2,w
 18325  08DD  0231               	subwf	___ftdiv@f1,w
 18326  08DE                     u4555:	
 18327  08DE  1C03               	skipc
 18328  08DF  28E7               	goto	l6358
 18329  08E0  082E               	movf	___ftdiv@f2,w
 18330  08E1  02B1               	subwf	___ftdiv@f1,f
 18331  08E2  082F               	movf	___ftdiv@f2+1,w
 18332  08E3  3BB2               	subwfb	___ftdiv@f1+1,f
 18333  08E4  0830               	movf	___ftdiv@f2+2,w
 18334  08E5  3BB3               	subwfb	___ftdiv@f1+2,f
 18335  08E6  1439               	bsf	___ftdiv@f3,0
 18336  08E7                     l6358:	
 18337  08E7  3001               	movlw	1
 18338  08E8                     u4565:	
 18339  08E8  35B1               	lslf	___ftdiv@f1,f
 18340  08E9  0DB2               	rlf	___ftdiv@f1+1,f
 18341  08EA  0DB3               	rlf	___ftdiv@f1+2,f
 18342  08EB  0B89               	decfsz	9,f
 18343  08EC  28E8               	goto	u4565
 18344  08ED  3001               	movlw	1
 18345  08EE  02B8               	subwf	___ftdiv@cntr,f
 18346  08EF  1D03               	btfss	3,2
 18347  08F0  28CE               	goto	l6350
 18348  08F1  0839               	movf	___ftdiv@f3,w
 18349  08F2  00A0               	movwf	___ftpack@arg
 18350  08F3  083A               	movf	___ftdiv@f3+1,w
 18351  08F4  00A1               	movwf	___ftpack@arg+1
 18352  08F5  083B               	movf	___ftdiv@f3+2,w
 18353  08F6  00A2               	movwf	___ftpack@arg+2
 18354  08F7  083C               	movf	___ftdiv@exp,w
 18355  08F8  00B4               	movwf	??___ftdiv
 18356  08F9  0834               	movf	??___ftdiv,w
 18357  08FA  00A3               	movwf	___ftpack@exp
 18358  08FB  083D               	movf	___ftdiv@sign,w
 18359  08FC  00B5               	movwf	??___ftdiv+1
 18360  08FD  0835               	movf	??___ftdiv+1,w
 18361  08FE  00A4               	movwf	___ftpack@sign
 18362  08FF  319E  266B         	fcall	___ftpack
 18363  0901  0020               	movlb	0	; select bank0
 18364  0902  0820               	movf	?___ftpack,w
 18365  0903  00AE               	movwf	?___ftdiv
 18366  0904  0821               	movf	?___ftpack+1,w
 18367  0905  00AF               	movwf	?___ftdiv+1
 18368  0906  0822               	movf	?___ftpack+2,w
 18369  0907  00B0               	movwf	?___ftdiv+2
 18370  0908  0008               	return
 18371  0909                     __end_of___ftdiv:	
 18372                           
 18373                           	psect	text110
 18374  2700                     __ptext110:	
 18375 ;; *************** function ___awtoft *****************
 18376 ;; Defined at:
 18377 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  c               2    8[BANK0 ] int 
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;  sign            1   13[BANK0 ] unsigned char 
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  3    8[BANK0 ] float 
 18384 ;; Registers used:
 18385 ;;		wreg, status,2, status,0, pclath, cstack
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;Total ram usage:        6 bytes
 18396 ;; Hardware stack levels used:    1
 18397 ;; Hardware stack levels required when called:    5
 18398 ;; This function calls:
 18399 ;;		___ftpack
 18400 ;; This function is called by:
 18401 ;;		_getPercentValue
 18402 ;;		_setPercentValue
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           
 18407                           ;psect for function ___awtoft
 18408  2700                     ___awtoft:	
 18409                           
 18410                           ;incstack = 0
 18411                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18412  2700  0020               	movlb	0	; select bank0
 18413  2701  01AD               	clrf	___awtoft@sign
 18414  2702  1FA9               	btfss	___awtoft@c+1,7
 18415  2703  2F0B               	goto	l6248
 18416  2704  09A8               	comf	___awtoft@c,f
 18417  2705  09A9               	comf	___awtoft@c+1,f
 18418  2706  0AA8               	incf	___awtoft@c,f
 18419  2707  1903               	skipnz
 18420  2708  0AA9               	incf	___awtoft@c+1,f
 18421  2709  01AD               	clrf	___awtoft@sign
 18422  270A  0AAD               	incf	___awtoft@sign,f
 18423  270B                     l6248:	
 18424  270B  0828               	movf	___awtoft@c,w
 18425  270C  00A0               	movwf	___ftpack@arg
 18426  270D  0829               	movf	___awtoft@c+1,w
 18427  270E  00A1               	movwf	___ftpack@arg+1
 18428  270F  01A2               	clrf	___ftpack@arg+2
 18429  2710  308E               	movlw	142
 18430  2711  00AB               	movwf	??___awtoft
 18431  2712  082B               	movf	??___awtoft,w
 18432  2713  00A3               	movwf	___ftpack@exp
 18433  2714  082D               	movf	___awtoft@sign,w
 18434  2715  00AC               	movwf	??___awtoft+1
 18435  2716  082C               	movf	??___awtoft+1,w
 18436  2717  00A4               	movwf	___ftpack@sign
 18437  2718  319E  266B         	fcall	___ftpack
 18438  271A  0020               	movlb	0	; select bank0
 18439  271B  0820               	movf	?___ftpack,w
 18440  271C  00A8               	movwf	?___awtoft
 18441  271D  0821               	movf	?___ftpack+1,w
 18442  271E  00A9               	movwf	?___awtoft+1
 18443  271F  0822               	movf	?___ftpack+2,w
 18444  2720  00AA               	movwf	?___awtoft+2
 18445  2721  0008               	return
 18446  2722                     __end_of___awtoft:	
 18447                           
 18448                           	psect	text111
 18449  1E6B                     __ptext111:	
 18450 ;; *************** function ___ftpack *****************
 18451 ;; Defined at:
 18452 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18453 ;; Parameters:    Size  Location     Type
 18454 ;;  arg             3    0[BANK0 ] unsigned um
 18455 ;;  exp             1    3[BANK0 ] unsigned char 
 18456 ;;  sign            1    4[BANK0 ] unsigned char 
 18457 ;; Auto vars:     Size  Location     Type
 18458 ;;		None
 18459 ;; Return value:  Size  Location     Type
 18460 ;;                  3    0[BANK0 ] float 
 18461 ;; Registers used:
 18462 ;;		wreg, status,2, status,0
 18463 ;; Tracked objects:
 18464 ;;		On entry : 0/0
 18465 ;;		On exit  : 0/0
 18466 ;;		Unchanged: 0/0
 18467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18468 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18472 ;;Total ram usage:        8 bytes
 18473 ;; Hardware stack levels used:    1
 18474 ;; Hardware stack levels required when called:    4
 18475 ;; This function calls:
 18476 ;;		Nothing
 18477 ;; This function is called by:
 18478 ;;		___awtoft
 18479 ;;		___ftadd
 18480 ;;		___ftdiv
 18481 ;;		___ftmul
 18482 ;; This function uses a non-reentrant model
 18483 ;;
 18484                           
 18485                           
 18486                           ;psect for function ___ftpack
 18487  1E6B                     ___ftpack:	
 18488                           
 18489                           ;incstack = 0
 18490                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18491  1E6B  0020               	movlb	0	; select bank0
 18492  1E6C  0823               	movf	___ftpack@exp,w
 18493  1E6D  1903               	btfsc	3,2
 18494  1E6E  2E74               	goto	l6214
 18495  1E6F  0822               	movf	___ftpack@arg+2,w
 18496  1E70  0421               	iorwf	___ftpack@arg+1,w
 18497  1E71  0420               	iorwf	___ftpack@arg,w
 18498  1E72  1D03               	skipz
 18499  1E73  2E85               	goto	l6220
 18500  1E74                     l6214:	
 18501  1E74  3000               	movlw	0
 18502  1E75  00A0               	movwf	?___ftpack
 18503  1E76  3000               	movlw	0
 18504  1E77  00A1               	movwf	?___ftpack+1
 18505  1E78  3000               	movlw	0
 18506  1E79  00A2               	movwf	?___ftpack+2
 18507  1E7A  0008               	return
 18508  1E7B                     l6218:	
 18509  1E7B  3001               	movlw	1
 18510  1E7C  00A5               	movwf	??___ftpack
 18511  1E7D  0825               	movf	??___ftpack,w
 18512  1E7E  07A3               	addwf	___ftpack@exp,f
 18513  1E7F  3001               	movlw	1
 18514  1E80                     u4175:	
 18515  1E80  36A2               	lsrf	___ftpack@arg+2,f
 18516  1E81  0CA1               	rrf	___ftpack@arg+1,f
 18517  1E82  0CA0               	rrf	___ftpack@arg,f
 18518  1E83  0B89               	decfsz	9,f
 18519  1E84  2E80               	goto	u4175
 18520  1E85                     l6220:	
 18521  1E85  30FE               	movlw	254
 18522  1E86  0522               	andwf	___ftpack@arg+2,w
 18523  1E87  1903               	btfsc	3,2
 18524  1E88  2E9E               	goto	l3414
 18525  1E89  2E7B               	goto	l6218
 18526  1E8A                     l6222:	
 18527  1E8A  3001               	movlw	1
 18528  1E8B  00A5               	movwf	??___ftpack
 18529  1E8C  0825               	movf	??___ftpack,w
 18530  1E8D  07A3               	addwf	___ftpack@exp,f
 18531  1E8E  3001               	movlw	1
 18532  1E8F  07A0               	addwf	___ftpack@arg,f
 18533  1E90  3000               	movlw	0
 18534  1E91  1803               	skipnc
 18535  1E92  3001               	movlw	1
 18536  1E93  07A1               	addwf	___ftpack@arg+1,f
 18537  1E94  3000               	movlw	0
 18538  1E95  1803               	skipnc
 18539  1E96  3001               	movlw	1
 18540  1E97  07A2               	addwf	___ftpack@arg+2,f
 18541  1E98  3001               	movlw	1
 18542  1E99                     u4195:	
 18543  1E99  36A2               	lsrf	___ftpack@arg+2,f
 18544  1E9A  0CA1               	rrf	___ftpack@arg+1,f
 18545  1E9B  0CA0               	rrf	___ftpack@arg,f
 18546  1E9C  0B89               	decfsz	9,f
 18547  1E9D  2E99               	goto	u4195
 18548  1E9E                     l3414:	
 18549  1E9E  30FF               	movlw	255
 18550  1E9F  0522               	andwf	___ftpack@arg+2,w
 18551  1EA0  1903               	btfsc	3,2
 18552  1EA1  2EAB               	goto	l6230
 18553  1EA2  2E8A               	goto	l6222
 18554  1EA3                     l6228:	
 18555  1EA3  3001               	movlw	1
 18556  1EA4  02A3               	subwf	___ftpack@exp,f
 18557  1EA5  3001               	movlw	1
 18558  1EA6                     u4215:	
 18559  1EA6  35A0               	lslf	___ftpack@arg,f
 18560  1EA7  0DA1               	rlf	___ftpack@arg+1,f
 18561  1EA8  0DA2               	rlf	___ftpack@arg+2,f
 18562  1EA9  0B89               	decfsz	9,f
 18563  1EAA  2EA6               	goto	u4215
 18564  1EAB                     l6230:	
 18565  1EAB  1FA1               	btfss	___ftpack@arg+1,7
 18566  1EAC  2EA3               	goto	l6228
 18567  1EAD  1823               	btfsc	___ftpack@exp,0
 18568  1EAE  2EB5               	goto	l3420
 18569  1EAF  30FF               	movlw	255
 18570  1EB0  05A0               	andwf	___ftpack@arg,f
 18571  1EB1  307F               	movlw	127
 18572  1EB2  05A1               	andwf	___ftpack@arg+1,f
 18573  1EB3  30FF               	movlw	255
 18574  1EB4  05A2               	andwf	___ftpack@arg+2,f
 18575  1EB5                     l3420:	
 18576  1EB5  1003               	clrc
 18577  1EB6  0CA3               	rrf	___ftpack@exp,f
 18578  1EB7  0823               	movf	___ftpack@exp,w
 18579  1EB8  00A5               	movwf	??___ftpack
 18580  1EB9  01A6               	clrf	??___ftpack+1
 18581  1EBA  01A7               	clrf	??___ftpack+2
 18582  1EBB  3010               	movlw	16
 18583  1EBC                     u4245:	
 18584  1EBC  35A5               	lslf	??___ftpack,f
 18585  1EBD  0DA6               	rlf	??___ftpack+1,f
 18586  1EBE  0DA7               	rlf	??___ftpack+2,f
 18587  1EBF  0B89               	decfsz	9,f
 18588  1EC0  2EBC               	goto	u4245
 18589  1EC1  0825               	movf	??___ftpack,w
 18590  1EC2  04A0               	iorwf	___ftpack@arg,f
 18591  1EC3  0826               	movf	??___ftpack+1,w
 18592  1EC4  04A1               	iorwf	___ftpack@arg+1,f
 18593  1EC5  0827               	movf	??___ftpack+2,w
 18594  1EC6  04A2               	iorwf	___ftpack@arg+2,f
 18595  1EC7  0824               	movf	___ftpack@sign,w
 18596  1EC8  1903               	btfsc	3,2
 18597  1EC9  0008               	return
 18598  1ECA  17A2               	bsf	___ftpack@arg+2,7
 18599  1ECB  0008               	return
 18600  1ECC                     __end_of___ftpack:	
 18601                           
 18602                           	psect	text112
 18603  2409                     __ptext112:	
 18604 ;; *************** function _setRFSW_Status *****************
 18605 ;; Defined at:
 18606 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18607 ;; Parameters:    Size  Location     Type
 18608 ;;  sw              1    wreg     unsigned char 
 18609 ;;  command         1    2[BANK0 ] unsigned char 
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;  sw              1    3[BANK0 ] unsigned char 
 18612 ;; Return value:  Size  Location     Type
 18613 ;;		None               void
 18614 ;; Registers used:
 18615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18616 ;; Tracked objects:
 18617 ;;		On entry : 0/0
 18618 ;;		On exit  : 0/0
 18619 ;;		Unchanged: 0/0
 18620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18625 ;;Total ram usage:        2 bytes
 18626 ;; Hardware stack levels used:    1
 18627 ;; Hardware stack levels required when called:    5
 18628 ;; This function calls:
 18629 ;;		_RfSWPointSelect
 18630 ;; This function is called by:
 18631 ;;		_DlyOff_Main
 18632 ;;		_setDimmerLights_ERROR
 18633 ;;		_setControl_Lights_Table
 18634 ;;		_Sw_DimmerOnFunc
 18635 ;;		_Sw_DimmerAdjFunc
 18636 ;; This function uses a non-reentrant model
 18637 ;;
 18638                           
 18639                           
 18640                           ;psect for function _setRFSW_Status
 18641  2409                     _setRFSW_Status:	
 18642                           
 18643                           ;incstack = 0
 18644                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18645                           ;setRFSW_Status@sw stored from wreg
 18646  2409  0020               	movlb	0	; select bank0
 18647  240A  00A3               	movwf	setRFSW_Status@sw
 18648                           
 18649                           ;RF_Control_B1.c: 426: RfSWPointSelect(sw);
 18650  240B  0823               	movf	setRFSW_Status@sw,w
 18651  240C  31A5  2545         	fcall	_RfSWPointSelect
 18652                           
 18653                           ;RF_Control_B1.c: 427: RFSW->Status=command;
 18654  240E  0021               	movlb	1	; select bank1
 18655  240F  083C               	movf	_RFSW^(0+128),w
 18656  2410  0086               	movwf	6
 18657  2411  0187               	clrf	7
 18658  2412  0020               	movlb	0	; select bank0
 18659  2413  0822               	movf	setRFSW_Status@command,w
 18660  2414  1001               	bcf	1,0
 18661  2415  1D03               	skipz
 18662  2416  1401               	bsf	1,0
 18663  2417  0008               	return
 18664  2418                     __end_of_setRFSW_Status:	
 18665                           
 18666                           	psect	text113
 18667  2545                     __ptext113:	
 18668 ;; *************** function _RfSWPointSelect *****************
 18669 ;; Defined at:
 18670 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;  sw              1    wreg     unsigned char 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;  sw              1    1[BANK0 ] unsigned char 
 18675 ;; Return value:  Size  Location     Type
 18676 ;;		None               void
 18677 ;; Registers used:
 18678 ;;		wreg
 18679 ;; Tracked objects:
 18680 ;;		On entry : 0/0
 18681 ;;		On exit  : 0/0
 18682 ;;		Unchanged: 0/0
 18683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;Total ram usage:        2 bytes
 18689 ;; Hardware stack levels used:    1
 18690 ;; Hardware stack levels required when called:    4
 18691 ;; This function calls:
 18692 ;;		Nothing
 18693 ;; This function is called by:
 18694 ;;		_setRFSW_Control
 18695 ;;		_setRFSW_AdjControl
 18696 ;;		_setRFSW_Status
 18697 ;; This function uses a non-reentrant model
 18698 ;;
 18699                           
 18700                           
 18701                           ;psect for function _RfSWPointSelect
 18702  2545                     _RfSWPointSelect:	
 18703                           
 18704                           ;incstack = 0
 18705                           ; Regs used in _RfSWPointSelect: [wreg]
 18706                           ;RfSWPointSelect@sw stored from wreg
 18707  2545  0020               	movlb	0	; select bank0
 18708  2546  00A1               	movwf	RfSWPointSelect@sw
 18709                           
 18710                           ;RF_Control_B1.c: 349: if(sw == 1)
 18711  2547  0821               	movf	RfSWPointSelect@sw,w
 18712  2548  3A01               	xorlw	1
 18713  2549  1D03               	skipz
 18714  254A  2D50               	goto	l2734
 18715                           
 18716                           ;RF_Control_B1.c: 350: {
 18717                           ;RF_Control_B1.c: 351: RFSW=&RFSW1;
 18718  254B  30E9               	movlw	_RFSW1& (0+255)
 18719  254C  00A0               	movwf	??_RfSWPointSelect
 18720  254D  0820               	movf	??_RfSWPointSelect,w
 18721  254E  0021               	movlb	1	; select bank1
 18722  254F  00BC               	movwf	_RFSW^(0+128)
 18723  2550                     l2734:	
 18724                           
 18725                           ;RF_Control_B1.c: 352: }
 18726                           ;RF_Control_B1.c: 355: if(sw == 2)
 18727  2550  0020               	movlb	0	; select bank0
 18728  2551  0821               	movf	RfSWPointSelect@sw,w
 18729  2552  3A02               	xorlw	2
 18730  2553  1D03               	skipz
 18731  2554  0008               	return
 18732                           
 18733                           ;RF_Control_B1.c: 356: {
 18734                           ;RF_Control_B1.c: 357: RFSW=&RFSW2;
 18735  2555  30EA               	movlw	_RFSW2& (0+255)
 18736  2556  00A0               	movwf	??_RfSWPointSelect
 18737  2557  0820               	movf	??_RfSWPointSelect,w
 18738  2558  0021               	movlb	1	; select bank1
 18739  2559  00BC               	movwf	_RFSW^(0+128)
 18740  255A  0008               	return
 18741  255B                     __end_of_RfSWPointSelect:	
 18742                           
 18743                           	psect	text114
 18744  2447                     __ptext114:	
 18745 ;; *************** function _setDimmerLights_Trigger *****************
 18746 ;; Defined at:
 18747 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18748 ;; Parameters:    Size  Location     Type
 18749 ;;  lights          1    wreg     unsigned char 
 18750 ;;  command         1    2[BANK0 ] unsigned char 
 18751 ;; Auto vars:     Size  Location     Type
 18752 ;;  lights          1    3[BANK0 ] unsigned char 
 18753 ;; Return value:  Size  Location     Type
 18754 ;;		None               void
 18755 ;; Registers used:
 18756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18757 ;; Tracked objects:
 18758 ;;		On entry : 0/0
 18759 ;;		On exit  : 0/0
 18760 ;;		Unchanged: 0/0
 18761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18762 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18766 ;;Total ram usage:        2 bytes
 18767 ;; Hardware stack levels used:    1
 18768 ;; Hardware stack levels required when called:    5
 18769 ;; This function calls:
 18770 ;;		_DimmerLightsPointSelect
 18771 ;; This function is called by:
 18772 ;;		_DlyOff_Main
 18773 ;;		_setRFSW_Control
 18774 ;;		_Sw_DimmerOnFunc
 18775 ;;		_Sw_DimmerOffFunc
 18776 ;; This function uses a non-reentrant model
 18777 ;;
 18778                           
 18779                           
 18780                           ;psect for function _setDimmerLights_Trigger
 18781  2447                     _setDimmerLights_Trigger:	
 18782                           
 18783                           ;incstack = 0
 18784                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18785                           ;setDimmerLights_Trigger@lights stored from wreg
 18786  2447  0020               	movlb	0	; select bank0
 18787  2448  00A3               	movwf	setDimmerLights_Trigger@lights
 18788                           
 18789                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18790  2449  0823               	movf	setDimmerLights_Trigger@lights,w
 18791  244A  31A4  24B8         	fcall	_DimmerLightsPointSelect
 18792                           
 18793                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18794  244C  0020               	movlb	0	; select bank0
 18795  244D  086C               	movf	_DimmerLights,w
 18796  244E  3E09               	addlw	9
 18797  244F  0086               	movwf	6
 18798  2450  3001               	movlw	1	; select bank2/3
 18799  2451  0087               	movwf	7
 18800  2452  0822               	movf	setDimmerLights_Trigger@command,w
 18801  2453  1081               	bcf	1,1
 18802  2454  1D03               	skipz
 18803  2455  1481               	bsf	1,1
 18804  2456  0008               	return
 18805  2457                     __end_of_setDimmerLights_Trigger:	
 18806                           
 18807                           	psect	text115
 18808  2437                     __ptext115:	
 18809 ;; *************** function _setDimmerLights_Switch *****************
 18810 ;; Defined at:
 18811 ;;		line 435 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;  lights          1    wreg     unsigned char 
 18814 ;;  command         1    2[BANK0 ] unsigned char 
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;  lights          1    3[BANK0 ] unsigned char 
 18817 ;; Return value:  Size  Location     Type
 18818 ;;		None               void
 18819 ;; Registers used:
 18820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;Total ram usage:        2 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; Hardware stack levels required when called:    5
 18833 ;; This function calls:
 18834 ;;		_DimmerLightsPointSelect
 18835 ;; This function is called by:
 18836 ;;		_DlyOff_Main
 18837 ;;		_setRFSW_Control
 18838 ;;		_Sw_DimmerOnFunc
 18839 ;;		_Sw_DimmerOffFunc
 18840 ;; This function uses a non-reentrant model
 18841 ;;
 18842                           
 18843                           
 18844                           ;psect for function _setDimmerLights_Switch
 18845  2437                     _setDimmerLights_Switch:	
 18846                           
 18847                           ;incstack = 0
 18848                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18849                           ;setDimmerLights_Switch@lights stored from wreg
 18850  2437  0020               	movlb	0	; select bank0
 18851  2438  00A3               	movwf	setDimmerLights_Switch@lights
 18852                           
 18853                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18854  2439  0823               	movf	setDimmerLights_Switch@lights,w
 18855  243A  31A4  24B8         	fcall	_DimmerLightsPointSelect
 18856                           
 18857                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18858  243C  0020               	movlb	0	; select bank0
 18859  243D  086C               	movf	_DimmerLights,w
 18860  243E  3E09               	addlw	9
 18861  243F  0086               	movwf	6
 18862  2440  3001               	movlw	1	; select bank2/3
 18863  2441  0087               	movwf	7
 18864  2442  0822               	movf	setDimmerLights_Switch@command,w
 18865  2443  1001               	bcf	1,0
 18866  2444  1D03               	skipz
 18867  2445  1401               	bsf	1,0
 18868  2446  0008               	return
 18869  2447                     __end_of_setDimmerLights_Switch:	
 18870                           
 18871                           	psect	text116
 18872  24B8                     __ptext116:	
 18873 ;; *************** function _DimmerLightsPointSelect *****************
 18874 ;; Defined at:
 18875 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18876 ;; Parameters:    Size  Location     Type
 18877 ;;  lights          1    wreg     unsigned char 
 18878 ;; Auto vars:     Size  Location     Type
 18879 ;;  lights          1    1[BANK0 ] unsigned char 
 18880 ;; Return value:  Size  Location     Type
 18881 ;;		None               void
 18882 ;; Registers used:
 18883 ;;		wreg
 18884 ;; Tracked objects:
 18885 ;;		On entry : 0/0
 18886 ;;		On exit  : 0/0
 18887 ;;		Unchanged: 0/0
 18888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;Total ram usage:        2 bytes
 18894 ;; Hardware stack levels used:    1
 18895 ;; Hardware stack levels required when called:    4
 18896 ;; This function calls:
 18897 ;;		Nothing
 18898 ;; This function is called by:
 18899 ;;		_setDimmerLights_Initialization
 18900 ;;		_setDimmerLights_Main
 18901 ;;		_setDimmerLights_ERROR
 18902 ;;		_setDimmerLights_TriggerERROR
 18903 ;;		_setDimmerLights
 18904 ;;		_setDimmerLights_Adj
 18905 ;;		_setDimmerLights_AdjRF
 18906 ;;		_setDimmerLights_Switch
 18907 ;;		_setDimmerLights_AdjGo
 18908 ;;		_setDimmerLights_Trigger
 18909 ;;		_setDimmerLights_TriggerAdj
 18910 ;;		_setDimmerLights_Clear
 18911 ;;		_setDimmerLights_GO
 18912 ;;		_setDimmerLights_MaxmumValue
 18913 ;; This function uses a non-reentrant model
 18914 ;;
 18915                           
 18916                           
 18917                           ;psect for function _DimmerLightsPointSelect
 18918  24B8                     _DimmerLightsPointSelect:	
 18919                           
 18920                           ;incstack = 0
 18921                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18922                           ;DimmerLightsPointSelect@lights stored from wreg
 18923  24B8  0020               	movlb	0	; select bank0
 18924  24B9  00A1               	movwf	DimmerLightsPointSelect@lights
 18925                           
 18926                           ;Dimmer_B1.c: 10: if(lights == 1)
 18927  24BA  0821               	movf	DimmerLightsPointSelect@lights,w
 18928  24BB  3A01               	xorlw	1
 18929  24BC  1D03               	skipz
 18930  24BD  2CC2               	goto	l875
 18931                           
 18932                           ;Dimmer_B1.c: 11: {
 18933                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18934  24BE  3020               	movlw	_DimmerLights1& (0+255)
 18935  24BF  00A0               	movwf	??_DimmerLightsPointSelect
 18936  24C0  0820               	movf	??_DimmerLightsPointSelect,w
 18937  24C1  00EC               	movwf	_DimmerLights
 18938  24C2                     l875:	
 18939                           
 18940                           ;Dimmer_B1.c: 13: }
 18941                           ;Dimmer_B1.c: 20: if(lights == 2)
 18942  24C2  0821               	movf	DimmerLightsPointSelect@lights,w
 18943  24C3  3A02               	xorlw	2
 18944  24C4  1D03               	skipz
 18945  24C5  0008               	return
 18946                           
 18947                           ;Dimmer_B1.c: 21: {
 18948                           ;Dimmer_B1.c: 22: DimmerLights=&DimmerLights2;
 18949  24C6  302E               	movlw	_DimmerLights2& (0+255)
 18950  24C7  00A0               	movwf	??_DimmerLightsPointSelect
 18951  24C8  0820               	movf	??_DimmerLightsPointSelect,w
 18952  24C9  00EC               	movwf	_DimmerLights
 18953  24CA  0008               	return
 18954  24CB                     __end_of_DimmerLightsPointSelect:	
 18955                           
 18956                           	psect	text117
 18957  120A                     __ptext117:	
 18958 ;; *************** function _setBuz *****************
 18959 ;; Defined at:
 18960 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18961 ;; Parameters:    Size  Location     Type
 18962 ;;  count           1    wreg     unsigned char 
 18963 ;;  time            2    6[BANK0 ] int 
 18964 ;; Auto vars:     Size  Location     Type
 18965 ;;  count           1    9[BANK0 ] unsigned char 
 18966 ;; Return value:  Size  Location     Type
 18967 ;;		None               void
 18968 ;; Registers used:
 18969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18970 ;; Tracked objects:
 18971 ;;		On entry : 0/0
 18972 ;;		On exit  : 0/0
 18973 ;;		Unchanged: 0/0
 18974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18975 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18979 ;;Total ram usage:        4 bytes
 18980 ;; Hardware stack levels used:    1
 18981 ;; Hardware stack levels required when called:    5
 18982 ;; This function calls:
 18983 ;;		___wmul
 18984 ;; This function is called by:
 18985 ;;		_DlyOff_Main
 18986 ;;		_setDimmerLights_Main
 18987 ;;		_DimmerLights_Exceptions
 18988 ;;		_MainT
 18989 ;;		_setOverTemp_Exceptions
 18990 ;;		_setLog_Code
 18991 ;;		_setControl_Lights_Table
 18992 ;;		_setRFSW_Control
 18993 ;;		_setSw_Main
 18994 ;;		_Sw_DimmerOnFunc
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           
 18999                           ;psect for function _setBuz
 19000  120A                     _setBuz:	
 19001                           
 19002                           ;incstack = 0
 19003                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19004                           ;setBuz@count stored from wreg
 19005  120A  0020               	movlb	0	; select bank0
 19006  120B  00A9               	movwf	setBuz@count
 19007                           
 19008                           ;Buzzer_B1.c: 24: time*=20;
 19009  120C  3014               	movlw	20
 19010  120D  00A0               	movwf	___wmul@multiplier
 19011  120E  3000               	movlw	0
 19012  120F  00A1               	movwf	___wmul@multiplier+1
 19013  1210  0827               	movf	setBuz@time+1,w
 19014  1211  01A3               	clrf	___wmul@multiplicand+1
 19015  1212  07A3               	addwf	___wmul@multiplicand+1,f
 19016  1213  0826               	movf	setBuz@time,w
 19017  1214  01A2               	clrf	___wmul@multiplicand
 19018  1215  07A2               	addwf	___wmul@multiplicand,f
 19019  1216  31A6  26A3  3192   	fcall	___wmul
 19020  1219  0020               	movlb	0	; select bank0
 19021  121A  0821               	movf	?___wmul+1,w
 19022  121B  01A7               	clrf	setBuz@time+1
 19023  121C  07A7               	addwf	setBuz@time+1,f
 19024  121D  0820               	movf	?___wmul,w
 19025  121E  01A6               	clrf	setBuz@time
 19026  121F  07A6               	addwf	setBuz@time,f
 19027                           
 19028                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 19029  1220  0878               	movf	_Buz,w
 19030  1221  0086               	movwf	6
 19031  1222  3001               	movlw	1	; select bank2/3
 19032  1223  0087               	movwf	7
 19033  1224  1C01               	btfss	1,0
 19034  1225  0008               	return
 19035                           
 19036                           ;Buzzer_B1.c: 26: {
 19037                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 19038  1226  0878               	movf	_Buz,w
 19039  1227  0086               	movwf	6
 19040  1228  3001               	movlw	1	; select bank2/3
 19041  1229  0087               	movwf	7
 19042  122A  1881               	btfsc	1,1
 19043  122B  2A45               	goto	l8802
 19044                           
 19045                           ;Buzzer_B1.c: 28: {
 19046                           ;Buzzer_B1.c: 29: Buz->GO=1;
 19047  122C  0878               	movf	_Buz,w
 19048  122D  0086               	movwf	6
 19049  122E  3001               	movlw	1	; select bank2/3
 19050  122F  0087               	movwf	7
 19051  1230  1481               	bsf	1,1
 19052                           
 19053                           ;Buzzer_B1.c: 30: Buz->Count=count;
 19054  1231  0829               	movf	setBuz@count,w
 19055  1232  00A8               	movwf	??_setBuz
 19056  1233  0878               	movf	_Buz,w
 19057  1234  3E03               	addlw	3
 19058  1235  0086               	movwf	6
 19059  1236  3001               	movlw	1	; select bank2/3
 19060  1237  0087               	movwf	7
 19061  1238  0828               	movf	??_setBuz,w
 19062  1239  0081               	movwf	1
 19063                           
 19064                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 19065  123A  0878               	movf	_Buz,w
 19066  123B  3E06               	addlw	6
 19067  123C  0086               	movwf	6
 19068  123D  3001               	movlw	1	; select bank2/3
 19069  123E  0087               	movwf	7
 19070  123F  0826               	movf	setBuz@time,w
 19071  1240  3FC0               	movwi [0]fsr1
 19072  1241  0827               	movf	setBuz@time+1,w
 19073  1242  3FC1               	movwi [1]fsr1
 19074                           
 19075                           ;Buzzer_B1.c: 33: RB3=1;
 19076  1243  158D               	bsf	13,3	;volatile
 19077                           
 19078                           ;Buzzer_B1.c: 34: }
 19079  1244  0008               	return
 19080  1245                     l8802:	
 19081                           
 19082                           ;Buzzer_B1.c: 35: else
 19083                           ;Buzzer_B1.c: 36: {
 19084                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 19085  1245  0878               	movf	_Buz,w
 19086  1246  0086               	movwf	6
 19087  1247  3001               	movlw	1	; select bank2/3
 19088  1248  0087               	movwf	7
 19089  1249  1981               	btfsc	1,3
 19090  124A  2A63               	goto	l8806
 19091                           
 19092                           ;Buzzer_B1.c: 38: {
 19093                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 19094  124B  0878               	movf	_Buz,w
 19095  124C  0086               	movwf	6
 19096  124D  3001               	movlw	1	; select bank2/3
 19097  124E  0087               	movwf	7
 19098  124F  1581               	bsf	1,3
 19099                           
 19100                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 19101  1250  0829               	movf	setBuz@count,w
 19102  1251  00A8               	movwf	??_setBuz
 19103  1252  0878               	movf	_Buz,w
 19104  1253  3E04               	addlw	4
 19105  1254  0086               	movwf	6
 19106  1255  3001               	movlw	1	; select bank2/3
 19107  1256  0087               	movwf	7
 19108  1257  0828               	movf	??_setBuz,w
 19109  1258  0081               	movwf	1
 19110                           
 19111                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 19112  1259  0878               	movf	_Buz,w
 19113  125A  3E08               	addlw	8
 19114  125B  0086               	movwf	6
 19115  125C  3001               	movlw	1	; select bank2/3
 19116  125D  0087               	movwf	7
 19117  125E  0826               	movf	setBuz@time,w
 19118  125F  3FC0               	movwi [0]fsr1
 19119  1260  0827               	movf	setBuz@time+1,w
 19120  1261  3FC1               	movwi [1]fsr1
 19121                           
 19122                           ;Buzzer_B1.c: 42: }
 19123  1262  0008               	return
 19124  1263                     l8806:	
 19125                           
 19126                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 19127  1263  0878               	movf	_Buz,w
 19128  1264  0086               	movwf	6
 19129  1265  3001               	movlw	1	; select bank2/3
 19130  1266  0087               	movwf	7
 19131  1267  1A01               	btfsc	1,4
 19132  1268  0008               	return
 19133                           
 19134                           ;Buzzer_B1.c: 44: {
 19135                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 19136  1269  0878               	movf	_Buz,w
 19137  126A  0086               	movwf	6
 19138  126B  3001               	movlw	1	; select bank2/3
 19139  126C  0087               	movwf	7
 19140  126D  1601               	bsf	1,4
 19141                           
 19142                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 19143  126E  0829               	movf	setBuz@count,w
 19144  126F  00A8               	movwf	??_setBuz
 19145  1270  0878               	movf	_Buz,w
 19146  1271  3E05               	addlw	5
 19147  1272  0086               	movwf	6
 19148  1273  3001               	movlw	1	; select bank2/3
 19149  1274  0087               	movwf	7
 19150  1275  0828               	movf	??_setBuz,w
 19151  1276  0081               	movwf	1
 19152                           
 19153                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 19154  1277  0878               	movf	_Buz,w
 19155  1278  3E0A               	addlw	10
 19156  1279  0086               	movwf	6
 19157  127A  3001               	movlw	1	; select bank2/3
 19158  127B  0087               	movwf	7
 19159  127C  0826               	movf	setBuz@time,w
 19160  127D  3FC0               	movwi [0]fsr1
 19161  127E  0827               	movf	setBuz@time+1,w
 19162  127F  3FC1               	movwi [1]fsr1
 19163  1280  0008               	return
 19164  1281                     __end_of_setBuz:	
 19165                           
 19166                           	psect	text118
 19167  26A3                     __ptext118:	
 19168 ;; *************** function ___wmul *****************
 19169 ;; Defined at:
 19170 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 19171 ;; Parameters:    Size  Location     Type
 19172 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19173 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19174 ;; Auto vars:     Size  Location     Type
 19175 ;;  product         2    4[BANK0 ] unsigned int 
 19176 ;; Return value:  Size  Location     Type
 19177 ;;                  2    0[BANK0 ] unsigned int 
 19178 ;; Registers used:
 19179 ;;		wreg, status,2, status,0
 19180 ;; Tracked objects:
 19181 ;;		On entry : 0/0
 19182 ;;		On exit  : 0/0
 19183 ;;		Unchanged: 0/0
 19184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19186 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19188 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19189 ;;Total ram usage:        6 bytes
 19190 ;; Hardware stack levels used:    1
 19191 ;; Hardware stack levels required when called:    4
 19192 ;; This function calls:
 19193 ;;		Nothing
 19194 ;; This function is called by:
 19195 ;;		_setBuz
 19196 ;;		_Load_Main
 19197 ;; This function uses a non-reentrant model
 19198 ;;
 19199                           
 19200                           
 19201                           ;psect for function ___wmul
 19202  26A3                     ___wmul:	
 19203                           
 19204                           ;incstack = 0
 19205                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 19206  26A3  0020               	movlb	0	; select bank0
 19207  26A4  01A4               	clrf	___wmul@product
 19208  26A5  01A5               	clrf	___wmul@product+1
 19209  26A6                     l8782:	
 19210  26A6  1C20               	btfss	___wmul@multiplier,0
 19211  26A7  2EAC               	goto	l3253
 19212  26A8  0822               	movf	___wmul@multiplicand,w
 19213  26A9  07A4               	addwf	___wmul@product,f
 19214  26AA  0823               	movf	___wmul@multiplicand+1,w
 19215  26AB  3DA5               	addwfc	___wmul@product+1,f
 19216  26AC                     l3253:	
 19217  26AC  3001               	movlw	1
 19218  26AD                     u8305:	
 19219  26AD  35A2               	lslf	___wmul@multiplicand,f
 19220  26AE  0DA3               	rlf	___wmul@multiplicand+1,f
 19221  26AF  0B89               	decfsz	9,f
 19222  26B0  2EAD               	goto	u8305
 19223  26B1  3001               	movlw	1
 19224  26B2                     u8315:	
 19225  26B2  36A1               	lsrf	___wmul@multiplier+1,f
 19226  26B3  0CA0               	rrf	___wmul@multiplier,f
 19227  26B4  0B89               	decfsz	9,f
 19228  26B5  2EB2               	goto	u8315
 19229  26B6  0821               	movf	___wmul@multiplier+1,w
 19230  26B7  0420               	iorwf	___wmul@multiplier,w
 19231  26B8  1D03               	skipz
 19232  26B9  2EA6               	goto	l8782
 19233  26BA  0825               	movf	___wmul@product+1,w
 19234  26BB  01A1               	clrf	?___wmul+1
 19235  26BC  07A1               	addwf	?___wmul+1,f
 19236  26BD  0824               	movf	___wmul@product,w
 19237  26BE  01A0               	clrf	?___wmul
 19238  26BF  07A0               	addwf	?___wmul,f
 19239  26C0  0008               	return
 19240  26C1                     __end_of___wmul:	
 19241                           
 19242                           	psect	text119
 19243  22D5                     __ptext119:	
 19244 ;; *************** function _DelayOff_Initialization *****************
 19245 ;; Defined at:
 19246 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19247 ;; Parameters:    Size  Location     Type
 19248 ;;		None
 19249 ;; Auto vars:     Size  Location     Type
 19250 ;;		None
 19251 ;; Return value:  Size  Location     Type
 19252 ;;		None               void
 19253 ;; Registers used:
 19254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19255 ;; Tracked objects:
 19256 ;;		On entry : 0/0
 19257 ;;		On exit  : 0/0
 19258 ;;		Unchanged: 0/0
 19259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19264 ;;Total ram usage:        0 bytes
 19265 ;; Hardware stack levels used:    1
 19266 ;; Hardware stack levels required when called:    6
 19267 ;; This function calls:
 19268 ;;		_DlyOff_Initialization
 19269 ;; This function is called by:
 19270 ;;		_main
 19271 ;; This function uses a non-reentrant model
 19272 ;;
 19273                           
 19274                           
 19275                           ;psect for function _DelayOff_Initialization
 19276  22D5                     _DelayOff_Initialization:	
 19277                           
 19278                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 19279                           
 19280                           ;incstack = 0
 19281                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 19282  22D5  3001               	movlw	1
 19283  22D6  31A3  2324  31A2   	fcall	_DlyOff_Initialization
 19284                           
 19285                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 19286  22D9  3002               	movlw	2
 19287  22DA  31A3  2324         	fcall	_DlyOff_Initialization
 19288  22DC  0008               	return
 19289  22DD                     __end_of_DelayOff_Initialization:	
 19290                           
 19291                           	psect	text120
 19292  2324                     __ptext120:	
 19293 ;; *************** function _DlyOff_Initialization *****************
 19294 ;; Defined at:
 19295 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;  sw              1    wreg     unsigned char 
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;  sw              1    2[BANK0 ] unsigned char 
 19300 ;; Return value:  Size  Location     Type
 19301 ;;		None               void
 19302 ;; Registers used:
 19303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19304 ;; Tracked objects:
 19305 ;;		On entry : 0/0
 19306 ;;		On exit  : 0/0
 19307 ;;		Unchanged: 0/0
 19308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19313 ;;Total ram usage:        1 bytes
 19314 ;; Hardware stack levels used:    1
 19315 ;; Hardware stack levels required when called:    5
 19316 ;; This function calls:
 19317 ;;		_DelayOffPointSelect
 19318 ;; This function is called by:
 19319 ;;		_DelayOff_Initialization
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           
 19324                           ;psect for function _DlyOff_Initialization
 19325  2324                     _DlyOff_Initialization:	
 19326                           
 19327                           ;incstack = 0
 19328                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19329                           ;DlyOff_Initialization@sw stored from wreg
 19330  2324  0020               	movlb	0	; select bank0
 19331  2325  00A2               	movwf	DlyOff_Initialization@sw
 19332                           
 19333                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 19334  2326  0822               	movf	DlyOff_Initialization@sw,w
 19335  2327  31A5  2587         	fcall	_DelayOffPointSelect
 19336                           
 19337                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 19338  2329  0021               	movlb	1	; select bank1
 19339  232A  0838               	movf	_DelayOff^(0+128),w
 19340  232B  0086               	movwf	6
 19341  232C  0187               	clrf	7
 19342  232D  1401               	bsf	1,0
 19343  232E  0008               	return
 19344  232F                     __end_of_DlyOff_Initialization:	
 19345                           
 19346                           	psect	text121
 19347  2587                     __ptext121:	
 19348 ;; *************** function _DelayOffPointSelect *****************
 19349 ;; Defined at:
 19350 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;  sw              1    wreg     unsigned char 
 19353 ;; Auto vars:     Size  Location     Type
 19354 ;;  sw              1    1[BANK0 ] unsigned char 
 19355 ;; Return value:  Size  Location     Type
 19356 ;;		None               void
 19357 ;; Registers used:
 19358 ;;		wreg
 19359 ;; Tracked objects:
 19360 ;;		On entry : 0/0
 19361 ;;		On exit  : 0/0
 19362 ;;		Unchanged: 0/0
 19363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;Total ram usage:        2 bytes
 19369 ;; Hardware stack levels used:    1
 19370 ;; Hardware stack levels required when called:    4
 19371 ;; This function calls:
 19372 ;;		Nothing
 19373 ;; This function is called by:
 19374 ;;		_DlyOff_Initialization
 19375 ;;		_DlyOff_Main
 19376 ;;		_setDelayOff_GO
 19377 ;; This function uses a non-reentrant model
 19378 ;;
 19379                           
 19380                           
 19381                           ;psect for function _DelayOffPointSelect
 19382  2587                     _DelayOffPointSelect:	
 19383                           
 19384                           ;incstack = 0
 19385                           ; Regs used in _DelayOffPointSelect: [wreg]
 19386                           ;DelayOffPointSelect@sw stored from wreg
 19387  2587  0020               	movlb	0	; select bank0
 19388  2588  00A1               	movwf	DelayOffPointSelect@sw
 19389                           
 19390                           ;DelayOff_B1.c: 11: if(sw == 1)
 19391  2589  0821               	movf	DelayOffPointSelect@sw,w
 19392  258A  3A01               	xorlw	1
 19393  258B  1D03               	skipz
 19394  258C  2D93               	goto	l6478
 19395                           
 19396                           ;DelayOff_B1.c: 12: {
 19397                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 19398  258D  30CD               	movlw	_DlySw1& (0+255)
 19399  258E  00A0               	movwf	??_DelayOffPointSelect
 19400  258F  0820               	movf	??_DelayOffPointSelect,w
 19401  2590  0021               	movlb	1	; select bank1
 19402  2591  00B8               	movwf	_DelayOff^(0+128)
 19403                           
 19404                           ;DelayOff_B1.c: 14: }
 19405  2592  0008               	return
 19406  2593                     l6478:	
 19407                           
 19408                           ;DelayOff_B1.c: 17: else if(sw == 2)
 19409  2593  0020               	movlb	0	; select bank0
 19410  2594  0821               	movf	DelayOffPointSelect@sw,w
 19411  2595  3A02               	xorlw	2
 19412  2596  1D03               	skipz
 19413  2597  0008               	return
 19414                           
 19415                           ;DelayOff_B1.c: 18: {
 19416                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 19417  2598  30D2               	movlw	_DlySw2& (0+255)
 19418  2599  00A0               	movwf	??_DelayOffPointSelect
 19419  259A  0820               	movf	??_DelayOffPointSelect,w
 19420  259B  0021               	movlb	1	; select bank1
 19421  259C  00B8               	movwf	_DelayOff^(0+128)
 19422  259D  0008               	return
 19423  259E                     __end_of_DelayOffPointSelect:	
 19424                           
 19425                           	psect	text122
 19426  2506                     __ptext122:	
 19427 ;; *************** function _CC2500_PowerOnInitial *****************
 19428 ;; Defined at:
 19429 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19430 ;; Parameters:    Size  Location     Type
 19431 ;;		None
 19432 ;; Auto vars:     Size  Location     Type
 19433 ;;		None
 19434 ;; Return value:  Size  Location     Type
 19435 ;;		None               void
 19436 ;; Registers used:
 19437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19438 ;; Tracked objects:
 19439 ;;		On entry : 0/0
 19440 ;;		On exit  : 0/0
 19441 ;;		Unchanged: 0/0
 19442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;Total ram usage:        0 bytes
 19448 ;; Hardware stack levels used:    1
 19449 ;; Hardware stack levels required when called:    7
 19450 ;; This function calls:
 19451 ;;		_CC2500_ClearRXFIFO
 19452 ;;		_CC2500_ClearTXFIFO
 19453 ;;		_CC2500_FrequencyCabr
 19454 ;;		_CC2500_InitPATable
 19455 ;;		_CC2500_InitSetREG
 19456 ;;		_CC2500_PowerRST
 19457 ;;		_CC2500_SIDLEMode
 19458 ;; This function is called by:
 19459 ;;		_main
 19460 ;; This function uses a non-reentrant model
 19461 ;;
 19462                           
 19463                           
 19464                           ;psect for function _CC2500_PowerOnInitial
 19465  2506                     _CC2500_PowerOnInitial:	
 19466                           
 19467                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 19468                           
 19469                           ;incstack = 0
 19470                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19471  2506  3198  20D5  31A5   	fcall	_CC2500_PowerRST
 19472                           
 19473                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19474  2509  31A7  27D6  31A5   	fcall	_CC2500_InitSetREG
 19475                           
 19476                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19477  250C  31A6  26C1  31A5   	fcall	_CC2500_InitPATable
 19478                           
 19479                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19480  250F  31A2  2297  31A5   	fcall	_CC2500_ClearTXFIFO
 19481                           
 19482                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19483  2512  31A2  2293  31A5   	fcall	_CC2500_ClearRXFIFO
 19484                           
 19485                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19486  2515  31A3  2389  31A5   	fcall	_CC2500_FrequencyCabr
 19487                           
 19488                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19489  2518  31A2  229B         	fcall	_CC2500_SIDLEMode
 19490  251A  0008               	return
 19491  251B                     __end_of_CC2500_PowerOnInitial:	
 19492                           
 19493                           	psect	text123
 19494  229B                     __ptext123:	
 19495 ;; *************** function _CC2500_SIDLEMode *****************
 19496 ;; Defined at:
 19497 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19498 ;; Parameters:    Size  Location     Type
 19499 ;;		None
 19500 ;; Auto vars:     Size  Location     Type
 19501 ;;		None
 19502 ;; Return value:  Size  Location     Type
 19503 ;;		None               void
 19504 ;; Registers used:
 19505 ;;		wreg, status,2, status,0, pclath, cstack
 19506 ;; Tracked objects:
 19507 ;;		On entry : 0/0
 19508 ;;		On exit  : 0/0
 19509 ;;		Unchanged: 0/0
 19510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19515 ;;Total ram usage:        0 bytes
 19516 ;; Hardware stack levels used:    1
 19517 ;; Hardware stack levels required when called:    6
 19518 ;; This function calls:
 19519 ;;		_CC2500_WriteCommand
 19520 ;; This function is called by:
 19521 ;;		_CC2500_PowerOnInitial
 19522 ;; This function uses a non-reentrant model
 19523 ;;
 19524                           
 19525                           
 19526                           ;psect for function _CC2500_SIDLEMode
 19527  229B                     _CC2500_SIDLEMode:	
 19528                           
 19529                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19530                           
 19531                           ;incstack = 0
 19532                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19533  229B  3036               	movlw	54
 19534  229C  31A4  2427         	fcall	_CC2500_WriteCommand
 19535  229E  0008               	return
 19536  229F                     __end_of_CC2500_SIDLEMode:	
 19537                           
 19538                           	psect	text124
 19539  18D5                     __ptext124:	
 19540 ;; *************** function _CC2500_PowerRST *****************
 19541 ;; Defined at:
 19542 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19543 ;; Parameters:    Size  Location     Type
 19544 ;;		None
 19545 ;; Auto vars:     Size  Location     Type
 19546 ;;		None
 19547 ;; Return value:  Size  Location     Type
 19548 ;;		None               void
 19549 ;; Registers used:
 19550 ;;		wreg, status,2, status,0, pclath, cstack
 19551 ;; Tracked objects:
 19552 ;;		On entry : 0/0
 19553 ;;		On exit  : 0/0
 19554 ;;		Unchanged: 0/0
 19555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19560 ;;Total ram usage:        1 bytes
 19561 ;; Hardware stack levels used:    1
 19562 ;; Hardware stack levels required when called:    5
 19563 ;; This function calls:
 19564 ;;		_CC2500_WriteByte
 19565 ;;		_DelayTime_1us
 19566 ;; This function is called by:
 19567 ;;		_CC2500_PowerOnInitial
 19568 ;; This function uses a non-reentrant model
 19569 ;;
 19570                           
 19571                           
 19572                           ;psect for function _CC2500_PowerRST
 19573  18D5                     _CC2500_PowerRST:	
 19574                           
 19575                           ;CC2500_B1.c: 112: RC1=0;
 19576                           
 19577                           ;incstack = 0
 19578                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19579  18D5  0020               	movlb	0	; select bank0
 19580  18D6  108E               	bcf	14,1	;volatile
 19581                           
 19582                           ;CC2500_B1.c: 113: RC0=0;
 19583  18D7  100E               	bcf	14,0	;volatile
 19584                           
 19585                           ;CC2500_B1.c: 114: RC4=1;
 19586  18D8  160E               	bsf	14,4	;volatile
 19587                           
 19588                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19589  18D9  300A               	movlw	10
 19590  18DA  00A0               	movwf	DelayTime_1us@count
 19591  18DB  3000               	movlw	0
 19592  18DC  00A1               	movwf	DelayTime_1us@count+1
 19593  18DD  31A7  2789  3198   	fcall	_DelayTime_1us
 19594                           
 19595                           ;CC2500_B1.c: 116: RC4=0;
 19596  18E0  0020               	movlb	0	; select bank0
 19597  18E1  120E               	bcf	14,4	;volatile
 19598                           
 19599                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19600  18E2  300A               	movlw	10
 19601  18E3  00A0               	movwf	DelayTime_1us@count
 19602  18E4  3000               	movlw	0
 19603  18E5  00A1               	movwf	DelayTime_1us@count+1
 19604  18E6  31A7  2789  3198   	fcall	_DelayTime_1us
 19605                           
 19606                           ;CC2500_B1.c: 118: RC4=1;
 19607  18E9  0020               	movlb	0	; select bank0
 19608  18EA  160E               	bsf	14,4	;volatile
 19609                           
 19610                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19611  18EB  3028               	movlw	40
 19612  18EC  00A0               	movwf	DelayTime_1us@count
 19613  18ED  3000               	movlw	0
 19614  18EE  00A1               	movwf	DelayTime_1us@count+1
 19615  18EF  31A7  2789  3198   	fcall	_DelayTime_1us
 19616                           
 19617                           ;CC2500_B1.c: 120: RC4=0;
 19618  18F2  0020               	movlb	0	; select bank0
 19619  18F3  120E               	bcf	14,4	;volatile
 19620                           
 19621                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19622  18F4  3030               	movlw	48
 19623  18F5  00A6               	movwf	??_CC2500_PowerRST
 19624  18F6  0826               	movf	??_CC2500_PowerRST,w
 19625  18F7  0021               	movlb	1	; select bank1
 19626  18F8  00BF               	movwf	_SPI0Buffer^(0+128)
 19627  18F9                     l340:	
 19628                           ;CC2500_B1.c: 122: while(RC2==1);
 19629                           
 19630  18F9  0020               	movlb	0	; select bank0
 19631  18FA  190E               	btfsc	14,2	;volatile
 19632  18FB  28F9               	goto	l340
 19633                           
 19634                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19635  18FC  31A5  25B6  3198   	fcall	_CC2500_WriteByte
 19636  18FF                     l343:	
 19637                           ;CC2500_B1.c: 124: while(RC2==1);
 19638                           
 19639  18FF  0020               	movlb	0	; select bank0
 19640  1900  190E               	btfsc	14,2	;volatile
 19641  1901  28FF               	goto	l343
 19642                           
 19643                           ;CC2500_B1.c: 125: RC0=0;
 19644  1902  100E               	bcf	14,0	;volatile
 19645                           
 19646                           ;CC2500_B1.c: 126: RC4=1;
 19647  1903  160E               	bsf	14,4	;volatile
 19648  1904  0008               	return
 19649  1905                     __end_of_CC2500_PowerRST:	
 19650                           
 19651                           	psect	text125
 19652  27D6                     __ptext125:	
 19653 ;; *************** function _CC2500_InitSetREG *****************
 19654 ;; Defined at:
 19655 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19656 ;; Parameters:    Size  Location     Type
 19657 ;;		None
 19658 ;; Auto vars:     Size  Location     Type
 19659 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19660 ;;  temp2           1    7[BANK0 ] unsigned char 
 19661 ;;  temp1           1    6[BANK0 ] unsigned char 
 19662 ;; Return value:  Size  Location     Type
 19663 ;;		None               void
 19664 ;; Registers used:
 19665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19666 ;; Tracked objects:
 19667 ;;		On entry : 0/0
 19668 ;;		On exit  : 0/0
 19669 ;;		Unchanged: 0/0
 19670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19675 ;;Total ram usage:        4 bytes
 19676 ;; Hardware stack levels used:    1
 19677 ;; Hardware stack levels required when called:    6
 19678 ;; This function calls:
 19679 ;;		_CC2500_WriteREG
 19680 ;; This function is called by:
 19681 ;;		_CC2500_PowerOnInitial
 19682 ;; This function uses a non-reentrant model
 19683 ;;
 19684                           
 19685                           
 19686                           ;psect for function _CC2500_InitSetREG
 19687  27D6                     _CC2500_InitSetREG:	
 19688                           
 19689                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19690                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19691                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19692                           
 19693                           ;incstack = 0
 19694                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19695  27D6  0020               	movlb	0	; select bank0
 19696  27D7  01A8               	clrf	CC2500_InitSetREG@loop_c
 19697  27D8                     L16:	
 19698  27D8  302F               	movlw	47
 19699  27D9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19700  27DA  1803               	btfsc	3,0
 19701  27DB  0008               	return
 19702                           
 19703                           ;CC2500_B1.c: 137: {
 19704                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19705  27DC  0828               	movf	CC2500_InitSetREG@loop_c,w
 19706  27DD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19707  27DE  0084               	movwf	4
 19708  27DF  30A0               	movlw	high (_CC2500_registers_address| (0+32768))
 19709  27E0  1803               	skipnc
 19710  27E1  3E01               	addlw	1
 19711  27E2  0085               	movwf	5
 19712  27E3  0800               	movf	0,w	;code access
 19713  27E4  00A5               	movwf	??_CC2500_InitSetREG
 19714  27E5  0825               	movf	??_CC2500_InitSetREG,w
 19715  27E6  00A6               	movwf	CC2500_InitSetREG@temp1
 19716                           
 19717                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19718  27E7  0828               	movf	CC2500_InitSetREG@loop_c,w
 19719  27E8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19720  27E9  0084               	movwf	4
 19721  27EA  30A0               	movlw	high (_CC2500_rfSettings| (0+32768))
 19722  27EB  1803               	skipnc
 19723  27EC  3E01               	addlw	1
 19724  27ED  0085               	movwf	5
 19725  27EE  0800               	movf	0,w	;code access
 19726  27EF  00A5               	movwf	??_CC2500_InitSetREG
 19727  27F0  0825               	movf	??_CC2500_InitSetREG,w
 19728  27F1  00A7               	movwf	CC2500_InitSetREG@temp2
 19729                           
 19730                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19731  27F2  0827               	movf	CC2500_InitSetREG@temp2,w
 19732  27F3  00A5               	movwf	??_CC2500_InitSetREG
 19733  27F4  0825               	movf	??_CC2500_InitSetREG,w
 19734  27F5  00A2               	movwf	CC2500_WriteREG@value
 19735  27F6  0826               	movf	CC2500_InitSetREG@temp1,w
 19736  27F7  31A5  25CF  31A7   	fcall	_CC2500_WriteREG
 19737  27FA  3001               	movlw	1
 19738  27FB  0020               	movlb	0	; select bank0
 19739  27FC  00A5               	movwf	??_CC2500_InitSetREG
 19740  27FD  0825               	movf	??_CC2500_InitSetREG,w
 19741  27FE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19742  27FF  2FD8               	goto	L16
 19743  2800                     __end_of_CC2500_InitSetREG:	
 19744                           
 19745                           	psect	text126
 19746  26C1                     __ptext126:	
 19747 ;; *************** function _CC2500_InitPATable *****************
 19748 ;; Defined at:
 19749 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19750 ;; Parameters:    Size  Location     Type
 19751 ;;		None
 19752 ;; Auto vars:     Size  Location     Type
 19753 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19754 ;;  temp            1    6[BANK0 ] unsigned char 
 19755 ;; Return value:  Size  Location     Type
 19756 ;;		None               void
 19757 ;; Registers used:
 19758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19759 ;; Tracked objects:
 19760 ;;		On entry : 0/0
 19761 ;;		On exit  : 0/0
 19762 ;;		Unchanged: 0/0
 19763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19767 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19768 ;;Total ram usage:        3 bytes
 19769 ;; Hardware stack levels used:    1
 19770 ;; Hardware stack levels required when called:    6
 19771 ;; This function calls:
 19772 ;;		_CC2500_WriteREG
 19773 ;; This function is called by:
 19774 ;;		_CC2500_PowerOnInitial
 19775 ;; This function uses a non-reentrant model
 19776 ;;
 19777                           
 19778                           
 19779                           ;psect for function _CC2500_InitPATable
 19780  26C1                     _CC2500_InitPATable:	
 19781                           
 19782                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19783                           ;CC2500_B1.c: 150: unsigned char temp;
 19784                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19785                           
 19786                           ;incstack = 0
 19787                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19788  26C1  0020               	movlb	0	; select bank0
 19789  26C2  01A7               	clrf	CC2500_InitPATable@loop_d
 19790  26C3                     L17:	
 19791  26C3  3008               	movlw	8
 19792  26C4  0227               	subwf	CC2500_InitPATable@loop_d,w
 19793  26C5  1803               	btfsc	3,0
 19794  26C6  0008               	return
 19795                           
 19796                           ;CC2500_B1.c: 153: {
 19797                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19798  26C7  0827               	movf	CC2500_InitPATable@loop_d,w
 19799  26C8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19800  26C9  0084               	movwf	4
 19801  26CA  30A0               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19802  26CB  1803               	skipnc
 19803  26CC  3E01               	addlw	1
 19804  26CD  0085               	movwf	5
 19805  26CE  0800               	movf	0,w	;code access
 19806  26CF  00A5               	movwf	??_CC2500_InitPATable
 19807  26D0  0825               	movf	??_CC2500_InitPATable,w
 19808  26D1  00A6               	movwf	CC2500_InitPATable@temp
 19809                           
 19810                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19811  26D2  0826               	movf	CC2500_InitPATable@temp,w
 19812  26D3  00A5               	movwf	??_CC2500_InitPATable
 19813  26D4  0825               	movf	??_CC2500_InitPATable,w
 19814  26D5  00A2               	movwf	CC2500_WriteREG@value
 19815  26D6  303E               	movlw	62
 19816  26D7  31A5  25CF  31A6   	fcall	_CC2500_WriteREG
 19817  26DA  3001               	movlw	1
 19818  26DB  0020               	movlb	0	; select bank0
 19819  26DC  00A5               	movwf	??_CC2500_InitPATable
 19820  26DD  0825               	movf	??_CC2500_InitPATable,w
 19821  26DE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19822  26DF  2EC3               	goto	L17
 19823  26E0                     __end_of_CC2500_InitPATable:	
 19824                           
 19825                           	psect	text127
 19826  25CF                     __ptext127:	
 19827 ;; *************** function _CC2500_WriteREG *****************
 19828 ;; Defined at:
 19829 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19830 ;; Parameters:    Size  Location     Type
 19831 ;;  w_addr          1    wreg     unsigned char 
 19832 ;;  value           1    2[BANK0 ] unsigned char 
 19833 ;; Auto vars:     Size  Location     Type
 19834 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19835 ;; Return value:  Size  Location     Type
 19836 ;;		None               void
 19837 ;; Registers used:
 19838 ;;		wreg, status,2, status,0, pclath, cstack
 19839 ;; Tracked objects:
 19840 ;;		On entry : 0/0
 19841 ;;		On exit  : 0/0
 19842 ;;		Unchanged: 0/0
 19843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19844 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19847 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19848 ;;Total ram usage:        3 bytes
 19849 ;; Hardware stack levels used:    1
 19850 ;; Hardware stack levels required when called:    5
 19851 ;; This function calls:
 19852 ;;		_CC2500_WriteByte
 19853 ;; This function is called by:
 19854 ;;		_CC2500_InitSetREG
 19855 ;;		_CC2500_InitPATable
 19856 ;; This function uses a non-reentrant model
 19857 ;;
 19858                           
 19859                           
 19860                           ;psect for function _CC2500_WriteREG
 19861  25CF                     _CC2500_WriteREG:	
 19862                           
 19863                           ;incstack = 0
 19864                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19865                           ;CC2500_WriteREG@w_addr stored from wreg
 19866  25CF  0020               	movlb	0	; select bank0
 19867  25D0  00A4               	movwf	CC2500_WriteREG@w_addr
 19868                           
 19869                           ;CC2500_B1.c: 229: RC4=0;
 19870  25D1  120E               	bcf	14,4	;volatile
 19871                           
 19872                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19873  25D2  0824               	movf	CC2500_WriteREG@w_addr,w
 19874  25D3  00A3               	movwf	??_CC2500_WriteREG
 19875  25D4  0823               	movf	??_CC2500_WriteREG,w
 19876  25D5  0021               	movlb	1	; select bank1
 19877  25D6  00BF               	movwf	_SPI0Buffer^(0+128)
 19878  25D7                     l385:	
 19879                           ;CC2500_B1.c: 231: while(RC2==1);
 19880                           
 19881  25D7  0020               	movlb	0	; select bank0
 19882  25D8  190E               	btfsc	14,2	;volatile
 19883  25D9  2DD7               	goto	l385
 19884                           
 19885                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19886  25DA  31A5  25B6  31A5   	fcall	_CC2500_WriteByte
 19887                           
 19888                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19889  25DD  0020               	movlb	0	; select bank0
 19890  25DE  0822               	movf	CC2500_WriteREG@value,w
 19891  25DF  00A3               	movwf	??_CC2500_WriteREG
 19892  25E0  0823               	movf	??_CC2500_WriteREG,w
 19893  25E1  0021               	movlb	1	; select bank1
 19894  25E2  00BF               	movwf	_SPI0Buffer^(0+128)
 19895                           
 19896                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19897  25E3  31A5  25B6         	fcall	_CC2500_WriteByte
 19898                           
 19899                           ;CC2500_B1.c: 235: RC4=1;
 19900  25E5  0020               	movlb	0	; select bank0
 19901  25E6  160E               	bsf	14,4	;volatile
 19902  25E7  0008               	return
 19903  25E8                     __end_of_CC2500_WriteREG:	
 19904                           
 19905                           	psect	text128
 19906  2389                     __ptext128:	
 19907 ;; *************** function _CC2500_FrequencyCabr *****************
 19908 ;; Defined at:
 19909 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19910 ;; Parameters:    Size  Location     Type
 19911 ;;		None
 19912 ;; Auto vars:     Size  Location     Type
 19913 ;;		None
 19914 ;; Return value:  Size  Location     Type
 19915 ;;		None               void
 19916 ;; Registers used:
 19917 ;;		wreg, status,2, status,0, pclath, cstack
 19918 ;; Tracked objects:
 19919 ;;		On entry : 0/0
 19920 ;;		On exit  : 0/0
 19921 ;;		Unchanged: 0/0
 19922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19927 ;;Total ram usage:        0 bytes
 19928 ;; Hardware stack levels used:    1
 19929 ;; Hardware stack levels required when called:    6
 19930 ;; This function calls:
 19931 ;;		_CC2500_WriteCommand
 19932 ;;		_DelayTime_1us
 19933 ;; This function is called by:
 19934 ;;		_CC2500_PowerOnInitial
 19935 ;; This function uses a non-reentrant model
 19936 ;;
 19937                           
 19938                           
 19939                           ;psect for function _CC2500_FrequencyCabr
 19940  2389                     _CC2500_FrequencyCabr:	
 19941                           
 19942                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19943                           
 19944                           ;incstack = 0
 19945                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19946  2389  3033               	movlw	51
 19947  238A  31A4  2427  31A3   	fcall	_CC2500_WriteCommand
 19948                           
 19949                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19950  238D  30E8               	movlw	232
 19951  238E  0020               	movlb	0	; select bank0
 19952  238F  00A0               	movwf	DelayTime_1us@count
 19953  2390  3003               	movlw	3
 19954  2391  00A1               	movwf	DelayTime_1us@count+1
 19955  2392  31A7  2789         	fcall	_DelayTime_1us
 19956  2394  0008               	return
 19957  2395                     __end_of_CC2500_FrequencyCabr:	
 19958                           
 19959                           	psect	text129
 19960  2789                     __ptext129:	
 19961 ;; *************** function _DelayTime_1us *****************
 19962 ;; Defined at:
 19963 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19964 ;; Parameters:    Size  Location     Type
 19965 ;;  count           2    0[BANK0 ] int 
 19966 ;; Auto vars:     Size  Location     Type
 19967 ;;  j               2    4[BANK0 ] unsigned int 
 19968 ;;  i               2    2[BANK0 ] unsigned int 
 19969 ;; Return value:  Size  Location     Type
 19970 ;;		None               void
 19971 ;; Registers used:
 19972 ;;		wreg, status,2
 19973 ;; Tracked objects:
 19974 ;;		On entry : 0/0
 19975 ;;		On exit  : 0/0
 19976 ;;		Unchanged: 0/0
 19977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19979 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19982 ;;Total ram usage:        6 bytes
 19983 ;; Hardware stack levels used:    1
 19984 ;; Hardware stack levels required when called:    4
 19985 ;; This function calls:
 19986 ;;		Nothing
 19987 ;; This function is called by:
 19988 ;;		_CC2500_PowerRST
 19989 ;;		_CC2500_FrequencyCabr
 19990 ;; This function uses a non-reentrant model
 19991 ;;
 19992                           
 19993                           
 19994                           ;psect for function _DelayTime_1us
 19995  2789                     _DelayTime_1us:	
 19996                           
 19997                           ;CC2500_B1.c: 285: unsigned int i,j;
 19998                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19999                           
 20000                           ;incstack = 0
 20001                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 20002  2789  3001               	movlw	1
 20003  278A  0020               	movlb	0	; select bank0
 20004  278B  00A2               	movwf	DelayTime_1us@i
 20005  278C  3000               	movlw	0
 20006  278D  00A3               	movwf	DelayTime_1us@i+1
 20007  278E                     l409:	
 20008  278E  0821               	movf	DelayTime_1us@count+1,w
 20009  278F  0223               	subwf	DelayTime_1us@i+1,w
 20010  2790  1D03               	skipz
 20011  2791  2F94               	goto	u8865
 20012  2792  0820               	movf	DelayTime_1us@count,w
 20013  2793  0222               	subwf	DelayTime_1us@i,w
 20014  2794                     u8865:	
 20015  2794  1803               	btfsc	3,0
 20016  2795  0008               	return
 20017                           
 20018                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 20019  2796  01A4               	clrf	DelayTime_1us@j
 20020  2797  01A5               	clrf	DelayTime_1us@j+1
 20021  2798  3000               	movlw	0
 20022  2799  0225               	subwf	DelayTime_1us@j+1,w
 20023  279A  3002               	movlw	2
 20024  279B  1903               	skipnz
 20025  279C  0224               	subwf	DelayTime_1us@j,w
 20026  279D  1803               	btfsc	3,0
 20027  279E  2FAA               	goto	l9182
 20028  279F                     l9180:	
 20029  279F  3001               	movlw	1
 20030  27A0  07A4               	addwf	DelayTime_1us@j,f
 20031  27A1  3000               	movlw	0
 20032  27A2  3DA5               	addwfc	DelayTime_1us@j+1,f
 20033  27A3  3000               	movlw	0
 20034  27A4  0225               	subwf	DelayTime_1us@j+1,w
 20035  27A5  3002               	movlw	2
 20036  27A6  1903               	skipnz
 20037  27A7  0224               	subwf	DelayTime_1us@j,w
 20038  27A8  1C03               	skipc
 20039  27A9  2F9F               	goto	l9180
 20040  27AA                     l9182:	
 20041  27AA  3001               	movlw	1
 20042  27AB  07A2               	addwf	DelayTime_1us@i,f
 20043  27AC  3000               	movlw	0
 20044  27AD  3DA3               	addwfc	DelayTime_1us@i+1,f
 20045  27AE  2F8E               	goto	l409
 20046  27AF                     __end_of_DelayTime_1us:	
 20047                           
 20048                           	psect	text130
 20049  2297                     __ptext130:	
 20050 ;; *************** function _CC2500_ClearTXFIFO *****************
 20051 ;; Defined at:
 20052 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20053 ;; Parameters:    Size  Location     Type
 20054 ;;		None
 20055 ;; Auto vars:     Size  Location     Type
 20056 ;;		None
 20057 ;; Return value:  Size  Location     Type
 20058 ;;		None               void
 20059 ;; Registers used:
 20060 ;;		wreg, status,2, status,0, pclath, cstack
 20061 ;; Tracked objects:
 20062 ;;		On entry : 0/0
 20063 ;;		On exit  : 0/0
 20064 ;;		Unchanged: 0/0
 20065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20070 ;;Total ram usage:        0 bytes
 20071 ;; Hardware stack levels used:    1
 20072 ;; Hardware stack levels required when called:    6
 20073 ;; This function calls:
 20074 ;;		_CC2500_WriteCommand
 20075 ;; This function is called by:
 20076 ;;		_CC2500_PowerOnInitial
 20077 ;; This function uses a non-reentrant model
 20078 ;;
 20079                           
 20080                           
 20081                           ;psect for function _CC2500_ClearTXFIFO
 20082  2297                     _CC2500_ClearTXFIFO:	
 20083                           
 20084                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 20085                           
 20086                           ;incstack = 0
 20087                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 20088  2297  303B               	movlw	59
 20089  2298  31A4  2427         	fcall	_CC2500_WriteCommand
 20090  229A  0008               	return
 20091  229B                     __end_of_CC2500_ClearTXFIFO:	
 20092                           
 20093                           	psect	text131
 20094  2293                     __ptext131:	
 20095 ;; *************** function _CC2500_ClearRXFIFO *****************
 20096 ;; Defined at:
 20097 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20098 ;; Parameters:    Size  Location     Type
 20099 ;;		None
 20100 ;; Auto vars:     Size  Location     Type
 20101 ;;		None
 20102 ;; Return value:  Size  Location     Type
 20103 ;;		None               void
 20104 ;; Registers used:
 20105 ;;		wreg, status,2, status,0, pclath, cstack
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20115 ;;Total ram usage:        0 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; Hardware stack levels required when called:    6
 20118 ;; This function calls:
 20119 ;;		_CC2500_WriteCommand
 20120 ;; This function is called by:
 20121 ;;		_CC2500_PowerOnInitial
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           
 20126                           ;psect for function _CC2500_ClearRXFIFO
 20127  2293                     _CC2500_ClearRXFIFO:	
 20128                           
 20129                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 20130                           
 20131                           ;incstack = 0
 20132                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 20133  2293  303A               	movlw	58
 20134  2294  31A4  2427         	fcall	_CC2500_WriteCommand
 20135  2296  0008               	return
 20136  2297                     __end_of_CC2500_ClearRXFIFO:	
 20137                           
 20138                           	psect	text132
 20139  2427                     __ptext132:	
 20140 ;; *************** function _CC2500_WriteCommand *****************
 20141 ;; Defined at:
 20142 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20143 ;; Parameters:    Size  Location     Type
 20144 ;;  command         1    wreg     unsigned char 
 20145 ;; Auto vars:     Size  Location     Type
 20146 ;;  command         1    3[BANK0 ] unsigned char 
 20147 ;; Return value:  Size  Location     Type
 20148 ;;		None               void
 20149 ;; Registers used:
 20150 ;;		wreg, status,2, status,0, pclath, cstack
 20151 ;; Tracked objects:
 20152 ;;		On entry : 0/0
 20153 ;;		On exit  : 0/0
 20154 ;;		Unchanged: 0/0
 20155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20160 ;;Total ram usage:        2 bytes
 20161 ;; Hardware stack levels used:    1
 20162 ;; Hardware stack levels required when called:    5
 20163 ;; This function calls:
 20164 ;;		_CC2500_WriteByte
 20165 ;; This function is called by:
 20166 ;;		_CC2500_TxData
 20167 ;;		_CC2500_RxData
 20168 ;;		_CC2500_ClearTXFIFO
 20169 ;;		_CC2500_ClearRXFIFO
 20170 ;;		_CC2500_FrequencyCabr
 20171 ;;		_CC2500_SIDLEMode
 20172 ;;		_setRF_Main
 20173 ;;		_RF_RxDisable
 20174 ;; This function uses a non-reentrant model
 20175 ;;
 20176                           
 20177                           
 20178                           ;psect for function _CC2500_WriteCommand
 20179  2427                     _CC2500_WriteCommand:	
 20180                           
 20181                           ;incstack = 0
 20182                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 20183                           ;CC2500_WriteCommand@command stored from wreg
 20184  2427  0020               	movlb	0	; select bank0
 20185  2428  00A3               	movwf	CC2500_WriteCommand@command
 20186                           
 20187                           ;CC2500_B1.c: 255: RC4=0;
 20188  2429  120E               	bcf	14,4	;volatile
 20189                           
 20190                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 20191  242A  0823               	movf	CC2500_WriteCommand@command,w
 20192  242B  00A2               	movwf	??_CC2500_WriteCommand
 20193  242C  0822               	movf	??_CC2500_WriteCommand,w
 20194  242D  0021               	movlb	1	; select bank1
 20195  242E  00BF               	movwf	_SPI0Buffer^(0+128)
 20196  242F                     l397:	
 20197                           ;CC2500_B1.c: 258: while(RC2==1);
 20198                           
 20199  242F  0020               	movlb	0	; select bank0
 20200  2430  190E               	btfsc	14,2	;volatile
 20201  2431  2C2F               	goto	l397
 20202                           
 20203                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 20204  2432  31A5  25B6         	fcall	_CC2500_WriteByte
 20205                           
 20206                           ;CC2500_B1.c: 261: RC4=1;
 20207  2434  0020               	movlb	0	; select bank0
 20208  2435  160E               	bsf	14,4	;volatile
 20209  2436  0008               	return
 20210  2437                     __end_of_CC2500_WriteCommand:	
 20211                           
 20212                           	psect	text133
 20213  25B6                     __ptext133:	
 20214 ;; *************** function _CC2500_WriteByte *****************
 20215 ;; Defined at:
 20216 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20217 ;; Parameters:    Size  Location     Type
 20218 ;;		None
 20219 ;; Auto vars:     Size  Location     Type
 20220 ;;  loop_a          1    1[BANK0 ] unsigned char 
 20221 ;; Return value:  Size  Location     Type
 20222 ;;		None               void
 20223 ;; Registers used:
 20224 ;;		wreg, status,2, status,0
 20225 ;; Tracked objects:
 20226 ;;		On entry : 0/0
 20227 ;;		On exit  : 0/0
 20228 ;;		Unchanged: 0/0
 20229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20234 ;;Total ram usage:        2 bytes
 20235 ;; Hardware stack levels used:    1
 20236 ;; Hardware stack levels required when called:    4
 20237 ;; This function calls:
 20238 ;;		Nothing
 20239 ;; This function is called by:
 20240 ;;		_CC2500_TxData
 20241 ;;		_CC2500_RxData
 20242 ;;		_CC2500_PowerRST
 20243 ;;		_CC2500_WriteREG
 20244 ;;		_CC2500_WriteCommand
 20245 ;;		_CC2500_ReadStatus
 20246 ;;		_CC2500_ReadREG
 20247 ;; This function uses a non-reentrant model
 20248 ;;
 20249                           
 20250                           
 20251                           ;psect for function _CC2500_WriteByte
 20252  25B6                     _CC2500_WriteByte:	
 20253                           
 20254                           ;CC2500_B1.c: 195: unsigned char loop_a;
 20255                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 20256                           
 20257                           ;incstack = 0
 20258                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 20259  25B6  0020               	movlb	0	; select bank0
 20260  25B7  01A1               	clrf	CC2500_WriteByte@loop_a
 20261  25B8                     L18:	
 20262  25B8  3008               	movlw	8
 20263  25B9  0221               	subwf	CC2500_WriteByte@loop_a,w
 20264  25BA  1803               	btfsc	3,0
 20265  25BB  0008               	return
 20266                           
 20267                           ;CC2500_B1.c: 197: {
 20268                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 20269  25BC  0021               	movlb	1	; select bank1
 20270  25BD  1FBF               	btfss	_SPI0Buffer^(0+128),7
 20271  25BE  2DC2               	goto	l373
 20272                           
 20273                           ;CC2500_B1.c: 199: RC0=1;
 20274  25BF  0020               	movlb	0	; select bank0
 20275  25C0  140E               	bsf	14,0	;volatile
 20276  25C1  2DC4               	goto	l374
 20277  25C2                     l373:	
 20278                           
 20279                           ;CC2500_B1.c: 200: else
 20280                           ;CC2500_B1.c: 201: RC0=0;
 20281  25C2  0020               	movlb	0	; select bank0
 20282  25C3  100E               	bcf	14,0	;volatile
 20283  25C4                     l374:	
 20284                           
 20285                           ;CC2500_B1.c: 202: RC1=1;
 20286  25C4  148E               	bsf	14,1	;volatile
 20287                           
 20288                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 20289  25C5  1003               	clrc
 20290  25C6  0021               	movlb	1	; select bank1
 20291  25C7  0DBF               	rlf	_SPI0Buffer^(0+128),f
 20292                           
 20293                           ;CC2500_B1.c: 204: RC1=0;
 20294  25C8  0020               	movlb	0	; select bank0
 20295  25C9  108E               	bcf	14,1	;volatile
 20296  25CA  3001               	movlw	1
 20297  25CB  00A0               	movwf	??_CC2500_WriteByte
 20298  25CC  0820               	movf	??_CC2500_WriteByte,w
 20299  25CD  07A1               	addwf	CC2500_WriteByte@loop_a,f
 20300  25CE  2DB8               	goto	L18
 20301  25CF                     __end_of_CC2500_WriteByte:	
 20302                           
 20303                           	psect	text134
 20304  1758                     __ptext134:	
 20305 ;; *************** function _Buzzer_Main *****************
 20306 ;; Defined at:
 20307 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20308 ;; Parameters:    Size  Location     Type
 20309 ;;		None
 20310 ;; Auto vars:     Size  Location     Type
 20311 ;;		None
 20312 ;; Return value:  Size  Location     Type
 20313 ;;		None               void
 20314 ;; Registers used:
 20315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20316 ;; Tracked objects:
 20317 ;;		On entry : 0/0
 20318 ;;		On exit  : 0/0
 20319 ;;		Unchanged: 0/0
 20320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20323 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20325 ;;Total ram usage:        4 bytes
 20326 ;; Hardware stack levels used:    1
 20327 ;; Hardware stack levels required when called:    4
 20328 ;; This function calls:
 20329 ;;		Nothing
 20330 ;; This function is called by:
 20331 ;;		_main
 20332 ;; This function uses a non-reentrant model
 20333 ;;
 20334                           
 20335                           
 20336                           ;psect for function _Buzzer_Main
 20337  1758                     _Buzzer_Main:	
 20338                           
 20339                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 20340                           
 20341                           ;incstack = 0
 20342                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 20343  1758  0878               	movf	_Buz,w
 20344  1759  0086               	movwf	6
 20345  175A  3001               	movlw	1	; select bank2/3
 20346  175B  0087               	movwf	7
 20347  175C  1281               	bcf	1,5
 20348  175D  0020               	movlb	0	; select bank0
 20349  175E  198D               	btfsc	13,3	;volatile
 20350  175F  1681               	bsf	1,5
 20351                           
 20352                           ;Buzzer_B1.c: 57: if(Buz->GO)
 20353  1760  0878               	movf	_Buz,w
 20354  1761  0086               	movwf	6
 20355  1762  3001               	movlw	1	; select bank2/3
 20356  1763  0087               	movwf	7
 20357  1764  1C81               	btfss	1,1
 20358  1765  0008               	return
 20359                           
 20360                           ;Buzzer_B1.c: 58: {
 20361                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 20362  1766  0878               	movf	_Buz,w
 20363  1767  3E06               	addlw	6
 20364  1768  0086               	movwf	6
 20365  1769  3001               	movlw	1	; select bank2/3
 20366  176A  0087               	movwf	7
 20367  176B  3F40               	moviw [0]fsr1
 20368  176C  0020               	movlb	0	; select bank0
 20369  176D  00A0               	movwf	??_Buzzer_Main
 20370  176E  3F41               	moviw [1]fsr1
 20371  176F  00A1               	movwf	??_Buzzer_Main+1
 20372  1770  0A78               	incf	_Buz,w
 20373  1771  0086               	movwf	6
 20374  1772  3001               	movlw	1	; select bank2/3
 20375  1773  0087               	movwf	7
 20376  1774  3F40               	moviw [0]fsr1
 20377  1775  00A2               	movwf	??_Buzzer_Main+2
 20378  1776  3F41               	moviw [1]fsr1
 20379  1777  00A3               	movwf	??_Buzzer_Main+3
 20380  1778  0821               	movf	??_Buzzer_Main+1,w
 20381  1779  0223               	subwf	??_Buzzer_Main+3,w
 20382  177A  1D03               	skipz
 20383  177B  2F7E               	goto	u7155
 20384  177C  0820               	movf	??_Buzzer_Main,w
 20385  177D  0222               	subwf	??_Buzzer_Main+2,w
 20386  177E                     u7155:	
 20387  177E  1C03               	skipc
 20388  177F  0008               	return
 20389                           
 20390                           ;Buzzer_B1.c: 61: {
 20391                           ;Buzzer_B1.c: 62: Buz->Time=0;
 20392  1780  0A78               	incf	_Buz,w
 20393  1781  0086               	movwf	6
 20394  1782  3001               	movlw	1	; select bank2/3
 20395  1783  0087               	movwf	7
 20396  1784  3000               	movlw	0
 20397  1785  3FC0               	movwi [0]fsr1
 20398  1786  3FC1               	movwi [1]fsr1
 20399                           
 20400                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 20401  1787  0878               	movf	_Buz,w
 20402  1788  0086               	movwf	6
 20403  1789  3001               	movlw	1	; select bank2/3
 20404  178A  0087               	movwf	7
 20405  178B  1A81               	btfsc	1,5
 20406  178C  2FF2               	goto	l8044
 20407                           
 20408                           ;Buzzer_B1.c: 64: {
 20409                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 20410  178D  0878               	movf	_Buz,w
 20411  178E  3E03               	addlw	3
 20412  178F  0086               	movwf	6
 20413  1790  3001               	movlw	1	; select bank2/3
 20414  1791  0087               	movwf	7
 20415  1792  0881               	movf	1,f
 20416  1793  1D03               	skipz
 20417  1794  2FEB               	goto	l8040
 20418                           
 20419                           ;Buzzer_B1.c: 66: {
 20420                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 20421  1795  0878               	movf	_Buz,w
 20422  1796  0086               	movwf	6
 20423  1797  3001               	movlw	1	; select bank2/3
 20424  1798  0087               	movwf	7
 20425  1799  1D81               	btfss	1,3
 20426  179A  2FBD               	goto	l8032
 20427                           
 20428                           ;Buzzer_B1.c: 68: {
 20429                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 20430  179B  0878               	movf	_Buz,w
 20431  179C  0086               	movwf	6
 20432  179D  3001               	movlw	1	; select bank2/3
 20433  179E  0087               	movwf	7
 20434  179F  1181               	bcf	1,3
 20435                           
 20436                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 20437  17A0  0878               	movf	_Buz,w
 20438  17A1  3E04               	addlw	4
 20439  17A2  0086               	movwf	6
 20440  17A3  3001               	movlw	1	; select bank2/3
 20441  17A4  0087               	movwf	7
 20442  17A5  0801               	movf	1,w
 20443  17A6  00A0               	movwf	??_Buzzer_Main
 20444  17A7  0878               	movf	_Buz,w
 20445  17A8  3E03               	addlw	3
 20446  17A9  0086               	movwf	6
 20447  17AA  3001               	movlw	1	; select bank2/3
 20448  17AB  0087               	movwf	7
 20449  17AC  0820               	movf	??_Buzzer_Main,w
 20450  17AD  0081               	movwf	1
 20451                           
 20452                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 20453  17AE  0878               	movf	_Buz,w
 20454  17AF  3E08               	addlw	8
 20455  17B0  0086               	movwf	6
 20456  17B1  3001               	movlw	1	; select bank2/3
 20457  17B2  0087               	movwf	7
 20458  17B3  0878               	movf	_Buz,w
 20459  17B4  3E06               	addlw	6
 20460  17B5  0084               	movwf	4
 20461  17B6  3001               	movlw	1	; select bank2/3
 20462  17B7  0085               	movwf	5
 20463  17B8  3F40               	moviw [0]fsr1
 20464  17B9  3F80               	movwi [0]fsr0
 20465  17BA  3F41               	moviw [1]fsr1
 20466  17BB  3F81               	movwi [1]fsr0
 20467                           
 20468                           ;Buzzer_B1.c: 72: }
 20469  17BC  0008               	return
 20470  17BD                     l8032:	
 20471                           
 20472                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20473  17BD  0878               	movf	_Buz,w
 20474  17BE  0086               	movwf	6
 20475  17BF  3001               	movlw	1	; select bank2/3
 20476  17C0  0087               	movwf	7
 20477  17C1  1E01               	btfss	1,4
 20478  17C2  2FE5               	goto	l8038
 20479                           
 20480                           ;Buzzer_B1.c: 74: {
 20481                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20482  17C3  0878               	movf	_Buz,w
 20483  17C4  0086               	movwf	6
 20484  17C5  3001               	movlw	1	; select bank2/3
 20485  17C6  0087               	movwf	7
 20486  17C7  1201               	bcf	1,4
 20487                           
 20488                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20489  17C8  0878               	movf	_Buz,w
 20490  17C9  3E05               	addlw	5
 20491  17CA  0086               	movwf	6
 20492  17CB  3001               	movlw	1	; select bank2/3
 20493  17CC  0087               	movwf	7
 20494  17CD  0801               	movf	1,w
 20495  17CE  00A0               	movwf	??_Buzzer_Main
 20496  17CF  0878               	movf	_Buz,w
 20497  17D0  3E03               	addlw	3
 20498  17D1  0086               	movwf	6
 20499  17D2  3001               	movlw	1	; select bank2/3
 20500  17D3  0087               	movwf	7
 20501  17D4  0820               	movf	??_Buzzer_Main,w
 20502  17D5  0081               	movwf	1
 20503                           
 20504                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20505  17D6  0878               	movf	_Buz,w
 20506  17D7  3E0A               	addlw	10
 20507  17D8  0086               	movwf	6
 20508  17D9  3001               	movlw	1	; select bank2/3
 20509  17DA  0087               	movwf	7
 20510  17DB  0878               	movf	_Buz,w
 20511  17DC  3E06               	addlw	6
 20512  17DD  0084               	movwf	4
 20513  17DE  3001               	movlw	1	; select bank2/3
 20514  17DF  0085               	movwf	5
 20515  17E0  3F40               	moviw [0]fsr1
 20516  17E1  3F80               	movwi [0]fsr0
 20517  17E2  3F41               	moviw [1]fsr1
 20518  17E3  3F81               	movwi [1]fsr0
 20519                           
 20520                           ;Buzzer_B1.c: 78: }
 20521  17E4  0008               	return
 20522  17E5                     l8038:	
 20523                           
 20524                           ;Buzzer_B1.c: 79: else
 20525                           ;Buzzer_B1.c: 80: {
 20526                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20527  17E5  0878               	movf	_Buz,w
 20528  17E6  0086               	movwf	6
 20529  17E7  3001               	movlw	1	; select bank2/3
 20530  17E8  0087               	movwf	7
 20531  17E9  1081               	bcf	1,1
 20532                           
 20533                           ;Buzzer_B1.c: 82: }
 20534                           ;Buzzer_B1.c: 83: }
 20535  17EA  0008               	return
 20536  17EB                     l8040:	
 20537                           
 20538                           ;Buzzer_B1.c: 84: else
 20539                           ;Buzzer_B1.c: 85: {
 20540                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20541  17EB  0878               	movf	_Buz,w
 20542  17EC  0086               	movwf	6
 20543  17ED  3001               	movlw	1	; select bank2/3
 20544  17EE  0087               	movwf	7
 20545  17EF  1681               	bsf	1,5
 20546                           
 20547                           ;Buzzer_B1.c: 88: RB3=1;
 20548  17F0  158D               	bsf	13,3	;volatile
 20549                           
 20550                           ;Buzzer_B1.c: 89: }
 20551                           ;Buzzer_B1.c: 90: }
 20552  17F1  0008               	return
 20553  17F2                     l8044:	
 20554                           
 20555                           ;Buzzer_B1.c: 91: else
 20556                           ;Buzzer_B1.c: 92: {
 20557                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20558  17F2  0878               	movf	_Buz,w
 20559  17F3  0086               	movwf	6
 20560  17F4  3001               	movlw	1	; select bank2/3
 20561  17F5  0087               	movwf	7
 20562  17F6  1281               	bcf	1,5
 20563                           
 20564                           ;Buzzer_B1.c: 95: RB3=0;
 20565  17F7  118D               	bcf	13,3	;volatile
 20566                           
 20567                           ;Buzzer_B1.c: 97: Buz->Count--;
 20568  17F8  0878               	movf	_Buz,w
 20569  17F9  3E03               	addlw	3
 20570  17FA  0086               	movwf	6
 20571  17FB  3001               	movlw	1	; select bank2/3
 20572  17FC  0087               	movwf	7
 20573  17FD  3001               	movlw	1
 20574  17FE  0281               	subwf	1,f
 20575  17FF  0008               	return
 20576  1800                     __end_of_Buzzer_Main:	
 20577                           
 20578                           	psect	text135
 20579  2319                     __ptext135:	
 20580 ;; *************** function _Buzzer_Initialization *****************
 20581 ;; Defined at:
 20582 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20583 ;; Parameters:    Size  Location     Type
 20584 ;;		None
 20585 ;; Auto vars:     Size  Location     Type
 20586 ;;		None
 20587 ;; Return value:  Size  Location     Type
 20588 ;;		None               void
 20589 ;; Registers used:
 20590 ;;		wreg, fsr1l, fsr1h
 20591 ;; Tracked objects:
 20592 ;;		On entry : 0/0
 20593 ;;		On exit  : 0/0
 20594 ;;		Unchanged: 0/0
 20595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20600 ;;Total ram usage:        1 bytes
 20601 ;; Hardware stack levels used:    1
 20602 ;; Hardware stack levels required when called:    4
 20603 ;; This function calls:
 20604 ;;		Nothing
 20605 ;; This function is called by:
 20606 ;;		_main
 20607 ;; This function uses a non-reentrant model
 20608 ;;
 20609                           
 20610                           
 20611                           ;psect for function _Buzzer_Initialization
 20612  2319                     _Buzzer_Initialization:	
 20613                           
 20614                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20615                           
 20616                           ;incstack = 0
 20617                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20618  2319  304A               	movlw	_Buz1& (0+255)
 20619  231A  0020               	movlb	0	; select bank0
 20620  231B  00A0               	movwf	??_Buzzer_Initialization
 20621  231C  0820               	movf	??_Buzzer_Initialization,w
 20622  231D  00F8               	movwf	_Buz
 20623                           
 20624                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20625  231E  0878               	movf	_Buz,w
 20626  231F  0086               	movwf	6
 20627  2320  3001               	movlw	1	; select bank2/3
 20628  2321  0087               	movwf	7
 20629  2322  1401               	bsf	1,0
 20630  2323  0008               	return
 20631  2324                     __end_of_Buzzer_Initialization:	
 20632                           
 20633                           	psect	intentry
 20634  0004                     __pintentry:	
 20635 ;; *************** function _ISR *****************
 20636 ;; Defined at:
 20637 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20638 ;; Parameters:    Size  Location     Type
 20639 ;;		None
 20640 ;; Auto vars:     Size  Location     Type
 20641 ;;		None
 20642 ;; Return value:  Size  Location     Type
 20643 ;;		None               void
 20644 ;; Registers used:
 20645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20646 ;; Tracked objects:
 20647 ;;		On entry : 0/0
 20648 ;;		On exit  : 0/0
 20649 ;;		Unchanged: 0/0
 20650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20655 ;;Total ram usage:        1 bytes
 20656 ;; Hardware stack levels used:    1
 20657 ;; Hardware stack levels required when called:    3
 20658 ;; This function calls:
 20659 ;;		_INT_ISR
 20660 ;;		_IOC_ISR
 20661 ;;		_TMR0_ISR
 20662 ;; This function is called by:
 20663 ;;		Interrupt level 1
 20664 ;; This function uses a non-reentrant model
 20665 ;;
 20666                           
 20667  0004                     _ISR:	
 20668                           
 20669                           ;incstack = 0
 20670                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20671  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20672  0005  3180               	pagesel	$
 20673  0006  0020               	movlb	0	; select bank0
 20674  0007  087F               	movf	127,w
 20675  0008  00F7               	movwf	??_ISR
 20676                           
 20677                           ;MCU_B1.c: 99: IOC_ISR();
 20678  0009  3198  2000  3180   	fcall	_IOC_ISR
 20679                           
 20680                           ;MCU_B1.c: 101: TMR0_ISR();
 20681  000C  3184  2446  3180   	fcall	_TMR0_ISR
 20682                           
 20683                           ;MCU_B1.c: 103: ;;
 20684                           ;MCU_B1.c: 107: INT_ISR();
 20685  000F  31A3  237D         	fcall	_INT_ISR
 20686  0011  0877               	movf	??_ISR,w
 20687  0012  0020               	movlb	0	; select bank0
 20688  0013  00FF               	movwf	127
 20689  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20690  0015  0009               	retfie
 20691  0016                     __end_of_ISR:	
 20692                           
 20693                           	psect	text137
 20694  0446                     __ptext137:	
 20695 ;; *************** function _TMR0_ISR *****************
 20696 ;; Defined at:
 20697 ;;		line 123 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20698 ;; Parameters:    Size  Location     Type
 20699 ;;		None
 20700 ;; Auto vars:     Size  Location     Type
 20701 ;;		None
 20702 ;; Return value:  Size  Location     Type
 20703 ;;		None               void
 20704 ;; Registers used:
 20705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20706 ;; Tracked objects:
 20707 ;;		On entry : 0/0
 20708 ;;		On exit  : 0/0
 20709 ;;		Unchanged: 0/0
 20710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20715 ;;Total ram usage:        4 bytes
 20716 ;; Hardware stack levels used:    1
 20717 ;; Hardware stack levels required when called:    1
 20718 ;; This function calls:
 20719 ;;		i1_setLoad_StatusOff
 20720 ;; This function is called by:
 20721 ;;		_ISR
 20722 ;; This function uses a non-reentrant model
 20723 ;;
 20724                           
 20725                           
 20726                           ;psect for function _TMR0_ISR
 20727  0446                     _TMR0_ISR:	
 20728                           
 20729                           ;MCU_B1.c: 125: if(TMR0IE && TMR0IF)
 20730                           
 20731                           ;incstack = 0
 20732                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20733  0446  1E8B               	btfss	11,5	;volatile
 20734  0447  0008               	return
 20735  0448  1D0B               	btfss	11,2	;volatile
 20736  0449  0008               	return
 20737                           
 20738                           ;MCU_B1.c: 126: {
 20739                           ;MCU_B1.c: 127: TMR0=(256-90);
 20740  044A  30A6               	movlw	166
 20741  044B  0020               	movlb	0	; select bank0
 20742  044C  0095               	movwf	21	;volatile
 20743                           
 20744                           ;MCU_B1.c: 128: TMR0IF=0;
 20745  044D  110B               	bcf	11,2	;volatile
 20746                           
 20747                           ;MCU_B1.c: 133: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; ;; } }
      +                           }
 20748  044E  0879               	movf	_DimmerLights11,w
 20749  044F  0086               	movwf	6
 20750  0450  3001               	movlw	1	; select bank2/3
 20751  0451  0087               	movwf	7
 20752  0452  1C01               	btfss	1,0
 20753  0453  2C9E               	goto	i1l8488
 20754  0454  3001               	movlw	1
 20755  0455  00F3               	movwf	??_TMR0_ISR
 20756  0456  0879               	movf	_DimmerLights11,w
 20757  0457  3E03               	addlw	3
 20758  0458  0086               	movwf	6
 20759  0459  3001               	movlw	1	; select bank2/3
 20760  045A  0087               	movwf	7
 20761  045B  0873               	movf	??_TMR0_ISR,w
 20762  045C  0781               	addwf	1,f
 20763  045D  0021               	movlb	1	; select bank1
 20764  045E  0839               	movf	_Dimmer^(0+128),w
 20765  045F  3E02               	addlw	2
 20766  0460  0086               	movwf	6
 20767  0461  0187               	clrf	7
 20768  0462  0801               	movf	1,w
 20769  0463  00F3               	movwf	??_TMR0_ISR
 20770  0464  01F4               	clrf	??_TMR0_ISR+1
 20771  0465  09F3               	comf	??_TMR0_ISR,f
 20772  0466  09F4               	comf	??_TMR0_ISR+1,f
 20773  0467  0AF3               	incf	??_TMR0_ISR,f
 20774  0468  1903               	skipnz
 20775  0469  0AF4               	incf	??_TMR0_ISR+1,f
 20776  046A  0879               	movf	_DimmerLights11,w
 20777  046B  3E04               	addlw	4
 20778  046C  0086               	movwf	6
 20779  046D  3001               	movlw	1	; select bank2/3
 20780  046E  0087               	movwf	7
 20781  046F  0801               	movf	1,w
 20782  0470  0773               	addwf	??_TMR0_ISR,w
 20783  0471  00F5               	movwf	??_TMR0_ISR+2
 20784  0472  0874               	movf	??_TMR0_ISR+1,w
 20785  0473  1803               	skipnc
 20786  0474  0A74               	incf	??_TMR0_ISR+1,w
 20787  0475  00F6               	movwf	??_TMR0_ISR+3
 20788  0476  0879               	movf	_DimmerLights11,w
 20789  0477  3E03               	addlw	3
 20790  0478  0086               	movwf	6
 20791  0479  3001               	movlw	1	; select bank2/3
 20792  047A  0087               	movwf	7
 20793  047B  0876               	movf	??_TMR0_ISR+3,w
 20794  047C  3A80               	xorlw	128
 20795  047D  3C80               	sublw	128
 20796  047E  1D03               	skipz
 20797  047F  2C82               	goto	u776_25
 20798  0480  0875               	movf	??_TMR0_ISR+2,w
 20799  0481  0201               	subwf	1,w
 20800  0482                     u776_25:	
 20801  0482  1C03               	skipc
 20802  0483  2DD8               	goto	i1l8554
 20803  0484  0879               	movf	_DimmerLights11,w
 20804  0485  3E03               	addlw	3
 20805  0486  0086               	movwf	6
 20806  0487  3001               	movlw	1	; select bank2/3
 20807  0488  0087               	movwf	7
 20808  0489  0181               	clrf	1
 20809  048A  0879               	movf	_DimmerLights11,w
 20810  048B  0086               	movwf	6
 20811  048C  3001               	movlw	1	; select bank2/3
 20812  048D  0087               	movwf	7
 20813  048E  1001               	bcf	1,0
 20814  048F  0879               	movf	_DimmerLights11,w
 20815  0490  3E07               	addlw	7
 20816  0491  0086               	movwf	6
 20817  0492  3001               	movlw	1	; select bank2/3
 20818  0493  0087               	movwf	7
 20819  0494  1401               	bsf	1,0
 20820  0495  0879               	movf	_DimmerLights11,w
 20821  0496  0086               	movwf	6
 20822  0497  3001               	movlw	1	; select bank2/3
 20823  0498  0087               	movwf	7
 20824  0499  1F01               	btfss	1,6
 20825  049A  2DD8               	goto	i1l8554
 20826  049B  0020               	movlb	0	; select bank0
 20827  049C  178C               	bsf	12,7	;volatile
 20828  049D  2DD8               	goto	i1l8554
 20829  049E                     i1l8488:	
 20830  049E  0879               	movf	_DimmerLights11,w
 20831  049F  3E07               	addlw	7
 20832  04A0  0086               	movwf	6
 20833  04A1  3001               	movlw	1	; select bank2/3
 20834  04A2  0087               	movwf	7
 20835  04A3  1C01               	btfss	1,0
 20836  04A4  2DA3               	goto	i1l8546
 20837  04A5  0879               	movf	_DimmerLights11,w
 20838  04A6  3E07               	addlw	7
 20839  04A7  0086               	movwf	6
 20840  04A8  3001               	movlw	1	; select bank2/3
 20841  04A9  0087               	movwf	7
 20842  04AA  1001               	bcf	1,0
 20843  04AB  0879               	movf	_DimmerLights11,w
 20844  04AC  0086               	movwf	6
 20845  04AD  3001               	movlw	1	; select bank2/3
 20846  04AE  0087               	movwf	7
 20847  04AF  1C81               	btfss	1,1
 20848  04B0  2DA3               	goto	i1l8546
 20849  04B1  3001               	movlw	1
 20850  04B2  00F3               	movwf	??_TMR0_ISR
 20851  04B3  0A79               	incf	_DimmerLights11,w
 20852  04B4  0086               	movwf	6
 20853  04B5  3001               	movlw	1	; select bank2/3
 20854  04B6  0087               	movwf	7
 20855  04B7  0873               	movf	??_TMR0_ISR,w
 20856  04B8  0781               	addwf	1,f
 20857  04B9  0A79               	incf	_DimmerLights11,w
 20858  04BA  0086               	movwf	6
 20859  04BB  3001               	movlw	1	; select bank2/3
 20860  04BC  0087               	movwf	7
 20861  04BD  0879               	movf	_DimmerLights11,w
 20862  04BE  3E02               	addlw	2
 20863  04BF  0084               	movwf	4
 20864  04C0  3001               	movlw	1	; select bank2/3
 20865  04C1  0085               	movwf	5
 20866  04C2  0800               	movf	0,w
 20867  04C3  0201               	subwf	1,w
 20868  04C4  1C03               	skipc
 20869  04C5  2DA3               	goto	i1l8546
 20870  04C6  0A79               	incf	_DimmerLights11,w
 20871  04C7  0086               	movwf	6
 20872  04C8  3001               	movlw	1	; select bank2/3
 20873  04C9  0087               	movwf	7
 20874  04CA  0181               	clrf	1
 20875  04CB  0879               	movf	_DimmerLights11,w
 20876  04CC  0086               	movwf	6
 20877  04CD  3001               	movlw	1	; select bank2/3
 20878  04CE  0087               	movwf	7
 20879  04CF  1D81               	btfss	1,3
 20880  04D0  2D07               	goto	i1l8514
 20881  04D1  0879               	movf	_DimmerLights11,w
 20882  04D2  0086               	movwf	6
 20883  04D3  3001               	movlw	1	; select bank2/3
 20884  04D4  0087               	movwf	7
 20885  04D5  1A01               	btfsc	1,4
 20886  04D6  2CEE               	goto	i1l8508
 20887  04D7  0879               	movf	_DimmerLights11,w
 20888  04D8  3E04               	addlw	4
 20889  04D9  0086               	movwf	6
 20890  04DA  3001               	movlw	1	; select bank2/3
 20891  04DB  0087               	movwf	7
 20892  04DC  3044               	movlw	68
 20893  04DD  0201               	subwf	1,w
 20894  04DE  1C03               	skipc
 20895  04DF  2CE8               	goto	i1l8506
 20896  04E0  0879               	movf	_DimmerLights11,w
 20897  04E1  3E04               	addlw	4
 20898  04E2  0086               	movwf	6
 20899  04E3  3001               	movlw	1	; select bank2/3
 20900  04E4  0087               	movwf	7
 20901  04E5  3001               	movlw	1
 20902  04E6  0281               	subwf	1,f
 20903  04E7  2DA3               	goto	i1l8546
 20904  04E8                     i1l8506:	
 20905  04E8  0879               	movf	_DimmerLights11,w
 20906  04E9  0086               	movwf	6
 20907  04EA  3001               	movlw	1	; select bank2/3
 20908  04EB  0087               	movwf	7
 20909  04EC  1601               	bsf	1,4
 20910  04ED  2DA3               	goto	i1l8546
 20911  04EE                     i1l8508:	
 20912  04EE  0879               	movf	_DimmerLights11,w
 20913  04EF  3E04               	addlw	4
 20914  04F0  0086               	movwf	6
 20915  04F1  3001               	movlw	1	; select bank2/3
 20916  04F2  0087               	movwf	7
 20917  04F3  3078               	movlw	120
 20918  04F4  0201               	subwf	1,w
 20919  04F5  1803               	skipnc
 20920  04F6  2D01               	goto	i1l8512
 20921  04F7  3001               	movlw	1
 20922  04F8  00F3               	movwf	??_TMR0_ISR
 20923  04F9  0879               	movf	_DimmerLights11,w
 20924  04FA  3E04               	addlw	4
 20925  04FB  0086               	movwf	6
 20926  04FC  3001               	movlw	1	; select bank2/3
 20927  04FD  0087               	movwf	7
 20928  04FE  0873               	movf	??_TMR0_ISR,w
 20929  04FF  0781               	addwf	1,f
 20930  0500  2DA3               	goto	i1l8546
 20931  0501                     i1l8512:	
 20932  0501  0879               	movf	_DimmerLights11,w
 20933  0502  0086               	movwf	6
 20934  0503  3001               	movlw	1	; select bank2/3
 20935  0504  0087               	movwf	7
 20936  0505  1201               	bcf	1,4
 20937  0506  2DA3               	goto	i1l8546
 20938  0507                     i1l8514:	
 20939  0507  0879               	movf	_DimmerLights11,w
 20940  0508  0086               	movwf	6
 20941  0509  3001               	movlw	1	; select bank2/3
 20942  050A  0087               	movwf	7
 20943  050B  1D01               	btfss	1,2
 20944  050C  2D4E               	goto	i1l8528
 20945  050D  0879               	movf	_DimmerLights11,w
 20946  050E  3E05               	addlw	5
 20947  050F  0086               	movwf	6
 20948  0510  3001               	movlw	1	; select bank2/3
 20949  0511  0087               	movwf	7
 20950  0512  0879               	movf	_DimmerLights11,w
 20951  0513  3E04               	addlw	4
 20952  0514  0084               	movwf	4
 20953  0515  3001               	movlw	1	; select bank2/3
 20954  0516  0085               	movwf	5
 20955  0517  0800               	movf	0,w
 20956  0518  0201               	subwf	1,w
 20957  0519  1803               	skipnc
 20958  051A  2D23               	goto	i1l8520
 20959  051B  0879               	movf	_DimmerLights11,w
 20960  051C  3E04               	addlw	4
 20961  051D  0086               	movwf	6
 20962  051E  3001               	movlw	1	; select bank2/3
 20963  051F  0087               	movwf	7
 20964  0520  3001               	movlw	1
 20965  0521  0281               	subwf	1,f
 20966  0522  2D3A               	goto	i1l8524
 20967  0523                     i1l8520:	
 20968  0523  0879               	movf	_DimmerLights11,w
 20969  0524  3E04               	addlw	4
 20970  0525  0086               	movwf	6
 20971  0526  3001               	movlw	1	; select bank2/3
 20972  0527  0087               	movwf	7
 20973  0528  0879               	movf	_DimmerLights11,w
 20974  0529  3E05               	addlw	5
 20975  052A  0084               	movwf	4
 20976  052B  3001               	movlw	1	; select bank2/3
 20977  052C  0085               	movwf	5
 20978  052D  0800               	movf	0,w
 20979  052E  0201               	subwf	1,w
 20980  052F  1803               	skipnc
 20981  0530  2D3A               	goto	i1l8524
 20982  0531  3001               	movlw	1
 20983  0532  00F3               	movwf	??_TMR0_ISR
 20984  0533  0879               	movf	_DimmerLights11,w
 20985  0534  3E04               	addlw	4
 20986  0535  0086               	movwf	6
 20987  0536  3001               	movlw	1	; select bank2/3
 20988  0537  0087               	movwf	7
 20989  0538  0873               	movf	??_TMR0_ISR,w
 20990  0539  0781               	addwf	1,f
 20991  053A                     i1l8524:	
 20992  053A  0879               	movf	_DimmerLights11,w
 20993  053B  3E05               	addlw	5
 20994  053C  0086               	movwf	6
 20995  053D  3001               	movlw	1	; select bank2/3
 20996  053E  0087               	movwf	7
 20997  053F  0879               	movf	_DimmerLights11,w
 20998  0540  3E04               	addlw	4
 20999  0541  0084               	movwf	4
 21000  0542  3001               	movlw	1	; select bank2/3
 21001  0543  0085               	movwf	5
 21002  0544  0800               	movf	0,w
 21003  0545  0601               	xorwf	1,w
 21004  0546  1D03               	skipz
 21005  0547  2DA3               	goto	i1l8546
 21006  0548  0879               	movf	_DimmerLights11,w
 21007  0549  0086               	movwf	6
 21008  054A  3001               	movlw	1	; select bank2/3
 21009  054B  0087               	movwf	7
 21010  054C  1101               	bcf	1,2
 21011  054D  2D69               	goto	i1l8534
 21012  054E                     i1l8528:	
 21013  054E  0879               	movf	_DimmerLights11,w
 21014  054F  0086               	movwf	6
 21015  0550  3001               	movlw	1	; select bank2/3
 21016  0551  0087               	movwf	7
 21017  0552  1E81               	btfss	1,5
 21018  0553  2D6F               	goto	i1l8536
 21019  0554  0879               	movf	_DimmerLights11,w
 21020  0555  3E04               	addlw	4
 21021  0556  0086               	movwf	6
 21022  0557  3001               	movlw	1	; select bank2/3
 21023  0558  0087               	movwf	7
 21024  0559  3001               	movlw	1
 21025  055A  0281               	subwf	1,f
 21026  055B  0879               	movf	_DimmerLights11,w
 21027  055C  3E05               	addlw	5
 21028  055D  0086               	movwf	6
 21029  055E  3001               	movlw	1	; select bank2/3
 21030  055F  0087               	movwf	7
 21031  0560  0879               	movf	_DimmerLights11,w
 21032  0561  3E04               	addlw	4
 21033  0562  0084               	movwf	4
 21034  0563  3001               	movlw	1	; select bank2/3
 21035  0564  0085               	movwf	5
 21036  0565  0800               	movf	0,w
 21037  0566  0201               	subwf	1,w
 21038  0567  1C03               	skipc
 21039  0568  2DA3               	goto	i1l8546
 21040  0569                     i1l8534:	
 21041  0569  0879               	movf	_DimmerLights11,w
 21042  056A  0086               	movwf	6
 21043  056B  3001               	movlw	1	; select bank2/3
 21044  056C  0087               	movwf	7
 21045  056D  1081               	bcf	1,1
 21046  056E  2DA3               	goto	i1l8546
 21047  056F                     i1l8536:	
 21048  056F  3001               	movlw	1
 21049  0570  00F3               	movwf	??_TMR0_ISR
 21050  0571  0879               	movf	_DimmerLights11,w
 21051  0572  3E04               	addlw	4
 21052  0573  0086               	movwf	6
 21053  0574  3001               	movlw	1	; select bank2/3
 21054  0575  0087               	movwf	7
 21055  0576  0873               	movf	??_TMR0_ISR,w
 21056  0577  0781               	addwf	1,f
 21057  0578  0879               	movf	_DimmerLights11,w
 21058  0579  3E04               	addlw	4
 21059  057A  0086               	movwf	6
 21060  057B  3001               	movlw	1	; select bank2/3
 21061  057C  0087               	movwf	7
 21062  057D  0879               	movf	_DimmerLights11,w
 21063  057E  3E06               	addlw	6
 21064  057F  0084               	movwf	4
 21065  0580  3001               	movlw	1	; select bank2/3
 21066  0581  0085               	movwf	5
 21067  0582  0800               	movf	0,w
 21068  0583  0201               	subwf	1,w
 21069  0584  1C03               	skipc
 21070  0585  2DA3               	goto	i1l8546
 21071  0586  0879               	movf	_DimmerLights11,w
 21072  0587  0086               	movwf	6
 21073  0588  3001               	movlw	1	; select bank2/3
 21074  0589  0087               	movwf	7
 21075  058A  1081               	bcf	1,1
 21076  058B  0879               	movf	_DimmerLights11,w
 21077  058C  0086               	movwf	6
 21078  058D  3001               	movlw	1	; select bank2/3
 21079  058E  0087               	movwf	7
 21080  058F  1301               	bcf	1,6
 21081  0590  0879               	movf	_DimmerLights11,w
 21082  0591  3E0C               	addlw	12
 21083  0592  0086               	movwf	6
 21084  0593  3001               	movlw	1	; select bank2/3
 21085  0594  0087               	movwf	7
 21086  0595  1401               	bsf	1,0
 21087  0596  0021               	movlb	1	; select bank1
 21088  0597  0839               	movf	_Dimmer^(0+128),w
 21089  0598  0086               	movwf	6
 21090  0599  0187               	clrf	7
 21091  059A  1401               	bsf	1,0
 21092  059B  0020               	movlb	0	; select bank0
 21093  059C  118C               	bcf	12,3	;volatile
 21094  059D  01F1               	clrf	i1setLoad_StatusOff@command
 21095  059E  0AF1               	incf	i1setLoad_StatusOff@command,f
 21096  059F  3001               	movlw	1
 21097  05A0  3199  2105  3184   	fcall	i1_setLoad_StatusOff
 21098  05A3                     i1l8546:	
 21099  05A3  0020               	movlb	0	; select bank0
 21100  05A4  1F8C               	btfss	12,7	;volatile
 21101  05A5  2DD8               	goto	i1l8554
 21102  05A6  3001               	movlw	1
 21103  05A7  00F3               	movwf	??_TMR0_ISR
 21104  05A8  0879               	movf	_DimmerLights11,w
 21105  05A9  3E08               	addlw	8
 21106  05AA  0086               	movwf	6
 21107  05AB  3001               	movlw	1	; select bank2/3
 21108  05AC  0087               	movwf	7
 21109  05AD  0873               	movf	??_TMR0_ISR,w
 21110  05AE  0781               	addwf	1,f
 21111  05AF  0879               	movf	_DimmerLights11,w
 21112  05B0  3E04               	addlw	4
 21113  05B1  0086               	movwf	6
 21114  05B2  3001               	movlw	1	; select bank2/3
 21115  05B3  0087               	movwf	7
 21116  05B4  0801               	movf	1,w
 21117  05B5  00F3               	movwf	??_TMR0_ISR
 21118  05B6  01F4               	clrf	??_TMR0_ISR+1
 21119  05B7  09F3               	comf	??_TMR0_ISR,f
 21120  05B8  09F4               	comf	??_TMR0_ISR+1,f
 21121  05B9  0AF3               	incf	??_TMR0_ISR,f
 21122  05BA  1903               	skipnz
 21123  05BB  0AF4               	incf	??_TMR0_ISR+1,f
 21124  05BC  0873               	movf	??_TMR0_ISR,w
 21125  05BD  3E78               	addlw	120
 21126  05BE  00F5               	movwf	??_TMR0_ISR+2
 21127  05BF  3000               	movlw	0
 21128  05C0  3D74               	addwfc	??_TMR0_ISR+1,w
 21129  05C1  00F6               	movwf	??_TMR0_ISR+3
 21130  05C2  0879               	movf	_DimmerLights11,w
 21131  05C3  3E08               	addlw	8
 21132  05C4  0086               	movwf	6
 21133  05C5  3001               	movlw	1	; select bank2/3
 21134  05C6  0087               	movwf	7
 21135  05C7  0876               	movf	??_TMR0_ISR+3,w
 21136  05C8  3A80               	xorlw	128
 21137  05C9  3C80               	sublw	128
 21138  05CA  1D03               	skipz
 21139  05CB  2DCE               	goto	u793_25
 21140  05CC  0875               	movf	??_TMR0_ISR+2,w
 21141  05CD  0201               	subwf	1,w
 21142  05CE                     u793_25:	
 21143  05CE  1C03               	skipc
 21144  05CF  2DD8               	goto	i1l8554
 21145  05D0  0879               	movf	_DimmerLights11,w
 21146  05D1  3E08               	addlw	8
 21147  05D2  0086               	movwf	6
 21148  05D3  3001               	movlw	1	; select bank2/3
 21149  05D4  0087               	movwf	7
 21150  05D5  0181               	clrf	1
 21151  05D6  0020               	movlb	0	; select bank0
 21152  05D7  138C               	bcf	12,7	;volatile
 21153  05D8                     i1l8554:	
 21154                           
 21155                           ;MCU_B1.c: 137: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLights22->Cou
      +                          nt >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count=0; Dimm
      +                          erLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=1; } } } 
      +                          el
 21156  05D8  087A               	movf	_DimmerLights22,w
 21157  05D9  0086               	movwf	6
 21158  05DA  3001               	movlw	1	; select bank2/3
 21159  05DB  0087               	movwf	7
 21160  05DC  1C01               	btfss	1,0
 21161  05DD  2E28               	goto	i1l8568
 21162  05DE  3001               	movlw	1
 21163  05DF  00F3               	movwf	??_TMR0_ISR
 21164  05E0  087A               	movf	_DimmerLights22,w
 21165  05E1  3E03               	addlw	3
 21166  05E2  0086               	movwf	6
 21167  05E3  3001               	movlw	1	; select bank2/3
 21168  05E4  0087               	movwf	7
 21169  05E5  0873               	movf	??_TMR0_ISR,w
 21170  05E6  0781               	addwf	1,f
 21171  05E7  0021               	movlb	1	; select bank1
 21172  05E8  0839               	movf	_Dimmer^(0+128),w
 21173  05E9  3E02               	addlw	2
 21174  05EA  0086               	movwf	6
 21175  05EB  0187               	clrf	7
 21176  05EC  0801               	movf	1,w
 21177  05ED  00F3               	movwf	??_TMR0_ISR
 21178  05EE  01F4               	clrf	??_TMR0_ISR+1
 21179  05EF  09F3               	comf	??_TMR0_ISR,f
 21180  05F0  09F4               	comf	??_TMR0_ISR+1,f
 21181  05F1  0AF3               	incf	??_TMR0_ISR,f
 21182  05F2  1903               	skipnz
 21183  05F3  0AF4               	incf	??_TMR0_ISR+1,f
 21184  05F4  087A               	movf	_DimmerLights22,w
 21185  05F5  3E04               	addlw	4
 21186  05F6  0086               	movwf	6
 21187  05F7  3001               	movlw	1	; select bank2/3
 21188  05F8  0087               	movwf	7
 21189  05F9  0801               	movf	1,w
 21190  05FA  0773               	addwf	??_TMR0_ISR,w
 21191  05FB  00F5               	movwf	??_TMR0_ISR+2
 21192  05FC  0874               	movf	??_TMR0_ISR+1,w
 21193  05FD  1803               	skipnc
 21194  05FE  0A74               	incf	??_TMR0_ISR+1,w
 21195  05FF  00F6               	movwf	??_TMR0_ISR+3
 21196  0600  087A               	movf	_DimmerLights22,w
 21197  0601  3E03               	addlw	3
 21198  0602  0086               	movwf	6
 21199  0603  3001               	movlw	1	; select bank2/3
 21200  0604  0087               	movwf	7
 21201  0605  0876               	movf	??_TMR0_ISR+3,w
 21202  0606  3A80               	xorlw	128
 21203  0607  3C80               	sublw	128
 21204  0608  1D03               	skipz
 21205  0609  2E0C               	goto	u795_25
 21206  060A  0875               	movf	??_TMR0_ISR+2,w
 21207  060B  0201               	subwf	1,w
 21208  060C                     u795_25:	
 21209  060C  1C03               	skipc
 21210  060D  2F62               	goto	i1l8634
 21211  060E  087A               	movf	_DimmerLights22,w
 21212  060F  3E03               	addlw	3
 21213  0610  0086               	movwf	6
 21214  0611  3001               	movlw	1	; select bank2/3
 21215  0612  0087               	movwf	7
 21216  0613  0181               	clrf	1
 21217  0614  087A               	movf	_DimmerLights22,w
 21218  0615  0086               	movwf	6
 21219  0616  3001               	movlw	1	; select bank2/3
 21220  0617  0087               	movwf	7
 21221  0618  1001               	bcf	1,0
 21222  0619  087A               	movf	_DimmerLights22,w
 21223  061A  3E07               	addlw	7
 21224  061B  0086               	movwf	6
 21225  061C  3001               	movlw	1	; select bank2/3
 21226  061D  0087               	movwf	7
 21227  061E  1401               	bsf	1,0
 21228  061F  087A               	movf	_DimmerLights22,w
 21229  0620  0086               	movwf	6
 21230  0621  3001               	movlw	1	; select bank2/3
 21231  0622  0087               	movwf	7
 21232  0623  1F01               	btfss	1,6
 21233  0624  2F62               	goto	i1l8634
 21234  0625  0020               	movlb	0	; select bank0
 21235  0626  160D               	bsf	13,4	;volatile
 21236  0627  2F62               	goto	i1l8634
 21237  0628                     i1l8568:	
 21238  0628  087A               	movf	_DimmerLights22,w
 21239  0629  3E07               	addlw	7
 21240  062A  0086               	movwf	6
 21241  062B  3001               	movlw	1	; select bank2/3
 21242  062C  0087               	movwf	7
 21243  062D  1C01               	btfss	1,0
 21244  062E  2F2D               	goto	i1l8626
 21245  062F  087A               	movf	_DimmerLights22,w
 21246  0630  3E07               	addlw	7
 21247  0631  0086               	movwf	6
 21248  0632  3001               	movlw	1	; select bank2/3
 21249  0633  0087               	movwf	7
 21250  0634  1001               	bcf	1,0
 21251  0635  087A               	movf	_DimmerLights22,w
 21252  0636  0086               	movwf	6
 21253  0637  3001               	movlw	1	; select bank2/3
 21254  0638  0087               	movwf	7
 21255  0639  1C81               	btfss	1,1
 21256  063A  2F2D               	goto	i1l8626
 21257  063B  3001               	movlw	1
 21258  063C  00F3               	movwf	??_TMR0_ISR
 21259  063D  0A7A               	incf	_DimmerLights22,w
 21260  063E  0086               	movwf	6
 21261  063F  3001               	movlw	1	; select bank2/3
 21262  0640  0087               	movwf	7
 21263  0641  0873               	movf	??_TMR0_ISR,w
 21264  0642  0781               	addwf	1,f
 21265  0643  0A7A               	incf	_DimmerLights22,w
 21266  0644  0086               	movwf	6
 21267  0645  3001               	movlw	1	; select bank2/3
 21268  0646  0087               	movwf	7
 21269  0647  087A               	movf	_DimmerLights22,w
 21270  0648  3E02               	addlw	2
 21271  0649  0084               	movwf	4
 21272  064A  3001               	movlw	1	; select bank2/3
 21273  064B  0085               	movwf	5
 21274  064C  0800               	movf	0,w
 21275  064D  0201               	subwf	1,w
 21276  064E  1C03               	skipc
 21277  064F  2F2D               	goto	i1l8626
 21278  0650  0A7A               	incf	_DimmerLights22,w
 21279  0651  0086               	movwf	6
 21280  0652  3001               	movlw	1	; select bank2/3
 21281  0653  0087               	movwf	7
 21282  0654  0181               	clrf	1
 21283  0655  087A               	movf	_DimmerLights22,w
 21284  0656  0086               	movwf	6
 21285  0657  3001               	movlw	1	; select bank2/3
 21286  0658  0087               	movwf	7
 21287  0659  1D81               	btfss	1,3
 21288  065A  2E91               	goto	i1l8594
 21289  065B  087A               	movf	_DimmerLights22,w
 21290  065C  0086               	movwf	6
 21291  065D  3001               	movlw	1	; select bank2/3
 21292  065E  0087               	movwf	7
 21293  065F  1A01               	btfsc	1,4
 21294  0660  2E78               	goto	i1l8588
 21295  0661  087A               	movf	_DimmerLights22,w
 21296  0662  3E04               	addlw	4
 21297  0663  0086               	movwf	6
 21298  0664  3001               	movlw	1	; select bank2/3
 21299  0665  0087               	movwf	7
 21300  0666  3044               	movlw	68
 21301  0667  0201               	subwf	1,w
 21302  0668  1C03               	skipc
 21303  0669  2E72               	goto	i1l8586
 21304  066A  087A               	movf	_DimmerLights22,w
 21305  066B  3E04               	addlw	4
 21306  066C  0086               	movwf	6
 21307  066D  3001               	movlw	1	; select bank2/3
 21308  066E  0087               	movwf	7
 21309  066F  3001               	movlw	1
 21310  0670  0281               	subwf	1,f
 21311  0671  2F2D               	goto	i1l8626
 21312  0672                     i1l8586:	
 21313  0672  087A               	movf	_DimmerLights22,w
 21314  0673  0086               	movwf	6
 21315  0674  3001               	movlw	1	; select bank2/3
 21316  0675  0087               	movwf	7
 21317  0676  1601               	bsf	1,4
 21318  0677  2F2D               	goto	i1l8626
 21319  0678                     i1l8588:	
 21320  0678  087A               	movf	_DimmerLights22,w
 21321  0679  3E04               	addlw	4
 21322  067A  0086               	movwf	6
 21323  067B  3001               	movlw	1	; select bank2/3
 21324  067C  0087               	movwf	7
 21325  067D  3078               	movlw	120
 21326  067E  0201               	subwf	1,w
 21327  067F  1803               	skipnc
 21328  0680  2E8B               	goto	i1l8592
 21329  0681  3001               	movlw	1
 21330  0682  00F3               	movwf	??_TMR0_ISR
 21331  0683  087A               	movf	_DimmerLights22,w
 21332  0684  3E04               	addlw	4
 21333  0685  0086               	movwf	6
 21334  0686  3001               	movlw	1	; select bank2/3
 21335  0687  0087               	movwf	7
 21336  0688  0873               	movf	??_TMR0_ISR,w
 21337  0689  0781               	addwf	1,f
 21338  068A  2F2D               	goto	i1l8626
 21339  068B                     i1l8592:	
 21340  068B  087A               	movf	_DimmerLights22,w
 21341  068C  0086               	movwf	6
 21342  068D  3001               	movlw	1	; select bank2/3
 21343  068E  0087               	movwf	7
 21344  068F  1201               	bcf	1,4
 21345  0690  2F2D               	goto	i1l8626
 21346  0691                     i1l8594:	
 21347  0691  087A               	movf	_DimmerLights22,w
 21348  0692  0086               	movwf	6
 21349  0693  3001               	movlw	1	; select bank2/3
 21350  0694  0087               	movwf	7
 21351  0695  1D01               	btfss	1,2
 21352  0696  2ED8               	goto	i1l8608
 21353  0697  087A               	movf	_DimmerLights22,w
 21354  0698  3E05               	addlw	5
 21355  0699  0086               	movwf	6
 21356  069A  3001               	movlw	1	; select bank2/3
 21357  069B  0087               	movwf	7
 21358  069C  087A               	movf	_DimmerLights22,w
 21359  069D  3E04               	addlw	4
 21360  069E  0084               	movwf	4
 21361  069F  3001               	movlw	1	; select bank2/3
 21362  06A0  0085               	movwf	5
 21363  06A1  0800               	movf	0,w
 21364  06A2  0201               	subwf	1,w
 21365  06A3  1803               	skipnc
 21366  06A4  2EAD               	goto	i1l8600
 21367  06A5  087A               	movf	_DimmerLights22,w
 21368  06A6  3E04               	addlw	4
 21369  06A7  0086               	movwf	6
 21370  06A8  3001               	movlw	1	; select bank2/3
 21371  06A9  0087               	movwf	7
 21372  06AA  3001               	movlw	1
 21373  06AB  0281               	subwf	1,f
 21374  06AC  2EC4               	goto	i1l8604
 21375  06AD                     i1l8600:	
 21376  06AD  087A               	movf	_DimmerLights22,w
 21377  06AE  3E04               	addlw	4
 21378  06AF  0086               	movwf	6
 21379  06B0  3001               	movlw	1	; select bank2/3
 21380  06B1  0087               	movwf	7
 21381  06B2  087A               	movf	_DimmerLights22,w
 21382  06B3  3E05               	addlw	5
 21383  06B4  0084               	movwf	4
 21384  06B5  3001               	movlw	1	; select bank2/3
 21385  06B6  0085               	movwf	5
 21386  06B7  0800               	movf	0,w
 21387  06B8  0201               	subwf	1,w
 21388  06B9  1803               	skipnc
 21389  06BA  2EC4               	goto	i1l8604
 21390  06BB  3001               	movlw	1
 21391  06BC  00F3               	movwf	??_TMR0_ISR
 21392  06BD  087A               	movf	_DimmerLights22,w
 21393  06BE  3E04               	addlw	4
 21394  06BF  0086               	movwf	6
 21395  06C0  3001               	movlw	1	; select bank2/3
 21396  06C1  0087               	movwf	7
 21397  06C2  0873               	movf	??_TMR0_ISR,w
 21398  06C3  0781               	addwf	1,f
 21399  06C4                     i1l8604:	
 21400  06C4  087A               	movf	_DimmerLights22,w
 21401  06C5  3E05               	addlw	5
 21402  06C6  0086               	movwf	6
 21403  06C7  3001               	movlw	1	; select bank2/3
 21404  06C8  0087               	movwf	7
 21405  06C9  087A               	movf	_DimmerLights22,w
 21406  06CA  3E04               	addlw	4
 21407  06CB  0084               	movwf	4
 21408  06CC  3001               	movlw	1	; select bank2/3
 21409  06CD  0085               	movwf	5
 21410  06CE  0800               	movf	0,w
 21411  06CF  0601               	xorwf	1,w
 21412  06D0  1D03               	skipz
 21413  06D1  2F2D               	goto	i1l8626
 21414  06D2  087A               	movf	_DimmerLights22,w
 21415  06D3  0086               	movwf	6
 21416  06D4  3001               	movlw	1	; select bank2/3
 21417  06D5  0087               	movwf	7
 21418  06D6  1101               	bcf	1,2
 21419  06D7  2EF3               	goto	i1l8614
 21420  06D8                     i1l8608:	
 21421  06D8  087A               	movf	_DimmerLights22,w
 21422  06D9  0086               	movwf	6
 21423  06DA  3001               	movlw	1	; select bank2/3
 21424  06DB  0087               	movwf	7
 21425  06DC  1E81               	btfss	1,5
 21426  06DD  2EF9               	goto	i1l8616
 21427  06DE  087A               	movf	_DimmerLights22,w
 21428  06DF  3E04               	addlw	4
 21429  06E0  0086               	movwf	6
 21430  06E1  3001               	movlw	1	; select bank2/3
 21431  06E2  0087               	movwf	7
 21432  06E3  3001               	movlw	1
 21433  06E4  0281               	subwf	1,f
 21434  06E5  087A               	movf	_DimmerLights22,w
 21435  06E6  3E05               	addlw	5
 21436  06E7  0086               	movwf	6
 21437  06E8  3001               	movlw	1	; select bank2/3
 21438  06E9  0087               	movwf	7
 21439  06EA  087A               	movf	_DimmerLights22,w
 21440  06EB  3E04               	addlw	4
 21441  06EC  0084               	movwf	4
 21442  06ED  3001               	movlw	1	; select bank2/3
 21443  06EE  0085               	movwf	5
 21444  06EF  0800               	movf	0,w
 21445  06F0  0201               	subwf	1,w
 21446  06F1  1C03               	skipc
 21447  06F2  2F2D               	goto	i1l8626
 21448  06F3                     i1l8614:	
 21449  06F3  087A               	movf	_DimmerLights22,w
 21450  06F4  0086               	movwf	6
 21451  06F5  3001               	movlw	1	; select bank2/3
 21452  06F6  0087               	movwf	7
 21453  06F7  1081               	bcf	1,1
 21454  06F8  2F2D               	goto	i1l8626
 21455  06F9                     i1l8616:	
 21456  06F9  3001               	movlw	1
 21457  06FA  00F3               	movwf	??_TMR0_ISR
 21458  06FB  087A               	movf	_DimmerLights22,w
 21459  06FC  3E04               	addlw	4
 21460  06FD  0086               	movwf	6
 21461  06FE  3001               	movlw	1	; select bank2/3
 21462  06FF  0087               	movwf	7
 21463  0700  0873               	movf	??_TMR0_ISR,w
 21464  0701  0781               	addwf	1,f
 21465  0702  087A               	movf	_DimmerLights22,w
 21466  0703  3E04               	addlw	4
 21467  0704  0086               	movwf	6
 21468  0705  3001               	movlw	1	; select bank2/3
 21469  0706  0087               	movwf	7
 21470  0707  087A               	movf	_DimmerLights22,w
 21471  0708  3E06               	addlw	6
 21472  0709  0084               	movwf	4
 21473  070A  3001               	movlw	1	; select bank2/3
 21474  070B  0085               	movwf	5
 21475  070C  0800               	movf	0,w
 21476  070D  0201               	subwf	1,w
 21477  070E  1C03               	skipc
 21478  070F  2F2D               	goto	i1l8626
 21479  0710  087A               	movf	_DimmerLights22,w
 21480  0711  0086               	movwf	6
 21481  0712  3001               	movlw	1	; select bank2/3
 21482  0713  0087               	movwf	7
 21483  0714  1081               	bcf	1,1
 21484  0715  087A               	movf	_DimmerLights22,w
 21485  0716  0086               	movwf	6
 21486  0717  3001               	movlw	1	; select bank2/3
 21487  0718  0087               	movwf	7
 21488  0719  1301               	bcf	1,6
 21489  071A  087A               	movf	_DimmerLights22,w
 21490  071B  3E0C               	addlw	12
 21491  071C  0086               	movwf	6
 21492  071D  3001               	movlw	1	; select bank2/3
 21493  071E  0087               	movwf	7
 21494  071F  1401               	bsf	1,0
 21495  0720  0021               	movlb	1	; select bank1
 21496  0721  0839               	movf	_Dimmer^(0+128),w
 21497  0722  0086               	movwf	6
 21498  0723  0187               	clrf	7
 21499  0724  1401               	bsf	1,0
 21500  0725  0020               	movlb	0	; select bank0
 21501  0726  138E               	bcf	14,7	;volatile
 21502  0727  01F1               	clrf	i1setLoad_StatusOff@command
 21503  0728  0AF1               	incf	i1setLoad_StatusOff@command,f
 21504  0729  3002               	movlw	2
 21505  072A  3199  2105  3184   	fcall	i1_setLoad_StatusOff
 21506  072D                     i1l8626:	
 21507  072D  0020               	movlb	0	; select bank0
 21508  072E  1E0D               	btfss	13,4	;volatile
 21509  072F  2F62               	goto	i1l8634
 21510  0730  3001               	movlw	1
 21511  0731  00F3               	movwf	??_TMR0_ISR
 21512  0732  087A               	movf	_DimmerLights22,w
 21513  0733  3E08               	addlw	8
 21514  0734  0086               	movwf	6
 21515  0735  3001               	movlw	1	; select bank2/3
 21516  0736  0087               	movwf	7
 21517  0737  0873               	movf	??_TMR0_ISR,w
 21518  0738  0781               	addwf	1,f
 21519  0739  087A               	movf	_DimmerLights22,w
 21520  073A  3E04               	addlw	4
 21521  073B  0086               	movwf	6
 21522  073C  3001               	movlw	1	; select bank2/3
 21523  073D  0087               	movwf	7
 21524  073E  0801               	movf	1,w
 21525  073F  00F3               	movwf	??_TMR0_ISR
 21526  0740  01F4               	clrf	??_TMR0_ISR+1
 21527  0741  09F3               	comf	??_TMR0_ISR,f
 21528  0742  09F4               	comf	??_TMR0_ISR+1,f
 21529  0743  0AF3               	incf	??_TMR0_ISR,f
 21530  0744  1903               	skipnz
 21531  0745  0AF4               	incf	??_TMR0_ISR+1,f
 21532  0746  0873               	movf	??_TMR0_ISR,w
 21533  0747  3E78               	addlw	120
 21534  0748  00F5               	movwf	??_TMR0_ISR+2
 21535  0749  3000               	movlw	0
 21536  074A  3D74               	addwfc	??_TMR0_ISR+1,w
 21537  074B  00F6               	movwf	??_TMR0_ISR+3
 21538  074C  087A               	movf	_DimmerLights22,w
 21539  074D  3E08               	addlw	8
 21540  074E  0086               	movwf	6
 21541  074F  3001               	movlw	1	; select bank2/3
 21542  0750  0087               	movwf	7
 21543  0751  0876               	movf	??_TMR0_ISR+3,w
 21544  0752  3A80               	xorlw	128
 21545  0753  3C80               	sublw	128
 21546  0754  1D03               	skipz
 21547  0755  2F58               	goto	u812_25
 21548  0756  0875               	movf	??_TMR0_ISR+2,w
 21549  0757  0201               	subwf	1,w
 21550  0758                     u812_25:	
 21551  0758  1C03               	skipc
 21552  0759  2F62               	goto	i1l8634
 21553  075A  087A               	movf	_DimmerLights22,w
 21554  075B  3E08               	addlw	8
 21555  075C  0086               	movwf	6
 21556  075D  3001               	movlw	1	; select bank2/3
 21557  075E  0087               	movwf	7
 21558  075F  0181               	clrf	1
 21559  0760  0020               	movlb	0	; select bank0
 21560  0761  120D               	bcf	13,4	;volatile
 21561  0762                     i1l8634:	
 21562                           
 21563                           ;MCU_B1.c: 146: Timer0->Count++;
 21564  0762  0021               	movlb	1	; select bank1
 21565  0763  0A6D               	incf	_Timer0^(0+128),w
 21566  0764  0086               	movwf	6
 21567  0765  0187               	clrf	7
 21568  0766  3001               	movlw	1
 21569  0767  0781               	addwf	1,f
 21570  0768  3141               	addfsr 1,1
 21571  0769  1803               	skipnc
 21572  076A  0A81               	incf	1,f
 21573                           
 21574                           ;MCU_B1.c: 147: if(Timer0->Count == 200)
 21575  076B  0A6D               	incf	_Timer0^(0+128),w
 21576  076C  0086               	movwf	6
 21577  076D  0187               	clrf	7
 21578  076E  3F40               	moviw [0]fsr1
 21579  076F  3AC8               	xorlw	200
 21580  0770  1D03               	skipz
 21581  0771  2F74               	goto	u813_25
 21582  0772  3F41               	moviw [1]fsr1
 21583  0773  3A00               	xorlw	0
 21584  0774                     u813_25:	
 21585  0774  1D03               	skipz
 21586  0775  2F81               	goto	i1l1695
 21587                           
 21588                           ;MCU_B1.c: 148: {
 21589                           ;MCU_B1.c: 149: Timer0->Count=0;
 21590  0776  0A6D               	incf	_Timer0^(0+128),w
 21591  0777  0086               	movwf	6
 21592  0778  0187               	clrf	7
 21593  0779  3000               	movlw	0
 21594  077A  3FC0               	movwi [0]fsr1
 21595  077B  3FC1               	movwi [1]fsr1
 21596                           
 21597                           ;MCU_B1.c: 150: TMain->T0_Timerout=1;
 21598  077C  086C               	movf	_TMain^(0+128),w
 21599  077D  0086               	movwf	6
 21600  077E  3001               	movlw	1	; select bank2/3
 21601  077F  0087               	movwf	7
 21602  0780  1481               	bsf	1,1
 21603  0781                     i1l1695:	
 21604                           
 21605                           ;MCU_B1.c: 151: }
 21606                           ;MCU_B1.c: 154: if(Buz->GO)
 21607  0781  0878               	movf	_Buz,w
 21608  0782  0086               	movwf	6
 21609  0783  3001               	movlw	1	; select bank2/3
 21610  0784  0087               	movwf	7
 21611  0785  1C81               	btfss	1,1
 21612  0786  0008               	return
 21613                           
 21614                           ;MCU_B1.c: 155: {
 21615                           ;MCU_B1.c: 156: Buz->Time++;
 21616  0787  0A78               	incf	_Buz,w
 21617  0788  0086               	movwf	6
 21618  0789  3001               	movlw	1	; select bank2/3
 21619  078A  0087               	movwf	7
 21620  078B  3001               	movlw	1
 21621  078C  0781               	addwf	1,f
 21622  078D  3141               	addfsr 1,1
 21623  078E  1803               	skipnc
 21624  078F  0A81               	incf	1,f
 21625  0790  0008               	return
 21626  0791                     __end_of_TMR0_ISR:	
 21627                           
 21628                           	psect	text138
 21629  1905                     __ptext138:	
 21630 ;; *************** function i1_setLoad_StatusOff *****************
 21631 ;; Defined at:
 21632 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21633 ;; Parameters:    Size  Location     Type
 21634 ;;  lights          1    wreg     unsigned char 
 21635 ;;  command         1    0[COMMON] unsigned char 
 21636 ;; Auto vars:     Size  Location     Type
 21637 ;;  lights          1    1[COMMON] unsigned char 
 21638 ;; Return value:  Size  Location     Type
 21639 ;;		None               void
 21640 ;; Registers used:
 21641 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21642 ;; Tracked objects:
 21643 ;;		On entry : 0/0
 21644 ;;		On exit  : 0/0
 21645 ;;		Unchanged: 0/0
 21646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21651 ;;Total ram usage:        2 bytes
 21652 ;; Hardware stack levels used:    1
 21653 ;; This function calls:
 21654 ;;		Nothing
 21655 ;; This function is called by:
 21656 ;;		_TMR0_ISR
 21657 ;; This function uses a non-reentrant model
 21658 ;;
 21659                           
 21660                           
 21661                           ;psect for function i1_setLoad_StatusOff
 21662  1905                     i1_setLoad_StatusOff:	
 21663                           
 21664                           ;incstack = 0
 21665                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21666                           ;i1setLoad_StatusOff@lights stored from wreg
 21667  1905  00F2               	movwf	i1setLoad_StatusOff@lights
 21668                           
 21669                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 21670  1906  0020               	movlb	0	; select bank0
 21671  1907  086E               	movf	_Load,w
 21672  1908  3E46               	addlw	70
 21673  1909  0086               	movwf	6
 21674  190A  3002               	movlw	2	; select bank4/5
 21675  190B  0087               	movwf	7
 21676  190C  0871               	movf	i1setLoad_StatusOff@command,w
 21677  190D  1081               	bcf	1,1
 21678  190E  1D03               	skipz
 21679  190F  1481               	bsf	1,1
 21680                           
 21681                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 21682  1910  086E               	movf	_Load,w
 21683  1911  3E42               	addlw	66
 21684  1912  0086               	movwf	6
 21685  1913  3002               	movlw	2	; select bank4/5
 21686  1914  0087               	movwf	7
 21687  1915  3002               	movlw	2
 21688  1916  0281               	subwf	1,f
 21689                           
 21690                           ;OverLoad_B1.c: 326: if(lights == 1)
 21691  1917  0872               	movf	i1setLoad_StatusOff@lights,w
 21692  1918  3A01               	xorlw	1
 21693  1919  1D03               	skipz
 21694  191A  2921               	goto	i1l8006
 21695                           
 21696                           ;OverLoad_B1.c: 327: {
 21697                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 21698  191B  086E               	movf	_Load,w
 21699  191C  3E43               	addlw	67
 21700  191D  0086               	movwf	6
 21701  191E  3002               	movlw	2	; select bank4/5
 21702  191F  0087               	movwf	7
 21703  1920  0181               	clrf	1
 21704  1921                     i1l8006:	
 21705                           
 21706                           ;OverLoad_B1.c: 329: }
 21707                           ;OverLoad_B1.c: 330: if(lights == 2)
 21708  1921  0872               	movf	i1setLoad_StatusOff@lights,w
 21709  1922  3A02               	xorlw	2
 21710  1923  1D03               	skipz
 21711  1924  292B               	goto	i1l8010
 21712                           
 21713                           ;OverLoad_B1.c: 331: {
 21714                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 21715  1925  086E               	movf	_Load,w
 21716  1926  3E44               	addlw	68
 21717  1927  0086               	movwf	6
 21718  1928  3002               	movlw	2	; select bank4/5
 21719  1929  0087               	movwf	7
 21720  192A  0181               	clrf	1
 21721  192B                     i1l8010:	
 21722                           
 21723                           ;OverLoad_B1.c: 333: }
 21724                           ;OverLoad_B1.c: 334: if(lights == 3)
 21725  192B  0872               	movf	i1setLoad_StatusOff@lights,w
 21726  192C  3A03               	xorlw	3
 21727  192D  1D03               	skipz
 21728  192E  0008               	return
 21729                           
 21730                           ;OverLoad_B1.c: 335: {
 21731                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 21732  192F  086E               	movf	_Load,w
 21733  1930  3E45               	addlw	69
 21734  1931  0086               	movwf	6
 21735  1932  3002               	movlw	2	; select bank4/5
 21736  1933  0087               	movwf	7
 21737  1934  0181               	clrf	1
 21738  1935  0008               	return
 21739  1936                     __end_ofi1_setLoad_StatusOff:	
 21740                           
 21741                           	psect	text139
 21742  1800                     __ptext139:	
 21743 ;; *************** function _IOC_ISR *****************
 21744 ;; Defined at:
 21745 ;;		line 338 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21746 ;; Parameters:    Size  Location     Type
 21747 ;;		None
 21748 ;; Auto vars:     Size  Location     Type
 21749 ;;		None
 21750 ;; Return value:  Size  Location     Type
 21751 ;;		None               void
 21752 ;; Registers used:
 21753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21754 ;; Tracked objects:
 21755 ;;		On entry : 0/0
 21756 ;;		On exit  : 0/0
 21757 ;;		Unchanged: 0/0
 21758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21761 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21762 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21763 ;;Total ram usage:        1 bytes
 21764 ;; Hardware stack levels used:    1
 21765 ;; Hardware stack levels required when called:    1
 21766 ;; This function calls:
 21767 ;;		_setDimmerReClock
 21768 ;; This function is called by:
 21769 ;;		_ISR
 21770 ;; This function uses a non-reentrant model
 21771 ;;
 21772                           
 21773                           
 21774                           ;psect for function _IOC_ISR
 21775  1800                     _IOC_ISR:	
 21776                           
 21777                           ;MCU_B1.c: 340: if(IOCIE && IOCBF2)
 21778                           
 21779                           ;incstack = 0
 21780                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21781  1800  1D8B               	btfss	11,3	;volatile
 21782  1801  0008               	return
 21783  1802  0027               	movlb	7	; select bank7
 21784  1803  1D16               	btfss	22,2	;volatile
 21785  1804  0008               	return
 21786                           
 21787                           ;MCU_B1.c: 341: {
 21788                           ;MCU_B1.c: 342: IOCBF2=0;
 21789  1805  1116               	bcf	22,2	;volatile
 21790                           
 21791                           ;MCU_B1.c: 343: IOCIF=0;
 21792  1806  100B               	bcf	11,0	;volatile
 21793                           
 21794                           ;MCU_B1.c: 344: if(TMain->PowerON)
 21795  1807  0021               	movlb	1	; select bank1
 21796  1808  086C               	movf	_TMain^(0+128),w
 21797  1809  0086               	movwf	6
 21798  180A  3001               	movlw	1	; select bank2/3
 21799  180B  0087               	movwf	7
 21800  180C  1C01               	btfss	1,0
 21801  180D  0008               	return
 21802                           
 21803                           ;MCU_B1.c: 345: {
 21804                           ;MCU_B1.c: 349: setDimmerReClock();
 21805  180E  31A6  261A  3198   	fcall	_setDimmerReClock
 21806                           
 21807                           ;MCU_B1.c: 350: if(RB2)
 21808  1811  0020               	movlb	0	; select bank0
 21809  1812  1D0D               	btfss	13,2	;volatile
 21810  1813  281B               	goto	i1l8464
 21811                           
 21812                           ;MCU_B1.c: 351: {
 21813                           ;MCU_B1.c: 352: Dimmer->Correction=0;
 21814  1814  0021               	movlb	1	; select bank1
 21815  1815  0839               	movf	_Dimmer^(0+128),w
 21816  1816  3E02               	addlw	2
 21817  1817  0086               	movwf	6
 21818  1818  0187               	clrf	7
 21819  1819  0181               	clrf	1
 21820                           
 21821                           ;MCU_B1.c: 353: }
 21822  181A  0008               	return
 21823  181B                     i1l8464:	
 21824                           
 21825                           ;MCU_B1.c: 354: else
 21826                           ;MCU_B1.c: 355: {
 21827                           ;MCU_B1.c: 356: Dimmer->Correction=8;
 21828  181B  3008               	movlw	8
 21829  181C  00F1               	movwf	??_IOC_ISR
 21830  181D  0021               	movlb	1	; select bank1
 21831  181E  0839               	movf	_Dimmer^(0+128),w
 21832  181F  3E02               	addlw	2
 21833  1820  0086               	movwf	6
 21834  1821  0187               	clrf	7
 21835  1822  0871               	movf	??_IOC_ISR,w
 21836  1823  0081               	movwf	1
 21837  1824  0008               	return
 21838  1825                     __end_of_IOC_ISR:	
 21839                           
 21840                           	psect	text140
 21841  261A                     __ptext140:	
 21842 ;; *************** function _setDimmerReClock *****************
 21843 ;; Defined at:
 21844 ;;		line 164 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21845 ;; Parameters:    Size  Location     Type
 21846 ;;		None
 21847 ;; Auto vars:     Size  Location     Type
 21848 ;;		None
 21849 ;; Return value:  Size  Location     Type
 21850 ;;		None               void
 21851 ;; Registers used:
 21852 ;;		wreg, fsr1l, fsr1h
 21853 ;; Tracked objects:
 21854 ;;		On entry : 0/0
 21855 ;;		On exit  : 0/0
 21856 ;;		Unchanged: 0/0
 21857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21862 ;;Total ram usage:        0 bytes
 21863 ;; Hardware stack levels used:    1
 21864 ;; This function calls:
 21865 ;;		Nothing
 21866 ;; This function is called by:
 21867 ;;		_IOC_ISR
 21868 ;; This function uses a non-reentrant model
 21869 ;;
 21870                           
 21871                           
 21872                           ;psect for function _setDimmerReClock
 21873  261A                     _setDimmerReClock:	
 21874                           
 21875                           ;MCU_B1.c: 166: TMR0=255;
 21876                           
 21877                           ;incstack = 0
 21878                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21879  261A  30FF               	movlw	255
 21880  261B  0020               	movlb	0	; select bank0
 21881  261C  0095               	movwf	21	;volatile
 21882                           
 21883                           ;MCU_B1.c: 171: if(!DimmerLights11->GO)
 21884  261D  0879               	movf	_DimmerLights11,w
 21885  261E  0086               	movwf	6
 21886  261F  3001               	movlw	1	; select bank2/3
 21887  2620  0087               	movwf	7
 21888  2621  1801               	btfsc	1,0
 21889  2622  2E28               	goto	i1l1700
 21890                           
 21891                           ;MCU_B1.c: 172: {
 21892                           ;MCU_B1.c: 173: DimmerLights11->GO=1;
 21893  2623  0879               	movf	_DimmerLights11,w
 21894  2624  0086               	movwf	6
 21895  2625  3001               	movlw	1	; select bank2/3
 21896  2626  0087               	movwf	7
 21897  2627  1401               	bsf	1,0
 21898  2628                     i1l1700:	
 21899                           
 21900                           ;MCU_B1.c: 174: }
 21901                           ;MCU_B1.c: 198: if(!DimmerLights22->GO)
 21902  2628  087A               	movf	_DimmerLights22,w
 21903  2629  0086               	movwf	6
 21904  262A  3001               	movlw	1	; select bank2/3
 21905  262B  0087               	movwf	7
 21906  262C  1801               	btfsc	1,0
 21907  262D  0008               	return
 21908                           
 21909                           ;MCU_B1.c: 199: {
 21910                           ;MCU_B1.c: 200: DimmerLights22->GO=1;
 21911  262E  087A               	movf	_DimmerLights22,w
 21912  262F  0086               	movwf	6
 21913  2630  3001               	movlw	1	; select bank2/3
 21914  2631  0087               	movwf	7
 21915  2632  1401               	bsf	1,0
 21916  2633  0008               	return
 21917  2634                     __end_of_setDimmerReClock:	
 21918                           
 21919                           	psect	text141
 21920  237D                     __ptext141:	
 21921 ;; *************** function _INT_ISR *****************
 21922 ;; Defined at:
 21923 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21924 ;; Parameters:    Size  Location     Type
 21925 ;;		None
 21926 ;; Auto vars:     Size  Location     Type
 21927 ;;		None
 21928 ;; Return value:  Size  Location     Type
 21929 ;;		None               void
 21930 ;; Registers used:
 21931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21932 ;; Tracked objects:
 21933 ;;		On entry : 0/0
 21934 ;;		On exit  : 0/0
 21935 ;;		Unchanged: 0/0
 21936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21941 ;;Total ram usage:        0 bytes
 21942 ;; Hardware stack levels used:    1
 21943 ;; Hardware stack levels required when called:    2
 21944 ;; This function calls:
 21945 ;;		_setRF_ReceiveGO
 21946 ;; This function is called by:
 21947 ;;		_ISR
 21948 ;; This function uses a non-reentrant model
 21949 ;;
 21950                           
 21951                           
 21952                           ;psect for function _INT_ISR
 21953  237D                     _INT_ISR:	
 21954                           
 21955                           ;MCU_B1.c: 291: if(INTE && INTF)
 21956                           
 21957                           ;incstack = 0
 21958                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21959  237D  1E0B               	btfss	11,4	;volatile
 21960  237E  0008               	return
 21961  237F  1C8B               	btfss	11,1	;volatile
 21962  2380  0008               	return
 21963                           
 21964                           ;MCU_B1.c: 292: {
 21965                           ;MCU_B1.c: 293: INTF=0;
 21966  2381  108B               	bcf	11,1	;volatile
 21967                           
 21968                           ;MCU_B1.c: 294: INTE=0;
 21969  2382  120B               	bcf	11,4	;volatile
 21970                           
 21971                           ;MCU_B1.c: 295: setRF_ReceiveGO(1,1);
 21972  2383  01F3               	clrf	setRF_ReceiveGO@command
 21973  2384  0AF3               	incf	setRF_ReceiveGO@command,f
 21974  2385  3001               	movlw	1
 21975  2386  31A3  2371         	fcall	_setRF_ReceiveGO
 21976  2388  0008               	return
 21977  2389                     __end_of_INT_ISR:	
 21978                           
 21979                           	psect	text142
 21980  2371                     __ptext142:	
 21981 ;; *************** function _setRF_ReceiveGO *****************
 21982 ;; Defined at:
 21983 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21984 ;; Parameters:    Size  Location     Type
 21985 ;;  rf              1    wreg     unsigned char 
 21986 ;;  command         1    2[COMMON] unsigned char 
 21987 ;; Auto vars:     Size  Location     Type
 21988 ;;  rf              1    3[COMMON] unsigned char 
 21989 ;; Return value:  Size  Location     Type
 21990 ;;		None               void
 21991 ;; Registers used:
 21992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21993 ;; Tracked objects:
 21994 ;;		On entry : 0/0
 21995 ;;		On exit  : 0/0
 21996 ;;		Unchanged: 0/0
 21997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21998 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22002 ;;Total ram usage:        2 bytes
 22003 ;; Hardware stack levels used:    1
 22004 ;; Hardware stack levels required when called:    1
 22005 ;; This function calls:
 22006 ;;		i1_RfPointSelect
 22007 ;; This function is called by:
 22008 ;;		_INT_ISR
 22009 ;; This function uses a non-reentrant model
 22010 ;;
 22011                           
 22012                           
 22013                           ;psect for function _setRF_ReceiveGO
 22014  2371                     _setRF_ReceiveGO:	
 22015                           
 22016                           ;incstack = 0
 22017                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 22018                           ;setRF_ReceiveGO@rf stored from wreg
 22019  2371  00F4               	movwf	setRF_ReceiveGO@rf
 22020                           
 22021                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 22022  2372  0874               	movf	setRF_ReceiveGO@rf,w
 22023  2373  31A3  230F         	fcall	i1_RfPointSelect
 22024                           
 22025                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 22026  2375  087C               	movf	_RF,w
 22027  2376  0086               	movwf	6
 22028  2377  0187               	clrf	7
 22029  2378  0873               	movf	setRF_ReceiveGO@command,w
 22030  2379  1081               	bcf	1,1
 22031  237A  1D03               	skipz
 22032  237B  1481               	bsf	1,1
 22033  237C  0008               	return
 22034  237D                     __end_of_setRF_ReceiveGO:	
 22035                           
 22036                           	psect	text143
 22037  230F                     __ptext143:	
 22038 ;; *************** function i1_RfPointSelect *****************
 22039 ;; Defined at:
 22040 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 22041 ;; Parameters:    Size  Location     Type
 22042 ;;  rf              1    wreg     unsigned char 
 22043 ;; Auto vars:     Size  Location     Type
 22044 ;;  rf              1    1[COMMON] unsigned char 
 22045 ;; Return value:  Size  Location     Type
 22046 ;;		None               void
 22047 ;; Registers used:
 22048 ;;		wreg
 22049 ;; Tracked objects:
 22050 ;;		On entry : 0/0
 22051 ;;		On exit  : 0/0
 22052 ;;		Unchanged: 0/0
 22053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22058 ;;Total ram usage:        2 bytes
 22059 ;; Hardware stack levels used:    1
 22060 ;; This function calls:
 22061 ;;		Nothing
 22062 ;; This function is called by:
 22063 ;;		_setRF_ReceiveGO
 22064 ;; This function uses a non-reentrant model
 22065 ;;
 22066                           
 22067                           
 22068                           ;psect for function i1_RfPointSelect
 22069  230F                     i1_RfPointSelect:	
 22070                           
 22071                           ;incstack = 0
 22072                           ; Regs used in i1_RfPointSelect: [wreg]
 22073                           ;i1RfPointSelect@rf stored from wreg
 22074  230F  00F2               	movwf	i1RfPointSelect@rf
 22075                           
 22076                           ;RF_Control_B1.c: 10: if(rf == 1)
 22077  2310  0872               	movf	i1RfPointSelect@rf,w
 22078  2311  3A01               	xorlw	1
 22079  2312  1D03               	skipz
 22080  2313  0008               	return
 22081                           
 22082                           ;RF_Control_B1.c: 11: {
 22083                           ;RF_Control_B1.c: 12: RF=&RF1;
 22084  2314  30E6               	movlw	_RF1& (0+255)
 22085  2315  00F1               	movwf	??i1_RfPointSelect
 22086  2316  0871               	movf	??i1_RfPointSelect,w
 22087  2317  00FC               	movwf	_RF
 22088  2318  0008               	return
 22089  2319                     __end_ofi1_RfPointSelect:	
 22090  007E                     btemp	set	126	;btemp
 22091  007E                     pic14e$flags	set	126
 22092  007E                     wtemp	set	126
 22093  007E                     wtemp0	set	126
 22094  0080                     wtemp1	set	128
 22095  0082                     wtemp2	set	130
 22096  0084                     wtemp3	set	132
 22097  0086                     wtemp4	set	134
 22098  0088                     wtemp5	set	136
 22099  007F                     wtemp6	set	127
 22100  007E                     ttemp	set	126
 22101  007E                     ttemp0	set	126
 22102  0081                     ttemp1	set	129
 22103  0084                     ttemp2	set	132
 22104  0087                     ttemp3	set	135
 22105  007F                     ttemp4	set	127
 22106  007E                     ltemp	set	126
 22107  007E                     ltemp0	set	126
 22108  0082                     ltemp1	set	130
 22109  0086                     ltemp2	set	134
 22110  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         288
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      78
    BANK2            80      0      80
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK3[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109685
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
                        _MainT_Clock
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8083
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8083
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8083
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   22360
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   22360
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9767
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9103
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1360
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1070
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1070
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29449
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29449
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28445
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26828
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10861
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6572
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6572
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6572
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Clock                                          2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2102
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8099
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6603
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4818
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2813
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1167
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1167
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10769
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10690
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    7025
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1791
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1039
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10308
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10308
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Clock
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     198      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     198      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Sep 25 15:23:14 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007B  
                                     _RD 0CA8                                       _RF 007C  
                __end_of_CC2500_WriteREG 25E8                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 2571  
             _getDimmerLights_StatusFlag 255B                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1E6B                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1967                     _setDimmerLights_Main 1377  
                           ___ftadd@sign 0048                                      l312 1C6D  
                                    l313 1C72                                      l403 2658  
                                    l323 1ECE                                      l307 1C43  
                                    l340 18F9                                      l316 1C75  
                                    l343 18FF                                      l327 1EDF  
                                    l409 278E                                      l373 25C2  
                                    l374 25C4                                      l385 25D7  
                                    l706 18D3                                      l397 242F  
                                    l922 1F66                                      l875 24C2  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0015                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0168  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E6                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 0156  
                                    _Sw2 015F                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 25CF  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2319  
                        __end_of_ADC_Set 22CE                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 162E                    _setDimmerLights_ERROR 1D5D  
                  _setDimmerLights_AdjRF 2766                    _setDimmerLights_AdjGo 2487  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 2457  
                                   ?_ISR 0071                          _PowerFault_Main 228A  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1825  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2170 1B9B                 ?_DimmerLightsPointSelect 0071  
                                   l1374 24DC                                     l3420 1EB5  
                                   l3253 26AC                          __end_of_IOC_Set 23D3  
                                   l3414 1E9E                                     l2470 0D7A  
                                   l1728 257B                                     l1754 1991  
                                   l2474 1A56                                     l3443 0B25  
                                   l2716 1046                                     l2734 2550  
                                   l6220 1E85                                     l6300 0B17  
                                   l2748 1ADA                                     l2932 1000  
                                   l1949 1BDE                                     l6230 1EAB  
                                   l6222 1E8A                                     l6214 1E74  
                                   l6310 0B49                                     l6302 0B21  
                                   l6320 0B64                                     l6218 1E7B  
                                   l6330 0877                                     l6306 0B37  
                                   l6402 098D                                     l6228 1EA3  
                                   l6260 0AAE                                     l6350 08CE  
                                   l6422 1415                                     l6270 0AC4  
                                   l6406 0995                                     l6502 18CB  
                                   l8032 17BD                                     l8040 17EB  
                                   l6248 270B                                     l6336 088D  
                                   l6440 1445                                     l6264 0AB5  
                                   l9000 1562                                     l6450 1469  
                                   l6442 1453                                     l7058 1C55  
                                   l6290 0AFB                                     l6282 0ADE  
                                   l8044 17F2                                     l6452 146C  
                                   l6532 2739                                     l6292 0B00  
                                   l6372 0920                                     l8038 17E5  
                                   l6358 08E7                                     l6550 24E9  
                                   l9030 1F59                                     l6294 0B04  
                                   l6390 0971                                     l6456 147A  
                                   l6448 1460                                     l6528 272E  
                                   l9032 1F5E                                     l6288 0AF1  
                                   l9026 1F46                                     l6394 0979  
                                   l6378 0936                                     l6490 18B9  
                                   l6650 1E44                                     l9122 161C  
                                   l9114 160A                                     l6652 1E51  
                                   l9108 15EE                                     l6478 2593  
                                   l6494 18BF                                     l6486 18B3  
                                   l6646 1E3E                                     l9126 1625  
                                   l9118 1613                                     l9216 1975  
                                   l8256 24D4                                     l6904 1AC8  
                                   l6656 1E5D                                     l7562 1AA9  
                                   l9154 1EF1                                     l6746 19D7  
                                   l6498 18C5                                     l9180 279F  
                                   l9500 13B7                                     l9156 1F09  
                                   l9404 1173                                     l9340 07AB  
                                   l9260 1B92                                     l9182 27AA  
                                   l7558 1AA2                                     l6782 2696  
                                   l9192 1C0D                                     l6784 269C  
                                   l9168 1F22                                     l9360 07ED  
                                   l9336 079B                                     l8802 1245  
                                   l9506 13C9                                     l9370 1B3B  
                                   l9284 1D22                                     l8806 1263  
                                   l6798 256B                                     l8902 0850  
                                   l9518 13F5                                     l9710 0D2D  
                                   l9374 1B4B                                     l8920 19BE  
                                   l9296 1D38                                     l8834 1FF0  
                                   l8906 0856                                     l9722 0D69  
                                   l9714 0D4C                                     l9650 0E34  
                                   l9626 0DC5                                     l8916 19B3  
                                   l8852 1952                                     l9484 1386  
                                   l9724 0D6F                                     l9804 0EBC  
                                   l9660 0E62                                     l9628 0DCE  
                                   l8782 26A6                                     l9590 10D8  
                                   l7990 1A26                                     l7982 1A08  
                                   l9742 1497                                     l9830 0F01  
                                   l9814 0ECC                                     l9806 0EC2  
                                   l9662 0E68                                     l8872 0818  
                                   l8856 195C                                     l9488 1393  
                                   l9584 10BF                                     l7984 1A14  
                                   l9840 0F33                                     l9816 0ED4  
                                   _CFGS 0CAE                                     l8882 0828  
                                   l8890 0834                                     l9594 111F  
                                   l7994 1A2F                                     l9690 0CC4  
                                   l9770 14DA                                     l9746 149E  
                                   l9666 0E73                                     l8868 0812  
                                   l8876 081E                                     l8948 1696  
                                   l9756 14BB                                     l8886 082E  
                                   l9854 0F78                                     l9936 0BF5  
                                   l9688 0CBA                                     l9784 1500  
                                   l9768 14D6                                     l9864 0FAB  
                                   l8898 084A                                     l8986 1528  
                                   l8996 154C                                     l9994 16E3  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 2389  
                                   _LATC 010E                                     u4215 1EA6  
                                   u4245 1EBC                                     u4175 1E80  
                                   u4425 0B05                                     u4195 1E99  
                                   _PEIE 005E                                     u4525 089F  
                                   u4365 0ADF                                     u4605 0942  
                                   _INTE 005C                                     _INTF 0059  
                                   u4535 08AF                                     u4455 0B18  
                                   u4615 0952                                     u4545 08CF  
                                   u4555 08DE                                     u4715 141C  
                                   u4395 0AF2                                     u4635 097A  
                                   u4565 08E8                                     u7045 1A0B  
                                   u4645 0980                                     u4745 1446  
                                   u7065 1A15                                     u7155 177E  
                                   u7075 1A1F                                     u4675 0996  
                                   u7085 1A27                                     u4685 099C  
                                   u4775 1461                                     u8305 26AD  
                                   u8315 26B2                                     u8370 1F9F  
                                   u8610 230D                                     u8375 1F9D  
                                   u8865 2794                                     _LWLO 0CAD  
                                   _RFSW 00BC                                     _TMR0 0015  
                        __end_of_INT_Set 22AD                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 014A  
                                   _Load 006E                                     _Temp 007D  
                                   _main 1198                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 228A                      __end_of_DlyOff_Main 12FA  
                        __end_of_RF_Main 22A7                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 261A                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1A36                      DelayTimejudge@value 0022  
                          _RfPointSelect 232F               __end_of_setRFSW_AdjControl 1AF0  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 010E  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 23B9  
                                  l10000 1714                                    l10004 171C  
                                  l10200 0354                                    l10016 1753  
                                  l10114 0101                                    l10212 037D  
                                  l10108 00D3                                    l10028 1090  
                                  l10206 036A                                    l10134 01B2  
                                  l10128 0196                                    l10136 01CA  
                                  l10064 1371                                    l10056 1345  
                                  l10162 0268                                    l10156 0250  
                                  l10092 0086                                    l10078 1CBD  
                                  l10174 029F                                    l10182 02D7  
                                  l10280 11BF                                    l10284 11D5  
                  ?_setDimmerLights_Main 0071                      __end_of_MainT_Clock 24DE  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 2545  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0B7C                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0909                                    u10015 16FE  
                                  u10115 1B21                                    u10135 1314  
                                  u10055 173F                                    u10305 01E2  
                                  u10145 135B                          __end_of___ftmul 09BD  
                                  u10085 107F                                    u10255 014D  
                                  u10095 10A8                                    u10185 1CA4  
                        __end_of___fttol 1483             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1A36  
                 _setDimmerLights_Switch 2437            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E9                                    _RFSW2 00EA  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0071  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 00EC                            setRF_Learn@rf 0023  
                                  _MainT 12FA                                    _Load1 02A0  
                          __CFG_WRT$HALF 0000                                    _Temp1 013C  
                       __end_of_TMR0_ISR 0791             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 23E0                                    _getAD 2571  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1F95  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 2467              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 24B8                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1F95  
            __size_of_Flash_Memory_Write 0031                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 1DB4                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 2366  
                      ??_setPercentValue 0059                             __end_of_main 120A  
                    ?_setRF_DimmerLights 005D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 16C2  
                   _setSw_Initialization 22ED               __size_of_setLoad_StatusOff 0031  
                                 ??_main 006C                            ___fttol@sign1 0053  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 159B  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 228D                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 24CB                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 2477                     __end_of_getTemp_Safe 22C7  
                      i1RfPointSelect@rf 0072                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 1281  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0071  
                      ?_getPowerFault_AD 0071                           setRF_Enable@rf 0023  
                       __end_of___awtoft 2722                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1ECC                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 2447                                   i1l1700 2628  
                                 i1l1695 0781                                   i1l8010 192B  
                                 i1l8006 1921                                   i1l8600 06AD  
                                 i1l8520 0523                                   i1l8512 0501  
                                 i1l8506 04E8                                   i1l8514 0507  
                                 i1l8604 06C4                                   i1l8524 053A  
                                 i1l8508 04EE                                   i1l8614 06F3  
                                 i1l8534 0569                                   i1l8464 181B  
                                 i1l8616 06F9                                   i1l8608 06D8  
                                 i1l8536 056F                                   i1l8528 054E  
                                 i1l8626 072D                                   i1l8634 0762  
                                 i1l8546 05A3                                   i1l8554 05D8  
                                 i1l8592 068B                                   i1l8568 0628  
                                 i1l8488 049E                                   i1l8586 0672  
                                 i1l8594 0691                                   i1l8588 0678  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                                 u812_25 0758                                   u813_25 0774  
                     __size_of_Load_Main 03ED                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 2601  
                                 u776_25 0482                                   u793_25 05CE  
                                 u795_25 060C                       DelayTime_1us@count 0020  
                             _VarProduct 01A0                    _Dimmer_Initialization 22B9  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 251B  
                                 _Dimmer 00B9                                   _DlySw1 00CD  
                                 _DlySw2 00D2              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 25B6                      __end_of_Buzzer_Main 1800  
                                 _Memory 00EB                                   _Timer0 00ED  
     __end_of_setDimmerLights_TriggerAdj 24A7               _setDimmerLights_TriggerAdj 2497  
                            _MainT_Clock 24CB            setDimmerLights_Switch@command 0022  
                                 ___wmul 26A3                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 230F  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 0802                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 120A                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 23C6         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 24F2                          ?_setLoad_Enable 0071  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0022  
                         _setTemp_Enable 2350                          _RfSWPointSelect 2545  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1000  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1E0F  
       __end_of_CC2500_registers_address 202F     __end_of_setPowerFault_Initialization 2487  
  __size_of_setPowerFault_Initialization 0010             _setPowerFault_Initialization 2477  
                __end_of__initialization 0055              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 1377  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 26E0  
                          __end_of_getAD 2587                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 23A1  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0065  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 0446                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 2634                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                   __end_of_setTemp_Enable 235B  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0023                           _DimmerLights11 0079  
                         _DimmerLights22 007A                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 228D                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                            _Buzzer_Main 1758                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 2293                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 22D5                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 22E5  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 2319                      i1_setLoad_StatusOff 1905  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 1198                      _CC2500_WriteCommand 2427  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 16C2                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 22C7  
              _PowerFault_Initialization 2287                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 104D             __end_of_setRF_Initialization 22D5  
                  __size_of_getTemp_Safe 0007                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1AB0                  __end_of_RfSWPointSelect 255B  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0071  
                                _IOC_ISR 1800                          ?_setTemp_Enable 0071  
                                _IOC_Set 23C6                     __size_of_setLog_Code 0048  
                                _INT_ISR 237D                                  _INT_Set 22A7  
                   ?_CC2500_WriteCommand 0071                        _Flash_Memory_Main 1C80  
                      _Flash_Memory_Read 25E8                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0071  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 235B  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 22A3                       ?_Flash_Memory_Main 0071  
                     ?_Flash_Memory_Read 0071          __end_of_setControl_Lights_Table 162E  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 0791  
                        _setPercentValue 1CC5                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00E3             __end_of_CC2500_FrequencyCabr 2395  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00DB  
                                _VarLED2 00DF                        __end_of_getRxData 1D5D  
             __end_of_setPowerFault_Main 0D82                 _CC2500_registers_address 2000  
                         RF_RxDisable@rf 0024                    ??_Temp_Initialization 0021  
        __end_of_setDimmerLights_Trigger 2457                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 22C0  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 2447  
                                ___ftadd 0A86                           ??_setSw_Enable 0022  
                                ___ftdiv 0860                          __size_of___wmul 001E  
                                ___ftmul 0909                                  ___fttol 13FC  
                    __end_of_Switch_Main 22FD                                  ___lwdiv 19FF  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 104D  
                                __ptext2 1AF0                                  __ptext3 16C2  
                                __ptext4 2571                                  __ptext5 2290  
                                __ptext6 0D82                                  __ptext7 1B73  
                                __ptext8 228D                                  __ptext9 2366  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0072  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1CC5  
              __end_of_Flash_Memory_Read 2601                               _setRF_Main 1483  
                          _DelayOff_Main 22DD                        _DimmerLights_Main 2345  
                      __end_of_setINT_GO 230F           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 232F  
                      ??_setRF_ReceiveGO 0074               __end_of_CC2500_ClearRXFIFO 2297  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 229B  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0071  
                     ?_DimmerLights_Main 0071                           _LedPointSelect 2722  
                    _DelayOffPointSelect 2587                                  clrloop0 22B4  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 23ED  
                   end_of_initialization 0055                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 233A                        _CC2500_InitSetREG 27D6  
                          _DelayTime_1us 2789                        __end_of_setTxData 0A86  
             __end_of_Flash_Memory_Write 1998                                  init_ram 22AD  
                     ?_CC2500_InitSetREG 0071                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 22AE  
                             _setSw_Main 0EA5                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 264F                              ?_getPF_Safe 0071  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 24A7                            _CC2500_Enable 0380  
                       ?i1_RfPointSelect 0071                       ?_CC2500_ReadStatus 0071  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 0014  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 1ECC  
                           ?_MainT_Clock 0071                            _CC2500_TxData 1C3C  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 184F  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0041            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 10B9  
                _DimmerLights_Exceptions 1F30                              ?_getLoad_AD 0071  
                           __pstringtext 2000                      _Flash_Memory_Unlock 22FD  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1998         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 2350                       _Mcu_Initialization 259E  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4797 0067                          _setSw_Main$4798 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 2744  
                __end_of_Sw_DimmerOnFunc 0800                  __end_of_setPercentValue 1D0B  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 2800  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1A70  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1BF8  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 266A  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 1BF8  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 261A  
                   _setRF_Initialization 22CE                              _Switch_Main 22F5  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 24B8                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 2506                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0042                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 26C1                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 034B          __size_of_setOverTemp_Exceptions 0042  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0085  
                         __end_of_setLED 0860                           __end_of_setBuz 1281  
                          _setLoad_Count 2530          _getDimmerLights_StatusFlag$1852 0022  
                   _CC2500_FrequencyCabr 2389                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 150B                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 19CA                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 264F                                _Load_Main 0059  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 26E0  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA5  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 2686                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D7  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 2427                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 233A                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C4                                _Temp_Main 2290  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C0  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 229B               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 19FF                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4441 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0094  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1B73                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012E                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002A  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 2766  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00EB  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                             ?_Temp_Main 0071                      __size_of_setRF_Main 0088  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0071                   _setTemp_Initialization 2366  
                       _getPowerFault_AD 1AF0        __size_of_setPowerFault_Exceptions 003A  
    __end_of_Flash_Memory_Initialization 0C74              _Flash_Memory_Initialization 0B7C  
              ?_setPowerFault_Exceptions 0071                                __ptext100 22DD  
                              __ptext101 1281                                __ptext110 2700  
                              __ptext102 09BD                                __ptext111 1E6B  
                              __ptext103 232F                                __ptext120 2324  
                              __ptext112 2409                                __ptext104 2418  
                              __ptext121 2587                                __ptext113 2545  
                              __ptext105 24DE                                __ptext130 2297  
                              __ptext122 2506                                __ptext114 2447  
                              __ptext106 1F95                                __ptext131 2293  
                              __ptext123 229B                                __ptext115 2437  
                              __ptext107 1CC5                                __ptext140 261A  
                              __ptext132 2427                                __ptext124 18D5  
                              __ptext116 24B8                                __ptext108 13FC  
                              __ptext141 237D                                __ptext133 25B6  
                              __ptext125 27D6                                __ptext117 120A  
                              __ptext109 0860                                 ?___ftadd 003E  
                              __ptext142 2371                                __ptext134 1758  
                              __ptext126 26C1                                __ptext118 26A3  
                              __ptext143 230F                                __ptext135 2319  
                              __ptext127 25CF                                __ptext119 22D5  
                              __ptext128 2389                                __ptext137 0446  
                              __ptext129 2789                                __ptext138 1905  
                              __ptext139 1800                                _getRxData 1D0B  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 159B                          _setRF_ReceiveGO 2371  
                   __size_of_MainT_Clock 0013                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 2324                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 1005                       _setPowerFault_Main 0C74  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 015B            __end_of_setDimmerLights_ERROR 1DB4  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 2789  
          __end_of_setDimmerLights_AdjGo 2497                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 2467  
                         __size_of_MainT 007D                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 2066                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1825  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 24DE                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 2306                      __end_of_setLED_Main 1AB0  
               __end_of_setLoad_StatusOn 19CA                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 2290                        _CC2500_rfSettings 202F  
                         ___wmul@product 0024                                 _LED_Main 23AD  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 22B3                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 09BD      __end_of_DimmerLights_Initialization 2530  
            _DimmerLights_Initialization 251B                       _CC2500_ClearRXFIFO 2293  
                     _CC2500_ClearTXFIFO 2297           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 2409                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1967                               ?_getRxData 0071  
                               _TMR0_ISR 0446                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1936                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 23D3                         _Sw_DimmerAdjFunc 1B31  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 27D6  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 2437  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0071  
                       _Sw_DimmerOffFunc 1127                    __size_of_setTemp_Main 0123  
           __end_of_MainT_Initialization 2506                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 22ED                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 23A1  
                         ?_SwPointSelect 0071                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 104D                    _DlyOff_Initialization 2324  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 205E                         __size_of_RF_Main 0004  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 1758  
                  _Switch_Initialization 23E0                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 2409  
                   __size_of_Buzzer_Main 00A8                       __end_of_getTemp_AD 10B9  
                             ?_setTxData 0071                             ?_Switch_Main 0071  
                       _CC2500_WriteByte 25B6                                 _VarTMain 01C0  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 237D                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 0063  
                    _Load_Initialization 23B9                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 187A  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 184F  
                               _TxStatus 0386                             _setTemp_Main 0D82  
                     _setLoad_Exceptions 1BB5                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0071                         __size_of___ftdiv 00A9  
                           _setSw_Enable 266A                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000A                                 ___awtoft 2700  
                       ??_LedPointSelect 0020                                 ___ftpack 1E6B  
                           _setSw_Status 2418                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1A70                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 2000  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 22F5  
                               __ptext11 0EA5                                 __ptext20 1000  
                               __ptext12 23FB                                 __ptext21 22A3  
                               __ptext13 0791                                 __ptext30 19CA  
                               __ptext22 1483                                 __ptext14 1127  
                               __ptext31 2766                                 __ptext23 1D0B  
                               __ptext15 1B31                                 __ptext40 2686  
                               __ptext32 1DB4                                 __ptext24 1005  
                               __ptext16 2497                                 __ptext41 229F  
                               __ptext33 0909                                 __ptext25 159B  
                               __ptext17 2487                                 __ptext50 23D3  
                               __ptext42 22CE                                 __ptext34 0A86  
                               __ptext26 150B                                 __ptext18 23E0  
                               __ptext51 2601                                 __ptext43 228A  
                               __ptext35 27AF                                 __ptext27 1E0F  
                               __ptext19 22ED                                 __ptext60 0059  
                               __ptext52 23C6                                 __ptext44 0C74  
                               __ptext36 1C3C                                 __ptext28 18A7  
                               __ptext61 1BB5                                 __ptext53 22A7  
                               __ptext45 1A36                                 __ptext37 1ECC  
                               __ptext29 1AB0                                 __ptext70 22E5  
                               __ptext62 266A                                 __ptext54 22C7  
                               __ptext46 235B                                 __ptext38 23ED  
                               __ptext71 19FF                                 __ptext63 1825  
                               __ptext55 24F2                                 __ptext47 2287  
                               __ptext39 264F                                 __ptext80 2395  
                               __ptext72 23B9                                 __ptext64 2306  
                               __ptext56 24CB                                 __ptext48 2477  
                               __ptext81 0B7C                                 __ptext73 2744  
                               __ptext65 1F30                                 __ptext57 12FA  
                               __ptext49 259E                                 __ptext90 1998  
                               __ptext82 1967                                 __ptext74 23AD  
                               __ptext66 184F                                 __ptext58 2350  
                               __ptext91 2530                                 __ptext83 22FD  
                               __ptext75 1A70                                 __ptext67 1D5D  
                               __ptext59 2467                                 __ptext92 0802  
                               __ptext84 25E8                                 __ptext76 23A1  
                               __ptext68 2457                                 __ptext93 2722  
                               __ptext85 2345                                 __ptext77 24A7  
                               __ptext69 22C0                                 __ptext94 2634  
                               __ptext86 1377                                 __ptext78 1C80  
                               __ptext95 233A                                 __ptext87 1BF8  
                               __ptext79 10B9                                 __ptext96 255B  
                               __ptext88 1936                                 __ptext97 251B  
                               __ptext89 162E                                 __ptext98 187A  
                               __ptext99 22B9                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 2418  
          __end_of_Dimmer_Initialization 22C0             __end_of_setDimmerLights_Main 13FC  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0072  
                            _setRF_Learn 23FB                 __end_of_CC2500_SIDLEMode 229F  
                         _setRF_RxStatus 23ED               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 259E               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 2634                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 001A                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 2686                       _CC2500_InitPATable 26C1  
    __size_of_getDimmerLights_StatusFlag 0016            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 150B              __size_of_Mcu_Initialization 0018  
                   _CC2500_patable_vaule 205E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 18D5                       __end_of_setLoad_GO 2345  
            __end_of_Flash_Memory_Modify 1127                        ??_getPercentValue 0059  
                            _setLog_Code 1005                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 2306                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 25CF                       __end_of_setSw_Main 1000  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                ?_setOverTemp_Exceptions 0071                           _DelayTimejudge 18A7  
                          ?_getLoad_Safe 0071                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1B31                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0071                   __end_of_setRF_RxStatus 23FB  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 18A7  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 187A              __end_of_setDimmerLights_Adj 1C3C  
                ?_setTemp_Initialization 0071                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 24F2                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 229F                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0071  
                   _Flash_Memory_Erasing 2395                       ?_RF_Initialization 0071  
                           MainT_Clock@i 0021                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 22DD                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 22E5                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1E0F  
       __size_of_setControl_Lights_Table 0093                        _setLoad_StatusOff 1936  
                 __end_of_DelayTimejudge 18D5           __end_of_setOverTemp_Exceptions 1BB5  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 27AF                 __end_of_Sw_DimmerAdjFunc 1B73  
                __end_of_CC2500_ReadByte 26A3             __end_of_setSw_Initialization 22F5  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 27AF               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 23AD         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 2371  
               __size_of_Sw_DimmerOnFunc 006F                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 22A3  
               __end_of_Sw_DimmerOffFunc 1198                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1F30                    __end_of_CC2500_TxData 1C80  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 2744  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1905  
                          ??_MainT_Clock 0020  
