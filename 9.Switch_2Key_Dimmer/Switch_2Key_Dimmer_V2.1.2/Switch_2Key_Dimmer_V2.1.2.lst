

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Sep 11 14:43:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	psect	text143,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943                           
  1944                           	psect	idataBANK3
  1945  1866                     __pidataBANK3:	
  1946                           
  1947                           ;initializer for _VarProduct
  1948  1866  3463               	retlw	99
  1949  1867  3402               	retlw	2
  1950  1868  3400               	retlw	0
  1951  1869  3400               	retlw	0
  1952  186A  3400               	retlw	0
  1953  186B  3400               	retlw	0
  1954  186C  3400               	retlw	0
  1955  186D  3400               	retlw	0
  1956  186E  3400               	retlw	0
  1957  186F  3400               	retlw	0
  1958  1870  3400               	retlw	0
  1959  1871  3400               	retlw	0
  1960  1872  34FF               	retlw	255
  1961  1873  34FF               	retlw	255
  1962  1874  34FF               	retlw	255
  1963  1875  3400               	retlw	0
  1964  1876  3400               	retlw	0
  1965  1877  3400               	retlw	0
  1966  1878  3400               	retlw	0
  1967  1879  3400               	retlw	0
  1968  187A  3402               	retlw	2
  1969  187B  3400               	retlw	0
  1970  187C  3400               	retlw	0
  1971  187D  3400               	retlw	0
  1972  187E  3400               	retlw	0
  1973  187F  3400               	retlw	0
  1974  1880  3400               	retlw	0
  1975  1881  3400               	retlw	0
  1976  1882  3400               	retlw	0
  1977  1883  3400               	retlw	0
  1978  1884  3400               	retlw	0
  1979  1885  3400               	retlw	0
  1980                           
  1981                           	psect	stringtext
  1982  1800                     __pstringtext:	
  1983  1800                     _CC2500_registers_address:	
  1984  1800  3403               	retlw	3
  1985  1801  3416               	retlw	22
  1986  1802  3417               	retlw	23
  1987  1803  341E               	retlw	30
  1988  1804  341F               	retlw	31
  1989  1805  3420               	retlw	32
  1990  1806  342A               	retlw	42
  1991  1807  342B               	retlw	43
  1992  1808  340B               	retlw	11
  1993  1809  340C               	retlw	12
  1994  180A  340D               	retlw	13
  1995  180B  340E               	retlw	14
  1996  180C  340F               	retlw	15
  1997  180D  3410               	retlw	16
  1998  180E  3411               	retlw	17
  1999  180F  3412               	retlw	18
  2000  1810  3413               	retlw	19
  2001  1811  3414               	retlw	20
  2002  1812  340A               	retlw	10
  2003  1813  3415               	retlw	21
  2004  1814  3421               	retlw	33
  2005  1815  3422               	retlw	34
  2006  1816  3418               	retlw	24
  2007  1817  3419               	retlw	25
  2008  1818  341A               	retlw	26
  2009  1819  341B               	retlw	27
  2010  181A  341C               	retlw	28
  2011  181B  341D               	retlw	29
  2012  181C  3423               	retlw	35
  2013  181D  3424               	retlw	36
  2014  181E  3425               	retlw	37
  2015  181F  3426               	retlw	38
  2016  1820  3429               	retlw	41
  2017  1821  342C               	retlw	44
  2018  1822  342D               	retlw	45
  2019  1823  342E               	retlw	46
  2020  1824  3400               	retlw	0
  2021  1825  3401               	retlw	1
  2022  1826  3402               	retlw	2
  2023  1827  3407               	retlw	7
  2024  1828  3408               	retlw	8
  2025  1829  3409               	retlw	9
  2026  182A  3406               	retlw	6
  2027  182B  3404               	retlw	4
  2028  182C  3405               	retlw	5
  2029  182D  3427               	retlw	39
  2030  182E  3428               	retlw	40
  2031  182F                     __end_of_CC2500_registers_address:	
  2032  182F                     _CC2500_rfSettings:	
  2033  182F  3407               	retlw	7
  2034  1830  3407               	retlw	7
  2035  1831  3430               	retlw	48
  2036  1832  3487               	retlw	135
  2037  1833  346B               	retlw	107
  2038  1834  34F8               	retlw	248
  2039  1835  347F               	retlw	127
  2040  1836  343F               	retlw	63
  2041  1837  3409               	retlw	9
  2042  1838  3400               	retlw	0
  2043  1839  345C               	retlw	92
  2044  183A  34A7               	retlw	167
  2045  183B  3462               	retlw	98
  2046  183C  3486               	retlw	134
  2047  183D  3483               	retlw	131
  2048  183E  3403               	retlw	3
  2049  183F  3422               	retlw	34
  2050  1840  34F8               	retlw	248
  2051  1841  3400               	retlw	0
  2052  1842  3444               	retlw	68
  2053  1843  34B6               	retlw	182
  2054  1844  3410               	retlw	16
  2055  1845  3418               	retlw	24
  2056  1846  341D               	retlw	29
  2057  1847  341C               	retlw	28
  2058  1848  34C7               	retlw	199
  2059  1849  3400               	retlw	0
  2060  184A  34B2               	retlw	178
  2061  184B  34EA               	retlw	234
  2062  184C  340A               	retlw	10
  2063  184D  3400               	retlw	0
  2064  184E  3411               	retlw	17
  2065  184F  3459               	retlw	89
  2066  1850  3488               	retlw	136
  2067  1851  3431               	retlw	49
  2068  1852  340B               	retlw	11
  2069  1853  342F               	retlw	47
  2070  1854  342E               	retlw	46
  2071  1855  3406               	retlw	6
  2072  1856  3404               	retlw	4
  2073  1857  3405               	retlw	5
  2074  1858  3400               	retlw	0
  2075  1859  3430               	retlw	48
  2076  185A  34D3               	retlw	211
  2077  185B  3491               	retlw	145
  2078  185C  3441               	retlw	65
  2079  185D  3400               	retlw	0
  2080  185E                     __end_of_CC2500_rfSettings:	
  2081  185E                     _CC2500_patable_vaule:	
  2082  185E  34FE               	retlw	254
  2083  185F  34FE               	retlw	254
  2084  1860  34FE               	retlw	254
  2085  1861  34FE               	retlw	254
  2086  1862  34FE               	retlw	254
  2087  1863  34FE               	retlw	254
  2088  1864  34FE               	retlw	254
  2089  1865  34FE               	retlw	254
  2090  1866                     __end_of_CC2500_patable_vaule:	
  2091                           
  2092                           	psect	nvBANK0
  2093  006F                     __pnvBANK0:	
  2094  006F                     _Product:	
  2095  006F                     	ds	1
  2096                           
  2097                           	psect	nvBANK1
  2098  00E8                     __pnvBANK1:	
  2099  00E8                     _Memory:	
  2100  00E8                     	ds	1
  2101  00E9                     _TMain:	
  2102  00E9                     	ds	1
  2103  00EA                     _Timer0:	
  2104  00EA                     	ds	1
  2105  000C                     _PORTA	set	12
  2106  000D                     _PORTB	set	13
  2107  000E                     _PORTC	set	14
  2108  0015                     _TMR0	set	21
  2109  005F                     _GIE	set	95
  2110  005C                     _INTE	set	92
  2111  0059                     _INTF	set	89
  2112  005B                     _IOCIE	set	91
  2113  0058                     _IOCIF	set	88
  2114  005E                     _PEIE	set	94
  2115  0060                     _RA0	set	96
  2116  0063                     _RA3	set	99
  2117  0064                     _RA4	set	100
  2118  0066                     _RA6	set	102
  2119  0067                     _RA7	set	103
  2120  0068                     _RB0	set	104
  2121  0069                     _RB1	set	105
  2122  006A                     _RB2	set	106
  2123  006B                     _RB3	set	107
  2124  006C                     _RB4	set	108
  2125  006D                     _RB5	set	109
  2126  0070                     _RC0	set	112
  2127  0071                     _RC1	set	113
  2128  0072                     _RC2	set	114
  2129  0074                     _RC4	set	116
  2130  0075                     _RC5	set	117
  2131  0077                     _RC7	set	119
  2132  005D                     _TMR0IE	set	93
  2133  005A                     _TMR0IF	set	90
  2134  009D                     _ADCON0	set	157
  2135  009E                     _ADCON1	set	158
  2136  009C                     _ADRESH	set	156
  2137  009B                     _ADRESL	set	155
  2138  0095                     _OPTION_REG	set	149
  2139  0099                     _OSCCON	set	153
  2140  008C                     _TRISA	set	140
  2141  008D                     _TRISB	set	141
  2142  008E                     _TRISC	set	142
  2143  04E9                     _GO_nDONE	set	1257
  2144  0117                     _FVRCON	set	279
  2145  010C                     _LATA	set	268
  2146  010D                     _LATB	set	269
  2147  010E                     _LATC	set	270
  2148  018C                     _ANSELA	set	396
  2149  018D                     _ANSELB	set	397
  2150  018E                     _ANSELC	set	398
  2151  0192                     _PMADRH	set	402
  2152  0191                     _PMADRL	set	401
  2153  0196                     _PMCON2	set	406
  2154  0194                     _PMDATH	set	404
  2155  0193                     _PMDATL	set	403
  2156  0CAE                     _CFGS	set	3246
  2157  0CAC                     _FREE	set	3244
  2158  0CAD                     _LWLO	set	3245
  2159  0CA8                     _RD	set	3240
  2160  0CA9                     _WR	set	3241
  2161  0CAA                     _WREN	set	3242
  2162  1068                     _WPUB0	set	4200
  2163  1069                     _WPUB1	set	4201
  2164  106A                     _WPUB2	set	4202
  2165  0396                     _IOCBF	set	918
  2166  0395                     _IOCBN	set	917
  2167  0394                     _IOCBP	set	916
  2168  1CB2                     _IOCBF2	set	7346
  2169                           
  2170                           ; #config settings
  2171  0000                     
  2172                           	psect	cinit
  2173  0018                     start_initialization:	
  2174  0018                     __initialization:	
  2175                           
  2176                           ; Clear objects allocated to BITCOMMON
  2177  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2178                           
  2179                           ; Clear objects allocated to COMMON
  2180  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2181  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2182  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2183  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2184  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2185  001E  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  2186                           
  2187                           ; Clear objects allocated to BANK0
  2188  001F  01EC               	clrf	__pbssBANK0& (0+127)
  2189  0020  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2190  0021  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2191                           
  2192                           ; Clear objects allocated to BANK1
  2193  0022  30A0               	movlw	low __pbssBANK1
  2194  0023  0084               	movwf	4
  2195  0024  3000               	movlw	high __pbssBANK1
  2196  0025  0085               	movwf	5
  2197  0026  3048               	movlw	72
  2198  0027  31A3  23BD  3180   	fcall	clear_ram0
  2199                           
  2200                           ; Clear objects allocated to BANK2
  2201  002A  3020               	movlw	low __pbssBANK2
  2202  002B  0084               	movwf	4
  2203  002C  3001               	movlw	high __pbssBANK2
  2204  002D  0085               	movwf	5
  2205  002E  304E               	movlw	78
  2206  002F  31A3  23BD  3180   	fcall	clear_ram0
  2207                           
  2208                           ; Clear objects allocated to BANK3
  2209  0032  30C0               	movlw	low __pbssBANK3
  2210  0033  0084               	movwf	4
  2211  0034  3001               	movlw	high __pbssBANK3
  2212  0035  0085               	movwf	5
  2213  0036  3010               	movlw	16
  2214  0037  31A3  23BD  3180   	fcall	clear_ram0
  2215                           
  2216                           ; Clear objects allocated to BANK4
  2217  003A  3020               	movlw	low __pbssBANK4
  2218  003B  0084               	movwf	4
  2219  003C  3002               	movlw	high __pbssBANK4
  2220  003D  0085               	movwf	5
  2221  003E  3025               	movlw	37
  2222  003F  31A3  23BD  3180   	fcall	clear_ram0
  2223                           
  2224                           ; Clear objects allocated to BANK5
  2225  0042  30A0               	movlw	low __pbssBANK5
  2226  0043  0084               	movwf	4
  2227  0044  3002               	movlw	high __pbssBANK5
  2228  0045  0085               	movwf	5
  2229  0046  3047               	movlw	71
  2230  0047  31A3  23BD  3180   	fcall	clear_ram0
  2231                           
  2232                           ; Initialize objects allocated to BANK3
  2233  004A  3066               	movlw	low __pidataBANK3
  2234  004B  0084               	movwf	4
  2235  004C  3098               	movlw	(high __pidataBANK3)| (0+128)
  2236  004D  0085               	movwf	5
  2237  004E  30A0               	movlw	low __pdataBANK3
  2238  004F  0086               	movwf	6
  2239  0050  3001               	movlw	high __pdataBANK3
  2240  0051  0087               	movwf	7
  2241  0052  3020               	movlw	32
  2242  0053  31A3  23B7         	fcall	init_ram
  2243  0055                     end_of_initialization:	
  2244                           ;End of C runtime variable initialization code
  2245                           
  2246  0055                     __end_of__initialization:	
  2247  0055  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2248  0056  0020               	movlb	0
  2249  0057  3193  2B05         	ljmp	_main	;jump to C main() function
  2250                           
  2251                           	psect	bitbssCOMMON
  2252  0380                     __pbitbssCOMMON:	
  2253  0380                     _CC2500_Enable:	
  2254  0380                     	ds	1
  2255  0381                     _Receive_GO:	
  2256  0381                     	ds	1
  2257  0382                     _Receive_OK:	
  2258  0382                     	ds	1
  2259  0383                     _RxStatus:	
  2260  0383                     	ds	1
  2261  0384                     _Transceive_GO:	
  2262  0384                     	ds	1
  2263  0385                     _Transceive_OK:	
  2264  0385                     	ds	1
  2265  0386                     _TxStatus:	
  2266  0386                     	ds	1
  2267                           
  2268                           	psect	bssCOMMON
  2269  0078                     __pbssCOMMON:	
  2270  0078                     _Buz:	
  2271  0078                     	ds	1
  2272  0079                     _DimmerLights11:	
  2273  0079                     	ds	1
  2274  007A                     _DimmerLights22:	
  2275  007A                     	ds	1
  2276  007B                     _PF:	
  2277  007B                     	ds	1
  2278  007C                     _RF:	
  2279  007C                     	ds	1
  2280  007D                     _Temp:	
  2281  007D                     	ds	1
  2282                           
  2283                           	psect	bssBANK0
  2284  006C                     __pbssBANK0:	
  2285  006C                     _DimmerLights:	
  2286  006C                     	ds	1
  2287  006D                     _Sw:	
  2288  006D                     	ds	1
  2289  006E                     _Load:	
  2290  006E                     	ds	1
  2291                           
  2292                           	psect	bssBANK1
  2293  00A0                     __pbssBANK1:	
  2294  00A0                     _RF_Data:	
  2295  00A0                     	ds	21
  2296  00B5                     _RF_Count:	
  2297  00B5                     	ds	2
  2298  00B7                     _CRC:	
  2299  00B7                     	ds	1
  2300  00B8                     _DelayOff:	
  2301  00B8                     	ds	1
  2302  00B9                     _Dimmer:	
  2303  00B9                     	ds	1
  2304  00BA                     _DimmerLightsIntr:	
  2305  00BA                     	ds	1
  2306  00BB                     _LED:	
  2307  00BB                     	ds	1
  2308  00BC                     _RFSW:	
  2309  00BC                     	ds	1
  2310  00BD                     _RSSI:	
  2311  00BD                     	ds	1
  2312  00BE                     _Rx_Length:	
  2313  00BE                     	ds	1
  2314  00BF                     _SPI0Buffer:	
  2315  00BF                     	ds	1
  2316  00C0                     _Tx_Length:	
  2317  00C0                     	ds	1
  2318  00C1                     _r_address:	
  2319  00C1                     	ds	1
  2320  00C2                     _r_data:	
  2321  00C2                     	ds	1
  2322  00C3                     _s_data:	
  2323  00C3                     	ds	1
  2324  00C4                     _VarTimer0:	
  2325  00C4                     	ds	7
  2326  00CB                     _DlySw1:	
  2327  00CB                     	ds	5
  2328  00D0                     _DlySw2:	
  2329  00D0                     	ds	5
  2330  00D5                     _VarErrLED:	
  2331  00D5                     	ds	4
  2332  00D9                     _VarLED1:	
  2333  00D9                     	ds	4
  2334  00DD                     _VarLED2:	
  2335  00DD                     	ds	4
  2336  00E1                     _Dimmer1:	
  2337  00E1                     	ds	3
  2338  00E4                     _RF1:	
  2339  00E4                     	ds	2
  2340  00E6                     _RFSW1:	
  2341  00E6                     	ds	1
  2342  00E7                     _RFSW2:	
  2343  00E7                     	ds	1
  2344                           
  2345                           	psect	bssBANK2
  2346  0120                     __pbssBANK2:	
  2347  0120                     _Temp1:	
  2348  0120                     	ds	14
  2349  012E                     _DimmerLights1:	
  2350  012E                     	ds	13
  2351  013B                     _DimmerLights2:	
  2352  013B                     	ds	13
  2353  0148                     _Buz1:	
  2354  0148                     	ds	12
  2355  0154                     _Sw1:	
  2356  0154                     	ds	9
  2357  015D                     _Sw2:	
  2358  015D                     	ds	9
  2359  0166                     _PF1:	
  2360  0166                     	ds	8
  2361                           
  2362                           	psect	bssBANK3
  2363  01C0                     __pbssBANK3:	
  2364  01C0                     _VarTMain:	
  2365  01C0                     	ds	16
  2366                           
  2367                           	psect	dataBANK3
  2368  01A0                     __pdataBANK3:	
  2369  01A0                     _VarProduct:	
  2370  01A0                     	ds	32
  2371                           
  2372                           	psect	bssBANK4
  2373  0220                     __pbssBANK4:	
  2374  0220                     _VarMemory:	
  2375  0220                     	ds	37
  2376                           
  2377                           	psect	bssBANK5
  2378  02A0                     __pbssBANK5:	
  2379  02A0                     _Load1:	
  2380  02A0                     	ds	71
  2381                           
  2382                           	psect	clrtext
  2383  23BD                     clear_ram0:	
  2384                           ;	Called with FSR0 containing the base address, and
  2385                           ;	WREG with the size to clear
  2386                           
  2387  23BD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2388  23BE                     clrloop0:	
  2389  23BE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2390  23BF  3101               	addfsr 0,1
  2391  23C0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2392  23C1  2BBE               	goto	clrloop0	;have we reached the end yet?
  2393  23C2  3400               	retlw	0	;all done for this memory range, return
  2394                           
  2395                           	psect	inittext
  2396  23B7                     init_ram:	
  2397  23B7  00FE               	movwf	126
  2398  23B8                     initloop:	
  2399  23B8  0012               	moviw fsr0++
  2400  23B9  001E               	movwi fsr1++
  2401  23BA  0BFE               	decfsz	126,f
  2402  23BB  2BB8               	goto	initloop
  2403  23BC  3400               	retlw	0
  2404                           
  2405                           	psect	cstackCOMMON
  2406  0071                     __pcstackCOMMON:	
  2407  0071                     ?_CC2500_WriteByte:	
  2408  0071                     ?_CC2500_WriteCommand:	
  2409                           ; 0 bytes @ 0x0
  2410                           
  2411  0071                     ?_CC2500_ReadStatus:	
  2412                           ; 0 bytes @ 0x0
  2413                           
  2414  0071                     ?_CC2500_ReadByte:	
  2415                           ; 0 bytes @ 0x0
  2416                           
  2417  0071                     ?_CC2500_PowerRST:	
  2418                           ; 0 bytes @ 0x0
  2419                           
  2420  0071                     ?_CC2500_InitSetREG:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0071                     ?_CC2500_InitPATable:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0071                     ?_CC2500_ClearTXFIFO:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0071                     ?_CC2500_ClearRXFIFO:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0071                     ?_CC2500_FrequencyCabr:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0071                     ?_CC2500_SIDLEMode:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0071                     ?_DlyOff_Initialization:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0071                     ?_DlyOff_Main:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0071                     ?_setTxData:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0071                     ?_setDimmerLights_Initialization:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0071                     ?_Dimmer_Initialization:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0071                     ?_setLoad_GO:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0071                     ?_setDimmerLights_Main:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0071                     ?_setDimmerLights_ERROR:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0071                     ?_setLoad_Count:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0071                     ?_setLED_Initialization:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0071                     ?_setLED_Main:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0071                     ?_MainT_Initialization:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0071                     ?_Mcu_Initialization:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0071                     ?_Flash_Memory_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0071                     ?_Temp_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0071                     ?_Load_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0071                     ?_PowerFault_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0071                     ?_Switch_Initialization:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0071                     ?_RF_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0071                     ?_getLoad_AD:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0071                     ?_getTemp_AD:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0071                     ?_getPowerFault_AD:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0071                     ?_MainT:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0071                     ?_Flash_Memory_Main:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0071                     ?_Temp_Main:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0071                     ?_Load_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0071                     ?_PowerFault_Main:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0071                     ?_Switch_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0071                     ?_RF_Main:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0071                     ?_setTemp_Enable:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0071                     ?_setLoad_Enable:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0071                     ?_setSw_Enable:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0071                     ?_IO_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0071                     ?_TMR0_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0071                     ?_ADC_Set:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0071                     ?_INT_Set:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0071                     ?_IOC_Set:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0071                     ?_IOC_ISR:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0071                     ??_IOC_ISR:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0071                     ?_TMR0_ISR:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0071                     ?_INT_ISR:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0071                     ?_Flash_Memory_Write:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0071                     ?_Flash_Memory_Modify:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0071                     ?_setLoad_AH_AL_Restore:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0071                     ?_setLoad_Exceptions:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0071                     ?_setTemp_Initialization:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0071                     ?_setTemp_Main:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0071                     ?_setOverTemp_Exceptions:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0071                     ?_setPowerFault_Initialization:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0071                     ?_setPowerFault_Main:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0071                     ?_setPowerFault_Exceptions:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0071                     ?_setRF_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0071                     ?_setRF_Main:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0071                     ?_RF_RxDisable:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0071                     ?_getRxData:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0071                     ?_setLog_Code:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0071                     ?_setControl_Lights_Table:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0071                     ?_setRFSW_Control:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0071                     ?_setRFSW_AdjControl:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0071                     ?_setRF_DimmerValue:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0071                     ?_setSw_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0071                     ?_setSw_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0071                     ?_Sw_DimmerOnFunc:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0071                     ?_Sw_DimmerAdjFunc:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0071                     ?_Sw_DimmerOffFunc:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0071                     ?_Buzzer_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0071                     ?_Buzzer_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0071                     ?_CC2500_TxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0071                     ?_CC2500_RxData:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0071                     ?_CC2500_PowerOnInitial:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0071                     ?_DelayOffPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0071                     ?_DelayOff_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0071                     ?_DelayOff_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0071                     ?_DimmerLightsPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0071                     ?_DimmerLights_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0071                     ?_DimmerLights_Close:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0071                     ?_DimmerLights_Main:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0071                     ?_DimmerLights_Exceptions:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0071                     ?_setDimmerLights_AdjRF:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0071                     ?_LedPointSelect:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0071                     ?_LED_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0071                     ?_LED_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0071                     ?_main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0071                     ?_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0071                     ?_setDimmerReClock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0071                     ??_setDimmerReClock:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0071                     ?_setINT_GO:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0071                     ?_Flash_Memory_Unlock:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0071                     ?_Flash_Memory_Erasing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0071                     ?_RfPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0071                     ?_RfSWPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0071                     ?_TouchPower:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0071                     ?_SwPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0071                     ?i1_setLoad_StatusOff:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0071                     ?i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0071                     ??i1_RfPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0071                     ?_DelayTimejudge:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0071                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0071                     ?_getDimmerLights_StatusFlag:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0071                     ?_getDimmerLights_Trigger:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0071                     ?_setPercentValue:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0071                     ?_Flash_Memory_Read:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0071                     ?_getTemp_Safe:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0071                     ?_getPF_Safe:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0071                     ?_getLoad_Safe:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0071                     setRF_Initialization@rf:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0071                     i1setLoad_StatusOff@command:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x0
  2761  0071                     	ds	1
  2762  0072                     ??i1_setLoad_StatusOff:	
  2763  0072                     i1setLoad_StatusOff@lights:	
  2764                           ; 0 bytes @ 0x1
  2765                           
  2766  0072                     i1RfPointSelect@rf:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769                           
  2770                           ; 1 bytes @ 0x1
  2771  0072                     	ds	1
  2772  0073                     ??_TMR0_ISR:	
  2773  0073                     ?_setRF_ReceiveGO:	
  2774                           ; 0 bytes @ 0x2
  2775                           
  2776  0073                     setRF_ReceiveGO@command:	
  2777                           ; 0 bytes @ 0x2
  2778                           
  2779                           
  2780                           ; 1 bytes @ 0x2
  2781  0073                     	ds	1
  2782  0074                     ??_setRF_ReceiveGO:	
  2783  0074                     setRF_ReceiveGO@rf:	
  2784                           ; 0 bytes @ 0x3
  2785                           
  2786                           
  2787                           ; 1 bytes @ 0x3
  2788  0074                     	ds	1
  2789  0075                     ??_INT_ISR:	
  2790                           
  2791                           ; 0 bytes @ 0x4
  2792  0075                     	ds	2
  2793  0077                     ??_ISR:	
  2794                           
  2795                           ; 0 bytes @ 0x6
  2796  0077                     	ds	1
  2797                           
  2798                           	psect	cstackBANK0
  2799  0020                     __pcstackBANK0:	
  2800  0020                     ??_CC2500_WriteByte:	
  2801  0020                     ??_CC2500_ReadByte:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ?_DelayTime_1us:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ?_setRF_DimmerLights:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_DelayTimejudge:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_Dimmer_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_getDimmerLights_StatusFlag:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_setLoad_GO:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_getDimmerLights_Trigger:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ?_setLoad_StatusOff:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_setLoad_Count:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ?_setLoad_StatusOn:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_MainT_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_setTemp_Enable:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_setLoad_Enable:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_IO_Set:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_TMR0_Set:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_ADC_Set:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_INT_Set:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_IOC_Set:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_Flash_Memory_Read:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_Flash_Memory_Write:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_setLoad_AH_AL_Restore:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_getTemp_Safe:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_getPF_Safe:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_setTemp_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setPowerFault_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_setRF_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Buzzer_Initialization:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_Buzzer_Main:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_DelayOffPointSelect:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_DimmerLightsPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_LedPointSelect:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_setINT_GO:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Unlock:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_Flash_Memory_Erasing:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_getLoad_Safe:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_RfPointSelect:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_RfSWPointSelect:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_TouchPower:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_SwPointSelect:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ?_getAD:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ?___wmul:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     ?___lwdiv:	
  2928                           ; 2 bytes @ 0x0
  2929                           
  2930  0020                     ?___ftpack:	
  2931                           ; 2 bytes @ 0x0
  2932                           
  2933  0020                     getDimmerLights_StatusFlag@Status:	
  2934                           ; 3 bytes @ 0x0
  2935                           
  2936  0020                     getDimmerLights_Trigger@Status:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0020                     setINT_GO@command:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0020                     getAD@adcon1:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0020                     setLoad_Enable@command:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0020                     setLoad_GO@command:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     setLoad_StatusOn@command:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     setLoad_StatusOff@command:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0020                     setTemp_Enable@command:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0020                     setRF_DimmerLights@on:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0020                     DelayTime_1us@count:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0020                     ___wmul@multiplier:	
  2967                           ; 2 bytes @ 0x0
  2968                           
  2969  0020                     ___lwdiv@divisor:	
  2970                           ; 2 bytes @ 0x0
  2971                           
  2972  0020                     ___ftpack@arg:	
  2973                           ; 2 bytes @ 0x0
  2974                           
  2975                           
  2976                           ; 3 bytes @ 0x0
  2977  0020                     	ds	1
  2978  0021                     ??_setRF_DimmerLights:	
  2979  0021                     ??_setLoad_StatusOff:	
  2980                           ; 0 bytes @ 0x1
  2981                           
  2982  0021                     ??_setLoad_StatusOn:	
  2983                           ; 0 bytes @ 0x1
  2984                           
  2985  0021                     ??_Mcu_Initialization:	
  2986                           ; 0 bytes @ 0x1
  2987                           
  2988  0021                     ??_Temp_Initialization:	
  2989                           ; 0 bytes @ 0x1
  2990                           
  2991  0021                     ??_PowerFault_Initialization:	
  2992                           ; 0 bytes @ 0x1
  2993                           
  2994  0021                     ??_RF_Initialization:	
  2995                           ; 0 bytes @ 0x1
  2996                           
  2997  0021                     ??_DimmerLights_Close:	
  2998                           ; 0 bytes @ 0x1
  2999                           
  3000  0021                     CC2500_WriteByte@loop_a:	
  3001                           ; 0 bytes @ 0x1
  3002                           
  3003  0021                     CC2500_ReadByte@loop_b:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0021                     DelayOffPointSelect@sw:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0021                     DelayTimejudge@i:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0021                     DimmerLightsPointSelect@lights:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0021                     LedPointSelect@led:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0021                     Flash_Memory_Read@i:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021  0021                     Flash_Memory_Write@i:	
  3022                           ; 1 bytes @ 0x1
  3023                           
  3024  0021                     setLoad_Count@command:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0021                     setLoad_StatusOn@lights:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0021                     setLoad_StatusOff@lights:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033  0021                     setLoad_AH_AL_Restore@i:	
  3034                           ; 1 bytes @ 0x1
  3035                           
  3036  0021                     RfPointSelect@rf:	
  3037                           ; 1 bytes @ 0x1
  3038                           
  3039  0021                     RfSWPointSelect@sw:	
  3040                           ; 1 bytes @ 0x1
  3041                           
  3042  0021                     SwPointSelect@sw:	
  3043                           ; 1 bytes @ 0x1
  3044                           
  3045                           
  3046                           ; 1 bytes @ 0x1
  3047  0021                     	ds	1
  3048  0022                     ??_CC2500_WriteCommand:	
  3049  0022                     ??_CC2500_ReadStatus:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0022                     ?_setRF_RxStatus:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0022                     ??_DelayTime_1us:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0022                     ?_CC2500_WriteREG:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0022                     ??_DlyOff_Initialization:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0022                     ?_setSw_Status:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0022                     ?_setRFSW_Status:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0022                     ?_setDimmerLights_Trigger:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0022                     ?_setDimmerLights_Switch:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0022                     ??_setTxData:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0022                     ?_setDimmerLights_TriggerERROR:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0022                     ?_setLED:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0022                     ??_setLED_Main:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0022                     ??_Load_Initialization:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0022                     ??_setSw_Enable:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0022                     ?_setDimmerLights_AdjGo:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0022                     ?_setDimmerLights_TriggerAdj:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0022                     ?_setDimmerLights_Clear:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0022                     ?_setRF_Learn:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0022                     CC2500_WriteREG@value:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0022                     DlyOff_Initialization@sw:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0022                     DelayTimejudge@value:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0022                     setDimmerLights_TriggerERROR@command:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0022                     setDimmerLights_Switch@command:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0022                     setDimmerLights_AdjGo@command:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0022                     setDimmerLights_Trigger@command:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0022                     setDimmerLights_TriggerAdj@command:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0022                     setDimmerLights_Clear@command:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0022                     setLED@command:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0022                     Flash_Memory_Read@address:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0022                     setRF_Learn@command:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0022                     setRF_RxStatus@command:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0022                     setRFSW_Status@command:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     setSw_Enable@command:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     setSw_Status@command:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     DelayTime_1us@i:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     ___wmul@multiplicand:	
  3158                           ; 2 bytes @ 0x2
  3159                           
  3160  0022                     ___lwdiv@dividend:	
  3161                           ; 2 bytes @ 0x2
  3162                           
  3163                           
  3164                           ; 2 bytes @ 0x2
  3165  0022                     	ds	1
  3166  0023                     ??_setRF_RxStatus:	
  3167  0023                     ??_CC2500_WriteREG:	
  3168                           ; 0 bytes @ 0x3
  3169                           
  3170  0023                     ??_setSw_Status:	
  3171                           ; 0 bytes @ 0x3
  3172                           
  3173  0023                     ??_setRFSW_Status:	
  3174                           ; 0 bytes @ 0x3
  3175                           
  3176  0023                     ??_setDimmerLights_Trigger:	
  3177                           ; 0 bytes @ 0x3
  3178                           
  3179  0023                     ??_setDimmerLights_Switch:	
  3180                           ; 0 bytes @ 0x3
  3181                           
  3182  0023                     ??_setDimmerLights_TriggerERROR:	
  3183                           ; 0 bytes @ 0x3
  3184                           
  3185  0023                     ??_setLED:	
  3186                           ; 0 bytes @ 0x3
  3187                           
  3188  0023                     ??_DelayOff_Initialization:	
  3189                           ; 0 bytes @ 0x3
  3190                           
  3191  0023                     ?_setDelayOff_GO:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0023                     ??_setDimmerLights_AdjGo:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0023                     ??_setDimmerLights_TriggerAdj:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0023                     ??_setDimmerLights_Clear:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0023                     ??_getAD:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     ??_setRF_Learn:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     CC2500_WriteCommand@command:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0023                     CC2500_ReadStatus@status_addr:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215  0023                     setDelayOff_GO@command:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0023                     setDimmerLights_TriggerERROR@lights:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0023                     setDimmerLights_Switch@lights:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     setDimmerLights_AdjGo@lights:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     setDimmerLights_Trigger@lights:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     setDimmerLights_TriggerAdj@lights:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     setDimmerLights_Clear@lights:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     setLED@led:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     getAD@adcon0:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0023                     Flash_Memory_Read@ret:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0023                     setRF_Learn@rf:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0023                     setRF_RxStatus@rf:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0023                     setTxData@rf:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0023                     setRFSW_Status@sw:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0023                     setRF_DimmerLights@status:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0023                     setSw_Status@sw:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0023                     ___ftpack@exp:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266                           
  3267                           ; 1 bytes @ 0x3
  3268  0023                     	ds	1
  3269  0024                     ??_CC2500_ClearTXFIFO:	
  3270  0024                     ??_CC2500_ClearRXFIFO:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0024                     ??_CC2500_SIDLEMode:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0024                     ?_setDimmerLights:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0024                     ??_setDimmerLights_ERROR:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??_setLED_Initialization:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     ??_getLoad_AD:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     ??_getTemp_AD:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0024                     ??_getPowerFault_AD:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0024                     ?_setRF_Enable:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0024                     ??_Flash_Memory_Modify:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0024                     ??_RF_RxDisable:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0024                     ??_setSw_Initialization:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0024                     ??_Sw_DimmerAdjFunc:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0024                     ??_CC2500_TxData:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0024                     ??_CC2500_RxData:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0024                     ??___wmul:	
  3316                           ; 0 bytes @ 0x4
  3317                           
  3318  0024                     ??___lwdiv:	
  3319                           ; 0 bytes @ 0x4
  3320                           
  3321  0024                     CC2500_WriteREG@w_addr:	
  3322                           ; 0 bytes @ 0x4
  3323                           
  3324  0024                     setDelayOff_GO@value:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0024                     setDimmerLights@status:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0024                     setLED_Initialization@led:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0024                     setLED_Main@led:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0024                     setRF_Enable@command:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0024                     RF_RxDisable@rf:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0024                     setRF_DimmerLights@lights:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0024                     setSw_Initialization@sw:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0024                     Sw_DimmerAdjFunc@sw:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0024                     ___ftpack@sign:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0024                     DelayTime_1us@j:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0024                     ___wmul@product:	
  3358                           ; 2 bytes @ 0x4
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0x4
  3362  0024                     	ds	1
  3363  0025                     ??_CC2500_InitSetREG:	
  3364  0025                     ??_CC2500_InitPATable:	
  3365                           ; 0 bytes @ 0x5
  3366                           
  3367  0025                     ??_setDimmerLights:	
  3368                           ; 0 bytes @ 0x5
  3369                           
  3370  0025                     ??_Switch_Initialization:	
  3371                           ; 0 bytes @ 0x5
  3372                           
  3373  0025                     ??_setRF_Enable:	
  3374                           ; 0 bytes @ 0x5
  3375                           
  3376  0025                     ??_Sw_DimmerOnFunc:	
  3377                           ; 0 bytes @ 0x5
  3378                           
  3379  0025                     ??___ftpack:	
  3380                           ; 0 bytes @ 0x5
  3381                           
  3382  0025                     ??_setDelayOff_GO:	
  3383                           ; 0 bytes @ 0x5
  3384                           
  3385  0025                     ??_LED_Initialization:	
  3386                           ; 0 bytes @ 0x5
  3387                           
  3388  0025                     ??_LED_Main:	
  3389                           ; 0 bytes @ 0x5
  3390                           
  3391  0025                     CC2500_TxData@loop_e:	
  3392                           ; 0 bytes @ 0x5
  3393                           
  3394  0025                     CC2500_RxData@loop_f:	
  3395                           ; 1 bytes @ 0x5
  3396                           
  3397  0025                     setDimmerLights_ERROR@lights:	
  3398                           ; 1 bytes @ 0x5
  3399                           
  3400  0025                     setRF_Enable@rf:	
  3401                           ; 1 bytes @ 0x5
  3402                           
  3403  0025                     Sw_DimmerOnFunc@sw:	
  3404                           ; 1 bytes @ 0x5
  3405                           
  3406  0025                     ___lwdiv@quotient:	
  3407                           ; 1 bytes @ 0x5
  3408                           
  3409                           
  3410                           ; 2 bytes @ 0x5
  3411  0025                     	ds	1
  3412  0026                     ??_CC2500_PowerRST:	
  3413  0026                     ??_CC2500_FrequencyCabr:	
  3414                           ; 0 bytes @ 0x6
  3415                           
  3416  0026                     ?_setBuz:	
  3417                           ; 0 bytes @ 0x6
  3418                           
  3419  0026                     CC2500_InitSetREG@temp1:	
  3420                           ; 0 bytes @ 0x6
  3421                           
  3422  0026                     CC2500_InitPATable@temp:	
  3423                           ; 1 bytes @ 0x6
  3424                           
  3425  0026                     setDimmerLights@lights:	
  3426                           ; 1 bytes @ 0x6
  3427                           
  3428  0026                     Flash_Memory_Modify@i:	
  3429                           ; 1 bytes @ 0x6
  3430                           
  3431  0026                     setBuz@time:	
  3432                           ; 1 bytes @ 0x6
  3433                           
  3434                           
  3435                           ; 2 bytes @ 0x6
  3436  0026                     	ds	1
  3437  0027                     ??_Flash_Memory_Main:	
  3438  0027                     CC2500_InitSetREG@temp2:	
  3439                           ; 0 bytes @ 0x7
  3440                           
  3441  0027                     CC2500_InitPATable@loop_d:	
  3442                           ; 1 bytes @ 0x7
  3443                           
  3444  0027                     setDelayOff_GO@sw:	
  3445                           ; 1 bytes @ 0x7
  3446                           
  3447  0027                     ___lwdiv@counter:	
  3448                           ; 1 bytes @ 0x7
  3449                           
  3450                           
  3451                           ; 1 bytes @ 0x7
  3452  0027                     	ds	1
  3453  0028                     ??_Sw_DimmerOffFunc:	
  3454  0028                     ??_setBuz:	
  3455                           ; 0 bytes @ 0x8
  3456                           
  3457  0028                     ?___awtoft:	
  3458                           ; 0 bytes @ 0x8
  3459                           
  3460  0028                     CC2500_InitSetREG@loop_c:	
  3461                           ; 3 bytes @ 0x8
  3462                           
  3463  0028                     getTemp_AD@channel:	
  3464                           ; 1 bytes @ 0x8
  3465                           
  3466  0028                     getPowerFault_AD@channel:	
  3467                           ; 1 bytes @ 0x8
  3468                           
  3469  0028                     ___awtoft@c:	
  3470                           ; 1 bytes @ 0x8
  3471                           
  3472                           
  3473                           ; 2 bytes @ 0x8
  3474  0028                     	ds	1
  3475  0029                     ??_CC2500_PowerOnInitial:	
  3476  0029                     setBuz@count:	
  3477                           ; 0 bytes @ 0x9
  3478                           
  3479  0029                     getLoad_AD@channel:	
  3480                           ; 1 bytes @ 0x9
  3481                           
  3482                           
  3483                           ; 1 bytes @ 0x9
  3484  0029                     	ds	1
  3485  002A                     ??_DlyOff_Main:	
  3486  002A                     ??_MainT:	
  3487                           ; 0 bytes @ 0xA
  3488                           
  3489  002A                     ??_setLog_Code:	
  3490                           ; 0 bytes @ 0xA
  3491                           
  3492  002A                     ??_setRFSW_Control:	
  3493                           ; 0 bytes @ 0xA
  3494                           
  3495  002A                     ??_DimmerLights_Exceptions:	
  3496                           ; 0 bytes @ 0xA
  3497                           
  3498  002A                     DimmerLights_Exceptions@status:	
  3499                           ; 0 bytes @ 0xA
  3500                           
  3501  002A                     getLoad_AD@j:	
  3502                           ; 1 bytes @ 0xA
  3503                           
  3504  002A                     Sw_DimmerOffFunc@sw:	
  3505                           ; 1 bytes @ 0xA
  3506                           
  3507                           
  3508                           ; 1 bytes @ 0xA
  3509  002A                     	ds	1
  3510  002B                     ??_setLoad_Exceptions:	
  3511  002B                     ??_setOverTemp_Exceptions:	
  3512                           ; 0 bytes @ 0xB
  3513                           
  3514  002B                     ??_setPowerFault_Exceptions:	
  3515                           ; 0 bytes @ 0xB
  3516                           
  3517  002B                     ??_setSw_Main:	
  3518                           ; 0 bytes @ 0xB
  3519                           
  3520  002B                     ??___awtoft:	
  3521                           ; 0 bytes @ 0xB
  3522                           
  3523  002B                     getLoad_AD@i:	
  3524                           ; 0 bytes @ 0xB
  3525                           
  3526  002B                     setLog_Code@rf:	
  3527                           ; 1 bytes @ 0xB
  3528                           
  3529  002B                     setRFSW_Control@sw:	
  3530                           ; 1 bytes @ 0xB
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0xB
  3534  002B                     	ds	1
  3535  002C                     DlyOff_Main@sw:	
  3536  002C                     setLoad_Exceptions@command:	
  3537                           ; 1 bytes @ 0xC
  3538                           
  3539  002C                     setOverTemp_Exceptions@command:	
  3540                           ; 1 bytes @ 0xC
  3541                           
  3542  002C                     setPowerFault_Exceptions@command:	
  3543                           ; 1 bytes @ 0xC
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0xC
  3547  002C                     	ds	1
  3548  002D                     ??_Load_Main:	
  3549  002D                     ??_setTemp_Main:	
  3550                           ; 0 bytes @ 0xD
  3551                           
  3552  002D                     ??_setPowerFault_Main:	
  3553                           ; 0 bytes @ 0xD
  3554                           
  3555  002D                     ??_DelayOff_Main:	
  3556                           ; 0 bytes @ 0xD
  3557                           
  3558  002D                     _setSw_Main$4710:	
  3559                           ; 0 bytes @ 0xD
  3560                           
  3561  002D                     ___awtoft@sign:	
  3562                           ; 1 bytes @ 0xD
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0xD
  3566  002D                     	ds	1
  3567  002E                     ?___ftdiv:	
  3568  002E                     ?___ftmul:	
  3569                           ; 3 bytes @ 0xE
  3570                           
  3571  002E                     _setSw_Main$4711:	
  3572                           ; 3 bytes @ 0xE
  3573                           
  3574  002E                     ___ftdiv@f2:	
  3575                           ; 1 bytes @ 0xE
  3576                           
  3577  002E                     ___ftmul@f1:	
  3578                           ; 3 bytes @ 0xE
  3579                           
  3580                           
  3581                           ; 3 bytes @ 0xE
  3582  002E                     	ds	1
  3583  002F                     ??_PowerFault_Main:	
  3584  002F                     setSw_Main@sw:	
  3585                           ; 0 bytes @ 0xF
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0xF
  3589  002F                     	ds	1
  3590  0030                     ??_Temp_Main:	
  3591  0030                     ??_Switch_Main:	
  3592                           ; 0 bytes @ 0x10
  3593                           
  3594                           
  3595                           ; 0 bytes @ 0x10
  3596  0030                     	ds	1
  3597  0031                     Load_Main@i:	
  3598  0031                     ___ftdiv@f1:	
  3599                           ; 1 bytes @ 0x11
  3600                           
  3601  0031                     ___ftmul@f2:	
  3602                           ; 3 bytes @ 0x11
  3603                           
  3604                           
  3605                           ; 3 bytes @ 0x11
  3606  0031                     	ds	3
  3607  0034                     ??___ftdiv:	
  3608  0034                     ??___ftmul:	
  3609                           ; 0 bytes @ 0x14
  3610                           
  3611                           
  3612                           ; 0 bytes @ 0x14
  3613  0034                     	ds	4
  3614  0038                     ___ftdiv@cntr:	
  3615  0038                     ___ftmul@exp:	
  3616                           ; 1 bytes @ 0x18
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x18
  3620  0038                     	ds	1
  3621  0039                     ___ftdiv@f3:	
  3622  0039                     ___ftmul@f3_as_product:	
  3623                           ; 3 bytes @ 0x19
  3624                           
  3625                           
  3626                           ; 3 bytes @ 0x19
  3627  0039                     	ds	3
  3628  003C                     ___ftdiv@exp:	
  3629  003C                     ___ftmul@cntr:	
  3630                           ; 1 bytes @ 0x1C
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x1C
  3634  003C                     	ds	1
  3635  003D                     ___ftdiv@sign:	
  3636  003D                     ___ftmul@sign:	
  3637                           ; 1 bytes @ 0x1D
  3638                           
  3639                           
  3640                           ; 1 bytes @ 0x1D
  3641  003D                     	ds	1
  3642  003E                     ?___ftadd:	
  3643  003E                     ___ftadd@f1:	
  3644                           ; 3 bytes @ 0x1E
  3645                           
  3646                           
  3647                           ; 3 bytes @ 0x1E
  3648  003E                     	ds	3
  3649  0041                     ___ftadd@f2:	
  3650                           
  3651                           ; 3 bytes @ 0x21
  3652  0041                     	ds	3
  3653  0044                     ??___ftadd:	
  3654                           
  3655                           ; 0 bytes @ 0x24
  3656  0044                     	ds	4
  3657  0048                     ___ftadd@sign:	
  3658                           
  3659                           ; 1 bytes @ 0x28
  3660  0048                     	ds	1
  3661  0049                     ___ftadd@exp2:	
  3662                           
  3663                           ; 1 bytes @ 0x29
  3664  0049                     	ds	1
  3665  004A                     ___ftadd@exp1:	
  3666                           
  3667                           ; 1 bytes @ 0x2A
  3668  004A                     	ds	1
  3669  004B                     ?___fttol:	
  3670  004B                     ___fttol@f1:	
  3671                           ; 4 bytes @ 0x2B
  3672                           
  3673                           
  3674                           ; 3 bytes @ 0x2B
  3675  004B                     	ds	4
  3676  004F                     ??___fttol:	
  3677                           
  3678                           ; 0 bytes @ 0x2F
  3679  004F                     	ds	4
  3680  0053                     ___fttol@sign1:	
  3681                           
  3682                           ; 1 bytes @ 0x33
  3683  0053                     	ds	1
  3684  0054                     ___fttol@lval:	
  3685                           
  3686                           ; 4 bytes @ 0x34
  3687  0054                     	ds	4
  3688  0058                     ___fttol@exp1:	
  3689                           
  3690                           ; 1 bytes @ 0x38
  3691  0058                     	ds	1
  3692  0059                     ??_getPercentValue:	
  3693  0059                     ??_setPercentValue:	
  3694                           ; 0 bytes @ 0x39
  3695                           
  3696  0059                     setPercentValue@value:	
  3697                           ; 0 bytes @ 0x39
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x39
  3701  0059                     	ds	1
  3702  005A                     setPercentValue@i:	
  3703                           
  3704                           ; 3 bytes @ 0x3A
  3705  005A                     	ds	1
  3706  005B                     getPercentValue@value:	
  3707                           
  3708                           ; 1 bytes @ 0x3B
  3709  005B                     	ds	1
  3710  005C                     getPercentValue@i:	
  3711                           
  3712                           ; 3 bytes @ 0x3C
  3713  005C                     	ds	1
  3714  005D                     ?_setDimmerLights_Adj:	
  3715  005D                     ??_Flash_Memory_Initialization:	
  3716                           ; 0 bytes @ 0x3D
  3717                           
  3718  005D                     setDimmerLights_Adj@status:	
  3719                           ; 0 bytes @ 0x3D
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x3D
  3723  005D                     	ds	1
  3724  005E                     ??_setDimmerLights_Adj:	
  3725  005E                     Flash_Memory_Initialization@i:	
  3726                           ; 0 bytes @ 0x3E
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x3E
  3730  005E                     	ds	1
  3731  005F                     ??_setDimmerLights_Initialization:	
  3732  005F                     ??_setDimmerLights_AdjRF:	
  3733                           ; 0 bytes @ 0x3F
  3734                           
  3735                           
  3736                           ; 0 bytes @ 0x3F
  3737  005F                     	ds	1
  3738  0060                     setDimmerLights_Adj@lights:	
  3739  0060                     setDimmerLights_AdjRF@lights:	
  3740                           ; 1 bytes @ 0x40
  3741                           
  3742                           
  3743                           ; 1 bytes @ 0x40
  3744  0060                     	ds	1
  3745  0061                     ??_setDimmerLights_Main:	
  3746  0061                     ??_setRF_DimmerValue:	
  3747                           ; 0 bytes @ 0x41
  3748                           
  3749  0061                     setDimmerLights_Initialization@lights:	
  3750                           ; 0 bytes @ 0x41
  3751                           
  3752  0061                     setDimmerLights_Main@clear:	
  3753                           ; 1 bytes @ 0x41
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x41
  3757  0061                     	ds	1
  3758  0062                     ??_DimmerLights_Initialization:	
  3759  0062                     setDimmerLights_Main@lights:	
  3760                           ; 0 bytes @ 0x42
  3761                           
  3762                           
  3763                           ; 1 bytes @ 0x42
  3764  0062                     	ds	1
  3765  0063                     ??_DimmerLights_Main:	
  3766  0063                     setRF_DimmerValue@lights:	
  3767                           ; 0 bytes @ 0x43
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x43
  3771  0063                     	ds	1
  3772  0064                     ??_setRFSW_AdjControl:	
  3773                           
  3774                           ; 0 bytes @ 0x44
  3775  0064                     	ds	2
  3776  0066                     setRFSW_AdjControl@sw:	
  3777                           
  3778                           ; 1 bytes @ 0x46
  3779  0066                     	ds	1
  3780  0067                     ??_setControl_Lights_Table:	
  3781  0067                     setControl_Lights_Table@rf:	
  3782                           ; 0 bytes @ 0x47
  3783                           
  3784                           
  3785                           ; 1 bytes @ 0x47
  3786  0067                     	ds	1
  3787  0068                     ??_getRxData:	
  3788  0068                     getRxData@rf:	
  3789                           ; 0 bytes @ 0x48
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x48
  3793  0068                     	ds	1
  3794  0069                     ??_setRF_Main:	
  3795                           
  3796                           ; 0 bytes @ 0x49
  3797  0069                     	ds	1
  3798  006A                     setRF_Main@rf:	
  3799                           
  3800                           ; 1 bytes @ 0x4A
  3801  006A                     	ds	1
  3802  006B                     _setRF_Main$4359:	
  3803                           
  3804                           ; 1 bytes @ 0x4B
  3805  006B                     	ds	1
  3806  006C                     ??_RF_Main:	
  3807  006C                     ??_main:	
  3808                           ; 0 bytes @ 0x4C
  3809                           
  3810                           
  3811                           	psect	maintext
  3812  1305                     __pmaintext:	
  3813                           ; 0 bytes @ 0x4C
  3814 ;;
  3815 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3816 ;;
  3817 ;; *************** function _main *****************
  3818 ;; Defined at:
  3819 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;		None
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;		None               void
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 17F/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;Total ram usage:        0 bytes
  3838 ;; Hardware stack levels required when called:   14
  3839 ;; This function calls:
  3840 ;;		_Buzzer_Initialization
  3841 ;;		_Buzzer_Main
  3842 ;;		_CC2500_PowerOnInitial
  3843 ;;		_DelayOff_Initialization
  3844 ;;		_DelayOff_Main
  3845 ;;		_DimmerLights_Initialization
  3846 ;;		_DimmerLights_Main
  3847 ;;		_Flash_Memory_Initialization
  3848 ;;		_Flash_Memory_Main
  3849 ;;		_LED_Initialization
  3850 ;;		_LED_Main
  3851 ;;		_Load_Initialization
  3852 ;;		_Load_Main
  3853 ;;		_MainT
  3854 ;;		_MainT_Initialization
  3855 ;;		_Mcu_Initialization
  3856 ;;		_PowerFault_Initialization
  3857 ;;		_PowerFault_Main
  3858 ;;		_RF_Initialization
  3859 ;;		_RF_Main
  3860 ;;		_Switch_Initialization
  3861 ;;		_Switch_Main
  3862 ;;		_Temp_Initialization
  3863 ;;		_Temp_Main
  3864 ;;		_getLoad_AD
  3865 ;;		_getPowerFault_AD
  3866 ;;		_getTemp_AD
  3867 ;; This function is called by:
  3868 ;;		Startup code after reset
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _main
  3874  1305                     _main:	
  3875                           
  3876                           ;main.c: 9: MainT_Initialization();
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3880  1305  31A4  2465  3193   	fcall	_MainT_Initialization
  3881                           
  3882                           ;main.c: 10: Mcu_Initialization();
  3883  1308  31A6  269C  3193   	fcall	_Mcu_Initialization
  3884                           
  3885                           ;main.c: 11: Flash_Memory_Initialization();
  3886  130B  318C  24D7  3193   	fcall	_Flash_Memory_Initialization
  3887                           
  3888                           ;main.c: 12: LED_Initialization();
  3889  130E  31A4  24B6  3193   	fcall	_LED_Initialization
  3890                           
  3891                           ;main.c: 13: Buzzer_Initialization();
  3892  1311  31A4  2423  3193   	fcall	_Buzzer_Initialization
  3893                           
  3894                           ;main.c: 15: ;;
  3895                           ;main.c: 16: Temp_Initialization();
  3896  1314  31A3  2396  3193   	fcall	_Temp_Initialization
  3897                           
  3898                           ;main.c: 17: Load_Initialization();
  3899  1317  31A4  24CE  3193   	fcall	_Load_Initialization
  3900                           
  3901                           ;main.c: 18: PowerFault_Initialization();
  3902  131A  31A3  2390  3193   	fcall	_PowerFault_Initialization
  3903                           
  3904                           ;main.c: 19: DelayOff_Initialization();
  3905  131D  31A3  23DF  3193   	fcall	_DelayOff_Initialization
  3906                           
  3907                           ;main.c: 21: DimmerLights_Initialization();
  3908  1320  31A6  262F  3193   	fcall	_DimmerLights_Initialization
  3909                           
  3910                           ;main.c: 22: ;;
  3911                           ;main.c: 23: ;;
  3912                           ;main.c: 24: ;;
  3913                           ;main.c: 26: Switch_Initialization();
  3914  1323  31A4  24F5  3193   	fcall	_Switch_Initialization
  3915                           
  3916                           ;main.c: 27: RF_Initialization();
  3917  1326  31A3  23A5  3193   	fcall	_RF_Initialization
  3918                           
  3919                           ;main.c: 28: CC2500_PowerOnInitial();
  3920  1329  31A6  261A  3193   	fcall	_CC2500_PowerOnInitial
  3921  132C                     l10086:	
  3922                           ;main.c: 30: while(1)
  3923                           
  3924                           
  3925                           ;main.c: 31: {
  3926                           ;main.c: 32: if(TMain->PowerON)
  3927  132C  0021               	movlb	1	; select bank1
  3928  132D  0869               	movf	_TMain^(0+128),w
  3929  132E  0086               	movwf	6
  3930  132F  3001               	movlw	1	; select bank2/3
  3931  1330  0087               	movwf	7
  3932  1331  1C01               	btfss	1,0
  3933  1332  2B42               	goto	l10090
  3934                           
  3935                           ;main.c: 33: {
  3936                           ;main.c: 35: ;;
  3937                           ;main.c: 39: getLoad_AD(0x05);
  3938  1333  3005               	movlw	5
  3939  1334  3188  207D  3193   	fcall	_getLoad_AD
  3940                           
  3941                           ;main.c: 43: getTemp_AD(0x09);
  3942  1337  3009               	movlw	9
  3943  1338  3192  222B  3193   	fcall	_getTemp_AD
  3944                           
  3945                           ;main.c: 47: getPowerFault_AD(0x11);
  3946  133B  3011               	movlw	17
  3947  133C  319C  245E  3193   	fcall	_getPowerFault_AD
  3948                           
  3949                           ;main.c: 59: Buzzer_Main();
  3950  133F  3189  2113  3193   	fcall	_Buzzer_Main
  3951  1342                     l10090:	
  3952                           
  3953                           ;main.c: 61: }
  3954                           ;main.c: 63: if(TMain->T0_Timerout)
  3955  1342  0021               	movlb	1	; select bank1
  3956  1343  0869               	movf	_TMain^(0+128),w
  3957  1344  0086               	movwf	6
  3958  1345  3001               	movlw	1	; select bank2/3
  3959  1346  0087               	movwf	7
  3960  1347  1C81               	btfss	1,1
  3961  1348  2B2C               	goto	l10086
  3962                           
  3963                           ;main.c: 64: {
  3964                           ;main.c: 65: TMain->T0_Timerout = 0;
  3965  1349  0869               	movf	_TMain^(0+128),w
  3966  134A  0086               	movwf	6
  3967  134B  3001               	movlw	1	; select bank2/3
  3968  134C  0087               	movwf	7
  3969  134D  1081               	bcf	1,1
  3970                           
  3971                           ;main.c: 66: MainT();
  3972  134E  3194  245C  3193   	fcall	_MainT
  3973                           
  3974                           ;main.c: 67: if(TMain->PowerON)
  3975  1351  0021               	movlb	1	; select bank1
  3976  1352  0869               	movf	_TMain^(0+128),w
  3977  1353  0086               	movwf	6
  3978  1354  3001               	movlw	1	; select bank2/3
  3979  1355  0087               	movwf	7
  3980  1356  1C01               	btfss	1,0
  3981  1357  2B2C               	goto	l10086
  3982                           
  3983                           ;main.c: 68: {
  3984                           ;main.c: 69: Flash_Memory_Main();
  3985  1358  319D  25F7  3193   	fcall	_Flash_Memory_Main
  3986                           
  3987                           ;main.c: 71: LED_Main();
  3988  135B  31A4  24C2  3193   	fcall	_LED_Main
  3989                           
  3990                           ;main.c: 73: ;;
  3991                           ;main.c: 74: Temp_Main();
  3992  135E  3187  27FD  3193   	fcall	_Temp_Main
  3993                           
  3994                           ;main.c: 75: Load_Main();
  3995  1361  3183  23A4  3193   	fcall	_Load_Main
  3996                           
  3997                           ;main.c: 76: PowerFault_Main();
  3998  1364  31A3  2393  3193   	fcall	_PowerFault_Main
  3999                           
  4000                           ;main.c: 78: ;;
  4001                           ;main.c: 79: DimmerLights_Main();
  4002  1367  31A4  244F  3193   	fcall	_DimmerLights_Main
  4003                           
  4004                           ;main.c: 80: Switch_Main();
  4005  136A  31A3  23FF  3193   	fcall	_Switch_Main
  4006                           
  4007                           ;main.c: 81: ;;
  4008                           ;main.c: 82: ;;
  4009                           ;main.c: 84: RF_Main();
  4010  136D  31A3  23A9  3193   	fcall	_RF_Main
  4011                           
  4012                           ;main.c: 85: DelayOff_Main();
  4013  1370  31A3  23E7  3193   	fcall	_DelayOff_Main
  4014  1373  2B2C               	goto	l10086
  4015  1374                     __end_of_main:	
  4016                           
  4017                           	psect	text1
  4018  122B                     __ptext1:	
  4019 ;; *************** function _getTemp_AD *****************
  4020 ;; Defined at:
  4021 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  channel         1    wreg     unsigned char 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  channel         1    8[BANK0 ] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;		None               void
  4028 ;; Registers used:
  4029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;Total ram usage:        5 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    5
  4042 ;; This function calls:
  4043 ;;		_getAD
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _getTemp_AD
  4051  122B                     _getTemp_AD:	
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4055                           ;getTemp_AD@channel stored from wreg
  4056  122B  0020               	movlb	0	; select bank0
  4057  122C  00A8               	movwf	getTemp_AD@channel
  4058                           
  4059                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4060  122D  087D               	movf	_Temp,w
  4061  122E  0086               	movwf	6
  4062  122F  3001               	movlw	1	; select bank2/3
  4063  1230  0087               	movwf	7
  4064  1231  1D01               	btfss	1,2
  4065  1232  0008               	return
  4066                           
  4067                           ;OverTemperature_B1.c: 38: {
  4068                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4069  1233  30F0               	movlw	240
  4070  1234  00A4               	movwf	??_getTemp_AD
  4071  1235  0824               	movf	??_getTemp_AD,w
  4072  1236  00A0               	movwf	getAD@adcon1
  4073  1237  0828               	movf	getTemp_AD@channel,w
  4074  1238  31A6  266F  3192   	fcall	_getAD
  4075  123B  087D               	movf	_Temp,w
  4076  123C  3E0A               	addlw	10
  4077  123D  0086               	movwf	6
  4078  123E  3001               	movlw	1	; select bank2/3
  4079  123F  0087               	movwf	7
  4080  1240  0020               	movlb	0	; select bank0
  4081  1241  0820               	movf	?_getAD,w
  4082  1242  3FC0               	movwi [0]fsr1
  4083  1243  0821               	movf	?_getAD+1,w
  4084  1244  3FC1               	movwi [1]fsr1
  4085                           
  4086                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4087  1245  087D               	movf	_Temp,w
  4088  1246  3E0A               	addlw	10
  4089  1247  0086               	movwf	6
  4090  1248  3001               	movlw	1	; select bank2/3
  4091  1249  0087               	movwf	7
  4092  124A  3F40               	moviw [0]fsr1
  4093  124B  00A4               	movwf	??_getTemp_AD
  4094  124C  3F41               	moviw [1]fsr1
  4095  124D  00A5               	movwf	??_getTemp_AD+1
  4096  124E  087D               	movf	_Temp,w
  4097  124F  3E06               	addlw	6
  4098  1250  0086               	movwf	6
  4099  1251  3001               	movlw	1	; select bank2/3
  4100  1252  0087               	movwf	7
  4101  1253  3F40               	moviw [0]fsr1
  4102  1254  00A6               	movwf	??_getTemp_AD+2
  4103  1255  3F41               	moviw [1]fsr1
  4104  1256  00A7               	movwf	??_getTemp_AD+3
  4105  1257  0825               	movf	??_getTemp_AD+1,w
  4106  1258  0227               	subwf	??_getTemp_AD+3,w
  4107  1259  1D03               	skipz
  4108  125A  2A5D               	goto	u9995
  4109  125B  0824               	movf	??_getTemp_AD,w
  4110  125C  0226               	subwf	??_getTemp_AD+2,w
  4111  125D                     u9995:	
  4112  125D  1803               	skipnc
  4113  125E  2A6E               	goto	l9874
  4114                           
  4115                           ;OverTemperature_B1.c: 41: {
  4116                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4117  125F  087D               	movf	_Temp,w
  4118  1260  3E0A               	addlw	10
  4119  1261  0086               	movwf	6
  4120  1262  3001               	movlw	1	; select bank2/3
  4121  1263  0087               	movwf	7
  4122  1264  087D               	movf	_Temp,w
  4123  1265  3E06               	addlw	6
  4124  1266  0084               	movwf	4
  4125  1267  3001               	movlw	1	; select bank2/3
  4126  1268  0085               	movwf	5
  4127  1269  3F40               	moviw [0]fsr1
  4128  126A  3F80               	movwi [0]fsr0
  4129  126B  3F41               	moviw [1]fsr1
  4130  126C  3F81               	movwi [1]fsr0
  4131                           
  4132                           ;OverTemperature_B1.c: 43: }
  4133  126D  0008               	return
  4134  126E                     l9874:	
  4135                           
  4136                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4137  126E  087D               	movf	_Temp,w
  4138  126F  3E0A               	addlw	10
  4139  1270  0086               	movwf	6
  4140  1271  3001               	movlw	1	; select bank2/3
  4141  1272  0087               	movwf	7
  4142  1273  3F40               	moviw [0]fsr1
  4143  1274  00A4               	movwf	??_getTemp_AD
  4144  1275  3F41               	moviw [1]fsr1
  4145  1276  00A5               	movwf	??_getTemp_AD+1
  4146  1277  087D               	movf	_Temp,w
  4147  1278  3E08               	addlw	8
  4148  1279  0086               	movwf	6
  4149  127A  3001               	movlw	1	; select bank2/3
  4150  127B  0087               	movwf	7
  4151  127C  3F40               	moviw [0]fsr1
  4152  127D  00A6               	movwf	??_getTemp_AD+2
  4153  127E  3F41               	moviw [1]fsr1
  4154  127F  00A7               	movwf	??_getTemp_AD+3
  4155  1280  0825               	movf	??_getTemp_AD+1,w
  4156  1281  0227               	subwf	??_getTemp_AD+3,w
  4157  1282  1D03               	skipz
  4158  1283  2A86               	goto	u10005
  4159  1284  0824               	movf	??_getTemp_AD,w
  4160  1285  0226               	subwf	??_getTemp_AD+2,w
  4161  1286                     u10005:	
  4162  1286  1803               	skipnc
  4163  1287  0008               	return
  4164                           
  4165                           ;OverTemperature_B1.c: 45: {
  4166                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4167  1288  087D               	movf	_Temp,w
  4168  1289  3E0A               	addlw	10
  4169  128A  0086               	movwf	6
  4170  128B  3001               	movlw	1	; select bank2/3
  4171  128C  0087               	movwf	7
  4172  128D  087D               	movf	_Temp,w
  4173  128E  3E08               	addlw	8
  4174  128F  0084               	movwf	4
  4175  1290  3001               	movlw	1	; select bank2/3
  4176  1291  0085               	movwf	5
  4177  1292  3F40               	moviw [0]fsr1
  4178  1293  3F80               	movwi [0]fsr0
  4179  1294  3F41               	moviw [1]fsr1
  4180  1295  3F81               	movwi [1]fsr0
  4181  1296  0008               	return
  4182  1297                     __end_of_getTemp_AD:	
  4183                           
  4184                           	psect	text2
  4185  1C5E                     __ptext2:	
  4186 ;; *************** function _getPowerFault_AD *****************
  4187 ;; Defined at:
  4188 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  channel         1    wreg     unsigned char 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  channel         1    8[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;		None               void
  4195 ;; Registers used:
  4196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;Total ram usage:        5 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    5
  4209 ;; This function calls:
  4210 ;;		_getAD
  4211 ;; This function is called by:
  4212 ;;		_main
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _getPowerFault_AD
  4218  1C5E                     _getPowerFault_AD:	
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4222                           ;getPowerFault_AD@channel stored from wreg
  4223  1C5E  0020               	movlb	0	; select bank0
  4224  1C5F  00A8               	movwf	getPowerFault_AD@channel
  4225                           
  4226                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4227  1C60  087B               	movf	_PF,w
  4228  1C61  0086               	movwf	6
  4229  1C62  3001               	movlw	1	; select bank2/3
  4230  1C63  0087               	movwf	7
  4231  1C64  1D81               	btfss	1,3
  4232  1C65  0008               	return
  4233                           
  4234                           ;PowerFault_B1.c: 52: {
  4235                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4236  1C66  30F0               	movlw	240
  4237  1C67  00A4               	movwf	??_getPowerFault_AD
  4238  1C68  0824               	movf	??_getPowerFault_AD,w
  4239  1C69  00A0               	movwf	getAD@adcon1
  4240  1C6A  0828               	movf	getPowerFault_AD@channel,w
  4241  1C6B  31A6  266F  319C   	fcall	_getAD
  4242  1C6E  087B               	movf	_PF,w
  4243  1C6F  3E03               	addlw	3
  4244  1C70  0086               	movwf	6
  4245  1C71  3001               	movlw	1	; select bank2/3
  4246  1C72  0087               	movwf	7
  4247  1C73  0020               	movlb	0	; select bank0
  4248  1C74  0820               	movf	?_getAD,w
  4249  1C75  3FC0               	movwi [0]fsr1
  4250  1C76  0821               	movf	?_getAD+1,w
  4251  1C77  3FC1               	movwi [1]fsr1
  4252                           
  4253                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4254  1C78  087B               	movf	_PF,w
  4255  1C79  3E03               	addlw	3
  4256  1C7A  0086               	movwf	6
  4257  1C7B  3001               	movlw	1	; select bank2/3
  4258  1C7C  0087               	movwf	7
  4259  1C7D  3F40               	moviw [0]fsr1
  4260  1C7E  00A4               	movwf	??_getPowerFault_AD
  4261  1C7F  3F41               	moviw [1]fsr1
  4262  1C80  00A5               	movwf	??_getPowerFault_AD+1
  4263  1C81  0A7B               	incf	_PF,w
  4264  1C82  0086               	movwf	6
  4265  1C83  3001               	movlw	1	; select bank2/3
  4266  1C84  0087               	movwf	7
  4267  1C85  3F40               	moviw [0]fsr1
  4268  1C86  00A6               	movwf	??_getPowerFault_AD+2
  4269  1C87  3F41               	moviw [1]fsr1
  4270  1C88  00A7               	movwf	??_getPowerFault_AD+3
  4271  1C89  0825               	movf	??_getPowerFault_AD+1,w
  4272  1C8A  0227               	subwf	??_getPowerFault_AD+3,w
  4273  1C8B  1D03               	skipz
  4274  1C8C  2C8F               	goto	u10025
  4275  1C8D  0824               	movf	??_getPowerFault_AD,w
  4276  1C8E  0226               	subwf	??_getPowerFault_AD+2,w
  4277  1C8F                     u10025:	
  4278  1C8F  1803               	skipnc
  4279  1C90  0008               	return
  4280                           
  4281                           ;PowerFault_B1.c: 55: {
  4282                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4283  1C91  087B               	movf	_PF,w
  4284  1C92  3E03               	addlw	3
  4285  1C93  0086               	movwf	6
  4286  1C94  3001               	movlw	1	; select bank2/3
  4287  1C95  0087               	movwf	7
  4288  1C96  0A7B               	incf	_PF,w
  4289  1C97  0084               	movwf	4
  4290  1C98  3001               	movlw	1	; select bank2/3
  4291  1C99  0085               	movwf	5
  4292  1C9A  3F40               	moviw [0]fsr1
  4293  1C9B  3F80               	movwi [0]fsr0
  4294  1C9C  3F41               	moviw [1]fsr1
  4295  1C9D  3F81               	movwi [1]fsr0
  4296  1C9E  0008               	return
  4297  1C9F                     __end_of_getPowerFault_AD:	
  4298                           
  4299                           	psect	text3
  4300  087D                     __ptext3:	
  4301 ;; *************** function _getLoad_AD *****************
  4302 ;; Defined at:
  4303 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  channel         1    wreg     unsigned char 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  channel         1    9[BANK0 ] unsigned char 
  4308 ;;  i               1   11[BANK0 ] unsigned char 
  4309 ;;  j               1   10[BANK0 ] unsigned char 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;		None               void
  4312 ;; Registers used:
  4313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;Total ram usage:        8 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    5
  4326 ;; This function calls:
  4327 ;;		_getAD
  4328 ;; This function is called by:
  4329 ;;		_main
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           
  4334                           ;psect for function _getLoad_AD
  4335  087D                     _getLoad_AD:	
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4339                           ;getLoad_AD@channel stored from wreg
  4340  087D  0020               	movlb	0	; select bank0
  4341  087E  00A9               	movwf	getLoad_AD@channel
  4342                           
  4343                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4344  087F  01AB               	clrf	getLoad_AD@i
  4345  0880  01AA               	clrf	getLoad_AD@j
  4346                           
  4347                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4348  0881  086E               	movf	_Load,w
  4349  0882  0086               	movwf	6
  4350  0883  3002               	movlw	2	; select bank4/5
  4351  0884  0087               	movwf	7
  4352  0885  1E01               	btfss	1,4
  4353  0886  0008               	return
  4354                           
  4355                           ;OverLoad_B1.c: 20: {
  4356                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4357  0887  30C0               	movlw	192
  4358  0888  00A4               	movwf	??_getLoad_AD
  4359  0889  0824               	movf	??_getLoad_AD,w
  4360  088A  00A0               	movwf	getAD@adcon1
  4361  088B  0829               	movf	getLoad_AD@channel,w
  4362  088C  31A6  266F  3188   	fcall	_getAD
  4363  088F  0020               	movlb	0	; select bank0
  4364  0890  086E               	movf	_Load,w
  4365  0891  3E32               	addlw	50
  4366  0892  0086               	movwf	6
  4367  0893  3002               	movlw	2	; select bank4/5
  4368  0894  0087               	movwf	7
  4369  0895  0820               	movf	?_getAD,w
  4370  0896  3FC0               	movwi [0]fsr1
  4371  0897  0821               	movf	?_getAD+1,w
  4372  0898  3FC1               	movwi [1]fsr1
  4373                           
  4374                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4375  0899  01AB               	clrf	getLoad_AD@i
  4376  089A  3005               	movlw	5
  4377  089B  022B               	subwf	getLoad_AD@i,w
  4378  089C  1803               	btfsc	3,0
  4379  089D  28D7               	goto	l9850
  4380  089E                     l9840:	
  4381                           
  4382                           ;OverLoad_B1.c: 23: {
  4383                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4384  089E  086E               	movf	_Load,w
  4385  089F  3E32               	addlw	50
  4386  08A0  0086               	movwf	6
  4387  08A1  3002               	movlw	2	; select bank4/5
  4388  08A2  0087               	movwf	7
  4389  08A3  3F40               	moviw [0]fsr1
  4390  08A4  00A4               	movwf	??_getLoad_AD
  4391  08A5  3F41               	moviw [1]fsr1
  4392  08A6  00A5               	movwf	??_getLoad_AD+1
  4393  08A7  352B               	lslf	getLoad_AD@i,w
  4394  08A8  3E08               	addlw	8
  4395  08A9  076E               	addwf	_Load,w
  4396  08AA  00A6               	movwf	??_getLoad_AD+2
  4397  08AB  0826               	movf	??_getLoad_AD+2,w
  4398  08AC  0086               	movwf	6
  4399  08AD  3002               	movlw	2	; select bank4/5
  4400  08AE  0087               	movwf	7
  4401  08AF  3F40               	moviw [0]fsr1
  4402  08B0  00A7               	movwf	??_getLoad_AD+3
  4403  08B1  3F41               	moviw [1]fsr1
  4404  08B2  00A8               	movwf	??_getLoad_AD+4
  4405  08B3  0825               	movf	??_getLoad_AD+1,w
  4406  08B4  0228               	subwf	??_getLoad_AD+4,w
  4407  08B5  1D03               	skipz
  4408  08B6  28B9               	goto	u9925
  4409  08B7  0824               	movf	??_getLoad_AD,w
  4410  08B8  0227               	subwf	??_getLoad_AD+3,w
  4411  08B9                     u9925:	
  4412  08B9  1803               	skipnc
  4413  08BA  28CF               	goto	l9846
  4414                           
  4415                           ;OverLoad_B1.c: 25: {
  4416                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4417  08BB  086E               	movf	_Load,w
  4418  08BC  3E32               	addlw	50
  4419  08BD  0086               	movwf	6
  4420  08BE  3002               	movlw	2	; select bank4/5
  4421  08BF  0087               	movwf	7
  4422  08C0  352B               	lslf	getLoad_AD@i,w
  4423  08C1  3E08               	addlw	8
  4424  08C2  076E               	addwf	_Load,w
  4425  08C3  00A4               	movwf	??_getLoad_AD
  4426  08C4  0824               	movf	??_getLoad_AD,w
  4427  08C5  0084               	movwf	4
  4428  08C6  3002               	movlw	2	; select bank4/5
  4429  08C7  0085               	movwf	5
  4430  08C8  3F40               	moviw [0]fsr1
  4431  08C9  3F80               	movwi [0]fsr0
  4432  08CA  3F41               	moviw [1]fsr1
  4433  08CB  3F81               	movwi [1]fsr0
  4434                           
  4435                           ;OverLoad_B1.c: 27: j=1;
  4436  08CC  01AA               	clrf	getLoad_AD@j
  4437  08CD  0AAA               	incf	getLoad_AD@j,f
  4438                           
  4439                           ;OverLoad_B1.c: 28: break;
  4440  08CE  28D7               	goto	l9850
  4441  08CF                     l9846:	
  4442  08CF  3001               	movlw	1
  4443  08D0  00A4               	movwf	??_getLoad_AD
  4444  08D1  0824               	movf	??_getLoad_AD,w
  4445  08D2  07AB               	addwf	getLoad_AD@i,f
  4446  08D3  3005               	movlw	5
  4447  08D4  022B               	subwf	getLoad_AD@i,w
  4448  08D5  1C03               	skipc
  4449  08D6  289E               	goto	l9840
  4450  08D7                     l9850:	
  4451                           
  4452                           ;OverLoad_B1.c: 29: }
  4453                           ;OverLoad_B1.c: 30: }
  4454                           ;OverLoad_B1.c: 31: if(!j)
  4455  08D7  08AA               	movf	getLoad_AD@j,f
  4456  08D8  1D03               	skipz
  4457  08D9  0008               	return
  4458                           
  4459                           ;OverLoad_B1.c: 32: {
  4460                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4461  08DA  01AB               	clrf	getLoad_AD@i
  4462  08DB                     L1:	
  4463  08DB  3005               	movlw	5
  4464  08DC  022B               	subwf	getLoad_AD@i,w
  4465  08DD  1803               	btfsc	3,0
  4466  08DE  0008               	return
  4467                           
  4468                           ;OverLoad_B1.c: 34: {
  4469                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4470  08DF  352B               	lslf	getLoad_AD@i,w
  4471  08E0  3E1A               	addlw	26
  4472  08E1  076E               	addwf	_Load,w
  4473  08E2  00A4               	movwf	??_getLoad_AD
  4474  08E3  0824               	movf	??_getLoad_AD,w
  4475  08E4  0086               	movwf	6
  4476  08E5  3002               	movlw	2	; select bank4/5
  4477  08E6  0087               	movwf	7
  4478  08E7  3F40               	moviw [0]fsr1
  4479  08E8  00A5               	movwf	??_getLoad_AD+1
  4480  08E9  3F41               	moviw [1]fsr1
  4481  08EA  00A6               	movwf	??_getLoad_AD+2
  4482  08EB  086E               	movf	_Load,w
  4483  08EC  3E32               	addlw	50
  4484  08ED  0086               	movwf	6
  4485  08EE  3002               	movlw	2	; select bank4/5
  4486  08EF  0087               	movwf	7
  4487  08F0  3F40               	moviw [0]fsr1
  4488  08F1  00A7               	movwf	??_getLoad_AD+3
  4489  08F2  3F41               	moviw [1]fsr1
  4490  08F3  00A8               	movwf	??_getLoad_AD+4
  4491  08F4  0826               	movf	??_getLoad_AD+2,w
  4492  08F5  0228               	subwf	??_getLoad_AD+4,w
  4493  08F6  1D03               	skipz
  4494  08F7  28FA               	goto	u9965
  4495  08F8  0825               	movf	??_getLoad_AD+1,w
  4496  08F9  0227               	subwf	??_getLoad_AD+3,w
  4497  08FA                     u9965:	
  4498  08FA  1803               	skipnc
  4499  08FB  290E               	goto	l9862
  4500                           
  4501                           ;OverLoad_B1.c: 36: {
  4502                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4503  08FC  086E               	movf	_Load,w
  4504  08FD  3E32               	addlw	50
  4505  08FE  0086               	movwf	6
  4506  08FF  3002               	movlw	2	; select bank4/5
  4507  0900  0087               	movwf	7
  4508  0901  352B               	lslf	getLoad_AD@i,w
  4509  0902  3E1A               	addlw	26
  4510  0903  076E               	addwf	_Load,w
  4511  0904  00A4               	movwf	??_getLoad_AD
  4512  0905  0824               	movf	??_getLoad_AD,w
  4513  0906  0084               	movwf	4
  4514  0907  3002               	movlw	2	; select bank4/5
  4515  0908  0085               	movwf	5
  4516  0909  3F40               	moviw [0]fsr1
  4517  090A  3F80               	movwi [0]fsr0
  4518  090B  3F41               	moviw [1]fsr1
  4519  090C  3F81               	movwi [1]fsr0
  4520                           
  4521                           ;OverLoad_B1.c: 38: break;
  4522  090D  0008               	return
  4523  090E                     l9862:	
  4524  090E  3001               	movlw	1
  4525  090F  00A4               	movwf	??_getLoad_AD
  4526  0910  0824               	movf	??_getLoad_AD,w
  4527  0911  07AB               	addwf	getLoad_AD@i,f
  4528  0912  28DB               	goto	L1
  4529  0913                     __end_of_getLoad_AD:	
  4530                           
  4531                           	psect	text4
  4532  266F                     __ptext4:	
  4533 ;; *************** function _getAD *****************
  4534 ;; Defined at:
  4535 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  adcon0          1    wreg     unsigned char 
  4538 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  2    0[BANK0 ] int 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4550 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;Total ram usage:        4 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    4
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_getLoad_AD
  4561 ;;		_getTemp_AD
  4562 ;;		_getPowerFault_AD
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _getAD
  4568  266F                     _getAD:	
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4572                           ;getAD@adcon0 stored from wreg
  4573  266F  0020               	movlb	0	; select bank0
  4574  2670  00A3               	movwf	getAD@adcon0
  4575                           
  4576                           ;MCU_16f1518_B1.c: 311: ADCON0=adcon0;
  4577  2671  0823               	movf	getAD@adcon0,w
  4578  2672  0021               	movlb	1	; select bank1
  4579  2673  009D               	movwf	29	;volatile
  4580                           
  4581                           ;MCU_16f1518_B1.c: 312: ADCON1=adcon1;
  4582  2674  0020               	movlb	0	; select bank0
  4583  2675  0820               	movf	getAD@adcon1,w
  4584  2676  0021               	movlb	1	; select bank1
  4585  2677  009E               	movwf	30	;volatile
  4586                           
  4587                           ;MCU_16f1518_B1.c: 313: GO_nDONE=1;
  4588  2678  149D               	bsf	29,1	;volatile
  4589  2679                     l1726:	
  4590                           ;MCU_16f1518_B1.c: 314: while(GO_nDONE);
  4591                           
  4592  2679  189D               	btfsc	29,1	;volatile
  4593  267A  2E79               	goto	l1726
  4594                           
  4595                           ;MCU_16f1518_B1.c: 315: return ((ADRESH*256)+ADRESL);
  4596  267B  081C               	movf	28,w	;volatile
  4597  267C  0020               	movlb	0	; select bank0
  4598  267D  01A1               	clrf	?_getAD+1
  4599  267E  07A1               	addwf	?_getAD+1,f
  4600  267F  0021               	movlb	1	; select bank1
  4601  2680  081B               	movf	27,w	;volatile
  4602  2681  0020               	movlb	0	; select bank0
  4603  2682  01A0               	clrf	?_getAD
  4604  2683  07A0               	addwf	?_getAD,f
  4605  2684  0008               	return
  4606  2685                     __end_of_getAD:	
  4607                           
  4608                           	psect	text5
  4609  07FD                     __ptext5:	
  4610 ;; *************** function _Temp_Main *****************
  4611 ;; Defined at:
  4612 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;Total ram usage:        0 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:   10
  4633 ;; This function calls:
  4634 ;;		_setTemp_Main
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _Temp_Main
  4642  07FD                     _Temp_Main:	
  4643                           
  4644                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4648  07FD  318E  26DD         	fcall	_setTemp_Main
  4649  07FF  0008               	return
  4650  0800                     __end_of_Temp_Main:	
  4651                           
  4652                           	psect	text6
  4653  0EDD                     __ptext6:	
  4654 ;; *************** function _setTemp_Main *****************
  4655 ;; Defined at:
  4656 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;		None               void
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;Total ram usage:        3 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    9
  4677 ;; This function calls:
  4678 ;;		_getLoad_Safe
  4679 ;;		_getPF_Safe
  4680 ;;		_setOverTemp_Exceptions
  4681 ;; This function is called by:
  4682 ;;		_Temp_Main
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _setTemp_Main
  4688  0EDD                     _setTemp_Main:	
  4689                           
  4690                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4694  0EDD  087D               	movf	_Temp,w
  4695  0EDE  0086               	movwf	6
  4696  0EDF  3001               	movlw	1	; select bank2/3
  4697  0EE0  0087               	movwf	7
  4698  0EE1  1C01               	btfss	1,0
  4699  0EE2  0008               	return
  4700                           
  4701                           ;OverTemperature_B1.c: 67: {
  4702                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4703  0EE3  087D               	movf	_Temp,w
  4704  0EE4  0086               	movwf	6
  4705  0EE5  3001               	movlw	1	; select bank2/3
  4706  0EE6  0087               	movwf	7
  4707  0EE7  1901               	btfsc	1,2
  4708  0EE8  2F29               	goto	l9474
  4709                           
  4710                           ;OverTemperature_B1.c: 69: {
  4711                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4712  0EE9  0A7D               	incf	_Temp,w
  4713  0EEA  0086               	movwf	6
  4714  0EEB  3001               	movlw	1	; select bank2/3
  4715  0EEC  0087               	movwf	7
  4716  0EED  3001               	movlw	1
  4717  0EEE  0781               	addwf	1,f
  4718  0EEF  3141               	addfsr 1,1
  4719  0EF0  1803               	skipnc
  4720  0EF1  0A81               	incf	1,f
  4721                           
  4722                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4723  0EF2  0A7D               	incf	_Temp,w
  4724  0EF3  0086               	movwf	6
  4725  0EF4  3001               	movlw	1	; select bank2/3
  4726  0EF5  0087               	movwf	7
  4727  0EF6  3F40               	moviw [0]fsr1
  4728  0EF7  0020               	movlb	0	; select bank0
  4729  0EF8  00AD               	movwf	??_setTemp_Main
  4730  0EF9  3F41               	moviw [1]fsr1
  4731  0EFA  00AE               	movwf	??_setTemp_Main+1
  4732  0EFB  3001               	movlw	1
  4733  0EFC  022E               	subwf	??_setTemp_Main+1,w
  4734  0EFD  30F4               	movlw	244
  4735  0EFE  1903               	skipnz
  4736  0EFF  022D               	subwf	??_setTemp_Main,w
  4737  0F00  1C03               	skipc
  4738  0F01  0008               	return
  4739                           
  4740                           ;OverTemperature_B1.c: 72: {
  4741                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4742  0F02  31A4  2470  318E   	fcall	_getLoad_Safe
  4743  0F05  3A00               	xorlw	0
  4744  0F06  1903               	skipnz
  4745  0F07  2F20               	goto	l9472
  4746  0F08  31A3  23EF  318E   	fcall	_getPF_Safe
  4747  0F0B  3A00               	xorlw	0
  4748  0F0C  1903               	skipnz
  4749  0F0D  2F20               	goto	l9472
  4750                           
  4751                           ;OverTemperature_B1.c: 74: {
  4752                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4753  0F0E  0A7D               	incf	_Temp,w
  4754  0F0F  0086               	movwf	6
  4755  0F10  3001               	movlw	1	; select bank2/3
  4756  0F11  0087               	movwf	7
  4757  0F12  3000               	movlw	0
  4758  0F13  3FC0               	movwi [0]fsr1
  4759  0F14  3FC1               	movwi [1]fsr1
  4760                           
  4761                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4762  0F15  087D               	movf	_Temp,w
  4763  0F16  0086               	movwf	6
  4764  0F17  3001               	movlw	1	; select bank2/3
  4765  0F18  0087               	movwf	7
  4766  0F19  1501               	bsf	1,2
  4767                           
  4768                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4769  0F1A  087D               	movf	_Temp,w
  4770  0F1B  0086               	movwf	6
  4771  0F1C  3001               	movlw	1	; select bank2/3
  4772  0F1D  0087               	movwf	7
  4773  0F1E  1201               	bcf	1,4
  4774                           
  4775                           ;OverTemperature_B1.c: 78: }
  4776  0F1F  0008               	return
  4777  0F20                     l9472:	
  4778                           
  4779                           ;OverTemperature_B1.c: 79: else
  4780                           ;OverTemperature_B1.c: 80: {
  4781                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4782  0F20  0A7D               	incf	_Temp,w
  4783  0F21  0086               	movwf	6
  4784  0F22  3001               	movlw	1	; select bank2/3
  4785  0F23  0087               	movwf	7
  4786  0F24  30E8               	movlw	232
  4787  0F25  3FC0               	movwi [0]fsr1
  4788  0F26  3003               	movlw	3
  4789  0F27  3FC1               	movwi [1]fsr1
  4790                           
  4791                           ;OverTemperature_B1.c: 82: }
  4792                           ;OverTemperature_B1.c: 83: }
  4793                           ;OverTemperature_B1.c: 84: }
  4794  0F28  0008               	return
  4795  0F29                     l9474:	
  4796                           
  4797                           ;OverTemperature_B1.c: 85: else
  4798                           ;OverTemperature_B1.c: 86: {
  4799                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4800  0F29  0A7D               	incf	_Temp,w
  4801  0F2A  0086               	movwf	6
  4802  0F2B  3001               	movlw	1	; select bank2/3
  4803  0F2C  0087               	movwf	7
  4804  0F2D  3001               	movlw	1
  4805  0F2E  0781               	addwf	1,f
  4806  0F2F  3141               	addfsr 1,1
  4807  0F30  1803               	skipnc
  4808  0F31  0A81               	incf	1,f
  4809                           
  4810                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4811  0F32  0A7D               	incf	_Temp,w
  4812  0F33  0086               	movwf	6
  4813  0F34  3001               	movlw	1	; select bank2/3
  4814  0F35  0087               	movwf	7
  4815  0F36  3F40               	moviw [0]fsr1
  4816  0F37  0020               	movlb	0	; select bank0
  4817  0F38  00AD               	movwf	??_setTemp_Main
  4818  0F39  3F41               	moviw [1]fsr1
  4819  0F3A  00AE               	movwf	??_setTemp_Main+1
  4820  0F3B  3000               	movlw	0
  4821  0F3C  022E               	subwf	??_setTemp_Main+1,w
  4822  0F3D  3004               	movlw	4
  4823  0F3E  1903               	skipnz
  4824  0F3F  022D               	subwf	??_setTemp_Main,w
  4825  0F40  1C03               	skipc
  4826  0F41  0008               	return
  4827                           
  4828                           ;OverTemperature_B1.c: 89: {
  4829                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4830  0F42  0A7D               	incf	_Temp,w
  4831  0F43  0086               	movwf	6
  4832  0F44  3001               	movlw	1	; select bank2/3
  4833  0F45  0087               	movwf	7
  4834  0F46  3000               	movlw	0
  4835  0F47  3FC0               	movwi [0]fsr1
  4836  0F48  3FC1               	movwi [1]fsr1
  4837                           
  4838                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4839  0F49  087D               	movf	_Temp,w
  4840  0F4A  0086               	movwf	6
  4841  0F4B  3001               	movlw	1	; select bank2/3
  4842  0F4C  0087               	movwf	7
  4843  0F4D  1101               	bcf	1,2
  4844                           
  4845                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4846  0F4E  087D               	movf	_Temp,w
  4847  0F4F  3E08               	addlw	8
  4848  0F50  0086               	movwf	6
  4849  0F51  3001               	movlw	1	; select bank2/3
  4850  0F52  0087               	movwf	7
  4851  0F53  087D               	movf	_Temp,w
  4852  0F54  3E04               	addlw	4
  4853  0F55  0084               	movwf	4
  4854  0F56  3001               	movlw	1	; select bank2/3
  4855  0F57  0085               	movwf	5
  4856  0F58  3F40               	moviw [0]fsr1
  4857  0F59  3F80               	movwi [0]fsr0
  4858  0F5A  3F41               	moviw [1]fsr1
  4859  0F5B  3F81               	movwi [1]fsr0
  4860                           
  4861                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4862  0F5C  087D               	movf	_Temp,w
  4863  0F5D  0086               	movwf	6
  4864  0F5E  3001               	movlw	1	; select bank2/3
  4865  0F5F  0087               	movwf	7
  4866  0F60  1C81               	btfss	1,1
  4867  0F61  2F8F               	goto	l9496
  4868                           
  4869                           ;OverTemperature_B1.c: 94: {
  4870                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 540)
  4871  0F62  087D               	movf	_Temp,w
  4872  0F63  3E04               	addlw	4
  4873  0F64  0086               	movwf	6
  4874  0F65  3001               	movlw	1	; select bank2/3
  4875  0F66  0087               	movwf	7
  4876  0F67  3F40               	moviw [0]fsr1
  4877  0F68  00AD               	movwf	??_setTemp_Main
  4878  0F69  3F41               	moviw [1]fsr1
  4879  0F6A  00AE               	movwf	??_setTemp_Main+1
  4880  0F6B  3002               	movlw	2
  4881  0F6C  022E               	subwf	??_setTemp_Main+1,w
  4882  0F6D  301C               	movlw	28
  4883  0F6E  1903               	skipnz
  4884  0F6F  022D               	subwf	??_setTemp_Main,w
  4885  0F70  1C03               	skipc
  4886  0F71  2FBD               	goto	l9506
  4887                           
  4888                           ;OverTemperature_B1.c: 96: {
  4889                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4890  0F72  3001               	movlw	1
  4891  0F73  00AD               	movwf	??_setTemp_Main
  4892  0F74  087D               	movf	_Temp,w
  4893  0F75  3E03               	addlw	3
  4894  0F76  0086               	movwf	6
  4895  0F77  3001               	movlw	1	; select bank2/3
  4896  0F78  0087               	movwf	7
  4897  0F79  082D               	movf	??_setTemp_Main,w
  4898  0F7A  0781               	addwf	1,f
  4899                           
  4900                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4901  0F7B  087D               	movf	_Temp,w
  4902  0F7C  3E03               	addlw	3
  4903  0F7D  0086               	movwf	6
  4904  0F7E  3001               	movlw	1	; select bank2/3
  4905  0F7F  0087               	movwf	7
  4906  0F80  3003               	movlw	3
  4907  0F81  0201               	subwf	1,w
  4908  0F82  1C03               	skipc
  4909  0F83  2FC3               	goto	l9508
  4910                           
  4911                           ;OverTemperature_B1.c: 99: {
  4912                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4913  0F84  087D               	movf	_Temp,w
  4914  0F85  3E03               	addlw	3
  4915  0F86  0086               	movwf	6
  4916  0F87  3001               	movlw	1	; select bank2/3
  4917  0F88  0087               	movwf	7
  4918  0F89  0181               	clrf	1
  4919                           
  4920                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4921  0F8A  3000               	movlw	0
  4922  0F8B  3190  2000  318E   	fcall	_setOverTemp_Exceptions
  4923                           
  4924                           ;OverTemperature_B1.c: 102: }
  4925                           ;OverTemperature_B1.c: 103: }
  4926  0F8E  2FC3               	goto	l9508
  4927  0F8F                     l9496:	
  4928                           ;OverTemperature_B1.c: 107: }
  4929                           ;OverTemperature_B1.c: 108: }
  4930                           
  4931                           ;OverTemperature_B1.c: 104: else
  4932                           ;OverTemperature_B1.c: 105: {
  4933                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4934                           
  4935                           
  4936                           ;OverTemperature_B1.c: 109: else
  4937                           ;OverTemperature_B1.c: 110: {
  4938                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 475)
  4939  0F8F  087D               	movf	_Temp,w
  4940  0F90  3E04               	addlw	4
  4941  0F91  0086               	movwf	6
  4942  0F92  3001               	movlw	1	; select bank2/3
  4943  0F93  0087               	movwf	7
  4944  0F94  3F40               	moviw [0]fsr1
  4945  0F95  0020               	movlb	0	; select bank0
  4946  0F96  00AD               	movwf	??_setTemp_Main
  4947  0F97  3F41               	moviw [1]fsr1
  4948  0F98  00AE               	movwf	??_setTemp_Main+1
  4949  0F99  3001               	movlw	1
  4950  0F9A  022E               	subwf	??_setTemp_Main+1,w
  4951  0F9B  30DC               	movlw	220
  4952  0F9C  1903               	skipnz
  4953  0F9D  022D               	subwf	??_setTemp_Main,w
  4954  0F9E  1803               	skipnc
  4955  0F9F  2FBD               	goto	l9506
  4956                           
  4957                           ;OverTemperature_B1.c: 112: {
  4958                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4959  0FA0  3001               	movlw	1
  4960  0FA1  00AD               	movwf	??_setTemp_Main
  4961  0FA2  087D               	movf	_Temp,w
  4962  0FA3  3E03               	addlw	3
  4963  0FA4  0086               	movwf	6
  4964  0FA5  3001               	movlw	1	; select bank2/3
  4965  0FA6  0087               	movwf	7
  4966  0FA7  082D               	movf	??_setTemp_Main,w
  4967  0FA8  0781               	addwf	1,f
  4968                           
  4969                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4970  0FA9  087D               	movf	_Temp,w
  4971  0FAA  3E03               	addlw	3
  4972  0FAB  0086               	movwf	6
  4973  0FAC  3001               	movlw	1	; select bank2/3
  4974  0FAD  0087               	movwf	7
  4975  0FAE  3003               	movlw	3
  4976  0FAF  0201               	subwf	1,w
  4977  0FB0  1C03               	skipc
  4978  0FB1  2FC3               	goto	l9508
  4979                           
  4980                           ;OverTemperature_B1.c: 115: {
  4981                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4982  0FB2  087D               	movf	_Temp,w
  4983  0FB3  3E03               	addlw	3
  4984  0FB4  0086               	movwf	6
  4985  0FB5  3001               	movlw	1	; select bank2/3
  4986  0FB6  0087               	movwf	7
  4987  0FB7  0181               	clrf	1
  4988                           
  4989                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4990  0FB8  3001               	movlw	1
  4991  0FB9  3190  2000  318E   	fcall	_setOverTemp_Exceptions
  4992                           
  4993                           ;OverTemperature_B1.c: 118: }
  4994                           ;OverTemperature_B1.c: 119: }
  4995  0FBC  2FC3               	goto	l9508
  4996  0FBD                     l9506:	
  4997                           
  4998                           ;OverTemperature_B1.c: 120: else
  4999                           ;OverTemperature_B1.c: 121: {
  5000                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5001  0FBD  087D               	movf	_Temp,w
  5002  0FBE  3E03               	addlw	3
  5003  0FBF  0086               	movwf	6
  5004  0FC0  3001               	movlw	1	; select bank2/3
  5005  0FC1  0087               	movwf	7
  5006  0FC2  0181               	clrf	1
  5007  0FC3                     l9508:	
  5008                           
  5009                           ;OverTemperature_B1.c: 123: }
  5010                           ;OverTemperature_B1.c: 124: }
  5011                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5012  0FC3  087D               	movf	_Temp,w
  5013  0FC4  0086               	movwf	6
  5014  0FC5  3001               	movlw	1	; select bank2/3
  5015  0FC6  0087               	movwf	7
  5016  0FC7  1881               	btfsc	1,1
  5017  0FC8  2FCE               	goto	l9512
  5018                           
  5019                           ;OverTemperature_B1.c: 126: {
  5020                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5021  0FC9  087D               	movf	_Temp,w
  5022  0FCA  0086               	movwf	6
  5023  0FCB  3001               	movlw	1	; select bank2/3
  5024  0FCC  0087               	movwf	7
  5025  0FCD  1601               	bsf	1,4
  5026  0FCE                     l9512:	
  5027                           
  5028                           ;OverTemperature_B1.c: 128: }
  5029                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5030  0FCE  087D               	movf	_Temp,w
  5031  0FCF  3E04               	addlw	4
  5032  0FD0  0086               	movwf	6
  5033  0FD1  3001               	movlw	1	; select bank2/3
  5034  0FD2  0087               	movwf	7
  5035  0FD3  3F40               	moviw [0]fsr1
  5036  0FD4  0020               	movlb	0	; select bank0
  5037  0FD5  00AD               	movwf	??_setTemp_Main
  5038  0FD6  3F41               	moviw [1]fsr1
  5039  0FD7  00AE               	movwf	??_setTemp_Main+1
  5040  0FD8  082E               	movf	??_setTemp_Main+1,w
  5041  0FD9  00AF               	movwf	??_setTemp_Main+2
  5042  0FDA  086F               	movf	_Product,w
  5043  0FDB  3E18               	addlw	24
  5044  0FDC  0086               	movwf	6
  5045  0FDD  3001               	movlw	1	; select bank2/3
  5046  0FDE  0087               	movwf	7
  5047  0FDF  082F               	movf	??_setTemp_Main+2,w
  5048  0FE0  0081               	movwf	1
  5049                           
  5050                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5051  0FE1  087D               	movf	_Temp,w
  5052  0FE2  3E04               	addlw	4
  5053  0FE3  0086               	movwf	6
  5054  0FE4  3001               	movlw	1	; select bank2/3
  5055  0FE5  0087               	movwf	7
  5056  0FE6  0801               	movf	1,w
  5057  0FE7  00AD               	movwf	??_setTemp_Main
  5058  0FE8  086F               	movf	_Product,w
  5059  0FE9  3E19               	addlw	25
  5060  0FEA  0086               	movwf	6
  5061  0FEB  3001               	movlw	1	; select bank2/3
  5062  0FEC  0087               	movwf	7
  5063  0FED  082D               	movf	??_setTemp_Main,w
  5064  0FEE  0081               	movwf	1
  5065                           
  5066                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5067  0FEF  087D               	movf	_Temp,w
  5068  0FF0  3E06               	addlw	6
  5069  0FF1  0086               	movwf	6
  5070  0FF2  3001               	movlw	1	; select bank2/3
  5071  0FF3  0087               	movwf	7
  5072  0FF4  3000               	movlw	0
  5073  0FF5  3FC0               	movwi [0]fsr1
  5074  0FF6  3FC1               	movwi [1]fsr1
  5075                           
  5076                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5077  0FF7  087D               	movf	_Temp,w
  5078  0FF8  3E08               	addlw	8
  5079  0FF9  0086               	movwf	6
  5080  0FFA  3001               	movlw	1	; select bank2/3
  5081  0FFB  0087               	movwf	7
  5082  0FFC  3000               	movlw	0
  5083  0FFD  3FC0               	movwi [0]fsr1
  5084  0FFE  3FC1               	movwi [1]fsr1
  5085  0FFF  0008               	return
  5086  1000                     __end_of_setTemp_Main:	
  5087                           
  5088                           	psect	text7
  5089  1000                     __ptext7:	
  5090 ;; *************** function _setOverTemp_Exceptions *****************
  5091 ;; Defined at:
  5092 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  command         1    wreg     unsigned char 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  command         1   12[BANK0 ] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;		None               void
  5099 ;; Registers used:
  5100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        2 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    8
  5113 ;; This function calls:
  5114 ;;		_DimmerLights_Exceptions
  5115 ;;		_setBuz
  5116 ;;		_setLED
  5117 ;;		_setRF_Enable
  5118 ;;		_setSw_Enable
  5119 ;; This function is called by:
  5120 ;;		_setTemp_Main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           
  5125                           ;psect for function _setOverTemp_Exceptions
  5126  1000                     _setOverTemp_Exceptions:	
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5130                           ;setOverTemp_Exceptions@command stored from wreg
  5131  1000  0020               	movlb	0	; select bank0
  5132  1001  00AC               	movwf	setOverTemp_Exceptions@command
  5133                           
  5134                           ;OverTemperature_B1.c: 140: if(command)
  5135  1002  082C               	movf	setOverTemp_Exceptions@command,w
  5136  1003  1903               	btfsc	3,2
  5137  1004  280A               	goto	l9110
  5138                           
  5139                           ;OverTemperature_B1.c: 141: {
  5140                           ;OverTemperature_B1.c: 142: DimmerLights_Exceptions(1);
  5141  1005  3001               	movlw	1
  5142  1006  3191  21C6  3190   	fcall	_DimmerLights_Exceptions
  5143  1009  0020               	movlb	0	; select bank0
  5144  100A                     l9110:	
  5145                           
  5146                           ;OverTemperature_B1.c: 143: }
  5147                           ;OverTemperature_B1.c: 144: Temp->ERROR=command;
  5148  100A  087D               	movf	_Temp,w
  5149  100B  0086               	movwf	6
  5150  100C  3001               	movlw	1	; select bank2/3
  5151  100D  0087               	movwf	7
  5152  100E  0020               	movlb	0	; select bank0
  5153  100F  082C               	movf	setOverTemp_Exceptions@command,w
  5154  1010  1081               	bcf	1,1
  5155  1011  1D03               	skipz
  5156  1012  1481               	bsf	1,1
  5157                           
  5158                           ;OverTemperature_B1.c: 146: setLED(99,command+10);
  5159  1013  082C               	movf	setOverTemp_Exceptions@command,w
  5160  1014  3E0A               	addlw	10
  5161  1015  00AB               	movwf	??_setOverTemp_Exceptions
  5162  1016  082B               	movf	??_setOverTemp_Exceptions,w
  5163  1017  00A2               	movwf	setLED@command
  5164  1018  3063               	movlw	99
  5165  1019  3190  2042  3190   	fcall	_setLED
  5166                           
  5167                           ;OverTemperature_B1.c: 148: Temp->Safe=(~command) & 0x01;
  5168  101C  0020               	movlb	0	; select bank0
  5169  101D  092C               	comf	setOverTemp_Exceptions@command,w
  5170  101E  3901               	andlw	1
  5171  101F  00AB               	movwf	??_setOverTemp_Exceptions
  5172  1020  087D               	movf	_Temp,w
  5173  1021  0086               	movwf	6
  5174  1022  3001               	movlw	1	; select bank2/3
  5175  1023  0087               	movwf	7
  5176  1024  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5177  1025  0801               	movf	1,w
  5178  1026  062B               	xorwf	??_setOverTemp_Exceptions,w
  5179  1027  39EF               	andlw	-17
  5180  1028  062B               	xorwf	??_setOverTemp_Exceptions,w
  5181  1029  0081               	movwf	1
  5182                           
  5183                           ;OverTemperature_B1.c: 149: setSw_Enable((~command) & 0x01);
  5184  102A  092C               	comf	setOverTemp_Exceptions@command,w
  5185  102B  3901               	andlw	1
  5186  102C  31A7  2768  3190   	fcall	_setSw_Enable
  5187                           
  5188                           ;OverTemperature_B1.c: 152: setRF_Enable(1,(~command) & 0x01);
  5189  102F  0020               	movlb	0	; select bank0
  5190  1030  092C               	comf	setOverTemp_Exceptions@command,w
  5191  1031  3901               	andlw	1
  5192  1032  00AB               	movwf	??_setOverTemp_Exceptions
  5193  1033  082B               	movf	??_setOverTemp_Exceptions,w
  5194  1034  00A4               	movwf	setRF_Enable@command
  5195  1035  3001               	movlw	1
  5196  1036  319B  2337  3190   	fcall	_setRF_Enable
  5197                           
  5198                           ;OverTemperature_B1.c: 155: setBuz(2,100);
  5199  1039  3064               	movlw	100
  5200  103A  0020               	movlb	0	; select bank0
  5201  103B  00A6               	movwf	setBuz@time
  5202  103C  3000               	movlw	0
  5203  103D  00A7               	movwf	setBuz@time+1
  5204  103E  3002               	movlw	2
  5205  103F  3193  23E5         	fcall	_setBuz
  5206  1041  0008               	return
  5207  1042                     __end_of_setOverTemp_Exceptions:	
  5208                           
  5209                           	psect	text8
  5210  2396                     __ptext8:	
  5211 ;; *************** function _Temp_Initialization *****************
  5212 ;; Defined at:
  5213 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;		None               void
  5220 ;; Registers used:
  5221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;Total ram usage:        0 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    5
  5234 ;; This function calls:
  5235 ;;		_setTemp_Initialization
  5236 ;; This function is called by:
  5237 ;;		_main
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _Temp_Initialization
  5243  2396                     _Temp_Initialization:	
  5244                           
  5245                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5249  2396  31A4  247B         	fcall	_setTemp_Initialization
  5250  2398  0008               	return
  5251  2399                     __end_of_Temp_Initialization:	
  5252                           
  5253                           	psect	text9
  5254  247B                     __ptext9:	
  5255 ;; *************** function _setTemp_Initialization *****************
  5256 ;; Defined at:
  5257 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;		None               void
  5264 ;; Registers used:
  5265 ;;		wreg, fsr1l, fsr1h
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;Total ram usage:        1 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    4
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_Temp_Initialization
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _setTemp_Initialization
  5287  247B                     _setTemp_Initialization:	
  5288                           
  5289                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5293  247B  3020               	movlw	_Temp1& (0+255)
  5294  247C  0020               	movlb	0	; select bank0
  5295  247D  00A0               	movwf	??_setTemp_Initialization
  5296  247E  0820               	movf	??_setTemp_Initialization,w
  5297  247F  00FD               	movwf	_Temp
  5298                           
  5299                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5300  2480  087D               	movf	_Temp,w
  5301  2481  0086               	movwf	6
  5302  2482  3001               	movlw	1	; select bank2/3
  5303  2483  0087               	movwf	7
  5304  2484  1601               	bsf	1,4
  5305  2485  0008               	return
  5306  2486                     __end_of_setTemp_Initialization:	
  5307                           
  5308                           	psect	text10
  5309  23FF                     __ptext10:	
  5310 ;; *************** function _Switch_Main *****************
  5311 ;; Defined at:
  5312 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    8
  5333 ;; This function calls:
  5334 ;;		_setSw_Main
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _Switch_Main
  5342  23FF                     _Switch_Main:	
  5343                           
  5344                           ;Switch_B1.c: 65: setSw_Main(1);
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5348  23FF  3001               	movlw	1
  5349  2400  3186  2650  31A3   	fcall	_setSw_Main
  5350                           
  5351                           ;Switch_B1.c: 69: setSw_Main(2);
  5352  2403  3002               	movlw	2
  5353  2404  3186  2650         	fcall	_setSw_Main
  5354  2406  0008               	return
  5355  2407                     __end_of_Switch_Main:	
  5356                           
  5357                           	psect	text11
  5358  0650                     __ptext11:	
  5359 ;; *************** function _setSw_Main *****************
  5360 ;; Defined at:
  5361 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1   15[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        5 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    7
  5382 ;; This function calls:
  5383 ;;		_SwPointSelect
  5384 ;;		_Sw_DimmerAdjFunc
  5385 ;;		_Sw_DimmerOffFunc
  5386 ;;		_Sw_DimmerOnFunc
  5387 ;;		_setBuz
  5388 ;;		_setRF_Learn
  5389 ;; This function is called by:
  5390 ;;		_Switch_Main
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _setSw_Main
  5396  0650                     _setSw_Main:	
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5400                           ;setSw_Main@sw stored from wreg
  5401  0650  0020               	movlb	0	; select bank0
  5402  0651  00AF               	movwf	setSw_Main@sw
  5403                           
  5404                           ;Switch_B1.c: 114: if(Sw->Enable)
  5405  0652  086D               	movf	_Sw,w
  5406  0653  0086               	movwf	6
  5407  0654  3001               	movlw	1	; select bank2/3
  5408  0655  0087               	movwf	7
  5409  0656  1C01               	btfss	1,0
  5410  0657  0008               	return
  5411                           
  5412                           ;Switch_B1.c: 115: {
  5413                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5414  0658  082F               	movf	setSw_Main@sw,w
  5415  0659  31A5  25F2  3186   	fcall	_SwPointSelect
  5416                           
  5417                           ;Switch_B1.c: 133: if(sw == 1)
  5418  065C  0020               	movlb	0	; select bank0
  5419  065D  082F               	movf	setSw_Main@sw,w
  5420  065E  3A01               	xorlw	1
  5421  065F  1D03               	skipz
  5422  0660  2E6D               	goto	l9650
  5423                           
  5424                           ;Switch_B1.c: 134: {
  5425                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  5426  0661  01AD               	clrf	_setSw_Main$4710
  5427  0662  0AAD               	incf	_setSw_Main$4710,f
  5428  0663  1F0C               	btfss	12,6	;volatile
  5429  0664  1A0C               	btfsc	12,4	;volatile
  5430  0665  2E67               	goto	l9648
  5431  0666  01AD               	clrf	_setSw_Main$4710
  5432  0667                     l9648:	
  5433  0667  086D               	movf	_Sw,w
  5434  0668  0086               	movwf	6
  5435  0669  3001               	movlw	1	; select bank2/3
  5436  066A  0087               	movwf	7
  5437  066B  082D               	movf	_setSw_Main$4710,w
  5438  066C  2E7C               	goto	L2
  5439  066D                     l9650:	
  5440                           ;Switch_B1.c: 136: }
  5441                           
  5442                           
  5443                           ;Switch_B1.c: 137: else if(sw == 2)
  5444  066D  082F               	movf	setSw_Main@sw,w
  5445  066E  3A02               	xorlw	2
  5446  066F  1D03               	skipz
  5447  0670  2E7F               	goto	l9660
  5448                           
  5449                           ;Switch_B1.c: 138: {
  5450                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  5451  0671  01AE               	clrf	_setSw_Main$4711
  5452  0672  0AAE               	incf	_setSw_Main$4711,f
  5453  0673  1C0C               	btfss	12,0	;volatile
  5454  0674  188D               	btfsc	13,1	;volatile
  5455  0675  2E77               	goto	l9658
  5456  0676  01AE               	clrf	_setSw_Main$4711
  5457  0677                     l9658:	
  5458  0677  086D               	movf	_Sw,w
  5459  0678  0086               	movwf	6
  5460  0679  3001               	movlw	1	; select bank2/3
  5461  067A  0087               	movwf	7
  5462  067B  082E               	movf	_setSw_Main$4711,w
  5463  067C                     L2:	
  5464  067C  1081               	bcf	1,1
  5465  067D  1D03               	skipz
  5466  067E  1481               	bsf	1,1
  5467  067F                     l9660:	
  5468                           
  5469                           ;Switch_B1.c: 140: }
  5470                           ;Switch_B1.c: 148: if(Sw->Touch)
  5471  067F  086D               	movf	_Sw,w
  5472  0680  0086               	movwf	6
  5473  0681  3001               	movlw	1	; select bank2/3
  5474  0682  0087               	movwf	7
  5475  0683  1C81               	btfss	1,1
  5476  0684  2F5F               	goto	l9710
  5477                           
  5478                           ;Switch_B1.c: 149: {
  5479                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5480  0685  086D               	movf	_Sw,w
  5481  0686  0086               	movwf	6
  5482  0687  3001               	movlw	1	; select bank2/3
  5483  0688  0087               	movwf	7
  5484  0689  1901               	btfsc	1,2
  5485  068A  2EB5               	goto	l9676
  5486                           
  5487                           ;Switch_B1.c: 151: {
  5488                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5489  068B  3001               	movlw	1
  5490  068C  00AB               	movwf	??_setSw_Main
  5491  068D  086D               	movf	_Sw,w
  5492  068E  3E02               	addlw	2
  5493  068F  0086               	movwf	6
  5494  0690  3001               	movlw	1	; select bank2/3
  5495  0691  0087               	movwf	7
  5496  0692  082B               	movf	??_setSw_Main,w
  5497  0693  0781               	addwf	1,f
  5498                           
  5499                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5500  0694  086D               	movf	_Sw,w
  5501  0695  3E02               	addlw	2
  5502  0696  0086               	movwf	6
  5503  0697  3001               	movlw	1	; select bank2/3
  5504  0698  0087               	movwf	7
  5505  0699  3005               	movlw	5
  5506  069A  0201               	subwf	1,w
  5507  069B  1C03               	skipc
  5508  069C  0008               	return
  5509                           
  5510                           ;Switch_B1.c: 154: {
  5511                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5512  069D  086D               	movf	_Sw,w
  5513  069E  3E02               	addlw	2
  5514  069F  0086               	movwf	6
  5515  06A0  3001               	movlw	1	; select bank2/3
  5516  06A1  0087               	movwf	7
  5517  06A2  0181               	clrf	1
  5518                           
  5519                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5520  06A3  086D               	movf	_Sw,w
  5521  06A4  0086               	movwf	6
  5522  06A5  3001               	movlw	1	; select bank2/3
  5523  06A6  0087               	movwf	7
  5524  06A7  1501               	bsf	1,2
  5525                           
  5526                           ;Switch_B1.c: 157: setBuz(1,100);
  5527  06A8  3064               	movlw	100
  5528  06A9  00A6               	movwf	setBuz@time
  5529  06AA  3000               	movlw	0
  5530  06AB  00A7               	movwf	setBuz@time+1
  5531  06AC  3001               	movlw	1
  5532  06AD  3193  23E5  3186   	fcall	_setBuz
  5533                           
  5534                           ;Switch_B1.c: 160: Sw_DimmerOnFunc(sw);
  5535  06B0  0020               	movlb	0	; select bank0
  5536  06B1  082F               	movf	setSw_Main@sw,w
  5537  06B2  3187  27B4         	fcall	_Sw_DimmerOnFunc
  5538                           
  5539                           ;Switch_B1.c: 163: }
  5540                           ;Switch_B1.c: 164: }
  5541  06B4  0008               	return
  5542  06B5                     l9676:	
  5543                           
  5544                           ;Switch_B1.c: 165: else
  5545                           ;Switch_B1.c: 166: {
  5546                           ;Switch_B1.c: 167: if(!Sw->Hold1)
  5547  06B5  0020               	movlb	0	; select bank0
  5548  06B6  086D               	movf	_Sw,w
  5549  06B7  0086               	movwf	6
  5550  06B8  3001               	movlw	1	; select bank2/3
  5551  06B9  0087               	movwf	7
  5552  06BA  1981               	btfsc	1,3
  5553  06BB  2EE7               	goto	l9686
  5554                           
  5555                           ;Switch_B1.c: 168: {
  5556                           ;Switch_B1.c: 169: Sw->Hold1Time++;
  5557  06BC  086D               	movf	_Sw,w
  5558  06BD  3E03               	addlw	3
  5559  06BE  0086               	movwf	6
  5560  06BF  3001               	movlw	1	; select bank2/3
  5561  06C0  0087               	movwf	7
  5562  06C1  3001               	movlw	1
  5563  06C2  0781               	addwf	1,f
  5564  06C3  3141               	addfsr 1,1
  5565  06C4  1803               	skipnc
  5566  06C5  0A81               	incf	1,f
  5567                           
  5568                           ;Switch_B1.c: 170: if(Sw->Hold1Time >= 150)
  5569  06C6  086D               	movf	_Sw,w
  5570  06C7  3E03               	addlw	3
  5571  06C8  0086               	movwf	6
  5572  06C9  3001               	movlw	1	; select bank2/3
  5573  06CA  0087               	movwf	7
  5574  06CB  3F40               	moviw [0]fsr1
  5575  06CC  00AB               	movwf	??_setSw_Main
  5576  06CD  3F41               	moviw [1]fsr1
  5577  06CE  00AC               	movwf	??_setSw_Main+1
  5578  06CF  3000               	movlw	0
  5579  06D0  022C               	subwf	??_setSw_Main+1,w
  5580  06D1  3096               	movlw	150
  5581  06D2  1903               	skipnz
  5582  06D3  022B               	subwf	??_setSw_Main,w
  5583  06D4  1C03               	skipc
  5584  06D5  0008               	return
  5585                           
  5586                           ;Switch_B1.c: 171: {
  5587                           ;Switch_B1.c: 172: Sw->Hold1Time=0;
  5588  06D6  086D               	movf	_Sw,w
  5589  06D7  3E03               	addlw	3
  5590  06D8  0086               	movwf	6
  5591  06D9  3001               	movlw	1	; select bank2/3
  5592  06DA  0087               	movwf	7
  5593  06DB  3000               	movlw	0
  5594  06DC  3FC0               	movwi [0]fsr1
  5595  06DD  3FC1               	movwi [1]fsr1
  5596                           
  5597                           ;Switch_B1.c: 173: Sw->Hold1=1;
  5598  06DE  086D               	movf	_Sw,w
  5599  06DF  0086               	movwf	6
  5600  06E0  3001               	movlw	1	; select bank2/3
  5601  06E1  0087               	movwf	7
  5602  06E2  1581               	bsf	1,3
  5603                           
  5604                           ;Switch_B1.c: 176: Sw_DimmerAdjFunc(sw);
  5605  06E3  082F               	movf	setSw_Main@sw,w
  5606  06E4  3199  2138         	fcall	_Sw_DimmerAdjFunc
  5607                           
  5608                           ;Switch_B1.c: 179: }
  5609                           ;Switch_B1.c: 180: }
  5610  06E6  0008               	return
  5611  06E7                     l9686:	
  5612                           
  5613                           ;Switch_B1.c: 181: else
  5614                           ;Switch_B1.c: 182: {
  5615                           ;Switch_B1.c: 183: if(!Sw->Hold2)
  5616  06E7  0020               	movlb	0	; select bank0
  5617  06E8  086D               	movf	_Sw,w
  5618  06E9  0086               	movwf	6
  5619  06EA  3001               	movlw	1	; select bank2/3
  5620  06EB  0087               	movwf	7
  5621  06EC  1A01               	btfsc	1,4
  5622  06ED  2F2C               	goto	l9700
  5623                           
  5624                           ;Switch_B1.c: 184: {
  5625                           ;Switch_B1.c: 185: Sw->Hold2Time++;
  5626  06EE  086D               	movf	_Sw,w
  5627  06EF  3E05               	addlw	5
  5628  06F0  0086               	movwf	6
  5629  06F1  3001               	movlw	1	; select bank2/3
  5630  06F2  0087               	movwf	7
  5631  06F3  3001               	movlw	1
  5632  06F4  0781               	addwf	1,f
  5633  06F5  3141               	addfsr 1,1
  5634  06F6  1803               	skipnc
  5635  06F7  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 186: if(Sw->Hold2Time >= 150)
  5638  06F8  086D               	movf	_Sw,w
  5639  06F9  3E05               	addlw	5
  5640  06FA  0086               	movwf	6
  5641  06FB  3001               	movlw	1	; select bank2/3
  5642  06FC  0087               	movwf	7
  5643  06FD  3F40               	moviw [0]fsr1
  5644  06FE  00AB               	movwf	??_setSw_Main
  5645  06FF  3F41               	moviw [1]fsr1
  5646  0700  00AC               	movwf	??_setSw_Main+1
  5647  0701  3000               	movlw	0
  5648  0702  022C               	subwf	??_setSw_Main+1,w
  5649  0703  3096               	movlw	150
  5650  0704  1903               	skipnz
  5651  0705  022B               	subwf	??_setSw_Main,w
  5652  0706  1C03               	skipc
  5653  0707  0008               	return
  5654                           
  5655                           ;Switch_B1.c: 187: {
  5656                           ;Switch_B1.c: 188: Sw->Hold2Time=0;
  5657  0708  086D               	movf	_Sw,w
  5658  0709  3E05               	addlw	5
  5659  070A  0086               	movwf	6
  5660  070B  3001               	movlw	1	; select bank2/3
  5661  070C  0087               	movwf	7
  5662  070D  3000               	movlw	0
  5663  070E  3FC0               	movwi [0]fsr1
  5664  070F  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 189: Sw->Hold2=1;
  5667  0710  086D               	movf	_Sw,w
  5668  0711  0086               	movwf	6
  5669  0712  3001               	movlw	1	; select bank2/3
  5670  0713  0087               	movwf	7
  5671  0714  1601               	bsf	1,4
  5672                           
  5673                           ;Switch_B1.c: 193: setRF_Learn(1,1);
  5674  0715  01A2               	clrf	setRF_Learn@command
  5675  0716  0AA2               	incf	setRF_Learn@command,f
  5676  0717  3001               	movlw	1
  5677  0718  31A5  2510  3186   	fcall	_setRF_Learn
  5678                           
  5679                           ;Switch_B1.c: 195: if(TMain->First)
  5680  071B  0021               	movlb	1	; select bank1
  5681  071C  0869               	movf	_TMain^(0+128),w
  5682  071D  3E03               	addlw	3
  5683  071E  0086               	movwf	6
  5684  071F  3001               	movlw	1	; select bank2/3
  5685  0720  0087               	movwf	7
  5686  0721  1C81               	btfss	1,1
  5687  0722  0008               	return
  5688                           
  5689                           ;Switch_B1.c: 196: {
  5690                           ;Switch_B1.c: 197: setBuz(2,100);
  5691  0723  3064               	movlw	100
  5692  0724  0020               	movlb	0	; select bank0
  5693  0725  00A6               	movwf	setBuz@time
  5694  0726  3000               	movlw	0
  5695  0727  00A7               	movwf	setBuz@time+1
  5696  0728  3002               	movlw	2
  5697  0729  3193  23E5         	fcall	_setBuz
  5698                           
  5699                           ;Switch_B1.c: 198: }
  5700                           ;Switch_B1.c: 200: }
  5701                           ;Switch_B1.c: 201: }
  5702  072B  0008               	return
  5703  072C                     l9700:	
  5704                           
  5705                           ;Switch_B1.c: 202: else
  5706                           ;Switch_B1.c: 203: {
  5707                           ;Switch_B1.c: 204: if(!Sw->Hold3)
  5708  072C  0020               	movlb	0	; select bank0
  5709  072D  086D               	movf	_Sw,w
  5710  072E  0086               	movwf	6
  5711  072F  3001               	movlw	1	; select bank2/3
  5712  0730  0087               	movwf	7
  5713  0731  1A81               	btfsc	1,5
  5714  0732  0008               	return
  5715                           
  5716                           ;Switch_B1.c: 205: {
  5717                           ;Switch_B1.c: 206: Sw->Hold3Time++;
  5718  0733  086D               	movf	_Sw,w
  5719  0734  3E07               	addlw	7
  5720  0735  0086               	movwf	6
  5721  0736  3001               	movlw	1	; select bank2/3
  5722  0737  0087               	movwf	7
  5723  0738  3001               	movlw	1
  5724  0739  0781               	addwf	1,f
  5725  073A  3141               	addfsr 1,1
  5726  073B  1803               	skipnc
  5727  073C  0A81               	incf	1,f
  5728                           
  5729                           ;Switch_B1.c: 207: if(Sw->Hold3Time >= 300)
  5730  073D  086D               	movf	_Sw,w
  5731  073E  3E07               	addlw	7
  5732  073F  0086               	movwf	6
  5733  0740  3001               	movlw	1	; select bank2/3
  5734  0741  0087               	movwf	7
  5735  0742  3F40               	moviw [0]fsr1
  5736  0743  00AB               	movwf	??_setSw_Main
  5737  0744  3F41               	moviw [1]fsr1
  5738  0745  00AC               	movwf	??_setSw_Main+1
  5739  0746  3001               	movlw	1
  5740  0747  022C               	subwf	??_setSw_Main+1,w
  5741  0748  302C               	movlw	44
  5742  0749  1903               	skipnz
  5743  074A  022B               	subwf	??_setSw_Main,w
  5744  074B  1C03               	skipc
  5745  074C  0008               	return
  5746                           
  5747                           ;Switch_B1.c: 208: {
  5748                           ;Switch_B1.c: 209: Sw->Hold3Time=0;
  5749  074D  086D               	movf	_Sw,w
  5750  074E  3E07               	addlw	7
  5751  074F  0086               	movwf	6
  5752  0750  3001               	movlw	1	; select bank2/3
  5753  0751  0087               	movwf	7
  5754  0752  3000               	movlw	0
  5755  0753  3FC0               	movwi [0]fsr1
  5756  0754  3FC1               	movwi [1]fsr1
  5757                           
  5758                           ;Switch_B1.c: 210: Sw->Hold3=1;
  5759  0755  086D               	movf	_Sw,w
  5760  0756  0086               	movwf	6
  5761  0757  3001               	movlw	1	; select bank2/3
  5762  0758  0087               	movwf	7
  5763  0759  1681               	bsf	1,5
  5764                           
  5765                           ;Switch_B1.c: 213: setRF_Learn(1,0);
  5766  075A  01A2               	clrf	setRF_Learn@command
  5767  075B  3001               	movlw	1
  5768  075C  31A5  2510         	fcall	_setRF_Learn
  5769                           
  5770                           ;Switch_B1.c: 216: }
  5771                           ;Switch_B1.c: 217: }
  5772                           ;Switch_B1.c: 218: }
  5773                           ;Switch_B1.c: 219: }
  5774                           ;Switch_B1.c: 220: }
  5775                           ;Switch_B1.c: 221: }
  5776  075E  0008               	return
  5777  075F                     l9710:	
  5778                           
  5779                           ;Switch_B1.c: 222: else
  5780                           ;Switch_B1.c: 223: {
  5781                           ;Switch_B1.c: 224: if(Sw->Debounce)
  5782  075F  0020               	movlb	0	; select bank0
  5783  0760  086D               	movf	_Sw,w
  5784  0761  0086               	movwf	6
  5785  0762  3001               	movlw	1	; select bank2/3
  5786  0763  0087               	movwf	7
  5787  0764  1D01               	btfss	1,2
  5788  0765  0008               	return
  5789                           
  5790                           ;Switch_B1.c: 225: {
  5791                           ;Switch_B1.c: 226: Sw->DebounceTime++;
  5792  0766  3001               	movlw	1
  5793  0767  00AB               	movwf	??_setSw_Main
  5794  0768  086D               	movf	_Sw,w
  5795  0769  3E02               	addlw	2
  5796  076A  0086               	movwf	6
  5797  076B  3001               	movlw	1	; select bank2/3
  5798  076C  0087               	movwf	7
  5799  076D  082B               	movf	??_setSw_Main,w
  5800  076E  0781               	addwf	1,f
  5801                           
  5802                           ;Switch_B1.c: 227: if(Sw->DebounceTime >= 5)
  5803  076F  086D               	movf	_Sw,w
  5804  0770  3E02               	addlw	2
  5805  0771  0086               	movwf	6
  5806  0772  3001               	movlw	1	; select bank2/3
  5807  0773  0087               	movwf	7
  5808  0774  3005               	movlw	5
  5809  0775  0201               	subwf	1,w
  5810  0776  1C03               	skipc
  5811  0777  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 228: {
  5814                           ;Switch_B1.c: 229: Sw->DebounceTime=0;
  5815  0778  086D               	movf	_Sw,w
  5816  0779  3E02               	addlw	2
  5817  077A  0086               	movwf	6
  5818  077B  3001               	movlw	1	; select bank2/3
  5819  077C  0087               	movwf	7
  5820  077D  0181               	clrf	1
  5821                           
  5822                           ;Switch_B1.c: 230: Sw->Debounce=0;
  5823  077E  086D               	movf	_Sw,w
  5824  077F  0086               	movwf	6
  5825  0780  3001               	movlw	1	; select bank2/3
  5826  0781  0087               	movwf	7
  5827  0782  1101               	bcf	1,2
  5828                           
  5829                           ;Switch_B1.c: 231: Sw->Hold1Time=0;
  5830  0783  086D               	movf	_Sw,w
  5831  0784  3E03               	addlw	3
  5832  0785  0086               	movwf	6
  5833  0786  3001               	movlw	1	; select bank2/3
  5834  0787  0087               	movwf	7
  5835  0788  3000               	movlw	0
  5836  0789  3FC0               	movwi [0]fsr1
  5837  078A  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 232: Sw->Hold1=0;
  5840  078B  086D               	movf	_Sw,w
  5841  078C  0086               	movwf	6
  5842  078D  3001               	movlw	1	; select bank2/3
  5843  078E  0087               	movwf	7
  5844  078F  1181               	bcf	1,3
  5845                           
  5846                           ;Switch_B1.c: 233: Sw->Hold2Time=0;
  5847  0790  086D               	movf	_Sw,w
  5848  0791  3E05               	addlw	5
  5849  0792  0086               	movwf	6
  5850  0793  3001               	movlw	1	; select bank2/3
  5851  0794  0087               	movwf	7
  5852  0795  3000               	movlw	0
  5853  0796  3FC0               	movwi [0]fsr1
  5854  0797  3FC1               	movwi [1]fsr1
  5855                           
  5856                           ;Switch_B1.c: 234: Sw->Hold2=0;
  5857  0798  086D               	movf	_Sw,w
  5858  0799  0086               	movwf	6
  5859  079A  3001               	movlw	1	; select bank2/3
  5860  079B  0087               	movwf	7
  5861  079C  1201               	bcf	1,4
  5862                           
  5863                           ;Switch_B1.c: 235: Sw->Hold3Time=0;
  5864  079D  086D               	movf	_Sw,w
  5865  079E  3E07               	addlw	7
  5866  079F  0086               	movwf	6
  5867  07A0  3001               	movlw	1	; select bank2/3
  5868  07A1  0087               	movwf	7
  5869  07A2  3000               	movlw	0
  5870  07A3  3FC0               	movwi [0]fsr1
  5871  07A4  3FC1               	movwi [1]fsr1
  5872                           
  5873                           ;Switch_B1.c: 236: Sw->Hold3=0;
  5874  07A5  086D               	movf	_Sw,w
  5875  07A6  0086               	movwf	6
  5876  07A7  3001               	movlw	1	; select bank2/3
  5877  07A8  0087               	movwf	7
  5878  07A9  1281               	bcf	1,5
  5879                           
  5880                           ;Switch_B1.c: 239: Sw_DimmerOffFunc(sw);
  5881  07AA  082F               	movf	setSw_Main@sw,w
  5882  07AB  3193  2374  3186   	fcall	_Sw_DimmerOffFunc
  5883                           
  5884                           ;Switch_B1.c: 242: setRF_Learn(1,0);
  5885  07AE  0020               	movlb	0	; select bank0
  5886  07AF  01A2               	clrf	setRF_Learn@command
  5887  07B0  3001               	movlw	1
  5888  07B1  31A5  2510         	fcall	_setRF_Learn
  5889  07B3  0008               	return
  5890  07B4                     __end_of_setSw_Main:	
  5891                           
  5892                           	psect	text12
  5893  2510                     __ptext12:	
  5894 ;; *************** function _setRF_Learn *****************
  5895 ;; Defined at:
  5896 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  rf              1    wreg     unsigned char 
  5899 ;;  command         1    2[BANK0 ] unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  rf              1    3[BANK0 ] unsigned char 
  5902 ;; Return value:  Size  Location     Type
  5903 ;;		None               void
  5904 ;; Registers used:
  5905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5911 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;Total ram usage:        2 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    5
  5918 ;; This function calls:
  5919 ;;		_RfPointSelect
  5920 ;; This function is called by:
  5921 ;;		_setSw_Main
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _setRF_Learn
  5927  2510                     _setRF_Learn:	
  5928                           
  5929                           ;incstack = 0
  5930                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5931                           ;setRF_Learn@rf stored from wreg
  5932  2510  0020               	movlb	0	; select bank0
  5933  2511  00A3               	movwf	setRF_Learn@rf
  5934                           
  5935                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5936  2512  0823               	movf	setRF_Learn@rf,w
  5937  2513  31A4  2439         	fcall	_RfPointSelect
  5938                           
  5939                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5940  2515  087C               	movf	_RF,w
  5941  2516  0086               	movwf	6
  5942  2517  0187               	clrf	7
  5943  2518  0020               	movlb	0	; select bank0
  5944  2519  0822               	movf	setRF_Learn@command,w
  5945  251A  1301               	bcf	1,6
  5946  251B  1D03               	skipz
  5947  251C  1701               	bsf	1,6
  5948  251D  0008               	return
  5949  251E                     __end_of_setRF_Learn:	
  5950                           
  5951                           	psect	text13
  5952  07B4                     __ptext13:	
  5953 ;; *************** function _Sw_DimmerOnFunc *****************
  5954 ;; Defined at:
  5955 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  sw              1    wreg     unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  sw              1    5[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;		None               void
  5962 ;; Registers used:
  5963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        1 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    6
  5976 ;; This function calls:
  5977 ;;		_setDimmerLights_Switch
  5978 ;;		_setDimmerLights_Trigger
  5979 ;;		_setRFSW_Status
  5980 ;;		_setRF_DimmerLights
  5981 ;;		_setTxData
  5982 ;; This function is called by:
  5983 ;;		_setSw_Main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _Sw_DimmerOnFunc
  5989  07B4                     _Sw_DimmerOnFunc:	
  5990                           
  5991                           ;incstack = 0
  5992                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5993                           ;Sw_DimmerOnFunc@sw stored from wreg
  5994  07B4  0020               	movlb	0	; select bank0
  5995  07B5  00A5               	movwf	Sw_DimmerOnFunc@sw
  5996                           
  5997                           ;Switch_B1.c: 251: Sw->Flag=1;
  5998  07B6  086D               	movf	_Sw,w
  5999  07B7  0086               	movwf	6
  6000  07B8  3001               	movlw	1	; select bank2/3
  6001  07B9  0087               	movwf	7
  6002  07BA  1781               	bsf	1,7
  6003                           
  6004                           ;Switch_B1.c: 252: if(!Sw->Status)
  6005  07BB  086D               	movf	_Sw,w
  6006  07BC  0086               	movwf	6
  6007  07BD  3001               	movlw	1	; select bank2/3
  6008  07BE  0087               	movwf	7
  6009  07BF  1B01               	btfsc	1,6
  6010  07C0  2FEB               	goto	l9212
  6011                           
  6012                           ;Switch_B1.c: 253: {
  6013                           ;Switch_B1.c: 254: Sw->Status=1;
  6014  07C1  086D               	movf	_Sw,w
  6015  07C2  0086               	movwf	6
  6016  07C3  3001               	movlw	1	; select bank2/3
  6017  07C4  0087               	movwf	7
  6018  07C5  1701               	bsf	1,6
  6019                           
  6020                           ;Switch_B1.c: 255: setRFSW_Status(sw,1);
  6021  07C6  01A2               	clrf	setRFSW_Status@command
  6022  07C7  0AA2               	incf	setRFSW_Status@command,f
  6023  07C8  0825               	movf	Sw_DimmerOnFunc@sw,w
  6024  07C9  31A5  251E  3187   	fcall	_setRFSW_Status
  6025                           
  6026                           ;Switch_B1.c: 257: setDimmerLights_Trigger(sw,1);
  6027  07CC  0020               	movlb	0	; select bank0
  6028  07CD  01A2               	clrf	setDimmerLights_Trigger@command
  6029  07CE  0AA2               	incf	setDimmerLights_Trigger@command,f
  6030  07CF  0825               	movf	Sw_DimmerOnFunc@sw,w
  6031  07D0  31A5  255C  3187   	fcall	_setDimmerLights_Trigger
  6032                           
  6033                           ;Switch_B1.c: 258: setDimmerLights_Switch(sw,1);
  6034  07D3  0020               	movlb	0	; select bank0
  6035  07D4  01A2               	clrf	setDimmerLights_Switch@command
  6036  07D5  0AA2               	incf	setDimmerLights_Switch@command,f
  6037  07D6  0825               	movf	Sw_DimmerOnFunc@sw,w
  6038  07D7  31A5  254C  3187   	fcall	_setDimmerLights_Switch
  6039                           
  6040                           ;Switch_B1.c: 260: setRF_DimmerLights(sw,Sw->Status);
  6041  07DA  0020               	movlb	0	; select bank0
  6042  07DB  086D               	movf	_Sw,w
  6043  07DC  0086               	movwf	6
  6044  07DD  3001               	movlw	1	; select bank2/3
  6045  07DE  0087               	movwf	7
  6046  07DF  3000               	movlw	0
  6047  07E0  1B01               	btfsc	1,6
  6048  07E1  3001               	movlw	1
  6049  07E2  00A0               	movwf	setRF_DimmerLights@on
  6050  07E3  0825               	movf	Sw_DimmerOnFunc@sw,w
  6051  07E4  319E  26EE  3187   	fcall	_setRF_DimmerLights
  6052                           
  6053                           ;Switch_B1.c: 261: setTxData(1);
  6054  07E7  3001               	movlw	1
  6055  07E8  318B  2318         	fcall	_setTxData
  6056                           
  6057                           ;Switch_B1.c: 262: }
  6058  07EA  0008               	return
  6059  07EB                     l9212:	
  6060                           
  6061                           ;Switch_B1.c: 263: else
  6062                           ;Switch_B1.c: 264: {
  6063                           ;Switch_B1.c: 265: Sw->Status=0;
  6064  07EB  0020               	movlb	0	; select bank0
  6065  07EC  086D               	movf	_Sw,w
  6066  07ED  0086               	movwf	6
  6067  07EE  3001               	movlw	1	; select bank2/3
  6068  07EF  0087               	movwf	7
  6069  07F0  1301               	bcf	1,6
  6070                           
  6071                           ;Switch_B1.c: 266: setRFSW_Status(sw,Sw->Status);
  6072  07F1  086D               	movf	_Sw,w
  6073  07F2  0086               	movwf	6
  6074  07F3  3001               	movlw	1	; select bank2/3
  6075  07F4  0087               	movwf	7
  6076  07F5  3000               	movlw	0
  6077  07F6  1B01               	btfsc	1,6
  6078  07F7  3001               	movlw	1
  6079  07F8  00A2               	movwf	setRFSW_Status@command
  6080  07F9  0825               	movf	Sw_DimmerOnFunc@sw,w
  6081  07FA  31A5  251E         	fcall	_setRFSW_Status
  6082  07FC  0008               	return
  6083  07FD                     __end_of_Sw_DimmerOnFunc:	
  6084                           
  6085                           	psect	text14
  6086  1374                     __ptext14:	
  6087 ;; *************** function _Sw_DimmerOffFunc *****************
  6088 ;; Defined at:
  6089 ;;		line 270 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  sw              1    wreg     unsigned char 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  sw              1   10[BANK0 ] unsigned char 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;		None               void
  6096 ;; Registers used:
  6097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;Total ram usage:        3 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    6
  6110 ;; This function calls:
  6111 ;;		_setDelayOff_GO
  6112 ;;		_setDimmerLights_AdjGo
  6113 ;;		_setDimmerLights_Switch
  6114 ;;		_setDimmerLights_Trigger
  6115 ;;		_setDimmerLights_TriggerAdj
  6116 ;;		_setRF_DimmerLights
  6117 ;;		_setTxData
  6118 ;; This function is called by:
  6119 ;;		_setSw_Main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _Sw_DimmerOffFunc
  6125  1374                     _Sw_DimmerOffFunc:	
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6129                           ;Sw_DimmerOffFunc@sw stored from wreg
  6130  1374  0020               	movlb	0	; select bank0
  6131  1375  00AA               	movwf	Sw_DimmerOffFunc@sw
  6132                           
  6133                           ;Switch_B1.c: 272: if(Sw->Flag)
  6134  1376  086D               	movf	_Sw,w
  6135  1377  0086               	movwf	6
  6136  1378  3001               	movlw	1	; select bank2/3
  6137  1379  0087               	movwf	7
  6138  137A  1F81               	btfss	1,7
  6139  137B  0008               	return
  6140                           
  6141                           ;Switch_B1.c: 273: {
  6142                           ;Switch_B1.c: 274: Sw->Flag=0;
  6143  137C  086D               	movf	_Sw,w
  6144  137D  0086               	movwf	6
  6145  137E  3001               	movlw	1	; select bank2/3
  6146  137F  0087               	movwf	7
  6147  1380  1381               	bcf	1,7
  6148                           
  6149                           ;Switch_B1.c: 275: if(Sw->Status)
  6150  1381  086D               	movf	_Sw,w
  6151  1382  0086               	movwf	6
  6152  1383  3001               	movlw	1	; select bank2/3
  6153  1384  0087               	movwf	7
  6154  1385  1F01               	btfss	1,6
  6155  1386  2BC0               	goto	l9244
  6156                           
  6157                           ;Switch_B1.c: 276: {
  6158                           ;Switch_B1.c: 277: if(Sw->Adj)
  6159  1387  0A6D               	incf	_Sw,w
  6160  1388  0086               	movwf	6
  6161  1389  3001               	movlw	1	; select bank2/3
  6162  138A  0087               	movwf	7
  6163  138B  1C01               	btfss	1,0
  6164  138C  0008               	return
  6165                           
  6166                           ;Switch_B1.c: 278: {
  6167                           ;Switch_B1.c: 279: Sw->Adj=0;
  6168  138D  0A6D               	incf	_Sw,w
  6169  138E  0086               	movwf	6
  6170  138F  3001               	movlw	1	; select bank2/3
  6171  1390  0087               	movwf	7
  6172  1391  1001               	bcf	1,0
  6173                           
  6174                           ;Switch_B1.c: 280: setDimmerLights_TriggerAdj(sw,1);
  6175  1392  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6176  1393  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6177  1394  082A               	movf	Sw_DimmerOffFunc@sw,w
  6178  1395  31A5  25AC  3193   	fcall	_setDimmerLights_TriggerAdj
  6179                           
  6180                           ;Switch_B1.c: 281: setDimmerLights_AdjGo(sw,0);
  6181  1398  0020               	movlb	0	; select bank0
  6182  1399  01A2               	clrf	setDimmerLights_AdjGo@command
  6183  139A  082A               	movf	Sw_DimmerOffFunc@sw,w
  6184  139B  31A5  259C  3193   	fcall	_setDimmerLights_AdjGo
  6185                           
  6186                           ;Switch_B1.c: 283: Product->Data[17]=Product->Data[26+sw];
  6187  139E  0020               	movlb	0	; select bank0
  6188  139F  082A               	movf	Sw_DimmerOffFunc@sw,w
  6189  13A0  3E1A               	addlw	26
  6190  13A1  076F               	addwf	_Product,w
  6191  13A2  00A8               	movwf	??_Sw_DimmerOffFunc
  6192  13A3  0828               	movf	??_Sw_DimmerOffFunc,w
  6193  13A4  0086               	movwf	6
  6194  13A5  3001               	movlw	1	; select bank2/3
  6195  13A6  0087               	movwf	7
  6196  13A7  0801               	movf	1,w
  6197  13A8  00A9               	movwf	??_Sw_DimmerOffFunc+1
  6198  13A9  086F               	movf	_Product,w
  6199  13AA  3E11               	addlw	17
  6200  13AB  0086               	movwf	6
  6201  13AC  3001               	movlw	1	; select bank2/3
  6202  13AD  0087               	movwf	7
  6203  13AE  0829               	movf	??_Sw_DimmerOffFunc+1,w
  6204  13AF  0081               	movwf	1
  6205                           
  6206                           ;Switch_B1.c: 284: setRF_DimmerLights(sw,Sw->Status);
  6207  13B0  086D               	movf	_Sw,w
  6208  13B1  0086               	movwf	6
  6209  13B2  3001               	movlw	1	; select bank2/3
  6210  13B3  0087               	movwf	7
  6211  13B4  3000               	movlw	0
  6212  13B5  1B01               	btfsc	1,6
  6213  13B6  3001               	movlw	1
  6214  13B7  00A0               	movwf	setRF_DimmerLights@on
  6215  13B8  082A               	movf	Sw_DimmerOffFunc@sw,w
  6216  13B9  319E  26EE  3193   	fcall	_setRF_DimmerLights
  6217                           
  6218                           ;Switch_B1.c: 285: setTxData(1);
  6219  13BC  3001               	movlw	1
  6220  13BD  318B  2318         	fcall	_setTxData
  6221                           
  6222                           ;Switch_B1.c: 287: }
  6223                           ;Switch_B1.c: 288: }
  6224  13BF  0008               	return
  6225  13C0                     l9244:	
  6226                           
  6227                           ;Switch_B1.c: 289: else
  6228                           ;Switch_B1.c: 290: {
  6229                           ;Switch_B1.c: 291: setDimmerLights_Trigger(sw,1);
  6230  13C0  0020               	movlb	0	; select bank0
  6231  13C1  01A2               	clrf	setDimmerLights_Trigger@command
  6232  13C2  0AA2               	incf	setDimmerLights_Trigger@command,f
  6233  13C3  082A               	movf	Sw_DimmerOffFunc@sw,w
  6234  13C4  31A5  255C  3193   	fcall	_setDimmerLights_Trigger
  6235                           
  6236                           ;Switch_B1.c: 292: setDimmerLights_Switch(sw,0);
  6237  13C7  0020               	movlb	0	; select bank0
  6238  13C8  01A2               	clrf	setDimmerLights_Switch@command
  6239  13C9  082A               	movf	Sw_DimmerOffFunc@sw,w
  6240  13CA  31A5  254C  3193   	fcall	_setDimmerLights_Switch
  6241                           
  6242                           ;Switch_B1.c: 294: setDelayOff_GO(sw,0,0);
  6243  13CD  0020               	movlb	0	; select bank0
  6244  13CE  01A3               	clrf	setDelayOff_GO@command
  6245  13CF  01A4               	clrf	setDelayOff_GO@value
  6246  13D0  082A               	movf	Sw_DimmerOffFunc@sw,w
  6247  13D1  319F  27A4  3193   	fcall	_setDelayOff_GO
  6248                           
  6249                           ;Switch_B1.c: 295: setRF_DimmerLights(sw,Sw->Status);
  6250  13D4  0020               	movlb	0	; select bank0
  6251  13D5  086D               	movf	_Sw,w
  6252  13D6  0086               	movwf	6
  6253  13D7  3001               	movlw	1	; select bank2/3
  6254  13D8  0087               	movwf	7
  6255  13D9  3000               	movlw	0
  6256  13DA  1B01               	btfsc	1,6
  6257  13DB  3001               	movlw	1
  6258  13DC  00A0               	movwf	setRF_DimmerLights@on
  6259  13DD  082A               	movf	Sw_DimmerOffFunc@sw,w
  6260  13DE  319E  26EE  3193   	fcall	_setRF_DimmerLights
  6261                           
  6262                           ;Switch_B1.c: 296: setTxData(1);
  6263  13E1  3001               	movlw	1
  6264  13E2  318B  2318         	fcall	_setTxData
  6265  13E4  0008               	return
  6266  13E5                     __end_of_Sw_DimmerOffFunc:	
  6267                           
  6268                           	psect	text15
  6269  1938                     __ptext15:	
  6270 ;; *************** function _Sw_DimmerAdjFunc *****************
  6271 ;; Defined at:
  6272 ;;		line 301 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  sw              1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  sw              1    4[BANK0 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;		None               void
  6279 ;; Registers used:
  6280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:        1 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    6
  6293 ;; This function calls:
  6294 ;;		_setDimmerLights_AdjGo
  6295 ;;		_setDimmerLights_TriggerAdj
  6296 ;;		_setRFSW_Status
  6297 ;; This function is called by:
  6298 ;;		_setSw_Main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function _Sw_DimmerAdjFunc
  6304  1938                     _Sw_DimmerAdjFunc:	
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6308                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6309  1938  0020               	movlb	0	; select bank0
  6310  1939  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6311                           
  6312                           ;Switch_B1.c: 303: if(Sw->Flag)
  6313  193A  086D               	movf	_Sw,w
  6314  193B  0086               	movwf	6
  6315  193C  3001               	movlw	1	; select bank2/3
  6316  193D  0087               	movwf	7
  6317  193E  1F81               	btfss	1,7
  6318  193F  0008               	return
  6319                           
  6320                           ;Switch_B1.c: 304: {
  6321                           ;Switch_B1.c: 305: Sw->Adj=1;
  6322  1940  0A6D               	incf	_Sw,w
  6323  1941  0086               	movwf	6
  6324  1942  3001               	movlw	1	; select bank2/3
  6325  1943  0087               	movwf	7
  6326  1944  1401               	bsf	1,0
  6327                           
  6328                           ;Switch_B1.c: 306: Sw->Status=1;
  6329  1945  086D               	movf	_Sw,w
  6330  1946  0086               	movwf	6
  6331  1947  3001               	movlw	1	; select bank2/3
  6332  1948  0087               	movwf	7
  6333  1949  1701               	bsf	1,6
  6334                           
  6335                           ;Switch_B1.c: 307: setRFSW_Status(sw,1);
  6336  194A  01A2               	clrf	setRFSW_Status@command
  6337  194B  0AA2               	incf	setRFSW_Status@command,f
  6338  194C  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6339  194D  31A5  251E  3199   	fcall	_setRFSW_Status
  6340                           
  6341                           ;Switch_B1.c: 309: setDimmerLights_TriggerAdj(sw,1);
  6342  1950  0020               	movlb	0	; select bank0
  6343  1951  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6344  1952  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6345  1953  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6346  1954  31A5  25AC  3199   	fcall	_setDimmerLights_TriggerAdj
  6347                           
  6348                           ;Switch_B1.c: 310: setDimmerLights_AdjGo(sw,1);
  6349  1957  0020               	movlb	0	; select bank0
  6350  1958  01A2               	clrf	setDimmerLights_AdjGo@command
  6351  1959  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6352  195A  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6353  195B  31A5  259C         	fcall	_setDimmerLights_AdjGo
  6354  195D  0008               	return
  6355  195E                     __end_of_Sw_DimmerAdjFunc:	
  6356                           
  6357                           	psect	text16
  6358  25AC                     __ptext16:	
  6359 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6360 ;; Defined at:
  6361 ;;		line 461 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  lights          1    wreg     unsigned char 
  6364 ;;  command         1    2[BANK0 ] unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  lights          1    3[BANK0 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;		None               void
  6369 ;; Registers used:
  6370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6376 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;Total ram usage:        2 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    5
  6383 ;; This function calls:
  6384 ;;		_DimmerLightsPointSelect
  6385 ;; This function is called by:
  6386 ;;		_Sw_DimmerOffFunc
  6387 ;;		_Sw_DimmerAdjFunc
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _setDimmerLights_TriggerAdj
  6393  25AC                     _setDimmerLights_TriggerAdj:	
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6397                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6398  25AC  0020               	movlb	0	; select bank0
  6399  25AD  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6400                           
  6401                           ;Dimmer_B1.c: 463: DimmerLightsPointSelect(lights);
  6402  25AE  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6403  25AF  31A5  25DF         	fcall	_DimmerLightsPointSelect
  6404                           
  6405                           ;Dimmer_B1.c: 464: DimmerLights->TriggerAdj=command;
  6406  25B1  0020               	movlb	0	; select bank0
  6407  25B2  086C               	movf	_DimmerLights,w
  6408  25B3  3E09               	addlw	9
  6409  25B4  0086               	movwf	6
  6410  25B5  3001               	movlw	1	; select bank2/3
  6411  25B6  0087               	movwf	7
  6412  25B7  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6413  25B8  1181               	bcf	1,3
  6414  25B9  1D03               	skipz
  6415  25BA  1581               	bsf	1,3
  6416  25BB  0008               	return
  6417  25BC                     __end_of_setDimmerLights_TriggerAdj:	
  6418                           
  6419                           	psect	text17
  6420  259C                     __ptext17:	
  6421 ;; *************** function _setDimmerLights_AdjGo *****************
  6422 ;; Defined at:
  6423 ;;		line 451 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  lights          1    wreg     unsigned char 
  6426 ;;  command         1    2[BANK0 ] unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  lights          1    3[BANK0 ] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;		None               void
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6438 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;Total ram usage:        2 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    5
  6445 ;; This function calls:
  6446 ;;		_DimmerLightsPointSelect
  6447 ;; This function is called by:
  6448 ;;		_Sw_DimmerOffFunc
  6449 ;;		_Sw_DimmerAdjFunc
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _setDimmerLights_AdjGo
  6455  259C                     _setDimmerLights_AdjGo:	
  6456                           
  6457                           ;incstack = 0
  6458                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6459                           ;setDimmerLights_AdjGo@lights stored from wreg
  6460  259C  0020               	movlb	0	; select bank0
  6461  259D  00A3               	movwf	setDimmerLights_AdjGo@lights
  6462                           
  6463                           ;Dimmer_B1.c: 453: DimmerLightsPointSelect(lights);
  6464  259E  0823               	movf	setDimmerLights_AdjGo@lights,w
  6465  259F  31A5  25DF         	fcall	_DimmerLightsPointSelect
  6466                           
  6467                           ;Dimmer_B1.c: 454: DimmerLights->AdjGo=command;
  6468  25A1  0020               	movlb	0	; select bank0
  6469  25A2  086C               	movf	_DimmerLights,w
  6470  25A3  3E09               	addlw	9
  6471  25A4  0086               	movwf	6
  6472  25A5  3001               	movlw	1	; select bank2/3
  6473  25A6  0087               	movwf	7
  6474  25A7  0822               	movf	setDimmerLights_AdjGo@command,w
  6475  25A8  1101               	bcf	1,2
  6476  25A9  1D03               	skipz
  6477  25AA  1501               	bsf	1,2
  6478  25AB  0008               	return
  6479  25AC                     __end_of_setDimmerLights_AdjGo:	
  6480                           
  6481                           	psect	text18
  6482  24F5                     __ptext18:	
  6483 ;; *************** function _Switch_Initialization *****************
  6484 ;; Defined at:
  6485 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;		None               void
  6492 ;; Registers used:
  6493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    7
  6506 ;; This function calls:
  6507 ;;		_TouchPower
  6508 ;;		_setSw_Initialization
  6509 ;; This function is called by:
  6510 ;;		_main
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           
  6515                           ;psect for function _Switch_Initialization
  6516  24F5                     _Switch_Initialization:	
  6517                           
  6518                           ;Switch_B1.c: 40: TouchPower();
  6519                           
  6520                           ;incstack = 0
  6521                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6522  24F5  31A3  23B2  31A4   	fcall	_TouchPower
  6523                           
  6524                           ;Switch_B1.c: 42: WPUB1=0;
  6525  24F8  0024               	movlb	4	; select bank4
  6526  24F9  108D               	bcf	13,1	;volatile
  6527                           
  6528                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6529  24FA  3001               	movlw	1
  6530  24FB  31A3  23F7  31A4   	fcall	_setSw_Initialization
  6531                           
  6532                           ;Switch_B1.c: 54: setSw_Initialization(2);
  6533  24FE  3002               	movlw	2
  6534  24FF  31A3  23F7         	fcall	_setSw_Initialization
  6535  2501  0008               	return
  6536  2502                     __end_of_Switch_Initialization:	
  6537                           
  6538                           	psect	text19
  6539  23F7                     __ptext19:	
  6540 ;; *************** function _setSw_Initialization *****************
  6541 ;; Defined at:
  6542 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  sw              1    wreg     unsigned char 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  sw              1    4[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        1 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    6
  6563 ;; This function calls:
  6564 ;;		_setLED
  6565 ;; This function is called by:
  6566 ;;		_Switch_Initialization
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _setSw_Initialization
  6572  23F7                     _setSw_Initialization:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6576                           ;setSw_Initialization@sw stored from wreg
  6577  23F7  0020               	movlb	0	; select bank0
  6578  23F8  00A4               	movwf	setSw_Initialization@sw
  6579                           
  6580                           ;Switch_B1.c: 80: setLED(sw,1);
  6581  23F9  01A2               	clrf	setLED@command
  6582  23FA  0AA2               	incf	setLED@command,f
  6583  23FB  0824               	movf	setSw_Initialization@sw,w
  6584  23FC  3190  2042         	fcall	_setLED
  6585  23FE  0008               	return
  6586  23FF                     __end_of_setSw_Initialization:	
  6587                           
  6588                           	psect	text20
  6589  23B2                     __ptext20:	
  6590 ;; *************** function _TouchPower *****************
  6591 ;; Defined at:
  6592 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		None
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;Total ram usage:        0 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    4
  6613 ;; This function calls:
  6614 ;;		Nothing
  6615 ;; This function is called by:
  6616 ;;		_Switch_Initialization
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _TouchPower
  6622  23B2                     _TouchPower:	
  6623  23B2                     l2930:	
  6624                           ;Switch_B1.c: 11: while(!RC5)
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _TouchPower: []
  6628                           
  6629  23B2  0020               	movlb	0	; select bank0
  6630  23B3  1A8E               	btfsc	14,5	;volatile
  6631  23B4  0008               	return
  6632                           
  6633                           ;Switch_B1.c: 12: RC5=1;
  6634  23B5  168E               	bsf	14,5	;volatile
  6635  23B6  2BB2               	goto	l2930
  6636  23B7                     __end_of_TouchPower:	
  6637                           
  6638                           	psect	text21
  6639  23A9                     __ptext21:	
  6640 ;; *************** function _RF_Main *****************
  6641 ;; Defined at:
  6642 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:   13
  6663 ;; This function calls:
  6664 ;;		_setRF_Main
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _RF_Main
  6672  23A9                     _RF_Main:	
  6673                           
  6674                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6678  23A9  3001               	movlw	1
  6679  23AA  3195  254C         	fcall	_setRF_Main
  6680  23AC  0008               	return
  6681  23AD                     __end_of_RF_Main:	
  6682                           
  6683                           	psect	text22
  6684  154C                     __ptext22:	
  6685 ;; *************** function _setRF_Main *****************
  6686 ;; Defined at:
  6687 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;  rf              1    wreg     unsigned char 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;  rf              1   74[BANK0 ] unsigned char 
  6692 ;; Return value:  Size  Location     Type
  6693 ;;		None               void
  6694 ;; Registers used:
  6695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;Total ram usage:        3 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:   12
  6708 ;; This function calls:
  6709 ;;		_CC2500_RxData
  6710 ;;		_CC2500_TxData
  6711 ;;		_CC2500_WriteCommand
  6712 ;;		_RF_RxDisable
  6713 ;;		_RfPointSelect
  6714 ;;		_getRxData
  6715 ;;		_setINT_GO
  6716 ;; This function is called by:
  6717 ;;		_RF_Main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _setRF_Main
  6723  154C                     _setRF_Main:	
  6724                           
  6725                           ;incstack = 0
  6726                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6727                           ;setRF_Main@rf stored from wreg
  6728  154C  0020               	movlb	0	; select bank0
  6729  154D  00EA               	movwf	setRF_Main@rf
  6730                           
  6731                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6732  154E  086A               	movf	setRF_Main@rf,w
  6733  154F  31A4  2439  3195   	fcall	_RfPointSelect
  6734                           
  6735                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6736  1552  087C               	movf	_RF,w
  6737  1553  0086               	movwf	6
  6738  1554  0187               	clrf	7
  6739  1555  1C01               	btfss	1,0
  6740  1556  0008               	return
  6741                           
  6742                           ;RF_Control_B1.c: 62: {
  6743                           ;RF_Control_B1.c: 68: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  6744  1557  0020               	movlb	0	; select bank0
  6745  1558  01EB               	clrf	_setRF_Main$4359
  6746  1559  1F0C               	btfss	12,6	;volatile
  6747  155A  1A0C               	btfsc	12,4	;volatile
  6748  155B  2D60               	goto	l9588
  6749  155C  180C               	btfsc	12,0	;volatile
  6750  155D  2D60               	goto	l9588
  6751  155E  1C8D               	btfss	13,1	;volatile
  6752  155F  2D67               	goto	l9592
  6753  1560                     l9588:	
  6754  1560  087C               	movf	_RF,w
  6755  1561  0086               	movwf	6
  6756  1562  0187               	clrf	7
  6757  1563  1B01               	btfsc	1,6
  6758  1564  2D67               	goto	l9592
  6759  1565  01EB               	clrf	_setRF_Main$4359
  6760  1566  0AEB               	incf	_setRF_Main$4359,f
  6761  1567                     l9592:	
  6762  1567  087C               	movf	_RF,w
  6763  1568  0086               	movwf	6
  6764  1569  0187               	clrf	7
  6765  156A  086B               	movf	_setRF_Main$4359,w
  6766  156B  1381               	bcf	1,7
  6767  156C  1D03               	skipz
  6768  156D  1781               	bsf	1,7
  6769                           
  6770                           ;RF_Control_B1.c: 75: if(RF->Key)
  6771  156E  087C               	movf	_RF,w
  6772  156F  0086               	movwf	6
  6773  1570  0187               	clrf	7
  6774  1571  1F81               	btfss	1,7
  6775  1572  2D77               	goto	l9596
  6776                           
  6777                           ;RF_Control_B1.c: 76: {
  6778                           ;RF_Control_B1.c: 77: RF_RxDisable(1);
  6779  1573  3001               	movlw	1
  6780  1574  3199  21B3         	fcall	_RF_RxDisable
  6781                           
  6782                           ;RF_Control_B1.c: 78: }
  6783  1576  0008               	return
  6784  1577                     l9596:	
  6785                           
  6786                           ;RF_Control_B1.c: 79: else
  6787                           ;RF_Control_B1.c: 80: {
  6788                           ;RF_Control_B1.c: 81: if(RF->ReceiveGO)
  6789  1577  087C               	movf	_RF,w
  6790  1578  0086               	movwf	6
  6791  1579  0187               	clrf	7
  6792  157A  1C81               	btfss	1,1
  6793  157B  2D87               	goto	l9604
  6794                           
  6795                           ;RF_Control_B1.c: 82: {
  6796                           ;RF_Control_B1.c: 83: RF->ReceiveGO=0;
  6797  157C  087C               	movf	_RF,w
  6798  157D  0086               	movwf	6
  6799  157E  0187               	clrf	7
  6800  157F  1081               	bcf	1,1
  6801                           
  6802                           ;RF_Control_B1.c: 84: CC2500_RxData();
  6803  1580  3191  2162  3195   	fcall	_CC2500_RxData
  6804                           
  6805                           ;RF_Control_B1.c: 90: getRxData(1);
  6806  1583  3001               	movlw	1
  6807  1584  319E  2645         	fcall	_getRxData
  6808                           
  6809                           ;RF_Control_B1.c: 93: }
  6810  1586  0008               	return
  6811  1587                     l9604:	
  6812                           
  6813                           ;RF_Control_B1.c: 94: else
  6814                           ;RF_Control_B1.c: 95: {
  6815                           ;RF_Control_B1.c: 96: if(RF->TransceiveGO)
  6816  1587  087C               	movf	_RF,w
  6817  1588  0086               	movwf	6
  6818  1589  0187               	clrf	7
  6819  158A  1D01               	btfss	1,2
  6820  158B  2DB8               	goto	l9622
  6821                           
  6822                           ;RF_Control_B1.c: 97: {
  6823                           ;RF_Control_B1.c: 98: RF_RxDisable(1);
  6824  158C  3001               	movlw	1
  6825  158D  3199  21B3  3195   	fcall	_RF_RxDisable
  6826                           
  6827                           ;RF_Control_B1.c: 99: if(RF->Debounce == 0)
  6828  1590  087C               	movf	_RF,w
  6829  1591  0086               	movwf	6
  6830  1592  0187               	clrf	7
  6831  1593  1A81               	btfsc	1,5
  6832  1594  2DAD               	goto	l9618
  6833                           
  6834                           ;RF_Control_B1.c: 100: {
  6835                           ;RF_Control_B1.c: 101: RF->DebounceTime++;
  6836  1595  3001               	movlw	1
  6837  1596  0020               	movlb	0	; select bank0
  6838  1597  00E9               	movwf	??_setRF_Main
  6839  1598  0A7C               	incf	_RF,w
  6840  1599  0086               	movwf	6
  6841  159A  0187               	clrf	7
  6842  159B  0869               	movf	??_setRF_Main,w
  6843  159C  0781               	addwf	1,f
  6844                           
  6845                           ;RF_Control_B1.c: 102: if(RF->DebounceTime == 25)
  6846  159D  0A7C               	incf	_RF,w
  6847  159E  0086               	movwf	6
  6848  159F  0187               	clrf	7
  6849  15A0  0801               	movf	1,w
  6850  15A1  3A19               	xorlw	25
  6851  15A2  1D03               	skipz
  6852  15A3  0008               	return
  6853                           
  6854                           ;RF_Control_B1.c: 103: {
  6855                           ;RF_Control_B1.c: 104: RF->DebounceTime=0;
  6856  15A4  0A7C               	incf	_RF,w
  6857  15A5  0086               	movwf	6
  6858  15A6  0187               	clrf	7
  6859  15A7  0181               	clrf	1
  6860                           
  6861                           ;RF_Control_B1.c: 105: RF->Debounce=1;
  6862  15A8  087C               	movf	_RF,w
  6863  15A9  0086               	movwf	6
  6864  15AA  0187               	clrf	7
  6865  15AB  1681               	bsf	1,5
  6866                           
  6867                           ;RF_Control_B1.c: 106: }
  6868                           ;RF_Control_B1.c: 107: }
  6869  15AC  0008               	return
  6870  15AD                     l9618:	
  6871                           
  6872                           ;RF_Control_B1.c: 108: else
  6873                           ;RF_Control_B1.c: 109: {
  6874                           ;RF_Control_B1.c: 110: RF->Debounce=0;
  6875  15AD  087C               	movf	_RF,w
  6876  15AE  0086               	movwf	6
  6877  15AF  0187               	clrf	7
  6878  15B0  1281               	bcf	1,5
  6879                           
  6880                           ;RF_Control_B1.c: 111: RF->TransceiveGO=0;
  6881  15B1  087C               	movf	_RF,w
  6882  15B2  0086               	movwf	6
  6883  15B3  0187               	clrf	7
  6884  15B4  1101               	bcf	1,2
  6885                           
  6886                           ;RF_Control_B1.c: 112: CC2500_TxData();
  6887  15B5  319D  2525         	fcall	_CC2500_TxData
  6888                           
  6889                           ;RF_Control_B1.c: 113: }
  6890                           ;RF_Control_B1.c: 114: }
  6891  15B7  0008               	return
  6892  15B8                     l9622:	
  6893                           
  6894                           ;RF_Control_B1.c: 115: else
  6895                           ;RF_Control_B1.c: 116: {
  6896                           ;RF_Control_B1.c: 118: if(!RF->RxStatus)
  6897  15B8  087C               	movf	_RF,w
  6898  15B9  0086               	movwf	6
  6899  15BA  0187               	clrf	7
  6900  15BB  1981               	btfsc	1,3
  6901  15BC  0008               	return
  6902                           
  6903                           ;RF_Control_B1.c: 119: {
  6904                           ;RF_Control_B1.c: 120: RF->RxStatus=1;
  6905  15BD  087C               	movf	_RF,w
  6906  15BE  0086               	movwf	6
  6907  15BF  0187               	clrf	7
  6908  15C0  1581               	bsf	1,3
  6909                           
  6910                           ;RF_Control_B1.c: 121: CC2500_WriteCommand(0x36);
  6911  15C1  3036               	movlw	54
  6912  15C2  31A5  253C  3195   	fcall	_CC2500_WriteCommand
  6913                           
  6914                           ;RF_Control_B1.c: 122: CC2500_WriteCommand(0x34);
  6915  15C5  3034               	movlw	52
  6916  15C6  31A5  253C  3195   	fcall	_CC2500_WriteCommand
  6917                           
  6918                           ;RF_Control_B1.c: 123: setINT_GO(1);
  6919  15C9  3001               	movlw	1
  6920  15CA  31A4  2410         	fcall	_setINT_GO
  6921  15CC  0008               	return
  6922  15CD                     __end_of_setRF_Main:	
  6923                           
  6924                           	psect	text23
  6925  1E45                     __ptext23:	
  6926 ;; *************** function _getRxData *****************
  6927 ;; Defined at:
  6928 ;;		line 213 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  rf              1    wreg     unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  rf              1   72[BANK0 ] unsigned char 
  6933 ;;  i               1    0        unsigned char 
  6934 ;; Return value:  Size  Location     Type
  6935 ;;		None               void
  6936 ;; Registers used:
  6937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;Total ram usage:        1 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:   11
  6950 ;; This function calls:
  6951 ;;		_RfPointSelect
  6952 ;;		_setControl_Lights_Table
  6953 ;;		_setLog_Code
  6954 ;; This function is called by:
  6955 ;;		_setRF_Main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           
  6960                           ;psect for function _getRxData
  6961  1E45                     _getRxData:	
  6962                           
  6963                           ;incstack = 0
  6964                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6965                           ;getRxData@rf stored from wreg
  6966  1E45  0020               	movlb	0	; select bank0
  6967  1E46  00E8               	movwf	getRxData@rf
  6968                           
  6969                           ;RF_Control_B1.c: 215: unsigned char i;
  6970                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
  6971  1E47  0868               	movf	getRxData@rf,w
  6972  1E48  31A4  2439  319E   	fcall	_RfPointSelect
  6973                           
  6974                           ;RF_Control_B1.c: 217: if(RF->Learn)
  6975  1E4B  087C               	movf	_RF,w
  6976  1E4C  0086               	movwf	6
  6977  1E4D  0187               	clrf	7
  6978  1E4E  1F01               	btfss	1,6
  6979  1E4F  2E5C               	goto	l9168
  6980                           
  6981                           ;RF_Control_B1.c: 218: {
  6982                           ;RF_Control_B1.c: 219: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6983  1E50  0021               	movlb	1	; select bank1
  6984  1E51  08A0               	movf	_RF_Data^(0+128),f
  6985  1E52  1D03               	skipz
  6986  1E53  0008               	return
  6987  1E54  0821               	movf	(_RF_Data^(0+128)+1),w
  6988  1E55  3A64               	xorlw	100
  6989  1E56  1D03               	skipz
  6990  1E57  0008               	return
  6991                           
  6992                           ;RF_Control_B1.c: 220: {
  6993                           ;RF_Control_B1.c: 221: setLog_Code(1);
  6994  1E58  3001               	movlw	1
  6995  1E59  319D  25AF         	fcall	_setLog_Code
  6996                           
  6997                           ;RF_Control_B1.c: 222: }
  6998                           ;RF_Control_B1.c: 223: }
  6999  1E5B  0008               	return
  7000  1E5C                     l9168:	
  7001                           
  7002                           ;RF_Control_B1.c: 224: else
  7003                           ;RF_Control_B1.c: 225: {
  7004                           ;RF_Control_B1.c: 226: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7005  1E5C  0021               	movlb	1	; select bank1
  7006  1E5D  08A0               	movf	_RF_Data^(0+128),f
  7007  1E5E  1D03               	skipz
  7008  1E5F  0008               	return
  7009  1E60  0821               	movf	(_RF_Data^(0+128)+1),w
  7010  1E61  3A02               	xorlw	2
  7011  1E62  1D03               	skipz
  7012  1E63  0008               	return
  7013                           
  7014                           ;RF_Control_B1.c: 227: {
  7015                           ;RF_Control_B1.c: 228: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7016  1E64  082C               	movf	(_RF_Data^(0+128)+12),w
  7017  1E65  3AFF               	xorlw	255
  7018  1E66  1D03               	skipz
  7019  1E67  2E72               	goto	l9180
  7020  1E68  082D               	movf	(_RF_Data^(0+128)+13),w
  7021  1E69  3AFF               	xorlw	255
  7022  1E6A  1D03               	skipz
  7023  1E6B  2E72               	goto	l9180
  7024  1E6C  082E               	movf	(_RF_Data^(0+128)+14),w
  7025  1E6D  3AFF               	xorlw	255
  7026  1E6E  1D03               	skipz
  7027  1E6F  2E72               	goto	l9180
  7028                           
  7029                           ;RF_Control_B1.c: 229: {
  7030                           ;RF_Control_B1.c: 230: __nop();
  7031  1E70  0000               	nop
  7032                           
  7033                           ;RF_Control_B1.c: 231: }
  7034  1E71  0008               	return
  7035  1E72                     l9180:	
  7036                           
  7037                           ;RF_Control_B1.c: 232: else
  7038                           ;RF_Control_B1.c: 233: {
  7039                           ;RF_Control_B1.c: 234: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7040  1E72  0020               	movlb	0	; select bank0
  7041  1E73  086F               	movf	_Product,w
  7042  1E74  3E0C               	addlw	12
  7043  1E75  0086               	movwf	6
  7044  1E76  3001               	movlw	1	; select bank2/3
  7045  1E77  0087               	movwf	7
  7046  1E78  0021               	movlb	1	; select bank1
  7047  1E79  082C               	movf	(_RF_Data^(0+128)+12),w
  7048  1E7A  0601               	xorwf	1,w
  7049  1E7B  1D03               	skipz
  7050  1E7C  0008               	return
  7051  1E7D  0020               	movlb	0	; select bank0
  7052  1E7E  086F               	movf	_Product,w
  7053  1E7F  3E0D               	addlw	13
  7054  1E80  0086               	movwf	6
  7055  1E81  3001               	movlw	1	; select bank2/3
  7056  1E82  0087               	movwf	7
  7057  1E83  0021               	movlb	1	; select bank1
  7058  1E84  082D               	movf	(_RF_Data^(0+128)+13),w
  7059  1E85  0601               	xorwf	1,w
  7060  1E86  1D03               	skipz
  7061  1E87  0008               	return
  7062  1E88  0020               	movlb	0	; select bank0
  7063  1E89  086F               	movf	_Product,w
  7064  1E8A  3E0E               	addlw	14
  7065  1E8B  0086               	movwf	6
  7066  1E8C  3001               	movlw	1	; select bank2/3
  7067  1E8D  0087               	movwf	7
  7068  1E8E  0021               	movlb	1	; select bank1
  7069  1E8F  082E               	movf	(_RF_Data^(0+128)+14),w
  7070  1E90  0601               	xorwf	1,w
  7071  1E91  1D03               	skipz
  7072  1E92  0008               	return
  7073                           
  7074                           ;RF_Control_B1.c: 235: {
  7075                           ;RF_Control_B1.c: 236: setControl_Lights_Table(1);
  7076  1E93  3001               	movlw	1
  7077  1E94  3197  276D         	fcall	_setControl_Lights_Table
  7078                           
  7079                           ;RF_Control_B1.c: 245: {
  7080                           ;RF_Control_B1.c: 246: ;
  7081                           
  7082                           ;RF_Control_B1.c: 241: {
  7083                           ;RF_Control_B1.c: 242: ;
  7084                           ;RF_Control_B1.c: 243: }
  7085                           
  7086                           ;RF_Control_B1.c: 237: }
  7087                           ;RF_Control_B1.c: 238: }
  7088                           ;RF_Control_B1.c: 239: }
  7089  1E96  0008               	return
  7090  1E97                     __end_of_getRxData:	
  7091                           
  7092                           	psect	text24
  7093  1DAF                     __ptext24:	
  7094 ;; *************** function _setLog_Code *****************
  7095 ;; Defined at:
  7096 ;;		line 255 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  rf              1    wreg     unsigned char 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  rf              1   11[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:        2 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    6
  7117 ;; This function calls:
  7118 ;;		_RfPointSelect
  7119 ;;		_setBuz
  7120 ;; This function is called by:
  7121 ;;		_getRxData
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _setLog_Code
  7127  1DAF                     _setLog_Code:	
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7131                           ;setLog_Code@rf stored from wreg
  7132  1DAF  0020               	movlb	0	; select bank0
  7133  1DB0  00AB               	movwf	setLog_Code@rf
  7134                           
  7135                           ;RF_Control_B1.c: 257: RfPointSelect(rf);
  7136  1DB1  082B               	movf	setLog_Code@rf,w
  7137  1DB2  31A4  2439  319D   	fcall	_RfPointSelect
  7138                           
  7139                           ;RF_Control_B1.c: 258: Product->Data[12]=RF_Data[12];
  7140  1DB5  0021               	movlb	1	; select bank1
  7141  1DB6  082C               	movf	(_RF_Data^(0+128)+12),w
  7142  1DB7  0020               	movlb	0	; select bank0
  7143  1DB8  00AA               	movwf	??_setLog_Code
  7144  1DB9  086F               	movf	_Product,w
  7145  1DBA  3E0C               	addlw	12
  7146  1DBB  0086               	movwf	6
  7147  1DBC  3001               	movlw	1	; select bank2/3
  7148  1DBD  0087               	movwf	7
  7149  1DBE  082A               	movf	??_setLog_Code,w
  7150  1DBF  0081               	movwf	1
  7151                           
  7152                           ;RF_Control_B1.c: 259: Product->Data[13]=RF_Data[13];
  7153  1DC0  0021               	movlb	1	; select bank1
  7154  1DC1  082D               	movf	(_RF_Data^(0+128)+13),w
  7155  1DC2  0020               	movlb	0	; select bank0
  7156  1DC3  00AA               	movwf	??_setLog_Code
  7157  1DC4  086F               	movf	_Product,w
  7158  1DC5  3E0D               	addlw	13
  7159  1DC6  0086               	movwf	6
  7160  1DC7  3001               	movlw	1	; select bank2/3
  7161  1DC8  0087               	movwf	7
  7162  1DC9  082A               	movf	??_setLog_Code,w
  7163  1DCA  0081               	movwf	1
  7164                           
  7165                           ;RF_Control_B1.c: 260: Product->Data[14]=RF_Data[14];
  7166  1DCB  0021               	movlb	1	; select bank1
  7167  1DCC  082E               	movf	(_RF_Data^(0+128)+14),w
  7168  1DCD  0020               	movlb	0	; select bank0
  7169  1DCE  00AA               	movwf	??_setLog_Code
  7170  1DCF  086F               	movf	_Product,w
  7171  1DD0  3E0E               	addlw	14
  7172  1DD1  0086               	movwf	6
  7173  1DD2  3001               	movlw	1	; select bank2/3
  7174  1DD3  0087               	movwf	7
  7175  1DD4  082A               	movf	??_setLog_Code,w
  7176  1DD5  0081               	movwf	1
  7177                           
  7178                           ;RF_Control_B1.c: 261: setBuz(1,100);
  7179  1DD6  3064               	movlw	100
  7180  1DD7  00A6               	movwf	setBuz@time
  7181  1DD8  3000               	movlw	0
  7182  1DD9  00A7               	movwf	setBuz@time+1
  7183  1DDA  3001               	movlw	1
  7184  1DDB  3193  23E5  319D   	fcall	_setBuz
  7185                           
  7186                           ;RF_Control_B1.c: 262: RF->Learn=0;
  7187  1DDE  087C               	movf	_RF,w
  7188  1DDF  0086               	movwf	6
  7189  1DE0  0187               	clrf	7
  7190  1DE1  1301               	bcf	1,6
  7191                           
  7192                           ;RF_Control_B1.c: 263: if(TMain->First)
  7193  1DE2  0021               	movlb	1	; select bank1
  7194  1DE3  0869               	movf	_TMain^(0+128),w
  7195  1DE4  3E03               	addlw	3
  7196  1DE5  0086               	movwf	6
  7197  1DE6  3001               	movlw	1	; select bank2/3
  7198  1DE7  0087               	movwf	7
  7199  1DE8  1C81               	btfss	1,1
  7200  1DE9  2DF0               	goto	l2714
  7201                           
  7202                           ;RF_Control_B1.c: 264: {
  7203                           ;RF_Control_B1.c: 265: Memory->LoopSave=1;
  7204  1DEA  0868               	movf	_Memory^(0+128),w
  7205  1DEB  3E22               	addlw	34
  7206  1DEC  0086               	movwf	6
  7207  1DED  3002               	movlw	2	; select bank4/5
  7208  1DEE  0087               	movwf	7
  7209  1DEF  1501               	bsf	1,2
  7210  1DF0                     l2714:	
  7211                           
  7212                           ;RF_Control_B1.c: 266: }
  7213                           ;RF_Control_B1.c: 267: Memory->Modify=1;
  7214  1DF0  0868               	movf	_Memory^(0+128),w
  7215  1DF1  3E22               	addlw	34
  7216  1DF2  0086               	movwf	6
  7217  1DF3  3002               	movlw	2	; select bank4/5
  7218  1DF4  0087               	movwf	7
  7219  1DF5  1401               	bsf	1,0
  7220  1DF6  0008               	return
  7221  1DF7                     __end_of_setLog_Code:	
  7222                           
  7223                           	psect	text25
  7224  176D                     __ptext25:	
  7225 ;; *************** function _setControl_Lights_Table *****************
  7226 ;; Defined at:
  7227 ;;		line 270 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  rf              1    wreg     unsigned char 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  rf              1   71[BANK0 ] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:   10
  7248 ;; This function calls:
  7249 ;;		_RfPointSelect
  7250 ;;		_setBuz
  7251 ;;		_setDimmerLights
  7252 ;;		_setRFSW_AdjControl
  7253 ;;		_setRFSW_Control
  7254 ;;		_setRFSW_Status
  7255 ;;		_setSw_Status
  7256 ;;		_setTxData
  7257 ;; This function is called by:
  7258 ;;		_getRxData
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _setControl_Lights_Table
  7264  176D                     _setControl_Lights_Table:	
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7268                           ;setControl_Lights_Table@rf stored from wreg
  7269  176D  0020               	movlb	0	; select bank0
  7270  176E  00E7               	movwf	setControl_Lights_Table@rf
  7271                           
  7272                           ;RF_Control_B1.c: 272: RfPointSelect(rf);
  7273  176F  0867               	movf	setControl_Lights_Table@rf,w
  7274  1770  31A4  2439  3197   	fcall	_RfPointSelect
  7275                           
  7276                           ;RF_Control_B1.c: 273: if(RF_Data[15] == 0x00)
  7277  1773  0021               	movlb	1	; select bank1
  7278  1774  08AF               	movf	(_RF_Data^(0+128)+15),f
  7279  1775  1D03               	skipz
  7280  1776  2FC0               	goto	l8944
  7281                           
  7282                           ;RF_Control_B1.c: 274: {
  7283                           ;RF_Control_B1.c: 276: setDimmerLights(1,0);
  7284  1777  0020               	movlb	0	; select bank0
  7285  1778  01A4               	clrf	setDimmerLights@status
  7286  1779  3001               	movlw	1
  7287  177A  3188  2001  3197   	fcall	_setDimmerLights
  7288                           
  7289                           ;RF_Control_B1.c: 277: setRFSW_Status(1,0);
  7290  177D  0020               	movlb	0	; select bank0
  7291  177E  01A2               	clrf	setRFSW_Status@command
  7292  177F  3001               	movlw	1
  7293  1780  31A5  251E  3197   	fcall	_setRFSW_Status
  7294                           
  7295                           ;RF_Control_B1.c: 278: setSw_Status(1,0);
  7296  1783  0020               	movlb	0	; select bank0
  7297  1784  01A2               	clrf	setSw_Status@command
  7298  1785  3001               	movlw	1
  7299  1786  31A5  252D  3197   	fcall	_setSw_Status
  7300                           
  7301                           ;RF_Control_B1.c: 281: setDimmerLights(2,0);
  7302  1789  0020               	movlb	0	; select bank0
  7303  178A  01A4               	clrf	setDimmerLights@status
  7304  178B  3002               	movlw	2
  7305  178C  3188  2001  3197   	fcall	_setDimmerLights
  7306                           
  7307                           ;RF_Control_B1.c: 282: setRFSW_Status(2,0);
  7308  178F  0020               	movlb	0	; select bank0
  7309  1790  01A2               	clrf	setRFSW_Status@command
  7310  1791  3002               	movlw	2
  7311  1792  31A5  251E  3197   	fcall	_setRFSW_Status
  7312                           
  7313                           ;RF_Control_B1.c: 283: setSw_Status(2,0);
  7314  1795  0020               	movlb	0	; select bank0
  7315  1796  01A2               	clrf	setSw_Status@command
  7316  1797  3002               	movlw	2
  7317  1798  31A5  252D  3197   	fcall	_setSw_Status
  7318                           
  7319                           ;RF_Control_B1.c: 291: Product->Data[9]=0;
  7320  179B  0020               	movlb	0	; select bank0
  7321  179C  086F               	movf	_Product,w
  7322  179D  3E09               	addlw	9
  7323  179E  0086               	movwf	6
  7324  179F  3001               	movlw	1	; select bank2/3
  7325  17A0  0087               	movwf	7
  7326  17A1  0181               	clrf	1
  7327                           
  7328                           ;RF_Control_B1.c: 292: Product->Data[11]=0;
  7329  17A2  086F               	movf	_Product,w
  7330  17A3  3E0B               	addlw	11
  7331  17A4  0086               	movwf	6
  7332  17A5  3001               	movlw	1	; select bank2/3
  7333  17A6  0087               	movwf	7
  7334  17A7  0181               	clrf	1
  7335                           
  7336                           ;RF_Control_B1.c: 293: Product->Data[15]=0;
  7337  17A8  086F               	movf	_Product,w
  7338  17A9  3E0F               	addlw	15
  7339  17AA  0086               	movwf	6
  7340  17AB  3001               	movlw	1	; select bank2/3
  7341  17AC  0087               	movwf	7
  7342  17AD  0181               	clrf	1
  7343                           
  7344                           ;RF_Control_B1.c: 294: Product->Data[17]=0;
  7345  17AE  086F               	movf	_Product,w
  7346  17AF  3E11               	addlw	17
  7347  17B0  0086               	movwf	6
  7348  17B1  3001               	movlw	1	; select bank2/3
  7349  17B2  0087               	movwf	7
  7350  17B3  0181               	clrf	1
  7351                           
  7352                           ;RF_Control_B1.c: 295: setBuz(1,100);
  7353  17B4  3064               	movlw	100
  7354  17B5  00A6               	movwf	setBuz@time
  7355  17B6  3000               	movlw	0
  7356  17B7  00A7               	movwf	setBuz@time+1
  7357  17B8  3001               	movlw	1
  7358  17B9  3193  23E5  3197   	fcall	_setBuz
  7359                           
  7360                           ;RF_Control_B1.c: 296: setTxData(1);
  7361  17BC  3001               	movlw	1
  7362  17BD  318B  2318         	fcall	_setTxData
  7363                           
  7364                           ;RF_Control_B1.c: 297: }
  7365  17BF  0008               	return
  7366  17C0                     l8944:	
  7367                           
  7368                           ;RF_Control_B1.c: 298: else if(RF_Data[15] == 0x20)
  7369  17C0  0021               	movlb	1	; select bank1
  7370  17C1  082F               	movf	(_RF_Data^(0+128)+15),w
  7371  17C2  3A20               	xorlw	32
  7372  17C3  1D03               	skipz
  7373  17C4  2FDC               	goto	l8950
  7374                           
  7375                           ;RF_Control_B1.c: 299: {
  7376                           ;RF_Control_B1.c: 300: Product->Data[9]=0;
  7377  17C5  0020               	movlb	0	; select bank0
  7378  17C6  086F               	movf	_Product,w
  7379  17C7  3E09               	addlw	9
  7380  17C8  0086               	movwf	6
  7381  17C9  3001               	movlw	1	; select bank2/3
  7382  17CA  0087               	movwf	7
  7383  17CB  0181               	clrf	1
  7384                           
  7385                           ;RF_Control_B1.c: 301: Product->Data[11]=0;
  7386  17CC  086F               	movf	_Product,w
  7387  17CD  3E0B               	addlw	11
  7388  17CE  0086               	movwf	6
  7389  17CF  3001               	movlw	1	; select bank2/3
  7390  17D0  0087               	movwf	7
  7391  17D1  0181               	clrf	1
  7392                           
  7393                           ;RF_Control_B1.c: 302: Product->Data[17]=0;
  7394  17D2  086F               	movf	_Product,w
  7395  17D3  3E11               	addlw	17
  7396  17D4  0086               	movwf	6
  7397  17D5  3001               	movlw	1	; select bank2/3
  7398  17D6  0087               	movwf	7
  7399  17D7  0181               	clrf	1
  7400                           
  7401                           ;RF_Control_B1.c: 303: setTxData(1);
  7402  17D8  3001               	movlw	1
  7403  17D9  318B  2318         	fcall	_setTxData
  7404                           
  7405                           ;RF_Control_B1.c: 304: }
  7406  17DB  0008               	return
  7407  17DC                     l8950:	
  7408                           
  7409                           ;RF_Control_B1.c: 306: else if(RF_Data[15] == 0x01)
  7410  17DC  0021               	movlb	1	; select bank1
  7411  17DD  082F               	movf	(_RF_Data^(0+128)+15),w
  7412  17DE  3A01               	xorlw	1
  7413  17DF  1D03               	skipz
  7414  17E0  2FE5               	goto	l8954
  7415                           
  7416                           ;RF_Control_B1.c: 307: {
  7417                           ;RF_Control_B1.c: 308: setRFSW_Control(1);
  7418  17E1  3001               	movlw	1
  7419  17E2  3196  26DD         	fcall	_setRFSW_Control
  7420                           
  7421                           ;RF_Control_B1.c: 309: }
  7422  17E4  0008               	return
  7423  17E5                     l8954:	
  7424                           
  7425                           ;RF_Control_B1.c: 311: else if(RF_Data[15] == 0x11)
  7426  17E5  0021               	movlb	1	; select bank1
  7427  17E6  082F               	movf	(_RF_Data^(0+128)+15),w
  7428  17E7  3A11               	xorlw	17
  7429  17E8  1D03               	skipz
  7430  17E9  2FEE               	goto	l8958
  7431                           
  7432                           ;RF_Control_B1.c: 312: {
  7433                           ;RF_Control_B1.c: 313: setRFSW_AdjControl(1);
  7434  17EA  3001               	movlw	1
  7435  17EB  319C  241E         	fcall	_setRFSW_AdjControl
  7436                           
  7437                           ;RF_Control_B1.c: 314: }
  7438  17ED  0008               	return
  7439  17EE                     l8958:	
  7440                           
  7441                           ;RF_Control_B1.c: 319: else if(RF_Data[15] == 0x02)
  7442  17EE  0021               	movlb	1	; select bank1
  7443  17EF  082F               	movf	(_RF_Data^(0+128)+15),w
  7444  17F0  3A02               	xorlw	2
  7445  17F1  1D03               	skipz
  7446  17F2  2FF7               	goto	l8962
  7447                           
  7448                           ;RF_Control_B1.c: 320: {
  7449                           ;RF_Control_B1.c: 321: setRFSW_Control(2);
  7450  17F3  3002               	movlw	2
  7451  17F4  3196  26DD         	fcall	_setRFSW_Control
  7452                           
  7453                           ;RF_Control_B1.c: 322: }
  7454  17F6  0008               	return
  7455  17F7                     l8962:	
  7456                           
  7457                           ;RF_Control_B1.c: 324: else if(RF_Data[15] == 0x21)
  7458  17F7  0021               	movlb	1	; select bank1
  7459  17F8  082F               	movf	(_RF_Data^(0+128)+15),w
  7460  17F9  3A21               	xorlw	33
  7461  17FA  1D03               	skipz
  7462  17FB  0008               	return
  7463                           
  7464                           ;RF_Control_B1.c: 325: {
  7465                           ;RF_Control_B1.c: 326: setRFSW_AdjControl(2);
  7466  17FC  3002               	movlw	2
  7467  17FD  319C  241E         	fcall	_setRFSW_AdjControl
  7468  17FF  0008               	return
  7469  1800                     __end_of_setControl_Lights_Table:	
  7470                           
  7471                           	psect	text26
  7472  16DD                     __ptext26:	
  7473 ;; *************** function _setRFSW_Control *****************
  7474 ;; Defined at:
  7475 ;;		line 367 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  sw              1    wreg     unsigned char 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  sw              1   11[BANK0 ] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;		None               void
  7482 ;; Registers used:
  7483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;Total ram usage:        2 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    6
  7496 ;; This function calls:
  7497 ;;		_RfSWPointSelect
  7498 ;;		_setBuz
  7499 ;;		_setDelayOff_GO
  7500 ;;		_setDimmerLights_Switch
  7501 ;;		_setDimmerLights_Trigger
  7502 ;;		_setRF_DimmerLights
  7503 ;;		_setSw_Status
  7504 ;;		_setTxData
  7505 ;; This function is called by:
  7506 ;;		_setControl_Lights_Table
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _setRFSW_Control
  7512  16DD                     _setRFSW_Control:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7516                           ;setRFSW_Control@sw stored from wreg
  7517  16DD  0020               	movlb	0	; select bank0
  7518  16DE  00AB               	movwf	setRFSW_Control@sw
  7519                           
  7520                           ;RF_Control_B1.c: 369: RfSWPointSelect(sw);
  7521  16DF  082B               	movf	setRFSW_Control@sw,w
  7522  16E0  31A6  2659  3196   	fcall	_RfSWPointSelect
  7523                           
  7524                           ;RF_Control_B1.c: 370: if(!RFSW->Status)
  7525  16E3  0021               	movlb	1	; select bank1
  7526  16E4  083C               	movf	_RFSW^(0+128),w
  7527  16E5  0086               	movwf	6
  7528  16E6  0187               	clrf	7
  7529  16E7  1801               	btfsc	1,0
  7530  16E8  2F1E               	goto	l8820
  7531                           
  7532                           ;RF_Control_B1.c: 371: {
  7533                           ;RF_Control_B1.c: 372: if(RF_Data[16] == 0x80)
  7534  16E9  0830               	movf	(_RF_Data^(0+128)+16),w
  7535  16EA  3A80               	xorlw	128
  7536  16EB  1D03               	skipz
  7537  16EC  2EFA               	goto	l8810
  7538                           
  7539                           ;RF_Control_B1.c: 373: {
  7540                           ;RF_Control_B1.c: 374: setDelayOff_GO(sw,1,RF_Data[17]);
  7541  16ED  0020               	movlb	0	; select bank0
  7542  16EE  01A3               	clrf	setDelayOff_GO@command
  7543  16EF  0AA3               	incf	setDelayOff_GO@command,f
  7544  16F0  0021               	movlb	1	; select bank1
  7545  16F1  0831               	movf	(_RF_Data^(0+128)+17),w
  7546  16F2  0020               	movlb	0	; select bank0
  7547  16F3  00AA               	movwf	??_setRFSW_Control
  7548  16F4  082A               	movf	??_setRFSW_Control,w
  7549  16F5  00A4               	movwf	setDelayOff_GO@value
  7550  16F6  082B               	movf	setRFSW_Control@sw,w
  7551  16F7  319F  27A4  3196   	fcall	_setDelayOff_GO
  7552  16FA                     l8810:	
  7553                           
  7554                           ;RF_Control_B1.c: 375: }
  7555                           ;RF_Control_B1.c: 376: RFSW->Status=1;
  7556  16FA  0021               	movlb	1	; select bank1
  7557  16FB  083C               	movf	_RFSW^(0+128),w
  7558  16FC  0086               	movwf	6
  7559  16FD  0187               	clrf	7
  7560  16FE  1401               	bsf	1,0
  7561                           
  7562                           ;RF_Control_B1.c: 377: setSw_Status(sw,1);
  7563  16FF  0020               	movlb	0	; select bank0
  7564  1700  01A2               	clrf	setSw_Status@command
  7565  1701  0AA2               	incf	setSw_Status@command,f
  7566  1702  082B               	movf	setRFSW_Control@sw,w
  7567  1703  31A5  252D  3196   	fcall	_setSw_Status
  7568                           
  7569                           ;RF_Control_B1.c: 379: setDimmerLights_Trigger(sw,1);
  7570  1706  0020               	movlb	0	; select bank0
  7571  1707  01A2               	clrf	setDimmerLights_Trigger@command
  7572  1708  0AA2               	incf	setDimmerLights_Trigger@command,f
  7573  1709  082B               	movf	setRFSW_Control@sw,w
  7574  170A  31A5  255C  3196   	fcall	_setDimmerLights_Trigger
  7575                           
  7576                           ;RF_Control_B1.c: 380: setDimmerLights_Switch(sw,1);
  7577  170D  0020               	movlb	0	; select bank0
  7578  170E  01A2               	clrf	setDimmerLights_Switch@command
  7579  170F  0AA2               	incf	setDimmerLights_Switch@command,f
  7580  1710  082B               	movf	setRFSW_Control@sw,w
  7581  1711  31A5  254C  3196   	fcall	_setDimmerLights_Switch
  7582                           
  7583                           ;RF_Control_B1.c: 382: setRF_DimmerLights(sw,RFSW->Status);
  7584  1714  0021               	movlb	1	; select bank1
  7585  1715  083C               	movf	_RFSW^(0+128),w
  7586  1716  0086               	movwf	6
  7587  1717  0187               	clrf	7
  7588  1718  3000               	movlw	0
  7589  1719  1801               	btfsc	1,0
  7590  171A  3001               	movlw	1
  7591  171B  0020               	movlb	0	; select bank0
  7592  171C  00A0               	movwf	setRF_DimmerLights@on
  7593  171D  2F5C               	goto	L3
  7594  171E                     l8820:	
  7595                           ;RF_Control_B1.c: 383: }
  7596                           
  7597                           
  7598                           ;RF_Control_B1.c: 384: else
  7599                           ;RF_Control_B1.c: 385: {
  7600                           ;RF_Control_B1.c: 386: if(RF_Data[16] == 0x80)
  7601  171E  0021               	movlb	1	; select bank1
  7602  171F  0830               	movf	(_RF_Data^(0+128)+16),w
  7603  1720  3A80               	xorlw	128
  7604  1721  1D03               	skipz
  7605  1722  2F34               	goto	l8824
  7606                           
  7607                           ;RF_Control_B1.c: 387: {
  7608                           ;RF_Control_B1.c: 388: setDelayOff_GO(sw,1,RF_Data[17]);
  7609  1723  0020               	movlb	0	; select bank0
  7610  1724  01A3               	clrf	setDelayOff_GO@command
  7611  1725  0AA3               	incf	setDelayOff_GO@command,f
  7612  1726  0021               	movlb	1	; select bank1
  7613  1727  0831               	movf	(_RF_Data^(0+128)+17),w
  7614  1728  0020               	movlb	0	; select bank0
  7615  1729  00AA               	movwf	??_setRFSW_Control
  7616  172A  082A               	movf	??_setRFSW_Control,w
  7617  172B  00A4               	movwf	setDelayOff_GO@value
  7618  172C  082B               	movf	setRFSW_Control@sw,w
  7619  172D  319F  27A4  3196   	fcall	_setDelayOff_GO
  7620                           
  7621                           ;RF_Control_B1.c: 389: setRF_DimmerLights(sw,1);
  7622  1730  0020               	movlb	0	; select bank0
  7623  1731  01A0               	clrf	setRF_DimmerLights@on
  7624  1732  0AA0               	incf	setRF_DimmerLights@on,f
  7625  1733  2F5C               	goto	L3
  7626  1734                     l8824:	
  7627                           ;RF_Control_B1.c: 390: }
  7628                           
  7629                           
  7630                           ;RF_Control_B1.c: 391: else
  7631                           ;RF_Control_B1.c: 392: {
  7632                           ;RF_Control_B1.c: 393: RFSW->Status=0;
  7633  1734  0021               	movlb	1	; select bank1
  7634  1735  083C               	movf	_RFSW^(0+128),w
  7635  1736  0086               	movwf	6
  7636  1737  0187               	clrf	7
  7637  1738  1001               	bcf	1,0
  7638                           
  7639                           ;RF_Control_B1.c: 394: setSw_Status(sw,0);
  7640  1739  0020               	movlb	0	; select bank0
  7641  173A  01A2               	clrf	setSw_Status@command
  7642  173B  082B               	movf	setRFSW_Control@sw,w
  7643  173C  31A5  252D  3196   	fcall	_setSw_Status
  7644                           
  7645                           ;RF_Control_B1.c: 396: setDimmerLights_Trigger(sw,1);
  7646  173F  0020               	movlb	0	; select bank0
  7647  1740  01A2               	clrf	setDimmerLights_Trigger@command
  7648  1741  0AA2               	incf	setDimmerLights_Trigger@command,f
  7649  1742  082B               	movf	setRFSW_Control@sw,w
  7650  1743  31A5  255C  3196   	fcall	_setDimmerLights_Trigger
  7651                           
  7652                           ;RF_Control_B1.c: 397: setDimmerLights_Switch(sw,RFSW->Status);
  7653  1746  0021               	movlb	1	; select bank1
  7654  1747  083C               	movf	_RFSW^(0+128),w
  7655  1748  0086               	movwf	6
  7656  1749  0187               	clrf	7
  7657  174A  3000               	movlw	0
  7658  174B  1801               	btfsc	1,0
  7659  174C  3001               	movlw	1
  7660  174D  0020               	movlb	0	; select bank0
  7661  174E  00A2               	movwf	setDimmerLights_Switch@command
  7662  174F  082B               	movf	setRFSW_Control@sw,w
  7663  1750  31A5  254C  3196   	fcall	_setDimmerLights_Switch
  7664                           
  7665                           ;RF_Control_B1.c: 399: setDelayOff_GO(sw,0,0);
  7666  1753  0020               	movlb	0	; select bank0
  7667  1754  01A3               	clrf	setDelayOff_GO@command
  7668  1755  01A4               	clrf	setDelayOff_GO@value
  7669  1756  082B               	movf	setRFSW_Control@sw,w
  7670  1757  319F  27A4  3196   	fcall	_setDelayOff_GO
  7671                           
  7672                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw,0);
  7673  175A  0020               	movlb	0	; select bank0
  7674  175B  01A0               	clrf	setRF_DimmerLights@on
  7675  175C                     L3:	
  7676  175C  082B               	movf	setRFSW_Control@sw,w
  7677  175D  319E  26EE  3196   	fcall	_setRF_DimmerLights
  7678                           
  7679                           ;RF_Control_B1.c: 401: }
  7680                           ;RF_Control_B1.c: 402: }
  7681                           ;RF_Control_B1.c: 403: setBuz(1,100);
  7682  1760  3064               	movlw	100
  7683  1761  0020               	movlb	0	; select bank0
  7684  1762  00A6               	movwf	setBuz@time
  7685  1763  3000               	movlw	0
  7686  1764  00A7               	movwf	setBuz@time+1
  7687  1765  3001               	movlw	1
  7688  1766  3193  23E5  3196   	fcall	_setBuz
  7689                           
  7690                           ;RF_Control_B1.c: 404: setTxData(1);
  7691  1769  3001               	movlw	1
  7692  176A  318B  2318         	fcall	_setTxData
  7693  176C  0008               	return
  7694  176D                     __end_of_setRFSW_Control:	
  7695                           
  7696                           	psect	text27
  7697  1FA4                     __ptext27:	
  7698 ;; *************** function _setDelayOff_GO *****************
  7699 ;; Defined at:
  7700 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  sw              1    wreg     unsigned char 
  7703 ;;  command         1    3[BANK0 ] unsigned char 
  7704 ;;  value           1    4[BANK0 ] unsigned char 
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  sw              1    7[BANK0 ] unsigned char 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;		None               void
  7709 ;; Registers used:
  7710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7716 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;Total ram usage:        5 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    5
  7723 ;; This function calls:
  7724 ;;		_DelayOffPointSelect
  7725 ;;		_DelayTimejudge
  7726 ;; This function is called by:
  7727 ;;		_setRFSW_Control
  7728 ;;		_Sw_DimmerOffFunc
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _setDelayOff_GO
  7734  1FA4                     _setDelayOff_GO:	
  7735                           
  7736                           ;incstack = 0
  7737                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7738                           ;setDelayOff_GO@sw stored from wreg
  7739  1FA4  0020               	movlb	0	; select bank0
  7740  1FA5  00A7               	movwf	setDelayOff_GO@sw
  7741                           
  7742                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7743  1FA6  0827               	movf	setDelayOff_GO@sw,w
  7744  1FA7  31A6  2685  319F   	fcall	_DelayOffPointSelect
  7745                           
  7746                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7747  1FAA  0021               	movlb	1	; select bank1
  7748  1FAB  0838               	movf	_DelayOff^(0+128),w
  7749  1FAC  0086               	movwf	6
  7750  1FAD  0187               	clrf	7
  7751  1FAE  1C01               	btfss	1,0
  7752  1FAF  0008               	return
  7753                           
  7754                           ;DelayOff_B1.c: 96: {
  7755                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7756  1FB0  0838               	movf	_DelayOff^(0+128),w
  7757  1FB1  0086               	movwf	6
  7758  1FB2  0187               	clrf	7
  7759  1FB3  0020               	movlb	0	; select bank0
  7760  1FB4  0823               	movf	setDelayOff_GO@command,w
  7761  1FB5  1081               	bcf	1,1
  7762  1FB6  1D03               	skipz
  7763  1FB7  1481               	bsf	1,1
  7764                           
  7765                           ;DelayOff_B1.c: 98: if(command)
  7766  1FB8  0823               	movf	setDelayOff_GO@command,w
  7767  1FB9  1903               	btfsc	3,2
  7768  1FBA  2FE6               	goto	l6576
  7769                           
  7770                           ;DelayOff_B1.c: 99: {
  7771                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7772  1FBB  0824               	movf	setDelayOff_GO@value,w
  7773  1FBC  3199  21DF  319F   	fcall	_DelayTimejudge
  7774  1FBF  0020               	movlb	0	; select bank0
  7775  1FC0  00A5               	movwf	??_setDelayOff_GO
  7776  1FC1  0021               	movlb	1	; select bank1
  7777  1FC2  0A38               	incf	_DelayOff^(0+128),w
  7778  1FC3  0086               	movwf	6
  7779  1FC4  0187               	clrf	7
  7780  1FC5  0020               	movlb	0	; select bank0
  7781  1FC6  0825               	movf	??_setDelayOff_GO,w
  7782  1FC7  0081               	movwf	1
  7783                           
  7784                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7785  1FC8  300F               	movlw	15
  7786  1FC9  0524               	andwf	setDelayOff_GO@value,w
  7787  1FCA  00A5               	movwf	??_setDelayOff_GO
  7788  1FCB  0825               	movf	??_setDelayOff_GO,w
  7789  1FCC  3A05               	xorlw	5
  7790  1FCD  1903               	skipnz
  7791  1FCE  2FD3               	goto	l6570
  7792  1FCF  0824               	movf	setDelayOff_GO@value,w
  7793  1FD0  390F               	andlw	15
  7794  1FD1  1D03               	btfss	3,2
  7795  1FD2  2FD9               	goto	l6574
  7796  1FD3                     l6570:	
  7797  1FD3  3026               	movlw	38
  7798  1FD4  0224               	subwf	setDelayOff_GO@value,w
  7799  1FD5  1803               	skipnc
  7800  1FD6  2FD9               	goto	l6574
  7801                           
  7802                           ;DelayOff_B1.c: 102: {
  7803                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7804  1FD7  0824               	movf	setDelayOff_GO@value,w
  7805  1FD8  2FDA               	goto	L4
  7806  1FD9                     l6574:	
  7807                           ;DelayOff_B1.c: 104: }
  7808                           
  7809                           
  7810                           ;DelayOff_B1.c: 105: else
  7811                           ;DelayOff_B1.c: 106: {
  7812                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7813  1FD9  3005               	movlw	5
  7814  1FDA                     L4:	
  7815  1FDA  00A5               	movwf	??_setDelayOff_GO
  7816  1FDB  0827               	movf	setDelayOff_GO@sw,w
  7817  1FDC  3E1A               	addlw	26
  7818  1FDD  076F               	addwf	_Product,w
  7819  1FDE  00A6               	movwf	??_setDelayOff_GO+1
  7820  1FDF  0826               	movf	??_setDelayOff_GO+1,w
  7821  1FE0  0086               	movwf	6
  7822  1FE1  3001               	movlw	1	; select bank2/3
  7823  1FE2  0087               	movwf	7
  7824  1FE3  0825               	movf	??_setDelayOff_GO,w
  7825  1FE4  0081               	movwf	1
  7826                           
  7827                           ;DelayOff_B1.c: 108: }
  7828                           ;DelayOff_B1.c: 109: }
  7829  1FE5  2FF2               	goto	l6580
  7830  1FE6                     l6576:	
  7831                           
  7832                           ;DelayOff_B1.c: 110: else if(!command)
  7833  1FE6  08A3               	movf	setDelayOff_GO@command,f
  7834  1FE7  1D03               	skipz
  7835  1FE8  2FF2               	goto	l6580
  7836                           
  7837                           ;DelayOff_B1.c: 111: {
  7838                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7839  1FE9  0827               	movf	setDelayOff_GO@sw,w
  7840  1FEA  3E1A               	addlw	26
  7841  1FEB  076F               	addwf	_Product,w
  7842  1FEC  00A5               	movwf	??_setDelayOff_GO
  7843  1FED  0825               	movf	??_setDelayOff_GO,w
  7844  1FEE  0086               	movwf	6
  7845  1FEF  3001               	movlw	1	; select bank2/3
  7846  1FF0  0087               	movwf	7
  7847  1FF1  0181               	clrf	1
  7848  1FF2                     l6580:	
  7849                           
  7850                           ;DelayOff_B1.c: 113: }
  7851                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7852  1FF2  0021               	movlb	1	; select bank1
  7853  1FF3  0838               	movf	_DelayOff^(0+128),w
  7854  1FF4  3E02               	addlw	2
  7855  1FF5  0086               	movwf	6
  7856  1FF6  0187               	clrf	7
  7857  1FF7  3000               	movlw	0
  7858  1FF8  3FC0               	movwi [0]fsr1
  7859  1FF9  3FC1               	movwi [1]fsr1
  7860                           
  7861                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7862  1FFA  0838               	movf	_DelayOff^(0+128),w
  7863  1FFB  3E04               	addlw	4
  7864  1FFC  0086               	movwf	6
  7865  1FFD  0187               	clrf	7
  7866  1FFE  0181               	clrf	1
  7867  1FFF  0008               	return
  7868  2000                     __end_of_setDelayOff_GO:	
  7869                           
  7870                           	psect	text28
  7871  19DF                     __ptext28:	
  7872 ;; *************** function _DelayTimejudge *****************
  7873 ;; Defined at:
  7874 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  value           1    wreg     unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  value           1    2[BANK0 ] unsigned char 
  7879 ;;  i               1    1[BANK0 ] unsigned char 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  1    wreg      unsigned char 
  7882 ;; Registers used:
  7883 ;;		wreg
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;Total ram usage:        3 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    4
  7896 ;; This function calls:
  7897 ;;		Nothing
  7898 ;; This function is called by:
  7899 ;;		_setDelayOff_GO
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           
  7904                           ;psect for function _DelayTimejudge
  7905  19DF                     _DelayTimejudge:	
  7906                           
  7907                           ;incstack = 0
  7908                           ; Regs used in _DelayTimejudge: [wreg]
  7909                           ;DelayTimejudge@value stored from wreg
  7910  19DF  0020               	movlb	0	; select bank0
  7911  19E0  00A2               	movwf	DelayTimejudge@value
  7912                           
  7913                           ;DelayOff_B1.c: 121: char i=5;
  7914  19E1  3005               	movlw	5
  7915  19E2  00A0               	movwf	??_DelayTimejudge
  7916  19E3  0820               	movf	??_DelayTimejudge,w
  7917  19E4  00A1               	movwf	DelayTimejudge@i
  7918                           
  7919                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7920  19E5  0822               	movf	DelayTimejudge@value,w
  7921  19E6  3A05               	xorlw	5
  7922  19E7  1D03               	skipz
  7923  19E8  29EB               	goto	l6404
  7924                           
  7925                           ;DelayOff_B1.c: 123: {
  7926                           ;DelayOff_B1.c: 124: i=5;
  7927  19E9  3005               	movlw	5
  7928  19EA  2A08               	goto	L9
  7929  19EB                     l6404:	
  7930                           ;DelayOff_B1.c: 125: }
  7931                           
  7932                           
  7933                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7934  19EB  0822               	movf	DelayTimejudge@value,w
  7935  19EC  3A10               	xorlw	16
  7936  19ED  1D03               	skipz
  7937  19EE  29F1               	goto	l6408
  7938                           
  7939                           ;DelayOff_B1.c: 127: {
  7940                           ;DelayOff_B1.c: 128: i=10;
  7941  19EF  300A               	movlw	10
  7942  19F0  2A08               	goto	L9
  7943  19F1                     l6408:	
  7944                           ;DelayOff_B1.c: 129: }
  7945                           
  7946                           
  7947                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7948  19F1  0822               	movf	DelayTimejudge@value,w
  7949  19F2  3A15               	xorlw	21
  7950  19F3  1D03               	skipz
  7951  19F4  29F7               	goto	l6412
  7952                           
  7953                           ;DelayOff_B1.c: 131: {
  7954                           ;DelayOff_B1.c: 132: i=15;
  7955  19F5  300F               	movlw	15
  7956  19F6  2A08               	goto	L9
  7957  19F7                     l6412:	
  7958                           ;DelayOff_B1.c: 133: }
  7959                           
  7960                           
  7961                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7962  19F7  0822               	movf	DelayTimejudge@value,w
  7963  19F8  3A20               	xorlw	32
  7964  19F9  1D03               	skipz
  7965  19FA  29FD               	goto	l6416
  7966                           
  7967                           ;DelayOff_B1.c: 135: {
  7968                           ;DelayOff_B1.c: 136: i=20;
  7969  19FB  3014               	movlw	20
  7970  19FC  2A08               	goto	L9
  7971  19FD                     l6416:	
  7972                           ;DelayOff_B1.c: 137: }
  7973                           
  7974                           
  7975                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7976  19FD  0822               	movf	DelayTimejudge@value,w
  7977  19FE  3A25               	xorlw	37
  7978  19FF  1D03               	skipz
  7979  1A00  2A03               	goto	l6420
  7980                           
  7981                           ;DelayOff_B1.c: 139: {
  7982                           ;DelayOff_B1.c: 140: i=25;
  7983  1A01  3019               	movlw	25
  7984  1A02  2A08               	goto	L9
  7985  1A03                     l6420:	
  7986                           ;DelayOff_B1.c: 141: }
  7987                           
  7988                           
  7989                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  7990  1A03  0822               	movf	DelayTimejudge@value,w
  7991  1A04  3A30               	xorlw	48
  7992  1A05  1D03               	skipz
  7993  1A06  2A0B               	goto	l706
  7994                           
  7995                           ;DelayOff_B1.c: 143: {
  7996                           ;DelayOff_B1.c: 144: i=30;
  7997  1A07  301E               	movlw	30
  7998  1A08                     L9:	
  7999  1A08  00A0               	movwf	??_DelayTimejudge
  8000  1A09  0820               	movf	??_DelayTimejudge,w
  8001  1A0A  00A1               	movwf	DelayTimejudge@i
  8002  1A0B                     l706:	
  8003                           
  8004                           ;DelayOff_B1.c: 145: }
  8005                           ;DelayOff_B1.c: 146: return i;
  8006  1A0B  0821               	movf	DelayTimejudge@i,w
  8007  1A0C  0008               	return
  8008  1A0D                     __end_of_DelayTimejudge:	
  8009                           
  8010                           	psect	text29
  8011  1C1E                     __ptext29:	
  8012 ;; *************** function _setRFSW_AdjControl *****************
  8013 ;; Defined at:
  8014 ;;		line 407 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;  sw              1    wreg     unsigned char 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  sw              1   70[BANK0 ] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;		None               void
  8021 ;; Registers used:
  8022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;Total ram usage:        3 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    9
  8035 ;; This function calls:
  8036 ;;		_RfSWPointSelect
  8037 ;;		_setRF_DimmerValue
  8038 ;;		_setTxData
  8039 ;; This function is called by:
  8040 ;;		_setControl_Lights_Table
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function _setRFSW_AdjControl
  8046  1C1E                     _setRFSW_AdjControl:	
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8050                           ;setRFSW_AdjControl@sw stored from wreg
  8051  1C1E  0020               	movlb	0	; select bank0
  8052  1C1F  00E6               	movwf	setRFSW_AdjControl@sw
  8053                           
  8054                           ;RF_Control_B1.c: 409: RfSWPointSelect(sw);
  8055  1C20  0866               	movf	setRFSW_AdjControl@sw,w
  8056  1C21  31A6  2659  319C   	fcall	_RfSWPointSelect
  8057                           
  8058                           ;RF_Control_B1.c: 410: if(RFSW->Status)
  8059  1C24  0021               	movlb	1	; select bank1
  8060  1C25  083C               	movf	_RFSW^(0+128),w
  8061  1C26  0086               	movwf	6
  8062  1C27  0187               	clrf	7
  8063  1C28  1C01               	btfss	1,0
  8064  1C29  2C36               	goto	l6808
  8065                           
  8066                           ;RF_Control_B1.c: 411: {
  8067                           ;RF_Control_B1.c: 412: Memory->Modify=1;
  8068  1C2A  0868               	movf	_Memory^(0+128),w
  8069  1C2B  3E22               	addlw	34
  8070  1C2C  0086               	movwf	6
  8071  1C2D  3002               	movlw	2	; select bank4/5
  8072  1C2E  0087               	movwf	7
  8073  1C2F  1401               	bsf	1,0
  8074                           
  8075                           ;RF_Control_B1.c: 413: setRF_DimmerValue(sw);
  8076  1C30  0020               	movlb	0	; select bank0
  8077  1C31  0866               	movf	setRFSW_AdjControl@sw,w
  8078  1C32  319B  2302  319C   	fcall	_setRF_DimmerValue
  8079                           
  8080                           ;RF_Control_B1.c: 414: }
  8081  1C35  2C48               	goto	l2746
  8082  1C36                     l6808:	
  8083                           
  8084                           ;RF_Control_B1.c: 415: else
  8085                           ;RF_Control_B1.c: 416: {
  8086                           ;RF_Control_B1.c: 417: Product->Data[9]=Product->Data[20+sw];
  8087  1C36  0020               	movlb	0	; select bank0
  8088  1C37  0866               	movf	setRFSW_AdjControl@sw,w
  8089  1C38  3E14               	addlw	20
  8090  1C39  076F               	addwf	_Product,w
  8091  1C3A  00E4               	movwf	??_setRFSW_AdjControl
  8092  1C3B  0864               	movf	??_setRFSW_AdjControl,w
  8093  1C3C  0086               	movwf	6
  8094  1C3D  3001               	movlw	1	; select bank2/3
  8095  1C3E  0087               	movwf	7
  8096  1C3F  0801               	movf	1,w
  8097  1C40  00E5               	movwf	??_setRFSW_AdjControl+1
  8098  1C41  086F               	movf	_Product,w
  8099  1C42  3E09               	addlw	9
  8100  1C43  0086               	movwf	6
  8101  1C44  3001               	movlw	1	; select bank2/3
  8102  1C45  0087               	movwf	7
  8103  1C46  0865               	movf	??_setRFSW_AdjControl+1,w
  8104  1C47  0081               	movwf	1
  8105  1C48                     l2746:	
  8106                           
  8107                           ;RF_Control_B1.c: 418: }
  8108                           ;RF_Control_B1.c: 419: Product->Data[17]=Product->Data[26+sw];
  8109  1C48  0020               	movlb	0	; select bank0
  8110  1C49  0866               	movf	setRFSW_AdjControl@sw,w
  8111  1C4A  3E1A               	addlw	26
  8112  1C4B  076F               	addwf	_Product,w
  8113  1C4C  00E4               	movwf	??_setRFSW_AdjControl
  8114  1C4D  0864               	movf	??_setRFSW_AdjControl,w
  8115  1C4E  0086               	movwf	6
  8116  1C4F  3001               	movlw	1	; select bank2/3
  8117  1C50  0087               	movwf	7
  8118  1C51  0801               	movf	1,w
  8119  1C52  00E5               	movwf	??_setRFSW_AdjControl+1
  8120  1C53  086F               	movf	_Product,w
  8121  1C54  3E11               	addlw	17
  8122  1C55  0086               	movwf	6
  8123  1C56  3001               	movlw	1	; select bank2/3
  8124  1C57  0087               	movwf	7
  8125  1C58  0865               	movf	??_setRFSW_AdjControl+1,w
  8126  1C59  0081               	movwf	1
  8127                           
  8128                           ;RF_Control_B1.c: 420: setTxData(1);
  8129  1C5A  3001               	movlw	1
  8130  1C5B  318B  2318         	fcall	_setTxData
  8131  1C5D  0008               	return
  8132  1C5E                     __end_of_setRFSW_AdjControl:	
  8133                           
  8134                           	psect	text30
  8135  1B02                     __ptext30:	
  8136 ;; *************** function _setRF_DimmerValue *****************
  8137 ;; Defined at:
  8138 ;;		line 431 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  lights          1    wreg     unsigned char 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;  lights          1   67[BANK0 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;		None               void
  8145 ;; Registers used:
  8146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        3 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    8
  8159 ;; This function calls:
  8160 ;;		_setDimmerLights_AdjRF
  8161 ;; This function is called by:
  8162 ;;		_setRFSW_AdjControl
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _setRF_DimmerValue
  8168  1B02                     _setRF_DimmerValue:	
  8169                           
  8170                           ;incstack = 0
  8171                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8172                           ;setRF_DimmerValue@lights stored from wreg
  8173  1B02  0020               	movlb	0	; select bank0
  8174  1B03  00E3               	movwf	setRF_DimmerValue@lights
  8175                           
  8176                           ;RF_Control_B1.c: 433: if(RF_Data[9] > 0x64)
  8177  1B04  3065               	movlw	101
  8178  1B05  0021               	movlb	1	; select bank1
  8179  1B06  0229               	subwf	(_RF_Data^(0+128)+9),w
  8180  1B07  1C03               	skipc
  8181  1B08  2B0F               	goto	l6670
  8182                           
  8183                           ;RF_Control_B1.c: 434: {
  8184                           ;RF_Control_B1.c: 435: RF_Data[9]=0x64;
  8185  1B09  3064               	movlw	100
  8186  1B0A  0020               	movlb	0	; select bank0
  8187  1B0B  00E1               	movwf	??_setRF_DimmerValue
  8188  1B0C  0861               	movf	??_setRF_DimmerValue,w
  8189  1B0D  0021               	movlb	1	; select bank1
  8190  1B0E  00A9               	movwf	(_RF_Data^(0+128)+9)
  8191  1B0F                     l6670:	
  8192                           
  8193                           ;RF_Control_B1.c: 436: }
  8194                           ;RF_Control_B1.c: 437: Product->Data[9]=RF_Data[9];
  8195  1B0F  0829               	movf	(_RF_Data^(0+128)+9),w
  8196  1B10  0020               	movlb	0	; select bank0
  8197  1B11  00E1               	movwf	??_setRF_DimmerValue
  8198  1B12  086F               	movf	_Product,w
  8199  1B13  3E09               	addlw	9
  8200  1B14  0086               	movwf	6
  8201  1B15  3001               	movlw	1	; select bank2/3
  8202  1B16  0087               	movwf	7
  8203  1B17  0861               	movf	??_setRF_DimmerValue,w
  8204  1B18  0081               	movwf	1
  8205                           
  8206                           ;RF_Control_B1.c: 438: Product->Data[11]=lights;
  8207  1B19  0863               	movf	setRF_DimmerValue@lights,w
  8208  1B1A  00E1               	movwf	??_setRF_DimmerValue
  8209  1B1B  086F               	movf	_Product,w
  8210  1B1C  3E0B               	addlw	11
  8211  1B1D  0086               	movwf	6
  8212  1B1E  3001               	movlw	1	; select bank2/3
  8213  1B1F  0087               	movwf	7
  8214  1B20  0861               	movf	??_setRF_DimmerValue,w
  8215  1B21  0081               	movwf	1
  8216                           
  8217                           ;RF_Control_B1.c: 439: Product->Data[(20+lights)]=Product->Data[9];
  8218  1B22  086F               	movf	_Product,w
  8219  1B23  3E09               	addlw	9
  8220  1B24  0086               	movwf	6
  8221  1B25  3001               	movlw	1	; select bank2/3
  8222  1B26  0087               	movwf	7
  8223  1B27  0801               	movf	1,w
  8224  1B28  00E1               	movwf	??_setRF_DimmerValue
  8225  1B29  0863               	movf	setRF_DimmerValue@lights,w
  8226  1B2A  3E14               	addlw	20
  8227  1B2B  076F               	addwf	_Product,w
  8228  1B2C  00E2               	movwf	??_setRF_DimmerValue+1
  8229  1B2D  0862               	movf	??_setRF_DimmerValue+1,w
  8230  1B2E  0086               	movwf	6
  8231  1B2F  3001               	movlw	1	; select bank2/3
  8232  1B30  0087               	movwf	7
  8233  1B31  0861               	movf	??_setRF_DimmerValue,w
  8234  1B32  0081               	movwf	1
  8235                           
  8236                           ;RF_Control_B1.c: 440: setDimmerLights_AdjRF(lights);
  8237  1B33  0863               	movf	setRF_DimmerValue@lights,w
  8238  1B34  3198  20CA         	fcall	_setDimmerLights_AdjRF
  8239  1B36  0008               	return
  8240  1B37                     __end_of_setRF_DimmerValue:	
  8241                           
  8242                           	psect	text31
  8243  18CA                     __ptext31:	
  8244 ;; *************** function _setDimmerLights_AdjRF *****************
  8245 ;; Defined at:
  8246 ;;		line 434 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  lights          1    wreg     unsigned char 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  lights          1   64[BANK0 ] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;Total ram usage:        2 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    7
  8267 ;; This function calls:
  8268 ;;		_DimmerLightsPointSelect
  8269 ;;		_getPercentValue
  8270 ;; This function is called by:
  8271 ;;		_setRF_DimmerValue
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           
  8276                           ;psect for function _setDimmerLights_AdjRF
  8277  18CA                     _setDimmerLights_AdjRF:	
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8281                           ;setDimmerLights_AdjRF@lights stored from wreg
  8282  18CA  0020               	movlb	0	; select bank0
  8283  18CB  00E0               	movwf	setDimmerLights_AdjRF@lights
  8284                           
  8285                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
  8286  18CC  0860               	movf	setDimmerLights_AdjRF@lights,w
  8287  18CD  31A5  25DF  3198   	fcall	_DimmerLightsPointSelect
  8288                           
  8289                           ;Dimmer_B1.c: 437: DimmerLights->AdjRF=1;
  8290  18D0  0020               	movlb	0	; select bank0
  8291  18D1  086C               	movf	_DimmerLights,w
  8292  18D2  0086               	movwf	6
  8293  18D3  3001               	movlw	1	; select bank2/3
  8294  18D4  0087               	movwf	7
  8295  18D5  1501               	bsf	1,2
  8296                           
  8297                           ;Dimmer_B1.c: 438: DimmerLights->Signal=1;
  8298  18D6  086C               	movf	_DimmerLights,w
  8299  18D7  0086               	movwf	6
  8300  18D8  3001               	movlw	1	; select bank2/3
  8301  18D9  0087               	movwf	7
  8302  18DA  1481               	bsf	1,1
  8303                           
  8304                           ;Dimmer_B1.c: 439: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8305  18DB  086F               	movf	_Product,w
  8306  18DC  3E09               	addlw	9
  8307  18DD  0086               	movwf	6
  8308  18DE  3001               	movlw	1	; select bank2/3
  8309  18DF  0087               	movwf	7
  8310  18E0  0801               	movf	1,w
  8311  18E1  319F  2749         	fcall	_getPercentValue
  8312  18E3  0020               	movlb	0	; select bank0
  8313  18E4  00DF               	movwf	??_setDimmerLights_AdjRF
  8314  18E5  086C               	movf	_DimmerLights,w
  8315  18E6  3E05               	addlw	5
  8316  18E7  0086               	movwf	6
  8317  18E8  3001               	movlw	1	; select bank2/3
  8318  18E9  0087               	movwf	7
  8319  18EA  085F               	movf	??_setDimmerLights_AdjRF,w
  8320  18EB  0081               	movwf	1
  8321  18EC  0008               	return
  8322  18ED                     __end_of_setDimmerLights_AdjRF:	
  8323                           
  8324                           	psect	text32
  8325  19B3                     __ptext32:	
  8326 ;; *************** function _RF_RxDisable *****************
  8327 ;; Defined at:
  8328 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  rf              1    wreg     unsigned char 
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  rf              1    4[BANK0 ] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;		None               void
  8335 ;; Registers used:
  8336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:        1 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    6
  8349 ;; This function calls:
  8350 ;;		_CC2500_WriteCommand
  8351 ;;		_RfPointSelect
  8352 ;;		_setINT_GO
  8353 ;; This function is called by:
  8354 ;;		_setRF_Main
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           
  8359                           ;psect for function _RF_RxDisable
  8360  19B3                     _RF_RxDisable:	
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8364                           ;RF_RxDisable@rf stored from wreg
  8365  19B3  0020               	movlb	0	; select bank0
  8366  19B4  00A4               	movwf	RF_RxDisable@rf
  8367                           
  8368                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  8369  19B5  0824               	movf	RF_RxDisable@rf,w
  8370  19B6  31A4  2439  3199   	fcall	_RfPointSelect
  8371                           
  8372                           ;RF_Control_B1.c: 201: if(RF->RxStatus || RF->ReceiveGO)
  8373  19B9  087C               	movf	_RF,w
  8374  19BA  0086               	movwf	6
  8375  19BB  0187               	clrf	7
  8376  19BC  1981               	btfsc	1,3
  8377  19BD  29C3               	goto	l9146
  8378  19BE  087C               	movf	_RF,w
  8379  19BF  0086               	movwf	6
  8380  19C0  0187               	clrf	7
  8381  19C1  1C81               	btfss	1,1
  8382  19C2  0008               	return
  8383  19C3                     l9146:	
  8384                           
  8385                           ;RF_Control_B1.c: 202: {
  8386                           ;RF_Control_B1.c: 203: RF->RxStatus=0;
  8387  19C3  087C               	movf	_RF,w
  8388  19C4  0086               	movwf	6
  8389  19C5  0187               	clrf	7
  8390  19C6  1181               	bcf	1,3
  8391                           
  8392                           ;RF_Control_B1.c: 204: RF->ReceiveGO=0;
  8393  19C7  087C               	movf	_RF,w
  8394  19C8  0086               	movwf	6
  8395  19C9  0187               	clrf	7
  8396  19CA  1081               	bcf	1,1
  8397                           
  8398                           ;RF_Control_B1.c: 205: RF->DebounceTime=0;
  8399  19CB  0A7C               	incf	_RF,w
  8400  19CC  0086               	movwf	6
  8401  19CD  0187               	clrf	7
  8402  19CE  0181               	clrf	1
  8403                           
  8404                           ;RF_Control_B1.c: 206: RF->Debounce=0;
  8405  19CF  087C               	movf	_RF,w
  8406  19D0  0086               	movwf	6
  8407  19D1  0187               	clrf	7
  8408  19D2  1281               	bcf	1,5
  8409                           
  8410                           ;RF_Control_B1.c: 207: CC2500_WriteCommand(0x36);
  8411  19D3  3036               	movlw	54
  8412  19D4  31A5  253C  3199   	fcall	_CC2500_WriteCommand
  8413                           
  8414                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x3A);
  8415  19D7  303A               	movlw	58
  8416  19D8  31A5  253C  3199   	fcall	_CC2500_WriteCommand
  8417                           
  8418                           ;RF_Control_B1.c: 209: setINT_GO(0);
  8419  19DB  3000               	movlw	0
  8420  19DC  31A4  2410         	fcall	_setINT_GO
  8421  19DE  0008               	return
  8422  19DF                     __end_of_RF_RxDisable:	
  8423                           
  8424                           	psect	text33
  8425  1D25                     __ptext33:	
  8426 ;; *************** function _CC2500_TxData *****************
  8427 ;; Defined at:
  8428 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;		None               void
  8435 ;; Registers used:
  8436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        2 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    6
  8449 ;; This function calls:
  8450 ;;		_CC2500_WriteByte
  8451 ;;		_CC2500_WriteCommand
  8452 ;; This function is called by:
  8453 ;;		_setRF_Main
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _CC2500_TxData
  8459  1D25                     _CC2500_TxData:	
  8460                           
  8461                           ;CC2500_B1.c: 32: unsigned char loop_e;
  8462                           ;CC2500_B1.c: 34: RC4=0;
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8466  1D25  0020               	movlb	0	; select bank0
  8467  1D26  120E               	bcf	14,4	;volatile
  8468                           
  8469                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  8470  1D27  307F               	movlw	127
  8471  1D28  00A4               	movwf	??_CC2500_TxData
  8472  1D29  0824               	movf	??_CC2500_TxData,w
  8473  1D2A  0021               	movlb	1	; select bank1
  8474  1D2B  00BF               	movwf	_SPI0Buffer^(0+128)
  8475  1D2C                     l307:	
  8476                           ;CC2500_B1.c: 36: while(RC2==1);
  8477                           
  8478  1D2C  0020               	movlb	0	; select bank0
  8479  1D2D  190E               	btfsc	14,2	;volatile
  8480  1D2E  2D2C               	goto	l307
  8481                           
  8482                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  8483  1D2F  31A6  26B4  319D   	fcall	_CC2500_WriteByte
  8484                           
  8485                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  8486  1D32  0021               	movlb	1	; select bank1
  8487  1D33  0840               	movf	_Tx_Length^(0+128),w
  8488  1D34  0020               	movlb	0	; select bank0
  8489  1D35  00A4               	movwf	??_CC2500_TxData
  8490  1D36  0824               	movf	??_CC2500_TxData,w
  8491  1D37  0021               	movlb	1	; select bank1
  8492  1D38  00BF               	movwf	_SPI0Buffer^(0+128)
  8493                           
  8494                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  8495  1D39  31A6  26B4  319D   	fcall	_CC2500_WriteByte
  8496                           
  8497                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  8498  1D3C  0020               	movlb	0	; select bank0
  8499  1D3D  01A5               	clrf	CC2500_TxData@loop_e
  8500  1D3E                     l6966:	
  8501  1D3E  0021               	movlb	1	; select bank1
  8502  1D3F  0840               	movf	_Tx_Length^(0+128),w
  8503  1D40  0020               	movlb	0	; select bank0
  8504  1D41  0225               	subwf	CC2500_TxData@loop_e,w
  8505  1D42  1803               	btfsc	3,0
  8506  1D43  2D56               	goto	l312
  8507                           
  8508                           ;CC2500_B1.c: 41: {
  8509                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  8510  1D44  0825               	movf	CC2500_TxData@loop_e,w
  8511  1D45  3EA0               	addlw	_RF_Data& (0+255)
  8512  1D46  0086               	movwf	6
  8513  1D47  0187               	clrf	7
  8514  1D48  0801               	movf	1,w
  8515  1D49  00A4               	movwf	??_CC2500_TxData
  8516  1D4A  0824               	movf	??_CC2500_TxData,w
  8517  1D4B  0021               	movlb	1	; select bank1
  8518  1D4C  00BF               	movwf	_SPI0Buffer^(0+128)
  8519                           
  8520                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8521  1D4D  31A6  26B4  319D   	fcall	_CC2500_WriteByte
  8522  1D50  3001               	movlw	1
  8523  1D51  0020               	movlb	0	; select bank0
  8524  1D52  00A4               	movwf	??_CC2500_TxData
  8525  1D53  0824               	movf	??_CC2500_TxData,w
  8526  1D54  07A5               	addwf	CC2500_TxData@loop_e,f
  8527  1D55  2D3E               	goto	l6966
  8528  1D56                     l312:	
  8529                           
  8530                           ;CC2500_B1.c: 44: }
  8531                           ;CC2500_B1.c: 45: RC4=1;
  8532  1D56  160E               	bsf	14,4	;volatile
  8533                           
  8534                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8535  1D57  3035               	movlw	53
  8536  1D58  31A5  253C  319D   	fcall	_CC2500_WriteCommand
  8537  1D5B                     l313:	
  8538                           ;CC2500_B1.c: 47: while(RB0==0);
  8539                           
  8540  1D5B  0020               	movlb	0	; select bank0
  8541  1D5C  1C0D               	btfss	13,0	;volatile
  8542  1D5D  2D5B               	goto	l313
  8543  1D5E                     l316:	
  8544                           ;CC2500_B1.c: 48: while(RB0==1);
  8545                           
  8546  1D5E  180D               	btfsc	13,0	;volatile
  8547  1D5F  2D5E               	goto	l316
  8548                           
  8549                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8550  1D60  3036               	movlw	54
  8551  1D61  31A5  253C  319D   	fcall	_CC2500_WriteCommand
  8552                           
  8553                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8554  1D64  303B               	movlw	59
  8555  1D65  31A5  253C         	fcall	_CC2500_WriteCommand
  8556                           
  8557                           ;CC2500_B1.c: 51: Transceive_OK=1;
  8558  1D67  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8559  1D68  0008               	return
  8560  1D69                     __end_of_CC2500_TxData:	
  8561                           
  8562                           	psect	text34
  8563  1162                     __ptext34:	
  8564 ;; *************** function _CC2500_RxData *****************
  8565 ;; Defined at:
  8566 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    6
  8587 ;; This function calls:
  8588 ;;		_CC2500_ReadByte
  8589 ;;		_CC2500_ReadStatus
  8590 ;;		_CC2500_WriteByte
  8591 ;;		_CC2500_WriteCommand
  8592 ;;		_setRF_RxStatus
  8593 ;; This function is called by:
  8594 ;;		_setRF_Main
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _CC2500_RxData
  8600  1162                     _CC2500_RxData:	
  8601                           
  8602                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8603                           ;CC2500_B1.c: 62: if(RB0 == 1)
  8604                           
  8605                           ;incstack = 0
  8606                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8607  1162  0020               	movlb	0	; select bank0
  8608  1163  180D               	btfsc	13,0	;volatile
  8609  1164                     l323:	
  8610                           ;CC2500_B1.c: 63: {
  8611                           ;CC2500_B1.c: 64: while(RB0 == 1);
  8612                           
  8613  1164  180D               	btfsc	13,0	;volatile
  8614  1165  2964               	goto	l323
  8615                           
  8616                           ;CC2500_B1.c: 65: }
  8617                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8618  1166  303B               	movlw	59
  8619  1167  31A7  274D  3191   	fcall	_CC2500_ReadStatus
  8620                           
  8621                           ;CC2500_B1.c: 67: if(s_data != 0)
  8622  116A  0021               	movlb	1	; select bank1
  8623  116B  0843               	movf	_s_data^(0+128),w
  8624  116C  1903               	btfsc	3,2
  8625  116D  29B8               	goto	l9004
  8626                           
  8627                           ;CC2500_B1.c: 69: {
  8628                           ;CC2500_B1.c: 70: RC4=0;
  8629  116E  0020               	movlb	0	; select bank0
  8630  116F  120E               	bcf	14,4	;volatile
  8631                           
  8632                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  8633  1170  30FF               	movlw	255
  8634  1171  00A4               	movwf	??_CC2500_RxData
  8635  1172  0824               	movf	??_CC2500_RxData,w
  8636  1173  0021               	movlb	1	; select bank1
  8637  1174  00BF               	movwf	_SPI0Buffer^(0+128)
  8638  1175                     l327:	
  8639                           ;CC2500_B1.c: 72: while(RC2==1);
  8640                           
  8641  1175  0020               	movlb	0	; select bank0
  8642  1176  190E               	btfsc	14,2	;volatile
  8643  1177  2975               	goto	l327
  8644                           
  8645                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8646  1178  31A6  26B4  3191   	fcall	_CC2500_WriteByte
  8647                           
  8648                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8649  117B  31A7  2784  3191   	fcall	_CC2500_ReadByte
  8650                           
  8651                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  8652  117E  0021               	movlb	1	; select bank1
  8653  117F  083F               	movf	_SPI0Buffer^(0+128),w
  8654  1180  0020               	movlb	0	; select bank0
  8655  1181  00A4               	movwf	??_CC2500_RxData
  8656  1182  0824               	movf	??_CC2500_RxData,w
  8657  1183  0021               	movlb	1	; select bank1
  8658  1184  00BE               	movwf	_Rx_Length^(0+128)
  8659                           
  8660                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  8661  1185  0020               	movlb	0	; select bank0
  8662  1186  01A5               	clrf	CC2500_RxData@loop_f
  8663  1187                     l8990:	
  8664  1187  0021               	movlb	1	; select bank1
  8665  1188  083E               	movf	_Rx_Length^(0+128),w
  8666  1189  0020               	movlb	0	; select bank0
  8667  118A  0225               	subwf	CC2500_RxData@loop_f,w
  8668  118B  1803               	btfsc	3,0
  8669  118C  299F               	goto	l8992
  8670                           
  8671                           ;CC2500_B1.c: 78: {
  8672                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  8673  118D  31A7  2784  3191   	fcall	_CC2500_ReadByte
  8674                           
  8675                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  8676  1190  0021               	movlb	1	; select bank1
  8677  1191  083F               	movf	_SPI0Buffer^(0+128),w
  8678  1192  0020               	movlb	0	; select bank0
  8679  1193  00A4               	movwf	??_CC2500_RxData
  8680  1194  0825               	movf	CC2500_RxData@loop_f,w
  8681  1195  3EA0               	addlw	_RF_Data& (0+255)
  8682  1196  0086               	movwf	6
  8683  1197  0187               	clrf	7
  8684  1198  0824               	movf	??_CC2500_RxData,w
  8685  1199  0081               	movwf	1
  8686  119A  3001               	movlw	1
  8687  119B  00A4               	movwf	??_CC2500_RxData
  8688  119C  0824               	movf	??_CC2500_RxData,w
  8689  119D  07A5               	addwf	CC2500_RxData@loop_f,f
  8690  119E  2987               	goto	l8990
  8691  119F                     l8992:	
  8692                           
  8693                           ;CC2500_B1.c: 81: }
  8694                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8695  119F  31A7  2784  3191   	fcall	_CC2500_ReadByte
  8696                           
  8697                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  8698  11A2  0021               	movlb	1	; select bank1
  8699  11A3  083F               	movf	_SPI0Buffer^(0+128),w
  8700  11A4  0020               	movlb	0	; select bank0
  8701  11A5  00A4               	movwf	??_CC2500_RxData
  8702  11A6  0824               	movf	??_CC2500_RxData,w
  8703  11A7  0021               	movlb	1	; select bank1
  8704  11A8  00BD               	movwf	_RSSI^(0+128)
  8705                           
  8706                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  8707  11A9  31A7  2784  3191   	fcall	_CC2500_ReadByte
  8708                           
  8709                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  8710  11AC  0021               	movlb	1	; select bank1
  8711  11AD  083F               	movf	_SPI0Buffer^(0+128),w
  8712  11AE  0020               	movlb	0	; select bank0
  8713  11AF  00A4               	movwf	??_CC2500_RxData
  8714  11B0  0824               	movf	??_CC2500_RxData,w
  8715  11B1  0021               	movlb	1	; select bank1
  8716  11B2  00B7               	movwf	_CRC^(0+128)
  8717                           
  8718                           ;CC2500_B1.c: 86: RC4=1;
  8719  11B3  0020               	movlb	0	; select bank0
  8720  11B4  160E               	bsf	14,4	;volatile
  8721                           
  8722                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  8723  11B5  0021               	movlb	1	; select bank1
  8724  11B6  1BB7               	btfsc	_CRC^(0+128),7
  8725                           
  8726                           ;CC2500_B1.c: 88: Receive_OK=1;
  8727  11B7  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8728  11B8                     l9004:	
  8729                           
  8730                           ;CC2500_B1.c: 89: }
  8731                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  8732  11B8  3036               	movlw	54
  8733  11B9  31A5  253C  3191   	fcall	_CC2500_WriteCommand
  8734                           
  8735                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  8736  11BC  303A               	movlw	58
  8737  11BD  31A5  253C  3191   	fcall	_CC2500_WriteCommand
  8738                           
  8739                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  8740  11C0  0020               	movlb	0	; select bank0
  8741  11C1  01A2               	clrf	setRF_RxStatus@command
  8742  11C2  3001               	movlw	1
  8743  11C3  31A5  2502         	fcall	_setRF_RxStatus
  8744  11C5  0008               	return
  8745  11C6                     __end_of_CC2500_RxData:	
  8746                           
  8747                           	psect	text35
  8748  2502                     __ptext35:	
  8749 ;; *************** function _setRF_RxStatus *****************
  8750 ;; Defined at:
  8751 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  rf              1    wreg     unsigned char 
  8754 ;;  command         1    2[BANK0 ] unsigned char 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  rf              1    3[BANK0 ] unsigned char 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;		None               void
  8759 ;; Registers used:
  8760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8766 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;Total ram usage:        2 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    5
  8773 ;; This function calls:
  8774 ;;		_RfPointSelect
  8775 ;; This function is called by:
  8776 ;;		_CC2500_RxData
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           
  8781                           ;psect for function _setRF_RxStatus
  8782  2502                     _setRF_RxStatus:	
  8783                           
  8784                           ;incstack = 0
  8785                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8786                           ;setRF_RxStatus@rf stored from wreg
  8787  2502  0020               	movlb	0	; select bank0
  8788  2503  00A3               	movwf	setRF_RxStatus@rf
  8789                           
  8790                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  8791  2504  0823               	movf	setRF_RxStatus@rf,w
  8792  2505  31A4  2439         	fcall	_RfPointSelect
  8793                           
  8794                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  8795  2507  087C               	movf	_RF,w
  8796  2508  0086               	movwf	6
  8797  2509  0187               	clrf	7
  8798  250A  0020               	movlb	0	; select bank0
  8799  250B  0822               	movf	setRF_RxStatus@command,w
  8800  250C  1181               	bcf	1,3
  8801  250D  1D03               	skipz
  8802  250E  1581               	bsf	1,3
  8803  250F  0008               	return
  8804  2510                     __end_of_setRF_RxStatus:	
  8805                           
  8806                           	psect	text36
  8807  274D                     __ptext36:	
  8808 ;; *************** function _CC2500_ReadStatus *****************
  8809 ;; Defined at:
  8810 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  status_addr     1    wreg     unsigned char 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0, pclath, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        2 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    5
  8831 ;; This function calls:
  8832 ;;		_CC2500_ReadByte
  8833 ;;		_CC2500_WriteByte
  8834 ;; This function is called by:
  8835 ;;		_CC2500_RxData
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function _CC2500_ReadStatus
  8841  274D                     _CC2500_ReadStatus:	
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8845                           ;CC2500_ReadStatus@status_addr stored from wreg
  8846  274D  0020               	movlb	0	; select bank0
  8847  274E  00A3               	movwf	CC2500_ReadStatus@status_addr
  8848                           
  8849                           ;CC2500_B1.c: 269: RC4=0;
  8850  274F  120E               	bcf	14,4	;volatile
  8851                           
  8852                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  8853  2750  0823               	movf	CC2500_ReadStatus@status_addr,w
  8854  2751  3EC0               	addlw	192
  8855  2752  00A2               	movwf	??_CC2500_ReadStatus
  8856  2753  0822               	movf	??_CC2500_ReadStatus,w
  8857  2754  0021               	movlb	1	; select bank1
  8858  2755  00BF               	movwf	_SPI0Buffer^(0+128)
  8859  2756                     l403:	
  8860                           ;CC2500_B1.c: 272: while(RC2==1);
  8861                           
  8862  2756  0020               	movlb	0	; select bank0
  8863  2757  190E               	btfsc	14,2	;volatile
  8864  2758  2F56               	goto	l403
  8865                           
  8866                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  8867  2759  31A6  26B4  31A7   	fcall	_CC2500_WriteByte
  8868                           
  8869                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  8870  275C  31A7  2784         	fcall	_CC2500_ReadByte
  8871                           
  8872                           ;CC2500_B1.c: 276: RC4=1;
  8873  275E  0020               	movlb	0	; select bank0
  8874  275F  160E               	bsf	14,4	;volatile
  8875                           
  8876                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  8877  2760  0021               	movlb	1	; select bank1
  8878  2761  083F               	movf	_SPI0Buffer^(0+128),w
  8879  2762  0020               	movlb	0	; select bank0
  8880  2763  00A2               	movwf	??_CC2500_ReadStatus
  8881  2764  0822               	movf	??_CC2500_ReadStatus,w
  8882  2765  0021               	movlb	1	; select bank1
  8883  2766  00C3               	movwf	_s_data^(0+128)
  8884  2767  0008               	return
  8885  2768                     __end_of_CC2500_ReadStatus:	
  8886                           
  8887                           	psect	text37
  8888  2784                     __ptext37:	
  8889 ;; *************** function _CC2500_ReadByte *****************
  8890 ;; Defined at:
  8891 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;		None               void
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, status,0
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        2 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    4
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		_CC2500_RxData
  8916 ;;		_CC2500_ReadStatus
  8917 ;;		_CC2500_ReadREG
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _CC2500_ReadByte
  8923  2784                     _CC2500_ReadByte:	
  8924                           
  8925                           ;CC2500_B1.c: 212: unsigned char loop_b;
  8926                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8930  2784  0020               	movlb	0	; select bank0
  8931  2785  01A1               	clrf	CC2500_ReadByte@loop_b
  8932  2786                     L10:	
  8933  2786  3008               	movlw	8
  8934  2787  0221               	subwf	CC2500_ReadByte@loop_b,w
  8935  2788  1803               	btfsc	3,0
  8936  2789  0008               	return
  8937                           
  8938                           ;CC2500_B1.c: 214: {
  8939                           ;CC2500_B1.c: 215: RC1=1;
  8940  278A  148E               	bsf	14,1	;volatile
  8941                           
  8942                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  8943  278B  1003               	clrc
  8944  278C  0021               	movlb	1	; select bank1
  8945  278D  0DBF               	rlf	_SPI0Buffer^(0+128),f
  8946                           
  8947                           ;CC2500_B1.c: 217: if(RC2 == 1)
  8948  278E  0020               	movlb	0	; select bank0
  8949  278F  1D0E               	btfss	14,2	;volatile
  8950  2790  2F94               	goto	l6698
  8951                           
  8952                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  8953  2791  0021               	movlb	1	; select bank1
  8954  2792  143F               	bsf	_SPI0Buffer^(0+128),0
  8955  2793  2F9A               	goto	l6700
  8956  2794                     l6698:	
  8957                           
  8958                           ;CC2500_B1.c: 219: else
  8959                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  8960  2794  30FE               	movlw	254
  8961  2795  0020               	movlb	0	; select bank0
  8962  2796  00A0               	movwf	??_CC2500_ReadByte
  8963  2797  0820               	movf	??_CC2500_ReadByte,w
  8964  2798  0021               	movlb	1	; select bank1
  8965  2799  05BF               	andwf	_SPI0Buffer^(0+128),f
  8966  279A                     l6700:	
  8967                           
  8968                           ;CC2500_B1.c: 221: RC1=0;
  8969  279A  0020               	movlb	0	; select bank0
  8970  279B  108E               	bcf	14,1	;volatile
  8971  279C  3001               	movlw	1
  8972  279D  00A0               	movwf	??_CC2500_ReadByte
  8973  279E  0820               	movf	??_CC2500_ReadByte,w
  8974  279F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8975  27A0  2F86               	goto	L10
  8976  27A1                     __end_of_CC2500_ReadByte:	
  8977                           
  8978                           	psect	text38
  8979  23A5                     __ptext38:	
  8980 ;; *************** function _RF_Initialization *****************
  8981 ;; Defined at:
  8982 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;		None               void
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0, pclath, cstack
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;Total ram usage:        0 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    5
  9003 ;; This function calls:
  9004 ;;		_setRF_Initialization
  9005 ;; This function is called by:
  9006 ;;		_main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _RF_Initialization
  9012  23A5                     _RF_Initialization:	
  9013                           
  9014                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9018  23A5  3001               	movlw	1
  9019  23A6  31A3  23D8         	fcall	_setRF_Initialization
  9020  23A8  0008               	return
  9021  23A9                     __end_of_RF_Initialization:	
  9022                           
  9023                           	psect	text39
  9024  23D8                     __ptext39:	
  9025 ;; *************** function _setRF_Initialization *****************
  9026 ;; Defined at:
  9027 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  rf              1    wreg     unsigned char 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  rf              1    0[COMMON] unsigned char 
  9032 ;; Return value:  Size  Location     Type
  9033 ;;		None               void
  9034 ;; Registers used:
  9035 ;;		wreg
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;Total ram usage:        1 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:    4
  9048 ;; This function calls:
  9049 ;;		Nothing
  9050 ;; This function is called by:
  9051 ;;		_RF_Initialization
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function _setRF_Initialization
  9057  23D8                     _setRF_Initialization:	
  9058                           
  9059                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9060                           
  9061                           ;incstack = 0
  9062                           ; Regs used in _setRF_Initialization: [wreg]
  9063  23D8  3015               	movlw	21
  9064  23D9  0020               	movlb	0	; select bank0
  9065  23DA  00A0               	movwf	??_setRF_Initialization
  9066  23DB  0820               	movf	??_setRF_Initialization,w
  9067  23DC  0021               	movlb	1	; select bank1
  9068  23DD  00C0               	movwf	_Tx_Length^(0+128)
  9069  23DE  0008               	return
  9070  23DF                     __end_of_setRF_Initialization:	
  9071                           
  9072                           	psect	text40
  9073  2393                     __ptext40:	
  9074 ;; *************** function _PowerFault_Main *****************
  9075 ;; Defined at:
  9076 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;		None               void
  9083 ;; Registers used:
  9084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;Total ram usage:        0 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:   10
  9097 ;; This function calls:
  9098 ;;		_setPowerFault_Main
  9099 ;; This function is called by:
  9100 ;;		_main
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           
  9105                           ;psect for function _PowerFault_Main
  9106  2393                     _PowerFault_Main:	
  9107                           
  9108                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9109                           
  9110                           ;incstack = 0
  9111                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9112  2393  318D  25CF         	fcall	_setPowerFault_Main
  9113  2395  0008               	return
  9114  2396                     __end_of_PowerFault_Main:	
  9115                           
  9116                           	psect	text41
  9117  0DCF                     __ptext41:	
  9118 ;; *************** function _setPowerFault_Main *****************
  9119 ;; Defined at:
  9120 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;		None
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;		None
  9125 ;; Return value:  Size  Location     Type
  9126 ;;		None               void
  9127 ;; Registers used:
  9128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;Total ram usage:        2 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    9
  9141 ;; This function calls:
  9142 ;;		_getLoad_Safe
  9143 ;;		_getTemp_Safe
  9144 ;;		_setPowerFault_Exceptions
  9145 ;; This function is called by:
  9146 ;;		_PowerFault_Main
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _setPowerFault_Main
  9152  0DCF                     _setPowerFault_Main:	
  9153                           
  9154                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9155                           
  9156                           ;incstack = 0
  9157                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9158  0DCF  087B               	movf	_PF,w
  9159  0DD0  0086               	movwf	6
  9160  0DD1  3001               	movlw	1	; select bank2/3
  9161  0DD2  0087               	movwf	7
  9162  0DD3  1C01               	btfss	1,0
  9163  0DD4  0008               	return
  9164                           
  9165                           ;PowerFault_B1.c: 64: {
  9166                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9167  0DD5  087B               	movf	_PF,w
  9168  0DD6  0086               	movwf	6
  9169  0DD7  3001               	movlw	1	; select bank2/3
  9170  0DD8  0087               	movwf	7
  9171  0DD9  1981               	btfsc	1,3
  9172  0DDA  2E1F               	goto	l9536
  9173                           
  9174                           ;PowerFault_B1.c: 66: {
  9175                           ;PowerFault_B1.c: 67: PF->Time++;
  9176  0DDB  087B               	movf	_PF,w
  9177  0DDC  3E06               	addlw	6
  9178  0DDD  0086               	movwf	6
  9179  0DDE  3001               	movlw	1	; select bank2/3
  9180  0DDF  0087               	movwf	7
  9181  0DE0  3001               	movlw	1
  9182  0DE1  0781               	addwf	1,f
  9183  0DE2  3141               	addfsr 1,1
  9184  0DE3  1803               	skipnc
  9185  0DE4  0A81               	incf	1,f
  9186                           
  9187                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9188  0DE5  087B               	movf	_PF,w
  9189  0DE6  3E06               	addlw	6
  9190  0DE7  0086               	movwf	6
  9191  0DE8  3001               	movlw	1	; select bank2/3
  9192  0DE9  0087               	movwf	7
  9193  0DEA  3F40               	moviw [0]fsr1
  9194  0DEB  0020               	movlb	0	; select bank0
  9195  0DEC  00AD               	movwf	??_setPowerFault_Main
  9196  0DED  3F41               	moviw [1]fsr1
  9197  0DEE  00AE               	movwf	??_setPowerFault_Main+1
  9198  0DEF  3002               	movlw	2
  9199  0DF0  022E               	subwf	??_setPowerFault_Main+1,w
  9200  0DF1  30BC               	movlw	188
  9201  0DF2  1903               	skipnz
  9202  0DF3  022D               	subwf	??_setPowerFault_Main,w
  9203  0DF4  1C03               	skipc
  9204  0DF5  0008               	return
  9205                           
  9206                           ;PowerFault_B1.c: 69: {
  9207                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9208  0DF6  31A4  2470  318D   	fcall	_getLoad_Safe
  9209  0DF9  3A00               	xorlw	0
  9210  0DFA  1903               	skipnz
  9211  0DFB  2E15               	goto	l9534
  9212  0DFC  31A3  23CA  318D   	fcall	_getTemp_Safe
  9213  0DFF  3A00               	xorlw	0
  9214  0E00  1903               	skipnz
  9215  0E01  2E15               	goto	l9534
  9216                           
  9217                           ;PowerFault_B1.c: 71: {
  9218                           ;PowerFault_B1.c: 72: PF->Time=0;
  9219  0E02  087B               	movf	_PF,w
  9220  0E03  3E06               	addlw	6
  9221  0E04  0086               	movwf	6
  9222  0E05  3001               	movlw	1	; select bank2/3
  9223  0E06  0087               	movwf	7
  9224  0E07  3000               	movlw	0
  9225  0E08  3FC0               	movwi [0]fsr1
  9226  0E09  3FC1               	movwi [1]fsr1
  9227                           
  9228                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9229  0E0A  087B               	movf	_PF,w
  9230  0E0B  0086               	movwf	6
  9231  0E0C  3001               	movlw	1	; select bank2/3
  9232  0E0D  0087               	movwf	7
  9233  0E0E  1581               	bsf	1,3
  9234                           
  9235                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9236  0E0F  087B               	movf	_PF,w
  9237  0E10  0086               	movwf	6
  9238  0E11  3001               	movlw	1	; select bank2/3
  9239  0E12  0087               	movwf	7
  9240  0E13  1101               	bcf	1,2
  9241                           
  9242                           ;PowerFault_B1.c: 75: }
  9243  0E14  0008               	return
  9244  0E15                     l9534:	
  9245                           
  9246                           ;PowerFault_B1.c: 76: else
  9247                           ;PowerFault_B1.c: 77: {
  9248                           ;PowerFault_B1.c: 78: PF->Time=700;
  9249  0E15  087B               	movf	_PF,w
  9250  0E16  3E06               	addlw	6
  9251  0E17  0086               	movwf	6
  9252  0E18  3001               	movlw	1	; select bank2/3
  9253  0E19  0087               	movwf	7
  9254  0E1A  30BC               	movlw	188
  9255  0E1B  3FC0               	movwi [0]fsr1
  9256  0E1C  3002               	movlw	2
  9257  0E1D  3FC1               	movwi [1]fsr1
  9258                           
  9259                           ;PowerFault_B1.c: 79: }
  9260                           ;PowerFault_B1.c: 80: }
  9261                           ;PowerFault_B1.c: 81: }
  9262  0E1E  0008               	return
  9263  0E1F                     l9536:	
  9264                           
  9265                           ;PowerFault_B1.c: 82: else
  9266                           ;PowerFault_B1.c: 83: {
  9267                           ;PowerFault_B1.c: 84: PF->Time++;
  9268  0E1F  087B               	movf	_PF,w
  9269  0E20  3E06               	addlw	6
  9270  0E21  0086               	movwf	6
  9271  0E22  3001               	movlw	1	; select bank2/3
  9272  0E23  0087               	movwf	7
  9273  0E24  3001               	movlw	1
  9274  0E25  0781               	addwf	1,f
  9275  0E26  3141               	addfsr 1,1
  9276  0E27  1803               	skipnc
  9277  0E28  0A81               	incf	1,f
  9278                           
  9279                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9280  0E29  087B               	movf	_PF,w
  9281  0E2A  3E06               	addlw	6
  9282  0E2B  0086               	movwf	6
  9283  0E2C  3001               	movlw	1	; select bank2/3
  9284  0E2D  0087               	movwf	7
  9285  0E2E  3F40               	moviw [0]fsr1
  9286  0E2F  0020               	movlb	0	; select bank0
  9287  0E30  00AD               	movwf	??_setPowerFault_Main
  9288  0E31  3F41               	moviw [1]fsr1
  9289  0E32  00AE               	movwf	??_setPowerFault_Main+1
  9290  0E33  3000               	movlw	0
  9291  0E34  022E               	subwf	??_setPowerFault_Main+1,w
  9292  0E35  3002               	movlw	2
  9293  0E36  1903               	skipnz
  9294  0E37  022D               	subwf	??_setPowerFault_Main,w
  9295  0E38  1C03               	skipc
  9296  0E39  0008               	return
  9297                           
  9298                           ;PowerFault_B1.c: 86: {
  9299                           ;PowerFault_B1.c: 87: PF->Time=0;
  9300  0E3A  087B               	movf	_PF,w
  9301  0E3B  3E06               	addlw	6
  9302  0E3C  0086               	movwf	6
  9303  0E3D  3001               	movlw	1	; select bank2/3
  9304  0E3E  0087               	movwf	7
  9305  0E3F  3000               	movlw	0
  9306  0E40  3FC0               	movwi [0]fsr1
  9307  0E41  3FC1               	movwi [1]fsr1
  9308                           
  9309                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9310  0E42  087B               	movf	_PF,w
  9311  0E43  0086               	movwf	6
  9312  0E44  3001               	movlw	1	; select bank2/3
  9313  0E45  0087               	movwf	7
  9314  0E46  1181               	bcf	1,3
  9315                           
  9316                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9317  0E47  087B               	movf	_PF,w
  9318  0E48  0086               	movwf	6
  9319  0E49  3001               	movlw	1	; select bank2/3
  9320  0E4A  0087               	movwf	7
  9321  0E4B  1C81               	btfss	1,1
  9322  0E4C  2E88               	goto	l9556
  9323                           
  9324                           ;PowerFault_B1.c: 91: {
  9325                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9326  0E4D  0A7B               	incf	_PF,w
  9327  0E4E  0086               	movwf	6
  9328  0E4F  3001               	movlw	1	; select bank2/3
  9329  0E50  0087               	movwf	7
  9330  0E51  3F40               	moviw [0]fsr1
  9331  0E52  00AD               	movwf	??_setPowerFault_Main
  9332  0E53  3F41               	moviw [1]fsr1
  9333  0E54  00AE               	movwf	??_setPowerFault_Main+1
  9334  0E55  3001               	movlw	1
  9335  0E56  022E               	subwf	??_setPowerFault_Main+1,w
  9336  0E57  3091               	movlw	145
  9337  0E58  1903               	skipnz
  9338  0E59  022D               	subwf	??_setPowerFault_Main,w
  9339  0E5A  1803               	skipnc
  9340  0E5B  2EC4               	goto	l9568
  9341  0E5C  0A7B               	incf	_PF,w
  9342  0E5D  0086               	movwf	6
  9343  0E5E  3001               	movlw	1	; select bank2/3
  9344  0E5F  0087               	movwf	7
  9345  0E60  3F40               	moviw [0]fsr1
  9346  0E61  00AD               	movwf	??_setPowerFault_Main
  9347  0E62  3F41               	moviw [1]fsr1
  9348  0E63  00AE               	movwf	??_setPowerFault_Main+1
  9349  0E64  3000               	movlw	0
  9350  0E65  022E               	subwf	??_setPowerFault_Main+1,w
  9351  0E66  30C8               	movlw	200
  9352  0E67  1903               	skipnz
  9353  0E68  022D               	subwf	??_setPowerFault_Main,w
  9354  0E69  1C03               	skipc
  9355  0E6A  2EC4               	goto	l9568
  9356                           
  9357                           ;PowerFault_B1.c: 93: {
  9358                           ;PowerFault_B1.c: 94: PF->Count++;
  9359  0E6B  3001               	movlw	1
  9360  0E6C  00AD               	movwf	??_setPowerFault_Main
  9361  0E6D  087B               	movf	_PF,w
  9362  0E6E  3E05               	addlw	5
  9363  0E6F  0086               	movwf	6
  9364  0E70  3001               	movlw	1	; select bank2/3
  9365  0E71  0087               	movwf	7
  9366  0E72  082D               	movf	??_setPowerFault_Main,w
  9367  0E73  0781               	addwf	1,f
  9368                           
  9369                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9370  0E74  087B               	movf	_PF,w
  9371  0E75  3E05               	addlw	5
  9372  0E76  0086               	movwf	6
  9373  0E77  3001               	movlw	1	; select bank2/3
  9374  0E78  0087               	movwf	7
  9375  0E79  3002               	movlw	2
  9376  0E7A  0201               	subwf	1,w
  9377  0E7B  1C03               	skipc
  9378  0E7C  2ECA               	goto	l9570
  9379                           
  9380                           ;PowerFault_B1.c: 96: {
  9381                           ;PowerFault_B1.c: 97: PF->Count=0;
  9382  0E7D  087B               	movf	_PF,w
  9383  0E7E  3E05               	addlw	5
  9384  0E7F  0086               	movwf	6
  9385  0E80  3001               	movlw	1	; select bank2/3
  9386  0E81  0087               	movwf	7
  9387  0E82  0181               	clrf	1
  9388                           
  9389                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9390  0E83  3000               	movlw	0
  9391  0E84  319B  23A4  318D   	fcall	_setPowerFault_Exceptions
  9392                           
  9393                           ;PowerFault_B1.c: 99: }
  9394                           ;PowerFault_B1.c: 100: }
  9395  0E87  2ECA               	goto	l9570
  9396  0E88                     l9556:	
  9397                           ;PowerFault_B1.c: 104: }
  9398                           ;PowerFault_B1.c: 105: }
  9399                           
  9400                           ;PowerFault_B1.c: 101: else
  9401                           ;PowerFault_B1.c: 102: {
  9402                           ;PowerFault_B1.c: 103: PF->Count=0;
  9403                           
  9404                           
  9405                           ;PowerFault_B1.c: 106: else
  9406                           ;PowerFault_B1.c: 107: {
  9407                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9408  0E88  0A7B               	incf	_PF,w
  9409  0E89  0086               	movwf	6
  9410  0E8A  3001               	movlw	1	; select bank2/3
  9411  0E8B  0087               	movwf	7
  9412  0E8C  3F40               	moviw [0]fsr1
  9413  0E8D  0020               	movlb	0	; select bank0
  9414  0E8E  00AD               	movwf	??_setPowerFault_Main
  9415  0E8F  3F41               	moviw [1]fsr1
  9416  0E90  00AE               	movwf	??_setPowerFault_Main+1
  9417  0E91  3001               	movlw	1
  9418  0E92  022E               	subwf	??_setPowerFault_Main+1,w
  9419  0E93  3090               	movlw	144
  9420  0E94  1903               	skipnz
  9421  0E95  022D               	subwf	??_setPowerFault_Main,w
  9422  0E96  1803               	skipnc
  9423  0E97  2EA7               	goto	l9560
  9424  0E98  0A7B               	incf	_PF,w
  9425  0E99  0086               	movwf	6
  9426  0E9A  3001               	movlw	1	; select bank2/3
  9427  0E9B  0087               	movwf	7
  9428  0E9C  3F40               	moviw [0]fsr1
  9429  0E9D  00AD               	movwf	??_setPowerFault_Main
  9430  0E9E  3F41               	moviw [1]fsr1
  9431  0E9F  00AE               	movwf	??_setPowerFault_Main+1
  9432  0EA0  3000               	movlw	0
  9433  0EA1  022E               	subwf	??_setPowerFault_Main+1,w
  9434  0EA2  30D3               	movlw	211
  9435  0EA3  1903               	skipnz
  9436  0EA4  022D               	subwf	??_setPowerFault_Main,w
  9437  0EA5  1803               	skipnc
  9438  0EA6  2EC4               	goto	l9568
  9439  0EA7                     l9560:	
  9440                           
  9441                           ;PowerFault_B1.c: 109: {
  9442                           ;PowerFault_B1.c: 110: PF->Count++;
  9443  0EA7  3001               	movlw	1
  9444  0EA8  00AD               	movwf	??_setPowerFault_Main
  9445  0EA9  087B               	movf	_PF,w
  9446  0EAA  3E05               	addlw	5
  9447  0EAB  0086               	movwf	6
  9448  0EAC  3001               	movlw	1	; select bank2/3
  9449  0EAD  0087               	movwf	7
  9450  0EAE  082D               	movf	??_setPowerFault_Main,w
  9451  0EAF  0781               	addwf	1,f
  9452                           
  9453                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9454  0EB0  087B               	movf	_PF,w
  9455  0EB1  3E05               	addlw	5
  9456  0EB2  0086               	movwf	6
  9457  0EB3  3001               	movlw	1	; select bank2/3
  9458  0EB4  0087               	movwf	7
  9459  0EB5  3002               	movlw	2
  9460  0EB6  0201               	subwf	1,w
  9461  0EB7  1C03               	skipc
  9462  0EB8  2ECA               	goto	l9570
  9463                           
  9464                           ;PowerFault_B1.c: 112: {
  9465                           ;PowerFault_B1.c: 113: PF->Count=0;
  9466  0EB9  087B               	movf	_PF,w
  9467  0EBA  3E05               	addlw	5
  9468  0EBB  0086               	movwf	6
  9469  0EBC  3001               	movlw	1	; select bank2/3
  9470  0EBD  0087               	movwf	7
  9471  0EBE  0181               	clrf	1
  9472                           
  9473                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9474  0EBF  3001               	movlw	1
  9475  0EC0  319B  23A4  318D   	fcall	_setPowerFault_Exceptions
  9476                           
  9477                           ;PowerFault_B1.c: 115: }
  9478                           ;PowerFault_B1.c: 116: }
  9479  0EC3  2ECA               	goto	l9570
  9480  0EC4                     l9568:	
  9481                           
  9482                           ;PowerFault_B1.c: 117: else
  9483                           ;PowerFault_B1.c: 118: {
  9484                           ;PowerFault_B1.c: 119: PF->Count=0;
  9485  0EC4  087B               	movf	_PF,w
  9486  0EC5  3E05               	addlw	5
  9487  0EC6  0086               	movwf	6
  9488  0EC7  3001               	movlw	1	; select bank2/3
  9489  0EC8  0087               	movwf	7
  9490  0EC9  0181               	clrf	1
  9491  0ECA                     l9570:	
  9492                           
  9493                           ;PowerFault_B1.c: 120: }
  9494                           ;PowerFault_B1.c: 122: }
  9495                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9496  0ECA  087B               	movf	_PF,w
  9497  0ECB  0086               	movwf	6
  9498  0ECC  3001               	movlw	1	; select bank2/3
  9499  0ECD  0087               	movwf	7
  9500  0ECE  1881               	btfsc	1,1
  9501  0ECF  2ED5               	goto	l2467
  9502                           
  9503                           ;PowerFault_B1.c: 124: {
  9504                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9505  0ED0  087B               	movf	_PF,w
  9506  0ED1  0086               	movwf	6
  9507  0ED2  3001               	movlw	1	; select bank2/3
  9508  0ED3  0087               	movwf	7
  9509  0ED4  1501               	bsf	1,2
  9510  0ED5                     l2467:	
  9511                           
  9512                           ;PowerFault_B1.c: 126: }
  9513                           ;PowerFault_B1.c: 127: PF->AD=0;
  9514  0ED5  0A7B               	incf	_PF,w
  9515  0ED6  0086               	movwf	6
  9516  0ED7  3001               	movlw	1	; select bank2/3
  9517  0ED8  0087               	movwf	7
  9518  0ED9  3000               	movlw	0
  9519  0EDA  3FC0               	movwi [0]fsr1
  9520  0EDB  3FC1               	movwi [1]fsr1
  9521  0EDC  0008               	return
  9522  0EDD                     __end_of_setPowerFault_Main:	
  9523                           
  9524                           	psect	text42
  9525  1BA4                     __ptext42:	
  9526 ;; *************** function _setPowerFault_Exceptions *****************
  9527 ;; Defined at:
  9528 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  command         1    wreg     unsigned char 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  command         1   12[BANK0 ] unsigned char 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;		None               void
  9535 ;; Registers used:
  9536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;Total ram usage:        2 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    8
  9549 ;; This function calls:
  9550 ;;		_DimmerLights_Exceptions
  9551 ;;		_setLED
  9552 ;;		_setRF_Enable
  9553 ;;		_setSw_Enable
  9554 ;; This function is called by:
  9555 ;;		_setPowerFault_Main
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _setPowerFault_Exceptions
  9561  1BA4                     _setPowerFault_Exceptions:	
  9562                           
  9563                           ;incstack = 0
  9564                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9565                           ;setPowerFault_Exceptions@command stored from wreg
  9566  1BA4  0020               	movlb	0	; select bank0
  9567  1BA5  00AC               	movwf	setPowerFault_Exceptions@command
  9568                           
  9569                           ;PowerFault_B1.c: 135: if(command == 1)
  9570  1BA6  082C               	movf	setPowerFault_Exceptions@command,w
  9571  1BA7  3A01               	xorlw	1
  9572  1BA8  1D03               	skipz
  9573  1BA9  2BAE               	goto	l9126
  9574                           
  9575                           ;PowerFault_B1.c: 136: {
  9576                           ;PowerFault_B1.c: 137: DimmerLights_Exceptions(3);
  9577  1BAA  3003               	movlw	3
  9578  1BAB  3191  21C6  319B   	fcall	_DimmerLights_Exceptions
  9579  1BAE                     l9126:	
  9580                           
  9581                           ;PowerFault_B1.c: 138: }
  9582                           ;PowerFault_B1.c: 139: PF->ERROR=command;
  9583  1BAE  087B               	movf	_PF,w
  9584  1BAF  0086               	movwf	6
  9585  1BB0  3001               	movlw	1	; select bank2/3
  9586  1BB1  0087               	movwf	7
  9587  1BB2  0020               	movlb	0	; select bank0
  9588  1BB3  082C               	movf	setPowerFault_Exceptions@command,w
  9589  1BB4  1081               	bcf	1,1
  9590  1BB5  1D03               	skipz
  9591  1BB6  1481               	bsf	1,1
  9592                           
  9593                           ;PowerFault_B1.c: 141: setLED(99,command+10);
  9594  1BB7  082C               	movf	setPowerFault_Exceptions@command,w
  9595  1BB8  3E0A               	addlw	10
  9596  1BB9  00AB               	movwf	??_setPowerFault_Exceptions
  9597  1BBA  082B               	movf	??_setPowerFault_Exceptions,w
  9598  1BBB  00A2               	movwf	setLED@command
  9599  1BBC  3063               	movlw	99
  9600  1BBD  3190  2042  319B   	fcall	_setLED
  9601                           
  9602                           ;PowerFault_B1.c: 143: PF->Safe=(~command) & 0x01;
  9603  1BC0  0020               	movlb	0	; select bank0
  9604  1BC1  092C               	comf	setPowerFault_Exceptions@command,w
  9605  1BC2  3901               	andlw	1
  9606  1BC3  00AB               	movwf	??_setPowerFault_Exceptions
  9607  1BC4  087B               	movf	_PF,w
  9608  1BC5  0086               	movwf	6
  9609  1BC6  3001               	movlw	1	; select bank2/3
  9610  1BC7  0087               	movwf	7
  9611  1BC8  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9612  1BC9  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9613  1BCA  0801               	movf	1,w
  9614  1BCB  062B               	xorwf	??_setPowerFault_Exceptions,w
  9615  1BCC  39FB               	andlw	-5
  9616  1BCD  062B               	xorwf	??_setPowerFault_Exceptions,w
  9617  1BCE  0081               	movwf	1
  9618                           
  9619                           ;PowerFault_B1.c: 144: setSw_Enable((~command) & 0x01);
  9620  1BCF  092C               	comf	setPowerFault_Exceptions@command,w
  9621  1BD0  3901               	andlw	1
  9622  1BD1  31A7  2768  319B   	fcall	_setSw_Enable
  9623                           
  9624                           ;PowerFault_B1.c: 147: setRF_Enable(1,(~command) & 0x01);
  9625  1BD4  0020               	movlb	0	; select bank0
  9626  1BD5  092C               	comf	setPowerFault_Exceptions@command,w
  9627  1BD6  3901               	andlw	1
  9628  1BD7  00AB               	movwf	??_setPowerFault_Exceptions
  9629  1BD8  082B               	movf	??_setPowerFault_Exceptions,w
  9630  1BD9  00A4               	movwf	setRF_Enable@command
  9631  1BDA  3001               	movlw	1
  9632  1BDB  319B  2337         	fcall	_setRF_Enable
  9633  1BDD  0008               	return
  9634  1BDE                     __end_of_setPowerFault_Exceptions:	
  9635                           
  9636                           	psect	text43
  9637  2470                     __ptext43:	
  9638 ;; *************** function _getLoad_Safe *****************
  9639 ;; Defined at:
  9640 ;;		line 299 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;		None
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;		None
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  1    wreg      unsigned char 
  9647 ;; Registers used:
  9648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;Total ram usage:        1 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    4
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_setTemp_Main
  9665 ;;		_setPowerFault_Main
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function _getLoad_Safe
  9671  2470                     _getLoad_Safe:	
  9672                           
  9673                           ;OverLoad_B1.c: 301: return Load->Safe;
  9674                           
  9675                           ;incstack = 0
  9676                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
  9677  2470  0020               	movlb	0	; select bank0
  9678  2471  086E               	movf	_Load,w
  9679  2472  0086               	movwf	6
  9680  2473  3002               	movlw	2	; select bank4/5
  9681  2474  0087               	movwf	7
  9682  2475  0C01               	rrf	1,w
  9683  2476  00A0               	movwf	??_getLoad_Safe
  9684  2477  0CA0               	rrf	??_getLoad_Safe,f
  9685  2478  0C20               	rrf	??_getLoad_Safe,w
  9686  2479  3901               	andlw	1
  9687  247A  0008               	return
  9688  247B                     __end_of_getLoad_Safe:	
  9689                           
  9690                           	psect	text44
  9691  2390                     __ptext44:	
  9692 ;; *************** function _PowerFault_Initialization *****************
  9693 ;; Defined at:
  9694 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;		None
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;		None               void
  9701 ;; Registers used:
  9702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;Total ram usage:        0 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    5
  9715 ;; This function calls:
  9716 ;;		_setPowerFault_Initialization
  9717 ;; This function is called by:
  9718 ;;		_main
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           
  9723                           ;psect for function _PowerFault_Initialization
  9724  2390                     _PowerFault_Initialization:	
  9725                           
  9726                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
  9727                           
  9728                           ;incstack = 0
  9729                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9730  2390  31A5  258C         	fcall	_setPowerFault_Initialization
  9731  2392  0008               	return
  9732  2393                     __end_of_PowerFault_Initialization:	
  9733                           
  9734                           	psect	text45
  9735  258C                     __ptext45:	
  9736 ;; *************** function _setPowerFault_Initialization *****************
  9737 ;; Defined at:
  9738 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;		None
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg, fsr1l, fsr1h
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;Total ram usage:        1 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    4
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_PowerFault_Initialization
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           
  9767                           ;psect for function _setPowerFault_Initialization
  9768  258C                     _setPowerFault_Initialization:	
  9769                           
  9770                           ;PowerFault_B1.c: 31: PF=&PF1;
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
  9774  258C  3066               	movlw	_PF1& (0+255)
  9775  258D  0020               	movlb	0	; select bank0
  9776  258E  00A0               	movwf	??_setPowerFault_Initialization
  9777  258F  0820               	movf	??_setPowerFault_Initialization,w
  9778  2590  00FB               	movwf	_PF
  9779                           
  9780                           ;PowerFault_B1.c: 32: PF->Enable=1;
  9781  2591  087B               	movf	_PF,w
  9782  2592  0086               	movwf	6
  9783  2593  3001               	movlw	1	; select bank2/3
  9784  2594  0087               	movwf	7
  9785  2595  1401               	bsf	1,0
  9786                           
  9787                           ;PowerFault_B1.c: 33: PF->Safe=1;
  9788  2596  087B               	movf	_PF,w
  9789  2597  0086               	movwf	6
  9790  2598  3001               	movlw	1	; select bank2/3
  9791  2599  0087               	movwf	7
  9792  259A  1501               	bsf	1,2
  9793  259B  0008               	return
  9794  259C                     __end_of_setPowerFault_Initialization:	
  9795                           
  9796                           	psect	text46
  9797  269C                     __ptext46:	
  9798 ;; *************** function _Mcu_Initialization *****************
  9799 ;; Defined at:
  9800 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;		None               void
  9807 ;; Registers used:
  9808 ;;		wreg, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        1 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    5
  9821 ;; This function calls:
  9822 ;;		_ADC_Set
  9823 ;;		_INT_Set
  9824 ;;		_IOC_Set
  9825 ;;		_IO_Set
  9826 ;;		_TMR0_Set
  9827 ;; This function is called by:
  9828 ;;		_main
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _Mcu_Initialization
  9834  269C                     _Mcu_Initialization:	
  9835                           
  9836                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9840  269C  3078               	movlw	120
  9841  269D  0021               	movlb	1	; select bank1
  9842  269E  0099               	movwf	25	;volatile
  9843                           
  9844                           ;MCU_16f1518_B1.c: 16: IO_Set();
  9845  269F  31A6  26FF  31A6   	fcall	_IO_Set
  9846                           
  9847                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
  9848  26A2  31A4  24E8  31A6   	fcall	_TMR0_Set
  9849                           
  9850                           ;MCU_16f1518_B1.c: 20: ;;
  9851                           ;MCU_16f1518_B1.c: 22: ADC_Set();
  9852  26A5  31A3  23D1  31A6   	fcall	_ADC_Set
  9853                           
  9854                           ;MCU_16f1518_B1.c: 26: INT_Set();
  9855  26A8  31A3  23AD  31A6   	fcall	_INT_Set
  9856                           
  9857                           ;MCU_16f1518_B1.c: 28: IOC_Set();
  9858  26AB  31A4  24DB         	fcall	_IOC_Set
  9859                           
  9860                           ;MCU_16f1518_B1.c: 30: ;;
  9861                           ;MCU_16f1518_B1.c: 32: ;;
  9862                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
  9863  26AD  3020               	movlw	_VarMemory& (0+255)
  9864  26AE  0020               	movlb	0	; select bank0
  9865  26AF  00A1               	movwf	??_Mcu_Initialization
  9866  26B0  0821               	movf	??_Mcu_Initialization,w
  9867  26B1  0021               	movlb	1	; select bank1
  9868  26B2  00E8               	movwf	_Memory^(0+128)
  9869  26B3  0008               	return
  9870  26B4                     __end_of_Mcu_Initialization:	
  9871                           
  9872                           	psect	text47
  9873  24E8                     __ptext47:	
  9874 ;; *************** function _TMR0_Set *****************
  9875 ;; Defined at:
  9876 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;		None
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;		None               void
  9883 ;; Registers used:
  9884 ;;		wreg, status,2
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        1 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    4
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		_Mcu_Initialization
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _TMR0_Set
  9906  24E8                     _TMR0_Set:	
  9907                           
  9908                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9912  24E8  30C4               	movlw	_VarTimer0& (0+255)
  9913  24E9  0020               	movlb	0	; select bank0
  9914  24EA  00A0               	movwf	??_TMR0_Set
  9915  24EB  0820               	movf	??_TMR0_Set,w
  9916  24EC  0021               	movlb	1	; select bank1
  9917  24ED  00EA               	movwf	_Timer0^(0+128)
  9918                           
  9919                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
  9920  24EE  0195               	clrf	21	;volatile
  9921                           
  9922                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
  9923  24EF  30A6               	movlw	166
  9924  24F0  0020               	movlb	0	; select bank0
  9925  24F1  0095               	movwf	21	;volatile
  9926                           
  9927                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
  9928  24F2  168B               	bsf	11,5	;volatile
  9929                           
  9930                           ;MCU_16f1518_B1.c: 79: GIE=1;
  9931  24F3  178B               	bsf	11,7	;volatile
  9932  24F4  0008               	return
  9933  24F5                     __end_of_TMR0_Set:	
  9934                           
  9935                           	psect	text48
  9936  26FF                     __ptext48:	
  9937 ;; *************** function _IO_Set *****************
  9938 ;; Defined at:
  9939 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;		None
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;		None
  9944 ;; Return value:  Size  Location     Type
  9945 ;;		None               void
  9946 ;; Registers used:
  9947 ;;		wreg, status,2
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;Total ram usage:        0 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    4
  9960 ;; This function calls:
  9961 ;;		Nothing
  9962 ;; This function is called by:
  9963 ;;		_Mcu_Initialization
  9964 ;; This function uses a non-reentrant model
  9965 ;;
  9966                           
  9967                           
  9968                           ;psect for function _IO_Set
  9969  26FF                     _IO_Set:	
  9970                           
  9971                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
  9972                           
  9973                           ;incstack = 0
  9974                           ; Regs used in _IO_Set: [wreg+status,2]
  9975  26FF  3077               	movlw	119
  9976  2700  0021               	movlb	1	; select bank1
  9977  2701  008C               	movwf	12	;volatile
  9978                           
  9979                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
  9980  2702  3007               	movlw	7
  9981  2703  008D               	movwf	13	;volatile
  9982                           
  9983                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
  9984  2704  300C               	movlw	12
  9985  2705  008E               	movwf	14	;volatile
  9986                           
  9987                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
  9988  2706  0022               	movlb	2	; select bank2
  9989  2707  018C               	clrf	12	;volatile
  9990                           
  9991                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
  9992  2708  3002               	movlw	2
  9993  2709  008D               	movwf	13	;volatile
  9994                           
  9995                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
  9996  270A  018E               	clrf	14	;volatile
  9997                           
  9998                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
  9999  270B  3022               	movlw	34
 10000  270C  0023               	movlb	3	; select bank3
 10001  270D  008C               	movwf	12	;volatile
 10002                           
 10003                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
 10004  270E  018D               	clrf	13	;volatile
 10005                           
 10006                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
 10007  270F  018E               	clrf	14	;volatile
 10008                           
 10009                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
 10010  2710  3077               	movlw	119
 10011  2711  0020               	movlb	0	; select bank0
 10012  2712  008C               	movwf	12	;volatile
 10013                           
 10014                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
 10015  2713  3007               	movlw	7
 10016  2714  008D               	movwf	13	;volatile
 10017                           
 10018                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
 10019  2715  300C               	movlw	12
 10020  2716  008E               	movwf	14	;volatile
 10021  2717  0008               	return
 10022  2718                     __end_of_IO_Set:	
 10023                           
 10024                           	psect	text49
 10025  24DB                     __ptext49:	
 10026 ;; *************** function _IOC_Set *****************
 10027 ;; Defined at:
 10028 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, status,2
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    4
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_Mcu_Initialization
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           
 10057                           ;psect for function _IOC_Set
 10058  24DB                     _IOC_Set:	
 10059                           
 10060                           ;MCU_16f1518_B1.c: 248: WPUB2=0;
 10061                           
 10062                           ;incstack = 0
 10063                           ; Regs used in _IOC_Set: [wreg+status,2]
 10064  24DB  0024               	movlb	4	; select bank4
 10065  24DC  110D               	bcf	13,2	;volatile
 10066                           
 10067                           ;MCU_16f1518_B1.c: 250: IOCBP=0b00000100;
 10068  24DD  3004               	movlw	4
 10069  24DE  0027               	movlb	7	; select bank7
 10070  24DF  0094               	movwf	20	;volatile
 10071                           
 10072                           ;MCU_16f1518_B1.c: 251: IOCBN=0b00000100;
 10073  24E0  3004               	movlw	4
 10074  24E1  0095               	movwf	21	;volatile
 10075                           
 10076                           ;MCU_16f1518_B1.c: 259: IOCBF=0b00000000;
 10077  24E2  0196               	clrf	22	;volatile
 10078                           
 10079                           ;MCU_16f1518_B1.c: 261: IOCIE=1;
 10080  24E3  158B               	bsf	11,3	;volatile
 10081                           
 10082                           ;MCU_16f1518_B1.c: 262: IOCIF=0;
 10083  24E4  100B               	bcf	11,0	;volatile
 10084                           
 10085                           ;MCU_16f1518_B1.c: 263: PEIE=1;
 10086  24E5  170B               	bsf	11,6	;volatile
 10087                           
 10088                           ;MCU_16f1518_B1.c: 264: GIE=1;
 10089  24E6  178B               	bsf	11,7	;volatile
 10090  24E7  0008               	return
 10091  24E8                     __end_of_IOC_Set:	
 10092                           
 10093                           	psect	text50
 10094  23AD                     __ptext50:	
 10095 ;; *************** function _INT_Set *****************
 10096 ;; Defined at:
 10097 ;;		line 217 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;		None
 10102 ;; Return value:  Size  Location     Type
 10103 ;;		None               void
 10104 ;; Registers used:
 10105 ;;		None
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        0 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    4
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_Mcu_Initialization
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _INT_Set
 10127  23AD                     _INT_Set:	
 10128                           
 10129                           ;MCU_16f1518_B1.c: 219: WPUB0=0;
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _INT_Set: []
 10133  23AD  0024               	movlb	4	; select bank4
 10134  23AE  100D               	bcf	13,0	;volatile
 10135                           
 10136                           ;MCU_16f1518_B1.c: 221: PEIE=1;
 10137  23AF  170B               	bsf	11,6	;volatile
 10138                           
 10139                           ;MCU_16f1518_B1.c: 222: GIE=1;
 10140  23B0  178B               	bsf	11,7	;volatile
 10141  23B1  0008               	return
 10142  23B2                     __end_of_INT_Set:	
 10143                           
 10144                           	psect	text51
 10145  23D1                     __ptext51:	
 10146 ;; *************** function _ADC_Set *****************
 10147 ;; Defined at:
 10148 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;		None
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;		None
 10153 ;; Return value:  Size  Location     Type
 10154 ;;		None               void
 10155 ;; Registers used:
 10156 ;;		wreg
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;Total ram usage:        0 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    4
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		_Mcu_Initialization
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function _ADC_Set
 10178  23D1                     _ADC_Set:	
 10179                           
 10180                           ;MCU_16f1518_B1.c: 305: ADCON1=0xf2;
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _ADC_Set: [wreg]
 10184  23D1  30F2               	movlw	242
 10185  23D2  0021               	movlb	1	; select bank1
 10186  23D3  009E               	movwf	30	;volatile
 10187                           
 10188                           ;MCU_16f1518_B1.c: 306: FVRCON=0xc0;
 10189  23D4  30C0               	movlw	192
 10190  23D5  0022               	movlb	2	; select bank2
 10191  23D6  0097               	movwf	23	;volatile
 10192  23D7  0008               	return
 10193  23D8                     __end_of_ADC_Set:	
 10194                           
 10195                           	psect	text52
 10196  2465                     __ptext52:	
 10197 ;; *************** function _MainT_Initialization *****************
 10198 ;; Defined at:
 10199 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;		None
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;		None
 10204 ;; Return value:  Size  Location     Type
 10205 ;;		None               void
 10206 ;; Registers used:
 10207 ;;		wreg
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;Total ram usage:        1 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    4
 10220 ;; This function calls:
 10221 ;;		Nothing
 10222 ;; This function is called by:
 10223 ;;		_main
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           
 10228                           ;psect for function _MainT_Initialization
 10229  2465                     _MainT_Initialization:	
 10230                           
 10231                           ;main.c: 95: Product=&VarProduct;
 10232                           
 10233                           ;incstack = 0
 10234                           ; Regs used in _MainT_Initialization: [wreg]
 10235  2465  30A0               	movlw	_VarProduct& (0+255)
 10236  2466  0020               	movlb	0	; select bank0
 10237  2467  00A0               	movwf	??_MainT_Initialization
 10238  2468  0820               	movf	??_MainT_Initialization,w
 10239  2469  00EF               	movwf	_Product
 10240                           
 10241                           ;main.c: 98: TMain=&VarTMain;
 10242  246A  30C0               	movlw	_VarTMain& (0+255)
 10243  246B  00A0               	movwf	??_MainT_Initialization
 10244  246C  0820               	movf	??_MainT_Initialization,w
 10245  246D  0021               	movlb	1	; select bank1
 10246  246E  00E9               	movwf	_TMain^(0+128)
 10247  246F  0008               	return
 10248  2470                     __end_of_MainT_Initialization:	
 10249                           
 10250                           	psect	text53
 10251  145C                     __ptext53:	
 10252 ;; *************** function _MainT *****************
 10253 ;; Defined at:
 10254 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;		None               void
 10261 ;; Registers used:
 10262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    7
 10275 ;; This function calls:
 10276 ;;		_setBuz
 10277 ;;		_setLoad_Enable
 10278 ;;		_setRF_Enable
 10279 ;;		_setSw_Enable
 10280 ;;		_setTemp_Enable
 10281 ;; This function is called by:
 10282 ;;		_main
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _MainT
 10288  145C                     _MainT:	
 10289                           
 10290                           ;main.c: 106: if(!TMain->PowerON)
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10294  145C  0021               	movlb	1	; select bank1
 10295  145D  0869               	movf	_TMain^(0+128),w
 10296  145E  0086               	movwf	6
 10297  145F  3001               	movlw	1	; select bank2/3
 10298  1460  0087               	movwf	7
 10299  1461  1801               	btfsc	1,0
 10300  1462  2CA7               	goto	l9902
 10301                           
 10302                           ;main.c: 107: {
 10303                           ;main.c: 108: TMain->PowerCount++;
 10304  1463  0A69               	incf	_TMain^(0+128),w
 10305  1464  0086               	movwf	6
 10306  1465  3001               	movlw	1	; select bank2/3
 10307  1466  0087               	movwf	7
 10308  1467  3001               	movlw	1
 10309  1468  0781               	addwf	1,f
 10310  1469  3141               	addfsr 1,1
 10311  146A  1803               	skipnc
 10312  146B  0A81               	incf	1,f
 10313                           
 10314                           ;main.c: 109: if(TMain->PowerCount == 150)
 10315  146C  0A69               	incf	_TMain^(0+128),w
 10316  146D  0086               	movwf	6
 10317  146E  3001               	movlw	1	; select bank2/3
 10318  146F  0087               	movwf	7
 10319  1470  3F40               	moviw [0]fsr1
 10320  1471  3A96               	xorlw	150
 10321  1472  1D03               	skipz
 10322  1473  2C76               	goto	u10045
 10323  1474  3F41               	moviw [1]fsr1
 10324  1475  3A00               	xorlw	0
 10325  1476                     u10045:	
 10326  1476  1D03               	skipz
 10327  1477  0008               	return
 10328                           
 10329                           ;main.c: 110: {
 10330                           ;main.c: 111: TMain->PowerCount=0;
 10331  1478  0A69               	incf	_TMain^(0+128),w
 10332  1479  0086               	movwf	6
 10333  147A  3001               	movlw	1	; select bank2/3
 10334  147B  0087               	movwf	7
 10335  147C  3000               	movlw	0
 10336  147D  3FC0               	movwi [0]fsr1
 10337  147E  3FC1               	movwi [1]fsr1
 10338                           
 10339                           ;main.c: 112: TMain->PowerON=1;
 10340  147F  0869               	movf	_TMain^(0+128),w
 10341  1480  0086               	movwf	6
 10342  1481  3001               	movlw	1	; select bank2/3
 10343  1482  0087               	movwf	7
 10344  1483  1401               	bsf	1,0
 10345                           
 10346                           ;main.c: 115: setTemp_Enable(1);
 10347  1484  3001               	movlw	1
 10348  1485  31A4  245A  3194   	fcall	_setTemp_Enable
 10349                           
 10350                           ;main.c: 119: setLoad_Enable(1);
 10351  1488  3001               	movlw	1
 10352  1489  31A5  257C  3194   	fcall	_setLoad_Enable
 10353                           
 10354                           ;main.c: 125: setBuz(3,50);
 10355  148C  3032               	movlw	50
 10356  148D  0020               	movlb	0	; select bank0
 10357  148E  00A6               	movwf	setBuz@time
 10358  148F  3000               	movlw	0
 10359  1490  00A7               	movwf	setBuz@time+1
 10360  1491  3003               	movlw	3
 10361  1492  3193  23E5  3194   	fcall	_setBuz
 10362                           
 10363                           ;main.c: 126: TMain->SelfTest=1;
 10364  1495  0021               	movlb	1	; select bank1
 10365  1496  0869               	movf	_TMain^(0+128),w
 10366  1497  3E03               	addlw	3
 10367  1498  0086               	movwf	6
 10368  1499  3001               	movlw	1	; select bank2/3
 10369  149A  0087               	movwf	7
 10370  149B  1401               	bsf	1,0
 10371                           
 10372                           ;main.c: 128: setSw_Enable(1);
 10373  149C  3001               	movlw	1
 10374  149D  31A7  2768  3194   	fcall	_setSw_Enable
 10375                           
 10376                           ;main.c: 131: setRF_Enable(1,1);
 10377  14A0  0020               	movlb	0	; select bank0
 10378  14A1  01A4               	clrf	setRF_Enable@command
 10379  14A2  0AA4               	incf	setRF_Enable@command,f
 10380  14A3  3001               	movlw	1
 10381  14A4  319B  2337         	fcall	_setRF_Enable
 10382                           
 10383                           ;main.c: 135: }
 10384                           ;main.c: 136: }
 10385  14A6  0008               	return
 10386  14A7                     l9902:	
 10387                           
 10388                           ;main.c: 137: else
 10389                           ;main.c: 138: {
 10390                           ;main.c: 146: TMain->Count1++;
 10391  14A7  0021               	movlb	1	; select bank1
 10392  14A8  0869               	movf	_TMain^(0+128),w
 10393  14A9  3E06               	addlw	6
 10394  14AA  0086               	movwf	6
 10395  14AB  3001               	movlw	1	; select bank2/3
 10396  14AC  0087               	movwf	7
 10397  14AD  3001               	movlw	1
 10398  14AE  0781               	addwf	1,f
 10399  14AF  3141               	addfsr 1,1
 10400  14B0  1803               	skipnc
 10401  14B1  0A81               	incf	1,f
 10402                           
 10403                           ;main.c: 147: if(TMain->Count1 == 100)
 10404  14B2  0869               	movf	_TMain^(0+128),w
 10405  14B3  3E06               	addlw	6
 10406  14B4  0086               	movwf	6
 10407  14B5  3001               	movlw	1	; select bank2/3
 10408  14B6  0087               	movwf	7
 10409  14B7  3F40               	moviw [0]fsr1
 10410  14B8  3A64               	xorlw	100
 10411  14B9  1D03               	skipz
 10412  14BA  2CBD               	goto	u10055
 10413  14BB  3F41               	moviw [1]fsr1
 10414  14BC  3A00               	xorlw	0
 10415  14BD                     u10055:	
 10416  14BD  1D03               	skipz
 10417  14BE  0008               	return
 10418                           
 10419                           ;main.c: 148: {
 10420                           ;main.c: 149: TMain->Count1=0;
 10421  14BF  0869               	movf	_TMain^(0+128),w
 10422  14C0  3E06               	addlw	6
 10423  14C1  0086               	movwf	6
 10424  14C2  3001               	movlw	1	; select bank2/3
 10425  14C3  0087               	movwf	7
 10426  14C4  3000               	movlw	0
 10427  14C5  3FC0               	movwi [0]fsr1
 10428  14C6  3FC1               	movwi [1]fsr1
 10429                           
 10430                           ;main.c: 160: if(TMain->Flag)
 10431  14C7  0869               	movf	_TMain^(0+128),w
 10432  14C8  0086               	movwf	6
 10433  14C9  3001               	movlw	1	; select bank2/3
 10434  14CA  0087               	movwf	7
 10435  14CB  1981               	btfsc	1,3
 10436  14CC  0008               	return
 10437                           
 10438                           ;main.c: 170: else
 10439                           ;main.c: 171: {
 10440                           ;main.c: 172: TMain->Flag=1;
 10441                           
 10442                           ;main.c: 161: {
 10443                           ;main.c: 169: }
 10444  14CD  0869               	movf	_TMain^(0+128),w
 10445  14CE  0086               	movwf	6
 10446  14CF  3001               	movlw	1	; select bank2/3
 10447  14D0  0087               	movwf	7
 10448  14D1  1581               	bsf	1,3
 10449  14D2  0008               	return
 10450  14D3                     __end_of_MainT:	
 10451                           
 10452                           	psect	text54
 10453  245A                     __ptext54:	
 10454 ;; *************** function _setTemp_Enable *****************
 10455 ;; Defined at:
 10456 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 10457 ;; Parameters:    Size  Location     Type
 10458 ;;  command         1    wreg     unsigned char 
 10459 ;; Auto vars:     Size  Location     Type
 10460 ;;  command         1    0[BANK0 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;		None               void
 10463 ;; Registers used:
 10464 ;;		wreg, fsr1l, fsr1h
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;Total ram usage:        1 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    4
 10477 ;; This function calls:
 10478 ;;		Nothing
 10479 ;; This function is called by:
 10480 ;;		_MainT
 10481 ;; This function uses a non-reentrant model
 10482 ;;
 10483                           
 10484                           
 10485                           ;psect for function _setTemp_Enable
 10486  245A                     _setTemp_Enable:	
 10487                           
 10488                           ;incstack = 0
 10489                           ; Regs used in _setTemp_Enable: [wregfsr1]
 10490                           ;setTemp_Enable@command stored from wreg
 10491  245A  0020               	movlb	0	; select bank0
 10492  245B  00A0               	movwf	setTemp_Enable@command
 10493                           
 10494                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 10495  245C  087D               	movf	_Temp,w
 10496  245D  0086               	movwf	6
 10497  245E  3001               	movlw	1	; select bank2/3
 10498  245F  0087               	movwf	7
 10499  2460  0820               	movf	setTemp_Enable@command,w
 10500  2461  1001               	bcf	1,0
 10501  2462  1D03               	skipz
 10502  2463  1401               	bsf	1,0
 10503  2464  0008               	return
 10504  2465                     __end_of_setTemp_Enable:	
 10505                           
 10506                           	psect	text55
 10507  257C                     __ptext55:	
 10508 ;; *************** function _setLoad_Enable *****************
 10509 ;; Defined at:
 10510 ;;		line 255 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  command         1    wreg     unsigned char 
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  command         1    0[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;		None               void
 10517 ;; Registers used:
 10518 ;;		wreg, fsr1l, fsr1h
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:        1 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    4
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_MainT
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _setLoad_Enable
 10540  257C                     _setLoad_Enable:	
 10541                           
 10542                           ;incstack = 0
 10543                           ; Regs used in _setLoad_Enable: [wregfsr1]
 10544                           ;setLoad_Enable@command stored from wreg
 10545  257C  0020               	movlb	0	; select bank0
 10546  257D  00A0               	movwf	setLoad_Enable@command
 10547                           
 10548                           ;OverLoad_B1.c: 257: Load->Enable=command;
 10549  257E  086E               	movf	_Load,w
 10550  257F  0086               	movwf	6
 10551  2580  3002               	movlw	2	; select bank4/5
 10552  2581  0087               	movwf	7
 10553  2582  0820               	movf	setLoad_Enable@command,w
 10554  2583  1001               	bcf	1,0
 10555  2584  1D03               	skipz
 10556  2585  1401               	bsf	1,0
 10557                           
 10558                           ;OverLoad_B1.c: 258: Load->GO=0;
 10559  2586  086E               	movf	_Load,w
 10560  2587  0086               	movwf	6
 10561  2588  3002               	movlw	2	; select bank4/5
 10562  2589  0087               	movwf	7
 10563  258A  1081               	bcf	1,1
 10564  258B  0008               	return
 10565  258C                     __end_of_setLoad_Enable:	
 10566                           
 10567                           	psect	text56
 10568  03A4                     __ptext56:	
 10569 ;; *************** function _Load_Main *****************
 10570 ;; Defined at:
 10571 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;  i               1   17[BANK0 ] unsigned char 
 10576 ;; Return value:  Size  Location     Type
 10577 ;;		None               void
 10578 ;; Registers used:
 10579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;Total ram usage:        5 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    9
 10592 ;; This function calls:
 10593 ;;		___lwdiv
 10594 ;;		___wmul
 10595 ;;		_getPF_Safe
 10596 ;;		_getTemp_Safe
 10597 ;;		_setDimmerLights_Clear
 10598 ;;		_setLoad_AH_AL_Restore
 10599 ;;		_setLoad_Exceptions
 10600 ;; This function is called by:
 10601 ;;		_main
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           
 10606                           ;psect for function _Load_Main
 10607  03A4                     _Load_Main:	
 10608                           
 10609                           ;OverLoad_B1.c: 47: char i;
 10610                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 10611                           
 10612                           ;incstack = 0
 10613                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10614  03A4  0020               	movlb	0	; select bank0
 10615  03A5  086E               	movf	_Load,w
 10616  03A6  0086               	movwf	6
 10617  03A7  3002               	movlw	2	; select bank4/5
 10618  03A8  0087               	movwf	7
 10619  03A9  1E81               	btfss	1,5
 10620  03AA  2BD1               	goto	l9940
 10621                           
 10622                           ;OverLoad_B1.c: 49: {
 10623                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 10624  03AB  086E               	movf	_Load,w
 10625  03AC  3E03               	addlw	3
 10626  03AD  0086               	movwf	6
 10627  03AE  3002               	movlw	2	; select bank4/5
 10628  03AF  0087               	movwf	7
 10629  03B0  3001               	movlw	1
 10630  03B1  0781               	addwf	1,f
 10631  03B2  3141               	addfsr 1,1
 10632  03B3  1803               	skipnc
 10633  03B4  0A81               	incf	1,f
 10634                           
 10635                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 10636  03B5  086E               	movf	_Load,w
 10637  03B6  3E03               	addlw	3
 10638  03B7  0086               	movwf	6
 10639  03B8  3002               	movlw	2	; select bank4/5
 10640  03B9  0087               	movwf	7
 10641  03BA  3F40               	moviw [0]fsr1
 10642  03BB  00AD               	movwf	??_Load_Main
 10643  03BC  3F41               	moviw [1]fsr1
 10644  03BD  00AE               	movwf	??_Load_Main+1
 10645  03BE  3003               	movlw	3
 10646  03BF  022E               	subwf	??_Load_Main+1,w
 10647  03C0  30E8               	movlw	232
 10648  03C1  1903               	skipnz
 10649  03C2  022D               	subwf	??_Load_Main,w
 10650  03C3  1C03               	skipc
 10651  03C4  0008               	return
 10652                           
 10653                           ;OverLoad_B1.c: 52: {
 10654                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 10655  03C5  086E               	movf	_Load,w
 10656  03C6  3E03               	addlw	3
 10657  03C7  0086               	movwf	6
 10658  03C8  3002               	movlw	2	; select bank4/5
 10659  03C9  0087               	movwf	7
 10660  03CA  3000               	movlw	0
 10661  03CB  3FC0               	movwi [0]fsr1
 10662  03CC  3FC1               	movwi [1]fsr1
 10663                           
 10664                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 10665  03CD  3000               	movlw	0
 10666  03CE  319C  24E1         	fcall	_setLoad_Exceptions
 10667                           
 10668                           ;OverLoad_B1.c: 55: }
 10669                           ;OverLoad_B1.c: 56: }
 10670  03D0  0008               	return
 10671  03D1                     l9940:	
 10672                           
 10673                           ;OverLoad_B1.c: 57: else
 10674                           ;OverLoad_B1.c: 58: {
 10675                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 10676  03D1  0020               	movlb	0	; select bank0
 10677  03D2  086E               	movf	_Load,w
 10678  03D3  0086               	movwf	6
 10679  03D4  3002               	movlw	2	; select bank4/5
 10680  03D5  0087               	movwf	7
 10681  03D6  1E01               	btfss	1,4
 10682  03D7  2DD7               	goto	l10022
 10683                           
 10684                           ;OverLoad_B1.c: 60: {
 10685                           ;OverLoad_B1.c: 61: Load->Time++;
 10686  03D8  0A6E               	incf	_Load,w
 10687  03D9  0086               	movwf	6
 10688  03DA  3002               	movlw	2	; select bank4/5
 10689  03DB  0087               	movwf	7
 10690  03DC  3001               	movlw	1
 10691  03DD  0781               	addwf	1,f
 10692  03DE  3141               	addfsr 1,1
 10693  03DF  1803               	skipnc
 10694  03E0  0A81               	incf	1,f
 10695                           
 10696                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 10697  03E1  0A6E               	incf	_Load,w
 10698  03E2  0086               	movwf	6
 10699  03E3  3002               	movlw	2	; select bank4/5
 10700  03E4  0087               	movwf	7
 10701  03E5  3F40               	moviw [0]fsr1
 10702  03E6  00AD               	movwf	??_Load_Main
 10703  03E7  3F41               	moviw [1]fsr1
 10704  03E8  00AE               	movwf	??_Load_Main+1
 10705  03E9  3000               	movlw	0
 10706  03EA  022E               	subwf	??_Load_Main+1,w
 10707  03EB  3005               	movlw	5
 10708  03EC  1903               	skipnz
 10709  03ED  022D               	subwf	??_Load_Main,w
 10710  03EE  1C03               	skipc
 10711  03EF  0008               	return
 10712                           
 10713                           ;OverLoad_B1.c: 63: {
 10714                           ;OverLoad_B1.c: 64: Load->Time=0;
 10715  03F0  0A6E               	incf	_Load,w
 10716  03F1  0086               	movwf	6
 10717  03F2  3002               	movlw	2	; select bank4/5
 10718  03F3  0087               	movwf	7
 10719  03F4  3000               	movlw	0
 10720  03F5  3FC0               	movwi [0]fsr1
 10721  03F6  3FC1               	movwi [1]fsr1
 10722                           
 10723                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 10724  03F7  086E               	movf	_Load,w
 10725  03F8  0086               	movwf	6
 10726  03F9  3002               	movlw	2	; select bank4/5
 10727  03FA  0087               	movwf	7
 10728  03FB  1201               	bcf	1,4
 10729                           
 10730                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 10731  03FC  086E               	movf	_Load,w
 10732  03FD  3E45               	addlw	69
 10733  03FE  0086               	movwf	6
 10734  03FF  3002               	movlw	2	; select bank4/5
 10735  0400  0087               	movwf	7
 10736  0401  086E               	movf	_Load,w
 10737  0402  3E44               	addlw	68
 10738  0403  0084               	movwf	4
 10739  0404  3002               	movlw	2	; select bank4/5
 10740  0405  0085               	movwf	5
 10741  0406  0800               	movf	0,w
 10742  0407  00AD               	movwf	??_Load_Main
 10743  0408  086E               	movf	_Load,w
 10744  0409  3E43               	addlw	67
 10745  040A  0084               	movwf	4
 10746  040B  3002               	movlw	2	; select bank4/5
 10747  040C  0085               	movwf	5
 10748  040D  0800               	movf	0,w
 10749  040E  072D               	addwf	??_Load_Main,w
 10750  040F  0701               	addwf	1,w
 10751  0410  00AE               	movwf	??_Load_Main+1
 10752  0411  086E               	movf	_Load,w
 10753  0412  3E3E               	addlw	62
 10754  0413  0086               	movwf	6
 10755  0414  3002               	movlw	2	; select bank4/5
 10756  0415  0087               	movwf	7
 10757  0416  082E               	movf	??_Load_Main+1,w
 10758  0417  0081               	movwf	1
 10759                           
 10760                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 10761  0418  01B1               	clrf	Load_Main@i
 10762  0419  0AB1               	incf	Load_Main@i,f
 10763  041A  3004               	movlw	4
 10764  041B  0231               	subwf	Load_Main@i,w
 10765  041C  1803               	btfsc	3,0
 10766  041D  2C4C               	goto	l9962
 10767  041E                     l9956:	
 10768                           
 10769                           ;OverLoad_B1.c: 68: {
 10770                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 10771  041E  3531               	lslf	Load_Main@i,w
 10772  041F  3E08               	addlw	8
 10773  0420  076E               	addwf	_Load,w
 10774  0421  00AD               	movwf	??_Load_Main
 10775  0422  082D               	movf	??_Load_Main,w
 10776  0423  0086               	movwf	6
 10777  0424  3002               	movlw	2	; select bank4/5
 10778  0425  0087               	movwf	7
 10779  0426  086E               	movf	_Load,w
 10780  0427  3E2E               	addlw	46
 10781  0428  0084               	movwf	4
 10782  0429  3002               	movlw	2	; select bank4/5
 10783  042A  0085               	movwf	5
 10784  042B  3F40               	moviw [0]fsr1
 10785  042C  0780               	addwf	0,f
 10786  042D  3101               	addfsr 0,1
 10787  042E  3F41               	moviw [1]fsr1
 10788  042F  3D80               	addwfc	0,f
 10789  0430  313F               	addfsr 0,-1
 10790                           
 10791                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 10792  0431  3531               	lslf	Load_Main@i,w
 10793  0432  3E1A               	addlw	26
 10794  0433  076E               	addwf	_Load,w
 10795  0434  00AD               	movwf	??_Load_Main
 10796  0435  082D               	movf	??_Load_Main,w
 10797  0436  0086               	movwf	6
 10798  0437  3002               	movlw	2	; select bank4/5
 10799  0438  0087               	movwf	7
 10800  0439  086E               	movf	_Load,w
 10801  043A  3E30               	addlw	48
 10802  043B  0084               	movwf	4
 10803  043C  3002               	movlw	2	; select bank4/5
 10804  043D  0085               	movwf	5
 10805  043E  3F40               	moviw [0]fsr1
 10806  043F  0780               	addwf	0,f
 10807  0440  3101               	addfsr 0,1
 10808  0441  3F41               	moviw [1]fsr1
 10809  0442  3D80               	addwfc	0,f
 10810  0443  313F               	addfsr 0,-1
 10811  0444  3001               	movlw	1
 10812  0445  00AD               	movwf	??_Load_Main
 10813  0446  082D               	movf	??_Load_Main,w
 10814  0447  07B1               	addwf	Load_Main@i,f
 10815  0448  3004               	movlw	4
 10816  0449  0231               	subwf	Load_Main@i,w
 10817  044A  1C03               	skipc
 10818  044B  2C1E               	goto	l9956
 10819  044C                     l9962:	
 10820                           
 10821                           ;OverLoad_B1.c: 71: }
 10822                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 10823  044C  3003               	movlw	3
 10824  044D  00A0               	movwf	___lwdiv@divisor
 10825  044E  3000               	movlw	0
 10826  044F  00A1               	movwf	___lwdiv@divisor+1
 10827  0450  086E               	movf	_Load,w
 10828  0451  3E2E               	addlw	46
 10829  0452  0086               	movwf	6
 10830  0453  3002               	movlw	2	; select bank4/5
 10831  0454  0087               	movwf	7
 10832  0455  3F40               	moviw [0]fsr1
 10833  0456  00A2               	movwf	___lwdiv@dividend
 10834  0457  3F41               	moviw [1]fsr1
 10835  0458  00A3               	movwf	___lwdiv@dividend+1
 10836  0459  319B  236D  3183   	fcall	___lwdiv
 10837  045C  0020               	movlb	0	; select bank0
 10838  045D  086E               	movf	_Load,w
 10839  045E  3E2E               	addlw	46
 10840  045F  0086               	movwf	6
 10841  0460  3002               	movlw	2	; select bank4/5
 10842  0461  0087               	movwf	7
 10843  0462  0820               	movf	?___lwdiv,w
 10844  0463  3FC0               	movwi [0]fsr1
 10845  0464  0821               	movf	?___lwdiv+1,w
 10846  0465  3FC1               	movwi [1]fsr1
 10847                           
 10848                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 10849  0466  3003               	movlw	3
 10850  0467  00A0               	movwf	___lwdiv@divisor
 10851  0468  3000               	movlw	0
 10852  0469  00A1               	movwf	___lwdiv@divisor+1
 10853  046A  086E               	movf	_Load,w
 10854  046B  3E30               	addlw	48
 10855  046C  0086               	movwf	6
 10856  046D  3002               	movlw	2	; select bank4/5
 10857  046E  0087               	movwf	7
 10858  046F  3F40               	moviw [0]fsr1
 10859  0470  00A2               	movwf	___lwdiv@dividend
 10860  0471  3F41               	moviw [1]fsr1
 10861  0472  00A3               	movwf	___lwdiv@dividend+1
 10862  0473  319B  236D  3183   	fcall	___lwdiv
 10863  0476  0020               	movlb	0	; select bank0
 10864  0477  086E               	movf	_Load,w
 10865  0478  3E30               	addlw	48
 10866  0479  0086               	movwf	6
 10867  047A  3002               	movlw	2	; select bank4/5
 10868  047B  0087               	movwf	7
 10869  047C  0820               	movf	?___lwdiv,w
 10870  047D  3FC0               	movwi [0]fsr1
 10871  047E  0821               	movf	?___lwdiv+1,w
 10872  047F  3FC1               	movwi [1]fsr1
 10873                           
 10874                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 10875  0480  086E               	movf	_Load,w
 10876  0481  3E2E               	addlw	46
 10877  0482  0086               	movwf	6
 10878  0483  3002               	movlw	2	; select bank4/5
 10879  0484  0087               	movwf	7
 10880  0485  3F40               	moviw [0]fsr1
 10881  0486  00AD               	movwf	??_Load_Main
 10882  0487  3F41               	moviw [1]fsr1
 10883  0488  00AE               	movwf	??_Load_Main+1
 10884  0489  086E               	movf	_Load,w
 10885  048A  3E30               	addlw	48
 10886  048B  0086               	movwf	6
 10887  048C  3002               	movlw	2	; select bank4/5
 10888  048D  0087               	movwf	7
 10889  048E  3F40               	moviw [0]fsr1
 10890  048F  00AF               	movwf	??_Load_Main+2
 10891  0490  3F41               	moviw [1]fsr1
 10892  0491  00B0               	movwf	??_Load_Main+3
 10893  0492  082E               	movf	??_Load_Main+1,w
 10894  0493  0230               	subwf	??_Load_Main+3,w
 10895  0494  1D03               	skipz
 10896  0495  2C98               	goto	u10185
 10897  0496  082D               	movf	??_Load_Main,w
 10898  0497  022F               	subwf	??_Load_Main+2,w
 10899  0498                     u10185:	
 10900  0498  1803               	skipnc
 10901  0499  2DD4               	goto	l10020
 10902                           
 10903                           ;OverLoad_B1.c: 75: {
 10904                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 10905  049A  086E               	movf	_Load,w
 10906  049B  3E2E               	addlw	46
 10907  049C  0086               	movwf	6
 10908  049D  3002               	movlw	2	; select bank4/5
 10909  049E  0087               	movwf	7
 10910  049F  086E               	movf	_Load,w
 10911  04A0  3E30               	addlw	48
 10912  04A1  0084               	movwf	4
 10913  04A2  3002               	movlw	2	; select bank4/5
 10914  04A3  0085               	movwf	5
 10915  04A4  3F00               	moviw [0]fsr0
 10916  04A5  00AD               	movwf	??_Load_Main
 10917  04A6  3F01               	moviw [1]fsr0
 10918  04A7  00AE               	movwf	??_Load_Main+1
 10919  04A8  09AD               	comf	??_Load_Main,f
 10920  04A9  09AE               	comf	??_Load_Main+1,f
 10921  04AA  0AAD               	incf	??_Load_Main,f
 10922  04AB  1903               	skipnz
 10923  04AC  0AAE               	incf	??_Load_Main+1,f
 10924  04AD  3F40               	moviw [0]fsr1
 10925  04AE  072D               	addwf	??_Load_Main,w
 10926  04AF  00AF               	movwf	??_Load_Main+2
 10927  04B0  3F41               	moviw [1]fsr1
 10928  04B1  3D2E               	addwfc	??_Load_Main+1,w
 10929  04B2  00B0               	movwf	??_Load_Main+3
 10930  04B3  086E               	movf	_Load,w
 10931  04B4  3E2C               	addlw	44
 10932  04B5  0086               	movwf	6
 10933  04B6  3002               	movlw	2	; select bank4/5
 10934  04B7  0087               	movwf	7
 10935  04B8  082F               	movf	??_Load_Main+2,w
 10936  04B9  3FC0               	movwi [0]fsr1
 10937  04BA  0830               	movf	??_Load_Main+3,w
 10938  04BB  3FC1               	movwi [1]fsr1
 10939                           
 10940                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 10941  04BC  086E               	movf	_Load,w
 10942  04BD  3E3A               	addlw	58
 10943  04BE  0086               	movwf	6
 10944  04BF  3002               	movlw	2	; select bank4/5
 10945  04C0  0087               	movwf	7
 10946  04C1  3002               	movlw	2
 10947  04C2  0201               	subwf	1,w
 10948  04C3  1803               	skipnc
 10949  04C4  2D15               	goto	l9984
 10950                           
 10951                           ;OverLoad_B1.c: 79: {
 10952                           ;OverLoad_B1.c: 80: Load->Count++;
 10953  04C5  3001               	movlw	1
 10954  04C6  00AD               	movwf	??_Load_Main
 10955  04C7  086E               	movf	_Load,w
 10956  04C8  3E3A               	addlw	58
 10957  04C9  0086               	movwf	6
 10958  04CA  3002               	movlw	2	; select bank4/5
 10959  04CB  0087               	movwf	7
 10960  04CC  082D               	movf	??_Load_Main,w
 10961  04CD  0781               	addwf	1,f
 10962                           
 10963                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 10964  04CE  086E               	movf	_Load,w
 10965  04CF  3E3A               	addlw	58
 10966  04D0  0086               	movwf	6
 10967  04D1  3002               	movlw	2	; select bank4/5
 10968  04D2  0087               	movwf	7
 10969  04D3  0801               	movf	1,w
 10970  04D4  3A01               	xorlw	1
 10971  04D5  1D03               	skipz
 10972  04D6  2CE1               	goto	l9976
 10973                           
 10974                           ;OverLoad_B1.c: 82: {
 10975                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 10976  04D7  086E               	movf	_Load,w
 10977  04D8  3E36               	addlw	54
 10978  04D9  0086               	movwf	6
 10979  04DA  3002               	movlw	2	; select bank4/5
 10980  04DB  0087               	movwf	7
 10981  04DC  30F4               	movlw	244
 10982  04DD  3FC0               	movwi [0]fsr1
 10983  04DE  3001               	movlw	1
 10984  04DF  3FC1               	movwi [1]fsr1
 10985                           
 10986                           ;OverLoad_B1.c: 84: }
 10987  04E0  2D15               	goto	l9984
 10988  04E1                     l9976:	
 10989                           
 10990                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 10991  04E1  086E               	movf	_Load,w
 10992  04E2  3E3A               	addlw	58
 10993  04E3  0086               	movwf	6
 10994  04E4  3002               	movlw	2	; select bank4/5
 10995  04E5  0087               	movwf	7
 10996  04E6  0801               	movf	1,w
 10997  04E7  3A02               	xorlw	2
 10998  04E8  1D03               	skipz
 10999  04E9  2D15               	goto	l9984
 11000                           
 11001                           ;OverLoad_B1.c: 86: {
 11002                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11003  04EA  086E               	movf	_Load,w
 11004  04EB  3E3E               	addlw	62
 11005  04EC  0086               	movwf	6
 11006  04ED  3002               	movlw	2	; select bank4/5
 11007  04EE  0087               	movwf	7
 11008  04EF  0801               	movf	1,w
 11009  04F0  3A01               	xorlw	1
 11010  04F1  1D03               	skipz
 11011  04F2  2CFD               	goto	l9982
 11012                           
 11013                           ;OverLoad_B1.c: 88: {
 11014                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
 11015  04F3  086E               	movf	_Load,w
 11016  04F4  3E36               	addlw	54
 11017  04F5  0086               	movwf	6
 11018  04F6  3002               	movlw	2	; select bank4/5
 11019  04F7  0087               	movwf	7
 11020  04F8  3032               	movlw	50
 11021  04F9  3FC0               	movwi [0]fsr1
 11022  04FA  3000               	movlw	0
 11023  04FB  3FC1               	movwi [1]fsr1
 11024                           
 11025                           ;OverLoad_B1.c: 90: }
 11026  04FC  2D15               	goto	l9984
 11027  04FD                     l9982:	
 11028                           
 11029                           ;OverLoad_B1.c: 91: else
 11030                           ;OverLoad_B1.c: 92: {
 11031                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
 11032  04FD  086E               	movf	_Load,w
 11033  04FE  3E06               	addlw	6
 11034  04FF  0086               	movwf	6
 11035  0500  3002               	movlw	2	; select bank4/5
 11036  0501  0087               	movwf	7
 11037  0502  3F40               	moviw [0]fsr1
 11038  0503  00AD               	movwf	??_Load_Main
 11039  0504  3F41               	moviw [1]fsr1
 11040  0505  00AE               	movwf	??_Load_Main+1
 11041  0506  082D               	movf	??_Load_Main,w
 11042  0507  3E2A               	addlw	42
 11043  0508  00AF               	movwf	??_Load_Main+2
 11044  0509  3000               	movlw	0
 11045  050A  3D2E               	addwfc	??_Load_Main+1,w
 11046  050B  00B0               	movwf	??_Load_Main+3
 11047  050C  086E               	movf	_Load,w
 11048  050D  3E36               	addlw	54
 11049  050E  0086               	movwf	6
 11050  050F  3002               	movlw	2	; select bank4/5
 11051  0510  0087               	movwf	7
 11052  0511  082F               	movf	??_Load_Main+2,w
 11053  0512  3FC0               	movwi [0]fsr1
 11054  0513  0830               	movf	??_Load_Main+3,w
 11055  0514  3FC1               	movwi [1]fsr1
 11056  0515                     l9984:	
 11057                           
 11058                           ;OverLoad_B1.c: 94: }
 11059                           ;OverLoad_B1.c: 95: }
 11060                           ;OverLoad_B1.c: 96: }
 11061                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11062  0515  086E               	movf	_Load,w
 11063  0516  3E36               	addlw	54
 11064  0517  0086               	movwf	6
 11065  0518  3002               	movlw	2	; select bank4/5
 11066  0519  0087               	movwf	7
 11067  051A  3F40               	moviw [0]fsr1
 11068  051B  00AD               	movwf	??_Load_Main
 11069  051C  3F41               	moviw [1]fsr1
 11070  051D  00AE               	movwf	??_Load_Main+1
 11071  051E  086E               	movf	_Load,w
 11072  051F  3E2C               	addlw	44
 11073  0520  0086               	movwf	6
 11074  0521  3002               	movlw	2	; select bank4/5
 11075  0522  0087               	movwf	7
 11076  0523  3F40               	moviw [0]fsr1
 11077  0524  00AF               	movwf	??_Load_Main+2
 11078  0525  3F41               	moviw [1]fsr1
 11079  0526  00B0               	movwf	??_Load_Main+3
 11080  0527  082E               	movf	??_Load_Main+1,w
 11081  0528  0230               	subwf	??_Load_Main+3,w
 11082  0529  1D03               	skipz
 11083  052A  2D2D               	goto	u10235
 11084  052B  082D               	movf	??_Load_Main,w
 11085  052C  022F               	subwf	??_Load_Main+2,w
 11086  052D                     u10235:	
 11087  052D  1C03               	skipc
 11088  052E  2D4C               	goto	l9994
 11089                           
 11090                           ;OverLoad_B1.c: 99: {
 11091                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11092  052F  3001               	movlw	1
 11093  0530  00AD               	movwf	??_Load_Main
 11094  0531  086E               	movf	_Load,w
 11095  0532  3E3C               	addlw	60
 11096  0533  0086               	movwf	6
 11097  0534  3002               	movlw	2	; select bank4/5
 11098  0535  0087               	movwf	7
 11099  0536  082D               	movf	??_Load_Main,w
 11100  0537  0781               	addwf	1,f
 11101                           
 11102                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11103  0538  086E               	movf	_Load,w
 11104  0539  3E3C               	addlw	60
 11105  053A  0086               	movwf	6
 11106  053B  3002               	movlw	2	; select bank4/5
 11107  053C  0087               	movwf	7
 11108  053D  3003               	movlw	3
 11109  053E  0201               	subwf	1,w
 11110  053F  1C03               	skipc
 11111  0540  2DD4               	goto	l10020
 11112                           
 11113                           ;OverLoad_B1.c: 102: {
 11114                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11115  0541  086E               	movf	_Load,w
 11116  0542  3E3C               	addlw	60
 11117  0543  0086               	movwf	6
 11118  0544  3002               	movlw	2	; select bank4/5
 11119  0545  0087               	movwf	7
 11120  0546  0181               	clrf	1
 11121                           
 11122                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11123  0547  3001               	movlw	1
 11124  0548  319C  24E1  3183   	fcall	_setLoad_Exceptions
 11125                           
 11126                           ;OverLoad_B1.c: 113: }
 11127                           ;OverLoad_B1.c: 114: }
 11128  054B  2DD4               	goto	l10020
 11129  054C                     l9994:	
 11130                           
 11131                           ;OverLoad_B1.c: 115: else
 11132                           ;OverLoad_B1.c: 116: {
 11133                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11134  054C  0020               	movlb	0	; select bank0
 11135  054D  086E               	movf	_Load,w
 11136  054E  3E3C               	addlw	60
 11137  054F  0086               	movwf	6
 11138  0550  3002               	movlw	2	; select bank4/5
 11139  0551  0087               	movwf	7
 11140  0552  0181               	clrf	1
 11141                           
 11142                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11143  0553  086E               	movf	_Load,w
 11144  0554  3E42               	addlw	66
 11145  0555  0086               	movwf	6
 11146  0556  3002               	movlw	2	; select bank4/5
 11147  0557  0087               	movwf	7
 11148  0558  300A               	movlw	10
 11149  0559  0201               	subwf	1,w
 11150  055A  1803               	skipnc
 11151  055B  2D65               	goto	l10000
 11152                           
 11153                           ;OverLoad_B1.c: 119: {
 11154                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11155  055C  3001               	movlw	1
 11156  055D  00AD               	movwf	??_Load_Main
 11157  055E  086E               	movf	_Load,w
 11158  055F  3E42               	addlw	66
 11159  0560  0086               	movwf	6
 11160  0561  3002               	movlw	2	; select bank4/5
 11161  0562  0087               	movwf	7
 11162  0563  082D               	movf	??_Load_Main,w
 11163  0564  0781               	addwf	1,f
 11164  0565                     l10000:	
 11165                           
 11166                           ;OverLoad_B1.c: 121: }
 11167                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11168  0565  086E               	movf	_Load,w
 11169  0566  3E42               	addlw	66
 11170  0567  0086               	movwf	6
 11171  0568  3002               	movlw	2	; select bank4/5
 11172  0569  0087               	movwf	7
 11173  056A  300A               	movlw	10
 11174  056B  0201               	subwf	1,w
 11175  056C  1C03               	skipc
 11176  056D  2DD4               	goto	l10020
 11177                           
 11178                           ;OverLoad_B1.c: 123: {
 11179                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11180  056E  086E               	movf	_Load,w
 11181  056F  0086               	movwf	6
 11182  0570  3002               	movlw	2	; select bank4/5
 11183  0571  0087               	movwf	7
 11184  0572  1581               	bsf	1,3
 11185                           
 11186                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 11187  0573  01A2               	clrf	setDimmerLights_Clear@command
 11188  0574  0AA2               	incf	setDimmerLights_Clear@command,f
 11189  0575  3001               	movlw	1
 11190  0576  31A5  256C  3183   	fcall	_setDimmerLights_Clear
 11191                           
 11192                           ;OverLoad_B1.c: 131: setDimmerLights_Clear(2,1);
 11193  0579  0020               	movlb	0	; select bank0
 11194  057A  01A2               	clrf	setDimmerLights_Clear@command
 11195  057B  0AA2               	incf	setDimmerLights_Clear@command,f
 11196  057C  3002               	movlw	2
 11197  057D  31A5  256C  3183   	fcall	_setDimmerLights_Clear
 11198                           
 11199                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 11200  0580  0020               	movlb	0	; select bank0
 11201  0581  086E               	movf	_Load,w
 11202  0582  3E46               	addlw	70
 11203  0583  0086               	movwf	6
 11204  0584  3002               	movlw	2	; select bank4/5
 11205  0585  0087               	movwf	7
 11206  0586  1C01               	btfss	1,0
 11207  0587  2D9C               	goto	l10012
 11208                           
 11209                           ;OverLoad_B1.c: 139: {
 11210                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 11211  0588  086E               	movf	_Load,w
 11212  0589  3E46               	addlw	70
 11213  058A  0086               	movwf	6
 11214  058B  3002               	movlw	2	; select bank4/5
 11215  058C  0087               	movwf	7
 11216  058D  1001               	bcf	1,0
 11217                           
 11218                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 11219  058E  086E               	movf	_Load,w
 11220  058F  3E2C               	addlw	44
 11221  0590  0086               	movwf	6
 11222  0591  3002               	movlw	2	; select bank4/5
 11223  0592  0087               	movwf	7
 11224  0593  086E               	movf	_Load,w
 11225  0594  3E06               	addlw	6
 11226  0595  0084               	movwf	4
 11227  0596  3002               	movlw	2	; select bank4/5
 11228  0597  0085               	movwf	5
 11229  0598  3F40               	moviw [0]fsr1
 11230  0599  3F80               	movwi [0]fsr0
 11231  059A  3F41               	moviw [1]fsr1
 11232  059B  3F81               	movwi [1]fsr0
 11233  059C                     l10012:	
 11234                           
 11235                           ;OverLoad_B1.c: 143: }
 11236                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 11237  059C  086E               	movf	_Load,w
 11238  059D  3E46               	addlw	70
 11239  059E  0086               	movwf	6
 11240  059F  3002               	movlw	2	; select bank4/5
 11241  05A0  0087               	movwf	7
 11242  05A1  1C81               	btfss	1,1
 11243  05A2  2DD4               	goto	l10020
 11244                           
 11245                           ;OverLoad_B1.c: 146: {
 11246                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 11247  05A3  086E               	movf	_Load,w
 11248  05A4  3E46               	addlw	70
 11249  05A5  0086               	movwf	6
 11250  05A6  3002               	movlw	2	; select bank4/5
 11251  05A7  0087               	movwf	7
 11252  05A8  1081               	bcf	1,1
 11253                           
 11254                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 11255  05A9  086E               	movf	_Load,w
 11256  05AA  3E2C               	addlw	44
 11257  05AB  0086               	movwf	6
 11258  05AC  3002               	movlw	2	; select bank4/5
 11259  05AD  0087               	movwf	7
 11260  05AE  086E               	movf	_Load,w
 11261  05AF  3E06               	addlw	6
 11262  05B0  0084               	movwf	4
 11263  05B1  3002               	movlw	2	; select bank4/5
 11264  05B2  0085               	movwf	5
 11265  05B3  3F40               	moviw [0]fsr1
 11266  05B4  3F80               	movwi [0]fsr0
 11267  05B5  3F41               	moviw [1]fsr1
 11268  05B6  3F81               	movwi [1]fsr0
 11269                           
 11270                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x32*Load->LightsCount;
 11271  05B7  086E               	movf	_Load,w
 11272  05B8  3E3E               	addlw	62
 11273  05B9  0086               	movwf	6
 11274  05BA  3002               	movlw	2	; select bank4/5
 11275  05BB  0087               	movwf	7
 11276  05BC  0801               	movf	1,w
 11277  05BD  00AD               	movwf	??_Load_Main
 11278  05BE  01AE               	clrf	??_Load_Main+1
 11279  05BF  082D               	movf	??_Load_Main,w
 11280  05C0  00A0               	movwf	___wmul@multiplier
 11281  05C1  082E               	movf	??_Load_Main+1,w
 11282  05C2  00A1               	movwf	___wmul@multiplier+1
 11283  05C3  3032               	movlw	50
 11284  05C4  00A2               	movwf	___wmul@multiplicand
 11285  05C5  3000               	movlw	0
 11286  05C6  00A3               	movwf	___wmul@multiplicand+1
 11287  05C7  31A7  27A1  3183   	fcall	___wmul
 11288  05CA  0020               	movlb	0	; select bank0
 11289  05CB  086E               	movf	_Load,w
 11290  05CC  3E36               	addlw	54
 11291  05CD  0086               	movwf	6
 11292  05CE  3002               	movlw	2	; select bank4/5
 11293  05CF  0087               	movwf	7
 11294  05D0  0820               	movf	?___wmul,w
 11295  05D1  3FC0               	movwi [0]fsr1
 11296  05D2  0821               	movf	?___wmul+1,w
 11297  05D3  3FC1               	movwi [1]fsr1
 11298  05D4                     l10020:	
 11299                           
 11300                           ;OverLoad_B1.c: 150: }
 11301                           ;OverLoad_B1.c: 151: }
 11302                           ;OverLoad_B1.c: 152: }
 11303                           ;OverLoad_B1.c: 153: }
 11304                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 11305  05D4  3198  20A8         	fcall	_setLoad_AH_AL_Restore
 11306                           
 11307                           ;OverLoad_B1.c: 166: }
 11308                           ;OverLoad_B1.c: 167: }
 11309  05D6  0008               	return
 11310  05D7                     l10022:	
 11311                           
 11312                           ;OverLoad_B1.c: 168: else
 11313                           ;OverLoad_B1.c: 169: {
 11314                           ;OverLoad_B1.c: 170: if(Load->GO)
 11315  05D7  0020               	movlb	0	; select bank0
 11316  05D8  086E               	movf	_Load,w
 11317  05D9  0086               	movwf	6
 11318  05DA  3002               	movlw	2	; select bank4/5
 11319  05DB  0087               	movwf	7
 11320  05DC  1C81               	btfss	1,1
 11321  05DD  2E01               	goto	l10034
 11322                           
 11323                           ;OverLoad_B1.c: 171: {
 11324                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 11325  05DE  086E               	movf	_Load,w
 11326  05DF  0086               	movwf	6
 11327  05E0  3002               	movlw	2	; select bank4/5
 11328  05E1  0087               	movwf	7
 11329  05E2  1901               	btfsc	1,2
 11330  05E3  2DEE               	goto	l10028
 11331                           
 11332                           ;OverLoad_B1.c: 173: {
 11333                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 11334  05E4  086E               	movf	_Load,w
 11335  05E5  0086               	movwf	6
 11336  05E6  3002               	movlw	2	; select bank4/5
 11337  05E7  0087               	movwf	7
 11338  05E8  1501               	bsf	1,2
 11339                           
 11340                           ;OverLoad_B1.c: 175: Load->Safe=0;
 11341  05E9  086E               	movf	_Load,w
 11342  05EA  0086               	movwf	6
 11343  05EB  3002               	movlw	2	; select bank4/5
 11344  05EC  0087               	movwf	7
 11345  05ED  1181               	bcf	1,3
 11346  05EE                     l10028:	
 11347                           
 11348                           ;OverLoad_B1.c: 176: }
 11349                           ;OverLoad_B1.c: 177: if(getTemp_Safe() && getPF_Safe())
 11350  05EE  31A3  23CA  3183   	fcall	_getTemp_Safe
 11351  05F1  3A00               	xorlw	0
 11352  05F2  1903               	skipnz
 11353  05F3  0008               	return
 11354  05F4  31A3  23EF  3183   	fcall	_getPF_Safe
 11355  05F7  3A00               	xorlw	0
 11356  05F8  1903               	skipnz
 11357  05F9  0008               	return
 11358                           
 11359                           ;OverLoad_B1.c: 178: {
 11360                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 11361  05FA  0020               	movlb	0	; select bank0
 11362  05FB  086E               	movf	_Load,w
 11363  05FC  0086               	movwf	6
 11364  05FD  3002               	movlw	2	; select bank4/5
 11365  05FE  0087               	movwf	7
 11366  05FF  1601               	bsf	1,4
 11367                           
 11368                           ;OverLoad_B1.c: 180: }
 11369                           ;OverLoad_B1.c: 181: }
 11370  0600  0008               	return
 11371  0601                     l10034:	
 11372                           
 11373                           ;OverLoad_B1.c: 182: else
 11374                           ;OverLoad_B1.c: 183: {
 11375                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 11376  0601  086E               	movf	_Load,w
 11377  0602  0086               	movwf	6
 11378  0603  3002               	movlw	2	; select bank4/5
 11379  0604  0087               	movwf	7
 11380  0605  1D01               	btfss	1,2
 11381  0606  0008               	return
 11382                           
 11383                           ;OverLoad_B1.c: 185: {
 11384                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 11385  0607  086E               	movf	_Load,w
 11386  0608  0086               	movwf	6
 11387  0609  3002               	movlw	2	; select bank4/5
 11388  060A  0087               	movwf	7
 11389  060B  1101               	bcf	1,2
 11390                           
 11391                           ;OverLoad_B1.c: 187: Load->Safe=1;
 11392  060C  086E               	movf	_Load,w
 11393  060D  0086               	movwf	6
 11394  060E  3002               	movlw	2	; select bank4/5
 11395  060F  0087               	movwf	7
 11396  0610  1581               	bsf	1,3
 11397                           
 11398                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 11399  0611  086E               	movf	_Load,w
 11400  0612  3E3C               	addlw	60
 11401  0613  0086               	movwf	6
 11402  0614  3002               	movlw	2	; select bank4/5
 11403  0615  0087               	movwf	7
 11404  0616  0181               	clrf	1
 11405                           
 11406                           ;OverLoad_B1.c: 189: Load->Count=0;
 11407  0617  086E               	movf	_Load,w
 11408  0618  3E3A               	addlw	58
 11409  0619  0086               	movwf	6
 11410  061A  3002               	movlw	2	; select bank4/5
 11411  061B  0087               	movwf	7
 11412  061C  0181               	clrf	1
 11413                           
 11414                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 11415  061D  086E               	movf	_Load,w
 11416  061E  3E06               	addlw	6
 11417  061F  0086               	movwf	6
 11418  0620  3002               	movlw	2	; select bank4/5
 11419  0621  0087               	movwf	7
 11420  0622  3000               	movlw	0
 11421  0623  3FC0               	movwi [0]fsr1
 11422  0624  3FC1               	movwi [1]fsr1
 11423                           
 11424                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 11425  0625  086E               	movf	_Load,w
 11426  0626  3E3F               	addlw	63
 11427  0627  0086               	movwf	6
 11428  0628  3002               	movlw	2	; select bank4/5
 11429  0629  0087               	movwf	7
 11430  062A  0181               	clrf	1
 11431                           
 11432                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 11433  062B  086E               	movf	_Load,w
 11434  062C  3E46               	addlw	70
 11435  062D  0086               	movwf	6
 11436  062E  3002               	movlw	2	; select bank4/5
 11437  062F  0087               	movwf	7
 11438  0630  1001               	bcf	1,0
 11439                           
 11440                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 11441  0631  086E               	movf	_Load,w
 11442  0632  3E46               	addlw	70
 11443  0633  0086               	movwf	6
 11444  0634  3002               	movlw	2	; select bank4/5
 11445  0635  0087               	movwf	7
 11446  0636  1081               	bcf	1,1
 11447                           
 11448                           ;OverLoad_B1.c: 194: Load->AD=0;
 11449  0637  086E               	movf	_Load,w
 11450  0638  3E2C               	addlw	44
 11451  0639  0086               	movwf	6
 11452  063A  3002               	movlw	2	; select bank4/5
 11453  063B  0087               	movwf	7
 11454  063C  3000               	movlw	0
 11455  063D  3FC0               	movwi [0]fsr1
 11456  063E  3FC1               	movwi [1]fsr1
 11457                           
 11458                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 11459  063F  3198  20A8  3183   	fcall	_setLoad_AH_AL_Restore
 11460                           
 11461                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 11462  0642  0020               	movlb	0	; select bank0
 11463  0643  01A2               	clrf	setDimmerLights_Clear@command
 11464  0644  0AA2               	incf	setDimmerLights_Clear@command,f
 11465  0645  3001               	movlw	1
 11466  0646  31A5  256C  3183   	fcall	_setDimmerLights_Clear
 11467                           
 11468                           ;OverLoad_B1.c: 202: setDimmerLights_Clear(2,1);
 11469  0649  0020               	movlb	0	; select bank0
 11470  064A  01A2               	clrf	setDimmerLights_Clear@command
 11471  064B  0AA2               	incf	setDimmerLights_Clear@command,f
 11472  064C  3002               	movlw	2
 11473  064D  31A5  256C         	fcall	_setDimmerLights_Clear
 11474  064F  0008               	return
 11475  0650                     __end_of_Load_Main:	
 11476                           
 11477                           	psect	text57
 11478  1CE1                     __ptext57:	
 11479 ;; *************** function _setLoad_Exceptions *****************
 11480 ;; Defined at:
 11481 ;;		line 229 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  command         1    wreg     unsigned char 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  command         1   12[BANK0 ] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;		None               void
 11488 ;; Registers used:
 11489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        2 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    8
 11502 ;; This function calls:
 11503 ;;		_DimmerLights_Exceptions
 11504 ;;		_setLED
 11505 ;;		_setRF_Enable
 11506 ;;		_setSw_Enable
 11507 ;; This function is called by:
 11508 ;;		_Load_Main
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           
 11513                           ;psect for function _setLoad_Exceptions
 11514  1CE1                     _setLoad_Exceptions:	
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11518                           ;setLoad_Exceptions@command stored from wreg
 11519  1CE1  0020               	movlb	0	; select bank0
 11520  1CE2  00AC               	movwf	setLoad_Exceptions@command
 11521                           
 11522                           ;OverLoad_B1.c: 232: Load->ERROR=command;
 11523  1CE3  086E               	movf	_Load,w
 11524  1CE4  0086               	movwf	6
 11525  1CE5  3002               	movlw	2	; select bank4/5
 11526  1CE6  0087               	movwf	7
 11527  1CE7  082C               	movf	setLoad_Exceptions@command,w
 11528  1CE8  1281               	bcf	1,5
 11529  1CE9  1D03               	skipz
 11530  1CEA  1681               	bsf	1,5
 11531                           
 11532                           ;OverLoad_B1.c: 233: Load->ErrorStatus=command;
 11533  1CEB  082C               	movf	setLoad_Exceptions@command,w
 11534  1CEC  00AB               	movwf	??_setLoad_Exceptions
 11535  1CED  086E               	movf	_Load,w
 11536  1CEE  3E05               	addlw	5
 11537  1CEF  0086               	movwf	6
 11538  1CF0  3002               	movlw	2	; select bank4/5
 11539  1CF1  0087               	movwf	7
 11540  1CF2  082B               	movf	??_setLoad_Exceptions,w
 11541  1CF3  0081               	movwf	1
 11542                           
 11543                           ;OverLoad_B1.c: 235: setLED(99,command+10);
 11544  1CF4  082C               	movf	setLoad_Exceptions@command,w
 11545  1CF5  3E0A               	addlw	10
 11546  1CF6  00AB               	movwf	??_setLoad_Exceptions
 11547  1CF7  082B               	movf	??_setLoad_Exceptions,w
 11548  1CF8  00A2               	movwf	setLED@command
 11549  1CF9  3063               	movlw	99
 11550  1CFA  3190  2042  319C   	fcall	_setLED
 11551                           
 11552                           ;OverLoad_B1.c: 236: if(command)
 11553  1CFD  0020               	movlb	0	; select bank0
 11554  1CFE  082C               	movf	setLoad_Exceptions@command,w
 11555  1CFF  1903               	btfsc	3,2
 11556  1D00  2D06               	goto	l9452
 11557                           
 11558                           ;OverLoad_B1.c: 237: {
 11559                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11560  1D01  3002               	movlw	2
 11561  1D02  3191  21C6  319C   	fcall	_DimmerLights_Exceptions
 11562  1D05  0020               	movlb	0	; select bank0
 11563  1D06                     l9452:	
 11564                           
 11565                           ;OverLoad_B1.c: 239: }
 11566                           ;OverLoad_B1.c: 240: Load->Safe=(~command) & 0x01;
 11567  1D06  0020               	movlb	0	; select bank0
 11568  1D07  092C               	comf	setLoad_Exceptions@command,w
 11569  1D08  3901               	andlw	1
 11570  1D09  00AB               	movwf	??_setLoad_Exceptions
 11571  1D0A  086E               	movf	_Load,w
 11572  1D0B  0086               	movwf	6
 11573  1D0C  3002               	movlw	2	; select bank4/5
 11574  1D0D  0087               	movwf	7
 11575  1D0E  0DAB               	rlf	??_setLoad_Exceptions,f
 11576  1D0F  0DAB               	rlf	??_setLoad_Exceptions,f
 11577  1D10  0DAB               	rlf	??_setLoad_Exceptions,f
 11578  1D11  0801               	movf	1,w
 11579  1D12  062B               	xorwf	??_setLoad_Exceptions,w
 11580  1D13  39F7               	andlw	-9
 11581  1D14  062B               	xorwf	??_setLoad_Exceptions,w
 11582  1D15  0081               	movwf	1
 11583                           
 11584                           ;OverLoad_B1.c: 242: setSw_Enable((~command) & 0x01);
 11585  1D16  092C               	comf	setLoad_Exceptions@command,w
 11586  1D17  3901               	andlw	1
 11587  1D18  31A7  2768  319C   	fcall	_setSw_Enable
 11588                           
 11589                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 11590  1D1B  0020               	movlb	0	; select bank0
 11591  1D1C  092C               	comf	setLoad_Exceptions@command,w
 11592  1D1D  3901               	andlw	1
 11593  1D1E  00AB               	movwf	??_setLoad_Exceptions
 11594  1D1F  082B               	movf	??_setLoad_Exceptions,w
 11595  1D20  00A4               	movwf	setRF_Enable@command
 11596  1D21  3001               	movlw	1
 11597  1D22  319B  2337         	fcall	_setRF_Enable
 11598  1D24  0008               	return
 11599  1D25                     __end_of_setLoad_Exceptions:	
 11600                           
 11601                           	psect	text58
 11602  2768                     __ptext58:	
 11603 ;; *************** function _setSw_Enable *****************
 11604 ;; Defined at:
 11605 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  command         1    wreg     unsigned char 
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;  command         1    2[BANK0 ] unsigned char 
 11610 ;; Return value:  Size  Location     Type
 11611 ;;		None               void
 11612 ;; Registers used:
 11613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;Total ram usage:        1 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    5
 11626 ;; This function calls:
 11627 ;;		_SwPointSelect
 11628 ;; This function is called by:
 11629 ;;		_MainT
 11630 ;;		_setLoad_Exceptions
 11631 ;;		_setOverTemp_Exceptions
 11632 ;;		_setPowerFault_Exceptions
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           
 11637                           ;psect for function _setSw_Enable
 11638  2768                     _setSw_Enable:	
 11639                           
 11640                           ;incstack = 0
 11641                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11642                           ;setSw_Enable@command stored from wreg
 11643  2768  0020               	movlb	0	; select bank0
 11644  2769  00A2               	movwf	setSw_Enable@command
 11645                           
 11646                           ;Switch_B1.c: 90: SwPointSelect(1);
 11647  276A  3001               	movlw	1
 11648  276B  31A5  25F2  31A7   	fcall	_SwPointSelect
 11649                           
 11650                           ;Switch_B1.c: 91: Sw->Enable=command;
 11651  276E  0020               	movlb	0	; select bank0
 11652  276F  086D               	movf	_Sw,w
 11653  2770  0086               	movwf	6
 11654  2771  3001               	movlw	1	; select bank2/3
 11655  2772  0087               	movwf	7
 11656  2773  0822               	movf	setSw_Enable@command,w
 11657  2774  1001               	bcf	1,0
 11658  2775  1D03               	skipz
 11659  2776  1401               	bsf	1,0
 11660                           
 11661                           ;Switch_B1.c: 95: SwPointSelect(2);
 11662  2777  3002               	movlw	2
 11663  2778  31A5  25F2         	fcall	_SwPointSelect
 11664                           
 11665                           ;Switch_B1.c: 96: Sw->Enable=command;
 11666  277A  0020               	movlb	0	; select bank0
 11667  277B  086D               	movf	_Sw,w
 11668  277C  0086               	movwf	6
 11669  277D  3001               	movlw	1	; select bank2/3
 11670  277E  0087               	movwf	7
 11671  277F  0822               	movf	setSw_Enable@command,w
 11672  2780  1001               	bcf	1,0
 11673  2781  1D03               	skipz
 11674  2782  1401               	bsf	1,0
 11675  2783  0008               	return
 11676  2784                     __end_of_setSw_Enable:	
 11677                           
 11678                           	psect	text59
 11679  1B37                     __ptext59:	
 11680 ;; *************** function _setRF_Enable *****************
 11681 ;; Defined at:
 11682 ;;		line 177 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;  rf              1    wreg     unsigned char 
 11685 ;;  command         1    4[BANK0 ] unsigned char 
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  rf              1    5[BANK0 ] unsigned char 
 11688 ;; Return value:  Size  Location     Type
 11689 ;;		None               void
 11690 ;; Registers used:
 11691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11692 ;; Tracked objects:
 11693 ;;		On entry : 0/0
 11694 ;;		On exit  : 0/0
 11695 ;;		Unchanged: 0/0
 11696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11697 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;Total ram usage:        2 bytes
 11702 ;; Hardware stack levels used:    1
 11703 ;; Hardware stack levels required when called:    6
 11704 ;; This function calls:
 11705 ;;		_CC2500_WriteCommand
 11706 ;;		_RfPointSelect
 11707 ;;		_setINT_GO
 11708 ;; This function is called by:
 11709 ;;		_MainT
 11710 ;;		_setLoad_Exceptions
 11711 ;;		_setOverTemp_Exceptions
 11712 ;;		_setPowerFault_Exceptions
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           
 11717                           ;psect for function _setRF_Enable
 11718  1B37                     _setRF_Enable:	
 11719                           
 11720                           ;incstack = 0
 11721                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11722                           ;setRF_Enable@rf stored from wreg
 11723  1B37  0020               	movlb	0	; select bank0
 11724  1B38  00A5               	movwf	setRF_Enable@rf
 11725                           
 11726                           ;RF_Control_B1.c: 179: RfPointSelect(rf);
 11727  1B39  0825               	movf	setRF_Enable@rf,w
 11728  1B3A  31A4  2439  319B   	fcall	_RfPointSelect
 11729                           
 11730                           ;RF_Control_B1.c: 180: RF->Enable=command;
 11731  1B3D  087C               	movf	_RF,w
 11732  1B3E  0086               	movwf	6
 11733  1B3F  0187               	clrf	7
 11734  1B40  0020               	movlb	0	; select bank0
 11735  1B41  0824               	movf	setRF_Enable@command,w
 11736  1B42  1001               	bcf	1,0
 11737  1B43  1D03               	skipz
 11738  1B44  1401               	bsf	1,0
 11739                           
 11740                           ;RF_Control_B1.c: 181: if(!command)
 11741  1B45  08A4               	movf	setRF_Enable@command,f
 11742  1B46  1D03               	skipz
 11743  1B47  0008               	return
 11744                           
 11745                           ;RF_Control_B1.c: 182: {
 11746                           ;RF_Control_B1.c: 183: RF->Learn=0;
 11747  1B48  087C               	movf	_RF,w
 11748  1B49  0086               	movwf	6
 11749  1B4A  0187               	clrf	7
 11750  1B4B  1301               	bcf	1,6
 11751                           
 11752                           ;RF_Control_B1.c: 184: Transceive_GO=0;
 11753  1B4C  1270               	bcf	_Transceive_GO/(0+8),_Transceive_GO& (0+7)
 11754                           
 11755                           ;RF_Control_B1.c: 185: CC2500_WriteCommand(0x36);
 11756  1B4D  3036               	movlw	54
 11757  1B4E  31A5  253C  319B   	fcall	_CC2500_WriteCommand
 11758                           
 11759                           ;RF_Control_B1.c: 186: CC2500_WriteCommand(0x3B);
 11760  1B51  303B               	movlw	59
 11761  1B52  31A5  253C  319B   	fcall	_CC2500_WriteCommand
 11762                           
 11763                           ;RF_Control_B1.c: 188: RF->RxStatus=0;
 11764  1B55  087C               	movf	_RF,w
 11765  1B56  0086               	movwf	6
 11766  1B57  0187               	clrf	7
 11767  1B58  1181               	bcf	1,3
 11768                           
 11769                           ;RF_Control_B1.c: 189: RF->ReceiveGO=0;
 11770  1B59  087C               	movf	_RF,w
 11771  1B5A  0086               	movwf	6
 11772  1B5B  0187               	clrf	7
 11773  1B5C  1081               	bcf	1,1
 11774                           
 11775                           ;RF_Control_B1.c: 190: RF->DebounceTime=0;
 11776  1B5D  0A7C               	incf	_RF,w
 11777  1B5E  0086               	movwf	6
 11778  1B5F  0187               	clrf	7
 11779  1B60  0181               	clrf	1
 11780                           
 11781                           ;RF_Control_B1.c: 191: RF->Debounce=0;
 11782  1B61  087C               	movf	_RF,w
 11783  1B62  0086               	movwf	6
 11784  1B63  0187               	clrf	7
 11785  1B64  1281               	bcf	1,5
 11786                           
 11787                           ;RF_Control_B1.c: 193: CC2500_WriteCommand(0x3A);
 11788  1B65  303A               	movlw	58
 11789  1B66  31A5  253C  319B   	fcall	_CC2500_WriteCommand
 11790                           
 11791                           ;RF_Control_B1.c: 194: setINT_GO(0);
 11792  1B69  3000               	movlw	0
 11793  1B6A  31A4  2410         	fcall	_setINT_GO
 11794  1B6C  0008               	return
 11795  1B6D                     __end_of_setRF_Enable:	
 11796                           
 11797                           	psect	text60
 11798  2410                     __ptext60:	
 11799 ;; *************** function _setINT_GO *****************
 11800 ;; Defined at:
 11801 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;  command         1    wreg     unsigned char 
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;  command         1    0[BANK0 ] unsigned char 
 11806 ;; Return value:  Size  Location     Type
 11807 ;;		None               void
 11808 ;; Registers used:
 11809 ;;		wreg
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;Total ram usage:        1 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    4
 11822 ;; This function calls:
 11823 ;;		Nothing
 11824 ;; This function is called by:
 11825 ;;		_setRF_Main
 11826 ;;		_setRF_Enable
 11827 ;;		_RF_RxDisable
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _setINT_GO
 11833  2410                     _setINT_GO:	
 11834                           
 11835                           ;incstack = 0
 11836                           ; Regs used in _setINT_GO: [wreg]
 11837                           ;setINT_GO@command stored from wreg
 11838  2410  0020               	movlb	0	; select bank0
 11839  2411  00A0               	movwf	setINT_GO@command
 11840                           
 11841                           ;MCU_16f1518_B1.c: 237: INTF=0;
 11842  2412  108B               	bcf	11,1	;volatile
 11843                           
 11844                           ;MCU_16f1518_B1.c: 238: INTE=command;
 11845  2413  1C20               	btfss	setINT_GO@command,0
 11846  2414  2C17               	goto	u8530
 11847  2415  160B               	bsf	11,4	;volatile
 11848  2416  0008               	return
 11849  2417                     u8530:	
 11850  2417  120B               	bcf	11,4	;volatile
 11851  2418  0008               	return
 11852  2419                     __end_of_setINT_GO:	
 11853                           
 11854                           	psect	text61
 11855  11C6                     __ptext61:	
 11856 ;; *************** function _DimmerLights_Exceptions *****************
 11857 ;; Defined at:
 11858 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;  status          1    wreg     unsigned char 
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;  status          1   10[BANK0 ] unsigned char 
 11863 ;; Return value:  Size  Location     Type
 11864 ;;		None               void
 11865 ;; Registers used:
 11866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11867 ;; Tracked objects:
 11868 ;;		On entry : 0/0
 11869 ;;		On exit  : 0/0
 11870 ;;		Unchanged: 0/0
 11871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;Total ram usage:        1 bytes
 11877 ;; Hardware stack levels used:    1
 11878 ;; Hardware stack levels required when called:    7
 11879 ;; This function calls:
 11880 ;;		_getDimmerLights_StatusFlag
 11881 ;;		_setBuz
 11882 ;;		_setDimmerLights_ERROR
 11883 ;;		_setDimmerLights_TriggerERROR
 11884 ;; This function is called by:
 11885 ;;		_setLoad_Exceptions
 11886 ;;		_setOverTemp_Exceptions
 11887 ;;		_setPowerFault_Exceptions
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           
 11892                           ;psect for function _DimmerLights_Exceptions
 11893  11C6                     _DimmerLights_Exceptions:	
 11894                           
 11895                           ;incstack = 0
 11896                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11897                           ;DimmerLights_Exceptions@status stored from wreg
 11898  11C6  0020               	movlb	0	; select bank0
 11899  11C7  00AA               	movwf	DimmerLights_Exceptions@status
 11900                           
 11901                           ;Dimmer_B1.c: 268: if(status == 1)
 11902  11C8  082A               	movf	DimmerLights_Exceptions@status,w
 11903  11C9  3A01               	xorlw	1
 11904  11CA  1D03               	skipz
 11905  11CB  29DC               	goto	l8850
 11906                           
 11907                           ;Dimmer_B1.c: 269: {
 11908                           ;Dimmer_B1.c: 270: if(getDimmerLights_StatusFlag())
 11909  11CC  31A5  25CD  3191   	fcall	_getDimmerLights_StatusFlag
 11910  11CF  3A00               	xorlw	0
 11911  11D0  1903               	skipnz
 11912  11D1  29F4               	goto	l8856
 11913                           
 11914                           ;Dimmer_B1.c: 271: {
 11915                           ;Dimmer_B1.c: 272: setBuz(10,300);
 11916  11D2  302C               	movlw	44
 11917  11D3  0020               	movlb	0	; select bank0
 11918  11D4  00A6               	movwf	setBuz@time
 11919  11D5  3001               	movlw	1
 11920  11D6  00A7               	movwf	setBuz@time+1
 11921  11D7  300A               	movlw	10
 11922  11D8  3193  23E5  3191   	fcall	_setBuz
 11923  11DB  29F4               	goto	l8856
 11924  11DC                     l8850:	
 11925                           ;Dimmer_B1.c: 284: }
 11926                           
 11927                           ;Dimmer_B1.c: 279: setDimmerLights_ERROR(2);
 11928                           
 11929                           ;Dimmer_B1.c: 273: }
 11930                           ;Dimmer_B1.c: 276: setDimmerLights_ERROR(1);
 11931                           
 11932                           
 11933                           ;Dimmer_B1.c: 285: else if(status == 2)
 11934  11DC  0020               	movlb	0	; select bank0
 11935  11DD  082A               	movf	DimmerLights_Exceptions@status,w
 11936  11DE  3A02               	xorlw	2
 11937  11DF  1D03               	skipz
 11938  11E0  29EF               	goto	l8854
 11939                           
 11940                           ;Dimmer_B1.c: 286: {
 11941                           ;Dimmer_B1.c: 287: setBuz(5,300);
 11942  11E1  302C               	movlw	44
 11943  11E2  00A6               	movwf	setBuz@time
 11944  11E3  3001               	movlw	1
 11945  11E4  00A7               	movwf	setBuz@time+1
 11946  11E5  3005               	movlw	5
 11947  11E6  3193  23E5  3191   	fcall	_setBuz
 11948                           
 11949                           ;Dimmer_B1.c: 288: setDimmerLights_ERROR(Dimmer->Load);
 11950  11E9  0021               	movlb	1	; select bank1
 11951  11EA  0A39               	incf	_Dimmer^(0+128),w
 11952  11EB  0086               	movwf	6
 11953  11EC  0187               	clrf	7
 11954  11ED  0801               	movf	1,w
 11955  11EE  29F9               	goto	L11
 11956  11EF                     l8854:	
 11957                           ;Dimmer_B1.c: 289: }
 11958                           
 11959                           
 11960                           ;Dimmer_B1.c: 290: else if(status == 3)
 11961  11EF  0020               	movlb	0	; select bank0
 11962  11F0  082A               	movf	DimmerLights_Exceptions@status,w
 11963  11F1  3A03               	xorlw	3
 11964  11F2  1D03               	skipz
 11965  11F3  29FC               	goto	l929
 11966  11F4                     l8856:	
 11967                           
 11968                           ;Dimmer_B1.c: 291: {
 11969                           ;Dimmer_B1.c: 293: setDimmerLights_ERROR(1);
 11970  11F4  3001               	movlw	1
 11971  11F5  319E  2697  3191   	fcall	_setDimmerLights_ERROR
 11972                           
 11973                           ;Dimmer_B1.c: 296: setDimmerLights_ERROR(2);
 11974  11F8  3002               	movlw	2
 11975  11F9                     L11:	
 11976  11F9  319E  2697  3191   	fcall	_setDimmerLights_ERROR
 11977  11FC                     l929:	
 11978                           
 11979                           ;Dimmer_B1.c: 301: }
 11980                           ;Dimmer_B1.c: 304: setDimmerLights_TriggerERROR(1,0);
 11981  11FC  0020               	movlb	0	; select bank0
 11982  11FD  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11983  11FE  3001               	movlw	1
 11984  11FF  3199  2188  3191   	fcall	_setDimmerLights_TriggerERROR
 11985                           
 11986                           ;Dimmer_B1.c: 307: setDimmerLights_TriggerERROR(2,0);
 11987  1202  0020               	movlb	0	; select bank0
 11988  1203  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11989  1204  3002               	movlw	2
 11990  1205  3199  2188  3191   	fcall	_setDimmerLights_TriggerERROR
 11991                           
 11992                           ;Dimmer_B1.c: 313: if(TMain->SelfTest == 0)
 11993  1208  0021               	movlb	1	; select bank1
 11994  1209  0869               	movf	_TMain^(0+128),w
 11995  120A  3E03               	addlw	3
 11996  120B  0086               	movwf	6
 11997  120C  3001               	movlw	1	; select bank2/3
 11998  120D  0087               	movwf	7
 11999  120E  1801               	btfsc	1,0
 12000  120F  0008               	return
 12001                           
 12002                           ;Dimmer_B1.c: 314: {
 12003                           ;Dimmer_B1.c: 315: TMain->i=0;
 12004  1210  0869               	movf	_TMain^(0+128),w
 12005  1211  3E0E               	addlw	14
 12006  1212  0086               	movwf	6
 12007  1213  3001               	movlw	1	; select bank2/3
 12008  1214  0087               	movwf	7
 12009  1215  1001               	bcf	1,0
 12010                           
 12011                           ;Dimmer_B1.c: 316: TMain->j=0;
 12012  1216  0869               	movf	_TMain^(0+128),w
 12013  1217  3E0E               	addlw	14
 12014  1218  0086               	movwf	6
 12015  1219  3001               	movlw	1	; select bank2/3
 12016  121A  0087               	movwf	7
 12017  121B  1081               	bcf	1,1
 12018                           
 12019                           ;Dimmer_B1.c: 317: TMain->k=1;
 12020  121C  0869               	movf	_TMain^(0+128),w
 12021  121D  3E0E               	addlw	14
 12022  121E  0086               	movwf	6
 12023  121F  3001               	movlw	1	; select bank2/3
 12024  1220  0087               	movwf	7
 12025  1221  1501               	bsf	1,2
 12026                           
 12027                           ;Dimmer_B1.c: 318: TMain->Count2=0;
 12028  1222  0869               	movf	_TMain^(0+128),w
 12029  1223  3E08               	addlw	8
 12030  1224  0086               	movwf	6
 12031  1225  3001               	movlw	1	; select bank2/3
 12032  1226  0087               	movwf	7
 12033  1227  3000               	movlw	0
 12034  1228  3FC0               	movwi [0]fsr1
 12035  1229  3FC1               	movwi [1]fsr1
 12036  122A  0008               	return
 12037  122B                     __end_of_DimmerLights_Exceptions:	
 12038                           
 12039                           	psect	text62
 12040  1988                     __ptext62:	
 12041 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12042 ;; Defined at:
 12043 ;;		line 340 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  lights          1    wreg     unsigned char 
 12046 ;;  command         1    2[BANK0 ] unsigned char 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  lights          1    3[BANK0 ] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;		None               void
 12051 ;; Registers used:
 12052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12058 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;Total ram usage:        2 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    5
 12065 ;; This function calls:
 12066 ;;		_DimmerLightsPointSelect
 12067 ;; This function is called by:
 12068 ;;		_DimmerLights_Exceptions
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function _setDimmerLights_TriggerERROR
 12074  1988                     _setDimmerLights_TriggerERROR:	
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12078                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12079  1988  0020               	movlb	0	; select bank0
 12080  1989  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12081                           
 12082                           ;Dimmer_B1.c: 342: DimmerLightsPointSelect(lights);
 12083  198A  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12084  198B  31A5  25DF         	fcall	_DimmerLightsPointSelect
 12085                           
 12086                           ;Dimmer_B1.c: 343: DimmerLights->Trigger=command;
 12087  198D  0020               	movlb	0	; select bank0
 12088  198E  086C               	movf	_DimmerLights,w
 12089  198F  3E09               	addlw	9
 12090  1990  0086               	movwf	6
 12091  1991  3001               	movlw	1	; select bank2/3
 12092  1992  0087               	movwf	7
 12093  1993  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12094  1994  1081               	bcf	1,1
 12095  1995  1D03               	skipz
 12096  1996  1481               	bsf	1,1
 12097                           
 12098                           ;Dimmer_B1.c: 344: DimmerLights->Switch=command;
 12099  1997  086C               	movf	_DimmerLights,w
 12100  1998  3E09               	addlw	9
 12101  1999  0086               	movwf	6
 12102  199A  3001               	movlw	1	; select bank2/3
 12103  199B  0087               	movwf	7
 12104  199C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12105  199D  1001               	bcf	1,0
 12106  199E  1D03               	skipz
 12107  199F  1401               	bsf	1,0
 12108                           
 12109                           ;Dimmer_B1.c: 345: DimmerLights->TriggerAdj=command;
 12110  19A0  086C               	movf	_DimmerLights,w
 12111  19A1  3E09               	addlw	9
 12112  19A2  0086               	movwf	6
 12113  19A3  3001               	movlw	1	; select bank2/3
 12114  19A4  0087               	movwf	7
 12115  19A5  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12116  19A6  1181               	bcf	1,3
 12117  19A7  1D03               	skipz
 12118  19A8  1581               	bsf	1,3
 12119                           
 12120                           ;Dimmer_B1.c: 346: DimmerLights->AdjGo=command;
 12121  19A9  086C               	movf	_DimmerLights,w
 12122  19AA  3E09               	addlw	9
 12123  19AB  0086               	movwf	6
 12124  19AC  3001               	movlw	1	; select bank2/3
 12125  19AD  0087               	movwf	7
 12126  19AE  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12127  19AF  1101               	bcf	1,2
 12128  19B0  1D03               	skipz
 12129  19B1  1501               	bsf	1,2
 12130  19B2  0008               	return
 12131  19B3                     __end_of_setDimmerLights_TriggerERROR:	
 12132                           
 12133                           	psect	text63
 12134  1E97                     __ptext63:	
 12135 ;; *************** function _setDimmerLights_ERROR *****************
 12136 ;; Defined at:
 12137 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;  lights          1    wreg     unsigned char 
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;  lights          1    5[BANK0 ] unsigned char 
 12142 ;; Return value:  Size  Location     Type
 12143 ;;		None               void
 12144 ;; Registers used:
 12145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;Total ram usage:        2 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; Hardware stack levels required when called:    6
 12158 ;; This function calls:
 12159 ;;		_DimmerLightsPointSelect
 12160 ;;		_setLED
 12161 ;;		_setLoad_StatusOff
 12162 ;;		_setRFSW_Status
 12163 ;;		_setSw_Status
 12164 ;; This function is called by:
 12165 ;;		_DimmerLights_Exceptions
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           
 12170                           ;psect for function _setDimmerLights_ERROR
 12171  1E97                     _setDimmerLights_ERROR:	
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12175                           ;setDimmerLights_ERROR@lights stored from wreg
 12176  1E97  0020               	movlb	0	; select bank0
 12177  1E98  00A5               	movwf	setDimmerLights_ERROR@lights
 12178                           
 12179                           ;Dimmer_B1.c: 324: DimmerLightsPointSelect(lights);
 12180  1E99  0825               	movf	setDimmerLights_ERROR@lights,w
 12181  1E9A  31A5  25DF  319E   	fcall	_DimmerLightsPointSelect
 12182                           
 12183                           ;Dimmer_B1.c: 325: if(DimmerLights->Status)
 12184  1E9D  0020               	movlb	0	; select bank0
 12185  1E9E  086C               	movf	_DimmerLights,w
 12186  1E9F  0086               	movwf	6
 12187  1EA0  3001               	movlw	1	; select bank2/3
 12188  1EA1  0087               	movwf	7
 12189  1EA2  1E81               	btfss	1,5
 12190  1EA3  0008               	return
 12191                           
 12192                           ;Dimmer_B1.c: 326: {
 12193                           ;Dimmer_B1.c: 327: DimmerLights->Signal=0;
 12194  1EA4  086C               	movf	_DimmerLights,w
 12195  1EA5  0086               	movwf	6
 12196  1EA6  3001               	movlw	1	; select bank2/3
 12197  1EA7  0087               	movwf	7
 12198  1EA8  1081               	bcf	1,1
 12199                           
 12200                           ;Dimmer_B1.c: 328: DimmerLights->AdjFlag=0;
 12201  1EA9  086C               	movf	_DimmerLights,w
 12202  1EAA  0086               	movwf	6
 12203  1EAB  3001               	movlw	1	; select bank2/3
 12204  1EAC  0087               	movwf	7
 12205  1EAD  1181               	bcf	1,3
 12206                           
 12207                           ;Dimmer_B1.c: 329: DimmerLights->AdjStatus=0;
 12208  1EAE  086C               	movf	_DimmerLights,w
 12209  1EAF  0086               	movwf	6
 12210  1EB0  3001               	movlw	1	; select bank2/3
 12211  1EB1  0087               	movwf	7
 12212  1EB2  1201               	bcf	1,4
 12213                           
 12214                           ;Dimmer_B1.c: 330: DimmerLights->StatusFlag=0;
 12215  1EB3  086C               	movf	_DimmerLights,w
 12216  1EB4  0086               	movwf	6
 12217  1EB5  3001               	movlw	1	; select bank2/3
 12218  1EB6  0087               	movwf	7
 12219  1EB7  1301               	bcf	1,6
 12220                           
 12221                           ;Dimmer_B1.c: 331: DimmerLights->DimmingTimeValue=3;
 12222  1EB8  3003               	movlw	3
 12223  1EB9  00A4               	movwf	??_setDimmerLights_ERROR
 12224  1EBA  086C               	movf	_DimmerLights,w
 12225  1EBB  3E02               	addlw	2
 12226  1EBC  0086               	movwf	6
 12227  1EBD  3001               	movlw	1	; select bank2/3
 12228  1EBE  0087               	movwf	7
 12229  1EBF  0824               	movf	??_setDimmerLights_ERROR,w
 12230  1EC0  0081               	movwf	1
 12231                           
 12232                           ;Dimmer_B1.c: 332: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12233  1EC1  086C               	movf	_DimmerLights,w
 12234  1EC2  3E06               	addlw	6
 12235  1EC3  0086               	movwf	6
 12236  1EC4  3001               	movlw	1	; select bank2/3
 12237  1EC5  0087               	movwf	7
 12238  1EC6  0801               	movf	1,w
 12239  1EC7  00A4               	movwf	??_setDimmerLights_ERROR
 12240  1EC8  086C               	movf	_DimmerLights,w
 12241  1EC9  3E04               	addlw	4
 12242  1ECA  0086               	movwf	6
 12243  1ECB  3001               	movlw	1	; select bank2/3
 12244  1ECC  0087               	movwf	7
 12245  1ECD  0824               	movf	??_setDimmerLights_ERROR,w
 12246  1ECE  0081               	movwf	1
 12247                           
 12248                           ;Dimmer_B1.c: 333: Dimmer->Detect=1;
 12249  1ECF  0021               	movlb	1	; select bank1
 12250  1ED0  0839               	movf	_Dimmer^(0+128),w
 12251  1ED1  0086               	movwf	6
 12252  1ED2  0187               	clrf	7
 12253  1ED3  1401               	bsf	1,0
 12254                           
 12255                           ;Dimmer_B1.c: 334: setLoad_StatusOff(lights,1);
 12256  1ED4  0020               	movlb	0	; select bank0
 12257  1ED5  01A0               	clrf	setLoad_StatusOff@command
 12258  1ED6  0AA0               	incf	setLoad_StatusOff@command,f
 12259  1ED7  0825               	movf	setDimmerLights_ERROR@lights,w
 12260  1ED8  319A  226E  319E   	fcall	_setLoad_StatusOff
 12261                           
 12262                           ;Dimmer_B1.c: 335: setLED(lights,1);
 12263  1EDB  0020               	movlb	0	; select bank0
 12264  1EDC  01A2               	clrf	setLED@command
 12265  1EDD  0AA2               	incf	setLED@command,f
 12266  1EDE  0825               	movf	setDimmerLights_ERROR@lights,w
 12267  1EDF  3190  2042  319E   	fcall	_setLED
 12268                           
 12269                           ;Dimmer_B1.c: 336: setSw_Status(lights,0);
 12270  1EE2  0020               	movlb	0	; select bank0
 12271  1EE3  01A2               	clrf	setSw_Status@command
 12272  1EE4  0825               	movf	setDimmerLights_ERROR@lights,w
 12273  1EE5  31A5  252D  319E   	fcall	_setSw_Status
 12274                           
 12275                           ;Dimmer_B1.c: 337: setRFSW_Status(lights,0);
 12276  1EE8  0020               	movlb	0	; select bank0
 12277  1EE9  01A2               	clrf	setRFSW_Status@command
 12278  1EEA  0825               	movf	setDimmerLights_ERROR@lights,w
 12279  1EEB  31A5  251E         	fcall	_setRFSW_Status
 12280  1EED  0008               	return
 12281  1EEE                     __end_of_setDimmerLights_ERROR:	
 12282                           
 12283                           	psect	text64
 12284  256C                     __ptext64:	
 12285 ;; *************** function _setDimmerLights_Clear *****************
 12286 ;; Defined at:
 12287 ;;		line 467 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  lights          1    wreg     unsigned char 
 12290 ;;  command         1    2[BANK0 ] unsigned char 
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  lights          1    3[BANK0 ] unsigned char 
 12293 ;; Return value:  Size  Location     Type
 12294 ;;		None               void
 12295 ;; Registers used:
 12296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12297 ;; Tracked objects:
 12298 ;;		On entry : 0/0
 12299 ;;		On exit  : 0/0
 12300 ;;		Unchanged: 0/0
 12301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;Total ram usage:        2 bytes
 12307 ;; Hardware stack levels used:    1
 12308 ;; Hardware stack levels required when called:    5
 12309 ;; This function calls:
 12310 ;;		_DimmerLightsPointSelect
 12311 ;; This function is called by:
 12312 ;;		_Load_Main
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           
 12317                           ;psect for function _setDimmerLights_Clear
 12318  256C                     _setDimmerLights_Clear:	
 12319                           
 12320                           ;incstack = 0
 12321                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12322                           ;setDimmerLights_Clear@lights stored from wreg
 12323  256C  0020               	movlb	0	; select bank0
 12324  256D  00A3               	movwf	setDimmerLights_Clear@lights
 12325                           
 12326                           ;Dimmer_B1.c: 469: DimmerLightsPointSelect(lights);
 12327  256E  0823               	movf	setDimmerLights_Clear@lights,w
 12328  256F  31A5  25DF         	fcall	_DimmerLightsPointSelect
 12329                           
 12330                           ;Dimmer_B1.c: 470: DimmerLights->Clear=command;
 12331  2571  0020               	movlb	0	; select bank0
 12332  2572  086C               	movf	_DimmerLights,w
 12333  2573  3E0C               	addlw	12
 12334  2574  0086               	movwf	6
 12335  2575  3001               	movlw	1	; select bank2/3
 12336  2576  0087               	movwf	7
 12337  2577  0822               	movf	setDimmerLights_Clear@command,w
 12338  2578  1001               	bcf	1,0
 12339  2579  1D03               	skipz
 12340  257A  1401               	bsf	1,0
 12341  257B  0008               	return
 12342  257C                     __end_of_setDimmerLights_Clear:	
 12343                           
 12344                           	psect	text65
 12345  23CA                     __ptext65:	
 12346 ;; *************** function _getTemp_Safe *****************
 12347 ;; Defined at:
 12348 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;		None
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;		None
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      unsigned char 
 12355 ;; Registers used:
 12356 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;Total ram usage:        0 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    4
 12369 ;; This function calls:
 12370 ;;		Nothing
 12371 ;; This function is called by:
 12372 ;;		_Load_Main
 12373 ;;		_setPowerFault_Main
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           
 12378                           ;psect for function _getTemp_Safe
 12379  23CA                     _getTemp_Safe:	
 12380                           
 12381                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 12382                           
 12383                           ;incstack = 0
 12384                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12385  23CA  087D               	movf	_Temp,w
 12386  23CB  0086               	movwf	6
 12387  23CC  3001               	movlw	1	; select bank2/3
 12388  23CD  0087               	movwf	7
 12389  23CE  0E01               	swapf	1,w
 12390  23CF  3901               	andlw	1
 12391  23D0  0008               	return
 12392  23D1                     __end_of_getTemp_Safe:	
 12393                           
 12394                           	psect	text66
 12395  23EF                     __ptext66:	
 12396 ;; *************** function _getPF_Safe *****************
 12397 ;; Defined at:
 12398 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;		None
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;		None
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  1    wreg      unsigned char 
 12405 ;; Registers used:
 12406 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;Total ram usage:        0 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; Hardware stack levels required when called:    4
 12419 ;; This function calls:
 12420 ;;		Nothing
 12421 ;; This function is called by:
 12422 ;;		_Load_Main
 12423 ;;		_setTemp_Main
 12424 ;; This function uses a non-reentrant model
 12425 ;;
 12426                           
 12427                           
 12428                           ;psect for function _getPF_Safe
 12429  23EF                     _getPF_Safe:	
 12430                           
 12431                           ;PowerFault_B1.c: 42: return PF->Safe;
 12432                           
 12433                           ;incstack = 0
 12434                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12435  23EF  087B               	movf	_PF,w
 12436  23F0  0086               	movwf	6
 12437  23F1  3001               	movlw	1	; select bank2/3
 12438  23F2  0087               	movwf	7
 12439  23F3  0C01               	rrf	1,w
 12440  23F4  0C89               	rrf	9,f
 12441  23F5  3901               	andlw	1
 12442  23F6  0008               	return
 12443  23F7                     __end_of_getPF_Safe:	
 12444                           
 12445                           	psect	text67
 12446  1B6D                     __ptext67:	
 12447 ;; *************** function ___lwdiv *****************
 12448 ;; Defined at:
 12449 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  divisor         2    0[BANK0 ] unsigned int 
 12452 ;;  dividend        2    2[BANK0 ] unsigned int 
 12453 ;; Auto vars:     Size  Location     Type
 12454 ;;  quotient        2    5[BANK0 ] unsigned int 
 12455 ;;  counter         1    7[BANK0 ] unsigned char 
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  2    0[BANK0 ] unsigned int 
 12458 ;; Registers used:
 12459 ;;		wreg, status,2, status,0
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;Total ram usage:        8 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    4
 12472 ;; This function calls:
 12473 ;;		Nothing
 12474 ;; This function is called by:
 12475 ;;		_Load_Main
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           
 12480                           ;psect for function ___lwdiv
 12481  1B6D                     ___lwdiv:	
 12482                           
 12483                           ;incstack = 0
 12484                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12485  1B6D  0020               	movlb	0	; select bank0
 12486  1B6E  01A5               	clrf	___lwdiv@quotient
 12487  1B6F  01A6               	clrf	___lwdiv@quotient+1
 12488  1B70  0821               	movf	___lwdiv@divisor+1,w
 12489  1B71  0420               	iorwf	___lwdiv@divisor,w
 12490  1B72  1903               	skipnz
 12491  1B73  2B9D               	goto	l7914
 12492  1B74  01A7               	clrf	___lwdiv@counter
 12493  1B75  0AA7               	incf	___lwdiv@counter,f
 12494  1B76                     l7902:	
 12495  1B76  1BA1               	btfsc	___lwdiv@divisor+1,7
 12496  1B77  2B82               	goto	l7904
 12497  1B78  3001               	movlw	1
 12498  1B79                     u6995:	
 12499  1B79  35A0               	lslf	___lwdiv@divisor,f
 12500  1B7A  0DA1               	rlf	___lwdiv@divisor+1,f
 12501  1B7B  0B89               	decfsz	9,f
 12502  1B7C  2B79               	goto	u6995
 12503  1B7D  3001               	movlw	1
 12504  1B7E  00A4               	movwf	??___lwdiv
 12505  1B7F  0824               	movf	??___lwdiv,w
 12506  1B80  07A7               	addwf	___lwdiv@counter,f
 12507  1B81  2B76               	goto	l7902
 12508  1B82                     l7904:	
 12509  1B82  3001               	movlw	1
 12510  1B83                     u7015:	
 12511  1B83  35A5               	lslf	___lwdiv@quotient,f
 12512  1B84  0DA6               	rlf	___lwdiv@quotient+1,f
 12513  1B85  0B89               	decfsz	9,f
 12514  1B86  2B83               	goto	u7015
 12515  1B87  0821               	movf	___lwdiv@divisor+1,w
 12516  1B88  0223               	subwf	___lwdiv@dividend+1,w
 12517  1B89  1D03               	skipz
 12518  1B8A  2B8D               	goto	u7025
 12519  1B8B  0820               	movf	___lwdiv@divisor,w
 12520  1B8C  0222               	subwf	___lwdiv@dividend,w
 12521  1B8D                     u7025:	
 12522  1B8D  1C03               	skipc
 12523  1B8E  2B94               	goto	l7910
 12524  1B8F  0820               	movf	___lwdiv@divisor,w
 12525  1B90  02A2               	subwf	___lwdiv@dividend,f
 12526  1B91  0821               	movf	___lwdiv@divisor+1,w
 12527  1B92  3BA3               	subwfb	___lwdiv@dividend+1,f
 12528  1B93  1425               	bsf	___lwdiv@quotient,0
 12529  1B94                     l7910:	
 12530  1B94  3001               	movlw	1
 12531  1B95                     u7035:	
 12532  1B95  36A1               	lsrf	___lwdiv@divisor+1,f
 12533  1B96  0CA0               	rrf	___lwdiv@divisor,f
 12534  1B97  0B89               	decfsz	9,f
 12535  1B98  2B95               	goto	u7035
 12536  1B99  3001               	movlw	1
 12537  1B9A  02A7               	subwf	___lwdiv@counter,f
 12538  1B9B  1D03               	btfss	3,2
 12539  1B9C  2B82               	goto	l7904
 12540  1B9D                     l7914:	
 12541  1B9D  0826               	movf	___lwdiv@quotient+1,w
 12542  1B9E  01A1               	clrf	?___lwdiv+1
 12543  1B9F  07A1               	addwf	?___lwdiv+1,f
 12544  1BA0  0825               	movf	___lwdiv@quotient,w
 12545  1BA1  01A0               	clrf	?___lwdiv
 12546  1BA2  07A0               	addwf	?___lwdiv,f
 12547  1BA3  0008               	return
 12548  1BA4                     __end_of___lwdiv:	
 12549                           
 12550                           	psect	text68
 12551  24CE                     __ptext68:	
 12552 ;; *************** function _Load_Initialization *****************
 12553 ;; Defined at:
 12554 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;		None
 12559 ;; Return value:  Size  Location     Type
 12560 ;;		None               void
 12561 ;; Registers used:
 12562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;Total ram usage:        1 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    5
 12575 ;; This function calls:
 12576 ;;		_setLoad_AH_AL_Restore
 12577 ;; This function is called by:
 12578 ;;		_main
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           
 12583                           ;psect for function _Load_Initialization
 12584  24CE                     _Load_Initialization:	
 12585                           
 12586                           ;OverLoad_B1.c: 10: Load=&Load1;
 12587                           
 12588                           ;incstack = 0
 12589                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12590  24CE  30A0               	movlw	_Load1& (0+255)
 12591  24CF  0020               	movlb	0	; select bank0
 12592  24D0  00A2               	movwf	??_Load_Initialization
 12593  24D1  0822               	movf	??_Load_Initialization,w
 12594  24D2  00EE               	movwf	_Load
 12595                           
 12596                           ;OverLoad_B1.c: 11: Load->Safe=1;
 12597  24D3  086E               	movf	_Load,w
 12598  24D4  0086               	movwf	6
 12599  24D5  3002               	movlw	2	; select bank4/5
 12600  24D6  0087               	movwf	7
 12601  24D7  1581               	bsf	1,3
 12602                           
 12603                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 12604  24D8  3198  20A8         	fcall	_setLoad_AH_AL_Restore
 12605  24DA  0008               	return
 12606  24DB                     __end_of_Load_Initialization:	
 12607                           
 12608                           	psect	text69
 12609  18A8                     __ptext69:	
 12610 ;; *************** function _setLoad_AH_AL_Restore *****************
 12611 ;; Defined at:
 12612 ;;		line 308 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;		None
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  i               1    1[BANK0 ] unsigned char 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;		None               void
 12619 ;; Registers used:
 12620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;Total ram usage:        2 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    4
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		_Load_Initialization
 12637 ;;		_Load_Main
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           
 12642                           ;psect for function _setLoad_AH_AL_Restore
 12643  18A8                     _setLoad_AH_AL_Restore:	
 12644                           
 12645                           ;OverLoad_B1.c: 310: char i;
 12646                           ;OverLoad_B1.c: 311: for(i=0 ; i<5 ;i++)
 12647                           
 12648                           ;incstack = 0
 12649                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12650  18A8  0020               	movlb	0	; select bank0
 12651  18A9  01A1               	clrf	setLoad_AH_AL_Restore@i
 12652  18AA                     L12:	
 12653  18AA  3005               	movlw	5
 12654  18AB  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12655  18AC  1803               	btfsc	3,0
 12656  18AD  0008               	return
 12657                           
 12658                           ;OverLoad_B1.c: 312: {
 12659                           ;OverLoad_B1.c: 313: Load->AH[i]=0;
 12660  18AE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12661  18AF  3E08               	addlw	8
 12662  18B0  076E               	addwf	_Load,w
 12663  18B1  00A0               	movwf	??_setLoad_AH_AL_Restore
 12664  18B2  0820               	movf	??_setLoad_AH_AL_Restore,w
 12665  18B3  0086               	movwf	6
 12666  18B4  3002               	movlw	2	; select bank4/5
 12667  18B5  0087               	movwf	7
 12668  18B6  3000               	movlw	0
 12669  18B7  3FC0               	movwi [0]fsr1
 12670  18B8  3FC1               	movwi [1]fsr1
 12671                           
 12672                           ;OverLoad_B1.c: 314: Load->AL[i]=0xffff;
 12673  18B9  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12674  18BA  3E1A               	addlw	26
 12675  18BB  076E               	addwf	_Load,w
 12676  18BC  00A0               	movwf	??_setLoad_AH_AL_Restore
 12677  18BD  0820               	movf	??_setLoad_AH_AL_Restore,w
 12678  18BE  0086               	movwf	6
 12679  18BF  3002               	movlw	2	; select bank4/5
 12680  18C0  0087               	movwf	7
 12681  18C1  30FF               	movlw	255
 12682  18C2  3FC0               	movwi [0]fsr1
 12683  18C3  30FF               	movlw	255
 12684  18C4  3FC1               	movwi [1]fsr1
 12685  18C5  3001               	movlw	1
 12686  18C6  00A0               	movwf	??_setLoad_AH_AL_Restore
 12687  18C7  0820               	movf	??_setLoad_AH_AL_Restore,w
 12688  18C8  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12689  18C9  28AA               	goto	L12
 12690  18CA                     __end_of_setLoad_AH_AL_Restore:	
 12691                           
 12692                           	psect	text70
 12693  24C2                     __ptext70:	
 12694 ;; *************** function _LED_Main *****************
 12695 ;; Defined at:
 12696 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;		None
 12699 ;; Auto vars:     Size  Location     Type
 12700 ;;		None
 12701 ;; Return value:  Size  Location     Type
 12702 ;;		None               void
 12703 ;; Registers used:
 12704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12705 ;; Tracked objects:
 12706 ;;		On entry : 0/0
 12707 ;;		On exit  : 0/0
 12708 ;;		Unchanged: 0/0
 12709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;Total ram usage:        0 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; Hardware stack levels required when called:    6
 12717 ;; This function calls:
 12718 ;;		_setLED_Main
 12719 ;; This function is called by:
 12720 ;;		_main
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function _LED_Main
 12726  24C2                     _LED_Main:	
 12727                           
 12728                           ;LED_B1.c: 54: setLED_Main(1);
 12729                           
 12730                           ;incstack = 0
 12731                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12732  24C2  3001               	movlw	1
 12733  24C3  319B  23DE  31A4   	fcall	_setLED_Main
 12734                           
 12735                           ;LED_B1.c: 57: setLED_Main(2);
 12736  24C6  3002               	movlw	2
 12737  24C7  319B  23DE  31A4   	fcall	_setLED_Main
 12738                           
 12739                           ;LED_B1.c: 63: setLED_Main(99);
 12740  24CA  3063               	movlw	99
 12741  24CB  319B  23DE         	fcall	_setLED_Main
 12742  24CD  0008               	return
 12743  24CE                     __end_of_LED_Main:	
 12744                           
 12745                           	psect	text71
 12746  1BDE                     __ptext71:	
 12747 ;; *************** function _setLED_Main *****************
 12748 ;; Defined at:
 12749 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;  led             1    wreg     unsigned char 
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;  led             1    4[BANK0 ] unsigned char 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;		None               void
 12756 ;; Registers used:
 12757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        3 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    5
 12770 ;; This function calls:
 12771 ;;		_LedPointSelect
 12772 ;; This function is called by:
 12773 ;;		_LED_Main
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           
 12778                           ;psect for function _setLED_Main
 12779  1BDE                     _setLED_Main:	
 12780                           
 12781                           ;incstack = 0
 12782                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12783                           ;setLED_Main@led stored from wreg
 12784  1BDE  0020               	movlb	0	; select bank0
 12785  1BDF  00A4               	movwf	setLED_Main@led
 12786                           
 12787                           ;LED_B1.c: 216: LedPointSelect(led);
 12788  1BE0  0824               	movf	setLED_Main@led,w
 12789  1BE1  3198  2086  319B   	fcall	_LedPointSelect
 12790                           
 12791                           ;LED_B1.c: 217: if(LED->GO)
 12792  1BE4  0021               	movlb	1	; select bank1
 12793  1BE5  083B               	movf	_LED^(0+128),w
 12794  1BE6  0086               	movwf	6
 12795  1BE7  0187               	clrf	7
 12796  1BE8  1C81               	btfss	1,1
 12797  1BE9  0008               	return
 12798                           
 12799                           ;LED_B1.c: 218: {
 12800                           ;LED_B1.c: 219: LED->Time++;
 12801  1BEA  0A3B               	incf	_LED^(0+128),w
 12802  1BEB  0086               	movwf	6
 12803  1BEC  0187               	clrf	7
 12804  1BED  3001               	movlw	1
 12805  1BEE  0781               	addwf	1,f
 12806  1BEF  3141               	addfsr 1,1
 12807  1BF0  1803               	skipnc
 12808  1BF1  0A81               	incf	1,f
 12809                           
 12810                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 12811  1BF2  0A3B               	incf	_LED^(0+128),w
 12812  1BF3  0086               	movwf	6
 12813  1BF4  0187               	clrf	7
 12814  1BF5  3F40               	moviw [0]fsr1
 12815  1BF6  0020               	movlb	0	; select bank0
 12816  1BF7  00A2               	movwf	??_setLED_Main
 12817  1BF8  3F41               	moviw [1]fsr1
 12818  1BF9  00A3               	movwf	??_setLED_Main+1
 12819  1BFA  3000               	movlw	0
 12820  1BFB  0223               	subwf	??_setLED_Main+1,w
 12821  1BFC  3032               	movlw	50
 12822  1BFD  1903               	skipnz
 12823  1BFE  0222               	subwf	??_setLED_Main,w
 12824  1BFF  1C03               	skipc
 12825  1C00  0008               	return
 12826                           
 12827                           ;LED_B1.c: 221: {
 12828                           ;LED_B1.c: 222: LED->Time=0;
 12829  1C01  0021               	movlb	1	; select bank1
 12830  1C02  0A3B               	incf	_LED^(0+128),w
 12831  1C03  0086               	movwf	6
 12832  1C04  0187               	clrf	7
 12833  1C05  3000               	movlw	0
 12834  1C06  3FC0               	movwi [0]fsr1
 12835  1C07  3FC1               	movwi [1]fsr1
 12836                           
 12837                           ;LED_B1.c: 224: if(led == 1)
 12838  1C08  0020               	movlb	0	; select bank0
 12839  1C09  0824               	movf	setLED_Main@led,w
 12840  1C0A  3A01               	xorlw	1
 12841  1C0B  1D03               	skipz
 12842  1C0C  2C10               	goto	l7474
 12843                           
 12844                           ;LED_B1.c: 225: {
 12845                           ;LED_B1.c: 226: RA3=~RA3;
 12846  1C0D  3008               	movlw	8
 12847  1C0E  068C               	xorwf	12,f
 12848                           
 12849                           ;LED_B1.c: 227: }
 12850  1C0F  0008               	return
 12851  1C10                     l7474:	
 12852                           
 12853                           ;LED_B1.c: 230: else if(led == 2)
 12854  1C10  0824               	movf	setLED_Main@led,w
 12855  1C11  3A02               	xorlw	2
 12856  1C12  1D03               	skipz
 12857  1C13  2C17               	goto	l7478
 12858                           
 12859                           ;LED_B1.c: 231: {
 12860                           ;LED_B1.c: 232: RC7=~RC7;
 12861  1C14  3080               	movlw	128
 12862  1C15  068E               	xorwf	14,f
 12863                           
 12864                           ;LED_B1.c: 233: }
 12865  1C16  0008               	return
 12866  1C17                     l7478:	
 12867                           
 12868                           ;LED_B1.c: 242: else if(led == 99)
 12869  1C17  0824               	movf	setLED_Main@led,w
 12870  1C18  3A63               	xorlw	99
 12871  1C19  1D03               	skipz
 12872  1C1A  0008               	return
 12873                           
 12874                           ;LED_B1.c: 243: {
 12875                           ;LED_B1.c: 244: RB5=~RB5;
 12876  1C1B  3020               	movlw	32
 12877  1C1C  068D               	xorwf	13,f
 12878  1C1D  0008               	return
 12879  1C1E                     __end_of_setLED_Main:	
 12880                           
 12881                           	psect	text72
 12882  24B6                     __ptext72:	
 12883 ;; *************** function _LED_Initialization *****************
 12884 ;; Defined at:
 12885 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;		None
 12888 ;; Auto vars:     Size  Location     Type
 12889 ;;		None
 12890 ;; Return value:  Size  Location     Type
 12891 ;;		None               void
 12892 ;; Registers used:
 12893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12894 ;; Tracked objects:
 12895 ;;		On entry : 0/0
 12896 ;;		On exit  : 0/0
 12897 ;;		Unchanged: 0/0
 12898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;Total ram usage:        0 bytes
 12904 ;; Hardware stack levels used:    1
 12905 ;; Hardware stack levels required when called:    7
 12906 ;; This function calls:
 12907 ;;		_setLED_Initialization
 12908 ;; This function is called by:
 12909 ;;		_main
 12910 ;; This function uses a non-reentrant model
 12911 ;;
 12912                           
 12913                           
 12914                           ;psect for function _LED_Initialization
 12915  24B6                     _LED_Initialization:	
 12916                           
 12917                           ;LED_B1.c: 38: setLED_Initialization(1);
 12918                           
 12919                           ;incstack = 0
 12920                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12921  24B6  3001               	movlw	1
 12922  24B7  31A5  25BC  31A4   	fcall	_setLED_Initialization
 12923                           
 12924                           ;LED_B1.c: 41: setLED_Initialization(2);
 12925  24BA  3002               	movlw	2
 12926  24BB  31A5  25BC  31A4   	fcall	_setLED_Initialization
 12927                           
 12928                           ;LED_B1.c: 47: setLED_Initialization(99);
 12929  24BE  3063               	movlw	99
 12930  24BF  31A5  25BC         	fcall	_setLED_Initialization
 12931  24C1  0008               	return
 12932  24C2                     __end_of_LED_Initialization:	
 12933                           
 12934                           	psect	text73
 12935  25BC                     __ptext73:	
 12936 ;; *************** function _setLED_Initialization *****************
 12937 ;; Defined at:
 12938 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12939 ;; Parameters:    Size  Location     Type
 12940 ;;  led             1    wreg     unsigned char 
 12941 ;; Auto vars:     Size  Location     Type
 12942 ;;  led             1    4[BANK0 ] unsigned char 
 12943 ;; Return value:  Size  Location     Type
 12944 ;;		None               void
 12945 ;; Registers used:
 12946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12947 ;; Tracked objects:
 12948 ;;		On entry : 0/0
 12949 ;;		On exit  : 0/0
 12950 ;;		Unchanged: 0/0
 12951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;Total ram usage:        1 bytes
 12957 ;; Hardware stack levels used:    1
 12958 ;; Hardware stack levels required when called:    6
 12959 ;; This function calls:
 12960 ;;		_LedPointSelect
 12961 ;;		_setLED
 12962 ;; This function is called by:
 12963 ;;		_LED_Initialization
 12964 ;; This function uses a non-reentrant model
 12965 ;;
 12966                           
 12967                           
 12968                           ;psect for function _setLED_Initialization
 12969  25BC                     _setLED_Initialization:	
 12970                           
 12971                           ;incstack = 0
 12972                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12973                           ;setLED_Initialization@led stored from wreg
 12974  25BC  0020               	movlb	0	; select bank0
 12975  25BD  00A4               	movwf	setLED_Initialization@led
 12976                           
 12977                           ;LED_B1.c: 69: LedPointSelect(led);
 12978  25BE  0824               	movf	setLED_Initialization@led,w
 12979  25BF  3198  2086  31A5   	fcall	_LedPointSelect
 12980                           
 12981                           ;LED_B1.c: 70: LED->Enable=1;
 12982  25C2  0021               	movlb	1	; select bank1
 12983  25C3  083B               	movf	_LED^(0+128),w
 12984  25C4  0086               	movwf	6
 12985  25C5  0187               	clrf	7
 12986  25C6  1401               	bsf	1,0
 12987                           
 12988                           ;LED_B1.c: 71: setLED(led,0);
 12989  25C7  0020               	movlb	0	; select bank0
 12990  25C8  01A2               	clrf	setLED@command
 12991  25C9  0824               	movf	setLED_Initialization@led,w
 12992  25CA  3190  2042         	fcall	_setLED
 12993  25CC  0008               	return
 12994  25CD                     __end_of_setLED_Initialization:	
 12995                           
 12996                           	psect	text74
 12997  1DF7                     __ptext74:	
 12998 ;; *************** function _Flash_Memory_Main *****************
 12999 ;; Defined at:
 13000 ;;		line 474 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        0 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    7
 13021 ;; This function calls:
 13022 ;;		_Flash_Memory_Modify
 13023 ;; This function is called by:
 13024 ;;		_main
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _Flash_Memory_Main
 13030  1DF7                     _Flash_Memory_Main:	
 13031                           
 13032                           ;MCU_16f1518_B1.c: 476: if(Memory->GO)
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13036  1DF7  0021               	movlb	1	; select bank1
 13037  1DF8  0868               	movf	_Memory^(0+128),w
 13038  1DF9  3E22               	addlw	34
 13039  1DFA  0086               	movwf	6
 13040  1DFB  3002               	movlw	2	; select bank4/5
 13041  1DFC  0087               	movwf	7
 13042  1DFD  1C81               	btfss	1,1
 13043  1DFE  0008               	return
 13044                           
 13045                           ;MCU_16f1518_B1.c: 477: {
 13046                           ;MCU_16f1518_B1.c: 478: if(Memory->Modify)
 13047  1DFF  0868               	movf	_Memory^(0+128),w
 13048  1E00  3E22               	addlw	34
 13049  1E01  0086               	movwf	6
 13050  1E02  3002               	movlw	2	; select bank4/5
 13051  1E03  0087               	movwf	7
 13052  1E04  1C01               	btfss	1,0
 13053  1E05  2E3D               	goto	l9926
 13054                           
 13055                           ;MCU_16f1518_B1.c: 479: {
 13056                           ;MCU_16f1518_B1.c: 480: Memory->Time++;
 13057  1E06  0868               	movf	_Memory^(0+128),w
 13058  1E07  3E23               	addlw	35
 13059  1E08  0086               	movwf	6
 13060  1E09  3002               	movlw	2	; select bank4/5
 13061  1E0A  0087               	movwf	7
 13062  1E0B  3001               	movlw	1
 13063  1E0C  0781               	addwf	1,f
 13064  1E0D  3141               	addfsr 1,1
 13065  1E0E  1803               	skipnc
 13066  1E0F  0A81               	incf	1,f
 13067                           
 13068                           ;MCU_16f1518_B1.c: 481: if(Memory->Time == 25)
 13069  1E10  0868               	movf	_Memory^(0+128),w
 13070  1E11  3E23               	addlw	35
 13071  1E12  0086               	movwf	6
 13072  1E13  3002               	movlw	2	; select bank4/5
 13073  1E14  0087               	movwf	7
 13074  1E15  3F40               	moviw [0]fsr1
 13075  1E16  3A19               	xorlw	25
 13076  1E17  1D03               	skipz
 13077  1E18  2E1B               	goto	u10095
 13078  1E19  3F41               	moviw [1]fsr1
 13079  1E1A  3A00               	xorlw	0
 13080  1E1B                     u10095:	
 13081  1E1B  1D03               	skipz
 13082  1E1C  0008               	return
 13083                           
 13084                           ;MCU_16f1518_B1.c: 482: {
 13085                           ;MCU_16f1518_B1.c: 483: Memory->Time=0;
 13086  1E1D  0868               	movf	_Memory^(0+128),w
 13087  1E1E  3E23               	addlw	35
 13088  1E1F  0086               	movwf	6
 13089  1E20  3002               	movlw	2	; select bank4/5
 13090  1E21  0087               	movwf	7
 13091  1E22  3000               	movlw	0
 13092  1E23  3FC0               	movwi [0]fsr1
 13093  1E24  3FC1               	movwi [1]fsr1
 13094                           
 13095                           ;MCU_16f1518_B1.c: 484: Memory->Modify=0;
 13096  1E25  0868               	movf	_Memory^(0+128),w
 13097  1E26  3E22               	addlw	34
 13098  1E27  0086               	movwf	6
 13099  1E28  3002               	movlw	2	; select bank4/5
 13100  1E29  0087               	movwf	7
 13101  1E2A  1001               	bcf	1,0
 13102                           
 13103                           ;MCU_16f1518_B1.c: 485: Memory->GO=0;
 13104  1E2B  0868               	movf	_Memory^(0+128),w
 13105  1E2C  3E22               	addlw	34
 13106  1E2D  0086               	movwf	6
 13107  1E2E  3002               	movlw	2	; select bank4/5
 13108  1E2F  0087               	movwf	7
 13109  1E30  1081               	bcf	1,1
 13110                           
 13111                           ;MCU_16f1518_B1.c: 486: Flash_Memory_Modify();
 13112  1E31  3192  2297  319D   	fcall	_Flash_Memory_Modify
 13113                           
 13114                           ;MCU_16f1518_B1.c: 487: RB5=RB5;
 13115  1E34  0020               	movlb	0	; select bank0
 13116  1E35  1E8D               	btfss	13,5	;volatile
 13117  1E36  2E3A               	goto	u10100
 13118  1E37  0020               	movlb	0	; select bank0
 13119  1E38  168D               	bsf	13,5	;volatile
 13120  1E39  0008               	return
 13121  1E3A                     u10100:	
 13122  1E3A  0020               	movlb	0	; select bank0
 13123  1E3B  128D               	bcf	13,5	;volatile
 13124                           
 13125                           ;MCU_16f1518_B1.c: 488: }
 13126                           ;MCU_16f1518_B1.c: 489: }
 13127  1E3C  0008               	return
 13128  1E3D                     l9926:	
 13129                           
 13130                           ;MCU_16f1518_B1.c: 490: else
 13131                           ;MCU_16f1518_B1.c: 491: {
 13132                           ;MCU_16f1518_B1.c: 492: Memory->GO=0;
 13133  1E3D  0021               	movlb	1	; select bank1
 13134  1E3E  0868               	movf	_Memory^(0+128),w
 13135  1E3F  3E22               	addlw	34
 13136  1E40  0086               	movwf	6
 13137  1E41  3002               	movlw	2	; select bank4/5
 13138  1E42  0087               	movwf	7
 13139  1E43  1081               	bcf	1,1
 13140  1E44  0008               	return
 13141  1E45                     __end_of_Flash_Memory_Main:	
 13142                           
 13143                           	psect	text75
 13144  1297                     __ptext75:	
 13145 ;; *************** function _Flash_Memory_Modify *****************
 13146 ;; Defined at:
 13147 ;;		line 549 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;		None
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;  i               1    6[BANK0 ] unsigned char 
 13152 ;; Return value:  Size  Location     Type
 13153 ;;		None               void
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;Total ram usage:        3 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    6
 13168 ;; This function calls:
 13169 ;;		_Flash_Memory_Erasing
 13170 ;;		_Flash_Memory_Read
 13171 ;;		_Flash_Memory_Write
 13172 ;; This function is called by:
 13173 ;;		_Flash_Memory_Main
 13174 ;; This function uses a non-reentrant model
 13175 ;;
 13176                           
 13177                           
 13178                           ;psect for function _Flash_Memory_Modify
 13179  1297                     _Flash_Memory_Modify:	
 13180                           
 13181                           ;MCU_16f1518_B1.c: 551: char i;
 13182                           ;MCU_16f1518_B1.c: 552: for(i=0;i<32;i++)
 13183                           
 13184                           ;incstack = 0
 13185                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13186  1297  0020               	movlb	0	; select bank0
 13187  1298  01A6               	clrf	Flash_Memory_Modify@i
 13188  1299  3020               	movlw	32
 13189  129A  0226               	subwf	Flash_Memory_Modify@i,w
 13190  129B  1803               	btfsc	3,0
 13191  129C  2AB6               	goto	l9432
 13192  129D                     l9426:	
 13193                           
 13194                           ;MCU_16f1518_B1.c: 553: {
 13195                           ;MCU_16f1518_B1.c: 554: Memory->Data[i]=Flash_Memory_Read(i);
 13196  129D  0826               	movf	Flash_Memory_Modify@i,w
 13197  129E  31A6  26E6  3192   	fcall	_Flash_Memory_Read
 13198  12A1  0020               	movlb	0	; select bank0
 13199  12A2  00A4               	movwf	??_Flash_Memory_Modify
 13200  12A3  0826               	movf	Flash_Memory_Modify@i,w
 13201  12A4  0021               	movlb	1	; select bank1
 13202  12A5  0768               	addwf	_Memory^(0+128),w
 13203  12A6  0020               	movlb	0	; select bank0
 13204  12A7  00A5               	movwf	??_Flash_Memory_Modify+1
 13205  12A8  0825               	movf	??_Flash_Memory_Modify+1,w
 13206  12A9  0086               	movwf	6
 13207  12AA  3002               	movlw	2	; select bank4/5
 13208  12AB  0087               	movwf	7
 13209  12AC  0824               	movf	??_Flash_Memory_Modify,w
 13210  12AD  0081               	movwf	1
 13211  12AE  3001               	movlw	1
 13212  12AF  00A4               	movwf	??_Flash_Memory_Modify
 13213  12B0  0824               	movf	??_Flash_Memory_Modify,w
 13214  12B1  07A6               	addwf	Flash_Memory_Modify@i,f
 13215  12B2  3020               	movlw	32
 13216  12B3  0226               	subwf	Flash_Memory_Modify@i,w
 13217  12B4  1C03               	skipc
 13218  12B5  2A9D               	goto	l9426
 13219  12B6                     l9432:	
 13220                           
 13221                           ;MCU_16f1518_B1.c: 555: }
 13222                           ;MCU_16f1518_B1.c: 556: Memory->Data[0]=Product->Data[12];
 13223  12B6  086F               	movf	_Product,w
 13224  12B7  3E0C               	addlw	12
 13225  12B8  0086               	movwf	6
 13226  12B9  3001               	movlw	1	; select bank2/3
 13227  12BA  0087               	movwf	7
 13228  12BB  0801               	movf	1,w
 13229  12BC  00A4               	movwf	??_Flash_Memory_Modify
 13230  12BD  0021               	movlb	1	; select bank1
 13231  12BE  0868               	movf	_Memory^(0+128),w
 13232  12BF  0086               	movwf	6
 13233  12C0  3002               	movlw	2	; select bank4/5
 13234  12C1  0087               	movwf	7
 13235  12C2  0020               	movlb	0	; select bank0
 13236  12C3  0824               	movf	??_Flash_Memory_Modify,w
 13237  12C4  0081               	movwf	1
 13238                           
 13239                           ;MCU_16f1518_B1.c: 557: Memory->Data[1]=Product->Data[13];
 13240  12C5  086F               	movf	_Product,w
 13241  12C6  3E0D               	addlw	13
 13242  12C7  0086               	movwf	6
 13243  12C8  3001               	movlw	1	; select bank2/3
 13244  12C9  0087               	movwf	7
 13245  12CA  0801               	movf	1,w
 13246  12CB  00A4               	movwf	??_Flash_Memory_Modify
 13247  12CC  0021               	movlb	1	; select bank1
 13248  12CD  0A68               	incf	_Memory^(0+128),w
 13249  12CE  0086               	movwf	6
 13250  12CF  3002               	movlw	2	; select bank4/5
 13251  12D0  0087               	movwf	7
 13252  12D1  0020               	movlb	0	; select bank0
 13253  12D2  0824               	movf	??_Flash_Memory_Modify,w
 13254  12D3  0081               	movwf	1
 13255                           
 13256                           ;MCU_16f1518_B1.c: 558: Memory->Data[2]=Product->Data[14];
 13257  12D4  086F               	movf	_Product,w
 13258  12D5  3E0E               	addlw	14
 13259  12D6  0086               	movwf	6
 13260  12D7  3001               	movlw	1	; select bank2/3
 13261  12D8  0087               	movwf	7
 13262  12D9  0801               	movf	1,w
 13263  12DA  00A4               	movwf	??_Flash_Memory_Modify
 13264  12DB  0021               	movlb	1	; select bank1
 13265  12DC  0868               	movf	_Memory^(0+128),w
 13266  12DD  3E02               	addlw	2
 13267  12DE  0086               	movwf	6
 13268  12DF  3002               	movlw	2	; select bank4/5
 13269  12E0  0087               	movwf	7
 13270  12E1  0020               	movlb	0	; select bank0
 13271  12E2  0824               	movf	??_Flash_Memory_Modify,w
 13272  12E3  0081               	movwf	1
 13273                           
 13274                           ;MCU_16f1518_B1.c: 564: if(Memory->LoopSave)
 13275  12E4  0021               	movlb	1	; select bank1
 13276  12E5  0868               	movf	_Memory^(0+128),w
 13277  12E6  3E22               	addlw	34
 13278  12E7  0086               	movwf	6
 13279  12E8  3002               	movlw	2	; select bank4/5
 13280  12E9  0087               	movwf	7
 13281  12EA  1D01               	btfss	1,2
 13282  12EB  2AFD               	goto	l9436
 13283                           
 13284                           ;MCU_16f1518_B1.c: 565: {
 13285                           ;MCU_16f1518_B1.c: 566: Memory->LoopSave=0;
 13286  12EC  0868               	movf	_Memory^(0+128),w
 13287  12ED  3E22               	addlw	34
 13288  12EE  0086               	movwf	6
 13289  12EF  3002               	movlw	2	; select bank4/5
 13290  12F0  0087               	movwf	7
 13291  12F1  1101               	bcf	1,2
 13292                           
 13293                           ;MCU_16f1518_B1.c: 567: TMain->FirstOpen=0;
 13294  12F2  0869               	movf	_TMain^(0+128),w
 13295  12F3  0086               	movwf	6
 13296  12F4  3001               	movlw	1	; select bank2/3
 13297  12F5  0087               	movwf	7
 13298  12F6  1281               	bcf	1,5
 13299                           
 13300                           ;MCU_16f1518_B1.c: 568: TMain->First=0;
 13301  12F7  0869               	movf	_TMain^(0+128),w
 13302  12F8  3E03               	addlw	3
 13303  12F9  0086               	movwf	6
 13304  12FA  3001               	movlw	1	; select bank2/3
 13305  12FB  0087               	movwf	7
 13306  12FC  1081               	bcf	1,1
 13307  12FD                     l9436:	
 13308                           
 13309                           ;MCU_16f1518_B1.c: 570: }
 13310                           ;MCU_16f1518_B1.c: 571: GIE=0;
 13311  12FD  138B               	bcf	11,7	;volatile
 13312                           
 13313                           ;MCU_16f1518_B1.c: 572: Flash_Memory_Erasing();
 13314  12FE  31A4  24AA  3192   	fcall	_Flash_Memory_Erasing
 13315                           
 13316                           ;MCU_16f1518_B1.c: 573: Flash_Memory_Write();
 13317  1301  319A  229F         	fcall	_Flash_Memory_Write
 13318                           
 13319                           ;MCU_16f1518_B1.c: 574: GIE=1;
 13320  1303  178B               	bsf	11,7	;volatile
 13321  1304  0008               	return
 13322  1305                     __end_of_Flash_Memory_Modify:	
 13323                           
 13324                           	psect	text76
 13325  24AA                     __ptext76:	
 13326 ;; *************** function _Flash_Memory_Erasing *****************
 13327 ;; Defined at:
 13328 ;;		line 538 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13329 ;; Parameters:    Size  Location     Type
 13330 ;;		None
 13331 ;; Auto vars:     Size  Location     Type
 13332 ;;		None
 13333 ;; Return value:  Size  Location     Type
 13334 ;;		None               void
 13335 ;; Registers used:
 13336 ;;		wreg, status,2, status,0, pclath, cstack
 13337 ;; Tracked objects:
 13338 ;;		On entry : 0/0
 13339 ;;		On exit  : 0/0
 13340 ;;		Unchanged: 0/0
 13341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;Total ram usage:        0 bytes
 13347 ;; Hardware stack levels used:    1
 13348 ;; Hardware stack levels required when called:    5
 13349 ;; This function calls:
 13350 ;;		_Flash_Memory_Unlock
 13351 ;; This function is called by:
 13352 ;;		_Flash_Memory_Modify
 13353 ;; This function uses a non-reentrant model
 13354 ;;
 13355                           
 13356                           
 13357                           ;psect for function _Flash_Memory_Erasing
 13358  24AA                     _Flash_Memory_Erasing:	
 13359                           
 13360                           ;MCU_16f1518_B1.c: 540: CFGS=0;
 13361                           
 13362                           ;incstack = 0
 13363                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13364  24AA  0023               	movlb	3	; select bank3
 13365  24AB  1315               	bcf	21,6	;volatile
 13366                           
 13367                           ;MCU_16f1518_B1.c: 541: PMADRH=0x30;
 13368  24AC  3030               	movlw	48
 13369  24AD  0092               	movwf	18	;volatile
 13370                           
 13371                           ;MCU_16f1518_B1.c: 542: PMADRL=0x00;
 13372  24AE  0191               	clrf	17	;volatile
 13373                           
 13374                           ;MCU_16f1518_B1.c: 543: FREE=1;
 13375  24AF  1615               	bsf	21,4	;volatile
 13376                           
 13377                           ;MCU_16f1518_B1.c: 544: WREN=1;
 13378  24B0  1515               	bsf	21,2	;volatile
 13379                           
 13380                           ;MCU_16f1518_B1.c: 545: Flash_Memory_Unlock();
 13381  24B1  31A4  2407         	fcall	_Flash_Memory_Unlock
 13382                           
 13383                           ;MCU_16f1518_B1.c: 546: WREN=0;
 13384  24B3  0023               	movlb	3	; select bank3
 13385  24B4  1115               	bcf	21,2	;volatile
 13386  24B5  0008               	return
 13387  24B6                     __end_of_Flash_Memory_Erasing:	
 13388                           
 13389                           	psect	text77
 13390  0CD7                     __ptext77:	
 13391 ;; *************** function _Flash_Memory_Initialization *****************
 13392 ;; Defined at:
 13393 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;		None
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  i               1   62[BANK0 ] unsigned char 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;		None               void
 13400 ;; Registers used:
 13401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        2 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    7
 13414 ;; This function calls:
 13415 ;;		_Flash_Memory_Read
 13416 ;;		_Flash_Memory_Write
 13417 ;;		_setPercentValue
 13418 ;; This function is called by:
 13419 ;;		_main
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           
 13424                           ;psect for function _Flash_Memory_Initialization
 13425  0CD7                     _Flash_Memory_Initialization:	
 13426                           
 13427                           ;MCU_16f1518_B1.c: 431: char i;
 13428                           ;MCU_16f1518_B1.c: 432: if(Flash_Memory_Read(31) == 0xaa)
 13429                           
 13430                           ;incstack = 0
 13431                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13432  0CD7  301F               	movlw	31
 13433  0CD8  31A6  26E6  318C   	fcall	_Flash_Memory_Read
 13434  0CDB  3AAA               	xorlw	170
 13435  0CDC  1D03               	skipz
 13436  0CDD  2D50               	goto	l9782
 13437                           
 13438                           ;MCU_16f1518_B1.c: 433: {
 13439                           ;MCU_16f1518_B1.c: 434: Product->Data[12]=Flash_Memory_Read(0);
 13440  0CDE  3000               	movlw	0
 13441  0CDF  31A6  26E6  318C   	fcall	_Flash_Memory_Read
 13442  0CE2  0020               	movlb	0	; select bank0
 13443  0CE3  00DD               	movwf	??_Flash_Memory_Initialization
 13444  0CE4  086F               	movf	_Product,w
 13445  0CE5  3E0C               	addlw	12
 13446  0CE6  0086               	movwf	6
 13447  0CE7  3001               	movlw	1	; select bank2/3
 13448  0CE8  0087               	movwf	7
 13449  0CE9  085D               	movf	??_Flash_Memory_Initialization,w
 13450  0CEA  0081               	movwf	1
 13451                           
 13452                           ;MCU_16f1518_B1.c: 435: Product->Data[13]=Flash_Memory_Read(1);
 13453  0CEB  3001               	movlw	1
 13454  0CEC  31A6  26E6  318C   	fcall	_Flash_Memory_Read
 13455  0CEF  0020               	movlb	0	; select bank0
 13456  0CF0  00DD               	movwf	??_Flash_Memory_Initialization
 13457  0CF1  086F               	movf	_Product,w
 13458  0CF2  3E0D               	addlw	13
 13459  0CF3  0086               	movwf	6
 13460  0CF4  3001               	movlw	1	; select bank2/3
 13461  0CF5  0087               	movwf	7
 13462  0CF6  085D               	movf	??_Flash_Memory_Initialization,w
 13463  0CF7  0081               	movwf	1
 13464                           
 13465                           ;MCU_16f1518_B1.c: 436: Product->Data[14]=Flash_Memory_Read(2);
 13466  0CF8  3002               	movlw	2
 13467  0CF9  31A6  26E6  318C   	fcall	_Flash_Memory_Read
 13468  0CFC  0020               	movlb	0	; select bank0
 13469  0CFD  00DD               	movwf	??_Flash_Memory_Initialization
 13470  0CFE  086F               	movf	_Product,w
 13471  0CFF  3E0E               	addlw	14
 13472  0D00  0086               	movwf	6
 13473  0D01  3001               	movlw	1	; select bank2/3
 13474  0D02  0087               	movwf	7
 13475  0D03  085D               	movf	??_Flash_Memory_Initialization,w
 13476  0D04  0081               	movwf	1
 13477                           
 13478                           ;MCU_16f1518_B1.c: 442: i=setPercentValue(((char)((100-60)*1.5)));
 13479  0D05  303C               	movlw	60
 13480  0D06  319D  2569  318C   	fcall	_setPercentValue
 13481  0D09  0020               	movlb	0	; select bank0
 13482  0D0A  00DD               	movwf	??_Flash_Memory_Initialization
 13483  0D0B  085D               	movf	??_Flash_Memory_Initialization,w
 13484  0D0C  00DE               	movwf	Flash_Memory_Initialization@i
 13485                           
 13486                           ;MCU_16f1518_B1.c: 443: Product->Data[21]=i;
 13487  0D0D  085E               	movf	Flash_Memory_Initialization@i,w
 13488  0D0E  00DD               	movwf	??_Flash_Memory_Initialization
 13489  0D0F  086F               	movf	_Product,w
 13490  0D10  3E15               	addlw	21
 13491  0D11  0086               	movwf	6
 13492  0D12  3001               	movlw	1	; select bank2/3
 13493  0D13  0087               	movwf	7
 13494  0D14  085D               	movf	??_Flash_Memory_Initialization,w
 13495  0D15  0081               	movwf	1
 13496                           
 13497                           ;MCU_16f1518_B1.c: 444: Product->Data[22]=i;
 13498  0D16  085E               	movf	Flash_Memory_Initialization@i,w
 13499  0D17  00DD               	movwf	??_Flash_Memory_Initialization
 13500  0D18  086F               	movf	_Product,w
 13501  0D19  3E16               	addlw	22
 13502  0D1A  0086               	movwf	6
 13503  0D1B  3001               	movlw	1	; select bank2/3
 13504  0D1C  0087               	movwf	7
 13505  0D1D  085D               	movf	??_Flash_Memory_Initialization,w
 13506  0D1E  0081               	movwf	1
 13507                           
 13508                           ;MCU_16f1518_B1.c: 445: Product->Data[23]=i;
 13509  0D1F  085E               	movf	Flash_Memory_Initialization@i,w
 13510  0D20  00DD               	movwf	??_Flash_Memory_Initialization
 13511  0D21  086F               	movf	_Product,w
 13512  0D22  3E17               	addlw	23
 13513  0D23  0086               	movwf	6
 13514  0D24  3001               	movlw	1	; select bank2/3
 13515  0D25  0087               	movwf	7
 13516  0D26  085D               	movf	??_Flash_Memory_Initialization,w
 13517  0D27  0081               	movwf	1
 13518                           
 13519                           ;MCU_16f1518_B1.c: 447: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 13520  0D28  086F               	movf	_Product,w
 13521  0D29  3E0C               	addlw	12
 13522  0D2A  0086               	movwf	6
 13523  0D2B  3001               	movlw	1	; select bank2/3
 13524  0D2C  0087               	movwf	7
 13525  0D2D  0801               	movf	1,w
 13526  0D2E  3AFF               	xorlw	255
 13527  0D2F  1D03               	skipz
 13528  0D30  0008               	return
 13529  0D31  086F               	movf	_Product,w
 13530  0D32  3E0D               	addlw	13
 13531  0D33  0086               	movwf	6
 13532  0D34  3001               	movlw	1	; select bank2/3
 13533  0D35  0087               	movwf	7
 13534  0D36  0801               	movf	1,w
 13535  0D37  3AFF               	xorlw	255
 13536  0D38  1D03               	skipz
 13537  0D39  0008               	return
 13538  0D3A  086F               	movf	_Product,w
 13539  0D3B  3E0E               	addlw	14
 13540  0D3C  0086               	movwf	6
 13541  0D3D  3001               	movlw	1	; select bank2/3
 13542  0D3E  0087               	movwf	7
 13543  0D3F  0801               	movf	1,w
 13544  0D40  3AFF               	xorlw	255
 13545  0D41  1D03               	skipz
 13546  0D42  0008               	return
 13547                           
 13548                           ;MCU_16f1518_B1.c: 448: {
 13549                           ;MCU_16f1518_B1.c: 449: TMain->FirstOpen=1;
 13550  0D43  0021               	movlb	1	; select bank1
 13551  0D44  0869               	movf	_TMain^(0+128),w
 13552  0D45  0086               	movwf	6
 13553  0D46  3001               	movlw	1	; select bank2/3
 13554  0D47  0087               	movwf	7
 13555  0D48  1681               	bsf	1,5
 13556                           
 13557                           ;MCU_16f1518_B1.c: 450: TMain->First=1;
 13558  0D49  0869               	movf	_TMain^(0+128),w
 13559  0D4A  3E03               	addlw	3
 13560  0D4B  0086               	movwf	6
 13561  0D4C  3001               	movlw	1	; select bank2/3
 13562  0D4D  0087               	movwf	7
 13563  0D4E  1481               	bsf	1,1
 13564                           
 13565                           ;MCU_16f1518_B1.c: 451: }
 13566                           ;MCU_16f1518_B1.c: 452: }
 13567  0D4F  0008               	return
 13568  0D50                     l9782:	
 13569                           
 13570                           ;MCU_16f1518_B1.c: 453: else
 13571                           ;MCU_16f1518_B1.c: 454: {
 13572                           ;MCU_16f1518_B1.c: 455: i=setPercentValue(((char)((100-60)*1.5)));
 13573  0D50  303C               	movlw	60
 13574  0D51  319D  2569  318C   	fcall	_setPercentValue
 13575  0D54  0020               	movlb	0	; select bank0
 13576  0D55  00DD               	movwf	??_Flash_Memory_Initialization
 13577  0D56  085D               	movf	??_Flash_Memory_Initialization,w
 13578  0D57  00DE               	movwf	Flash_Memory_Initialization@i
 13579                           
 13580                           ;MCU_16f1518_B1.c: 456: Memory->Data[0]=0xff;
 13581  0D58  30FF               	movlw	255
 13582  0D59  00DD               	movwf	??_Flash_Memory_Initialization
 13583  0D5A  0021               	movlb	1	; select bank1
 13584  0D5B  0868               	movf	_Memory^(0+128),w
 13585  0D5C  0086               	movwf	6
 13586  0D5D  3002               	movlw	2	; select bank4/5
 13587  0D5E  0087               	movwf	7
 13588  0D5F  0020               	movlb	0	; select bank0
 13589  0D60  085D               	movf	??_Flash_Memory_Initialization,w
 13590  0D61  0081               	movwf	1
 13591                           
 13592                           ;MCU_16f1518_B1.c: 457: Memory->Data[1]=0xff;
 13593  0D62  30FF               	movlw	255
 13594  0D63  00DD               	movwf	??_Flash_Memory_Initialization
 13595  0D64  0021               	movlb	1	; select bank1
 13596  0D65  0A68               	incf	_Memory^(0+128),w
 13597  0D66  0086               	movwf	6
 13598  0D67  3002               	movlw	2	; select bank4/5
 13599  0D68  0087               	movwf	7
 13600  0D69  0020               	movlb	0	; select bank0
 13601  0D6A  085D               	movf	??_Flash_Memory_Initialization,w
 13602  0D6B  0081               	movwf	1
 13603                           
 13604                           ;MCU_16f1518_B1.c: 458: Memory->Data[2]=0xff;
 13605  0D6C  30FF               	movlw	255
 13606  0D6D  00DD               	movwf	??_Flash_Memory_Initialization
 13607  0D6E  0021               	movlb	1	; select bank1
 13608  0D6F  0868               	movf	_Memory^(0+128),w
 13609  0D70  3E02               	addlw	2
 13610  0D71  0086               	movwf	6
 13611  0D72  3002               	movlw	2	; select bank4/5
 13612  0D73  0087               	movwf	7
 13613  0D74  0020               	movlb	0	; select bank0
 13614  0D75  085D               	movf	??_Flash_Memory_Initialization,w
 13615  0D76  0081               	movwf	1
 13616                           
 13617                           ;MCU_16f1518_B1.c: 459: Memory->Data[3]=0xff;
 13618  0D77  30FF               	movlw	255
 13619  0D78  00DD               	movwf	??_Flash_Memory_Initialization
 13620  0D79  0021               	movlb	1	; select bank1
 13621  0D7A  0868               	movf	_Memory^(0+128),w
 13622  0D7B  3E03               	addlw	3
 13623  0D7C  0086               	movwf	6
 13624  0D7D  3002               	movlw	2	; select bank4/5
 13625  0D7E  0087               	movwf	7
 13626  0D7F  0020               	movlb	0	; select bank0
 13627  0D80  085D               	movf	??_Flash_Memory_Initialization,w
 13628  0D81  0081               	movwf	1
 13629                           
 13630                           ;MCU_16f1518_B1.c: 460: Memory->Data[4]=0xff;
 13631  0D82  30FF               	movlw	255
 13632  0D83  00DD               	movwf	??_Flash_Memory_Initialization
 13633  0D84  0021               	movlb	1	; select bank1
 13634  0D85  0868               	movf	_Memory^(0+128),w
 13635  0D86  3E04               	addlw	4
 13636  0D87  0086               	movwf	6
 13637  0D88  3002               	movlw	2	; select bank4/5
 13638  0D89  0087               	movwf	7
 13639  0D8A  0020               	movlb	0	; select bank0
 13640  0D8B  085D               	movf	??_Flash_Memory_Initialization,w
 13641  0D8C  0081               	movwf	1
 13642                           
 13643                           ;MCU_16f1518_B1.c: 461: Memory->Data[5]=0xff;
 13644  0D8D  30FF               	movlw	255
 13645  0D8E  00DD               	movwf	??_Flash_Memory_Initialization
 13646  0D8F  0021               	movlb	1	; select bank1
 13647  0D90  0868               	movf	_Memory^(0+128),w
 13648  0D91  3E05               	addlw	5
 13649  0D92  0086               	movwf	6
 13650  0D93  3002               	movlw	2	; select bank4/5
 13651  0D94  0087               	movwf	7
 13652  0D95  0020               	movlb	0	; select bank0
 13653  0D96  085D               	movf	??_Flash_Memory_Initialization,w
 13654  0D97  0081               	movwf	1
 13655                           
 13656                           ;MCU_16f1518_B1.c: 462: Memory->Data[31]=0xaa;
 13657  0D98  30AA               	movlw	170
 13658  0D99  00DD               	movwf	??_Flash_Memory_Initialization
 13659  0D9A  0021               	movlb	1	; select bank1
 13660  0D9B  0868               	movf	_Memory^(0+128),w
 13661  0D9C  3E1F               	addlw	31
 13662  0D9D  0086               	movwf	6
 13663  0D9E  3002               	movlw	2	; select bank4/5
 13664  0D9F  0087               	movwf	7
 13665  0DA0  0020               	movlb	0	; select bank0
 13666  0DA1  085D               	movf	??_Flash_Memory_Initialization,w
 13667  0DA2  0081               	movwf	1
 13668                           
 13669                           ;MCU_16f1518_B1.c: 463: Product->Data[21]=i;
 13670  0DA3  085E               	movf	Flash_Memory_Initialization@i,w
 13671  0DA4  00DD               	movwf	??_Flash_Memory_Initialization
 13672  0DA5  086F               	movf	_Product,w
 13673  0DA6  3E15               	addlw	21
 13674  0DA7  0086               	movwf	6
 13675  0DA8  3001               	movlw	1	; select bank2/3
 13676  0DA9  0087               	movwf	7
 13677  0DAA  085D               	movf	??_Flash_Memory_Initialization,w
 13678  0DAB  0081               	movwf	1
 13679                           
 13680                           ;MCU_16f1518_B1.c: 464: Product->Data[22]=i;
 13681  0DAC  085E               	movf	Flash_Memory_Initialization@i,w
 13682  0DAD  00DD               	movwf	??_Flash_Memory_Initialization
 13683  0DAE  086F               	movf	_Product,w
 13684  0DAF  3E16               	addlw	22
 13685  0DB0  0086               	movwf	6
 13686  0DB1  3001               	movlw	1	; select bank2/3
 13687  0DB2  0087               	movwf	7
 13688  0DB3  085D               	movf	??_Flash_Memory_Initialization,w
 13689  0DB4  0081               	movwf	1
 13690                           
 13691                           ;MCU_16f1518_B1.c: 465: Product->Data[23]=i;
 13692  0DB5  085E               	movf	Flash_Memory_Initialization@i,w
 13693  0DB6  00DD               	movwf	??_Flash_Memory_Initialization
 13694  0DB7  086F               	movf	_Product,w
 13695  0DB8  3E17               	addlw	23
 13696  0DB9  0086               	movwf	6
 13697  0DBA  3001               	movlw	1	; select bank2/3
 13698  0DBB  0087               	movwf	7
 13699  0DBC  085D               	movf	??_Flash_Memory_Initialization,w
 13700  0DBD  0081               	movwf	1
 13701                           
 13702                           ;MCU_16f1518_B1.c: 466: GIE=0;
 13703  0DBE  138B               	bcf	11,7	;volatile
 13704                           
 13705                           ;MCU_16f1518_B1.c: 467: Flash_Memory_Write();
 13706  0DBF  319A  229F         	fcall	_Flash_Memory_Write
 13707                           
 13708                           ;MCU_16f1518_B1.c: 468: GIE=1;
 13709  0DC1  178B               	bsf	11,7	;volatile
 13710                           
 13711                           ;MCU_16f1518_B1.c: 469: TMain->FirstOpen=1;
 13712  0DC2  0021               	movlb	1	; select bank1
 13713  0DC3  0869               	movf	_TMain^(0+128),w
 13714  0DC4  0086               	movwf	6
 13715  0DC5  3001               	movlw	1	; select bank2/3
 13716  0DC6  0087               	movwf	7
 13717  0DC7  1681               	bsf	1,5
 13718                           
 13719                           ;MCU_16f1518_B1.c: 470: TMain->First=1;
 13720  0DC8  0869               	movf	_TMain^(0+128),w
 13721  0DC9  3E03               	addlw	3
 13722  0DCA  0086               	movwf	6
 13723  0DCB  3001               	movlw	1	; select bank2/3
 13724  0DCC  0087               	movwf	7
 13725  0DCD  1481               	bsf	1,1
 13726  0DCE  0008               	return
 13727  0DCF                     __end_of_Flash_Memory_Initialization:	
 13728                           
 13729                           	psect	text78
 13730  1A9F                     __ptext78:	
 13731 ;; *************** function _Flash_Memory_Write *****************
 13732 ;; Defined at:
 13733 ;;		line 518 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13734 ;; Parameters:    Size  Location     Type
 13735 ;;		None
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  i               1    1[BANK0 ] unsigned char 
 13738 ;; Return value:  Size  Location     Type
 13739 ;;		None               void
 13740 ;; Registers used:
 13741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;Total ram usage:        2 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    5
 13754 ;; This function calls:
 13755 ;;		_Flash_Memory_Unlock
 13756 ;; This function is called by:
 13757 ;;		_Flash_Memory_Initialization
 13758 ;;		_Flash_Memory_Modify
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           
 13763                           ;psect for function _Flash_Memory_Write
 13764  1A9F                     _Flash_Memory_Write:	
 13765                           
 13766                           ;MCU_16f1518_B1.c: 520: char i;
 13767                           ;MCU_16f1518_B1.c: 521: CFGS=0;
 13768                           
 13769                           ;incstack = 0
 13770                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13771  1A9F  0023               	movlb	3	; select bank3
 13772  1AA0  1315               	bcf	21,6	;volatile
 13773                           
 13774                           ;MCU_16f1518_B1.c: 522: PMADRH=0x30;
 13775  1AA1  3030               	movlw	48
 13776  1AA2  0092               	movwf	18	;volatile
 13777                           
 13778                           ;MCU_16f1518_B1.c: 523: PMDATH=0;
 13779  1AA3  0194               	clrf	20	;volatile
 13780                           
 13781                           ;MCU_16f1518_B1.c: 524: FREE=0;
 13782  1AA4  1215               	bcf	21,4	;volatile
 13783                           
 13784                           ;MCU_16f1518_B1.c: 525: LWLO=1;
 13785  1AA5  1695               	bsf	21,5	;volatile
 13786                           
 13787                           ;MCU_16f1518_B1.c: 526: WREN=1;
 13788  1AA6  1515               	bsf	21,2	;volatile
 13789                           
 13790                           ;MCU_16f1518_B1.c: 527: for(i=0 ; i<32 ; i++)
 13791  1AA7  0020               	movlb	0	; select bank0
 13792  1AA8  01A1               	clrf	Flash_Memory_Write@i
 13793  1AA9  3020               	movlw	32
 13794  1AAA  0221               	subwf	Flash_Memory_Write@i,w
 13795  1AAB  1803               	btfsc	3,0
 13796  1AAC  2AC9               	goto	l1752
 13797  1AAD                     l9070:	
 13798                           
 13799                           ;MCU_16f1518_B1.c: 528: {
 13800                           ;MCU_16f1518_B1.c: 529: PMADRL=i;
 13801  1AAD  0821               	movf	Flash_Memory_Write@i,w
 13802  1AAE  0023               	movlb	3	; select bank3
 13803  1AAF  0091               	movwf	17	;volatile
 13804                           
 13805                           ;MCU_16f1518_B1.c: 530: PMDATL=Memory->Data[i];
 13806  1AB0  0020               	movlb	0	; select bank0
 13807  1AB1  0821               	movf	Flash_Memory_Write@i,w
 13808  1AB2  0021               	movlb	1	; select bank1
 13809  1AB3  0768               	addwf	_Memory^(0+128),w
 13810  1AB4  0020               	movlb	0	; select bank0
 13811  1AB5  00A0               	movwf	??_Flash_Memory_Write
 13812  1AB6  0820               	movf	??_Flash_Memory_Write,w
 13813  1AB7  0086               	movwf	6
 13814  1AB8  3002               	movlw	2	; select bank4/5
 13815  1AB9  0087               	movwf	7
 13816  1ABA  0801               	movf	1,w
 13817  1ABB  0023               	movlb	3	; select bank3
 13818  1ABC  0093               	movwf	19	;volatile
 13819                           
 13820                           ;MCU_16f1518_B1.c: 531: Flash_Memory_Unlock();
 13821  1ABD  31A4  2407  319A   	fcall	_Flash_Memory_Unlock
 13822  1AC0  3001               	movlw	1
 13823  1AC1  0020               	movlb	0	; select bank0
 13824  1AC2  00A0               	movwf	??_Flash_Memory_Write
 13825  1AC3  0820               	movf	??_Flash_Memory_Write,w
 13826  1AC4  07A1               	addwf	Flash_Memory_Write@i,f
 13827  1AC5  3020               	movlw	32
 13828  1AC6  0221               	subwf	Flash_Memory_Write@i,w
 13829  1AC7  1C03               	skipc
 13830  1AC8  2AAD               	goto	l9070
 13831  1AC9                     l1752:	
 13832                           
 13833                           ;MCU_16f1518_B1.c: 532: }
 13834                           ;MCU_16f1518_B1.c: 533: LWLO=0;
 13835  1AC9  0023               	movlb	3	; select bank3
 13836  1ACA  1295               	bcf	21,5	;volatile
 13837                           
 13838                           ;MCU_16f1518_B1.c: 534: Flash_Memory_Unlock();
 13839  1ACB  31A4  2407         	fcall	_Flash_Memory_Unlock
 13840                           
 13841                           ;MCU_16f1518_B1.c: 535: WREN=0;
 13842  1ACD  0023               	movlb	3	; select bank3
 13843  1ACE  1115               	bcf	21,2	;volatile
 13844  1ACF  0008               	return
 13845  1AD0                     __end_of_Flash_Memory_Write:	
 13846                           
 13847                           	psect	text79
 13848  2407                     __ptext79:	
 13849 ;; *************** function _Flash_Memory_Unlock *****************
 13850 ;; Defined at:
 13851 ;;		line 497 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;		None
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;		None               void
 13858 ;; Registers used:
 13859 ;;		wreg
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;Total ram usage:        0 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    4
 13872 ;; This function calls:
 13873 ;;		Nothing
 13874 ;; This function is called by:
 13875 ;;		_Flash_Memory_Write
 13876 ;;		_Flash_Memory_Erasing
 13877 ;; This function uses a non-reentrant model
 13878 ;;
 13879                           
 13880                           
 13881                           ;psect for function _Flash_Memory_Unlock
 13882  2407                     _Flash_Memory_Unlock:	
 13883                           
 13884                           ;MCU_16f1518_B1.c: 499: PMCON2=0x55;
 13885                           
 13886                           ;incstack = 0
 13887                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13888  2407  3055               	movlw	85
 13889  2408  0023               	movlb	3	; select bank3
 13890  2409  0096               	movwf	22	;volatile
 13891                           
 13892                           ;MCU_16f1518_B1.c: 500: PMCON2=0xaa;
 13893  240A  30AA               	movlw	170
 13894  240B  0096               	movwf	22	;volatile
 13895                           
 13896                           ;MCU_16f1518_B1.c: 501: WR=1;
 13897  240C  1495               	bsf	21,1	;volatile
 13898                           
 13899                           ;MCU_16f1518_B1.c: 502: __nop();
 13900  240D  0000               	nop
 13901                           
 13902                           ;MCU_16f1518_B1.c: 503: __nop();
 13903  240E  0000               	nop
 13904  240F  0008               	return
 13905  2410                     __end_of_Flash_Memory_Unlock:	
 13906                           
 13907                           	psect	text80
 13908  26E6                     __ptext80:	
 13909 ;; *************** function _Flash_Memory_Read *****************
 13910 ;; Defined at:
 13911 ;;		line 506 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;  address         1    wreg     unsigned char 
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;  address         1    2[BANK0 ] unsigned char 
 13916 ;;  ret             1    3[BANK0 ] unsigned char 
 13917 ;;  i               1    1[BANK0 ] unsigned char 
 13918 ;; Return value:  Size  Location     Type
 13919 ;;                  1    wreg      unsigned char 
 13920 ;; Registers used:
 13921 ;;		wreg, status,2
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 0/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;Total ram usage:        4 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    4
 13934 ;; This function calls:
 13935 ;;		Nothing
 13936 ;; This function is called by:
 13937 ;;		_Flash_Memory_Initialization
 13938 ;;		_Flash_Memory_Modify
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           
 13943                           ;psect for function _Flash_Memory_Read
 13944  26E6                     _Flash_Memory_Read:	
 13945                           
 13946                           ;incstack = 0
 13947                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13948                           ;Flash_Memory_Read@address stored from wreg
 13949  26E6  0020               	movlb	0	; select bank0
 13950  26E7  00A2               	movwf	Flash_Memory_Read@address
 13951                           
 13952                           ;MCU_16f1518_B1.c: 508: char i,ret=0;
 13953  26E8  01A3               	clrf	Flash_Memory_Read@ret
 13954                           
 13955                           ;MCU_16f1518_B1.c: 509: PMADRH=0x30;
 13956  26E9  3030               	movlw	48
 13957  26EA  0023               	movlb	3	; select bank3
 13958  26EB  0092               	movwf	18	;volatile
 13959                           
 13960                           ;MCU_16f1518_B1.c: 510: PMADRL=address;
 13961  26EC  0020               	movlb	0	; select bank0
 13962  26ED  0822               	movf	Flash_Memory_Read@address,w
 13963  26EE  0023               	movlb	3	; select bank3
 13964  26EF  0091               	movwf	17	;volatile
 13965                           
 13966                           ;MCU_16f1518_B1.c: 511: CFGS=0;
 13967  26F0  1315               	bcf	21,6	;volatile
 13968                           
 13969                           ;MCU_16f1518_B1.c: 512: RD=1;
 13970  26F1  1415               	bsf	21,0	;volatile
 13971                           
 13972                           ;MCU_16f1518_B1.c: 513: i=PMDATH;
 13973  26F2  0814               	movf	20,w	;volatile
 13974  26F3  0020               	movlb	0	; select bank0
 13975  26F4  00A0               	movwf	??_Flash_Memory_Read
 13976  26F5  0820               	movf	??_Flash_Memory_Read,w
 13977  26F6  00A1               	movwf	Flash_Memory_Read@i
 13978                           
 13979                           ;MCU_16f1518_B1.c: 514: ret=PMDATL;
 13980  26F7  0023               	movlb	3	; select bank3
 13981  26F8  0813               	movf	19,w	;volatile
 13982  26F9  0020               	movlb	0	; select bank0
 13983  26FA  00A0               	movwf	??_Flash_Memory_Read
 13984  26FB  0820               	movf	??_Flash_Memory_Read,w
 13985  26FC  00A3               	movwf	Flash_Memory_Read@ret
 13986                           
 13987                           ;MCU_16f1518_B1.c: 515: return ret;
 13988  26FD  0823               	movf	Flash_Memory_Read@ret,w
 13989  26FE  0008               	return
 13990  26FF                     __end_of_Flash_Memory_Read:	
 13991                           
 13992                           	psect	text81
 13993  244F                     __ptext81:	
 13994 ;; *************** function _DimmerLights_Main *****************
 13995 ;; Defined at:
 13996 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;		None
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;		None
 14001 ;; Return value:  Size  Location     Type
 14002 ;;		None               void
 14003 ;; Registers used:
 14004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14005 ;; Tracked objects:
 14006 ;;		On entry : 0/0
 14007 ;;		On exit  : 0/0
 14008 ;;		Unchanged: 0/0
 14009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;Total ram usage:        0 bytes
 14015 ;; Hardware stack levels used:    1
 14016 ;; Hardware stack levels required when called:    9
 14017 ;; This function calls:
 14018 ;;		_DimmerLights_Close
 14019 ;;		_setDimmerLights_Main
 14020 ;; This function is called by:
 14021 ;;		_main
 14022 ;; This function uses a non-reentrant model
 14023 ;;
 14024                           
 14025                           
 14026                           ;psect for function _DimmerLights_Main
 14027  244F                     _DimmerLights_Main:	
 14028                           
 14029                           ;Dimmer_B1.c: 106: setDimmerLights_Main(1);
 14030                           
 14031                           ;incstack = 0
 14032                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14033  244F  3001               	movlw	1
 14034  2450  3196  2654  31A4   	fcall	_setDimmerLights_Main
 14035                           
 14036                           ;Dimmer_B1.c: 110: setDimmerLights_Main(2);
 14037  2453  3002               	movlw	2
 14038  2454  3196  2654  31A4   	fcall	_setDimmerLights_Main
 14039                           
 14040                           ;Dimmer_B1.c: 117: DimmerLights_Close();
 14041  2457  31A7  2732         	fcall	_DimmerLights_Close
 14042  2459  0008               	return
 14043  245A                     __end_of_DimmerLights_Main:	
 14044                           
 14045                           	psect	text82
 14046  1654                     __ptext82:	
 14047 ;; *************** function _setDimmerLights_Main *****************
 14048 ;; Defined at:
 14049 ;;		line 120 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14050 ;; Parameters:    Size  Location     Type
 14051 ;;  lights          1    wreg     unsigned char 
 14052 ;; Auto vars:     Size  Location     Type
 14053 ;;  lights          1   66[BANK0 ] unsigned char 
 14054 ;;  clear           1   65[BANK0 ] unsigned char 
 14055 ;; Return value:  Size  Location     Type
 14056 ;;		None               void
 14057 ;; Registers used:
 14058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        2 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    8
 14071 ;; This function calls:
 14072 ;;		_DimmerLightsPointSelect
 14073 ;;		_getDimmerLights_Trigger
 14074 ;;		_setBuz
 14075 ;;		_setDimmerLights
 14076 ;;		_setDimmerLights_Adj
 14077 ;; This function is called by:
 14078 ;;		_DimmerLights_Main
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function _setDimmerLights_Main
 14084  1654                     _setDimmerLights_Main:	
 14085                           
 14086                           ;incstack = 0
 14087                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14088                           ;setDimmerLights_Main@lights stored from wreg
 14089  1654  0020               	movlb	0	; select bank0
 14090  1655  00E2               	movwf	setDimmerLights_Main@lights
 14091                           
 14092                           ;Dimmer_B1.c: 122: char clear=1;
 14093  1656  01E1               	clrf	setDimmerLights_Main@clear
 14094  1657  0AE1               	incf	setDimmerLights_Main@clear,f
 14095                           
 14096                           ;Dimmer_B1.c: 123: DimmerLightsPointSelect(lights);
 14097  1658  0862               	movf	setDimmerLights_Main@lights,w
 14098  1659  31A5  25DF  3196   	fcall	_DimmerLightsPointSelect
 14099                           
 14100                           ;Dimmer_B1.c: 124: if(DimmerLights->Trigger)
 14101  165C  0020               	movlb	0	; select bank0
 14102  165D  086C               	movf	_DimmerLights,w
 14103  165E  3E09               	addlw	9
 14104  165F  0086               	movwf	6
 14105  1660  3001               	movlw	1	; select bank2/3
 14106  1661  0087               	movwf	7
 14107  1662  1C81               	btfss	1,1
 14108  1663  2EA4               	goto	l9348
 14109                           
 14110                           ;Dimmer_B1.c: 125: {
 14111                           ;Dimmer_B1.c: 151: if(lights == 1)
 14112  1664  0862               	movf	setDimmerLights_Main@lights,w
 14113  1665  3A01               	xorlw	1
 14114  1666  1D03               	skipz
 14115  1667  2E6A               	goto	l9326
 14116                           
 14117                           ;Dimmer_B1.c: 152: {
 14118                           ;Dimmer_B1.c: 153: if(!DimmerLights22->Clear)
 14119  1668  087A               	movf	_DimmerLights22,w
 14120  1669  2E6F               	goto	L13
 14121  166A                     l9326:	
 14122                           ;Dimmer_B1.c: 156: }
 14123                           ;Dimmer_B1.c: 157: }
 14124                           
 14125                           ;Dimmer_B1.c: 154: {
 14126                           ;Dimmer_B1.c: 155: clear=0;
 14127                           
 14128                           
 14129                           ;Dimmer_B1.c: 158: else if(lights == 2)
 14130  166A  0862               	movf	setDimmerLights_Main@lights,w
 14131  166B  3A02               	xorlw	2
 14132  166C  1D03               	skipz
 14133  166D  2E75               	goto	l9332
 14134                           
 14135                           ;Dimmer_B1.c: 159: {
 14136                           ;Dimmer_B1.c: 160: if(!DimmerLights11->Clear)
 14137  166E  0879               	movf	_DimmerLights11,w
 14138  166F                     L13:	
 14139  166F  3E0C               	addlw	12
 14140  1670  0086               	movwf	6
 14141  1671  3001               	movlw	1	; select bank2/3
 14142  1672  0087               	movwf	7
 14143  1673  1C01               	btfss	1,0
 14144                           
 14145                           ;Dimmer_B1.c: 161: {
 14146                           ;Dimmer_B1.c: 162: clear=0;
 14147  1674  01E1               	clrf	setDimmerLights_Main@clear
 14148  1675                     l9332:	
 14149                           
 14150                           ;Dimmer_B1.c: 163: }
 14151                           ;Dimmer_B1.c: 164: }
 14152                           ;Dimmer_B1.c: 169: if(clear)
 14153  1675  0861               	movf	setDimmerLights_Main@clear,w
 14154  1676  1903               	btfsc	3,2
 14155  1677  0008               	return
 14156                           
 14157                           ;Dimmer_B1.c: 170: {
 14158                           ;Dimmer_B1.c: 171: if(DimmerLights->Switch)
 14159  1678  086C               	movf	_DimmerLights,w
 14160  1679  3E09               	addlw	9
 14161  167A  0086               	movwf	6
 14162  167B  3001               	movlw	1	; select bank2/3
 14163  167C  0087               	movwf	7
 14164  167D  1C01               	btfss	1,0
 14165  167E  2E92               	goto	l9342
 14166                           
 14167                           ;Dimmer_B1.c: 172: {
 14168                           ;Dimmer_B1.c: 173: DimmerLights->Trigger=0;
 14169  167F  086C               	movf	_DimmerLights,w
 14170  1680  3E09               	addlw	9
 14171  1681  0086               	movwf	6
 14172  1682  3001               	movlw	1	; select bank2/3
 14173  1683  0087               	movwf	7
 14174  1684  1081               	bcf	1,1
 14175                           
 14176                           ;Dimmer_B1.c: 174: setDimmerLights(lights,1);
 14177  1685  01A4               	clrf	setDimmerLights@status
 14178  1686  0AA4               	incf	setDimmerLights@status,f
 14179  1687  0862               	movf	setDimmerLights_Main@lights,w
 14180  1688  3188  2001         	fcall	_setDimmerLights
 14181                           
 14182                           ;Dimmer_B1.c: 177: DimmerLights->Clear=0;
 14183  168A  0020               	movlb	0	; select bank0
 14184  168B  086C               	movf	_DimmerLights,w
 14185  168C  3E0C               	addlw	12
 14186  168D  0086               	movwf	6
 14187  168E  3001               	movlw	1	; select bank2/3
 14188  168F  0087               	movwf	7
 14189  1690  1001               	bcf	1,0
 14190                           
 14191                           ;Dimmer_B1.c: 179: }
 14192  1691  0008               	return
 14193  1692                     l9342:	
 14194                           
 14195                           ;Dimmer_B1.c: 180: else
 14196                           ;Dimmer_B1.c: 181: {
 14197                           ;Dimmer_B1.c: 182: DimmerLights->Trigger=0;
 14198  1692  086C               	movf	_DimmerLights,w
 14199  1693  3E09               	addlw	9
 14200  1694  0086               	movwf	6
 14201  1695  3001               	movlw	1	; select bank2/3
 14202  1696  0087               	movwf	7
 14203  1697  1081               	bcf	1,1
 14204                           
 14205                           ;Dimmer_B1.c: 183: setDimmerLights(lights,0);
 14206  1698  01A4               	clrf	setDimmerLights@status
 14207  1699  0862               	movf	setDimmerLights_Main@lights,w
 14208  169A  3188  2001         	fcall	_setDimmerLights
 14209                           
 14210                           ;Dimmer_B1.c: 186: DimmerLights->Clear=0;
 14211  169C  0020               	movlb	0	; select bank0
 14212  169D  086C               	movf	_DimmerLights,w
 14213  169E  3E0C               	addlw	12
 14214  169F  0086               	movwf	6
 14215  16A0  3001               	movlw	1	; select bank2/3
 14216  16A1  0087               	movwf	7
 14217  16A2  1001               	bcf	1,0
 14218                           
 14219                           ;Dimmer_B1.c: 188: }
 14220                           ;Dimmer_B1.c: 189: }
 14221                           ;Dimmer_B1.c: 190: }
 14222  16A3  0008               	return
 14223  16A4                     l9348:	
 14224                           
 14225                           ;Dimmer_B1.c: 191: else
 14226                           ;Dimmer_B1.c: 192: {
 14227                           ;Dimmer_B1.c: 193: if(DimmerLights->TriggerAdj)
 14228  16A4  086C               	movf	_DimmerLights,w
 14229  16A5  3E09               	addlw	9
 14230  16A6  0086               	movwf	6
 14231  16A7  3001               	movlw	1	; select bank2/3
 14232  16A8  0087               	movwf	7
 14233  16A9  1D81               	btfss	1,3
 14234  16AA  0008               	return
 14235                           
 14236                           ;Dimmer_B1.c: 194: {
 14237                           ;Dimmer_B1.c: 195: if(!getDimmerLights_Trigger())
 14238  16AB  31A6  2606  3196   	fcall	_getDimmerLights_Trigger
 14239  16AE  3800               	iorlw	0
 14240  16AF  1903               	btfsc	3,2
 14241  16B0  2EB3               	goto	l9352
 14242  16B1  0020               	movlb	0	; select bank0
 14243  16B2  0008               	return
 14244  16B3                     l9352:	
 14245                           
 14246                           ;Dimmer_B1.c: 196: {
 14247                           ;Dimmer_B1.c: 197: DimmerLightsPointSelect(lights);
 14248  16B3  0020               	movlb	0	; select bank0
 14249  16B4  0862               	movf	setDimmerLights_Main@lights,w
 14250  16B5  31A5  25DF  3196   	fcall	_DimmerLightsPointSelect
 14251                           
 14252                           ;Dimmer_B1.c: 198: DimmerLights->TriggerAdj=0;
 14253  16B8  0020               	movlb	0	; select bank0
 14254  16B9  086C               	movf	_DimmerLights,w
 14255  16BA  3E09               	addlw	9
 14256  16BB  0086               	movwf	6
 14257  16BC  3001               	movlw	1	; select bank2/3
 14258  16BD  0087               	movwf	7
 14259  16BE  1181               	bcf	1,3
 14260                           
 14261                           ;Dimmer_B1.c: 199: if(DimmerLights->AdjGo)
 14262  16BF  086C               	movf	_DimmerLights,w
 14263  16C0  3E09               	addlw	9
 14264  16C1  0086               	movwf	6
 14265  16C2  3001               	movlw	1	; select bank2/3
 14266  16C3  0087               	movwf	7
 14267  16C4  1D01               	btfss	1,2
 14268  16C5  2ED6               	goto	l9360
 14269                           
 14270                           ;Dimmer_B1.c: 200: {
 14271                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,1);
 14272  16C6  01DD               	clrf	setDimmerLights_Adj@status
 14273  16C7  0ADD               	incf	setDimmerLights_Adj@status,f
 14274  16C8  0862               	movf	setDimmerLights_Main@lights,w
 14275  16C9  3191  2101  3196   	fcall	_setDimmerLights_Adj
 14276                           
 14277                           ;Dimmer_B1.c: 202: setBuz(1,100);
 14278  16CC  3064               	movlw	100
 14279  16CD  0020               	movlb	0	; select bank0
 14280  16CE  00A6               	movwf	setBuz@time
 14281  16CF  3000               	movlw	0
 14282  16D0  00A7               	movwf	setBuz@time+1
 14283  16D1  3001               	movlw	1
 14284  16D2  3193  23E5         	fcall	_setBuz
 14285                           
 14286                           ;Dimmer_B1.c: 203: }
 14287  16D4  0020               	movlb	0	; select bank0
 14288  16D5  0008               	return
 14289  16D6                     l9360:	
 14290                           
 14291                           ;Dimmer_B1.c: 204: else
 14292                           ;Dimmer_B1.c: 205: {
 14293                           ;Dimmer_B1.c: 206: setDimmerLights_Adj(lights,0);
 14294  16D6  0020               	movlb	0	; select bank0
 14295  16D7  01DD               	clrf	setDimmerLights_Adj@status
 14296  16D8  0862               	movf	setDimmerLights_Main@lights,w
 14297  16D9  3191  2101         	fcall	_setDimmerLights_Adj
 14298  16DB  0020               	movlb	0	; select bank0
 14299  16DC  0008               	return
 14300  16DD                     __end_of_setDimmerLights_Main:	
 14301                           
 14302                           	psect	text83
 14303  1101                     __ptext83:	
 14304 ;; *************** function _setDimmerLights_Adj *****************
 14305 ;; Defined at:
 14306 ;;		line 403 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14307 ;; Parameters:    Size  Location     Type
 14308 ;;  lights          1    wreg     unsigned char 
 14309 ;;  status          1   61[BANK0 ] unsigned char 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;  lights          1   64[BANK0 ] unsigned char 
 14312 ;; Return value:  Size  Location     Type
 14313 ;;		None               void
 14314 ;; Registers used:
 14315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;Total ram usage:        4 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; Hardware stack levels required when called:    7
 14328 ;; This function calls:
 14329 ;;		_DimmerLightsPointSelect
 14330 ;;		_setLoad_StatusOff
 14331 ;;		_setPercentValue
 14332 ;;		_setRF_DimmerLights
 14333 ;;		_setTxData
 14334 ;; This function is called by:
 14335 ;;		_setDimmerLights_Main
 14336 ;; This function uses a non-reentrant model
 14337 ;;
 14338                           
 14339                           
 14340                           ;psect for function _setDimmerLights_Adj
 14341  1101                     _setDimmerLights_Adj:	
 14342                           
 14343                           ;incstack = 0
 14344                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14345                           ;setDimmerLights_Adj@lights stored from wreg
 14346  1101  0020               	movlb	0	; select bank0
 14347  1102  00E0               	movwf	setDimmerLights_Adj@lights
 14348                           
 14349                           ;Dimmer_B1.c: 405: DimmerLightsPointSelect(lights);
 14350  1103  0860               	movf	setDimmerLights_Adj@lights,w
 14351  1104  31A5  25DF  3191   	fcall	_DimmerLightsPointSelect
 14352                           
 14353                           ;Dimmer_B1.c: 406: if(status)
 14354  1107  0020               	movlb	0	; select bank0
 14355  1108  085D               	movf	setDimmerLights_Adj@status,w
 14356  1109  1903               	btfsc	3,2
 14357  110A  2916               	goto	l9038
 14358                           
 14359                           ;Dimmer_B1.c: 407: {
 14360                           ;Dimmer_B1.c: 408: DimmerLights->AdjFlag=1;
 14361  110B  086C               	movf	_DimmerLights,w
 14362  110C  0086               	movwf	6
 14363  110D  3001               	movlw	1	; select bank2/3
 14364  110E  0087               	movwf	7
 14365  110F  1581               	bsf	1,3
 14366                           
 14367                           ;Dimmer_B1.c: 409: DimmerLights->Signal=1;
 14368  1110  086C               	movf	_DimmerLights,w
 14369  1111  0086               	movwf	6
 14370  1112  3001               	movlw	1	; select bank2/3
 14371  1113  0087               	movwf	7
 14372  1114  1481               	bsf	1,1
 14373                           
 14374                           ;Dimmer_B1.c: 410: }
 14375  1115  0008               	return
 14376  1116                     l9038:	
 14377                           
 14378                           ;Dimmer_B1.c: 411: else
 14379                           ;Dimmer_B1.c: 412: {
 14380                           ;Dimmer_B1.c: 413: if(DimmerLights->AdjFlag)
 14381  1116  086C               	movf	_DimmerLights,w
 14382  1117  0086               	movwf	6
 14383  1118  3001               	movlw	1	; select bank2/3
 14384  1119  0087               	movwf	7
 14385  111A  1D81               	btfss	1,3
 14386  111B  0008               	return
 14387                           
 14388                           ;Dimmer_B1.c: 414: {
 14389                           ;Dimmer_B1.c: 415: DimmerLights->Signal=0;
 14390  111C  086C               	movf	_DimmerLights,w
 14391  111D  0086               	movwf	6
 14392  111E  3001               	movlw	1	; select bank2/3
 14393  111F  0087               	movwf	7
 14394  1120  1081               	bcf	1,1
 14395                           
 14396                           ;Dimmer_B1.c: 416: DimmerLights->AdjFlag=0;
 14397  1121  086C               	movf	_DimmerLights,w
 14398  1122  0086               	movwf	6
 14399  1123  3001               	movlw	1	; select bank2/3
 14400  1124  0087               	movwf	7
 14401  1125  1181               	bcf	1,3
 14402                           
 14403                           ;Dimmer_B1.c: 417: setLoad_StatusOff(0,1);
 14404  1126  01A0               	clrf	setLoad_StatusOff@command
 14405  1127  0AA0               	incf	setLoad_StatusOff@command,f
 14406  1128  3000               	movlw	0
 14407  1129  319A  226E  3191   	fcall	_setLoad_StatusOff
 14408                           
 14409                           ;Dimmer_B1.c: 418: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 14410  112C  0020               	movlb	0	; select bank0
 14411  112D  086C               	movf	_DimmerLights,w
 14412  112E  3E04               	addlw	4
 14413  112F  0086               	movwf	6
 14414  1130  3001               	movlw	1	; select bank2/3
 14415  1131  0087               	movwf	7
 14416  1132  0801               	movf	1,w
 14417  1133  00DE               	movwf	??_setDimmerLights_Adj
 14418  1134  086C               	movf	_DimmerLights,w
 14419  1135  3E05               	addlw	5
 14420  1136  0086               	movwf	6
 14421  1137  3001               	movlw	1	; select bank2/3
 14422  1138  0087               	movwf	7
 14423  1139  085E               	movf	??_setDimmerLights_Adj,w
 14424  113A  0081               	movwf	1
 14425                           
 14426                           ;Dimmer_B1.c: 420: Memory->Modify=1;
 14427  113B  0021               	movlb	1	; select bank1
 14428  113C  0868               	movf	_Memory^(0+128),w
 14429  113D  3E22               	addlw	34
 14430  113E  0086               	movwf	6
 14431  113F  3002               	movlw	2	; select bank4/5
 14432  1140  0087               	movwf	7
 14433  1141  1401               	bsf	1,0
 14434                           
 14435                           ;Dimmer_B1.c: 421: Product->Data[(20+lights)]=setPercentValue(DimmerLights->MaxmumValue)
      +                          ;
 14436  1142  0020               	movlb	0	; select bank0
 14437  1143  086C               	movf	_DimmerLights,w
 14438  1144  3E05               	addlw	5
 14439  1145  0086               	movwf	6
 14440  1146  3001               	movlw	1	; select bank2/3
 14441  1147  0087               	movwf	7
 14442  1148  0801               	movf	1,w
 14443  1149  319D  2569  3191   	fcall	_setPercentValue
 14444  114C  0020               	movlb	0	; select bank0
 14445  114D  00DE               	movwf	??_setDimmerLights_Adj
 14446  114E  0860               	movf	setDimmerLights_Adj@lights,w
 14447  114F  3E14               	addlw	20
 14448  1150  076F               	addwf	_Product,w
 14449  1151  00DF               	movwf	??_setDimmerLights_Adj+1
 14450  1152  085F               	movf	??_setDimmerLights_Adj+1,w
 14451  1153  0086               	movwf	6
 14452  1154  3001               	movlw	1	; select bank2/3
 14453  1155  0087               	movwf	7
 14454  1156  085E               	movf	??_setDimmerLights_Adj,w
 14455  1157  0081               	movwf	1
 14456                           
 14457                           ;Dimmer_B1.c: 422: setRF_DimmerLights(lights,1);
 14458  1158  01A0               	clrf	setRF_DimmerLights@on
 14459  1159  0AA0               	incf	setRF_DimmerLights@on,f
 14460  115A  0860               	movf	setDimmerLights_Adj@lights,w
 14461  115B  319E  26EE  3191   	fcall	_setRF_DimmerLights
 14462                           
 14463                           ;Dimmer_B1.c: 423: setTxData(1);
 14464  115E  3001               	movlw	1
 14465  115F  318B  2318         	fcall	_setTxData
 14466  1161  0008               	return
 14467  1162                     __end_of_setDimmerLights_Adj:	
 14468                           
 14469                           	psect	text84
 14470  1D69                     __ptext84:	
 14471 ;; *************** function _setPercentValue *****************
 14472 ;; Defined at:
 14473 ;;		line 516 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;  value           1    wreg     unsigned char 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  value           1   57[BANK0 ] unsigned char 
 14478 ;;  i               3   58[BANK0 ] float 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  1    wreg      unsigned char 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0, pclath, cstack
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;Total ram usage:        4 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    6
 14495 ;; This function calls:
 14496 ;;		___awtoft
 14497 ;;		___ftdiv
 14498 ;;		___fttol
 14499 ;; This function is called by:
 14500 ;;		_setDimmerLights_Adj
 14501 ;;		_Flash_Memory_Initialization
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           
 14506                           ;psect for function _setPercentValue
 14507  1D69                     _setPercentValue:	
 14508                           
 14509                           ;incstack = 0
 14510                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14511                           ;setPercentValue@value stored from wreg
 14512  1D69  0020               	movlb	0	; select bank0
 14513  1D6A  00D9               	movwf	setPercentValue@value
 14514                           
 14515                           ;Dimmer_B1.c: 519: float i=((char)((100-20)*1.5))-((char)((100-60)*1.5));
 14516  1D6B  3000               	movlw	0
 14517  1D6C  00DA               	movwf	setPercentValue@i
 14518  1D6D  3070               	movlw	112
 14519  1D6E  00DB               	movwf	setPercentValue@i+1
 14520  1D6F  3042               	movlw	66
 14521  1D70  00DC               	movwf	setPercentValue@i+2
 14522                           
 14523                           ;Dimmer_B1.c: 520: i/=100;
 14524  1D71  3000               	movlw	0
 14525  1D72  00AE               	movwf	___ftdiv@f2
 14526  1D73  30C8               	movlw	200
 14527  1D74  00AF               	movwf	___ftdiv@f2+1
 14528  1D75  3042               	movlw	66
 14529  1D76  00B0               	movwf	___ftdiv@f2+2
 14530  1D77  085A               	movf	setPercentValue@i,w
 14531  1D78  00B1               	movwf	___ftdiv@f1
 14532  1D79  085B               	movf	setPercentValue@i+1,w
 14533  1D7A  00B2               	movwf	___ftdiv@f1+1
 14534  1D7B  085C               	movf	setPercentValue@i+2,w
 14535  1D7C  00B3               	movwf	___ftdiv@f1+2
 14536  1D7D  3189  21BB  319D   	fcall	___ftdiv
 14537  1D80  0020               	movlb	0	; select bank0
 14538  1D81  082E               	movf	?___ftdiv,w
 14539  1D82  00DA               	movwf	setPercentValue@i
 14540  1D83  082F               	movf	?___ftdiv+1,w
 14541  1D84  00DB               	movwf	setPercentValue@i+1
 14542  1D85  0830               	movf	?___ftdiv+2,w
 14543  1D86  00DC               	movwf	setPercentValue@i+2
 14544                           
 14545                           ;Dimmer_B1.c: 521: return (100-(char)((value-((char)((100-60)*1.5)))/i));
 14546  1D87  0859               	movf	setPercentValue@value,w
 14547  1D88  3EC4               	addlw	196
 14548  1D89  00A8               	movwf	___awtoft@c
 14549  1D8A  30FF               	movlw	255
 14550  1D8B  1803               	skipnc
 14551  1D8C  3000               	movlw	0
 14552  1D8D  00A9               	movwf	___awtoft@c+1
 14553  1D8E  31A7  27DE  319D   	fcall	___awtoft
 14554  1D91  0020               	movlb	0	; select bank0
 14555  1D92  0828               	movf	?___awtoft,w
 14556  1D93  00B1               	movwf	___ftdiv@f1
 14557  1D94  0829               	movf	?___awtoft+1,w
 14558  1D95  00B2               	movwf	___ftdiv@f1+1
 14559  1D96  082A               	movf	?___awtoft+2,w
 14560  1D97  00B3               	movwf	___ftdiv@f1+2
 14561  1D98  085A               	movf	setPercentValue@i,w
 14562  1D99  00AE               	movwf	___ftdiv@f2
 14563  1D9A  085B               	movf	setPercentValue@i+1,w
 14564  1D9B  00AF               	movwf	___ftdiv@f2+1
 14565  1D9C  085C               	movf	setPercentValue@i+2,w
 14566  1D9D  00B0               	movwf	___ftdiv@f2+2
 14567  1D9E  3189  21BB  319D   	fcall	___ftdiv
 14568  1DA1  0020               	movlb	0	; select bank0
 14569  1DA2  082E               	movf	?___ftdiv,w
 14570  1DA3  00CB               	movwf	___fttol@f1
 14571  1DA4  082F               	movf	?___ftdiv+1,w
 14572  1DA5  00CC               	movwf	___fttol@f1+1
 14573  1DA6  0830               	movf	?___ftdiv+2,w
 14574  1DA7  00CD               	movwf	___fttol@f1+2
 14575  1DA8  3195  25CD         	fcall	___fttol
 14576  1DAA  0020               	movlb	0	; select bank0
 14577  1DAB  034B               	decf	?___fttol,w
 14578  1DAC  3AFF               	xorlw	255
 14579  1DAD  3E64               	addlw	100
 14580  1DAE  0008               	return
 14581  1DAF                     __end_of_setPercentValue:	
 14582                           
 14583                           	psect	text85
 14584  1A6E                     __ptext85:	
 14585 ;; *************** function _setLoad_StatusOff *****************
 14586 ;; Defined at:
 14587 ;;		line 282 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;  lights          1    wreg     unsigned char 
 14590 ;;  command         1    0[BANK0 ] unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  lights          1    1[BANK0 ] unsigned char 
 14593 ;; Return value:  Size  Location     Type
 14594 ;;		None               void
 14595 ;; Registers used:
 14596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14602 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;Total ram usage:        2 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    4
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		_setDimmerLights_ERROR
 14613 ;;		_setDimmerLights_Adj
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _setLoad_StatusOff
 14619  1A6E                     _setLoad_StatusOff:	
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14623                           ;setLoad_StatusOff@lights stored from wreg
 14624  1A6E  0020               	movlb	0	; select bank0
 14625  1A6F  00A1               	movwf	setLoad_StatusOff@lights
 14626                           
 14627                           ;OverLoad_B1.c: 284: Load->StatusOff=command;
 14628  1A70  086E               	movf	_Load,w
 14629  1A71  3E46               	addlw	70
 14630  1A72  0086               	movwf	6
 14631  1A73  3002               	movlw	2	; select bank4/5
 14632  1A74  0087               	movwf	7
 14633  1A75  0820               	movf	setLoad_StatusOff@command,w
 14634  1A76  1081               	bcf	1,1
 14635  1A77  1D03               	skipz
 14636  1A78  1481               	bsf	1,1
 14637                           
 14638                           ;OverLoad_B1.c: 285: Load->SafeCount-=2;
 14639  1A79  086E               	movf	_Load,w
 14640  1A7A  3E42               	addlw	66
 14641  1A7B  0086               	movwf	6
 14642  1A7C  3002               	movlw	2	; select bank4/5
 14643  1A7D  0087               	movwf	7
 14644  1A7E  3002               	movlw	2
 14645  1A7F  0281               	subwf	1,f
 14646                           
 14647                           ;OverLoad_B1.c: 286: if(lights == 1)
 14648  1A80  0821               	movf	setLoad_StatusOff@lights,w
 14649  1A81  3A01               	xorlw	1
 14650  1A82  1D03               	skipz
 14651  1A83  2A8A               	goto	l8672
 14652                           
 14653                           ;OverLoad_B1.c: 287: {
 14654                           ;OverLoad_B1.c: 288: Load->Lights1Status=0;
 14655  1A84  086E               	movf	_Load,w
 14656  1A85  3E43               	addlw	67
 14657  1A86  0086               	movwf	6
 14658  1A87  3002               	movlw	2	; select bank4/5
 14659  1A88  0087               	movwf	7
 14660  1A89  0181               	clrf	1
 14661  1A8A                     l8672:	
 14662                           
 14663                           ;OverLoad_B1.c: 289: }
 14664                           ;OverLoad_B1.c: 290: if(lights == 2)
 14665  1A8A  0821               	movf	setLoad_StatusOff@lights,w
 14666  1A8B  3A02               	xorlw	2
 14667  1A8C  1D03               	skipz
 14668  1A8D  2A94               	goto	l8676
 14669                           
 14670                           ;OverLoad_B1.c: 291: {
 14671                           ;OverLoad_B1.c: 292: Load->Lights2Status=0;
 14672  1A8E  086E               	movf	_Load,w
 14673  1A8F  3E44               	addlw	68
 14674  1A90  0086               	movwf	6
 14675  1A91  3002               	movlw	2	; select bank4/5
 14676  1A92  0087               	movwf	7
 14677  1A93  0181               	clrf	1
 14678  1A94                     l8676:	
 14679                           
 14680                           ;OverLoad_B1.c: 293: }
 14681                           ;OverLoad_B1.c: 294: if(lights == 3)
 14682  1A94  0821               	movf	setLoad_StatusOff@lights,w
 14683  1A95  3A03               	xorlw	3
 14684  1A96  1D03               	skipz
 14685  1A97  0008               	return
 14686                           
 14687                           ;OverLoad_B1.c: 295: {
 14688                           ;OverLoad_B1.c: 296: Load->Lights3Status=0;
 14689  1A98  086E               	movf	_Load,w
 14690  1A99  3E45               	addlw	69
 14691  1A9A  0086               	movwf	6
 14692  1A9B  3002               	movlw	2	; select bank4/5
 14693  1A9C  0087               	movwf	7
 14694  1A9D  0181               	clrf	1
 14695  1A9E  0008               	return
 14696  1A9F                     __end_of_setLoad_StatusOff:	
 14697                           
 14698                           	psect	text86
 14699  0801                     __ptext86:	
 14700 ;; *************** function _setDimmerLights *****************
 14701 ;; Defined at:
 14702 ;;		line 350 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  lights          1    wreg     unsigned char 
 14705 ;;  status          1    4[BANK0 ] unsigned char 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  lights          1    6[BANK0 ] unsigned char 
 14708 ;; Return value:  Size  Location     Type
 14709 ;;		None               void
 14710 ;; Registers used:
 14711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14717 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;Total ram usage:        3 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; Hardware stack levels required when called:    6
 14724 ;; This function calls:
 14725 ;;		_DimmerLightsPointSelect
 14726 ;;		_setLED
 14727 ;;		_setLoad_Count
 14728 ;;		_setLoad_StatusOn
 14729 ;; This function is called by:
 14730 ;;		_setDimmerLights_Main
 14731 ;;		_setControl_Lights_Table
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           
 14736                           ;psect for function _setDimmerLights
 14737  0801                     _setDimmerLights:	
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14741                           ;setDimmerLights@lights stored from wreg
 14742  0801  0020               	movlb	0	; select bank0
 14743  0802  00A6               	movwf	setDimmerLights@lights
 14744                           
 14745                           ;Dimmer_B1.c: 352: DimmerLightsPointSelect(lights);
 14746  0803  0826               	movf	setDimmerLights@lights,w
 14747  0804  31A5  25DF  3188   	fcall	_DimmerLightsPointSelect
 14748                           
 14749                           ;Dimmer_B1.c: 353: Dimmer->Load=lights;
 14750  0807  0020               	movlb	0	; select bank0
 14751  0808  0826               	movf	setDimmerLights@lights,w
 14752  0809  00A5               	movwf	??_setDimmerLights
 14753  080A  0021               	movlb	1	; select bank1
 14754  080B  0A39               	incf	_Dimmer^(0+128),w
 14755  080C  0086               	movwf	6
 14756  080D  0187               	clrf	7
 14757  080E  0020               	movlb	0	; select bank0
 14758  080F  0825               	movf	??_setDimmerLights,w
 14759  0810  0081               	movwf	1
 14760                           
 14761                           ;Dimmer_B1.c: 354: if(status)
 14762  0811  0824               	movf	setDimmerLights@status,w
 14763  0812  1903               	btfsc	3,2
 14764  0813  2851               	goto	l8772
 14765                           
 14766                           ;Dimmer_B1.c: 355: {
 14767                           ;Dimmer_B1.c: 356: DimmerLights->Status=1;
 14768  0814  086C               	movf	_DimmerLights,w
 14769  0815  0086               	movwf	6
 14770  0816  3001               	movlw	1	; select bank2/3
 14771  0817  0087               	movwf	7
 14772  0818  1681               	bsf	1,5
 14773                           
 14774                           ;Dimmer_B1.c: 357: setLED(lights,0);
 14775  0819  01A2               	clrf	setLED@command
 14776  081A  0826               	movf	setDimmerLights@lights,w
 14777  081B  3190  2042  3188   	fcall	_setLED
 14778                           
 14779                           ;Dimmer_B1.c: 359: setLoad_Count(0);
 14780  081E  3000               	movlw	0
 14781  081F  31A6  2644  3188   	fcall	_setLoad_Count
 14782                           
 14783                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 14784  0822  0020               	movlb	0	; select bank0
 14785  0823  086C               	movf	_DimmerLights,w
 14786  0824  0086               	movwf	6
 14787  0825  3001               	movlw	1	; select bank2/3
 14788  0826  0087               	movwf	7
 14789  0827  1481               	bsf	1,1
 14790                           
 14791                           ;Dimmer_B1.c: 362: DimmerLights->DimmingTimeValue=3;
 14792  0828  3003               	movlw	3
 14793  0829  00A5               	movwf	??_setDimmerLights
 14794  082A  086C               	movf	_DimmerLights,w
 14795  082B  3E02               	addlw	2
 14796  082C  0086               	movwf	6
 14797  082D  3001               	movlw	1	; select bank2/3
 14798  082E  0087               	movwf	7
 14799  082F  0825               	movf	??_setDimmerLights,w
 14800  0830  0081               	movwf	1
 14801                           
 14802                           ;Dimmer_B1.c: 364: if(!DimmerLights->StatusFlag)
 14803  0831  086C               	movf	_DimmerLights,w
 14804  0832  0086               	movwf	6
 14805  0833  3001               	movlw	1	; select bank2/3
 14806  0834  0087               	movwf	7
 14807  0835  1B01               	btfsc	1,6
 14808  0836  0008               	return
 14809                           
 14810                           ;Dimmer_B1.c: 365: {
 14811                           ;Dimmer_B1.c: 366: DimmerLights->StatusFlag=1;
 14812  0837  086C               	movf	_DimmerLights,w
 14813  0838  0086               	movwf	6
 14814  0839  3001               	movlw	1	; select bank2/3
 14815  083A  0087               	movwf	7
 14816  083B  1701               	bsf	1,6
 14817                           
 14818                           ;Dimmer_B1.c: 367: setLoad_StatusOn(lights,1);
 14819  083C  01A0               	clrf	setLoad_StatusOn@command
 14820  083D  0AA0               	incf	setLoad_StatusOn@command,f
 14821  083E  0826               	movf	setDimmerLights@lights,w
 14822  083F  319A  22D0         	fcall	_setLoad_StatusOn
 14823                           
 14824                           ;Dimmer_B1.c: 370: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 14825  0841  0020               	movlb	0	; select bank0
 14826  0842  086C               	movf	_DimmerLights,w
 14827  0843  3E05               	addlw	5
 14828  0844  0086               	movwf	6
 14829  0845  3001               	movlw	1	; select bank2/3
 14830  0846  0087               	movwf	7
 14831  0847  0801               	movf	1,w
 14832  0848  00A5               	movwf	??_setDimmerLights
 14833  0849  086C               	movf	_DimmerLights,w
 14834  084A  3E04               	addlw	4
 14835  084B  0086               	movwf	6
 14836  084C  3001               	movlw	1	; select bank2/3
 14837  084D  0087               	movwf	7
 14838  084E  0825               	movf	??_setDimmerLights,w
 14839  084F  0081               	movwf	1
 14840                           
 14841                           ;Dimmer_B1.c: 372: }
 14842                           ;Dimmer_B1.c: 373: }
 14843  0850  0008               	return
 14844  0851                     l8772:	
 14845                           
 14846                           ;Dimmer_B1.c: 374: else
 14847                           ;Dimmer_B1.c: 375: {
 14848                           ;Dimmer_B1.c: 376: DimmerLights->Status=0;
 14849  0851  086C               	movf	_DimmerLights,w
 14850  0852  0086               	movwf	6
 14851  0853  3001               	movlw	1	; select bank2/3
 14852  0854  0087               	movwf	7
 14853  0855  1281               	bcf	1,5
 14854                           
 14855                           ;Dimmer_B1.c: 378: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 14856  0856  086C               	movf	_DimmerLights,w
 14857  0857  3E06               	addlw	6
 14858  0858  0086               	movwf	6
 14859  0859  3001               	movlw	1	; select bank2/3
 14860  085A  0087               	movwf	7
 14861  085B  0801               	movf	1,w
 14862  085C  00A5               	movwf	??_setDimmerLights
 14863  085D  086C               	movf	_DimmerLights,w
 14864  085E  3E04               	addlw	4
 14865  085F  0086               	movwf	6
 14866  0860  3001               	movlw	1	; select bank2/3
 14867  0861  0087               	movwf	7
 14868  0862  0825               	movf	??_setDimmerLights,w
 14869  0863  0081               	movwf	1
 14870                           
 14871                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 14872  0864  086C               	movf	_DimmerLights,w
 14873  0865  0086               	movwf	6
 14874  0866  3001               	movlw	1	; select bank2/3
 14875  0867  0087               	movwf	7
 14876  0868  1481               	bsf	1,1
 14877                           
 14878                           ;Dimmer_B1.c: 386: DimmerLights->AdjFlag=0;
 14879  0869  086C               	movf	_DimmerLights,w
 14880  086A  0086               	movwf	6
 14881  086B  3001               	movlw	1	; select bank2/3
 14882  086C  0087               	movwf	7
 14883  086D  1181               	bcf	1,3
 14884                           
 14885                           ;Dimmer_B1.c: 387: DimmerLights->AdjStatus=0;
 14886  086E  086C               	movf	_DimmerLights,w
 14887  086F  0086               	movwf	6
 14888  0870  3001               	movlw	1	; select bank2/3
 14889  0871  0087               	movwf	7
 14890  0872  1201               	bcf	1,4
 14891                           
 14892                           ;Dimmer_B1.c: 388: DimmerLights->DimmingTimeValue=3;
 14893  0873  3003               	movlw	3
 14894  0874  00A5               	movwf	??_setDimmerLights
 14895  0875  086C               	movf	_DimmerLights,w
 14896  0876  3E02               	addlw	2
 14897  0877  0086               	movwf	6
 14898  0878  3001               	movlw	1	; select bank2/3
 14899  0879  0087               	movwf	7
 14900  087A  0825               	movf	??_setDimmerLights,w
 14901  087B  0081               	movwf	1
 14902  087C  0008               	return
 14903  087D                     __end_of_setDimmerLights:	
 14904                           
 14905                           	psect	text87
 14906  1AD0                     __ptext87:	
 14907 ;; *************** function _setLoad_StatusOn *****************
 14908 ;; Defined at:
 14909 ;;		line 264 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14910 ;; Parameters:    Size  Location     Type
 14911 ;;  lights          1    wreg     unsigned char 
 14912 ;;  command         1    0[BANK0 ] unsigned char 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  lights          1    1[BANK0 ] unsigned char 
 14915 ;; Return value:  Size  Location     Type
 14916 ;;		None               void
 14917 ;; Registers used:
 14918 ;;		wreg, fsr1l, fsr1h
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14924 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;Total ram usage:        2 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    4
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		_setDimmerLights
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           
 14939                           ;psect for function _setLoad_StatusOn
 14940  1AD0                     _setLoad_StatusOn:	
 14941                           
 14942                           ;incstack = 0
 14943                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 14944                           ;setLoad_StatusOn@lights stored from wreg
 14945  1AD0  0020               	movlb	0	; select bank0
 14946  1AD1  00A1               	movwf	setLoad_StatusOn@lights
 14947                           
 14948                           ;OverLoad_B1.c: 266: Load->GO=1;
 14949  1AD2  086E               	movf	_Load,w
 14950  1AD3  0086               	movwf	6
 14951  1AD4  3002               	movlw	2	; select bank4/5
 14952  1AD5  0087               	movwf	7
 14953  1AD6  1481               	bsf	1,1
 14954                           
 14955                           ;OverLoad_B1.c: 267: Load->StatusOn=command;
 14956  1AD7  086E               	movf	_Load,w
 14957  1AD8  3E46               	addlw	70
 14958  1AD9  0086               	movwf	6
 14959  1ADA  3002               	movlw	2	; select bank4/5
 14960  1ADB  0087               	movwf	7
 14961  1ADC  0820               	movf	setLoad_StatusOn@command,w
 14962  1ADD  1001               	bcf	1,0
 14963  1ADE  1D03               	skipz
 14964  1ADF  1401               	bsf	1,0
 14965                           
 14966                           ;OverLoad_B1.c: 269: if(lights == 1)
 14967  1AE0  0821               	movf	setLoad_StatusOn@lights,w
 14968  1AE1  3A01               	xorlw	1
 14969  1AE2  1D03               	skipz
 14970  1AE3  2AEB               	goto	l8736
 14971                           
 14972                           ;OverLoad_B1.c: 270: {
 14973                           ;OverLoad_B1.c: 271: Load->Lights1Status=1;
 14974  1AE4  086E               	movf	_Load,w
 14975  1AE5  3E43               	addlw	67
 14976  1AE6  0086               	movwf	6
 14977  1AE7  3002               	movlw	2	; select bank4/5
 14978  1AE8  0087               	movwf	7
 14979  1AE9  0181               	clrf	1
 14980  1AEA  0A81               	incf	1,f
 14981  1AEB                     l8736:	
 14982                           
 14983                           ;OverLoad_B1.c: 272: }
 14984                           ;OverLoad_B1.c: 273: if(lights == 2)
 14985  1AEB  0821               	movf	setLoad_StatusOn@lights,w
 14986  1AEC  3A02               	xorlw	2
 14987  1AED  1D03               	skipz
 14988  1AEE  2AF6               	goto	l8740
 14989                           
 14990                           ;OverLoad_B1.c: 274: {
 14991                           ;OverLoad_B1.c: 275: Load->Lights2Status=1;
 14992  1AEF  086E               	movf	_Load,w
 14993  1AF0  3E44               	addlw	68
 14994  1AF1  0086               	movwf	6
 14995  1AF2  3002               	movlw	2	; select bank4/5
 14996  1AF3  0087               	movwf	7
 14997  1AF4  0181               	clrf	1
 14998  1AF5  0A81               	incf	1,f
 14999  1AF6                     l8740:	
 15000                           
 15001                           ;OverLoad_B1.c: 276: }
 15002                           ;OverLoad_B1.c: 277: if(lights == 3)
 15003  1AF6  0821               	movf	setLoad_StatusOn@lights,w
 15004  1AF7  3A03               	xorlw	3
 15005  1AF8  1D03               	skipz
 15006  1AF9  0008               	return
 15007                           
 15008                           ;OverLoad_B1.c: 278: {
 15009                           ;OverLoad_B1.c: 279: Load->Lights3Status=1;
 15010  1AFA  086E               	movf	_Load,w
 15011  1AFB  3E45               	addlw	69
 15012  1AFC  0086               	movwf	6
 15013  1AFD  3002               	movlw	2	; select bank4/5
 15014  1AFE  0087               	movwf	7
 15015  1AFF  0181               	clrf	1
 15016  1B00  0A81               	incf	1,f
 15017  1B01  0008               	return
 15018  1B02                     __end_of_setLoad_StatusOn:	
 15019                           
 15020                           	psect	text88
 15021  2644                     __ptext88:	
 15022 ;; *************** function _setLoad_Count *****************
 15023 ;; Defined at:
 15024 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15025 ;; Parameters:    Size  Location     Type
 15026 ;;  command         1    wreg     unsigned char 
 15027 ;; Auto vars:     Size  Location     Type
 15028 ;;  command         1    1[BANK0 ] unsigned char 
 15029 ;; Return value:  Size  Location     Type
 15030 ;;		None               void
 15031 ;; Registers used:
 15032 ;;		wreg, fsr1l, fsr1h
 15033 ;; Tracked objects:
 15034 ;;		On entry : 0/0
 15035 ;;		On exit  : 0/0
 15036 ;;		Unchanged: 0/0
 15037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;Total ram usage:        2 bytes
 15043 ;; Hardware stack levels used:    1
 15044 ;; Hardware stack levels required when called:    4
 15045 ;; This function calls:
 15046 ;;		Nothing
 15047 ;; This function is called by:
 15048 ;;		_setDimmerLights
 15049 ;; This function uses a non-reentrant model
 15050 ;;
 15051                           
 15052                           
 15053                           ;psect for function _setLoad_Count
 15054  2644                     _setLoad_Count:	
 15055                           
 15056                           ;incstack = 0
 15057                           ; Regs used in _setLoad_Count: [wregfsr1]
 15058                           ;setLoad_Count@command stored from wreg
 15059  2644  0020               	movlb	0	; select bank0
 15060  2645  00A1               	movwf	setLoad_Count@command
 15061                           
 15062                           ;OverLoad_B1.c: 251: Load->Count=command;
 15063  2646  0821               	movf	setLoad_Count@command,w
 15064  2647  00A0               	movwf	??_setLoad_Count
 15065  2648  086E               	movf	_Load,w
 15066  2649  3E3A               	addlw	58
 15067  264A  0086               	movwf	6
 15068  264B  3002               	movlw	2	; select bank4/5
 15069  264C  0087               	movwf	7
 15070  264D  0820               	movf	??_setLoad_Count,w
 15071  264E  0081               	movwf	1
 15072                           
 15073                           ;OverLoad_B1.c: 252: Load->SafeCount=command;
 15074  264F  0821               	movf	setLoad_Count@command,w
 15075  2650  00A0               	movwf	??_setLoad_Count
 15076  2651  086E               	movf	_Load,w
 15077  2652  3E42               	addlw	66
 15078  2653  0086               	movwf	6
 15079  2654  3002               	movlw	2	; select bank4/5
 15080  2655  0087               	movwf	7
 15081  2656  0820               	movf	??_setLoad_Count,w
 15082  2657  0081               	movwf	1
 15083  2658  0008               	return
 15084  2659                     __end_of_setLoad_Count:	
 15085                           
 15086                           	psect	text89
 15087  1042                     __ptext89:	
 15088 ;; *************** function _setLED *****************
 15089 ;; Defined at:
 15090 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;  led             1    wreg     unsigned char 
 15093 ;;  command         1    2[BANK0 ] unsigned char 
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;  led             1    3[BANK0 ] unsigned char 
 15096 ;; Return value:  Size  Location     Type
 15097 ;;		None               void
 15098 ;; Registers used:
 15099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15100 ;; Tracked objects:
 15101 ;;		On entry : 0/0
 15102 ;;		On exit  : 0/0
 15103 ;;		Unchanged: 0/0
 15104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15105 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15109 ;;Total ram usage:        2 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    5
 15112 ;; This function calls:
 15113 ;;		_LedPointSelect
 15114 ;; This function is called by:
 15115 ;;		_setDimmerLights_ERROR
 15116 ;;		_setDimmerLights
 15117 ;;		_setLED_Initialization
 15118 ;;		_setLoad_Exceptions
 15119 ;;		_setOverTemp_Exceptions
 15120 ;;		_setPowerFault_Exceptions
 15121 ;;		_setSw_Initialization
 15122 ;; This function uses a non-reentrant model
 15123 ;;
 15124                           
 15125                           
 15126                           ;psect for function _setLED
 15127  1042                     _setLED:	
 15128                           
 15129                           ;incstack = 0
 15130                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15131                           ;setLED@led stored from wreg
 15132  1042  0020               	movlb	0	; select bank0
 15133  1043  00A3               	movwf	setLED@led
 15134                           
 15135                           ;LED_B1.c: 76: LedPointSelect(led);
 15136  1044  0823               	movf	setLED@led,w
 15137  1045  3198  2086  3190   	fcall	_LedPointSelect
 15138                           
 15139                           ;LED_B1.c: 77: if(command == 0)
 15140  1048  0020               	movlb	0	; select bank0
 15141  1049  08A2               	movf	setLED@command,f
 15142  104A  1D03               	skipz
 15143  104B  285E               	goto	l8696
 15144                           
 15145                           ;LED_B1.c: 78: {
 15146                           ;LED_B1.c: 80: if(led == 1)
 15147  104C  0823               	movf	setLED@led,w
 15148  104D  3A01               	xorlw	1
 15149  104E  1D03               	skipz
 15150  104F  2852               	goto	l8688
 15151                           
 15152                           ;LED_B1.c: 81: {
 15153                           ;LED_B1.c: 85: RA3=1;
 15154  1050  158C               	bsf	12,3	;volatile
 15155                           
 15156                           ;LED_B1.c: 87: }
 15157  1051  0008               	return
 15158  1052                     l8688:	
 15159                           
 15160                           ;LED_B1.c: 90: else if(led == 2)
 15161  1052  0823               	movf	setLED@led,w
 15162  1053  3A02               	xorlw	2
 15163  1054  1D03               	skipz
 15164  1055  2858               	goto	l8692
 15165                           
 15166                           ;LED_B1.c: 91: {
 15167                           ;LED_B1.c: 95: RC7=1;
 15168  1056  178E               	bsf	14,7	;volatile
 15169                           
 15170                           ;LED_B1.c: 97: }
 15171  1057  0008               	return
 15172  1058                     l8692:	
 15173                           
 15174                           ;LED_B1.c: 110: else if(led == 99)
 15175  1058  0823               	movf	setLED@led,w
 15176  1059  3A63               	xorlw	99
 15177  105A  1D03               	skipz
 15178  105B  0008               	return
 15179                           
 15180                           ;LED_B1.c: 111: {
 15181                           ;LED_B1.c: 115: RB5=1;
 15182  105C  168D               	bsf	13,5	;volatile
 15183                           
 15184                           ;LED_B1.c: 117: }
 15185                           ;LED_B1.c: 119: }
 15186  105D  0008               	return
 15187  105E                     l8696:	
 15188                           
 15189                           ;LED_B1.c: 120: else if(command == 1)
 15190  105E  0822               	movf	setLED@command,w
 15191  105F  3A01               	xorlw	1
 15192  1060  1D03               	skipz
 15193  1061  2874               	goto	l8710
 15194                           
 15195                           ;LED_B1.c: 121: {
 15196                           ;LED_B1.c: 123: if(led == 1)
 15197  1062  0823               	movf	setLED@led,w
 15198  1063  3A01               	xorlw	1
 15199  1064  1D03               	skipz
 15200  1065  2868               	goto	l8702
 15201                           
 15202                           ;LED_B1.c: 124: {
 15203                           ;LED_B1.c: 128: RA3=0;
 15204  1066  118C               	bcf	12,3	;volatile
 15205                           
 15206                           ;LED_B1.c: 130: }
 15207  1067  0008               	return
 15208  1068                     l8702:	
 15209                           
 15210                           ;LED_B1.c: 133: else if(led == 2)
 15211  1068  0823               	movf	setLED@led,w
 15212  1069  3A02               	xorlw	2
 15213  106A  1D03               	skipz
 15214  106B  286E               	goto	l8706
 15215                           
 15216                           ;LED_B1.c: 134: {
 15217                           ;LED_B1.c: 138: RC7=0;
 15218  106C  138E               	bcf	14,7	;volatile
 15219                           
 15220                           ;LED_B1.c: 140: }
 15221  106D  0008               	return
 15222  106E                     l8706:	
 15223                           
 15224                           ;LED_B1.c: 153: else if(led == 99)
 15225  106E  0823               	movf	setLED@led,w
 15226  106F  3A63               	xorlw	99
 15227  1070  1D03               	skipz
 15228  1071  0008               	return
 15229                           
 15230                           ;LED_B1.c: 154: {
 15231                           ;LED_B1.c: 158: RB5=0;
 15232  1072  128D               	bcf	13,5	;volatile
 15233                           
 15234                           ;LED_B1.c: 160: }
 15235                           ;LED_B1.c: 162: }
 15236  1073  0008               	return
 15237  1074                     l8710:	
 15238                           
 15239                           ;LED_B1.c: 163: else if(command == 10)
 15240  1074  0822               	movf	setLED@command,w
 15241  1075  3A0A               	xorlw	10
 15242  1076  1D03               	skipz
 15243  1077  2896               	goto	l8726
 15244                           
 15245                           ;LED_B1.c: 164: {
 15246                           ;LED_B1.c: 165: LED->GO=0;
 15247  1078  0021               	movlb	1	; select bank1
 15248  1079  083B               	movf	_LED^(0+128),w
 15249  107A  0086               	movwf	6
 15250  107B  0187               	clrf	7
 15251  107C  1081               	bcf	1,1
 15252                           
 15253                           ;LED_B1.c: 166: LED->Time=0;
 15254  107D  0A3B               	incf	_LED^(0+128),w
 15255  107E  0086               	movwf	6
 15256  107F  0187               	clrf	7
 15257  1080  3000               	movlw	0
 15258  1081  3FC0               	movwi [0]fsr1
 15259  1082  3FC1               	movwi [1]fsr1
 15260                           
 15261                           ;LED_B1.c: 168: if(led == 1)
 15262  1083  0020               	movlb	0	; select bank0
 15263  1084  0823               	movf	setLED@led,w
 15264  1085  3A01               	xorlw	1
 15265  1086  1D03               	skipz
 15266  1087  288A               	goto	l8718
 15267                           
 15268                           ;LED_B1.c: 169: {
 15269                           ;LED_B1.c: 173: RA3=1;
 15270  1088  158C               	bsf	12,3	;volatile
 15271                           
 15272                           ;LED_B1.c: 175: }
 15273  1089  0008               	return
 15274  108A                     l8718:	
 15275                           
 15276                           ;LED_B1.c: 178: else if(led == 2)
 15277  108A  0823               	movf	setLED@led,w
 15278  108B  3A02               	xorlw	2
 15279  108C  1D03               	skipz
 15280  108D  2890               	goto	l8722
 15281                           
 15282                           ;LED_B1.c: 179: {
 15283                           ;LED_B1.c: 183: RC7=1;
 15284  108E  178E               	bsf	14,7	;volatile
 15285                           
 15286                           ;LED_B1.c: 185: }
 15287  108F  0008               	return
 15288  1090                     l8722:	
 15289                           
 15290                           ;LED_B1.c: 198: else if(led == 99)
 15291  1090  0823               	movf	setLED@led,w
 15292  1091  3A63               	xorlw	99
 15293  1092  1D03               	skipz
 15294  1093  0008               	return
 15295                           
 15296                           ;LED_B1.c: 199: {
 15297                           ;LED_B1.c: 203: RB5=1;
 15298  1094  168D               	bsf	13,5	;volatile
 15299                           
 15300                           ;LED_B1.c: 205: }
 15301                           ;LED_B1.c: 207: }
 15302  1095  0008               	return
 15303  1096                     l8726:	
 15304                           
 15305                           ;LED_B1.c: 208: else if(command == 11)
 15306  1096  0822               	movf	setLED@command,w
 15307  1097  3A0B               	xorlw	11
 15308  1098  1D03               	skipz
 15309  1099  0008               	return
 15310                           
 15311                           ;LED_B1.c: 209: {
 15312                           ;LED_B1.c: 210: LED->GO=1;
 15313  109A  0021               	movlb	1	; select bank1
 15314  109B  083B               	movf	_LED^(0+128),w
 15315  109C  0086               	movwf	6
 15316  109D  0187               	clrf	7
 15317  109E  1481               	bsf	1,1
 15318  109F  0008               	return
 15319  10A0                     __end_of_setLED:	
 15320                           
 15321                           	psect	text90
 15322  1886                     __ptext90:	
 15323 ;; *************** function _LedPointSelect *****************
 15324 ;; Defined at:
 15325 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;  led             1    wreg     unsigned char 
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;  led             1    1[BANK0 ] unsigned char 
 15330 ;; Return value:  Size  Location     Type
 15331 ;;		None               void
 15332 ;; Registers used:
 15333 ;;		wreg
 15334 ;; Tracked objects:
 15335 ;;		On entry : 0/0
 15336 ;;		On exit  : 0/0
 15337 ;;		Unchanged: 0/0
 15338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;Total ram usage:        2 bytes
 15344 ;; Hardware stack levels used:    1
 15345 ;; Hardware stack levels required when called:    4
 15346 ;; This function calls:
 15347 ;;		Nothing
 15348 ;; This function is called by:
 15349 ;;		_setLED_Initialization
 15350 ;;		_setLED
 15351 ;;		_setLED_Main
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function _LedPointSelect
 15357  1886                     _LedPointSelect:	
 15358                           
 15359                           ;incstack = 0
 15360                           ; Regs used in _LedPointSelect: [wreg]
 15361                           ;LedPointSelect@led stored from wreg
 15362  1886  0020               	movlb	0	; select bank0
 15363  1887  00A1               	movwf	LedPointSelect@led
 15364                           
 15365                           ;LED_B1.c: 10: if(led == 1)
 15366  1888  0821               	movf	LedPointSelect@led,w
 15367  1889  3A01               	xorlw	1
 15368  188A  1D03               	skipz
 15369  188B  2892               	goto	l6438
 15370                           
 15371                           ;LED_B1.c: 11: {
 15372                           ;LED_B1.c: 12: LED=&VarLED1;
 15373  188C  30D9               	movlw	_VarLED1& (0+255)
 15374  188D  00A0               	movwf	??_LedPointSelect
 15375  188E  0820               	movf	??_LedPointSelect,w
 15376  188F  0021               	movlb	1	; select bank1
 15377  1890  00BB               	movwf	_LED^(0+128)
 15378                           
 15379                           ;LED_B1.c: 13: }
 15380  1891  0008               	return
 15381  1892                     l6438:	
 15382                           
 15383                           ;LED_B1.c: 16: else if(led == 2)
 15384  1892  0020               	movlb	0	; select bank0
 15385  1893  0821               	movf	LedPointSelect@led,w
 15386  1894  3A02               	xorlw	2
 15387  1895  1D03               	skipz
 15388  1896  289D               	goto	l6442
 15389                           
 15390                           ;LED_B1.c: 17: {
 15391                           ;LED_B1.c: 18: LED=&VarLED2;
 15392  1897  30DD               	movlw	_VarLED2& (0+255)
 15393  1898  00A0               	movwf	??_LedPointSelect
 15394  1899  0820               	movf	??_LedPointSelect,w
 15395  189A  0021               	movlb	1	; select bank1
 15396  189B  00BB               	movwf	_LED^(0+128)
 15397                           
 15398                           ;LED_B1.c: 19: }
 15399  189C  0008               	return
 15400  189D                     l6442:	
 15401                           
 15402                           ;LED_B1.c: 28: else if(led == 99)
 15403  189D  0020               	movlb	0	; select bank0
 15404  189E  0821               	movf	LedPointSelect@led,w
 15405  189F  3A63               	xorlw	99
 15406  18A0  1D03               	skipz
 15407  18A1  0008               	return
 15408                           
 15409                           ;LED_B1.c: 29: {
 15410                           ;LED_B1.c: 30: LED=&VarErrLED;
 15411  18A2  30D5               	movlw	_VarErrLED& (0+255)
 15412  18A3  00A0               	movwf	??_LedPointSelect
 15413  18A4  0820               	movf	??_LedPointSelect,w
 15414  18A5  0021               	movlb	1	; select bank1
 15415  18A6  00BB               	movwf	_LED^(0+128)
 15416  18A7  0008               	return
 15417  18A8                     __end_of_LedPointSelect:	
 15418                           
 15419                           	psect	text91
 15420  2606                     __ptext91:	
 15421 ;; *************** function _getDimmerLights_Trigger *****************
 15422 ;; Defined at:
 15423 ;;		line 240 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;		None
 15426 ;; Auto vars:     Size  Location     Type
 15427 ;;  Status          1    0[BANK0 ] unsigned char 
 15428 ;; Return value:  Size  Location     Type
 15429 ;;                  1    wreg      unsigned char 
 15430 ;; Registers used:
 15431 ;;		wreg, fsr1l, fsr1h, status,2
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        1 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    4
 15444 ;; This function calls:
 15445 ;;		Nothing
 15446 ;; This function is called by:
 15447 ;;		_setDimmerLights_Main
 15448 ;; This function uses a non-reentrant model
 15449 ;;
 15450                           
 15451                           
 15452                           ;psect for function _getDimmerLights_Trigger
 15453  2606                     _getDimmerLights_Trigger:	
 15454                           
 15455                           ;Dimmer_B1.c: 242: char Status=0;
 15456                           
 15457                           ;incstack = 0
 15458                           ; Regs used in _getDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2]
 15459  2606  0020               	movlb	0	; select bank0
 15460  2607  01A0               	clrf	getDimmerLights_Trigger@Status
 15461                           
 15462                           ;Dimmer_B1.c: 251: if(DimmerLights11->Trigger || DimmerLights22->Trigger)
 15463  2608  0879               	movf	_DimmerLights11,w
 15464  2609  3E09               	addlw	9
 15465  260A  0086               	movwf	6
 15466  260B  3001               	movlw	1	; select bank2/3
 15467  260C  0087               	movwf	7
 15468  260D  1881               	btfsc	1,1
 15469  260E  2E16               	goto	l923
 15470  260F  087A               	movf	_DimmerLights22,w
 15471  2610  3E09               	addlw	9
 15472  2611  0086               	movwf	6
 15473  2612  3001               	movlw	1	; select bank2/3
 15474  2613  0087               	movwf	7
 15475  2614  1C81               	btfss	1,1
 15476  2615  2E18               	goto	l9028
 15477  2616                     l923:	
 15478                           
 15479                           ;Dimmer_B1.c: 252: {
 15480                           ;Dimmer_B1.c: 253: Status=1;
 15481  2616  01A0               	clrf	getDimmerLights_Trigger@Status
 15482  2617  0AA0               	incf	getDimmerLights_Trigger@Status,f
 15483  2618                     l9028:	
 15484                           
 15485                           ;Dimmer_B1.c: 254: }
 15486                           ;Dimmer_B1.c: 263: return Status;
 15487  2618  0820               	movf	getDimmerLights_Trigger@Status,w
 15488  2619  0008               	return
 15489  261A                     __end_of_getDimmerLights_Trigger:	
 15490                           
 15491                           	psect	text92
 15492  2732                     __ptext92:	
 15493 ;; *************** function _DimmerLights_Close *****************
 15494 ;; Defined at:
 15495 ;;		line 90 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;		None
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;		None
 15500 ;; Return value:  Size  Location     Type
 15501 ;;		None               void
 15502 ;; Registers used:
 15503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;Total ram usage:        0 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    5
 15516 ;; This function calls:
 15517 ;;		_getDimmerLights_StatusFlag
 15518 ;;		_setLoad_GO
 15519 ;; This function is called by:
 15520 ;;		_DimmerLights_Main
 15521 ;; This function uses a non-reentrant model
 15522 ;;
 15523                           
 15524                           
 15525                           ;psect for function _DimmerLights_Close
 15526  2732                     _DimmerLights_Close:	
 15527                           
 15528                           ;Dimmer_B1.c: 92: if(Dimmer->Detect)
 15529                           
 15530                           ;incstack = 0
 15531                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15532  2732  0021               	movlb	1	; select bank1
 15533  2733  0839               	movf	_Dimmer^(0+128),w
 15534  2734  0086               	movwf	6
 15535  2735  0187               	clrf	7
 15536  2736  1C01               	btfss	1,0
 15537  2737  0008               	return
 15538                           
 15539                           ;Dimmer_B1.c: 93: {
 15540                           ;Dimmer_B1.c: 94: Dimmer->Detect=0;
 15541  2738  0839               	movf	_Dimmer^(0+128),w
 15542  2739  0086               	movwf	6
 15543  273A  0187               	clrf	7
 15544  273B  1001               	bcf	1,0
 15545                           
 15546                           ;Dimmer_B1.c: 95: if(!getDimmerLights_StatusFlag())
 15547  273C  31A5  25CD  31A7   	fcall	_getDimmerLights_StatusFlag
 15548  273F  3800               	iorlw	0
 15549  2740  1D03               	skipz
 15550  2741  0008               	return
 15551                           
 15552                           ;Dimmer_B1.c: 96: {
 15553                           ;Dimmer_B1.c: 97: setLoad_GO(0);
 15554  2742  3000               	movlw	0
 15555  2743  31A4  2444         	fcall	_setLoad_GO
 15556                           
 15557                           ;Dimmer_B1.c: 98: Memory->GO=1;
 15558  2745  0021               	movlb	1	; select bank1
 15559  2746  0868               	movf	_Memory^(0+128),w
 15560  2747  3E22               	addlw	34
 15561  2748  0086               	movwf	6
 15562  2749  3002               	movlw	2	; select bank4/5
 15563  274A  0087               	movwf	7
 15564  274B  1481               	bsf	1,1
 15565  274C  0008               	return
 15566  274D                     __end_of_DimmerLights_Close:	
 15567                           
 15568                           	psect	text93
 15569  2444                     __ptext93:	
 15570 ;; *************** function _setLoad_GO *****************
 15571 ;; Defined at:
 15572 ;;		line 260 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;  command         1    wreg     unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;  command         1    0[BANK0 ] unsigned char 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;		None               void
 15579 ;; Registers used:
 15580 ;;		wreg, fsr1l, fsr1h
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;Total ram usage:        1 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    4
 15593 ;; This function calls:
 15594 ;;		Nothing
 15595 ;; This function is called by:
 15596 ;;		_DimmerLights_Close
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           
 15601                           ;psect for function _setLoad_GO
 15602  2444                     _setLoad_GO:	
 15603                           
 15604                           ;incstack = 0
 15605                           ; Regs used in _setLoad_GO: [wregfsr1]
 15606                           ;setLoad_GO@command stored from wreg
 15607  2444  0020               	movlb	0	; select bank0
 15608  2445  00A0               	movwf	setLoad_GO@command
 15609                           
 15610                           ;OverLoad_B1.c: 262: Load->GO=command;
 15611  2446  086E               	movf	_Load,w
 15612  2447  0086               	movwf	6
 15613  2448  3002               	movlw	2	; select bank4/5
 15614  2449  0087               	movwf	7
 15615  244A  0820               	movf	setLoad_GO@command,w
 15616  244B  1081               	bcf	1,1
 15617  244C  1D03               	skipz
 15618  244D  1481               	bsf	1,1
 15619  244E  0008               	return
 15620  244F                     __end_of_setLoad_GO:	
 15621                           
 15622                           	psect	text94
 15623  25CD                     __ptext94:	
 15624 ;; *************** function _getDimmerLights_StatusFlag *****************
 15625 ;; Defined at:
 15626 ;;		line 213 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15627 ;; Parameters:    Size  Location     Type
 15628 ;;		None
 15629 ;; Auto vars:     Size  Location     Type
 15630 ;;  Status          1    0[BANK0 ] unsigned char 
 15631 ;; Return value:  Size  Location     Type
 15632 ;;                  1    wreg      unsigned char 
 15633 ;; Registers used:
 15634 ;;		wreg, fsr1l, fsr1h, status,2
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;Total ram usage:        1 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    4
 15647 ;; This function calls:
 15648 ;;		Nothing
 15649 ;; This function is called by:
 15650 ;;		_DimmerLights_Close
 15651 ;;		_DimmerLights_Exceptions
 15652 ;; This function uses a non-reentrant model
 15653 ;;
 15654                           
 15655                           
 15656                           ;psect for function _getDimmerLights_StatusFlag
 15657  25CD                     _getDimmerLights_StatusFlag:	
 15658                           
 15659                           ;Dimmer_B1.c: 215: char Status=0;
 15660                           
 15661                           ;incstack = 0
 15662                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 15663  25CD  0020               	movlb	0	; select bank0
 15664  25CE  01A0               	clrf	getDimmerLights_StatusFlag@Status
 15665                           
 15666                           ;Dimmer_B1.c: 224: if(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)
 15667  25CF  0879               	movf	_DimmerLights11,w
 15668  25D0  0086               	movwf	6
 15669  25D1  3001               	movlw	1	; select bank2/3
 15670  25D2  0087               	movwf	7
 15671  25D3  1B01               	btfsc	1,6
 15672  25D4  2DDB               	goto	l917
 15673  25D5  087A               	movf	_DimmerLights22,w
 15674  25D6  0086               	movwf	6
 15675  25D7  3001               	movlw	1	; select bank2/3
 15676  25D8  0087               	movwf	7
 15677  25D9  1F01               	btfss	1,6
 15678  25DA  2DDD               	goto	l8750
 15679  25DB                     l917:	
 15680                           
 15681                           ;Dimmer_B1.c: 225: {
 15682                           ;Dimmer_B1.c: 226: Status=1;
 15683  25DB  01A0               	clrf	getDimmerLights_StatusFlag@Status
 15684  25DC  0AA0               	incf	getDimmerLights_StatusFlag@Status,f
 15685  25DD                     l8750:	
 15686                           
 15687                           ;Dimmer_B1.c: 227: }
 15688                           ;Dimmer_B1.c: 237: return Status;
 15689  25DD  0820               	movf	getDimmerLights_StatusFlag@Status,w
 15690  25DE  0008               	return
 15691  25DF                     __end_of_getDimmerLights_StatusFlag:	
 15692                           
 15693                           	psect	text95
 15694  262F                     __ptext95:	
 15695 ;; *************** function _DimmerLights_Initialization *****************
 15696 ;; Defined at:
 15697 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;		None
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;		None
 15702 ;; Return value:  Size  Location     Type
 15703 ;;		None               void
 15704 ;; Registers used:
 15705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        1 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; Hardware stack levels required when called:    8
 15718 ;; This function calls:
 15719 ;;		_Dimmer_Initialization
 15720 ;;		_setDimmerLights_Initialization
 15721 ;; This function is called by:
 15722 ;;		_main
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           
 15727                           ;psect for function _DimmerLights_Initialization
 15728  262F                     _DimmerLights_Initialization:	
 15729                           
 15730                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 15731                           
 15732                           ;incstack = 0
 15733                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15734  262F  302E               	movlw	_DimmerLights1& (0+255)
 15735  2630  0020               	movlb	0	; select bank0
 15736  2631  00E2               	movwf	??_DimmerLights_Initialization
 15737  2632  0862               	movf	??_DimmerLights_Initialization,w
 15738  2633  00F9               	movwf	_DimmerLights11
 15739                           
 15740                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 15741  2634  3001               	movlw	1
 15742  2635  319C  249F  31A6   	fcall	_setDimmerLights_Initialization
 15743                           
 15744                           ;Dimmer_B1.c: 40: DimmerLights22=&DimmerLights2;
 15745  2638  303B               	movlw	_DimmerLights2& (0+255)
 15746  2639  0020               	movlb	0	; select bank0
 15747  263A  00E2               	movwf	??_DimmerLights_Initialization
 15748  263B  0862               	movf	??_DimmerLights_Initialization,w
 15749  263C  00FA               	movwf	_DimmerLights22
 15750                           
 15751                           ;Dimmer_B1.c: 41: setDimmerLights_Initialization(2);
 15752  263D  3002               	movlw	2
 15753  263E  319C  249F  31A6   	fcall	_setDimmerLights_Initialization
 15754                           
 15755                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 15756  2641  31A3  23C3         	fcall	_Dimmer_Initialization
 15757  2643  0008               	return
 15758  2644                     __end_of_DimmerLights_Initialization:	
 15759                           
 15760                           	psect	text96
 15761  1C9F                     __ptext96:	
 15762 ;; *************** function _setDimmerLights_Initialization *****************
 15763 ;; Defined at:
 15764 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15765 ;; Parameters:    Size  Location     Type
 15766 ;;  lights          1    wreg     unsigned char 
 15767 ;; Auto vars:     Size  Location     Type
 15768 ;;  lights          1   65[BANK0 ] unsigned char 
 15769 ;; Return value:  Size  Location     Type
 15770 ;;		None               void
 15771 ;; Registers used:
 15772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15773 ;; Tracked objects:
 15774 ;;		On entry : 0/0
 15775 ;;		On exit  : 0/0
 15776 ;;		Unchanged: 0/0
 15777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;Total ram usage:        3 bytes
 15783 ;; Hardware stack levels used:    1
 15784 ;; Hardware stack levels required when called:    7
 15785 ;; This function calls:
 15786 ;;		_DimmerLightsPointSelect
 15787 ;;		_getPercentValue
 15788 ;; This function is called by:
 15789 ;;		_DimmerLights_Initialization
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           
 15794                           ;psect for function _setDimmerLights_Initialization
 15795  1C9F                     _setDimmerLights_Initialization:	
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15799                           ;setDimmerLights_Initialization@lights stored from wreg
 15800  1C9F  0020               	movlb	0	; select bank0
 15801  1CA0  00E1               	movwf	setDimmerLights_Initialization@lights
 15802                           
 15803                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 15804  1CA1  0861               	movf	setDimmerLights_Initialization@lights,w
 15805  1CA2  31A5  25DF  319C   	fcall	_DimmerLightsPointSelect
 15806                           
 15807                           ;Dimmer_B1.c: 58: DimmerLights->MaxmumValue=((char)((100-60)*1.5));
 15808  1CA5  303C               	movlw	60
 15809  1CA6  0020               	movlb	0	; select bank0
 15810  1CA7  00DF               	movwf	??_setDimmerLights_Initialization
 15811  1CA8  086C               	movf	_DimmerLights,w
 15812  1CA9  3E05               	addlw	5
 15813  1CAA  0086               	movwf	6
 15814  1CAB  3001               	movlw	1	; select bank2/3
 15815  1CAC  0087               	movwf	7
 15816  1CAD  085F               	movf	??_setDimmerLights_Initialization,w
 15817  1CAE  0081               	movwf	1
 15818                           
 15819                           ;Dimmer_B1.c: 59: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 15820  1CAF  3078               	movlw	120
 15821  1CB0  00DF               	movwf	??_setDimmerLights_Initialization
 15822  1CB1  086C               	movf	_DimmerLights,w
 15823  1CB2  3E06               	addlw	6
 15824  1CB3  0086               	movwf	6
 15825  1CB4  3001               	movlw	1	; select bank2/3
 15826  1CB5  0087               	movwf	7
 15827  1CB6  085F               	movf	??_setDimmerLights_Initialization,w
 15828  1CB7  0081               	movwf	1
 15829                           
 15830                           ;Dimmer_B1.c: 60: DimmerLights->Clear=1;
 15831  1CB8  086C               	movf	_DimmerLights,w
 15832  1CB9  3E0C               	addlw	12
 15833  1CBA  0086               	movwf	6
 15834  1CBB  3001               	movlw	1	; select bank2/3
 15835  1CBC  0087               	movwf	7
 15836  1CBD  1401               	bsf	1,0
 15837                           
 15838                           ;Dimmer_B1.c: 66: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15839  1CBE  086C               	movf	_DimmerLights,w
 15840  1CBF  3E06               	addlw	6
 15841  1CC0  0086               	movwf	6
 15842  1CC1  3001               	movlw	1	; select bank2/3
 15843  1CC2  0087               	movwf	7
 15844  1CC3  0801               	movf	1,w
 15845  1CC4  00DF               	movwf	??_setDimmerLights_Initialization
 15846  1CC5  086C               	movf	_DimmerLights,w
 15847  1CC6  3E04               	addlw	4
 15848  1CC7  0086               	movwf	6
 15849  1CC8  3001               	movlw	1	; select bank2/3
 15850  1CC9  0087               	movwf	7
 15851  1CCA  085F               	movf	??_setDimmerLights_Initialization,w
 15852  1CCB  0081               	movwf	1
 15853                           
 15854                           ;Dimmer_B1.c: 84: DimmerLights->MaxmumValue=getPercentValue(Product->Data[(20+lights)]);
 15855  1CCC  0861               	movf	setDimmerLights_Initialization@lights,w
 15856  1CCD  3E14               	addlw	20
 15857  1CCE  076F               	addwf	_Product,w
 15858  1CCF  00DF               	movwf	??_setDimmerLights_Initialization
 15859  1CD0  085F               	movf	??_setDimmerLights_Initialization,w
 15860  1CD1  0086               	movwf	6
 15861  1CD2  3001               	movlw	1	; select bank2/3
 15862  1CD3  0087               	movwf	7
 15863  1CD4  0801               	movf	1,w
 15864  1CD5  319F  2749         	fcall	_getPercentValue
 15865  1CD7  0020               	movlb	0	; select bank0
 15866  1CD8  00E0               	movwf	??_setDimmerLights_Initialization+1
 15867  1CD9  086C               	movf	_DimmerLights,w
 15868  1CDA  3E05               	addlw	5
 15869  1CDB  0086               	movwf	6
 15870  1CDC  3001               	movlw	1	; select bank2/3
 15871  1CDD  0087               	movwf	7
 15872  1CDE  0860               	movf	??_setDimmerLights_Initialization+1,w
 15873  1CDF  0081               	movwf	1
 15874  1CE0  0008               	return
 15875  1CE1                     __end_of_setDimmerLights_Initialization:	
 15876                           
 15877                           	psect	text97
 15878  1F49                     __ptext97:	
 15879 ;; *************** function _getPercentValue *****************
 15880 ;; Defined at:
 15881 ;;		line 501 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  value           1    wreg     unsigned char 
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;  value           1   59[BANK0 ] unsigned char 
 15886 ;;  i               3   60[BANK0 ] float 
 15887 ;; Return value:  Size  Location     Type
 15888 ;;                  1    wreg      unsigned char 
 15889 ;; Registers used:
 15890 ;;		wreg, status,2, status,0, pclath, cstack
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;Total ram usage:        6 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; Hardware stack levels required when called:    6
 15903 ;; This function calls:
 15904 ;;		___awtoft
 15905 ;;		___ftadd
 15906 ;;		___ftdiv
 15907 ;;		___ftmul
 15908 ;;		___fttol
 15909 ;; This function is called by:
 15910 ;;		_setDimmerLights_Initialization
 15911 ;;		_setDimmerLights_AdjRF
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           
 15916                           ;psect for function _getPercentValue
 15917  1F49                     _getPercentValue:	
 15918                           
 15919                           ;incstack = 0
 15920                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15921                           ;getPercentValue@value stored from wreg
 15922  1F49  0020               	movlb	0	; select bank0
 15923  1F4A  00DB               	movwf	getPercentValue@value
 15924                           
 15925                           ;Dimmer_B1.c: 504: float i=((char)((100-20)*1.5))-((char)((100-60)*1.5));
 15926  1F4B  3000               	movlw	0
 15927  1F4C  00DC               	movwf	getPercentValue@i
 15928  1F4D  3070               	movlw	112
 15929  1F4E  00DD               	movwf	getPercentValue@i+1
 15930  1F4F  3042               	movlw	66
 15931  1F50  00DE               	movwf	getPercentValue@i+2
 15932                           
 15933                           ;Dimmer_B1.c: 505: i/=100;
 15934  1F51  3000               	movlw	0
 15935  1F52  00AE               	movwf	___ftdiv@f2
 15936  1F53  30C8               	movlw	200
 15937  1F54  00AF               	movwf	___ftdiv@f2+1
 15938  1F55  3042               	movlw	66
 15939  1F56  00B0               	movwf	___ftdiv@f2+2
 15940  1F57  085C               	movf	getPercentValue@i,w
 15941  1F58  00B1               	movwf	___ftdiv@f1
 15942  1F59  085D               	movf	getPercentValue@i+1,w
 15943  1F5A  00B2               	movwf	___ftdiv@f1+1
 15944  1F5B  085E               	movf	getPercentValue@i+2,w
 15945  1F5C  00B3               	movwf	___ftdiv@f1+2
 15946  1F5D  3189  21BB  319F   	fcall	___ftdiv
 15947  1F60  0020               	movlb	0	; select bank0
 15948  1F61  082E               	movf	?___ftdiv,w
 15949  1F62  00DC               	movwf	getPercentValue@i
 15950  1F63  082F               	movf	?___ftdiv+1,w
 15951  1F64  00DD               	movwf	getPercentValue@i+1
 15952  1F65  0830               	movf	?___ftdiv+2,w
 15953  1F66  00DE               	movwf	getPercentValue@i+2
 15954                           
 15955                           ;Dimmer_B1.c: 506: return (char)(((100-value)*i)+((char)((100-60)*1.5)));
 15956  1F67  085B               	movf	getPercentValue@value,w
 15957  1F68  00D9               	movwf	??_getPercentValue
 15958  1F69  01DA               	clrf	??_getPercentValue+1
 15959  1F6A  09D9               	comf	??_getPercentValue,f
 15960  1F6B  09DA               	comf	??_getPercentValue+1,f
 15961  1F6C  0AD9               	incf	??_getPercentValue,f
 15962  1F6D  1903               	skipnz
 15963  1F6E  0ADA               	incf	??_getPercentValue+1,f
 15964  1F6F  0859               	movf	??_getPercentValue,w
 15965  1F70  3E64               	addlw	100
 15966  1F71  00A8               	movwf	___awtoft@c
 15967  1F72  3000               	movlw	0
 15968  1F73  3D5A               	addwfc	??_getPercentValue+1,w
 15969  1F74  00A9               	movwf	___awtoft@c+1
 15970  1F75  31A7  27DE  319F   	fcall	___awtoft
 15971  1F78  0020               	movlb	0	; select bank0
 15972  1F79  0828               	movf	?___awtoft,w
 15973  1F7A  00B1               	movwf	___ftmul@f2
 15974  1F7B  0829               	movf	?___awtoft+1,w
 15975  1F7C  00B2               	movwf	___ftmul@f2+1
 15976  1F7D  082A               	movf	?___awtoft+2,w
 15977  1F7E  00B3               	movwf	___ftmul@f2+2
 15978  1F7F  085C               	movf	getPercentValue@i,w
 15979  1F80  00AE               	movwf	___ftmul@f1
 15980  1F81  085D               	movf	getPercentValue@i+1,w
 15981  1F82  00AF               	movwf	___ftmul@f1+1
 15982  1F83  085E               	movf	getPercentValue@i+2,w
 15983  1F84  00B0               	movwf	___ftmul@f1+2
 15984  1F85  318A  2264  319F   	fcall	___ftmul
 15985  1F88  0020               	movlb	0	; select bank0
 15986  1F89  082E               	movf	?___ftmul,w
 15987  1F8A  00C1               	movwf	___ftadd@f2
 15988  1F8B  082F               	movf	?___ftmul+1,w
 15989  1F8C  00C2               	movwf	___ftadd@f2+1
 15990  1F8D  0830               	movf	?___ftmul+2,w
 15991  1F8E  00C3               	movwf	___ftadd@f2+2
 15992  1F8F  3000               	movlw	0
 15993  1F90  00BE               	movwf	___ftadd@f1
 15994  1F91  3070               	movlw	112
 15995  1F92  00BF               	movwf	___ftadd@f1+1
 15996  1F93  3042               	movlw	66
 15997  1F94  00C0               	movwf	___ftadd@f1+2
 15998  1F95  318B  23E1  319F   	fcall	___ftadd
 15999  1F98  0020               	movlb	0	; select bank0
 16000  1F99  083E               	movf	?___ftadd,w
 16001  1F9A  00CB               	movwf	___fttol@f1
 16002  1F9B  083F               	movf	?___ftadd+1,w
 16003  1F9C  00CC               	movwf	___fttol@f1+1
 16004  1F9D  0840               	movf	?___ftadd+2,w
 16005  1F9E  00CD               	movwf	___fttol@f1+2
 16006  1F9F  3195  25CD         	fcall	___fttol
 16007  1FA1  0020               	movlb	0	; select bank0
 16008  1FA2  084B               	movf	?___fttol,w
 16009  1FA3  0008               	return
 16010  1FA4                     __end_of_getPercentValue:	
 16011                           
 16012                           	psect	text98
 16013  15CD                     __ptext98:	
 16014 ;; *************** function ___fttol *****************
 16015 ;; Defined at:
 16016 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  f1              3   43[BANK0 ] float 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;  lval            4   52[BANK0 ] unsigned long 
 16021 ;;  exp1            1   56[BANK0 ] unsigned char 
 16022 ;;  sign1           1   51[BANK0 ] unsigned char 
 16023 ;; Return value:  Size  Location     Type
 16024 ;;                  4   43[BANK0 ] long 
 16025 ;; Registers used:
 16026 ;;		wreg, status,2, status,0
 16027 ;; Tracked objects:
 16028 ;;		On entry : 0/0
 16029 ;;		On exit  : 0/0
 16030 ;;		Unchanged: 0/0
 16031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16032 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;Total ram usage:       14 bytes
 16037 ;; Hardware stack levels used:    1
 16038 ;; Hardware stack levels required when called:    4
 16039 ;; This function calls:
 16040 ;;		Nothing
 16041 ;; This function is called by:
 16042 ;;		_getPercentValue
 16043 ;;		_setPercentValue
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           
 16048                           ;psect for function ___fttol
 16049  15CD                     ___fttol:	
 16050                           
 16051                           ;incstack = 0
 16052                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16053  15CD  0020               	movlb	0	; select bank0
 16054  15CE  084B               	movf	___fttol@f1,w
 16055  15CF  00CF               	movwf	??___fttol
 16056  15D0  084C               	movf	___fttol@f1+1,w
 16057  15D1  00D0               	movwf	??___fttol+1
 16058  15D2  084D               	movf	___fttol@f1+2,w
 16059  15D3  00D1               	movwf	??___fttol+2
 16060  15D4  1003               	clrc
 16061  15D5  0D50               	rlf	??___fttol+1,w
 16062  15D6  0D51               	rlf	??___fttol+2,w
 16063  15D7  00D2               	movwf	??___fttol+3
 16064  15D8  0852               	movf	??___fttol+3,w
 16065  15D9  00D8               	movwf	___fttol@exp1
 16066  15DA  08D8               	movf	___fttol@exp1,f
 16067  15DB  1D03               	skipz
 16068  15DC  2DE6               	goto	l6340
 16069  15DD  3000               	movlw	0
 16070  15DE  00CE               	movwf	?___fttol+3
 16071  15DF  3000               	movlw	0
 16072  15E0  00CD               	movwf	?___fttol+2
 16073  15E1  3000               	movlw	0
 16074  15E2  00CC               	movwf	?___fttol+1
 16075  15E3  3000               	movlw	0
 16076  15E4  00CB               	movwf	?___fttol
 16077  15E5  0008               	return
 16078  15E6                     l6340:	
 16079  15E6  084B               	movf	___fttol@f1,w
 16080  15E7  00CF               	movwf	??___fttol
 16081  15E8  084C               	movf	___fttol@f1+1,w
 16082  15E9  00D0               	movwf	??___fttol+1
 16083  15EA  084D               	movf	___fttol@f1+2,w
 16084  15EB  00D1               	movwf	??___fttol+2
 16085  15EC  3017               	movlw	23
 16086  15ED                     u4675:	
 16087  15ED  36D1               	lsrf	??___fttol+2,f
 16088  15EE  0CD0               	rrf	??___fttol+1,f
 16089  15EF  0CCF               	rrf	??___fttol,f
 16090  15F0  0B89               	decfsz	9,f
 16091  15F1  2DED               	goto	u4675
 16092  15F2  084F               	movf	??___fttol,w
 16093  15F3  00D2               	movwf	??___fttol+3
 16094  15F4  0852               	movf	??___fttol+3,w
 16095  15F5  00D3               	movwf	___fttol@sign1
 16096  15F6  17CC               	bsf	___fttol@f1+1,7
 16097  15F7  30FF               	movlw	255
 16098  15F8  05CB               	andwf	___fttol@f1,f
 16099  15F9  30FF               	movlw	255
 16100  15FA  05CC               	andwf	___fttol@f1+1,f
 16101  15FB  3000               	movlw	0
 16102  15FC  05CD               	andwf	___fttol@f1+2,f
 16103  15FD  084B               	movf	___fttol@f1,w
 16104  15FE  00D4               	movwf	___fttol@lval
 16105  15FF  084C               	movf	___fttol@f1+1,w
 16106  1600  00D5               	movwf	___fttol@lval+1
 16107  1601  084D               	movf	___fttol@f1+2,w
 16108  1602  00D6               	movwf	___fttol@lval+2
 16109  1603  01D7               	clrf	___fttol@lval+3
 16110  1604  308E               	movlw	142
 16111  1605  02D8               	subwf	___fttol@exp1,f
 16112  1606  1FD8               	btfss	___fttol@exp1,7
 16113  1607  2E24               	goto	l6360
 16114  1608  0858               	movf	___fttol@exp1,w
 16115  1609  3A80               	xorlw	128
 16116  160A  3E8F               	addlw	143
 16117  160B  1803               	skipnc
 16118  160C  2E16               	goto	l6358
 16119  160D  3000               	movlw	0
 16120  160E  00CE               	movwf	?___fttol+3
 16121  160F  3000               	movlw	0
 16122  1610  00CD               	movwf	?___fttol+2
 16123  1611  3000               	movlw	0
 16124  1612  00CC               	movwf	?___fttol+1
 16125  1613  3000               	movlw	0
 16126  1614  00CB               	movwf	?___fttol
 16127  1615  0008               	return
 16128  1616                     l6358:	
 16129  1616  3001               	movlw	1
 16130  1617                     u4705:	
 16131  1617  36D7               	lsrf	___fttol@lval+3,f
 16132  1618  0CD6               	rrf	___fttol@lval+2,f
 16133  1619  0CD5               	rrf	___fttol@lval+1,f
 16134  161A  0CD4               	rrf	___fttol@lval,f
 16135  161B  0B89               	decfsz	9,f
 16136  161C  2E17               	goto	u4705
 16137  161D  3001               	movlw	1
 16138  161E  00CF               	movwf	??___fttol
 16139  161F  084F               	movf	??___fttol,w
 16140  1620  07D8               	addwf	___fttol@exp1,f
 16141  1621  1903               	btfsc	3,2
 16142  1622  2E3D               	goto	l6370
 16143  1623  2E16               	goto	l6358
 16144  1624                     l6360:	
 16145  1624  3018               	movlw	24
 16146  1625  0258               	subwf	___fttol@exp1,w
 16147  1626  1C03               	skipc
 16148  1627  2E3A               	goto	l6368
 16149  1628  3000               	movlw	0
 16150  1629  00CE               	movwf	?___fttol+3
 16151  162A  3000               	movlw	0
 16152  162B  00CD               	movwf	?___fttol+2
 16153  162C  3000               	movlw	0
 16154  162D  00CC               	movwf	?___fttol+1
 16155  162E  3000               	movlw	0
 16156  162F  00CB               	movwf	?___fttol
 16157  1630  0008               	return
 16158  1631                     l6366:	
 16159  1631  3001               	movlw	1
 16160  1632                     u4735:	
 16161  1632  35D4               	lslf	___fttol@lval,f
 16162  1633  0DD5               	rlf	___fttol@lval+1,f
 16163  1634  0DD6               	rlf	___fttol@lval+2,f
 16164  1635  0DD7               	rlf	___fttol@lval+3,f
 16165  1636  0B89               	decfsz	9,f
 16166  1637  2E32               	goto	u4735
 16167  1638  3001               	movlw	1
 16168  1639  02D8               	subwf	___fttol@exp1,f
 16169  163A                     l6368:	
 16170  163A  08D8               	movf	___fttol@exp1,f
 16171  163B  1D03               	skipz
 16172  163C  2E31               	goto	l6366
 16173  163D                     l6370:	
 16174  163D  0853               	movf	___fttol@sign1,w
 16175  163E  1903               	btfsc	3,2
 16176  163F  2E4B               	goto	l6374
 16177  1640  09D4               	comf	___fttol@lval,f
 16178  1641  09D5               	comf	___fttol@lval+1,f
 16179  1642  09D6               	comf	___fttol@lval+2,f
 16180  1643  09D7               	comf	___fttol@lval+3,f
 16181  1644  0AD4               	incf	___fttol@lval,f
 16182  1645  1903               	skipnz
 16183  1646  0AD5               	incf	___fttol@lval+1,f
 16184  1647  1903               	skipnz
 16185  1648  0AD6               	incf	___fttol@lval+2,f
 16186  1649  1903               	skipnz
 16187  164A  0AD7               	incf	___fttol@lval+3,f
 16188  164B                     l6374:	
 16189  164B  0857               	movf	___fttol@lval+3,w
 16190  164C  00CE               	movwf	?___fttol+3
 16191  164D  0856               	movf	___fttol@lval+2,w
 16192  164E  00CD               	movwf	?___fttol+2
 16193  164F  0855               	movf	___fttol@lval+1,w
 16194  1650  00CC               	movwf	?___fttol+1
 16195  1651  0854               	movf	___fttol@lval,w
 16196  1652  00CB               	movwf	?___fttol
 16197  1653  0008               	return
 16198  1654                     __end_of___fttol:	
 16199                           
 16200                           	psect	text99
 16201  0A64                     __ptext99:	
 16202 ;; *************** function ___ftmul *****************
 16203 ;; Defined at:
 16204 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;  f1              3   14[BANK0 ] float 
 16207 ;;  f2              3   17[BANK0 ] float 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16210 ;;  sign            1   29[BANK0 ] unsigned char 
 16211 ;;  cntr            1   28[BANK0 ] unsigned char 
 16212 ;;  exp             1   24[BANK0 ] unsigned char 
 16213 ;; Return value:  Size  Location     Type
 16214 ;;                  3   14[BANK0 ] float 
 16215 ;; Registers used:
 16216 ;;		wreg, status,2, status,0, pclath, cstack
 16217 ;; Tracked objects:
 16218 ;;		On entry : 0/0
 16219 ;;		On exit  : 0/0
 16220 ;;		Unchanged: 0/0
 16221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16222 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;Total ram usage:       16 bytes
 16227 ;; Hardware stack levels used:    1
 16228 ;; Hardware stack levels required when called:    5
 16229 ;; This function calls:
 16230 ;;		___ftpack
 16231 ;; This function is called by:
 16232 ;;		_getPercentValue
 16233 ;; This function uses a non-reentrant model
 16234 ;;
 16235                           
 16236                           
 16237                           ;psect for function ___ftmul
 16238  0A64                     ___ftmul:	
 16239                           
 16240                           ;incstack = 0
 16241                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16242  0A64  0020               	movlb	0	; select bank0
 16243  0A65  082E               	movf	___ftmul@f1,w
 16244  0A66  00B4               	movwf	??___ftmul
 16245  0A67  082F               	movf	___ftmul@f1+1,w
 16246  0A68  00B5               	movwf	??___ftmul+1
 16247  0A69  0830               	movf	___ftmul@f1+2,w
 16248  0A6A  00B6               	movwf	??___ftmul+2
 16249  0A6B  1003               	clrc
 16250  0A6C  0D35               	rlf	??___ftmul+1,w
 16251  0A6D  0D36               	rlf	??___ftmul+2,w
 16252  0A6E  00B7               	movwf	??___ftmul+3
 16253  0A6F  0837               	movf	??___ftmul+3,w
 16254  0A70  00B8               	movwf	___ftmul@exp
 16255  0A71  08B8               	movf	___ftmul@exp,f
 16256  0A72  1D03               	skipz
 16257  0A73  2A7B               	goto	l6290
 16258  0A74  3000               	movlw	0
 16259  0A75  00AE               	movwf	?___ftmul
 16260  0A76  3000               	movlw	0
 16261  0A77  00AF               	movwf	?___ftmul+1
 16262  0A78  3000               	movlw	0
 16263  0A79  00B0               	movwf	?___ftmul+2
 16264  0A7A  0008               	return
 16265  0A7B                     l6290:	
 16266  0A7B  0831               	movf	___ftmul@f2,w
 16267  0A7C  00B4               	movwf	??___ftmul
 16268  0A7D  0832               	movf	___ftmul@f2+1,w
 16269  0A7E  00B5               	movwf	??___ftmul+1
 16270  0A7F  0833               	movf	___ftmul@f2+2,w
 16271  0A80  00B6               	movwf	??___ftmul+2
 16272  0A81  1003               	clrc
 16273  0A82  0D35               	rlf	??___ftmul+1,w
 16274  0A83  0D36               	rlf	??___ftmul+2,w
 16275  0A84  00B7               	movwf	??___ftmul+3
 16276  0A85  0837               	movf	??___ftmul+3,w
 16277  0A86  00BD               	movwf	___ftmul@sign
 16278  0A87  08BD               	movf	___ftmul@sign,f
 16279  0A88  1D03               	skipz
 16280  0A89  2A91               	goto	l6296
 16281  0A8A  3000               	movlw	0
 16282  0A8B  00AE               	movwf	?___ftmul
 16283  0A8C  3000               	movlw	0
 16284  0A8D  00AF               	movwf	?___ftmul+1
 16285  0A8E  3000               	movlw	0
 16286  0A8F  00B0               	movwf	?___ftmul+2
 16287  0A90  0008               	return
 16288  0A91                     l6296:	
 16289  0A91  083D               	movf	___ftmul@sign,w
 16290  0A92  3E7B               	addlw	123
 16291  0A93  00B4               	movwf	??___ftmul
 16292  0A94  0834               	movf	??___ftmul,w
 16293  0A95  07B8               	addwf	___ftmul@exp,f
 16294  0A96  082E               	movf	___ftmul@f1,w
 16295  0A97  00B4               	movwf	??___ftmul
 16296  0A98  082F               	movf	___ftmul@f1+1,w
 16297  0A99  00B5               	movwf	??___ftmul+1
 16298  0A9A  0830               	movf	___ftmul@f1+2,w
 16299  0A9B  00B6               	movwf	??___ftmul+2
 16300  0A9C  3010               	movlw	16
 16301  0A9D                     u4565:	
 16302  0A9D  36B6               	lsrf	??___ftmul+2,f
 16303  0A9E  0CB5               	rrf	??___ftmul+1,f
 16304  0A9F  0CB4               	rrf	??___ftmul,f
 16305  0AA0  0B89               	decfsz	9,f
 16306  0AA1  2A9D               	goto	u4565
 16307  0AA2  0834               	movf	??___ftmul,w
 16308  0AA3  00B7               	movwf	??___ftmul+3
 16309  0AA4  0837               	movf	??___ftmul+3,w
 16310  0AA5  00BD               	movwf	___ftmul@sign
 16311  0AA6  0831               	movf	___ftmul@f2,w
 16312  0AA7  00B4               	movwf	??___ftmul
 16313  0AA8  0832               	movf	___ftmul@f2+1,w
 16314  0AA9  00B5               	movwf	??___ftmul+1
 16315  0AAA  0833               	movf	___ftmul@f2+2,w
 16316  0AAB  00B6               	movwf	??___ftmul+2
 16317  0AAC  3010               	movlw	16
 16318  0AAD                     u4575:	
 16319  0AAD  36B6               	lsrf	??___ftmul+2,f
 16320  0AAE  0CB5               	rrf	??___ftmul+1,f
 16321  0AAF  0CB4               	rrf	??___ftmul,f
 16322  0AB0  0B89               	decfsz	9,f
 16323  0AB1  2AAD               	goto	u4575
 16324  0AB2  0834               	movf	??___ftmul,w
 16325  0AB3  00B7               	movwf	??___ftmul+3
 16326  0AB4  0837               	movf	??___ftmul+3,w
 16327  0AB5  06BD               	xorwf	___ftmul@sign,f
 16328  0AB6  3080               	movlw	128
 16329  0AB7  00B4               	movwf	??___ftmul
 16330  0AB8  0834               	movf	??___ftmul,w
 16331  0AB9  05BD               	andwf	___ftmul@sign,f
 16332  0ABA  17AF               	bsf	___ftmul@f1+1,7
 16333  0ABB  17B2               	bsf	___ftmul@f2+1,7
 16334  0ABC  30FF               	movlw	255
 16335  0ABD  05B1               	andwf	___ftmul@f2,f
 16336  0ABE  30FF               	movlw	255
 16337  0ABF  05B2               	andwf	___ftmul@f2+1,f
 16338  0AC0  3000               	movlw	0
 16339  0AC1  05B3               	andwf	___ftmul@f2+2,f
 16340  0AC2  3000               	movlw	0
 16341  0AC3  00B9               	movwf	___ftmul@f3_as_product
 16342  0AC4  3000               	movlw	0
 16343  0AC5  00BA               	movwf	___ftmul@f3_as_product+1
 16344  0AC6  3000               	movlw	0
 16345  0AC7  00BB               	movwf	___ftmul@f3_as_product+2
 16346  0AC8  3007               	movlw	7
 16347  0AC9  00B4               	movwf	??___ftmul
 16348  0ACA  0834               	movf	??___ftmul,w
 16349  0ACB  00BC               	movwf	___ftmul@cntr
 16350  0ACC                     l6308:	
 16351  0ACC  1C2E               	btfss	___ftmul@f1,0
 16352  0ACD  2AD4               	goto	l6312
 16353  0ACE  0831               	movf	___ftmul@f2,w
 16354  0ACF  07B9               	addwf	___ftmul@f3_as_product,f
 16355  0AD0  0832               	movf	___ftmul@f2+1,w
 16356  0AD1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16357  0AD2  0833               	movf	___ftmul@f2+2,w
 16358  0AD3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16359  0AD4                     l6312:	
 16360  0AD4  3001               	movlw	1
 16361  0AD5                     u4595:	
 16362  0AD5  36B0               	lsrf	___ftmul@f1+2,f
 16363  0AD6  0CAF               	rrf	___ftmul@f1+1,f
 16364  0AD7  0CAE               	rrf	___ftmul@f1,f
 16365  0AD8  0B89               	decfsz	9,f
 16366  0AD9  2AD5               	goto	u4595
 16367  0ADA  3001               	movlw	1
 16368  0ADB                     u4605:	
 16369  0ADB  35B1               	lslf	___ftmul@f2,f
 16370  0ADC  0DB2               	rlf	___ftmul@f2+1,f
 16371  0ADD  0DB3               	rlf	___ftmul@f2+2,f
 16372  0ADE  0B89               	decfsz	9,f
 16373  0ADF  2ADB               	goto	u4605
 16374  0AE0  3001               	movlw	1
 16375  0AE1  02BC               	subwf	___ftmul@cntr,f
 16376  0AE2  1D03               	btfss	3,2
 16377  0AE3  2ACC               	goto	l6308
 16378  0AE4  3009               	movlw	9
 16379  0AE5  00B4               	movwf	??___ftmul
 16380  0AE6  0834               	movf	??___ftmul,w
 16381  0AE7  00BC               	movwf	___ftmul@cntr
 16382  0AE8                     l6320:	
 16383  0AE8  1C2E               	btfss	___ftmul@f1,0
 16384  0AE9  2AF0               	goto	l6324
 16385  0AEA  0831               	movf	___ftmul@f2,w
 16386  0AEB  07B9               	addwf	___ftmul@f3_as_product,f
 16387  0AEC  0832               	movf	___ftmul@f2+1,w
 16388  0AED  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16389  0AEE  0833               	movf	___ftmul@f2+2,w
 16390  0AEF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16391  0AF0                     l6324:	
 16392  0AF0  3001               	movlw	1
 16393  0AF1                     u4635:	
 16394  0AF1  36B0               	lsrf	___ftmul@f1+2,f
 16395  0AF2  0CAF               	rrf	___ftmul@f1+1,f
 16396  0AF3  0CAE               	rrf	___ftmul@f1,f
 16397  0AF4  0B89               	decfsz	9,f
 16398  0AF5  2AF1               	goto	u4635
 16399  0AF6  3001               	movlw	1
 16400  0AF7                     u4645:	
 16401  0AF7  36BB               	lsrf	___ftmul@f3_as_product+2,f
 16402  0AF8  0CBA               	rrf	___ftmul@f3_as_product+1,f
 16403  0AF9  0CB9               	rrf	___ftmul@f3_as_product,f
 16404  0AFA  0B89               	decfsz	9,f
 16405  0AFB  2AF7               	goto	u4645
 16406  0AFC  3001               	movlw	1
 16407  0AFD  02BC               	subwf	___ftmul@cntr,f
 16408  0AFE  1D03               	btfss	3,2
 16409  0AFF  2AE8               	goto	l6320
 16410  0B00  0839               	movf	___ftmul@f3_as_product,w
 16411  0B01  00A0               	movwf	___ftpack@arg
 16412  0B02  083A               	movf	___ftmul@f3_as_product+1,w
 16413  0B03  00A1               	movwf	___ftpack@arg+1
 16414  0B04  083B               	movf	___ftmul@f3_as_product+2,w
 16415  0B05  00A2               	movwf	___ftpack@arg+2
 16416  0B06  0838               	movf	___ftmul@exp,w
 16417  0B07  00B4               	movwf	??___ftmul
 16418  0B08  0834               	movf	??___ftmul,w
 16419  0B09  00A3               	movwf	___ftpack@exp
 16420  0B0A  083D               	movf	___ftmul@sign,w
 16421  0B0B  00B5               	movwf	??___ftmul+1
 16422  0B0C  0835               	movf	??___ftmul+1,w
 16423  0B0D  00A4               	movwf	___ftpack@sign
 16424  0B0E  3190  20A0         	fcall	___ftpack
 16425  0B10  0020               	movlb	0	; select bank0
 16426  0B11  0820               	movf	?___ftpack,w
 16427  0B12  00AE               	movwf	?___ftmul
 16428  0B13  0821               	movf	?___ftpack+1,w
 16429  0B14  00AF               	movwf	?___ftmul+1
 16430  0B15  0822               	movf	?___ftpack+2,w
 16431  0B16  00B0               	movwf	?___ftmul+2
 16432  0B17  0008               	return
 16433  0B18                     __end_of___ftmul:	
 16434                           
 16435                           	psect	text100
 16436  09BB                     __ptext100:	
 16437 ;; *************** function ___ftdiv *****************
 16438 ;; Defined at:
 16439 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16440 ;; Parameters:    Size  Location     Type
 16441 ;;  f2              3   14[BANK0 ] float 
 16442 ;;  f1              3   17[BANK0 ] float 
 16443 ;; Auto vars:     Size  Location     Type
 16444 ;;  f3              3   25[BANK0 ] float 
 16445 ;;  sign            1   29[BANK0 ] unsigned char 
 16446 ;;  exp             1   28[BANK0 ] unsigned char 
 16447 ;;  cntr            1   24[BANK0 ] unsigned char 
 16448 ;; Return value:  Size  Location     Type
 16449 ;;                  3   14[BANK0 ] float 
 16450 ;; Registers used:
 16451 ;;		wreg, status,2, status,0, pclath, cstack
 16452 ;; Tracked objects:
 16453 ;;		On entry : 0/0
 16454 ;;		On exit  : 0/0
 16455 ;;		Unchanged: 0/0
 16456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16457 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;Total ram usage:       16 bytes
 16462 ;; Hardware stack levels used:    1
 16463 ;; Hardware stack levels required when called:    5
 16464 ;; This function calls:
 16465 ;;		___ftpack
 16466 ;; This function is called by:
 16467 ;;		_getPercentValue
 16468 ;;		_setPercentValue
 16469 ;; This function uses a non-reentrant model
 16470 ;;
 16471                           
 16472                           
 16473                           ;psect for function ___ftdiv
 16474  09BB                     ___ftdiv:	
 16475                           
 16476                           ;incstack = 0
 16477                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16478  09BB  0020               	movlb	0	; select bank0
 16479  09BC  0831               	movf	___ftdiv@f1,w
 16480  09BD  00B4               	movwf	??___ftdiv
 16481  09BE  0832               	movf	___ftdiv@f1+1,w
 16482  09BF  00B5               	movwf	??___ftdiv+1
 16483  09C0  0833               	movf	___ftdiv@f1+2,w
 16484  09C1  00B6               	movwf	??___ftdiv+2
 16485  09C2  1003               	clrc
 16486  09C3  0D35               	rlf	??___ftdiv+1,w
 16487  09C4  0D36               	rlf	??___ftdiv+2,w
 16488  09C5  00B7               	movwf	??___ftdiv+3
 16489  09C6  0837               	movf	??___ftdiv+3,w
 16490  09C7  00BC               	movwf	___ftdiv@exp
 16491  09C8  08BC               	movf	___ftdiv@exp,f
 16492  09C9  1D03               	skipz
 16493  09CA  29D2               	goto	l6248
 16494  09CB  3000               	movlw	0
 16495  09CC  00AE               	movwf	?___ftdiv
 16496  09CD  3000               	movlw	0
 16497  09CE  00AF               	movwf	?___ftdiv+1
 16498  09CF  3000               	movlw	0
 16499  09D0  00B0               	movwf	?___ftdiv+2
 16500  09D1  0008               	return
 16501  09D2                     l6248:	
 16502  09D2  082E               	movf	___ftdiv@f2,w
 16503  09D3  00B4               	movwf	??___ftdiv
 16504  09D4  082F               	movf	___ftdiv@f2+1,w
 16505  09D5  00B5               	movwf	??___ftdiv+1
 16506  09D6  0830               	movf	___ftdiv@f2+2,w
 16507  09D7  00B6               	movwf	??___ftdiv+2
 16508  09D8  1003               	clrc
 16509  09D9  0D35               	rlf	??___ftdiv+1,w
 16510  09DA  0D36               	rlf	??___ftdiv+2,w
 16511  09DB  00B7               	movwf	??___ftdiv+3
 16512  09DC  0837               	movf	??___ftdiv+3,w
 16513  09DD  00BD               	movwf	___ftdiv@sign
 16514  09DE  08BD               	movf	___ftdiv@sign,f
 16515  09DF  1D03               	skipz
 16516  09E0  29E8               	goto	l6254
 16517  09E1  3000               	movlw	0
 16518  09E2  00AE               	movwf	?___ftdiv
 16519  09E3  3000               	movlw	0
 16520  09E4  00AF               	movwf	?___ftdiv+1
 16521  09E5  3000               	movlw	0
 16522  09E6  00B0               	movwf	?___ftdiv+2
 16523  09E7  0008               	return
 16524  09E8                     l6254:	
 16525  09E8  3000               	movlw	0
 16526  09E9  00B9               	movwf	___ftdiv@f3
 16527  09EA  3000               	movlw	0
 16528  09EB  00BA               	movwf	___ftdiv@f3+1
 16529  09EC  3000               	movlw	0
 16530  09ED  00BB               	movwf	___ftdiv@f3+2
 16531  09EE  3089               	movlw	137
 16532  09EF  073D               	addwf	___ftdiv@sign,w
 16533  09F0  00B4               	movwf	??___ftdiv
 16534  09F1  0834               	movf	??___ftdiv,w
 16535  09F2  02BC               	subwf	___ftdiv@exp,f
 16536  09F3  0831               	movf	___ftdiv@f1,w
 16537  09F4  00B4               	movwf	??___ftdiv
 16538  09F5  0832               	movf	___ftdiv@f1+1,w
 16539  09F6  00B5               	movwf	??___ftdiv+1
 16540  09F7  0833               	movf	___ftdiv@f1+2,w
 16541  09F8  00B6               	movwf	??___ftdiv+2
 16542  09F9  3010               	movlw	16
 16543  09FA                     u4485:	
 16544  09FA  36B6               	lsrf	??___ftdiv+2,f
 16545  09FB  0CB5               	rrf	??___ftdiv+1,f
 16546  09FC  0CB4               	rrf	??___ftdiv,f
 16547  09FD  0B89               	decfsz	9,f
 16548  09FE  29FA               	goto	u4485
 16549  09FF  0834               	movf	??___ftdiv,w
 16550  0A00  00B7               	movwf	??___ftdiv+3
 16551  0A01  0837               	movf	??___ftdiv+3,w
 16552  0A02  00BD               	movwf	___ftdiv@sign
 16553  0A03  082E               	movf	___ftdiv@f2,w
 16554  0A04  00B4               	movwf	??___ftdiv
 16555  0A05  082F               	movf	___ftdiv@f2+1,w
 16556  0A06  00B5               	movwf	??___ftdiv+1
 16557  0A07  0830               	movf	___ftdiv@f2+2,w
 16558  0A08  00B6               	movwf	??___ftdiv+2
 16559  0A09  3010               	movlw	16
 16560  0A0A                     u4495:	
 16561  0A0A  36B6               	lsrf	??___ftdiv+2,f
 16562  0A0B  0CB5               	rrf	??___ftdiv+1,f
 16563  0A0C  0CB4               	rrf	??___ftdiv,f
 16564  0A0D  0B89               	decfsz	9,f
 16565  0A0E  2A0A               	goto	u4495
 16566  0A0F  0834               	movf	??___ftdiv,w
 16567  0A10  00B7               	movwf	??___ftdiv+3
 16568  0A11  0837               	movf	??___ftdiv+3,w
 16569  0A12  06BD               	xorwf	___ftdiv@sign,f
 16570  0A13  3080               	movlw	128
 16571  0A14  00B4               	movwf	??___ftdiv
 16572  0A15  0834               	movf	??___ftdiv,w
 16573  0A16  05BD               	andwf	___ftdiv@sign,f
 16574  0A17  17B2               	bsf	___ftdiv@f1+1,7
 16575  0A18  30FF               	movlw	255
 16576  0A19  05B1               	andwf	___ftdiv@f1,f
 16577  0A1A  30FF               	movlw	255
 16578  0A1B  05B2               	andwf	___ftdiv@f1+1,f
 16579  0A1C  3000               	movlw	0
 16580  0A1D  05B3               	andwf	___ftdiv@f1+2,f
 16581  0A1E  17AF               	bsf	___ftdiv@f2+1,7
 16582  0A1F  30FF               	movlw	255
 16583  0A20  05AE               	andwf	___ftdiv@f2,f
 16584  0A21  30FF               	movlw	255
 16585  0A22  05AF               	andwf	___ftdiv@f2+1,f
 16586  0A23  3000               	movlw	0
 16587  0A24  05B0               	andwf	___ftdiv@f2+2,f
 16588  0A25  3018               	movlw	24
 16589  0A26  00B4               	movwf	??___ftdiv
 16590  0A27  0834               	movf	??___ftdiv,w
 16591  0A28  00B8               	movwf	___ftdiv@cntr
 16592  0A29                     l6268:	
 16593  0A29  3001               	movlw	1
 16594  0A2A                     u4505:	
 16595  0A2A  35B9               	lslf	___ftdiv@f3,f
 16596  0A2B  0DBA               	rlf	___ftdiv@f3+1,f
 16597  0A2C  0DBB               	rlf	___ftdiv@f3+2,f
 16598  0A2D  0B89               	decfsz	9,f
 16599  0A2E  2A2A               	goto	u4505
 16600  0A2F  0830               	movf	___ftdiv@f2+2,w
 16601  0A30  0233               	subwf	___ftdiv@f1+2,w
 16602  0A31  1D03               	skipz
 16603  0A32  2A39               	goto	u4515
 16604  0A33  082F               	movf	___ftdiv@f2+1,w
 16605  0A34  0232               	subwf	___ftdiv@f1+1,w
 16606  0A35  1D03               	skipz
 16607  0A36  2A39               	goto	u4515
 16608  0A37  082E               	movf	___ftdiv@f2,w
 16609  0A38  0231               	subwf	___ftdiv@f1,w
 16610  0A39                     u4515:	
 16611  0A39  1C03               	skipc
 16612  0A3A  2A42               	goto	l6276
 16613  0A3B  082E               	movf	___ftdiv@f2,w
 16614  0A3C  02B1               	subwf	___ftdiv@f1,f
 16615  0A3D  082F               	movf	___ftdiv@f2+1,w
 16616  0A3E  3BB2               	subwfb	___ftdiv@f1+1,f
 16617  0A3F  0830               	movf	___ftdiv@f2+2,w
 16618  0A40  3BB3               	subwfb	___ftdiv@f1+2,f
 16619  0A41  1439               	bsf	___ftdiv@f3,0
 16620  0A42                     l6276:	
 16621  0A42  3001               	movlw	1
 16622  0A43                     u4525:	
 16623  0A43  35B1               	lslf	___ftdiv@f1,f
 16624  0A44  0DB2               	rlf	___ftdiv@f1+1,f
 16625  0A45  0DB3               	rlf	___ftdiv@f1+2,f
 16626  0A46  0B89               	decfsz	9,f
 16627  0A47  2A43               	goto	u4525
 16628  0A48  3001               	movlw	1
 16629  0A49  02B8               	subwf	___ftdiv@cntr,f
 16630  0A4A  1D03               	btfss	3,2
 16631  0A4B  2A29               	goto	l6268
 16632  0A4C  0839               	movf	___ftdiv@f3,w
 16633  0A4D  00A0               	movwf	___ftpack@arg
 16634  0A4E  083A               	movf	___ftdiv@f3+1,w
 16635  0A4F  00A1               	movwf	___ftpack@arg+1
 16636  0A50  083B               	movf	___ftdiv@f3+2,w
 16637  0A51  00A2               	movwf	___ftpack@arg+2
 16638  0A52  083C               	movf	___ftdiv@exp,w
 16639  0A53  00B4               	movwf	??___ftdiv
 16640  0A54  0834               	movf	??___ftdiv,w
 16641  0A55  00A3               	movwf	___ftpack@exp
 16642  0A56  083D               	movf	___ftdiv@sign,w
 16643  0A57  00B5               	movwf	??___ftdiv+1
 16644  0A58  0835               	movf	??___ftdiv+1,w
 16645  0A59  00A4               	movwf	___ftpack@sign
 16646  0A5A  3190  20A0         	fcall	___ftpack
 16647  0A5C  0020               	movlb	0	; select bank0
 16648  0A5D  0820               	movf	?___ftpack,w
 16649  0A5E  00AE               	movwf	?___ftdiv
 16650  0A5F  0821               	movf	?___ftpack+1,w
 16651  0A60  00AF               	movwf	?___ftdiv+1
 16652  0A61  0822               	movf	?___ftpack+2,w
 16653  0A62  00B0               	movwf	?___ftdiv+2
 16654  0A63  0008               	return
 16655  0A64                     __end_of___ftdiv:	
 16656                           
 16657                           	psect	text101
 16658  0BE1                     __ptext101:	
 16659 ;; *************** function ___ftadd *****************
 16660 ;; Defined at:
 16661 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16662 ;; Parameters:    Size  Location     Type
 16663 ;;  f1              3   30[BANK0 ] float 
 16664 ;;  f2              3   33[BANK0 ] float 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  exp1            1   42[BANK0 ] unsigned char 
 16667 ;;  exp2            1   41[BANK0 ] unsigned char 
 16668 ;;  sign            1   40[BANK0 ] unsigned char 
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  3   30[BANK0 ] float 
 16671 ;; Registers used:
 16672 ;;		wreg, status,2, status,0, pclath, cstack
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16678 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;Total ram usage:       13 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    5
 16685 ;; This function calls:
 16686 ;;		___ftpack
 16687 ;; This function is called by:
 16688 ;;		_getPercentValue
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           
 16693                           ;psect for function ___ftadd
 16694  0BE1                     ___ftadd:	
 16695                           
 16696                           ;incstack = 0
 16697                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16698  0BE1  0020               	movlb	0	; select bank0
 16699  0BE2  083E               	movf	___ftadd@f1,w
 16700  0BE3  00C4               	movwf	??___ftadd
 16701  0BE4  083F               	movf	___ftadd@f1+1,w
 16702  0BE5  00C5               	movwf	??___ftadd+1
 16703  0BE6  0840               	movf	___ftadd@f1+2,w
 16704  0BE7  00C6               	movwf	??___ftadd+2
 16705  0BE8  1003               	clrc
 16706  0BE9  0D45               	rlf	??___ftadd+1,w
 16707  0BEA  0D46               	rlf	??___ftadd+2,w
 16708  0BEB  00C7               	movwf	??___ftadd+3
 16709  0BEC  0847               	movf	??___ftadd+3,w
 16710  0BED  00CA               	movwf	___ftadd@exp1
 16711  0BEE  0841               	movf	___ftadd@f2,w
 16712  0BEF  00C4               	movwf	??___ftadd
 16713  0BF0  0842               	movf	___ftadd@f2+1,w
 16714  0BF1  00C5               	movwf	??___ftadd+1
 16715  0BF2  0843               	movf	___ftadd@f2+2,w
 16716  0BF3  00C6               	movwf	??___ftadd+2
 16717  0BF4  1003               	clrc
 16718  0BF5  0D45               	rlf	??___ftadd+1,w
 16719  0BF6  0D46               	rlf	??___ftadd+2,w
 16720  0BF7  00C7               	movwf	??___ftadd+3
 16721  0BF8  0847               	movf	??___ftadd+3,w
 16722  0BF9  00C9               	movwf	___ftadd@exp2
 16723  0BFA  084A               	movf	___ftadd@exp1,w
 16724  0BFB  1903               	btfsc	3,2
 16725  0BFC  2C09               	goto	l6178
 16726  0BFD  0849               	movf	___ftadd@exp2,w
 16727  0BFE  024A               	subwf	___ftadd@exp1,w
 16728  0BFF  1803               	skipnc
 16729  0C00  2C10               	goto	l6182
 16730  0C01  034A               	decf	___ftadd@exp1,w
 16731  0C02  3AFF               	xorlw	255
 16732  0C03  0749               	addwf	___ftadd@exp2,w
 16733  0C04  00C4               	movwf	??___ftadd
 16734  0C05  3019               	movlw	25
 16735  0C06  0244               	subwf	??___ftadd,w
 16736  0C07  1C03               	skipc
 16737  0C08  2C10               	goto	l6182
 16738  0C09                     l6178:	
 16739  0C09  0841               	movf	___ftadd@f2,w
 16740  0C0A  00BE               	movwf	?___ftadd
 16741  0C0B  0842               	movf	___ftadd@f2+1,w
 16742  0C0C  00BF               	movwf	?___ftadd+1
 16743  0C0D  0843               	movf	___ftadd@f2+2,w
 16744  0C0E  00C0               	movwf	?___ftadd+2
 16745  0C0F  0008               	return
 16746  0C10                     l6182:	
 16747  0C10  0849               	movf	___ftadd@exp2,w
 16748  0C11  1903               	btfsc	3,2
 16749  0C12  0008               	return
 16750  0C13  084A               	movf	___ftadd@exp1,w
 16751  0C14  0249               	subwf	___ftadd@exp2,w
 16752  0C15  1803               	skipnc
 16753  0C16  2C1F               	goto	l6188
 16754  0C17  0349               	decf	___ftadd@exp2,w
 16755  0C18  3AFF               	xorlw	255
 16756  0C19  074A               	addwf	___ftadd@exp1,w
 16757  0C1A  00C4               	movwf	??___ftadd
 16758  0C1B  3019               	movlw	25
 16759  0C1C  0244               	subwf	??___ftadd,w
 16760  0C1D  1803               	btfsc	3,0
 16761  0C1E  0008               	return
 16762  0C1F                     l6188:	
 16763  0C1F  3006               	movlw	6
 16764  0C20  00C4               	movwf	??___ftadd
 16765  0C21  0844               	movf	??___ftadd,w
 16766  0C22  00C8               	movwf	___ftadd@sign
 16767  0C23  1BC0               	btfsc	___ftadd@f1+2,7
 16768  0C24  17C8               	bsf	___ftadd@sign,7
 16769  0C25  1BC3               	btfsc	___ftadd@f2+2,7
 16770  0C26  1748               	bsf	___ftadd@sign,6
 16771  0C27  17BF               	bsf	___ftadd@f1+1,7
 16772  0C28  30FF               	movlw	255
 16773  0C29  05BE               	andwf	___ftadd@f1,f
 16774  0C2A  30FF               	movlw	255
 16775  0C2B  05BF               	andwf	___ftadd@f1+1,f
 16776  0C2C  3000               	movlw	0
 16777  0C2D  05C0               	andwf	___ftadd@f1+2,f
 16778  0C2E  17C2               	bsf	___ftadd@f2+1,7
 16779  0C2F  30FF               	movlw	255
 16780  0C30  05C1               	andwf	___ftadd@f2,f
 16781  0C31  30FF               	movlw	255
 16782  0C32  05C2               	andwf	___ftadd@f2+1,f
 16783  0C33  3000               	movlw	0
 16784  0C34  05C3               	andwf	___ftadd@f2+2,f
 16785  0C35  0849               	movf	___ftadd@exp2,w
 16786  0C36  024A               	subwf	___ftadd@exp1,w
 16787  0C37  1803               	skipnc
 16788  0C38  2C5B               	goto	l6210
 16789  0C39                     l6200:	
 16790  0C39  3001               	movlw	1
 16791  0C3A                     u4325:	
 16792  0C3A  35C1               	lslf	___ftadd@f2,f
 16793  0C3B  0DC2               	rlf	___ftadd@f2+1,f
 16794  0C3C  0DC3               	rlf	___ftadd@f2+2,f
 16795  0C3D  0B89               	decfsz	9,f
 16796  0C3E  2C3A               	goto	u4325
 16797  0C3F  3001               	movlw	1
 16798  0C40  02C9               	subwf	___ftadd@exp2,f
 16799  0C41  0849               	movf	___ftadd@exp2,w
 16800  0C42  064A               	xorwf	___ftadd@exp1,w
 16801  0C43  1903               	skipnz
 16802  0C44  2C56               	goto	l6208
 16803  0C45  3001               	movlw	1
 16804  0C46  02C8               	subwf	___ftadd@sign,f
 16805  0C47  0848               	movf	___ftadd@sign,w
 16806  0C48  3907               	andlw	7
 16807  0C49  1903               	btfsc	3,2
 16808  0C4A  2C56               	goto	l6208
 16809  0C4B  2C39               	goto	l6200
 16810  0C4C                     l6206:	
 16811  0C4C  3001               	movlw	1
 16812  0C4D                     u4355:	
 16813  0C4D  36C0               	lsrf	___ftadd@f1+2,f
 16814  0C4E  0CBF               	rrf	___ftadd@f1+1,f
 16815  0C4F  0CBE               	rrf	___ftadd@f1,f
 16816  0C50  0B89               	decfsz	9,f
 16817  0C51  2C4D               	goto	u4355
 16818  0C52  3001               	movlw	1
 16819  0C53  00C4               	movwf	??___ftadd
 16820  0C54  0844               	movf	??___ftadd,w
 16821  0C55  07CA               	addwf	___ftadd@exp1,f
 16822  0C56                     l6208:	
 16823  0C56  084A               	movf	___ftadd@exp1,w
 16824  0C57  0649               	xorwf	___ftadd@exp2,w
 16825  0C58  1903               	btfsc	3,2
 16826  0C59  2C80               	goto	l3433
 16827  0C5A  2C4C               	goto	l6206
 16828  0C5B                     l6210:	
 16829  0C5B  084A               	movf	___ftadd@exp1,w
 16830  0C5C  0249               	subwf	___ftadd@exp2,w
 16831  0C5D  1803               	skipnc
 16832  0C5E  2C80               	goto	l3433
 16833  0C5F                     l6212:	
 16834  0C5F  3001               	movlw	1
 16835  0C60                     u4385:	
 16836  0C60  35BE               	lslf	___ftadd@f1,f
 16837  0C61  0DBF               	rlf	___ftadd@f1+1,f
 16838  0C62  0DC0               	rlf	___ftadd@f1+2,f
 16839  0C63  0B89               	decfsz	9,f
 16840  0C64  2C60               	goto	u4385
 16841  0C65  3001               	movlw	1
 16842  0C66  02CA               	subwf	___ftadd@exp1,f
 16843  0C67  0849               	movf	___ftadd@exp2,w
 16844  0C68  064A               	xorwf	___ftadd@exp1,w
 16845  0C69  1903               	skipnz
 16846  0C6A  2C7C               	goto	l6220
 16847  0C6B  3001               	movlw	1
 16848  0C6C  02C8               	subwf	___ftadd@sign,f
 16849  0C6D  0848               	movf	___ftadd@sign,w
 16850  0C6E  3907               	andlw	7
 16851  0C6F  1903               	btfsc	3,2
 16852  0C70  2C7C               	goto	l6220
 16853  0C71  2C5F               	goto	l6212
 16854  0C72                     l6218:	
 16855  0C72  3001               	movlw	1
 16856  0C73                     u4415:	
 16857  0C73  36C3               	lsrf	___ftadd@f2+2,f
 16858  0C74  0CC2               	rrf	___ftadd@f2+1,f
 16859  0C75  0CC1               	rrf	___ftadd@f2,f
 16860  0C76  0B89               	decfsz	9,f
 16861  0C77  2C73               	goto	u4415
 16862  0C78  3001               	movlw	1
 16863  0C79  00C4               	movwf	??___ftadd
 16864  0C7A  0844               	movf	??___ftadd,w
 16865  0C7B  07C9               	addwf	___ftadd@exp2,f
 16866  0C7C                     l6220:	
 16867  0C7C  084A               	movf	___ftadd@exp1,w
 16868  0C7D  0649               	xorwf	___ftadd@exp2,w
 16869  0C7E  1D03               	skipz
 16870  0C7F  2C72               	goto	l6218
 16871  0C80                     l3433:	
 16872  0C80  1FC8               	btfss	___ftadd@sign,7
 16873  0C81  2C92               	goto	l6224
 16874  0C82  30FF               	movlw	255
 16875  0C83  06BE               	xorwf	___ftadd@f1,f
 16876  0C84  30FF               	movlw	255
 16877  0C85  06BF               	xorwf	___ftadd@f1+1,f
 16878  0C86  30FF               	movlw	255
 16879  0C87  06C0               	xorwf	___ftadd@f1+2,f
 16880  0C88  3001               	movlw	1
 16881  0C89  07BE               	addwf	___ftadd@f1,f
 16882  0C8A  3000               	movlw	0
 16883  0C8B  1803               	skipnc
 16884  0C8C  3001               	movlw	1
 16885  0C8D  07BF               	addwf	___ftadd@f1+1,f
 16886  0C8E  3000               	movlw	0
 16887  0C8F  1803               	skipnc
 16888  0C90  3001               	movlw	1
 16889  0C91  07C0               	addwf	___ftadd@f1+2,f
 16890  0C92                     l6224:	
 16891  0C92  1F48               	btfss	___ftadd@sign,6
 16892  0C93  2CA4               	goto	l6228
 16893  0C94  30FF               	movlw	255
 16894  0C95  06C1               	xorwf	___ftadd@f2,f
 16895  0C96  30FF               	movlw	255
 16896  0C97  06C2               	xorwf	___ftadd@f2+1,f
 16897  0C98  30FF               	movlw	255
 16898  0C99  06C3               	xorwf	___ftadd@f2+2,f
 16899  0C9A  3001               	movlw	1
 16900  0C9B  07C1               	addwf	___ftadd@f2,f
 16901  0C9C  3000               	movlw	0
 16902  0C9D  1803               	skipnc
 16903  0C9E  3001               	movlw	1
 16904  0C9F  07C2               	addwf	___ftadd@f2+1,f
 16905  0CA0  3000               	movlw	0
 16906  0CA1  1803               	skipnc
 16907  0CA2  3001               	movlw	1
 16908  0CA3  07C3               	addwf	___ftadd@f2+2,f
 16909  0CA4                     l6228:	
 16910  0CA4  01C8               	clrf	___ftadd@sign
 16911  0CA5  083E               	movf	___ftadd@f1,w
 16912  0CA6  07C1               	addwf	___ftadd@f2,f
 16913  0CA7  083F               	movf	___ftadd@f1+1,w
 16914  0CA8  3DC2               	addwfc	___ftadd@f2+1,f
 16915  0CA9  0840               	movf	___ftadd@f1+2,w
 16916  0CAA  3DC3               	addwfc	___ftadd@f2+2,f
 16917  0CAB  1FC3               	btfss	___ftadd@f2+2,7
 16918  0CAC  2CBF               	goto	l6238
 16919  0CAD  30FF               	movlw	255
 16920  0CAE  06C1               	xorwf	___ftadd@f2,f
 16921  0CAF  30FF               	movlw	255
 16922  0CB0  06C2               	xorwf	___ftadd@f2+1,f
 16923  0CB1  30FF               	movlw	255
 16924  0CB2  06C3               	xorwf	___ftadd@f2+2,f
 16925  0CB3  3001               	movlw	1
 16926  0CB4  07C1               	addwf	___ftadd@f2,f
 16927  0CB5  3000               	movlw	0
 16928  0CB6  1803               	skipnc
 16929  0CB7  3001               	movlw	1
 16930  0CB8  07C2               	addwf	___ftadd@f2+1,f
 16931  0CB9  3000               	movlw	0
 16932  0CBA  1803               	skipnc
 16933  0CBB  3001               	movlw	1
 16934  0CBC  07C3               	addwf	___ftadd@f2+2,f
 16935  0CBD  01C8               	clrf	___ftadd@sign
 16936  0CBE  0AC8               	incf	___ftadd@sign,f
 16937  0CBF                     l6238:	
 16938  0CBF  0841               	movf	___ftadd@f2,w
 16939  0CC0  00A0               	movwf	___ftpack@arg
 16940  0CC1  0842               	movf	___ftadd@f2+1,w
 16941  0CC2  00A1               	movwf	___ftpack@arg+1
 16942  0CC3  0843               	movf	___ftadd@f2+2,w
 16943  0CC4  00A2               	movwf	___ftpack@arg+2
 16944  0CC5  084A               	movf	___ftadd@exp1,w
 16945  0CC6  00C4               	movwf	??___ftadd
 16946  0CC7  0844               	movf	??___ftadd,w
 16947  0CC8  00A3               	movwf	___ftpack@exp
 16948  0CC9  0848               	movf	___ftadd@sign,w
 16949  0CCA  00C5               	movwf	??___ftadd+1
 16950  0CCB  0845               	movf	??___ftadd+1,w
 16951  0CCC  00A4               	movwf	___ftpack@sign
 16952  0CCD  3190  20A0         	fcall	___ftpack
 16953  0CCF  0020               	movlb	0	; select bank0
 16954  0CD0  0820               	movf	?___ftpack,w
 16955  0CD1  00BE               	movwf	?___ftadd
 16956  0CD2  0821               	movf	?___ftpack+1,w
 16957  0CD3  00BF               	movwf	?___ftadd+1
 16958  0CD4  0822               	movf	?___ftpack+2,w
 16959  0CD5  00C0               	movwf	?___ftadd+2
 16960  0CD6  0008               	return
 16961  0CD7                     __end_of___ftadd:	
 16962                           
 16963                           	psect	text102
 16964  27DE                     __ptext102:	
 16965 ;; *************** function ___awtoft *****************
 16966 ;; Defined at:
 16967 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16968 ;; Parameters:    Size  Location     Type
 16969 ;;  c               2    8[BANK0 ] int 
 16970 ;; Auto vars:     Size  Location     Type
 16971 ;;  sign            1   13[BANK0 ] unsigned char 
 16972 ;; Return value:  Size  Location     Type
 16973 ;;                  3    8[BANK0 ] float 
 16974 ;; Registers used:
 16975 ;;		wreg, status,2, status,0, pclath, cstack
 16976 ;; Tracked objects:
 16977 ;;		On entry : 0/0
 16978 ;;		On exit  : 0/0
 16979 ;;		Unchanged: 0/0
 16980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16981 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;Total ram usage:        6 bytes
 16986 ;; Hardware stack levels used:    1
 16987 ;; Hardware stack levels required when called:    5
 16988 ;; This function calls:
 16989 ;;		___ftpack
 16990 ;; This function is called by:
 16991 ;;		_getPercentValue
 16992 ;;		_setPercentValue
 16993 ;; This function uses a non-reentrant model
 16994 ;;
 16995                           
 16996                           
 16997                           ;psect for function ___awtoft
 16998  27DE                     ___awtoft:	
 16999                           
 17000                           ;incstack = 0
 17001                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17002  27DE  0020               	movlb	0	; select bank0
 17003  27DF  01AD               	clrf	___awtoft@sign
 17004  27E0  1FA9               	btfss	___awtoft@c+1,7
 17005  27E1  2FE9               	goto	l6166
 17006  27E2  09A8               	comf	___awtoft@c,f
 17007  27E3  09A9               	comf	___awtoft@c+1,f
 17008  27E4  0AA8               	incf	___awtoft@c,f
 17009  27E5  1903               	skipnz
 17010  27E6  0AA9               	incf	___awtoft@c+1,f
 17011  27E7  01AD               	clrf	___awtoft@sign
 17012  27E8  0AAD               	incf	___awtoft@sign,f
 17013  27E9                     l6166:	
 17014  27E9  0828               	movf	___awtoft@c,w
 17015  27EA  00A0               	movwf	___ftpack@arg
 17016  27EB  0829               	movf	___awtoft@c+1,w
 17017  27EC  00A1               	movwf	___ftpack@arg+1
 17018  27ED  01A2               	clrf	___ftpack@arg+2
 17019  27EE  308E               	movlw	142
 17020  27EF  00AB               	movwf	??___awtoft
 17021  27F0  082B               	movf	??___awtoft,w
 17022  27F1  00A3               	movwf	___ftpack@exp
 17023  27F2  082D               	movf	___awtoft@sign,w
 17024  27F3  00AC               	movwf	??___awtoft+1
 17025  27F4  082C               	movf	??___awtoft+1,w
 17026  27F5  00A4               	movwf	___ftpack@sign
 17027  27F6  3190  20A0         	fcall	___ftpack
 17028  27F8  0020               	movlb	0	; select bank0
 17029  27F9  0820               	movf	?___ftpack,w
 17030  27FA  00A8               	movwf	?___awtoft
 17031  27FB  0821               	movf	?___ftpack+1,w
 17032  27FC  00A9               	movwf	?___awtoft+1
 17033  27FD  0822               	movf	?___ftpack+2,w
 17034  27FE  00AA               	movwf	?___awtoft+2
 17035  27FF  0008               	return
 17036  2800                     __end_of___awtoft:	
 17037                           
 17038                           	psect	text103
 17039  10A0                     __ptext103:	
 17040 ;; *************** function ___ftpack *****************
 17041 ;; Defined at:
 17042 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17043 ;; Parameters:    Size  Location     Type
 17044 ;;  arg             3    0[BANK0 ] unsigned um
 17045 ;;  exp             1    3[BANK0 ] unsigned char 
 17046 ;;  sign            1    4[BANK0 ] unsigned char 
 17047 ;; Auto vars:     Size  Location     Type
 17048 ;;		None
 17049 ;; Return value:  Size  Location     Type
 17050 ;;                  3    0[BANK0 ] float 
 17051 ;; Registers used:
 17052 ;;		wreg, status,2, status,0
 17053 ;; Tracked objects:
 17054 ;;		On entry : 0/0
 17055 ;;		On exit  : 0/0
 17056 ;;		Unchanged: 0/0
 17057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17058 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17060 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17061 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17062 ;;Total ram usage:        8 bytes
 17063 ;; Hardware stack levels used:    1
 17064 ;; Hardware stack levels required when called:    4
 17065 ;; This function calls:
 17066 ;;		Nothing
 17067 ;; This function is called by:
 17068 ;;		___awtoft
 17069 ;;		___ftadd
 17070 ;;		___ftdiv
 17071 ;;		___ftmul
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           
 17076                           ;psect for function ___ftpack
 17077  10A0                     ___ftpack:	
 17078                           
 17079                           ;incstack = 0
 17080                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17081  10A0  0020               	movlb	0	; select bank0
 17082  10A1  0823               	movf	___ftpack@exp,w
 17083  10A2  1903               	btfsc	3,2
 17084  10A3  28A9               	goto	l6132
 17085  10A4  0822               	movf	___ftpack@arg+2,w
 17086  10A5  0421               	iorwf	___ftpack@arg+1,w
 17087  10A6  0420               	iorwf	___ftpack@arg,w
 17088  10A7  1D03               	skipz
 17089  10A8  28BA               	goto	l6138
 17090  10A9                     l6132:	
 17091  10A9  3000               	movlw	0
 17092  10AA  00A0               	movwf	?___ftpack
 17093  10AB  3000               	movlw	0
 17094  10AC  00A1               	movwf	?___ftpack+1
 17095  10AD  3000               	movlw	0
 17096  10AE  00A2               	movwf	?___ftpack+2
 17097  10AF  0008               	return
 17098  10B0                     l6136:	
 17099  10B0  3001               	movlw	1
 17100  10B1  00A5               	movwf	??___ftpack
 17101  10B2  0825               	movf	??___ftpack,w
 17102  10B3  07A3               	addwf	___ftpack@exp,f
 17103  10B4  3001               	movlw	1
 17104  10B5                     u4135:	
 17105  10B5  36A2               	lsrf	___ftpack@arg+2,f
 17106  10B6  0CA1               	rrf	___ftpack@arg+1,f
 17107  10B7  0CA0               	rrf	___ftpack@arg,f
 17108  10B8  0B89               	decfsz	9,f
 17109  10B9  28B5               	goto	u4135
 17110  10BA                     l6138:	
 17111  10BA  30FE               	movlw	254
 17112  10BB  0522               	andwf	___ftpack@arg+2,w
 17113  10BC  1903               	btfsc	3,2
 17114  10BD  28D3               	goto	l3404
 17115  10BE  28B0               	goto	l6136
 17116  10BF                     l6140:	
 17117  10BF  3001               	movlw	1
 17118  10C0  00A5               	movwf	??___ftpack
 17119  10C1  0825               	movf	??___ftpack,w
 17120  10C2  07A3               	addwf	___ftpack@exp,f
 17121  10C3  3001               	movlw	1
 17122  10C4  07A0               	addwf	___ftpack@arg,f
 17123  10C5  3000               	movlw	0
 17124  10C6  1803               	skipnc
 17125  10C7  3001               	movlw	1
 17126  10C8  07A1               	addwf	___ftpack@arg+1,f
 17127  10C9  3000               	movlw	0
 17128  10CA  1803               	skipnc
 17129  10CB  3001               	movlw	1
 17130  10CC  07A2               	addwf	___ftpack@arg+2,f
 17131  10CD  3001               	movlw	1
 17132  10CE                     u4155:	
 17133  10CE  36A2               	lsrf	___ftpack@arg+2,f
 17134  10CF  0CA1               	rrf	___ftpack@arg+1,f
 17135  10D0  0CA0               	rrf	___ftpack@arg,f
 17136  10D1  0B89               	decfsz	9,f
 17137  10D2  28CE               	goto	u4155
 17138  10D3                     l3404:	
 17139  10D3  30FF               	movlw	255
 17140  10D4  0522               	andwf	___ftpack@arg+2,w
 17141  10D5  1903               	btfsc	3,2
 17142  10D6  28E0               	goto	l6148
 17143  10D7  28BF               	goto	l6140
 17144  10D8                     l6146:	
 17145  10D8  3001               	movlw	1
 17146  10D9  02A3               	subwf	___ftpack@exp,f
 17147  10DA  3001               	movlw	1
 17148  10DB                     u4175:	
 17149  10DB  35A0               	lslf	___ftpack@arg,f
 17150  10DC  0DA1               	rlf	___ftpack@arg+1,f
 17151  10DD  0DA2               	rlf	___ftpack@arg+2,f
 17152  10DE  0B89               	decfsz	9,f
 17153  10DF  28DB               	goto	u4175
 17154  10E0                     l6148:	
 17155  10E0  1FA1               	btfss	___ftpack@arg+1,7
 17156  10E1  28D8               	goto	l6146
 17157  10E2  1823               	btfsc	___ftpack@exp,0
 17158  10E3  28EA               	goto	l3410
 17159  10E4  30FF               	movlw	255
 17160  10E5  05A0               	andwf	___ftpack@arg,f
 17161  10E6  307F               	movlw	127
 17162  10E7  05A1               	andwf	___ftpack@arg+1,f
 17163  10E8  30FF               	movlw	255
 17164  10E9  05A2               	andwf	___ftpack@arg+2,f
 17165  10EA                     l3410:	
 17166  10EA  1003               	clrc
 17167  10EB  0CA3               	rrf	___ftpack@exp,f
 17168  10EC  0823               	movf	___ftpack@exp,w
 17169  10ED  00A5               	movwf	??___ftpack
 17170  10EE  01A6               	clrf	??___ftpack+1
 17171  10EF  01A7               	clrf	??___ftpack+2
 17172  10F0  3010               	movlw	16
 17173  10F1                     u4205:	
 17174  10F1  35A5               	lslf	??___ftpack,f
 17175  10F2  0DA6               	rlf	??___ftpack+1,f
 17176  10F3  0DA7               	rlf	??___ftpack+2,f
 17177  10F4  0B89               	decfsz	9,f
 17178  10F5  28F1               	goto	u4205
 17179  10F6  0825               	movf	??___ftpack,w
 17180  10F7  04A0               	iorwf	___ftpack@arg,f
 17181  10F8  0826               	movf	??___ftpack+1,w
 17182  10F9  04A1               	iorwf	___ftpack@arg+1,f
 17183  10FA  0827               	movf	??___ftpack+2,w
 17184  10FB  04A2               	iorwf	___ftpack@arg+2,f
 17185  10FC  0824               	movf	___ftpack@sign,w
 17186  10FD  1903               	btfsc	3,2
 17187  10FE  0008               	return
 17188  10FF  17A2               	bsf	___ftpack@arg+2,7
 17189  1100  0008               	return
 17190  1101                     __end_of___ftpack:	
 17191                           
 17192                           	psect	text104
 17193  23C3                     __ptext104:	
 17194 ;; *************** function _Dimmer_Initialization *****************
 17195 ;; Defined at:
 17196 ;;		line 531 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;		None
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;		None
 17201 ;; Return value:  Size  Location     Type
 17202 ;;		None               void
 17203 ;; Registers used:
 17204 ;;		wreg
 17205 ;; Tracked objects:
 17206 ;;		On entry : 0/0
 17207 ;;		On exit  : 0/0
 17208 ;;		Unchanged: 0/0
 17209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17214 ;;Total ram usage:        1 bytes
 17215 ;; Hardware stack levels used:    1
 17216 ;; Hardware stack levels required when called:    4
 17217 ;; This function calls:
 17218 ;;		Nothing
 17219 ;; This function is called by:
 17220 ;;		_DimmerLights_Initialization
 17221 ;; This function uses a non-reentrant model
 17222 ;;
 17223                           
 17224                           
 17225                           ;psect for function _Dimmer_Initialization
 17226  23C3                     _Dimmer_Initialization:	
 17227                           
 17228                           ;Dimmer_B1.c: 533: Dimmer=&Dimmer1;
 17229                           
 17230                           ;incstack = 0
 17231                           ; Regs used in _Dimmer_Initialization: [wreg]
 17232  23C3  30E1               	movlw	_Dimmer1& (0+255)
 17233  23C4  0020               	movlb	0	; select bank0
 17234  23C5  00A0               	movwf	??_Dimmer_Initialization
 17235  23C6  0820               	movf	??_Dimmer_Initialization,w
 17236  23C7  0021               	movlb	1	; select bank1
 17237  23C8  00B9               	movwf	_Dimmer^(0+128)
 17238  23C9  0008               	return
 17239  23CA                     __end_of_Dimmer_Initialization:	
 17240                           
 17241                           	psect	text105
 17242  23E7                     __ptext105:	
 17243 ;; *************** function _DelayOff_Main *****************
 17244 ;; Defined at:
 17245 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17246 ;; Parameters:    Size  Location     Type
 17247 ;;		None
 17248 ;; Auto vars:     Size  Location     Type
 17249 ;;		None
 17250 ;; Return value:  Size  Location     Type
 17251 ;;		None               void
 17252 ;; Registers used:
 17253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17254 ;; Tracked objects:
 17255 ;;		On entry : 0/0
 17256 ;;		On exit  : 0/0
 17257 ;;		Unchanged: 0/0
 17258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;Total ram usage:        0 bytes
 17264 ;; Hardware stack levels used:    1
 17265 ;; Hardware stack levels required when called:    7
 17266 ;; This function calls:
 17267 ;;		_DlyOff_Main
 17268 ;; This function is called by:
 17269 ;;		_main
 17270 ;; This function uses a non-reentrant model
 17271 ;;
 17272                           
 17273                           
 17274                           ;psect for function _DelayOff_Main
 17275  23E7                     _DelayOff_Main:	
 17276                           
 17277                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 17278                           
 17279                           ;incstack = 0
 17280                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17281  23E7  3001               	movlw	1
 17282  23E8  3194  24D3  31A3   	fcall	_DlyOff_Main
 17283                           
 17284                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 17285  23EB  3002               	movlw	2
 17286  23EC  3194  24D3         	fcall	_DlyOff_Main
 17287  23EE  0008               	return
 17288  23EF                     __end_of_DelayOff_Main:	
 17289                           
 17290                           	psect	text106
 17291  14D3                     __ptext106:	
 17292 ;; *************** function _DlyOff_Main *****************
 17293 ;; Defined at:
 17294 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;  sw              1    wreg     unsigned char 
 17297 ;; Auto vars:     Size  Location     Type
 17298 ;;  sw              1   12[BANK0 ] unsigned char 
 17299 ;; Return value:  Size  Location     Type
 17300 ;;		None               void
 17301 ;; Registers used:
 17302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17303 ;; Tracked objects:
 17304 ;;		On entry : 0/0
 17305 ;;		On exit  : 0/0
 17306 ;;		Unchanged: 0/0
 17307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;Total ram usage:        3 bytes
 17313 ;; Hardware stack levels used:    1
 17314 ;; Hardware stack levels required when called:    6
 17315 ;; This function calls:
 17316 ;;		_DelayOffPointSelect
 17317 ;;		_setBuz
 17318 ;;		_setDimmerLights_Switch
 17319 ;;		_setDimmerLights_Trigger
 17320 ;;		_setRFSW_Status
 17321 ;;		_setRF_DimmerLights
 17322 ;;		_setSw_Status
 17323 ;;		_setTxData
 17324 ;; This function is called by:
 17325 ;;		_DelayOff_Main
 17326 ;; This function uses a non-reentrant model
 17327 ;;
 17328                           
 17329                           
 17330                           ;psect for function _DlyOff_Main
 17331  14D3                     _DlyOff_Main:	
 17332                           
 17333                           ;incstack = 0
 17334                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17335                           ;DlyOff_Main@sw stored from wreg
 17336  14D3  0020               	movlb	0	; select bank0
 17337  14D4  00AC               	movwf	DlyOff_Main@sw
 17338                           
 17339                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 17340  14D5  082C               	movf	DlyOff_Main@sw,w
 17341  14D6  31A6  2685  3194   	fcall	_DelayOffPointSelect
 17342                           
 17343                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 17344  14D9  0021               	movlb	1	; select bank1
 17345  14DA  0838               	movf	_DelayOff^(0+128),w
 17346  14DB  0086               	movwf	6
 17347  14DC  0187               	clrf	7
 17348  14DD  1C81               	btfss	1,1
 17349  14DE  0008               	return
 17350                           
 17351                           ;DelayOff_B1.c: 70: {
 17352                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 17353  14DF  0838               	movf	_DelayOff^(0+128),w
 17354  14E0  3E02               	addlw	2
 17355  14E1  0086               	movwf	6
 17356  14E2  0187               	clrf	7
 17357  14E3  3001               	movlw	1
 17358  14E4  0781               	addwf	1,f
 17359  14E5  3141               	addfsr 1,1
 17360  14E6  1803               	skipnc
 17361  14E7  0A81               	incf	1,f
 17362                           
 17363                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 17364  14E8  0838               	movf	_DelayOff^(0+128),w
 17365  14E9  3E02               	addlw	2
 17366  14EA  0086               	movwf	6
 17367  14EB  0187               	clrf	7
 17368  14EC  3F40               	moviw [0]fsr1
 17369  14ED  0020               	movlb	0	; select bank0
 17370  14EE  00AA               	movwf	??_DlyOff_Main
 17371  14EF  3F41               	moviw [1]fsr1
 17372  14F0  00AB               	movwf	??_DlyOff_Main+1
 17373  14F1  3016               	movlw	22
 17374  14F2  022B               	subwf	??_DlyOff_Main+1,w
 17375  14F3  3012               	movlw	18
 17376  14F4  1903               	skipnz
 17377  14F5  022A               	subwf	??_DlyOff_Main,w
 17378  14F6  1C03               	skipc
 17379  14F7  0008               	return
 17380                           
 17381                           ;DelayOff_B1.c: 73: {
 17382                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 17383  14F8  0021               	movlb	1	; select bank1
 17384  14F9  0838               	movf	_DelayOff^(0+128),w
 17385  14FA  3E02               	addlw	2
 17386  14FB  0086               	movwf	6
 17387  14FC  0187               	clrf	7
 17388  14FD  3000               	movlw	0
 17389  14FE  3FC0               	movwi [0]fsr1
 17390  14FF  3FC1               	movwi [1]fsr1
 17391                           
 17392                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 17393  1500  3001               	movlw	1
 17394  1501  0020               	movlb	0	; select bank0
 17395  1502  00AA               	movwf	??_DlyOff_Main
 17396  1503  0021               	movlb	1	; select bank1
 17397  1504  0838               	movf	_DelayOff^(0+128),w
 17398  1505  3E04               	addlw	4
 17399  1506  0086               	movwf	6
 17400  1507  0187               	clrf	7
 17401  1508  0020               	movlb	0	; select bank0
 17402  1509  082A               	movf	??_DlyOff_Main,w
 17403  150A  0781               	addwf	1,f
 17404                           
 17405                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 17406  150B  0021               	movlb	1	; select bank1
 17407  150C  0838               	movf	_DelayOff^(0+128),w
 17408  150D  3E04               	addlw	4
 17409  150E  0086               	movwf	6
 17410  150F  0187               	clrf	7
 17411  1510  0A38               	incf	_DelayOff^(0+128),w
 17412  1511  0084               	movwf	4
 17413  1512  0185               	clrf	5
 17414  1513  0800               	movf	0,w
 17415  1514  0201               	subwf	1,w
 17416  1515  1C03               	skipc
 17417  1516  0008               	return
 17418                           
 17419                           ;DelayOff_B1.c: 77: {
 17420                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 17421  1517  0838               	movf	_DelayOff^(0+128),w
 17422  1518  3E04               	addlw	4
 17423  1519  0086               	movwf	6
 17424  151A  0187               	clrf	7
 17425  151B  0181               	clrf	1
 17426                           
 17427                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 17428  151C  0838               	movf	_DelayOff^(0+128),w
 17429  151D  0086               	movwf	6
 17430  151E  0187               	clrf	7
 17431  151F  1081               	bcf	1,1
 17432                           
 17433                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 17434  1520  0020               	movlb	0	; select bank0
 17435  1521  01A2               	clrf	setSw_Status@command
 17436  1522  082C               	movf	DlyOff_Main@sw,w
 17437  1523  31A5  252D  3194   	fcall	_setSw_Status
 17438                           
 17439                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 17440  1526  0020               	movlb	0	; select bank0
 17441  1527  01A2               	clrf	setRFSW_Status@command
 17442  1528  082C               	movf	DlyOff_Main@sw,w
 17443  1529  31A5  251E  3194   	fcall	_setRFSW_Status
 17444                           
 17445                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 17446  152C  0020               	movlb	0	; select bank0
 17447  152D  01A0               	clrf	setRF_DimmerLights@on
 17448  152E  082C               	movf	DlyOff_Main@sw,w
 17449  152F  319E  26EE  3194   	fcall	_setRF_DimmerLights
 17450                           
 17451                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17452  1532  0020               	movlb	0	; select bank0
 17453  1533  01A2               	clrf	setDimmerLights_Trigger@command
 17454  1534  0AA2               	incf	setDimmerLights_Trigger@command,f
 17455  1535  082C               	movf	DlyOff_Main@sw,w
 17456  1536  31A5  255C  3194   	fcall	_setDimmerLights_Trigger
 17457                           
 17458                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17459  1539  0020               	movlb	0	; select bank0
 17460  153A  01A2               	clrf	setDimmerLights_Switch@command
 17461  153B  082C               	movf	DlyOff_Main@sw,w
 17462  153C  31A5  254C  3194   	fcall	_setDimmerLights_Switch
 17463                           
 17464                           ;DelayOff_B1.c: 85: setTxData(1);
 17465  153F  3001               	movlw	1
 17466  1540  318B  2318  3194   	fcall	_setTxData
 17467                           
 17468                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17469  1543  3064               	movlw	100
 17470  1544  0020               	movlb	0	; select bank0
 17471  1545  00A6               	movwf	setBuz@time
 17472  1546  3000               	movlw	0
 17473  1547  00A7               	movwf	setBuz@time+1
 17474  1548  3001               	movlw	1
 17475  1549  3193  23E5         	fcall	_setBuz
 17476  154B  0008               	return
 17477  154C                     __end_of_DlyOff_Main:	
 17478                           
 17479                           	psect	text107
 17480  0B18                     __ptext107:	
 17481 ;; *************** function _setTxData *****************
 17482 ;; Defined at:
 17483 ;;		line 132 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  rf              1    wreg     unsigned char 
 17486 ;; Auto vars:     Size  Location     Type
 17487 ;;  rf              1    3[BANK0 ] unsigned char 
 17488 ;;  i               1    0        unsigned char 
 17489 ;; Return value:  Size  Location     Type
 17490 ;;		None               void
 17491 ;; Registers used:
 17492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17493 ;; Tracked objects:
 17494 ;;		On entry : 0/0
 17495 ;;		On exit  : 0/0
 17496 ;;		Unchanged: 0/0
 17497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;Total ram usage:        2 bytes
 17503 ;; Hardware stack levels used:    1
 17504 ;; Hardware stack levels required when called:    5
 17505 ;; This function calls:
 17506 ;;		_RfPointSelect
 17507 ;; This function is called by:
 17508 ;;		_DlyOff_Main
 17509 ;;		_setDimmerLights_Adj
 17510 ;;		_setControl_Lights_Table
 17511 ;;		_setRFSW_Control
 17512 ;;		_setRFSW_AdjControl
 17513 ;;		_Sw_DimmerOnFunc
 17514 ;;		_Sw_DimmerOffFunc
 17515 ;; This function uses a non-reentrant model
 17516 ;;
 17517                           
 17518                           
 17519                           ;psect for function _setTxData
 17520  0B18                     _setTxData:	
 17521                           
 17522                           ;incstack = 0
 17523                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17524                           ;setTxData@rf stored from wreg
 17525  0B18  0020               	movlb	0	; select bank0
 17526  0B19  00A3               	movwf	setTxData@rf
 17527                           
 17528                           ;RF_Control_B1.c: 134: char i;
 17529                           ;RF_Control_B1.c: 135: RfPointSelect(rf);
 17530  0B1A  0823               	movf	setTxData@rf,w
 17531  0B1B  31A4  2439  318B   	fcall	_RfPointSelect
 17532                           
 17533                           ;RF_Control_B1.c: 136: if(RF->Enable)
 17534  0B1E  087C               	movf	_RF,w
 17535  0B1F  0086               	movwf	6
 17536  0B20  0187               	clrf	7
 17537  0B21  1C01               	btfss	1,0
 17538  0B22  0008               	return
 17539                           
 17540                           ;RF_Control_B1.c: 137: {
 17541                           ;RF_Control_B1.c: 139: if(!RF->TransceiveGO)
 17542  0B23  087C               	movf	_RF,w
 17543  0B24  0086               	movwf	6
 17544  0B25  0187               	clrf	7
 17545  0B26  1901               	btfsc	1,2
 17546  0B27  0008               	return
 17547                           
 17548                           ;RF_Control_B1.c: 140: {
 17549                           ;RF_Control_B1.c: 141: RF->TransceiveGO=1;
 17550  0B28  087C               	movf	_RF,w
 17551  0B29  0086               	movwf	6
 17552  0B2A  0187               	clrf	7
 17553  0B2B  1501               	bsf	1,2
 17554                           
 17555                           ;RF_Control_B1.c: 150: RF_Data[0]=0x63;
 17556  0B2C  3063               	movlw	99
 17557  0B2D  0020               	movlb	0	; select bank0
 17558  0B2E  00A2               	movwf	??_setTxData
 17559  0B2F  0822               	movf	??_setTxData,w
 17560  0B30  0021               	movlb	1	; select bank1
 17561  0B31  00A0               	movwf	_RF_Data^(0+128)
 17562                           
 17563                           ;RF_Control_B1.c: 151: RF_Data[1]=0x02;
 17564  0B32  3002               	movlw	2
 17565  0B33  0020               	movlb	0	; select bank0
 17566  0B34  00A2               	movwf	??_setTxData
 17567  0B35  0822               	movf	??_setTxData,w
 17568  0B36  0021               	movlb	1	; select bank1
 17569  0B37  00A1               	movwf	(_RF_Data^(0+128)+1)
 17570                           
 17571                           ;RF_Control_B1.c: 152: RF_Data[2]=Product->Data[2];
 17572  0B38  0020               	movlb	0	; select bank0
 17573  0B39  086F               	movf	_Product,w
 17574  0B3A  0086               	movwf	6
 17575  0B3B  3001               	movlw	1	; select bank2/3
 17576  0B3C  0087               	movwf	7
 17577  0B3D  3001               	movlw	1	; select bank2/3
 17578  0B3E  3F42               	moviw [2]fsr1
 17579  0B3F  0021               	movlb	1	; select bank1
 17580  0B40  00A2               	movwf	(_RF_Data^(0+128)+2)
 17581                           
 17582                           ;RF_Control_B1.c: 153: RF_Data[3]=Product->Data[3];
 17583  0B41  0020               	movlb	0	; select bank0
 17584  0B42  086F               	movf	_Product,w
 17585  0B43  0086               	movwf	6
 17586  0B44  3001               	movlw	1	; select bank2/3
 17587  0B45  0087               	movwf	7
 17588  0B46  3001               	movlw	1	; select bank2/3
 17589  0B47  3F43               	moviw [3]fsr1
 17590  0B48  0021               	movlb	1	; select bank1
 17591  0B49  00A3               	movwf	(_RF_Data^(0+128)+3)
 17592                           
 17593                           ;RF_Control_B1.c: 154: RF_Data[4]=Product->Data[4];
 17594  0B4A  0020               	movlb	0	; select bank0
 17595  0B4B  086F               	movf	_Product,w
 17596  0B4C  0086               	movwf	6
 17597  0B4D  3001               	movlw	1	; select bank2/3
 17598  0B4E  0087               	movwf	7
 17599  0B4F  3001               	movlw	1	; select bank2/3
 17600  0B50  3F44               	moviw [4]fsr1
 17601  0B51  0021               	movlb	1	; select bank1
 17602  0B52  00A4               	movwf	(_RF_Data^(0+128)+4)
 17603                           
 17604                           ;RF_Control_B1.c: 155: RF_Data[5]=Product->Data[5];
 17605  0B53  0020               	movlb	0	; select bank0
 17606  0B54  086F               	movf	_Product,w
 17607  0B55  0086               	movwf	6
 17608  0B56  3001               	movlw	1	; select bank2/3
 17609  0B57  0087               	movwf	7
 17610  0B58  3001               	movlw	1	; select bank2/3
 17611  0B59  3F45               	moviw [5]fsr1
 17612  0B5A  0021               	movlb	1	; select bank1
 17613  0B5B  00A5               	movwf	(_RF_Data^(0+128)+5)
 17614                           
 17615                           ;RF_Control_B1.c: 156: RF_Data[6]=Product->Data[6];
 17616  0B5C  0020               	movlb	0	; select bank0
 17617  0B5D  086F               	movf	_Product,w
 17618  0B5E  0086               	movwf	6
 17619  0B5F  3001               	movlw	1	; select bank2/3
 17620  0B60  0087               	movwf	7
 17621  0B61  3001               	movlw	1	; select bank2/3
 17622  0B62  3F46               	moviw [6]fsr1
 17623  0B63  0021               	movlb	1	; select bank1
 17624  0B64  00A6               	movwf	(_RF_Data^(0+128)+6)
 17625                           
 17626                           ;RF_Control_B1.c: 157: RF_Data[7]=Product->Data[7];
 17627  0B65  0020               	movlb	0	; select bank0
 17628  0B66  086F               	movf	_Product,w
 17629  0B67  0086               	movwf	6
 17630  0B68  3001               	movlw	1	; select bank2/3
 17631  0B69  0087               	movwf	7
 17632  0B6A  3001               	movlw	1	; select bank2/3
 17633  0B6B  3F47               	moviw [7]fsr1
 17634  0B6C  0021               	movlb	1	; select bank1
 17635  0B6D  00A7               	movwf	(_RF_Data^(0+128)+7)
 17636                           
 17637                           ;RF_Control_B1.c: 158: RF_Data[8]=Product->Data[8];
 17638  0B6E  0020               	movlb	0	; select bank0
 17639  0B6F  086F               	movf	_Product,w
 17640  0B70  0086               	movwf	6
 17641  0B71  3001               	movlw	1	; select bank2/3
 17642  0B72  0087               	movwf	7
 17643  0B73  3001               	movlw	1	; select bank2/3
 17644  0B74  3F48               	moviw [8]fsr1
 17645  0B75  0021               	movlb	1	; select bank1
 17646  0B76  00A8               	movwf	(_RF_Data^(0+128)+8)
 17647                           
 17648                           ;RF_Control_B1.c: 159: RF_Data[9]=Product->Data[9];
 17649  0B77  0020               	movlb	0	; select bank0
 17650  0B78  086F               	movf	_Product,w
 17651  0B79  0086               	movwf	6
 17652  0B7A  3001               	movlw	1	; select bank2/3
 17653  0B7B  0087               	movwf	7
 17654  0B7C  3001               	movlw	1	; select bank2/3
 17655  0B7D  3F49               	moviw [9]fsr1
 17656  0B7E  0021               	movlb	1	; select bank1
 17657  0B7F  00A9               	movwf	(_RF_Data^(0+128)+9)
 17658                           
 17659                           ;RF_Control_B1.c: 160: RF_Data[10]=Product->Data[10];
 17660  0B80  0020               	movlb	0	; select bank0
 17661  0B81  086F               	movf	_Product,w
 17662  0B82  0086               	movwf	6
 17663  0B83  3001               	movlw	1	; select bank2/3
 17664  0B84  0087               	movwf	7
 17665  0B85  3001               	movlw	1	; select bank2/3
 17666  0B86  3F4A               	moviw [10]fsr1
 17667  0B87  0021               	movlb	1	; select bank1
 17668  0B88  00AA               	movwf	(_RF_Data^(0+128)+10)
 17669                           
 17670                           ;RF_Control_B1.c: 161: RF_Data[11]=Product->Data[11];
 17671  0B89  0020               	movlb	0	; select bank0
 17672  0B8A  086F               	movf	_Product,w
 17673  0B8B  0086               	movwf	6
 17674  0B8C  3001               	movlw	1	; select bank2/3
 17675  0B8D  0087               	movwf	7
 17676  0B8E  3001               	movlw	1	; select bank2/3
 17677  0B8F  3F4B               	moviw [11]fsr1
 17678  0B90  0021               	movlb	1	; select bank1
 17679  0B91  00AB               	movwf	(_RF_Data^(0+128)+11)
 17680                           
 17681                           ;RF_Control_B1.c: 162: RF_Data[12]=Product->Data[12];
 17682  0B92  0020               	movlb	0	; select bank0
 17683  0B93  086F               	movf	_Product,w
 17684  0B94  0086               	movwf	6
 17685  0B95  3001               	movlw	1	; select bank2/3
 17686  0B96  0087               	movwf	7
 17687  0B97  3001               	movlw	1	; select bank2/3
 17688  0B98  3F4C               	moviw [12]fsr1
 17689  0B99  0021               	movlb	1	; select bank1
 17690  0B9A  00AC               	movwf	(_RF_Data^(0+128)+12)
 17691                           
 17692                           ;RF_Control_B1.c: 163: RF_Data[13]=Product->Data[13];
 17693  0B9B  0020               	movlb	0	; select bank0
 17694  0B9C  086F               	movf	_Product,w
 17695  0B9D  0086               	movwf	6
 17696  0B9E  3001               	movlw	1	; select bank2/3
 17697  0B9F  0087               	movwf	7
 17698  0BA0  3001               	movlw	1	; select bank2/3
 17699  0BA1  3F4D               	moviw [13]fsr1
 17700  0BA2  0021               	movlb	1	; select bank1
 17701  0BA3  00AD               	movwf	(_RF_Data^(0+128)+13)
 17702                           
 17703                           ;RF_Control_B1.c: 164: RF_Data[14]=Product->Data[14];
 17704  0BA4  0020               	movlb	0	; select bank0
 17705  0BA5  086F               	movf	_Product,w
 17706  0BA6  0086               	movwf	6
 17707  0BA7  3001               	movlw	1	; select bank2/3
 17708  0BA8  0087               	movwf	7
 17709  0BA9  3001               	movlw	1	; select bank2/3
 17710  0BAA  3F4E               	moviw [14]fsr1
 17711  0BAB  0021               	movlb	1	; select bank1
 17712  0BAC  00AE               	movwf	(_RF_Data^(0+128)+14)
 17713                           
 17714                           ;RF_Control_B1.c: 165: RF_Data[15]=Product->Data[15];
 17715  0BAD  0020               	movlb	0	; select bank0
 17716  0BAE  086F               	movf	_Product,w
 17717  0BAF  0086               	movwf	6
 17718  0BB0  3001               	movlw	1	; select bank2/3
 17719  0BB1  0087               	movwf	7
 17720  0BB2  3001               	movlw	1	; select bank2/3
 17721  0BB3  3F4F               	moviw [15]fsr1
 17722  0BB4  0021               	movlb	1	; select bank1
 17723  0BB5  00AF               	movwf	(_RF_Data^(0+128)+15)
 17724                           
 17725                           ;RF_Control_B1.c: 166: RF_Data[16]=Product->Data[16];
 17726  0BB6  0020               	movlb	0	; select bank0
 17727  0BB7  086F               	movf	_Product,w
 17728  0BB8  0086               	movwf	6
 17729  0BB9  3001               	movlw	1	; select bank2/3
 17730  0BBA  0087               	movwf	7
 17731  0BBB  3001               	movlw	1	; select bank2/3
 17732  0BBC  3F50               	moviw [16]fsr1
 17733  0BBD  0021               	movlb	1	; select bank1
 17734  0BBE  00B0               	movwf	(_RF_Data^(0+128)+16)
 17735                           
 17736                           ;RF_Control_B1.c: 167: RF_Data[17]=Product->Data[17];
 17737  0BBF  0020               	movlb	0	; select bank0
 17738  0BC0  086F               	movf	_Product,w
 17739  0BC1  0086               	movwf	6
 17740  0BC2  3001               	movlw	1	; select bank2/3
 17741  0BC3  0087               	movwf	7
 17742  0BC4  3001               	movlw	1	; select bank2/3
 17743  0BC5  3F51               	moviw [17]fsr1
 17744  0BC6  0021               	movlb	1	; select bank1
 17745  0BC7  00B1               	movwf	(_RF_Data^(0+128)+17)
 17746                           
 17747                           ;RF_Control_B1.c: 168: RF_Data[18]=Product->Data[18];
 17748  0BC8  0020               	movlb	0	; select bank0
 17749  0BC9  086F               	movf	_Product,w
 17750  0BCA  0086               	movwf	6
 17751  0BCB  3001               	movlw	1	; select bank2/3
 17752  0BCC  0087               	movwf	7
 17753  0BCD  3001               	movlw	1	; select bank2/3
 17754  0BCE  3F52               	moviw [18]fsr1
 17755  0BCF  0021               	movlb	1	; select bank1
 17756  0BD0  00B2               	movwf	(_RF_Data^(0+128)+18)
 17757                           
 17758                           ;RF_Control_B1.c: 169: RF_Data[19]=Product->Data[19];
 17759  0BD1  0020               	movlb	0	; select bank0
 17760  0BD2  086F               	movf	_Product,w
 17761  0BD3  0086               	movwf	6
 17762  0BD4  3001               	movlw	1	; select bank2/3
 17763  0BD5  0087               	movwf	7
 17764  0BD6  3001               	movlw	1	; select bank2/3
 17765  0BD7  3F53               	moviw [19]fsr1
 17766  0BD8  0021               	movlb	1	; select bank1
 17767  0BD9  00B3               	movwf	(_RF_Data^(0+128)+19)
 17768                           
 17769                           ;RF_Control_B1.c: 170: RF_Data[20]=2;
 17770  0BDA  3002               	movlw	2
 17771  0BDB  0020               	movlb	0	; select bank0
 17772  0BDC  00A2               	movwf	??_setTxData
 17773  0BDD  0822               	movf	??_setTxData,w
 17774  0BDE  0021               	movlb	1	; select bank1
 17775  0BDF  00B4               	movwf	(_RF_Data^(0+128)+20)
 17776  0BE0  0008               	return
 17777  0BE1                     __end_of_setTxData:	
 17778                           
 17779                           	psect	text108
 17780  2439                     __ptext108:	
 17781 ;; *************** function _RfPointSelect *****************
 17782 ;; Defined at:
 17783 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17784 ;; Parameters:    Size  Location     Type
 17785 ;;  rf              1    wreg     unsigned char 
 17786 ;; Auto vars:     Size  Location     Type
 17787 ;;  rf              1    1[BANK0 ] unsigned char 
 17788 ;; Return value:  Size  Location     Type
 17789 ;;		None               void
 17790 ;; Registers used:
 17791 ;;		wreg
 17792 ;; Tracked objects:
 17793 ;;		On entry : 0/0
 17794 ;;		On exit  : 0/0
 17795 ;;		Unchanged: 0/0
 17796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;Total ram usage:        2 bytes
 17802 ;; Hardware stack levels used:    1
 17803 ;; Hardware stack levels required when called:    4
 17804 ;; This function calls:
 17805 ;;		Nothing
 17806 ;; This function is called by:
 17807 ;;		_setRF_Learn
 17808 ;;		_setRF_RxStatus
 17809 ;;		_setRF_Main
 17810 ;;		_setTxData
 17811 ;;		_setRF_Enable
 17812 ;;		_RF_RxDisable
 17813 ;;		_getRxData
 17814 ;;		_setLog_Code
 17815 ;;		_setControl_Lights_Table
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           
 17820                           ;psect for function _RfPointSelect
 17821  2439                     _RfPointSelect:	
 17822                           
 17823                           ;incstack = 0
 17824                           ; Regs used in _RfPointSelect: [wreg]
 17825                           ;RfPointSelect@rf stored from wreg
 17826  2439  0020               	movlb	0	; select bank0
 17827  243A  00A1               	movwf	RfPointSelect@rf
 17828                           
 17829                           ;RF_Control_B1.c: 10: if(rf == 1)
 17830  243B  0821               	movf	RfPointSelect@rf,w
 17831  243C  3A01               	xorlw	1
 17832  243D  1D03               	skipz
 17833  243E  0008               	return
 17834                           
 17835                           ;RF_Control_B1.c: 11: {
 17836                           ;RF_Control_B1.c: 12: RF=&RF1;
 17837  243F  30E4               	movlw	_RF1& (0+255)
 17838  2440  00A0               	movwf	??_RfPointSelect
 17839  2441  0820               	movf	??_RfPointSelect,w
 17840  2442  00FC               	movwf	_RF
 17841  2443  0008               	return
 17842  2444                     __end_of_RfPointSelect:	
 17843                           
 17844                           	psect	text109
 17845  252D                     __ptext109:	
 17846 ;; *************** function _setSw_Status *****************
 17847 ;; Defined at:
 17848 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17849 ;; Parameters:    Size  Location     Type
 17850 ;;  sw              1    wreg     unsigned char 
 17851 ;;  command         1    2[BANK0 ] unsigned char 
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;  sw              1    3[BANK0 ] unsigned char 
 17854 ;; Return value:  Size  Location     Type
 17855 ;;		None               void
 17856 ;; Registers used:
 17857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17858 ;; Tracked objects:
 17859 ;;		On entry : 0/0
 17860 ;;		On exit  : 0/0
 17861 ;;		Unchanged: 0/0
 17862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17863 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;Total ram usage:        2 bytes
 17868 ;; Hardware stack levels used:    1
 17869 ;; Hardware stack levels required when called:    5
 17870 ;; This function calls:
 17871 ;;		_SwPointSelect
 17872 ;; This function is called by:
 17873 ;;		_DlyOff_Main
 17874 ;;		_setDimmerLights_ERROR
 17875 ;;		_setControl_Lights_Table
 17876 ;;		_setRFSW_Control
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           
 17881                           ;psect for function _setSw_Status
 17882  252D                     _setSw_Status:	
 17883                           
 17884                           ;incstack = 0
 17885                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17886                           ;setSw_Status@sw stored from wreg
 17887  252D  0020               	movlb	0	; select bank0
 17888  252E  00A3               	movwf	setSw_Status@sw
 17889                           
 17890                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17891  252F  0823               	movf	setSw_Status@sw,w
 17892  2530  31A5  25F2         	fcall	_SwPointSelect
 17893                           
 17894                           ;Switch_B1.c: 109: Sw->Status=command;
 17895  2532  0020               	movlb	0	; select bank0
 17896  2533  086D               	movf	_Sw,w
 17897  2534  0086               	movwf	6
 17898  2535  3001               	movlw	1	; select bank2/3
 17899  2536  0087               	movwf	7
 17900  2537  0822               	movf	setSw_Status@command,w
 17901  2538  1301               	bcf	1,6
 17902  2539  1D03               	skipz
 17903  253A  1701               	bsf	1,6
 17904  253B  0008               	return
 17905  253C                     __end_of_setSw_Status:	
 17906                           
 17907                           	psect	text110
 17908  25F2                     __ptext110:	
 17909 ;; *************** function _SwPointSelect *****************
 17910 ;; Defined at:
 17911 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17912 ;; Parameters:    Size  Location     Type
 17913 ;;  sw              1    wreg     unsigned char 
 17914 ;; Auto vars:     Size  Location     Type
 17915 ;;  sw              1    1[BANK0 ] unsigned char 
 17916 ;; Return value:  Size  Location     Type
 17917 ;;		None               void
 17918 ;; Registers used:
 17919 ;;		wreg
 17920 ;; Tracked objects:
 17921 ;;		On entry : 0/0
 17922 ;;		On exit  : 0/0
 17923 ;;		Unchanged: 0/0
 17924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;Total ram usage:        2 bytes
 17930 ;; Hardware stack levels used:    1
 17931 ;; Hardware stack levels required when called:    4
 17932 ;; This function calls:
 17933 ;;		Nothing
 17934 ;; This function is called by:
 17935 ;;		_setSw_Enable
 17936 ;;		_setSw_Status
 17937 ;;		_setSw_Main
 17938 ;;		_Sw_Detect
 17939 ;; This function uses a non-reentrant model
 17940 ;;
 17941                           
 17942                           
 17943                           ;psect for function _SwPointSelect
 17944  25F2                     _SwPointSelect:	
 17945                           
 17946                           ;incstack = 0
 17947                           ; Regs used in _SwPointSelect: [wreg]
 17948                           ;SwPointSelect@sw stored from wreg
 17949  25F2  0020               	movlb	0	; select bank0
 17950  25F3  00A1               	movwf	SwPointSelect@sw
 17951                           
 17952                           ;Switch_B1.c: 19: if(sw == 1)
 17953  25F4  0821               	movf	SwPointSelect@sw,w
 17954  25F5  3A01               	xorlw	1
 17955  25F6  1D03               	skipz
 17956  25F7  2DFD               	goto	l6460
 17957                           
 17958                           ;Switch_B1.c: 20: {
 17959                           ;Switch_B1.c: 21: Sw=&Sw1;
 17960  25F8  3054               	movlw	_Sw1& (0+255)
 17961  25F9  00A0               	movwf	??_SwPointSelect
 17962  25FA  0820               	movf	??_SwPointSelect,w
 17963  25FB  00ED               	movwf	_Sw
 17964                           
 17965                           ;Switch_B1.c: 22: }
 17966  25FC  0008               	return
 17967  25FD                     l6460:	
 17968                           
 17969                           ;Switch_B1.c: 25: else if(sw == 2)
 17970  25FD  0821               	movf	SwPointSelect@sw,w
 17971  25FE  3A02               	xorlw	2
 17972  25FF  1D03               	skipz
 17973  2600  0008               	return
 17974                           
 17975                           ;Switch_B1.c: 26: {
 17976                           ;Switch_B1.c: 27: Sw=&Sw2;
 17977  2601  305D               	movlw	_Sw2& (0+255)
 17978  2602  00A0               	movwf	??_SwPointSelect
 17979  2603  0820               	movf	??_SwPointSelect,w
 17980  2604  00ED               	movwf	_Sw
 17981  2605  0008               	return
 17982  2606                     __end_of_SwPointSelect:	
 17983                           
 17984                           	psect	text111
 17985  1EEE                     __ptext111:	
 17986 ;; *************** function _setRF_DimmerLights *****************
 17987 ;; Defined at:
 17988 ;;		line 443 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17989 ;; Parameters:    Size  Location     Type
 17990 ;;  lights          1    wreg     unsigned char 
 17991 ;;  on              1    0[BANK0 ] unsigned char 
 17992 ;; Auto vars:     Size  Location     Type
 17993 ;;  lights          1    4[BANK0 ] unsigned char 
 17994 ;;  status          1    3[BANK0 ] unsigned char 
 17995 ;; Return value:  Size  Location     Type
 17996 ;;		None               void
 17997 ;; Registers used:
 17998 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18004 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;Total ram usage:        5 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:    4
 18011 ;; This function calls:
 18012 ;;		Nothing
 18013 ;; This function is called by:
 18014 ;;		_DlyOff_Main
 18015 ;;		_setDimmerLights_Adj
 18016 ;;		_setRFSW_Control
 18017 ;;		_Sw_DimmerOnFunc
 18018 ;;		_Sw_DimmerOffFunc
 18019 ;; This function uses a non-reentrant model
 18020 ;;
 18021                           
 18022                           
 18023                           ;psect for function _setRF_DimmerLights
 18024  1EEE                     _setRF_DimmerLights:	
 18025                           
 18026                           ;incstack = 0
 18027                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 18028                           ;setRF_DimmerLights@lights stored from wreg
 18029  1EEE  0020               	movlb	0	; select bank0
 18030  1EEF  00A4               	movwf	setRF_DimmerLights@lights
 18031                           
 18032                           ;RF_Control_B1.c: 445: char status;
 18033                           ;RF_Control_B1.c: 446: status=1;
 18034  1EF0  01A3               	clrf	setRF_DimmerLights@status
 18035  1EF1  0AA3               	incf	setRF_DimmerLights@status,f
 18036                           
 18037                           ;RF_Control_B1.c: 447: status<<=(lights-1);
 18038  1EF2  0824               	movf	setRF_DimmerLights@lights,w
 18039  1EF3  3EFF               	addlw	-1
 18040  1EF4  0A89               	incf	9,f
 18041  1EF5  2EF8               	goto	u5050
 18042  1EF6                     u5055:	
 18043  1EF6  1003               	clrc
 18044  1EF7  0DA3               	rlf	setRF_DimmerLights@status,f
 18045  1EF8                     u5050:	
 18046  1EF8  3EFF               	addlw	-1
 18047  1EF9  1D03               	skipz
 18048  1EFA  2EF6               	goto	u5055
 18049                           
 18050                           ;RF_Control_B1.c: 448: Product->Data[11]=lights;
 18051  1EFB  0824               	movf	setRF_DimmerLights@lights,w
 18052  1EFC  00A1               	movwf	??_setRF_DimmerLights
 18053  1EFD  086F               	movf	_Product,w
 18054  1EFE  3E0B               	addlw	11
 18055  1EFF  0086               	movwf	6
 18056  1F00  3001               	movlw	1	; select bank2/3
 18057  1F01  0087               	movwf	7
 18058  1F02  0821               	movf	??_setRF_DimmerLights,w
 18059  1F03  0081               	movwf	1
 18060                           
 18061                           ;RF_Control_B1.c: 449: Product->Data[9]=Product->Data[20+lights];
 18062  1F04  0824               	movf	setRF_DimmerLights@lights,w
 18063  1F05  3E14               	addlw	20
 18064  1F06  076F               	addwf	_Product,w
 18065  1F07  00A1               	movwf	??_setRF_DimmerLights
 18066  1F08  0821               	movf	??_setRF_DimmerLights,w
 18067  1F09  0086               	movwf	6
 18068  1F0A  3001               	movlw	1	; select bank2/3
 18069  1F0B  0087               	movwf	7
 18070  1F0C  0801               	movf	1,w
 18071  1F0D  00A2               	movwf	??_setRF_DimmerLights+1
 18072  1F0E  086F               	movf	_Product,w
 18073  1F0F  3E09               	addlw	9
 18074  1F10  0086               	movwf	6
 18075  1F11  3001               	movlw	1	; select bank2/3
 18076  1F12  0087               	movwf	7
 18077  1F13  0822               	movf	??_setRF_DimmerLights+1,w
 18078  1F14  0081               	movwf	1
 18079                           
 18080                           ;RF_Control_B1.c: 450: Product->Data[17]=Product->Data[26+lights];
 18081  1F15  0824               	movf	setRF_DimmerLights@lights,w
 18082  1F16  3E1A               	addlw	26
 18083  1F17  076F               	addwf	_Product,w
 18084  1F18  00A1               	movwf	??_setRF_DimmerLights
 18085  1F19  0821               	movf	??_setRF_DimmerLights,w
 18086  1F1A  0086               	movwf	6
 18087  1F1B  3001               	movlw	1	; select bank2/3
 18088  1F1C  0087               	movwf	7
 18089  1F1D  0801               	movf	1,w
 18090  1F1E  00A2               	movwf	??_setRF_DimmerLights+1
 18091  1F1F  086F               	movf	_Product,w
 18092  1F20  3E11               	addlw	17
 18093  1F21  0086               	movwf	6
 18094  1F22  3001               	movlw	1	; select bank2/3
 18095  1F23  0087               	movwf	7
 18096  1F24  0822               	movf	??_setRF_DimmerLights+1,w
 18097  1F25  0081               	movwf	1
 18098                           
 18099                           ;RF_Control_B1.c: 451: if(on)
 18100  1F26  0820               	movf	setRF_DimmerLights@on,w
 18101  1F27  1903               	btfsc	3,2
 18102  1F28  2F39               	goto	l6532
 18103                           
 18104                           ;RF_Control_B1.c: 452: {
 18105                           ;RF_Control_B1.c: 453: Product->Data[15]=(Product->Data[15]|status);
 18106  1F29  086F               	movf	_Product,w
 18107  1F2A  3E0F               	addlw	15
 18108  1F2B  0086               	movwf	6
 18109  1F2C  3001               	movlw	1	; select bank2/3
 18110  1F2D  0087               	movwf	7
 18111  1F2E  0801               	movf	1,w
 18112  1F2F  0423               	iorwf	setRF_DimmerLights@status,w
 18113  1F30  00A1               	movwf	??_setRF_DimmerLights
 18114  1F31  086F               	movf	_Product,w
 18115  1F32  3E0F               	addlw	15
 18116  1F33  0086               	movwf	6
 18117  1F34  3001               	movlw	1	; select bank2/3
 18118  1F35  0087               	movwf	7
 18119  1F36  0821               	movf	??_setRF_DimmerLights,w
 18120  1F37  0081               	movwf	1
 18121                           
 18122                           ;RF_Control_B1.c: 454: }
 18123  1F38  0008               	return
 18124  1F39                     l6532:	
 18125                           
 18126                           ;RF_Control_B1.c: 455: else
 18127                           ;RF_Control_B1.c: 456: {
 18128                           ;RF_Control_B1.c: 457: Product->Data[15]=(Product->Data[15]&(~status));
 18129  1F39  086F               	movf	_Product,w
 18130  1F3A  3E0F               	addlw	15
 18131  1F3B  0086               	movwf	6
 18132  1F3C  3001               	movlw	1	; select bank2/3
 18133  1F3D  0087               	movwf	7
 18134  1F3E  0923               	comf	setRF_DimmerLights@status,w
 18135  1F3F  0501               	andwf	1,w
 18136  1F40  00A1               	movwf	??_setRF_DimmerLights
 18137  1F41  086F               	movf	_Product,w
 18138  1F42  3E0F               	addlw	15
 18139  1F43  0086               	movwf	6
 18140  1F44  3001               	movlw	1	; select bank2/3
 18141  1F45  0087               	movwf	7
 18142  1F46  0821               	movf	??_setRF_DimmerLights,w
 18143  1F47  0081               	movwf	1
 18144  1F48  0008               	return
 18145  1F49                     __end_of_setRF_DimmerLights:	
 18146                           
 18147                           	psect	text112
 18148  251E                     __ptext112:	
 18149 ;; *************** function _setRFSW_Status *****************
 18150 ;; Defined at:
 18151 ;;		line 423 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;  sw              1    wreg     unsigned char 
 18154 ;;  command         1    2[BANK0 ] unsigned char 
 18155 ;; Auto vars:     Size  Location     Type
 18156 ;;  sw              1    3[BANK0 ] unsigned char 
 18157 ;; Return value:  Size  Location     Type
 18158 ;;		None               void
 18159 ;; Registers used:
 18160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18161 ;; Tracked objects:
 18162 ;;		On entry : 0/0
 18163 ;;		On exit  : 0/0
 18164 ;;		Unchanged: 0/0
 18165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18170 ;;Total ram usage:        2 bytes
 18171 ;; Hardware stack levels used:    1
 18172 ;; Hardware stack levels required when called:    5
 18173 ;; This function calls:
 18174 ;;		_RfSWPointSelect
 18175 ;; This function is called by:
 18176 ;;		_DlyOff_Main
 18177 ;;		_setDimmerLights_ERROR
 18178 ;;		_setControl_Lights_Table
 18179 ;;		_Sw_DimmerOnFunc
 18180 ;;		_Sw_DimmerAdjFunc
 18181 ;; This function uses a non-reentrant model
 18182 ;;
 18183                           
 18184                           
 18185                           ;psect for function _setRFSW_Status
 18186  251E                     _setRFSW_Status:	
 18187                           
 18188                           ;incstack = 0
 18189                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18190                           ;setRFSW_Status@sw stored from wreg
 18191  251E  0020               	movlb	0	; select bank0
 18192  251F  00A3               	movwf	setRFSW_Status@sw
 18193                           
 18194                           ;RF_Control_B1.c: 425: RfSWPointSelect(sw);
 18195  2520  0823               	movf	setRFSW_Status@sw,w
 18196  2521  31A6  2659         	fcall	_RfSWPointSelect
 18197                           
 18198                           ;RF_Control_B1.c: 426: RFSW->Status=command;
 18199  2523  0021               	movlb	1	; select bank1
 18200  2524  083C               	movf	_RFSW^(0+128),w
 18201  2525  0086               	movwf	6
 18202  2526  0187               	clrf	7
 18203  2527  0020               	movlb	0	; select bank0
 18204  2528  0822               	movf	setRFSW_Status@command,w
 18205  2529  1001               	bcf	1,0
 18206  252A  1D03               	skipz
 18207  252B  1401               	bsf	1,0
 18208  252C  0008               	return
 18209  252D                     __end_of_setRFSW_Status:	
 18210                           
 18211                           	psect	text113
 18212  2659                     __ptext113:	
 18213 ;; *************** function _RfSWPointSelect *****************
 18214 ;; Defined at:
 18215 ;;		line 345 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18216 ;; Parameters:    Size  Location     Type
 18217 ;;  sw              1    wreg     unsigned char 
 18218 ;; Auto vars:     Size  Location     Type
 18219 ;;  sw              1    1[BANK0 ] unsigned char 
 18220 ;; Return value:  Size  Location     Type
 18221 ;;		None               void
 18222 ;; Registers used:
 18223 ;;		wreg
 18224 ;; Tracked objects:
 18225 ;;		On entry : 0/0
 18226 ;;		On exit  : 0/0
 18227 ;;		Unchanged: 0/0
 18228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18233 ;;Total ram usage:        2 bytes
 18234 ;; Hardware stack levels used:    1
 18235 ;; Hardware stack levels required when called:    4
 18236 ;; This function calls:
 18237 ;;		Nothing
 18238 ;; This function is called by:
 18239 ;;		_setRFSW_Control
 18240 ;;		_setRFSW_AdjControl
 18241 ;;		_setRFSW_Status
 18242 ;; This function uses a non-reentrant model
 18243 ;;
 18244                           
 18245                           
 18246                           ;psect for function _RfSWPointSelect
 18247  2659                     _RfSWPointSelect:	
 18248                           
 18249                           ;incstack = 0
 18250                           ; Regs used in _RfSWPointSelect: [wreg]
 18251                           ;RfSWPointSelect@sw stored from wreg
 18252  2659  0020               	movlb	0	; select bank0
 18253  265A  00A1               	movwf	RfSWPointSelect@sw
 18254                           
 18255                           ;RF_Control_B1.c: 348: if(sw == 1)
 18256  265B  0821               	movf	RfSWPointSelect@sw,w
 18257  265C  3A01               	xorlw	1
 18258  265D  1D03               	skipz
 18259  265E  2E64               	goto	l2732
 18260                           
 18261                           ;RF_Control_B1.c: 349: {
 18262                           ;RF_Control_B1.c: 350: RFSW=&RFSW1;
 18263  265F  30E6               	movlw	_RFSW1& (0+255)
 18264  2660  00A0               	movwf	??_RfSWPointSelect
 18265  2661  0820               	movf	??_RfSWPointSelect,w
 18266  2662  0021               	movlb	1	; select bank1
 18267  2663  00BC               	movwf	_RFSW^(0+128)
 18268  2664                     l2732:	
 18269                           
 18270                           ;RF_Control_B1.c: 351: }
 18271                           ;RF_Control_B1.c: 354: if(sw == 2)
 18272  2664  0020               	movlb	0	; select bank0
 18273  2665  0821               	movf	RfSWPointSelect@sw,w
 18274  2666  3A02               	xorlw	2
 18275  2667  1D03               	skipz
 18276  2668  0008               	return
 18277                           
 18278                           ;RF_Control_B1.c: 355: {
 18279                           ;RF_Control_B1.c: 356: RFSW=&RFSW2;
 18280  2669  30E7               	movlw	_RFSW2& (0+255)
 18281  266A  00A0               	movwf	??_RfSWPointSelect
 18282  266B  0820               	movf	??_RfSWPointSelect,w
 18283  266C  0021               	movlb	1	; select bank1
 18284  266D  00BC               	movwf	_RFSW^(0+128)
 18285  266E  0008               	return
 18286  266F                     __end_of_RfSWPointSelect:	
 18287                           
 18288                           	psect	text114
 18289  255C                     __ptext114:	
 18290 ;; *************** function _setDimmerLights_Trigger *****************
 18291 ;; Defined at:
 18292 ;;		line 456 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;  lights          1    wreg     unsigned char 
 18295 ;;  command         1    2[BANK0 ] unsigned char 
 18296 ;; Auto vars:     Size  Location     Type
 18297 ;;  lights          1    3[BANK0 ] unsigned char 
 18298 ;; Return value:  Size  Location     Type
 18299 ;;		None               void
 18300 ;; Registers used:
 18301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18302 ;; Tracked objects:
 18303 ;;		On entry : 0/0
 18304 ;;		On exit  : 0/0
 18305 ;;		Unchanged: 0/0
 18306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18307 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18311 ;;Total ram usage:        2 bytes
 18312 ;; Hardware stack levels used:    1
 18313 ;; Hardware stack levels required when called:    5
 18314 ;; This function calls:
 18315 ;;		_DimmerLightsPointSelect
 18316 ;; This function is called by:
 18317 ;;		_DlyOff_Main
 18318 ;;		_setRFSW_Control
 18319 ;;		_Sw_DimmerOnFunc
 18320 ;;		_Sw_DimmerOffFunc
 18321 ;; This function uses a non-reentrant model
 18322 ;;
 18323                           
 18324                           
 18325                           ;psect for function _setDimmerLights_Trigger
 18326  255C                     _setDimmerLights_Trigger:	
 18327                           
 18328                           ;incstack = 0
 18329                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18330                           ;setDimmerLights_Trigger@lights stored from wreg
 18331  255C  0020               	movlb	0	; select bank0
 18332  255D  00A3               	movwf	setDimmerLights_Trigger@lights
 18333                           
 18334                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 18335  255E  0823               	movf	setDimmerLights_Trigger@lights,w
 18336  255F  31A5  25DF         	fcall	_DimmerLightsPointSelect
 18337                           
 18338                           ;Dimmer_B1.c: 459: DimmerLights->Trigger=command;
 18339  2561  0020               	movlb	0	; select bank0
 18340  2562  086C               	movf	_DimmerLights,w
 18341  2563  3E09               	addlw	9
 18342  2564  0086               	movwf	6
 18343  2565  3001               	movlw	1	; select bank2/3
 18344  2566  0087               	movwf	7
 18345  2567  0822               	movf	setDimmerLights_Trigger@command,w
 18346  2568  1081               	bcf	1,1
 18347  2569  1D03               	skipz
 18348  256A  1481               	bsf	1,1
 18349  256B  0008               	return
 18350  256C                     __end_of_setDimmerLights_Trigger:	
 18351                           
 18352                           	psect	text115
 18353  254C                     __ptext115:	
 18354 ;; *************** function _setDimmerLights_Switch *****************
 18355 ;; Defined at:
 18356 ;;		line 446 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18357 ;; Parameters:    Size  Location     Type
 18358 ;;  lights          1    wreg     unsigned char 
 18359 ;;  command         1    2[BANK0 ] unsigned char 
 18360 ;; Auto vars:     Size  Location     Type
 18361 ;;  lights          1    3[BANK0 ] unsigned char 
 18362 ;; Return value:  Size  Location     Type
 18363 ;;		None               void
 18364 ;; Registers used:
 18365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18366 ;; Tracked objects:
 18367 ;;		On entry : 0/0
 18368 ;;		On exit  : 0/0
 18369 ;;		Unchanged: 0/0
 18370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18371 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;Total ram usage:        2 bytes
 18376 ;; Hardware stack levels used:    1
 18377 ;; Hardware stack levels required when called:    5
 18378 ;; This function calls:
 18379 ;;		_DimmerLightsPointSelect
 18380 ;; This function is called by:
 18381 ;;		_DlyOff_Main
 18382 ;;		_setRFSW_Control
 18383 ;;		_Sw_DimmerOnFunc
 18384 ;;		_Sw_DimmerOffFunc
 18385 ;; This function uses a non-reentrant model
 18386 ;;
 18387                           
 18388                           
 18389                           ;psect for function _setDimmerLights_Switch
 18390  254C                     _setDimmerLights_Switch:	
 18391                           
 18392                           ;incstack = 0
 18393                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18394                           ;setDimmerLights_Switch@lights stored from wreg
 18395  254C  0020               	movlb	0	; select bank0
 18396  254D  00A3               	movwf	setDimmerLights_Switch@lights
 18397                           
 18398                           ;Dimmer_B1.c: 448: DimmerLightsPointSelect(lights);
 18399  254E  0823               	movf	setDimmerLights_Switch@lights,w
 18400  254F  31A5  25DF         	fcall	_DimmerLightsPointSelect
 18401                           
 18402                           ;Dimmer_B1.c: 449: DimmerLights->Switch=command;
 18403  2551  0020               	movlb	0	; select bank0
 18404  2552  086C               	movf	_DimmerLights,w
 18405  2553  3E09               	addlw	9
 18406  2554  0086               	movwf	6
 18407  2555  3001               	movlw	1	; select bank2/3
 18408  2556  0087               	movwf	7
 18409  2557  0822               	movf	setDimmerLights_Switch@command,w
 18410  2558  1001               	bcf	1,0
 18411  2559  1D03               	skipz
 18412  255A  1401               	bsf	1,0
 18413  255B  0008               	return
 18414  255C                     __end_of_setDimmerLights_Switch:	
 18415                           
 18416                           	psect	text116
 18417  25DF                     __ptext116:	
 18418 ;; *************** function _DimmerLightsPointSelect *****************
 18419 ;; Defined at:
 18420 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18421 ;; Parameters:    Size  Location     Type
 18422 ;;  lights          1    wreg     unsigned char 
 18423 ;; Auto vars:     Size  Location     Type
 18424 ;;  lights          1    1[BANK0 ] unsigned char 
 18425 ;; Return value:  Size  Location     Type
 18426 ;;		None               void
 18427 ;; Registers used:
 18428 ;;		wreg
 18429 ;; Tracked objects:
 18430 ;;		On entry : 0/0
 18431 ;;		On exit  : 0/0
 18432 ;;		Unchanged: 0/0
 18433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;Total ram usage:        2 bytes
 18439 ;; Hardware stack levels used:    1
 18440 ;; Hardware stack levels required when called:    4
 18441 ;; This function calls:
 18442 ;;		Nothing
 18443 ;; This function is called by:
 18444 ;;		_setDimmerLights_Initialization
 18445 ;;		_setDimmerLights_Main
 18446 ;;		_setDimmerLights_ERROR
 18447 ;;		_setDimmerLights_TriggerERROR
 18448 ;;		_setDimmerLights
 18449 ;;		_setDimmerLights_Adj
 18450 ;;		_setDimmerLights_AdjRF
 18451 ;;		_setDimmerLights_Switch
 18452 ;;		_setDimmerLights_AdjGo
 18453 ;;		_setDimmerLights_Trigger
 18454 ;;		_setDimmerLights_TriggerAdj
 18455 ;;		_setDimmerLights_Clear
 18456 ;;		_setDimmerLights_GO
 18457 ;;		_setDimmerLights_MaxmumValue
 18458 ;; This function uses a non-reentrant model
 18459 ;;
 18460                           
 18461                           
 18462                           ;psect for function _DimmerLightsPointSelect
 18463  25DF                     _DimmerLightsPointSelect:	
 18464                           
 18465                           ;incstack = 0
 18466                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18467                           ;DimmerLightsPointSelect@lights stored from wreg
 18468  25DF  0020               	movlb	0	; select bank0
 18469  25E0  00A1               	movwf	DimmerLightsPointSelect@lights
 18470                           
 18471                           ;Dimmer_B1.c: 10: if(lights == 1)
 18472  25E1  0821               	movf	DimmerLightsPointSelect@lights,w
 18473  25E2  3A01               	xorlw	1
 18474  25E3  1D03               	skipz
 18475  25E4  2DE9               	goto	l879
 18476                           
 18477                           ;Dimmer_B1.c: 11: {
 18478                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18479  25E5  302E               	movlw	_DimmerLights1& (0+255)
 18480  25E6  00A0               	movwf	??_DimmerLightsPointSelect
 18481  25E7  0820               	movf	??_DimmerLightsPointSelect,w
 18482  25E8  00EC               	movwf	_DimmerLights
 18483  25E9                     l879:	
 18484                           
 18485                           ;Dimmer_B1.c: 13: }
 18486                           ;Dimmer_B1.c: 17: if(lights == 2)
 18487  25E9  0821               	movf	DimmerLightsPointSelect@lights,w
 18488  25EA  3A02               	xorlw	2
 18489  25EB  1D03               	skipz
 18490  25EC  0008               	return
 18491                           
 18492                           ;Dimmer_B1.c: 18: {
 18493                           ;Dimmer_B1.c: 19: DimmerLights=&DimmerLights2;
 18494  25ED  303B               	movlw	_DimmerLights2& (0+255)
 18495  25EE  00A0               	movwf	??_DimmerLightsPointSelect
 18496  25EF  0820               	movf	??_DimmerLightsPointSelect,w
 18497  25F0  00EC               	movwf	_DimmerLights
 18498  25F1  0008               	return
 18499  25F2                     __end_of_DimmerLightsPointSelect:	
 18500                           
 18501                           	psect	text117
 18502  13E5                     __ptext117:	
 18503 ;; *************** function _setBuz *****************
 18504 ;; Defined at:
 18505 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18506 ;; Parameters:    Size  Location     Type
 18507 ;;  count           1    wreg     unsigned char 
 18508 ;;  time            2    6[BANK0 ] int 
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;  count           1    9[BANK0 ] unsigned char 
 18511 ;; Return value:  Size  Location     Type
 18512 ;;		None               void
 18513 ;; Registers used:
 18514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/0
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18520 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;Total ram usage:        4 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    5
 18527 ;; This function calls:
 18528 ;;		___wmul
 18529 ;; This function is called by:
 18530 ;;		_DlyOff_Main
 18531 ;;		_setDimmerLights_Main
 18532 ;;		_DimmerLights_Exceptions
 18533 ;;		_MainT
 18534 ;;		_setOverTemp_Exceptions
 18535 ;;		_setLog_Code
 18536 ;;		_setControl_Lights_Table
 18537 ;;		_setRFSW_Control
 18538 ;;		_setSw_Main
 18539 ;; This function uses a non-reentrant model
 18540 ;;
 18541                           
 18542                           
 18543                           ;psect for function _setBuz
 18544  13E5                     _setBuz:	
 18545                           
 18546                           ;incstack = 0
 18547                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18548                           ;setBuz@count stored from wreg
 18549  13E5  0020               	movlb	0	; select bank0
 18550  13E6  00A9               	movwf	setBuz@count
 18551                           
 18552                           ;Buzzer_B1.c: 24: time*=20;
 18553  13E7  3014               	movlw	20
 18554  13E8  00A0               	movwf	___wmul@multiplier
 18555  13E9  3000               	movlw	0
 18556  13EA  00A1               	movwf	___wmul@multiplier+1
 18557  13EB  0827               	movf	setBuz@time+1,w
 18558  13EC  01A3               	clrf	___wmul@multiplicand+1
 18559  13ED  07A3               	addwf	___wmul@multiplicand+1,f
 18560  13EE  0826               	movf	setBuz@time,w
 18561  13EF  01A2               	clrf	___wmul@multiplicand
 18562  13F0  07A2               	addwf	___wmul@multiplicand,f
 18563  13F1  31A7  27A1  3193   	fcall	___wmul
 18564  13F4  0020               	movlb	0	; select bank0
 18565  13F5  0821               	movf	?___wmul+1,w
 18566  13F6  01A7               	clrf	setBuz@time+1
 18567  13F7  07A7               	addwf	setBuz@time+1,f
 18568  13F8  0820               	movf	?___wmul,w
 18569  13F9  01A6               	clrf	setBuz@time
 18570  13FA  07A6               	addwf	setBuz@time,f
 18571                           
 18572                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18573  13FB  0878               	movf	_Buz,w
 18574  13FC  0086               	movwf	6
 18575  13FD  3001               	movlw	1	; select bank2/3
 18576  13FE  0087               	movwf	7
 18577  13FF  1C01               	btfss	1,0
 18578  1400  0008               	return
 18579                           
 18580                           ;Buzzer_B1.c: 26: {
 18581                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18582  1401  0878               	movf	_Buz,w
 18583  1402  0086               	movwf	6
 18584  1403  3001               	movlw	1	; select bank2/3
 18585  1404  0087               	movwf	7
 18586  1405  1881               	btfsc	1,1
 18587  1406  2C20               	goto	l8640
 18588                           
 18589                           ;Buzzer_B1.c: 28: {
 18590                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18591  1407  0878               	movf	_Buz,w
 18592  1408  0086               	movwf	6
 18593  1409  3001               	movlw	1	; select bank2/3
 18594  140A  0087               	movwf	7
 18595  140B  1481               	bsf	1,1
 18596                           
 18597                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18598  140C  0829               	movf	setBuz@count,w
 18599  140D  00A8               	movwf	??_setBuz
 18600  140E  0878               	movf	_Buz,w
 18601  140F  3E03               	addlw	3
 18602  1410  0086               	movwf	6
 18603  1411  3001               	movlw	1	; select bank2/3
 18604  1412  0087               	movwf	7
 18605  1413  0828               	movf	??_setBuz,w
 18606  1414  0081               	movwf	1
 18607                           
 18608                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18609  1415  0878               	movf	_Buz,w
 18610  1416  3E06               	addlw	6
 18611  1417  0086               	movwf	6
 18612  1418  3001               	movlw	1	; select bank2/3
 18613  1419  0087               	movwf	7
 18614  141A  0826               	movf	setBuz@time,w
 18615  141B  3FC0               	movwi [0]fsr1
 18616  141C  0827               	movf	setBuz@time+1,w
 18617  141D  3FC1               	movwi [1]fsr1
 18618                           
 18619                           ;Buzzer_B1.c: 33: RB3=1;
 18620  141E  158D               	bsf	13,3	;volatile
 18621                           
 18622                           ;Buzzer_B1.c: 34: }
 18623  141F  0008               	return
 18624  1420                     l8640:	
 18625                           
 18626                           ;Buzzer_B1.c: 35: else
 18627                           ;Buzzer_B1.c: 36: {
 18628                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18629  1420  0878               	movf	_Buz,w
 18630  1421  0086               	movwf	6
 18631  1422  3001               	movlw	1	; select bank2/3
 18632  1423  0087               	movwf	7
 18633  1424  1981               	btfsc	1,3
 18634  1425  2C3E               	goto	l8644
 18635                           
 18636                           ;Buzzer_B1.c: 38: {
 18637                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18638  1426  0878               	movf	_Buz,w
 18639  1427  0086               	movwf	6
 18640  1428  3001               	movlw	1	; select bank2/3
 18641  1429  0087               	movwf	7
 18642  142A  1581               	bsf	1,3
 18643                           
 18644                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18645  142B  0829               	movf	setBuz@count,w
 18646  142C  00A8               	movwf	??_setBuz
 18647  142D  0878               	movf	_Buz,w
 18648  142E  3E04               	addlw	4
 18649  142F  0086               	movwf	6
 18650  1430  3001               	movlw	1	; select bank2/3
 18651  1431  0087               	movwf	7
 18652  1432  0828               	movf	??_setBuz,w
 18653  1433  0081               	movwf	1
 18654                           
 18655                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18656  1434  0878               	movf	_Buz,w
 18657  1435  3E08               	addlw	8
 18658  1436  0086               	movwf	6
 18659  1437  3001               	movlw	1	; select bank2/3
 18660  1438  0087               	movwf	7
 18661  1439  0826               	movf	setBuz@time,w
 18662  143A  3FC0               	movwi [0]fsr1
 18663  143B  0827               	movf	setBuz@time+1,w
 18664  143C  3FC1               	movwi [1]fsr1
 18665                           
 18666                           ;Buzzer_B1.c: 42: }
 18667  143D  0008               	return
 18668  143E                     l8644:	
 18669                           
 18670                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18671  143E  0878               	movf	_Buz,w
 18672  143F  0086               	movwf	6
 18673  1440  3001               	movlw	1	; select bank2/3
 18674  1441  0087               	movwf	7
 18675  1442  1A01               	btfsc	1,4
 18676  1443  0008               	return
 18677                           
 18678                           ;Buzzer_B1.c: 44: {
 18679                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18680  1444  0878               	movf	_Buz,w
 18681  1445  0086               	movwf	6
 18682  1446  3001               	movlw	1	; select bank2/3
 18683  1447  0087               	movwf	7
 18684  1448  1601               	bsf	1,4
 18685                           
 18686                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18687  1449  0829               	movf	setBuz@count,w
 18688  144A  00A8               	movwf	??_setBuz
 18689  144B  0878               	movf	_Buz,w
 18690  144C  3E05               	addlw	5
 18691  144D  0086               	movwf	6
 18692  144E  3001               	movlw	1	; select bank2/3
 18693  144F  0087               	movwf	7
 18694  1450  0828               	movf	??_setBuz,w
 18695  1451  0081               	movwf	1
 18696                           
 18697                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18698  1452  0878               	movf	_Buz,w
 18699  1453  3E0A               	addlw	10
 18700  1454  0086               	movwf	6
 18701  1455  3001               	movlw	1	; select bank2/3
 18702  1456  0087               	movwf	7
 18703  1457  0826               	movf	setBuz@time,w
 18704  1458  3FC0               	movwi [0]fsr1
 18705  1459  0827               	movf	setBuz@time+1,w
 18706  145A  3FC1               	movwi [1]fsr1
 18707  145B  0008               	return
 18708  145C                     __end_of_setBuz:	
 18709                           
 18710                           	psect	text118
 18711  27A1                     __ptext118:	
 18712 ;; *************** function ___wmul *****************
 18713 ;; Defined at:
 18714 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18715 ;; Parameters:    Size  Location     Type
 18716 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18717 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18718 ;; Auto vars:     Size  Location     Type
 18719 ;;  product         2    4[BANK0 ] unsigned int 
 18720 ;; Return value:  Size  Location     Type
 18721 ;;                  2    0[BANK0 ] unsigned int 
 18722 ;; Registers used:
 18723 ;;		wreg, status,2, status,0
 18724 ;; Tracked objects:
 18725 ;;		On entry : 0/0
 18726 ;;		On exit  : 0/0
 18727 ;;		Unchanged: 0/0
 18728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;Total ram usage:        6 bytes
 18734 ;; Hardware stack levels used:    1
 18735 ;; Hardware stack levels required when called:    4
 18736 ;; This function calls:
 18737 ;;		Nothing
 18738 ;; This function is called by:
 18739 ;;		_setBuz
 18740 ;;		_Load_Main
 18741 ;; This function uses a non-reentrant model
 18742 ;;
 18743                           
 18744                           
 18745                           ;psect for function ___wmul
 18746  27A1                     ___wmul:	
 18747                           
 18748                           ;incstack = 0
 18749                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18750  27A1  0020               	movlb	0	; select bank0
 18751  27A2  01A4               	clrf	___wmul@product
 18752  27A3  01A5               	clrf	___wmul@product+1
 18753  27A4                     l8620:	
 18754  27A4  1C20               	btfss	___wmul@multiplier,0
 18755  27A5  2FAA               	goto	l3243
 18756  27A6  0822               	movf	___wmul@multiplicand,w
 18757  27A7  07A4               	addwf	___wmul@product,f
 18758  27A8  0823               	movf	___wmul@multiplicand+1,w
 18759  27A9  3DA5               	addwfc	___wmul@product+1,f
 18760  27AA                     l3243:	
 18761  27AA  3001               	movlw	1
 18762  27AB                     u8225:	
 18763  27AB  35A2               	lslf	___wmul@multiplicand,f
 18764  27AC  0DA3               	rlf	___wmul@multiplicand+1,f
 18765  27AD  0B89               	decfsz	9,f
 18766  27AE  2FAB               	goto	u8225
 18767  27AF  3001               	movlw	1
 18768  27B0                     u8235:	
 18769  27B0  36A1               	lsrf	___wmul@multiplier+1,f
 18770  27B1  0CA0               	rrf	___wmul@multiplier,f
 18771  27B2  0B89               	decfsz	9,f
 18772  27B3  2FB0               	goto	u8235
 18773  27B4  0821               	movf	___wmul@multiplier+1,w
 18774  27B5  0420               	iorwf	___wmul@multiplier,w
 18775  27B6  1D03               	skipz
 18776  27B7  2FA4               	goto	l8620
 18777  27B8  0825               	movf	___wmul@product+1,w
 18778  27B9  01A1               	clrf	?___wmul+1
 18779  27BA  07A1               	addwf	?___wmul+1,f
 18780  27BB  0824               	movf	___wmul@product,w
 18781  27BC  01A0               	clrf	?___wmul
 18782  27BD  07A0               	addwf	?___wmul,f
 18783  27BE  0008               	return
 18784  27BF                     __end_of___wmul:	
 18785                           
 18786                           	psect	text119
 18787  23DF                     __ptext119:	
 18788 ;; *************** function _DelayOff_Initialization *****************
 18789 ;; Defined at:
 18790 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;		None
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;		None
 18795 ;; Return value:  Size  Location     Type
 18796 ;;		None               void
 18797 ;; Registers used:
 18798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;Total ram usage:        0 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    6
 18811 ;; This function calls:
 18812 ;;		_DlyOff_Initialization
 18813 ;; This function is called by:
 18814 ;;		_main
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           
 18819                           ;psect for function _DelayOff_Initialization
 18820  23DF                     _DelayOff_Initialization:	
 18821                           
 18822                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18823                           
 18824                           ;incstack = 0
 18825                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18826  23DF  3001               	movlw	1
 18827  23E0  31A4  242E  31A3   	fcall	_DlyOff_Initialization
 18828                           
 18829                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 18830  23E3  3002               	movlw	2
 18831  23E4  31A4  242E         	fcall	_DlyOff_Initialization
 18832  23E6  0008               	return
 18833  23E7                     __end_of_DelayOff_Initialization:	
 18834                           
 18835                           	psect	text120
 18836  242E                     __ptext120:	
 18837 ;; *************** function _DlyOff_Initialization *****************
 18838 ;; Defined at:
 18839 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18840 ;; Parameters:    Size  Location     Type
 18841 ;;  sw              1    wreg     unsigned char 
 18842 ;; Auto vars:     Size  Location     Type
 18843 ;;  sw              1    2[BANK0 ] unsigned char 
 18844 ;; Return value:  Size  Location     Type
 18845 ;;		None               void
 18846 ;; Registers used:
 18847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18848 ;; Tracked objects:
 18849 ;;		On entry : 0/0
 18850 ;;		On exit  : 0/0
 18851 ;;		Unchanged: 0/0
 18852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18857 ;;Total ram usage:        1 bytes
 18858 ;; Hardware stack levels used:    1
 18859 ;; Hardware stack levels required when called:    5
 18860 ;; This function calls:
 18861 ;;		_DelayOffPointSelect
 18862 ;; This function is called by:
 18863 ;;		_DelayOff_Initialization
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           
 18868                           ;psect for function _DlyOff_Initialization
 18869  242E                     _DlyOff_Initialization:	
 18870                           
 18871                           ;incstack = 0
 18872                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18873                           ;DlyOff_Initialization@sw stored from wreg
 18874  242E  0020               	movlb	0	; select bank0
 18875  242F  00A2               	movwf	DlyOff_Initialization@sw
 18876                           
 18877                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18878  2430  0822               	movf	DlyOff_Initialization@sw,w
 18879  2431  31A6  2685         	fcall	_DelayOffPointSelect
 18880                           
 18881                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18882  2433  0021               	movlb	1	; select bank1
 18883  2434  0838               	movf	_DelayOff^(0+128),w
 18884  2435  0086               	movwf	6
 18885  2436  0187               	clrf	7
 18886  2437  1401               	bsf	1,0
 18887  2438  0008               	return
 18888  2439                     __end_of_DlyOff_Initialization:	
 18889                           
 18890                           	psect	text121
 18891  2685                     __ptext121:	
 18892 ;; *************** function _DelayOffPointSelect *****************
 18893 ;; Defined at:
 18894 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;  sw              1    wreg     unsigned char 
 18897 ;; Auto vars:     Size  Location     Type
 18898 ;;  sw              1    1[BANK0 ] unsigned char 
 18899 ;; Return value:  Size  Location     Type
 18900 ;;		None               void
 18901 ;; Registers used:
 18902 ;;		wreg
 18903 ;; Tracked objects:
 18904 ;;		On entry : 0/0
 18905 ;;		On exit  : 0/0
 18906 ;;		Unchanged: 0/0
 18907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;Total ram usage:        2 bytes
 18913 ;; Hardware stack levels used:    1
 18914 ;; Hardware stack levels required when called:    4
 18915 ;; This function calls:
 18916 ;;		Nothing
 18917 ;; This function is called by:
 18918 ;;		_DlyOff_Initialization
 18919 ;;		_DlyOff_Main
 18920 ;;		_setDelayOff_GO
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           
 18925                           ;psect for function _DelayOffPointSelect
 18926  2685                     _DelayOffPointSelect:	
 18927                           
 18928                           ;incstack = 0
 18929                           ; Regs used in _DelayOffPointSelect: [wreg]
 18930                           ;DelayOffPointSelect@sw stored from wreg
 18931  2685  0020               	movlb	0	; select bank0
 18932  2686  00A1               	movwf	DelayOffPointSelect@sw
 18933                           
 18934                           ;DelayOff_B1.c: 11: if(sw == 1)
 18935  2687  0821               	movf	DelayOffPointSelect@sw,w
 18936  2688  3A01               	xorlw	1
 18937  2689  1D03               	skipz
 18938  268A  2E91               	goto	l6396
 18939                           
 18940                           ;DelayOff_B1.c: 12: {
 18941                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18942  268B  30CB               	movlw	_DlySw1& (0+255)
 18943  268C  00A0               	movwf	??_DelayOffPointSelect
 18944  268D  0820               	movf	??_DelayOffPointSelect,w
 18945  268E  0021               	movlb	1	; select bank1
 18946  268F  00B8               	movwf	_DelayOff^(0+128)
 18947                           
 18948                           ;DelayOff_B1.c: 14: }
 18949  2690  0008               	return
 18950  2691                     l6396:	
 18951                           
 18952                           ;DelayOff_B1.c: 17: else if(sw == 2)
 18953  2691  0020               	movlb	0	; select bank0
 18954  2692  0821               	movf	DelayOffPointSelect@sw,w
 18955  2693  3A02               	xorlw	2
 18956  2694  1D03               	skipz
 18957  2695  0008               	return
 18958                           
 18959                           ;DelayOff_B1.c: 18: {
 18960                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 18961  2696  30D0               	movlw	_DlySw2& (0+255)
 18962  2697  00A0               	movwf	??_DelayOffPointSelect
 18963  2698  0820               	movf	??_DelayOffPointSelect,w
 18964  2699  0021               	movlb	1	; select bank1
 18965  269A  00B8               	movwf	_DelayOff^(0+128)
 18966  269B  0008               	return
 18967  269C                     __end_of_DelayOffPointSelect:	
 18968                           
 18969                           	psect	text122
 18970  261A                     __ptext122:	
 18971 ;; *************** function _CC2500_PowerOnInitial *****************
 18972 ;; Defined at:
 18973 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18974 ;; Parameters:    Size  Location     Type
 18975 ;;		None
 18976 ;; Auto vars:     Size  Location     Type
 18977 ;;		None
 18978 ;; Return value:  Size  Location     Type
 18979 ;;		None               void
 18980 ;; Registers used:
 18981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18982 ;; Tracked objects:
 18983 ;;		On entry : 0/0
 18984 ;;		On exit  : 0/0
 18985 ;;		Unchanged: 0/0
 18986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18991 ;;Total ram usage:        0 bytes
 18992 ;; Hardware stack levels used:    1
 18993 ;; Hardware stack levels required when called:    7
 18994 ;; This function calls:
 18995 ;;		_CC2500_ClearRXFIFO
 18996 ;;		_CC2500_ClearTXFIFO
 18997 ;;		_CC2500_FrequencyCabr
 18998 ;;		_CC2500_InitPATable
 18999 ;;		_CC2500_InitSetREG
 19000 ;;		_CC2500_PowerRST
 19001 ;;		_CC2500_SIDLEMode
 19002 ;; This function is called by:
 19003 ;;		_main
 19004 ;; This function uses a non-reentrant model
 19005 ;;
 19006                           
 19007                           
 19008                           ;psect for function _CC2500_PowerOnInitial
 19009  261A                     _CC2500_PowerOnInitial:	
 19010                           
 19011                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 19012                           
 19013                           ;incstack = 0
 19014                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19015  261A  319A  220D  31A6   	fcall	_CC2500_PowerRST
 19016                           
 19017                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19018  261D  3199  215E  31A6   	fcall	_CC2500_InitSetREG
 19019                           
 19020                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19021  2620  31A7  27BF  31A6   	fcall	_CC2500_InitPATable
 19022                           
 19023                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19024  2623  31A3  239D  31A6   	fcall	_CC2500_ClearTXFIFO
 19025                           
 19026                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19027  2626  31A3  2399  31A6   	fcall	_CC2500_ClearRXFIFO
 19028                           
 19029                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19030  2629  31A4  249E  31A6   	fcall	_CC2500_FrequencyCabr
 19031                           
 19032                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19033  262C  31A3  23A1         	fcall	_CC2500_SIDLEMode
 19034  262E  0008               	return
 19035  262F                     __end_of_CC2500_PowerOnInitial:	
 19036                           
 19037                           	psect	text123
 19038  23A1                     __ptext123:	
 19039 ;; *************** function _CC2500_SIDLEMode *****************
 19040 ;; Defined at:
 19041 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19042 ;; Parameters:    Size  Location     Type
 19043 ;;		None
 19044 ;; Auto vars:     Size  Location     Type
 19045 ;;		None
 19046 ;; Return value:  Size  Location     Type
 19047 ;;		None               void
 19048 ;; Registers used:
 19049 ;;		wreg, status,2, status,0, pclath, cstack
 19050 ;; Tracked objects:
 19051 ;;		On entry : 0/0
 19052 ;;		On exit  : 0/0
 19053 ;;		Unchanged: 0/0
 19054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19059 ;;Total ram usage:        0 bytes
 19060 ;; Hardware stack levels used:    1
 19061 ;; Hardware stack levels required when called:    6
 19062 ;; This function calls:
 19063 ;;		_CC2500_WriteCommand
 19064 ;; This function is called by:
 19065 ;;		_CC2500_PowerOnInitial
 19066 ;; This function uses a non-reentrant model
 19067 ;;
 19068                           
 19069                           
 19070                           ;psect for function _CC2500_SIDLEMode
 19071  23A1                     _CC2500_SIDLEMode:	
 19072                           
 19073                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19074                           
 19075                           ;incstack = 0
 19076                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19077  23A1  3036               	movlw	54
 19078  23A2  31A5  253C         	fcall	_CC2500_WriteCommand
 19079  23A4  0008               	return
 19080  23A5                     __end_of_CC2500_SIDLEMode:	
 19081                           
 19082                           	psect	text124
 19083  1A0D                     __ptext124:	
 19084 ;; *************** function _CC2500_PowerRST *****************
 19085 ;; Defined at:
 19086 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19087 ;; Parameters:    Size  Location     Type
 19088 ;;		None
 19089 ;; Auto vars:     Size  Location     Type
 19090 ;;		None
 19091 ;; Return value:  Size  Location     Type
 19092 ;;		None               void
 19093 ;; Registers used:
 19094 ;;		wreg, status,2, status,0, pclath, cstack
 19095 ;; Tracked objects:
 19096 ;;		On entry : 0/0
 19097 ;;		On exit  : 0/0
 19098 ;;		Unchanged: 0/0
 19099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19103 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19104 ;;Total ram usage:        1 bytes
 19105 ;; Hardware stack levels used:    1
 19106 ;; Hardware stack levels required when called:    5
 19107 ;; This function calls:
 19108 ;;		_CC2500_WriteByte
 19109 ;;		_DelayTime_1us
 19110 ;; This function is called by:
 19111 ;;		_CC2500_PowerOnInitial
 19112 ;; This function uses a non-reentrant model
 19113 ;;
 19114                           
 19115                           
 19116                           ;psect for function _CC2500_PowerRST
 19117  1A0D                     _CC2500_PowerRST:	
 19118                           
 19119                           ;CC2500_B1.c: 112: RC1=0;
 19120                           
 19121                           ;incstack = 0
 19122                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19123  1A0D  0020               	movlb	0	; select bank0
 19124  1A0E  108E               	bcf	14,1	;volatile
 19125                           
 19126                           ;CC2500_B1.c: 113: RC0=0;
 19127  1A0F  100E               	bcf	14,0	;volatile
 19128                           
 19129                           ;CC2500_B1.c: 114: RC4=1;
 19130  1A10  160E               	bsf	14,4	;volatile
 19131                           
 19132                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19133  1A11  300A               	movlw	10
 19134  1A12  00A0               	movwf	DelayTime_1us@count
 19135  1A13  3000               	movlw	0
 19136  1A14  00A1               	movwf	DelayTime_1us@count+1
 19137  1A15  3199  2112  319A   	fcall	_DelayTime_1us
 19138                           
 19139                           ;CC2500_B1.c: 116: RC4=0;
 19140  1A18  0020               	movlb	0	; select bank0
 19141  1A19  120E               	bcf	14,4	;volatile
 19142                           
 19143                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19144  1A1A  300A               	movlw	10
 19145  1A1B  00A0               	movwf	DelayTime_1us@count
 19146  1A1C  3000               	movlw	0
 19147  1A1D  00A1               	movwf	DelayTime_1us@count+1
 19148  1A1E  3199  2112  319A   	fcall	_DelayTime_1us
 19149                           
 19150                           ;CC2500_B1.c: 118: RC4=1;
 19151  1A21  0020               	movlb	0	; select bank0
 19152  1A22  160E               	bsf	14,4	;volatile
 19153                           
 19154                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19155  1A23  3028               	movlw	40
 19156  1A24  00A0               	movwf	DelayTime_1us@count
 19157  1A25  3000               	movlw	0
 19158  1A26  00A1               	movwf	DelayTime_1us@count+1
 19159  1A27  3199  2112  319A   	fcall	_DelayTime_1us
 19160                           
 19161                           ;CC2500_B1.c: 120: RC4=0;
 19162  1A2A  0020               	movlb	0	; select bank0
 19163  1A2B  120E               	bcf	14,4	;volatile
 19164                           
 19165                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19166  1A2C  3030               	movlw	48
 19167  1A2D  00A6               	movwf	??_CC2500_PowerRST
 19168  1A2E  0826               	movf	??_CC2500_PowerRST,w
 19169  1A2F  0021               	movlb	1	; select bank1
 19170  1A30  00BF               	movwf	_SPI0Buffer^(0+128)
 19171  1A31                     l340:	
 19172                           ;CC2500_B1.c: 122: while(RC2==1);
 19173                           
 19174  1A31  0020               	movlb	0	; select bank0
 19175  1A32  190E               	btfsc	14,2	;volatile
 19176  1A33  2A31               	goto	l340
 19177                           
 19178                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19179  1A34  31A6  26B4  319A   	fcall	_CC2500_WriteByte
 19180  1A37                     l343:	
 19181                           ;CC2500_B1.c: 124: while(RC2==1);
 19182                           
 19183  1A37  0020               	movlb	0	; select bank0
 19184  1A38  190E               	btfsc	14,2	;volatile
 19185  1A39  2A37               	goto	l343
 19186                           
 19187                           ;CC2500_B1.c: 125: RC0=0;
 19188  1A3A  100E               	bcf	14,0	;volatile
 19189                           
 19190                           ;CC2500_B1.c: 126: RC4=1;
 19191  1A3B  160E               	bsf	14,4	;volatile
 19192  1A3C  0008               	return
 19193  1A3D                     __end_of_CC2500_PowerRST:	
 19194                           
 19195                           	psect	text125
 19196  195E                     __ptext125:	
 19197 ;; *************** function _CC2500_InitSetREG *****************
 19198 ;; Defined at:
 19199 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19200 ;; Parameters:    Size  Location     Type
 19201 ;;		None
 19202 ;; Auto vars:     Size  Location     Type
 19203 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19204 ;;  temp2           1    7[BANK0 ] unsigned char 
 19205 ;;  temp1           1    6[BANK0 ] unsigned char 
 19206 ;; Return value:  Size  Location     Type
 19207 ;;		None               void
 19208 ;; Registers used:
 19209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19216 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19219 ;;Total ram usage:        4 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    6
 19222 ;; This function calls:
 19223 ;;		_CC2500_WriteREG
 19224 ;; This function is called by:
 19225 ;;		_CC2500_PowerOnInitial
 19226 ;; This function uses a non-reentrant model
 19227 ;;
 19228                           
 19229                           
 19230                           ;psect for function _CC2500_InitSetREG
 19231  195E                     _CC2500_InitSetREG:	
 19232                           
 19233                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19234                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19235                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19236                           
 19237                           ;incstack = 0
 19238                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19239  195E  0020               	movlb	0	; select bank0
 19240  195F  01A8               	clrf	CC2500_InitSetREG@loop_c
 19241  1960                     L14:	
 19242  1960  302F               	movlw	47
 19243  1961  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19244  1962  1803               	btfsc	3,0
 19245  1963  0008               	return
 19246                           
 19247                           ;CC2500_B1.c: 137: {
 19248                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19249  1964  0828               	movf	CC2500_InitSetREG@loop_c,w
 19250  1965  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19251  1966  0084               	movwf	4
 19252  1967  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19253  1968  1803               	skipnc
 19254  1969  3E01               	addlw	1
 19255  196A  0085               	movwf	5
 19256  196B  0800               	movf	0,w	;code access
 19257  196C  00A5               	movwf	??_CC2500_InitSetREG
 19258  196D  0825               	movf	??_CC2500_InitSetREG,w
 19259  196E  00A6               	movwf	CC2500_InitSetREG@temp1
 19260                           
 19261                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19262  196F  0828               	movf	CC2500_InitSetREG@loop_c,w
 19263  1970  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19264  1971  0084               	movwf	4
 19265  1972  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19266  1973  1803               	skipnc
 19267  1974  3E01               	addlw	1
 19268  1975  0085               	movwf	5
 19269  1976  0800               	movf	0,w	;code access
 19270  1977  00A5               	movwf	??_CC2500_InitSetREG
 19271  1978  0825               	movf	??_CC2500_InitSetREG,w
 19272  1979  00A7               	movwf	CC2500_InitSetREG@temp2
 19273                           
 19274                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19275  197A  0827               	movf	CC2500_InitSetREG@temp2,w
 19276  197B  00A5               	movwf	??_CC2500_InitSetREG
 19277  197C  0825               	movf	??_CC2500_InitSetREG,w
 19278  197D  00A2               	movwf	CC2500_WriteREG@value
 19279  197E  0826               	movf	CC2500_InitSetREG@temp1,w
 19280  197F  31A6  26CD  3199   	fcall	_CC2500_WriteREG
 19281  1982  3001               	movlw	1
 19282  1983  0020               	movlb	0	; select bank0
 19283  1984  00A5               	movwf	??_CC2500_InitSetREG
 19284  1985  0825               	movf	??_CC2500_InitSetREG,w
 19285  1986  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19286  1987  2960               	goto	L14
 19287  1988                     __end_of_CC2500_InitSetREG:	
 19288                           
 19289                           	psect	text126
 19290  27BF                     __ptext126:	
 19291 ;; *************** function _CC2500_InitPATable *****************
 19292 ;; Defined at:
 19293 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19294 ;; Parameters:    Size  Location     Type
 19295 ;;		None
 19296 ;; Auto vars:     Size  Location     Type
 19297 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19298 ;;  temp            1    6[BANK0 ] unsigned char 
 19299 ;; Return value:  Size  Location     Type
 19300 ;;		None               void
 19301 ;; Registers used:
 19302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19303 ;; Tracked objects:
 19304 ;;		On entry : 0/0
 19305 ;;		On exit  : 0/0
 19306 ;;		Unchanged: 0/0
 19307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;Total ram usage:        3 bytes
 19313 ;; Hardware stack levels used:    1
 19314 ;; Hardware stack levels required when called:    6
 19315 ;; This function calls:
 19316 ;;		_CC2500_WriteREG
 19317 ;; This function is called by:
 19318 ;;		_CC2500_PowerOnInitial
 19319 ;; This function uses a non-reentrant model
 19320 ;;
 19321                           
 19322                           
 19323                           ;psect for function _CC2500_InitPATable
 19324  27BF                     _CC2500_InitPATable:	
 19325                           
 19326                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19327                           ;CC2500_B1.c: 150: unsigned char temp;
 19328                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19329                           
 19330                           ;incstack = 0
 19331                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19332  27BF  0020               	movlb	0	; select bank0
 19333  27C0  01A7               	clrf	CC2500_InitPATable@loop_d
 19334  27C1                     L15:	
 19335  27C1  3008               	movlw	8
 19336  27C2  0227               	subwf	CC2500_InitPATable@loop_d,w
 19337  27C3  1803               	btfsc	3,0
 19338  27C4  0008               	return
 19339                           
 19340                           ;CC2500_B1.c: 153: {
 19341                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19342  27C5  0827               	movf	CC2500_InitPATable@loop_d,w
 19343  27C6  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19344  27C7  0084               	movwf	4
 19345  27C8  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19346  27C9  1803               	skipnc
 19347  27CA  3E01               	addlw	1
 19348  27CB  0085               	movwf	5
 19349  27CC  0800               	movf	0,w	;code access
 19350  27CD  00A5               	movwf	??_CC2500_InitPATable
 19351  27CE  0825               	movf	??_CC2500_InitPATable,w
 19352  27CF  00A6               	movwf	CC2500_InitPATable@temp
 19353                           
 19354                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19355  27D0  0826               	movf	CC2500_InitPATable@temp,w
 19356  27D1  00A5               	movwf	??_CC2500_InitPATable
 19357  27D2  0825               	movf	??_CC2500_InitPATable,w
 19358  27D3  00A2               	movwf	CC2500_WriteREG@value
 19359  27D4  303E               	movlw	62
 19360  27D5  31A6  26CD  31A7   	fcall	_CC2500_WriteREG
 19361  27D8  3001               	movlw	1
 19362  27D9  0020               	movlb	0	; select bank0
 19363  27DA  00A5               	movwf	??_CC2500_InitPATable
 19364  27DB  0825               	movf	??_CC2500_InitPATable,w
 19365  27DC  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19366  27DD  2FC1               	goto	L15
 19367  27DE                     __end_of_CC2500_InitPATable:	
 19368                           
 19369                           	psect	text127
 19370  26CD                     __ptext127:	
 19371 ;; *************** function _CC2500_WriteREG *****************
 19372 ;; Defined at:
 19373 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;  w_addr          1    wreg     unsigned char 
 19376 ;;  value           1    2[BANK0 ] unsigned char 
 19377 ;; Auto vars:     Size  Location     Type
 19378 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19379 ;; Return value:  Size  Location     Type
 19380 ;;		None               void
 19381 ;; Registers used:
 19382 ;;		wreg, status,2, status,0, pclath, cstack
 19383 ;; Tracked objects:
 19384 ;;		On entry : 0/0
 19385 ;;		On exit  : 0/0
 19386 ;;		Unchanged: 0/0
 19387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19388 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19392 ;;Total ram usage:        3 bytes
 19393 ;; Hardware stack levels used:    1
 19394 ;; Hardware stack levels required when called:    5
 19395 ;; This function calls:
 19396 ;;		_CC2500_WriteByte
 19397 ;; This function is called by:
 19398 ;;		_CC2500_InitSetREG
 19399 ;;		_CC2500_InitPATable
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           
 19404                           ;psect for function _CC2500_WriteREG
 19405  26CD                     _CC2500_WriteREG:	
 19406                           
 19407                           ;incstack = 0
 19408                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19409                           ;CC2500_WriteREG@w_addr stored from wreg
 19410  26CD  0020               	movlb	0	; select bank0
 19411  26CE  00A4               	movwf	CC2500_WriteREG@w_addr
 19412                           
 19413                           ;CC2500_B1.c: 229: RC4=0;
 19414  26CF  120E               	bcf	14,4	;volatile
 19415                           
 19416                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19417  26D0  0824               	movf	CC2500_WriteREG@w_addr,w
 19418  26D1  00A3               	movwf	??_CC2500_WriteREG
 19419  26D2  0823               	movf	??_CC2500_WriteREG,w
 19420  26D3  0021               	movlb	1	; select bank1
 19421  26D4  00BF               	movwf	_SPI0Buffer^(0+128)
 19422  26D5                     l385:	
 19423                           ;CC2500_B1.c: 231: while(RC2==1);
 19424                           
 19425  26D5  0020               	movlb	0	; select bank0
 19426  26D6  190E               	btfsc	14,2	;volatile
 19427  26D7  2ED5               	goto	l385
 19428                           
 19429                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19430  26D8  31A6  26B4  31A6   	fcall	_CC2500_WriteByte
 19431                           
 19432                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19433  26DB  0020               	movlb	0	; select bank0
 19434  26DC  0822               	movf	CC2500_WriteREG@value,w
 19435  26DD  00A3               	movwf	??_CC2500_WriteREG
 19436  26DE  0823               	movf	??_CC2500_WriteREG,w
 19437  26DF  0021               	movlb	1	; select bank1
 19438  26E0  00BF               	movwf	_SPI0Buffer^(0+128)
 19439                           
 19440                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19441  26E1  31A6  26B4         	fcall	_CC2500_WriteByte
 19442                           
 19443                           ;CC2500_B1.c: 235: RC4=1;
 19444  26E3  0020               	movlb	0	; select bank0
 19445  26E4  160E               	bsf	14,4	;volatile
 19446  26E5  0008               	return
 19447  26E6                     __end_of_CC2500_WriteREG:	
 19448                           
 19449                           	psect	text128
 19450  249E                     __ptext128:	
 19451 ;; *************** function _CC2500_FrequencyCabr *****************
 19452 ;; Defined at:
 19453 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;		None
 19456 ;; Auto vars:     Size  Location     Type
 19457 ;;		None
 19458 ;; Return value:  Size  Location     Type
 19459 ;;		None               void
 19460 ;; Registers used:
 19461 ;;		wreg, status,2, status,0, pclath, cstack
 19462 ;; Tracked objects:
 19463 ;;		On entry : 0/0
 19464 ;;		On exit  : 0/0
 19465 ;;		Unchanged: 0/0
 19466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19471 ;;Total ram usage:        0 bytes
 19472 ;; Hardware stack levels used:    1
 19473 ;; Hardware stack levels required when called:    6
 19474 ;; This function calls:
 19475 ;;		_CC2500_WriteCommand
 19476 ;;		_DelayTime_1us
 19477 ;; This function is called by:
 19478 ;;		_CC2500_PowerOnInitial
 19479 ;; This function uses a non-reentrant model
 19480 ;;
 19481                           
 19482                           
 19483                           ;psect for function _CC2500_FrequencyCabr
 19484  249E                     _CC2500_FrequencyCabr:	
 19485                           
 19486                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19487                           
 19488                           ;incstack = 0
 19489                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19490  249E  3033               	movlw	51
 19491  249F  31A5  253C  31A4   	fcall	_CC2500_WriteCommand
 19492                           
 19493                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19494  24A2  30E8               	movlw	232
 19495  24A3  0020               	movlb	0	; select bank0
 19496  24A4  00A0               	movwf	DelayTime_1us@count
 19497  24A5  3003               	movlw	3
 19498  24A6  00A1               	movwf	DelayTime_1us@count+1
 19499  24A7  3199  2112         	fcall	_DelayTime_1us
 19500  24A9  0008               	return
 19501  24AA                     __end_of_CC2500_FrequencyCabr:	
 19502                           
 19503                           	psect	text129
 19504  1912                     __ptext129:	
 19505 ;; *************** function _DelayTime_1us *****************
 19506 ;; Defined at:
 19507 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19508 ;; Parameters:    Size  Location     Type
 19509 ;;  count           2    0[BANK0 ] int 
 19510 ;; Auto vars:     Size  Location     Type
 19511 ;;  j               2    4[BANK0 ] unsigned int 
 19512 ;;  i               2    2[BANK0 ] unsigned int 
 19513 ;; Return value:  Size  Location     Type
 19514 ;;		None               void
 19515 ;; Registers used:
 19516 ;;		wreg, status,2
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;Total ram usage:        6 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; Hardware stack levels required when called:    4
 19529 ;; This function calls:
 19530 ;;		Nothing
 19531 ;; This function is called by:
 19532 ;;		_CC2500_PowerRST
 19533 ;;		_CC2500_FrequencyCabr
 19534 ;; This function uses a non-reentrant model
 19535 ;;
 19536                           
 19537                           
 19538                           ;psect for function _DelayTime_1us
 19539  1912                     _DelayTime_1us:	
 19540                           
 19541                           ;CC2500_B1.c: 285: unsigned int i,j;
 19542                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19543                           
 19544                           ;incstack = 0
 19545                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19546  1912  3001               	movlw	1
 19547  1913  0020               	movlb	0	; select bank0
 19548  1914  00A2               	movwf	DelayTime_1us@i
 19549  1915  3000               	movlw	0
 19550  1916  00A3               	movwf	DelayTime_1us@i+1
 19551  1917                     l409:	
 19552  1917  0821               	movf	DelayTime_1us@count+1,w
 19553  1918  0223               	subwf	DelayTime_1us@i+1,w
 19554  1919  1D03               	skipz
 19555  191A  291D               	goto	u8795
 19556  191B  0820               	movf	DelayTime_1us@count,w
 19557  191C  0222               	subwf	DelayTime_1us@i,w
 19558  191D                     u8795:	
 19559  191D  1803               	btfsc	3,0
 19560  191E  0008               	return
 19561                           
 19562                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19563  191F  01A4               	clrf	DelayTime_1us@j
 19564  1920  01A5               	clrf	DelayTime_1us@j+1
 19565  1921  3000               	movlw	0
 19566  1922  0225               	subwf	DelayTime_1us@j+1,w
 19567  1923  3002               	movlw	2
 19568  1924  1903               	skipnz
 19569  1925  0224               	subwf	DelayTime_1us@j,w
 19570  1926  1803               	btfsc	3,0
 19571  1927  2933               	goto	l9018
 19572  1928                     l9016:	
 19573  1928  3001               	movlw	1
 19574  1929  07A4               	addwf	DelayTime_1us@j,f
 19575  192A  3000               	movlw	0
 19576  192B  3DA5               	addwfc	DelayTime_1us@j+1,f
 19577  192C  3000               	movlw	0
 19578  192D  0225               	subwf	DelayTime_1us@j+1,w
 19579  192E  3002               	movlw	2
 19580  192F  1903               	skipnz
 19581  1930  0224               	subwf	DelayTime_1us@j,w
 19582  1931  1C03               	skipc
 19583  1932  2928               	goto	l9016
 19584  1933                     l9018:	
 19585  1933  3001               	movlw	1
 19586  1934  07A2               	addwf	DelayTime_1us@i,f
 19587  1935  3000               	movlw	0
 19588  1936  3DA3               	addwfc	DelayTime_1us@i+1,f
 19589  1937  2917               	goto	l409
 19590  1938                     __end_of_DelayTime_1us:	
 19591                           
 19592                           	psect	text130
 19593  239D                     __ptext130:	
 19594 ;; *************** function _CC2500_ClearTXFIFO *****************
 19595 ;; Defined at:
 19596 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19597 ;; Parameters:    Size  Location     Type
 19598 ;;		None
 19599 ;; Auto vars:     Size  Location     Type
 19600 ;;		None
 19601 ;; Return value:  Size  Location     Type
 19602 ;;		None               void
 19603 ;; Registers used:
 19604 ;;		wreg, status,2, status,0, pclath, cstack
 19605 ;; Tracked objects:
 19606 ;;		On entry : 0/0
 19607 ;;		On exit  : 0/0
 19608 ;;		Unchanged: 0/0
 19609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19614 ;;Total ram usage:        0 bytes
 19615 ;; Hardware stack levels used:    1
 19616 ;; Hardware stack levels required when called:    6
 19617 ;; This function calls:
 19618 ;;		_CC2500_WriteCommand
 19619 ;; This function is called by:
 19620 ;;		_CC2500_PowerOnInitial
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           
 19625                           ;psect for function _CC2500_ClearTXFIFO
 19626  239D                     _CC2500_ClearTXFIFO:	
 19627                           
 19628                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19629                           
 19630                           ;incstack = 0
 19631                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19632  239D  303B               	movlw	59
 19633  239E  31A5  253C         	fcall	_CC2500_WriteCommand
 19634  23A0  0008               	return
 19635  23A1                     __end_of_CC2500_ClearTXFIFO:	
 19636                           
 19637                           	psect	text131
 19638  2399                     __ptext131:	
 19639 ;; *************** function _CC2500_ClearRXFIFO *****************
 19640 ;; Defined at:
 19641 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19642 ;; Parameters:    Size  Location     Type
 19643 ;;		None
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;		None
 19646 ;; Return value:  Size  Location     Type
 19647 ;;		None               void
 19648 ;; Registers used:
 19649 ;;		wreg, status,2, status,0, pclath, cstack
 19650 ;; Tracked objects:
 19651 ;;		On entry : 0/0
 19652 ;;		On exit  : 0/0
 19653 ;;		Unchanged: 0/0
 19654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19659 ;;Total ram usage:        0 bytes
 19660 ;; Hardware stack levels used:    1
 19661 ;; Hardware stack levels required when called:    6
 19662 ;; This function calls:
 19663 ;;		_CC2500_WriteCommand
 19664 ;; This function is called by:
 19665 ;;		_CC2500_PowerOnInitial
 19666 ;; This function uses a non-reentrant model
 19667 ;;
 19668                           
 19669                           
 19670                           ;psect for function _CC2500_ClearRXFIFO
 19671  2399                     _CC2500_ClearRXFIFO:	
 19672                           
 19673                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19674                           
 19675                           ;incstack = 0
 19676                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19677  2399  303A               	movlw	58
 19678  239A  31A5  253C         	fcall	_CC2500_WriteCommand
 19679  239C  0008               	return
 19680  239D                     __end_of_CC2500_ClearRXFIFO:	
 19681                           
 19682                           	psect	text132
 19683  253C                     __ptext132:	
 19684 ;; *************** function _CC2500_WriteCommand *****************
 19685 ;; Defined at:
 19686 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19687 ;; Parameters:    Size  Location     Type
 19688 ;;  command         1    wreg     unsigned char 
 19689 ;; Auto vars:     Size  Location     Type
 19690 ;;  command         1    3[BANK0 ] unsigned char 
 19691 ;; Return value:  Size  Location     Type
 19692 ;;		None               void
 19693 ;; Registers used:
 19694 ;;		wreg, status,2, status,0, pclath, cstack
 19695 ;; Tracked objects:
 19696 ;;		On entry : 0/0
 19697 ;;		On exit  : 0/0
 19698 ;;		Unchanged: 0/0
 19699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19704 ;;Total ram usage:        2 bytes
 19705 ;; Hardware stack levels used:    1
 19706 ;; Hardware stack levels required when called:    5
 19707 ;; This function calls:
 19708 ;;		_CC2500_WriteByte
 19709 ;; This function is called by:
 19710 ;;		_CC2500_TxData
 19711 ;;		_CC2500_RxData
 19712 ;;		_CC2500_ClearTXFIFO
 19713 ;;		_CC2500_ClearRXFIFO
 19714 ;;		_CC2500_FrequencyCabr
 19715 ;;		_CC2500_SIDLEMode
 19716 ;;		_setRF_Main
 19717 ;;		_setRF_Enable
 19718 ;;		_RF_RxDisable
 19719 ;; This function uses a non-reentrant model
 19720 ;;
 19721                           
 19722                           
 19723                           ;psect for function _CC2500_WriteCommand
 19724  253C                     _CC2500_WriteCommand:	
 19725                           
 19726                           ;incstack = 0
 19727                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19728                           ;CC2500_WriteCommand@command stored from wreg
 19729  253C  0020               	movlb	0	; select bank0
 19730  253D  00A3               	movwf	CC2500_WriteCommand@command
 19731                           
 19732                           ;CC2500_B1.c: 255: RC4=0;
 19733  253E  120E               	bcf	14,4	;volatile
 19734                           
 19735                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19736  253F  0823               	movf	CC2500_WriteCommand@command,w
 19737  2540  00A2               	movwf	??_CC2500_WriteCommand
 19738  2541  0822               	movf	??_CC2500_WriteCommand,w
 19739  2542  0021               	movlb	1	; select bank1
 19740  2543  00BF               	movwf	_SPI0Buffer^(0+128)
 19741  2544                     l397:	
 19742                           ;CC2500_B1.c: 258: while(RC2==1);
 19743                           
 19744  2544  0020               	movlb	0	; select bank0
 19745  2545  190E               	btfsc	14,2	;volatile
 19746  2546  2D44               	goto	l397
 19747                           
 19748                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19749  2547  31A6  26B4         	fcall	_CC2500_WriteByte
 19750                           
 19751                           ;CC2500_B1.c: 261: RC4=1;
 19752  2549  0020               	movlb	0	; select bank0
 19753  254A  160E               	bsf	14,4	;volatile
 19754  254B  0008               	return
 19755  254C                     __end_of_CC2500_WriteCommand:	
 19756                           
 19757                           	psect	text133
 19758  26B4                     __ptext133:	
 19759 ;; *************** function _CC2500_WriteByte *****************
 19760 ;; Defined at:
 19761 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19762 ;; Parameters:    Size  Location     Type
 19763 ;;		None
 19764 ;; Auto vars:     Size  Location     Type
 19765 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19766 ;; Return value:  Size  Location     Type
 19767 ;;		None               void
 19768 ;; Registers used:
 19769 ;;		wreg, status,2, status,0
 19770 ;; Tracked objects:
 19771 ;;		On entry : 0/0
 19772 ;;		On exit  : 0/0
 19773 ;;		Unchanged: 0/0
 19774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19779 ;;Total ram usage:        2 bytes
 19780 ;; Hardware stack levels used:    1
 19781 ;; Hardware stack levels required when called:    4
 19782 ;; This function calls:
 19783 ;;		Nothing
 19784 ;; This function is called by:
 19785 ;;		_CC2500_TxData
 19786 ;;		_CC2500_RxData
 19787 ;;		_CC2500_PowerRST
 19788 ;;		_CC2500_WriteREG
 19789 ;;		_CC2500_WriteCommand
 19790 ;;		_CC2500_ReadStatus
 19791 ;;		_CC2500_ReadREG
 19792 ;; This function uses a non-reentrant model
 19793 ;;
 19794                           
 19795                           
 19796                           ;psect for function _CC2500_WriteByte
 19797  26B4                     _CC2500_WriteByte:	
 19798                           
 19799                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19800                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19801                           
 19802                           ;incstack = 0
 19803                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19804  26B4  0020               	movlb	0	; select bank0
 19805  26B5  01A1               	clrf	CC2500_WriteByte@loop_a
 19806  26B6                     L16:	
 19807  26B6  3008               	movlw	8
 19808  26B7  0221               	subwf	CC2500_WriteByte@loop_a,w
 19809  26B8  1803               	btfsc	3,0
 19810  26B9  0008               	return
 19811                           
 19812                           ;CC2500_B1.c: 197: {
 19813                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19814  26BA  0021               	movlb	1	; select bank1
 19815  26BB  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19816  26BC  2EC0               	goto	l373
 19817                           
 19818                           ;CC2500_B1.c: 199: RC0=1;
 19819  26BD  0020               	movlb	0	; select bank0
 19820  26BE  140E               	bsf	14,0	;volatile
 19821  26BF  2EC2               	goto	l374
 19822  26C0                     l373:	
 19823                           
 19824                           ;CC2500_B1.c: 200: else
 19825                           ;CC2500_B1.c: 201: RC0=0;
 19826  26C0  0020               	movlb	0	; select bank0
 19827  26C1  100E               	bcf	14,0	;volatile
 19828  26C2                     l374:	
 19829                           
 19830                           ;CC2500_B1.c: 202: RC1=1;
 19831  26C2  148E               	bsf	14,1	;volatile
 19832                           
 19833                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19834  26C3  1003               	clrc
 19835  26C4  0021               	movlb	1	; select bank1
 19836  26C5  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19837                           
 19838                           ;CC2500_B1.c: 204: RC1=0;
 19839  26C6  0020               	movlb	0	; select bank0
 19840  26C7  108E               	bcf	14,1	;volatile
 19841  26C8  3001               	movlw	1
 19842  26C9  00A0               	movwf	??_CC2500_WriteByte
 19843  26CA  0820               	movf	??_CC2500_WriteByte,w
 19844  26CB  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19845  26CC  2EB6               	goto	L16
 19846  26CD                     __end_of_CC2500_WriteByte:	
 19847                           
 19848                           	psect	text134
 19849  0913                     __ptext134:	
 19850 ;; *************** function _Buzzer_Main *****************
 19851 ;; Defined at:
 19852 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 19853 ;; Parameters:    Size  Location     Type
 19854 ;;		None
 19855 ;; Auto vars:     Size  Location     Type
 19856 ;;		None
 19857 ;; Return value:  Size  Location     Type
 19858 ;;		None               void
 19859 ;; Registers used:
 19860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19861 ;; Tracked objects:
 19862 ;;		On entry : 0/0
 19863 ;;		On exit  : 0/0
 19864 ;;		Unchanged: 0/0
 19865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19869 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19870 ;;Total ram usage:        4 bytes
 19871 ;; Hardware stack levels used:    1
 19872 ;; Hardware stack levels required when called:    4
 19873 ;; This function calls:
 19874 ;;		Nothing
 19875 ;; This function is called by:
 19876 ;;		_main
 19877 ;; This function uses a non-reentrant model
 19878 ;;
 19879                           
 19880                           
 19881                           ;psect for function _Buzzer_Main
 19882  0913                     _Buzzer_Main:	
 19883                           
 19884                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19885                           
 19886                           ;incstack = 0
 19887                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19888  0913  0878               	movf	_Buz,w
 19889  0914  0086               	movwf	6
 19890  0915  3001               	movlw	1	; select bank2/3
 19891  0916  0087               	movwf	7
 19892  0917  1281               	bcf	1,5
 19893  0918  0020               	movlb	0	; select bank0
 19894  0919  198D               	btfsc	13,3	;volatile
 19895  091A  1681               	bsf	1,5
 19896                           
 19897                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19898  091B  0878               	movf	_Buz,w
 19899  091C  0086               	movwf	6
 19900  091D  3001               	movlw	1	; select bank2/3
 19901  091E  0087               	movwf	7
 19902  091F  1C81               	btfss	1,1
 19903  0920  0008               	return
 19904                           
 19905                           ;Buzzer_B1.c: 58: {
 19906                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19907  0921  0878               	movf	_Buz,w
 19908  0922  3E06               	addlw	6
 19909  0923  0086               	movwf	6
 19910  0924  3001               	movlw	1	; select bank2/3
 19911  0925  0087               	movwf	7
 19912  0926  3F40               	moviw [0]fsr1
 19913  0927  0020               	movlb	0	; select bank0
 19914  0928  00A0               	movwf	??_Buzzer_Main
 19915  0929  3F41               	moviw [1]fsr1
 19916  092A  00A1               	movwf	??_Buzzer_Main+1
 19917  092B  0A78               	incf	_Buz,w
 19918  092C  0086               	movwf	6
 19919  092D  3001               	movlw	1	; select bank2/3
 19920  092E  0087               	movwf	7
 19921  092F  3F40               	moviw [0]fsr1
 19922  0930  00A2               	movwf	??_Buzzer_Main+2
 19923  0931  3F41               	moviw [1]fsr1
 19924  0932  00A3               	movwf	??_Buzzer_Main+3
 19925  0933  0821               	movf	??_Buzzer_Main+1,w
 19926  0934  0223               	subwf	??_Buzzer_Main+3,w
 19927  0935  1D03               	skipz
 19928  0936  2939               	goto	u7105
 19929  0937  0820               	movf	??_Buzzer_Main,w
 19930  0938  0222               	subwf	??_Buzzer_Main+2,w
 19931  0939                     u7105:	
 19932  0939  1C03               	skipc
 19933  093A  0008               	return
 19934                           
 19935                           ;Buzzer_B1.c: 61: {
 19936                           ;Buzzer_B1.c: 62: Buz->Time=0;
 19937  093B  0A78               	incf	_Buz,w
 19938  093C  0086               	movwf	6
 19939  093D  3001               	movlw	1	; select bank2/3
 19940  093E  0087               	movwf	7
 19941  093F  3000               	movlw	0
 19942  0940  3FC0               	movwi [0]fsr1
 19943  0941  3FC1               	movwi [1]fsr1
 19944                           
 19945                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 19946  0942  0878               	movf	_Buz,w
 19947  0943  0086               	movwf	6
 19948  0944  3001               	movlw	1	; select bank2/3
 19949  0945  0087               	movwf	7
 19950  0946  1A81               	btfsc	1,5
 19951  0947  29AD               	goto	l7964
 19952                           
 19953                           ;Buzzer_B1.c: 64: {
 19954                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 19955  0948  0878               	movf	_Buz,w
 19956  0949  3E03               	addlw	3
 19957  094A  0086               	movwf	6
 19958  094B  3001               	movlw	1	; select bank2/3
 19959  094C  0087               	movwf	7
 19960  094D  0881               	movf	1,f
 19961  094E  1D03               	skipz
 19962  094F  29A6               	goto	l7960
 19963                           
 19964                           ;Buzzer_B1.c: 66: {
 19965                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 19966  0950  0878               	movf	_Buz,w
 19967  0951  0086               	movwf	6
 19968  0952  3001               	movlw	1	; select bank2/3
 19969  0953  0087               	movwf	7
 19970  0954  1D81               	btfss	1,3
 19971  0955  2978               	goto	l7952
 19972                           
 19973                           ;Buzzer_B1.c: 68: {
 19974                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 19975  0956  0878               	movf	_Buz,w
 19976  0957  0086               	movwf	6
 19977  0958  3001               	movlw	1	; select bank2/3
 19978  0959  0087               	movwf	7
 19979  095A  1181               	bcf	1,3
 19980                           
 19981                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 19982  095B  0878               	movf	_Buz,w
 19983  095C  3E04               	addlw	4
 19984  095D  0086               	movwf	6
 19985  095E  3001               	movlw	1	; select bank2/3
 19986  095F  0087               	movwf	7
 19987  0960  0801               	movf	1,w
 19988  0961  00A0               	movwf	??_Buzzer_Main
 19989  0962  0878               	movf	_Buz,w
 19990  0963  3E03               	addlw	3
 19991  0964  0086               	movwf	6
 19992  0965  3001               	movlw	1	; select bank2/3
 19993  0966  0087               	movwf	7
 19994  0967  0820               	movf	??_Buzzer_Main,w
 19995  0968  0081               	movwf	1
 19996                           
 19997                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 19998  0969  0878               	movf	_Buz,w
 19999  096A  3E08               	addlw	8
 20000  096B  0086               	movwf	6
 20001  096C  3001               	movlw	1	; select bank2/3
 20002  096D  0087               	movwf	7
 20003  096E  0878               	movf	_Buz,w
 20004  096F  3E06               	addlw	6
 20005  0970  0084               	movwf	4
 20006  0971  3001               	movlw	1	; select bank2/3
 20007  0972  0085               	movwf	5
 20008  0973  3F40               	moviw [0]fsr1
 20009  0974  3F80               	movwi [0]fsr0
 20010  0975  3F41               	moviw [1]fsr1
 20011  0976  3F81               	movwi [1]fsr0
 20012                           
 20013                           ;Buzzer_B1.c: 72: }
 20014  0977  0008               	return
 20015  0978                     l7952:	
 20016                           
 20017                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20018  0978  0878               	movf	_Buz,w
 20019  0979  0086               	movwf	6
 20020  097A  3001               	movlw	1	; select bank2/3
 20021  097B  0087               	movwf	7
 20022  097C  1E01               	btfss	1,4
 20023  097D  29A0               	goto	l7958
 20024                           
 20025                           ;Buzzer_B1.c: 74: {
 20026                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20027  097E  0878               	movf	_Buz,w
 20028  097F  0086               	movwf	6
 20029  0980  3001               	movlw	1	; select bank2/3
 20030  0981  0087               	movwf	7
 20031  0982  1201               	bcf	1,4
 20032                           
 20033                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20034  0983  0878               	movf	_Buz,w
 20035  0984  3E05               	addlw	5
 20036  0985  0086               	movwf	6
 20037  0986  3001               	movlw	1	; select bank2/3
 20038  0987  0087               	movwf	7
 20039  0988  0801               	movf	1,w
 20040  0989  00A0               	movwf	??_Buzzer_Main
 20041  098A  0878               	movf	_Buz,w
 20042  098B  3E03               	addlw	3
 20043  098C  0086               	movwf	6
 20044  098D  3001               	movlw	1	; select bank2/3
 20045  098E  0087               	movwf	7
 20046  098F  0820               	movf	??_Buzzer_Main,w
 20047  0990  0081               	movwf	1
 20048                           
 20049                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20050  0991  0878               	movf	_Buz,w
 20051  0992  3E0A               	addlw	10
 20052  0993  0086               	movwf	6
 20053  0994  3001               	movlw	1	; select bank2/3
 20054  0995  0087               	movwf	7
 20055  0996  0878               	movf	_Buz,w
 20056  0997  3E06               	addlw	6
 20057  0998  0084               	movwf	4
 20058  0999  3001               	movlw	1	; select bank2/3
 20059  099A  0085               	movwf	5
 20060  099B  3F40               	moviw [0]fsr1
 20061  099C  3F80               	movwi [0]fsr0
 20062  099D  3F41               	moviw [1]fsr1
 20063  099E  3F81               	movwi [1]fsr0
 20064                           
 20065                           ;Buzzer_B1.c: 78: }
 20066  099F  0008               	return
 20067  09A0                     l7958:	
 20068                           
 20069                           ;Buzzer_B1.c: 79: else
 20070                           ;Buzzer_B1.c: 80: {
 20071                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20072  09A0  0878               	movf	_Buz,w
 20073  09A1  0086               	movwf	6
 20074  09A2  3001               	movlw	1	; select bank2/3
 20075  09A3  0087               	movwf	7
 20076  09A4  1081               	bcf	1,1
 20077                           
 20078                           ;Buzzer_B1.c: 82: }
 20079                           ;Buzzer_B1.c: 83: }
 20080  09A5  0008               	return
 20081  09A6                     l7960:	
 20082                           
 20083                           ;Buzzer_B1.c: 84: else
 20084                           ;Buzzer_B1.c: 85: {
 20085                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20086  09A6  0878               	movf	_Buz,w
 20087  09A7  0086               	movwf	6
 20088  09A8  3001               	movlw	1	; select bank2/3
 20089  09A9  0087               	movwf	7
 20090  09AA  1681               	bsf	1,5
 20091                           
 20092                           ;Buzzer_B1.c: 88: RB3=1;
 20093  09AB  158D               	bsf	13,3	;volatile
 20094                           
 20095                           ;Buzzer_B1.c: 89: }
 20096                           ;Buzzer_B1.c: 90: }
 20097  09AC  0008               	return
 20098  09AD                     l7964:	
 20099                           
 20100                           ;Buzzer_B1.c: 91: else
 20101                           ;Buzzer_B1.c: 92: {
 20102                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20103  09AD  0878               	movf	_Buz,w
 20104  09AE  0086               	movwf	6
 20105  09AF  3001               	movlw	1	; select bank2/3
 20106  09B0  0087               	movwf	7
 20107  09B1  1281               	bcf	1,5
 20108                           
 20109                           ;Buzzer_B1.c: 95: RB3=0;
 20110  09B2  118D               	bcf	13,3	;volatile
 20111                           
 20112                           ;Buzzer_B1.c: 97: Buz->Count--;
 20113  09B3  0878               	movf	_Buz,w
 20114  09B4  3E03               	addlw	3
 20115  09B5  0086               	movwf	6
 20116  09B6  3001               	movlw	1	; select bank2/3
 20117  09B7  0087               	movwf	7
 20118  09B8  3001               	movlw	1
 20119  09B9  0281               	subwf	1,f
 20120  09BA  0008               	return
 20121  09BB                     __end_of_Buzzer_Main:	
 20122                           
 20123                           	psect	text135
 20124  2423                     __ptext135:	
 20125 ;; *************** function _Buzzer_Initialization *****************
 20126 ;; Defined at:
 20127 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20128 ;; Parameters:    Size  Location     Type
 20129 ;;		None
 20130 ;; Auto vars:     Size  Location     Type
 20131 ;;		None
 20132 ;; Return value:  Size  Location     Type
 20133 ;;		None               void
 20134 ;; Registers used:
 20135 ;;		wreg, fsr1l, fsr1h
 20136 ;; Tracked objects:
 20137 ;;		On entry : 0/0
 20138 ;;		On exit  : 0/0
 20139 ;;		Unchanged: 0/0
 20140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20145 ;;Total ram usage:        1 bytes
 20146 ;; Hardware stack levels used:    1
 20147 ;; Hardware stack levels required when called:    4
 20148 ;; This function calls:
 20149 ;;		Nothing
 20150 ;; This function is called by:
 20151 ;;		_main
 20152 ;; This function uses a non-reentrant model
 20153 ;;
 20154                           
 20155                           
 20156                           ;psect for function _Buzzer_Initialization
 20157  2423                     _Buzzer_Initialization:	
 20158                           
 20159                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20160                           
 20161                           ;incstack = 0
 20162                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20163  2423  3048               	movlw	_Buz1& (0+255)
 20164  2424  0020               	movlb	0	; select bank0
 20165  2425  00A0               	movwf	??_Buzzer_Initialization
 20166  2426  0820               	movf	??_Buzzer_Initialization,w
 20167  2427  00F8               	movwf	_Buz
 20168                           
 20169                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20170  2428  0878               	movf	_Buz,w
 20171  2429  0086               	movwf	6
 20172  242A  3001               	movlw	1	; select bank2/3
 20173  242B  0087               	movwf	7
 20174  242C  1401               	bsf	1,0
 20175  242D  0008               	return
 20176  242E                     __end_of_Buzzer_Initialization:	
 20177                           
 20178                           	psect	intentry
 20179  0004                     __pintentry:	
 20180 ;; *************** function _ISR *****************
 20181 ;; Defined at:
 20182 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20183 ;; Parameters:    Size  Location     Type
 20184 ;;		None
 20185 ;; Auto vars:     Size  Location     Type
 20186 ;;		None
 20187 ;; Return value:  Size  Location     Type
 20188 ;;		None               void
 20189 ;; Registers used:
 20190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20191 ;; Tracked objects:
 20192 ;;		On entry : 0/0
 20193 ;;		On exit  : 0/0
 20194 ;;		Unchanged: 0/0
 20195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20199 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20200 ;;Total ram usage:        1 bytes
 20201 ;; Hardware stack levels used:    1
 20202 ;; Hardware stack levels required when called:    3
 20203 ;; This function calls:
 20204 ;;		_INT_ISR
 20205 ;;		_IOC_ISR
 20206 ;;		_TMR0_ISR
 20207 ;; This function is called by:
 20208 ;;		Interrupt level 1
 20209 ;; This function uses a non-reentrant model
 20210 ;;
 20211                           
 20212  0004                     _ISR:	
 20213                           
 20214                           ;incstack = 0
 20215                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20216  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20217  0005  3180               	pagesel	$
 20218  0006  0020               	movlb	0	; select bank0
 20219  0007  087F               	movf	127,w
 20220  0008  00F7               	movwf	??_ISR
 20221                           
 20222                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 20223  0009  3198  20ED  3180   	fcall	_IOC_ISR
 20224                           
 20225                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 20226  000C  3180  2059  3180   	fcall	_TMR0_ISR
 20227                           
 20228                           ;MCU_16f1518_B1.c: 62: ;;
 20229                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 20230  000F  31A4  2492         	fcall	_INT_ISR
 20231  0011  0877               	movf	??_ISR,w
 20232  0012  0020               	movlb	0	; select bank0
 20233  0013  00FF               	movwf	127
 20234  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20235  0015  0009               	retfie
 20236  0016                     __end_of_ISR:	
 20237                           
 20238                           	psect	text137
 20239  0059                     __ptext137:	
 20240 ;; *************** function _TMR0_ISR *****************
 20241 ;; Defined at:
 20242 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20243 ;; Parameters:    Size  Location     Type
 20244 ;;		None
 20245 ;; Auto vars:     Size  Location     Type
 20246 ;;		None
 20247 ;; Return value:  Size  Location     Type
 20248 ;;		None               void
 20249 ;; Registers used:
 20250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20251 ;; Tracked objects:
 20252 ;;		On entry : 0/0
 20253 ;;		On exit  : 0/0
 20254 ;;		Unchanged: 0/0
 20255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20258 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20260 ;;Total ram usage:        4 bytes
 20261 ;; Hardware stack levels used:    1
 20262 ;; Hardware stack levels required when called:    1
 20263 ;; This function calls:
 20264 ;;		i1_setLoad_StatusOff
 20265 ;; This function is called by:
 20266 ;;		_ISR
 20267 ;; This function uses a non-reentrant model
 20268 ;;
 20269                           
 20270                           
 20271                           ;psect for function _TMR0_ISR
 20272  0059                     _TMR0_ISR:	
 20273                           
 20274                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 20275                           
 20276                           ;incstack = 0
 20277                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20278  0059  1E8B               	btfss	11,5	;volatile
 20279  005A  0008               	return
 20280  005B  1D0B               	btfss	11,2	;volatile
 20281  005C  0008               	return
 20282                           
 20283                           ;MCU_16f1518_B1.c: 85: {
 20284                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 20285  005D  30A6               	movlw	166
 20286  005E  0020               	movlb	0	; select bank0
 20287  005F  0095               	movwf	21	;volatile
 20288                           
 20289                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 20290  0060  110B               	bcf	11,2	;volatile
 20291                           
 20292                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1
      +                          ; ;; } } }
 20293  0061  0879               	movf	_DimmerLights11,w
 20294  0062  0086               	movwf	6
 20295  0063  3001               	movlw	1	; select bank2/3
 20296  0064  0087               	movwf	7
 20297  0065  1C01               	btfss	1,0
 20298  0066  28B1               	goto	i1l8350
 20299  0067  3001               	movlw	1
 20300  0068  00F3               	movwf	??_TMR0_ISR
 20301  0069  0879               	movf	_DimmerLights11,w
 20302  006A  3E03               	addlw	3
 20303  006B  0086               	movwf	6
 20304  006C  3001               	movlw	1	; select bank2/3
 20305  006D  0087               	movwf	7
 20306  006E  0873               	movf	??_TMR0_ISR,w
 20307  006F  0781               	addwf	1,f
 20308  0070  0021               	movlb	1	; select bank1
 20309  0071  0839               	movf	_Dimmer^(0+128),w
 20310  0072  3E02               	addlw	2
 20311  0073  0086               	movwf	6
 20312  0074  0187               	clrf	7
 20313  0075  0801               	movf	1,w
 20314  0076  00F3               	movwf	??_TMR0_ISR
 20315  0077  01F4               	clrf	??_TMR0_ISR+1
 20316  0078  09F3               	comf	??_TMR0_ISR,f
 20317  0079  09F4               	comf	??_TMR0_ISR+1,f
 20318  007A  0AF3               	incf	??_TMR0_ISR,f
 20319  007B  1903               	skipnz
 20320  007C  0AF4               	incf	??_TMR0_ISR+1,f
 20321  007D  0879               	movf	_DimmerLights11,w
 20322  007E  3E04               	addlw	4
 20323  007F  0086               	movwf	6
 20324  0080  3001               	movlw	1	; select bank2/3
 20325  0081  0087               	movwf	7
 20326  0082  0801               	movf	1,w
 20327  0083  0773               	addwf	??_TMR0_ISR,w
 20328  0084  00F5               	movwf	??_TMR0_ISR+2
 20329  0085  0874               	movf	??_TMR0_ISR+1,w
 20330  0086  1803               	skipnc
 20331  0087  0A74               	incf	??_TMR0_ISR+1,w
 20332  0088  00F6               	movwf	??_TMR0_ISR+3
 20333  0089  0879               	movf	_DimmerLights11,w
 20334  008A  3E03               	addlw	3
 20335  008B  0086               	movwf	6
 20336  008C  3001               	movlw	1	; select bank2/3
 20337  008D  0087               	movwf	7
 20338  008E  0876               	movf	??_TMR0_ISR+3,w
 20339  008F  3A80               	xorlw	128
 20340  0090  3C80               	sublw	128
 20341  0091  1D03               	skipz
 20342  0092  2895               	goto	u770_25
 20343  0093  0875               	movf	??_TMR0_ISR+2,w
 20344  0094  0201               	subwf	1,w
 20345  0095                     u770_25:	
 20346  0095  1C03               	skipc
 20347  0096  29EB               	goto	i1l8416
 20348  0097  0879               	movf	_DimmerLights11,w
 20349  0098  3E03               	addlw	3
 20350  0099  0086               	movwf	6
 20351  009A  3001               	movlw	1	; select bank2/3
 20352  009B  0087               	movwf	7
 20353  009C  0181               	clrf	1
 20354  009D  0879               	movf	_DimmerLights11,w
 20355  009E  0086               	movwf	6
 20356  009F  3001               	movlw	1	; select bank2/3
 20357  00A0  0087               	movwf	7
 20358  00A1  1001               	bcf	1,0
 20359  00A2  0879               	movf	_DimmerLights11,w
 20360  00A3  3E07               	addlw	7
 20361  00A4  0086               	movwf	6
 20362  00A5  3001               	movlw	1	; select bank2/3
 20363  00A6  0087               	movwf	7
 20364  00A7  1401               	bsf	1,0
 20365  00A8  0879               	movf	_DimmerLights11,w
 20366  00A9  0086               	movwf	6
 20367  00AA  3001               	movlw	1	; select bank2/3
 20368  00AB  0087               	movwf	7
 20369  00AC  1F01               	btfss	1,6
 20370  00AD  29EB               	goto	i1l8416
 20371  00AE  0020               	movlb	0	; select bank0
 20372  00AF  178C               	bsf	12,7	;volatile
 20373  00B0  29EB               	goto	i1l8416
 20374  00B1                     i1l8350:	
 20375  00B1  0879               	movf	_DimmerLights11,w
 20376  00B2  3E07               	addlw	7
 20377  00B3  0086               	movwf	6
 20378  00B4  3001               	movlw	1	; select bank2/3
 20379  00B5  0087               	movwf	7
 20380  00B6  1C01               	btfss	1,0
 20381  00B7  29B6               	goto	i1l8408
 20382  00B8  0879               	movf	_DimmerLights11,w
 20383  00B9  3E07               	addlw	7
 20384  00BA  0086               	movwf	6
 20385  00BB  3001               	movlw	1	; select bank2/3
 20386  00BC  0087               	movwf	7
 20387  00BD  1001               	bcf	1,0
 20388  00BE  0879               	movf	_DimmerLights11,w
 20389  00BF  0086               	movwf	6
 20390  00C0  3001               	movlw	1	; select bank2/3
 20391  00C1  0087               	movwf	7
 20392  00C2  1C81               	btfss	1,1
 20393  00C3  29B6               	goto	i1l8408
 20394  00C4  3001               	movlw	1
 20395  00C5  00F3               	movwf	??_TMR0_ISR
 20396  00C6  0A79               	incf	_DimmerLights11,w
 20397  00C7  0086               	movwf	6
 20398  00C8  3001               	movlw	1	; select bank2/3
 20399  00C9  0087               	movwf	7
 20400  00CA  0873               	movf	??_TMR0_ISR,w
 20401  00CB  0781               	addwf	1,f
 20402  00CC  0A79               	incf	_DimmerLights11,w
 20403  00CD  0086               	movwf	6
 20404  00CE  3001               	movlw	1	; select bank2/3
 20405  00CF  0087               	movwf	7
 20406  00D0  0879               	movf	_DimmerLights11,w
 20407  00D1  3E02               	addlw	2
 20408  00D2  0084               	movwf	4
 20409  00D3  3001               	movlw	1	; select bank2/3
 20410  00D4  0085               	movwf	5
 20411  00D5  0800               	movf	0,w
 20412  00D6  0201               	subwf	1,w
 20413  00D7  1C03               	skipc
 20414  00D8  29B6               	goto	i1l8408
 20415  00D9  0A79               	incf	_DimmerLights11,w
 20416  00DA  0086               	movwf	6
 20417  00DB  3001               	movlw	1	; select bank2/3
 20418  00DC  0087               	movwf	7
 20419  00DD  0181               	clrf	1
 20420  00DE  0879               	movf	_DimmerLights11,w
 20421  00DF  0086               	movwf	6
 20422  00E0  3001               	movlw	1	; select bank2/3
 20423  00E1  0087               	movwf	7
 20424  00E2  1D81               	btfss	1,3
 20425  00E3  291A               	goto	i1l8376
 20426  00E4  0879               	movf	_DimmerLights11,w
 20427  00E5  0086               	movwf	6
 20428  00E6  3001               	movlw	1	; select bank2/3
 20429  00E7  0087               	movwf	7
 20430  00E8  1A01               	btfsc	1,4
 20431  00E9  2901               	goto	i1l8370
 20432  00EA  0879               	movf	_DimmerLights11,w
 20433  00EB  3E04               	addlw	4
 20434  00EC  0086               	movwf	6
 20435  00ED  3001               	movlw	1	; select bank2/3
 20436  00EE  0087               	movwf	7
 20437  00EF  303D               	movlw	61
 20438  00F0  0201               	subwf	1,w
 20439  00F1  1C03               	skipc
 20440  00F2  28FB               	goto	i1l8368
 20441  00F3  0879               	movf	_DimmerLights11,w
 20442  00F4  3E04               	addlw	4
 20443  00F5  0086               	movwf	6
 20444  00F6  3001               	movlw	1	; select bank2/3
 20445  00F7  0087               	movwf	7
 20446  00F8  3001               	movlw	1
 20447  00F9  0281               	subwf	1,f
 20448  00FA  29B6               	goto	i1l8408
 20449  00FB                     i1l8368:	
 20450  00FB  0879               	movf	_DimmerLights11,w
 20451  00FC  0086               	movwf	6
 20452  00FD  3001               	movlw	1	; select bank2/3
 20453  00FE  0087               	movwf	7
 20454  00FF  1601               	bsf	1,4
 20455  0100  29B6               	goto	i1l8408
 20456  0101                     i1l8370:	
 20457  0101  0879               	movf	_DimmerLights11,w
 20458  0102  3E04               	addlw	4
 20459  0103  0086               	movwf	6
 20460  0104  3001               	movlw	1	; select bank2/3
 20461  0105  0087               	movwf	7
 20462  0106  3078               	movlw	120
 20463  0107  0201               	subwf	1,w
 20464  0108  1803               	skipnc
 20465  0109  2914               	goto	i1l8374
 20466  010A  3001               	movlw	1
 20467  010B  00F3               	movwf	??_TMR0_ISR
 20468  010C  0879               	movf	_DimmerLights11,w
 20469  010D  3E04               	addlw	4
 20470  010E  0086               	movwf	6
 20471  010F  3001               	movlw	1	; select bank2/3
 20472  0110  0087               	movwf	7
 20473  0111  0873               	movf	??_TMR0_ISR,w
 20474  0112  0781               	addwf	1,f
 20475  0113  29B6               	goto	i1l8408
 20476  0114                     i1l8374:	
 20477  0114  0879               	movf	_DimmerLights11,w
 20478  0115  0086               	movwf	6
 20479  0116  3001               	movlw	1	; select bank2/3
 20480  0117  0087               	movwf	7
 20481  0118  1201               	bcf	1,4
 20482  0119  29B6               	goto	i1l8408
 20483  011A                     i1l8376:	
 20484  011A  0879               	movf	_DimmerLights11,w
 20485  011B  0086               	movwf	6
 20486  011C  3001               	movlw	1	; select bank2/3
 20487  011D  0087               	movwf	7
 20488  011E  1D01               	btfss	1,2
 20489  011F  2961               	goto	i1l8390
 20490  0120  0879               	movf	_DimmerLights11,w
 20491  0121  3E05               	addlw	5
 20492  0122  0086               	movwf	6
 20493  0123  3001               	movlw	1	; select bank2/3
 20494  0124  0087               	movwf	7
 20495  0125  0879               	movf	_DimmerLights11,w
 20496  0126  3E04               	addlw	4
 20497  0127  0084               	movwf	4
 20498  0128  3001               	movlw	1	; select bank2/3
 20499  0129  0085               	movwf	5
 20500  012A  0800               	movf	0,w
 20501  012B  0201               	subwf	1,w
 20502  012C  1803               	skipnc
 20503  012D  2936               	goto	i1l8382
 20504  012E  0879               	movf	_DimmerLights11,w
 20505  012F  3E04               	addlw	4
 20506  0130  0086               	movwf	6
 20507  0131  3001               	movlw	1	; select bank2/3
 20508  0132  0087               	movwf	7
 20509  0133  3001               	movlw	1
 20510  0134  0281               	subwf	1,f
 20511  0135  294D               	goto	i1l8386
 20512  0136                     i1l8382:	
 20513  0136  0879               	movf	_DimmerLights11,w
 20514  0137  3E04               	addlw	4
 20515  0138  0086               	movwf	6
 20516  0139  3001               	movlw	1	; select bank2/3
 20517  013A  0087               	movwf	7
 20518  013B  0879               	movf	_DimmerLights11,w
 20519  013C  3E05               	addlw	5
 20520  013D  0084               	movwf	4
 20521  013E  3001               	movlw	1	; select bank2/3
 20522  013F  0085               	movwf	5
 20523  0140  0800               	movf	0,w
 20524  0141  0201               	subwf	1,w
 20525  0142  1803               	skipnc
 20526  0143  294D               	goto	i1l8386
 20527  0144  3001               	movlw	1
 20528  0145  00F3               	movwf	??_TMR0_ISR
 20529  0146  0879               	movf	_DimmerLights11,w
 20530  0147  3E04               	addlw	4
 20531  0148  0086               	movwf	6
 20532  0149  3001               	movlw	1	; select bank2/3
 20533  014A  0087               	movwf	7
 20534  014B  0873               	movf	??_TMR0_ISR,w
 20535  014C  0781               	addwf	1,f
 20536  014D                     i1l8386:	
 20537  014D  0879               	movf	_DimmerLights11,w
 20538  014E  3E05               	addlw	5
 20539  014F  0086               	movwf	6
 20540  0150  3001               	movlw	1	; select bank2/3
 20541  0151  0087               	movwf	7
 20542  0152  0879               	movf	_DimmerLights11,w
 20543  0153  3E04               	addlw	4
 20544  0154  0084               	movwf	4
 20545  0155  3001               	movlw	1	; select bank2/3
 20546  0156  0085               	movwf	5
 20547  0157  0800               	movf	0,w
 20548  0158  0601               	xorwf	1,w
 20549  0159  1D03               	skipz
 20550  015A  29B6               	goto	i1l8408
 20551  015B  0879               	movf	_DimmerLights11,w
 20552  015C  0086               	movwf	6
 20553  015D  3001               	movlw	1	; select bank2/3
 20554  015E  0087               	movwf	7
 20555  015F  1101               	bcf	1,2
 20556  0160  297C               	goto	i1l8396
 20557  0161                     i1l8390:	
 20558  0161  0879               	movf	_DimmerLights11,w
 20559  0162  0086               	movwf	6
 20560  0163  3001               	movlw	1	; select bank2/3
 20561  0164  0087               	movwf	7
 20562  0165  1E81               	btfss	1,5
 20563  0166  2982               	goto	i1l8398
 20564  0167  0879               	movf	_DimmerLights11,w
 20565  0168  3E04               	addlw	4
 20566  0169  0086               	movwf	6
 20567  016A  3001               	movlw	1	; select bank2/3
 20568  016B  0087               	movwf	7
 20569  016C  3001               	movlw	1
 20570  016D  0281               	subwf	1,f
 20571  016E  0879               	movf	_DimmerLights11,w
 20572  016F  3E05               	addlw	5
 20573  0170  0086               	movwf	6
 20574  0171  3001               	movlw	1	; select bank2/3
 20575  0172  0087               	movwf	7
 20576  0173  0879               	movf	_DimmerLights11,w
 20577  0174  3E04               	addlw	4
 20578  0175  0084               	movwf	4
 20579  0176  3001               	movlw	1	; select bank2/3
 20580  0177  0085               	movwf	5
 20581  0178  0800               	movf	0,w
 20582  0179  0201               	subwf	1,w
 20583  017A  1C03               	skipc
 20584  017B  29B6               	goto	i1l8408
 20585  017C                     i1l8396:	
 20586  017C  0879               	movf	_DimmerLights11,w
 20587  017D  0086               	movwf	6
 20588  017E  3001               	movlw	1	; select bank2/3
 20589  017F  0087               	movwf	7
 20590  0180  1081               	bcf	1,1
 20591  0181  29B6               	goto	i1l8408
 20592  0182                     i1l8398:	
 20593  0182  3001               	movlw	1
 20594  0183  00F3               	movwf	??_TMR0_ISR
 20595  0184  0879               	movf	_DimmerLights11,w
 20596  0185  3E04               	addlw	4
 20597  0186  0086               	movwf	6
 20598  0187  3001               	movlw	1	; select bank2/3
 20599  0188  0087               	movwf	7
 20600  0189  0873               	movf	??_TMR0_ISR,w
 20601  018A  0781               	addwf	1,f
 20602  018B  0879               	movf	_DimmerLights11,w
 20603  018C  3E04               	addlw	4
 20604  018D  0086               	movwf	6
 20605  018E  3001               	movlw	1	; select bank2/3
 20606  018F  0087               	movwf	7
 20607  0190  0879               	movf	_DimmerLights11,w
 20608  0191  3E06               	addlw	6
 20609  0192  0084               	movwf	4
 20610  0193  3001               	movlw	1	; select bank2/3
 20611  0194  0085               	movwf	5
 20612  0195  0800               	movf	0,w
 20613  0196  0201               	subwf	1,w
 20614  0197  1C03               	skipc
 20615  0198  29B6               	goto	i1l8408
 20616  0199  0879               	movf	_DimmerLights11,w
 20617  019A  0086               	movwf	6
 20618  019B  3001               	movlw	1	; select bank2/3
 20619  019C  0087               	movwf	7
 20620  019D  1081               	bcf	1,1
 20621  019E  0879               	movf	_DimmerLights11,w
 20622  019F  0086               	movwf	6
 20623  01A0  3001               	movlw	1	; select bank2/3
 20624  01A1  0087               	movwf	7
 20625  01A2  1301               	bcf	1,6
 20626  01A3  0879               	movf	_DimmerLights11,w
 20627  01A4  3E0C               	addlw	12
 20628  01A5  0086               	movwf	6
 20629  01A6  3001               	movlw	1	; select bank2/3
 20630  01A7  0087               	movwf	7
 20631  01A8  1401               	bsf	1,0
 20632  01A9  0021               	movlb	1	; select bank1
 20633  01AA  0839               	movf	_Dimmer^(0+128),w
 20634  01AB  0086               	movwf	6
 20635  01AC  0187               	clrf	7
 20636  01AD  1401               	bsf	1,0
 20637  01AE  0020               	movlb	0	; select bank0
 20638  01AF  118C               	bcf	12,3	;volatile
 20639  01B0  01F1               	clrf	i1setLoad_StatusOff@command
 20640  01B1  0AF1               	incf	i1setLoad_StatusOff@command,f
 20641  01B2  3001               	movlw	1
 20642  01B3  319A  223D  3180   	fcall	i1_setLoad_StatusOff
 20643  01B6                     i1l8408:	
 20644  01B6  0020               	movlb	0	; select bank0
 20645  01B7  1F8C               	btfss	12,7	;volatile
 20646  01B8  29EB               	goto	i1l8416
 20647  01B9  3001               	movlw	1
 20648  01BA  00F3               	movwf	??_TMR0_ISR
 20649  01BB  0879               	movf	_DimmerLights11,w
 20650  01BC  3E08               	addlw	8
 20651  01BD  0086               	movwf	6
 20652  01BE  3001               	movlw	1	; select bank2/3
 20653  01BF  0087               	movwf	7
 20654  01C0  0873               	movf	??_TMR0_ISR,w
 20655  01C1  0781               	addwf	1,f
 20656  01C2  0879               	movf	_DimmerLights11,w
 20657  01C3  3E04               	addlw	4
 20658  01C4  0086               	movwf	6
 20659  01C5  3001               	movlw	1	; select bank2/3
 20660  01C6  0087               	movwf	7
 20661  01C7  0801               	movf	1,w
 20662  01C8  00F3               	movwf	??_TMR0_ISR
 20663  01C9  01F4               	clrf	??_TMR0_ISR+1
 20664  01CA  09F3               	comf	??_TMR0_ISR,f
 20665  01CB  09F4               	comf	??_TMR0_ISR+1,f
 20666  01CC  0AF3               	incf	??_TMR0_ISR,f
 20667  01CD  1903               	skipnz
 20668  01CE  0AF4               	incf	??_TMR0_ISR+1,f
 20669  01CF  0873               	movf	??_TMR0_ISR,w
 20670  01D0  3E78               	addlw	120
 20671  01D1  00F5               	movwf	??_TMR0_ISR+2
 20672  01D2  3000               	movlw	0
 20673  01D3  3D74               	addwfc	??_TMR0_ISR+1,w
 20674  01D4  00F6               	movwf	??_TMR0_ISR+3
 20675  01D5  0879               	movf	_DimmerLights11,w
 20676  01D6  3E08               	addlw	8
 20677  01D7  0086               	movwf	6
 20678  01D8  3001               	movlw	1	; select bank2/3
 20679  01D9  0087               	movwf	7
 20680  01DA  0876               	movf	??_TMR0_ISR+3,w
 20681  01DB  3A80               	xorlw	128
 20682  01DC  3C80               	sublw	128
 20683  01DD  1D03               	skipz
 20684  01DE  29E1               	goto	u787_25
 20685  01DF  0875               	movf	??_TMR0_ISR+2,w
 20686  01E0  0201               	subwf	1,w
 20687  01E1                     u787_25:	
 20688  01E1  1C03               	skipc
 20689  01E2  29EB               	goto	i1l8416
 20690  01E3  0879               	movf	_DimmerLights11,w
 20691  01E4  3E08               	addlw	8
 20692  01E5  0086               	movwf	6
 20693  01E6  3001               	movlw	1	; select bank2/3
 20694  01E7  0087               	movwf	7
 20695  01E8  0181               	clrf	1
 20696  01E9  0020               	movlb	0	; select bank0
 20697  01EA  138C               	bcf	12,7	;volatile
 20698  01EB                     i1l8416:	
 20699                           
 20700                           ;MCU_16f1518_B1.c: 104: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLight
      +                          s22->Count >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count
      +                          =0; DimmerLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=1
      +                          ; } } } el
 20701  01EB  087A               	movf	_DimmerLights22,w
 20702  01EC  0086               	movwf	6
 20703  01ED  3001               	movlw	1	; select bank2/3
 20704  01EE  0087               	movwf	7
 20705  01EF  1C01               	btfss	1,0
 20706  01F0  2A3B               	goto	i1l8430
 20707  01F1  3001               	movlw	1
 20708  01F2  00F3               	movwf	??_TMR0_ISR
 20709  01F3  087A               	movf	_DimmerLights22,w
 20710  01F4  3E03               	addlw	3
 20711  01F5  0086               	movwf	6
 20712  01F6  3001               	movlw	1	; select bank2/3
 20713  01F7  0087               	movwf	7
 20714  01F8  0873               	movf	??_TMR0_ISR,w
 20715  01F9  0781               	addwf	1,f
 20716  01FA  0021               	movlb	1	; select bank1
 20717  01FB  0839               	movf	_Dimmer^(0+128),w
 20718  01FC  3E02               	addlw	2
 20719  01FD  0086               	movwf	6
 20720  01FE  0187               	clrf	7
 20721  01FF  0801               	movf	1,w
 20722  0200  00F3               	movwf	??_TMR0_ISR
 20723  0201  01F4               	clrf	??_TMR0_ISR+1
 20724  0202  09F3               	comf	??_TMR0_ISR,f
 20725  0203  09F4               	comf	??_TMR0_ISR+1,f
 20726  0204  0AF3               	incf	??_TMR0_ISR,f
 20727  0205  1903               	skipnz
 20728  0206  0AF4               	incf	??_TMR0_ISR+1,f
 20729  0207  087A               	movf	_DimmerLights22,w
 20730  0208  3E04               	addlw	4
 20731  0209  0086               	movwf	6
 20732  020A  3001               	movlw	1	; select bank2/3
 20733  020B  0087               	movwf	7
 20734  020C  0801               	movf	1,w
 20735  020D  0773               	addwf	??_TMR0_ISR,w
 20736  020E  00F5               	movwf	??_TMR0_ISR+2
 20737  020F  0874               	movf	??_TMR0_ISR+1,w
 20738  0210  1803               	skipnc
 20739  0211  0A74               	incf	??_TMR0_ISR+1,w
 20740  0212  00F6               	movwf	??_TMR0_ISR+3
 20741  0213  087A               	movf	_DimmerLights22,w
 20742  0214  3E03               	addlw	3
 20743  0215  0086               	movwf	6
 20744  0216  3001               	movlw	1	; select bank2/3
 20745  0217  0087               	movwf	7
 20746  0218  0876               	movf	??_TMR0_ISR+3,w
 20747  0219  3A80               	xorlw	128
 20748  021A  3C80               	sublw	128
 20749  021B  1D03               	skipz
 20750  021C  2A1F               	goto	u789_25
 20751  021D  0875               	movf	??_TMR0_ISR+2,w
 20752  021E  0201               	subwf	1,w
 20753  021F                     u789_25:	
 20754  021F  1C03               	skipc
 20755  0220  2B75               	goto	i1l8496
 20756  0221  087A               	movf	_DimmerLights22,w
 20757  0222  3E03               	addlw	3
 20758  0223  0086               	movwf	6
 20759  0224  3001               	movlw	1	; select bank2/3
 20760  0225  0087               	movwf	7
 20761  0226  0181               	clrf	1
 20762  0227  087A               	movf	_DimmerLights22,w
 20763  0228  0086               	movwf	6
 20764  0229  3001               	movlw	1	; select bank2/3
 20765  022A  0087               	movwf	7
 20766  022B  1001               	bcf	1,0
 20767  022C  087A               	movf	_DimmerLights22,w
 20768  022D  3E07               	addlw	7
 20769  022E  0086               	movwf	6
 20770  022F  3001               	movlw	1	; select bank2/3
 20771  0230  0087               	movwf	7
 20772  0231  1401               	bsf	1,0
 20773  0232  087A               	movf	_DimmerLights22,w
 20774  0233  0086               	movwf	6
 20775  0234  3001               	movlw	1	; select bank2/3
 20776  0235  0087               	movwf	7
 20777  0236  1F01               	btfss	1,6
 20778  0237  2B75               	goto	i1l8496
 20779  0238  0020               	movlb	0	; select bank0
 20780  0239  160D               	bsf	13,4	;volatile
 20781  023A  2B75               	goto	i1l8496
 20782  023B                     i1l8430:	
 20783  023B  087A               	movf	_DimmerLights22,w
 20784  023C  3E07               	addlw	7
 20785  023D  0086               	movwf	6
 20786  023E  3001               	movlw	1	; select bank2/3
 20787  023F  0087               	movwf	7
 20788  0240  1C01               	btfss	1,0
 20789  0241  2B40               	goto	i1l8488
 20790  0242  087A               	movf	_DimmerLights22,w
 20791  0243  3E07               	addlw	7
 20792  0244  0086               	movwf	6
 20793  0245  3001               	movlw	1	; select bank2/3
 20794  0246  0087               	movwf	7
 20795  0247  1001               	bcf	1,0
 20796  0248  087A               	movf	_DimmerLights22,w
 20797  0249  0086               	movwf	6
 20798  024A  3001               	movlw	1	; select bank2/3
 20799  024B  0087               	movwf	7
 20800  024C  1C81               	btfss	1,1
 20801  024D  2B40               	goto	i1l8488
 20802  024E  3001               	movlw	1
 20803  024F  00F3               	movwf	??_TMR0_ISR
 20804  0250  0A7A               	incf	_DimmerLights22,w
 20805  0251  0086               	movwf	6
 20806  0252  3001               	movlw	1	; select bank2/3
 20807  0253  0087               	movwf	7
 20808  0254  0873               	movf	??_TMR0_ISR,w
 20809  0255  0781               	addwf	1,f
 20810  0256  0A7A               	incf	_DimmerLights22,w
 20811  0257  0086               	movwf	6
 20812  0258  3001               	movlw	1	; select bank2/3
 20813  0259  0087               	movwf	7
 20814  025A  087A               	movf	_DimmerLights22,w
 20815  025B  3E02               	addlw	2
 20816  025C  0084               	movwf	4
 20817  025D  3001               	movlw	1	; select bank2/3
 20818  025E  0085               	movwf	5
 20819  025F  0800               	movf	0,w
 20820  0260  0201               	subwf	1,w
 20821  0261  1C03               	skipc
 20822  0262  2B40               	goto	i1l8488
 20823  0263  0A7A               	incf	_DimmerLights22,w
 20824  0264  0086               	movwf	6
 20825  0265  3001               	movlw	1	; select bank2/3
 20826  0266  0087               	movwf	7
 20827  0267  0181               	clrf	1
 20828  0268  087A               	movf	_DimmerLights22,w
 20829  0269  0086               	movwf	6
 20830  026A  3001               	movlw	1	; select bank2/3
 20831  026B  0087               	movwf	7
 20832  026C  1D81               	btfss	1,3
 20833  026D  2AA4               	goto	i1l8456
 20834  026E  087A               	movf	_DimmerLights22,w
 20835  026F  0086               	movwf	6
 20836  0270  3001               	movlw	1	; select bank2/3
 20837  0271  0087               	movwf	7
 20838  0272  1A01               	btfsc	1,4
 20839  0273  2A8B               	goto	i1l8450
 20840  0274  087A               	movf	_DimmerLights22,w
 20841  0275  3E04               	addlw	4
 20842  0276  0086               	movwf	6
 20843  0277  3001               	movlw	1	; select bank2/3
 20844  0278  0087               	movwf	7
 20845  0279  303D               	movlw	61
 20846  027A  0201               	subwf	1,w
 20847  027B  1C03               	skipc
 20848  027C  2A85               	goto	i1l8448
 20849  027D  087A               	movf	_DimmerLights22,w
 20850  027E  3E04               	addlw	4
 20851  027F  0086               	movwf	6
 20852  0280  3001               	movlw	1	; select bank2/3
 20853  0281  0087               	movwf	7
 20854  0282  3001               	movlw	1
 20855  0283  0281               	subwf	1,f
 20856  0284  2B40               	goto	i1l8488
 20857  0285                     i1l8448:	
 20858  0285  087A               	movf	_DimmerLights22,w
 20859  0286  0086               	movwf	6
 20860  0287  3001               	movlw	1	; select bank2/3
 20861  0288  0087               	movwf	7
 20862  0289  1601               	bsf	1,4
 20863  028A  2B40               	goto	i1l8488
 20864  028B                     i1l8450:	
 20865  028B  087A               	movf	_DimmerLights22,w
 20866  028C  3E04               	addlw	4
 20867  028D  0086               	movwf	6
 20868  028E  3001               	movlw	1	; select bank2/3
 20869  028F  0087               	movwf	7
 20870  0290  3078               	movlw	120
 20871  0291  0201               	subwf	1,w
 20872  0292  1803               	skipnc
 20873  0293  2A9E               	goto	i1l8454
 20874  0294  3001               	movlw	1
 20875  0295  00F3               	movwf	??_TMR0_ISR
 20876  0296  087A               	movf	_DimmerLights22,w
 20877  0297  3E04               	addlw	4
 20878  0298  0086               	movwf	6
 20879  0299  3001               	movlw	1	; select bank2/3
 20880  029A  0087               	movwf	7
 20881  029B  0873               	movf	??_TMR0_ISR,w
 20882  029C  0781               	addwf	1,f
 20883  029D  2B40               	goto	i1l8488
 20884  029E                     i1l8454:	
 20885  029E  087A               	movf	_DimmerLights22,w
 20886  029F  0086               	movwf	6
 20887  02A0  3001               	movlw	1	; select bank2/3
 20888  02A1  0087               	movwf	7
 20889  02A2  1201               	bcf	1,4
 20890  02A3  2B40               	goto	i1l8488
 20891  02A4                     i1l8456:	
 20892  02A4  087A               	movf	_DimmerLights22,w
 20893  02A5  0086               	movwf	6
 20894  02A6  3001               	movlw	1	; select bank2/3
 20895  02A7  0087               	movwf	7
 20896  02A8  1D01               	btfss	1,2
 20897  02A9  2AEB               	goto	i1l8470
 20898  02AA  087A               	movf	_DimmerLights22,w
 20899  02AB  3E05               	addlw	5
 20900  02AC  0086               	movwf	6
 20901  02AD  3001               	movlw	1	; select bank2/3
 20902  02AE  0087               	movwf	7
 20903  02AF  087A               	movf	_DimmerLights22,w
 20904  02B0  3E04               	addlw	4
 20905  02B1  0084               	movwf	4
 20906  02B2  3001               	movlw	1	; select bank2/3
 20907  02B3  0085               	movwf	5
 20908  02B4  0800               	movf	0,w
 20909  02B5  0201               	subwf	1,w
 20910  02B6  1803               	skipnc
 20911  02B7  2AC0               	goto	i1l8462
 20912  02B8  087A               	movf	_DimmerLights22,w
 20913  02B9  3E04               	addlw	4
 20914  02BA  0086               	movwf	6
 20915  02BB  3001               	movlw	1	; select bank2/3
 20916  02BC  0087               	movwf	7
 20917  02BD  3001               	movlw	1
 20918  02BE  0281               	subwf	1,f
 20919  02BF  2AD7               	goto	i1l8466
 20920  02C0                     i1l8462:	
 20921  02C0  087A               	movf	_DimmerLights22,w
 20922  02C1  3E04               	addlw	4
 20923  02C2  0086               	movwf	6
 20924  02C3  3001               	movlw	1	; select bank2/3
 20925  02C4  0087               	movwf	7
 20926  02C5  087A               	movf	_DimmerLights22,w
 20927  02C6  3E05               	addlw	5
 20928  02C7  0084               	movwf	4
 20929  02C8  3001               	movlw	1	; select bank2/3
 20930  02C9  0085               	movwf	5
 20931  02CA  0800               	movf	0,w
 20932  02CB  0201               	subwf	1,w
 20933  02CC  1803               	skipnc
 20934  02CD  2AD7               	goto	i1l8466
 20935  02CE  3001               	movlw	1
 20936  02CF  00F3               	movwf	??_TMR0_ISR
 20937  02D0  087A               	movf	_DimmerLights22,w
 20938  02D1  3E04               	addlw	4
 20939  02D2  0086               	movwf	6
 20940  02D3  3001               	movlw	1	; select bank2/3
 20941  02D4  0087               	movwf	7
 20942  02D5  0873               	movf	??_TMR0_ISR,w
 20943  02D6  0781               	addwf	1,f
 20944  02D7                     i1l8466:	
 20945  02D7  087A               	movf	_DimmerLights22,w
 20946  02D8  3E05               	addlw	5
 20947  02D9  0086               	movwf	6
 20948  02DA  3001               	movlw	1	; select bank2/3
 20949  02DB  0087               	movwf	7
 20950  02DC  087A               	movf	_DimmerLights22,w
 20951  02DD  3E04               	addlw	4
 20952  02DE  0084               	movwf	4
 20953  02DF  3001               	movlw	1	; select bank2/3
 20954  02E0  0085               	movwf	5
 20955  02E1  0800               	movf	0,w
 20956  02E2  0601               	xorwf	1,w
 20957  02E3  1D03               	skipz
 20958  02E4  2B40               	goto	i1l8488
 20959  02E5  087A               	movf	_DimmerLights22,w
 20960  02E6  0086               	movwf	6
 20961  02E7  3001               	movlw	1	; select bank2/3
 20962  02E8  0087               	movwf	7
 20963  02E9  1101               	bcf	1,2
 20964  02EA  2B06               	goto	i1l8476
 20965  02EB                     i1l8470:	
 20966  02EB  087A               	movf	_DimmerLights22,w
 20967  02EC  0086               	movwf	6
 20968  02ED  3001               	movlw	1	; select bank2/3
 20969  02EE  0087               	movwf	7
 20970  02EF  1E81               	btfss	1,5
 20971  02F0  2B0C               	goto	i1l8478
 20972  02F1  087A               	movf	_DimmerLights22,w
 20973  02F2  3E04               	addlw	4
 20974  02F3  0086               	movwf	6
 20975  02F4  3001               	movlw	1	; select bank2/3
 20976  02F5  0087               	movwf	7
 20977  02F6  3001               	movlw	1
 20978  02F7  0281               	subwf	1,f
 20979  02F8  087A               	movf	_DimmerLights22,w
 20980  02F9  3E05               	addlw	5
 20981  02FA  0086               	movwf	6
 20982  02FB  3001               	movlw	1	; select bank2/3
 20983  02FC  0087               	movwf	7
 20984  02FD  087A               	movf	_DimmerLights22,w
 20985  02FE  3E04               	addlw	4
 20986  02FF  0084               	movwf	4
 20987  0300  3001               	movlw	1	; select bank2/3
 20988  0301  0085               	movwf	5
 20989  0302  0800               	movf	0,w
 20990  0303  0201               	subwf	1,w
 20991  0304  1C03               	skipc
 20992  0305  2B40               	goto	i1l8488
 20993  0306                     i1l8476:	
 20994  0306  087A               	movf	_DimmerLights22,w
 20995  0307  0086               	movwf	6
 20996  0308  3001               	movlw	1	; select bank2/3
 20997  0309  0087               	movwf	7
 20998  030A  1081               	bcf	1,1
 20999  030B  2B40               	goto	i1l8488
 21000  030C                     i1l8478:	
 21001  030C  3001               	movlw	1
 21002  030D  00F3               	movwf	??_TMR0_ISR
 21003  030E  087A               	movf	_DimmerLights22,w
 21004  030F  3E04               	addlw	4
 21005  0310  0086               	movwf	6
 21006  0311  3001               	movlw	1	; select bank2/3
 21007  0312  0087               	movwf	7
 21008  0313  0873               	movf	??_TMR0_ISR,w
 21009  0314  0781               	addwf	1,f
 21010  0315  087A               	movf	_DimmerLights22,w
 21011  0316  3E04               	addlw	4
 21012  0317  0086               	movwf	6
 21013  0318  3001               	movlw	1	; select bank2/3
 21014  0319  0087               	movwf	7
 21015  031A  087A               	movf	_DimmerLights22,w
 21016  031B  3E06               	addlw	6
 21017  031C  0084               	movwf	4
 21018  031D  3001               	movlw	1	; select bank2/3
 21019  031E  0085               	movwf	5
 21020  031F  0800               	movf	0,w
 21021  0320  0201               	subwf	1,w
 21022  0321  1C03               	skipc
 21023  0322  2B40               	goto	i1l8488
 21024  0323  087A               	movf	_DimmerLights22,w
 21025  0324  0086               	movwf	6
 21026  0325  3001               	movlw	1	; select bank2/3
 21027  0326  0087               	movwf	7
 21028  0327  1081               	bcf	1,1
 21029  0328  087A               	movf	_DimmerLights22,w
 21030  0329  0086               	movwf	6
 21031  032A  3001               	movlw	1	; select bank2/3
 21032  032B  0087               	movwf	7
 21033  032C  1301               	bcf	1,6
 21034  032D  087A               	movf	_DimmerLights22,w
 21035  032E  3E0C               	addlw	12
 21036  032F  0086               	movwf	6
 21037  0330  3001               	movlw	1	; select bank2/3
 21038  0331  0087               	movwf	7
 21039  0332  1401               	bsf	1,0
 21040  0333  0021               	movlb	1	; select bank1
 21041  0334  0839               	movf	_Dimmer^(0+128),w
 21042  0335  0086               	movwf	6
 21043  0336  0187               	clrf	7
 21044  0337  1401               	bsf	1,0
 21045  0338  0020               	movlb	0	; select bank0
 21046  0339  138E               	bcf	14,7	;volatile
 21047  033A  01F1               	clrf	i1setLoad_StatusOff@command
 21048  033B  0AF1               	incf	i1setLoad_StatusOff@command,f
 21049  033C  3002               	movlw	2
 21050  033D  319A  223D  3180   	fcall	i1_setLoad_StatusOff
 21051  0340                     i1l8488:	
 21052  0340  0020               	movlb	0	; select bank0
 21053  0341  1E0D               	btfss	13,4	;volatile
 21054  0342  2B75               	goto	i1l8496
 21055  0343  3001               	movlw	1
 21056  0344  00F3               	movwf	??_TMR0_ISR
 21057  0345  087A               	movf	_DimmerLights22,w
 21058  0346  3E08               	addlw	8
 21059  0347  0086               	movwf	6
 21060  0348  3001               	movlw	1	; select bank2/3
 21061  0349  0087               	movwf	7
 21062  034A  0873               	movf	??_TMR0_ISR,w
 21063  034B  0781               	addwf	1,f
 21064  034C  087A               	movf	_DimmerLights22,w
 21065  034D  3E04               	addlw	4
 21066  034E  0086               	movwf	6
 21067  034F  3001               	movlw	1	; select bank2/3
 21068  0350  0087               	movwf	7
 21069  0351  0801               	movf	1,w
 21070  0352  00F3               	movwf	??_TMR0_ISR
 21071  0353  01F4               	clrf	??_TMR0_ISR+1
 21072  0354  09F3               	comf	??_TMR0_ISR,f
 21073  0355  09F4               	comf	??_TMR0_ISR+1,f
 21074  0356  0AF3               	incf	??_TMR0_ISR,f
 21075  0357  1903               	skipnz
 21076  0358  0AF4               	incf	??_TMR0_ISR+1,f
 21077  0359  0873               	movf	??_TMR0_ISR,w
 21078  035A  3E78               	addlw	120
 21079  035B  00F5               	movwf	??_TMR0_ISR+2
 21080  035C  3000               	movlw	0
 21081  035D  3D74               	addwfc	??_TMR0_ISR+1,w
 21082  035E  00F6               	movwf	??_TMR0_ISR+3
 21083  035F  087A               	movf	_DimmerLights22,w
 21084  0360  3E08               	addlw	8
 21085  0361  0086               	movwf	6
 21086  0362  3001               	movlw	1	; select bank2/3
 21087  0363  0087               	movwf	7
 21088  0364  0876               	movf	??_TMR0_ISR+3,w
 21089  0365  3A80               	xorlw	128
 21090  0366  3C80               	sublw	128
 21091  0367  1D03               	skipz
 21092  0368  2B6B               	goto	u806_25
 21093  0369  0875               	movf	??_TMR0_ISR+2,w
 21094  036A  0201               	subwf	1,w
 21095  036B                     u806_25:	
 21096  036B  1C03               	skipc
 21097  036C  2B75               	goto	i1l8496
 21098  036D  087A               	movf	_DimmerLights22,w
 21099  036E  3E08               	addlw	8
 21100  036F  0086               	movwf	6
 21101  0370  3001               	movlw	1	; select bank2/3
 21102  0371  0087               	movwf	7
 21103  0372  0181               	clrf	1
 21104  0373  0020               	movlb	0	; select bank0
 21105  0374  120D               	bcf	13,4	;volatile
 21106  0375                     i1l8496:	
 21107                           
 21108                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 21109  0375  0021               	movlb	1	; select bank1
 21110  0376  0A6A               	incf	_Timer0^(0+128),w
 21111  0377  0086               	movwf	6
 21112  0378  0187               	clrf	7
 21113  0379  3001               	movlw	1
 21114  037A  0781               	addwf	1,f
 21115  037B  3141               	addfsr 1,1
 21116  037C  1803               	skipnc
 21117  037D  0A81               	incf	1,f
 21118                           
 21119                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 21120  037E  0A6A               	incf	_Timer0^(0+128),w
 21121  037F  0086               	movwf	6
 21122  0380  0187               	clrf	7
 21123  0381  3F40               	moviw [0]fsr1
 21124  0382  3AC8               	xorlw	200
 21125  0383  1D03               	skipz
 21126  0384  2B87               	goto	u807_25
 21127  0385  3F41               	moviw [1]fsr1
 21128  0386  3A00               	xorlw	0
 21129  0387                     u807_25:	
 21130  0387  1D03               	skipz
 21131  0388  2B94               	goto	i1l1693
 21132                           
 21133                           ;MCU_16f1518_B1.c: 115: {
 21134                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 21135  0389  0A6A               	incf	_Timer0^(0+128),w
 21136  038A  0086               	movwf	6
 21137  038B  0187               	clrf	7
 21138  038C  3000               	movlw	0
 21139  038D  3FC0               	movwi [0]fsr1
 21140  038E  3FC1               	movwi [1]fsr1
 21141                           
 21142                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 21143  038F  0869               	movf	_TMain^(0+128),w
 21144  0390  0086               	movwf	6
 21145  0391  3001               	movlw	1	; select bank2/3
 21146  0392  0087               	movwf	7
 21147  0393  1481               	bsf	1,1
 21148  0394                     i1l1693:	
 21149                           
 21150                           ;MCU_16f1518_B1.c: 118: }
 21151                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 21152  0394  0878               	movf	_Buz,w
 21153  0395  0086               	movwf	6
 21154  0396  3001               	movlw	1	; select bank2/3
 21155  0397  0087               	movwf	7
 21156  0398  1C81               	btfss	1,1
 21157  0399  0008               	return
 21158                           
 21159                           ;MCU_16f1518_B1.c: 122: {
 21160                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 21161  039A  0A78               	incf	_Buz,w
 21162  039B  0086               	movwf	6
 21163  039C  3001               	movlw	1	; select bank2/3
 21164  039D  0087               	movwf	7
 21165  039E  3001               	movlw	1
 21166  039F  0781               	addwf	1,f
 21167  03A0  3141               	addfsr 1,1
 21168  03A1  1803               	skipnc
 21169  03A2  0A81               	incf	1,f
 21170  03A3  0008               	return
 21171  03A4                     __end_of_TMR0_ISR:	
 21172                           
 21173                           	psect	text138
 21174  1A3D                     __ptext138:	
 21175 ;; *************** function i1_setLoad_StatusOff *****************
 21176 ;; Defined at:
 21177 ;;		line 282 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21178 ;; Parameters:    Size  Location     Type
 21179 ;;  lights          1    wreg     unsigned char 
 21180 ;;  command         1    0[COMMON] unsigned char 
 21181 ;; Auto vars:     Size  Location     Type
 21182 ;;  lights          1    1[COMMON] unsigned char 
 21183 ;; Return value:  Size  Location     Type
 21184 ;;		None               void
 21185 ;; Registers used:
 21186 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21187 ;; Tracked objects:
 21188 ;;		On entry : 0/0
 21189 ;;		On exit  : 0/0
 21190 ;;		Unchanged: 0/0
 21191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21192 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21196 ;;Total ram usage:        2 bytes
 21197 ;; Hardware stack levels used:    1
 21198 ;; This function calls:
 21199 ;;		Nothing
 21200 ;; This function is called by:
 21201 ;;		_TMR0_ISR
 21202 ;; This function uses a non-reentrant model
 21203 ;;
 21204                           
 21205                           
 21206                           ;psect for function i1_setLoad_StatusOff
 21207  1A3D                     i1_setLoad_StatusOff:	
 21208                           
 21209                           ;incstack = 0
 21210                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21211                           ;i1setLoad_StatusOff@lights stored from wreg
 21212  1A3D  00F2               	movwf	i1setLoad_StatusOff@lights
 21213                           
 21214                           ;OverLoad_B1.c: 284: Load->StatusOff=command;
 21215  1A3E  0020               	movlb	0	; select bank0
 21216  1A3F  086E               	movf	_Load,w
 21217  1A40  3E46               	addlw	70
 21218  1A41  0086               	movwf	6
 21219  1A42  3002               	movlw	2	; select bank4/5
 21220  1A43  0087               	movwf	7
 21221  1A44  0871               	movf	i1setLoad_StatusOff@command,w
 21222  1A45  1081               	bcf	1,1
 21223  1A46  1D03               	skipz
 21224  1A47  1481               	bsf	1,1
 21225                           
 21226                           ;OverLoad_B1.c: 285: Load->SafeCount-=2;
 21227  1A48  086E               	movf	_Load,w
 21228  1A49  3E42               	addlw	66
 21229  1A4A  0086               	movwf	6
 21230  1A4B  3002               	movlw	2	; select bank4/5
 21231  1A4C  0087               	movwf	7
 21232  1A4D  3002               	movlw	2
 21233  1A4E  0281               	subwf	1,f
 21234                           
 21235                           ;OverLoad_B1.c: 286: if(lights == 1)
 21236  1A4F  0872               	movf	i1setLoad_StatusOff@lights,w
 21237  1A50  3A01               	xorlw	1
 21238  1A51  1D03               	skipz
 21239  1A52  2A59               	goto	i1l7926
 21240                           
 21241                           ;OverLoad_B1.c: 287: {
 21242                           ;OverLoad_B1.c: 288: Load->Lights1Status=0;
 21243  1A53  086E               	movf	_Load,w
 21244  1A54  3E43               	addlw	67
 21245  1A55  0086               	movwf	6
 21246  1A56  3002               	movlw	2	; select bank4/5
 21247  1A57  0087               	movwf	7
 21248  1A58  0181               	clrf	1
 21249  1A59                     i1l7926:	
 21250                           
 21251                           ;OverLoad_B1.c: 289: }
 21252                           ;OverLoad_B1.c: 290: if(lights == 2)
 21253  1A59  0872               	movf	i1setLoad_StatusOff@lights,w
 21254  1A5A  3A02               	xorlw	2
 21255  1A5B  1D03               	skipz
 21256  1A5C  2A63               	goto	i1l7930
 21257                           
 21258                           ;OverLoad_B1.c: 291: {
 21259                           ;OverLoad_B1.c: 292: Load->Lights2Status=0;
 21260  1A5D  086E               	movf	_Load,w
 21261  1A5E  3E44               	addlw	68
 21262  1A5F  0086               	movwf	6
 21263  1A60  3002               	movlw	2	; select bank4/5
 21264  1A61  0087               	movwf	7
 21265  1A62  0181               	clrf	1
 21266  1A63                     i1l7930:	
 21267                           
 21268                           ;OverLoad_B1.c: 293: }
 21269                           ;OverLoad_B1.c: 294: if(lights == 3)
 21270  1A63  0872               	movf	i1setLoad_StatusOff@lights,w
 21271  1A64  3A03               	xorlw	3
 21272  1A65  1D03               	skipz
 21273  1A66  0008               	return
 21274                           
 21275                           ;OverLoad_B1.c: 295: {
 21276                           ;OverLoad_B1.c: 296: Load->Lights3Status=0;
 21277  1A67  086E               	movf	_Load,w
 21278  1A68  3E45               	addlw	69
 21279  1A69  0086               	movwf	6
 21280  1A6A  3002               	movlw	2	; select bank4/5
 21281  1A6B  0087               	movwf	7
 21282  1A6C  0181               	clrf	1
 21283  1A6D  0008               	return
 21284  1A6E                     __end_ofi1_setLoad_StatusOff:	
 21285                           
 21286                           	psect	text139
 21287  18ED                     __ptext139:	
 21288 ;; *************** function _IOC_ISR *****************
 21289 ;; Defined at:
 21290 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21291 ;; Parameters:    Size  Location     Type
 21292 ;;		None
 21293 ;; Auto vars:     Size  Location     Type
 21294 ;;		None
 21295 ;; Return value:  Size  Location     Type
 21296 ;;		None               void
 21297 ;; Registers used:
 21298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21299 ;; Tracked objects:
 21300 ;;		On entry : 0/0
 21301 ;;		On exit  : 0/0
 21302 ;;		Unchanged: 0/0
 21303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21308 ;;Total ram usage:        1 bytes
 21309 ;; Hardware stack levels used:    1
 21310 ;; Hardware stack levels required when called:    1
 21311 ;; This function calls:
 21312 ;;		_setDimmerReClock
 21313 ;; This function is called by:
 21314 ;;		_ISR
 21315 ;; This function uses a non-reentrant model
 21316 ;;
 21317                           
 21318                           
 21319                           ;psect for function _IOC_ISR
 21320  18ED                     _IOC_ISR:	
 21321                           
 21322                           ;MCU_16f1518_B1.c: 269: if(IOCIE && IOCBF2)
 21323                           
 21324                           ;incstack = 0
 21325                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21326  18ED  1D8B               	btfss	11,3	;volatile
 21327  18EE  0008               	return
 21328  18EF  0027               	movlb	7	; select bank7
 21329  18F0  1D16               	btfss	22,2	;volatile
 21330  18F1  0008               	return
 21331                           
 21332                           ;MCU_16f1518_B1.c: 270: {
 21333                           ;MCU_16f1518_B1.c: 271: IOCBF2=0;
 21334  18F2  1116               	bcf	22,2	;volatile
 21335                           
 21336                           ;MCU_16f1518_B1.c: 272: IOCIF=0;
 21337  18F3  100B               	bcf	11,0	;volatile
 21338                           
 21339                           ;MCU_16f1518_B1.c: 273: if(TMain->PowerON)
 21340  18F4  0021               	movlb	1	; select bank1
 21341  18F5  0869               	movf	_TMain^(0+128),w
 21342  18F6  0086               	movwf	6
 21343  18F7  3001               	movlw	1	; select bank2/3
 21344  18F8  0087               	movwf	7
 21345  18F9  1C01               	btfss	1,0
 21346  18FA  0008               	return
 21347                           
 21348                           ;MCU_16f1518_B1.c: 274: {
 21349                           ;MCU_16f1518_B1.c: 278: setDimmerReClock();
 21350  18FB  31A7  2718  3198   	fcall	_setDimmerReClock
 21351                           
 21352                           ;MCU_16f1518_B1.c: 279: if(RB2)
 21353  18FE  0020               	movlb	0	; select bank0
 21354  18FF  1D0D               	btfss	13,2	;volatile
 21355  1900  2908               	goto	i1l8326
 21356                           
 21357                           ;MCU_16f1518_B1.c: 280: {
 21358                           ;MCU_16f1518_B1.c: 281: Dimmer->Correction=0;
 21359  1901  0021               	movlb	1	; select bank1
 21360  1902  0839               	movf	_Dimmer^(0+128),w
 21361  1903  3E02               	addlw	2
 21362  1904  0086               	movwf	6
 21363  1905  0187               	clrf	7
 21364  1906  0181               	clrf	1
 21365                           
 21366                           ;MCU_16f1518_B1.c: 282: }
 21367  1907  0008               	return
 21368  1908                     i1l8326:	
 21369                           
 21370                           ;MCU_16f1518_B1.c: 283: else
 21371                           ;MCU_16f1518_B1.c: 284: {
 21372                           ;MCU_16f1518_B1.c: 285: Dimmer->Correction=8;
 21373  1908  3008               	movlw	8
 21374  1909  00F1               	movwf	??_IOC_ISR
 21375  190A  0021               	movlb	1	; select bank1
 21376  190B  0839               	movf	_Dimmer^(0+128),w
 21377  190C  3E02               	addlw	2
 21378  190D  0086               	movwf	6
 21379  190E  0187               	clrf	7
 21380  190F  0871               	movf	??_IOC_ISR,w
 21381  1910  0081               	movwf	1
 21382  1911  0008               	return
 21383  1912                     __end_of_IOC_ISR:	
 21384                           
 21385                           	psect	text140
 21386  2718                     __ptext140:	
 21387 ;; *************** function _setDimmerReClock *****************
 21388 ;; Defined at:
 21389 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;		None
 21392 ;; Auto vars:     Size  Location     Type
 21393 ;;		None
 21394 ;; Return value:  Size  Location     Type
 21395 ;;		None               void
 21396 ;; Registers used:
 21397 ;;		wreg, fsr1l, fsr1h
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21407 ;;Total ram usage:        0 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; This function calls:
 21410 ;;		Nothing
 21411 ;; This function is called by:
 21412 ;;		_IOC_ISR
 21413 ;; This function uses a non-reentrant model
 21414 ;;
 21415                           
 21416                           
 21417                           ;psect for function _setDimmerReClock
 21418  2718                     _setDimmerReClock:	
 21419                           
 21420                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 21421                           
 21422                           ;incstack = 0
 21423                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21424  2718  30FF               	movlw	255
 21425  2719  0020               	movlb	0	; select bank0
 21426  271A  0095               	movwf	21	;volatile
 21427                           
 21428                           ;MCU_16f1518_B1.c: 136: if(!DimmerLights11->GO)
 21429  271B  0879               	movf	_DimmerLights11,w
 21430  271C  0086               	movwf	6
 21431  271D  3001               	movlw	1	; select bank2/3
 21432  271E  0087               	movwf	7
 21433  271F  1801               	btfsc	1,0
 21434  2720  2F26               	goto	i1l1698
 21435                           
 21436                           ;MCU_16f1518_B1.c: 137: {
 21437                           ;MCU_16f1518_B1.c: 138: DimmerLights11->GO=1;
 21438  2721  0879               	movf	_DimmerLights11,w
 21439  2722  0086               	movwf	6
 21440  2723  3001               	movlw	1	; select bank2/3
 21441  2724  0087               	movwf	7
 21442  2725  1401               	bsf	1,0
 21443  2726                     i1l1698:	
 21444                           
 21445                           ;MCU_16f1518_B1.c: 139: }
 21446                           ;MCU_16f1518_B1.c: 158: if(!DimmerLights22->GO)
 21447  2726  087A               	movf	_DimmerLights22,w
 21448  2727  0086               	movwf	6
 21449  2728  3001               	movlw	1	; select bank2/3
 21450  2729  0087               	movwf	7
 21451  272A  1801               	btfsc	1,0
 21452  272B  0008               	return
 21453                           
 21454                           ;MCU_16f1518_B1.c: 159: {
 21455                           ;MCU_16f1518_B1.c: 160: DimmerLights22->GO=1;
 21456  272C  087A               	movf	_DimmerLights22,w
 21457  272D  0086               	movwf	6
 21458  272E  3001               	movlw	1	; select bank2/3
 21459  272F  0087               	movwf	7
 21460  2730  1401               	bsf	1,0
 21461  2731  0008               	return
 21462  2732                     __end_of_setDimmerReClock:	
 21463                           
 21464                           	psect	text141
 21465  2492                     __ptext141:	
 21466 ;; *************** function _INT_ISR *****************
 21467 ;; Defined at:
 21468 ;;		line 225 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21469 ;; Parameters:    Size  Location     Type
 21470 ;;		None
 21471 ;; Auto vars:     Size  Location     Type
 21472 ;;		None
 21473 ;; Return value:  Size  Location     Type
 21474 ;;		None               void
 21475 ;; Registers used:
 21476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21477 ;; Tracked objects:
 21478 ;;		On entry : 0/0
 21479 ;;		On exit  : 0/0
 21480 ;;		Unchanged: 0/0
 21481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21486 ;;Total ram usage:        0 bytes
 21487 ;; Hardware stack levels used:    1
 21488 ;; Hardware stack levels required when called:    2
 21489 ;; This function calls:
 21490 ;;		_setRF_ReceiveGO
 21491 ;; This function is called by:
 21492 ;;		_ISR
 21493 ;; This function uses a non-reentrant model
 21494 ;;
 21495                           
 21496                           
 21497                           ;psect for function _INT_ISR
 21498  2492                     _INT_ISR:	
 21499                           
 21500                           ;MCU_16f1518_B1.c: 227: if(INTE && INTF)
 21501                           
 21502                           ;incstack = 0
 21503                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21504  2492  1E0B               	btfss	11,4	;volatile
 21505  2493  0008               	return
 21506  2494  1C8B               	btfss	11,1	;volatile
 21507  2495  0008               	return
 21508                           
 21509                           ;MCU_16f1518_B1.c: 228: {
 21510                           ;MCU_16f1518_B1.c: 229: INTF=0;
 21511  2496  108B               	bcf	11,1	;volatile
 21512                           
 21513                           ;MCU_16f1518_B1.c: 230: INTE=0;
 21514  2497  120B               	bcf	11,4	;volatile
 21515                           
 21516                           ;MCU_16f1518_B1.c: 231: setRF_ReceiveGO(1,1);
 21517  2498  01F3               	clrf	setRF_ReceiveGO@command
 21518  2499  0AF3               	incf	setRF_ReceiveGO@command,f
 21519  249A  3001               	movlw	1
 21520  249B  31A4  2486         	fcall	_setRF_ReceiveGO
 21521  249D  0008               	return
 21522  249E                     __end_of_INT_ISR:	
 21523                           
 21524                           	psect	text142
 21525  2486                     __ptext142:	
 21526 ;; *************** function _setRF_ReceiveGO *****************
 21527 ;; Defined at:
 21528 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21529 ;; Parameters:    Size  Location     Type
 21530 ;;  rf              1    wreg     unsigned char 
 21531 ;;  command         1    2[COMMON] unsigned char 
 21532 ;; Auto vars:     Size  Location     Type
 21533 ;;  rf              1    3[COMMON] unsigned char 
 21534 ;; Return value:  Size  Location     Type
 21535 ;;		None               void
 21536 ;; Registers used:
 21537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21538 ;; Tracked objects:
 21539 ;;		On entry : 0/0
 21540 ;;		On exit  : 0/0
 21541 ;;		Unchanged: 0/0
 21542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21543 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21547 ;;Total ram usage:        2 bytes
 21548 ;; Hardware stack levels used:    1
 21549 ;; Hardware stack levels required when called:    1
 21550 ;; This function calls:
 21551 ;;		i1_RfPointSelect
 21552 ;; This function is called by:
 21553 ;;		_INT_ISR
 21554 ;; This function uses a non-reentrant model
 21555 ;;
 21556                           
 21557                           
 21558                           ;psect for function _setRF_ReceiveGO
 21559  2486                     _setRF_ReceiveGO:	
 21560                           
 21561                           ;incstack = 0
 21562                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21563                           ;setRF_ReceiveGO@rf stored from wreg
 21564  2486  00F4               	movwf	setRF_ReceiveGO@rf
 21565                           
 21566                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21567  2487  0874               	movf	setRF_ReceiveGO@rf,w
 21568  2488  31A4  2419         	fcall	i1_RfPointSelect
 21569                           
 21570                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21571  248A  087C               	movf	_RF,w
 21572  248B  0086               	movwf	6
 21573  248C  0187               	clrf	7
 21574  248D  0873               	movf	setRF_ReceiveGO@command,w
 21575  248E  1081               	bcf	1,1
 21576  248F  1D03               	skipz
 21577  2490  1481               	bsf	1,1
 21578  2491  0008               	return
 21579  2492                     __end_of_setRF_ReceiveGO:	
 21580                           
 21581                           	psect	text143
 21582  2419                     __ptext143:	
 21583 ;; *************** function i1_RfPointSelect *****************
 21584 ;; Defined at:
 21585 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21586 ;; Parameters:    Size  Location     Type
 21587 ;;  rf              1    wreg     unsigned char 
 21588 ;; Auto vars:     Size  Location     Type
 21589 ;;  rf              1    1[COMMON] unsigned char 
 21590 ;; Return value:  Size  Location     Type
 21591 ;;		None               void
 21592 ;; Registers used:
 21593 ;;		wreg
 21594 ;; Tracked objects:
 21595 ;;		On entry : 0/0
 21596 ;;		On exit  : 0/0
 21597 ;;		Unchanged: 0/0
 21598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21603 ;;Total ram usage:        2 bytes
 21604 ;; Hardware stack levels used:    1
 21605 ;; This function calls:
 21606 ;;		Nothing
 21607 ;; This function is called by:
 21608 ;;		_setRF_ReceiveGO
 21609 ;; This function uses a non-reentrant model
 21610 ;;
 21611                           
 21612                           
 21613                           ;psect for function i1_RfPointSelect
 21614  2419                     i1_RfPointSelect:	
 21615                           
 21616                           ;incstack = 0
 21617                           ; Regs used in i1_RfPointSelect: [wreg]
 21618                           ;i1RfPointSelect@rf stored from wreg
 21619  2419  00F2               	movwf	i1RfPointSelect@rf
 21620                           
 21621                           ;RF_Control_B1.c: 10: if(rf == 1)
 21622  241A  0872               	movf	i1RfPointSelect@rf,w
 21623  241B  3A01               	xorlw	1
 21624  241C  1D03               	skipz
 21625  241D  0008               	return
 21626                           
 21627                           ;RF_Control_B1.c: 11: {
 21628                           ;RF_Control_B1.c: 12: RF=&RF1;
 21629  241E  30E4               	movlw	_RF1& (0+255)
 21630  241F  00F1               	movwf	??i1_RfPointSelect
 21631  2420  0871               	movf	??i1_RfPointSelect,w
 21632  2421  00FC               	movwf	_RF
 21633  2422  0008               	return
 21634  2423                     __end_ofi1_RfPointSelect:	
 21635  007E                     btemp	set	126	;btemp
 21636  007E                     pic14e$flags	set	126
 21637  007E                     wtemp	set	126
 21638  007E                     wtemp0	set	126
 21639  0080                     wtemp1	set	128
 21640  0082                     wtemp2	set	130
 21641  0084                     wtemp3	set	132
 21642  0086                     wtemp4	set	134
 21643  0088                     wtemp5	set	136
 21644  007F                     wtemp6	set	127
 21645  007E                     ttemp	set	126
 21646  007E                     ttemp0	set	126
 21647  0081                     ttemp1	set	129
 21648  0084                     ttemp2	set	132
 21649  0087                     ttemp3	set	135
 21650  007F                     ttemp4	set	127
 21651  007E                     ltemp	set	126
 21652  007E                     ltemp0	set	126
 21653  0082                     ltemp1	set	130
 21654  0086                     ltemp2	set	134
 21655  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         283
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      75
    BANK2            80      0      78
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK1[2]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK3[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), DimmerLights1(BANK2[13]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setDelayOff_GO
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setBuz
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_CC2500_WriteCommand
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setPercentValue->___fttol
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_getPercentValue
    _getPercentValue->___fttol
    ___fttol->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setBuz
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   96540
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8171
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8171
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8171
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    9325
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0    9325
                                             11 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      1     1      0    2494
                                              5 BANK0      1     1      0
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    3443
                                              8 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1258
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1070
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1070
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23789
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   23789
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22785
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   21168
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    5201
                                             10 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6660
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6660
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6660
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2201
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8187
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6691
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     522
                                              4 BANK0      2     1      1
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4807
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2813
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1167
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1167
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10593
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10525
                                             65 BANK0      2     2      0
            _DimmerLightsPointSelect
            _getDimmerLights_Trigger
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    6854
                                             61 BANK0      4     3      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1791
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1039
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Trigger                              1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0   11135
                                             66 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       3     3      0   11135
                                             63 BANK0      3     3      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4648
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4648
                                             10 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1     668
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (6) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
       _getPercentValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Trigger
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _CC2500_WriteCommand
             _CC2500_WriteByte
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _CC2500_WriteCommand
             _CC2500_WriteByte
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     193      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     193      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Sep 11 14:43:20 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007B  
                                     _RD 0CA8                                       _RF 007C  
                __end_of_CC2500_WriteREG 26E6                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 25DF  
             _getDimmerLights_StatusFlag 25CD                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 2000                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0060  
              __end_of_setLoad_StatusOff 1A9F                     _setDimmerLights_Main 1654  
                           ___ftadd@sign 0048                                      l312 1D56  
                                    l313 1D5B                                      l403 2756  
                                    l323 1164                                      l307 1D2C  
                                    l340 1A31                                      l316 1D5E  
                                    l343 1A37                                      l327 1175  
                                    l409 1917                                      l373 26C0  
                                    l374 26C2                                      l385 26D5  
                                    l706 1A0B                                      l397 2544  
                                    l923 2616                                      l917 25DB  
                                    l929 11FC                                      l879 25E9  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0015                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0166  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E4                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 0154  
                                    _Sw2 015D                                      _Buz 0078  
              setDimmerLights_Adj@status 005D                 __end_of_CC2500_WriteByte 26CD  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2423  
                        __end_of_ADC_Set 23D8                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0061  
                        _setDimmerLights 0801                    _setDimmerLights_ERROR 1E97  
                  _setDimmerLights_AdjRF 18CA                    _setDimmerLights_AdjGo 259C  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 256C  
                                   ?_ISR 0071                          _PowerFault_Main 2393  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1912  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
               ?_DimmerLightsPointSelect 0071                                     l3410 10EA  
                                   l3243 27AA                                     l3404 10D3  
                        __end_of_IOC_Set 24E8                                     l1726 2679  
                                   l1752 1AC9                                     l3433 0C80  
                                   l2714 1DF0                                     l2467 0ED5  
                                   l2732 2664                                     l6200 0C39  
                                   l6210 0C5B                                     l2746 1C48  
                                   l2930 23B2                                     l6140 10BF  
                                   l6132 10A9                                     l6220 0C7C  
                                   l6212 0C5F                                     l6206 0C4C  
                                   l6136 10B0                                     l6224 0C92  
                                   l6208 0C56                                     l6320 0AE8  
                                   l6312 0AD4                                     l6146 10D8  
                                   l6138 10BA                                     l6218 0C72  
                                   l6148 10E0                                     l6228 0CA4  
                                   l6324 0AF0                                     l6308 0ACC  
                                   l6340 15E6                                     l6420 1A03  
                                   l6412 19F7                                     l6404 19EB  
                                   l6166 27E9                                     l6238 0CBF  
                                   l6182 0C10                                     l6254 09E8  
                                   l6248 09D2                                     l6360 1624  
                                   l6416 19FD                                     l6408 19F1  
                                   l6178 0C09                                     l6290 0A7B  
                                   l6370 163D                                     l6442 189D  
                                   l6532 1F39                                     l6460 25FD  
                                   l6188 0C1F                                     l6276 0A42  
                                   l6268 0A29                                     l6700 279A  
                                   l9004 11B8                                     l6374 164B  
                                   l6366 1631                                     l6358 1616  
                                   l6438 1892                                     l9110 100A  
                                   l9016 1928                                     l6296 0A91  
                                   l6368 163A                                     l9018 1933  
                                   l6570 1FD3                                     l6396 2691  
                                   l9028 2618                                     l6580 1FF2  
                                   l9212 07EB                                     l9038 1116  
                                   l9070 1AAD                                     l9126 1BAE  
                                   l6670 1B0F                                     l6574 1FD9  
                                   l6808 1C36                                     l6576 1FE6  
                                   l7474 1C10                                     l9146 19C3  
                                   l8620 27A4                                     l9332 1675  
                                   l9180 1E72                                     l9244 13C0  
                                   l8702 1068                                     l8710 1074  
                                   l9342 1692                                     l9326 166A  
                                   l7478 1C17                                     l7910 1B94  
                                   l7902 1B76                                     l8640 1420  
                                   l9360 16D6                                     l9352 16B3  
                                   l9432 12B6                                     l7904 1B82  
                                   l9168 1E5C                                     l9512 0FCE  
                                   l8722 1090                                     l8706 106E  
                                   l9426 129D                                     l7914 1B9D  
                                   l6698 2794                                     l8810 16FA  
                                   l9506 0FBD                                     l8644 143E  
                                   l8740 1AF6                                     l9348 16A4  
                                   l9436 12FD                                     l9452 1D06  
                                   l8820 171E                                     l9604 1587  
                                   l9700 072C                                     l9508 0FC3  
                                   l8750 25DD                                     l8718 108A  
                                   l8726 1096                                     l9534 0E15  
                                   l6966 1D3E                                     l9622 15B8  
                                   l9710 075F                                     l7952 0978  
                                   l7960 09A6                                     l8736 1AEB  
                                   l8672 1A8A                                     l9560 0EA7  
                                   l9536 0E1F                                     l8824 1734  
                                   l9472 0F20                                     l8850 11DC  
                                   l9570 0ECA                                     l9618 15AD  
                                   l9650 066D                                     l9474 0F29  
                                   l7964 09AD                                     l8692 1058  
                                   l8772 0851                                     l8676 1A94  
                                   l9556 0E88                                     l9660 067F  
                                   l7958 09A0                                     l8854 11EF  
                                   l9902 14A7                                     l8950 17DC  
                                   l8688 1052                                     l8696 105E  
                                   l8856 11F4                                     l9568 0EC4  
                                   l8944 17C0                                     l9592 1567  
                                   l9648 0667                                     l9496 0F8F  
                                   l9840 089E                                     _CFGS 0CAE  
                                   l8962 17F7                                     l8954 17E5  
                                   l9658 0677                                     l9850 08D7  
                                   l9940 03D1                                     l9596 1577  
                                   l9588 1560                                     l9676 06B5  
                                   l9782 0D50                                     l9926 1E3D  
                                   l8990 1187                                     l8958 17EE  
                                   l9686 06E7                                     l9862 090E  
                                   l9846 08CF                                     l8992 119F  
                                   l9962 044C                                     l9874 126E  
                                   l9956 041E                                     l9982 04FD  
                                   l9976 04E1                                     l9984 0515  
                                   l9994 054C                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 249E                                     _LATC 010E  
                                   u4205 10F1                                     u4135 10B5  
                                   u5050 1EF8                                     u4155 10CE  
                                   u4325 0C3A                                     u5055 1EF6  
                                   u4175 10DB                                     u4415 0C73  
                                   u4505 0A2A                                     u4355 0C4D  
                                   u4515 0A39                                     _PEIE 005E  
                                   u4525 0A43                                     u4605 0ADB  
                                   _INTE 005C                                     _INTF 0059  
                                   u7015 1B83                                     u7105 0939  
                                   u4385 0C60                                     u4705 1617  
                                   u7025 1B8D                                     u4635 0AF1  
                                   u7035 1B95                                     u4485 09FA  
                                   u4645 0AF7                                     u4565 0A9D  
                                   u4495 0A0A                                     u4575 0AAD  
                                   u4735 1632                                     u4595 0AD5  
                                   u4675 15ED                                     u8225 27AB  
                                   u8235 27B0                                     u8530 2417  
                                   u6995 1B79                                     u8795 191D  
                                   _LWLO 0CAD                                     u9925 08B9  
                                   _RFSW 00BC                                     _TMR0 0015  
                                   u9965 08FA                                     u9995 125D  
                        __end_of_INT_Set 23B2                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 0148  
                                   _Load 006E                                     _Temp 007D  
                                   _main 1305                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 2393                      __end_of_DlyOff_Main 154C  
                        __end_of_RF_Main 23AD                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 2718                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1BA4                      DelayTimejudge@value 0022  
                          _RfPointSelect 2439               __end_of_setRFSW_AdjControl 1C5E  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 010E  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 24CE  
                                  l10000 0565                                    l10012 059C  
                                  l10020 05D4                                    l10022 05D7  
                                  l10034 0601                                    l10028 05EE  
                                  l10090 1342                                    l10086 132C  
                  ?_setDimmerLights_Main 0071                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 2659                                    ?_main 0071  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 0CD7  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0A64  
                                  u10100 1E3A                                    u10005 1286  
                                  u10025 1C8F                                    u10045 1476  
                                  u10055 14BD                                    u10235 052D  
                        __end_of___ftmul 0B18                                    u10095 1E1B  
                                  u10185 0498                          __end_of___fttol 1654  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1BA4                   _setDimmerLights_Switch 254C  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E6  
                                  _RFSW2 00E7                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 00E9  
                          setRF_Learn@rf 0023                                    _MainT 145C  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                                  _Temp1 0120                         __end_of_TMR0_ISR 03A4  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 24F5  
                                  _getAD 266F                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 122B            DimmerLights_Exceptions@status 002A  
                          ___ftpack@sign 0024                           _setLoad_Enable 257C  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 0380                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0071  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 25CD  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1EEE              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0071  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0071  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0071  
              setDimmerLights_Main@clear 0061                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1F49  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0071                        ??_Sw_DimmerOnFunc 0025  
                   __end_of_getLoad_Safe 247B                        ??_setPercentValue 0059  
                           __end_of_main 1374                      ?_setRF_DimmerLights 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 087D                     _setSw_Initialization 23F7  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                  _getDimmerLights_Trigger 2606  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 176D  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 2396                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 25F2                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 258C                     __end_of_getTemp_Safe 23D1  
                      i1RfPointSelect@rf 0072                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020                              _DlyOff_Main 14D3  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0071  
                      ?_getPowerFault_AD 0071                           setRF_Enable@rf 0025  
                       __end_of___awtoft 2800                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1101                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 255C                                   i1l1693 0394  
                                 i1l1698 2726                                   i1l8326 1908  
                                 i1l8430 023B                                   i1l8350 00B1  
                                 i1l8408 01B6                                   i1l8416 01EB  
                                 i1l8450 028B                                   i1l8370 0101  
                                 i1l8462 02C0                                   i1l8470 02EB  
                                 i1l8454 029E                                   i1l8382 0136  
                                 i1l8390 0161                                   i1l8374 0114  
                                 i1l8448 0285                                   i1l8456 02A4  
                                 i1l8368 00FB                                   i1l8376 011A  
                                 i1l7930 1A63                                   i1l8466 02D7  
                                 i1l8386 014D                                   i1l8476 0306  
                                 i1l8396 017C                                   i1l7926 1A59  
                                 i1l8478 030C                                   i1l8398 0182  
                                 i1l8488 0340                                   i1l8496 0375  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                     __size_of_Load_Main 02AC                                   u806_25 036B  
                                 u807_25 0387                                   u770_25 0095  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 26FF                                   u787_25 01E1  
                                 u789_25 021F                       DelayTime_1us@count 0020  
                             _VarProduct 01A0                    _Dimmer_Initialization 23C3  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 262F  
                                 _Dimmer 00B9                                   _DlySw1 00CB  
                                 _DlySw2 00D0              __size_of_setLoad_Exceptions 0044  
             __end_of_Mcu_Initialization 26B4                      __end_of_Buzzer_Main 09BB  
                                 _Memory 00E8                                   _Timer0 00EA  
     __end_of_setDimmerLights_TriggerAdj 25BC               _setDimmerLights_TriggerAdj 25AC  
          setDimmerLights_Switch@command 0022                                   ___wmul 27A1  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0071                                ??___lwdiv 0024  
                        i1_RfPointSelect 2419              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0061                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 1042  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0071  
                  setDimmerLights@status 0024                                   _setBuz 13E5  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 24DB  
       ??_setDimmerLights_Initialization 005F          ?_setDimmerLights_Initialization 0071  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 2606  
                        ?_setLoad_Enable 0071                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0024                           _setTemp_Enable 245A  
                        _RfSWPointSelect 2659             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 23B2                        ?_Sw_DimmerAdjFunc 0071  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1FA4         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 259C    __size_of_setPowerFault_Initialization 0010  
           _setPowerFault_Initialization 258C                  __end_of__initialization 0055  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0071  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0071  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0071  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                          __end_of_MainT 14D3                               ___fttol@f1 004B  
                         __pcstackCOMMON 0071                       ??_Sw_DimmerOffFunc 0028  
                           __pidataBANK3 1866                            __end_of_getAD 2685  
                              ?_TMR0_ISR 0071                                ?_TMR0_Set 0071  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0061  
                     _LED_Initialization 24B6                ??_getDimmerLights_Trigger 0020  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0065  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 0650                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 2732                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                   __end_of_setTemp_Enable 2465  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0025                           _DimmerLights11 0079  
                         _DimmerLights22 007A                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 2396                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                            _Buzzer_Main 0913                        ??_setRFSW_Control 002A  
                      __end_of_Temp_Main 0800                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 23DF                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 23EF  
                          ??_Switch_Main 0030                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 2423                      i1_setLoad_StatusOff 1A3D  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 1305                      _CC2500_WriteCommand 253C  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0062  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 087D                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 23D1                _PowerFault_Initialization 2390  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 122B  
           __end_of_setRF_Initialization 23DF                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1C1E  
                __end_of_RfSWPointSelect 266F                        Sw_DimmerOnFunc@sw 0025  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 18ED  
                        ?_setTemp_Enable 0071                                  _IOC_Set 24DB  
                   __size_of_setLog_Code 0048                                  _INT_ISR 2492  
                                _INT_Set 23AD                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1DF7                        _Flash_Memory_Read 26E6  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2470                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 23A9  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_getDimmerLights_Trigger 261A          __end_of_setControl_Lights_Table 1800  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 07B4  
                        _setPercentValue 1D69                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00E1             __end_of_CC2500_FrequencyCabr 24AA  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D9  
                                _VarLED2 00DD                        __end_of_getRxData 1E97  
             __end_of_setPowerFault_Main 0EDD                 _CC2500_registers_address 1800  
                         RF_RxDisable@rf 0024                    ??_Temp_Initialization 0021  
        __end_of_setDimmerLights_Trigger 256C                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 23CA  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 255C  
                                ___ftadd 0BE1                           ??_setSw_Enable 0022  
                                ___ftdiv 09BB                          __size_of___wmul 001E  
                                ___ftmul 0A64                                  ___fttol 15CD  
                    __end_of_Switch_Main 2407                                  ___lwdiv 1B6D  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 122B  
                                __ptext2 1C5E                                  __ptext3 087D  
                                __ptext4 266F                                  __ptext5 07FD  
                                __ptext6 0EDD                                  __ptext7 1000  
                                __ptext8 2396                                  __ptext9 247B  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1E45                __end_of_Flash_Memory_Read 26FF  
                             _setRF_Main 154C                            _DelayOff_Main 23E7  
                      _DimmerLights_Main 244F                        __end_of_setINT_GO 2419  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 2439                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 239D                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 23A1            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 1886                      _DelayOffPointSelect 2685  
                                clrloop0 23BE           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 2502                     end_of_initialization 0055  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 2444  
                      _CC2500_InitSetREG 195E                            _DelayTime_1us 1912  
                      __end_of_setTxData 0BE1               __end_of_Flash_Memory_Write 1AD0  
                                init_ram 23B7                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0063                     Flash_Memory_Read@ret 0023  
                                initloop 23B8                               _setSw_Main 0650  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 274D  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 25BC  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 000B                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1162                            _CC2500_TxData 1D25  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1B6D  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0041            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 1297  
                _DimmerLights_Exceptions 11C6                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 2407  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1AD0         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 245A                       _Mcu_Initialization 269C  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4710 002D                          _setSw_Main$4711 002E  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 18A8  
                __end_of_Sw_DimmerOnFunc 07FD                  __end_of_setPercentValue 1DAF  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1988  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1BDE  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 005B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1101  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 2768  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 1D25  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 2718  
                   _setRF_Initialization 23D8                              _Switch_Main 23FF  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 25DF                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 261A                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 005D  
              __size_of_Sw_DimmerAdjFunc 0026                     setRF_DimmerLights@on 0020  
                         __end_of___wmul 27BF                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 034B          __size_of_setOverTemp_Exceptions 0042  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0089  
                         __end_of_setLED 10A0                           __end_of_setBuz 145C  
                          _setLoad_Count 2644                     _CC2500_FrequencyCabr 249E  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 004E               __size_of_Flash_Memory_Read 0019  
                            ?_setRF_Main 0071                          _setRFSW_Control 16DD  
                    __size_of_getPF_Safe 0008            getDimmerLights_Trigger@Status 0020  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1B02                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 274D                                _Load_Main 03A4  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 27DE  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 1000  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 2784                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D5  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 253C                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 2444                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C4                                _Temp_Main 07FD  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 005E                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C0  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 002D  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 23A1               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1B37                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4359 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0024                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007C  
                          DlyOff_Main@sw 002C                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1000                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 012E  
                          _DimmerLights2 013B                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 0036  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 18CA  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E8  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                             ?_Temp_Main 0071                      __size_of_setRF_Main 0081  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
               ?_getDimmerLights_Trigger 0071                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
                 _setTemp_Initialization 247B                         _getPowerFault_AD 1C5E  
      __size_of_setPowerFault_Exceptions 003A      __end_of_Flash_Memory_Initialization 0DCF  
            _Flash_Memory_Initialization 0CD7                ?_setPowerFault_Exceptions 0071  
                              __ptext100 09BB                                __ptext101 0BE1  
                              __ptext110 25F2                                __ptext102 27DE  
                              __ptext111 1EEE                                __ptext103 10A0  
                              __ptext120 242E                                __ptext112 251E  
                              __ptext104 23C3                                __ptext121 2685  
                              __ptext113 2659                                __ptext105 23E7  
                              __ptext130 239D                                __ptext122 261A  
                              __ptext114 255C                                __ptext106 14D3  
                              __ptext131 2399                                __ptext123 23A1  
                              __ptext115 254C                                __ptext107 0B18  
                              __ptext140 2718                                __ptext132 253C  
                              __ptext124 1A0D                                __ptext116 25DF  
                              __ptext108 2439                                __ptext141 2492  
                              __ptext133 26B4                                __ptext125 195E  
                              __ptext117 13E5                                __ptext109 252D  
                               ?___ftadd 003E                                __ptext142 2486  
                              __ptext134 0913                                __ptext126 27BF  
                              __ptext118 27A1                                __ptext143 2419  
                              __ptext135 2423                                __ptext127 26CD  
                              __ptext119 23DF                                __ptext128 249E  
                              __ptext137 0059                                __ptext129 1912  
                              __ptext138 1A3D                                __ptext139 18ED  
                              _getRxData 1E45                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 176D  
                        _setRF_ReceiveGO 2486                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 242E                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 23B7                       _setPowerFault_Main 0DCF  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 0164            __end_of_setDimmerLights_ERROR 1EEE  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 18ED  
          __end_of_setDimmerLights_AdjGo 25AC                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 257C  
                         __size_of_MainT 0077                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 1866                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1B37  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 25F2                       Sw_DimmerOffFunc@sw 002A  
                              _setINT_GO 2410                      __end_of_setLED_Main 1C1E  
               __end_of_setLoad_StatusOn 1B02                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 2399                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 24C2  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 23BD                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0B18      __end_of_DimmerLights_Initialization 2644  
            _DimmerLights_Initialization 262F                       _CC2500_ClearRXFIFO 2399  
                     _CC2500_ClearTXFIFO 239D           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 251E                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0023  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1A9F                               ?_getRxData 0071  
                               _TMR0_ISR 0059                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1A6E                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 24E8                         _Sw_DimmerAdjFunc 1938  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 19DF  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 254C  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0071  
                       _Sw_DimmerOffFunc 1374                    __size_of_setTemp_Main 0123  
           __end_of_MainT_Initialization 2470                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 002F                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 23F7                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 24B6  
                         ?_SwPointSelect 0071                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                         __size_of_INT_Set 0005  
                    __end_of_setLog_Code 1DF7                    _DlyOff_Initialization 242E  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0913  
                  _Switch_Initialization 24F5                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 251E  
                   __size_of_Buzzer_Main 00A8                       __end_of_getTemp_AD 1297  
                             ?_setTxData 0071                             ?_Switch_Main 0071  
                       _CC2500_WriteByte 26B4                                 _VarTMain 01C0  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 2492                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 002B  
                    _Load_Initialization 24CE                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 19B3  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1988  
                               _TxStatus 0386                             _setTemp_Main 0EDD  
                     _setLoad_Exceptions 1CE1                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0071                         __size_of___ftdiv 00A9  
                           _setSw_Enable 2768                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000A                                 ___awtoft 27DE  
                       ??_LedPointSelect 0020                                 ___ftpack 10A0  
                           _setSw_Status 252D                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1BDE                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 1F49  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 23FF  
                               __ptext11 0650                                 __ptext20 23B2  
                               __ptext12 2510                                 __ptext21 23A9  
                               __ptext13 07B4                                 __ptext30 1B02  
                               __ptext22 154C                                 __ptext14 1374  
                               __ptext31 18CA                                 __ptext23 1E45  
                               __ptext15 1938                                 __ptext40 2393  
                               __ptext32 19B3                                 __ptext24 1DAF  
                               __ptext16 25AC                                 __ptext41 0DCF  
                               __ptext33 1D25                                 __ptext25 176D  
                               __ptext17 259C                                 __ptext50 23AD  
                               __ptext42 1BA4                                 __ptext34 1162  
                               __ptext26 16DD                                 __ptext18 24F5  
                               __ptext51 23D1                                 __ptext43 2470  
                               __ptext35 2502                                 __ptext27 1FA4  
                               __ptext19 23F7                                 __ptext60 2410  
                               __ptext52 2465                                 __ptext44 2390  
                               __ptext36 274D                                 __ptext28 19DF  
                               __ptext61 11C6                                 __ptext53 145C  
                               __ptext45 258C                                 __ptext37 2784  
                               __ptext29 1C1E                                 __ptext70 24C2  
                               __ptext62 1988                                 __ptext54 245A  
                               __ptext46 269C                                 __ptext38 23A5  
                               __ptext71 1BDE                                 __ptext63 1E97  
                               __ptext55 257C                                 __ptext47 24E8  
                               __ptext39 23D8                                 __ptext80 26E6  
                               __ptext72 24B6                                 __ptext64 256C  
                               __ptext56 03A4                                 __ptext48 26FF  
                               __ptext81 244F                                 __ptext73 25BC  
                               __ptext65 23CA                                 __ptext57 1CE1  
                               __ptext49 24DB                                 __ptext90 1886  
                               __ptext82 1654                                 __ptext74 1DF7  
                               __ptext66 23EF                                 __ptext58 2768  
                               __ptext91 2606                                 __ptext83 1101  
                               __ptext75 1297                                 __ptext67 1B6D  
                               __ptext59 1B37                                 __ptext92 2732  
                               __ptext84 1D69                                 __ptext76 24AA  
                               __ptext68 24CE                                 __ptext93 2444  
                               __ptext85 1A6E                                 __ptext77 0CD7  
                               __ptext69 18A8                                 __ptext94 25CD  
                               __ptext86 0801                                 __ptext78 1A9F  
                               __ptext95 262F                                 __ptext87 1AD0  
                               __ptext79 2407                                 __ptext96 1C9F  
                               __ptext88 2644                                 __ptext97 1F49  
                               __ptext89 1042                                 __ptext98 15CD  
                               __ptext99 0A64                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 252D  
          __end_of_Dimmer_Initialization 23CA             __end_of_setDimmerLights_Main 16DD  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 002B  
                          setLED@command 0022                            __size_of_main 006F  
                            _setRF_Learn 2510                 __end_of_CC2500_SIDLEMode 23A5  
                         _setRF_RxStatus 2502               setDimmerLights_Main@lights 0062  
            __end_of_DelayOffPointSelect 269C               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 2732                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 001A                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 2784                       _CC2500_InitPATable 27BF  
    __size_of_getDimmerLights_StatusFlag 0012            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 15CD              __size_of_Mcu_Initialization 0018  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 1A0D                       __end_of_setLoad_GO 244F  
            __end_of_Flash_Memory_Modify 1305                        ??_getPercentValue 0059  
                            _setLog_Code 1DAF                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 2410                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 26CD                       __end_of_setSw_Main 07B4  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                ?_setOverTemp_Exceptions 0071                           _DelayTimejudge 19DF  
                          ?_getLoad_Safe 0071                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1C9F                     ??_DimmerLights_Close 0021  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0071                   __end_of_setRF_RxStatus 2510  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1CE1  __size_of_setDimmerLights_Initialization 0042  
         _setDimmerLights_Initialization 1C9F              __end_of_setDimmerLights_Adj 1162  
                ?_setTemp_Initialization 0071                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 2465                    __size_of_RF_RxDisable 002C  
                      _RF_Initialization 23A5                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0071  
                   _Flash_Memory_Erasing 24AA                       ?_RF_Initialization 0071  
                             _SPI0Buffer 00BF          __end_of_DelayOff_Initialization 23E7  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 23EF  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 1FA4         __size_of_getDimmerLights_Trigger 0014  
       __size_of_setControl_Lights_Table 0093                        _setLoad_StatusOff 1A6E  
                 __end_of_DelayTimejudge 1A0D           __end_of_setOverTemp_Exceptions 1042  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 002A                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1938                 __end_of_Sw_DimmerAdjFunc 195E  
                __end_of_CC2500_ReadByte 27A1             __end_of_setSw_Initialization 23FF  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 19B3               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 24C2         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 2486  
               __size_of_Sw_DimmerOnFunc 0049                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 23A9  
               __end_of_Sw_DimmerOffFunc 13E5                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 11C6                    __end_of_CC2500_TxData 1D69  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 18A8  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1A3D  
