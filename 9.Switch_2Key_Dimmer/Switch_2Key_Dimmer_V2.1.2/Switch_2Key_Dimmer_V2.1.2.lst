

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Sep 12 17:32:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942                           
  1943                           	psect	idataBANK3
  1944  279C                     __pidataBANK3:	
  1945                           
  1946                           ;initializer for _VarProduct
  1947  279C  3463               	retlw	99
  1948  279D  3402               	retlw	2
  1949  279E  3400               	retlw	0
  1950  279F  3400               	retlw	0
  1951  27A0  3400               	retlw	0
  1952  27A1  3400               	retlw	0
  1953  27A2  3400               	retlw	0
  1954  27A3  3400               	retlw	0
  1955  27A4  3400               	retlw	0
  1956  27A5  3400               	retlw	0
  1957  27A6  3400               	retlw	0
  1958  27A7  3400               	retlw	0
  1959  27A8  34FF               	retlw	255
  1960  27A9  34FF               	retlw	255
  1961  27AA  34FF               	retlw	255
  1962  27AB  3400               	retlw	0
  1963  27AC  3400               	retlw	0
  1964  27AD  3400               	retlw	0
  1965  27AE  3400               	retlw	0
  1966  27AF  3400               	retlw	0
  1967  27B0  3402               	retlw	2
  1968  27B1  3400               	retlw	0
  1969  27B2  3400               	retlw	0
  1970  27B3  3400               	retlw	0
  1971  27B4  3400               	retlw	0
  1972  27B5  3400               	retlw	0
  1973  27B6  3400               	retlw	0
  1974  27B7  3400               	retlw	0
  1975  27B8  3400               	retlw	0
  1976  27B9  3400               	retlw	0
  1977  27BA  3400               	retlw	0
  1978  27BB  3400               	retlw	0
  1979                           
  1980                           	psect	stringtext
  1981  1800                     __pstringtext:	
  1982  1800                     _CC2500_registers_address:	
  1983  1800  3403               	retlw	3
  1984  1801  3416               	retlw	22
  1985  1802  3417               	retlw	23
  1986  1803  341E               	retlw	30
  1987  1804  341F               	retlw	31
  1988  1805  3420               	retlw	32
  1989  1806  342A               	retlw	42
  1990  1807  342B               	retlw	43
  1991  1808  340B               	retlw	11
  1992  1809  340C               	retlw	12
  1993  180A  340D               	retlw	13
  1994  180B  340E               	retlw	14
  1995  180C  340F               	retlw	15
  1996  180D  3410               	retlw	16
  1997  180E  3411               	retlw	17
  1998  180F  3412               	retlw	18
  1999  1810  3413               	retlw	19
  2000  1811  3414               	retlw	20
  2001  1812  340A               	retlw	10
  2002  1813  3415               	retlw	21
  2003  1814  3421               	retlw	33
  2004  1815  3422               	retlw	34
  2005  1816  3418               	retlw	24
  2006  1817  3419               	retlw	25
  2007  1818  341A               	retlw	26
  2008  1819  341B               	retlw	27
  2009  181A  341C               	retlw	28
  2010  181B  341D               	retlw	29
  2011  181C  3423               	retlw	35
  2012  181D  3424               	retlw	36
  2013  181E  3425               	retlw	37
  2014  181F  3426               	retlw	38
  2015  1820  3429               	retlw	41
  2016  1821  342C               	retlw	44
  2017  1822  342D               	retlw	45
  2018  1823  342E               	retlw	46
  2019  1824  3400               	retlw	0
  2020  1825  3401               	retlw	1
  2021  1826  3402               	retlw	2
  2022  1827  3407               	retlw	7
  2023  1828  3408               	retlw	8
  2024  1829  3409               	retlw	9
  2025  182A  3406               	retlw	6
  2026  182B  3404               	retlw	4
  2027  182C  3405               	retlw	5
  2028  182D  3427               	retlw	39
  2029  182E  3428               	retlw	40
  2030  182F                     __end_of_CC2500_registers_address:	
  2031  182F                     _CC2500_rfSettings:	
  2032  182F  3407               	retlw	7
  2033  1830  3407               	retlw	7
  2034  1831  3430               	retlw	48
  2035  1832  3487               	retlw	135
  2036  1833  346B               	retlw	107
  2037  1834  34F8               	retlw	248
  2038  1835  347F               	retlw	127
  2039  1836  343F               	retlw	63
  2040  1837  3409               	retlw	9
  2041  1838  3400               	retlw	0
  2042  1839  345C               	retlw	92
  2043  183A  34A7               	retlw	167
  2044  183B  3462               	retlw	98
  2045  183C  3486               	retlw	134
  2046  183D  3483               	retlw	131
  2047  183E  3403               	retlw	3
  2048  183F  3422               	retlw	34
  2049  1840  34F8               	retlw	248
  2050  1841  3400               	retlw	0
  2051  1842  3444               	retlw	68
  2052  1843  34B6               	retlw	182
  2053  1844  3410               	retlw	16
  2054  1845  3418               	retlw	24
  2055  1846  341D               	retlw	29
  2056  1847  341C               	retlw	28
  2057  1848  34C7               	retlw	199
  2058  1849  3400               	retlw	0
  2059  184A  34B2               	retlw	178
  2060  184B  34EA               	retlw	234
  2061  184C  340A               	retlw	10
  2062  184D  3400               	retlw	0
  2063  184E  3411               	retlw	17
  2064  184F  3459               	retlw	89
  2065  1850  3488               	retlw	136
  2066  1851  3431               	retlw	49
  2067  1852  340B               	retlw	11
  2068  1853  342F               	retlw	47
  2069  1854  342E               	retlw	46
  2070  1855  3406               	retlw	6
  2071  1856  3404               	retlw	4
  2072  1857  3405               	retlw	5
  2073  1858  3400               	retlw	0
  2074  1859  3430               	retlw	48
  2075  185A  34D3               	retlw	211
  2076  185B  3491               	retlw	145
  2077  185C  3441               	retlw	65
  2078  185D  3400               	retlw	0
  2079  185E                     __end_of_CC2500_rfSettings:	
  2080  185E                     _CC2500_patable_vaule:	
  2081  185E  34FE               	retlw	254
  2082  185F  34FE               	retlw	254
  2083  1860  34FE               	retlw	254
  2084  1861  34FE               	retlw	254
  2085  1862  34FE               	retlw	254
  2086  1863  34FE               	retlw	254
  2087  1864  34FE               	retlw	254
  2088  1865  34FE               	retlw	254
  2089  1866                     __end_of_CC2500_patable_vaule:	
  2090                           
  2091                           	psect	nvBANK0
  2092  006F                     __pnvBANK0:	
  2093  006F                     _Product:	
  2094  006F                     	ds	1
  2095                           
  2096                           	psect	nvBANK1
  2097  00E8                     __pnvBANK1:	
  2098  00E8                     _Memory:	
  2099  00E8                     	ds	1
  2100  00E9                     _TMain:	
  2101  00E9                     	ds	1
  2102  00EA                     _Timer0:	
  2103  00EA                     	ds	1
  2104  000C                     _PORTA	set	12
  2105  000D                     _PORTB	set	13
  2106  000E                     _PORTC	set	14
  2107  0015                     _TMR0	set	21
  2108  005F                     _GIE	set	95
  2109  005C                     _INTE	set	92
  2110  0059                     _INTF	set	89
  2111  005B                     _IOCIE	set	91
  2112  0058                     _IOCIF	set	88
  2113  005E                     _PEIE	set	94
  2114  0060                     _RA0	set	96
  2115  0063                     _RA3	set	99
  2116  0064                     _RA4	set	100
  2117  0066                     _RA6	set	102
  2118  0067                     _RA7	set	103
  2119  0068                     _RB0	set	104
  2120  0069                     _RB1	set	105
  2121  006A                     _RB2	set	106
  2122  006B                     _RB3	set	107
  2123  006C                     _RB4	set	108
  2124  006D                     _RB5	set	109
  2125  0070                     _RC0	set	112
  2126  0071                     _RC1	set	113
  2127  0072                     _RC2	set	114
  2128  0074                     _RC4	set	116
  2129  0075                     _RC5	set	117
  2130  0077                     _RC7	set	119
  2131  005D                     _TMR0IE	set	93
  2132  005A                     _TMR0IF	set	90
  2133  009D                     _ADCON0	set	157
  2134  009E                     _ADCON1	set	158
  2135  009C                     _ADRESH	set	156
  2136  009B                     _ADRESL	set	155
  2137  0095                     _OPTION_REG	set	149
  2138  0099                     _OSCCON	set	153
  2139  008C                     _TRISA	set	140
  2140  008D                     _TRISB	set	141
  2141  008E                     _TRISC	set	142
  2142  04E9                     _GO_nDONE	set	1257
  2143  0117                     _FVRCON	set	279
  2144  010C                     _LATA	set	268
  2145  010D                     _LATB	set	269
  2146  010E                     _LATC	set	270
  2147  018C                     _ANSELA	set	396
  2148  018D                     _ANSELB	set	397
  2149  018E                     _ANSELC	set	398
  2150  0192                     _PMADRH	set	402
  2151  0191                     _PMADRL	set	401
  2152  0196                     _PMCON2	set	406
  2153  0194                     _PMDATH	set	404
  2154  0193                     _PMDATL	set	403
  2155  0CAE                     _CFGS	set	3246
  2156  0CAC                     _FREE	set	3244
  2157  0CAD                     _LWLO	set	3245
  2158  0CA8                     _RD	set	3240
  2159  0CA9                     _WR	set	3241
  2160  0CAA                     _WREN	set	3242
  2161  1068                     _WPUB0	set	4200
  2162  1069                     _WPUB1	set	4201
  2163  106A                     _WPUB2	set	4202
  2164  0396                     _IOCBF	set	918
  2165  0395                     _IOCBN	set	917
  2166  0394                     _IOCBP	set	916
  2167  1CB2                     _IOCBF2	set	7346
  2168                           
  2169                           ; #config settings
  2170  0000                     
  2171                           	psect	cinit
  2172  0018                     start_initialization:	
  2173  0018                     __initialization:	
  2174                           
  2175                           ; Clear objects allocated to BITCOMMON
  2176  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2177                           
  2178                           ; Clear objects allocated to COMMON
  2179  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2180  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2181  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2182  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2183  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2184  001E  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  2185                           
  2186                           ; Clear objects allocated to BANK0
  2187  001F  01EC               	clrf	__pbssBANK0& (0+127)
  2188  0020  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2189  0021  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2190                           
  2191                           ; Clear objects allocated to BANK1
  2192  0022  30A0               	movlw	low __pbssBANK1
  2193  0023  0084               	movwf	4
  2194  0024  3000               	movlw	high __pbssBANK1
  2195  0025  0085               	movwf	5
  2196  0026  3048               	movlw	72
  2197  0027  31A3  23A1  3180   	fcall	clear_ram0
  2198                           
  2199                           ; Clear objects allocated to BANK2
  2200  002A  3020               	movlw	low __pbssBANK2
  2201  002B  0084               	movwf	4
  2202  002C  3001               	movlw	high __pbssBANK2
  2203  002D  0085               	movwf	5
  2204  002E  304E               	movlw	78
  2205  002F  31A3  23A1  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK3
  2208  0032  30C0               	movlw	low __pbssBANK3
  2209  0033  0084               	movwf	4
  2210  0034  3001               	movlw	high __pbssBANK3
  2211  0035  0085               	movwf	5
  2212  0036  3010               	movlw	16
  2213  0037  31A3  23A1  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Clear objects allocated to BANK4
  2216  003A  3020               	movlw	low __pbssBANK4
  2217  003B  0084               	movwf	4
  2218  003C  3002               	movlw	high __pbssBANK4
  2219  003D  0085               	movwf	5
  2220  003E  3025               	movlw	37
  2221  003F  31A3  23A1  3180   	fcall	clear_ram0
  2222                           
  2223                           ; Clear objects allocated to BANK5
  2224  0042  30A0               	movlw	low __pbssBANK5
  2225  0043  0084               	movwf	4
  2226  0044  3002               	movlw	high __pbssBANK5
  2227  0045  0085               	movwf	5
  2228  0046  3047               	movlw	71
  2229  0047  31A3  23A1  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Initialize objects allocated to BANK3
  2232  004A  309C               	movlw	low __pidataBANK3
  2233  004B  0084               	movwf	4
  2234  004C  30A7               	movlw	(high __pidataBANK3)| (0+128)
  2235  004D  0085               	movwf	5
  2236  004E  30A0               	movlw	low __pdataBANK3
  2237  004F  0086               	movwf	6
  2238  0050  3001               	movlw	high __pdataBANK3
  2239  0051  0087               	movwf	7
  2240  0052  3020               	movlw	32
  2241  0053  31A3  239B         	fcall	init_ram
  2242  0055                     end_of_initialization:	
  2243                           ;End of C runtime variable initialization code
  2244                           
  2245  0055                     __end_of__initialization:	
  2246  0055  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2247  0056  0020               	movlb	0
  2248  0057  3193  2B0A         	ljmp	_main	;jump to C main() function
  2249                           
  2250                           	psect	bitbssCOMMON
  2251  0380                     __pbitbssCOMMON:	
  2252  0380                     _CC2500_Enable:	
  2253  0380                     	ds	1
  2254  0381                     _Receive_GO:	
  2255  0381                     	ds	1
  2256  0382                     _Receive_OK:	
  2257  0382                     	ds	1
  2258  0383                     _RxStatus:	
  2259  0383                     	ds	1
  2260  0384                     _Transceive_GO:	
  2261  0384                     	ds	1
  2262  0385                     _Transceive_OK:	
  2263  0385                     	ds	1
  2264  0386                     _TxStatus:	
  2265  0386                     	ds	1
  2266                           
  2267                           	psect	bssCOMMON
  2268  0078                     __pbssCOMMON:	
  2269  0078                     _Buz:	
  2270  0078                     	ds	1
  2271  0079                     _DimmerLights11:	
  2272  0079                     	ds	1
  2273  007A                     _DimmerLights22:	
  2274  007A                     	ds	1
  2275  007B                     _PF:	
  2276  007B                     	ds	1
  2277  007C                     _RF:	
  2278  007C                     	ds	1
  2279  007D                     _Temp:	
  2280  007D                     	ds	1
  2281                           
  2282                           	psect	bssBANK0
  2283  006C                     __pbssBANK0:	
  2284  006C                     _DimmerLights:	
  2285  006C                     	ds	1
  2286  006D                     _Sw:	
  2287  006D                     	ds	1
  2288  006E                     _Load:	
  2289  006E                     	ds	1
  2290                           
  2291                           	psect	bssBANK1
  2292  00A0                     __pbssBANK1:	
  2293  00A0                     _RF_Data:	
  2294  00A0                     	ds	21
  2295  00B5                     _RF_Count:	
  2296  00B5                     	ds	2
  2297  00B7                     _CRC:	
  2298  00B7                     	ds	1
  2299  00B8                     _DelayOff:	
  2300  00B8                     	ds	1
  2301  00B9                     _Dimmer:	
  2302  00B9                     	ds	1
  2303  00BA                     _DimmerLightsIntr:	
  2304  00BA                     	ds	1
  2305  00BB                     _LED:	
  2306  00BB                     	ds	1
  2307  00BC                     _RFSW:	
  2308  00BC                     	ds	1
  2309  00BD                     _RSSI:	
  2310  00BD                     	ds	1
  2311  00BE                     _Rx_Length:	
  2312  00BE                     	ds	1
  2313  00BF                     _SPI0Buffer:	
  2314  00BF                     	ds	1
  2315  00C0                     _Tx_Length:	
  2316  00C0                     	ds	1
  2317  00C1                     _r_address:	
  2318  00C1                     	ds	1
  2319  00C2                     _r_data:	
  2320  00C2                     	ds	1
  2321  00C3                     _s_data:	
  2322  00C3                     	ds	1
  2323  00C4                     _VarTimer0:	
  2324  00C4                     	ds	7
  2325  00CB                     _DlySw1:	
  2326  00CB                     	ds	5
  2327  00D0                     _DlySw2:	
  2328  00D0                     	ds	5
  2329  00D5                     _VarErrLED:	
  2330  00D5                     	ds	4
  2331  00D9                     _VarLED1:	
  2332  00D9                     	ds	4
  2333  00DD                     _VarLED2:	
  2334  00DD                     	ds	4
  2335  00E1                     _Dimmer1:	
  2336  00E1                     	ds	3
  2337  00E4                     _RF1:	
  2338  00E4                     	ds	2
  2339  00E6                     _RFSW1:	
  2340  00E6                     	ds	1
  2341  00E7                     _RFSW2:	
  2342  00E7                     	ds	1
  2343                           
  2344                           	psect	bssBANK2
  2345  0120                     __pbssBANK2:	
  2346  0120                     _Temp1:	
  2347  0120                     	ds	14
  2348  012E                     _DimmerLights1:	
  2349  012E                     	ds	13
  2350  013B                     _DimmerLights2:	
  2351  013B                     	ds	13
  2352  0148                     _Buz1:	
  2353  0148                     	ds	12
  2354  0154                     _Sw1:	
  2355  0154                     	ds	9
  2356  015D                     _Sw2:	
  2357  015D                     	ds	9
  2358  0166                     _PF1:	
  2359  0166                     	ds	8
  2360                           
  2361                           	psect	bssBANK3
  2362  01C0                     __pbssBANK3:	
  2363  01C0                     _VarTMain:	
  2364  01C0                     	ds	16
  2365                           
  2366                           	psect	dataBANK3
  2367  01A0                     __pdataBANK3:	
  2368  01A0                     _VarProduct:	
  2369  01A0                     	ds	32
  2370                           
  2371                           	psect	bssBANK4
  2372  0220                     __pbssBANK4:	
  2373  0220                     _VarMemory:	
  2374  0220                     	ds	37
  2375                           
  2376                           	psect	bssBANK5
  2377  02A0                     __pbssBANK5:	
  2378  02A0                     _Load1:	
  2379  02A0                     	ds	71
  2380                           
  2381                           	psect	clrtext
  2382  23A1                     clear_ram0:	
  2383                           ;	Called with FSR0 containing the base address, and
  2384                           ;	WREG with the size to clear
  2385                           
  2386  23A1  0064               	clrwdt	;clear the watchdog before getting into this loop
  2387  23A2                     clrloop0:	
  2388  23A2  0180               	clrf	0	;clear RAM location pointed to by FSR
  2389  23A3  3101               	addfsr 0,1
  2390  23A4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2391  23A5  2BA2               	goto	clrloop0	;have we reached the end yet?
  2392  23A6  3400               	retlw	0	;all done for this memory range, return
  2393                           
  2394                           	psect	inittext
  2395  239B                     init_ram:	
  2396  239B  00FE               	movwf	126
  2397  239C                     initloop:	
  2398  239C  0012               	moviw fsr0++
  2399  239D  001E               	movwi fsr1++
  2400  239E  0BFE               	decfsz	126,f
  2401  239F  2B9C               	goto	initloop
  2402  23A0  3400               	retlw	0
  2403                           
  2404                           	psect	cstackCOMMON
  2405  0071                     __pcstackCOMMON:	
  2406  0071                     ?_CC2500_WriteByte:	
  2407  0071                     ?_CC2500_WriteCommand:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0071                     ?_CC2500_ReadStatus:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0071                     ?_CC2500_ReadByte:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0071                     ?_CC2500_PowerRST:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0071                     ?_CC2500_InitSetREG:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0071                     ?_CC2500_InitPATable:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0071                     ?_CC2500_ClearTXFIFO:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0071                     ?_CC2500_ClearRXFIFO:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0071                     ?_CC2500_FrequencyCabr:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0071                     ?_CC2500_SIDLEMode:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0071                     ?_DlyOff_Initialization:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0071                     ?_DlyOff_Main:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0071                     ?_setTxData:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0071                     ?_setDimmerLights_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0071                     ?_Dimmer_Initialization:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0071                     ?_setLoad_GO:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0071                     ?_setDimmerLights_Main:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0071                     ?_setDimmerLights_ERROR:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0071                     ?_setLoad_Count:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0071                     ?_setLED_Initialization:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0071                     ?_setLED_Main:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0071                     ?_MainT_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0071                     ?_Mcu_Initialization:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0071                     ?_Flash_Memory_Initialization:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0071                     ?_Temp_Initialization:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0071                     ?_Load_Initialization:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0071                     ?_PowerFault_Initialization:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0071                     ?_Switch_Initialization:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0071                     ?_RF_Initialization:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0071                     ?_getLoad_AD:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0071                     ?_getTemp_AD:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0071                     ?_getPowerFault_AD:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0071                     ?_MainT:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0071                     ?_Flash_Memory_Main:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0071                     ?_Temp_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0071                     ?_Load_Main:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0071                     ?_PowerFault_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0071                     ?_Switch_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0071                     ?_RF_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0071                     ?_setTemp_Enable:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0071                     ?_setLoad_Enable:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0071                     ?_setSw_Enable:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0071                     ?_IO_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0071                     ?_TMR0_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0071                     ?_ADC_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0071                     ?_INT_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0071                     ?_IOC_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0071                     ?_IOC_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0071                     ??_IOC_ISR:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0071                     ?_TMR0_ISR:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0071                     ?_INT_ISR:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0071                     ?_Flash_Memory_Write:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0071                     ?_Flash_Memory_Modify:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0071                     ?_setLoad_AH_AL_Restore:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0071                     ?_setLoad_Exceptions:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0071                     ?_setTemp_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0071                     ?_setTemp_Main:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0071                     ?_setOverTemp_Exceptions:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0071                     ?_setPowerFault_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0071                     ?_setPowerFault_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0071                     ?_setPowerFault_Exceptions:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0071                     ?_setRF_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0071                     ?_setRF_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0071                     ?_getRxData:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0071                     ?_RF_RxDisable:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0071                     ?_setLog_Code:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0071                     ?_setControl_Lights_Table:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0071                     ?_setRFSW_Control:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0071                     ?_setRFSW_AdjControl:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0071                     ?_setRF_DimmerValue:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0071                     ?_setSw_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0071                     ?_setSw_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0071                     ?_Sw_DimmerOnFunc:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0071                     ?_Sw_DimmerAdjFunc:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0071                     ?_Sw_DimmerOffFunc:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0071                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0071                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0071                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0071                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0071                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0071                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0071                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0071                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0071                     ?_DimmerLightsPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0071                     ?_DimmerLights_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0071                     ?_DimmerLights_Close:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0071                     ?_DimmerLights_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0071                     ?_DimmerLights_Exceptions:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0071                     ?_setDimmerLights_AdjRF:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0071                     ?_LedPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0071                     ?_LED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0071                     ?_LED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0071                     ?_main:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0071                     ?_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0071                     ?_setDimmerReClock:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0071                     ??_setDimmerReClock:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0071                     ?_setINT_GO:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0071                     ?_Flash_Memory_Unlock:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0071                     ?_Flash_Memory_Erasing:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0071                     ?_RfPointSelect:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0071                     ?_RfSWPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0071                     ?_TouchPower:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0071                     ?_SwPointSelect:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0071                     ?i1_setLoad_StatusOff:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0071                     ?i1_RfPointSelect:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0071                     ??i1_RfPointSelect:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0071                     ?_DelayTimejudge:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0071                     ?_getPercentValue:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0071                     ?_getDimmerLights_StatusFlag:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0071                     ?_setPercentValue:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0071                     ?_Flash_Memory_Read:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0071                     ?_getTemp_Safe:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0071                     ?_getPF_Safe:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0071                     ?_getLoad_Safe:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0071                     setRF_Initialization@rf:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0071                     i1setLoad_StatusOff@command:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0x0
  2757  0071                     	ds	1
  2758  0072                     ??i1_setLoad_StatusOff:	
  2759  0072                     i1setLoad_StatusOff@lights:	
  2760                           ; 0 bytes @ 0x1
  2761                           
  2762  0072                     i1RfPointSelect@rf:	
  2763                           ; 1 bytes @ 0x1
  2764                           
  2765                           
  2766                           ; 1 bytes @ 0x1
  2767  0072                     	ds	1
  2768  0073                     ??_TMR0_ISR:	
  2769  0073                     ?_setRF_ReceiveGO:	
  2770                           ; 0 bytes @ 0x2
  2771                           
  2772  0073                     setRF_ReceiveGO@command:	
  2773                           ; 0 bytes @ 0x2
  2774                           
  2775                           
  2776                           ; 1 bytes @ 0x2
  2777  0073                     	ds	1
  2778  0074                     ??_setRF_ReceiveGO:	
  2779  0074                     setRF_ReceiveGO@rf:	
  2780                           ; 0 bytes @ 0x3
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x3
  2784  0074                     	ds	1
  2785  0075                     ??_INT_ISR:	
  2786                           
  2787                           ; 0 bytes @ 0x4
  2788  0075                     	ds	2
  2789  0077                     ??_ISR:	
  2790                           
  2791                           ; 0 bytes @ 0x6
  2792  0077                     	ds	1
  2793                           
  2794                           	psect	cstackBANK0
  2795  0020                     __pcstackBANK0:	
  2796  0020                     ??_CC2500_WriteByte:	
  2797  0020                     ??_CC2500_ReadByte:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ?_DelayTime_1us:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ?_setRF_DimmerLights:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_DelayTimejudge:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Dimmer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_getDimmerLights_StatusFlag:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_setLoad_GO:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ?_setLoad_StatusOff:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_setLoad_Count:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ?_setLoad_StatusOn:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_MainT_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_setTemp_Enable:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_setLoad_Enable:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_IO_Set:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_TMR0_Set:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_ADC_Set:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_INT_Set:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_IOC_Set:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Flash_Memory_Read:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_Flash_Memory_Write:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_setLoad_AH_AL_Restore:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_getTemp_Safe:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_getPF_Safe:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_setTemp_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_setPowerFault_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_setRF_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Buzzer_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_Buzzer_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_DelayOffPointSelect:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_DimmerLightsPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_LedPointSelect:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setINT_GO:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Unlock:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_Flash_Memory_Erasing:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_getLoad_Safe:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_RfPointSelect:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_RfSWPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_TouchPower:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_SwPointSelect:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ?_getAD:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ?___wmul:	
  2918                           ; 2 bytes @ 0x0
  2919                           
  2920  0020                     ?___lwdiv:	
  2921                           ; 2 bytes @ 0x0
  2922                           
  2923  0020                     ?___ftpack:	
  2924                           ; 2 bytes @ 0x0
  2925                           
  2926  0020                     setINT_GO@command:	
  2927                           ; 3 bytes @ 0x0
  2928                           
  2929  0020                     getAD@adcon1:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     setLoad_Enable@command:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0020                     setLoad_GO@command:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0020                     setLoad_StatusOn@command:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0020                     setLoad_StatusOff@command:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0020                     setTemp_Enable@command:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0020                     setRF_DimmerLights@on:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0020                     DelayTime_1us@count:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0020                     ___wmul@multiplier:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     ___lwdiv@divisor:	
  2957                           ; 2 bytes @ 0x0
  2958                           
  2959  0020                     ___ftpack@arg:	
  2960                           ; 2 bytes @ 0x0
  2961                           
  2962                           
  2963                           ; 3 bytes @ 0x0
  2964  0020                     	ds	1
  2965  0021                     ??_setRF_DimmerLights:	
  2966  0021                     ??_setLoad_StatusOff:	
  2967                           ; 0 bytes @ 0x1
  2968                           
  2969  0021                     ??_setLoad_StatusOn:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972  0021                     ??_Mcu_Initialization:	
  2973                           ; 0 bytes @ 0x1
  2974                           
  2975  0021                     ??_Temp_Initialization:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978  0021                     ??_PowerFault_Initialization:	
  2979                           ; 0 bytes @ 0x1
  2980                           
  2981  0021                     ??_RF_Initialization:	
  2982                           ; 0 bytes @ 0x1
  2983                           
  2984  0021                     CC2500_WriteByte@loop_a:	
  2985                           ; 0 bytes @ 0x1
  2986                           
  2987  0021                     CC2500_ReadByte@loop_b:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0021                     DelayOffPointSelect@sw:	
  2991                           ; 1 bytes @ 0x1
  2992                           
  2993  0021                     DelayTimejudge@i:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     DimmerLightsPointSelect@lights:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     getDimmerLights_StatusFlag@Status:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     LedPointSelect@led:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     Flash_Memory_Read@i:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     Flash_Memory_Write@i:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     setLoad_Count@command:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     setLoad_StatusOn@lights:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     setLoad_StatusOff@lights:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     setLoad_AH_AL_Restore@i:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     RfPointSelect@rf:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     RfSWPointSelect@sw:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     SwPointSelect@sw:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032                           
  3033                           ; 1 bytes @ 0x1
  3034  0021                     	ds	1
  3035  0022                     ??_CC2500_WriteCommand:	
  3036  0022                     ??_CC2500_ReadStatus:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ?_setRF_RxStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ??_DelayTime_1us:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_CC2500_WriteREG:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ??_DlyOff_Initialization:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setSw_Status:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ?_setRFSW_Status:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_setDimmerLights_Trigger:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setDimmerLights_Switch:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ??_setTxData:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ?_setDimmerLights_TriggerERROR:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_setLED:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_setLED_Main:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_Load_Initialization:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ??_setSw_Enable:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_AdjGo:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setDimmerLights_TriggerAdj:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ?_setDimmerLights_Clear:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ?_setRF_Learn:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     CC2500_WriteREG@value:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     DlyOff_Initialization@sw:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     DelayTimejudge@value:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     _getDimmerLights_StatusFlag$1819:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setDimmerLights_TriggerERROR@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     setDimmerLights_Switch@command:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setDimmerLights_AdjGo@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setDimmerLights_Trigger@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setDimmerLights_TriggerAdj@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setDimmerLights_Clear@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setLED@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     Flash_Memory_Read@address:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setRF_Learn@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setRF_RxStatus@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setRFSW_Status@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setSw_Enable@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setSw_Status@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     DelayTime_1us@i:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     ___wmul@multiplicand:	
  3148                           ; 2 bytes @ 0x2
  3149                           
  3150  0022                     ___lwdiv@dividend:	
  3151                           ; 2 bytes @ 0x2
  3152                           
  3153                           
  3154                           ; 2 bytes @ 0x2
  3155  0022                     	ds	1
  3156  0023                     ??_setRF_RxStatus:	
  3157  0023                     ??_CC2500_WriteREG:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_setSw_Status:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_setRFSW_Status:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_setDimmerLights_Trigger:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setDimmerLights_Switch:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_setDimmerLights_TriggerERROR:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setLED:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_DelayOff_Initialization:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ?_setDelayOff_GO:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_DimmerLights_Close:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_setDimmerLights_AdjGo:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_TriggerAdj:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_setDimmerLights_Clear:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_getAD:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_setRF_Learn:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     CC2500_WriteCommand@command:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     CC2500_ReadStatus@status_addr:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     setDelayOff_GO@command:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setDimmerLights_TriggerERROR@lights:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     setDimmerLights_Switch@lights:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     setDimmerLights_AdjGo@lights:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     setDimmerLights_Trigger@lights:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setDimmerLights_TriggerAdj@lights:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     setDimmerLights_Clear@lights:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setLED@led:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     getAD@adcon0:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     Flash_Memory_Read@ret:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setRF_Learn@rf:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setRF_RxStatus@rf:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setTxData@rf:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     setRFSW_Status@sw:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     setRF_DimmerLights@status:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setSw_Status@sw:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     ___ftpack@exp:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259                           
  3260                           ; 1 bytes @ 0x3
  3261  0023                     	ds	1
  3262  0024                     ??_CC2500_ClearTXFIFO:	
  3263  0024                     ??_CC2500_ClearRXFIFO:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??_CC2500_SIDLEMode:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     ?_setDimmerLights:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_setDimmerLights_ERROR:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ??_setLED_Initialization:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_getLoad_AD:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_getTemp_AD:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_getPowerFault_AD:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ?_setRF_Enable:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_Flash_Memory_Modify:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_RF_RxDisable:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_setSw_Initialization:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_Sw_DimmerAdjFunc:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_CC2500_TxData:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_CC2500_RxData:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??___wmul:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??___lwdiv:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     CC2500_WriteREG@w_addr:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     setDelayOff_GO@value:	
  3318                           ; 1 bytes @ 0x4
  3319                           
  3320  0024                     setDimmerLights@status:	
  3321                           ; 1 bytes @ 0x4
  3322                           
  3323  0024                     setLED_Initialization@led:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setLED_Main@led:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     setRF_Enable@command:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     RF_RxDisable@rf:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     setRF_DimmerLights@lights:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     setSw_Initialization@sw:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     Sw_DimmerAdjFunc@sw:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     ___ftpack@sign:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0024                     DelayTime_1us@j:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0024                     ___wmul@product:	
  3351                           ; 2 bytes @ 0x4
  3352                           
  3353                           
  3354                           ; 2 bytes @ 0x4
  3355  0024                     	ds	1
  3356  0025                     ??_CC2500_InitSetREG:	
  3357  0025                     ??_CC2500_InitPATable:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_setDimmerLights:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_Switch_Initialization:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??_setRF_Enable:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     ??_Sw_DimmerOnFunc:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     ??___ftpack:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     ??_setDelayOff_GO:	
  3376                           ; 0 bytes @ 0x5
  3377                           
  3378  0025                     ??_LED_Initialization:	
  3379                           ; 0 bytes @ 0x5
  3380                           
  3381  0025                     ??_LED_Main:	
  3382                           ; 0 bytes @ 0x5
  3383                           
  3384  0025                     CC2500_TxData@loop_e:	
  3385                           ; 0 bytes @ 0x5
  3386                           
  3387  0025                     CC2500_RxData@loop_f:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390  0025                     setDimmerLights_ERROR@lights:	
  3391                           ; 1 bytes @ 0x5
  3392                           
  3393  0025                     setRF_Enable@rf:	
  3394                           ; 1 bytes @ 0x5
  3395                           
  3396  0025                     Sw_DimmerOnFunc@Idle:	
  3397                           ; 1 bytes @ 0x5
  3398                           
  3399  0025                     ___lwdiv@quotient:	
  3400                           ; 1 bytes @ 0x5
  3401                           
  3402                           
  3403                           ; 2 bytes @ 0x5
  3404  0025                     	ds	1
  3405  0026                     ??_CC2500_PowerRST:	
  3406  0026                     ??_CC2500_FrequencyCabr:	
  3407                           ; 0 bytes @ 0x6
  3408                           
  3409  0026                     ?_setBuz:	
  3410                           ; 0 bytes @ 0x6
  3411                           
  3412  0026                     CC2500_InitSetREG@temp1:	
  3413                           ; 0 bytes @ 0x6
  3414                           
  3415  0026                     CC2500_InitPATable@temp:	
  3416                           ; 1 bytes @ 0x6
  3417                           
  3418  0026                     setDimmerLights@lights:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421  0026                     Flash_Memory_Modify@i:	
  3422                           ; 1 bytes @ 0x6
  3423                           
  3424  0026                     Sw_DimmerOnFunc@sw:	
  3425                           ; 1 bytes @ 0x6
  3426                           
  3427  0026                     setBuz@time:	
  3428                           ; 1 bytes @ 0x6
  3429                           
  3430                           
  3431                           ; 2 bytes @ 0x6
  3432  0026                     	ds	1
  3433  0027                     ??_Flash_Memory_Main:	
  3434  0027                     CC2500_InitSetREG@temp2:	
  3435                           ; 0 bytes @ 0x7
  3436                           
  3437  0027                     CC2500_InitPATable@loop_d:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440  0027                     setDelayOff_GO@sw:	
  3441                           ; 1 bytes @ 0x7
  3442                           
  3443  0027                     ___lwdiv@counter:	
  3444                           ; 1 bytes @ 0x7
  3445                           
  3446                           
  3447                           ; 1 bytes @ 0x7
  3448  0027                     	ds	1
  3449  0028                     ??_Sw_DimmerOffFunc:	
  3450  0028                     ??_setBuz:	
  3451                           ; 0 bytes @ 0x8
  3452                           
  3453  0028                     ?___awtoft:	
  3454                           ; 0 bytes @ 0x8
  3455                           
  3456  0028                     CC2500_InitSetREG@loop_c:	
  3457                           ; 3 bytes @ 0x8
  3458                           
  3459  0028                     Flash_Memory_Main@Idle:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462  0028                     getTemp_AD@channel:	
  3463                           ; 1 bytes @ 0x8
  3464                           
  3465  0028                     getPowerFault_AD@channel:	
  3466                           ; 1 bytes @ 0x8
  3467                           
  3468  0028                     ___awtoft@c:	
  3469                           ; 1 bytes @ 0x8
  3470                           
  3471                           
  3472                           ; 2 bytes @ 0x8
  3473  0028                     	ds	1
  3474  0029                     ??_CC2500_PowerOnInitial:	
  3475  0029                     setBuz@count:	
  3476                           ; 0 bytes @ 0x9
  3477                           
  3478  0029                     getLoad_AD@channel:	
  3479                           ; 1 bytes @ 0x9
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0x9
  3483  0029                     	ds	1
  3484  002A                     ??_DlyOff_Main:	
  3485  002A                     ??_MainT:	
  3486                           ; 0 bytes @ 0xA
  3487                           
  3488  002A                     ??_setLog_Code:	
  3489                           ; 0 bytes @ 0xA
  3490                           
  3491  002A                     ??_setRFSW_Control:	
  3492                           ; 0 bytes @ 0xA
  3493                           
  3494  002A                     ??_DimmerLights_Exceptions:	
  3495                           ; 0 bytes @ 0xA
  3496                           
  3497  002A                     DimmerLights_Exceptions@status:	
  3498                           ; 0 bytes @ 0xA
  3499                           
  3500  002A                     getLoad_AD@j:	
  3501                           ; 1 bytes @ 0xA
  3502                           
  3503  002A                     Sw_DimmerOffFunc@sw:	
  3504                           ; 1 bytes @ 0xA
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0xA
  3508  002A                     	ds	1
  3509  002B                     ??_setLoad_Exceptions:	
  3510  002B                     ??_setOverTemp_Exceptions:	
  3511                           ; 0 bytes @ 0xB
  3512                           
  3513  002B                     ??_setPowerFault_Exceptions:	
  3514                           ; 0 bytes @ 0xB
  3515                           
  3516  002B                     ??_setSw_Main:	
  3517                           ; 0 bytes @ 0xB
  3518                           
  3519  002B                     ??___awtoft:	
  3520                           ; 0 bytes @ 0xB
  3521                           
  3522  002B                     getLoad_AD@i:	
  3523                           ; 0 bytes @ 0xB
  3524                           
  3525  002B                     setLog_Code@rf:	
  3526                           ; 1 bytes @ 0xB
  3527                           
  3528  002B                     setRFSW_Control@sw:	
  3529                           ; 1 bytes @ 0xB
  3530                           
  3531                           
  3532                           ; 1 bytes @ 0xB
  3533  002B                     	ds	1
  3534  002C                     DlyOff_Main@sw:	
  3535  002C                     setLoad_Exceptions@command:	
  3536                           ; 1 bytes @ 0xC
  3537                           
  3538  002C                     setOverTemp_Exceptions@command:	
  3539                           ; 1 bytes @ 0xC
  3540                           
  3541  002C                     setPowerFault_Exceptions@command:	
  3542                           ; 1 bytes @ 0xC
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0xC
  3546  002C                     	ds	1
  3547  002D                     ??_Load_Main:	
  3548  002D                     ??_setTemp_Main:	
  3549                           ; 0 bytes @ 0xD
  3550                           
  3551  002D                     ??_setPowerFault_Main:	
  3552                           ; 0 bytes @ 0xD
  3553                           
  3554  002D                     ??_DelayOff_Main:	
  3555                           ; 0 bytes @ 0xD
  3556                           
  3557  002D                     _setSw_Main$4710:	
  3558                           ; 0 bytes @ 0xD
  3559                           
  3560  002D                     ___awtoft@sign:	
  3561                           ; 1 bytes @ 0xD
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0xD
  3565  002D                     	ds	1
  3566  002E                     ?___ftdiv:	
  3567  002E                     ?___ftmul:	
  3568                           ; 3 bytes @ 0xE
  3569                           
  3570  002E                     _setSw_Main$4711:	
  3571                           ; 3 bytes @ 0xE
  3572                           
  3573  002E                     ___ftdiv@f2:	
  3574                           ; 1 bytes @ 0xE
  3575                           
  3576  002E                     ___ftmul@f1:	
  3577                           ; 3 bytes @ 0xE
  3578                           
  3579                           
  3580                           ; 3 bytes @ 0xE
  3581  002E                     	ds	1
  3582  002F                     ??_PowerFault_Main:	
  3583  002F                     setSw_Main@sw:	
  3584                           ; 0 bytes @ 0xF
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0xF
  3588  002F                     	ds	1
  3589  0030                     ??_Temp_Main:	
  3590  0030                     ??_Switch_Main:	
  3591                           ; 0 bytes @ 0x10
  3592                           
  3593                           
  3594                           ; 0 bytes @ 0x10
  3595  0030                     	ds	1
  3596  0031                     Load_Main@i:	
  3597  0031                     ___ftdiv@f1:	
  3598                           ; 1 bytes @ 0x11
  3599                           
  3600  0031                     ___ftmul@f2:	
  3601                           ; 3 bytes @ 0x11
  3602                           
  3603                           
  3604                           ; 3 bytes @ 0x11
  3605  0031                     	ds	3
  3606  0034                     ??___ftdiv:	
  3607  0034                     ??___ftmul:	
  3608                           ; 0 bytes @ 0x14
  3609                           
  3610                           
  3611                           ; 0 bytes @ 0x14
  3612  0034                     	ds	4
  3613  0038                     ___ftdiv@cntr:	
  3614  0038                     ___ftmul@exp:	
  3615                           ; 1 bytes @ 0x18
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0x18
  3619  0038                     	ds	1
  3620  0039                     ___ftdiv@f3:	
  3621  0039                     ___ftmul@f3_as_product:	
  3622                           ; 3 bytes @ 0x19
  3623                           
  3624                           
  3625                           ; 3 bytes @ 0x19
  3626  0039                     	ds	3
  3627  003C                     ___ftdiv@exp:	
  3628  003C                     ___ftmul@cntr:	
  3629                           ; 1 bytes @ 0x1C
  3630                           
  3631                           
  3632                           ; 1 bytes @ 0x1C
  3633  003C                     	ds	1
  3634  003D                     ___ftdiv@sign:	
  3635  003D                     ___ftmul@sign:	
  3636                           ; 1 bytes @ 0x1D
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x1D
  3640  003D                     	ds	1
  3641  003E                     ?___ftadd:	
  3642  003E                     ___ftadd@f1:	
  3643                           ; 3 bytes @ 0x1E
  3644                           
  3645                           
  3646                           ; 3 bytes @ 0x1E
  3647  003E                     	ds	3
  3648  0041                     ___ftadd@f2:	
  3649                           
  3650                           ; 3 bytes @ 0x21
  3651  0041                     	ds	3
  3652  0044                     ??___ftadd:	
  3653                           
  3654                           ; 0 bytes @ 0x24
  3655  0044                     	ds	4
  3656  0048                     ___ftadd@sign:	
  3657                           
  3658                           ; 1 bytes @ 0x28
  3659  0048                     	ds	1
  3660  0049                     ___ftadd@exp2:	
  3661                           
  3662                           ; 1 bytes @ 0x29
  3663  0049                     	ds	1
  3664  004A                     ___ftadd@exp1:	
  3665                           
  3666                           ; 1 bytes @ 0x2A
  3667  004A                     	ds	1
  3668  004B                     ?___fttol:	
  3669  004B                     ___fttol@f1:	
  3670                           ; 4 bytes @ 0x2B
  3671                           
  3672                           
  3673                           ; 3 bytes @ 0x2B
  3674  004B                     	ds	4
  3675  004F                     ??___fttol:	
  3676                           
  3677                           ; 0 bytes @ 0x2F
  3678  004F                     	ds	4
  3679  0053                     ___fttol@sign1:	
  3680                           
  3681                           ; 1 bytes @ 0x33
  3682  0053                     	ds	1
  3683  0054                     ___fttol@lval:	
  3684                           
  3685                           ; 4 bytes @ 0x34
  3686  0054                     	ds	4
  3687  0058                     ___fttol@exp1:	
  3688                           
  3689                           ; 1 bytes @ 0x38
  3690  0058                     	ds	1
  3691  0059                     ??_getPercentValue:	
  3692  0059                     ??_setPercentValue:	
  3693                           ; 0 bytes @ 0x39
  3694                           
  3695  0059                     setPercentValue@value:	
  3696                           ; 0 bytes @ 0x39
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x39
  3700  0059                     	ds	1
  3701  005A                     setPercentValue@i:	
  3702                           
  3703                           ; 3 bytes @ 0x3A
  3704  005A                     	ds	1
  3705  005B                     getPercentValue@value:	
  3706                           
  3707                           ; 1 bytes @ 0x3B
  3708  005B                     	ds	1
  3709  005C                     getPercentValue@i:	
  3710                           
  3711                           ; 3 bytes @ 0x3C
  3712  005C                     	ds	1
  3713  005D                     ?_setDimmerLights_Adj:	
  3714  005D                     ??_Flash_Memory_Initialization:	
  3715                           ; 0 bytes @ 0x3D
  3716                           
  3717  005D                     setDimmerLights_Adj@status:	
  3718                           ; 0 bytes @ 0x3D
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x3D
  3722  005D                     	ds	1
  3723  005E                     ??_setDimmerLights_Adj:	
  3724  005E                     Flash_Memory_Initialization@i:	
  3725                           ; 0 bytes @ 0x3E
  3726                           
  3727                           
  3728                           ; 1 bytes @ 0x3E
  3729  005E                     	ds	1
  3730  005F                     ??_setDimmerLights_Initialization:	
  3731  005F                     ??_setDimmerLights_AdjRF:	
  3732                           ; 0 bytes @ 0x3F
  3733                           
  3734                           
  3735                           ; 0 bytes @ 0x3F
  3736  005F                     	ds	1
  3737  0060                     setDimmerLights_Adj@lights:	
  3738  0060                     setDimmerLights_AdjRF@lights:	
  3739                           ; 1 bytes @ 0x40
  3740                           
  3741                           
  3742                           ; 1 bytes @ 0x40
  3743  0060                     	ds	1
  3744  0061                     ??_setDimmerLights_Main:	
  3745  0061                     ??_setRF_DimmerValue:	
  3746                           ; 0 bytes @ 0x41
  3747                           
  3748  0061                     setDimmerLights_Initialization@lights:	
  3749                           ; 0 bytes @ 0x41
  3750                           
  3751  0061                     setDimmerLights_Main@clear:	
  3752                           ; 1 bytes @ 0x41
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x41
  3756  0061                     	ds	1
  3757  0062                     ??_DimmerLights_Initialization:	
  3758  0062                     setDimmerLights_Main@lights:	
  3759                           ; 0 bytes @ 0x42
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0x42
  3763  0062                     	ds	1
  3764  0063                     ??_DimmerLights_Main:	
  3765  0063                     setRF_DimmerValue@lights:	
  3766                           ; 0 bytes @ 0x43
  3767                           
  3768                           
  3769                           ; 1 bytes @ 0x43
  3770  0063                     	ds	1
  3771  0064                     ??_setRFSW_AdjControl:	
  3772                           
  3773                           ; 0 bytes @ 0x44
  3774  0064                     	ds	2
  3775  0066                     setRFSW_AdjControl@sw:	
  3776                           
  3777                           ; 1 bytes @ 0x46
  3778  0066                     	ds	1
  3779  0067                     ??_setControl_Lights_Table:	
  3780  0067                     setControl_Lights_Table@rf:	
  3781                           ; 0 bytes @ 0x47
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x47
  3785  0067                     	ds	1
  3786  0068                     ??_getRxData:	
  3787  0068                     getRxData@rf:	
  3788                           ; 0 bytes @ 0x48
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0x48
  3792  0068                     	ds	1
  3793  0069                     ??_setRF_Main:	
  3794                           
  3795                           ; 0 bytes @ 0x49
  3796  0069                     	ds	1
  3797  006A                     setRF_Main@rf:	
  3798                           
  3799                           ; 1 bytes @ 0x4A
  3800  006A                     	ds	1
  3801  006B                     _setRF_Main$4359:	
  3802                           
  3803                           ; 1 bytes @ 0x4B
  3804  006B                     	ds	1
  3805  006C                     ??_RF_Main:	
  3806  006C                     ??_main:	
  3807                           ; 0 bytes @ 0x4C
  3808                           
  3809                           
  3810                           	psect	maintext
  3811  130A                     __pmaintext:	
  3812                           ; 0 bytes @ 0x4C
  3813 ;;
  3814 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3815 ;;
  3816 ;; *************** function _main *****************
  3817 ;; Defined at:
  3818 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;		None               void
  3825 ;; Registers used:
  3826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 17F/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;Total ram usage:        0 bytes
  3837 ;; Hardware stack levels required when called:   14
  3838 ;; This function calls:
  3839 ;;		_Buzzer_Initialization
  3840 ;;		_Buzzer_Main
  3841 ;;		_CC2500_PowerOnInitial
  3842 ;;		_DelayOff_Initialization
  3843 ;;		_DelayOff_Main
  3844 ;;		_DimmerLights_Initialization
  3845 ;;		_DimmerLights_Main
  3846 ;;		_Flash_Memory_Initialization
  3847 ;;		_Flash_Memory_Main
  3848 ;;		_LED_Initialization
  3849 ;;		_LED_Main
  3850 ;;		_Load_Initialization
  3851 ;;		_Load_Main
  3852 ;;		_MainT
  3853 ;;		_MainT_Initialization
  3854 ;;		_Mcu_Initialization
  3855 ;;		_PowerFault_Initialization
  3856 ;;		_PowerFault_Main
  3857 ;;		_RF_Initialization
  3858 ;;		_RF_Main
  3859 ;;		_Switch_Initialization
  3860 ;;		_Switch_Main
  3861 ;;		_Temp_Initialization
  3862 ;;		_Temp_Main
  3863 ;;		_getLoad_AD
  3864 ;;		_getPowerFault_AD
  3865 ;;		_getTemp_AD
  3866 ;; This function is called by:
  3867 ;;		Startup code after reset
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _main
  3873  130A                     _main:	
  3874                           
  3875                           ;main.c: 9: MainT_Initialization();
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3879  130A  31A4  2449  3193   	fcall	_MainT_Initialization
  3880                           
  3881                           ;main.c: 10: Mcu_Initialization();
  3882  130D  31A6  265A  3193   	fcall	_Mcu_Initialization
  3883                           
  3884                           ;main.c: 11: Flash_Memory_Initialization();
  3885  1310  318C  24D7  3193   	fcall	_Flash_Memory_Initialization
  3886                           
  3887                           ;main.c: 12: LED_Initialization();
  3888  1313  31A4  249A  3193   	fcall	_LED_Initialization
  3889                           
  3890                           ;main.c: 13: Buzzer_Initialization();
  3891  1316  31A4  2407  3193   	fcall	_Buzzer_Initialization
  3892                           
  3893                           ;main.c: 15: ;;
  3894                           ;main.c: 16: Temp_Initialization();
  3895  1319  31A3  237F  3193   	fcall	_Temp_Initialization
  3896                           
  3897                           ;main.c: 17: Load_Initialization();
  3898  131C  31A4  24B2  3193   	fcall	_Load_Initialization
  3899                           
  3900                           ;main.c: 18: PowerFault_Initialization();
  3901  131F  31A3  2379  3193   	fcall	_PowerFault_Initialization
  3902                           
  3903                           ;main.c: 19: DelayOff_Initialization();
  3904  1322  31A3  23C3  3193   	fcall	_DelayOff_Initialization
  3905                           
  3906                           ;main.c: 21: DimmerLights_Initialization();
  3907  1325  31A5  25ED  3193   	fcall	_DimmerLights_Initialization
  3908                           
  3909                           ;main.c: 22: ;;
  3910                           ;main.c: 23: ;;
  3911                           ;main.c: 24: ;;
  3912                           ;main.c: 26: Switch_Initialization();
  3913  1328  31A4  24D9  3193   	fcall	_Switch_Initialization
  3914                           
  3915                           ;main.c: 27: RF_Initialization();
  3916  132B  31A3  2391  3193   	fcall	_RF_Initialization
  3917                           
  3918                           ;main.c: 28: CC2500_PowerOnInitial();
  3919  132E  31A5  25D8  3193   	fcall	_CC2500_PowerOnInitial
  3920  1331                     l10120:	
  3921                           ;main.c: 30: while(1)
  3922                           
  3923                           
  3924                           ;main.c: 31: {
  3925                           ;main.c: 32: if(TMain->PowerON)
  3926  1331  0021               	movlb	1	; select bank1
  3927  1332  0869               	movf	_TMain^(0+128),w
  3928  1333  0086               	movwf	6
  3929  1334  3001               	movlw	1	; select bank2/3
  3930  1335  0087               	movwf	7
  3931  1336  1C01               	btfss	1,0
  3932  1337  2B47               	goto	l10124
  3933                           
  3934                           ;main.c: 33: {
  3935                           ;main.c: 35: ;;
  3936                           ;main.c: 39: getLoad_AD(0x05);
  3937  1338  3005               	movlw	5
  3938  1339  3188  207D  3193   	fcall	_getLoad_AD
  3939                           
  3940                           ;main.c: 43: getTemp_AD(0x09);
  3941  133C  3009               	movlw	9
  3942  133D  3192  2230  3193   	fcall	_getTemp_AD
  3943                           
  3944                           ;main.c: 47: getPowerFault_AD(0x11);
  3945  1340  3011               	movlw	17
  3946  1341  319B  23F3  3193   	fcall	_getPowerFault_AD
  3947                           
  3948                           ;main.c: 59: Buzzer_Main();
  3949  1344  3189  2113  3193   	fcall	_Buzzer_Main
  3950  1347                     l10124:	
  3951                           
  3952                           ;main.c: 61: }
  3953                           ;main.c: 63: if(TMain->T0_Timerout)
  3954  1347  0021               	movlb	1	; select bank1
  3955  1348  0869               	movf	_TMain^(0+128),w
  3956  1349  0086               	movwf	6
  3957  134A  3001               	movlw	1	; select bank2/3
  3958  134B  0087               	movwf	7
  3959  134C  1C81               	btfss	1,1
  3960  134D  2B31               	goto	l10120
  3961                           
  3962                           ;main.c: 64: {
  3963                           ;main.c: 65: TMain->T0_Timerout = 0;
  3964  134E  0869               	movf	_TMain^(0+128),w
  3965  134F  0086               	movwf	6
  3966  1350  3001               	movlw	1	; select bank2/3
  3967  1351  0087               	movwf	7
  3968  1352  1081               	bcf	1,1
  3969                           
  3970                           ;main.c: 66: MainT();
  3971  1353  3194  2461  3193   	fcall	_MainT
  3972                           
  3973                           ;main.c: 67: if(TMain->PowerON)
  3974  1356  0021               	movlb	1	; select bank1
  3975  1357  0869               	movf	_TMain^(0+128),w
  3976  1358  0086               	movwf	6
  3977  1359  3001               	movlw	1	; select bank2/3
  3978  135A  0087               	movwf	7
  3979  135B  1C01               	btfss	1,0
  3980  135C  2B31               	goto	l10120
  3981                           
  3982                           ;main.c: 68: {
  3983                           ;main.c: 69: Flash_Memory_Main();
  3984  135D  3190  20A0  3193   	fcall	_Flash_Memory_Main
  3985                           
  3986                           ;main.c: 71: LED_Main();
  3987  1360  31A4  24A6  3193   	fcall	_LED_Main
  3988                           
  3989                           ;main.c: 73: ;;
  3990                           ;main.c: 74: Temp_Main();
  3991  1363  31A3  2382  3193   	fcall	_Temp_Main
  3992                           
  3993                           ;main.c: 75: Load_Main();
  3994  1366  3183  23A4  3193   	fcall	_Load_Main
  3995                           
  3996                           ;main.c: 76: PowerFault_Main();
  3997  1369  31A3  237C  3193   	fcall	_PowerFault_Main
  3998                           
  3999                           ;main.c: 78: ;;
  4000                           ;main.c: 79: DimmerLights_Main();
  4001  136C  31A4  2433  3193   	fcall	_DimmerLights_Main
  4002                           
  4003                           ;main.c: 80: Switch_Main();
  4004  136F  31A3  23E3  3193   	fcall	_Switch_Main
  4005                           
  4006                           ;main.c: 81: ;;
  4007                           ;main.c: 82: ;;
  4008                           ;main.c: 84: RF_Main();
  4009  1372  3187  27FC  3193   	fcall	_RF_Main
  4010                           
  4011                           ;main.c: 85: DelayOff_Main();
  4012  1375  31A3  23CB  3193   	fcall	_DelayOff_Main
  4013  1378  2B31               	goto	l10120
  4014  1379                     __end_of_main:	
  4015                           
  4016                           	psect	text1
  4017  1230                     __ptext1:	
  4018 ;; *************** function _getTemp_AD *****************
  4019 ;; Defined at:
  4020 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  channel         1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  channel         1    8[BANK0 ] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;Total ram usage:        5 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    5
  4041 ;; This function calls:
  4042 ;;		_getAD
  4043 ;; This function is called by:
  4044 ;;		_main
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _getTemp_AD
  4050  1230                     _getTemp_AD:	
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4054                           ;getTemp_AD@channel stored from wreg
  4055  1230  0020               	movlb	0	; select bank0
  4056  1231  00A8               	movwf	getTemp_AD@channel
  4057                           
  4058                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4059  1232  087D               	movf	_Temp,w
  4060  1233  0086               	movwf	6
  4061  1234  3001               	movlw	1	; select bank2/3
  4062  1235  0087               	movwf	7
  4063  1236  1D01               	btfss	1,2
  4064  1237  0008               	return
  4065                           
  4066                           ;OverTemperature_B1.c: 38: {
  4067                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4068  1238  30F0               	movlw	240
  4069  1239  00A4               	movwf	??_getTemp_AD
  4070  123A  0824               	movf	??_getTemp_AD,w
  4071  123B  00A0               	movwf	getAD@adcon1
  4072  123C  0828               	movf	getTemp_AD@channel,w
  4073  123D  3198  2066  3192   	fcall	_getAD
  4074  1240  087D               	movf	_Temp,w
  4075  1241  3E0A               	addlw	10
  4076  1242  0086               	movwf	6
  4077  1243  3001               	movlw	1	; select bank2/3
  4078  1244  0087               	movwf	7
  4079  1245  0020               	movlb	0	; select bank0
  4080  1246  0820               	movf	?_getAD,w
  4081  1247  3FC0               	movwi [0]fsr1
  4082  1248  0821               	movf	?_getAD+1,w
  4083  1249  3FC1               	movwi [1]fsr1
  4084                           
  4085                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4086  124A  087D               	movf	_Temp,w
  4087  124B  3E0A               	addlw	10
  4088  124C  0086               	movwf	6
  4089  124D  3001               	movlw	1	; select bank2/3
  4090  124E  0087               	movwf	7
  4091  124F  3F40               	moviw [0]fsr1
  4092  1250  00A4               	movwf	??_getTemp_AD
  4093  1251  3F41               	moviw [1]fsr1
  4094  1252  00A5               	movwf	??_getTemp_AD+1
  4095  1253  087D               	movf	_Temp,w
  4096  1254  3E06               	addlw	6
  4097  1255  0086               	movwf	6
  4098  1256  3001               	movlw	1	; select bank2/3
  4099  1257  0087               	movwf	7
  4100  1258  3F40               	moviw [0]fsr1
  4101  1259  00A6               	movwf	??_getTemp_AD+2
  4102  125A  3F41               	moviw [1]fsr1
  4103  125B  00A7               	movwf	??_getTemp_AD+3
  4104  125C  0825               	movf	??_getTemp_AD+1,w
  4105  125D  0227               	subwf	??_getTemp_AD+3,w
  4106  125E  1D03               	skipz
  4107  125F  2A62               	goto	u9935
  4108  1260  0824               	movf	??_getTemp_AD,w
  4109  1261  0226               	subwf	??_getTemp_AD+2,w
  4110  1262                     u9935:	
  4111  1262  1803               	skipnc
  4112  1263  2A73               	goto	l9902
  4113                           
  4114                           ;OverTemperature_B1.c: 41: {
  4115                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4116  1264  087D               	movf	_Temp,w
  4117  1265  3E0A               	addlw	10
  4118  1266  0086               	movwf	6
  4119  1267  3001               	movlw	1	; select bank2/3
  4120  1268  0087               	movwf	7
  4121  1269  087D               	movf	_Temp,w
  4122  126A  3E06               	addlw	6
  4123  126B  0084               	movwf	4
  4124  126C  3001               	movlw	1	; select bank2/3
  4125  126D  0085               	movwf	5
  4126  126E  3F40               	moviw [0]fsr1
  4127  126F  3F80               	movwi [0]fsr0
  4128  1270  3F41               	moviw [1]fsr1
  4129  1271  3F81               	movwi [1]fsr0
  4130                           
  4131                           ;OverTemperature_B1.c: 43: }
  4132  1272  0008               	return
  4133  1273                     l9902:	
  4134                           
  4135                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4136  1273  087D               	movf	_Temp,w
  4137  1274  3E0A               	addlw	10
  4138  1275  0086               	movwf	6
  4139  1276  3001               	movlw	1	; select bank2/3
  4140  1277  0087               	movwf	7
  4141  1278  3F40               	moviw [0]fsr1
  4142  1279  00A4               	movwf	??_getTemp_AD
  4143  127A  3F41               	moviw [1]fsr1
  4144  127B  00A5               	movwf	??_getTemp_AD+1
  4145  127C  087D               	movf	_Temp,w
  4146  127D  3E08               	addlw	8
  4147  127E  0086               	movwf	6
  4148  127F  3001               	movlw	1	; select bank2/3
  4149  1280  0087               	movwf	7
  4150  1281  3F40               	moviw [0]fsr1
  4151  1282  00A6               	movwf	??_getTemp_AD+2
  4152  1283  3F41               	moviw [1]fsr1
  4153  1284  00A7               	movwf	??_getTemp_AD+3
  4154  1285  0825               	movf	??_getTemp_AD+1,w
  4155  1286  0227               	subwf	??_getTemp_AD+3,w
  4156  1287  1D03               	skipz
  4157  1288  2A8B               	goto	u9945
  4158  1289  0824               	movf	??_getTemp_AD,w
  4159  128A  0226               	subwf	??_getTemp_AD+2,w
  4160  128B                     u9945:	
  4161  128B  1803               	skipnc
  4162  128C  0008               	return
  4163                           
  4164                           ;OverTemperature_B1.c: 45: {
  4165                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4166  128D  087D               	movf	_Temp,w
  4167  128E  3E0A               	addlw	10
  4168  128F  0086               	movwf	6
  4169  1290  3001               	movlw	1	; select bank2/3
  4170  1291  0087               	movwf	7
  4171  1292  087D               	movf	_Temp,w
  4172  1293  3E08               	addlw	8
  4173  1294  0084               	movwf	4
  4174  1295  3001               	movlw	1	; select bank2/3
  4175  1296  0085               	movwf	5
  4176  1297  3F40               	moviw [0]fsr1
  4177  1298  3F80               	movwi [0]fsr0
  4178  1299  3F41               	moviw [1]fsr1
  4179  129A  3F81               	movwi [1]fsr0
  4180  129B  0008               	return
  4181  129C                     __end_of_getTemp_AD:	
  4182                           
  4183                           	psect	text2
  4184  1BF3                     __ptext2:	
  4185 ;; *************** function _getPowerFault_AD *****************
  4186 ;; Defined at:
  4187 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  channel         1    wreg     unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  channel         1    8[BANK0 ] unsigned char 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        5 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    5
  4208 ;; This function calls:
  4209 ;;		_getAD
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _getPowerFault_AD
  4217  1BF3                     _getPowerFault_AD:	
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4221                           ;getPowerFault_AD@channel stored from wreg
  4222  1BF3  0020               	movlb	0	; select bank0
  4223  1BF4  00A8               	movwf	getPowerFault_AD@channel
  4224                           
  4225                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4226  1BF5  087B               	movf	_PF,w
  4227  1BF6  0086               	movwf	6
  4228  1BF7  3001               	movlw	1	; select bank2/3
  4229  1BF8  0087               	movwf	7
  4230  1BF9  1D81               	btfss	1,3
  4231  1BFA  0008               	return
  4232                           
  4233                           ;PowerFault_B1.c: 52: {
  4234                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4235  1BFB  30F0               	movlw	240
  4236  1BFC  00A4               	movwf	??_getPowerFault_AD
  4237  1BFD  0824               	movf	??_getPowerFault_AD,w
  4238  1BFE  00A0               	movwf	getAD@adcon1
  4239  1BFF  0828               	movf	getPowerFault_AD@channel,w
  4240  1C00  3198  2066  319B   	fcall	_getAD
  4241  1C03  087B               	movf	_PF,w
  4242  1C04  3E03               	addlw	3
  4243  1C05  0086               	movwf	6
  4244  1C06  3001               	movlw	1	; select bank2/3
  4245  1C07  0087               	movwf	7
  4246  1C08  0020               	movlb	0	; select bank0
  4247  1C09  0820               	movf	?_getAD,w
  4248  1C0A  3FC0               	movwi [0]fsr1
  4249  1C0B  0821               	movf	?_getAD+1,w
  4250  1C0C  3FC1               	movwi [1]fsr1
  4251                           
  4252                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4253  1C0D  087B               	movf	_PF,w
  4254  1C0E  3E03               	addlw	3
  4255  1C0F  0086               	movwf	6
  4256  1C10  3001               	movlw	1	; select bank2/3
  4257  1C11  0087               	movwf	7
  4258  1C12  3F40               	moviw [0]fsr1
  4259  1C13  00A4               	movwf	??_getPowerFault_AD
  4260  1C14  3F41               	moviw [1]fsr1
  4261  1C15  00A5               	movwf	??_getPowerFault_AD+1
  4262  1C16  0A7B               	incf	_PF,w
  4263  1C17  0086               	movwf	6
  4264  1C18  3001               	movlw	1	; select bank2/3
  4265  1C19  0087               	movwf	7
  4266  1C1A  3F40               	moviw [0]fsr1
  4267  1C1B  00A6               	movwf	??_getPowerFault_AD+2
  4268  1C1C  3F41               	moviw [1]fsr1
  4269  1C1D  00A7               	movwf	??_getPowerFault_AD+3
  4270  1C1E  0825               	movf	??_getPowerFault_AD+1,w
  4271  1C1F  0227               	subwf	??_getPowerFault_AD+3,w
  4272  1C20  1D03               	skipz
  4273  1C21  2C24               	goto	u9965
  4274  1C22  0824               	movf	??_getPowerFault_AD,w
  4275  1C23  0226               	subwf	??_getPowerFault_AD+2,w
  4276  1C24                     u9965:	
  4277  1C24  1803               	skipnc
  4278  1C25  0008               	return
  4279                           
  4280                           ;PowerFault_B1.c: 55: {
  4281                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4282  1C26  087B               	movf	_PF,w
  4283  1C27  3E03               	addlw	3
  4284  1C28  0086               	movwf	6
  4285  1C29  3001               	movlw	1	; select bank2/3
  4286  1C2A  0087               	movwf	7
  4287  1C2B  0A7B               	incf	_PF,w
  4288  1C2C  0084               	movwf	4
  4289  1C2D  3001               	movlw	1	; select bank2/3
  4290  1C2E  0085               	movwf	5
  4291  1C2F  3F40               	moviw [0]fsr1
  4292  1C30  3F80               	movwi [0]fsr0
  4293  1C31  3F41               	moviw [1]fsr1
  4294  1C32  3F81               	movwi [1]fsr0
  4295  1C33  0008               	return
  4296  1C34                     __end_of_getPowerFault_AD:	
  4297                           
  4298                           	psect	text3
  4299  087D                     __ptext3:	
  4300 ;; *************** function _getLoad_AD *****************
  4301 ;; Defined at:
  4302 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  channel         1    wreg     unsigned char 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  channel         1    9[BANK0 ] unsigned char 
  4307 ;;  i               1   11[BANK0 ] unsigned char 
  4308 ;;  j               1   10[BANK0 ] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;Total ram usage:        8 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    5
  4325 ;; This function calls:
  4326 ;;		_getAD
  4327 ;; This function is called by:
  4328 ;;		_main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function _getLoad_AD
  4334  087D                     _getLoad_AD:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4338                           ;getLoad_AD@channel stored from wreg
  4339  087D  0020               	movlb	0	; select bank0
  4340  087E  00A9               	movwf	getLoad_AD@channel
  4341                           
  4342                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4343  087F  01AB               	clrf	getLoad_AD@i
  4344  0880  01AA               	clrf	getLoad_AD@j
  4345                           
  4346                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4347  0881  086E               	movf	_Load,w
  4348  0882  0086               	movwf	6
  4349  0883  3002               	movlw	2	; select bank4/5
  4350  0884  0087               	movwf	7
  4351  0885  1E01               	btfss	1,4
  4352  0886  0008               	return
  4353                           
  4354                           ;OverLoad_B1.c: 20: {
  4355                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4356  0887  30C0               	movlw	192
  4357  0888  00A4               	movwf	??_getLoad_AD
  4358  0889  0824               	movf	??_getLoad_AD,w
  4359  088A  00A0               	movwf	getAD@adcon1
  4360  088B  0829               	movf	getLoad_AD@channel,w
  4361  088C  3198  2066  3188   	fcall	_getAD
  4362  088F  0020               	movlb	0	; select bank0
  4363  0890  086E               	movf	_Load,w
  4364  0891  3E32               	addlw	50
  4365  0892  0086               	movwf	6
  4366  0893  3002               	movlw	2	; select bank4/5
  4367  0894  0087               	movwf	7
  4368  0895  0820               	movf	?_getAD,w
  4369  0896  3FC0               	movwi [0]fsr1
  4370  0897  0821               	movf	?_getAD+1,w
  4371  0898  3FC1               	movwi [1]fsr1
  4372                           
  4373                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4374  0899  01AB               	clrf	getLoad_AD@i
  4375  089A  3005               	movlw	5
  4376  089B  022B               	subwf	getLoad_AD@i,w
  4377  089C  1803               	btfsc	3,0
  4378  089D  28D7               	goto	l9878
  4379  089E                     l9868:	
  4380                           
  4381                           ;OverLoad_B1.c: 23: {
  4382                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4383  089E  086E               	movf	_Load,w
  4384  089F  3E32               	addlw	50
  4385  08A0  0086               	movwf	6
  4386  08A1  3002               	movlw	2	; select bank4/5
  4387  08A2  0087               	movwf	7
  4388  08A3  3F40               	moviw [0]fsr1
  4389  08A4  00A4               	movwf	??_getLoad_AD
  4390  08A5  3F41               	moviw [1]fsr1
  4391  08A6  00A5               	movwf	??_getLoad_AD+1
  4392  08A7  352B               	lslf	getLoad_AD@i,w
  4393  08A8  3E08               	addlw	8
  4394  08A9  076E               	addwf	_Load,w
  4395  08AA  00A6               	movwf	??_getLoad_AD+2
  4396  08AB  0826               	movf	??_getLoad_AD+2,w
  4397  08AC  0086               	movwf	6
  4398  08AD  3002               	movlw	2	; select bank4/5
  4399  08AE  0087               	movwf	7
  4400  08AF  3F40               	moviw [0]fsr1
  4401  08B0  00A7               	movwf	??_getLoad_AD+3
  4402  08B1  3F41               	moviw [1]fsr1
  4403  08B2  00A8               	movwf	??_getLoad_AD+4
  4404  08B3  0825               	movf	??_getLoad_AD+1,w
  4405  08B4  0228               	subwf	??_getLoad_AD+4,w
  4406  08B5  1D03               	skipz
  4407  08B6  28B9               	goto	u9865
  4408  08B7  0824               	movf	??_getLoad_AD,w
  4409  08B8  0227               	subwf	??_getLoad_AD+3,w
  4410  08B9                     u9865:	
  4411  08B9  1803               	skipnc
  4412  08BA  28CF               	goto	l9874
  4413                           
  4414                           ;OverLoad_B1.c: 25: {
  4415                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4416  08BB  086E               	movf	_Load,w
  4417  08BC  3E32               	addlw	50
  4418  08BD  0086               	movwf	6
  4419  08BE  3002               	movlw	2	; select bank4/5
  4420  08BF  0087               	movwf	7
  4421  08C0  352B               	lslf	getLoad_AD@i,w
  4422  08C1  3E08               	addlw	8
  4423  08C2  076E               	addwf	_Load,w
  4424  08C3  00A4               	movwf	??_getLoad_AD
  4425  08C4  0824               	movf	??_getLoad_AD,w
  4426  08C5  0084               	movwf	4
  4427  08C6  3002               	movlw	2	; select bank4/5
  4428  08C7  0085               	movwf	5
  4429  08C8  3F40               	moviw [0]fsr1
  4430  08C9  3F80               	movwi [0]fsr0
  4431  08CA  3F41               	moviw [1]fsr1
  4432  08CB  3F81               	movwi [1]fsr0
  4433                           
  4434                           ;OverLoad_B1.c: 27: j=1;
  4435  08CC  01AA               	clrf	getLoad_AD@j
  4436  08CD  0AAA               	incf	getLoad_AD@j,f
  4437                           
  4438                           ;OverLoad_B1.c: 28: break;
  4439  08CE  28D7               	goto	l9878
  4440  08CF                     l9874:	
  4441  08CF  3001               	movlw	1
  4442  08D0  00A4               	movwf	??_getLoad_AD
  4443  08D1  0824               	movf	??_getLoad_AD,w
  4444  08D2  07AB               	addwf	getLoad_AD@i,f
  4445  08D3  3005               	movlw	5
  4446  08D4  022B               	subwf	getLoad_AD@i,w
  4447  08D5  1C03               	skipc
  4448  08D6  289E               	goto	l9868
  4449  08D7                     l9878:	
  4450                           
  4451                           ;OverLoad_B1.c: 29: }
  4452                           ;OverLoad_B1.c: 30: }
  4453                           ;OverLoad_B1.c: 31: if(!j)
  4454  08D7  08AA               	movf	getLoad_AD@j,f
  4455  08D8  1D03               	skipz
  4456  08D9  0008               	return
  4457                           
  4458                           ;OverLoad_B1.c: 32: {
  4459                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4460  08DA  01AB               	clrf	getLoad_AD@i
  4461  08DB                     L1:	
  4462  08DB  3005               	movlw	5
  4463  08DC  022B               	subwf	getLoad_AD@i,w
  4464  08DD  1803               	btfsc	3,0
  4465  08DE  0008               	return
  4466                           
  4467                           ;OverLoad_B1.c: 34: {
  4468                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4469  08DF  352B               	lslf	getLoad_AD@i,w
  4470  08E0  3E1A               	addlw	26
  4471  08E1  076E               	addwf	_Load,w
  4472  08E2  00A4               	movwf	??_getLoad_AD
  4473  08E3  0824               	movf	??_getLoad_AD,w
  4474  08E4  0086               	movwf	6
  4475  08E5  3002               	movlw	2	; select bank4/5
  4476  08E6  0087               	movwf	7
  4477  08E7  3F40               	moviw [0]fsr1
  4478  08E8  00A5               	movwf	??_getLoad_AD+1
  4479  08E9  3F41               	moviw [1]fsr1
  4480  08EA  00A6               	movwf	??_getLoad_AD+2
  4481  08EB  086E               	movf	_Load,w
  4482  08EC  3E32               	addlw	50
  4483  08ED  0086               	movwf	6
  4484  08EE  3002               	movlw	2	; select bank4/5
  4485  08EF  0087               	movwf	7
  4486  08F0  3F40               	moviw [0]fsr1
  4487  08F1  00A7               	movwf	??_getLoad_AD+3
  4488  08F2  3F41               	moviw [1]fsr1
  4489  08F3  00A8               	movwf	??_getLoad_AD+4
  4490  08F4  0826               	movf	??_getLoad_AD+2,w
  4491  08F5  0228               	subwf	??_getLoad_AD+4,w
  4492  08F6  1D03               	skipz
  4493  08F7  28FA               	goto	u9905
  4494  08F8  0825               	movf	??_getLoad_AD+1,w
  4495  08F9  0227               	subwf	??_getLoad_AD+3,w
  4496  08FA                     u9905:	
  4497  08FA  1803               	skipnc
  4498  08FB  290E               	goto	l9890
  4499                           
  4500                           ;OverLoad_B1.c: 36: {
  4501                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4502  08FC  086E               	movf	_Load,w
  4503  08FD  3E32               	addlw	50
  4504  08FE  0086               	movwf	6
  4505  08FF  3002               	movlw	2	; select bank4/5
  4506  0900  0087               	movwf	7
  4507  0901  352B               	lslf	getLoad_AD@i,w
  4508  0902  3E1A               	addlw	26
  4509  0903  076E               	addwf	_Load,w
  4510  0904  00A4               	movwf	??_getLoad_AD
  4511  0905  0824               	movf	??_getLoad_AD,w
  4512  0906  0084               	movwf	4
  4513  0907  3002               	movlw	2	; select bank4/5
  4514  0908  0085               	movwf	5
  4515  0909  3F40               	moviw [0]fsr1
  4516  090A  3F80               	movwi [0]fsr0
  4517  090B  3F41               	moviw [1]fsr1
  4518  090C  3F81               	movwi [1]fsr0
  4519                           
  4520                           ;OverLoad_B1.c: 38: break;
  4521  090D  0008               	return
  4522  090E                     l9890:	
  4523  090E  3001               	movlw	1
  4524  090F  00A4               	movwf	??_getLoad_AD
  4525  0910  0824               	movf	??_getLoad_AD,w
  4526  0911  07AB               	addwf	getLoad_AD@i,f
  4527  0912  28DB               	goto	L1
  4528  0913                     __end_of_getLoad_AD:	
  4529                           
  4530                           	psect	text4
  4531  1866                     __ptext4:	
  4532 ;; *************** function _getAD *****************
  4533 ;; Defined at:
  4534 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  adcon0          1    wreg     unsigned char 
  4537 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  2    0[BANK0 ] int 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;Total ram usage:        4 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    4
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_getLoad_AD
  4560 ;;		_getTemp_AD
  4561 ;;		_getPowerFault_AD
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           
  4566                           ;psect for function _getAD
  4567  1866                     _getAD:	
  4568                           
  4569                           ;incstack = 0
  4570                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4571                           ;getAD@adcon0 stored from wreg
  4572  1866  0020               	movlb	0	; select bank0
  4573  1867  00A3               	movwf	getAD@adcon0
  4574                           
  4575                           ;MCU_16f1518_B1.c: 311: ADCON0=adcon0;
  4576  1868  0823               	movf	getAD@adcon0,w
  4577  1869  0021               	movlb	1	; select bank1
  4578  186A  009D               	movwf	29	;volatile
  4579                           
  4580                           ;MCU_16f1518_B1.c: 312: ADCON1=adcon1;
  4581  186B  0020               	movlb	0	; select bank0
  4582  186C  0820               	movf	getAD@adcon1,w
  4583  186D  0021               	movlb	1	; select bank1
  4584  186E  009E               	movwf	30	;volatile
  4585                           
  4586                           ;MCU_16f1518_B1.c: 313: GO_nDONE=1;
  4587  186F  149D               	bsf	29,1	;volatile
  4588  1870                     l1720:	
  4589                           ;MCU_16f1518_B1.c: 314: while(GO_nDONE);
  4590                           
  4591  1870  189D               	btfsc	29,1	;volatile
  4592  1871  2870               	goto	l1720
  4593                           
  4594                           ;MCU_16f1518_B1.c: 315: return ((ADRESH*256)+ADRESL);
  4595  1872  081C               	movf	28,w	;volatile
  4596  1873  0020               	movlb	0	; select bank0
  4597  1874  01A1               	clrf	?_getAD+1
  4598  1875  07A1               	addwf	?_getAD+1,f
  4599  1876  0021               	movlb	1	; select bank1
  4600  1877  081B               	movf	27,w	;volatile
  4601  1878  0020               	movlb	0	; select bank0
  4602  1879  01A0               	clrf	?_getAD
  4603  187A  07A0               	addwf	?_getAD,f
  4604  187B  0008               	return
  4605  187C                     __end_of_getAD:	
  4606                           
  4607                           	psect	text5
  4608  2382                     __ptext5:	
  4609 ;; *************** function _Temp_Main *****************
  4610 ;; Defined at:
  4611 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;		None               void
  4618 ;; Registers used:
  4619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;Total ram usage:        0 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:   10
  4632 ;; This function calls:
  4633 ;;		_setTemp_Main
  4634 ;; This function is called by:
  4635 ;;		_main
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _Temp_Main
  4641  2382                     _Temp_Main:	
  4642                           
  4643                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4647  2382  318E  26DD         	fcall	_setTemp_Main
  4648  2384  0008               	return
  4649  2385                     __end_of_Temp_Main:	
  4650                           
  4651                           	psect	text6
  4652  0EDD                     __ptext6:	
  4653 ;; *************** function _setTemp_Main *****************
  4654 ;; Defined at:
  4655 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;		None
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;		None
  4660 ;; Return value:  Size  Location     Type
  4661 ;;		None               void
  4662 ;; Registers used:
  4663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;Total ram usage:        3 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    9
  4676 ;; This function calls:
  4677 ;;		_getLoad_Safe
  4678 ;;		_getPF_Safe
  4679 ;;		_setOverTemp_Exceptions
  4680 ;; This function is called by:
  4681 ;;		_Temp_Main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           
  4686                           ;psect for function _setTemp_Main
  4687  0EDD                     _setTemp_Main:	
  4688                           
  4689                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4693  0EDD  087D               	movf	_Temp,w
  4694  0EDE  0086               	movwf	6
  4695  0EDF  3001               	movlw	1	; select bank2/3
  4696  0EE0  0087               	movwf	7
  4697  0EE1  1C01               	btfss	1,0
  4698  0EE2  0008               	return
  4699                           
  4700                           ;OverTemperature_B1.c: 67: {
  4701                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4702  0EE3  087D               	movf	_Temp,w
  4703  0EE4  0086               	movwf	6
  4704  0EE5  3001               	movlw	1	; select bank2/3
  4705  0EE6  0087               	movwf	7
  4706  0EE7  1901               	btfsc	1,2
  4707  0EE8  2F29               	goto	l9502
  4708                           
  4709                           ;OverTemperature_B1.c: 69: {
  4710                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4711  0EE9  0A7D               	incf	_Temp,w
  4712  0EEA  0086               	movwf	6
  4713  0EEB  3001               	movlw	1	; select bank2/3
  4714  0EEC  0087               	movwf	7
  4715  0EED  3001               	movlw	1
  4716  0EEE  0781               	addwf	1,f
  4717  0EEF  3141               	addfsr 1,1
  4718  0EF0  1803               	skipnc
  4719  0EF1  0A81               	incf	1,f
  4720                           
  4721                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4722  0EF2  0A7D               	incf	_Temp,w
  4723  0EF3  0086               	movwf	6
  4724  0EF4  3001               	movlw	1	; select bank2/3
  4725  0EF5  0087               	movwf	7
  4726  0EF6  3F40               	moviw [0]fsr1
  4727  0EF7  0020               	movlb	0	; select bank0
  4728  0EF8  00AD               	movwf	??_setTemp_Main
  4729  0EF9  3F41               	moviw [1]fsr1
  4730  0EFA  00AE               	movwf	??_setTemp_Main+1
  4731  0EFB  3001               	movlw	1
  4732  0EFC  022E               	subwf	??_setTemp_Main+1,w
  4733  0EFD  30F4               	movlw	244
  4734  0EFE  1903               	skipnz
  4735  0EFF  022D               	subwf	??_setTemp_Main,w
  4736  0F00  1C03               	skipc
  4737  0F01  0008               	return
  4738                           
  4739                           ;OverTemperature_B1.c: 72: {
  4740                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4741  0F02  31A4  2454  318E   	fcall	_getLoad_Safe
  4742  0F05  3A00               	xorlw	0
  4743  0F06  1903               	skipnz
  4744  0F07  2F20               	goto	l9500
  4745  0F08  31A3  23D3  318E   	fcall	_getPF_Safe
  4746  0F0B  3A00               	xorlw	0
  4747  0F0C  1903               	skipnz
  4748  0F0D  2F20               	goto	l9500
  4749                           
  4750                           ;OverTemperature_B1.c: 74: {
  4751                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4752  0F0E  0A7D               	incf	_Temp,w
  4753  0F0F  0086               	movwf	6
  4754  0F10  3001               	movlw	1	; select bank2/3
  4755  0F11  0087               	movwf	7
  4756  0F12  3000               	movlw	0
  4757  0F13  3FC0               	movwi [0]fsr1
  4758  0F14  3FC1               	movwi [1]fsr1
  4759                           
  4760                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4761  0F15  087D               	movf	_Temp,w
  4762  0F16  0086               	movwf	6
  4763  0F17  3001               	movlw	1	; select bank2/3
  4764  0F18  0087               	movwf	7
  4765  0F19  1501               	bsf	1,2
  4766                           
  4767                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4768  0F1A  087D               	movf	_Temp,w
  4769  0F1B  0086               	movwf	6
  4770  0F1C  3001               	movlw	1	; select bank2/3
  4771  0F1D  0087               	movwf	7
  4772  0F1E  1201               	bcf	1,4
  4773                           
  4774                           ;OverTemperature_B1.c: 78: }
  4775  0F1F  0008               	return
  4776  0F20                     l9500:	
  4777                           
  4778                           ;OverTemperature_B1.c: 79: else
  4779                           ;OverTemperature_B1.c: 80: {
  4780                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4781  0F20  0A7D               	incf	_Temp,w
  4782  0F21  0086               	movwf	6
  4783  0F22  3001               	movlw	1	; select bank2/3
  4784  0F23  0087               	movwf	7
  4785  0F24  30E8               	movlw	232
  4786  0F25  3FC0               	movwi [0]fsr1
  4787  0F26  3003               	movlw	3
  4788  0F27  3FC1               	movwi [1]fsr1
  4789                           
  4790                           ;OverTemperature_B1.c: 82: }
  4791                           ;OverTemperature_B1.c: 83: }
  4792                           ;OverTemperature_B1.c: 84: }
  4793  0F28  0008               	return
  4794  0F29                     l9502:	
  4795                           
  4796                           ;OverTemperature_B1.c: 85: else
  4797                           ;OverTemperature_B1.c: 86: {
  4798                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4799  0F29  0A7D               	incf	_Temp,w
  4800  0F2A  0086               	movwf	6
  4801  0F2B  3001               	movlw	1	; select bank2/3
  4802  0F2C  0087               	movwf	7
  4803  0F2D  3001               	movlw	1
  4804  0F2E  0781               	addwf	1,f
  4805  0F2F  3141               	addfsr 1,1
  4806  0F30  1803               	skipnc
  4807  0F31  0A81               	incf	1,f
  4808                           
  4809                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4810  0F32  0A7D               	incf	_Temp,w
  4811  0F33  0086               	movwf	6
  4812  0F34  3001               	movlw	1	; select bank2/3
  4813  0F35  0087               	movwf	7
  4814  0F36  3F40               	moviw [0]fsr1
  4815  0F37  0020               	movlb	0	; select bank0
  4816  0F38  00AD               	movwf	??_setTemp_Main
  4817  0F39  3F41               	moviw [1]fsr1
  4818  0F3A  00AE               	movwf	??_setTemp_Main+1
  4819  0F3B  3000               	movlw	0
  4820  0F3C  022E               	subwf	??_setTemp_Main+1,w
  4821  0F3D  3004               	movlw	4
  4822  0F3E  1903               	skipnz
  4823  0F3F  022D               	subwf	??_setTemp_Main,w
  4824  0F40  1C03               	skipc
  4825  0F41  0008               	return
  4826                           
  4827                           ;OverTemperature_B1.c: 89: {
  4828                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4829  0F42  0A7D               	incf	_Temp,w
  4830  0F43  0086               	movwf	6
  4831  0F44  3001               	movlw	1	; select bank2/3
  4832  0F45  0087               	movwf	7
  4833  0F46  3000               	movlw	0
  4834  0F47  3FC0               	movwi [0]fsr1
  4835  0F48  3FC1               	movwi [1]fsr1
  4836                           
  4837                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4838  0F49  087D               	movf	_Temp,w
  4839  0F4A  0086               	movwf	6
  4840  0F4B  3001               	movlw	1	; select bank2/3
  4841  0F4C  0087               	movwf	7
  4842  0F4D  1101               	bcf	1,2
  4843                           
  4844                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4845  0F4E  087D               	movf	_Temp,w
  4846  0F4F  3E08               	addlw	8
  4847  0F50  0086               	movwf	6
  4848  0F51  3001               	movlw	1	; select bank2/3
  4849  0F52  0087               	movwf	7
  4850  0F53  087D               	movf	_Temp,w
  4851  0F54  3E04               	addlw	4
  4852  0F55  0084               	movwf	4
  4853  0F56  3001               	movlw	1	; select bank2/3
  4854  0F57  0085               	movwf	5
  4855  0F58  3F40               	moviw [0]fsr1
  4856  0F59  3F80               	movwi [0]fsr0
  4857  0F5A  3F41               	moviw [1]fsr1
  4858  0F5B  3F81               	movwi [1]fsr0
  4859                           
  4860                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4861  0F5C  087D               	movf	_Temp,w
  4862  0F5D  0086               	movwf	6
  4863  0F5E  3001               	movlw	1	; select bank2/3
  4864  0F5F  0087               	movwf	7
  4865  0F60  1C81               	btfss	1,1
  4866  0F61  2F8F               	goto	l9524
  4867                           
  4868                           ;OverTemperature_B1.c: 94: {
  4869                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 540)
  4870  0F62  087D               	movf	_Temp,w
  4871  0F63  3E04               	addlw	4
  4872  0F64  0086               	movwf	6
  4873  0F65  3001               	movlw	1	; select bank2/3
  4874  0F66  0087               	movwf	7
  4875  0F67  3F40               	moviw [0]fsr1
  4876  0F68  00AD               	movwf	??_setTemp_Main
  4877  0F69  3F41               	moviw [1]fsr1
  4878  0F6A  00AE               	movwf	??_setTemp_Main+1
  4879  0F6B  3002               	movlw	2
  4880  0F6C  022E               	subwf	??_setTemp_Main+1,w
  4881  0F6D  301C               	movlw	28
  4882  0F6E  1903               	skipnz
  4883  0F6F  022D               	subwf	??_setTemp_Main,w
  4884  0F70  1C03               	skipc
  4885  0F71  2FBD               	goto	l9534
  4886                           
  4887                           ;OverTemperature_B1.c: 96: {
  4888                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4889  0F72  3001               	movlw	1
  4890  0F73  00AD               	movwf	??_setTemp_Main
  4891  0F74  087D               	movf	_Temp,w
  4892  0F75  3E03               	addlw	3
  4893  0F76  0086               	movwf	6
  4894  0F77  3001               	movlw	1	; select bank2/3
  4895  0F78  0087               	movwf	7
  4896  0F79  082D               	movf	??_setTemp_Main,w
  4897  0F7A  0781               	addwf	1,f
  4898                           
  4899                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4900  0F7B  087D               	movf	_Temp,w
  4901  0F7C  3E03               	addlw	3
  4902  0F7D  0086               	movwf	6
  4903  0F7E  3001               	movlw	1	; select bank2/3
  4904  0F7F  0087               	movwf	7
  4905  0F80  3003               	movlw	3
  4906  0F81  0201               	subwf	1,w
  4907  0F82  1C03               	skipc
  4908  0F83  2FC3               	goto	l9536
  4909                           
  4910                           ;OverTemperature_B1.c: 99: {
  4911                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4912  0F84  087D               	movf	_Temp,w
  4913  0F85  3E03               	addlw	3
  4914  0F86  0086               	movwf	6
  4915  0F87  3001               	movlw	1	; select bank2/3
  4916  0F88  0087               	movwf	7
  4917  0F89  0181               	clrf	1
  4918                           
  4919                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4920  0F8A  3000               	movlw	0
  4921  0F8B  319C  2476  318E   	fcall	_setOverTemp_Exceptions
  4922                           
  4923                           ;OverTemperature_B1.c: 102: }
  4924                           ;OverTemperature_B1.c: 103: }
  4925  0F8E  2FC3               	goto	l9536
  4926  0F8F                     l9524:	
  4927                           ;OverTemperature_B1.c: 107: }
  4928                           ;OverTemperature_B1.c: 108: }
  4929                           
  4930                           ;OverTemperature_B1.c: 104: else
  4931                           ;OverTemperature_B1.c: 105: {
  4932                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4933                           
  4934                           
  4935                           ;OverTemperature_B1.c: 109: else
  4936                           ;OverTemperature_B1.c: 110: {
  4937                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 475)
  4938  0F8F  087D               	movf	_Temp,w
  4939  0F90  3E04               	addlw	4
  4940  0F91  0086               	movwf	6
  4941  0F92  3001               	movlw	1	; select bank2/3
  4942  0F93  0087               	movwf	7
  4943  0F94  3F40               	moviw [0]fsr1
  4944  0F95  0020               	movlb	0	; select bank0
  4945  0F96  00AD               	movwf	??_setTemp_Main
  4946  0F97  3F41               	moviw [1]fsr1
  4947  0F98  00AE               	movwf	??_setTemp_Main+1
  4948  0F99  3001               	movlw	1
  4949  0F9A  022E               	subwf	??_setTemp_Main+1,w
  4950  0F9B  30DC               	movlw	220
  4951  0F9C  1903               	skipnz
  4952  0F9D  022D               	subwf	??_setTemp_Main,w
  4953  0F9E  1803               	skipnc
  4954  0F9F  2FBD               	goto	l9534
  4955                           
  4956                           ;OverTemperature_B1.c: 112: {
  4957                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4958  0FA0  3001               	movlw	1
  4959  0FA1  00AD               	movwf	??_setTemp_Main
  4960  0FA2  087D               	movf	_Temp,w
  4961  0FA3  3E03               	addlw	3
  4962  0FA4  0086               	movwf	6
  4963  0FA5  3001               	movlw	1	; select bank2/3
  4964  0FA6  0087               	movwf	7
  4965  0FA7  082D               	movf	??_setTemp_Main,w
  4966  0FA8  0781               	addwf	1,f
  4967                           
  4968                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4969  0FA9  087D               	movf	_Temp,w
  4970  0FAA  3E03               	addlw	3
  4971  0FAB  0086               	movwf	6
  4972  0FAC  3001               	movlw	1	; select bank2/3
  4973  0FAD  0087               	movwf	7
  4974  0FAE  3003               	movlw	3
  4975  0FAF  0201               	subwf	1,w
  4976  0FB0  1C03               	skipc
  4977  0FB1  2FC3               	goto	l9536
  4978                           
  4979                           ;OverTemperature_B1.c: 115: {
  4980                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4981  0FB2  087D               	movf	_Temp,w
  4982  0FB3  3E03               	addlw	3
  4983  0FB4  0086               	movwf	6
  4984  0FB5  3001               	movlw	1	; select bank2/3
  4985  0FB6  0087               	movwf	7
  4986  0FB7  0181               	clrf	1
  4987                           
  4988                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4989  0FB8  3001               	movlw	1
  4990  0FB9  319C  2476  318E   	fcall	_setOverTemp_Exceptions
  4991                           
  4992                           ;OverTemperature_B1.c: 118: }
  4993                           ;OverTemperature_B1.c: 119: }
  4994  0FBC  2FC3               	goto	l9536
  4995  0FBD                     l9534:	
  4996                           
  4997                           ;OverTemperature_B1.c: 120: else
  4998                           ;OverTemperature_B1.c: 121: {
  4999                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5000  0FBD  087D               	movf	_Temp,w
  5001  0FBE  3E03               	addlw	3
  5002  0FBF  0086               	movwf	6
  5003  0FC0  3001               	movlw	1	; select bank2/3
  5004  0FC1  0087               	movwf	7
  5005  0FC2  0181               	clrf	1
  5006  0FC3                     l9536:	
  5007                           
  5008                           ;OverTemperature_B1.c: 123: }
  5009                           ;OverTemperature_B1.c: 124: }
  5010                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5011  0FC3  087D               	movf	_Temp,w
  5012  0FC4  0086               	movwf	6
  5013  0FC5  3001               	movlw	1	; select bank2/3
  5014  0FC6  0087               	movwf	7
  5015  0FC7  1881               	btfsc	1,1
  5016  0FC8  2FCE               	goto	l9540
  5017                           
  5018                           ;OverTemperature_B1.c: 126: {
  5019                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5020  0FC9  087D               	movf	_Temp,w
  5021  0FCA  0086               	movwf	6
  5022  0FCB  3001               	movlw	1	; select bank2/3
  5023  0FCC  0087               	movwf	7
  5024  0FCD  1601               	bsf	1,4
  5025  0FCE                     l9540:	
  5026                           
  5027                           ;OverTemperature_B1.c: 128: }
  5028                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5029  0FCE  087D               	movf	_Temp,w
  5030  0FCF  3E04               	addlw	4
  5031  0FD0  0086               	movwf	6
  5032  0FD1  3001               	movlw	1	; select bank2/3
  5033  0FD2  0087               	movwf	7
  5034  0FD3  3F40               	moviw [0]fsr1
  5035  0FD4  0020               	movlb	0	; select bank0
  5036  0FD5  00AD               	movwf	??_setTemp_Main
  5037  0FD6  3F41               	moviw [1]fsr1
  5038  0FD7  00AE               	movwf	??_setTemp_Main+1
  5039  0FD8  082E               	movf	??_setTemp_Main+1,w
  5040  0FD9  00AF               	movwf	??_setTemp_Main+2
  5041  0FDA  086F               	movf	_Product,w
  5042  0FDB  3E18               	addlw	24
  5043  0FDC  0086               	movwf	6
  5044  0FDD  3001               	movlw	1	; select bank2/3
  5045  0FDE  0087               	movwf	7
  5046  0FDF  082F               	movf	??_setTemp_Main+2,w
  5047  0FE0  0081               	movwf	1
  5048                           
  5049                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5050  0FE1  087D               	movf	_Temp,w
  5051  0FE2  3E04               	addlw	4
  5052  0FE3  0086               	movwf	6
  5053  0FE4  3001               	movlw	1	; select bank2/3
  5054  0FE5  0087               	movwf	7
  5055  0FE6  0801               	movf	1,w
  5056  0FE7  00AD               	movwf	??_setTemp_Main
  5057  0FE8  086F               	movf	_Product,w
  5058  0FE9  3E19               	addlw	25
  5059  0FEA  0086               	movwf	6
  5060  0FEB  3001               	movlw	1	; select bank2/3
  5061  0FEC  0087               	movwf	7
  5062  0FED  082D               	movf	??_setTemp_Main,w
  5063  0FEE  0081               	movwf	1
  5064                           
  5065                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5066  0FEF  087D               	movf	_Temp,w
  5067  0FF0  3E06               	addlw	6
  5068  0FF1  0086               	movwf	6
  5069  0FF2  3001               	movlw	1	; select bank2/3
  5070  0FF3  0087               	movwf	7
  5071  0FF4  3000               	movlw	0
  5072  0FF5  3FC0               	movwi [0]fsr1
  5073  0FF6  3FC1               	movwi [1]fsr1
  5074                           
  5075                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5076  0FF7  087D               	movf	_Temp,w
  5077  0FF8  3E08               	addlw	8
  5078  0FF9  0086               	movwf	6
  5079  0FFA  3001               	movlw	1	; select bank2/3
  5080  0FFB  0087               	movwf	7
  5081  0FFC  3000               	movlw	0
  5082  0FFD  3FC0               	movwi [0]fsr1
  5083  0FFE  3FC1               	movwi [1]fsr1
  5084  0FFF  0008               	return
  5085  1000                     __end_of_setTemp_Main:	
  5086                           
  5087                           	psect	text7
  5088  1C76                     __ptext7:	
  5089 ;; *************** function _setOverTemp_Exceptions *****************
  5090 ;; Defined at:
  5091 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  command         1    wreg     unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  command         1   12[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;		None               void
  5098 ;; Registers used:
  5099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;Total ram usage:        2 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    8
  5112 ;; This function calls:
  5113 ;;		_DimmerLights_Exceptions
  5114 ;;		_setBuz
  5115 ;;		_setLED
  5116 ;;		_setRF_Enable
  5117 ;;		_setSw_Enable
  5118 ;; This function is called by:
  5119 ;;		_setTemp_Main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _setOverTemp_Exceptions
  5125  1C76                     _setOverTemp_Exceptions:	
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5129                           ;setOverTemp_Exceptions@command stored from wreg
  5130  1C76  0020               	movlb	0	; select bank0
  5131  1C77  00AC               	movwf	setOverTemp_Exceptions@command
  5132                           
  5133                           ;OverTemperature_B1.c: 140: if(command)
  5134  1C78  082C               	movf	setOverTemp_Exceptions@command,w
  5135  1C79  1903               	btfsc	3,2
  5136  1C7A  2C80               	goto	l9132
  5137                           
  5138                           ;OverTemperature_B1.c: 141: {
  5139                           ;OverTemperature_B1.c: 142: DimmerLights_Exceptions(1);
  5140  1C7B  3001               	movlw	1
  5141  1C7C  3191  2165  319C   	fcall	_DimmerLights_Exceptions
  5142  1C7F  0020               	movlb	0	; select bank0
  5143  1C80                     l9132:	
  5144                           
  5145                           ;OverTemperature_B1.c: 143: }
  5146                           ;OverTemperature_B1.c: 144: Temp->ERROR=command;
  5147  1C80  087D               	movf	_Temp,w
  5148  1C81  0086               	movwf	6
  5149  1C82  3001               	movlw	1	; select bank2/3
  5150  1C83  0087               	movwf	7
  5151  1C84  0020               	movlb	0	; select bank0
  5152  1C85  082C               	movf	setOverTemp_Exceptions@command,w
  5153  1C86  1081               	bcf	1,1
  5154  1C87  1D03               	skipz
  5155  1C88  1481               	bsf	1,1
  5156                           
  5157                           ;OverTemperature_B1.c: 146: setLED(99,command+10);
  5158  1C89  082C               	movf	setOverTemp_Exceptions@command,w
  5159  1C8A  3E0A               	addlw	10
  5160  1C8B  00AB               	movwf	??_setOverTemp_Exceptions
  5161  1C8C  082B               	movf	??_setOverTemp_Exceptions,w
  5162  1C8D  00A2               	movwf	setLED@command
  5163  1C8E  3063               	movlw	99
  5164  1C8F  319F  2741  319C   	fcall	_setLED
  5165                           
  5166                           ;OverTemperature_B1.c: 148: Temp->Safe=(~command) & 0x01;
  5167  1C92  0020               	movlb	0	; select bank0
  5168  1C93  092C               	comf	setOverTemp_Exceptions@command,w
  5169  1C94  3901               	andlw	1
  5170  1C95  00AB               	movwf	??_setOverTemp_Exceptions
  5171  1C96  087D               	movf	_Temp,w
  5172  1C97  0086               	movwf	6
  5173  1C98  3001               	movlw	1	; select bank2/3
  5174  1C99  0087               	movwf	7
  5175  1C9A  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5176  1C9B  0801               	movf	1,w
  5177  1C9C  062B               	xorwf	??_setOverTemp_Exceptions,w
  5178  1C9D  39EF               	andlw	-17
  5179  1C9E  062B               	xorwf	??_setOverTemp_Exceptions,w
  5180  1C9F  0081               	movwf	1
  5181                           
  5182                           ;OverTemperature_B1.c: 149: setSw_Enable((~command) & 0x01);
  5183  1CA0  092C               	comf	setOverTemp_Exceptions@command,w
  5184  1CA1  3901               	andlw	1
  5185  1CA2  31A7  2726  319C   	fcall	_setSw_Enable
  5186                           
  5187                           ;OverTemperature_B1.c: 152: setRF_Enable(1,(~command) & 0x01);
  5188  1CA5  0020               	movlb	0	; select bank0
  5189  1CA6  092C               	comf	setOverTemp_Exceptions@command,w
  5190  1CA7  3901               	andlw	1
  5191  1CA8  00AB               	movwf	??_setOverTemp_Exceptions
  5192  1CA9  082B               	movf	??_setOverTemp_Exceptions,w
  5193  1CAA  00A4               	movwf	setRF_Enable@command
  5194  1CAB  3001               	movlw	1
  5195  1CAC  319B  2306  319C   	fcall	_setRF_Enable
  5196                           
  5197                           ;OverTemperature_B1.c: 155: setBuz(2,100);
  5198  1CAF  3064               	movlw	100
  5199  1CB0  0020               	movlb	0	; select bank0
  5200  1CB1  00A6               	movwf	setBuz@time
  5201  1CB2  3000               	movlw	0
  5202  1CB3  00A7               	movwf	setBuz@time+1
  5203  1CB4  3002               	movlw	2
  5204  1CB5  3193  23EA         	fcall	_setBuz
  5205  1CB7  0008               	return
  5206  1CB8                     __end_of_setOverTemp_Exceptions:	
  5207                           
  5208                           	psect	text8
  5209  237F                     __ptext8:	
  5210 ;; *************** function _Temp_Initialization *****************
  5211 ;; Defined at:
  5212 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;		None               void
  5219 ;; Registers used:
  5220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        0 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    5
  5233 ;; This function calls:
  5234 ;;		_setTemp_Initialization
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function _Temp_Initialization
  5242  237F                     _Temp_Initialization:	
  5243                           
  5244                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5248  237F  31A4  245F         	fcall	_setTemp_Initialization
  5249  2381  0008               	return
  5250  2382                     __end_of_Temp_Initialization:	
  5251                           
  5252                           	psect	text9
  5253  245F                     __ptext9:	
  5254 ;; *************** function _setTemp_Initialization *****************
  5255 ;; Defined at:
  5256 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;		None               void
  5263 ;; Registers used:
  5264 ;;		wreg, fsr1l, fsr1h
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;Total ram usage:        1 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    4
  5277 ;; This function calls:
  5278 ;;		Nothing
  5279 ;; This function is called by:
  5280 ;;		_Temp_Initialization
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function _setTemp_Initialization
  5286  245F                     _setTemp_Initialization:	
  5287                           
  5288                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5292  245F  3020               	movlw	_Temp1& (0+255)
  5293  2460  0020               	movlb	0	; select bank0
  5294  2461  00A0               	movwf	??_setTemp_Initialization
  5295  2462  0820               	movf	??_setTemp_Initialization,w
  5296  2463  00FD               	movwf	_Temp
  5297                           
  5298                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5299  2464  087D               	movf	_Temp,w
  5300  2465  0086               	movwf	6
  5301  2466  3001               	movlw	1	; select bank2/3
  5302  2467  0087               	movwf	7
  5303  2468  1601               	bsf	1,4
  5304  2469  0008               	return
  5305  246A                     __end_of_setTemp_Initialization:	
  5306                           
  5307                           	psect	text10
  5308  23E3                     __ptext10:	
  5309 ;; *************** function _Switch_Main *****************
  5310 ;; Defined at:
  5311 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    8
  5332 ;; This function calls:
  5333 ;;		_setSw_Main
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _Switch_Main
  5341  23E3                     _Switch_Main:	
  5342                           
  5343                           ;Switch_B1.c: 65: setSw_Main(1);
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5347  23E3  3001               	movlw	1
  5348  23E4  3186  2650  31A3   	fcall	_setSw_Main
  5349                           
  5350                           ;Switch_B1.c: 69: setSw_Main(2);
  5351  23E7  3002               	movlw	2
  5352  23E8  3186  2650         	fcall	_setSw_Main
  5353  23EA  0008               	return
  5354  23EB                     __end_of_Switch_Main:	
  5355                           
  5356                           	psect	text11
  5357  0650                     __ptext11:	
  5358 ;; *************** function _setSw_Main *****************
  5359 ;; Defined at:
  5360 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  sw              1    wreg     unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  sw              1   15[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;		None               void
  5367 ;; Registers used:
  5368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;Total ram usage:        5 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    7
  5381 ;; This function calls:
  5382 ;;		_SwPointSelect
  5383 ;;		_Sw_DimmerAdjFunc
  5384 ;;		_Sw_DimmerOffFunc
  5385 ;;		_Sw_DimmerOnFunc
  5386 ;;		_setBuz
  5387 ;;		_setRF_Learn
  5388 ;; This function is called by:
  5389 ;;		_Switch_Main
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _setSw_Main
  5395  0650                     _setSw_Main:	
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5399                           ;setSw_Main@sw stored from wreg
  5400  0650  0020               	movlb	0	; select bank0
  5401  0651  00AF               	movwf	setSw_Main@sw
  5402                           
  5403                           ;Switch_B1.c: 114: if(Sw->Enable)
  5404  0652  086D               	movf	_Sw,w
  5405  0653  0086               	movwf	6
  5406  0654  3001               	movlw	1	; select bank2/3
  5407  0655  0087               	movwf	7
  5408  0656  1C01               	btfss	1,0
  5409  0657  0008               	return
  5410                           
  5411                           ;Switch_B1.c: 115: {
  5412                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5413  0658  082F               	movf	setSw_Main@sw,w
  5414  0659  31A5  25C4  3186   	fcall	_SwPointSelect
  5415                           
  5416                           ;Switch_B1.c: 133: if(sw == 1)
  5417  065C  0020               	movlb	0	; select bank0
  5418  065D  082F               	movf	setSw_Main@sw,w
  5419  065E  3A01               	xorlw	1
  5420  065F  1D03               	skipz
  5421  0660  2E6D               	goto	l9678
  5422                           
  5423                           ;Switch_B1.c: 134: {
  5424                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  5425  0661  01AD               	clrf	_setSw_Main$4710
  5426  0662  0AAD               	incf	_setSw_Main$4710,f
  5427  0663  1F0C               	btfss	12,6	;volatile
  5428  0664  1A0C               	btfsc	12,4	;volatile
  5429  0665  2E67               	goto	l9676
  5430  0666  01AD               	clrf	_setSw_Main$4710
  5431  0667                     l9676:	
  5432  0667  086D               	movf	_Sw,w
  5433  0668  0086               	movwf	6
  5434  0669  3001               	movlw	1	; select bank2/3
  5435  066A  0087               	movwf	7
  5436  066B  082D               	movf	_setSw_Main$4710,w
  5437  066C  2E7C               	goto	L2
  5438  066D                     l9678:	
  5439                           ;Switch_B1.c: 136: }
  5440                           
  5441                           
  5442                           ;Switch_B1.c: 137: else if(sw == 2)
  5443  066D  082F               	movf	setSw_Main@sw,w
  5444  066E  3A02               	xorlw	2
  5445  066F  1D03               	skipz
  5446  0670  2E7F               	goto	l9688
  5447                           
  5448                           ;Switch_B1.c: 138: {
  5449                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  5450  0671  01AE               	clrf	_setSw_Main$4711
  5451  0672  0AAE               	incf	_setSw_Main$4711,f
  5452  0673  1C0C               	btfss	12,0	;volatile
  5453  0674  188D               	btfsc	13,1	;volatile
  5454  0675  2E77               	goto	l9686
  5455  0676  01AE               	clrf	_setSw_Main$4711
  5456  0677                     l9686:	
  5457  0677  086D               	movf	_Sw,w
  5458  0678  0086               	movwf	6
  5459  0679  3001               	movlw	1	; select bank2/3
  5460  067A  0087               	movwf	7
  5461  067B  082E               	movf	_setSw_Main$4711,w
  5462  067C                     L2:	
  5463  067C  1081               	bcf	1,1
  5464  067D  1D03               	skipz
  5465  067E  1481               	bsf	1,1
  5466  067F                     l9688:	
  5467                           
  5468                           ;Switch_B1.c: 140: }
  5469                           ;Switch_B1.c: 148: if(Sw->Touch)
  5470  067F  086D               	movf	_Sw,w
  5471  0680  0086               	movwf	6
  5472  0681  3001               	movlw	1	; select bank2/3
  5473  0682  0087               	movwf	7
  5474  0683  1C81               	btfss	1,1
  5475  0684  2F5F               	goto	l9738
  5476                           
  5477                           ;Switch_B1.c: 149: {
  5478                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5479  0685  086D               	movf	_Sw,w
  5480  0686  0086               	movwf	6
  5481  0687  3001               	movlw	1	; select bank2/3
  5482  0688  0087               	movwf	7
  5483  0689  1901               	btfsc	1,2
  5484  068A  2EB5               	goto	l9704
  5485                           
  5486                           ;Switch_B1.c: 151: {
  5487                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5488  068B  3001               	movlw	1
  5489  068C  00AB               	movwf	??_setSw_Main
  5490  068D  086D               	movf	_Sw,w
  5491  068E  3E02               	addlw	2
  5492  068F  0086               	movwf	6
  5493  0690  3001               	movlw	1	; select bank2/3
  5494  0691  0087               	movwf	7
  5495  0692  082B               	movf	??_setSw_Main,w
  5496  0693  0781               	addwf	1,f
  5497                           
  5498                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5499  0694  086D               	movf	_Sw,w
  5500  0695  3E02               	addlw	2
  5501  0696  0086               	movwf	6
  5502  0697  3001               	movlw	1	; select bank2/3
  5503  0698  0087               	movwf	7
  5504  0699  3005               	movlw	5
  5505  069A  0201               	subwf	1,w
  5506  069B  1C03               	skipc
  5507  069C  0008               	return
  5508                           
  5509                           ;Switch_B1.c: 154: {
  5510                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5511  069D  086D               	movf	_Sw,w
  5512  069E  3E02               	addlw	2
  5513  069F  0086               	movwf	6
  5514  06A0  3001               	movlw	1	; select bank2/3
  5515  06A1  0087               	movwf	7
  5516  06A2  0181               	clrf	1
  5517                           
  5518                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5519  06A3  086D               	movf	_Sw,w
  5520  06A4  0086               	movwf	6
  5521  06A5  3001               	movlw	1	; select bank2/3
  5522  06A6  0087               	movwf	7
  5523  06A7  1501               	bsf	1,2
  5524                           
  5525                           ;Switch_B1.c: 157: setBuz(1,100);
  5526  06A8  3064               	movlw	100
  5527  06A9  00A6               	movwf	setBuz@time
  5528  06AA  3000               	movlw	0
  5529  06AB  00A7               	movwf	setBuz@time+1
  5530  06AC  3001               	movlw	1
  5531  06AD  3193  23EA  3186   	fcall	_setBuz
  5532                           
  5533                           ;Switch_B1.c: 160: Sw_DimmerOnFunc(sw);
  5534  06B0  0020               	movlb	0	; select bank0
  5535  06B1  082F               	movf	setSw_Main@sw,w
  5536  06B2  3191  21CA         	fcall	_Sw_DimmerOnFunc
  5537                           
  5538                           ;Switch_B1.c: 163: }
  5539                           ;Switch_B1.c: 164: }
  5540  06B4  0008               	return
  5541  06B5                     l9704:	
  5542                           
  5543                           ;Switch_B1.c: 165: else
  5544                           ;Switch_B1.c: 166: {
  5545                           ;Switch_B1.c: 167: if(!Sw->Hold1)
  5546  06B5  0020               	movlb	0	; select bank0
  5547  06B6  086D               	movf	_Sw,w
  5548  06B7  0086               	movwf	6
  5549  06B8  3001               	movlw	1	; select bank2/3
  5550  06B9  0087               	movwf	7
  5551  06BA  1981               	btfsc	1,3
  5552  06BB  2EE7               	goto	l9714
  5553                           
  5554                           ;Switch_B1.c: 168: {
  5555                           ;Switch_B1.c: 169: Sw->Hold1Time++;
  5556  06BC  086D               	movf	_Sw,w
  5557  06BD  3E03               	addlw	3
  5558  06BE  0086               	movwf	6
  5559  06BF  3001               	movlw	1	; select bank2/3
  5560  06C0  0087               	movwf	7
  5561  06C1  3001               	movlw	1
  5562  06C2  0781               	addwf	1,f
  5563  06C3  3141               	addfsr 1,1
  5564  06C4  1803               	skipnc
  5565  06C5  0A81               	incf	1,f
  5566                           
  5567                           ;Switch_B1.c: 170: if(Sw->Hold1Time >= 150)
  5568  06C6  086D               	movf	_Sw,w
  5569  06C7  3E03               	addlw	3
  5570  06C8  0086               	movwf	6
  5571  06C9  3001               	movlw	1	; select bank2/3
  5572  06CA  0087               	movwf	7
  5573  06CB  3F40               	moviw [0]fsr1
  5574  06CC  00AB               	movwf	??_setSw_Main
  5575  06CD  3F41               	moviw [1]fsr1
  5576  06CE  00AC               	movwf	??_setSw_Main+1
  5577  06CF  3000               	movlw	0
  5578  06D0  022C               	subwf	??_setSw_Main+1,w
  5579  06D1  3096               	movlw	150
  5580  06D2  1903               	skipnz
  5581  06D3  022B               	subwf	??_setSw_Main,w
  5582  06D4  1C03               	skipc
  5583  06D5  0008               	return
  5584                           
  5585                           ;Switch_B1.c: 171: {
  5586                           ;Switch_B1.c: 172: Sw->Hold1Time=0;
  5587  06D6  086D               	movf	_Sw,w
  5588  06D7  3E03               	addlw	3
  5589  06D8  0086               	movwf	6
  5590  06D9  3001               	movlw	1	; select bank2/3
  5591  06DA  0087               	movwf	7
  5592  06DB  3000               	movlw	0
  5593  06DC  3FC0               	movwi [0]fsr1
  5594  06DD  3FC1               	movwi [1]fsr1
  5595                           
  5596                           ;Switch_B1.c: 173: Sw->Hold1=1;
  5597  06DE  086D               	movf	_Sw,w
  5598  06DF  0086               	movwf	6
  5599  06E0  3001               	movlw	1	; select bank2/3
  5600  06E1  0087               	movwf	7
  5601  06E2  1581               	bsf	1,3
  5602                           
  5603                           ;Switch_B1.c: 176: Sw_DimmerAdjFunc(sw);
  5604  06E3  082F               	movf	setSw_Main@sw,w
  5605  06E4  3199  210C         	fcall	_Sw_DimmerAdjFunc
  5606                           
  5607                           ;Switch_B1.c: 179: }
  5608                           ;Switch_B1.c: 180: }
  5609  06E6  0008               	return
  5610  06E7                     l9714:	
  5611                           
  5612                           ;Switch_B1.c: 181: else
  5613                           ;Switch_B1.c: 182: {
  5614                           ;Switch_B1.c: 183: if(!Sw->Hold2)
  5615  06E7  0020               	movlb	0	; select bank0
  5616  06E8  086D               	movf	_Sw,w
  5617  06E9  0086               	movwf	6
  5618  06EA  3001               	movlw	1	; select bank2/3
  5619  06EB  0087               	movwf	7
  5620  06EC  1A01               	btfsc	1,4
  5621  06ED  2F2C               	goto	l9728
  5622                           
  5623                           ;Switch_B1.c: 184: {
  5624                           ;Switch_B1.c: 185: Sw->Hold2Time++;
  5625  06EE  086D               	movf	_Sw,w
  5626  06EF  3E05               	addlw	5
  5627  06F0  0086               	movwf	6
  5628  06F1  3001               	movlw	1	; select bank2/3
  5629  06F2  0087               	movwf	7
  5630  06F3  3001               	movlw	1
  5631  06F4  0781               	addwf	1,f
  5632  06F5  3141               	addfsr 1,1
  5633  06F6  1803               	skipnc
  5634  06F7  0A81               	incf	1,f
  5635                           
  5636                           ;Switch_B1.c: 186: if(Sw->Hold2Time >= 150)
  5637  06F8  086D               	movf	_Sw,w
  5638  06F9  3E05               	addlw	5
  5639  06FA  0086               	movwf	6
  5640  06FB  3001               	movlw	1	; select bank2/3
  5641  06FC  0087               	movwf	7
  5642  06FD  3F40               	moviw [0]fsr1
  5643  06FE  00AB               	movwf	??_setSw_Main
  5644  06FF  3F41               	moviw [1]fsr1
  5645  0700  00AC               	movwf	??_setSw_Main+1
  5646  0701  3000               	movlw	0
  5647  0702  022C               	subwf	??_setSw_Main+1,w
  5648  0703  3096               	movlw	150
  5649  0704  1903               	skipnz
  5650  0705  022B               	subwf	??_setSw_Main,w
  5651  0706  1C03               	skipc
  5652  0707  0008               	return
  5653                           
  5654                           ;Switch_B1.c: 187: {
  5655                           ;Switch_B1.c: 188: Sw->Hold2Time=0;
  5656  0708  086D               	movf	_Sw,w
  5657  0709  3E05               	addlw	5
  5658  070A  0086               	movwf	6
  5659  070B  3001               	movlw	1	; select bank2/3
  5660  070C  0087               	movwf	7
  5661  070D  3000               	movlw	0
  5662  070E  3FC0               	movwi [0]fsr1
  5663  070F  3FC1               	movwi [1]fsr1
  5664                           
  5665                           ;Switch_B1.c: 189: Sw->Hold2=1;
  5666  0710  086D               	movf	_Sw,w
  5667  0711  0086               	movwf	6
  5668  0712  3001               	movlw	1	; select bank2/3
  5669  0713  0087               	movwf	7
  5670  0714  1601               	bsf	1,4
  5671                           
  5672                           ;Switch_B1.c: 193: setRF_Learn(1,1);
  5673  0715  01A2               	clrf	setRF_Learn@command
  5674  0716  0AA2               	incf	setRF_Learn@command,f
  5675  0717  3001               	movlw	1
  5676  0718  31A4  24F4  3186   	fcall	_setRF_Learn
  5677                           
  5678                           ;Switch_B1.c: 195: if(TMain->First)
  5679  071B  0021               	movlb	1	; select bank1
  5680  071C  0869               	movf	_TMain^(0+128),w
  5681  071D  3E03               	addlw	3
  5682  071E  0086               	movwf	6
  5683  071F  3001               	movlw	1	; select bank2/3
  5684  0720  0087               	movwf	7
  5685  0721  1C81               	btfss	1,1
  5686  0722  0008               	return
  5687                           
  5688                           ;Switch_B1.c: 196: {
  5689                           ;Switch_B1.c: 197: setBuz(2,100);
  5690  0723  3064               	movlw	100
  5691  0724  0020               	movlb	0	; select bank0
  5692  0725  00A6               	movwf	setBuz@time
  5693  0726  3000               	movlw	0
  5694  0727  00A7               	movwf	setBuz@time+1
  5695  0728  3002               	movlw	2
  5696  0729  3193  23EA         	fcall	_setBuz
  5697                           
  5698                           ;Switch_B1.c: 198: }
  5699                           ;Switch_B1.c: 200: }
  5700                           ;Switch_B1.c: 201: }
  5701  072B  0008               	return
  5702  072C                     l9728:	
  5703                           
  5704                           ;Switch_B1.c: 202: else
  5705                           ;Switch_B1.c: 203: {
  5706                           ;Switch_B1.c: 204: if(!Sw->Hold3)
  5707  072C  0020               	movlb	0	; select bank0
  5708  072D  086D               	movf	_Sw,w
  5709  072E  0086               	movwf	6
  5710  072F  3001               	movlw	1	; select bank2/3
  5711  0730  0087               	movwf	7
  5712  0731  1A81               	btfsc	1,5
  5713  0732  0008               	return
  5714                           
  5715                           ;Switch_B1.c: 205: {
  5716                           ;Switch_B1.c: 206: Sw->Hold3Time++;
  5717  0733  086D               	movf	_Sw,w
  5718  0734  3E07               	addlw	7
  5719  0735  0086               	movwf	6
  5720  0736  3001               	movlw	1	; select bank2/3
  5721  0737  0087               	movwf	7
  5722  0738  3001               	movlw	1
  5723  0739  0781               	addwf	1,f
  5724  073A  3141               	addfsr 1,1
  5725  073B  1803               	skipnc
  5726  073C  0A81               	incf	1,f
  5727                           
  5728                           ;Switch_B1.c: 207: if(Sw->Hold3Time >= 300)
  5729  073D  086D               	movf	_Sw,w
  5730  073E  3E07               	addlw	7
  5731  073F  0086               	movwf	6
  5732  0740  3001               	movlw	1	; select bank2/3
  5733  0741  0087               	movwf	7
  5734  0742  3F40               	moviw [0]fsr1
  5735  0743  00AB               	movwf	??_setSw_Main
  5736  0744  3F41               	moviw [1]fsr1
  5737  0745  00AC               	movwf	??_setSw_Main+1
  5738  0746  3001               	movlw	1
  5739  0747  022C               	subwf	??_setSw_Main+1,w
  5740  0748  302C               	movlw	44
  5741  0749  1903               	skipnz
  5742  074A  022B               	subwf	??_setSw_Main,w
  5743  074B  1C03               	skipc
  5744  074C  0008               	return
  5745                           
  5746                           ;Switch_B1.c: 208: {
  5747                           ;Switch_B1.c: 209: Sw->Hold3Time=0;
  5748  074D  086D               	movf	_Sw,w
  5749  074E  3E07               	addlw	7
  5750  074F  0086               	movwf	6
  5751  0750  3001               	movlw	1	; select bank2/3
  5752  0751  0087               	movwf	7
  5753  0752  3000               	movlw	0
  5754  0753  3FC0               	movwi [0]fsr1
  5755  0754  3FC1               	movwi [1]fsr1
  5756                           
  5757                           ;Switch_B1.c: 210: Sw->Hold3=1;
  5758  0755  086D               	movf	_Sw,w
  5759  0756  0086               	movwf	6
  5760  0757  3001               	movlw	1	; select bank2/3
  5761  0758  0087               	movwf	7
  5762  0759  1681               	bsf	1,5
  5763                           
  5764                           ;Switch_B1.c: 213: setRF_Learn(1,0);
  5765  075A  01A2               	clrf	setRF_Learn@command
  5766  075B  3001               	movlw	1
  5767  075C  31A4  24F4         	fcall	_setRF_Learn
  5768                           
  5769                           ;Switch_B1.c: 216: }
  5770                           ;Switch_B1.c: 217: }
  5771                           ;Switch_B1.c: 218: }
  5772                           ;Switch_B1.c: 219: }
  5773                           ;Switch_B1.c: 220: }
  5774                           ;Switch_B1.c: 221: }
  5775  075E  0008               	return
  5776  075F                     l9738:	
  5777                           
  5778                           ;Switch_B1.c: 222: else
  5779                           ;Switch_B1.c: 223: {
  5780                           ;Switch_B1.c: 224: if(Sw->Debounce)
  5781  075F  0020               	movlb	0	; select bank0
  5782  0760  086D               	movf	_Sw,w
  5783  0761  0086               	movwf	6
  5784  0762  3001               	movlw	1	; select bank2/3
  5785  0763  0087               	movwf	7
  5786  0764  1D01               	btfss	1,2
  5787  0765  0008               	return
  5788                           
  5789                           ;Switch_B1.c: 225: {
  5790                           ;Switch_B1.c: 226: Sw->DebounceTime++;
  5791  0766  3001               	movlw	1
  5792  0767  00AB               	movwf	??_setSw_Main
  5793  0768  086D               	movf	_Sw,w
  5794  0769  3E02               	addlw	2
  5795  076A  0086               	movwf	6
  5796  076B  3001               	movlw	1	; select bank2/3
  5797  076C  0087               	movwf	7
  5798  076D  082B               	movf	??_setSw_Main,w
  5799  076E  0781               	addwf	1,f
  5800                           
  5801                           ;Switch_B1.c: 227: if(Sw->DebounceTime >= 5)
  5802  076F  086D               	movf	_Sw,w
  5803  0770  3E02               	addlw	2
  5804  0771  0086               	movwf	6
  5805  0772  3001               	movlw	1	; select bank2/3
  5806  0773  0087               	movwf	7
  5807  0774  3005               	movlw	5
  5808  0775  0201               	subwf	1,w
  5809  0776  1C03               	skipc
  5810  0777  0008               	return
  5811                           
  5812                           ;Switch_B1.c: 228: {
  5813                           ;Switch_B1.c: 229: Sw->DebounceTime=0;
  5814  0778  086D               	movf	_Sw,w
  5815  0779  3E02               	addlw	2
  5816  077A  0086               	movwf	6
  5817  077B  3001               	movlw	1	; select bank2/3
  5818  077C  0087               	movwf	7
  5819  077D  0181               	clrf	1
  5820                           
  5821                           ;Switch_B1.c: 230: Sw->Debounce=0;
  5822  077E  086D               	movf	_Sw,w
  5823  077F  0086               	movwf	6
  5824  0780  3001               	movlw	1	; select bank2/3
  5825  0781  0087               	movwf	7
  5826  0782  1101               	bcf	1,2
  5827                           
  5828                           ;Switch_B1.c: 231: Sw->Hold1Time=0;
  5829  0783  086D               	movf	_Sw,w
  5830  0784  3E03               	addlw	3
  5831  0785  0086               	movwf	6
  5832  0786  3001               	movlw	1	; select bank2/3
  5833  0787  0087               	movwf	7
  5834  0788  3000               	movlw	0
  5835  0789  3FC0               	movwi [0]fsr1
  5836  078A  3FC1               	movwi [1]fsr1
  5837                           
  5838                           ;Switch_B1.c: 232: Sw->Hold1=0;
  5839  078B  086D               	movf	_Sw,w
  5840  078C  0086               	movwf	6
  5841  078D  3001               	movlw	1	; select bank2/3
  5842  078E  0087               	movwf	7
  5843  078F  1181               	bcf	1,3
  5844                           
  5845                           ;Switch_B1.c: 233: Sw->Hold2Time=0;
  5846  0790  086D               	movf	_Sw,w
  5847  0791  3E05               	addlw	5
  5848  0792  0086               	movwf	6
  5849  0793  3001               	movlw	1	; select bank2/3
  5850  0794  0087               	movwf	7
  5851  0795  3000               	movlw	0
  5852  0796  3FC0               	movwi [0]fsr1
  5853  0797  3FC1               	movwi [1]fsr1
  5854                           
  5855                           ;Switch_B1.c: 234: Sw->Hold2=0;
  5856  0798  086D               	movf	_Sw,w
  5857  0799  0086               	movwf	6
  5858  079A  3001               	movlw	1	; select bank2/3
  5859  079B  0087               	movwf	7
  5860  079C  1201               	bcf	1,4
  5861                           
  5862                           ;Switch_B1.c: 235: Sw->Hold3Time=0;
  5863  079D  086D               	movf	_Sw,w
  5864  079E  3E07               	addlw	7
  5865  079F  0086               	movwf	6
  5866  07A0  3001               	movlw	1	; select bank2/3
  5867  07A1  0087               	movwf	7
  5868  07A2  3000               	movlw	0
  5869  07A3  3FC0               	movwi [0]fsr1
  5870  07A4  3FC1               	movwi [1]fsr1
  5871                           
  5872                           ;Switch_B1.c: 236: Sw->Hold3=0;
  5873  07A5  086D               	movf	_Sw,w
  5874  07A6  0086               	movwf	6
  5875  07A7  3001               	movlw	1	; select bank2/3
  5876  07A8  0087               	movwf	7
  5877  07A9  1281               	bcf	1,5
  5878                           
  5879                           ;Switch_B1.c: 239: Sw_DimmerOffFunc(sw);
  5880  07AA  082F               	movf	setSw_Main@sw,w
  5881  07AB  3193  2379  3186   	fcall	_Sw_DimmerOffFunc
  5882                           
  5883                           ;Switch_B1.c: 242: setRF_Learn(1,0);
  5884  07AE  0020               	movlb	0	; select bank0
  5885  07AF  01A2               	clrf	setRF_Learn@command
  5886  07B0  3001               	movlw	1
  5887  07B1  31A4  24F4         	fcall	_setRF_Learn
  5888  07B3  0008               	return
  5889  07B4                     __end_of_setSw_Main:	
  5890                           
  5891                           	psect	text12
  5892  24F4                     __ptext12:	
  5893 ;; *************** function _setRF_Learn *****************
  5894 ;; Defined at:
  5895 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  rf              1    wreg     unsigned char 
  5898 ;;  command         1    2[BANK0 ] unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  rf              1    3[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		_RfPointSelect
  5919 ;; This function is called by:
  5920 ;;		_setSw_Main
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _setRF_Learn
  5926  24F4                     _setRF_Learn:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5930                           ;setRF_Learn@rf stored from wreg
  5931  24F4  0020               	movlb	0	; select bank0
  5932  24F5  00A3               	movwf	setRF_Learn@rf
  5933                           
  5934                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5935  24F6  0823               	movf	setRF_Learn@rf,w
  5936  24F7  31A4  241D         	fcall	_RfPointSelect
  5937                           
  5938                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5939  24F9  087C               	movf	_RF,w
  5940  24FA  0086               	movwf	6
  5941  24FB  0187               	clrf	7
  5942  24FC  0020               	movlb	0	; select bank0
  5943  24FD  0822               	movf	setRF_Learn@command,w
  5944  24FE  1301               	bcf	1,6
  5945  24FF  1D03               	skipz
  5946  2500  1701               	bsf	1,6
  5947  2501  0008               	return
  5948  2502                     __end_of_setRF_Learn:	
  5949                           
  5950                           	psect	text13
  5951  11CA                     __ptext13:	
  5952 ;; *************** function _Sw_DimmerOnFunc *****************
  5953 ;; Defined at:
  5954 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  sw              1    wreg     unsigned char 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  sw              1    6[BANK0 ] unsigned char 
  5959 ;;  Idle            1    5[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;		None               void
  5962 ;; Registers used:
  5963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    6
  5976 ;; This function calls:
  5977 ;;		_setDimmerLights_Switch
  5978 ;;		_setDimmerLights_Trigger
  5979 ;;		_setRFSW_Status
  5980 ;;		_setRF_DimmerLights
  5981 ;;		_setTxData
  5982 ;; This function is called by:
  5983 ;;		_setSw_Main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _Sw_DimmerOnFunc
  5989  11CA                     _Sw_DimmerOnFunc:	
  5990                           
  5991                           ;incstack = 0
  5992                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5993                           ;Sw_DimmerOnFunc@sw stored from wreg
  5994  11CA  0020               	movlb	0	; select bank0
  5995  11CB  00A6               	movwf	Sw_DimmerOnFunc@sw
  5996                           
  5997                           ;Switch_B1.c: 251: char Idle=1;
  5998  11CC  01A5               	clrf	Sw_DimmerOnFunc@Idle
  5999  11CD  0AA5               	incf	Sw_DimmerOnFunc@Idle,f
  6000                           
  6001                           ;Switch_B1.c: 268: if(sw == 1)
  6002  11CE  0826               	movf	Sw_DimmerOnFunc@sw,w
  6003  11CF  3A01               	xorlw	1
  6004  11D0  1D03               	skipz
  6005  11D1  29D4               	goto	l9224
  6006                           
  6007                           ;Switch_B1.c: 269: {
  6008                           ;Switch_B1.c: 270: Idle=(DimmerLights22->AdjGo)?0:1;
  6009  11D2  087A               	movf	_DimmerLights22,w
  6010  11D3  29D9               	goto	L3
  6011  11D4                     l9224:	
  6012                           ;Switch_B1.c: 271: }
  6013                           
  6014                           
  6015                           ;Switch_B1.c: 272: else if(sw == 2)
  6016  11D4  0826               	movf	Sw_DimmerOnFunc@sw,w
  6017  11D5  3A02               	xorlw	2
  6018  11D6  1D03               	skipz
  6019  11D7  29E4               	goto	l9228
  6020                           
  6021                           ;Switch_B1.c: 273: {
  6022                           ;Switch_B1.c: 274: Idle=(DimmerLights11->AdjGo)?0:1;
  6023  11D8  0879               	movf	_DimmerLights11,w
  6024  11D9                     L3:	
  6025  11D9  3E09               	addlw	9
  6026  11DA  0086               	movwf	6
  6027  11DB  3001               	movlw	1	; select bank2/3
  6028  11DC  0087               	movwf	7
  6029  11DD  1003               	clrc
  6030  11DE  1D01               	btfss	1,2
  6031  11DF  1403               	setc
  6032  11E0  3000               	movlw	0
  6033  11E1  1803               	btfsc	3,0
  6034  11E2  3001               	movlw	1
  6035  11E3  00A5               	movwf	Sw_DimmerOnFunc@Idle
  6036  11E4                     l9228:	
  6037                           
  6038                           ;Switch_B1.c: 275: }
  6039                           ;Switch_B1.c: 278: if(Idle)
  6040  11E4  0825               	movf	Sw_DimmerOnFunc@Idle,w
  6041  11E5  1903               	btfsc	3,2
  6042  11E6  0008               	return
  6043                           
  6044                           ;Switch_B1.c: 279: {
  6045                           ;Switch_B1.c: 280: Sw->Flag=1;
  6046  11E7  086D               	movf	_Sw,w
  6047  11E8  0086               	movwf	6
  6048  11E9  3001               	movlw	1	; select bank2/3
  6049  11EA  0087               	movwf	7
  6050  11EB  1781               	bsf	1,7
  6051                           
  6052                           ;Switch_B1.c: 282: if(!Sw->Status)
  6053  11EC  086D               	movf	_Sw,w
  6054  11ED  0086               	movwf	6
  6055  11EE  3001               	movlw	1	; select bank2/3
  6056  11EF  0087               	movwf	7
  6057  11F0  1B01               	btfsc	1,6
  6058  11F1  2A1D               	goto	l9244
  6059                           
  6060                           ;Switch_B1.c: 283: {
  6061                           ;Switch_B1.c: 284: Sw->Status=1;
  6062  11F2  086D               	movf	_Sw,w
  6063  11F3  0086               	movwf	6
  6064  11F4  3001               	movlw	1	; select bank2/3
  6065  11F5  0087               	movwf	7
  6066  11F6  1701               	bsf	1,6
  6067                           
  6068                           ;Switch_B1.c: 285: setRFSW_Status(sw,1);
  6069  11F7  01A2               	clrf	setRFSW_Status@command
  6070  11F8  0AA2               	incf	setRFSW_Status@command,f
  6071  11F9  0826               	movf	Sw_DimmerOnFunc@sw,w
  6072  11FA  31A5  2502  3191   	fcall	_setRFSW_Status
  6073                           
  6074                           ;Switch_B1.c: 287: setDimmerLights_Trigger(sw,1);
  6075  11FD  0020               	movlb	0	; select bank0
  6076  11FE  01A2               	clrf	setDimmerLights_Trigger@command
  6077  11FF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6078  1200  0826               	movf	Sw_DimmerOnFunc@sw,w
  6079  1201  31A5  2540  3191   	fcall	_setDimmerLights_Trigger
  6080                           
  6081                           ;Switch_B1.c: 288: setDimmerLights_Switch(sw,1);
  6082  1204  0020               	movlb	0	; select bank0
  6083  1205  01A2               	clrf	setDimmerLights_Switch@command
  6084  1206  0AA2               	incf	setDimmerLights_Switch@command,f
  6085  1207  0826               	movf	Sw_DimmerOnFunc@sw,w
  6086  1208  31A5  2530  3191   	fcall	_setDimmerLights_Switch
  6087                           
  6088                           ;Switch_B1.c: 290: setRF_DimmerLights(sw,Sw->Status);
  6089  120B  0020               	movlb	0	; select bank0
  6090  120C  086D               	movf	_Sw,w
  6091  120D  0086               	movwf	6
  6092  120E  3001               	movlw	1	; select bank2/3
  6093  120F  0087               	movwf	7
  6094  1210  3000               	movlw	0
  6095  1211  1B01               	btfsc	1,6
  6096  1212  3001               	movlw	1
  6097  1213  00A0               	movwf	setRF_DimmerLights@on
  6098  1214  0826               	movf	Sw_DimmerOnFunc@sw,w
  6099  1215  319E  262F  3191   	fcall	_setRF_DimmerLights
  6100                           
  6101                           ;Switch_B1.c: 291: setTxData(1);
  6102  1218  3001               	movlw	1
  6103  1219  318B  2318         	fcall	_setTxData
  6104                           
  6105                           ;Switch_B1.c: 292: }
  6106  121B  0020               	movlb	0	; select bank0
  6107  121C  0008               	return
  6108  121D                     l9244:	
  6109                           
  6110                           ;Switch_B1.c: 293: else
  6111                           ;Switch_B1.c: 294: {
  6112                           ;Switch_B1.c: 295: Sw->Status=0;
  6113  121D  0020               	movlb	0	; select bank0
  6114  121E  086D               	movf	_Sw,w
  6115  121F  0086               	movwf	6
  6116  1220  3001               	movlw	1	; select bank2/3
  6117  1221  0087               	movwf	7
  6118  1222  1301               	bcf	1,6
  6119                           
  6120                           ;Switch_B1.c: 296: setRFSW_Status(sw,Sw->Status);
  6121  1223  086D               	movf	_Sw,w
  6122  1224  0086               	movwf	6
  6123  1225  3001               	movlw	1	; select bank2/3
  6124  1226  0087               	movwf	7
  6125  1227  3000               	movlw	0
  6126  1228  1B01               	btfsc	1,6
  6127  1229  3001               	movlw	1
  6128  122A  00A2               	movwf	setRFSW_Status@command
  6129  122B  0826               	movf	Sw_DimmerOnFunc@sw,w
  6130  122C  31A5  2502         	fcall	_setRFSW_Status
  6131  122E  0020               	movlb	0	; select bank0
  6132  122F  0008               	return
  6133  1230                     __end_of_Sw_DimmerOnFunc:	
  6134                           
  6135                           	psect	text14
  6136  1379                     __ptext14:	
  6137 ;; *************** function _Sw_DimmerOffFunc *****************
  6138 ;; Defined at:
  6139 ;;		line 301 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  sw              1    wreg     unsigned char 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  sw              1   10[BANK0 ] unsigned char 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;Total ram usage:        3 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    6
  6160 ;; This function calls:
  6161 ;;		_setDelayOff_GO
  6162 ;;		_setDimmerLights_AdjGo
  6163 ;;		_setDimmerLights_Switch
  6164 ;;		_setDimmerLights_Trigger
  6165 ;;		_setDimmerLights_TriggerAdj
  6166 ;;		_setRF_DimmerLights
  6167 ;;		_setTxData
  6168 ;; This function is called by:
  6169 ;;		_setSw_Main
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           
  6174                           ;psect for function _Sw_DimmerOffFunc
  6175  1379                     _Sw_DimmerOffFunc:	
  6176                           
  6177                           ;incstack = 0
  6178                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6179                           ;Sw_DimmerOffFunc@sw stored from wreg
  6180  1379  0020               	movlb	0	; select bank0
  6181  137A  00AA               	movwf	Sw_DimmerOffFunc@sw
  6182                           
  6183                           ;Switch_B1.c: 303: if(Sw->Flag)
  6184  137B  086D               	movf	_Sw,w
  6185  137C  0086               	movwf	6
  6186  137D  3001               	movlw	1	; select bank2/3
  6187  137E  0087               	movwf	7
  6188  137F  1F81               	btfss	1,7
  6189  1380  0008               	return
  6190                           
  6191                           ;Switch_B1.c: 304: {
  6192                           ;Switch_B1.c: 305: Sw->Flag=0;
  6193  1381  086D               	movf	_Sw,w
  6194  1382  0086               	movwf	6
  6195  1383  3001               	movlw	1	; select bank2/3
  6196  1384  0087               	movwf	7
  6197  1385  1381               	bcf	1,7
  6198                           
  6199                           ;Switch_B1.c: 306: if(Sw->Status)
  6200  1386  086D               	movf	_Sw,w
  6201  1387  0086               	movwf	6
  6202  1388  3001               	movlw	1	; select bank2/3
  6203  1389  0087               	movwf	7
  6204  138A  1F01               	btfss	1,6
  6205  138B  2BC5               	goto	l9276
  6206                           
  6207                           ;Switch_B1.c: 307: {
  6208                           ;Switch_B1.c: 308: if(Sw->Adj)
  6209  138C  0A6D               	incf	_Sw,w
  6210  138D  0086               	movwf	6
  6211  138E  3001               	movlw	1	; select bank2/3
  6212  138F  0087               	movwf	7
  6213  1390  1C01               	btfss	1,0
  6214  1391  0008               	return
  6215                           
  6216                           ;Switch_B1.c: 309: {
  6217                           ;Switch_B1.c: 310: Sw->Adj=0;
  6218  1392  0A6D               	incf	_Sw,w
  6219  1393  0086               	movwf	6
  6220  1394  3001               	movlw	1	; select bank2/3
  6221  1395  0087               	movwf	7
  6222  1396  1001               	bcf	1,0
  6223                           
  6224                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw,1);
  6225  1397  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6226  1398  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6227  1399  082A               	movf	Sw_DimmerOffFunc@sw,w
  6228  139A  31A5  2590  3193   	fcall	_setDimmerLights_TriggerAdj
  6229                           
  6230                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw,0);
  6231  139D  0020               	movlb	0	; select bank0
  6232  139E  01A2               	clrf	setDimmerLights_AdjGo@command
  6233  139F  082A               	movf	Sw_DimmerOffFunc@sw,w
  6234  13A0  31A5  2580  3193   	fcall	_setDimmerLights_AdjGo
  6235                           
  6236                           ;Switch_B1.c: 314: Product->Data[17]=Product->Data[26+sw];
  6237  13A3  0020               	movlb	0	; select bank0
  6238  13A4  082A               	movf	Sw_DimmerOffFunc@sw,w
  6239  13A5  3E1A               	addlw	26
  6240  13A6  076F               	addwf	_Product,w
  6241  13A7  00A8               	movwf	??_Sw_DimmerOffFunc
  6242  13A8  0828               	movf	??_Sw_DimmerOffFunc,w
  6243  13A9  0086               	movwf	6
  6244  13AA  3001               	movlw	1	; select bank2/3
  6245  13AB  0087               	movwf	7
  6246  13AC  0801               	movf	1,w
  6247  13AD  00A9               	movwf	??_Sw_DimmerOffFunc+1
  6248  13AE  086F               	movf	_Product,w
  6249  13AF  3E11               	addlw	17
  6250  13B0  0086               	movwf	6
  6251  13B1  3001               	movlw	1	; select bank2/3
  6252  13B2  0087               	movwf	7
  6253  13B3  0829               	movf	??_Sw_DimmerOffFunc+1,w
  6254  13B4  0081               	movwf	1
  6255                           
  6256                           ;Switch_B1.c: 315: setRF_DimmerLights(sw,Sw->Status);
  6257  13B5  086D               	movf	_Sw,w
  6258  13B6  0086               	movwf	6
  6259  13B7  3001               	movlw	1	; select bank2/3
  6260  13B8  0087               	movwf	7
  6261  13B9  3000               	movlw	0
  6262  13BA  1B01               	btfsc	1,6
  6263  13BB  3001               	movlw	1
  6264  13BC  00A0               	movwf	setRF_DimmerLights@on
  6265  13BD  082A               	movf	Sw_DimmerOffFunc@sw,w
  6266  13BE  319E  262F  3193   	fcall	_setRF_DimmerLights
  6267                           
  6268                           ;Switch_B1.c: 316: setTxData(1);
  6269  13C1  3001               	movlw	1
  6270  13C2  318B  2318         	fcall	_setTxData
  6271                           
  6272                           ;Switch_B1.c: 318: }
  6273                           ;Switch_B1.c: 319: }
  6274  13C4  0008               	return
  6275  13C5                     l9276:	
  6276                           
  6277                           ;Switch_B1.c: 320: else
  6278                           ;Switch_B1.c: 321: {
  6279                           ;Switch_B1.c: 322: setDimmerLights_Trigger(sw,1);
  6280  13C5  0020               	movlb	0	; select bank0
  6281  13C6  01A2               	clrf	setDimmerLights_Trigger@command
  6282  13C7  0AA2               	incf	setDimmerLights_Trigger@command,f
  6283  13C8  082A               	movf	Sw_DimmerOffFunc@sw,w
  6284  13C9  31A5  2540  3193   	fcall	_setDimmerLights_Trigger
  6285                           
  6286                           ;Switch_B1.c: 323: setDimmerLights_Switch(sw,0);
  6287  13CC  0020               	movlb	0	; select bank0
  6288  13CD  01A2               	clrf	setDimmerLights_Switch@command
  6289  13CE  082A               	movf	Sw_DimmerOffFunc@sw,w
  6290  13CF  31A5  2530  3193   	fcall	_setDimmerLights_Switch
  6291                           
  6292                           ;Switch_B1.c: 325: setDelayOff_GO(sw,0,0);
  6293  13D2  0020               	movlb	0	; select bank0
  6294  13D3  01A3               	clrf	setDelayOff_GO@command
  6295  13D4  01A4               	clrf	setDelayOff_GO@value
  6296  13D5  082A               	movf	Sw_DimmerOffFunc@sw,w
  6297  13D6  319E  26E5  3193   	fcall	_setDelayOff_GO
  6298                           
  6299                           ;Switch_B1.c: 326: setRF_DimmerLights(sw,Sw->Status);
  6300  13D9  0020               	movlb	0	; select bank0
  6301  13DA  086D               	movf	_Sw,w
  6302  13DB  0086               	movwf	6
  6303  13DC  3001               	movlw	1	; select bank2/3
  6304  13DD  0087               	movwf	7
  6305  13DE  3000               	movlw	0
  6306  13DF  1B01               	btfsc	1,6
  6307  13E0  3001               	movlw	1
  6308  13E1  00A0               	movwf	setRF_DimmerLights@on
  6309  13E2  082A               	movf	Sw_DimmerOffFunc@sw,w
  6310  13E3  319E  262F  3193   	fcall	_setRF_DimmerLights
  6311                           
  6312                           ;Switch_B1.c: 327: setTxData(1);
  6313  13E6  3001               	movlw	1
  6314  13E7  318B  2318         	fcall	_setTxData
  6315  13E9  0008               	return
  6316  13EA                     __end_of_Sw_DimmerOffFunc:	
  6317                           
  6318                           	psect	text15
  6319  190C                     __ptext15:	
  6320 ;; *************** function _Sw_DimmerAdjFunc *****************
  6321 ;; Defined at:
  6322 ;;		line 332 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  sw              1    wreg     unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  sw              1    4[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;		None               void
  6329 ;; Registers used:
  6330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        1 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    6
  6343 ;; This function calls:
  6344 ;;		_setDimmerLights_AdjGo
  6345 ;;		_setDimmerLights_TriggerAdj
  6346 ;;		_setRFSW_Status
  6347 ;; This function is called by:
  6348 ;;		_setSw_Main
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _Sw_DimmerAdjFunc
  6354  190C                     _Sw_DimmerAdjFunc:	
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6358                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6359  190C  0020               	movlb	0	; select bank0
  6360  190D  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6361                           
  6362                           ;Switch_B1.c: 334: if(Sw->Flag)
  6363  190E  086D               	movf	_Sw,w
  6364  190F  0086               	movwf	6
  6365  1910  3001               	movlw	1	; select bank2/3
  6366  1911  0087               	movwf	7
  6367  1912  1F81               	btfss	1,7
  6368  1913  0008               	return
  6369                           
  6370                           ;Switch_B1.c: 335: {
  6371                           ;Switch_B1.c: 336: Sw->Adj=1;
  6372  1914  0A6D               	incf	_Sw,w
  6373  1915  0086               	movwf	6
  6374  1916  3001               	movlw	1	; select bank2/3
  6375  1917  0087               	movwf	7
  6376  1918  1401               	bsf	1,0
  6377                           
  6378                           ;Switch_B1.c: 337: Sw->Status=1;
  6379  1919  086D               	movf	_Sw,w
  6380  191A  0086               	movwf	6
  6381  191B  3001               	movlw	1	; select bank2/3
  6382  191C  0087               	movwf	7
  6383  191D  1701               	bsf	1,6
  6384                           
  6385                           ;Switch_B1.c: 338: setRFSW_Status(sw,1);
  6386  191E  01A2               	clrf	setRFSW_Status@command
  6387  191F  0AA2               	incf	setRFSW_Status@command,f
  6388  1920  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6389  1921  31A5  2502  3199   	fcall	_setRFSW_Status
  6390                           
  6391                           ;Switch_B1.c: 340: setDimmerLights_TriggerAdj(sw,1);
  6392  1924  0020               	movlb	0	; select bank0
  6393  1925  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6394  1926  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6395  1927  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6396  1928  31A5  2590  3199   	fcall	_setDimmerLights_TriggerAdj
  6397                           
  6398                           ;Switch_B1.c: 341: setDimmerLights_AdjGo(sw,1);
  6399  192B  0020               	movlb	0	; select bank0
  6400  192C  01A2               	clrf	setDimmerLights_AdjGo@command
  6401  192D  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6402  192E  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6403  192F  31A5  2580         	fcall	_setDimmerLights_AdjGo
  6404  1931  0008               	return
  6405  1932                     __end_of_Sw_DimmerAdjFunc:	
  6406                           
  6407                           	psect	text16
  6408  2590                     __ptext16:	
  6409 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6410 ;; Defined at:
  6411 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  lights          1    wreg     unsigned char 
  6414 ;;  command         1    2[BANK0 ] unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  lights          1    3[BANK0 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        2 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    5
  6433 ;; This function calls:
  6434 ;;		_DimmerLightsPointSelect
  6435 ;; This function is called by:
  6436 ;;		_Sw_DimmerOffFunc
  6437 ;;		_Sw_DimmerAdjFunc
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _setDimmerLights_TriggerAdj
  6443  2590                     _setDimmerLights_TriggerAdj:	
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6447                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6448  2590  0020               	movlb	0	; select bank0
  6449  2591  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6450                           
  6451                           ;Dimmer_B1.c: 434: DimmerLightsPointSelect(lights);
  6452  2592  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6453  2593  31A5  25B1         	fcall	_DimmerLightsPointSelect
  6454                           
  6455                           ;Dimmer_B1.c: 435: DimmerLights->TriggerAdj=command;
  6456  2595  0020               	movlb	0	; select bank0
  6457  2596  086C               	movf	_DimmerLights,w
  6458  2597  3E09               	addlw	9
  6459  2598  0086               	movwf	6
  6460  2599  3001               	movlw	1	; select bank2/3
  6461  259A  0087               	movwf	7
  6462  259B  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6463  259C  1181               	bcf	1,3
  6464  259D  1D03               	skipz
  6465  259E  1581               	bsf	1,3
  6466  259F  0008               	return
  6467  25A0                     __end_of_setDimmerLights_TriggerAdj:	
  6468                           
  6469                           	psect	text17
  6470  2580                     __ptext17:	
  6471 ;; *************** function _setDimmerLights_AdjGo *****************
  6472 ;; Defined at:
  6473 ;;		line 422 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  lights          1    wreg     unsigned char 
  6476 ;;  command         1    2[BANK0 ] unsigned char 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  lights          1    3[BANK0 ] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6488 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;Total ram usage:        2 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    5
  6495 ;; This function calls:
  6496 ;;		_DimmerLightsPointSelect
  6497 ;; This function is called by:
  6498 ;;		_Sw_DimmerOffFunc
  6499 ;;		_Sw_DimmerAdjFunc
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _setDimmerLights_AdjGo
  6505  2580                     _setDimmerLights_AdjGo:	
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6509                           ;setDimmerLights_AdjGo@lights stored from wreg
  6510  2580  0020               	movlb	0	; select bank0
  6511  2581  00A3               	movwf	setDimmerLights_AdjGo@lights
  6512                           
  6513                           ;Dimmer_B1.c: 424: DimmerLightsPointSelect(lights);
  6514  2582  0823               	movf	setDimmerLights_AdjGo@lights,w
  6515  2583  31A5  25B1         	fcall	_DimmerLightsPointSelect
  6516                           
  6517                           ;Dimmer_B1.c: 425: DimmerLights->AdjGo=command;
  6518  2585  0020               	movlb	0	; select bank0
  6519  2586  086C               	movf	_DimmerLights,w
  6520  2587  3E09               	addlw	9
  6521  2588  0086               	movwf	6
  6522  2589  3001               	movlw	1	; select bank2/3
  6523  258A  0087               	movwf	7
  6524  258B  0822               	movf	setDimmerLights_AdjGo@command,w
  6525  258C  1101               	bcf	1,2
  6526  258D  1D03               	skipz
  6527  258E  1501               	bsf	1,2
  6528  258F  0008               	return
  6529  2590                     __end_of_setDimmerLights_AdjGo:	
  6530                           
  6531                           	psect	text18
  6532  24D9                     __ptext18:	
  6533 ;; *************** function _Switch_Initialization *****************
  6534 ;; Defined at:
  6535 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;		None               void
  6542 ;; Registers used:
  6543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:        0 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    7
  6556 ;; This function calls:
  6557 ;;		_TouchPower
  6558 ;;		_setSw_Initialization
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _Switch_Initialization
  6566  24D9                     _Switch_Initialization:	
  6567                           
  6568                           ;Switch_B1.c: 40: TouchPower();
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6572  24D9  3190  2000  31A4   	fcall	_TouchPower
  6573                           
  6574                           ;Switch_B1.c: 42: WPUB1=0;
  6575  24DC  0024               	movlb	4	; select bank4
  6576  24DD  108D               	bcf	13,1	;volatile
  6577                           
  6578                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6579  24DE  3001               	movlw	1
  6580  24DF  31A3  23DB  31A4   	fcall	_setSw_Initialization
  6581                           
  6582                           ;Switch_B1.c: 54: setSw_Initialization(2);
  6583  24E2  3002               	movlw	2
  6584  24E3  31A3  23DB         	fcall	_setSw_Initialization
  6585  24E5  0008               	return
  6586  24E6                     __end_of_Switch_Initialization:	
  6587                           
  6588                           	psect	text19
  6589  23DB                     __ptext19:	
  6590 ;; *************** function _setSw_Initialization *****************
  6591 ;; Defined at:
  6592 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  sw              1    wreg     unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  sw              1    4[BANK0 ] unsigned char 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;Total ram usage:        1 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    6
  6613 ;; This function calls:
  6614 ;;		_setLED
  6615 ;; This function is called by:
  6616 ;;		_Switch_Initialization
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _setSw_Initialization
  6622  23DB                     _setSw_Initialization:	
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6626                           ;setSw_Initialization@sw stored from wreg
  6627  23DB  0020               	movlb	0	; select bank0
  6628  23DC  00A4               	movwf	setSw_Initialization@sw
  6629                           
  6630                           ;Switch_B1.c: 80: setLED(sw,1);
  6631  23DD  01A2               	clrf	setLED@command
  6632  23DE  0AA2               	incf	setLED@command,f
  6633  23DF  0824               	movf	setSw_Initialization@sw,w
  6634  23E0  319F  2741         	fcall	_setLED
  6635  23E2  0008               	return
  6636  23E3                     __end_of_setSw_Initialization:	
  6637                           
  6638                           	psect	text20
  6639  1000                     __ptext20:	
  6640 ;; *************** function _TouchPower *****************
  6641 ;; Defined at:
  6642 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		None
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    4
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_Switch_Initialization
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _TouchPower
  6672  1000                     _TouchPower:	
  6673  1000                     l2924:	
  6674                           ;Switch_B1.c: 11: while(!RC5)
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _TouchPower: []
  6678                           
  6679  1000  0020               	movlb	0	; select bank0
  6680  1001  1A8E               	btfsc	14,5	;volatile
  6681  1002  0008               	return
  6682                           
  6683                           ;Switch_B1.c: 12: RC5=1;
  6684  1003  168E               	bsf	14,5	;volatile
  6685  1004  2800               	goto	l2924
  6686  1005                     __end_of_TouchPower:	
  6687                           
  6688                           	psect	text21
  6689  07FC                     __ptext21:	
  6690 ;; *************** function _RF_Main *****************
  6691 ;; Defined at:
  6692 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:   13
  6713 ;; This function calls:
  6714 ;;		_setRF_Main
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _RF_Main
  6722  07FC                     _RF_Main:	
  6723                           
  6724                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6728  07FC  3001               	movlw	1
  6729  07FD  3195  2551         	fcall	_setRF_Main
  6730  07FF  0008               	return
  6731  0800                     __end_of_RF_Main:	
  6732                           
  6733                           	psect	text22
  6734  1551                     __ptext22:	
  6735 ;; *************** function _setRF_Main *****************
  6736 ;; Defined at:
  6737 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  rf              1    wreg     unsigned char 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  rf              1   74[BANK0 ] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;		None               void
  6744 ;; Registers used:
  6745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;Total ram usage:        3 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:   12
  6758 ;; This function calls:
  6759 ;;		_CC2500_RxData
  6760 ;;		_CC2500_TxData
  6761 ;;		_CC2500_WriteCommand
  6762 ;;		_RF_RxDisable
  6763 ;;		_RfPointSelect
  6764 ;;		_getRxData
  6765 ;;		_setINT_GO
  6766 ;; This function is called by:
  6767 ;;		_RF_Main
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           
  6772                           ;psect for function _setRF_Main
  6773  1551                     _setRF_Main:	
  6774                           
  6775                           ;incstack = 0
  6776                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6777                           ;setRF_Main@rf stored from wreg
  6778  1551  0020               	movlb	0	; select bank0
  6779  1552  00EA               	movwf	setRF_Main@rf
  6780                           
  6781                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6782  1553  086A               	movf	setRF_Main@rf,w
  6783  1554  31A4  241D  3195   	fcall	_RfPointSelect
  6784                           
  6785                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6786  1557  087C               	movf	_RF,w
  6787  1558  0086               	movwf	6
  6788  1559  0187               	clrf	7
  6789  155A  1C01               	btfss	1,0
  6790  155B  0008               	return
  6791                           
  6792                           ;RF_Control_B1.c: 62: {
  6793                           ;RF_Control_B1.c: 68: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  6794  155C  0020               	movlb	0	; select bank0
  6795  155D  01EB               	clrf	_setRF_Main$4359
  6796  155E  1F0C               	btfss	12,6	;volatile
  6797  155F  1A0C               	btfsc	12,4	;volatile
  6798  1560  2D65               	goto	l9616
  6799  1561  180C               	btfsc	12,0	;volatile
  6800  1562  2D65               	goto	l9616
  6801  1563  1C8D               	btfss	13,1	;volatile
  6802  1564  2D6C               	goto	l9620
  6803  1565                     l9616:	
  6804  1565  087C               	movf	_RF,w
  6805  1566  0086               	movwf	6
  6806  1567  0187               	clrf	7
  6807  1568  1B01               	btfsc	1,6
  6808  1569  2D6C               	goto	l9620
  6809  156A  01EB               	clrf	_setRF_Main$4359
  6810  156B  0AEB               	incf	_setRF_Main$4359,f
  6811  156C                     l9620:	
  6812  156C  087C               	movf	_RF,w
  6813  156D  0086               	movwf	6
  6814  156E  0187               	clrf	7
  6815  156F  086B               	movf	_setRF_Main$4359,w
  6816  1570  1381               	bcf	1,7
  6817  1571  1D03               	skipz
  6818  1572  1781               	bsf	1,7
  6819                           
  6820                           ;RF_Control_B1.c: 76: if(!RF->Key)
  6821  1573  087C               	movf	_RF,w
  6822  1574  0086               	movwf	6
  6823  1575  0187               	clrf	7
  6824  1576  1B81               	btfsc	1,7
  6825  1577  2D8B               	goto	l9632
  6826                           
  6827                           ;RF_Control_B1.c: 77: {
  6828                           ;RF_Control_B1.c: 78: if(RF->ReceiveGO)
  6829  1578  087C               	movf	_RF,w
  6830  1579  0086               	movwf	6
  6831  157A  0187               	clrf	7
  6832  157B  1C81               	btfss	1,1
  6833  157C  2D8B               	goto	l9632
  6834                           
  6835                           ;RF_Control_B1.c: 79: {
  6836                           ;RF_Control_B1.c: 80: RF->ReceiveGO=0;
  6837  157D  087C               	movf	_RF,w
  6838  157E  0086               	movwf	6
  6839  157F  0187               	clrf	7
  6840  1580  1081               	bcf	1,1
  6841                           
  6842                           ;RF_Control_B1.c: 81: CC2500_RxData();
  6843  1581  3191  2101  3195   	fcall	_CC2500_RxData
  6844                           
  6845                           ;RF_Control_B1.c: 87: getRxData(1);
  6846  1584  3001               	movlw	1
  6847  1585  319D  2586  3195   	fcall	_getRxData
  6848                           
  6849                           ;RF_Control_B1.c: 88: RB5=~RB5;
  6850  1588  3020               	movlw	32
  6851  1589  0020               	movlb	0	; select bank0
  6852  158A  068D               	xorwf	13,f
  6853  158B                     l9632:	
  6854                           
  6855                           ;RF_Control_B1.c: 90: }
  6856                           ;RF_Control_B1.c: 91: }
  6857                           ;RF_Control_B1.c: 93: if(RF->TransceiveGO)
  6858  158B  087C               	movf	_RF,w
  6859  158C  0086               	movwf	6
  6860  158D  0187               	clrf	7
  6861  158E  1D01               	btfss	1,2
  6862  158F  2DBC               	goto	l9650
  6863                           
  6864                           ;RF_Control_B1.c: 94: {
  6865                           ;RF_Control_B1.c: 95: RF_RxDisable(1);
  6866  1590  3001               	movlw	1
  6867  1591  3199  2132  3195   	fcall	_RF_RxDisable
  6868                           
  6869                           ;RF_Control_B1.c: 96: if(RF->Debounce == 0)
  6870  1594  087C               	movf	_RF,w
  6871  1595  0086               	movwf	6
  6872  1596  0187               	clrf	7
  6873  1597  1A81               	btfsc	1,5
  6874  1598  2DB1               	goto	l9646
  6875                           
  6876                           ;RF_Control_B1.c: 97: {
  6877                           ;RF_Control_B1.c: 98: RF->DebounceTime++;
  6878  1599  3001               	movlw	1
  6879  159A  0020               	movlb	0	; select bank0
  6880  159B  00E9               	movwf	??_setRF_Main
  6881  159C  0A7C               	incf	_RF,w
  6882  159D  0086               	movwf	6
  6883  159E  0187               	clrf	7
  6884  159F  0869               	movf	??_setRF_Main,w
  6885  15A0  0781               	addwf	1,f
  6886                           
  6887                           ;RF_Control_B1.c: 99: if(RF->DebounceTime == 25)
  6888  15A1  0A7C               	incf	_RF,w
  6889  15A2  0086               	movwf	6
  6890  15A3  0187               	clrf	7
  6891  15A4  0801               	movf	1,w
  6892  15A5  3A19               	xorlw	25
  6893  15A6  1D03               	skipz
  6894  15A7  0008               	return
  6895                           
  6896                           ;RF_Control_B1.c: 100: {
  6897                           ;RF_Control_B1.c: 101: RF->DebounceTime=0;
  6898  15A8  0A7C               	incf	_RF,w
  6899  15A9  0086               	movwf	6
  6900  15AA  0187               	clrf	7
  6901  15AB  0181               	clrf	1
  6902                           
  6903                           ;RF_Control_B1.c: 102: RF->Debounce=1;
  6904  15AC  087C               	movf	_RF,w
  6905  15AD  0086               	movwf	6
  6906  15AE  0187               	clrf	7
  6907  15AF  1681               	bsf	1,5
  6908                           
  6909                           ;RF_Control_B1.c: 103: }
  6910                           ;RF_Control_B1.c: 104: }
  6911  15B0  0008               	return
  6912  15B1                     l9646:	
  6913                           
  6914                           ;RF_Control_B1.c: 105: else
  6915                           ;RF_Control_B1.c: 106: {
  6916                           ;RF_Control_B1.c: 107: RF->Debounce=0;
  6917  15B1  087C               	movf	_RF,w
  6918  15B2  0086               	movwf	6
  6919  15B3  0187               	clrf	7
  6920  15B4  1281               	bcf	1,5
  6921                           
  6922                           ;RF_Control_B1.c: 108: RF->TransceiveGO=0;
  6923  15B5  087C               	movf	_RF,w
  6924  15B6  0086               	movwf	6
  6925  15B7  0187               	clrf	7
  6926  15B8  1101               	bcf	1,2
  6927                           
  6928                           ;RF_Control_B1.c: 109: CC2500_TxData();
  6929  15B9  319C  24FC         	fcall	_CC2500_TxData
  6930                           
  6931                           ;RF_Control_B1.c: 110: }
  6932                           ;RF_Control_B1.c: 111: }
  6933  15BB  0008               	return
  6934  15BC                     l9650:	
  6935                           
  6936                           ;RF_Control_B1.c: 112: else
  6937                           ;RF_Control_B1.c: 113: {
  6938                           ;RF_Control_B1.c: 115: if(!RF->RxStatus)
  6939  15BC  087C               	movf	_RF,w
  6940  15BD  0086               	movwf	6
  6941  15BE  0187               	clrf	7
  6942  15BF  1981               	btfsc	1,3
  6943  15C0  0008               	return
  6944                           
  6945                           ;RF_Control_B1.c: 116: {
  6946                           ;RF_Control_B1.c: 117: RF->RxStatus=1;
  6947  15C1  087C               	movf	_RF,w
  6948  15C2  0086               	movwf	6
  6949  15C3  0187               	clrf	7
  6950  15C4  1581               	bsf	1,3
  6951                           
  6952                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x36);
  6953  15C5  3036               	movlw	54
  6954  15C6  31A5  2520  3195   	fcall	_CC2500_WriteCommand
  6955                           
  6956                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  6957  15C9  3034               	movlw	52
  6958  15CA  31A5  2520  3195   	fcall	_CC2500_WriteCommand
  6959                           
  6960                           ;RF_Control_B1.c: 120: setINT_GO(1);
  6961  15CD  3001               	movlw	1
  6962  15CE  31A3  23F4         	fcall	_setINT_GO
  6963  15D0  0008               	return
  6964  15D1                     __end_of_setRF_Main:	
  6965                           
  6966                           	psect	text23
  6967  1D86                     __ptext23:	
  6968 ;; *************** function _getRxData *****************
  6969 ;; Defined at:
  6970 ;;		line 208 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  rf              1    wreg     unsigned char 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  rf              1   72[BANK0 ] unsigned char 
  6975 ;;  i               1    0        unsigned char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;		None               void
  6978 ;; Registers used:
  6979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;Total ram usage:        1 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:   11
  6992 ;; This function calls:
  6993 ;;		_RfPointSelect
  6994 ;;		_setControl_Lights_Table
  6995 ;;		_setLog_Code
  6996 ;; This function is called by:
  6997 ;;		_setRF_Main
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function _getRxData
  7003  1D86                     _getRxData:	
  7004                           
  7005                           ;incstack = 0
  7006                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7007                           ;getRxData@rf stored from wreg
  7008  1D86  0020               	movlb	0	; select bank0
  7009  1D87  00E8               	movwf	getRxData@rf
  7010                           
  7011                           ;RF_Control_B1.c: 210: unsigned char i;
  7012                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  7013  1D88  0868               	movf	getRxData@rf,w
  7014  1D89  31A4  241D  319D   	fcall	_RfPointSelect
  7015                           
  7016                           ;RF_Control_B1.c: 212: if(RF->Learn)
  7017  1D8C  087C               	movf	_RF,w
  7018  1D8D  0086               	movwf	6
  7019  1D8E  0187               	clrf	7
  7020  1D8F  1F01               	btfss	1,6
  7021  1D90  2D9D               	goto	l9172
  7022                           
  7023                           ;RF_Control_B1.c: 213: {
  7024                           ;RF_Control_B1.c: 214: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7025  1D91  0021               	movlb	1	; select bank1
  7026  1D92  08A0               	movf	_RF_Data^(0+128),f
  7027  1D93  1D03               	skipz
  7028  1D94  0008               	return
  7029  1D95  0821               	movf	(_RF_Data^(0+128)+1),w
  7030  1D96  3A64               	xorlw	100
  7031  1D97  1D03               	skipz
  7032  1D98  0008               	return
  7033                           
  7034                           ;RF_Control_B1.c: 215: {
  7035                           ;RF_Control_B1.c: 216: setLog_Code(1);
  7036  1D99  3001               	movlw	1
  7037  1D9A  3187  27B4         	fcall	_setLog_Code
  7038                           
  7039                           ;RF_Control_B1.c: 217: }
  7040                           ;RF_Control_B1.c: 218: }
  7041  1D9C  0008               	return
  7042  1D9D                     l9172:	
  7043                           
  7044                           ;RF_Control_B1.c: 219: else
  7045                           ;RF_Control_B1.c: 220: {
  7046                           ;RF_Control_B1.c: 221: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7047  1D9D  0021               	movlb	1	; select bank1
  7048  1D9E  08A0               	movf	_RF_Data^(0+128),f
  7049  1D9F  1D03               	skipz
  7050  1DA0  0008               	return
  7051  1DA1  0821               	movf	(_RF_Data^(0+128)+1),w
  7052  1DA2  3A02               	xorlw	2
  7053  1DA3  1D03               	skipz
  7054  1DA4  0008               	return
  7055                           
  7056                           ;RF_Control_B1.c: 222: {
  7057                           ;RF_Control_B1.c: 223: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7058  1DA5  082C               	movf	(_RF_Data^(0+128)+12),w
  7059  1DA6  3AFF               	xorlw	255
  7060  1DA7  1D03               	skipz
  7061  1DA8  2DB3               	goto	l9184
  7062  1DA9  082D               	movf	(_RF_Data^(0+128)+13),w
  7063  1DAA  3AFF               	xorlw	255
  7064  1DAB  1D03               	skipz
  7065  1DAC  2DB3               	goto	l9184
  7066  1DAD  082E               	movf	(_RF_Data^(0+128)+14),w
  7067  1DAE  3AFF               	xorlw	255
  7068  1DAF  1D03               	skipz
  7069  1DB0  2DB3               	goto	l9184
  7070                           
  7071                           ;RF_Control_B1.c: 224: {
  7072                           ;RF_Control_B1.c: 225: __nop();
  7073  1DB1  0000               	nop
  7074                           
  7075                           ;RF_Control_B1.c: 226: }
  7076  1DB2  0008               	return
  7077  1DB3                     l9184:	
  7078                           
  7079                           ;RF_Control_B1.c: 227: else
  7080                           ;RF_Control_B1.c: 228: {
  7081                           ;RF_Control_B1.c: 229: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7082  1DB3  0020               	movlb	0	; select bank0
  7083  1DB4  086F               	movf	_Product,w
  7084  1DB5  3E0C               	addlw	12
  7085  1DB6  0086               	movwf	6
  7086  1DB7  3001               	movlw	1	; select bank2/3
  7087  1DB8  0087               	movwf	7
  7088  1DB9  0021               	movlb	1	; select bank1
  7089  1DBA  082C               	movf	(_RF_Data^(0+128)+12),w
  7090  1DBB  0601               	xorwf	1,w
  7091  1DBC  1D03               	skipz
  7092  1DBD  0008               	return
  7093  1DBE  0020               	movlb	0	; select bank0
  7094  1DBF  086F               	movf	_Product,w
  7095  1DC0  3E0D               	addlw	13
  7096  1DC1  0086               	movwf	6
  7097  1DC2  3001               	movlw	1	; select bank2/3
  7098  1DC3  0087               	movwf	7
  7099  1DC4  0021               	movlb	1	; select bank1
  7100  1DC5  082D               	movf	(_RF_Data^(0+128)+13),w
  7101  1DC6  0601               	xorwf	1,w
  7102  1DC7  1D03               	skipz
  7103  1DC8  0008               	return
  7104  1DC9  0020               	movlb	0	; select bank0
  7105  1DCA  086F               	movf	_Product,w
  7106  1DCB  3E0E               	addlw	14
  7107  1DCC  0086               	movwf	6
  7108  1DCD  3001               	movlw	1	; select bank2/3
  7109  1DCE  0087               	movwf	7
  7110  1DCF  0021               	movlb	1	; select bank1
  7111  1DD0  082E               	movf	(_RF_Data^(0+128)+14),w
  7112  1DD1  0601               	xorwf	1,w
  7113  1DD2  1D03               	skipz
  7114  1DD3  0008               	return
  7115                           
  7116                           ;RF_Control_B1.c: 230: {
  7117                           ;RF_Control_B1.c: 231: setControl_Lights_Table(1);
  7118  1DD4  3001               	movlw	1
  7119  1DD5  3197  276D         	fcall	_setControl_Lights_Table
  7120                           
  7121                           ;RF_Control_B1.c: 240: {
  7122                           ;RF_Control_B1.c: 241: ;
  7123                           
  7124                           ;RF_Control_B1.c: 236: {
  7125                           ;RF_Control_B1.c: 237: ;
  7126                           ;RF_Control_B1.c: 238: }
  7127                           
  7128                           ;RF_Control_B1.c: 232: }
  7129                           ;RF_Control_B1.c: 233: }
  7130                           ;RF_Control_B1.c: 234: }
  7131  1DD7  0008               	return
  7132  1DD8                     __end_of_getRxData:	
  7133                           
  7134                           	psect	text24
  7135  07B4                     __ptext24:	
  7136 ;; *************** function _setLog_Code *****************
  7137 ;; Defined at:
  7138 ;;		line 250 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  rf              1    wreg     unsigned char 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  rf              1   11[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;		None               void
  7145 ;; Registers used:
  7146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        2 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    6
  7159 ;; This function calls:
  7160 ;;		_RfPointSelect
  7161 ;;		_setBuz
  7162 ;; This function is called by:
  7163 ;;		_getRxData
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function _setLog_Code
  7169  07B4                     _setLog_Code:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7173                           ;setLog_Code@rf stored from wreg
  7174  07B4  0020               	movlb	0	; select bank0
  7175  07B5  00AB               	movwf	setLog_Code@rf
  7176                           
  7177                           ;RF_Control_B1.c: 252: RfPointSelect(rf);
  7178  07B6  082B               	movf	setLog_Code@rf,w
  7179  07B7  31A4  241D  3187   	fcall	_RfPointSelect
  7180                           
  7181                           ;RF_Control_B1.c: 253: Product->Data[12]=RF_Data[12];
  7182  07BA  0021               	movlb	1	; select bank1
  7183  07BB  082C               	movf	(_RF_Data^(0+128)+12),w
  7184  07BC  0020               	movlb	0	; select bank0
  7185  07BD  00AA               	movwf	??_setLog_Code
  7186  07BE  086F               	movf	_Product,w
  7187  07BF  3E0C               	addlw	12
  7188  07C0  0086               	movwf	6
  7189  07C1  3001               	movlw	1	; select bank2/3
  7190  07C2  0087               	movwf	7
  7191  07C3  082A               	movf	??_setLog_Code,w
  7192  07C4  0081               	movwf	1
  7193                           
  7194                           ;RF_Control_B1.c: 254: Product->Data[13]=RF_Data[13];
  7195  07C5  0021               	movlb	1	; select bank1
  7196  07C6  082D               	movf	(_RF_Data^(0+128)+13),w
  7197  07C7  0020               	movlb	0	; select bank0
  7198  07C8  00AA               	movwf	??_setLog_Code
  7199  07C9  086F               	movf	_Product,w
  7200  07CA  3E0D               	addlw	13
  7201  07CB  0086               	movwf	6
  7202  07CC  3001               	movlw	1	; select bank2/3
  7203  07CD  0087               	movwf	7
  7204  07CE  082A               	movf	??_setLog_Code,w
  7205  07CF  0081               	movwf	1
  7206                           
  7207                           ;RF_Control_B1.c: 255: Product->Data[14]=RF_Data[14];
  7208  07D0  0021               	movlb	1	; select bank1
  7209  07D1  082E               	movf	(_RF_Data^(0+128)+14),w
  7210  07D2  0020               	movlb	0	; select bank0
  7211  07D3  00AA               	movwf	??_setLog_Code
  7212  07D4  086F               	movf	_Product,w
  7213  07D5  3E0E               	addlw	14
  7214  07D6  0086               	movwf	6
  7215  07D7  3001               	movlw	1	; select bank2/3
  7216  07D8  0087               	movwf	7
  7217  07D9  082A               	movf	??_setLog_Code,w
  7218  07DA  0081               	movwf	1
  7219                           
  7220                           ;RF_Control_B1.c: 256: setBuz(1,100);
  7221  07DB  3064               	movlw	100
  7222  07DC  00A6               	movwf	setBuz@time
  7223  07DD  3000               	movlw	0
  7224  07DE  00A7               	movwf	setBuz@time+1
  7225  07DF  3001               	movlw	1
  7226  07E0  3193  23EA  3187   	fcall	_setBuz
  7227                           
  7228                           ;RF_Control_B1.c: 257: RF->Learn=0;
  7229  07E3  087C               	movf	_RF,w
  7230  07E4  0086               	movwf	6
  7231  07E5  0187               	clrf	7
  7232  07E6  1301               	bcf	1,6
  7233                           
  7234                           ;RF_Control_B1.c: 258: if(TMain->First)
  7235  07E7  0021               	movlb	1	; select bank1
  7236  07E8  0869               	movf	_TMain^(0+128),w
  7237  07E9  3E03               	addlw	3
  7238  07EA  0086               	movwf	6
  7239  07EB  3001               	movlw	1	; select bank2/3
  7240  07EC  0087               	movwf	7
  7241  07ED  1C81               	btfss	1,1
  7242  07EE  2FF5               	goto	l2708
  7243                           
  7244                           ;RF_Control_B1.c: 259: {
  7245                           ;RF_Control_B1.c: 260: Memory->LoopSave=1;
  7246  07EF  0868               	movf	_Memory^(0+128),w
  7247  07F0  3E22               	addlw	34
  7248  07F1  0086               	movwf	6
  7249  07F2  3002               	movlw	2	; select bank4/5
  7250  07F3  0087               	movwf	7
  7251  07F4  1501               	bsf	1,2
  7252  07F5                     l2708:	
  7253                           
  7254                           ;RF_Control_B1.c: 261: }
  7255                           ;RF_Control_B1.c: 262: Memory->Modify=1;
  7256  07F5  0868               	movf	_Memory^(0+128),w
  7257  07F6  3E22               	addlw	34
  7258  07F7  0086               	movwf	6
  7259  07F8  3002               	movlw	2	; select bank4/5
  7260  07F9  0087               	movwf	7
  7261  07FA  1401               	bsf	1,0
  7262  07FB  0008               	return
  7263  07FC                     __end_of_setLog_Code:	
  7264                           
  7265                           	psect	text25
  7266  176D                     __ptext25:	
  7267 ;; *************** function _setControl_Lights_Table *****************
  7268 ;; Defined at:
  7269 ;;		line 265 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  rf              1    wreg     unsigned char 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  rf              1   71[BANK0 ] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;		None               void
  7276 ;; Registers used:
  7277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;Total ram usage:        1 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:   10
  7290 ;; This function calls:
  7291 ;;		_RfPointSelect
  7292 ;;		_setBuz
  7293 ;;		_setDimmerLights
  7294 ;;		_setRFSW_AdjControl
  7295 ;;		_setRFSW_Control
  7296 ;;		_setRFSW_Status
  7297 ;;		_setSw_Status
  7298 ;;		_setTxData
  7299 ;; This function is called by:
  7300 ;;		_getRxData
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _setControl_Lights_Table
  7306  176D                     _setControl_Lights_Table:	
  7307                           
  7308                           ;incstack = 0
  7309                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7310                           ;setControl_Lights_Table@rf stored from wreg
  7311  176D  0020               	movlb	0	; select bank0
  7312  176E  00E7               	movwf	setControl_Lights_Table@rf
  7313                           
  7314                           ;RF_Control_B1.c: 267: RfPointSelect(rf);
  7315  176F  0867               	movf	setControl_Lights_Table@rf,w
  7316  1770  31A4  241D  3197   	fcall	_RfPointSelect
  7317                           
  7318                           ;RF_Control_B1.c: 268: if(RF_Data[15] == 0x00)
  7319  1773  0021               	movlb	1	; select bank1
  7320  1774  08AF               	movf	(_RF_Data^(0+128)+15),f
  7321  1775  1D03               	skipz
  7322  1776  2FC0               	goto	l8976
  7323                           
  7324                           ;RF_Control_B1.c: 269: {
  7325                           ;RF_Control_B1.c: 271: setDimmerLights(1,0);
  7326  1777  0020               	movlb	0	; select bank0
  7327  1778  01A4               	clrf	setDimmerLights@status
  7328  1779  3001               	movlw	1
  7329  177A  3188  2001  3197   	fcall	_setDimmerLights
  7330                           
  7331                           ;RF_Control_B1.c: 272: setRFSW_Status(1,0);
  7332  177D  0020               	movlb	0	; select bank0
  7333  177E  01A2               	clrf	setRFSW_Status@command
  7334  177F  3001               	movlw	1
  7335  1780  31A5  2502  3197   	fcall	_setRFSW_Status
  7336                           
  7337                           ;RF_Control_B1.c: 273: setSw_Status(1,0);
  7338  1783  0020               	movlb	0	; select bank0
  7339  1784  01A2               	clrf	setSw_Status@command
  7340  1785  3001               	movlw	1
  7341  1786  31A5  2511  3197   	fcall	_setSw_Status
  7342                           
  7343                           ;RF_Control_B1.c: 276: setDimmerLights(2,0);
  7344  1789  0020               	movlb	0	; select bank0
  7345  178A  01A4               	clrf	setDimmerLights@status
  7346  178B  3002               	movlw	2
  7347  178C  3188  2001  3197   	fcall	_setDimmerLights
  7348                           
  7349                           ;RF_Control_B1.c: 277: setRFSW_Status(2,0);
  7350  178F  0020               	movlb	0	; select bank0
  7351  1790  01A2               	clrf	setRFSW_Status@command
  7352  1791  3002               	movlw	2
  7353  1792  31A5  2502  3197   	fcall	_setRFSW_Status
  7354                           
  7355                           ;RF_Control_B1.c: 278: setSw_Status(2,0);
  7356  1795  0020               	movlb	0	; select bank0
  7357  1796  01A2               	clrf	setSw_Status@command
  7358  1797  3002               	movlw	2
  7359  1798  31A5  2511  3197   	fcall	_setSw_Status
  7360                           
  7361                           ;RF_Control_B1.c: 286: Product->Data[9]=0;
  7362  179B  0020               	movlb	0	; select bank0
  7363  179C  086F               	movf	_Product,w
  7364  179D  3E09               	addlw	9
  7365  179E  0086               	movwf	6
  7366  179F  3001               	movlw	1	; select bank2/3
  7367  17A0  0087               	movwf	7
  7368  17A1  0181               	clrf	1
  7369                           
  7370                           ;RF_Control_B1.c: 287: Product->Data[11]=0;
  7371  17A2  086F               	movf	_Product,w
  7372  17A3  3E0B               	addlw	11
  7373  17A4  0086               	movwf	6
  7374  17A5  3001               	movlw	1	; select bank2/3
  7375  17A6  0087               	movwf	7
  7376  17A7  0181               	clrf	1
  7377                           
  7378                           ;RF_Control_B1.c: 288: Product->Data[15]=0;
  7379  17A8  086F               	movf	_Product,w
  7380  17A9  3E0F               	addlw	15
  7381  17AA  0086               	movwf	6
  7382  17AB  3001               	movlw	1	; select bank2/3
  7383  17AC  0087               	movwf	7
  7384  17AD  0181               	clrf	1
  7385                           
  7386                           ;RF_Control_B1.c: 289: Product->Data[17]=0;
  7387  17AE  086F               	movf	_Product,w
  7388  17AF  3E11               	addlw	17
  7389  17B0  0086               	movwf	6
  7390  17B1  3001               	movlw	1	; select bank2/3
  7391  17B2  0087               	movwf	7
  7392  17B3  0181               	clrf	1
  7393                           
  7394                           ;RF_Control_B1.c: 290: setBuz(1,100);
  7395  17B4  3064               	movlw	100
  7396  17B5  00A6               	movwf	setBuz@time
  7397  17B6  3000               	movlw	0
  7398  17B7  00A7               	movwf	setBuz@time+1
  7399  17B8  3001               	movlw	1
  7400  17B9  3193  23EA  3197   	fcall	_setBuz
  7401                           
  7402                           ;RF_Control_B1.c: 291: setTxData(1);
  7403  17BC  3001               	movlw	1
  7404  17BD  318B  2318         	fcall	_setTxData
  7405                           
  7406                           ;RF_Control_B1.c: 292: }
  7407  17BF  0008               	return
  7408  17C0                     l8976:	
  7409                           
  7410                           ;RF_Control_B1.c: 293: else if(RF_Data[15] == 0x20)
  7411  17C0  0021               	movlb	1	; select bank1
  7412  17C1  082F               	movf	(_RF_Data^(0+128)+15),w
  7413  17C2  3A20               	xorlw	32
  7414  17C3  1D03               	skipz
  7415  17C4  2FDC               	goto	l8982
  7416                           
  7417                           ;RF_Control_B1.c: 294: {
  7418                           ;RF_Control_B1.c: 295: Product->Data[9]=0;
  7419  17C5  0020               	movlb	0	; select bank0
  7420  17C6  086F               	movf	_Product,w
  7421  17C7  3E09               	addlw	9
  7422  17C8  0086               	movwf	6
  7423  17C9  3001               	movlw	1	; select bank2/3
  7424  17CA  0087               	movwf	7
  7425  17CB  0181               	clrf	1
  7426                           
  7427                           ;RF_Control_B1.c: 296: Product->Data[11]=0;
  7428  17CC  086F               	movf	_Product,w
  7429  17CD  3E0B               	addlw	11
  7430  17CE  0086               	movwf	6
  7431  17CF  3001               	movlw	1	; select bank2/3
  7432  17D0  0087               	movwf	7
  7433  17D1  0181               	clrf	1
  7434                           
  7435                           ;RF_Control_B1.c: 297: Product->Data[17]=0;
  7436  17D2  086F               	movf	_Product,w
  7437  17D3  3E11               	addlw	17
  7438  17D4  0086               	movwf	6
  7439  17D5  3001               	movlw	1	; select bank2/3
  7440  17D6  0087               	movwf	7
  7441  17D7  0181               	clrf	1
  7442                           
  7443                           ;RF_Control_B1.c: 298: setTxData(1);
  7444  17D8  3001               	movlw	1
  7445  17D9  318B  2318         	fcall	_setTxData
  7446                           
  7447                           ;RF_Control_B1.c: 299: }
  7448  17DB  0008               	return
  7449  17DC                     l8982:	
  7450                           
  7451                           ;RF_Control_B1.c: 301: else if(RF_Data[15] == 0x01)
  7452  17DC  0021               	movlb	1	; select bank1
  7453  17DD  082F               	movf	(_RF_Data^(0+128)+15),w
  7454  17DE  3A01               	xorlw	1
  7455  17DF  1D03               	skipz
  7456  17E0  2FE5               	goto	l8986
  7457                           
  7458                           ;RF_Control_B1.c: 302: {
  7459                           ;RF_Control_B1.c: 303: setRFSW_Control(1);
  7460  17E1  3001               	movlw	1
  7461  17E2  3196  26DD         	fcall	_setRFSW_Control
  7462                           
  7463                           ;RF_Control_B1.c: 304: }
  7464  17E4  0008               	return
  7465  17E5                     l8986:	
  7466                           
  7467                           ;RF_Control_B1.c: 306: else if(RF_Data[15] == 0x11)
  7468  17E5  0021               	movlb	1	; select bank1
  7469  17E6  082F               	movf	(_RF_Data^(0+128)+15),w
  7470  17E7  3A11               	xorlw	17
  7471  17E8  1D03               	skipz
  7472  17E9  2FEE               	goto	l8990
  7473                           
  7474                           ;RF_Control_B1.c: 307: {
  7475                           ;RF_Control_B1.c: 308: setRFSW_AdjControl(1);
  7476  17EA  3001               	movlw	1
  7477  17EB  319B  23B3         	fcall	_setRFSW_AdjControl
  7478                           
  7479                           ;RF_Control_B1.c: 309: }
  7480  17ED  0008               	return
  7481  17EE                     l8990:	
  7482                           
  7483                           ;RF_Control_B1.c: 314: else if(RF_Data[15] == 0x02)
  7484  17EE  0021               	movlb	1	; select bank1
  7485  17EF  082F               	movf	(_RF_Data^(0+128)+15),w
  7486  17F0  3A02               	xorlw	2
  7487  17F1  1D03               	skipz
  7488  17F2  2FF7               	goto	l8994
  7489                           
  7490                           ;RF_Control_B1.c: 315: {
  7491                           ;RF_Control_B1.c: 316: setRFSW_Control(2);
  7492  17F3  3002               	movlw	2
  7493  17F4  3196  26DD         	fcall	_setRFSW_Control
  7494                           
  7495                           ;RF_Control_B1.c: 317: }
  7496  17F6  0008               	return
  7497  17F7                     l8994:	
  7498                           
  7499                           ;RF_Control_B1.c: 319: else if(RF_Data[15] == 0x21)
  7500  17F7  0021               	movlb	1	; select bank1
  7501  17F8  082F               	movf	(_RF_Data^(0+128)+15),w
  7502  17F9  3A21               	xorlw	33
  7503  17FA  1D03               	skipz
  7504  17FB  0008               	return
  7505                           
  7506                           ;RF_Control_B1.c: 320: {
  7507                           ;RF_Control_B1.c: 321: setRFSW_AdjControl(2);
  7508  17FC  3002               	movlw	2
  7509  17FD  319B  23B3         	fcall	_setRFSW_AdjControl
  7510  17FF  0008               	return
  7511  1800                     __end_of_setControl_Lights_Table:	
  7512                           
  7513                           	psect	text26
  7514  16DD                     __ptext26:	
  7515 ;; *************** function _setRFSW_Control *****************
  7516 ;; Defined at:
  7517 ;;		line 362 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  sw              1    wreg     unsigned char 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  sw              1   11[BANK0 ] unsigned char 
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;Total ram usage:        2 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    6
  7538 ;; This function calls:
  7539 ;;		_RfSWPointSelect
  7540 ;;		_setBuz
  7541 ;;		_setDelayOff_GO
  7542 ;;		_setDimmerLights_Switch
  7543 ;;		_setDimmerLights_Trigger
  7544 ;;		_setRF_DimmerLights
  7545 ;;		_setSw_Status
  7546 ;;		_setTxData
  7547 ;; This function is called by:
  7548 ;;		_setControl_Lights_Table
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _setRFSW_Control
  7554  16DD                     _setRFSW_Control:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7558                           ;setRFSW_Control@sw stored from wreg
  7559  16DD  0020               	movlb	0	; select bank0
  7560  16DE  00AB               	movwf	setRFSW_Control@sw
  7561                           
  7562                           ;RF_Control_B1.c: 364: RfSWPointSelect(sw);
  7563  16DF  082B               	movf	setRFSW_Control@sw,w
  7564  16E0  31A6  2617  3196   	fcall	_RfSWPointSelect
  7565                           
  7566                           ;RF_Control_B1.c: 365: if(!RFSW->Status)
  7567  16E3  0021               	movlb	1	; select bank1
  7568  16E4  083C               	movf	_RFSW^(0+128),w
  7569  16E5  0086               	movwf	6
  7570  16E6  0187               	clrf	7
  7571  16E7  1801               	btfsc	1,0
  7572  16E8  2F1E               	goto	l8852
  7573                           
  7574                           ;RF_Control_B1.c: 366: {
  7575                           ;RF_Control_B1.c: 367: if(RF_Data[16] == 0x80)
  7576  16E9  0830               	movf	(_RF_Data^(0+128)+16),w
  7577  16EA  3A80               	xorlw	128
  7578  16EB  1D03               	skipz
  7579  16EC  2EFA               	goto	l8842
  7580                           
  7581                           ;RF_Control_B1.c: 368: {
  7582                           ;RF_Control_B1.c: 369: setDelayOff_GO(sw,1,RF_Data[17]);
  7583  16ED  0020               	movlb	0	; select bank0
  7584  16EE  01A3               	clrf	setDelayOff_GO@command
  7585  16EF  0AA3               	incf	setDelayOff_GO@command,f
  7586  16F0  0021               	movlb	1	; select bank1
  7587  16F1  0831               	movf	(_RF_Data^(0+128)+17),w
  7588  16F2  0020               	movlb	0	; select bank0
  7589  16F3  00AA               	movwf	??_setRFSW_Control
  7590  16F4  082A               	movf	??_setRFSW_Control,w
  7591  16F5  00A4               	movwf	setDelayOff_GO@value
  7592  16F6  082B               	movf	setRFSW_Control@sw,w
  7593  16F7  319E  26E5  3196   	fcall	_setDelayOff_GO
  7594  16FA                     l8842:	
  7595                           
  7596                           ;RF_Control_B1.c: 370: }
  7597                           ;RF_Control_B1.c: 371: RFSW->Status=1;
  7598  16FA  0021               	movlb	1	; select bank1
  7599  16FB  083C               	movf	_RFSW^(0+128),w
  7600  16FC  0086               	movwf	6
  7601  16FD  0187               	clrf	7
  7602  16FE  1401               	bsf	1,0
  7603                           
  7604                           ;RF_Control_B1.c: 372: setSw_Status(sw,1);
  7605  16FF  0020               	movlb	0	; select bank0
  7606  1700  01A2               	clrf	setSw_Status@command
  7607  1701  0AA2               	incf	setSw_Status@command,f
  7608  1702  082B               	movf	setRFSW_Control@sw,w
  7609  1703  31A5  2511  3196   	fcall	_setSw_Status
  7610                           
  7611                           ;RF_Control_B1.c: 374: setDimmerLights_Trigger(sw,1);
  7612  1706  0020               	movlb	0	; select bank0
  7613  1707  01A2               	clrf	setDimmerLights_Trigger@command
  7614  1708  0AA2               	incf	setDimmerLights_Trigger@command,f
  7615  1709  082B               	movf	setRFSW_Control@sw,w
  7616  170A  31A5  2540  3196   	fcall	_setDimmerLights_Trigger
  7617                           
  7618                           ;RF_Control_B1.c: 375: setDimmerLights_Switch(sw,1);
  7619  170D  0020               	movlb	0	; select bank0
  7620  170E  01A2               	clrf	setDimmerLights_Switch@command
  7621  170F  0AA2               	incf	setDimmerLights_Switch@command,f
  7622  1710  082B               	movf	setRFSW_Control@sw,w
  7623  1711  31A5  2530  3196   	fcall	_setDimmerLights_Switch
  7624                           
  7625                           ;RF_Control_B1.c: 377: setRF_DimmerLights(sw,RFSW->Status);
  7626  1714  0021               	movlb	1	; select bank1
  7627  1715  083C               	movf	_RFSW^(0+128),w
  7628  1716  0086               	movwf	6
  7629  1717  0187               	clrf	7
  7630  1718  3000               	movlw	0
  7631  1719  1801               	btfsc	1,0
  7632  171A  3001               	movlw	1
  7633  171B  0020               	movlb	0	; select bank0
  7634  171C  00A0               	movwf	setRF_DimmerLights@on
  7635  171D  2F5C               	goto	L4
  7636  171E                     l8852:	
  7637                           ;RF_Control_B1.c: 378: }
  7638                           
  7639                           
  7640                           ;RF_Control_B1.c: 379: else
  7641                           ;RF_Control_B1.c: 380: {
  7642                           ;RF_Control_B1.c: 381: if(RF_Data[16] == 0x80)
  7643  171E  0021               	movlb	1	; select bank1
  7644  171F  0830               	movf	(_RF_Data^(0+128)+16),w
  7645  1720  3A80               	xorlw	128
  7646  1721  1D03               	skipz
  7647  1722  2F34               	goto	l8856
  7648                           
  7649                           ;RF_Control_B1.c: 382: {
  7650                           ;RF_Control_B1.c: 383: setDelayOff_GO(sw,1,RF_Data[17]);
  7651  1723  0020               	movlb	0	; select bank0
  7652  1724  01A3               	clrf	setDelayOff_GO@command
  7653  1725  0AA3               	incf	setDelayOff_GO@command,f
  7654  1726  0021               	movlb	1	; select bank1
  7655  1727  0831               	movf	(_RF_Data^(0+128)+17),w
  7656  1728  0020               	movlb	0	; select bank0
  7657  1729  00AA               	movwf	??_setRFSW_Control
  7658  172A  082A               	movf	??_setRFSW_Control,w
  7659  172B  00A4               	movwf	setDelayOff_GO@value
  7660  172C  082B               	movf	setRFSW_Control@sw,w
  7661  172D  319E  26E5  3196   	fcall	_setDelayOff_GO
  7662                           
  7663                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw,1);
  7664  1730  0020               	movlb	0	; select bank0
  7665  1731  01A0               	clrf	setRF_DimmerLights@on
  7666  1732  0AA0               	incf	setRF_DimmerLights@on,f
  7667  1733  2F5C               	goto	L4
  7668  1734                     l8856:	
  7669                           ;RF_Control_B1.c: 385: }
  7670                           
  7671                           
  7672                           ;RF_Control_B1.c: 386: else
  7673                           ;RF_Control_B1.c: 387: {
  7674                           ;RF_Control_B1.c: 388: RFSW->Status=0;
  7675  1734  0021               	movlb	1	; select bank1
  7676  1735  083C               	movf	_RFSW^(0+128),w
  7677  1736  0086               	movwf	6
  7678  1737  0187               	clrf	7
  7679  1738  1001               	bcf	1,0
  7680                           
  7681                           ;RF_Control_B1.c: 389: setSw_Status(sw,0);
  7682  1739  0020               	movlb	0	; select bank0
  7683  173A  01A2               	clrf	setSw_Status@command
  7684  173B  082B               	movf	setRFSW_Control@sw,w
  7685  173C  31A5  2511  3196   	fcall	_setSw_Status
  7686                           
  7687                           ;RF_Control_B1.c: 391: setDimmerLights_Trigger(sw,1);
  7688  173F  0020               	movlb	0	; select bank0
  7689  1740  01A2               	clrf	setDimmerLights_Trigger@command
  7690  1741  0AA2               	incf	setDimmerLights_Trigger@command,f
  7691  1742  082B               	movf	setRFSW_Control@sw,w
  7692  1743  31A5  2540  3196   	fcall	_setDimmerLights_Trigger
  7693                           
  7694                           ;RF_Control_B1.c: 392: setDimmerLights_Switch(sw,RFSW->Status);
  7695  1746  0021               	movlb	1	; select bank1
  7696  1747  083C               	movf	_RFSW^(0+128),w
  7697  1748  0086               	movwf	6
  7698  1749  0187               	clrf	7
  7699  174A  3000               	movlw	0
  7700  174B  1801               	btfsc	1,0
  7701  174C  3001               	movlw	1
  7702  174D  0020               	movlb	0	; select bank0
  7703  174E  00A2               	movwf	setDimmerLights_Switch@command
  7704  174F  082B               	movf	setRFSW_Control@sw,w
  7705  1750  31A5  2530  3196   	fcall	_setDimmerLights_Switch
  7706                           
  7707                           ;RF_Control_B1.c: 394: setDelayOff_GO(sw,0,0);
  7708  1753  0020               	movlb	0	; select bank0
  7709  1754  01A3               	clrf	setDelayOff_GO@command
  7710  1755  01A4               	clrf	setDelayOff_GO@value
  7711  1756  082B               	movf	setRFSW_Control@sw,w
  7712  1757  319E  26E5  3196   	fcall	_setDelayOff_GO
  7713                           
  7714                           ;RF_Control_B1.c: 395: setRF_DimmerLights(sw,0);
  7715  175A  0020               	movlb	0	; select bank0
  7716  175B  01A0               	clrf	setRF_DimmerLights@on
  7717  175C                     L4:	
  7718  175C  082B               	movf	setRFSW_Control@sw,w
  7719  175D  319E  262F  3196   	fcall	_setRF_DimmerLights
  7720                           
  7721                           ;RF_Control_B1.c: 396: }
  7722                           ;RF_Control_B1.c: 397: }
  7723                           ;RF_Control_B1.c: 398: setBuz(1,100);
  7724  1760  3064               	movlw	100
  7725  1761  0020               	movlb	0	; select bank0
  7726  1762  00A6               	movwf	setBuz@time
  7727  1763  3000               	movlw	0
  7728  1764  00A7               	movwf	setBuz@time+1
  7729  1765  3001               	movlw	1
  7730  1766  3193  23EA  3196   	fcall	_setBuz
  7731                           
  7732                           ;RF_Control_B1.c: 399: setTxData(1);
  7733  1769  3001               	movlw	1
  7734  176A  318B  2318         	fcall	_setTxData
  7735  176C  0008               	return
  7736  176D                     __end_of_setRFSW_Control:	
  7737                           
  7738                           	psect	text27
  7739  1EE5                     __ptext27:	
  7740 ;; *************** function _setDelayOff_GO *****************
  7741 ;; Defined at:
  7742 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  sw              1    wreg     unsigned char 
  7745 ;;  command         1    3[BANK0 ] unsigned char 
  7746 ;;  value           1    4[BANK0 ] unsigned char 
  7747 ;; Auto vars:     Size  Location     Type
  7748 ;;  sw              1    7[BANK0 ] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;		None               void
  7751 ;; Registers used:
  7752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;Total ram usage:        5 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    5
  7765 ;; This function calls:
  7766 ;;		_DelayOffPointSelect
  7767 ;;		_DelayTimejudge
  7768 ;; This function is called by:
  7769 ;;		_setRFSW_Control
  7770 ;;		_Sw_DimmerOffFunc
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           
  7775                           ;psect for function _setDelayOff_GO
  7776  1EE5                     _setDelayOff_GO:	
  7777                           
  7778                           ;incstack = 0
  7779                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7780                           ;setDelayOff_GO@sw stored from wreg
  7781  1EE5  0020               	movlb	0	; select bank0
  7782  1EE6  00A7               	movwf	setDelayOff_GO@sw
  7783                           
  7784                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7785  1EE7  0827               	movf	setDelayOff_GO@sw,w
  7786  1EE8  31A6  2643  319E   	fcall	_DelayOffPointSelect
  7787                           
  7788                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7789  1EEB  0021               	movlb	1	; select bank1
  7790  1EEC  0838               	movf	_DelayOff^(0+128),w
  7791  1EED  0086               	movwf	6
  7792  1EEE  0187               	clrf	7
  7793  1EEF  1C01               	btfss	1,0
  7794  1EF0  0008               	return
  7795                           
  7796                           ;DelayOff_B1.c: 96: {
  7797                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7798  1EF1  0838               	movf	_DelayOff^(0+128),w
  7799  1EF2  0086               	movwf	6
  7800  1EF3  0187               	clrf	7
  7801  1EF4  0020               	movlb	0	; select bank0
  7802  1EF5  0823               	movf	setDelayOff_GO@command,w
  7803  1EF6  1081               	bcf	1,1
  7804  1EF7  1D03               	skipz
  7805  1EF8  1481               	bsf	1,1
  7806                           
  7807                           ;DelayOff_B1.c: 98: if(command)
  7808  1EF9  0823               	movf	setDelayOff_GO@command,w
  7809  1EFA  1903               	btfsc	3,2
  7810  1EFB  2F27               	goto	l6596
  7811                           
  7812                           ;DelayOff_B1.c: 99: {
  7813                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7814  1EFC  0824               	movf	setDelayOff_GO@value,w
  7815  1EFD  3199  21AE  319E   	fcall	_DelayTimejudge
  7816  1F00  0020               	movlb	0	; select bank0
  7817  1F01  00A5               	movwf	??_setDelayOff_GO
  7818  1F02  0021               	movlb	1	; select bank1
  7819  1F03  0A38               	incf	_DelayOff^(0+128),w
  7820  1F04  0086               	movwf	6
  7821  1F05  0187               	clrf	7
  7822  1F06  0020               	movlb	0	; select bank0
  7823  1F07  0825               	movf	??_setDelayOff_GO,w
  7824  1F08  0081               	movwf	1
  7825                           
  7826                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7827  1F09  300F               	movlw	15
  7828  1F0A  0524               	andwf	setDelayOff_GO@value,w
  7829  1F0B  00A5               	movwf	??_setDelayOff_GO
  7830  1F0C  0825               	movf	??_setDelayOff_GO,w
  7831  1F0D  3A05               	xorlw	5
  7832  1F0E  1903               	skipnz
  7833  1F0F  2F14               	goto	l6590
  7834  1F10  0824               	movf	setDelayOff_GO@value,w
  7835  1F11  390F               	andlw	15
  7836  1F12  1D03               	btfss	3,2
  7837  1F13  2F1A               	goto	l6594
  7838  1F14                     l6590:	
  7839  1F14  3026               	movlw	38
  7840  1F15  0224               	subwf	setDelayOff_GO@value,w
  7841  1F16  1803               	skipnc
  7842  1F17  2F1A               	goto	l6594
  7843                           
  7844                           ;DelayOff_B1.c: 102: {
  7845                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7846  1F18  0824               	movf	setDelayOff_GO@value,w
  7847  1F19  2F1B               	goto	L5
  7848  1F1A                     l6594:	
  7849                           ;DelayOff_B1.c: 104: }
  7850                           
  7851                           
  7852                           ;DelayOff_B1.c: 105: else
  7853                           ;DelayOff_B1.c: 106: {
  7854                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7855  1F1A  3005               	movlw	5
  7856  1F1B                     L5:	
  7857  1F1B  00A5               	movwf	??_setDelayOff_GO
  7858  1F1C  0827               	movf	setDelayOff_GO@sw,w
  7859  1F1D  3E1A               	addlw	26
  7860  1F1E  076F               	addwf	_Product,w
  7861  1F1F  00A6               	movwf	??_setDelayOff_GO+1
  7862  1F20  0826               	movf	??_setDelayOff_GO+1,w
  7863  1F21  0086               	movwf	6
  7864  1F22  3001               	movlw	1	; select bank2/3
  7865  1F23  0087               	movwf	7
  7866  1F24  0825               	movf	??_setDelayOff_GO,w
  7867  1F25  0081               	movwf	1
  7868                           
  7869                           ;DelayOff_B1.c: 108: }
  7870                           ;DelayOff_B1.c: 109: }
  7871  1F26  2F33               	goto	l6600
  7872  1F27                     l6596:	
  7873                           
  7874                           ;DelayOff_B1.c: 110: else if(!command)
  7875  1F27  08A3               	movf	setDelayOff_GO@command,f
  7876  1F28  1D03               	skipz
  7877  1F29  2F33               	goto	l6600
  7878                           
  7879                           ;DelayOff_B1.c: 111: {
  7880                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7881  1F2A  0827               	movf	setDelayOff_GO@sw,w
  7882  1F2B  3E1A               	addlw	26
  7883  1F2C  076F               	addwf	_Product,w
  7884  1F2D  00A5               	movwf	??_setDelayOff_GO
  7885  1F2E  0825               	movf	??_setDelayOff_GO,w
  7886  1F2F  0086               	movwf	6
  7887  1F30  3001               	movlw	1	; select bank2/3
  7888  1F31  0087               	movwf	7
  7889  1F32  0181               	clrf	1
  7890  1F33                     l6600:	
  7891                           
  7892                           ;DelayOff_B1.c: 113: }
  7893                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7894  1F33  0021               	movlb	1	; select bank1
  7895  1F34  0838               	movf	_DelayOff^(0+128),w
  7896  1F35  3E02               	addlw	2
  7897  1F36  0086               	movwf	6
  7898  1F37  0187               	clrf	7
  7899  1F38  3000               	movlw	0
  7900  1F39  3FC0               	movwi [0]fsr1
  7901  1F3A  3FC1               	movwi [1]fsr1
  7902                           
  7903                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7904  1F3B  0838               	movf	_DelayOff^(0+128),w
  7905  1F3C  3E04               	addlw	4
  7906  1F3D  0086               	movwf	6
  7907  1F3E  0187               	clrf	7
  7908  1F3F  0181               	clrf	1
  7909  1F40  0008               	return
  7910  1F41                     __end_of_setDelayOff_GO:	
  7911                           
  7912                           	psect	text28
  7913  19AE                     __ptext28:	
  7914 ;; *************** function _DelayTimejudge *****************
  7915 ;; Defined at:
  7916 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  value           1    wreg     unsigned char 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  value           1    2[BANK0 ] unsigned char 
  7921 ;;  i               1    1[BANK0 ] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      unsigned char 
  7924 ;; Registers used:
  7925 ;;		wreg
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;Total ram usage:        3 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    4
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		_setDelayOff_GO
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _DelayTimejudge
  7947  19AE                     _DelayTimejudge:	
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _DelayTimejudge: [wreg]
  7951                           ;DelayTimejudge@value stored from wreg
  7952  19AE  0020               	movlb	0	; select bank0
  7953  19AF  00A2               	movwf	DelayTimejudge@value
  7954                           
  7955                           ;DelayOff_B1.c: 121: char i=5;
  7956  19B0  3005               	movlw	5
  7957  19B1  00A0               	movwf	??_DelayTimejudge
  7958  19B2  0820               	movf	??_DelayTimejudge,w
  7959  19B3  00A1               	movwf	DelayTimejudge@i
  7960                           
  7961                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7962  19B4  0822               	movf	DelayTimejudge@value,w
  7963  19B5  3A05               	xorlw	5
  7964  19B6  1D03               	skipz
  7965  19B7  29BA               	goto	l6424
  7966                           
  7967                           ;DelayOff_B1.c: 123: {
  7968                           ;DelayOff_B1.c: 124: i=5;
  7969  19B8  3005               	movlw	5
  7970  19B9  29D7               	goto	L10
  7971  19BA                     l6424:	
  7972                           ;DelayOff_B1.c: 125: }
  7973                           
  7974                           
  7975                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7976  19BA  0822               	movf	DelayTimejudge@value,w
  7977  19BB  3A10               	xorlw	16
  7978  19BC  1D03               	skipz
  7979  19BD  29C0               	goto	l6428
  7980                           
  7981                           ;DelayOff_B1.c: 127: {
  7982                           ;DelayOff_B1.c: 128: i=10;
  7983  19BE  300A               	movlw	10
  7984  19BF  29D7               	goto	L10
  7985  19C0                     l6428:	
  7986                           ;DelayOff_B1.c: 129: }
  7987                           
  7988                           
  7989                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7990  19C0  0822               	movf	DelayTimejudge@value,w
  7991  19C1  3A15               	xorlw	21
  7992  19C2  1D03               	skipz
  7993  19C3  29C6               	goto	l6432
  7994                           
  7995                           ;DelayOff_B1.c: 131: {
  7996                           ;DelayOff_B1.c: 132: i=15;
  7997  19C4  300F               	movlw	15
  7998  19C5  29D7               	goto	L10
  7999  19C6                     l6432:	
  8000                           ;DelayOff_B1.c: 133: }
  8001                           
  8002                           
  8003                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8004  19C6  0822               	movf	DelayTimejudge@value,w
  8005  19C7  3A20               	xorlw	32
  8006  19C8  1D03               	skipz
  8007  19C9  29CC               	goto	l6436
  8008                           
  8009                           ;DelayOff_B1.c: 135: {
  8010                           ;DelayOff_B1.c: 136: i=20;
  8011  19CA  3014               	movlw	20
  8012  19CB  29D7               	goto	L10
  8013  19CC                     l6436:	
  8014                           ;DelayOff_B1.c: 137: }
  8015                           
  8016                           
  8017                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8018  19CC  0822               	movf	DelayTimejudge@value,w
  8019  19CD  3A25               	xorlw	37
  8020  19CE  1D03               	skipz
  8021  19CF  29D2               	goto	l6440
  8022                           
  8023                           ;DelayOff_B1.c: 139: {
  8024                           ;DelayOff_B1.c: 140: i=25;
  8025  19D0  3019               	movlw	25
  8026  19D1  29D7               	goto	L10
  8027  19D2                     l6440:	
  8028                           ;DelayOff_B1.c: 141: }
  8029                           
  8030                           
  8031                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8032  19D2  0822               	movf	DelayTimejudge@value,w
  8033  19D3  3A30               	xorlw	48
  8034  19D4  1D03               	skipz
  8035  19D5  29DA               	goto	l706
  8036                           
  8037                           ;DelayOff_B1.c: 143: {
  8038                           ;DelayOff_B1.c: 144: i=30;
  8039  19D6  301E               	movlw	30
  8040  19D7                     L10:	
  8041  19D7  00A0               	movwf	??_DelayTimejudge
  8042  19D8  0820               	movf	??_DelayTimejudge,w
  8043  19D9  00A1               	movwf	DelayTimejudge@i
  8044  19DA                     l706:	
  8045                           
  8046                           ;DelayOff_B1.c: 145: }
  8047                           ;DelayOff_B1.c: 146: return i;
  8048  19DA  0821               	movf	DelayTimejudge@i,w
  8049  19DB  0008               	return
  8050  19DC                     __end_of_DelayTimejudge:	
  8051                           
  8052                           	psect	text29
  8053  1BB3                     __ptext29:	
  8054 ;; *************** function _setRFSW_AdjControl *****************
  8055 ;; Defined at:
  8056 ;;		line 402 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  sw              1    wreg     unsigned char 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  sw              1   70[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;		None               void
  8063 ;; Registers used:
  8064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;Total ram usage:        3 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    9
  8077 ;; This function calls:
  8078 ;;		_RfSWPointSelect
  8079 ;;		_setRF_DimmerValue
  8080 ;;		_setTxData
  8081 ;; This function is called by:
  8082 ;;		_setControl_Lights_Table
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           
  8087                           ;psect for function _setRFSW_AdjControl
  8088  1BB3                     _setRFSW_AdjControl:	
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8092                           ;setRFSW_AdjControl@sw stored from wreg
  8093  1BB3  0020               	movlb	0	; select bank0
  8094  1BB4  00E6               	movwf	setRFSW_AdjControl@sw
  8095                           
  8096                           ;RF_Control_B1.c: 404: RfSWPointSelect(sw);
  8097  1BB5  0866               	movf	setRFSW_AdjControl@sw,w
  8098  1BB6  31A6  2617  319B   	fcall	_RfSWPointSelect
  8099                           
  8100                           ;RF_Control_B1.c: 405: if(RFSW->Status)
  8101  1BB9  0021               	movlb	1	; select bank1
  8102  1BBA  083C               	movf	_RFSW^(0+128),w
  8103  1BBB  0086               	movwf	6
  8104  1BBC  0187               	clrf	7
  8105  1BBD  1C01               	btfss	1,0
  8106  1BBE  2BCB               	goto	l6834
  8107                           
  8108                           ;RF_Control_B1.c: 406: {
  8109                           ;RF_Control_B1.c: 407: Memory->Modify=1;
  8110  1BBF  0868               	movf	_Memory^(0+128),w
  8111  1BC0  3E22               	addlw	34
  8112  1BC1  0086               	movwf	6
  8113  1BC2  3002               	movlw	2	; select bank4/5
  8114  1BC3  0087               	movwf	7
  8115  1BC4  1401               	bsf	1,0
  8116                           
  8117                           ;RF_Control_B1.c: 408: setRF_DimmerValue(sw);
  8118  1BC5  0020               	movlb	0	; select bank0
  8119  1BC6  0866               	movf	setRFSW_AdjControl@sw,w
  8120  1BC7  319A  22D1  319B   	fcall	_setRF_DimmerValue
  8121                           
  8122                           ;RF_Control_B1.c: 409: }
  8123  1BCA  2BDD               	goto	l2740
  8124  1BCB                     l6834:	
  8125                           
  8126                           ;RF_Control_B1.c: 410: else
  8127                           ;RF_Control_B1.c: 411: {
  8128                           ;RF_Control_B1.c: 412: Product->Data[9]=Product->Data[20+sw];
  8129  1BCB  0020               	movlb	0	; select bank0
  8130  1BCC  0866               	movf	setRFSW_AdjControl@sw,w
  8131  1BCD  3E14               	addlw	20
  8132  1BCE  076F               	addwf	_Product,w
  8133  1BCF  00E4               	movwf	??_setRFSW_AdjControl
  8134  1BD0  0864               	movf	??_setRFSW_AdjControl,w
  8135  1BD1  0086               	movwf	6
  8136  1BD2  3001               	movlw	1	; select bank2/3
  8137  1BD3  0087               	movwf	7
  8138  1BD4  0801               	movf	1,w
  8139  1BD5  00E5               	movwf	??_setRFSW_AdjControl+1
  8140  1BD6  086F               	movf	_Product,w
  8141  1BD7  3E09               	addlw	9
  8142  1BD8  0086               	movwf	6
  8143  1BD9  3001               	movlw	1	; select bank2/3
  8144  1BDA  0087               	movwf	7
  8145  1BDB  0865               	movf	??_setRFSW_AdjControl+1,w
  8146  1BDC  0081               	movwf	1
  8147  1BDD                     l2740:	
  8148                           
  8149                           ;RF_Control_B1.c: 413: }
  8150                           ;RF_Control_B1.c: 414: Product->Data[17]=Product->Data[26+sw];
  8151  1BDD  0020               	movlb	0	; select bank0
  8152  1BDE  0866               	movf	setRFSW_AdjControl@sw,w
  8153  1BDF  3E1A               	addlw	26
  8154  1BE0  076F               	addwf	_Product,w
  8155  1BE1  00E4               	movwf	??_setRFSW_AdjControl
  8156  1BE2  0864               	movf	??_setRFSW_AdjControl,w
  8157  1BE3  0086               	movwf	6
  8158  1BE4  3001               	movlw	1	; select bank2/3
  8159  1BE5  0087               	movwf	7
  8160  1BE6  0801               	movf	1,w
  8161  1BE7  00E5               	movwf	??_setRFSW_AdjControl+1
  8162  1BE8  086F               	movf	_Product,w
  8163  1BE9  3E11               	addlw	17
  8164  1BEA  0086               	movwf	6
  8165  1BEB  3001               	movlw	1	; select bank2/3
  8166  1BEC  0087               	movwf	7
  8167  1BED  0865               	movf	??_setRFSW_AdjControl+1,w
  8168  1BEE  0081               	movwf	1
  8169                           
  8170                           ;RF_Control_B1.c: 415: setTxData(1);
  8171  1BEF  3001               	movlw	1
  8172  1BF0  318B  2318         	fcall	_setTxData
  8173  1BF2  0008               	return
  8174  1BF3                     __end_of_setRFSW_AdjControl:	
  8175                           
  8176                           	psect	text30
  8177  1AD1                     __ptext30:	
  8178 ;; *************** function _setRF_DimmerValue *****************
  8179 ;; Defined at:
  8180 ;;		line 426 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  lights          1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  lights          1   67[BANK0 ] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        3 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    8
  8201 ;; This function calls:
  8202 ;;		_setDimmerLights_AdjRF
  8203 ;; This function is called by:
  8204 ;;		_setRFSW_AdjControl
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function _setRF_DimmerValue
  8210  1AD1                     _setRF_DimmerValue:	
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8214                           ;setRF_DimmerValue@lights stored from wreg
  8215  1AD1  0020               	movlb	0	; select bank0
  8216  1AD2  00E3               	movwf	setRF_DimmerValue@lights
  8217                           
  8218                           ;RF_Control_B1.c: 428: if(RF_Data[9] > 0x64)
  8219  1AD3  3065               	movlw	101
  8220  1AD4  0021               	movlb	1	; select bank1
  8221  1AD5  0229               	subwf	(_RF_Data^(0+128)+9),w
  8222  1AD6  1C03               	skipc
  8223  1AD7  2ADE               	goto	l6690
  8224                           
  8225                           ;RF_Control_B1.c: 429: {
  8226                           ;RF_Control_B1.c: 430: RF_Data[9]=0x64;
  8227  1AD8  3064               	movlw	100
  8228  1AD9  0020               	movlb	0	; select bank0
  8229  1ADA  00E1               	movwf	??_setRF_DimmerValue
  8230  1ADB  0861               	movf	??_setRF_DimmerValue,w
  8231  1ADC  0021               	movlb	1	; select bank1
  8232  1ADD  00A9               	movwf	(_RF_Data^(0+128)+9)
  8233  1ADE                     l6690:	
  8234                           
  8235                           ;RF_Control_B1.c: 431: }
  8236                           ;RF_Control_B1.c: 432: Product->Data[9]=RF_Data[9];
  8237  1ADE  0829               	movf	(_RF_Data^(0+128)+9),w
  8238  1ADF  0020               	movlb	0	; select bank0
  8239  1AE0  00E1               	movwf	??_setRF_DimmerValue
  8240  1AE1  086F               	movf	_Product,w
  8241  1AE2  3E09               	addlw	9
  8242  1AE3  0086               	movwf	6
  8243  1AE4  3001               	movlw	1	; select bank2/3
  8244  1AE5  0087               	movwf	7
  8245  1AE6  0861               	movf	??_setRF_DimmerValue,w
  8246  1AE7  0081               	movwf	1
  8247                           
  8248                           ;RF_Control_B1.c: 433: Product->Data[11]=lights;
  8249  1AE8  0863               	movf	setRF_DimmerValue@lights,w
  8250  1AE9  00E1               	movwf	??_setRF_DimmerValue
  8251  1AEA  086F               	movf	_Product,w
  8252  1AEB  3E0B               	addlw	11
  8253  1AEC  0086               	movwf	6
  8254  1AED  3001               	movlw	1	; select bank2/3
  8255  1AEE  0087               	movwf	7
  8256  1AEF  0861               	movf	??_setRF_DimmerValue,w
  8257  1AF0  0081               	movwf	1
  8258                           
  8259                           ;RF_Control_B1.c: 434: Product->Data[(20+lights)]=Product->Data[9];
  8260  1AF1  086F               	movf	_Product,w
  8261  1AF2  3E09               	addlw	9
  8262  1AF3  0086               	movwf	6
  8263  1AF4  3001               	movlw	1	; select bank2/3
  8264  1AF5  0087               	movwf	7
  8265  1AF6  0801               	movf	1,w
  8266  1AF7  00E1               	movwf	??_setRF_DimmerValue
  8267  1AF8  0863               	movf	setRF_DimmerValue@lights,w
  8268  1AF9  3E14               	addlw	20
  8269  1AFA  076F               	addwf	_Product,w
  8270  1AFB  00E2               	movwf	??_setRF_DimmerValue+1
  8271  1AFC  0862               	movf	??_setRF_DimmerValue+1,w
  8272  1AFD  0086               	movwf	6
  8273  1AFE  3001               	movlw	1	; select bank2/3
  8274  1AFF  0087               	movwf	7
  8275  1B00  0861               	movf	??_setRF_DimmerValue,w
  8276  1B01  0081               	movwf	1
  8277                           
  8278                           ;RF_Control_B1.c: 435: setDimmerLights_AdjRF(lights);
  8279  1B02  0863               	movf	setRF_DimmerValue@lights,w
  8280  1B03  3198  209E         	fcall	_setDimmerLights_AdjRF
  8281  1B05  0008               	return
  8282  1B06                     __end_of_setRF_DimmerValue:	
  8283                           
  8284                           	psect	text31
  8285  189E                     __ptext31:	
  8286 ;; *************** function _setDimmerLights_AdjRF *****************
  8287 ;; Defined at:
  8288 ;;		line 405 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;  lights          1    wreg     unsigned char 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  lights          1   64[BANK0 ] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;		None               void
  8295 ;; Registers used:
  8296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        2 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		_DimmerLightsPointSelect
  8311 ;;		_getPercentValue
  8312 ;; This function is called by:
  8313 ;;		_setRF_DimmerValue
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function _setDimmerLights_AdjRF
  8319  189E                     _setDimmerLights_AdjRF:	
  8320                           
  8321                           ;incstack = 0
  8322                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8323                           ;setDimmerLights_AdjRF@lights stored from wreg
  8324  189E  0020               	movlb	0	; select bank0
  8325  189F  00E0               	movwf	setDimmerLights_AdjRF@lights
  8326                           
  8327                           ;Dimmer_B1.c: 407: DimmerLightsPointSelect(lights);
  8328  18A0  0860               	movf	setDimmerLights_AdjRF@lights,w
  8329  18A1  31A5  25B1  3198   	fcall	_DimmerLightsPointSelect
  8330                           
  8331                           ;Dimmer_B1.c: 408: DimmerLights->AdjRF=1;
  8332  18A4  0020               	movlb	0	; select bank0
  8333  18A5  086C               	movf	_DimmerLights,w
  8334  18A6  0086               	movwf	6
  8335  18A7  3001               	movlw	1	; select bank2/3
  8336  18A8  0087               	movwf	7
  8337  18A9  1501               	bsf	1,2
  8338                           
  8339                           ;Dimmer_B1.c: 409: DimmerLights->Signal=1;
  8340  18AA  086C               	movf	_DimmerLights,w
  8341  18AB  0086               	movwf	6
  8342  18AC  3001               	movlw	1	; select bank2/3
  8343  18AD  0087               	movwf	7
  8344  18AE  1481               	bsf	1,1
  8345                           
  8346                           ;Dimmer_B1.c: 410: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8347  18AF  086F               	movf	_Product,w
  8348  18B0  3E09               	addlw	9
  8349  18B1  0086               	movwf	6
  8350  18B2  3001               	movlw	1	; select bank2/3
  8351  18B3  0087               	movwf	7
  8352  18B4  0801               	movf	1,w
  8353  18B5  319E  268A         	fcall	_getPercentValue
  8354  18B7  0020               	movlb	0	; select bank0
  8355  18B8  00DF               	movwf	??_setDimmerLights_AdjRF
  8356  18B9  086C               	movf	_DimmerLights,w
  8357  18BA  3E05               	addlw	5
  8358  18BB  0086               	movwf	6
  8359  18BC  3001               	movlw	1	; select bank2/3
  8360  18BD  0087               	movwf	7
  8361  18BE  085F               	movf	??_setDimmerLights_AdjRF,w
  8362  18BF  0081               	movwf	1
  8363  18C0  0008               	return
  8364  18C1                     __end_of_setDimmerLights_AdjRF:	
  8365                           
  8366                           	psect	text32
  8367  1932                     __ptext32:	
  8368 ;; *************** function _RF_RxDisable *****************
  8369 ;; Defined at:
  8370 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;  rf              1    wreg     unsigned char 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  rf              1    4[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        1 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    6
  8391 ;; This function calls:
  8392 ;;		_CC2500_WriteCommand
  8393 ;;		_RfPointSelect
  8394 ;;		_setINT_GO
  8395 ;; This function is called by:
  8396 ;;		_setRF_Main
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _RF_RxDisable
  8402  1932                     _RF_RxDisable:	
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8406                           ;RF_RxDisable@rf stored from wreg
  8407  1932  0020               	movlb	0	; select bank0
  8408  1933  00A4               	movwf	RF_RxDisable@rf
  8409                           
  8410                           ;RF_Control_B1.c: 195: RfPointSelect(rf);
  8411  1934  0824               	movf	RF_RxDisable@rf,w
  8412  1935  31A4  241D  3199   	fcall	_RfPointSelect
  8413                           
  8414                           ;RF_Control_B1.c: 196: if(RF->RxStatus)
  8415  1938  087C               	movf	_RF,w
  8416  1939  0086               	movwf	6
  8417  193A  0187               	clrf	7
  8418  193B  1D81               	btfss	1,3
  8419  193C  0008               	return
  8420                           
  8421                           ;RF_Control_B1.c: 197: {
  8422                           ;RF_Control_B1.c: 198: RF->RxStatus=0;
  8423  193D  087C               	movf	_RF,w
  8424  193E  0086               	movwf	6
  8425  193F  0187               	clrf	7
  8426  1940  1181               	bcf	1,3
  8427                           
  8428                           ;RF_Control_B1.c: 199: RF->ReceiveGO=0;
  8429  1941  087C               	movf	_RF,w
  8430  1942  0086               	movwf	6
  8431  1943  0187               	clrf	7
  8432  1944  1081               	bcf	1,1
  8433                           
  8434                           ;RF_Control_B1.c: 200: RF->DebounceTime=0;
  8435  1945  0A7C               	incf	_RF,w
  8436  1946  0086               	movwf	6
  8437  1947  0187               	clrf	7
  8438  1948  0181               	clrf	1
  8439                           
  8440                           ;RF_Control_B1.c: 201: RF->Debounce=0;
  8441  1949  087C               	movf	_RF,w
  8442  194A  0086               	movwf	6
  8443  194B  0187               	clrf	7
  8444  194C  1281               	bcf	1,5
  8445                           
  8446                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x36);
  8447  194D  3036               	movlw	54
  8448  194E  31A5  2520  3199   	fcall	_CC2500_WriteCommand
  8449                           
  8450                           ;RF_Control_B1.c: 203: CC2500_WriteCommand(0x3A);
  8451  1951  303A               	movlw	58
  8452  1952  31A5  2520  3199   	fcall	_CC2500_WriteCommand
  8453                           
  8454                           ;RF_Control_B1.c: 204: setINT_GO(0);
  8455  1955  3000               	movlw	0
  8456  1956  31A3  23F4         	fcall	_setINT_GO
  8457  1958  0008               	return
  8458  1959                     __end_of_RF_RxDisable:	
  8459                           
  8460                           	psect	text33
  8461  1CFC                     __ptext33:	
  8462 ;; *************** function _CC2500_TxData *****************
  8463 ;; Defined at:
  8464 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;		None
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;		None               void
  8471 ;; Registers used:
  8472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;Total ram usage:        2 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    6
  8485 ;; This function calls:
  8486 ;;		_CC2500_WriteByte
  8487 ;;		_CC2500_WriteCommand
  8488 ;; This function is called by:
  8489 ;;		_setRF_Main
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           
  8494                           ;psect for function _CC2500_TxData
  8495  1CFC                     _CC2500_TxData:	
  8496                           
  8497                           ;CC2500_B1.c: 32: unsigned char loop_e;
  8498                           ;CC2500_B1.c: 34: RC4=0;
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8502  1CFC  0020               	movlb	0	; select bank0
  8503  1CFD  120E               	bcf	14,4	;volatile
  8504                           
  8505                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  8506  1CFE  307F               	movlw	127
  8507  1CFF  00A4               	movwf	??_CC2500_TxData
  8508  1D00  0824               	movf	??_CC2500_TxData,w
  8509  1D01  0021               	movlb	1	; select bank1
  8510  1D02  00BF               	movwf	_SPI0Buffer^(0+128)
  8511  1D03                     l307:	
  8512                           ;CC2500_B1.c: 36: while(RC2==1);
  8513                           
  8514  1D03  0020               	movlb	0	; select bank0
  8515  1D04  190E               	btfsc	14,2	;volatile
  8516  1D05  2D03               	goto	l307
  8517                           
  8518                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  8519  1D06  31A6  2672  319C   	fcall	_CC2500_WriteByte
  8520                           
  8521                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  8522  1D09  0021               	movlb	1	; select bank1
  8523  1D0A  0840               	movf	_Tx_Length^(0+128),w
  8524  1D0B  0020               	movlb	0	; select bank0
  8525  1D0C  00A4               	movwf	??_CC2500_TxData
  8526  1D0D  0824               	movf	??_CC2500_TxData,w
  8527  1D0E  0021               	movlb	1	; select bank1
  8528  1D0F  00BF               	movwf	_SPI0Buffer^(0+128)
  8529                           
  8530                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  8531  1D10  31A6  2672  319C   	fcall	_CC2500_WriteByte
  8532                           
  8533                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  8534  1D13  0020               	movlb	0	; select bank0
  8535  1D14  01A5               	clrf	CC2500_TxData@loop_e
  8536  1D15                     l6992:	
  8537  1D15  0021               	movlb	1	; select bank1
  8538  1D16  0840               	movf	_Tx_Length^(0+128),w
  8539  1D17  0020               	movlb	0	; select bank0
  8540  1D18  0225               	subwf	CC2500_TxData@loop_e,w
  8541  1D19  1803               	btfsc	3,0
  8542  1D1A  2D2D               	goto	l312
  8543                           
  8544                           ;CC2500_B1.c: 41: {
  8545                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  8546  1D1B  0825               	movf	CC2500_TxData@loop_e,w
  8547  1D1C  3EA0               	addlw	_RF_Data& (0+255)
  8548  1D1D  0086               	movwf	6
  8549  1D1E  0187               	clrf	7
  8550  1D1F  0801               	movf	1,w
  8551  1D20  00A4               	movwf	??_CC2500_TxData
  8552  1D21  0824               	movf	??_CC2500_TxData,w
  8553  1D22  0021               	movlb	1	; select bank1
  8554  1D23  00BF               	movwf	_SPI0Buffer^(0+128)
  8555                           
  8556                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8557  1D24  31A6  2672  319C   	fcall	_CC2500_WriteByte
  8558  1D27  3001               	movlw	1
  8559  1D28  0020               	movlb	0	; select bank0
  8560  1D29  00A4               	movwf	??_CC2500_TxData
  8561  1D2A  0824               	movf	??_CC2500_TxData,w
  8562  1D2B  07A5               	addwf	CC2500_TxData@loop_e,f
  8563  1D2C  2D15               	goto	l6992
  8564  1D2D                     l312:	
  8565                           
  8566                           ;CC2500_B1.c: 44: }
  8567                           ;CC2500_B1.c: 45: RC4=1;
  8568  1D2D  160E               	bsf	14,4	;volatile
  8569                           
  8570                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8571  1D2E  3035               	movlw	53
  8572  1D2F  31A5  2520  319C   	fcall	_CC2500_WriteCommand
  8573  1D32                     l313:	
  8574                           ;CC2500_B1.c: 47: while(RB0==0);
  8575                           
  8576  1D32  0020               	movlb	0	; select bank0
  8577  1D33  1C0D               	btfss	13,0	;volatile
  8578  1D34  2D32               	goto	l313
  8579  1D35                     l316:	
  8580                           ;CC2500_B1.c: 48: while(RB0==1);
  8581                           
  8582  1D35  180D               	btfsc	13,0	;volatile
  8583  1D36  2D35               	goto	l316
  8584                           
  8585                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8586  1D37  3036               	movlw	54
  8587  1D38  31A5  2520  319C   	fcall	_CC2500_WriteCommand
  8588                           
  8589                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8590  1D3B  303B               	movlw	59
  8591  1D3C  31A5  2520         	fcall	_CC2500_WriteCommand
  8592                           
  8593                           ;CC2500_B1.c: 51: Transceive_OK=1;
  8594  1D3E  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8595  1D3F  0008               	return
  8596  1D40                     __end_of_CC2500_TxData:	
  8597                           
  8598                           	psect	text34
  8599  1101                     __ptext34:	
  8600 ;; *************** function _CC2500_RxData *****************
  8601 ;; Defined at:
  8602 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    6
  8623 ;; This function calls:
  8624 ;;		_CC2500_ReadByte
  8625 ;;		_CC2500_ReadStatus
  8626 ;;		_CC2500_WriteByte
  8627 ;;		_CC2500_WriteCommand
  8628 ;;		_setRF_RxStatus
  8629 ;; This function is called by:
  8630 ;;		_setRF_Main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function _CC2500_RxData
  8636  1101                     _CC2500_RxData:	
  8637                           
  8638                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8639                           ;CC2500_B1.c: 62: if(RB0 == 1)
  8640                           
  8641                           ;incstack = 0
  8642                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8643  1101  0020               	movlb	0	; select bank0
  8644  1102  180D               	btfsc	13,0	;volatile
  8645  1103                     l323:	
  8646                           ;CC2500_B1.c: 63: {
  8647                           ;CC2500_B1.c: 64: while(RB0 == 1);
  8648                           
  8649  1103  180D               	btfsc	13,0	;volatile
  8650  1104  2903               	goto	l323
  8651                           
  8652                           ;CC2500_B1.c: 65: }
  8653                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8654  1105  303B               	movlw	59
  8655  1106  31A7  270B  3191   	fcall	_CC2500_ReadStatus
  8656                           
  8657                           ;CC2500_B1.c: 67: if(s_data != 0)
  8658  1109  0021               	movlb	1	; select bank1
  8659  110A  0843               	movf	_s_data^(0+128),w
  8660  110B  1903               	btfsc	3,2
  8661  110C  2957               	goto	l9036
  8662                           
  8663                           ;CC2500_B1.c: 69: {
  8664                           ;CC2500_B1.c: 70: RC4=0;
  8665  110D  0020               	movlb	0	; select bank0
  8666  110E  120E               	bcf	14,4	;volatile
  8667                           
  8668                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  8669  110F  30FF               	movlw	255
  8670  1110  00A4               	movwf	??_CC2500_RxData
  8671  1111  0824               	movf	??_CC2500_RxData,w
  8672  1112  0021               	movlb	1	; select bank1
  8673  1113  00BF               	movwf	_SPI0Buffer^(0+128)
  8674  1114                     l327:	
  8675                           ;CC2500_B1.c: 72: while(RC2==1);
  8676                           
  8677  1114  0020               	movlb	0	; select bank0
  8678  1115  190E               	btfsc	14,2	;volatile
  8679  1116  2914               	goto	l327
  8680                           
  8681                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8682  1117  31A6  2672  3191   	fcall	_CC2500_WriteByte
  8683                           
  8684                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8685  111A  31A7  2742  3191   	fcall	_CC2500_ReadByte
  8686                           
  8687                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  8688  111D  0021               	movlb	1	; select bank1
  8689  111E  083F               	movf	_SPI0Buffer^(0+128),w
  8690  111F  0020               	movlb	0	; select bank0
  8691  1120  00A4               	movwf	??_CC2500_RxData
  8692  1121  0824               	movf	??_CC2500_RxData,w
  8693  1122  0021               	movlb	1	; select bank1
  8694  1123  00BE               	movwf	_Rx_Length^(0+128)
  8695                           
  8696                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  8697  1124  0020               	movlb	0	; select bank0
  8698  1125  01A5               	clrf	CC2500_RxData@loop_f
  8699  1126                     l9022:	
  8700  1126  0021               	movlb	1	; select bank1
  8701  1127  083E               	movf	_Rx_Length^(0+128),w
  8702  1128  0020               	movlb	0	; select bank0
  8703  1129  0225               	subwf	CC2500_RxData@loop_f,w
  8704  112A  1803               	btfsc	3,0
  8705  112B  293E               	goto	l9024
  8706                           
  8707                           ;CC2500_B1.c: 78: {
  8708                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  8709  112C  31A7  2742  3191   	fcall	_CC2500_ReadByte
  8710                           
  8711                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  8712  112F  0021               	movlb	1	; select bank1
  8713  1130  083F               	movf	_SPI0Buffer^(0+128),w
  8714  1131  0020               	movlb	0	; select bank0
  8715  1132  00A4               	movwf	??_CC2500_RxData
  8716  1133  0825               	movf	CC2500_RxData@loop_f,w
  8717  1134  3EA0               	addlw	_RF_Data& (0+255)
  8718  1135  0086               	movwf	6
  8719  1136  0187               	clrf	7
  8720  1137  0824               	movf	??_CC2500_RxData,w
  8721  1138  0081               	movwf	1
  8722  1139  3001               	movlw	1
  8723  113A  00A4               	movwf	??_CC2500_RxData
  8724  113B  0824               	movf	??_CC2500_RxData,w
  8725  113C  07A5               	addwf	CC2500_RxData@loop_f,f
  8726  113D  2926               	goto	l9022
  8727  113E                     l9024:	
  8728                           
  8729                           ;CC2500_B1.c: 81: }
  8730                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8731  113E  31A7  2742  3191   	fcall	_CC2500_ReadByte
  8732                           
  8733                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  8734  1141  0021               	movlb	1	; select bank1
  8735  1142  083F               	movf	_SPI0Buffer^(0+128),w
  8736  1143  0020               	movlb	0	; select bank0
  8737  1144  00A4               	movwf	??_CC2500_RxData
  8738  1145  0824               	movf	??_CC2500_RxData,w
  8739  1146  0021               	movlb	1	; select bank1
  8740  1147  00BD               	movwf	_RSSI^(0+128)
  8741                           
  8742                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  8743  1148  31A7  2742  3191   	fcall	_CC2500_ReadByte
  8744                           
  8745                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  8746  114B  0021               	movlb	1	; select bank1
  8747  114C  083F               	movf	_SPI0Buffer^(0+128),w
  8748  114D  0020               	movlb	0	; select bank0
  8749  114E  00A4               	movwf	??_CC2500_RxData
  8750  114F  0824               	movf	??_CC2500_RxData,w
  8751  1150  0021               	movlb	1	; select bank1
  8752  1151  00B7               	movwf	_CRC^(0+128)
  8753                           
  8754                           ;CC2500_B1.c: 86: RC4=1;
  8755  1152  0020               	movlb	0	; select bank0
  8756  1153  160E               	bsf	14,4	;volatile
  8757                           
  8758                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  8759  1154  0021               	movlb	1	; select bank1
  8760  1155  1BB7               	btfsc	_CRC^(0+128),7
  8761                           
  8762                           ;CC2500_B1.c: 88: Receive_OK=1;
  8763  1156  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8764  1157                     l9036:	
  8765                           
  8766                           ;CC2500_B1.c: 89: }
  8767                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  8768  1157  3036               	movlw	54
  8769  1158  31A5  2520  3191   	fcall	_CC2500_WriteCommand
  8770                           
  8771                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  8772  115B  303A               	movlw	58
  8773  115C  31A5  2520  3191   	fcall	_CC2500_WriteCommand
  8774                           
  8775                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  8776  115F  0020               	movlb	0	; select bank0
  8777  1160  01A2               	clrf	setRF_RxStatus@command
  8778  1161  3001               	movlw	1
  8779  1162  31A4  24E6         	fcall	_setRF_RxStatus
  8780  1164  0008               	return
  8781  1165                     __end_of_CC2500_RxData:	
  8782                           
  8783                           	psect	text35
  8784  24E6                     __ptext35:	
  8785 ;; *************** function _setRF_RxStatus *****************
  8786 ;; Defined at:
  8787 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  rf              1    wreg     unsigned char 
  8790 ;;  command         1    2[BANK0 ] unsigned char 
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  rf              1    3[BANK0 ] unsigned char 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8802 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;Total ram usage:        2 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    5
  8809 ;; This function calls:
  8810 ;;		_RfPointSelect
  8811 ;; This function is called by:
  8812 ;;		_CC2500_RxData
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _setRF_RxStatus
  8818  24E6                     _setRF_RxStatus:	
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8822                           ;setRF_RxStatus@rf stored from wreg
  8823  24E6  0020               	movlb	0	; select bank0
  8824  24E7  00A3               	movwf	setRF_RxStatus@rf
  8825                           
  8826                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  8827  24E8  0823               	movf	setRF_RxStatus@rf,w
  8828  24E9  31A4  241D         	fcall	_RfPointSelect
  8829                           
  8830                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  8831  24EB  087C               	movf	_RF,w
  8832  24EC  0086               	movwf	6
  8833  24ED  0187               	clrf	7
  8834  24EE  0020               	movlb	0	; select bank0
  8835  24EF  0822               	movf	setRF_RxStatus@command,w
  8836  24F0  1181               	bcf	1,3
  8837  24F1  1D03               	skipz
  8838  24F2  1581               	bsf	1,3
  8839  24F3  0008               	return
  8840  24F4                     __end_of_setRF_RxStatus:	
  8841                           
  8842                           	psect	text36
  8843  270B                     __ptext36:	
  8844 ;; *************** function _CC2500_ReadStatus *****************
  8845 ;; Defined at:
  8846 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  status_addr     1    wreg     unsigned char 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;		None               void
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, pclath, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;Total ram usage:        2 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    5
  8867 ;; This function calls:
  8868 ;;		_CC2500_ReadByte
  8869 ;;		_CC2500_WriteByte
  8870 ;; This function is called by:
  8871 ;;		_CC2500_RxData
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           
  8876                           ;psect for function _CC2500_ReadStatus
  8877  270B                     _CC2500_ReadStatus:	
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8881                           ;CC2500_ReadStatus@status_addr stored from wreg
  8882  270B  0020               	movlb	0	; select bank0
  8883  270C  00A3               	movwf	CC2500_ReadStatus@status_addr
  8884                           
  8885                           ;CC2500_B1.c: 269: RC4=0;
  8886  270D  120E               	bcf	14,4	;volatile
  8887                           
  8888                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  8889  270E  0823               	movf	CC2500_ReadStatus@status_addr,w
  8890  270F  3EC0               	addlw	192
  8891  2710  00A2               	movwf	??_CC2500_ReadStatus
  8892  2711  0822               	movf	??_CC2500_ReadStatus,w
  8893  2712  0021               	movlb	1	; select bank1
  8894  2713  00BF               	movwf	_SPI0Buffer^(0+128)
  8895  2714                     l403:	
  8896                           ;CC2500_B1.c: 272: while(RC2==1);
  8897                           
  8898  2714  0020               	movlb	0	; select bank0
  8899  2715  190E               	btfsc	14,2	;volatile
  8900  2716  2F14               	goto	l403
  8901                           
  8902                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  8903  2717  31A6  2672  31A7   	fcall	_CC2500_WriteByte
  8904                           
  8905                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  8906  271A  31A7  2742         	fcall	_CC2500_ReadByte
  8907                           
  8908                           ;CC2500_B1.c: 276: RC4=1;
  8909  271C  0020               	movlb	0	; select bank0
  8910  271D  160E               	bsf	14,4	;volatile
  8911                           
  8912                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  8913  271E  0021               	movlb	1	; select bank1
  8914  271F  083F               	movf	_SPI0Buffer^(0+128),w
  8915  2720  0020               	movlb	0	; select bank0
  8916  2721  00A2               	movwf	??_CC2500_ReadStatus
  8917  2722  0822               	movf	??_CC2500_ReadStatus,w
  8918  2723  0021               	movlb	1	; select bank1
  8919  2724  00C3               	movwf	_s_data^(0+128)
  8920  2725  0008               	return
  8921  2726                     __end_of_CC2500_ReadStatus:	
  8922                           
  8923                           	psect	text37
  8924  2742                     __ptext37:	
  8925 ;; *************** function _CC2500_ReadByte *****************
  8926 ;; Defined at:
  8927 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;		None
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg, status,2, status,0
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        2 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    4
  8948 ;; This function calls:
  8949 ;;		Nothing
  8950 ;; This function is called by:
  8951 ;;		_CC2500_RxData
  8952 ;;		_CC2500_ReadStatus
  8953 ;;		_CC2500_ReadREG
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function _CC2500_ReadByte
  8959  2742                     _CC2500_ReadByte:	
  8960                           
  8961                           ;CC2500_B1.c: 212: unsigned char loop_b;
  8962                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8966  2742  0020               	movlb	0	; select bank0
  8967  2743  01A1               	clrf	CC2500_ReadByte@loop_b
  8968  2744                     L11:	
  8969  2744  3008               	movlw	8
  8970  2745  0221               	subwf	CC2500_ReadByte@loop_b,w
  8971  2746  1803               	btfsc	3,0
  8972  2747  0008               	return
  8973                           
  8974                           ;CC2500_B1.c: 214: {
  8975                           ;CC2500_B1.c: 215: RC1=1;
  8976  2748  148E               	bsf	14,1	;volatile
  8977                           
  8978                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  8979  2749  1003               	clrc
  8980  274A  0021               	movlb	1	; select bank1
  8981  274B  0DBF               	rlf	_SPI0Buffer^(0+128),f
  8982                           
  8983                           ;CC2500_B1.c: 217: if(RC2 == 1)
  8984  274C  0020               	movlb	0	; select bank0
  8985  274D  1D0E               	btfss	14,2	;volatile
  8986  274E  2F52               	goto	l6718
  8987                           
  8988                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  8989  274F  0021               	movlb	1	; select bank1
  8990  2750  143F               	bsf	_SPI0Buffer^(0+128),0
  8991  2751  2F58               	goto	l6720
  8992  2752                     l6718:	
  8993                           
  8994                           ;CC2500_B1.c: 219: else
  8995                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  8996  2752  30FE               	movlw	254
  8997  2753  0020               	movlb	0	; select bank0
  8998  2754  00A0               	movwf	??_CC2500_ReadByte
  8999  2755  0820               	movf	??_CC2500_ReadByte,w
  9000  2756  0021               	movlb	1	; select bank1
  9001  2757  05BF               	andwf	_SPI0Buffer^(0+128),f
  9002  2758                     l6720:	
  9003                           
  9004                           ;CC2500_B1.c: 221: RC1=0;
  9005  2758  0020               	movlb	0	; select bank0
  9006  2759  108E               	bcf	14,1	;volatile
  9007  275A  3001               	movlw	1
  9008  275B  00A0               	movwf	??_CC2500_ReadByte
  9009  275C  0820               	movf	??_CC2500_ReadByte,w
  9010  275D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9011  275E  2F44               	goto	L11
  9012  275F                     __end_of_CC2500_ReadByte:	
  9013                           
  9014                           	psect	text38
  9015  2391                     __ptext38:	
  9016 ;; *************** function _RF_Initialization *****************
  9017 ;; Defined at:
  9018 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;		None               void
  9025 ;; Registers used:
  9026 ;;		wreg, status,2, status,0, pclath, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    5
  9039 ;; This function calls:
  9040 ;;		_setRF_Initialization
  9041 ;; This function is called by:
  9042 ;;		_main
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _RF_Initialization
  9048  2391                     _RF_Initialization:	
  9049                           
  9050                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9054  2391  3001               	movlw	1
  9055  2392  31A3  23BC         	fcall	_setRF_Initialization
  9056  2394  0008               	return
  9057  2395                     __end_of_RF_Initialization:	
  9058                           
  9059                           	psect	text39
  9060  23BC                     __ptext39:	
  9061 ;; *************** function _setRF_Initialization *****************
  9062 ;; Defined at:
  9063 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  rf              1    wreg     unsigned char 
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;  rf              1    0[COMMON] unsigned char 
  9068 ;; Return value:  Size  Location     Type
  9069 ;;		None               void
  9070 ;; Registers used:
  9071 ;;		wreg
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;Total ram usage:        1 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    4
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_RF_Initialization
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           
  9092                           ;psect for function _setRF_Initialization
  9093  23BC                     _setRF_Initialization:	
  9094                           
  9095                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _setRF_Initialization: [wreg]
  9099  23BC  3015               	movlw	21
  9100  23BD  0020               	movlb	0	; select bank0
  9101  23BE  00A0               	movwf	??_setRF_Initialization
  9102  23BF  0820               	movf	??_setRF_Initialization,w
  9103  23C0  0021               	movlb	1	; select bank1
  9104  23C1  00C0               	movwf	_Tx_Length^(0+128)
  9105  23C2  0008               	return
  9106  23C3                     __end_of_setRF_Initialization:	
  9107                           
  9108                           	psect	text40
  9109  237C                     __ptext40:	
  9110 ;; *************** function _PowerFault_Main *****************
  9111 ;; Defined at:
  9112 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;		None
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;		None               void
  9119 ;; Registers used:
  9120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:        0 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:   10
  9133 ;; This function calls:
  9134 ;;		_setPowerFault_Main
  9135 ;; This function is called by:
  9136 ;;		_main
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _PowerFault_Main
  9142  237C                     _PowerFault_Main:	
  9143                           
  9144                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9148  237C  318D  25CF         	fcall	_setPowerFault_Main
  9149  237E  0008               	return
  9150  237F                     __end_of_PowerFault_Main:	
  9151                           
  9152                           	psect	text41
  9153  0DCF                     __ptext41:	
  9154 ;; *************** function _setPowerFault_Main *****************
  9155 ;; Defined at:
  9156 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;		None               void
  9163 ;; Registers used:
  9164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        2 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    9
  9177 ;; This function calls:
  9178 ;;		_getLoad_Safe
  9179 ;;		_getTemp_Safe
  9180 ;;		_setPowerFault_Exceptions
  9181 ;; This function is called by:
  9182 ;;		_PowerFault_Main
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _setPowerFault_Main
  9188  0DCF                     _setPowerFault_Main:	
  9189                           
  9190                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9194  0DCF  087B               	movf	_PF,w
  9195  0DD0  0086               	movwf	6
  9196  0DD1  3001               	movlw	1	; select bank2/3
  9197  0DD2  0087               	movwf	7
  9198  0DD3  1C01               	btfss	1,0
  9199  0DD4  0008               	return
  9200                           
  9201                           ;PowerFault_B1.c: 64: {
  9202                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9203  0DD5  087B               	movf	_PF,w
  9204  0DD6  0086               	movwf	6
  9205  0DD7  3001               	movlw	1	; select bank2/3
  9206  0DD8  0087               	movwf	7
  9207  0DD9  1981               	btfsc	1,3
  9208  0DDA  2E1F               	goto	l9564
  9209                           
  9210                           ;PowerFault_B1.c: 66: {
  9211                           ;PowerFault_B1.c: 67: PF->Time++;
  9212  0DDB  087B               	movf	_PF,w
  9213  0DDC  3E06               	addlw	6
  9214  0DDD  0086               	movwf	6
  9215  0DDE  3001               	movlw	1	; select bank2/3
  9216  0DDF  0087               	movwf	7
  9217  0DE0  3001               	movlw	1
  9218  0DE1  0781               	addwf	1,f
  9219  0DE2  3141               	addfsr 1,1
  9220  0DE3  1803               	skipnc
  9221  0DE4  0A81               	incf	1,f
  9222                           
  9223                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9224  0DE5  087B               	movf	_PF,w
  9225  0DE6  3E06               	addlw	6
  9226  0DE7  0086               	movwf	6
  9227  0DE8  3001               	movlw	1	; select bank2/3
  9228  0DE9  0087               	movwf	7
  9229  0DEA  3F40               	moviw [0]fsr1
  9230  0DEB  0020               	movlb	0	; select bank0
  9231  0DEC  00AD               	movwf	??_setPowerFault_Main
  9232  0DED  3F41               	moviw [1]fsr1
  9233  0DEE  00AE               	movwf	??_setPowerFault_Main+1
  9234  0DEF  3002               	movlw	2
  9235  0DF0  022E               	subwf	??_setPowerFault_Main+1,w
  9236  0DF1  30BC               	movlw	188
  9237  0DF2  1903               	skipnz
  9238  0DF3  022D               	subwf	??_setPowerFault_Main,w
  9239  0DF4  1C03               	skipc
  9240  0DF5  0008               	return
  9241                           
  9242                           ;PowerFault_B1.c: 69: {
  9243                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9244  0DF6  31A4  2454  318D   	fcall	_getLoad_Safe
  9245  0DF9  3A00               	xorlw	0
  9246  0DFA  1903               	skipnz
  9247  0DFB  2E15               	goto	l9562
  9248  0DFC  31A3  23AE  318D   	fcall	_getTemp_Safe
  9249  0DFF  3A00               	xorlw	0
  9250  0E00  1903               	skipnz
  9251  0E01  2E15               	goto	l9562
  9252                           
  9253                           ;PowerFault_B1.c: 71: {
  9254                           ;PowerFault_B1.c: 72: PF->Time=0;
  9255  0E02  087B               	movf	_PF,w
  9256  0E03  3E06               	addlw	6
  9257  0E04  0086               	movwf	6
  9258  0E05  3001               	movlw	1	; select bank2/3
  9259  0E06  0087               	movwf	7
  9260  0E07  3000               	movlw	0
  9261  0E08  3FC0               	movwi [0]fsr1
  9262  0E09  3FC1               	movwi [1]fsr1
  9263                           
  9264                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9265  0E0A  087B               	movf	_PF,w
  9266  0E0B  0086               	movwf	6
  9267  0E0C  3001               	movlw	1	; select bank2/3
  9268  0E0D  0087               	movwf	7
  9269  0E0E  1581               	bsf	1,3
  9270                           
  9271                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9272  0E0F  087B               	movf	_PF,w
  9273  0E10  0086               	movwf	6
  9274  0E11  3001               	movlw	1	; select bank2/3
  9275  0E12  0087               	movwf	7
  9276  0E13  1101               	bcf	1,2
  9277                           
  9278                           ;PowerFault_B1.c: 75: }
  9279  0E14  0008               	return
  9280  0E15                     l9562:	
  9281                           
  9282                           ;PowerFault_B1.c: 76: else
  9283                           ;PowerFault_B1.c: 77: {
  9284                           ;PowerFault_B1.c: 78: PF->Time=700;
  9285  0E15  087B               	movf	_PF,w
  9286  0E16  3E06               	addlw	6
  9287  0E17  0086               	movwf	6
  9288  0E18  3001               	movlw	1	; select bank2/3
  9289  0E19  0087               	movwf	7
  9290  0E1A  30BC               	movlw	188
  9291  0E1B  3FC0               	movwi [0]fsr1
  9292  0E1C  3002               	movlw	2
  9293  0E1D  3FC1               	movwi [1]fsr1
  9294                           
  9295                           ;PowerFault_B1.c: 79: }
  9296                           ;PowerFault_B1.c: 80: }
  9297                           ;PowerFault_B1.c: 81: }
  9298  0E1E  0008               	return
  9299  0E1F                     l9564:	
  9300                           
  9301                           ;PowerFault_B1.c: 82: else
  9302                           ;PowerFault_B1.c: 83: {
  9303                           ;PowerFault_B1.c: 84: PF->Time++;
  9304  0E1F  087B               	movf	_PF,w
  9305  0E20  3E06               	addlw	6
  9306  0E21  0086               	movwf	6
  9307  0E22  3001               	movlw	1	; select bank2/3
  9308  0E23  0087               	movwf	7
  9309  0E24  3001               	movlw	1
  9310  0E25  0781               	addwf	1,f
  9311  0E26  3141               	addfsr 1,1
  9312  0E27  1803               	skipnc
  9313  0E28  0A81               	incf	1,f
  9314                           
  9315                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9316  0E29  087B               	movf	_PF,w
  9317  0E2A  3E06               	addlw	6
  9318  0E2B  0086               	movwf	6
  9319  0E2C  3001               	movlw	1	; select bank2/3
  9320  0E2D  0087               	movwf	7
  9321  0E2E  3F40               	moviw [0]fsr1
  9322  0E2F  0020               	movlb	0	; select bank0
  9323  0E30  00AD               	movwf	??_setPowerFault_Main
  9324  0E31  3F41               	moviw [1]fsr1
  9325  0E32  00AE               	movwf	??_setPowerFault_Main+1
  9326  0E33  3000               	movlw	0
  9327  0E34  022E               	subwf	??_setPowerFault_Main+1,w
  9328  0E35  3002               	movlw	2
  9329  0E36  1903               	skipnz
  9330  0E37  022D               	subwf	??_setPowerFault_Main,w
  9331  0E38  1C03               	skipc
  9332  0E39  0008               	return
  9333                           
  9334                           ;PowerFault_B1.c: 86: {
  9335                           ;PowerFault_B1.c: 87: PF->Time=0;
  9336  0E3A  087B               	movf	_PF,w
  9337  0E3B  3E06               	addlw	6
  9338  0E3C  0086               	movwf	6
  9339  0E3D  3001               	movlw	1	; select bank2/3
  9340  0E3E  0087               	movwf	7
  9341  0E3F  3000               	movlw	0
  9342  0E40  3FC0               	movwi [0]fsr1
  9343  0E41  3FC1               	movwi [1]fsr1
  9344                           
  9345                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9346  0E42  087B               	movf	_PF,w
  9347  0E43  0086               	movwf	6
  9348  0E44  3001               	movlw	1	; select bank2/3
  9349  0E45  0087               	movwf	7
  9350  0E46  1181               	bcf	1,3
  9351                           
  9352                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9353  0E47  087B               	movf	_PF,w
  9354  0E48  0086               	movwf	6
  9355  0E49  3001               	movlw	1	; select bank2/3
  9356  0E4A  0087               	movwf	7
  9357  0E4B  1C81               	btfss	1,1
  9358  0E4C  2E88               	goto	l9584
  9359                           
  9360                           ;PowerFault_B1.c: 91: {
  9361                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9362  0E4D  0A7B               	incf	_PF,w
  9363  0E4E  0086               	movwf	6
  9364  0E4F  3001               	movlw	1	; select bank2/3
  9365  0E50  0087               	movwf	7
  9366  0E51  3F40               	moviw [0]fsr1
  9367  0E52  00AD               	movwf	??_setPowerFault_Main
  9368  0E53  3F41               	moviw [1]fsr1
  9369  0E54  00AE               	movwf	??_setPowerFault_Main+1
  9370  0E55  3001               	movlw	1
  9371  0E56  022E               	subwf	??_setPowerFault_Main+1,w
  9372  0E57  3091               	movlw	145
  9373  0E58  1903               	skipnz
  9374  0E59  022D               	subwf	??_setPowerFault_Main,w
  9375  0E5A  1803               	skipnc
  9376  0E5B  2EC4               	goto	l9596
  9377  0E5C  0A7B               	incf	_PF,w
  9378  0E5D  0086               	movwf	6
  9379  0E5E  3001               	movlw	1	; select bank2/3
  9380  0E5F  0087               	movwf	7
  9381  0E60  3F40               	moviw [0]fsr1
  9382  0E61  00AD               	movwf	??_setPowerFault_Main
  9383  0E62  3F41               	moviw [1]fsr1
  9384  0E63  00AE               	movwf	??_setPowerFault_Main+1
  9385  0E64  3000               	movlw	0
  9386  0E65  022E               	subwf	??_setPowerFault_Main+1,w
  9387  0E66  30C8               	movlw	200
  9388  0E67  1903               	skipnz
  9389  0E68  022D               	subwf	??_setPowerFault_Main,w
  9390  0E69  1C03               	skipc
  9391  0E6A  2EC4               	goto	l9596
  9392                           
  9393                           ;PowerFault_B1.c: 93: {
  9394                           ;PowerFault_B1.c: 94: PF->Count++;
  9395  0E6B  3001               	movlw	1
  9396  0E6C  00AD               	movwf	??_setPowerFault_Main
  9397  0E6D  087B               	movf	_PF,w
  9398  0E6E  3E05               	addlw	5
  9399  0E6F  0086               	movwf	6
  9400  0E70  3001               	movlw	1	; select bank2/3
  9401  0E71  0087               	movwf	7
  9402  0E72  082D               	movf	??_setPowerFault_Main,w
  9403  0E73  0781               	addwf	1,f
  9404                           
  9405                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9406  0E74  087B               	movf	_PF,w
  9407  0E75  3E05               	addlw	5
  9408  0E76  0086               	movwf	6
  9409  0E77  3001               	movlw	1	; select bank2/3
  9410  0E78  0087               	movwf	7
  9411  0E79  3002               	movlw	2
  9412  0E7A  0201               	subwf	1,w
  9413  0E7B  1C03               	skipc
  9414  0E7C  2ECA               	goto	l9598
  9415                           
  9416                           ;PowerFault_B1.c: 96: {
  9417                           ;PowerFault_B1.c: 97: PF->Count=0;
  9418  0E7D  087B               	movf	_PF,w
  9419  0E7E  3E05               	addlw	5
  9420  0E7F  0086               	movwf	6
  9421  0E80  3001               	movlw	1	; select bank2/3
  9422  0E81  0087               	movwf	7
  9423  0E82  0181               	clrf	1
  9424                           
  9425                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9426  0E83  3000               	movlw	0
  9427  0E84  3190  2005  318D   	fcall	_setPowerFault_Exceptions
  9428                           
  9429                           ;PowerFault_B1.c: 99: }
  9430                           ;PowerFault_B1.c: 100: }
  9431  0E87  2ECA               	goto	l9598
  9432  0E88                     l9584:	
  9433                           ;PowerFault_B1.c: 104: }
  9434                           ;PowerFault_B1.c: 105: }
  9435                           
  9436                           ;PowerFault_B1.c: 101: else
  9437                           ;PowerFault_B1.c: 102: {
  9438                           ;PowerFault_B1.c: 103: PF->Count=0;
  9439                           
  9440                           
  9441                           ;PowerFault_B1.c: 106: else
  9442                           ;PowerFault_B1.c: 107: {
  9443                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9444  0E88  0A7B               	incf	_PF,w
  9445  0E89  0086               	movwf	6
  9446  0E8A  3001               	movlw	1	; select bank2/3
  9447  0E8B  0087               	movwf	7
  9448  0E8C  3F40               	moviw [0]fsr1
  9449  0E8D  0020               	movlb	0	; select bank0
  9450  0E8E  00AD               	movwf	??_setPowerFault_Main
  9451  0E8F  3F41               	moviw [1]fsr1
  9452  0E90  00AE               	movwf	??_setPowerFault_Main+1
  9453  0E91  3001               	movlw	1
  9454  0E92  022E               	subwf	??_setPowerFault_Main+1,w
  9455  0E93  3090               	movlw	144
  9456  0E94  1903               	skipnz
  9457  0E95  022D               	subwf	??_setPowerFault_Main,w
  9458  0E96  1803               	skipnc
  9459  0E97  2EA7               	goto	l9588
  9460  0E98  0A7B               	incf	_PF,w
  9461  0E99  0086               	movwf	6
  9462  0E9A  3001               	movlw	1	; select bank2/3
  9463  0E9B  0087               	movwf	7
  9464  0E9C  3F40               	moviw [0]fsr1
  9465  0E9D  00AD               	movwf	??_setPowerFault_Main
  9466  0E9E  3F41               	moviw [1]fsr1
  9467  0E9F  00AE               	movwf	??_setPowerFault_Main+1
  9468  0EA0  3000               	movlw	0
  9469  0EA1  022E               	subwf	??_setPowerFault_Main+1,w
  9470  0EA2  30D3               	movlw	211
  9471  0EA3  1903               	skipnz
  9472  0EA4  022D               	subwf	??_setPowerFault_Main,w
  9473  0EA5  1803               	skipnc
  9474  0EA6  2EC4               	goto	l9596
  9475  0EA7                     l9588:	
  9476                           
  9477                           ;PowerFault_B1.c: 109: {
  9478                           ;PowerFault_B1.c: 110: PF->Count++;
  9479  0EA7  3001               	movlw	1
  9480  0EA8  00AD               	movwf	??_setPowerFault_Main
  9481  0EA9  087B               	movf	_PF,w
  9482  0EAA  3E05               	addlw	5
  9483  0EAB  0086               	movwf	6
  9484  0EAC  3001               	movlw	1	; select bank2/3
  9485  0EAD  0087               	movwf	7
  9486  0EAE  082D               	movf	??_setPowerFault_Main,w
  9487  0EAF  0781               	addwf	1,f
  9488                           
  9489                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9490  0EB0  087B               	movf	_PF,w
  9491  0EB1  3E05               	addlw	5
  9492  0EB2  0086               	movwf	6
  9493  0EB3  3001               	movlw	1	; select bank2/3
  9494  0EB4  0087               	movwf	7
  9495  0EB5  3002               	movlw	2
  9496  0EB6  0201               	subwf	1,w
  9497  0EB7  1C03               	skipc
  9498  0EB8  2ECA               	goto	l9598
  9499                           
  9500                           ;PowerFault_B1.c: 112: {
  9501                           ;PowerFault_B1.c: 113: PF->Count=0;
  9502  0EB9  087B               	movf	_PF,w
  9503  0EBA  3E05               	addlw	5
  9504  0EBB  0086               	movwf	6
  9505  0EBC  3001               	movlw	1	; select bank2/3
  9506  0EBD  0087               	movwf	7
  9507  0EBE  0181               	clrf	1
  9508                           
  9509                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9510  0EBF  3001               	movlw	1
  9511  0EC0  3190  2005  318D   	fcall	_setPowerFault_Exceptions
  9512                           
  9513                           ;PowerFault_B1.c: 115: }
  9514                           ;PowerFault_B1.c: 116: }
  9515  0EC3  2ECA               	goto	l9598
  9516  0EC4                     l9596:	
  9517                           
  9518                           ;PowerFault_B1.c: 117: else
  9519                           ;PowerFault_B1.c: 118: {
  9520                           ;PowerFault_B1.c: 119: PF->Count=0;
  9521  0EC4  087B               	movf	_PF,w
  9522  0EC5  3E05               	addlw	5
  9523  0EC6  0086               	movwf	6
  9524  0EC7  3001               	movlw	1	; select bank2/3
  9525  0EC8  0087               	movwf	7
  9526  0EC9  0181               	clrf	1
  9527  0ECA                     l9598:	
  9528                           
  9529                           ;PowerFault_B1.c: 120: }
  9530                           ;PowerFault_B1.c: 122: }
  9531                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9532  0ECA  087B               	movf	_PF,w
  9533  0ECB  0086               	movwf	6
  9534  0ECC  3001               	movlw	1	; select bank2/3
  9535  0ECD  0087               	movwf	7
  9536  0ECE  1881               	btfsc	1,1
  9537  0ECF  2ED5               	goto	l2463
  9538                           
  9539                           ;PowerFault_B1.c: 124: {
  9540                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9541  0ED0  087B               	movf	_PF,w
  9542  0ED1  0086               	movwf	6
  9543  0ED2  3001               	movlw	1	; select bank2/3
  9544  0ED3  0087               	movwf	7
  9545  0ED4  1501               	bsf	1,2
  9546  0ED5                     l2463:	
  9547                           
  9548                           ;PowerFault_B1.c: 126: }
  9549                           ;PowerFault_B1.c: 127: PF->AD=0;
  9550  0ED5  0A7B               	incf	_PF,w
  9551  0ED6  0086               	movwf	6
  9552  0ED7  3001               	movlw	1	; select bank2/3
  9553  0ED8  0087               	movwf	7
  9554  0ED9  3000               	movlw	0
  9555  0EDA  3FC0               	movwi [0]fsr1
  9556  0EDB  3FC1               	movwi [1]fsr1
  9557  0EDC  0008               	return
  9558  0EDD                     __end_of_setPowerFault_Main:	
  9559                           
  9560                           	psect	text42
  9561  1005                     __ptext42:	
  9562 ;; *************** function _setPowerFault_Exceptions *****************
  9563 ;; Defined at:
  9564 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;  command         1    wreg     unsigned char 
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;  command         1   12[BANK0 ] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;		None               void
  9571 ;; Registers used:
  9572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        2 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    8
  9585 ;; This function calls:
  9586 ;;		_DimmerLights_Exceptions
  9587 ;;		_setLED
  9588 ;;		_setRF_Enable
  9589 ;;		_setSw_Enable
  9590 ;; This function is called by:
  9591 ;;		_setPowerFault_Main
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _setPowerFault_Exceptions
  9597  1005                     _setPowerFault_Exceptions:	
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9601                           ;setPowerFault_Exceptions@command stored from wreg
  9602  1005  0020               	movlb	0	; select bank0
  9603  1006  00AC               	movwf	setPowerFault_Exceptions@command
  9604                           
  9605                           ;PowerFault_B1.c: 135: if(command == 1)
  9606  1007  082C               	movf	setPowerFault_Exceptions@command,w
  9607  1008  3A01               	xorlw	1
  9608  1009  1D03               	skipz
  9609  100A  280F               	goto	l9148
  9610                           
  9611                           ;PowerFault_B1.c: 136: {
  9612                           ;PowerFault_B1.c: 137: DimmerLights_Exceptions(3);
  9613  100B  3003               	movlw	3
  9614  100C  3191  2165  3190   	fcall	_DimmerLights_Exceptions
  9615  100F                     l9148:	
  9616                           
  9617                           ;PowerFault_B1.c: 138: }
  9618                           ;PowerFault_B1.c: 139: PF->ERROR=command;
  9619  100F  087B               	movf	_PF,w
  9620  1010  0086               	movwf	6
  9621  1011  3001               	movlw	1	; select bank2/3
  9622  1012  0087               	movwf	7
  9623  1013  0020               	movlb	0	; select bank0
  9624  1014  082C               	movf	setPowerFault_Exceptions@command,w
  9625  1015  1081               	bcf	1,1
  9626  1016  1D03               	skipz
  9627  1017  1481               	bsf	1,1
  9628                           
  9629                           ;PowerFault_B1.c: 141: setLED(99,command+10);
  9630  1018  082C               	movf	setPowerFault_Exceptions@command,w
  9631  1019  3E0A               	addlw	10
  9632  101A  00AB               	movwf	??_setPowerFault_Exceptions
  9633  101B  082B               	movf	??_setPowerFault_Exceptions,w
  9634  101C  00A2               	movwf	setLED@command
  9635  101D  3063               	movlw	99
  9636  101E  319F  2741  3190   	fcall	_setLED
  9637                           
  9638                           ;PowerFault_B1.c: 143: PF->Safe=(~command) & 0x01;
  9639  1021  0020               	movlb	0	; select bank0
  9640  1022  092C               	comf	setPowerFault_Exceptions@command,w
  9641  1023  3901               	andlw	1
  9642  1024  00AB               	movwf	??_setPowerFault_Exceptions
  9643  1025  087B               	movf	_PF,w
  9644  1026  0086               	movwf	6
  9645  1027  3001               	movlw	1	; select bank2/3
  9646  1028  0087               	movwf	7
  9647  1029  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9648  102A  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9649  102B  0801               	movf	1,w
  9650  102C  062B               	xorwf	??_setPowerFault_Exceptions,w
  9651  102D  39FB               	andlw	-5
  9652  102E  062B               	xorwf	??_setPowerFault_Exceptions,w
  9653  102F  0081               	movwf	1
  9654                           
  9655                           ;PowerFault_B1.c: 144: setSw_Enable((~command) & 0x01);
  9656  1030  092C               	comf	setPowerFault_Exceptions@command,w
  9657  1031  3901               	andlw	1
  9658  1032  31A7  2726  3190   	fcall	_setSw_Enable
  9659                           
  9660                           ;PowerFault_B1.c: 147: setRF_Enable(1,(~command) & 0x01);
  9661  1035  0020               	movlb	0	; select bank0
  9662  1036  092C               	comf	setPowerFault_Exceptions@command,w
  9663  1037  3901               	andlw	1
  9664  1038  00AB               	movwf	??_setPowerFault_Exceptions
  9665  1039  082B               	movf	??_setPowerFault_Exceptions,w
  9666  103A  00A4               	movwf	setRF_Enable@command
  9667  103B  3001               	movlw	1
  9668  103C  319B  2306         	fcall	_setRF_Enable
  9669  103E  0008               	return
  9670  103F                     __end_of_setPowerFault_Exceptions:	
  9671                           
  9672                           	psect	text43
  9673  2454                     __ptext43:	
  9674 ;; *************** function _getLoad_Safe *****************
  9675 ;; Defined at:
  9676 ;;		line 299 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  1    wreg      unsigned char 
  9683 ;; Registers used:
  9684 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;Total ram usage:        1 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    4
  9697 ;; This function calls:
  9698 ;;		Nothing
  9699 ;; This function is called by:
  9700 ;;		_setTemp_Main
  9701 ;;		_setPowerFault_Main
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           
  9706                           ;psect for function _getLoad_Safe
  9707  2454                     _getLoad_Safe:	
  9708                           
  9709                           ;OverLoad_B1.c: 301: return Load->Safe;
  9710                           
  9711                           ;incstack = 0
  9712                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
  9713  2454  0020               	movlb	0	; select bank0
  9714  2455  086E               	movf	_Load,w
  9715  2456  0086               	movwf	6
  9716  2457  3002               	movlw	2	; select bank4/5
  9717  2458  0087               	movwf	7
  9718  2459  0C01               	rrf	1,w
  9719  245A  00A0               	movwf	??_getLoad_Safe
  9720  245B  0CA0               	rrf	??_getLoad_Safe,f
  9721  245C  0C20               	rrf	??_getLoad_Safe,w
  9722  245D  3901               	andlw	1
  9723  245E  0008               	return
  9724  245F                     __end_of_getLoad_Safe:	
  9725                           
  9726                           	psect	text44
  9727  2379                     __ptext44:	
  9728 ;; *************** function _PowerFault_Initialization *****************
  9729 ;; Defined at:
  9730 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;		None
  9735 ;; Return value:  Size  Location     Type
  9736 ;;		None               void
  9737 ;; Registers used:
  9738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;Total ram usage:        0 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    5
  9751 ;; This function calls:
  9752 ;;		_setPowerFault_Initialization
  9753 ;; This function is called by:
  9754 ;;		_main
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           
  9759                           ;psect for function _PowerFault_Initialization
  9760  2379                     _PowerFault_Initialization:	
  9761                           
  9762                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
  9763                           
  9764                           ;incstack = 0
  9765                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9766  2379  31A5  2570         	fcall	_setPowerFault_Initialization
  9767  237B  0008               	return
  9768  237C                     __end_of_PowerFault_Initialization:	
  9769                           
  9770                           	psect	text45
  9771  2570                     __ptext45:	
  9772 ;; *************** function _setPowerFault_Initialization *****************
  9773 ;; Defined at:
  9774 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;		None
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;		None               void
  9781 ;; Registers used:
  9782 ;;		wreg, fsr1l, fsr1h
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;Total ram usage:        1 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:    4
  9795 ;; This function calls:
  9796 ;;		Nothing
  9797 ;; This function is called by:
  9798 ;;		_PowerFault_Initialization
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           
  9803                           ;psect for function _setPowerFault_Initialization
  9804  2570                     _setPowerFault_Initialization:	
  9805                           
  9806                           ;PowerFault_B1.c: 31: PF=&PF1;
  9807                           
  9808                           ;incstack = 0
  9809                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
  9810  2570  3066               	movlw	_PF1& (0+255)
  9811  2571  0020               	movlb	0	; select bank0
  9812  2572  00A0               	movwf	??_setPowerFault_Initialization
  9813  2573  0820               	movf	??_setPowerFault_Initialization,w
  9814  2574  00FB               	movwf	_PF
  9815                           
  9816                           ;PowerFault_B1.c: 32: PF->Enable=1;
  9817  2575  087B               	movf	_PF,w
  9818  2576  0086               	movwf	6
  9819  2577  3001               	movlw	1	; select bank2/3
  9820  2578  0087               	movwf	7
  9821  2579  1401               	bsf	1,0
  9822                           
  9823                           ;PowerFault_B1.c: 33: PF->Safe=1;
  9824  257A  087B               	movf	_PF,w
  9825  257B  0086               	movwf	6
  9826  257C  3001               	movlw	1	; select bank2/3
  9827  257D  0087               	movwf	7
  9828  257E  1501               	bsf	1,2
  9829  257F  0008               	return
  9830  2580                     __end_of_setPowerFault_Initialization:	
  9831                           
  9832                           	psect	text46
  9833  265A                     __ptext46:	
  9834 ;; *************** function _Mcu_Initialization *****************
  9835 ;; Defined at:
  9836 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;		None
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;		None
  9841 ;; Return value:  Size  Location     Type
  9842 ;;		None               void
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;Total ram usage:        1 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    5
  9857 ;; This function calls:
  9858 ;;		_ADC_Set
  9859 ;;		_INT_Set
  9860 ;;		_IOC_Set
  9861 ;;		_IO_Set
  9862 ;;		_TMR0_Set
  9863 ;; This function is called by:
  9864 ;;		_main
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           
  9869                           ;psect for function _Mcu_Initialization
  9870  265A                     _Mcu_Initialization:	
  9871                           
  9872                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
  9873                           
  9874                           ;incstack = 0
  9875                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9876  265A  3078               	movlw	120
  9877  265B  0021               	movlb	1	; select bank1
  9878  265C  0099               	movwf	25	;volatile
  9879                           
  9880                           ;MCU_16f1518_B1.c: 16: IO_Set();
  9881  265D  31A6  26BD  31A6   	fcall	_IO_Set
  9882                           
  9883                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
  9884  2660  31A4  24CC  31A6   	fcall	_TMR0_Set
  9885                           
  9886                           ;MCU_16f1518_B1.c: 20: ;;
  9887                           ;MCU_16f1518_B1.c: 22: ADC_Set();
  9888  2663  31A3  23B5  31A6   	fcall	_ADC_Set
  9889                           
  9890                           ;MCU_16f1518_B1.c: 26: INT_Set();
  9891  2666  31A3  2395  31A6   	fcall	_INT_Set
  9892                           
  9893                           ;MCU_16f1518_B1.c: 28: IOC_Set();
  9894  2669  31A4  24BF         	fcall	_IOC_Set
  9895                           
  9896                           ;MCU_16f1518_B1.c: 30: ;;
  9897                           ;MCU_16f1518_B1.c: 32: ;;
  9898                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
  9899  266B  3020               	movlw	_VarMemory& (0+255)
  9900  266C  0020               	movlb	0	; select bank0
  9901  266D  00A1               	movwf	??_Mcu_Initialization
  9902  266E  0821               	movf	??_Mcu_Initialization,w
  9903  266F  0021               	movlb	1	; select bank1
  9904  2670  00E8               	movwf	_Memory^(0+128)
  9905  2671  0008               	return
  9906  2672                     __end_of_Mcu_Initialization:	
  9907                           
  9908                           	psect	text47
  9909  24CC                     __ptext47:	
  9910 ;; *************** function _TMR0_Set *****************
  9911 ;; Defined at:
  9912 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;		None               void
  9919 ;; Registers used:
  9920 ;;		wreg, status,2
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;Total ram usage:        1 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    4
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_Mcu_Initialization
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           
  9941                           ;psect for function _TMR0_Set
  9942  24CC                     _TMR0_Set:	
  9943                           
  9944                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
  9945                           
  9946                           ;incstack = 0
  9947                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9948  24CC  30C4               	movlw	_VarTimer0& (0+255)
  9949  24CD  0020               	movlb	0	; select bank0
  9950  24CE  00A0               	movwf	??_TMR0_Set
  9951  24CF  0820               	movf	??_TMR0_Set,w
  9952  24D0  0021               	movlb	1	; select bank1
  9953  24D1  00EA               	movwf	_Timer0^(0+128)
  9954                           
  9955                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
  9956  24D2  0195               	clrf	21	;volatile
  9957                           
  9958                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
  9959  24D3  30A6               	movlw	166
  9960  24D4  0020               	movlb	0	; select bank0
  9961  24D5  0095               	movwf	21	;volatile
  9962                           
  9963                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
  9964  24D6  168B               	bsf	11,5	;volatile
  9965                           
  9966                           ;MCU_16f1518_B1.c: 79: GIE=1;
  9967  24D7  178B               	bsf	11,7	;volatile
  9968  24D8  0008               	return
  9969  24D9                     __end_of_TMR0_Set:	
  9970                           
  9971                           	psect	text48
  9972  26BD                     __ptext48:	
  9973 ;; *************** function _IO_Set *****************
  9974 ;; Defined at:
  9975 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;		None
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;		None
  9980 ;; Return value:  Size  Location     Type
  9981 ;;		None               void
  9982 ;; Registers used:
  9983 ;;		wreg, status,2
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:        0 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:    4
  9996 ;; This function calls:
  9997 ;;		Nothing
  9998 ;; This function is called by:
  9999 ;;		_Mcu_Initialization
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           
 10004                           ;psect for function _IO_Set
 10005  26BD                     _IO_Set:	
 10006                           
 10007                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
 10008                           
 10009                           ;incstack = 0
 10010                           ; Regs used in _IO_Set: [wreg+status,2]
 10011  26BD  3077               	movlw	119
 10012  26BE  0021               	movlb	1	; select bank1
 10013  26BF  008C               	movwf	12	;volatile
 10014                           
 10015                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
 10016  26C0  3007               	movlw	7
 10017  26C1  008D               	movwf	13	;volatile
 10018                           
 10019                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
 10020  26C2  300C               	movlw	12
 10021  26C3  008E               	movwf	14	;volatile
 10022                           
 10023                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
 10024  26C4  0022               	movlb	2	; select bank2
 10025  26C5  018C               	clrf	12	;volatile
 10026                           
 10027                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
 10028  26C6  3002               	movlw	2
 10029  26C7  008D               	movwf	13	;volatile
 10030                           
 10031                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
 10032  26C8  018E               	clrf	14	;volatile
 10033                           
 10034                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
 10035  26C9  3022               	movlw	34
 10036  26CA  0023               	movlb	3	; select bank3
 10037  26CB  008C               	movwf	12	;volatile
 10038                           
 10039                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
 10040  26CC  018D               	clrf	13	;volatile
 10041                           
 10042                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
 10043  26CD  018E               	clrf	14	;volatile
 10044                           
 10045                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
 10046  26CE  3077               	movlw	119
 10047  26CF  0020               	movlb	0	; select bank0
 10048  26D0  008C               	movwf	12	;volatile
 10049                           
 10050                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
 10051  26D1  3007               	movlw	7
 10052  26D2  008D               	movwf	13	;volatile
 10053                           
 10054                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
 10055  26D3  300C               	movlw	12
 10056  26D4  008E               	movwf	14	;volatile
 10057  26D5  0008               	return
 10058  26D6                     __end_of_IO_Set:	
 10059                           
 10060                           	psect	text49
 10061  24BF                     __ptext49:	
 10062 ;; *************** function _IOC_Set *****************
 10063 ;; Defined at:
 10064 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;		None
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;		None
 10069 ;; Return value:  Size  Location     Type
 10070 ;;		None               void
 10071 ;; Registers used:
 10072 ;;		wreg, status,2
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;Total ram usage:        0 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; Hardware stack levels required when called:    4
 10085 ;; This function calls:
 10086 ;;		Nothing
 10087 ;; This function is called by:
 10088 ;;		_Mcu_Initialization
 10089 ;; This function uses a non-reentrant model
 10090 ;;
 10091                           
 10092                           
 10093                           ;psect for function _IOC_Set
 10094  24BF                     _IOC_Set:	
 10095                           
 10096                           ;MCU_16f1518_B1.c: 248: WPUB2=0;
 10097                           
 10098                           ;incstack = 0
 10099                           ; Regs used in _IOC_Set: [wreg+status,2]
 10100  24BF  0024               	movlb	4	; select bank4
 10101  24C0  110D               	bcf	13,2	;volatile
 10102                           
 10103                           ;MCU_16f1518_B1.c: 250: IOCBP=0b00000100;
 10104  24C1  3004               	movlw	4
 10105  24C2  0027               	movlb	7	; select bank7
 10106  24C3  0094               	movwf	20	;volatile
 10107                           
 10108                           ;MCU_16f1518_B1.c: 251: IOCBN=0b00000100;
 10109  24C4  3004               	movlw	4
 10110  24C5  0095               	movwf	21	;volatile
 10111                           
 10112                           ;MCU_16f1518_B1.c: 259: IOCBF=0b00000000;
 10113  24C6  0196               	clrf	22	;volatile
 10114                           
 10115                           ;MCU_16f1518_B1.c: 261: IOCIE=1;
 10116  24C7  158B               	bsf	11,3	;volatile
 10117                           
 10118                           ;MCU_16f1518_B1.c: 262: IOCIF=0;
 10119  24C8  100B               	bcf	11,0	;volatile
 10120                           
 10121                           ;MCU_16f1518_B1.c: 263: PEIE=1;
 10122  24C9  170B               	bsf	11,6	;volatile
 10123                           
 10124                           ;MCU_16f1518_B1.c: 264: GIE=1;
 10125  24CA  178B               	bsf	11,7	;volatile
 10126  24CB  0008               	return
 10127  24CC                     __end_of_IOC_Set:	
 10128                           
 10129                           	psect	text50
 10130  2395                     __ptext50:	
 10131 ;; *************** function _INT_Set *****************
 10132 ;; Defined at:
 10133 ;;		line 217 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;		None               void
 10140 ;; Registers used:
 10141 ;;		None
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;Total ram usage:        0 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    4
 10154 ;; This function calls:
 10155 ;;		Nothing
 10156 ;; This function is called by:
 10157 ;;		_Mcu_Initialization
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           
 10162                           ;psect for function _INT_Set
 10163  2395                     _INT_Set:	
 10164                           
 10165                           ;MCU_16f1518_B1.c: 219: WPUB0=0;
 10166                           
 10167                           ;incstack = 0
 10168                           ; Regs used in _INT_Set: []
 10169  2395  0024               	movlb	4	; select bank4
 10170  2396  100D               	bcf	13,0	;volatile
 10171                           
 10172                           ;MCU_16f1518_B1.c: 220: INTE=1;
 10173  2397  160B               	bsf	11,4	;volatile
 10174                           
 10175                           ;MCU_16f1518_B1.c: 221: PEIE=1;
 10176  2398  170B               	bsf	11,6	;volatile
 10177                           
 10178                           ;MCU_16f1518_B1.c: 222: GIE=1;
 10179  2399  178B               	bsf	11,7	;volatile
 10180  239A  0008               	return
 10181  239B                     __end_of_INT_Set:	
 10182                           
 10183                           	psect	text51
 10184  23B5                     __ptext51:	
 10185 ;; *************** function _ADC_Set *****************
 10186 ;; Defined at:
 10187 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;		None
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;		None
 10192 ;; Return value:  Size  Location     Type
 10193 ;;		None               void
 10194 ;; Registers used:
 10195 ;;		wreg
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;Total ram usage:        0 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    4
 10208 ;; This function calls:
 10209 ;;		Nothing
 10210 ;; This function is called by:
 10211 ;;		_Mcu_Initialization
 10212 ;; This function uses a non-reentrant model
 10213 ;;
 10214                           
 10215                           
 10216                           ;psect for function _ADC_Set
 10217  23B5                     _ADC_Set:	
 10218                           
 10219                           ;MCU_16f1518_B1.c: 305: ADCON1=0xf2;
 10220                           
 10221                           ;incstack = 0
 10222                           ; Regs used in _ADC_Set: [wreg]
 10223  23B5  30F2               	movlw	242
 10224  23B6  0021               	movlb	1	; select bank1
 10225  23B7  009E               	movwf	30	;volatile
 10226                           
 10227                           ;MCU_16f1518_B1.c: 306: FVRCON=0xc0;
 10228  23B8  30C0               	movlw	192
 10229  23B9  0022               	movlb	2	; select bank2
 10230  23BA  0097               	movwf	23	;volatile
 10231  23BB  0008               	return
 10232  23BC                     __end_of_ADC_Set:	
 10233                           
 10234                           	psect	text52
 10235  2449                     __ptext52:	
 10236 ;; *************** function _MainT_Initialization *****************
 10237 ;; Defined at:
 10238 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;		None
 10243 ;; Return value:  Size  Location     Type
 10244 ;;		None               void
 10245 ;; Registers used:
 10246 ;;		wreg
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        1 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    4
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_main
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           
 10267                           ;psect for function _MainT_Initialization
 10268  2449                     _MainT_Initialization:	
 10269                           
 10270                           ;main.c: 95: Product=&VarProduct;
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _MainT_Initialization: [wreg]
 10274  2449  30A0               	movlw	_VarProduct& (0+255)
 10275  244A  0020               	movlb	0	; select bank0
 10276  244B  00A0               	movwf	??_MainT_Initialization
 10277  244C  0820               	movf	??_MainT_Initialization,w
 10278  244D  00EF               	movwf	_Product
 10279                           
 10280                           ;main.c: 98: TMain=&VarTMain;
 10281  244E  30C0               	movlw	_VarTMain& (0+255)
 10282  244F  00A0               	movwf	??_MainT_Initialization
 10283  2450  0820               	movf	??_MainT_Initialization,w
 10284  2451  0021               	movlb	1	; select bank1
 10285  2452  00E9               	movwf	_TMain^(0+128)
 10286  2453  0008               	return
 10287  2454                     __end_of_MainT_Initialization:	
 10288                           
 10289                           	psect	text53
 10290  1461                     __ptext53:	
 10291 ;; *************** function _MainT *****************
 10292 ;; Defined at:
 10293 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;		None               void
 10300 ;; Registers used:
 10301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:        0 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    7
 10314 ;; This function calls:
 10315 ;;		_setBuz
 10316 ;;		_setLoad_Enable
 10317 ;;		_setRF_Enable
 10318 ;;		_setSw_Enable
 10319 ;;		_setTemp_Enable
 10320 ;; This function is called by:
 10321 ;;		_main
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           
 10326                           ;psect for function _MainT
 10327  1461                     _MainT:	
 10328                           
 10329                           ;main.c: 106: if(!TMain->PowerON)
 10330                           
 10331                           ;incstack = 0
 10332                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10333  1461  0021               	movlb	1	; select bank1
 10334  1462  0869               	movf	_TMain^(0+128),w
 10335  1463  0086               	movwf	6
 10336  1464  3001               	movlw	1	; select bank2/3
 10337  1465  0087               	movwf	7
 10338  1466  1801               	btfsc	1,0
 10339  1467  2CAC               	goto	l9930
 10340                           
 10341                           ;main.c: 107: {
 10342                           ;main.c: 108: TMain->PowerCount++;
 10343  1468  0A69               	incf	_TMain^(0+128),w
 10344  1469  0086               	movwf	6
 10345  146A  3001               	movlw	1	; select bank2/3
 10346  146B  0087               	movwf	7
 10347  146C  3001               	movlw	1
 10348  146D  0781               	addwf	1,f
 10349  146E  3141               	addfsr 1,1
 10350  146F  1803               	skipnc
 10351  1470  0A81               	incf	1,f
 10352                           
 10353                           ;main.c: 109: if(TMain->PowerCount == 150)
 10354  1471  0A69               	incf	_TMain^(0+128),w
 10355  1472  0086               	movwf	6
 10356  1473  3001               	movlw	1	; select bank2/3
 10357  1474  0087               	movwf	7
 10358  1475  3F40               	moviw [0]fsr1
 10359  1476  3A96               	xorlw	150
 10360  1477  1D03               	skipz
 10361  1478  2C7B               	goto	u9985
 10362  1479  3F41               	moviw [1]fsr1
 10363  147A  3A00               	xorlw	0
 10364  147B                     u9985:	
 10365  147B  1D03               	skipz
 10366  147C  0008               	return
 10367                           
 10368                           ;main.c: 110: {
 10369                           ;main.c: 111: TMain->PowerCount=0;
 10370  147D  0A69               	incf	_TMain^(0+128),w
 10371  147E  0086               	movwf	6
 10372  147F  3001               	movlw	1	; select bank2/3
 10373  1480  0087               	movwf	7
 10374  1481  3000               	movlw	0
 10375  1482  3FC0               	movwi [0]fsr1
 10376  1483  3FC1               	movwi [1]fsr1
 10377                           
 10378                           ;main.c: 112: TMain->PowerON=1;
 10379  1484  0869               	movf	_TMain^(0+128),w
 10380  1485  0086               	movwf	6
 10381  1486  3001               	movlw	1	; select bank2/3
 10382  1487  0087               	movwf	7
 10383  1488  1401               	bsf	1,0
 10384                           
 10385                           ;main.c: 115: setTemp_Enable(1);
 10386  1489  3001               	movlw	1
 10387  148A  31A4  243E  3194   	fcall	_setTemp_Enable
 10388                           
 10389                           ;main.c: 119: setLoad_Enable(1);
 10390  148D  3001               	movlw	1
 10391  148E  31A5  2560  3194   	fcall	_setLoad_Enable
 10392                           
 10393                           ;main.c: 125: setBuz(3,50);
 10394  1491  3032               	movlw	50
 10395  1492  0020               	movlb	0	; select bank0
 10396  1493  00A6               	movwf	setBuz@time
 10397  1494  3000               	movlw	0
 10398  1495  00A7               	movwf	setBuz@time+1
 10399  1496  3003               	movlw	3
 10400  1497  3193  23EA  3194   	fcall	_setBuz
 10401                           
 10402                           ;main.c: 126: TMain->SelfTest=1;
 10403  149A  0021               	movlb	1	; select bank1
 10404  149B  0869               	movf	_TMain^(0+128),w
 10405  149C  3E03               	addlw	3
 10406  149D  0086               	movwf	6
 10407  149E  3001               	movlw	1	; select bank2/3
 10408  149F  0087               	movwf	7
 10409  14A0  1401               	bsf	1,0
 10410                           
 10411                           ;main.c: 128: setSw_Enable(1);
 10412  14A1  3001               	movlw	1
 10413  14A2  31A7  2726  3194   	fcall	_setSw_Enable
 10414                           
 10415                           ;main.c: 131: setRF_Enable(1,1);
 10416  14A5  0020               	movlb	0	; select bank0
 10417  14A6  01A4               	clrf	setRF_Enable@command
 10418  14A7  0AA4               	incf	setRF_Enable@command,f
 10419  14A8  3001               	movlw	1
 10420  14A9  319B  2306         	fcall	_setRF_Enable
 10421                           
 10422                           ;main.c: 135: }
 10423                           ;main.c: 136: }
 10424  14AB  0008               	return
 10425  14AC                     l9930:	
 10426                           
 10427                           ;main.c: 137: else
 10428                           ;main.c: 138: {
 10429                           ;main.c: 146: TMain->Count1++;
 10430  14AC  0021               	movlb	1	; select bank1
 10431  14AD  0869               	movf	_TMain^(0+128),w
 10432  14AE  3E06               	addlw	6
 10433  14AF  0086               	movwf	6
 10434  14B0  3001               	movlw	1	; select bank2/3
 10435  14B1  0087               	movwf	7
 10436  14B2  3001               	movlw	1
 10437  14B3  0781               	addwf	1,f
 10438  14B4  3141               	addfsr 1,1
 10439  14B5  1803               	skipnc
 10440  14B6  0A81               	incf	1,f
 10441                           
 10442                           ;main.c: 147: if(TMain->Count1 == 100)
 10443  14B7  0869               	movf	_TMain^(0+128),w
 10444  14B8  3E06               	addlw	6
 10445  14B9  0086               	movwf	6
 10446  14BA  3001               	movlw	1	; select bank2/3
 10447  14BB  0087               	movwf	7
 10448  14BC  3F40               	moviw [0]fsr1
 10449  14BD  3A64               	xorlw	100
 10450  14BE  1D03               	skipz
 10451  14BF  2CC2               	goto	u9995
 10452  14C0  3F41               	moviw [1]fsr1
 10453  14C1  3A00               	xorlw	0
 10454  14C2                     u9995:	
 10455  14C2  1D03               	skipz
 10456  14C3  0008               	return
 10457                           
 10458                           ;main.c: 148: {
 10459                           ;main.c: 149: TMain->Count1=0;
 10460  14C4  0869               	movf	_TMain^(0+128),w
 10461  14C5  3E06               	addlw	6
 10462  14C6  0086               	movwf	6
 10463  14C7  3001               	movlw	1	; select bank2/3
 10464  14C8  0087               	movwf	7
 10465  14C9  3000               	movlw	0
 10466  14CA  3FC0               	movwi [0]fsr1
 10467  14CB  3FC1               	movwi [1]fsr1
 10468                           
 10469                           ;main.c: 160: if(TMain->Flag)
 10470  14CC  0869               	movf	_TMain^(0+128),w
 10471  14CD  0086               	movwf	6
 10472  14CE  3001               	movlw	1	; select bank2/3
 10473  14CF  0087               	movwf	7
 10474  14D0  1981               	btfsc	1,3
 10475  14D1  0008               	return
 10476                           
 10477                           ;main.c: 170: else
 10478                           ;main.c: 171: {
 10479                           ;main.c: 172: TMain->Flag=1;
 10480                           
 10481                           ;main.c: 161: {
 10482                           ;main.c: 169: }
 10483  14D2  0869               	movf	_TMain^(0+128),w
 10484  14D3  0086               	movwf	6
 10485  14D4  3001               	movlw	1	; select bank2/3
 10486  14D5  0087               	movwf	7
 10487  14D6  1581               	bsf	1,3
 10488  14D7  0008               	return
 10489  14D8                     __end_of_MainT:	
 10490                           
 10491                           	psect	text54
 10492  243E                     __ptext54:	
 10493 ;; *************** function _setTemp_Enable *****************
 10494 ;; Defined at:
 10495 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;  command         1    wreg     unsigned char 
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  command         1    0[BANK0 ] unsigned char 
 10500 ;; Return value:  Size  Location     Type
 10501 ;;		None               void
 10502 ;; Registers used:
 10503 ;;		wreg, fsr1l, fsr1h
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;Total ram usage:        1 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    4
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_MainT
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _setTemp_Enable
 10525  243E                     _setTemp_Enable:	
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _setTemp_Enable: [wregfsr1]
 10529                           ;setTemp_Enable@command stored from wreg
 10530  243E  0020               	movlb	0	; select bank0
 10531  243F  00A0               	movwf	setTemp_Enable@command
 10532                           
 10533                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 10534  2440  087D               	movf	_Temp,w
 10535  2441  0086               	movwf	6
 10536  2442  3001               	movlw	1	; select bank2/3
 10537  2443  0087               	movwf	7
 10538  2444  0820               	movf	setTemp_Enable@command,w
 10539  2445  1001               	bcf	1,0
 10540  2446  1D03               	skipz
 10541  2447  1401               	bsf	1,0
 10542  2448  0008               	return
 10543  2449                     __end_of_setTemp_Enable:	
 10544                           
 10545                           	psect	text55
 10546  2560                     __ptext55:	
 10547 ;; *************** function _setLoad_Enable *****************
 10548 ;; Defined at:
 10549 ;;		line 255 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;  command         1    wreg     unsigned char 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;  command         1    0[BANK0 ] unsigned char 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;		None               void
 10556 ;; Registers used:
 10557 ;;		wreg, fsr1l, fsr1h
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:        1 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    4
 10570 ;; This function calls:
 10571 ;;		Nothing
 10572 ;; This function is called by:
 10573 ;;		_MainT
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           
 10578                           ;psect for function _setLoad_Enable
 10579  2560                     _setLoad_Enable:	
 10580                           
 10581                           ;incstack = 0
 10582                           ; Regs used in _setLoad_Enable: [wregfsr1]
 10583                           ;setLoad_Enable@command stored from wreg
 10584  2560  0020               	movlb	0	; select bank0
 10585  2561  00A0               	movwf	setLoad_Enable@command
 10586                           
 10587                           ;OverLoad_B1.c: 257: Load->Enable=command;
 10588  2562  086E               	movf	_Load,w
 10589  2563  0086               	movwf	6
 10590  2564  3002               	movlw	2	; select bank4/5
 10591  2565  0087               	movwf	7
 10592  2566  0820               	movf	setLoad_Enable@command,w
 10593  2567  1001               	bcf	1,0
 10594  2568  1D03               	skipz
 10595  2569  1401               	bsf	1,0
 10596                           
 10597                           ;OverLoad_B1.c: 258: Load->GO=0;
 10598  256A  086E               	movf	_Load,w
 10599  256B  0086               	movwf	6
 10600  256C  3002               	movlw	2	; select bank4/5
 10601  256D  0087               	movwf	7
 10602  256E  1081               	bcf	1,1
 10603  256F  0008               	return
 10604  2570                     __end_of_setLoad_Enable:	
 10605                           
 10606                           	psect	text56
 10607  03A4                     __ptext56:	
 10608 ;; *************** function _Load_Main *****************
 10609 ;; Defined at:
 10610 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;		None
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;  i               1   17[BANK0 ] unsigned char 
 10615 ;; Return value:  Size  Location     Type
 10616 ;;		None               void
 10617 ;; Registers used:
 10618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;Total ram usage:        5 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    9
 10631 ;; This function calls:
 10632 ;;		___lwdiv
 10633 ;;		___wmul
 10634 ;;		_getPF_Safe
 10635 ;;		_getTemp_Safe
 10636 ;;		_setDimmerLights_Clear
 10637 ;;		_setLoad_AH_AL_Restore
 10638 ;;		_setLoad_Exceptions
 10639 ;; This function is called by:
 10640 ;;		_main
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644                           
 10645                           ;psect for function _Load_Main
 10646  03A4                     _Load_Main:	
 10647                           
 10648                           ;OverLoad_B1.c: 47: char i;
 10649                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10653  03A4  0020               	movlb	0	; select bank0
 10654  03A5  086E               	movf	_Load,w
 10655  03A6  0086               	movwf	6
 10656  03A7  3002               	movlw	2	; select bank4/5
 10657  03A8  0087               	movwf	7
 10658  03A9  1E81               	btfss	1,5
 10659  03AA  2BD1               	goto	l9974
 10660                           
 10661                           ;OverLoad_B1.c: 49: {
 10662                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 10663  03AB  086E               	movf	_Load,w
 10664  03AC  3E03               	addlw	3
 10665  03AD  0086               	movwf	6
 10666  03AE  3002               	movlw	2	; select bank4/5
 10667  03AF  0087               	movwf	7
 10668  03B0  3001               	movlw	1
 10669  03B1  0781               	addwf	1,f
 10670  03B2  3141               	addfsr 1,1
 10671  03B3  1803               	skipnc
 10672  03B4  0A81               	incf	1,f
 10673                           
 10674                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 10675  03B5  086E               	movf	_Load,w
 10676  03B6  3E03               	addlw	3
 10677  03B7  0086               	movwf	6
 10678  03B8  3002               	movlw	2	; select bank4/5
 10679  03B9  0087               	movwf	7
 10680  03BA  3F40               	moviw [0]fsr1
 10681  03BB  00AD               	movwf	??_Load_Main
 10682  03BC  3F41               	moviw [1]fsr1
 10683  03BD  00AE               	movwf	??_Load_Main+1
 10684  03BE  3003               	movlw	3
 10685  03BF  022E               	subwf	??_Load_Main+1,w
 10686  03C0  30E8               	movlw	232
 10687  03C1  1903               	skipnz
 10688  03C2  022D               	subwf	??_Load_Main,w
 10689  03C3  1C03               	skipc
 10690  03C4  0008               	return
 10691                           
 10692                           ;OverLoad_B1.c: 52: {
 10693                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 10694  03C5  086E               	movf	_Load,w
 10695  03C6  3E03               	addlw	3
 10696  03C7  0086               	movwf	6
 10697  03C8  3002               	movlw	2	; select bank4/5
 10698  03C9  0087               	movwf	7
 10699  03CA  3000               	movlw	0
 10700  03CB  3FC0               	movwi [0]fsr1
 10701  03CC  3FC1               	movwi [1]fsr1
 10702                           
 10703                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 10704  03CD  3000               	movlw	0
 10705  03CE  319C  24B8         	fcall	_setLoad_Exceptions
 10706                           
 10707                           ;OverLoad_B1.c: 55: }
 10708                           ;OverLoad_B1.c: 56: }
 10709  03D0  0008               	return
 10710  03D1                     l9974:	
 10711                           
 10712                           ;OverLoad_B1.c: 57: else
 10713                           ;OverLoad_B1.c: 58: {
 10714                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 10715  03D1  0020               	movlb	0	; select bank0
 10716  03D2  086E               	movf	_Load,w
 10717  03D3  0086               	movwf	6
 10718  03D4  3002               	movlw	2	; select bank4/5
 10719  03D5  0087               	movwf	7
 10720  03D6  1E01               	btfss	1,4
 10721  03D7  2DD7               	goto	l10056
 10722                           
 10723                           ;OverLoad_B1.c: 60: {
 10724                           ;OverLoad_B1.c: 61: Load->Time++;
 10725  03D8  0A6E               	incf	_Load,w
 10726  03D9  0086               	movwf	6
 10727  03DA  3002               	movlw	2	; select bank4/5
 10728  03DB  0087               	movwf	7
 10729  03DC  3001               	movlw	1
 10730  03DD  0781               	addwf	1,f
 10731  03DE  3141               	addfsr 1,1
 10732  03DF  1803               	skipnc
 10733  03E0  0A81               	incf	1,f
 10734                           
 10735                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 10736  03E1  0A6E               	incf	_Load,w
 10737  03E2  0086               	movwf	6
 10738  03E3  3002               	movlw	2	; select bank4/5
 10739  03E4  0087               	movwf	7
 10740  03E5  3F40               	moviw [0]fsr1
 10741  03E6  00AD               	movwf	??_Load_Main
 10742  03E7  3F41               	moviw [1]fsr1
 10743  03E8  00AE               	movwf	??_Load_Main+1
 10744  03E9  3000               	movlw	0
 10745  03EA  022E               	subwf	??_Load_Main+1,w
 10746  03EB  3005               	movlw	5
 10747  03EC  1903               	skipnz
 10748  03ED  022D               	subwf	??_Load_Main,w
 10749  03EE  1C03               	skipc
 10750  03EF  0008               	return
 10751                           
 10752                           ;OverLoad_B1.c: 63: {
 10753                           ;OverLoad_B1.c: 64: Load->Time=0;
 10754  03F0  0A6E               	incf	_Load,w
 10755  03F1  0086               	movwf	6
 10756  03F2  3002               	movlw	2	; select bank4/5
 10757  03F3  0087               	movwf	7
 10758  03F4  3000               	movlw	0
 10759  03F5  3FC0               	movwi [0]fsr1
 10760  03F6  3FC1               	movwi [1]fsr1
 10761                           
 10762                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 10763  03F7  086E               	movf	_Load,w
 10764  03F8  0086               	movwf	6
 10765  03F9  3002               	movlw	2	; select bank4/5
 10766  03FA  0087               	movwf	7
 10767  03FB  1201               	bcf	1,4
 10768                           
 10769                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 10770  03FC  086E               	movf	_Load,w
 10771  03FD  3E45               	addlw	69
 10772  03FE  0086               	movwf	6
 10773  03FF  3002               	movlw	2	; select bank4/5
 10774  0400  0087               	movwf	7
 10775  0401  086E               	movf	_Load,w
 10776  0402  3E44               	addlw	68
 10777  0403  0084               	movwf	4
 10778  0404  3002               	movlw	2	; select bank4/5
 10779  0405  0085               	movwf	5
 10780  0406  0800               	movf	0,w
 10781  0407  00AD               	movwf	??_Load_Main
 10782  0408  086E               	movf	_Load,w
 10783  0409  3E43               	addlw	67
 10784  040A  0084               	movwf	4
 10785  040B  3002               	movlw	2	; select bank4/5
 10786  040C  0085               	movwf	5
 10787  040D  0800               	movf	0,w
 10788  040E  072D               	addwf	??_Load_Main,w
 10789  040F  0701               	addwf	1,w
 10790  0410  00AE               	movwf	??_Load_Main+1
 10791  0411  086E               	movf	_Load,w
 10792  0412  3E3E               	addlw	62
 10793  0413  0086               	movwf	6
 10794  0414  3002               	movlw	2	; select bank4/5
 10795  0415  0087               	movwf	7
 10796  0416  082E               	movf	??_Load_Main+1,w
 10797  0417  0081               	movwf	1
 10798                           
 10799                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 10800  0418  01B1               	clrf	Load_Main@i
 10801  0419  0AB1               	incf	Load_Main@i,f
 10802  041A  3004               	movlw	4
 10803  041B  0231               	subwf	Load_Main@i,w
 10804  041C  1803               	btfsc	3,0
 10805  041D  2C4C               	goto	l9996
 10806  041E                     l9990:	
 10807                           
 10808                           ;OverLoad_B1.c: 68: {
 10809                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 10810  041E  3531               	lslf	Load_Main@i,w
 10811  041F  3E08               	addlw	8
 10812  0420  076E               	addwf	_Load,w
 10813  0421  00AD               	movwf	??_Load_Main
 10814  0422  082D               	movf	??_Load_Main,w
 10815  0423  0086               	movwf	6
 10816  0424  3002               	movlw	2	; select bank4/5
 10817  0425  0087               	movwf	7
 10818  0426  086E               	movf	_Load,w
 10819  0427  3E2E               	addlw	46
 10820  0428  0084               	movwf	4
 10821  0429  3002               	movlw	2	; select bank4/5
 10822  042A  0085               	movwf	5
 10823  042B  3F40               	moviw [0]fsr1
 10824  042C  0780               	addwf	0,f
 10825  042D  3101               	addfsr 0,1
 10826  042E  3F41               	moviw [1]fsr1
 10827  042F  3D80               	addwfc	0,f
 10828  0430  313F               	addfsr 0,-1
 10829                           
 10830                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 10831  0431  3531               	lslf	Load_Main@i,w
 10832  0432  3E1A               	addlw	26
 10833  0433  076E               	addwf	_Load,w
 10834  0434  00AD               	movwf	??_Load_Main
 10835  0435  082D               	movf	??_Load_Main,w
 10836  0436  0086               	movwf	6
 10837  0437  3002               	movlw	2	; select bank4/5
 10838  0438  0087               	movwf	7
 10839  0439  086E               	movf	_Load,w
 10840  043A  3E30               	addlw	48
 10841  043B  0084               	movwf	4
 10842  043C  3002               	movlw	2	; select bank4/5
 10843  043D  0085               	movwf	5
 10844  043E  3F40               	moviw [0]fsr1
 10845  043F  0780               	addwf	0,f
 10846  0440  3101               	addfsr 0,1
 10847  0441  3F41               	moviw [1]fsr1
 10848  0442  3D80               	addwfc	0,f
 10849  0443  313F               	addfsr 0,-1
 10850  0444  3001               	movlw	1
 10851  0445  00AD               	movwf	??_Load_Main
 10852  0446  082D               	movf	??_Load_Main,w
 10853  0447  07B1               	addwf	Load_Main@i,f
 10854  0448  3004               	movlw	4
 10855  0449  0231               	subwf	Load_Main@i,w
 10856  044A  1C03               	skipc
 10857  044B  2C1E               	goto	l9990
 10858  044C                     l9996:	
 10859                           
 10860                           ;OverLoad_B1.c: 71: }
 10861                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 10862  044C  3003               	movlw	3
 10863  044D  00A0               	movwf	___lwdiv@divisor
 10864  044E  3000               	movlw	0
 10865  044F  00A1               	movwf	___lwdiv@divisor+1
 10866  0450  086E               	movf	_Load,w
 10867  0451  3E2E               	addlw	46
 10868  0452  0086               	movwf	6
 10869  0453  3002               	movlw	2	; select bank4/5
 10870  0454  0087               	movwf	7
 10871  0455  3F40               	moviw [0]fsr1
 10872  0456  00A2               	movwf	___lwdiv@dividend
 10873  0457  3F41               	moviw [1]fsr1
 10874  0458  00A3               	movwf	___lwdiv@dividend+1
 10875  0459  319B  233C  3183   	fcall	___lwdiv
 10876  045C  0020               	movlb	0	; select bank0
 10877  045D  086E               	movf	_Load,w
 10878  045E  3E2E               	addlw	46
 10879  045F  0086               	movwf	6
 10880  0460  3002               	movlw	2	; select bank4/5
 10881  0461  0087               	movwf	7
 10882  0462  0820               	movf	?___lwdiv,w
 10883  0463  3FC0               	movwi [0]fsr1
 10884  0464  0821               	movf	?___lwdiv+1,w
 10885  0465  3FC1               	movwi [1]fsr1
 10886                           
 10887                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 10888  0466  3003               	movlw	3
 10889  0467  00A0               	movwf	___lwdiv@divisor
 10890  0468  3000               	movlw	0
 10891  0469  00A1               	movwf	___lwdiv@divisor+1
 10892  046A  086E               	movf	_Load,w
 10893  046B  3E30               	addlw	48
 10894  046C  0086               	movwf	6
 10895  046D  3002               	movlw	2	; select bank4/5
 10896  046E  0087               	movwf	7
 10897  046F  3F40               	moviw [0]fsr1
 10898  0470  00A2               	movwf	___lwdiv@dividend
 10899  0471  3F41               	moviw [1]fsr1
 10900  0472  00A3               	movwf	___lwdiv@dividend+1
 10901  0473  319B  233C  3183   	fcall	___lwdiv
 10902  0476  0020               	movlb	0	; select bank0
 10903  0477  086E               	movf	_Load,w
 10904  0478  3E30               	addlw	48
 10905  0479  0086               	movwf	6
 10906  047A  3002               	movlw	2	; select bank4/5
 10907  047B  0087               	movwf	7
 10908  047C  0820               	movf	?___lwdiv,w
 10909  047D  3FC0               	movwi [0]fsr1
 10910  047E  0821               	movf	?___lwdiv+1,w
 10911  047F  3FC1               	movwi [1]fsr1
 10912                           
 10913                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 10914  0480  086E               	movf	_Load,w
 10915  0481  3E2E               	addlw	46
 10916  0482  0086               	movwf	6
 10917  0483  3002               	movlw	2	; select bank4/5
 10918  0484  0087               	movwf	7
 10919  0485  3F40               	moviw [0]fsr1
 10920  0486  00AD               	movwf	??_Load_Main
 10921  0487  3F41               	moviw [1]fsr1
 10922  0488  00AE               	movwf	??_Load_Main+1
 10923  0489  086E               	movf	_Load,w
 10924  048A  3E30               	addlw	48
 10925  048B  0086               	movwf	6
 10926  048C  3002               	movlw	2	; select bank4/5
 10927  048D  0087               	movwf	7
 10928  048E  3F40               	moviw [0]fsr1
 10929  048F  00AF               	movwf	??_Load_Main+2
 10930  0490  3F41               	moviw [1]fsr1
 10931  0491  00B0               	movwf	??_Load_Main+3
 10932  0492  082E               	movf	??_Load_Main+1,w
 10933  0493  0230               	subwf	??_Load_Main+3,w
 10934  0494  1D03               	skipz
 10935  0495  2C98               	goto	u10115
 10936  0496  082D               	movf	??_Load_Main,w
 10937  0497  022F               	subwf	??_Load_Main+2,w
 10938  0498                     u10115:	
 10939  0498  1803               	skipnc
 10940  0499  2DD4               	goto	l10054
 10941                           
 10942                           ;OverLoad_B1.c: 75: {
 10943                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 10944  049A  086E               	movf	_Load,w
 10945  049B  3E2E               	addlw	46
 10946  049C  0086               	movwf	6
 10947  049D  3002               	movlw	2	; select bank4/5
 10948  049E  0087               	movwf	7
 10949  049F  086E               	movf	_Load,w
 10950  04A0  3E30               	addlw	48
 10951  04A1  0084               	movwf	4
 10952  04A2  3002               	movlw	2	; select bank4/5
 10953  04A3  0085               	movwf	5
 10954  04A4  3F00               	moviw [0]fsr0
 10955  04A5  00AD               	movwf	??_Load_Main
 10956  04A6  3F01               	moviw [1]fsr0
 10957  04A7  00AE               	movwf	??_Load_Main+1
 10958  04A8  09AD               	comf	??_Load_Main,f
 10959  04A9  09AE               	comf	??_Load_Main+1,f
 10960  04AA  0AAD               	incf	??_Load_Main,f
 10961  04AB  1903               	skipnz
 10962  04AC  0AAE               	incf	??_Load_Main+1,f
 10963  04AD  3F40               	moviw [0]fsr1
 10964  04AE  072D               	addwf	??_Load_Main,w
 10965  04AF  00AF               	movwf	??_Load_Main+2
 10966  04B0  3F41               	moviw [1]fsr1
 10967  04B1  3D2E               	addwfc	??_Load_Main+1,w
 10968  04B2  00B0               	movwf	??_Load_Main+3
 10969  04B3  086E               	movf	_Load,w
 10970  04B4  3E2C               	addlw	44
 10971  04B5  0086               	movwf	6
 10972  04B6  3002               	movlw	2	; select bank4/5
 10973  04B7  0087               	movwf	7
 10974  04B8  082F               	movf	??_Load_Main+2,w
 10975  04B9  3FC0               	movwi [0]fsr1
 10976  04BA  0830               	movf	??_Load_Main+3,w
 10977  04BB  3FC1               	movwi [1]fsr1
 10978                           
 10979                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 10980  04BC  086E               	movf	_Load,w
 10981  04BD  3E3A               	addlw	58
 10982  04BE  0086               	movwf	6
 10983  04BF  3002               	movlw	2	; select bank4/5
 10984  04C0  0087               	movwf	7
 10985  04C1  3002               	movlw	2
 10986  04C2  0201               	subwf	1,w
 10987  04C3  1803               	skipnc
 10988  04C4  2D15               	goto	l10018
 10989                           
 10990                           ;OverLoad_B1.c: 79: {
 10991                           ;OverLoad_B1.c: 80: Load->Count++;
 10992  04C5  3001               	movlw	1
 10993  04C6  00AD               	movwf	??_Load_Main
 10994  04C7  086E               	movf	_Load,w
 10995  04C8  3E3A               	addlw	58
 10996  04C9  0086               	movwf	6
 10997  04CA  3002               	movlw	2	; select bank4/5
 10998  04CB  0087               	movwf	7
 10999  04CC  082D               	movf	??_Load_Main,w
 11000  04CD  0781               	addwf	1,f
 11001                           
 11002                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11003  04CE  086E               	movf	_Load,w
 11004  04CF  3E3A               	addlw	58
 11005  04D0  0086               	movwf	6
 11006  04D1  3002               	movlw	2	; select bank4/5
 11007  04D2  0087               	movwf	7
 11008  04D3  0801               	movf	1,w
 11009  04D4  3A01               	xorlw	1
 11010  04D5  1D03               	skipz
 11011  04D6  2CE1               	goto	l10010
 11012                           
 11013                           ;OverLoad_B1.c: 82: {
 11014                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11015  04D7  086E               	movf	_Load,w
 11016  04D8  3E36               	addlw	54
 11017  04D9  0086               	movwf	6
 11018  04DA  3002               	movlw	2	; select bank4/5
 11019  04DB  0087               	movwf	7
 11020  04DC  30F4               	movlw	244
 11021  04DD  3FC0               	movwi [0]fsr1
 11022  04DE  3001               	movlw	1
 11023  04DF  3FC1               	movwi [1]fsr1
 11024                           
 11025                           ;OverLoad_B1.c: 84: }
 11026  04E0  2D15               	goto	l10018
 11027  04E1                     l10010:	
 11028                           
 11029                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11030  04E1  086E               	movf	_Load,w
 11031  04E2  3E3A               	addlw	58
 11032  04E3  0086               	movwf	6
 11033  04E4  3002               	movlw	2	; select bank4/5
 11034  04E5  0087               	movwf	7
 11035  04E6  0801               	movf	1,w
 11036  04E7  3A02               	xorlw	2
 11037  04E8  1D03               	skipz
 11038  04E9  2D15               	goto	l10018
 11039                           
 11040                           ;OverLoad_B1.c: 86: {
 11041                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11042  04EA  086E               	movf	_Load,w
 11043  04EB  3E3E               	addlw	62
 11044  04EC  0086               	movwf	6
 11045  04ED  3002               	movlw	2	; select bank4/5
 11046  04EE  0087               	movwf	7
 11047  04EF  0801               	movf	1,w
 11048  04F0  3A01               	xorlw	1
 11049  04F1  1D03               	skipz
 11050  04F2  2CFD               	goto	l10016
 11051                           
 11052                           ;OverLoad_B1.c: 88: {
 11053                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
 11054  04F3  086E               	movf	_Load,w
 11055  04F4  3E36               	addlw	54
 11056  04F5  0086               	movwf	6
 11057  04F6  3002               	movlw	2	; select bank4/5
 11058  04F7  0087               	movwf	7
 11059  04F8  3032               	movlw	50
 11060  04F9  3FC0               	movwi [0]fsr1
 11061  04FA  3000               	movlw	0
 11062  04FB  3FC1               	movwi [1]fsr1
 11063                           
 11064                           ;OverLoad_B1.c: 90: }
 11065  04FC  2D15               	goto	l10018
 11066  04FD                     l10016:	
 11067                           
 11068                           ;OverLoad_B1.c: 91: else
 11069                           ;OverLoad_B1.c: 92: {
 11070                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
 11071  04FD  086E               	movf	_Load,w
 11072  04FE  3E06               	addlw	6
 11073  04FF  0086               	movwf	6
 11074  0500  3002               	movlw	2	; select bank4/5
 11075  0501  0087               	movwf	7
 11076  0502  3F40               	moviw [0]fsr1
 11077  0503  00AD               	movwf	??_Load_Main
 11078  0504  3F41               	moviw [1]fsr1
 11079  0505  00AE               	movwf	??_Load_Main+1
 11080  0506  082D               	movf	??_Load_Main,w
 11081  0507  3E2A               	addlw	42
 11082  0508  00AF               	movwf	??_Load_Main+2
 11083  0509  3000               	movlw	0
 11084  050A  3D2E               	addwfc	??_Load_Main+1,w
 11085  050B  00B0               	movwf	??_Load_Main+3
 11086  050C  086E               	movf	_Load,w
 11087  050D  3E36               	addlw	54
 11088  050E  0086               	movwf	6
 11089  050F  3002               	movlw	2	; select bank4/5
 11090  0510  0087               	movwf	7
 11091  0511  082F               	movf	??_Load_Main+2,w
 11092  0512  3FC0               	movwi [0]fsr1
 11093  0513  0830               	movf	??_Load_Main+3,w
 11094  0514  3FC1               	movwi [1]fsr1
 11095  0515                     l10018:	
 11096                           
 11097                           ;OverLoad_B1.c: 94: }
 11098                           ;OverLoad_B1.c: 95: }
 11099                           ;OverLoad_B1.c: 96: }
 11100                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11101  0515  086E               	movf	_Load,w
 11102  0516  3E36               	addlw	54
 11103  0517  0086               	movwf	6
 11104  0518  3002               	movlw	2	; select bank4/5
 11105  0519  0087               	movwf	7
 11106  051A  3F40               	moviw [0]fsr1
 11107  051B  00AD               	movwf	??_Load_Main
 11108  051C  3F41               	moviw [1]fsr1
 11109  051D  00AE               	movwf	??_Load_Main+1
 11110  051E  086E               	movf	_Load,w
 11111  051F  3E2C               	addlw	44
 11112  0520  0086               	movwf	6
 11113  0521  3002               	movlw	2	; select bank4/5
 11114  0522  0087               	movwf	7
 11115  0523  3F40               	moviw [0]fsr1
 11116  0524  00AF               	movwf	??_Load_Main+2
 11117  0525  3F41               	moviw [1]fsr1
 11118  0526  00B0               	movwf	??_Load_Main+3
 11119  0527  082E               	movf	??_Load_Main+1,w
 11120  0528  0230               	subwf	??_Load_Main+3,w
 11121  0529  1D03               	skipz
 11122  052A  2D2D               	goto	u10165
 11123  052B  082D               	movf	??_Load_Main,w
 11124  052C  022F               	subwf	??_Load_Main+2,w
 11125  052D                     u10165:	
 11126  052D  1C03               	skipc
 11127  052E  2D4C               	goto	l10028
 11128                           
 11129                           ;OverLoad_B1.c: 99: {
 11130                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11131  052F  3001               	movlw	1
 11132  0530  00AD               	movwf	??_Load_Main
 11133  0531  086E               	movf	_Load,w
 11134  0532  3E3C               	addlw	60
 11135  0533  0086               	movwf	6
 11136  0534  3002               	movlw	2	; select bank4/5
 11137  0535  0087               	movwf	7
 11138  0536  082D               	movf	??_Load_Main,w
 11139  0537  0781               	addwf	1,f
 11140                           
 11141                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11142  0538  086E               	movf	_Load,w
 11143  0539  3E3C               	addlw	60
 11144  053A  0086               	movwf	6
 11145  053B  3002               	movlw	2	; select bank4/5
 11146  053C  0087               	movwf	7
 11147  053D  3003               	movlw	3
 11148  053E  0201               	subwf	1,w
 11149  053F  1C03               	skipc
 11150  0540  2DD4               	goto	l10054
 11151                           
 11152                           ;OverLoad_B1.c: 102: {
 11153                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11154  0541  086E               	movf	_Load,w
 11155  0542  3E3C               	addlw	60
 11156  0543  0086               	movwf	6
 11157  0544  3002               	movlw	2	; select bank4/5
 11158  0545  0087               	movwf	7
 11159  0546  0181               	clrf	1
 11160                           
 11161                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11162  0547  3001               	movlw	1
 11163  0548  319C  24B8  3183   	fcall	_setLoad_Exceptions
 11164                           
 11165                           ;OverLoad_B1.c: 113: }
 11166                           ;OverLoad_B1.c: 114: }
 11167  054B  2DD4               	goto	l10054
 11168  054C                     l10028:	
 11169                           
 11170                           ;OverLoad_B1.c: 115: else
 11171                           ;OverLoad_B1.c: 116: {
 11172                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11173  054C  0020               	movlb	0	; select bank0
 11174  054D  086E               	movf	_Load,w
 11175  054E  3E3C               	addlw	60
 11176  054F  0086               	movwf	6
 11177  0550  3002               	movlw	2	; select bank4/5
 11178  0551  0087               	movwf	7
 11179  0552  0181               	clrf	1
 11180                           
 11181                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11182  0553  086E               	movf	_Load,w
 11183  0554  3E42               	addlw	66
 11184  0555  0086               	movwf	6
 11185  0556  3002               	movlw	2	; select bank4/5
 11186  0557  0087               	movwf	7
 11187  0558  300A               	movlw	10
 11188  0559  0201               	subwf	1,w
 11189  055A  1803               	skipnc
 11190  055B  2D65               	goto	l10034
 11191                           
 11192                           ;OverLoad_B1.c: 119: {
 11193                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11194  055C  3001               	movlw	1
 11195  055D  00AD               	movwf	??_Load_Main
 11196  055E  086E               	movf	_Load,w
 11197  055F  3E42               	addlw	66
 11198  0560  0086               	movwf	6
 11199  0561  3002               	movlw	2	; select bank4/5
 11200  0562  0087               	movwf	7
 11201  0563  082D               	movf	??_Load_Main,w
 11202  0564  0781               	addwf	1,f
 11203  0565                     l10034:	
 11204                           
 11205                           ;OverLoad_B1.c: 121: }
 11206                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11207  0565  086E               	movf	_Load,w
 11208  0566  3E42               	addlw	66
 11209  0567  0086               	movwf	6
 11210  0568  3002               	movlw	2	; select bank4/5
 11211  0569  0087               	movwf	7
 11212  056A  300A               	movlw	10
 11213  056B  0201               	subwf	1,w
 11214  056C  1C03               	skipc
 11215  056D  2DD4               	goto	l10054
 11216                           
 11217                           ;OverLoad_B1.c: 123: {
 11218                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11219  056E  086E               	movf	_Load,w
 11220  056F  0086               	movwf	6
 11221  0570  3002               	movlw	2	; select bank4/5
 11222  0571  0087               	movwf	7
 11223  0572  1581               	bsf	1,3
 11224                           
 11225                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 11226  0573  01A2               	clrf	setDimmerLights_Clear@command
 11227  0574  0AA2               	incf	setDimmerLights_Clear@command,f
 11228  0575  3001               	movlw	1
 11229  0576  31A5  2550  3183   	fcall	_setDimmerLights_Clear
 11230                           
 11231                           ;OverLoad_B1.c: 131: setDimmerLights_Clear(2,1);
 11232  0579  0020               	movlb	0	; select bank0
 11233  057A  01A2               	clrf	setDimmerLights_Clear@command
 11234  057B  0AA2               	incf	setDimmerLights_Clear@command,f
 11235  057C  3002               	movlw	2
 11236  057D  31A5  2550  3183   	fcall	_setDimmerLights_Clear
 11237                           
 11238                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 11239  0580  0020               	movlb	0	; select bank0
 11240  0581  086E               	movf	_Load,w
 11241  0582  3E46               	addlw	70
 11242  0583  0086               	movwf	6
 11243  0584  3002               	movlw	2	; select bank4/5
 11244  0585  0087               	movwf	7
 11245  0586  1C01               	btfss	1,0
 11246  0587  2D9C               	goto	l10046
 11247                           
 11248                           ;OverLoad_B1.c: 139: {
 11249                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 11250  0588  086E               	movf	_Load,w
 11251  0589  3E46               	addlw	70
 11252  058A  0086               	movwf	6
 11253  058B  3002               	movlw	2	; select bank4/5
 11254  058C  0087               	movwf	7
 11255  058D  1001               	bcf	1,0
 11256                           
 11257                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 11258  058E  086E               	movf	_Load,w
 11259  058F  3E2C               	addlw	44
 11260  0590  0086               	movwf	6
 11261  0591  3002               	movlw	2	; select bank4/5
 11262  0592  0087               	movwf	7
 11263  0593  086E               	movf	_Load,w
 11264  0594  3E06               	addlw	6
 11265  0595  0084               	movwf	4
 11266  0596  3002               	movlw	2	; select bank4/5
 11267  0597  0085               	movwf	5
 11268  0598  3F40               	moviw [0]fsr1
 11269  0599  3F80               	movwi [0]fsr0
 11270  059A  3F41               	moviw [1]fsr1
 11271  059B  3F81               	movwi [1]fsr0
 11272  059C                     l10046:	
 11273                           
 11274                           ;OverLoad_B1.c: 143: }
 11275                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 11276  059C  086E               	movf	_Load,w
 11277  059D  3E46               	addlw	70
 11278  059E  0086               	movwf	6
 11279  059F  3002               	movlw	2	; select bank4/5
 11280  05A0  0087               	movwf	7
 11281  05A1  1C81               	btfss	1,1
 11282  05A2  2DD4               	goto	l10054
 11283                           
 11284                           ;OverLoad_B1.c: 146: {
 11285                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 11286  05A3  086E               	movf	_Load,w
 11287  05A4  3E46               	addlw	70
 11288  05A5  0086               	movwf	6
 11289  05A6  3002               	movlw	2	; select bank4/5
 11290  05A7  0087               	movwf	7
 11291  05A8  1081               	bcf	1,1
 11292                           
 11293                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 11294  05A9  086E               	movf	_Load,w
 11295  05AA  3E2C               	addlw	44
 11296  05AB  0086               	movwf	6
 11297  05AC  3002               	movlw	2	; select bank4/5
 11298  05AD  0087               	movwf	7
 11299  05AE  086E               	movf	_Load,w
 11300  05AF  3E06               	addlw	6
 11301  05B0  0084               	movwf	4
 11302  05B1  3002               	movlw	2	; select bank4/5
 11303  05B2  0085               	movwf	5
 11304  05B3  3F40               	moviw [0]fsr1
 11305  05B4  3F80               	movwi [0]fsr0
 11306  05B5  3F41               	moviw [1]fsr1
 11307  05B6  3F81               	movwi [1]fsr0
 11308                           
 11309                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x32*Load->LightsCount;
 11310  05B7  086E               	movf	_Load,w
 11311  05B8  3E3E               	addlw	62
 11312  05B9  0086               	movwf	6
 11313  05BA  3002               	movlw	2	; select bank4/5
 11314  05BB  0087               	movwf	7
 11315  05BC  0801               	movf	1,w
 11316  05BD  00AD               	movwf	??_Load_Main
 11317  05BE  01AE               	clrf	??_Load_Main+1
 11318  05BF  082D               	movf	??_Load_Main,w
 11319  05C0  00A0               	movwf	___wmul@multiplier
 11320  05C1  082E               	movf	??_Load_Main+1,w
 11321  05C2  00A1               	movwf	___wmul@multiplier+1
 11322  05C3  3032               	movlw	50
 11323  05C4  00A2               	movwf	___wmul@multiplicand
 11324  05C5  3000               	movlw	0
 11325  05C6  00A3               	movwf	___wmul@multiplicand+1
 11326  05C7  31A7  275F  3183   	fcall	___wmul
 11327  05CA  0020               	movlb	0	; select bank0
 11328  05CB  086E               	movf	_Load,w
 11329  05CC  3E36               	addlw	54
 11330  05CD  0086               	movwf	6
 11331  05CE  3002               	movlw	2	; select bank4/5
 11332  05CF  0087               	movwf	7
 11333  05D0  0820               	movf	?___wmul,w
 11334  05D1  3FC0               	movwi [0]fsr1
 11335  05D2  0821               	movf	?___wmul+1,w
 11336  05D3  3FC1               	movwi [1]fsr1
 11337  05D4                     l10054:	
 11338                           
 11339                           ;OverLoad_B1.c: 150: }
 11340                           ;OverLoad_B1.c: 151: }
 11341                           ;OverLoad_B1.c: 152: }
 11342                           ;OverLoad_B1.c: 153: }
 11343                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 11344  05D4  3198  207C         	fcall	_setLoad_AH_AL_Restore
 11345                           
 11346                           ;OverLoad_B1.c: 166: }
 11347                           ;OverLoad_B1.c: 167: }
 11348  05D6  0008               	return
 11349  05D7                     l10056:	
 11350                           
 11351                           ;OverLoad_B1.c: 168: else
 11352                           ;OverLoad_B1.c: 169: {
 11353                           ;OverLoad_B1.c: 170: if(Load->GO)
 11354  05D7  0020               	movlb	0	; select bank0
 11355  05D8  086E               	movf	_Load,w
 11356  05D9  0086               	movwf	6
 11357  05DA  3002               	movlw	2	; select bank4/5
 11358  05DB  0087               	movwf	7
 11359  05DC  1C81               	btfss	1,1
 11360  05DD  2E01               	goto	l10068
 11361                           
 11362                           ;OverLoad_B1.c: 171: {
 11363                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 11364  05DE  086E               	movf	_Load,w
 11365  05DF  0086               	movwf	6
 11366  05E0  3002               	movlw	2	; select bank4/5
 11367  05E1  0087               	movwf	7
 11368  05E2  1901               	btfsc	1,2
 11369  05E3  2DEE               	goto	l10062
 11370                           
 11371                           ;OverLoad_B1.c: 173: {
 11372                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 11373  05E4  086E               	movf	_Load,w
 11374  05E5  0086               	movwf	6
 11375  05E6  3002               	movlw	2	; select bank4/5
 11376  05E7  0087               	movwf	7
 11377  05E8  1501               	bsf	1,2
 11378                           
 11379                           ;OverLoad_B1.c: 175: Load->Safe=0;
 11380  05E9  086E               	movf	_Load,w
 11381  05EA  0086               	movwf	6
 11382  05EB  3002               	movlw	2	; select bank4/5
 11383  05EC  0087               	movwf	7
 11384  05ED  1181               	bcf	1,3
 11385  05EE                     l10062:	
 11386                           
 11387                           ;OverLoad_B1.c: 176: }
 11388                           ;OverLoad_B1.c: 177: if(getTemp_Safe() && getPF_Safe())
 11389  05EE  31A3  23AE  3183   	fcall	_getTemp_Safe
 11390  05F1  3A00               	xorlw	0
 11391  05F2  1903               	skipnz
 11392  05F3  0008               	return
 11393  05F4  31A3  23D3  3183   	fcall	_getPF_Safe
 11394  05F7  3A00               	xorlw	0
 11395  05F8  1903               	skipnz
 11396  05F9  0008               	return
 11397                           
 11398                           ;OverLoad_B1.c: 178: {
 11399                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 11400  05FA  0020               	movlb	0	; select bank0
 11401  05FB  086E               	movf	_Load,w
 11402  05FC  0086               	movwf	6
 11403  05FD  3002               	movlw	2	; select bank4/5
 11404  05FE  0087               	movwf	7
 11405  05FF  1601               	bsf	1,4
 11406                           
 11407                           ;OverLoad_B1.c: 180: }
 11408                           ;OverLoad_B1.c: 181: }
 11409  0600  0008               	return
 11410  0601                     l10068:	
 11411                           
 11412                           ;OverLoad_B1.c: 182: else
 11413                           ;OverLoad_B1.c: 183: {
 11414                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 11415  0601  086E               	movf	_Load,w
 11416  0602  0086               	movwf	6
 11417  0603  3002               	movlw	2	; select bank4/5
 11418  0604  0087               	movwf	7
 11419  0605  1D01               	btfss	1,2
 11420  0606  0008               	return
 11421                           
 11422                           ;OverLoad_B1.c: 185: {
 11423                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 11424  0607  086E               	movf	_Load,w
 11425  0608  0086               	movwf	6
 11426  0609  3002               	movlw	2	; select bank4/5
 11427  060A  0087               	movwf	7
 11428  060B  1101               	bcf	1,2
 11429                           
 11430                           ;OverLoad_B1.c: 187: Load->Safe=1;
 11431  060C  086E               	movf	_Load,w
 11432  060D  0086               	movwf	6
 11433  060E  3002               	movlw	2	; select bank4/5
 11434  060F  0087               	movwf	7
 11435  0610  1581               	bsf	1,3
 11436                           
 11437                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 11438  0611  086E               	movf	_Load,w
 11439  0612  3E3C               	addlw	60
 11440  0613  0086               	movwf	6
 11441  0614  3002               	movlw	2	; select bank4/5
 11442  0615  0087               	movwf	7
 11443  0616  0181               	clrf	1
 11444                           
 11445                           ;OverLoad_B1.c: 189: Load->Count=0;
 11446  0617  086E               	movf	_Load,w
 11447  0618  3E3A               	addlw	58
 11448  0619  0086               	movwf	6
 11449  061A  3002               	movlw	2	; select bank4/5
 11450  061B  0087               	movwf	7
 11451  061C  0181               	clrf	1
 11452                           
 11453                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 11454  061D  086E               	movf	_Load,w
 11455  061E  3E06               	addlw	6
 11456  061F  0086               	movwf	6
 11457  0620  3002               	movlw	2	; select bank4/5
 11458  0621  0087               	movwf	7
 11459  0622  3000               	movlw	0
 11460  0623  3FC0               	movwi [0]fsr1
 11461  0624  3FC1               	movwi [1]fsr1
 11462                           
 11463                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 11464  0625  086E               	movf	_Load,w
 11465  0626  3E3F               	addlw	63
 11466  0627  0086               	movwf	6
 11467  0628  3002               	movlw	2	; select bank4/5
 11468  0629  0087               	movwf	7
 11469  062A  0181               	clrf	1
 11470                           
 11471                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 11472  062B  086E               	movf	_Load,w
 11473  062C  3E46               	addlw	70
 11474  062D  0086               	movwf	6
 11475  062E  3002               	movlw	2	; select bank4/5
 11476  062F  0087               	movwf	7
 11477  0630  1001               	bcf	1,0
 11478                           
 11479                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 11480  0631  086E               	movf	_Load,w
 11481  0632  3E46               	addlw	70
 11482  0633  0086               	movwf	6
 11483  0634  3002               	movlw	2	; select bank4/5
 11484  0635  0087               	movwf	7
 11485  0636  1081               	bcf	1,1
 11486                           
 11487                           ;OverLoad_B1.c: 194: Load->AD=0;
 11488  0637  086E               	movf	_Load,w
 11489  0638  3E2C               	addlw	44
 11490  0639  0086               	movwf	6
 11491  063A  3002               	movlw	2	; select bank4/5
 11492  063B  0087               	movwf	7
 11493  063C  3000               	movlw	0
 11494  063D  3FC0               	movwi [0]fsr1
 11495  063E  3FC1               	movwi [1]fsr1
 11496                           
 11497                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 11498  063F  3198  207C  3183   	fcall	_setLoad_AH_AL_Restore
 11499                           
 11500                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 11501  0642  0020               	movlb	0	; select bank0
 11502  0643  01A2               	clrf	setDimmerLights_Clear@command
 11503  0644  0AA2               	incf	setDimmerLights_Clear@command,f
 11504  0645  3001               	movlw	1
 11505  0646  31A5  2550  3183   	fcall	_setDimmerLights_Clear
 11506                           
 11507                           ;OverLoad_B1.c: 202: setDimmerLights_Clear(2,1);
 11508  0649  0020               	movlb	0	; select bank0
 11509  064A  01A2               	clrf	setDimmerLights_Clear@command
 11510  064B  0AA2               	incf	setDimmerLights_Clear@command,f
 11511  064C  3002               	movlw	2
 11512  064D  31A5  2550         	fcall	_setDimmerLights_Clear
 11513  064F  0008               	return
 11514  0650                     __end_of_Load_Main:	
 11515                           
 11516                           	psect	text57
 11517  1CB8                     __ptext57:	
 11518 ;; *************** function _setLoad_Exceptions *****************
 11519 ;; Defined at:
 11520 ;;		line 229 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11521 ;; Parameters:    Size  Location     Type
 11522 ;;  command         1    wreg     unsigned char 
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;  command         1   12[BANK0 ] unsigned char 
 11525 ;; Return value:  Size  Location     Type
 11526 ;;		None               void
 11527 ;; Registers used:
 11528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;Total ram usage:        2 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    8
 11541 ;; This function calls:
 11542 ;;		_DimmerLights_Exceptions
 11543 ;;		_setLED
 11544 ;;		_setRF_Enable
 11545 ;;		_setSw_Enable
 11546 ;; This function is called by:
 11547 ;;		_Load_Main
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function _setLoad_Exceptions
 11553  1CB8                     _setLoad_Exceptions:	
 11554                           
 11555                           ;incstack = 0
 11556                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11557                           ;setLoad_Exceptions@command stored from wreg
 11558  1CB8  0020               	movlb	0	; select bank0
 11559  1CB9  00AC               	movwf	setLoad_Exceptions@command
 11560                           
 11561                           ;OverLoad_B1.c: 232: Load->ERROR=command;
 11562  1CBA  086E               	movf	_Load,w
 11563  1CBB  0086               	movwf	6
 11564  1CBC  3002               	movlw	2	; select bank4/5
 11565  1CBD  0087               	movwf	7
 11566  1CBE  082C               	movf	setLoad_Exceptions@command,w
 11567  1CBF  1281               	bcf	1,5
 11568  1CC0  1D03               	skipz
 11569  1CC1  1681               	bsf	1,5
 11570                           
 11571                           ;OverLoad_B1.c: 233: Load->ErrorStatus=command;
 11572  1CC2  082C               	movf	setLoad_Exceptions@command,w
 11573  1CC3  00AB               	movwf	??_setLoad_Exceptions
 11574  1CC4  086E               	movf	_Load,w
 11575  1CC5  3E05               	addlw	5
 11576  1CC6  0086               	movwf	6
 11577  1CC7  3002               	movlw	2	; select bank4/5
 11578  1CC8  0087               	movwf	7
 11579  1CC9  082B               	movf	??_setLoad_Exceptions,w
 11580  1CCA  0081               	movwf	1
 11581                           
 11582                           ;OverLoad_B1.c: 235: setLED(99,command+10);
 11583  1CCB  082C               	movf	setLoad_Exceptions@command,w
 11584  1CCC  3E0A               	addlw	10
 11585  1CCD  00AB               	movwf	??_setLoad_Exceptions
 11586  1CCE  082B               	movf	??_setLoad_Exceptions,w
 11587  1CCF  00A2               	movwf	setLED@command
 11588  1CD0  3063               	movlw	99
 11589  1CD1  319F  2741  319C   	fcall	_setLED
 11590                           
 11591                           ;OverLoad_B1.c: 236: if(command)
 11592  1CD4  0020               	movlb	0	; select bank0
 11593  1CD5  082C               	movf	setLoad_Exceptions@command,w
 11594  1CD6  1903               	btfsc	3,2
 11595  1CD7  2CDD               	goto	l9480
 11596                           
 11597                           ;OverLoad_B1.c: 237: {
 11598                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11599  1CD8  3002               	movlw	2
 11600  1CD9  3191  2165  319C   	fcall	_DimmerLights_Exceptions
 11601  1CDC  0020               	movlb	0	; select bank0
 11602  1CDD                     l9480:	
 11603                           
 11604                           ;OverLoad_B1.c: 239: }
 11605                           ;OverLoad_B1.c: 240: Load->Safe=(~command) & 0x01;
 11606  1CDD  0020               	movlb	0	; select bank0
 11607  1CDE  092C               	comf	setLoad_Exceptions@command,w
 11608  1CDF  3901               	andlw	1
 11609  1CE0  00AB               	movwf	??_setLoad_Exceptions
 11610  1CE1  086E               	movf	_Load,w
 11611  1CE2  0086               	movwf	6
 11612  1CE3  3002               	movlw	2	; select bank4/5
 11613  1CE4  0087               	movwf	7
 11614  1CE5  0DAB               	rlf	??_setLoad_Exceptions,f
 11615  1CE6  0DAB               	rlf	??_setLoad_Exceptions,f
 11616  1CE7  0DAB               	rlf	??_setLoad_Exceptions,f
 11617  1CE8  0801               	movf	1,w
 11618  1CE9  062B               	xorwf	??_setLoad_Exceptions,w
 11619  1CEA  39F7               	andlw	-9
 11620  1CEB  062B               	xorwf	??_setLoad_Exceptions,w
 11621  1CEC  0081               	movwf	1
 11622                           
 11623                           ;OverLoad_B1.c: 242: setSw_Enable((~command) & 0x01);
 11624  1CED  092C               	comf	setLoad_Exceptions@command,w
 11625  1CEE  3901               	andlw	1
 11626  1CEF  31A7  2726  319C   	fcall	_setSw_Enable
 11627                           
 11628                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 11629  1CF2  0020               	movlb	0	; select bank0
 11630  1CF3  092C               	comf	setLoad_Exceptions@command,w
 11631  1CF4  3901               	andlw	1
 11632  1CF5  00AB               	movwf	??_setLoad_Exceptions
 11633  1CF6  082B               	movf	??_setLoad_Exceptions,w
 11634  1CF7  00A4               	movwf	setRF_Enable@command
 11635  1CF8  3001               	movlw	1
 11636  1CF9  319B  2306         	fcall	_setRF_Enable
 11637  1CFB  0008               	return
 11638  1CFC                     __end_of_setLoad_Exceptions:	
 11639                           
 11640                           	psect	text58
 11641  2726                     __ptext58:	
 11642 ;; *************** function _setSw_Enable *****************
 11643 ;; Defined at:
 11644 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;  command         1    wreg     unsigned char 
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;  command         1    2[BANK0 ] unsigned char 
 11649 ;; Return value:  Size  Location     Type
 11650 ;;		None               void
 11651 ;; Registers used:
 11652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;Total ram usage:        1 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    5
 11665 ;; This function calls:
 11666 ;;		_SwPointSelect
 11667 ;; This function is called by:
 11668 ;;		_MainT
 11669 ;;		_setLoad_Exceptions
 11670 ;;		_setOverTemp_Exceptions
 11671 ;;		_setPowerFault_Exceptions
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           
 11676                           ;psect for function _setSw_Enable
 11677  2726                     _setSw_Enable:	
 11678                           
 11679                           ;incstack = 0
 11680                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11681                           ;setSw_Enable@command stored from wreg
 11682  2726  0020               	movlb	0	; select bank0
 11683  2727  00A2               	movwf	setSw_Enable@command
 11684                           
 11685                           ;Switch_B1.c: 90: SwPointSelect(1);
 11686  2728  3001               	movlw	1
 11687  2729  31A5  25C4  31A7   	fcall	_SwPointSelect
 11688                           
 11689                           ;Switch_B1.c: 91: Sw->Enable=command;
 11690  272C  0020               	movlb	0	; select bank0
 11691  272D  086D               	movf	_Sw,w
 11692  272E  0086               	movwf	6
 11693  272F  3001               	movlw	1	; select bank2/3
 11694  2730  0087               	movwf	7
 11695  2731  0822               	movf	setSw_Enable@command,w
 11696  2732  1001               	bcf	1,0
 11697  2733  1D03               	skipz
 11698  2734  1401               	bsf	1,0
 11699                           
 11700                           ;Switch_B1.c: 95: SwPointSelect(2);
 11701  2735  3002               	movlw	2
 11702  2736  31A5  25C4         	fcall	_SwPointSelect
 11703                           
 11704                           ;Switch_B1.c: 96: Sw->Enable=command;
 11705  2738  0020               	movlb	0	; select bank0
 11706  2739  086D               	movf	_Sw,w
 11707  273A  0086               	movwf	6
 11708  273B  3001               	movlw	1	; select bank2/3
 11709  273C  0087               	movwf	7
 11710  273D  0822               	movf	setSw_Enable@command,w
 11711  273E  1001               	bcf	1,0
 11712  273F  1D03               	skipz
 11713  2740  1401               	bsf	1,0
 11714  2741  0008               	return
 11715  2742                     __end_of_setSw_Enable:	
 11716                           
 11717                           	psect	text59
 11718  1B06                     __ptext59:	
 11719 ;; *************** function _setRF_Enable *****************
 11720 ;; Defined at:
 11721 ;;		line 172 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;  rf              1    wreg     unsigned char 
 11724 ;;  command         1    4[BANK0 ] unsigned char 
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  rf              1    5[BANK0 ] unsigned char 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;		None               void
 11729 ;; Registers used:
 11730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:        2 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    6
 11743 ;; This function calls:
 11744 ;;		_CC2500_WriteCommand
 11745 ;;		_RfPointSelect
 11746 ;;		_setINT_GO
 11747 ;; This function is called by:
 11748 ;;		_MainT
 11749 ;;		_setLoad_Exceptions
 11750 ;;		_setOverTemp_Exceptions
 11751 ;;		_setPowerFault_Exceptions
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           
 11756                           ;psect for function _setRF_Enable
 11757  1B06                     _setRF_Enable:	
 11758                           
 11759                           ;incstack = 0
 11760                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11761                           ;setRF_Enable@rf stored from wreg
 11762  1B06  0020               	movlb	0	; select bank0
 11763  1B07  00A5               	movwf	setRF_Enable@rf
 11764                           
 11765                           ;RF_Control_B1.c: 174: RfPointSelect(rf);
 11766  1B08  0825               	movf	setRF_Enable@rf,w
 11767  1B09  31A4  241D  319B   	fcall	_RfPointSelect
 11768                           
 11769                           ;RF_Control_B1.c: 175: RF->Enable=command;
 11770  1B0C  087C               	movf	_RF,w
 11771  1B0D  0086               	movwf	6
 11772  1B0E  0187               	clrf	7
 11773  1B0F  0020               	movlb	0	; select bank0
 11774  1B10  0824               	movf	setRF_Enable@command,w
 11775  1B11  1001               	bcf	1,0
 11776  1B12  1D03               	skipz
 11777  1B13  1401               	bsf	1,0
 11778                           
 11779                           ;RF_Control_B1.c: 176: if(!command)
 11780  1B14  08A4               	movf	setRF_Enable@command,f
 11781  1B15  1D03               	skipz
 11782  1B16  0008               	return
 11783                           
 11784                           ;RF_Control_B1.c: 177: {
 11785                           ;RF_Control_B1.c: 178: RF->Learn=0;
 11786  1B17  087C               	movf	_RF,w
 11787  1B18  0086               	movwf	6
 11788  1B19  0187               	clrf	7
 11789  1B1A  1301               	bcf	1,6
 11790                           
 11791                           ;RF_Control_B1.c: 179: Transceive_GO=0;
 11792  1B1B  1270               	bcf	_Transceive_GO/(0+8),_Transceive_GO& (0+7)
 11793                           
 11794                           ;RF_Control_B1.c: 180: CC2500_WriteCommand(0x36);
 11795  1B1C  3036               	movlw	54
 11796  1B1D  31A5  2520  319B   	fcall	_CC2500_WriteCommand
 11797                           
 11798                           ;RF_Control_B1.c: 181: CC2500_WriteCommand(0x3B);
 11799  1B20  303B               	movlw	59
 11800  1B21  31A5  2520  319B   	fcall	_CC2500_WriteCommand
 11801                           
 11802                           ;RF_Control_B1.c: 183: RF->RxStatus=0;
 11803  1B24  087C               	movf	_RF,w
 11804  1B25  0086               	movwf	6
 11805  1B26  0187               	clrf	7
 11806  1B27  1181               	bcf	1,3
 11807                           
 11808                           ;RF_Control_B1.c: 184: RF->ReceiveGO=0;
 11809  1B28  087C               	movf	_RF,w
 11810  1B29  0086               	movwf	6
 11811  1B2A  0187               	clrf	7
 11812  1B2B  1081               	bcf	1,1
 11813                           
 11814                           ;RF_Control_B1.c: 185: RF->DebounceTime=0;
 11815  1B2C  0A7C               	incf	_RF,w
 11816  1B2D  0086               	movwf	6
 11817  1B2E  0187               	clrf	7
 11818  1B2F  0181               	clrf	1
 11819                           
 11820                           ;RF_Control_B1.c: 186: RF->Debounce=0;
 11821  1B30  087C               	movf	_RF,w
 11822  1B31  0086               	movwf	6
 11823  1B32  0187               	clrf	7
 11824  1B33  1281               	bcf	1,5
 11825                           
 11826                           ;RF_Control_B1.c: 188: CC2500_WriteCommand(0x3A);
 11827  1B34  303A               	movlw	58
 11828  1B35  31A5  2520  319B   	fcall	_CC2500_WriteCommand
 11829                           
 11830                           ;RF_Control_B1.c: 189: setINT_GO(0);
 11831  1B38  3000               	movlw	0
 11832  1B39  31A3  23F4         	fcall	_setINT_GO
 11833  1B3B  0008               	return
 11834  1B3C                     __end_of_setRF_Enable:	
 11835                           
 11836                           	psect	text60
 11837  23F4                     __ptext60:	
 11838 ;; *************** function _setINT_GO *****************
 11839 ;; Defined at:
 11840 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  command         1    wreg     unsigned char 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  command         1    0[BANK0 ] unsigned char 
 11845 ;; Return value:  Size  Location     Type
 11846 ;;		None               void
 11847 ;; Registers used:
 11848 ;;		wreg
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;Total ram usage:        1 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    4
 11861 ;; This function calls:
 11862 ;;		Nothing
 11863 ;; This function is called by:
 11864 ;;		_setRF_Main
 11865 ;;		_setRF_Enable
 11866 ;;		_RF_RxDisable
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           
 11871                           ;psect for function _setINT_GO
 11872  23F4                     _setINT_GO:	
 11873                           
 11874                           ;incstack = 0
 11875                           ; Regs used in _setINT_GO: [wreg]
 11876                           ;setINT_GO@command stored from wreg
 11877  23F4  0020               	movlb	0	; select bank0
 11878  23F5  00A0               	movwf	setINT_GO@command
 11879                           
 11880                           ;MCU_16f1518_B1.c: 237: INTF=0;
 11881  23F6  108B               	bcf	11,1	;volatile
 11882                           
 11883                           ;MCU_16f1518_B1.c: 238: INTE=command;
 11884  23F7  1C20               	btfss	setINT_GO@command,0
 11885  23F8  2BFB               	goto	u8490
 11886  23F9  160B               	bsf	11,4	;volatile
 11887  23FA  0008               	return
 11888  23FB                     u8490:	
 11889  23FB  120B               	bcf	11,4	;volatile
 11890  23FC  0008               	return
 11891  23FD                     __end_of_setINT_GO:	
 11892                           
 11893                           	psect	text61
 11894  1165                     __ptext61:	
 11895 ;; *************** function _DimmerLights_Exceptions *****************
 11896 ;; Defined at:
 11897 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11898 ;; Parameters:    Size  Location     Type
 11899 ;;  status          1    wreg     unsigned char 
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;  status          1   10[BANK0 ] unsigned char 
 11902 ;; Return value:  Size  Location     Type
 11903 ;;		None               void
 11904 ;; Registers used:
 11905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11906 ;; Tracked objects:
 11907 ;;		On entry : 0/0
 11908 ;;		On exit  : 0/0
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;Total ram usage:        1 bytes
 11916 ;; Hardware stack levels used:    1
 11917 ;; Hardware stack levels required when called:    7
 11918 ;; This function calls:
 11919 ;;		_getDimmerLights_StatusFlag
 11920 ;;		_setBuz
 11921 ;;		_setDimmerLights_ERROR
 11922 ;;		_setDimmerLights_TriggerERROR
 11923 ;; This function is called by:
 11924 ;;		_setLoad_Exceptions
 11925 ;;		_setOverTemp_Exceptions
 11926 ;;		_setPowerFault_Exceptions
 11927 ;; This function uses a non-reentrant model
 11928 ;;
 11929                           
 11930                           
 11931                           ;psect for function _DimmerLights_Exceptions
 11932  1165                     _DimmerLights_Exceptions:	
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11936                           ;DimmerLights_Exceptions@status stored from wreg
 11937  1165  0020               	movlb	0	; select bank0
 11938  1166  00AA               	movwf	DimmerLights_Exceptions@status
 11939                           
 11940                           ;Dimmer_B1.c: 237: if(status == 1)
 11941  1167  082A               	movf	DimmerLights_Exceptions@status,w
 11942  1168  3A01               	xorlw	1
 11943  1169  1D03               	skipz
 11944  116A  297B               	goto	l8882
 11945                           
 11946                           ;Dimmer_B1.c: 238: {
 11947                           ;Dimmer_B1.c: 239: if(getDimmerLights_StatusFlag())
 11948  116B  31A6  262D  3191   	fcall	_getDimmerLights_StatusFlag
 11949  116E  3A00               	xorlw	0
 11950  116F  1903               	skipnz
 11951  1170  2993               	goto	l8888
 11952                           
 11953                           ;Dimmer_B1.c: 240: {
 11954                           ;Dimmer_B1.c: 241: setBuz(10,300);
 11955  1171  302C               	movlw	44
 11956  1172  0020               	movlb	0	; select bank0
 11957  1173  00A6               	movwf	setBuz@time
 11958  1174  3001               	movlw	1
 11959  1175  00A7               	movwf	setBuz@time+1
 11960  1176  300A               	movlw	10
 11961  1177  3193  23EA  3191   	fcall	_setBuz
 11962  117A  2993               	goto	l8888
 11963  117B                     l8882:	
 11964                           ;Dimmer_B1.c: 253: }
 11965                           
 11966                           ;Dimmer_B1.c: 248: setDimmerLights_ERROR(2);
 11967                           
 11968                           ;Dimmer_B1.c: 242: }
 11969                           ;Dimmer_B1.c: 245: setDimmerLights_ERROR(1);
 11970                           
 11971                           
 11972                           ;Dimmer_B1.c: 254: else if(status == 2)
 11973  117B  0020               	movlb	0	; select bank0
 11974  117C  082A               	movf	DimmerLights_Exceptions@status,w
 11975  117D  3A02               	xorlw	2
 11976  117E  1D03               	skipz
 11977  117F  298E               	goto	l8886
 11978                           
 11979                           ;Dimmer_B1.c: 255: {
 11980                           ;Dimmer_B1.c: 256: setBuz(5,300);
 11981  1180  302C               	movlw	44
 11982  1181  00A6               	movwf	setBuz@time
 11983  1182  3001               	movlw	1
 11984  1183  00A7               	movwf	setBuz@time+1
 11985  1184  3005               	movlw	5
 11986  1185  3193  23EA  3191   	fcall	_setBuz
 11987                           
 11988                           ;Dimmer_B1.c: 257: setDimmerLights_ERROR(Dimmer->Load);
 11989  1188  0021               	movlb	1	; select bank1
 11990  1189  0A39               	incf	_Dimmer^(0+128),w
 11991  118A  0086               	movwf	6
 11992  118B  0187               	clrf	7
 11993  118C  0801               	movf	1,w
 11994  118D  2998               	goto	L12
 11995  118E                     l8886:	
 11996                           ;Dimmer_B1.c: 258: }
 11997                           
 11998                           
 11999                           ;Dimmer_B1.c: 259: else if(status == 3)
 12000  118E  0020               	movlb	0	; select bank0
 12001  118F  082A               	movf	DimmerLights_Exceptions@status,w
 12002  1190  3A03               	xorlw	3
 12003  1191  1D03               	skipz
 12004  1192  299B               	goto	l923
 12005  1193                     l8888:	
 12006                           
 12007                           ;Dimmer_B1.c: 260: {
 12008                           ;Dimmer_B1.c: 262: setDimmerLights_ERROR(1);
 12009  1193  3001               	movlw	1
 12010  1194  319D  25D8  3191   	fcall	_setDimmerLights_ERROR
 12011                           
 12012                           ;Dimmer_B1.c: 265: setDimmerLights_ERROR(2);
 12013  1197  3002               	movlw	2
 12014  1198                     L12:	
 12015  1198  319D  25D8  3191   	fcall	_setDimmerLights_ERROR
 12016  119B                     l923:	
 12017                           
 12018                           ;Dimmer_B1.c: 270: }
 12019                           ;Dimmer_B1.c: 273: setDimmerLights_TriggerERROR(1,0);
 12020  119B  0020               	movlb	0	; select bank0
 12021  119C  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12022  119D  3001               	movlw	1
 12023  119E  3199  2183  3191   	fcall	_setDimmerLights_TriggerERROR
 12024                           
 12025                           ;Dimmer_B1.c: 276: setDimmerLights_TriggerERROR(2,0);
 12026  11A1  0020               	movlb	0	; select bank0
 12027  11A2  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12028  11A3  3002               	movlw	2
 12029  11A4  3199  2183  3191   	fcall	_setDimmerLights_TriggerERROR
 12030                           
 12031                           ;Dimmer_B1.c: 282: if(TMain->SelfTest == 0)
 12032  11A7  0021               	movlb	1	; select bank1
 12033  11A8  0869               	movf	_TMain^(0+128),w
 12034  11A9  3E03               	addlw	3
 12035  11AA  0086               	movwf	6
 12036  11AB  3001               	movlw	1	; select bank2/3
 12037  11AC  0087               	movwf	7
 12038  11AD  1801               	btfsc	1,0
 12039  11AE  0008               	return
 12040                           
 12041                           ;Dimmer_B1.c: 283: {
 12042                           ;Dimmer_B1.c: 284: TMain->i=0;
 12043  11AF  0869               	movf	_TMain^(0+128),w
 12044  11B0  3E0E               	addlw	14
 12045  11B1  0086               	movwf	6
 12046  11B2  3001               	movlw	1	; select bank2/3
 12047  11B3  0087               	movwf	7
 12048  11B4  1001               	bcf	1,0
 12049                           
 12050                           ;Dimmer_B1.c: 285: TMain->j=0;
 12051  11B5  0869               	movf	_TMain^(0+128),w
 12052  11B6  3E0E               	addlw	14
 12053  11B7  0086               	movwf	6
 12054  11B8  3001               	movlw	1	; select bank2/3
 12055  11B9  0087               	movwf	7
 12056  11BA  1081               	bcf	1,1
 12057                           
 12058                           ;Dimmer_B1.c: 286: TMain->k=1;
 12059  11BB  0869               	movf	_TMain^(0+128),w
 12060  11BC  3E0E               	addlw	14
 12061  11BD  0086               	movwf	6
 12062  11BE  3001               	movlw	1	; select bank2/3
 12063  11BF  0087               	movwf	7
 12064  11C0  1501               	bsf	1,2
 12065                           
 12066                           ;Dimmer_B1.c: 287: TMain->Count2=0;
 12067  11C1  0869               	movf	_TMain^(0+128),w
 12068  11C2  3E08               	addlw	8
 12069  11C3  0086               	movwf	6
 12070  11C4  3001               	movlw	1	; select bank2/3
 12071  11C5  0087               	movwf	7
 12072  11C6  3000               	movlw	0
 12073  11C7  3FC0               	movwi [0]fsr1
 12074  11C8  3FC1               	movwi [1]fsr1
 12075  11C9  0008               	return
 12076  11CA                     __end_of_DimmerLights_Exceptions:	
 12077                           
 12078                           	psect	text62
 12079  1983                     __ptext62:	
 12080 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12081 ;; Defined at:
 12082 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  lights          1    wreg     unsigned char 
 12085 ;;  command         1    2[BANK0 ] unsigned char 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  lights          1    3[BANK0 ] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;		None               void
 12090 ;; Registers used:
 12091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12097 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;Total ram usage:        2 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:    5
 12104 ;; This function calls:
 12105 ;;		_DimmerLightsPointSelect
 12106 ;; This function is called by:
 12107 ;;		_DimmerLights_Exceptions
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           
 12112                           ;psect for function _setDimmerLights_TriggerERROR
 12113  1983                     _setDimmerLights_TriggerERROR:	
 12114                           
 12115                           ;incstack = 0
 12116                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12117                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12118  1983  0020               	movlb	0	; select bank0
 12119  1984  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12120                           
 12121                           ;Dimmer_B1.c: 311: DimmerLightsPointSelect(lights);
 12122  1985  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12123  1986  31A5  25B1         	fcall	_DimmerLightsPointSelect
 12124                           
 12125                           ;Dimmer_B1.c: 312: DimmerLights->Trigger=command;
 12126  1988  0020               	movlb	0	; select bank0
 12127  1989  086C               	movf	_DimmerLights,w
 12128  198A  3E09               	addlw	9
 12129  198B  0086               	movwf	6
 12130  198C  3001               	movlw	1	; select bank2/3
 12131  198D  0087               	movwf	7
 12132  198E  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12133  198F  1081               	bcf	1,1
 12134  1990  1D03               	skipz
 12135  1991  1481               	bsf	1,1
 12136                           
 12137                           ;Dimmer_B1.c: 313: DimmerLights->Switch=command;
 12138  1992  086C               	movf	_DimmerLights,w
 12139  1993  3E09               	addlw	9
 12140  1994  0086               	movwf	6
 12141  1995  3001               	movlw	1	; select bank2/3
 12142  1996  0087               	movwf	7
 12143  1997  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12144  1998  1001               	bcf	1,0
 12145  1999  1D03               	skipz
 12146  199A  1401               	bsf	1,0
 12147                           
 12148                           ;Dimmer_B1.c: 314: DimmerLights->TriggerAdj=command;
 12149  199B  086C               	movf	_DimmerLights,w
 12150  199C  3E09               	addlw	9
 12151  199D  0086               	movwf	6
 12152  199E  3001               	movlw	1	; select bank2/3
 12153  199F  0087               	movwf	7
 12154  19A0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12155  19A1  1181               	bcf	1,3
 12156  19A2  1D03               	skipz
 12157  19A3  1581               	bsf	1,3
 12158                           
 12159                           ;Dimmer_B1.c: 315: DimmerLights->AdjGo=command;
 12160  19A4  086C               	movf	_DimmerLights,w
 12161  19A5  3E09               	addlw	9
 12162  19A6  0086               	movwf	6
 12163  19A7  3001               	movlw	1	; select bank2/3
 12164  19A8  0087               	movwf	7
 12165  19A9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12166  19AA  1101               	bcf	1,2
 12167  19AB  1D03               	skipz
 12168  19AC  1501               	bsf	1,2
 12169  19AD  0008               	return
 12170  19AE                     __end_of_setDimmerLights_TriggerERROR:	
 12171                           
 12172                           	psect	text63
 12173  1DD8                     __ptext63:	
 12174 ;; *************** function _setDimmerLights_ERROR *****************
 12175 ;; Defined at:
 12176 ;;		line 291 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;  lights          1    wreg     unsigned char 
 12179 ;; Auto vars:     Size  Location     Type
 12180 ;;  lights          1    5[BANK0 ] unsigned char 
 12181 ;; Return value:  Size  Location     Type
 12182 ;;		None               void
 12183 ;; Registers used:
 12184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;Total ram usage:        2 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    6
 12197 ;; This function calls:
 12198 ;;		_DimmerLightsPointSelect
 12199 ;;		_setLED
 12200 ;;		_setLoad_StatusOff
 12201 ;;		_setRFSW_Status
 12202 ;;		_setSw_Status
 12203 ;; This function is called by:
 12204 ;;		_DimmerLights_Exceptions
 12205 ;; This function uses a non-reentrant model
 12206 ;;
 12207                           
 12208                           
 12209                           ;psect for function _setDimmerLights_ERROR
 12210  1DD8                     _setDimmerLights_ERROR:	
 12211                           
 12212                           ;incstack = 0
 12213                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12214                           ;setDimmerLights_ERROR@lights stored from wreg
 12215  1DD8  0020               	movlb	0	; select bank0
 12216  1DD9  00A5               	movwf	setDimmerLights_ERROR@lights
 12217                           
 12218                           ;Dimmer_B1.c: 293: DimmerLightsPointSelect(lights);
 12219  1DDA  0825               	movf	setDimmerLights_ERROR@lights,w
 12220  1DDB  31A5  25B1  319D   	fcall	_DimmerLightsPointSelect
 12221                           
 12222                           ;Dimmer_B1.c: 294: if(DimmerLights->Status)
 12223  1DDE  0020               	movlb	0	; select bank0
 12224  1DDF  086C               	movf	_DimmerLights,w
 12225  1DE0  0086               	movwf	6
 12226  1DE1  3001               	movlw	1	; select bank2/3
 12227  1DE2  0087               	movwf	7
 12228  1DE3  1E81               	btfss	1,5
 12229  1DE4  0008               	return
 12230                           
 12231                           ;Dimmer_B1.c: 295: {
 12232                           ;Dimmer_B1.c: 296: DimmerLights->Signal=0;
 12233  1DE5  086C               	movf	_DimmerLights,w
 12234  1DE6  0086               	movwf	6
 12235  1DE7  3001               	movlw	1	; select bank2/3
 12236  1DE8  0087               	movwf	7
 12237  1DE9  1081               	bcf	1,1
 12238                           
 12239                           ;Dimmer_B1.c: 297: DimmerLights->AdjFlag=0;
 12240  1DEA  086C               	movf	_DimmerLights,w
 12241  1DEB  0086               	movwf	6
 12242  1DEC  3001               	movlw	1	; select bank2/3
 12243  1DED  0087               	movwf	7
 12244  1DEE  1181               	bcf	1,3
 12245                           
 12246                           ;Dimmer_B1.c: 298: DimmerLights->AdjStatus=0;
 12247  1DEF  086C               	movf	_DimmerLights,w
 12248  1DF0  0086               	movwf	6
 12249  1DF1  3001               	movlw	1	; select bank2/3
 12250  1DF2  0087               	movwf	7
 12251  1DF3  1201               	bcf	1,4
 12252                           
 12253                           ;Dimmer_B1.c: 299: DimmerLights->StatusFlag=0;
 12254  1DF4  086C               	movf	_DimmerLights,w
 12255  1DF5  0086               	movwf	6
 12256  1DF6  3001               	movlw	1	; select bank2/3
 12257  1DF7  0087               	movwf	7
 12258  1DF8  1301               	bcf	1,6
 12259                           
 12260                           ;Dimmer_B1.c: 300: DimmerLights->DimmingTimeValue=3;
 12261  1DF9  3003               	movlw	3
 12262  1DFA  00A4               	movwf	??_setDimmerLights_ERROR
 12263  1DFB  086C               	movf	_DimmerLights,w
 12264  1DFC  3E02               	addlw	2
 12265  1DFD  0086               	movwf	6
 12266  1DFE  3001               	movlw	1	; select bank2/3
 12267  1DFF  0087               	movwf	7
 12268  1E00  0824               	movf	??_setDimmerLights_ERROR,w
 12269  1E01  0081               	movwf	1
 12270                           
 12271                           ;Dimmer_B1.c: 301: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12272  1E02  086C               	movf	_DimmerLights,w
 12273  1E03  3E06               	addlw	6
 12274  1E04  0086               	movwf	6
 12275  1E05  3001               	movlw	1	; select bank2/3
 12276  1E06  0087               	movwf	7
 12277  1E07  0801               	movf	1,w
 12278  1E08  00A4               	movwf	??_setDimmerLights_ERROR
 12279  1E09  086C               	movf	_DimmerLights,w
 12280  1E0A  3E04               	addlw	4
 12281  1E0B  0086               	movwf	6
 12282  1E0C  3001               	movlw	1	; select bank2/3
 12283  1E0D  0087               	movwf	7
 12284  1E0E  0824               	movf	??_setDimmerLights_ERROR,w
 12285  1E0F  0081               	movwf	1
 12286                           
 12287                           ;Dimmer_B1.c: 302: Dimmer->Detect=1;
 12288  1E10  0021               	movlb	1	; select bank1
 12289  1E11  0839               	movf	_Dimmer^(0+128),w
 12290  1E12  0086               	movwf	6
 12291  1E13  0187               	clrf	7
 12292  1E14  1401               	bsf	1,0
 12293                           
 12294                           ;Dimmer_B1.c: 303: setLoad_StatusOff(lights,1);
 12295  1E15  0020               	movlb	0	; select bank0
 12296  1E16  01A0               	clrf	setLoad_StatusOff@command
 12297  1E17  0AA0               	incf	setLoad_StatusOff@command,f
 12298  1E18  0825               	movf	setDimmerLights_ERROR@lights,w
 12299  1E19  319A  223D  319D   	fcall	_setLoad_StatusOff
 12300                           
 12301                           ;Dimmer_B1.c: 304: setLED(lights,1);
 12302  1E1C  0020               	movlb	0	; select bank0
 12303  1E1D  01A2               	clrf	setLED@command
 12304  1E1E  0AA2               	incf	setLED@command,f
 12305  1E1F  0825               	movf	setDimmerLights_ERROR@lights,w
 12306  1E20  319F  2741  319D   	fcall	_setLED
 12307                           
 12308                           ;Dimmer_B1.c: 305: setSw_Status(lights,0);
 12309  1E23  0020               	movlb	0	; select bank0
 12310  1E24  01A2               	clrf	setSw_Status@command
 12311  1E25  0825               	movf	setDimmerLights_ERROR@lights,w
 12312  1E26  31A5  2511  319D   	fcall	_setSw_Status
 12313                           
 12314                           ;Dimmer_B1.c: 306: setRFSW_Status(lights,0);
 12315  1E29  0020               	movlb	0	; select bank0
 12316  1E2A  01A2               	clrf	setRFSW_Status@command
 12317  1E2B  0825               	movf	setDimmerLights_ERROR@lights,w
 12318  1E2C  31A5  2502         	fcall	_setRFSW_Status
 12319  1E2E  0008               	return
 12320  1E2F                     __end_of_setDimmerLights_ERROR:	
 12321                           
 12322                           	psect	text64
 12323  2550                     __ptext64:	
 12324 ;; *************** function _setDimmerLights_Clear *****************
 12325 ;; Defined at:
 12326 ;;		line 438 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  lights          1    wreg     unsigned char 
 12329 ;;  command         1    2[BANK0 ] unsigned char 
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;  lights          1    3[BANK0 ] unsigned char 
 12332 ;; Return value:  Size  Location     Type
 12333 ;;		None               void
 12334 ;; Registers used:
 12335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12341 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;Total ram usage:        2 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    5
 12348 ;; This function calls:
 12349 ;;		_DimmerLightsPointSelect
 12350 ;; This function is called by:
 12351 ;;		_Load_Main
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           
 12356                           ;psect for function _setDimmerLights_Clear
 12357  2550                     _setDimmerLights_Clear:	
 12358                           
 12359                           ;incstack = 0
 12360                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12361                           ;setDimmerLights_Clear@lights stored from wreg
 12362  2550  0020               	movlb	0	; select bank0
 12363  2551  00A3               	movwf	setDimmerLights_Clear@lights
 12364                           
 12365                           ;Dimmer_B1.c: 440: DimmerLightsPointSelect(lights);
 12366  2552  0823               	movf	setDimmerLights_Clear@lights,w
 12367  2553  31A5  25B1         	fcall	_DimmerLightsPointSelect
 12368                           
 12369                           ;Dimmer_B1.c: 441: DimmerLights->Clear=command;
 12370  2555  0020               	movlb	0	; select bank0
 12371  2556  086C               	movf	_DimmerLights,w
 12372  2557  3E0C               	addlw	12
 12373  2558  0086               	movwf	6
 12374  2559  3001               	movlw	1	; select bank2/3
 12375  255A  0087               	movwf	7
 12376  255B  0822               	movf	setDimmerLights_Clear@command,w
 12377  255C  1001               	bcf	1,0
 12378  255D  1D03               	skipz
 12379  255E  1401               	bsf	1,0
 12380  255F  0008               	return
 12381  2560                     __end_of_setDimmerLights_Clear:	
 12382                           
 12383                           	psect	text65
 12384  23AE                     __ptext65:	
 12385 ;; *************** function _getTemp_Safe *****************
 12386 ;; Defined at:
 12387 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 12388 ;; Parameters:    Size  Location     Type
 12389 ;;		None
 12390 ;; Auto vars:     Size  Location     Type
 12391 ;;		None
 12392 ;; Return value:  Size  Location     Type
 12393 ;;                  1    wreg      unsigned char 
 12394 ;; Registers used:
 12395 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12396 ;; Tracked objects:
 12397 ;;		On entry : 0/0
 12398 ;;		On exit  : 0/0
 12399 ;;		Unchanged: 0/0
 12400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;Total ram usage:        0 bytes
 12406 ;; Hardware stack levels used:    1
 12407 ;; Hardware stack levels required when called:    4
 12408 ;; This function calls:
 12409 ;;		Nothing
 12410 ;; This function is called by:
 12411 ;;		_Load_Main
 12412 ;;		_setPowerFault_Main
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           
 12417                           ;psect for function _getTemp_Safe
 12418  23AE                     _getTemp_Safe:	
 12419                           
 12420                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 12421                           
 12422                           ;incstack = 0
 12423                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12424  23AE  087D               	movf	_Temp,w
 12425  23AF  0086               	movwf	6
 12426  23B0  3001               	movlw	1	; select bank2/3
 12427  23B1  0087               	movwf	7
 12428  23B2  0E01               	swapf	1,w
 12429  23B3  3901               	andlw	1
 12430  23B4  0008               	return
 12431  23B5                     __end_of_getTemp_Safe:	
 12432                           
 12433                           	psect	text66
 12434  23D3                     __ptext66:	
 12435 ;; *************** function _getPF_Safe *****************
 12436 ;; Defined at:
 12437 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;		None
 12440 ;; Auto vars:     Size  Location     Type
 12441 ;;		None
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  1    wreg      unsigned char 
 12444 ;; Registers used:
 12445 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12446 ;; Tracked objects:
 12447 ;;		On entry : 0/0
 12448 ;;		On exit  : 0/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;Total ram usage:        0 bytes
 12456 ;; Hardware stack levels used:    1
 12457 ;; Hardware stack levels required when called:    4
 12458 ;; This function calls:
 12459 ;;		Nothing
 12460 ;; This function is called by:
 12461 ;;		_Load_Main
 12462 ;;		_setTemp_Main
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _getPF_Safe
 12468  23D3                     _getPF_Safe:	
 12469                           
 12470                           ;PowerFault_B1.c: 42: return PF->Safe;
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12474  23D3  087B               	movf	_PF,w
 12475  23D4  0086               	movwf	6
 12476  23D5  3001               	movlw	1	; select bank2/3
 12477  23D6  0087               	movwf	7
 12478  23D7  0C01               	rrf	1,w
 12479  23D8  0C89               	rrf	9,f
 12480  23D9  3901               	andlw	1
 12481  23DA  0008               	return
 12482  23DB                     __end_of_getPF_Safe:	
 12483                           
 12484                           	psect	text67
 12485  1B3C                     __ptext67:	
 12486 ;; *************** function ___lwdiv *****************
 12487 ;; Defined at:
 12488 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  divisor         2    0[BANK0 ] unsigned int 
 12491 ;;  dividend        2    2[BANK0 ] unsigned int 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  quotient        2    5[BANK0 ] unsigned int 
 12494 ;;  counter         1    7[BANK0 ] unsigned char 
 12495 ;; Return value:  Size  Location     Type
 12496 ;;                  2    0[BANK0 ] unsigned int 
 12497 ;; Registers used:
 12498 ;;		wreg, status,2, status,0
 12499 ;; Tracked objects:
 12500 ;;		On entry : 0/0
 12501 ;;		On exit  : 0/0
 12502 ;;		Unchanged: 0/0
 12503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;Total ram usage:        8 bytes
 12509 ;; Hardware stack levels used:    1
 12510 ;; Hardware stack levels required when called:    4
 12511 ;; This function calls:
 12512 ;;		Nothing
 12513 ;; This function is called by:
 12514 ;;		_Load_Main
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function ___lwdiv
 12520  1B3C                     ___lwdiv:	
 12521                           
 12522                           ;incstack = 0
 12523                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12524  1B3C  0020               	movlb	0	; select bank0
 12525  1B3D  01A5               	clrf	___lwdiv@quotient
 12526  1B3E  01A6               	clrf	___lwdiv@quotient+1
 12527  1B3F  0821               	movf	___lwdiv@divisor+1,w
 12528  1B40  0420               	iorwf	___lwdiv@divisor,w
 12529  1B41  1903               	skipnz
 12530  1B42  2B6C               	goto	l7936
 12531  1B43  01A7               	clrf	___lwdiv@counter
 12532  1B44  0AA7               	incf	___lwdiv@counter,f
 12533  1B45                     l7924:	
 12534  1B45  1BA1               	btfsc	___lwdiv@divisor+1,7
 12535  1B46  2B51               	goto	l7926
 12536  1B47  3001               	movlw	1
 12537  1B48                     u6965:	
 12538  1B48  35A0               	lslf	___lwdiv@divisor,f
 12539  1B49  0DA1               	rlf	___lwdiv@divisor+1,f
 12540  1B4A  0B89               	decfsz	9,f
 12541  1B4B  2B48               	goto	u6965
 12542  1B4C  3001               	movlw	1
 12543  1B4D  00A4               	movwf	??___lwdiv
 12544  1B4E  0824               	movf	??___lwdiv,w
 12545  1B4F  07A7               	addwf	___lwdiv@counter,f
 12546  1B50  2B45               	goto	l7924
 12547  1B51                     l7926:	
 12548  1B51  3001               	movlw	1
 12549  1B52                     u6985:	
 12550  1B52  35A5               	lslf	___lwdiv@quotient,f
 12551  1B53  0DA6               	rlf	___lwdiv@quotient+1,f
 12552  1B54  0B89               	decfsz	9,f
 12553  1B55  2B52               	goto	u6985
 12554  1B56  0821               	movf	___lwdiv@divisor+1,w
 12555  1B57  0223               	subwf	___lwdiv@dividend+1,w
 12556  1B58  1D03               	skipz
 12557  1B59  2B5C               	goto	u6995
 12558  1B5A  0820               	movf	___lwdiv@divisor,w
 12559  1B5B  0222               	subwf	___lwdiv@dividend,w
 12560  1B5C                     u6995:	
 12561  1B5C  1C03               	skipc
 12562  1B5D  2B63               	goto	l7932
 12563  1B5E  0820               	movf	___lwdiv@divisor,w
 12564  1B5F  02A2               	subwf	___lwdiv@dividend,f
 12565  1B60  0821               	movf	___lwdiv@divisor+1,w
 12566  1B61  3BA3               	subwfb	___lwdiv@dividend+1,f
 12567  1B62  1425               	bsf	___lwdiv@quotient,0
 12568  1B63                     l7932:	
 12569  1B63  3001               	movlw	1
 12570  1B64                     u7005:	
 12571  1B64  36A1               	lsrf	___lwdiv@divisor+1,f
 12572  1B65  0CA0               	rrf	___lwdiv@divisor,f
 12573  1B66  0B89               	decfsz	9,f
 12574  1B67  2B64               	goto	u7005
 12575  1B68  3001               	movlw	1
 12576  1B69  02A7               	subwf	___lwdiv@counter,f
 12577  1B6A  1D03               	btfss	3,2
 12578  1B6B  2B51               	goto	l7926
 12579  1B6C                     l7936:	
 12580  1B6C  0826               	movf	___lwdiv@quotient+1,w
 12581  1B6D  01A1               	clrf	?___lwdiv+1
 12582  1B6E  07A1               	addwf	?___lwdiv+1,f
 12583  1B6F  0825               	movf	___lwdiv@quotient,w
 12584  1B70  01A0               	clrf	?___lwdiv
 12585  1B71  07A0               	addwf	?___lwdiv,f
 12586  1B72  0008               	return
 12587  1B73                     __end_of___lwdiv:	
 12588                           
 12589                           	psect	text68
 12590  24B2                     __ptext68:	
 12591 ;; *************** function _Load_Initialization *****************
 12592 ;; Defined at:
 12593 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;		None
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;		None
 12598 ;; Return value:  Size  Location     Type
 12599 ;;		None               void
 12600 ;; Registers used:
 12601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;Total ram usage:        1 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; Hardware stack levels required when called:    5
 12614 ;; This function calls:
 12615 ;;		_setLoad_AH_AL_Restore
 12616 ;; This function is called by:
 12617 ;;		_main
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _Load_Initialization
 12623  24B2                     _Load_Initialization:	
 12624                           
 12625                           ;OverLoad_B1.c: 10: Load=&Load1;
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12629  24B2  30A0               	movlw	_Load1& (0+255)
 12630  24B3  0020               	movlb	0	; select bank0
 12631  24B4  00A2               	movwf	??_Load_Initialization
 12632  24B5  0822               	movf	??_Load_Initialization,w
 12633  24B6  00EE               	movwf	_Load
 12634                           
 12635                           ;OverLoad_B1.c: 11: Load->Safe=1;
 12636  24B7  086E               	movf	_Load,w
 12637  24B8  0086               	movwf	6
 12638  24B9  3002               	movlw	2	; select bank4/5
 12639  24BA  0087               	movwf	7
 12640  24BB  1581               	bsf	1,3
 12641                           
 12642                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 12643  24BC  3198  207C         	fcall	_setLoad_AH_AL_Restore
 12644  24BE  0008               	return
 12645  24BF                     __end_of_Load_Initialization:	
 12646                           
 12647                           	psect	text69
 12648  187C                     __ptext69:	
 12649 ;; *************** function _setLoad_AH_AL_Restore *****************
 12650 ;; Defined at:
 12651 ;;		line 308 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;		None
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  i               1    1[BANK0 ] unsigned char 
 12656 ;; Return value:  Size  Location     Type
 12657 ;;		None               void
 12658 ;; Registers used:
 12659 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;Total ram usage:        2 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    4
 12672 ;; This function calls:
 12673 ;;		Nothing
 12674 ;; This function is called by:
 12675 ;;		_Load_Initialization
 12676 ;;		_Load_Main
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _setLoad_AH_AL_Restore
 12682  187C                     _setLoad_AH_AL_Restore:	
 12683                           
 12684                           ;OverLoad_B1.c: 310: char i;
 12685                           ;OverLoad_B1.c: 311: for(i=0 ; i<5 ;i++)
 12686                           
 12687                           ;incstack = 0
 12688                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12689  187C  0020               	movlb	0	; select bank0
 12690  187D  01A1               	clrf	setLoad_AH_AL_Restore@i
 12691  187E                     L13:	
 12692  187E  3005               	movlw	5
 12693  187F  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12694  1880  1803               	btfsc	3,0
 12695  1881  0008               	return
 12696                           
 12697                           ;OverLoad_B1.c: 312: {
 12698                           ;OverLoad_B1.c: 313: Load->AH[i]=0;
 12699  1882  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12700  1883  3E08               	addlw	8
 12701  1884  076E               	addwf	_Load,w
 12702  1885  00A0               	movwf	??_setLoad_AH_AL_Restore
 12703  1886  0820               	movf	??_setLoad_AH_AL_Restore,w
 12704  1887  0086               	movwf	6
 12705  1888  3002               	movlw	2	; select bank4/5
 12706  1889  0087               	movwf	7
 12707  188A  3000               	movlw	0
 12708  188B  3FC0               	movwi [0]fsr1
 12709  188C  3FC1               	movwi [1]fsr1
 12710                           
 12711                           ;OverLoad_B1.c: 314: Load->AL[i]=0xffff;
 12712  188D  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12713  188E  3E1A               	addlw	26
 12714  188F  076E               	addwf	_Load,w
 12715  1890  00A0               	movwf	??_setLoad_AH_AL_Restore
 12716  1891  0820               	movf	??_setLoad_AH_AL_Restore,w
 12717  1892  0086               	movwf	6
 12718  1893  3002               	movlw	2	; select bank4/5
 12719  1894  0087               	movwf	7
 12720  1895  30FF               	movlw	255
 12721  1896  3FC0               	movwi [0]fsr1
 12722  1897  30FF               	movlw	255
 12723  1898  3FC1               	movwi [1]fsr1
 12724  1899  3001               	movlw	1
 12725  189A  00A0               	movwf	??_setLoad_AH_AL_Restore
 12726  189B  0820               	movf	??_setLoad_AH_AL_Restore,w
 12727  189C  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12728  189D  287E               	goto	L13
 12729  189E                     __end_of_setLoad_AH_AL_Restore:	
 12730                           
 12731                           	psect	text70
 12732  24A6                     __ptext70:	
 12733 ;; *************** function _LED_Main *****************
 12734 ;; Defined at:
 12735 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;		None
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;		None
 12740 ;; Return value:  Size  Location     Type
 12741 ;;		None               void
 12742 ;; Registers used:
 12743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;Total ram usage:        0 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    6
 12756 ;; This function calls:
 12757 ;;		_setLED_Main
 12758 ;; This function is called by:
 12759 ;;		_main
 12760 ;; This function uses a non-reentrant model
 12761 ;;
 12762                           
 12763                           
 12764                           ;psect for function _LED_Main
 12765  24A6                     _LED_Main:	
 12766                           
 12767                           ;LED_B1.c: 54: setLED_Main(1);
 12768                           
 12769                           ;incstack = 0
 12770                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12771  24A6  3001               	movlw	1
 12772  24A7  319B  2373  31A4   	fcall	_setLED_Main
 12773                           
 12774                           ;LED_B1.c: 57: setLED_Main(2);
 12775  24AA  3002               	movlw	2
 12776  24AB  319B  2373  31A4   	fcall	_setLED_Main
 12777                           
 12778                           ;LED_B1.c: 63: setLED_Main(99);
 12779  24AE  3063               	movlw	99
 12780  24AF  319B  2373         	fcall	_setLED_Main
 12781  24B1  0008               	return
 12782  24B2                     __end_of_LED_Main:	
 12783                           
 12784                           	psect	text71
 12785  1B73                     __ptext71:	
 12786 ;; *************** function _setLED_Main *****************
 12787 ;; Defined at:
 12788 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12789 ;; Parameters:    Size  Location     Type
 12790 ;;  led             1    wreg     unsigned char 
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;  led             1    4[BANK0 ] unsigned char 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;		None               void
 12795 ;; Registers used:
 12796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12797 ;; Tracked objects:
 12798 ;;		On entry : 0/0
 12799 ;;		On exit  : 0/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;Total ram usage:        3 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    5
 12809 ;; This function calls:
 12810 ;;		_LedPointSelect
 12811 ;; This function is called by:
 12812 ;;		_LED_Main
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           
 12817                           ;psect for function _setLED_Main
 12818  1B73                     _setLED_Main:	
 12819                           
 12820                           ;incstack = 0
 12821                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12822                           ;setLED_Main@led stored from wreg
 12823  1B73  0020               	movlb	0	; select bank0
 12824  1B74  00A4               	movwf	setLED_Main@led
 12825                           
 12826                           ;LED_B1.c: 216: LedPointSelect(led);
 12827  1B75  0824               	movf	setLED_Main@led,w
 12828  1B76  31A7  27DE  319B   	fcall	_LedPointSelect
 12829                           
 12830                           ;LED_B1.c: 217: if(LED->GO)
 12831  1B79  0021               	movlb	1	; select bank1
 12832  1B7A  083B               	movf	_LED^(0+128),w
 12833  1B7B  0086               	movwf	6
 12834  1B7C  0187               	clrf	7
 12835  1B7D  1C81               	btfss	1,1
 12836  1B7E  0008               	return
 12837                           
 12838                           ;LED_B1.c: 218: {
 12839                           ;LED_B1.c: 219: LED->Time++;
 12840  1B7F  0A3B               	incf	_LED^(0+128),w
 12841  1B80  0086               	movwf	6
 12842  1B81  0187               	clrf	7
 12843  1B82  3001               	movlw	1
 12844  1B83  0781               	addwf	1,f
 12845  1B84  3141               	addfsr 1,1
 12846  1B85  1803               	skipnc
 12847  1B86  0A81               	incf	1,f
 12848                           
 12849                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 12850  1B87  0A3B               	incf	_LED^(0+128),w
 12851  1B88  0086               	movwf	6
 12852  1B89  0187               	clrf	7
 12853  1B8A  3F40               	moviw [0]fsr1
 12854  1B8B  0020               	movlb	0	; select bank0
 12855  1B8C  00A2               	movwf	??_setLED_Main
 12856  1B8D  3F41               	moviw [1]fsr1
 12857  1B8E  00A3               	movwf	??_setLED_Main+1
 12858  1B8F  3000               	movlw	0
 12859  1B90  0223               	subwf	??_setLED_Main+1,w
 12860  1B91  3032               	movlw	50
 12861  1B92  1903               	skipnz
 12862  1B93  0222               	subwf	??_setLED_Main,w
 12863  1B94  1C03               	skipc
 12864  1B95  0008               	return
 12865                           
 12866                           ;LED_B1.c: 221: {
 12867                           ;LED_B1.c: 222: LED->Time=0;
 12868  1B96  0021               	movlb	1	; select bank1
 12869  1B97  0A3B               	incf	_LED^(0+128),w
 12870  1B98  0086               	movwf	6
 12871  1B99  0187               	clrf	7
 12872  1B9A  3000               	movlw	0
 12873  1B9B  3FC0               	movwi [0]fsr1
 12874  1B9C  3FC1               	movwi [1]fsr1
 12875                           
 12876                           ;LED_B1.c: 224: if(led == 1)
 12877  1B9D  0020               	movlb	0	; select bank0
 12878  1B9E  0824               	movf	setLED_Main@led,w
 12879  1B9F  3A01               	xorlw	1
 12880  1BA0  1D03               	skipz
 12881  1BA1  2BA5               	goto	l7496
 12882                           
 12883                           ;LED_B1.c: 225: {
 12884                           ;LED_B1.c: 226: RA3=~RA3;
 12885  1BA2  3008               	movlw	8
 12886  1BA3  068C               	xorwf	12,f
 12887                           
 12888                           ;LED_B1.c: 227: }
 12889  1BA4  0008               	return
 12890  1BA5                     l7496:	
 12891                           
 12892                           ;LED_B1.c: 230: else if(led == 2)
 12893  1BA5  0824               	movf	setLED_Main@led,w
 12894  1BA6  3A02               	xorlw	2
 12895  1BA7  1D03               	skipz
 12896  1BA8  2BAC               	goto	l7500
 12897                           
 12898                           ;LED_B1.c: 231: {
 12899                           ;LED_B1.c: 232: RC7=~RC7;
 12900  1BA9  3080               	movlw	128
 12901  1BAA  068E               	xorwf	14,f
 12902                           
 12903                           ;LED_B1.c: 233: }
 12904  1BAB  0008               	return
 12905  1BAC                     l7500:	
 12906                           
 12907                           ;LED_B1.c: 242: else if(led == 99)
 12908  1BAC  0824               	movf	setLED_Main@led,w
 12909  1BAD  3A63               	xorlw	99
 12910  1BAE  1D03               	skipz
 12911  1BAF  0008               	return
 12912                           
 12913                           ;LED_B1.c: 243: {
 12914                           ;LED_B1.c: 244: RB5=~RB5;
 12915  1BB0  3020               	movlw	32
 12916  1BB1  068D               	xorwf	13,f
 12917  1BB2  0008               	return
 12918  1BB3                     __end_of_setLED_Main:	
 12919                           
 12920                           	psect	text72
 12921  249A                     __ptext72:	
 12922 ;; *************** function _LED_Initialization *****************
 12923 ;; Defined at:
 12924 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;		None
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;		None
 12929 ;; Return value:  Size  Location     Type
 12930 ;;		None               void
 12931 ;; Registers used:
 12932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;Total ram usage:        0 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    7
 12945 ;; This function calls:
 12946 ;;		_setLED_Initialization
 12947 ;; This function is called by:
 12948 ;;		_main
 12949 ;; This function uses a non-reentrant model
 12950 ;;
 12951                           
 12952                           
 12953                           ;psect for function _LED_Initialization
 12954  249A                     _LED_Initialization:	
 12955                           
 12956                           ;LED_B1.c: 38: setLED_Initialization(1);
 12957                           
 12958                           ;incstack = 0
 12959                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12960  249A  3001               	movlw	1
 12961  249B  31A5  25A0  31A4   	fcall	_setLED_Initialization
 12962                           
 12963                           ;LED_B1.c: 41: setLED_Initialization(2);
 12964  249E  3002               	movlw	2
 12965  249F  31A5  25A0  31A4   	fcall	_setLED_Initialization
 12966                           
 12967                           ;LED_B1.c: 47: setLED_Initialization(99);
 12968  24A2  3063               	movlw	99
 12969  24A3  31A5  25A0         	fcall	_setLED_Initialization
 12970  24A5  0008               	return
 12971  24A6                     __end_of_LED_Initialization:	
 12972                           
 12973                           	psect	text73
 12974  25A0                     __ptext73:	
 12975 ;; *************** function _setLED_Initialization *****************
 12976 ;; Defined at:
 12977 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;  led             1    wreg     unsigned char 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;  led             1    4[BANK0 ] unsigned char 
 12982 ;; Return value:  Size  Location     Type
 12983 ;;		None               void
 12984 ;; Registers used:
 12985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;Total ram usage:        1 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    6
 12998 ;; This function calls:
 12999 ;;		_LedPointSelect
 13000 ;;		_setLED
 13001 ;; This function is called by:
 13002 ;;		_LED_Initialization
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           
 13007                           ;psect for function _setLED_Initialization
 13008  25A0                     _setLED_Initialization:	
 13009                           
 13010                           ;incstack = 0
 13011                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13012                           ;setLED_Initialization@led stored from wreg
 13013  25A0  0020               	movlb	0	; select bank0
 13014  25A1  00A4               	movwf	setLED_Initialization@led
 13015                           
 13016                           ;LED_B1.c: 69: LedPointSelect(led);
 13017  25A2  0824               	movf	setLED_Initialization@led,w
 13018  25A3  31A7  27DE  31A5   	fcall	_LedPointSelect
 13019                           
 13020                           ;LED_B1.c: 70: LED->Enable=1;
 13021  25A6  0021               	movlb	1	; select bank1
 13022  25A7  083B               	movf	_LED^(0+128),w
 13023  25A8  0086               	movwf	6
 13024  25A9  0187               	clrf	7
 13025  25AA  1401               	bsf	1,0
 13026                           
 13027                           ;LED_B1.c: 71: setLED(led,0);
 13028  25AB  0020               	movlb	0	; select bank0
 13029  25AC  01A2               	clrf	setLED@command
 13030  25AD  0824               	movf	setLED_Initialization@led,w
 13031  25AE  319F  2741         	fcall	_setLED
 13032  25B0  0008               	return
 13033  25B1                     __end_of_setLED_Initialization:	
 13034                           
 13035                           	psect	text74
 13036  10A0                     __ptext74:	
 13037 ;; *************** function _Flash_Memory_Main *****************
 13038 ;; Defined at:
 13039 ;;		line 474 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;		None
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;  Idle            1    8[BANK0 ] unsigned char 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;		None               void
 13046 ;; Registers used:
 13047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;Total ram usage:        2 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    7
 13060 ;; This function calls:
 13061 ;;		_Flash_Memory_Modify
 13062 ;;		_getDimmerLights_StatusFlag
 13063 ;; This function is called by:
 13064 ;;		_main
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function _Flash_Memory_Main
 13070  10A0                     _Flash_Memory_Main:	
 13071                           
 13072                           ;MCU_16f1518_B1.c: 476: char Idle=1;
 13073                           
 13074                           ;incstack = 0
 13075                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13076  10A0  0020               	movlb	0	; select bank0
 13077  10A1  01A8               	clrf	Flash_Memory_Main@Idle
 13078  10A2  0AA8               	incf	Flash_Memory_Main@Idle,f
 13079                           
 13080                           ;MCU_16f1518_B1.c: 478: if(Memory->GO)
 13081  10A3  0021               	movlb	1	; select bank1
 13082  10A4  0868               	movf	_Memory^(0+128),w
 13083  10A5  3E22               	addlw	34
 13084  10A6  0086               	movwf	6
 13085  10A7  3002               	movlw	2	; select bank4/5
 13086  10A8  0087               	movwf	7
 13087  10A9  1C81               	btfss	1,1
 13088  10AA  0008               	return
 13089                           
 13090                           ;MCU_16f1518_B1.c: 479: {
 13091                           ;MCU_16f1518_B1.c: 481: Idle=(!getDimmerLights_StatusFlag())?1:0;
 13092  10AB  31A6  262D  3190   	fcall	_getDimmerLights_StatusFlag
 13093  10AE  3A00               	xorlw	0
 13094  10AF  3000               	movlw	0
 13095  10B0  1903               	skipnz
 13096  10B1  3001               	movlw	1
 13097  10B2  0020               	movlb	0	; select bank0
 13098  10B3  00A7               	movwf	??_Flash_Memory_Main
 13099  10B4  0827               	movf	??_Flash_Memory_Main,w
 13100  10B5  00A8               	movwf	Flash_Memory_Main@Idle
 13101                           
 13102                           ;MCU_16f1518_B1.c: 484: if(Idle)
 13103  10B6  0828               	movf	Flash_Memory_Main@Idle,w
 13104  10B7  1903               	btfsc	3,2
 13105  10B8  28F7               	goto	l9960
 13106                           
 13107                           ;MCU_16f1518_B1.c: 485: {
 13108                           ;MCU_16f1518_B1.c: 486: if(Memory->Modify)
 13109  10B9  0021               	movlb	1	; select bank1
 13110  10BA  0868               	movf	_Memory^(0+128),w
 13111  10BB  3E22               	addlw	34
 13112  10BC  0086               	movwf	6
 13113  10BD  3002               	movlw	2	; select bank4/5
 13114  10BE  0087               	movwf	7
 13115  10BF  1C01               	btfss	1,0
 13116  10C0  28EF               	goto	l9958
 13117                           
 13118                           ;MCU_16f1518_B1.c: 487: {
 13119                           ;MCU_16f1518_B1.c: 488: Memory->Time++;
 13120  10C1  0868               	movf	_Memory^(0+128),w
 13121  10C2  3E23               	addlw	35
 13122  10C3  0086               	movwf	6
 13123  10C4  3002               	movlw	2	; select bank4/5
 13124  10C5  0087               	movwf	7
 13125  10C6  3001               	movlw	1
 13126  10C7  0781               	addwf	1,f
 13127  10C8  3141               	addfsr 1,1
 13128  10C9  1803               	skipnc
 13129  10CA  0A81               	incf	1,f
 13130                           
 13131                           ;MCU_16f1518_B1.c: 489: if(Memory->Time == 25)
 13132  10CB  0868               	movf	_Memory^(0+128),w
 13133  10CC  3E23               	addlw	35
 13134  10CD  0086               	movwf	6
 13135  10CE  3002               	movlw	2	; select bank4/5
 13136  10CF  0087               	movwf	7
 13137  10D0  3F40               	moviw [0]fsr1
 13138  10D1  3A19               	xorlw	25
 13139  10D2  1D03               	skipz
 13140  10D3  28D6               	goto	u10045
 13141  10D4  3F41               	moviw [1]fsr1
 13142  10D5  3A00               	xorlw	0
 13143  10D6                     u10045:	
 13144  10D6  1D03               	skipz
 13145  10D7  0008               	return
 13146                           
 13147                           ;MCU_16f1518_B1.c: 490: {
 13148                           ;MCU_16f1518_B1.c: 491: Memory->Time=0;
 13149  10D8  0868               	movf	_Memory^(0+128),w
 13150  10D9  3E23               	addlw	35
 13151  10DA  0086               	movwf	6
 13152  10DB  3002               	movlw	2	; select bank4/5
 13153  10DC  0087               	movwf	7
 13154  10DD  3000               	movlw	0
 13155  10DE  3FC0               	movwi [0]fsr1
 13156  10DF  3FC1               	movwi [1]fsr1
 13157                           
 13158                           ;MCU_16f1518_B1.c: 492: Memory->Modify=0;
 13159  10E0  0868               	movf	_Memory^(0+128),w
 13160  10E1  3E22               	addlw	34
 13161  10E2  0086               	movwf	6
 13162  10E3  3002               	movlw	2	; select bank4/5
 13163  10E4  0087               	movwf	7
 13164  10E5  1001               	bcf	1,0
 13165                           
 13166                           ;MCU_16f1518_B1.c: 493: Memory->GO=0;
 13167  10E6  0868               	movf	_Memory^(0+128),w
 13168  10E7  3E22               	addlw	34
 13169  10E8  0086               	movwf	6
 13170  10E9  3002               	movlw	2	; select bank4/5
 13171  10EA  0087               	movwf	7
 13172  10EB  1081               	bcf	1,1
 13173                           
 13174                           ;MCU_16f1518_B1.c: 494: Flash_Memory_Modify();
 13175  10EC  3192  229C         	fcall	_Flash_Memory_Modify
 13176                           
 13177                           ;MCU_16f1518_B1.c: 496: }
 13178                           ;MCU_16f1518_B1.c: 497: }
 13179  10EE  0008               	return
 13180  10EF                     l9958:	
 13181                           
 13182                           ;MCU_16f1518_B1.c: 498: else
 13183                           ;MCU_16f1518_B1.c: 499: {
 13184                           ;MCU_16f1518_B1.c: 500: Memory->GO=0;
 13185  10EF  0021               	movlb	1	; select bank1
 13186  10F0  0868               	movf	_Memory^(0+128),w
 13187  10F1  3E22               	addlw	34
 13188  10F2  0086               	movwf	6
 13189  10F3  3002               	movlw	2	; select bank4/5
 13190  10F4  0087               	movwf	7
 13191  10F5  1081               	bcf	1,1
 13192                           
 13193                           ;MCU_16f1518_B1.c: 501: }
 13194                           ;MCU_16f1518_B1.c: 502: }
 13195  10F6  0008               	return
 13196  10F7                     l9960:	
 13197                           
 13198                           ;MCU_16f1518_B1.c: 503: else
 13199                           ;MCU_16f1518_B1.c: 504: {
 13200                           ;MCU_16f1518_B1.c: 505: Memory->Time=0;
 13201  10F7  0021               	movlb	1	; select bank1
 13202  10F8  0868               	movf	_Memory^(0+128),w
 13203  10F9  3E23               	addlw	35
 13204  10FA  0086               	movwf	6
 13205  10FB  3002               	movlw	2	; select bank4/5
 13206  10FC  0087               	movwf	7
 13207  10FD  3000               	movlw	0
 13208  10FE  3FC0               	movwi [0]fsr1
 13209  10FF  3FC1               	movwi [1]fsr1
 13210  1100  0008               	return
 13211  1101                     __end_of_Flash_Memory_Main:	
 13212                           
 13213                           	psect	text75
 13214  129C                     __ptext75:	
 13215 ;; *************** function _Flash_Memory_Modify *****************
 13216 ;; Defined at:
 13217 ;;		line 562 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;  i               1    6[BANK0 ] unsigned char 
 13222 ;; Return value:  Size  Location     Type
 13223 ;;		None               void
 13224 ;; Registers used:
 13225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;Total ram usage:        3 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    6
 13238 ;; This function calls:
 13239 ;;		_Flash_Memory_Erasing
 13240 ;;		_Flash_Memory_Read
 13241 ;;		_Flash_Memory_Write
 13242 ;; This function is called by:
 13243 ;;		_Flash_Memory_Main
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           
 13248                           ;psect for function _Flash_Memory_Modify
 13249  129C                     _Flash_Memory_Modify:	
 13250                           
 13251                           ;MCU_16f1518_B1.c: 564: char i;
 13252                           ;MCU_16f1518_B1.c: 565: for(i=0;i<32;i++)
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13256  129C  0020               	movlb	0	; select bank0
 13257  129D  01A6               	clrf	Flash_Memory_Modify@i
 13258  129E  3020               	movlw	32
 13259  129F  0226               	subwf	Flash_Memory_Modify@i,w
 13260  12A0  1803               	btfsc	3,0
 13261  12A1  2ABB               	goto	l9460
 13262  12A2                     l9454:	
 13263                           
 13264                           ;MCU_16f1518_B1.c: 566: {
 13265                           ;MCU_16f1518_B1.c: 567: Memory->Data[i]=Flash_Memory_Read(i);
 13266  12A2  0826               	movf	Flash_Memory_Modify@i,w
 13267  12A3  31A6  26A4  3192   	fcall	_Flash_Memory_Read
 13268  12A6  0020               	movlb	0	; select bank0
 13269  12A7  00A4               	movwf	??_Flash_Memory_Modify
 13270  12A8  0826               	movf	Flash_Memory_Modify@i,w
 13271  12A9  0021               	movlb	1	; select bank1
 13272  12AA  0768               	addwf	_Memory^(0+128),w
 13273  12AB  0020               	movlb	0	; select bank0
 13274  12AC  00A5               	movwf	??_Flash_Memory_Modify+1
 13275  12AD  0825               	movf	??_Flash_Memory_Modify+1,w
 13276  12AE  0086               	movwf	6
 13277  12AF  3002               	movlw	2	; select bank4/5
 13278  12B0  0087               	movwf	7
 13279  12B1  0824               	movf	??_Flash_Memory_Modify,w
 13280  12B2  0081               	movwf	1
 13281  12B3  3001               	movlw	1
 13282  12B4  00A4               	movwf	??_Flash_Memory_Modify
 13283  12B5  0824               	movf	??_Flash_Memory_Modify,w
 13284  12B6  07A6               	addwf	Flash_Memory_Modify@i,f
 13285  12B7  3020               	movlw	32
 13286  12B8  0226               	subwf	Flash_Memory_Modify@i,w
 13287  12B9  1C03               	skipc
 13288  12BA  2AA2               	goto	l9454
 13289  12BB                     l9460:	
 13290                           
 13291                           ;MCU_16f1518_B1.c: 568: }
 13292                           ;MCU_16f1518_B1.c: 569: Memory->Data[0]=Product->Data[12];
 13293  12BB  086F               	movf	_Product,w
 13294  12BC  3E0C               	addlw	12
 13295  12BD  0086               	movwf	6
 13296  12BE  3001               	movlw	1	; select bank2/3
 13297  12BF  0087               	movwf	7
 13298  12C0  0801               	movf	1,w
 13299  12C1  00A4               	movwf	??_Flash_Memory_Modify
 13300  12C2  0021               	movlb	1	; select bank1
 13301  12C3  0868               	movf	_Memory^(0+128),w
 13302  12C4  0086               	movwf	6
 13303  12C5  3002               	movlw	2	; select bank4/5
 13304  12C6  0087               	movwf	7
 13305  12C7  0020               	movlb	0	; select bank0
 13306  12C8  0824               	movf	??_Flash_Memory_Modify,w
 13307  12C9  0081               	movwf	1
 13308                           
 13309                           ;MCU_16f1518_B1.c: 570: Memory->Data[1]=Product->Data[13];
 13310  12CA  086F               	movf	_Product,w
 13311  12CB  3E0D               	addlw	13
 13312  12CC  0086               	movwf	6
 13313  12CD  3001               	movlw	1	; select bank2/3
 13314  12CE  0087               	movwf	7
 13315  12CF  0801               	movf	1,w
 13316  12D0  00A4               	movwf	??_Flash_Memory_Modify
 13317  12D1  0021               	movlb	1	; select bank1
 13318  12D2  0A68               	incf	_Memory^(0+128),w
 13319  12D3  0086               	movwf	6
 13320  12D4  3002               	movlw	2	; select bank4/5
 13321  12D5  0087               	movwf	7
 13322  12D6  0020               	movlb	0	; select bank0
 13323  12D7  0824               	movf	??_Flash_Memory_Modify,w
 13324  12D8  0081               	movwf	1
 13325                           
 13326                           ;MCU_16f1518_B1.c: 571: Memory->Data[2]=Product->Data[14];
 13327  12D9  086F               	movf	_Product,w
 13328  12DA  3E0E               	addlw	14
 13329  12DB  0086               	movwf	6
 13330  12DC  3001               	movlw	1	; select bank2/3
 13331  12DD  0087               	movwf	7
 13332  12DE  0801               	movf	1,w
 13333  12DF  00A4               	movwf	??_Flash_Memory_Modify
 13334  12E0  0021               	movlb	1	; select bank1
 13335  12E1  0868               	movf	_Memory^(0+128),w
 13336  12E2  3E02               	addlw	2
 13337  12E3  0086               	movwf	6
 13338  12E4  3002               	movlw	2	; select bank4/5
 13339  12E5  0087               	movwf	7
 13340  12E6  0020               	movlb	0	; select bank0
 13341  12E7  0824               	movf	??_Flash_Memory_Modify,w
 13342  12E8  0081               	movwf	1
 13343                           
 13344                           ;MCU_16f1518_B1.c: 577: if(Memory->LoopSave)
 13345  12E9  0021               	movlb	1	; select bank1
 13346  12EA  0868               	movf	_Memory^(0+128),w
 13347  12EB  3E22               	addlw	34
 13348  12EC  0086               	movwf	6
 13349  12ED  3002               	movlw	2	; select bank4/5
 13350  12EE  0087               	movwf	7
 13351  12EF  1D01               	btfss	1,2
 13352  12F0  2B02               	goto	l9464
 13353                           
 13354                           ;MCU_16f1518_B1.c: 578: {
 13355                           ;MCU_16f1518_B1.c: 579: Memory->LoopSave=0;
 13356  12F1  0868               	movf	_Memory^(0+128),w
 13357  12F2  3E22               	addlw	34
 13358  12F3  0086               	movwf	6
 13359  12F4  3002               	movlw	2	; select bank4/5
 13360  12F5  0087               	movwf	7
 13361  12F6  1101               	bcf	1,2
 13362                           
 13363                           ;MCU_16f1518_B1.c: 580: TMain->FirstOpen=0;
 13364  12F7  0869               	movf	_TMain^(0+128),w
 13365  12F8  0086               	movwf	6
 13366  12F9  3001               	movlw	1	; select bank2/3
 13367  12FA  0087               	movwf	7
 13368  12FB  1281               	bcf	1,5
 13369                           
 13370                           ;MCU_16f1518_B1.c: 581: TMain->First=0;
 13371  12FC  0869               	movf	_TMain^(0+128),w
 13372  12FD  3E03               	addlw	3
 13373  12FE  0086               	movwf	6
 13374  12FF  3001               	movlw	1	; select bank2/3
 13375  1300  0087               	movwf	7
 13376  1301  1081               	bcf	1,1
 13377  1302                     l9464:	
 13378                           
 13379                           ;MCU_16f1518_B1.c: 583: }
 13380                           ;MCU_16f1518_B1.c: 584: GIE=0;
 13381  1302  138B               	bcf	11,7	;volatile
 13382                           
 13383                           ;MCU_16f1518_B1.c: 585: Flash_Memory_Erasing();
 13384  1303  31A4  248E  3192   	fcall	_Flash_Memory_Erasing
 13385                           
 13386                           ;MCU_16f1518_B1.c: 586: Flash_Memory_Write();
 13387  1306  319A  226E         	fcall	_Flash_Memory_Write
 13388                           
 13389                           ;MCU_16f1518_B1.c: 587: GIE=1;
 13390  1308  178B               	bsf	11,7	;volatile
 13391  1309  0008               	return
 13392  130A                     __end_of_Flash_Memory_Modify:	
 13393                           
 13394                           	psect	text76
 13395  248E                     __ptext76:	
 13396 ;; *************** function _Flash_Memory_Erasing *****************
 13397 ;; Defined at:
 13398 ;;		line 551 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;		None
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;		None               void
 13405 ;; Registers used:
 13406 ;;		wreg, status,2, status,0, pclath, cstack
 13407 ;; Tracked objects:
 13408 ;;		On entry : 0/0
 13409 ;;		On exit  : 0/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13416 ;;Total ram usage:        0 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    5
 13419 ;; This function calls:
 13420 ;;		_Flash_Memory_Unlock
 13421 ;; This function is called by:
 13422 ;;		_Flash_Memory_Modify
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           
 13427                           ;psect for function _Flash_Memory_Erasing
 13428  248E                     _Flash_Memory_Erasing:	
 13429                           
 13430                           ;MCU_16f1518_B1.c: 553: CFGS=0;
 13431                           
 13432                           ;incstack = 0
 13433                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13434  248E  0023               	movlb	3	; select bank3
 13435  248F  1315               	bcf	21,6	;volatile
 13436                           
 13437                           ;MCU_16f1518_B1.c: 554: PMADRH=0x30;
 13438  2490  3030               	movlw	48
 13439  2491  0092               	movwf	18	;volatile
 13440                           
 13441                           ;MCU_16f1518_B1.c: 555: PMADRL=0x00;
 13442  2492  0191               	clrf	17	;volatile
 13443                           
 13444                           ;MCU_16f1518_B1.c: 556: FREE=1;
 13445  2493  1615               	bsf	21,4	;volatile
 13446                           
 13447                           ;MCU_16f1518_B1.c: 557: WREN=1;
 13448  2494  1515               	bsf	21,2	;volatile
 13449                           
 13450                           ;MCU_16f1518_B1.c: 558: Flash_Memory_Unlock();
 13451  2495  31A3  23EB         	fcall	_Flash_Memory_Unlock
 13452                           
 13453                           ;MCU_16f1518_B1.c: 559: WREN=0;
 13454  2497  0023               	movlb	3	; select bank3
 13455  2498  1115               	bcf	21,2	;volatile
 13456  2499  0008               	return
 13457  249A                     __end_of_Flash_Memory_Erasing:	
 13458                           
 13459                           	psect	text77
 13460  0CD7                     __ptext77:	
 13461 ;; *************** function _Flash_Memory_Initialization *****************
 13462 ;; Defined at:
 13463 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;		None
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  i               1   62[BANK0 ] unsigned char 
 13468 ;; Return value:  Size  Location     Type
 13469 ;;		None               void
 13470 ;; Registers used:
 13471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;Total ram usage:        2 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    7
 13484 ;; This function calls:
 13485 ;;		_Flash_Memory_Read
 13486 ;;		_Flash_Memory_Write
 13487 ;;		_setPercentValue
 13488 ;; This function is called by:
 13489 ;;		_main
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           
 13494                           ;psect for function _Flash_Memory_Initialization
 13495  0CD7                     _Flash_Memory_Initialization:	
 13496                           
 13497                           ;MCU_16f1518_B1.c: 431: char i;
 13498                           ;MCU_16f1518_B1.c: 432: if(Flash_Memory_Read(31) == 0xaa)
 13499                           
 13500                           ;incstack = 0
 13501                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13502  0CD7  301F               	movlw	31
 13503  0CD8  31A6  26A4  318C   	fcall	_Flash_Memory_Read
 13504  0CDB  3AAA               	xorlw	170
 13505  0CDC  1D03               	skipz
 13506  0CDD  2D50               	goto	l9810
 13507                           
 13508                           ;MCU_16f1518_B1.c: 433: {
 13509                           ;MCU_16f1518_B1.c: 434: Product->Data[12]=Flash_Memory_Read(0);
 13510  0CDE  3000               	movlw	0
 13511  0CDF  31A6  26A4  318C   	fcall	_Flash_Memory_Read
 13512  0CE2  0020               	movlb	0	; select bank0
 13513  0CE3  00DD               	movwf	??_Flash_Memory_Initialization
 13514  0CE4  086F               	movf	_Product,w
 13515  0CE5  3E0C               	addlw	12
 13516  0CE6  0086               	movwf	6
 13517  0CE7  3001               	movlw	1	; select bank2/3
 13518  0CE8  0087               	movwf	7
 13519  0CE9  085D               	movf	??_Flash_Memory_Initialization,w
 13520  0CEA  0081               	movwf	1
 13521                           
 13522                           ;MCU_16f1518_B1.c: 435: Product->Data[13]=Flash_Memory_Read(1);
 13523  0CEB  3001               	movlw	1
 13524  0CEC  31A6  26A4  318C   	fcall	_Flash_Memory_Read
 13525  0CEF  0020               	movlb	0	; select bank0
 13526  0CF0  00DD               	movwf	??_Flash_Memory_Initialization
 13527  0CF1  086F               	movf	_Product,w
 13528  0CF2  3E0D               	addlw	13
 13529  0CF3  0086               	movwf	6
 13530  0CF4  3001               	movlw	1	; select bank2/3
 13531  0CF5  0087               	movwf	7
 13532  0CF6  085D               	movf	??_Flash_Memory_Initialization,w
 13533  0CF7  0081               	movwf	1
 13534                           
 13535                           ;MCU_16f1518_B1.c: 436: Product->Data[14]=Flash_Memory_Read(2);
 13536  0CF8  3002               	movlw	2
 13537  0CF9  31A6  26A4  318C   	fcall	_Flash_Memory_Read
 13538  0CFC  0020               	movlb	0	; select bank0
 13539  0CFD  00DD               	movwf	??_Flash_Memory_Initialization
 13540  0CFE  086F               	movf	_Product,w
 13541  0CFF  3E0E               	addlw	14
 13542  0D00  0086               	movwf	6
 13543  0D01  3001               	movlw	1	; select bank2/3
 13544  0D02  0087               	movwf	7
 13545  0D03  085D               	movf	??_Flash_Memory_Initialization,w
 13546  0D04  0081               	movwf	1
 13547                           
 13548                           ;MCU_16f1518_B1.c: 442: i=setPercentValue(((char)((100-60)*1.5)));
 13549  0D05  303C               	movlw	60
 13550  0D06  319D  2540  318C   	fcall	_setPercentValue
 13551  0D09  0020               	movlb	0	; select bank0
 13552  0D0A  00DD               	movwf	??_Flash_Memory_Initialization
 13553  0D0B  085D               	movf	??_Flash_Memory_Initialization,w
 13554  0D0C  00DE               	movwf	Flash_Memory_Initialization@i
 13555                           
 13556                           ;MCU_16f1518_B1.c: 443: Product->Data[21]=i;
 13557  0D0D  085E               	movf	Flash_Memory_Initialization@i,w
 13558  0D0E  00DD               	movwf	??_Flash_Memory_Initialization
 13559  0D0F  086F               	movf	_Product,w
 13560  0D10  3E15               	addlw	21
 13561  0D11  0086               	movwf	6
 13562  0D12  3001               	movlw	1	; select bank2/3
 13563  0D13  0087               	movwf	7
 13564  0D14  085D               	movf	??_Flash_Memory_Initialization,w
 13565  0D15  0081               	movwf	1
 13566                           
 13567                           ;MCU_16f1518_B1.c: 444: Product->Data[22]=i;
 13568  0D16  085E               	movf	Flash_Memory_Initialization@i,w
 13569  0D17  00DD               	movwf	??_Flash_Memory_Initialization
 13570  0D18  086F               	movf	_Product,w
 13571  0D19  3E16               	addlw	22
 13572  0D1A  0086               	movwf	6
 13573  0D1B  3001               	movlw	1	; select bank2/3
 13574  0D1C  0087               	movwf	7
 13575  0D1D  085D               	movf	??_Flash_Memory_Initialization,w
 13576  0D1E  0081               	movwf	1
 13577                           
 13578                           ;MCU_16f1518_B1.c: 445: Product->Data[23]=i;
 13579  0D1F  085E               	movf	Flash_Memory_Initialization@i,w
 13580  0D20  00DD               	movwf	??_Flash_Memory_Initialization
 13581  0D21  086F               	movf	_Product,w
 13582  0D22  3E17               	addlw	23
 13583  0D23  0086               	movwf	6
 13584  0D24  3001               	movlw	1	; select bank2/3
 13585  0D25  0087               	movwf	7
 13586  0D26  085D               	movf	??_Flash_Memory_Initialization,w
 13587  0D27  0081               	movwf	1
 13588                           
 13589                           ;MCU_16f1518_B1.c: 447: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 13590  0D28  086F               	movf	_Product,w
 13591  0D29  3E0C               	addlw	12
 13592  0D2A  0086               	movwf	6
 13593  0D2B  3001               	movlw	1	; select bank2/3
 13594  0D2C  0087               	movwf	7
 13595  0D2D  0801               	movf	1,w
 13596  0D2E  3AFF               	xorlw	255
 13597  0D2F  1D03               	skipz
 13598  0D30  0008               	return
 13599  0D31  086F               	movf	_Product,w
 13600  0D32  3E0D               	addlw	13
 13601  0D33  0086               	movwf	6
 13602  0D34  3001               	movlw	1	; select bank2/3
 13603  0D35  0087               	movwf	7
 13604  0D36  0801               	movf	1,w
 13605  0D37  3AFF               	xorlw	255
 13606  0D38  1D03               	skipz
 13607  0D39  0008               	return
 13608  0D3A  086F               	movf	_Product,w
 13609  0D3B  3E0E               	addlw	14
 13610  0D3C  0086               	movwf	6
 13611  0D3D  3001               	movlw	1	; select bank2/3
 13612  0D3E  0087               	movwf	7
 13613  0D3F  0801               	movf	1,w
 13614  0D40  3AFF               	xorlw	255
 13615  0D41  1D03               	skipz
 13616  0D42  0008               	return
 13617                           
 13618                           ;MCU_16f1518_B1.c: 448: {
 13619                           ;MCU_16f1518_B1.c: 449: TMain->FirstOpen=1;
 13620  0D43  0021               	movlb	1	; select bank1
 13621  0D44  0869               	movf	_TMain^(0+128),w
 13622  0D45  0086               	movwf	6
 13623  0D46  3001               	movlw	1	; select bank2/3
 13624  0D47  0087               	movwf	7
 13625  0D48  1681               	bsf	1,5
 13626                           
 13627                           ;MCU_16f1518_B1.c: 450: TMain->First=1;
 13628  0D49  0869               	movf	_TMain^(0+128),w
 13629  0D4A  3E03               	addlw	3
 13630  0D4B  0086               	movwf	6
 13631  0D4C  3001               	movlw	1	; select bank2/3
 13632  0D4D  0087               	movwf	7
 13633  0D4E  1481               	bsf	1,1
 13634                           
 13635                           ;MCU_16f1518_B1.c: 451: }
 13636                           ;MCU_16f1518_B1.c: 452: }
 13637  0D4F  0008               	return
 13638  0D50                     l9810:	
 13639                           
 13640                           ;MCU_16f1518_B1.c: 453: else
 13641                           ;MCU_16f1518_B1.c: 454: {
 13642                           ;MCU_16f1518_B1.c: 455: i=setPercentValue(((char)((100-60)*1.5)));
 13643  0D50  303C               	movlw	60
 13644  0D51  319D  2540  318C   	fcall	_setPercentValue
 13645  0D54  0020               	movlb	0	; select bank0
 13646  0D55  00DD               	movwf	??_Flash_Memory_Initialization
 13647  0D56  085D               	movf	??_Flash_Memory_Initialization,w
 13648  0D57  00DE               	movwf	Flash_Memory_Initialization@i
 13649                           
 13650                           ;MCU_16f1518_B1.c: 456: Memory->Data[0]=0xff;
 13651  0D58  30FF               	movlw	255
 13652  0D59  00DD               	movwf	??_Flash_Memory_Initialization
 13653  0D5A  0021               	movlb	1	; select bank1
 13654  0D5B  0868               	movf	_Memory^(0+128),w
 13655  0D5C  0086               	movwf	6
 13656  0D5D  3002               	movlw	2	; select bank4/5
 13657  0D5E  0087               	movwf	7
 13658  0D5F  0020               	movlb	0	; select bank0
 13659  0D60  085D               	movf	??_Flash_Memory_Initialization,w
 13660  0D61  0081               	movwf	1
 13661                           
 13662                           ;MCU_16f1518_B1.c: 457: Memory->Data[1]=0xff;
 13663  0D62  30FF               	movlw	255
 13664  0D63  00DD               	movwf	??_Flash_Memory_Initialization
 13665  0D64  0021               	movlb	1	; select bank1
 13666  0D65  0A68               	incf	_Memory^(0+128),w
 13667  0D66  0086               	movwf	6
 13668  0D67  3002               	movlw	2	; select bank4/5
 13669  0D68  0087               	movwf	7
 13670  0D69  0020               	movlb	0	; select bank0
 13671  0D6A  085D               	movf	??_Flash_Memory_Initialization,w
 13672  0D6B  0081               	movwf	1
 13673                           
 13674                           ;MCU_16f1518_B1.c: 458: Memory->Data[2]=0xff;
 13675  0D6C  30FF               	movlw	255
 13676  0D6D  00DD               	movwf	??_Flash_Memory_Initialization
 13677  0D6E  0021               	movlb	1	; select bank1
 13678  0D6F  0868               	movf	_Memory^(0+128),w
 13679  0D70  3E02               	addlw	2
 13680  0D71  0086               	movwf	6
 13681  0D72  3002               	movlw	2	; select bank4/5
 13682  0D73  0087               	movwf	7
 13683  0D74  0020               	movlb	0	; select bank0
 13684  0D75  085D               	movf	??_Flash_Memory_Initialization,w
 13685  0D76  0081               	movwf	1
 13686                           
 13687                           ;MCU_16f1518_B1.c: 459: Memory->Data[3]=0xff;
 13688  0D77  30FF               	movlw	255
 13689  0D78  00DD               	movwf	??_Flash_Memory_Initialization
 13690  0D79  0021               	movlb	1	; select bank1
 13691  0D7A  0868               	movf	_Memory^(0+128),w
 13692  0D7B  3E03               	addlw	3
 13693  0D7C  0086               	movwf	6
 13694  0D7D  3002               	movlw	2	; select bank4/5
 13695  0D7E  0087               	movwf	7
 13696  0D7F  0020               	movlb	0	; select bank0
 13697  0D80  085D               	movf	??_Flash_Memory_Initialization,w
 13698  0D81  0081               	movwf	1
 13699                           
 13700                           ;MCU_16f1518_B1.c: 460: Memory->Data[4]=0xff;
 13701  0D82  30FF               	movlw	255
 13702  0D83  00DD               	movwf	??_Flash_Memory_Initialization
 13703  0D84  0021               	movlb	1	; select bank1
 13704  0D85  0868               	movf	_Memory^(0+128),w
 13705  0D86  3E04               	addlw	4
 13706  0D87  0086               	movwf	6
 13707  0D88  3002               	movlw	2	; select bank4/5
 13708  0D89  0087               	movwf	7
 13709  0D8A  0020               	movlb	0	; select bank0
 13710  0D8B  085D               	movf	??_Flash_Memory_Initialization,w
 13711  0D8C  0081               	movwf	1
 13712                           
 13713                           ;MCU_16f1518_B1.c: 461: Memory->Data[5]=0xff;
 13714  0D8D  30FF               	movlw	255
 13715  0D8E  00DD               	movwf	??_Flash_Memory_Initialization
 13716  0D8F  0021               	movlb	1	; select bank1
 13717  0D90  0868               	movf	_Memory^(0+128),w
 13718  0D91  3E05               	addlw	5
 13719  0D92  0086               	movwf	6
 13720  0D93  3002               	movlw	2	; select bank4/5
 13721  0D94  0087               	movwf	7
 13722  0D95  0020               	movlb	0	; select bank0
 13723  0D96  085D               	movf	??_Flash_Memory_Initialization,w
 13724  0D97  0081               	movwf	1
 13725                           
 13726                           ;MCU_16f1518_B1.c: 462: Memory->Data[31]=0xaa;
 13727  0D98  30AA               	movlw	170
 13728  0D99  00DD               	movwf	??_Flash_Memory_Initialization
 13729  0D9A  0021               	movlb	1	; select bank1
 13730  0D9B  0868               	movf	_Memory^(0+128),w
 13731  0D9C  3E1F               	addlw	31
 13732  0D9D  0086               	movwf	6
 13733  0D9E  3002               	movlw	2	; select bank4/5
 13734  0D9F  0087               	movwf	7
 13735  0DA0  0020               	movlb	0	; select bank0
 13736  0DA1  085D               	movf	??_Flash_Memory_Initialization,w
 13737  0DA2  0081               	movwf	1
 13738                           
 13739                           ;MCU_16f1518_B1.c: 463: Product->Data[21]=i;
 13740  0DA3  085E               	movf	Flash_Memory_Initialization@i,w
 13741  0DA4  00DD               	movwf	??_Flash_Memory_Initialization
 13742  0DA5  086F               	movf	_Product,w
 13743  0DA6  3E15               	addlw	21
 13744  0DA7  0086               	movwf	6
 13745  0DA8  3001               	movlw	1	; select bank2/3
 13746  0DA9  0087               	movwf	7
 13747  0DAA  085D               	movf	??_Flash_Memory_Initialization,w
 13748  0DAB  0081               	movwf	1
 13749                           
 13750                           ;MCU_16f1518_B1.c: 464: Product->Data[22]=i;
 13751  0DAC  085E               	movf	Flash_Memory_Initialization@i,w
 13752  0DAD  00DD               	movwf	??_Flash_Memory_Initialization
 13753  0DAE  086F               	movf	_Product,w
 13754  0DAF  3E16               	addlw	22
 13755  0DB0  0086               	movwf	6
 13756  0DB1  3001               	movlw	1	; select bank2/3
 13757  0DB2  0087               	movwf	7
 13758  0DB3  085D               	movf	??_Flash_Memory_Initialization,w
 13759  0DB4  0081               	movwf	1
 13760                           
 13761                           ;MCU_16f1518_B1.c: 465: Product->Data[23]=i;
 13762  0DB5  085E               	movf	Flash_Memory_Initialization@i,w
 13763  0DB6  00DD               	movwf	??_Flash_Memory_Initialization
 13764  0DB7  086F               	movf	_Product,w
 13765  0DB8  3E17               	addlw	23
 13766  0DB9  0086               	movwf	6
 13767  0DBA  3001               	movlw	1	; select bank2/3
 13768  0DBB  0087               	movwf	7
 13769  0DBC  085D               	movf	??_Flash_Memory_Initialization,w
 13770  0DBD  0081               	movwf	1
 13771                           
 13772                           ;MCU_16f1518_B1.c: 466: GIE=0;
 13773  0DBE  138B               	bcf	11,7	;volatile
 13774                           
 13775                           ;MCU_16f1518_B1.c: 467: Flash_Memory_Write();
 13776  0DBF  319A  226E         	fcall	_Flash_Memory_Write
 13777                           
 13778                           ;MCU_16f1518_B1.c: 468: GIE=1;
 13779  0DC1  178B               	bsf	11,7	;volatile
 13780                           
 13781                           ;MCU_16f1518_B1.c: 469: TMain->FirstOpen=1;
 13782  0DC2  0021               	movlb	1	; select bank1
 13783  0DC3  0869               	movf	_TMain^(0+128),w
 13784  0DC4  0086               	movwf	6
 13785  0DC5  3001               	movlw	1	; select bank2/3
 13786  0DC6  0087               	movwf	7
 13787  0DC7  1681               	bsf	1,5
 13788                           
 13789                           ;MCU_16f1518_B1.c: 470: TMain->First=1;
 13790  0DC8  0869               	movf	_TMain^(0+128),w
 13791  0DC9  3E03               	addlw	3
 13792  0DCA  0086               	movwf	6
 13793  0DCB  3001               	movlw	1	; select bank2/3
 13794  0DCC  0087               	movwf	7
 13795  0DCD  1481               	bsf	1,1
 13796  0DCE  0008               	return
 13797  0DCF                     __end_of_Flash_Memory_Initialization:	
 13798                           
 13799                           	psect	text78
 13800  1A6E                     __ptext78:	
 13801 ;; *************** function _Flash_Memory_Write *****************
 13802 ;; Defined at:
 13803 ;;		line 531 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;		None
 13806 ;; Auto vars:     Size  Location     Type
 13807 ;;  i               1    1[BANK0 ] unsigned char 
 13808 ;; Return value:  Size  Location     Type
 13809 ;;		None               void
 13810 ;; Registers used:
 13811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;Total ram usage:        2 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    5
 13824 ;; This function calls:
 13825 ;;		_Flash_Memory_Unlock
 13826 ;; This function is called by:
 13827 ;;		_Flash_Memory_Initialization
 13828 ;;		_Flash_Memory_Modify
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           
 13833                           ;psect for function _Flash_Memory_Write
 13834  1A6E                     _Flash_Memory_Write:	
 13835                           
 13836                           ;MCU_16f1518_B1.c: 533: char i;
 13837                           ;MCU_16f1518_B1.c: 534: CFGS=0;
 13838                           
 13839                           ;incstack = 0
 13840                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13841  1A6E  0023               	movlb	3	; select bank3
 13842  1A6F  1315               	bcf	21,6	;volatile
 13843                           
 13844                           ;MCU_16f1518_B1.c: 535: PMADRH=0x30;
 13845  1A70  3030               	movlw	48
 13846  1A71  0092               	movwf	18	;volatile
 13847                           
 13848                           ;MCU_16f1518_B1.c: 536: PMDATH=0;
 13849  1A72  0194               	clrf	20	;volatile
 13850                           
 13851                           ;MCU_16f1518_B1.c: 537: FREE=0;
 13852  1A73  1215               	bcf	21,4	;volatile
 13853                           
 13854                           ;MCU_16f1518_B1.c: 538: LWLO=1;
 13855  1A74  1695               	bsf	21,5	;volatile
 13856                           
 13857                           ;MCU_16f1518_B1.c: 539: WREN=1;
 13858  1A75  1515               	bsf	21,2	;volatile
 13859                           
 13860                           ;MCU_16f1518_B1.c: 540: for(i=0 ; i<32 ; i++)
 13861  1A76  0020               	movlb	0	; select bank0
 13862  1A77  01A1               	clrf	Flash_Memory_Write@i
 13863  1A78  3020               	movlw	32
 13864  1A79  0221               	subwf	Flash_Memory_Write@i,w
 13865  1A7A  1803               	btfsc	3,0
 13866  1A7B  2A98               	goto	l1748
 13867  1A7C                     l9092:	
 13868                           
 13869                           ;MCU_16f1518_B1.c: 541: {
 13870                           ;MCU_16f1518_B1.c: 542: PMADRL=i;
 13871  1A7C  0821               	movf	Flash_Memory_Write@i,w
 13872  1A7D  0023               	movlb	3	; select bank3
 13873  1A7E  0091               	movwf	17	;volatile
 13874                           
 13875                           ;MCU_16f1518_B1.c: 543: PMDATL=Memory->Data[i];
 13876  1A7F  0020               	movlb	0	; select bank0
 13877  1A80  0821               	movf	Flash_Memory_Write@i,w
 13878  1A81  0021               	movlb	1	; select bank1
 13879  1A82  0768               	addwf	_Memory^(0+128),w
 13880  1A83  0020               	movlb	0	; select bank0
 13881  1A84  00A0               	movwf	??_Flash_Memory_Write
 13882  1A85  0820               	movf	??_Flash_Memory_Write,w
 13883  1A86  0086               	movwf	6
 13884  1A87  3002               	movlw	2	; select bank4/5
 13885  1A88  0087               	movwf	7
 13886  1A89  0801               	movf	1,w
 13887  1A8A  0023               	movlb	3	; select bank3
 13888  1A8B  0093               	movwf	19	;volatile
 13889                           
 13890                           ;MCU_16f1518_B1.c: 544: Flash_Memory_Unlock();
 13891  1A8C  31A3  23EB  319A   	fcall	_Flash_Memory_Unlock
 13892  1A8F  3001               	movlw	1
 13893  1A90  0020               	movlb	0	; select bank0
 13894  1A91  00A0               	movwf	??_Flash_Memory_Write
 13895  1A92  0820               	movf	??_Flash_Memory_Write,w
 13896  1A93  07A1               	addwf	Flash_Memory_Write@i,f
 13897  1A94  3020               	movlw	32
 13898  1A95  0221               	subwf	Flash_Memory_Write@i,w
 13899  1A96  1C03               	skipc
 13900  1A97  2A7C               	goto	l9092
 13901  1A98                     l1748:	
 13902                           
 13903                           ;MCU_16f1518_B1.c: 545: }
 13904                           ;MCU_16f1518_B1.c: 546: LWLO=0;
 13905  1A98  0023               	movlb	3	; select bank3
 13906  1A99  1295               	bcf	21,5	;volatile
 13907                           
 13908                           ;MCU_16f1518_B1.c: 547: Flash_Memory_Unlock();
 13909  1A9A  31A3  23EB         	fcall	_Flash_Memory_Unlock
 13910                           
 13911                           ;MCU_16f1518_B1.c: 548: WREN=0;
 13912  1A9C  0023               	movlb	3	; select bank3
 13913  1A9D  1115               	bcf	21,2	;volatile
 13914  1A9E  0008               	return
 13915  1A9F                     __end_of_Flash_Memory_Write:	
 13916                           
 13917                           	psect	text79
 13918  23EB                     __ptext79:	
 13919 ;; *************** function _Flash_Memory_Unlock *****************
 13920 ;; Defined at:
 13921 ;;		line 510 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;		None
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;		None
 13926 ;; Return value:  Size  Location     Type
 13927 ;;		None               void
 13928 ;; Registers used:
 13929 ;;		wreg
 13930 ;; Tracked objects:
 13931 ;;		On entry : 0/0
 13932 ;;		On exit  : 0/0
 13933 ;;		Unchanged: 0/0
 13934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;Total ram usage:        0 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; Hardware stack levels required when called:    4
 13942 ;; This function calls:
 13943 ;;		Nothing
 13944 ;; This function is called by:
 13945 ;;		_Flash_Memory_Write
 13946 ;;		_Flash_Memory_Erasing
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function _Flash_Memory_Unlock
 13952  23EB                     _Flash_Memory_Unlock:	
 13953                           
 13954                           ;MCU_16f1518_B1.c: 512: PMCON2=0x55;
 13955                           
 13956                           ;incstack = 0
 13957                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13958  23EB  3055               	movlw	85
 13959  23EC  0023               	movlb	3	; select bank3
 13960  23ED  0096               	movwf	22	;volatile
 13961                           
 13962                           ;MCU_16f1518_B1.c: 513: PMCON2=0xaa;
 13963  23EE  30AA               	movlw	170
 13964  23EF  0096               	movwf	22	;volatile
 13965                           
 13966                           ;MCU_16f1518_B1.c: 514: WR=1;
 13967  23F0  1495               	bsf	21,1	;volatile
 13968                           
 13969                           ;MCU_16f1518_B1.c: 515: __nop();
 13970  23F1  0000               	nop
 13971                           
 13972                           ;MCU_16f1518_B1.c: 516: __nop();
 13973  23F2  0000               	nop
 13974  23F3  0008               	return
 13975  23F4                     __end_of_Flash_Memory_Unlock:	
 13976                           
 13977                           	psect	text80
 13978  26A4                     __ptext80:	
 13979 ;; *************** function _Flash_Memory_Read *****************
 13980 ;; Defined at:
 13981 ;;		line 519 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  address         1    wreg     unsigned char 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;  address         1    2[BANK0 ] unsigned char 
 13986 ;;  ret             1    3[BANK0 ] unsigned char 
 13987 ;;  i               1    1[BANK0 ] unsigned char 
 13988 ;; Return value:  Size  Location     Type
 13989 ;;                  1    wreg      unsigned char 
 13990 ;; Registers used:
 13991 ;;		wreg, status,2
 13992 ;; Tracked objects:
 13993 ;;		On entry : 0/0
 13994 ;;		On exit  : 0/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;Total ram usage:        4 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    4
 14004 ;; This function calls:
 14005 ;;		Nothing
 14006 ;; This function is called by:
 14007 ;;		_Flash_Memory_Initialization
 14008 ;;		_Flash_Memory_Modify
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           
 14013                           ;psect for function _Flash_Memory_Read
 14014  26A4                     _Flash_Memory_Read:	
 14015                           
 14016                           ;incstack = 0
 14017                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14018                           ;Flash_Memory_Read@address stored from wreg
 14019  26A4  0020               	movlb	0	; select bank0
 14020  26A5  00A2               	movwf	Flash_Memory_Read@address
 14021                           
 14022                           ;MCU_16f1518_B1.c: 521: char i,ret=0;
 14023  26A6  01A3               	clrf	Flash_Memory_Read@ret
 14024                           
 14025                           ;MCU_16f1518_B1.c: 522: PMADRH=0x30;
 14026  26A7  3030               	movlw	48
 14027  26A8  0023               	movlb	3	; select bank3
 14028  26A9  0092               	movwf	18	;volatile
 14029                           
 14030                           ;MCU_16f1518_B1.c: 523: PMADRL=address;
 14031  26AA  0020               	movlb	0	; select bank0
 14032  26AB  0822               	movf	Flash_Memory_Read@address,w
 14033  26AC  0023               	movlb	3	; select bank3
 14034  26AD  0091               	movwf	17	;volatile
 14035                           
 14036                           ;MCU_16f1518_B1.c: 524: CFGS=0;
 14037  26AE  1315               	bcf	21,6	;volatile
 14038                           
 14039                           ;MCU_16f1518_B1.c: 525: RD=1;
 14040  26AF  1415               	bsf	21,0	;volatile
 14041                           
 14042                           ;MCU_16f1518_B1.c: 526: i=PMDATH;
 14043  26B0  0814               	movf	20,w	;volatile
 14044  26B1  0020               	movlb	0	; select bank0
 14045  26B2  00A0               	movwf	??_Flash_Memory_Read
 14046  26B3  0820               	movf	??_Flash_Memory_Read,w
 14047  26B4  00A1               	movwf	Flash_Memory_Read@i
 14048                           
 14049                           ;MCU_16f1518_B1.c: 527: ret=PMDATL;
 14050  26B5  0023               	movlb	3	; select bank3
 14051  26B6  0813               	movf	19,w	;volatile
 14052  26B7  0020               	movlb	0	; select bank0
 14053  26B8  00A0               	movwf	??_Flash_Memory_Read
 14054  26B9  0820               	movf	??_Flash_Memory_Read,w
 14055  26BA  00A3               	movwf	Flash_Memory_Read@ret
 14056                           
 14057                           ;MCU_16f1518_B1.c: 528: return ret;
 14058  26BB  0823               	movf	Flash_Memory_Read@ret,w
 14059  26BC  0008               	return
 14060  26BD                     __end_of_Flash_Memory_Read:	
 14061                           
 14062                           	psect	text81
 14063  2433                     __ptext81:	
 14064 ;; *************** function _DimmerLights_Main *****************
 14065 ;; Defined at:
 14066 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14067 ;; Parameters:    Size  Location     Type
 14068 ;;		None
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;		None
 14071 ;; Return value:  Size  Location     Type
 14072 ;;		None               void
 14073 ;; Registers used:
 14074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;Total ram usage:        0 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    9
 14087 ;; This function calls:
 14088 ;;		_DimmerLights_Close
 14089 ;;		_setDimmerLights_Main
 14090 ;; This function is called by:
 14091 ;;		_main
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           
 14096                           ;psect for function _DimmerLights_Main
 14097  2433                     _DimmerLights_Main:	
 14098                           
 14099                           ;Dimmer_B1.c: 106: setDimmerLights_Main(1);
 14100                           
 14101                           ;incstack = 0
 14102                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14103  2433  3001               	movlw	1
 14104  2434  3195  25D1  31A4   	fcall	_setDimmerLights_Main
 14105                           
 14106                           ;Dimmer_B1.c: 110: setDimmerLights_Main(2);
 14107  2437  3002               	movlw	2
 14108  2438  3195  25D1  31A4   	fcall	_setDimmerLights_Main
 14109                           
 14110                           ;Dimmer_B1.c: 117: DimmerLights_Close();
 14111  243B  31A6  26F0         	fcall	_DimmerLights_Close
 14112  243D  0008               	return
 14113  243E                     __end_of_DimmerLights_Main:	
 14114                           
 14115                           	psect	text82
 14116  15D1                     __ptext82:	
 14117 ;; *************** function _setDimmerLights_Main *****************
 14118 ;; Defined at:
 14119 ;;		line 120 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;  lights          1    wreg     unsigned char 
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;  lights          1   66[BANK0 ] unsigned char 
 14124 ;;  clear           1   65[BANK0 ] unsigned char 
 14125 ;; Return value:  Size  Location     Type
 14126 ;;		None               void
 14127 ;; Registers used:
 14128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14129 ;; Tracked objects:
 14130 ;;		On entry : 0/0
 14131 ;;		On exit  : 0/0
 14132 ;;		Unchanged: 0/0
 14133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;Total ram usage:        2 bytes
 14139 ;; Hardware stack levels used:    1
 14140 ;; Hardware stack levels required when called:    8
 14141 ;; This function calls:
 14142 ;;		_DimmerLightsPointSelect
 14143 ;;		_setBuz
 14144 ;;		_setDimmerLights
 14145 ;;		_setDimmerLights_Adj
 14146 ;; This function is called by:
 14147 ;;		_DimmerLights_Main
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _setDimmerLights_Main
 14153  15D1                     _setDimmerLights_Main:	
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14157                           ;setDimmerLights_Main@lights stored from wreg
 14158  15D1  0020               	movlb	0	; select bank0
 14159  15D2  00E2               	movwf	setDimmerLights_Main@lights
 14160                           
 14161                           ;Dimmer_B1.c: 122: char clear=1;
 14162  15D3  01E1               	clrf	setDimmerLights_Main@clear
 14163  15D4  0AE1               	incf	setDimmerLights_Main@clear,f
 14164                           
 14165                           ;Dimmer_B1.c: 123: DimmerLightsPointSelect(lights);
 14166  15D5  0862               	movf	setDimmerLights_Main@lights,w
 14167  15D6  31A5  25B1  3195   	fcall	_DimmerLightsPointSelect
 14168                           
 14169                           ;Dimmer_B1.c: 141: if(lights == 1)
 14170  15D9  0020               	movlb	0	; select bank0
 14171  15DA  0862               	movf	setDimmerLights_Main@lights,w
 14172  15DB  3A01               	xorlw	1
 14173  15DC  1D03               	skipz
 14174  15DD  2DE0               	goto	l9354
 14175                           
 14176                           ;Dimmer_B1.c: 142: {
 14177                           ;Dimmer_B1.c: 143: clear=(!DimmerLights22->Clear)?0:1;
 14178  15DE  087A               	movf	_DimmerLights22,w
 14179  15DF  2DE5               	goto	L14
 14180  15E0                     l9354:	
 14181                           ;Dimmer_B1.c: 144: }
 14182                           
 14183                           
 14184                           ;Dimmer_B1.c: 145: else if(lights == 2)
 14185  15E0  0862               	movf	setDimmerLights_Main@lights,w
 14186  15E1  3A02               	xorlw	2
 14187  15E2  1D03               	skipz
 14188  15E3  2DED               	goto	l9358
 14189                           
 14190                           ;Dimmer_B1.c: 146: {
 14191                           ;Dimmer_B1.c: 147: clear=(!DimmerLights11->Clear)?0:1;
 14192  15E4  0879               	movf	_DimmerLights11,w
 14193  15E5                     L14:	
 14194  15E5  3E0C               	addlw	12
 14195  15E6  0086               	movwf	6
 14196  15E7  3001               	movlw	1	; select bank2/3
 14197  15E8  0087               	movwf	7
 14198  15E9  3000               	movlw	0
 14199  15EA  1801               	btfsc	1,0
 14200  15EB  3001               	movlw	1
 14201  15EC  00E1               	movwf	setDimmerLights_Main@clear
 14202  15ED                     l9358:	
 14203                           
 14204                           ;Dimmer_B1.c: 148: }
 14205                           ;Dimmer_B1.c: 151: if(DimmerLights->Trigger)
 14206  15ED  086C               	movf	_DimmerLights,w
 14207  15EE  3E09               	addlw	9
 14208  15EF  0086               	movwf	6
 14209  15F0  3001               	movlw	1	; select bank2/3
 14210  15F1  0087               	movwf	7
 14211  15F2  1C81               	btfss	1,1
 14212  15F3  2E23               	goto	l9376
 14213                           
 14214                           ;Dimmer_B1.c: 152: {
 14215                           ;Dimmer_B1.c: 153: if(clear)
 14216  15F4  0861               	movf	setDimmerLights_Main@clear,w
 14217  15F5  1903               	btfsc	3,2
 14218  15F6  0008               	return
 14219                           
 14220                           ;Dimmer_B1.c: 154: {
 14221                           ;Dimmer_B1.c: 155: if(DimmerLights->Switch)
 14222  15F7  086C               	movf	_DimmerLights,w
 14223  15F8  3E09               	addlw	9
 14224  15F9  0086               	movwf	6
 14225  15FA  3001               	movlw	1	; select bank2/3
 14226  15FB  0087               	movwf	7
 14227  15FC  1C01               	btfss	1,0
 14228  15FD  2E11               	goto	l9370
 14229                           
 14230                           ;Dimmer_B1.c: 156: {
 14231                           ;Dimmer_B1.c: 157: DimmerLights->Trigger=0;
 14232  15FE  086C               	movf	_DimmerLights,w
 14233  15FF  3E09               	addlw	9
 14234  1600  0086               	movwf	6
 14235  1601  3001               	movlw	1	; select bank2/3
 14236  1602  0087               	movwf	7
 14237  1603  1081               	bcf	1,1
 14238                           
 14239                           ;Dimmer_B1.c: 158: setDimmerLights(lights,1);
 14240  1604  01A4               	clrf	setDimmerLights@status
 14241  1605  0AA4               	incf	setDimmerLights@status,f
 14242  1606  0862               	movf	setDimmerLights_Main@lights,w
 14243  1607  3188  2001         	fcall	_setDimmerLights
 14244                           
 14245                           ;Dimmer_B1.c: 161: DimmerLights->Clear=0;
 14246  1609  0020               	movlb	0	; select bank0
 14247  160A  086C               	movf	_DimmerLights,w
 14248  160B  3E0C               	addlw	12
 14249  160C  0086               	movwf	6
 14250  160D  3001               	movlw	1	; select bank2/3
 14251  160E  0087               	movwf	7
 14252  160F  1001               	bcf	1,0
 14253                           
 14254                           ;Dimmer_B1.c: 163: }
 14255  1610  0008               	return
 14256  1611                     l9370:	
 14257                           
 14258                           ;Dimmer_B1.c: 164: else
 14259                           ;Dimmer_B1.c: 165: {
 14260                           ;Dimmer_B1.c: 166: DimmerLights->Trigger=0;
 14261  1611  086C               	movf	_DimmerLights,w
 14262  1612  3E09               	addlw	9
 14263  1613  0086               	movwf	6
 14264  1614  3001               	movlw	1	; select bank2/3
 14265  1615  0087               	movwf	7
 14266  1616  1081               	bcf	1,1
 14267                           
 14268                           ;Dimmer_B1.c: 167: setDimmerLights(lights,0);
 14269  1617  01A4               	clrf	setDimmerLights@status
 14270  1618  0862               	movf	setDimmerLights_Main@lights,w
 14271  1619  3188  2001         	fcall	_setDimmerLights
 14272                           
 14273                           ;Dimmer_B1.c: 170: DimmerLights->Clear=0;
 14274  161B  0020               	movlb	0	; select bank0
 14275  161C  086C               	movf	_DimmerLights,w
 14276  161D  3E0C               	addlw	12
 14277  161E  0086               	movwf	6
 14278  161F  3001               	movlw	1	; select bank2/3
 14279  1620  0087               	movwf	7
 14280  1621  1001               	bcf	1,0
 14281                           
 14282                           ;Dimmer_B1.c: 172: }
 14283                           ;Dimmer_B1.c: 173: }
 14284                           ;Dimmer_B1.c: 174: }
 14285  1622  0008               	return
 14286  1623                     l9376:	
 14287                           
 14288                           ;Dimmer_B1.c: 175: else
 14289                           ;Dimmer_B1.c: 176: {
 14290                           ;Dimmer_B1.c: 177: if(DimmerLights->TriggerAdj)
 14291  1623  086C               	movf	_DimmerLights,w
 14292  1624  3E09               	addlw	9
 14293  1625  0086               	movwf	6
 14294  1626  3001               	movlw	1	; select bank2/3
 14295  1627  0087               	movwf	7
 14296  1628  1D81               	btfss	1,3
 14297  1629  0008               	return
 14298                           
 14299                           ;Dimmer_B1.c: 178: {
 14300                           ;Dimmer_B1.c: 179: if(clear)
 14301  162A  0861               	movf	setDimmerLights_Main@clear,w
 14302  162B  1903               	btfsc	3,2
 14303  162C  0008               	return
 14304                           
 14305                           ;Dimmer_B1.c: 180: {
 14306                           ;Dimmer_B1.c: 181: DimmerLightsPointSelect(lights);
 14307  162D  0862               	movf	setDimmerLights_Main@lights,w
 14308  162E  31A5  25B1  3195   	fcall	_DimmerLightsPointSelect
 14309                           
 14310                           ;Dimmer_B1.c: 182: DimmerLights->TriggerAdj=0;
 14311  1631  0020               	movlb	0	; select bank0
 14312  1632  086C               	movf	_DimmerLights,w
 14313  1633  3E09               	addlw	9
 14314  1634  0086               	movwf	6
 14315  1635  3001               	movlw	1	; select bank2/3
 14316  1636  0087               	movwf	7
 14317  1637  1181               	bcf	1,3
 14318                           
 14319                           ;Dimmer_B1.c: 183: if(DimmerLights->AdjGo)
 14320  1638  086C               	movf	_DimmerLights,w
 14321  1639  3E09               	addlw	9
 14322  163A  0086               	movwf	6
 14323  163B  3001               	movlw	1	; select bank2/3
 14324  163C  0087               	movwf	7
 14325  163D  1D01               	btfss	1,2
 14326  163E  2E4F               	goto	l9388
 14327                           
 14328                           ;Dimmer_B1.c: 184: {
 14329                           ;Dimmer_B1.c: 185: setDimmerLights_Adj(lights,1);
 14330  163F  01DD               	clrf	setDimmerLights_Adj@status
 14331  1640  0ADD               	incf	setDimmerLights_Adj@status,f
 14332  1641  0862               	movf	setDimmerLights_Main@lights,w
 14333  1642  3190  203F  3195   	fcall	_setDimmerLights_Adj
 14334                           
 14335                           ;Dimmer_B1.c: 186: setBuz(1,100);
 14336  1645  3064               	movlw	100
 14337  1646  0020               	movlb	0	; select bank0
 14338  1647  00A6               	movwf	setBuz@time
 14339  1648  3000               	movlw	0
 14340  1649  00A7               	movwf	setBuz@time+1
 14341  164A  3001               	movlw	1
 14342  164B  3193  23EA         	fcall	_setBuz
 14343                           
 14344                           ;Dimmer_B1.c: 187: }
 14345  164D  0020               	movlb	0	; select bank0
 14346  164E  0008               	return
 14347  164F                     l9388:	
 14348                           
 14349                           ;Dimmer_B1.c: 188: else
 14350                           ;Dimmer_B1.c: 189: {
 14351                           ;Dimmer_B1.c: 190: setDimmerLights_Adj(lights,0);
 14352  164F  0020               	movlb	0	; select bank0
 14353  1650  01DD               	clrf	setDimmerLights_Adj@status
 14354  1651  0862               	movf	setDimmerLights_Main@lights,w
 14355  1652  3190  203F         	fcall	_setDimmerLights_Adj
 14356  1654  0020               	movlb	0	; select bank0
 14357  1655  0008               	return
 14358  1656                     __end_of_setDimmerLights_Main:	
 14359                           
 14360                           	psect	text83
 14361  103F                     __ptext83:	
 14362 ;; *************** function _setDimmerLights_Adj *****************
 14363 ;; Defined at:
 14364 ;;		line 372 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14365 ;; Parameters:    Size  Location     Type
 14366 ;;  lights          1    wreg     unsigned char 
 14367 ;;  status          1   61[BANK0 ] unsigned char 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;  lights          1   64[BANK0 ] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;		None               void
 14372 ;; Registers used:
 14373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14379 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;Total ram usage:        4 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    7
 14386 ;; This function calls:
 14387 ;;		_DimmerLightsPointSelect
 14388 ;;		_setLoad_StatusOff
 14389 ;;		_setPercentValue
 14390 ;;		_setRF_DimmerLights
 14391 ;;		_setTxData
 14392 ;; This function is called by:
 14393 ;;		_setDimmerLights_Main
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           
 14398                           ;psect for function _setDimmerLights_Adj
 14399  103F                     _setDimmerLights_Adj:	
 14400                           
 14401                           ;incstack = 0
 14402                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14403                           ;setDimmerLights_Adj@lights stored from wreg
 14404  103F  0020               	movlb	0	; select bank0
 14405  1040  00E0               	movwf	setDimmerLights_Adj@lights
 14406                           
 14407                           ;Dimmer_B1.c: 374: DimmerLightsPointSelect(lights);
 14408  1041  0860               	movf	setDimmerLights_Adj@lights,w
 14409  1042  31A5  25B1  3190   	fcall	_DimmerLightsPointSelect
 14410                           
 14411                           ;Dimmer_B1.c: 375: if(status)
 14412  1045  0020               	movlb	0	; select bank0
 14413  1046  085D               	movf	setDimmerLights_Adj@status,w
 14414  1047  1903               	btfsc	3,2
 14415  1048  2854               	goto	l9060
 14416                           
 14417                           ;Dimmer_B1.c: 376: {
 14418                           ;Dimmer_B1.c: 377: DimmerLights->AdjFlag=1;
 14419  1049  086C               	movf	_DimmerLights,w
 14420  104A  0086               	movwf	6
 14421  104B  3001               	movlw	1	; select bank2/3
 14422  104C  0087               	movwf	7
 14423  104D  1581               	bsf	1,3
 14424                           
 14425                           ;Dimmer_B1.c: 378: DimmerLights->Signal=1;
 14426  104E  086C               	movf	_DimmerLights,w
 14427  104F  0086               	movwf	6
 14428  1050  3001               	movlw	1	; select bank2/3
 14429  1051  0087               	movwf	7
 14430  1052  1481               	bsf	1,1
 14431                           
 14432                           ;Dimmer_B1.c: 379: }
 14433  1053  0008               	return
 14434  1054                     l9060:	
 14435                           
 14436                           ;Dimmer_B1.c: 380: else
 14437                           ;Dimmer_B1.c: 381: {
 14438                           ;Dimmer_B1.c: 382: if(DimmerLights->AdjFlag)
 14439  1054  086C               	movf	_DimmerLights,w
 14440  1055  0086               	movwf	6
 14441  1056  3001               	movlw	1	; select bank2/3
 14442  1057  0087               	movwf	7
 14443  1058  1D81               	btfss	1,3
 14444  1059  0008               	return
 14445                           
 14446                           ;Dimmer_B1.c: 383: {
 14447                           ;Dimmer_B1.c: 384: DimmerLights->Signal=0;
 14448  105A  086C               	movf	_DimmerLights,w
 14449  105B  0086               	movwf	6
 14450  105C  3001               	movlw	1	; select bank2/3
 14451  105D  0087               	movwf	7
 14452  105E  1081               	bcf	1,1
 14453                           
 14454                           ;Dimmer_B1.c: 385: DimmerLights->AdjFlag=0;
 14455  105F  086C               	movf	_DimmerLights,w
 14456  1060  0086               	movwf	6
 14457  1061  3001               	movlw	1	; select bank2/3
 14458  1062  0087               	movwf	7
 14459  1063  1181               	bcf	1,3
 14460                           
 14461                           ;Dimmer_B1.c: 386: setLoad_StatusOff(0,1);
 14462  1064  01A0               	clrf	setLoad_StatusOff@command
 14463  1065  0AA0               	incf	setLoad_StatusOff@command,f
 14464  1066  3000               	movlw	0
 14465  1067  319A  223D  3190   	fcall	_setLoad_StatusOff
 14466                           
 14467                           ;Dimmer_B1.c: 387: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 14468  106A  0020               	movlb	0	; select bank0
 14469  106B  086C               	movf	_DimmerLights,w
 14470  106C  3E04               	addlw	4
 14471  106D  0086               	movwf	6
 14472  106E  3001               	movlw	1	; select bank2/3
 14473  106F  0087               	movwf	7
 14474  1070  0801               	movf	1,w
 14475  1071  00DE               	movwf	??_setDimmerLights_Adj
 14476  1072  086C               	movf	_DimmerLights,w
 14477  1073  3E05               	addlw	5
 14478  1074  0086               	movwf	6
 14479  1075  3001               	movlw	1	; select bank2/3
 14480  1076  0087               	movwf	7
 14481  1077  085E               	movf	??_setDimmerLights_Adj,w
 14482  1078  0081               	movwf	1
 14483                           
 14484                           ;Dimmer_B1.c: 390: Memory->Modify=1;
 14485  1079  0021               	movlb	1	; select bank1
 14486  107A  0868               	movf	_Memory^(0+128),w
 14487  107B  3E22               	addlw	34
 14488  107C  0086               	movwf	6
 14489  107D  3002               	movlw	2	; select bank4/5
 14490  107E  0087               	movwf	7
 14491  107F  1401               	bsf	1,0
 14492                           
 14493                           ;Dimmer_B1.c: 391: Product->Data[(20+lights)]=setPercentValue(DimmerLights->MaxmumValue)
      +                          ;
 14494  1080  0020               	movlb	0	; select bank0
 14495  1081  086C               	movf	_DimmerLights,w
 14496  1082  3E05               	addlw	5
 14497  1083  0086               	movwf	6
 14498  1084  3001               	movlw	1	; select bank2/3
 14499  1085  0087               	movwf	7
 14500  1086  0801               	movf	1,w
 14501  1087  319D  2540  3190   	fcall	_setPercentValue
 14502  108A  0020               	movlb	0	; select bank0
 14503  108B  00DE               	movwf	??_setDimmerLights_Adj
 14504  108C  0860               	movf	setDimmerLights_Adj@lights,w
 14505  108D  3E14               	addlw	20
 14506  108E  076F               	addwf	_Product,w
 14507  108F  00DF               	movwf	??_setDimmerLights_Adj+1
 14508  1090  085F               	movf	??_setDimmerLights_Adj+1,w
 14509  1091  0086               	movwf	6
 14510  1092  3001               	movlw	1	; select bank2/3
 14511  1093  0087               	movwf	7
 14512  1094  085E               	movf	??_setDimmerLights_Adj,w
 14513  1095  0081               	movwf	1
 14514                           
 14515                           ;Dimmer_B1.c: 393: setRF_DimmerLights(lights,1);
 14516  1096  01A0               	clrf	setRF_DimmerLights@on
 14517  1097  0AA0               	incf	setRF_DimmerLights@on,f
 14518  1098  0860               	movf	setDimmerLights_Adj@lights,w
 14519  1099  319E  262F  3190   	fcall	_setRF_DimmerLights
 14520                           
 14521                           ;Dimmer_B1.c: 394: setTxData(1);
 14522  109C  3001               	movlw	1
 14523  109D  318B  2318         	fcall	_setTxData
 14524  109F  0008               	return
 14525  10A0                     __end_of_setDimmerLights_Adj:	
 14526                           
 14527                           	psect	text84
 14528  1D40                     __ptext84:	
 14529 ;; *************** function _setPercentValue *****************
 14530 ;; Defined at:
 14531 ;;		line 487 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  value           1    wreg     unsigned char 
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;  value           1   57[BANK0 ] unsigned char 
 14536 ;;  i               3   58[BANK0 ] float 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  1    wreg      unsigned char 
 14539 ;; Registers used:
 14540 ;;		wreg, status,2, status,0, pclath, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;Total ram usage:        4 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    6
 14553 ;; This function calls:
 14554 ;;		___awtoft
 14555 ;;		___ftdiv
 14556 ;;		___fttol
 14557 ;; This function is called by:
 14558 ;;		_setDimmerLights_Adj
 14559 ;;		_Flash_Memory_Initialization
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _setPercentValue
 14565  1D40                     _setPercentValue:	
 14566                           
 14567                           ;incstack = 0
 14568                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14569                           ;setPercentValue@value stored from wreg
 14570  1D40  0020               	movlb	0	; select bank0
 14571  1D41  00D9               	movwf	setPercentValue@value
 14572                           
 14573                           ;Dimmer_B1.c: 490: float i=((char)((100-20)*1.5))-((char)((100-60)*1.5));
 14574  1D42  3000               	movlw	0
 14575  1D43  00DA               	movwf	setPercentValue@i
 14576  1D44  3070               	movlw	112
 14577  1D45  00DB               	movwf	setPercentValue@i+1
 14578  1D46  3042               	movlw	66
 14579  1D47  00DC               	movwf	setPercentValue@i+2
 14580                           
 14581                           ;Dimmer_B1.c: 491: i/=100;
 14582  1D48  3000               	movlw	0
 14583  1D49  00AE               	movwf	___ftdiv@f2
 14584  1D4A  30C8               	movlw	200
 14585  1D4B  00AF               	movwf	___ftdiv@f2+1
 14586  1D4C  3042               	movlw	66
 14587  1D4D  00B0               	movwf	___ftdiv@f2+2
 14588  1D4E  085A               	movf	setPercentValue@i,w
 14589  1D4F  00B1               	movwf	___ftdiv@f1
 14590  1D50  085B               	movf	setPercentValue@i+1,w
 14591  1D51  00B2               	movwf	___ftdiv@f1+1
 14592  1D52  085C               	movf	setPercentValue@i+2,w
 14593  1D53  00B3               	movwf	___ftdiv@f1+2
 14594  1D54  3189  21BB  319D   	fcall	___ftdiv
 14595  1D57  0020               	movlb	0	; select bank0
 14596  1D58  082E               	movf	?___ftdiv,w
 14597  1D59  00DA               	movwf	setPercentValue@i
 14598  1D5A  082F               	movf	?___ftdiv+1,w
 14599  1D5B  00DB               	movwf	setPercentValue@i+1
 14600  1D5C  0830               	movf	?___ftdiv+2,w
 14601  1D5D  00DC               	movwf	setPercentValue@i+2
 14602                           
 14603                           ;Dimmer_B1.c: 492: return (100-(char)((value-((char)((100-60)*1.5)))/i));
 14604  1D5E  0859               	movf	setPercentValue@value,w
 14605  1D5F  3EC4               	addlw	196
 14606  1D60  00A8               	movwf	___awtoft@c
 14607  1D61  30FF               	movlw	255
 14608  1D62  1803               	skipnc
 14609  1D63  3000               	movlw	0
 14610  1D64  00A9               	movwf	___awtoft@c+1
 14611  1D65  31A7  27BC  319D   	fcall	___awtoft
 14612  1D68  0020               	movlb	0	; select bank0
 14613  1D69  0828               	movf	?___awtoft,w
 14614  1D6A  00B1               	movwf	___ftdiv@f1
 14615  1D6B  0829               	movf	?___awtoft+1,w
 14616  1D6C  00B2               	movwf	___ftdiv@f1+1
 14617  1D6D  082A               	movf	?___awtoft+2,w
 14618  1D6E  00B3               	movwf	___ftdiv@f1+2
 14619  1D6F  085A               	movf	setPercentValue@i,w
 14620  1D70  00AE               	movwf	___ftdiv@f2
 14621  1D71  085B               	movf	setPercentValue@i+1,w
 14622  1D72  00AF               	movwf	___ftdiv@f2+1
 14623  1D73  085C               	movf	setPercentValue@i+2,w
 14624  1D74  00B0               	movwf	___ftdiv@f2+2
 14625  1D75  3189  21BB  319D   	fcall	___ftdiv
 14626  1D78  0020               	movlb	0	; select bank0
 14627  1D79  082E               	movf	?___ftdiv,w
 14628  1D7A  00CB               	movwf	___fttol@f1
 14629  1D7B  082F               	movf	?___ftdiv+1,w
 14630  1D7C  00CC               	movwf	___fttol@f1+1
 14631  1D7D  0830               	movf	?___ftdiv+2,w
 14632  1D7E  00CD               	movwf	___fttol@f1+2
 14633  1D7F  3196  2656         	fcall	___fttol
 14634  1D81  0020               	movlb	0	; select bank0
 14635  1D82  034B               	decf	?___fttol,w
 14636  1D83  3AFF               	xorlw	255
 14637  1D84  3E64               	addlw	100
 14638  1D85  0008               	return
 14639  1D86                     __end_of_setPercentValue:	
 14640                           
 14641                           	psect	text85
 14642  1A3D                     __ptext85:	
 14643 ;; *************** function _setLoad_StatusOff *****************
 14644 ;; Defined at:
 14645 ;;		line 282 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14646 ;; Parameters:    Size  Location     Type
 14647 ;;  lights          1    wreg     unsigned char 
 14648 ;;  command         1    0[BANK0 ] unsigned char 
 14649 ;; Auto vars:     Size  Location     Type
 14650 ;;  lights          1    1[BANK0 ] unsigned char 
 14651 ;; Return value:  Size  Location     Type
 14652 ;;		None               void
 14653 ;; Registers used:
 14654 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14655 ;; Tracked objects:
 14656 ;;		On entry : 0/0
 14657 ;;		On exit  : 0/0
 14658 ;;		Unchanged: 0/0
 14659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14660 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;Total ram usage:        2 bytes
 14665 ;; Hardware stack levels used:    1
 14666 ;; Hardware stack levels required when called:    4
 14667 ;; This function calls:
 14668 ;;		Nothing
 14669 ;; This function is called by:
 14670 ;;		_setDimmerLights_ERROR
 14671 ;;		_setDimmerLights_Adj
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           
 14676                           ;psect for function _setLoad_StatusOff
 14677  1A3D                     _setLoad_StatusOff:	
 14678                           
 14679                           ;incstack = 0
 14680                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14681                           ;setLoad_StatusOff@lights stored from wreg
 14682  1A3D  0020               	movlb	0	; select bank0
 14683  1A3E  00A1               	movwf	setLoad_StatusOff@lights
 14684                           
 14685                           ;OverLoad_B1.c: 284: Load->StatusOff=command;
 14686  1A3F  086E               	movf	_Load,w
 14687  1A40  3E46               	addlw	70
 14688  1A41  0086               	movwf	6
 14689  1A42  3002               	movlw	2	; select bank4/5
 14690  1A43  0087               	movwf	7
 14691  1A44  0820               	movf	setLoad_StatusOff@command,w
 14692  1A45  1081               	bcf	1,1
 14693  1A46  1D03               	skipz
 14694  1A47  1481               	bsf	1,1
 14695                           
 14696                           ;OverLoad_B1.c: 285: Load->SafeCount-=2;
 14697  1A48  086E               	movf	_Load,w
 14698  1A49  3E42               	addlw	66
 14699  1A4A  0086               	movwf	6
 14700  1A4B  3002               	movlw	2	; select bank4/5
 14701  1A4C  0087               	movwf	7
 14702  1A4D  3002               	movlw	2
 14703  1A4E  0281               	subwf	1,f
 14704                           
 14705                           ;OverLoad_B1.c: 286: if(lights == 1)
 14706  1A4F  0821               	movf	setLoad_StatusOff@lights,w
 14707  1A50  3A01               	xorlw	1
 14708  1A51  1D03               	skipz
 14709  1A52  2A59               	goto	l8714
 14710                           
 14711                           ;OverLoad_B1.c: 287: {
 14712                           ;OverLoad_B1.c: 288: Load->Lights1Status=0;
 14713  1A53  086E               	movf	_Load,w
 14714  1A54  3E43               	addlw	67
 14715  1A55  0086               	movwf	6
 14716  1A56  3002               	movlw	2	; select bank4/5
 14717  1A57  0087               	movwf	7
 14718  1A58  0181               	clrf	1
 14719  1A59                     l8714:	
 14720                           
 14721                           ;OverLoad_B1.c: 289: }
 14722                           ;OverLoad_B1.c: 290: if(lights == 2)
 14723  1A59  0821               	movf	setLoad_StatusOff@lights,w
 14724  1A5A  3A02               	xorlw	2
 14725  1A5B  1D03               	skipz
 14726  1A5C  2A63               	goto	l8718
 14727                           
 14728                           ;OverLoad_B1.c: 291: {
 14729                           ;OverLoad_B1.c: 292: Load->Lights2Status=0;
 14730  1A5D  086E               	movf	_Load,w
 14731  1A5E  3E44               	addlw	68
 14732  1A5F  0086               	movwf	6
 14733  1A60  3002               	movlw	2	; select bank4/5
 14734  1A61  0087               	movwf	7
 14735  1A62  0181               	clrf	1
 14736  1A63                     l8718:	
 14737                           
 14738                           ;OverLoad_B1.c: 293: }
 14739                           ;OverLoad_B1.c: 294: if(lights == 3)
 14740  1A63  0821               	movf	setLoad_StatusOff@lights,w
 14741  1A64  3A03               	xorlw	3
 14742  1A65  1D03               	skipz
 14743  1A66  0008               	return
 14744                           
 14745                           ;OverLoad_B1.c: 295: {
 14746                           ;OverLoad_B1.c: 296: Load->Lights3Status=0;
 14747  1A67  086E               	movf	_Load,w
 14748  1A68  3E45               	addlw	69
 14749  1A69  0086               	movwf	6
 14750  1A6A  3002               	movlw	2	; select bank4/5
 14751  1A6B  0087               	movwf	7
 14752  1A6C  0181               	clrf	1
 14753  1A6D  0008               	return
 14754  1A6E                     __end_of_setLoad_StatusOff:	
 14755                           
 14756                           	psect	text86
 14757  0801                     __ptext86:	
 14758 ;; *************** function _setDimmerLights *****************
 14759 ;; Defined at:
 14760 ;;		line 319 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14761 ;; Parameters:    Size  Location     Type
 14762 ;;  lights          1    wreg     unsigned char 
 14763 ;;  status          1    4[BANK0 ] unsigned char 
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;  lights          1    6[BANK0 ] unsigned char 
 14766 ;; Return value:  Size  Location     Type
 14767 ;;		None               void
 14768 ;; Registers used:
 14769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14770 ;; Tracked objects:
 14771 ;;		On entry : 0/0
 14772 ;;		On exit  : 0/0
 14773 ;;		Unchanged: 0/0
 14774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14775 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;Total ram usage:        3 bytes
 14780 ;; Hardware stack levels used:    1
 14781 ;; Hardware stack levels required when called:    6
 14782 ;; This function calls:
 14783 ;;		_DimmerLightsPointSelect
 14784 ;;		_setLED
 14785 ;;		_setLoad_Count
 14786 ;;		_setLoad_StatusOn
 14787 ;; This function is called by:
 14788 ;;		_setDimmerLights_Main
 14789 ;;		_setControl_Lights_Table
 14790 ;; This function uses a non-reentrant model
 14791 ;;
 14792                           
 14793                           
 14794                           ;psect for function _setDimmerLights
 14795  0801                     _setDimmerLights:	
 14796                           
 14797                           ;incstack = 0
 14798                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14799                           ;setDimmerLights@lights stored from wreg
 14800  0801  0020               	movlb	0	; select bank0
 14801  0802  00A6               	movwf	setDimmerLights@lights
 14802                           
 14803                           ;Dimmer_B1.c: 321: DimmerLightsPointSelect(lights);
 14804  0803  0826               	movf	setDimmerLights@lights,w
 14805  0804  31A5  25B1  3188   	fcall	_DimmerLightsPointSelect
 14806                           
 14807                           ;Dimmer_B1.c: 322: Dimmer->Load=lights;
 14808  0807  0020               	movlb	0	; select bank0
 14809  0808  0826               	movf	setDimmerLights@lights,w
 14810  0809  00A5               	movwf	??_setDimmerLights
 14811  080A  0021               	movlb	1	; select bank1
 14812  080B  0A39               	incf	_Dimmer^(0+128),w
 14813  080C  0086               	movwf	6
 14814  080D  0187               	clrf	7
 14815  080E  0020               	movlb	0	; select bank0
 14816  080F  0825               	movf	??_setDimmerLights,w
 14817  0810  0081               	movwf	1
 14818                           
 14819                           ;Dimmer_B1.c: 323: if(status)
 14820  0811  0824               	movf	setDimmerLights@status,w
 14821  0812  1903               	btfsc	3,2
 14822  0813  2851               	goto	l8804
 14823                           
 14824                           ;Dimmer_B1.c: 324: {
 14825                           ;Dimmer_B1.c: 325: DimmerLights->Status=1;
 14826  0814  086C               	movf	_DimmerLights,w
 14827  0815  0086               	movwf	6
 14828  0816  3001               	movlw	1	; select bank2/3
 14829  0817  0087               	movwf	7
 14830  0818  1681               	bsf	1,5
 14831                           
 14832                           ;Dimmer_B1.c: 326: setLED(lights,0);
 14833  0819  01A2               	clrf	setLED@command
 14834  081A  0826               	movf	setDimmerLights@lights,w
 14835  081B  319F  2741  3188   	fcall	_setLED
 14836                           
 14837                           ;Dimmer_B1.c: 328: setLoad_Count(0);
 14838  081E  3000               	movlw	0
 14839  081F  31A6  2602  3188   	fcall	_setLoad_Count
 14840                           
 14841                           ;Dimmer_B1.c: 330: DimmerLights->Signal=1;
 14842  0822  0020               	movlb	0	; select bank0
 14843  0823  086C               	movf	_DimmerLights,w
 14844  0824  0086               	movwf	6
 14845  0825  3001               	movlw	1	; select bank2/3
 14846  0826  0087               	movwf	7
 14847  0827  1481               	bsf	1,1
 14848                           
 14849                           ;Dimmer_B1.c: 331: DimmerLights->DimmingTimeValue=3;
 14850  0828  3003               	movlw	3
 14851  0829  00A5               	movwf	??_setDimmerLights
 14852  082A  086C               	movf	_DimmerLights,w
 14853  082B  3E02               	addlw	2
 14854  082C  0086               	movwf	6
 14855  082D  3001               	movlw	1	; select bank2/3
 14856  082E  0087               	movwf	7
 14857  082F  0825               	movf	??_setDimmerLights,w
 14858  0830  0081               	movwf	1
 14859                           
 14860                           ;Dimmer_B1.c: 333: if(!DimmerLights->StatusFlag)
 14861  0831  086C               	movf	_DimmerLights,w
 14862  0832  0086               	movwf	6
 14863  0833  3001               	movlw	1	; select bank2/3
 14864  0834  0087               	movwf	7
 14865  0835  1B01               	btfsc	1,6
 14866  0836  0008               	return
 14867                           
 14868                           ;Dimmer_B1.c: 334: {
 14869                           ;Dimmer_B1.c: 335: DimmerLights->StatusFlag=1;
 14870  0837  086C               	movf	_DimmerLights,w
 14871  0838  0086               	movwf	6
 14872  0839  3001               	movlw	1	; select bank2/3
 14873  083A  0087               	movwf	7
 14874  083B  1701               	bsf	1,6
 14875                           
 14876                           ;Dimmer_B1.c: 336: setLoad_StatusOn(lights,1);
 14877  083C  01A0               	clrf	setLoad_StatusOn@command
 14878  083D  0AA0               	incf	setLoad_StatusOn@command,f
 14879  083E  0826               	movf	setDimmerLights@lights,w
 14880  083F  319A  229F         	fcall	_setLoad_StatusOn
 14881                           
 14882                           ;Dimmer_B1.c: 339: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 14883  0841  0020               	movlb	0	; select bank0
 14884  0842  086C               	movf	_DimmerLights,w
 14885  0843  3E05               	addlw	5
 14886  0844  0086               	movwf	6
 14887  0845  3001               	movlw	1	; select bank2/3
 14888  0846  0087               	movwf	7
 14889  0847  0801               	movf	1,w
 14890  0848  00A5               	movwf	??_setDimmerLights
 14891  0849  086C               	movf	_DimmerLights,w
 14892  084A  3E04               	addlw	4
 14893  084B  0086               	movwf	6
 14894  084C  3001               	movlw	1	; select bank2/3
 14895  084D  0087               	movwf	7
 14896  084E  0825               	movf	??_setDimmerLights,w
 14897  084F  0081               	movwf	1
 14898                           
 14899                           ;Dimmer_B1.c: 341: }
 14900                           ;Dimmer_B1.c: 342: }
 14901  0850  0008               	return
 14902  0851                     l8804:	
 14903                           
 14904                           ;Dimmer_B1.c: 343: else
 14905                           ;Dimmer_B1.c: 344: {
 14906                           ;Dimmer_B1.c: 345: DimmerLights->Status=0;
 14907  0851  086C               	movf	_DimmerLights,w
 14908  0852  0086               	movwf	6
 14909  0853  3001               	movlw	1	; select bank2/3
 14910  0854  0087               	movwf	7
 14911  0855  1281               	bcf	1,5
 14912                           
 14913                           ;Dimmer_B1.c: 347: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 14914  0856  086C               	movf	_DimmerLights,w
 14915  0857  3E06               	addlw	6
 14916  0858  0086               	movwf	6
 14917  0859  3001               	movlw	1	; select bank2/3
 14918  085A  0087               	movwf	7
 14919  085B  0801               	movf	1,w
 14920  085C  00A5               	movwf	??_setDimmerLights
 14921  085D  086C               	movf	_DimmerLights,w
 14922  085E  3E04               	addlw	4
 14923  085F  0086               	movwf	6
 14924  0860  3001               	movlw	1	; select bank2/3
 14925  0861  0087               	movwf	7
 14926  0862  0825               	movf	??_setDimmerLights,w
 14927  0863  0081               	movwf	1
 14928                           
 14929                           ;Dimmer_B1.c: 354: DimmerLights->Signal=1;
 14930  0864  086C               	movf	_DimmerLights,w
 14931  0865  0086               	movwf	6
 14932  0866  3001               	movlw	1	; select bank2/3
 14933  0867  0087               	movwf	7
 14934  0868  1481               	bsf	1,1
 14935                           
 14936                           ;Dimmer_B1.c: 355: DimmerLights->AdjFlag=0;
 14937  0869  086C               	movf	_DimmerLights,w
 14938  086A  0086               	movwf	6
 14939  086B  3001               	movlw	1	; select bank2/3
 14940  086C  0087               	movwf	7
 14941  086D  1181               	bcf	1,3
 14942                           
 14943                           ;Dimmer_B1.c: 356: DimmerLights->AdjStatus=0;
 14944  086E  086C               	movf	_DimmerLights,w
 14945  086F  0086               	movwf	6
 14946  0870  3001               	movlw	1	; select bank2/3
 14947  0871  0087               	movwf	7
 14948  0872  1201               	bcf	1,4
 14949                           
 14950                           ;Dimmer_B1.c: 357: DimmerLights->DimmingTimeValue=3;
 14951  0873  3003               	movlw	3
 14952  0874  00A5               	movwf	??_setDimmerLights
 14953  0875  086C               	movf	_DimmerLights,w
 14954  0876  3E02               	addlw	2
 14955  0877  0086               	movwf	6
 14956  0878  3001               	movlw	1	; select bank2/3
 14957  0879  0087               	movwf	7
 14958  087A  0825               	movf	??_setDimmerLights,w
 14959  087B  0081               	movwf	1
 14960  087C  0008               	return
 14961  087D                     __end_of_setDimmerLights:	
 14962                           
 14963                           	psect	text87
 14964  1A9F                     __ptext87:	
 14965 ;; *************** function _setLoad_StatusOn *****************
 14966 ;; Defined at:
 14967 ;;		line 264 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;  lights          1    wreg     unsigned char 
 14970 ;;  command         1    0[BANK0 ] unsigned char 
 14971 ;; Auto vars:     Size  Location     Type
 14972 ;;  lights          1    1[BANK0 ] unsigned char 
 14973 ;; Return value:  Size  Location     Type
 14974 ;;		None               void
 14975 ;; Registers used:
 14976 ;;		wreg, fsr1l, fsr1h
 14977 ;; Tracked objects:
 14978 ;;		On entry : 0/0
 14979 ;;		On exit  : 0/0
 14980 ;;		Unchanged: 0/0
 14981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14982 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;Total ram usage:        2 bytes
 14987 ;; Hardware stack levels used:    1
 14988 ;; Hardware stack levels required when called:    4
 14989 ;; This function calls:
 14990 ;;		Nothing
 14991 ;; This function is called by:
 14992 ;;		_setDimmerLights
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           
 14997                           ;psect for function _setLoad_StatusOn
 14998  1A9F                     _setLoad_StatusOn:	
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15002                           ;setLoad_StatusOn@lights stored from wreg
 15003  1A9F  0020               	movlb	0	; select bank0
 15004  1AA0  00A1               	movwf	setLoad_StatusOn@lights
 15005                           
 15006                           ;OverLoad_B1.c: 266: Load->GO=1;
 15007  1AA1  086E               	movf	_Load,w
 15008  1AA2  0086               	movwf	6
 15009  1AA3  3002               	movlw	2	; select bank4/5
 15010  1AA4  0087               	movwf	7
 15011  1AA5  1481               	bsf	1,1
 15012                           
 15013                           ;OverLoad_B1.c: 267: Load->StatusOn=command;
 15014  1AA6  086E               	movf	_Load,w
 15015  1AA7  3E46               	addlw	70
 15016  1AA8  0086               	movwf	6
 15017  1AA9  3002               	movlw	2	; select bank4/5
 15018  1AAA  0087               	movwf	7
 15019  1AAB  0820               	movf	setLoad_StatusOn@command,w
 15020  1AAC  1001               	bcf	1,0
 15021  1AAD  1D03               	skipz
 15022  1AAE  1401               	bsf	1,0
 15023                           
 15024                           ;OverLoad_B1.c: 269: if(lights == 1)
 15025  1AAF  0821               	movf	setLoad_StatusOn@lights,w
 15026  1AB0  3A01               	xorlw	1
 15027  1AB1  1D03               	skipz
 15028  1AB2  2ABA               	goto	l8778
 15029                           
 15030                           ;OverLoad_B1.c: 270: {
 15031                           ;OverLoad_B1.c: 271: Load->Lights1Status=1;
 15032  1AB3  086E               	movf	_Load,w
 15033  1AB4  3E43               	addlw	67
 15034  1AB5  0086               	movwf	6
 15035  1AB6  3002               	movlw	2	; select bank4/5
 15036  1AB7  0087               	movwf	7
 15037  1AB8  0181               	clrf	1
 15038  1AB9  0A81               	incf	1,f
 15039  1ABA                     l8778:	
 15040                           
 15041                           ;OverLoad_B1.c: 272: }
 15042                           ;OverLoad_B1.c: 273: if(lights == 2)
 15043  1ABA  0821               	movf	setLoad_StatusOn@lights,w
 15044  1ABB  3A02               	xorlw	2
 15045  1ABC  1D03               	skipz
 15046  1ABD  2AC5               	goto	l8782
 15047                           
 15048                           ;OverLoad_B1.c: 274: {
 15049                           ;OverLoad_B1.c: 275: Load->Lights2Status=1;
 15050  1ABE  086E               	movf	_Load,w
 15051  1ABF  3E44               	addlw	68
 15052  1AC0  0086               	movwf	6
 15053  1AC1  3002               	movlw	2	; select bank4/5
 15054  1AC2  0087               	movwf	7
 15055  1AC3  0181               	clrf	1
 15056  1AC4  0A81               	incf	1,f
 15057  1AC5                     l8782:	
 15058                           
 15059                           ;OverLoad_B1.c: 276: }
 15060                           ;OverLoad_B1.c: 277: if(lights == 3)
 15061  1AC5  0821               	movf	setLoad_StatusOn@lights,w
 15062  1AC6  3A03               	xorlw	3
 15063  1AC7  1D03               	skipz
 15064  1AC8  0008               	return
 15065                           
 15066                           ;OverLoad_B1.c: 278: {
 15067                           ;OverLoad_B1.c: 279: Load->Lights3Status=1;
 15068  1AC9  086E               	movf	_Load,w
 15069  1ACA  3E45               	addlw	69
 15070  1ACB  0086               	movwf	6
 15071  1ACC  3002               	movlw	2	; select bank4/5
 15072  1ACD  0087               	movwf	7
 15073  1ACE  0181               	clrf	1
 15074  1ACF  0A81               	incf	1,f
 15075  1AD0  0008               	return
 15076  1AD1                     __end_of_setLoad_StatusOn:	
 15077                           
 15078                           	psect	text88
 15079  2602                     __ptext88:	
 15080 ;; *************** function _setLoad_Count *****************
 15081 ;; Defined at:
 15082 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15083 ;; Parameters:    Size  Location     Type
 15084 ;;  command         1    wreg     unsigned char 
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;  command         1    1[BANK0 ] unsigned char 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;		None               void
 15089 ;; Registers used:
 15090 ;;		wreg, fsr1l, fsr1h
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;Total ram usage:        2 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    4
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_setDimmerLights
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           
 15111                           ;psect for function _setLoad_Count
 15112  2602                     _setLoad_Count:	
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in _setLoad_Count: [wregfsr1]
 15116                           ;setLoad_Count@command stored from wreg
 15117  2602  0020               	movlb	0	; select bank0
 15118  2603  00A1               	movwf	setLoad_Count@command
 15119                           
 15120                           ;OverLoad_B1.c: 251: Load->Count=command;
 15121  2604  0821               	movf	setLoad_Count@command,w
 15122  2605  00A0               	movwf	??_setLoad_Count
 15123  2606  086E               	movf	_Load,w
 15124  2607  3E3A               	addlw	58
 15125  2608  0086               	movwf	6
 15126  2609  3002               	movlw	2	; select bank4/5
 15127  260A  0087               	movwf	7
 15128  260B  0820               	movf	??_setLoad_Count,w
 15129  260C  0081               	movwf	1
 15130                           
 15131                           ;OverLoad_B1.c: 252: Load->SafeCount=command;
 15132  260D  0821               	movf	setLoad_Count@command,w
 15133  260E  00A0               	movwf	??_setLoad_Count
 15134  260F  086E               	movf	_Load,w
 15135  2610  3E42               	addlw	66
 15136  2611  0086               	movwf	6
 15137  2612  3002               	movlw	2	; select bank4/5
 15138  2613  0087               	movwf	7
 15139  2614  0820               	movf	??_setLoad_Count,w
 15140  2615  0081               	movwf	1
 15141  2616  0008               	return
 15142  2617                     __end_of_setLoad_Count:	
 15143                           
 15144                           	psect	text89
 15145  1F41                     __ptext89:	
 15146 ;; *************** function _setLED *****************
 15147 ;; Defined at:
 15148 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;  led             1    wreg     unsigned char 
 15151 ;;  command         1    2[BANK0 ] unsigned char 
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;  led             1    3[BANK0 ] unsigned char 
 15154 ;; Return value:  Size  Location     Type
 15155 ;;		None               void
 15156 ;; Registers used:
 15157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15158 ;; Tracked objects:
 15159 ;;		On entry : 0/0
 15160 ;;		On exit  : 0/0
 15161 ;;		Unchanged: 0/0
 15162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;Total ram usage:        2 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; Hardware stack levels required when called:    5
 15170 ;; This function calls:
 15171 ;;		_LedPointSelect
 15172 ;; This function is called by:
 15173 ;;		_setDimmerLights_ERROR
 15174 ;;		_setDimmerLights
 15175 ;;		_setLED_Initialization
 15176 ;;		_setLoad_Exceptions
 15177 ;;		_setOverTemp_Exceptions
 15178 ;;		_setPowerFault_Exceptions
 15179 ;;		_setSw_Initialization
 15180 ;; This function uses a non-reentrant model
 15181 ;;
 15182                           
 15183                           
 15184                           ;psect for function _setLED
 15185  1F41                     _setLED:	
 15186                           
 15187                           ;incstack = 0
 15188                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15189                           ;setLED@led stored from wreg
 15190  1F41  0020               	movlb	0	; select bank0
 15191  1F42  00A3               	movwf	setLED@led
 15192                           
 15193                           ;LED_B1.c: 76: LedPointSelect(led);
 15194  1F43  0823               	movf	setLED@led,w
 15195  1F44  31A7  27DE  319F   	fcall	_LedPointSelect
 15196                           
 15197                           ;LED_B1.c: 77: if(command == 0)
 15198  1F47  0020               	movlb	0	; select bank0
 15199  1F48  08A2               	movf	setLED@command,f
 15200  1F49  1D03               	skipz
 15201  1F4A  2F5D               	goto	l8738
 15202                           
 15203                           ;LED_B1.c: 78: {
 15204                           ;LED_B1.c: 80: if(led == 1)
 15205  1F4B  0823               	movf	setLED@led,w
 15206  1F4C  3A01               	xorlw	1
 15207  1F4D  1D03               	skipz
 15208  1F4E  2F51               	goto	l8730
 15209                           
 15210                           ;LED_B1.c: 81: {
 15211                           ;LED_B1.c: 85: RA3=1;
 15212  1F4F  158C               	bsf	12,3	;volatile
 15213                           
 15214                           ;LED_B1.c: 87: }
 15215  1F50  0008               	return
 15216  1F51                     l8730:	
 15217                           
 15218                           ;LED_B1.c: 90: else if(led == 2)
 15219  1F51  0823               	movf	setLED@led,w
 15220  1F52  3A02               	xorlw	2
 15221  1F53  1D03               	skipz
 15222  1F54  2F57               	goto	l8734
 15223                           
 15224                           ;LED_B1.c: 91: {
 15225                           ;LED_B1.c: 95: RC7=1;
 15226  1F55  178E               	bsf	14,7	;volatile
 15227                           
 15228                           ;LED_B1.c: 97: }
 15229  1F56  0008               	return
 15230  1F57                     l8734:	
 15231                           
 15232                           ;LED_B1.c: 110: else if(led == 99)
 15233  1F57  0823               	movf	setLED@led,w
 15234  1F58  3A63               	xorlw	99
 15235  1F59  1D03               	skipz
 15236  1F5A  0008               	return
 15237                           
 15238                           ;LED_B1.c: 111: {
 15239                           ;LED_B1.c: 115: RB5=1;
 15240  1F5B  168D               	bsf	13,5	;volatile
 15241                           
 15242                           ;LED_B1.c: 117: }
 15243                           ;LED_B1.c: 119: }
 15244  1F5C  0008               	return
 15245  1F5D                     l8738:	
 15246                           
 15247                           ;LED_B1.c: 120: else if(command == 1)
 15248  1F5D  0822               	movf	setLED@command,w
 15249  1F5E  3A01               	xorlw	1
 15250  1F5F  1D03               	skipz
 15251  1F60  2F73               	goto	l8752
 15252                           
 15253                           ;LED_B1.c: 121: {
 15254                           ;LED_B1.c: 123: if(led == 1)
 15255  1F61  0823               	movf	setLED@led,w
 15256  1F62  3A01               	xorlw	1
 15257  1F63  1D03               	skipz
 15258  1F64  2F67               	goto	l8744
 15259                           
 15260                           ;LED_B1.c: 124: {
 15261                           ;LED_B1.c: 128: RA3=0;
 15262  1F65  118C               	bcf	12,3	;volatile
 15263                           
 15264                           ;LED_B1.c: 130: }
 15265  1F66  0008               	return
 15266  1F67                     l8744:	
 15267                           
 15268                           ;LED_B1.c: 133: else if(led == 2)
 15269  1F67  0823               	movf	setLED@led,w
 15270  1F68  3A02               	xorlw	2
 15271  1F69  1D03               	skipz
 15272  1F6A  2F6D               	goto	l8748
 15273                           
 15274                           ;LED_B1.c: 134: {
 15275                           ;LED_B1.c: 138: RC7=0;
 15276  1F6B  138E               	bcf	14,7	;volatile
 15277                           
 15278                           ;LED_B1.c: 140: }
 15279  1F6C  0008               	return
 15280  1F6D                     l8748:	
 15281                           
 15282                           ;LED_B1.c: 153: else if(led == 99)
 15283  1F6D  0823               	movf	setLED@led,w
 15284  1F6E  3A63               	xorlw	99
 15285  1F6F  1D03               	skipz
 15286  1F70  0008               	return
 15287                           
 15288                           ;LED_B1.c: 154: {
 15289                           ;LED_B1.c: 158: RB5=0;
 15290  1F71  128D               	bcf	13,5	;volatile
 15291                           
 15292                           ;LED_B1.c: 160: }
 15293                           ;LED_B1.c: 162: }
 15294  1F72  0008               	return
 15295  1F73                     l8752:	
 15296                           
 15297                           ;LED_B1.c: 163: else if(command == 10)
 15298  1F73  0822               	movf	setLED@command,w
 15299  1F74  3A0A               	xorlw	10
 15300  1F75  1D03               	skipz
 15301  1F76  2F95               	goto	l8768
 15302                           
 15303                           ;LED_B1.c: 164: {
 15304                           ;LED_B1.c: 165: LED->GO=0;
 15305  1F77  0021               	movlb	1	; select bank1
 15306  1F78  083B               	movf	_LED^(0+128),w
 15307  1F79  0086               	movwf	6
 15308  1F7A  0187               	clrf	7
 15309  1F7B  1081               	bcf	1,1
 15310                           
 15311                           ;LED_B1.c: 166: LED->Time=0;
 15312  1F7C  0A3B               	incf	_LED^(0+128),w
 15313  1F7D  0086               	movwf	6
 15314  1F7E  0187               	clrf	7
 15315  1F7F  3000               	movlw	0
 15316  1F80  3FC0               	movwi [0]fsr1
 15317  1F81  3FC1               	movwi [1]fsr1
 15318                           
 15319                           ;LED_B1.c: 168: if(led == 1)
 15320  1F82  0020               	movlb	0	; select bank0
 15321  1F83  0823               	movf	setLED@led,w
 15322  1F84  3A01               	xorlw	1
 15323  1F85  1D03               	skipz
 15324  1F86  2F89               	goto	l8760
 15325                           
 15326                           ;LED_B1.c: 169: {
 15327                           ;LED_B1.c: 173: RA3=1;
 15328  1F87  158C               	bsf	12,3	;volatile
 15329                           
 15330                           ;LED_B1.c: 175: }
 15331  1F88  0008               	return
 15332  1F89                     l8760:	
 15333                           
 15334                           ;LED_B1.c: 178: else if(led == 2)
 15335  1F89  0823               	movf	setLED@led,w
 15336  1F8A  3A02               	xorlw	2
 15337  1F8B  1D03               	skipz
 15338  1F8C  2F8F               	goto	l8764
 15339                           
 15340                           ;LED_B1.c: 179: {
 15341                           ;LED_B1.c: 183: RC7=1;
 15342  1F8D  178E               	bsf	14,7	;volatile
 15343                           
 15344                           ;LED_B1.c: 185: }
 15345  1F8E  0008               	return
 15346  1F8F                     l8764:	
 15347                           
 15348                           ;LED_B1.c: 198: else if(led == 99)
 15349  1F8F  0823               	movf	setLED@led,w
 15350  1F90  3A63               	xorlw	99
 15351  1F91  1D03               	skipz
 15352  1F92  0008               	return
 15353                           
 15354                           ;LED_B1.c: 199: {
 15355                           ;LED_B1.c: 203: RB5=1;
 15356  1F93  168D               	bsf	13,5	;volatile
 15357                           
 15358                           ;LED_B1.c: 205: }
 15359                           ;LED_B1.c: 207: }
 15360  1F94  0008               	return
 15361  1F95                     l8768:	
 15362                           
 15363                           ;LED_B1.c: 208: else if(command == 11)
 15364  1F95  0822               	movf	setLED@command,w
 15365  1F96  3A0B               	xorlw	11
 15366  1F97  1D03               	skipz
 15367  1F98  0008               	return
 15368                           
 15369                           ;LED_B1.c: 209: {
 15370                           ;LED_B1.c: 210: LED->GO=1;
 15371  1F99  0021               	movlb	1	; select bank1
 15372  1F9A  083B               	movf	_LED^(0+128),w
 15373  1F9B  0086               	movwf	6
 15374  1F9C  0187               	clrf	7
 15375  1F9D  1481               	bsf	1,1
 15376  1F9E  0008               	return
 15377  1F9F                     __end_of_setLED:	
 15378                           
 15379                           	psect	text90
 15380  27DE                     __ptext90:	
 15381 ;; *************** function _LedPointSelect *****************
 15382 ;; Defined at:
 15383 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15384 ;; Parameters:    Size  Location     Type
 15385 ;;  led             1    wreg     unsigned char 
 15386 ;; Auto vars:     Size  Location     Type
 15387 ;;  led             1    1[BANK0 ] unsigned char 
 15388 ;; Return value:  Size  Location     Type
 15389 ;;		None               void
 15390 ;; Registers used:
 15391 ;;		wreg
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;Total ram usage:        2 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    4
 15404 ;; This function calls:
 15405 ;;		Nothing
 15406 ;; This function is called by:
 15407 ;;		_setLED_Initialization
 15408 ;;		_setLED
 15409 ;;		_setLED_Main
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           
 15414                           ;psect for function _LedPointSelect
 15415  27DE                     _LedPointSelect:	
 15416                           
 15417                           ;incstack = 0
 15418                           ; Regs used in _LedPointSelect: [wreg]
 15419                           ;LedPointSelect@led stored from wreg
 15420  27DE  0020               	movlb	0	; select bank0
 15421  27DF  00A1               	movwf	LedPointSelect@led
 15422                           
 15423                           ;LED_B1.c: 10: if(led == 1)
 15424  27E0  0821               	movf	LedPointSelect@led,w
 15425  27E1  3A01               	xorlw	1
 15426  27E2  1D03               	skipz
 15427  27E3  2FEA               	goto	l6458
 15428                           
 15429                           ;LED_B1.c: 11: {
 15430                           ;LED_B1.c: 12: LED=&VarLED1;
 15431  27E4  30D9               	movlw	_VarLED1& (0+255)
 15432  27E5  00A0               	movwf	??_LedPointSelect
 15433  27E6  0820               	movf	??_LedPointSelect,w
 15434  27E7  0021               	movlb	1	; select bank1
 15435  27E8  00BB               	movwf	_LED^(0+128)
 15436                           
 15437                           ;LED_B1.c: 13: }
 15438  27E9  0008               	return
 15439  27EA                     l6458:	
 15440                           
 15441                           ;LED_B1.c: 16: else if(led == 2)
 15442  27EA  0020               	movlb	0	; select bank0
 15443  27EB  0821               	movf	LedPointSelect@led,w
 15444  27EC  3A02               	xorlw	2
 15445  27ED  1D03               	skipz
 15446  27EE  2FF5               	goto	l6462
 15447                           
 15448                           ;LED_B1.c: 17: {
 15449                           ;LED_B1.c: 18: LED=&VarLED2;
 15450  27EF  30DD               	movlw	_VarLED2& (0+255)
 15451  27F0  00A0               	movwf	??_LedPointSelect
 15452  27F1  0820               	movf	??_LedPointSelect,w
 15453  27F2  0021               	movlb	1	; select bank1
 15454  27F3  00BB               	movwf	_LED^(0+128)
 15455                           
 15456                           ;LED_B1.c: 19: }
 15457  27F4  0008               	return
 15458  27F5                     l6462:	
 15459                           
 15460                           ;LED_B1.c: 28: else if(led == 99)
 15461  27F5  0020               	movlb	0	; select bank0
 15462  27F6  0821               	movf	LedPointSelect@led,w
 15463  27F7  3A63               	xorlw	99
 15464  27F8  1D03               	skipz
 15465  27F9  0008               	return
 15466                           
 15467                           ;LED_B1.c: 29: {
 15468                           ;LED_B1.c: 30: LED=&VarErrLED;
 15469  27FA  30D5               	movlw	_VarErrLED& (0+255)
 15470  27FB  00A0               	movwf	??_LedPointSelect
 15471  27FC  0820               	movf	??_LedPointSelect,w
 15472  27FD  0021               	movlb	1	; select bank1
 15473  27FE  00BB               	movwf	_LED^(0+128)
 15474  27FF  0008               	return
 15475  2800                     __end_of_LedPointSelect:	
 15476                           
 15477                           	psect	text91
 15478  26F0                     __ptext91:	
 15479 ;; *************** function _DimmerLights_Close *****************
 15480 ;; Defined at:
 15481 ;;		line 90 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;		None
 15484 ;; Auto vars:     Size  Location     Type
 15485 ;;		None
 15486 ;; Return value:  Size  Location     Type
 15487 ;;		None               void
 15488 ;; Registers used:
 15489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;Total ram usage:        0 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; Hardware stack levels required when called:    5
 15502 ;; This function calls:
 15503 ;;		_getDimmerLights_StatusFlag
 15504 ;;		_setLoad_GO
 15505 ;; This function is called by:
 15506 ;;		_DimmerLights_Main
 15507 ;; This function uses a non-reentrant model
 15508 ;;
 15509                           
 15510                           
 15511                           ;psect for function _DimmerLights_Close
 15512  26F0                     _DimmerLights_Close:	
 15513                           
 15514                           ;Dimmer_B1.c: 92: if(Dimmer->Detect)
 15515                           
 15516                           ;incstack = 0
 15517                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15518  26F0  0021               	movlb	1	; select bank1
 15519  26F1  0839               	movf	_Dimmer^(0+128),w
 15520  26F2  0086               	movwf	6
 15521  26F3  0187               	clrf	7
 15522  26F4  1C01               	btfss	1,0
 15523  26F5  0008               	return
 15524                           
 15525                           ;Dimmer_B1.c: 93: {
 15526                           ;Dimmer_B1.c: 94: Dimmer->Detect=0;
 15527  26F6  0839               	movf	_Dimmer^(0+128),w
 15528  26F7  0086               	movwf	6
 15529  26F8  0187               	clrf	7
 15530  26F9  1001               	bcf	1,0
 15531                           
 15532                           ;Dimmer_B1.c: 95: if(!getDimmerLights_StatusFlag())
 15533  26FA  31A6  262D  31A6   	fcall	_getDimmerLights_StatusFlag
 15534  26FD  3800               	iorlw	0
 15535  26FE  1D03               	skipz
 15536  26FF  0008               	return
 15537                           
 15538                           ;Dimmer_B1.c: 96: {
 15539                           ;Dimmer_B1.c: 97: setLoad_GO(0);
 15540  2700  3000               	movlw	0
 15541  2701  31A4  2428         	fcall	_setLoad_GO
 15542                           
 15543                           ;Dimmer_B1.c: 98: Memory->GO=1;
 15544  2703  0021               	movlb	1	; select bank1
 15545  2704  0868               	movf	_Memory^(0+128),w
 15546  2705  3E22               	addlw	34
 15547  2706  0086               	movwf	6
 15548  2707  3002               	movlw	2	; select bank4/5
 15549  2708  0087               	movwf	7
 15550  2709  1481               	bsf	1,1
 15551  270A  0008               	return
 15552  270B                     __end_of_DimmerLights_Close:	
 15553                           
 15554                           	psect	text92
 15555  2428                     __ptext92:	
 15556 ;; *************** function _setLoad_GO *****************
 15557 ;; Defined at:
 15558 ;;		line 260 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15559 ;; Parameters:    Size  Location     Type
 15560 ;;  command         1    wreg     unsigned char 
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;  command         1    0[BANK0 ] unsigned char 
 15563 ;; Return value:  Size  Location     Type
 15564 ;;		None               void
 15565 ;; Registers used:
 15566 ;;		wreg, fsr1l, fsr1h
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;Total ram usage:        1 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:    4
 15579 ;; This function calls:
 15580 ;;		Nothing
 15581 ;; This function is called by:
 15582 ;;		_DimmerLights_Close
 15583 ;; This function uses a non-reentrant model
 15584 ;;
 15585                           
 15586                           
 15587                           ;psect for function _setLoad_GO
 15588  2428                     _setLoad_GO:	
 15589                           
 15590                           ;incstack = 0
 15591                           ; Regs used in _setLoad_GO: [wregfsr1]
 15592                           ;setLoad_GO@command stored from wreg
 15593  2428  0020               	movlb	0	; select bank0
 15594  2429  00A0               	movwf	setLoad_GO@command
 15595                           
 15596                           ;OverLoad_B1.c: 262: Load->GO=command;
 15597  242A  086E               	movf	_Load,w
 15598  242B  0086               	movwf	6
 15599  242C  3002               	movlw	2	; select bank4/5
 15600  242D  0087               	movwf	7
 15601  242E  0820               	movf	setLoad_GO@command,w
 15602  242F  1081               	bcf	1,1
 15603  2430  1D03               	skipz
 15604  2431  1481               	bsf	1,1
 15605  2432  0008               	return
 15606  2433                     __end_of_setLoad_GO:	
 15607                           
 15608                           	psect	text93
 15609  262D                     __ptext93:	
 15610 ;; *************** function _getDimmerLights_StatusFlag *****************
 15611 ;; Defined at:
 15612 ;;		line 197 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;		None
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;  Status          1    1[BANK0 ] unsigned char 
 15617 ;; Return value:  Size  Location     Type
 15618 ;;                  1    wreg      unsigned char 
 15619 ;; Registers used:
 15620 ;;		wreg, fsr1l, fsr1h, status,2
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;Total ram usage:        3 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    4
 15633 ;; This function calls:
 15634 ;;		Nothing
 15635 ;; This function is called by:
 15636 ;;		_DimmerLights_Close
 15637 ;;		_DimmerLights_Exceptions
 15638 ;;		_Flash_Memory_Main
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           
 15643                           ;psect for function _getDimmerLights_StatusFlag
 15644  262D                     _getDimmerLights_StatusFlag:	
 15645                           
 15646                           ;Dimmer_B1.c: 199: char Status=0;
 15647                           
 15648                           ;incstack = 0
 15649                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 15650  262D  0020               	movlb	0	; select bank0
 15651  262E  01A1               	clrf	getDimmerLights_StatusFlag@Status
 15652                           
 15653                           ;Dimmer_B1.c: 206: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 15654  262F  01A2               	clrf	_getDimmerLights_StatusFlag$1819
 15655  2630  0AA2               	incf	_getDimmerLights_StatusFlag$1819,f
 15656  2631  0879               	movf	_DimmerLights11,w
 15657  2632  0086               	movwf	6
 15658  2633  3001               	movlw	1	; select bank2/3
 15659  2634  0087               	movwf	7
 15660  2635  1B01               	btfsc	1,6
 15661  2636  2E3D               	goto	l6734
 15662  2637  087A               	movf	_DimmerLights22,w
 15663  2638  0086               	movwf	6
 15664  2639  3001               	movlw	1	; select bank2/3
 15665  263A  0087               	movwf	7
 15666  263B  1F01               	btfss	1,6
 15667  263C  01A2               	clrf	_getDimmerLights_StatusFlag$1819
 15668  263D                     l6734:	
 15669  263D  0822               	movf	_getDimmerLights_StatusFlag$1819,w
 15670  263E  00A0               	movwf	??_getDimmerLights_StatusFlag
 15671  263F  0820               	movf	??_getDimmerLights_StatusFlag,w
 15672  2640  00A1               	movwf	getDimmerLights_StatusFlag@Status
 15673                           
 15674                           ;Dimmer_B1.c: 213: return Status;
 15675  2641  0821               	movf	getDimmerLights_StatusFlag@Status,w
 15676  2642  0008               	return
 15677  2643                     __end_of_getDimmerLights_StatusFlag:	
 15678                           
 15679                           	psect	text94
 15680  25ED                     __ptext94:	
 15681 ;; *************** function _DimmerLights_Initialization *****************
 15682 ;; Defined at:
 15683 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15684 ;; Parameters:    Size  Location     Type
 15685 ;;		None
 15686 ;; Auto vars:     Size  Location     Type
 15687 ;;		None
 15688 ;; Return value:  Size  Location     Type
 15689 ;;		None               void
 15690 ;; Registers used:
 15691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15692 ;; Tracked objects:
 15693 ;;		On entry : 0/0
 15694 ;;		On exit  : 0/0
 15695 ;;		Unchanged: 0/0
 15696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;Total ram usage:        1 bytes
 15702 ;; Hardware stack levels used:    1
 15703 ;; Hardware stack levels required when called:    8
 15704 ;; This function calls:
 15705 ;;		_Dimmer_Initialization
 15706 ;;		_setDimmerLights_Initialization
 15707 ;; This function is called by:
 15708 ;;		_main
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712                           
 15713                           ;psect for function _DimmerLights_Initialization
 15714  25ED                     _DimmerLights_Initialization:	
 15715                           
 15716                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 15717                           
 15718                           ;incstack = 0
 15719                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15720  25ED  302E               	movlw	_DimmerLights1& (0+255)
 15721  25EE  0020               	movlb	0	; select bank0
 15722  25EF  00E2               	movwf	??_DimmerLights_Initialization
 15723  25F0  0862               	movf	??_DimmerLights_Initialization,w
 15724  25F1  00F9               	movwf	_DimmerLights11
 15725                           
 15726                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 15727  25F2  3001               	movlw	1
 15728  25F3  319C  2434  31A5   	fcall	_setDimmerLights_Initialization
 15729                           
 15730                           ;Dimmer_B1.c: 40: DimmerLights22=&DimmerLights2;
 15731  25F6  303B               	movlw	_DimmerLights2& (0+255)
 15732  25F7  0020               	movlb	0	; select bank0
 15733  25F8  00E2               	movwf	??_DimmerLights_Initialization
 15734  25F9  0862               	movf	??_DimmerLights_Initialization,w
 15735  25FA  00FA               	movwf	_DimmerLights22
 15736                           
 15737                           ;Dimmer_B1.c: 41: setDimmerLights_Initialization(2);
 15738  25FB  3002               	movlw	2
 15739  25FC  319C  2434  31A5   	fcall	_setDimmerLights_Initialization
 15740                           
 15741                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 15742  25FF  31A3  23A7         	fcall	_Dimmer_Initialization
 15743  2601  0008               	return
 15744  2602                     __end_of_DimmerLights_Initialization:	
 15745                           
 15746                           	psect	text95
 15747  1C34                     __ptext95:	
 15748 ;; *************** function _setDimmerLights_Initialization *****************
 15749 ;; Defined at:
 15750 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;  lights          1    wreg     unsigned char 
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;  lights          1   65[BANK0 ] unsigned char 
 15755 ;; Return value:  Size  Location     Type
 15756 ;;		None               void
 15757 ;; Registers used:
 15758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;Total ram usage:        3 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:    7
 15771 ;; This function calls:
 15772 ;;		_DimmerLightsPointSelect
 15773 ;;		_getPercentValue
 15774 ;; This function is called by:
 15775 ;;		_DimmerLights_Initialization
 15776 ;; This function uses a non-reentrant model
 15777 ;;
 15778                           
 15779                           
 15780                           ;psect for function _setDimmerLights_Initialization
 15781  1C34                     _setDimmerLights_Initialization:	
 15782                           
 15783                           ;incstack = 0
 15784                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15785                           ;setDimmerLights_Initialization@lights stored from wreg
 15786  1C34  0020               	movlb	0	; select bank0
 15787  1C35  00E1               	movwf	setDimmerLights_Initialization@lights
 15788                           
 15789                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 15790  1C36  0861               	movf	setDimmerLights_Initialization@lights,w
 15791  1C37  31A5  25B1  319C   	fcall	_DimmerLightsPointSelect
 15792                           
 15793                           ;Dimmer_B1.c: 58: DimmerLights->MaxmumValue=((char)((100-60)*1.5));
 15794  1C3A  303C               	movlw	60
 15795  1C3B  0020               	movlb	0	; select bank0
 15796  1C3C  00DF               	movwf	??_setDimmerLights_Initialization
 15797  1C3D  086C               	movf	_DimmerLights,w
 15798  1C3E  3E05               	addlw	5
 15799  1C3F  0086               	movwf	6
 15800  1C40  3001               	movlw	1	; select bank2/3
 15801  1C41  0087               	movwf	7
 15802  1C42  085F               	movf	??_setDimmerLights_Initialization,w
 15803  1C43  0081               	movwf	1
 15804                           
 15805                           ;Dimmer_B1.c: 59: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 15806  1C44  3078               	movlw	120
 15807  1C45  00DF               	movwf	??_setDimmerLights_Initialization
 15808  1C46  086C               	movf	_DimmerLights,w
 15809  1C47  3E06               	addlw	6
 15810  1C48  0086               	movwf	6
 15811  1C49  3001               	movlw	1	; select bank2/3
 15812  1C4A  0087               	movwf	7
 15813  1C4B  085F               	movf	??_setDimmerLights_Initialization,w
 15814  1C4C  0081               	movwf	1
 15815                           
 15816                           ;Dimmer_B1.c: 60: DimmerLights->Clear=1;
 15817  1C4D  086C               	movf	_DimmerLights,w
 15818  1C4E  3E0C               	addlw	12
 15819  1C4F  0086               	movwf	6
 15820  1C50  3001               	movlw	1	; select bank2/3
 15821  1C51  0087               	movwf	7
 15822  1C52  1401               	bsf	1,0
 15823                           
 15824                           ;Dimmer_B1.c: 66: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15825  1C53  086C               	movf	_DimmerLights,w
 15826  1C54  3E06               	addlw	6
 15827  1C55  0086               	movwf	6
 15828  1C56  3001               	movlw	1	; select bank2/3
 15829  1C57  0087               	movwf	7
 15830  1C58  0801               	movf	1,w
 15831  1C59  00DF               	movwf	??_setDimmerLights_Initialization
 15832  1C5A  086C               	movf	_DimmerLights,w
 15833  1C5B  3E04               	addlw	4
 15834  1C5C  0086               	movwf	6
 15835  1C5D  3001               	movlw	1	; select bank2/3
 15836  1C5E  0087               	movwf	7
 15837  1C5F  085F               	movf	??_setDimmerLights_Initialization,w
 15838  1C60  0081               	movwf	1
 15839                           
 15840                           ;Dimmer_B1.c: 84: DimmerLights->MaxmumValue=getPercentValue(Product->Data[(20+lights)]);
 15841  1C61  0861               	movf	setDimmerLights_Initialization@lights,w
 15842  1C62  3E14               	addlw	20
 15843  1C63  076F               	addwf	_Product,w
 15844  1C64  00DF               	movwf	??_setDimmerLights_Initialization
 15845  1C65  085F               	movf	??_setDimmerLights_Initialization,w
 15846  1C66  0086               	movwf	6
 15847  1C67  3001               	movlw	1	; select bank2/3
 15848  1C68  0087               	movwf	7
 15849  1C69  0801               	movf	1,w
 15850  1C6A  319E  268A         	fcall	_getPercentValue
 15851  1C6C  0020               	movlb	0	; select bank0
 15852  1C6D  00E0               	movwf	??_setDimmerLights_Initialization+1
 15853  1C6E  086C               	movf	_DimmerLights,w
 15854  1C6F  3E05               	addlw	5
 15855  1C70  0086               	movwf	6
 15856  1C71  3001               	movlw	1	; select bank2/3
 15857  1C72  0087               	movwf	7
 15858  1C73  0860               	movf	??_setDimmerLights_Initialization+1,w
 15859  1C74  0081               	movwf	1
 15860  1C75  0008               	return
 15861  1C76                     __end_of_setDimmerLights_Initialization:	
 15862                           
 15863                           	psect	text96
 15864  1E8A                     __ptext96:	
 15865 ;; *************** function _getPercentValue *****************
 15866 ;; Defined at:
 15867 ;;		line 472 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  value           1    wreg     unsigned char 
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;  value           1   59[BANK0 ] unsigned char 
 15872 ;;  i               3   60[BANK0 ] float 
 15873 ;; Return value:  Size  Location     Type
 15874 ;;                  1    wreg      unsigned char 
 15875 ;; Registers used:
 15876 ;;		wreg, status,2, status,0, pclath, cstack
 15877 ;; Tracked objects:
 15878 ;;		On entry : 0/0
 15879 ;;		On exit  : 0/0
 15880 ;;		Unchanged: 0/0
 15881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;Total ram usage:        6 bytes
 15887 ;; Hardware stack levels used:    1
 15888 ;; Hardware stack levels required when called:    6
 15889 ;; This function calls:
 15890 ;;		___awtoft
 15891 ;;		___ftadd
 15892 ;;		___ftdiv
 15893 ;;		___ftmul
 15894 ;;		___fttol
 15895 ;; This function is called by:
 15896 ;;		_setDimmerLights_Initialization
 15897 ;;		_setDimmerLights_AdjRF
 15898 ;; This function uses a non-reentrant model
 15899 ;;
 15900                           
 15901                           
 15902                           ;psect for function _getPercentValue
 15903  1E8A                     _getPercentValue:	
 15904                           
 15905                           ;incstack = 0
 15906                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15907                           ;getPercentValue@value stored from wreg
 15908  1E8A  0020               	movlb	0	; select bank0
 15909  1E8B  00DB               	movwf	getPercentValue@value
 15910                           
 15911                           ;Dimmer_B1.c: 475: float i=((char)((100-20)*1.5))-((char)((100-60)*1.5));
 15912  1E8C  3000               	movlw	0
 15913  1E8D  00DC               	movwf	getPercentValue@i
 15914  1E8E  3070               	movlw	112
 15915  1E8F  00DD               	movwf	getPercentValue@i+1
 15916  1E90  3042               	movlw	66
 15917  1E91  00DE               	movwf	getPercentValue@i+2
 15918                           
 15919                           ;Dimmer_B1.c: 476: i/=100;
 15920  1E92  3000               	movlw	0
 15921  1E93  00AE               	movwf	___ftdiv@f2
 15922  1E94  30C8               	movlw	200
 15923  1E95  00AF               	movwf	___ftdiv@f2+1
 15924  1E96  3042               	movlw	66
 15925  1E97  00B0               	movwf	___ftdiv@f2+2
 15926  1E98  085C               	movf	getPercentValue@i,w
 15927  1E99  00B1               	movwf	___ftdiv@f1
 15928  1E9A  085D               	movf	getPercentValue@i+1,w
 15929  1E9B  00B2               	movwf	___ftdiv@f1+1
 15930  1E9C  085E               	movf	getPercentValue@i+2,w
 15931  1E9D  00B3               	movwf	___ftdiv@f1+2
 15932  1E9E  3189  21BB  319E   	fcall	___ftdiv
 15933  1EA1  0020               	movlb	0	; select bank0
 15934  1EA2  082E               	movf	?___ftdiv,w
 15935  1EA3  00DC               	movwf	getPercentValue@i
 15936  1EA4  082F               	movf	?___ftdiv+1,w
 15937  1EA5  00DD               	movwf	getPercentValue@i+1
 15938  1EA6  0830               	movf	?___ftdiv+2,w
 15939  1EA7  00DE               	movwf	getPercentValue@i+2
 15940                           
 15941                           ;Dimmer_B1.c: 477: return (char)(((100-value)*i)+((char)((100-60)*1.5)));
 15942  1EA8  085B               	movf	getPercentValue@value,w
 15943  1EA9  00D9               	movwf	??_getPercentValue
 15944  1EAA  01DA               	clrf	??_getPercentValue+1
 15945  1EAB  09D9               	comf	??_getPercentValue,f
 15946  1EAC  09DA               	comf	??_getPercentValue+1,f
 15947  1EAD  0AD9               	incf	??_getPercentValue,f
 15948  1EAE  1903               	skipnz
 15949  1EAF  0ADA               	incf	??_getPercentValue+1,f
 15950  1EB0  0859               	movf	??_getPercentValue,w
 15951  1EB1  3E64               	addlw	100
 15952  1EB2  00A8               	movwf	___awtoft@c
 15953  1EB3  3000               	movlw	0
 15954  1EB4  3D5A               	addwfc	??_getPercentValue+1,w
 15955  1EB5  00A9               	movwf	___awtoft@c+1
 15956  1EB6  31A7  27BC  319E   	fcall	___awtoft
 15957  1EB9  0020               	movlb	0	; select bank0
 15958  1EBA  0828               	movf	?___awtoft,w
 15959  1EBB  00B1               	movwf	___ftmul@f2
 15960  1EBC  0829               	movf	?___awtoft+1,w
 15961  1EBD  00B2               	movwf	___ftmul@f2+1
 15962  1EBE  082A               	movf	?___awtoft+2,w
 15963  1EBF  00B3               	movwf	___ftmul@f2+2
 15964  1EC0  085C               	movf	getPercentValue@i,w
 15965  1EC1  00AE               	movwf	___ftmul@f1
 15966  1EC2  085D               	movf	getPercentValue@i+1,w
 15967  1EC3  00AF               	movwf	___ftmul@f1+1
 15968  1EC4  085E               	movf	getPercentValue@i+2,w
 15969  1EC5  00B0               	movwf	___ftmul@f1+2
 15970  1EC6  318A  2264  319E   	fcall	___ftmul
 15971  1EC9  0020               	movlb	0	; select bank0
 15972  1ECA  082E               	movf	?___ftmul,w
 15973  1ECB  00C1               	movwf	___ftadd@f2
 15974  1ECC  082F               	movf	?___ftmul+1,w
 15975  1ECD  00C2               	movwf	___ftadd@f2+1
 15976  1ECE  0830               	movf	?___ftmul+2,w
 15977  1ECF  00C3               	movwf	___ftadd@f2+2
 15978  1ED0  3000               	movlw	0
 15979  1ED1  00BE               	movwf	___ftadd@f1
 15980  1ED2  3070               	movlw	112
 15981  1ED3  00BF               	movwf	___ftadd@f1+1
 15982  1ED4  3042               	movlw	66
 15983  1ED5  00C0               	movwf	___ftadd@f1+2
 15984  1ED6  318B  23E1  319E   	fcall	___ftadd
 15985  1ED9  0020               	movlb	0	; select bank0
 15986  1EDA  083E               	movf	?___ftadd,w
 15987  1EDB  00CB               	movwf	___fttol@f1
 15988  1EDC  083F               	movf	?___ftadd+1,w
 15989  1EDD  00CC               	movwf	___fttol@f1+1
 15990  1EDE  0840               	movf	?___ftadd+2,w
 15991  1EDF  00CD               	movwf	___fttol@f1+2
 15992  1EE0  3196  2656         	fcall	___fttol
 15993  1EE2  0020               	movlb	0	; select bank0
 15994  1EE3  084B               	movf	?___fttol,w
 15995  1EE4  0008               	return
 15996  1EE5                     __end_of_getPercentValue:	
 15997                           
 15998                           	psect	text97
 15999  1656                     __ptext97:	
 16000 ;; *************** function ___fttol *****************
 16001 ;; Defined at:
 16002 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;  f1              3   43[BANK0 ] float 
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;  lval            4   52[BANK0 ] unsigned long 
 16007 ;;  exp1            1   56[BANK0 ] unsigned char 
 16008 ;;  sign1           1   51[BANK0 ] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;                  4   43[BANK0 ] long 
 16011 ;; Registers used:
 16012 ;;		wreg, status,2, status,0
 16013 ;; Tracked objects:
 16014 ;;		On entry : 0/0
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;Total ram usage:       14 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:    4
 16025 ;; This function calls:
 16026 ;;		Nothing
 16027 ;; This function is called by:
 16028 ;;		_getPercentValue
 16029 ;;		_setPercentValue
 16030 ;; This function uses a non-reentrant model
 16031 ;;
 16032                           
 16033                           
 16034                           ;psect for function ___fttol
 16035  1656                     ___fttol:	
 16036                           
 16037                           ;incstack = 0
 16038                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16039  1656  0020               	movlb	0	; select bank0
 16040  1657  084B               	movf	___fttol@f1,w
 16041  1658  00CF               	movwf	??___fttol
 16042  1659  084C               	movf	___fttol@f1+1,w
 16043  165A  00D0               	movwf	??___fttol+1
 16044  165B  084D               	movf	___fttol@f1+2,w
 16045  165C  00D1               	movwf	??___fttol+2
 16046  165D  1003               	clrc
 16047  165E  0D50               	rlf	??___fttol+1,w
 16048  165F  0D51               	rlf	??___fttol+2,w
 16049  1660  00D2               	movwf	??___fttol+3
 16050  1661  0852               	movf	??___fttol+3,w
 16051  1662  00D8               	movwf	___fttol@exp1
 16052  1663  08D8               	movf	___fttol@exp1,f
 16053  1664  1D03               	skipz
 16054  1665  2E6F               	goto	l6360
 16055  1666  3000               	movlw	0
 16056  1667  00CE               	movwf	?___fttol+3
 16057  1668  3000               	movlw	0
 16058  1669  00CD               	movwf	?___fttol+2
 16059  166A  3000               	movlw	0
 16060  166B  00CC               	movwf	?___fttol+1
 16061  166C  3000               	movlw	0
 16062  166D  00CB               	movwf	?___fttol
 16063  166E  0008               	return
 16064  166F                     l6360:	
 16065  166F  084B               	movf	___fttol@f1,w
 16066  1670  00CF               	movwf	??___fttol
 16067  1671  084C               	movf	___fttol@f1+1,w
 16068  1672  00D0               	movwf	??___fttol+1
 16069  1673  084D               	movf	___fttol@f1+2,w
 16070  1674  00D1               	movwf	??___fttol+2
 16071  1675  3017               	movlw	23
 16072  1676                     u4665:	
 16073  1676  36D1               	lsrf	??___fttol+2,f
 16074  1677  0CD0               	rrf	??___fttol+1,f
 16075  1678  0CCF               	rrf	??___fttol,f
 16076  1679  0B89               	decfsz	9,f
 16077  167A  2E76               	goto	u4665
 16078  167B  084F               	movf	??___fttol,w
 16079  167C  00D2               	movwf	??___fttol+3
 16080  167D  0852               	movf	??___fttol+3,w
 16081  167E  00D3               	movwf	___fttol@sign1
 16082  167F  17CC               	bsf	___fttol@f1+1,7
 16083  1680  30FF               	movlw	255
 16084  1681  05CB               	andwf	___fttol@f1,f
 16085  1682  30FF               	movlw	255
 16086  1683  05CC               	andwf	___fttol@f1+1,f
 16087  1684  3000               	movlw	0
 16088  1685  05CD               	andwf	___fttol@f1+2,f
 16089  1686  084B               	movf	___fttol@f1,w
 16090  1687  00D4               	movwf	___fttol@lval
 16091  1688  084C               	movf	___fttol@f1+1,w
 16092  1689  00D5               	movwf	___fttol@lval+1
 16093  168A  084D               	movf	___fttol@f1+2,w
 16094  168B  00D6               	movwf	___fttol@lval+2
 16095  168C  01D7               	clrf	___fttol@lval+3
 16096  168D  308E               	movlw	142
 16097  168E  02D8               	subwf	___fttol@exp1,f
 16098  168F  1FD8               	btfss	___fttol@exp1,7
 16099  1690  2EAD               	goto	l6380
 16100  1691  0858               	movf	___fttol@exp1,w
 16101  1692  3A80               	xorlw	128
 16102  1693  3E8F               	addlw	143
 16103  1694  1803               	skipnc
 16104  1695  2E9F               	goto	l6378
 16105  1696  3000               	movlw	0
 16106  1697  00CE               	movwf	?___fttol+3
 16107  1698  3000               	movlw	0
 16108  1699  00CD               	movwf	?___fttol+2
 16109  169A  3000               	movlw	0
 16110  169B  00CC               	movwf	?___fttol+1
 16111  169C  3000               	movlw	0
 16112  169D  00CB               	movwf	?___fttol
 16113  169E  0008               	return
 16114  169F                     l6378:	
 16115  169F  3001               	movlw	1
 16116  16A0                     u4695:	
 16117  16A0  36D7               	lsrf	___fttol@lval+3,f
 16118  16A1  0CD6               	rrf	___fttol@lval+2,f
 16119  16A2  0CD5               	rrf	___fttol@lval+1,f
 16120  16A3  0CD4               	rrf	___fttol@lval,f
 16121  16A4  0B89               	decfsz	9,f
 16122  16A5  2EA0               	goto	u4695
 16123  16A6  3001               	movlw	1
 16124  16A7  00CF               	movwf	??___fttol
 16125  16A8  084F               	movf	??___fttol,w
 16126  16A9  07D8               	addwf	___fttol@exp1,f
 16127  16AA  1903               	btfsc	3,2
 16128  16AB  2EC6               	goto	l6390
 16129  16AC  2E9F               	goto	l6378
 16130  16AD                     l6380:	
 16131  16AD  3018               	movlw	24
 16132  16AE  0258               	subwf	___fttol@exp1,w
 16133  16AF  1C03               	skipc
 16134  16B0  2EC3               	goto	l6388
 16135  16B1  3000               	movlw	0
 16136  16B2  00CE               	movwf	?___fttol+3
 16137  16B3  3000               	movlw	0
 16138  16B4  00CD               	movwf	?___fttol+2
 16139  16B5  3000               	movlw	0
 16140  16B6  00CC               	movwf	?___fttol+1
 16141  16B7  3000               	movlw	0
 16142  16B8  00CB               	movwf	?___fttol
 16143  16B9  0008               	return
 16144  16BA                     l6386:	
 16145  16BA  3001               	movlw	1
 16146  16BB                     u4725:	
 16147  16BB  35D4               	lslf	___fttol@lval,f
 16148  16BC  0DD5               	rlf	___fttol@lval+1,f
 16149  16BD  0DD6               	rlf	___fttol@lval+2,f
 16150  16BE  0DD7               	rlf	___fttol@lval+3,f
 16151  16BF  0B89               	decfsz	9,f
 16152  16C0  2EBB               	goto	u4725
 16153  16C1  3001               	movlw	1
 16154  16C2  02D8               	subwf	___fttol@exp1,f
 16155  16C3                     l6388:	
 16156  16C3  08D8               	movf	___fttol@exp1,f
 16157  16C4  1D03               	skipz
 16158  16C5  2EBA               	goto	l6386
 16159  16C6                     l6390:	
 16160  16C6  0853               	movf	___fttol@sign1,w
 16161  16C7  1903               	btfsc	3,2
 16162  16C8  2ED4               	goto	l6394
 16163  16C9  09D4               	comf	___fttol@lval,f
 16164  16CA  09D5               	comf	___fttol@lval+1,f
 16165  16CB  09D6               	comf	___fttol@lval+2,f
 16166  16CC  09D7               	comf	___fttol@lval+3,f
 16167  16CD  0AD4               	incf	___fttol@lval,f
 16168  16CE  1903               	skipnz
 16169  16CF  0AD5               	incf	___fttol@lval+1,f
 16170  16D0  1903               	skipnz
 16171  16D1  0AD6               	incf	___fttol@lval+2,f
 16172  16D2  1903               	skipnz
 16173  16D3  0AD7               	incf	___fttol@lval+3,f
 16174  16D4                     l6394:	
 16175  16D4  0857               	movf	___fttol@lval+3,w
 16176  16D5  00CE               	movwf	?___fttol+3
 16177  16D6  0856               	movf	___fttol@lval+2,w
 16178  16D7  00CD               	movwf	?___fttol+2
 16179  16D8  0855               	movf	___fttol@lval+1,w
 16180  16D9  00CC               	movwf	?___fttol+1
 16181  16DA  0854               	movf	___fttol@lval,w
 16182  16DB  00CB               	movwf	?___fttol
 16183  16DC  0008               	return
 16184  16DD                     __end_of___fttol:	
 16185                           
 16186                           	psect	text98
 16187  0A64                     __ptext98:	
 16188 ;; *************** function ___ftmul *****************
 16189 ;; Defined at:
 16190 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16191 ;; Parameters:    Size  Location     Type
 16192 ;;  f1              3   14[BANK0 ] float 
 16193 ;;  f2              3   17[BANK0 ] float 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16196 ;;  sign            1   29[BANK0 ] unsigned char 
 16197 ;;  cntr            1   28[BANK0 ] unsigned char 
 16198 ;;  exp             1   24[BANK0 ] unsigned char 
 16199 ;; Return value:  Size  Location     Type
 16200 ;;                  3   14[BANK0 ] float 
 16201 ;; Registers used:
 16202 ;;		wreg, status,2, status,0, pclath, cstack
 16203 ;; Tracked objects:
 16204 ;;		On entry : 0/0
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;Total ram usage:       16 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; Hardware stack levels required when called:    5
 16215 ;; This function calls:
 16216 ;;		___ftpack
 16217 ;; This function is called by:
 16218 ;;		_getPercentValue
 16219 ;; This function uses a non-reentrant model
 16220 ;;
 16221                           
 16222                           
 16223                           ;psect for function ___ftmul
 16224  0A64                     ___ftmul:	
 16225                           
 16226                           ;incstack = 0
 16227                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16228  0A64  0020               	movlb	0	; select bank0
 16229  0A65  082E               	movf	___ftmul@f1,w
 16230  0A66  00B4               	movwf	??___ftmul
 16231  0A67  082F               	movf	___ftmul@f1+1,w
 16232  0A68  00B5               	movwf	??___ftmul+1
 16233  0A69  0830               	movf	___ftmul@f1+2,w
 16234  0A6A  00B6               	movwf	??___ftmul+2
 16235  0A6B  1003               	clrc
 16236  0A6C  0D35               	rlf	??___ftmul+1,w
 16237  0A6D  0D36               	rlf	??___ftmul+2,w
 16238  0A6E  00B7               	movwf	??___ftmul+3
 16239  0A6F  0837               	movf	??___ftmul+3,w
 16240  0A70  00B8               	movwf	___ftmul@exp
 16241  0A71  08B8               	movf	___ftmul@exp,f
 16242  0A72  1D03               	skipz
 16243  0A73  2A7B               	goto	l6310
 16244  0A74  3000               	movlw	0
 16245  0A75  00AE               	movwf	?___ftmul
 16246  0A76  3000               	movlw	0
 16247  0A77  00AF               	movwf	?___ftmul+1
 16248  0A78  3000               	movlw	0
 16249  0A79  00B0               	movwf	?___ftmul+2
 16250  0A7A  0008               	return
 16251  0A7B                     l6310:	
 16252  0A7B  0831               	movf	___ftmul@f2,w
 16253  0A7C  00B4               	movwf	??___ftmul
 16254  0A7D  0832               	movf	___ftmul@f2+1,w
 16255  0A7E  00B5               	movwf	??___ftmul+1
 16256  0A7F  0833               	movf	___ftmul@f2+2,w
 16257  0A80  00B6               	movwf	??___ftmul+2
 16258  0A81  1003               	clrc
 16259  0A82  0D35               	rlf	??___ftmul+1,w
 16260  0A83  0D36               	rlf	??___ftmul+2,w
 16261  0A84  00B7               	movwf	??___ftmul+3
 16262  0A85  0837               	movf	??___ftmul+3,w
 16263  0A86  00BD               	movwf	___ftmul@sign
 16264  0A87  08BD               	movf	___ftmul@sign,f
 16265  0A88  1D03               	skipz
 16266  0A89  2A91               	goto	l6316
 16267  0A8A  3000               	movlw	0
 16268  0A8B  00AE               	movwf	?___ftmul
 16269  0A8C  3000               	movlw	0
 16270  0A8D  00AF               	movwf	?___ftmul+1
 16271  0A8E  3000               	movlw	0
 16272  0A8F  00B0               	movwf	?___ftmul+2
 16273  0A90  0008               	return
 16274  0A91                     l6316:	
 16275  0A91  083D               	movf	___ftmul@sign,w
 16276  0A92  3E7B               	addlw	123
 16277  0A93  00B4               	movwf	??___ftmul
 16278  0A94  0834               	movf	??___ftmul,w
 16279  0A95  07B8               	addwf	___ftmul@exp,f
 16280  0A96  082E               	movf	___ftmul@f1,w
 16281  0A97  00B4               	movwf	??___ftmul
 16282  0A98  082F               	movf	___ftmul@f1+1,w
 16283  0A99  00B5               	movwf	??___ftmul+1
 16284  0A9A  0830               	movf	___ftmul@f1+2,w
 16285  0A9B  00B6               	movwf	??___ftmul+2
 16286  0A9C  3010               	movlw	16
 16287  0A9D                     u4555:	
 16288  0A9D  36B6               	lsrf	??___ftmul+2,f
 16289  0A9E  0CB5               	rrf	??___ftmul+1,f
 16290  0A9F  0CB4               	rrf	??___ftmul,f
 16291  0AA0  0B89               	decfsz	9,f
 16292  0AA1  2A9D               	goto	u4555
 16293  0AA2  0834               	movf	??___ftmul,w
 16294  0AA3  00B7               	movwf	??___ftmul+3
 16295  0AA4  0837               	movf	??___ftmul+3,w
 16296  0AA5  00BD               	movwf	___ftmul@sign
 16297  0AA6  0831               	movf	___ftmul@f2,w
 16298  0AA7  00B4               	movwf	??___ftmul
 16299  0AA8  0832               	movf	___ftmul@f2+1,w
 16300  0AA9  00B5               	movwf	??___ftmul+1
 16301  0AAA  0833               	movf	___ftmul@f2+2,w
 16302  0AAB  00B6               	movwf	??___ftmul+2
 16303  0AAC  3010               	movlw	16
 16304  0AAD                     u4565:	
 16305  0AAD  36B6               	lsrf	??___ftmul+2,f
 16306  0AAE  0CB5               	rrf	??___ftmul+1,f
 16307  0AAF  0CB4               	rrf	??___ftmul,f
 16308  0AB0  0B89               	decfsz	9,f
 16309  0AB1  2AAD               	goto	u4565
 16310  0AB2  0834               	movf	??___ftmul,w
 16311  0AB3  00B7               	movwf	??___ftmul+3
 16312  0AB4  0837               	movf	??___ftmul+3,w
 16313  0AB5  06BD               	xorwf	___ftmul@sign,f
 16314  0AB6  3080               	movlw	128
 16315  0AB7  00B4               	movwf	??___ftmul
 16316  0AB8  0834               	movf	??___ftmul,w
 16317  0AB9  05BD               	andwf	___ftmul@sign,f
 16318  0ABA  17AF               	bsf	___ftmul@f1+1,7
 16319  0ABB  17B2               	bsf	___ftmul@f2+1,7
 16320  0ABC  30FF               	movlw	255
 16321  0ABD  05B1               	andwf	___ftmul@f2,f
 16322  0ABE  30FF               	movlw	255
 16323  0ABF  05B2               	andwf	___ftmul@f2+1,f
 16324  0AC0  3000               	movlw	0
 16325  0AC1  05B3               	andwf	___ftmul@f2+2,f
 16326  0AC2  3000               	movlw	0
 16327  0AC3  00B9               	movwf	___ftmul@f3_as_product
 16328  0AC4  3000               	movlw	0
 16329  0AC5  00BA               	movwf	___ftmul@f3_as_product+1
 16330  0AC6  3000               	movlw	0
 16331  0AC7  00BB               	movwf	___ftmul@f3_as_product+2
 16332  0AC8  3007               	movlw	7
 16333  0AC9  00B4               	movwf	??___ftmul
 16334  0ACA  0834               	movf	??___ftmul,w
 16335  0ACB  00BC               	movwf	___ftmul@cntr
 16336  0ACC                     l6328:	
 16337  0ACC  1C2E               	btfss	___ftmul@f1,0
 16338  0ACD  2AD4               	goto	l6332
 16339  0ACE  0831               	movf	___ftmul@f2,w
 16340  0ACF  07B9               	addwf	___ftmul@f3_as_product,f
 16341  0AD0  0832               	movf	___ftmul@f2+1,w
 16342  0AD1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16343  0AD2  0833               	movf	___ftmul@f2+2,w
 16344  0AD3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16345  0AD4                     l6332:	
 16346  0AD4  3001               	movlw	1
 16347  0AD5                     u4585:	
 16348  0AD5  36B0               	lsrf	___ftmul@f1+2,f
 16349  0AD6  0CAF               	rrf	___ftmul@f1+1,f
 16350  0AD7  0CAE               	rrf	___ftmul@f1,f
 16351  0AD8  0B89               	decfsz	9,f
 16352  0AD9  2AD5               	goto	u4585
 16353  0ADA  3001               	movlw	1
 16354  0ADB                     u4595:	
 16355  0ADB  35B1               	lslf	___ftmul@f2,f
 16356  0ADC  0DB2               	rlf	___ftmul@f2+1,f
 16357  0ADD  0DB3               	rlf	___ftmul@f2+2,f
 16358  0ADE  0B89               	decfsz	9,f
 16359  0ADF  2ADB               	goto	u4595
 16360  0AE0  3001               	movlw	1
 16361  0AE1  02BC               	subwf	___ftmul@cntr,f
 16362  0AE2  1D03               	btfss	3,2
 16363  0AE3  2ACC               	goto	l6328
 16364  0AE4  3009               	movlw	9
 16365  0AE5  00B4               	movwf	??___ftmul
 16366  0AE6  0834               	movf	??___ftmul,w
 16367  0AE7  00BC               	movwf	___ftmul@cntr
 16368  0AE8                     l6340:	
 16369  0AE8  1C2E               	btfss	___ftmul@f1,0
 16370  0AE9  2AF0               	goto	l6344
 16371  0AEA  0831               	movf	___ftmul@f2,w
 16372  0AEB  07B9               	addwf	___ftmul@f3_as_product,f
 16373  0AEC  0832               	movf	___ftmul@f2+1,w
 16374  0AED  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16375  0AEE  0833               	movf	___ftmul@f2+2,w
 16376  0AEF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16377  0AF0                     l6344:	
 16378  0AF0  3001               	movlw	1
 16379  0AF1                     u4625:	
 16380  0AF1  36B0               	lsrf	___ftmul@f1+2,f
 16381  0AF2  0CAF               	rrf	___ftmul@f1+1,f
 16382  0AF3  0CAE               	rrf	___ftmul@f1,f
 16383  0AF4  0B89               	decfsz	9,f
 16384  0AF5  2AF1               	goto	u4625
 16385  0AF6  3001               	movlw	1
 16386  0AF7                     u4635:	
 16387  0AF7  36BB               	lsrf	___ftmul@f3_as_product+2,f
 16388  0AF8  0CBA               	rrf	___ftmul@f3_as_product+1,f
 16389  0AF9  0CB9               	rrf	___ftmul@f3_as_product,f
 16390  0AFA  0B89               	decfsz	9,f
 16391  0AFB  2AF7               	goto	u4635
 16392  0AFC  3001               	movlw	1
 16393  0AFD  02BC               	subwf	___ftmul@cntr,f
 16394  0AFE  1D03               	btfss	3,2
 16395  0AFF  2AE8               	goto	l6340
 16396  0B00  0839               	movf	___ftmul@f3_as_product,w
 16397  0B01  00A0               	movwf	___ftpack@arg
 16398  0B02  083A               	movf	___ftmul@f3_as_product+1,w
 16399  0B03  00A1               	movwf	___ftpack@arg+1
 16400  0B04  083B               	movf	___ftmul@f3_as_product+2,w
 16401  0B05  00A2               	movwf	___ftpack@arg+2
 16402  0B06  0838               	movf	___ftmul@exp,w
 16403  0B07  00B4               	movwf	??___ftmul
 16404  0B08  0834               	movf	??___ftmul,w
 16405  0B09  00A3               	movwf	___ftpack@exp
 16406  0B0A  083D               	movf	___ftmul@sign,w
 16407  0B0B  00B5               	movwf	??___ftmul+1
 16408  0B0C  0835               	movf	??___ftmul+1,w
 16409  0B0D  00A4               	movwf	___ftpack@sign
 16410  0B0E  319F  279F         	fcall	___ftpack
 16411  0B10  0020               	movlb	0	; select bank0
 16412  0B11  0820               	movf	?___ftpack,w
 16413  0B12  00AE               	movwf	?___ftmul
 16414  0B13  0821               	movf	?___ftpack+1,w
 16415  0B14  00AF               	movwf	?___ftmul+1
 16416  0B15  0822               	movf	?___ftpack+2,w
 16417  0B16  00B0               	movwf	?___ftmul+2
 16418  0B17  0008               	return
 16419  0B18                     __end_of___ftmul:	
 16420                           
 16421                           	psect	text99
 16422  09BB                     __ptext99:	
 16423 ;; *************** function ___ftdiv *****************
 16424 ;; Defined at:
 16425 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16426 ;; Parameters:    Size  Location     Type
 16427 ;;  f2              3   14[BANK0 ] float 
 16428 ;;  f1              3   17[BANK0 ] float 
 16429 ;; Auto vars:     Size  Location     Type
 16430 ;;  f3              3   25[BANK0 ] float 
 16431 ;;  sign            1   29[BANK0 ] unsigned char 
 16432 ;;  exp             1   28[BANK0 ] unsigned char 
 16433 ;;  cntr            1   24[BANK0 ] unsigned char 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  3   14[BANK0 ] float 
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0, pclath, cstack
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16443 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;Total ram usage:       16 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:    5
 16450 ;; This function calls:
 16451 ;;		___ftpack
 16452 ;; This function is called by:
 16453 ;;		_getPercentValue
 16454 ;;		_setPercentValue
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           
 16459                           ;psect for function ___ftdiv
 16460  09BB                     ___ftdiv:	
 16461                           
 16462                           ;incstack = 0
 16463                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16464  09BB  0020               	movlb	0	; select bank0
 16465  09BC  0831               	movf	___ftdiv@f1,w
 16466  09BD  00B4               	movwf	??___ftdiv
 16467  09BE  0832               	movf	___ftdiv@f1+1,w
 16468  09BF  00B5               	movwf	??___ftdiv+1
 16469  09C0  0833               	movf	___ftdiv@f1+2,w
 16470  09C1  00B6               	movwf	??___ftdiv+2
 16471  09C2  1003               	clrc
 16472  09C3  0D35               	rlf	??___ftdiv+1,w
 16473  09C4  0D36               	rlf	??___ftdiv+2,w
 16474  09C5  00B7               	movwf	??___ftdiv+3
 16475  09C6  0837               	movf	??___ftdiv+3,w
 16476  09C7  00BC               	movwf	___ftdiv@exp
 16477  09C8  08BC               	movf	___ftdiv@exp,f
 16478  09C9  1D03               	skipz
 16479  09CA  29D2               	goto	l6268
 16480  09CB  3000               	movlw	0
 16481  09CC  00AE               	movwf	?___ftdiv
 16482  09CD  3000               	movlw	0
 16483  09CE  00AF               	movwf	?___ftdiv+1
 16484  09CF  3000               	movlw	0
 16485  09D0  00B0               	movwf	?___ftdiv+2
 16486  09D1  0008               	return
 16487  09D2                     l6268:	
 16488  09D2  082E               	movf	___ftdiv@f2,w
 16489  09D3  00B4               	movwf	??___ftdiv
 16490  09D4  082F               	movf	___ftdiv@f2+1,w
 16491  09D5  00B5               	movwf	??___ftdiv+1
 16492  09D6  0830               	movf	___ftdiv@f2+2,w
 16493  09D7  00B6               	movwf	??___ftdiv+2
 16494  09D8  1003               	clrc
 16495  09D9  0D35               	rlf	??___ftdiv+1,w
 16496  09DA  0D36               	rlf	??___ftdiv+2,w
 16497  09DB  00B7               	movwf	??___ftdiv+3
 16498  09DC  0837               	movf	??___ftdiv+3,w
 16499  09DD  00BD               	movwf	___ftdiv@sign
 16500  09DE  08BD               	movf	___ftdiv@sign,f
 16501  09DF  1D03               	skipz
 16502  09E0  29E8               	goto	l6274
 16503  09E1  3000               	movlw	0
 16504  09E2  00AE               	movwf	?___ftdiv
 16505  09E3  3000               	movlw	0
 16506  09E4  00AF               	movwf	?___ftdiv+1
 16507  09E5  3000               	movlw	0
 16508  09E6  00B0               	movwf	?___ftdiv+2
 16509  09E7  0008               	return
 16510  09E8                     l6274:	
 16511  09E8  3000               	movlw	0
 16512  09E9  00B9               	movwf	___ftdiv@f3
 16513  09EA  3000               	movlw	0
 16514  09EB  00BA               	movwf	___ftdiv@f3+1
 16515  09EC  3000               	movlw	0
 16516  09ED  00BB               	movwf	___ftdiv@f3+2
 16517  09EE  3089               	movlw	137
 16518  09EF  073D               	addwf	___ftdiv@sign,w
 16519  09F0  00B4               	movwf	??___ftdiv
 16520  09F1  0834               	movf	??___ftdiv,w
 16521  09F2  02BC               	subwf	___ftdiv@exp,f
 16522  09F3  0831               	movf	___ftdiv@f1,w
 16523  09F4  00B4               	movwf	??___ftdiv
 16524  09F5  0832               	movf	___ftdiv@f1+1,w
 16525  09F6  00B5               	movwf	??___ftdiv+1
 16526  09F7  0833               	movf	___ftdiv@f1+2,w
 16527  09F8  00B6               	movwf	??___ftdiv+2
 16528  09F9  3010               	movlw	16
 16529  09FA                     u4475:	
 16530  09FA  36B6               	lsrf	??___ftdiv+2,f
 16531  09FB  0CB5               	rrf	??___ftdiv+1,f
 16532  09FC  0CB4               	rrf	??___ftdiv,f
 16533  09FD  0B89               	decfsz	9,f
 16534  09FE  29FA               	goto	u4475
 16535  09FF  0834               	movf	??___ftdiv,w
 16536  0A00  00B7               	movwf	??___ftdiv+3
 16537  0A01  0837               	movf	??___ftdiv+3,w
 16538  0A02  00BD               	movwf	___ftdiv@sign
 16539  0A03  082E               	movf	___ftdiv@f2,w
 16540  0A04  00B4               	movwf	??___ftdiv
 16541  0A05  082F               	movf	___ftdiv@f2+1,w
 16542  0A06  00B5               	movwf	??___ftdiv+1
 16543  0A07  0830               	movf	___ftdiv@f2+2,w
 16544  0A08  00B6               	movwf	??___ftdiv+2
 16545  0A09  3010               	movlw	16
 16546  0A0A                     u4485:	
 16547  0A0A  36B6               	lsrf	??___ftdiv+2,f
 16548  0A0B  0CB5               	rrf	??___ftdiv+1,f
 16549  0A0C  0CB4               	rrf	??___ftdiv,f
 16550  0A0D  0B89               	decfsz	9,f
 16551  0A0E  2A0A               	goto	u4485
 16552  0A0F  0834               	movf	??___ftdiv,w
 16553  0A10  00B7               	movwf	??___ftdiv+3
 16554  0A11  0837               	movf	??___ftdiv+3,w
 16555  0A12  06BD               	xorwf	___ftdiv@sign,f
 16556  0A13  3080               	movlw	128
 16557  0A14  00B4               	movwf	??___ftdiv
 16558  0A15  0834               	movf	??___ftdiv,w
 16559  0A16  05BD               	andwf	___ftdiv@sign,f
 16560  0A17  17B2               	bsf	___ftdiv@f1+1,7
 16561  0A18  30FF               	movlw	255
 16562  0A19  05B1               	andwf	___ftdiv@f1,f
 16563  0A1A  30FF               	movlw	255
 16564  0A1B  05B2               	andwf	___ftdiv@f1+1,f
 16565  0A1C  3000               	movlw	0
 16566  0A1D  05B3               	andwf	___ftdiv@f1+2,f
 16567  0A1E  17AF               	bsf	___ftdiv@f2+1,7
 16568  0A1F  30FF               	movlw	255
 16569  0A20  05AE               	andwf	___ftdiv@f2,f
 16570  0A21  30FF               	movlw	255
 16571  0A22  05AF               	andwf	___ftdiv@f2+1,f
 16572  0A23  3000               	movlw	0
 16573  0A24  05B0               	andwf	___ftdiv@f2+2,f
 16574  0A25  3018               	movlw	24
 16575  0A26  00B4               	movwf	??___ftdiv
 16576  0A27  0834               	movf	??___ftdiv,w
 16577  0A28  00B8               	movwf	___ftdiv@cntr
 16578  0A29                     l6288:	
 16579  0A29  3001               	movlw	1
 16580  0A2A                     u4495:	
 16581  0A2A  35B9               	lslf	___ftdiv@f3,f
 16582  0A2B  0DBA               	rlf	___ftdiv@f3+1,f
 16583  0A2C  0DBB               	rlf	___ftdiv@f3+2,f
 16584  0A2D  0B89               	decfsz	9,f
 16585  0A2E  2A2A               	goto	u4495
 16586  0A2F  0830               	movf	___ftdiv@f2+2,w
 16587  0A30  0233               	subwf	___ftdiv@f1+2,w
 16588  0A31  1D03               	skipz
 16589  0A32  2A39               	goto	u4505
 16590  0A33  082F               	movf	___ftdiv@f2+1,w
 16591  0A34  0232               	subwf	___ftdiv@f1+1,w
 16592  0A35  1D03               	skipz
 16593  0A36  2A39               	goto	u4505
 16594  0A37  082E               	movf	___ftdiv@f2,w
 16595  0A38  0231               	subwf	___ftdiv@f1,w
 16596  0A39                     u4505:	
 16597  0A39  1C03               	skipc
 16598  0A3A  2A42               	goto	l6296
 16599  0A3B  082E               	movf	___ftdiv@f2,w
 16600  0A3C  02B1               	subwf	___ftdiv@f1,f
 16601  0A3D  082F               	movf	___ftdiv@f2+1,w
 16602  0A3E  3BB2               	subwfb	___ftdiv@f1+1,f
 16603  0A3F  0830               	movf	___ftdiv@f2+2,w
 16604  0A40  3BB3               	subwfb	___ftdiv@f1+2,f
 16605  0A41  1439               	bsf	___ftdiv@f3,0
 16606  0A42                     l6296:	
 16607  0A42  3001               	movlw	1
 16608  0A43                     u4515:	
 16609  0A43  35B1               	lslf	___ftdiv@f1,f
 16610  0A44  0DB2               	rlf	___ftdiv@f1+1,f
 16611  0A45  0DB3               	rlf	___ftdiv@f1+2,f
 16612  0A46  0B89               	decfsz	9,f
 16613  0A47  2A43               	goto	u4515
 16614  0A48  3001               	movlw	1
 16615  0A49  02B8               	subwf	___ftdiv@cntr,f
 16616  0A4A  1D03               	btfss	3,2
 16617  0A4B  2A29               	goto	l6288
 16618  0A4C  0839               	movf	___ftdiv@f3,w
 16619  0A4D  00A0               	movwf	___ftpack@arg
 16620  0A4E  083A               	movf	___ftdiv@f3+1,w
 16621  0A4F  00A1               	movwf	___ftpack@arg+1
 16622  0A50  083B               	movf	___ftdiv@f3+2,w
 16623  0A51  00A2               	movwf	___ftpack@arg+2
 16624  0A52  083C               	movf	___ftdiv@exp,w
 16625  0A53  00B4               	movwf	??___ftdiv
 16626  0A54  0834               	movf	??___ftdiv,w
 16627  0A55  00A3               	movwf	___ftpack@exp
 16628  0A56  083D               	movf	___ftdiv@sign,w
 16629  0A57  00B5               	movwf	??___ftdiv+1
 16630  0A58  0835               	movf	??___ftdiv+1,w
 16631  0A59  00A4               	movwf	___ftpack@sign
 16632  0A5A  319F  279F         	fcall	___ftpack
 16633  0A5C  0020               	movlb	0	; select bank0
 16634  0A5D  0820               	movf	?___ftpack,w
 16635  0A5E  00AE               	movwf	?___ftdiv
 16636  0A5F  0821               	movf	?___ftpack+1,w
 16637  0A60  00AF               	movwf	?___ftdiv+1
 16638  0A61  0822               	movf	?___ftpack+2,w
 16639  0A62  00B0               	movwf	?___ftdiv+2
 16640  0A63  0008               	return
 16641  0A64                     __end_of___ftdiv:	
 16642                           
 16643                           	psect	text100
 16644  0BE1                     __ptext100:	
 16645 ;; *************** function ___ftadd *****************
 16646 ;; Defined at:
 16647 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16648 ;; Parameters:    Size  Location     Type
 16649 ;;  f1              3   30[BANK0 ] float 
 16650 ;;  f2              3   33[BANK0 ] float 
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;  exp1            1   42[BANK0 ] unsigned char 
 16653 ;;  exp2            1   41[BANK0 ] unsigned char 
 16654 ;;  sign            1   40[BANK0 ] unsigned char 
 16655 ;; Return value:  Size  Location     Type
 16656 ;;                  3   30[BANK0 ] float 
 16657 ;; Registers used:
 16658 ;;		wreg, status,2, status,0, pclath, cstack
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16664 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;Total ram usage:       13 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    5
 16671 ;; This function calls:
 16672 ;;		___ftpack
 16673 ;; This function is called by:
 16674 ;;		_getPercentValue
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           
 16679                           ;psect for function ___ftadd
 16680  0BE1                     ___ftadd:	
 16681                           
 16682                           ;incstack = 0
 16683                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16684  0BE1  0020               	movlb	0	; select bank0
 16685  0BE2  083E               	movf	___ftadd@f1,w
 16686  0BE3  00C4               	movwf	??___ftadd
 16687  0BE4  083F               	movf	___ftadd@f1+1,w
 16688  0BE5  00C5               	movwf	??___ftadd+1
 16689  0BE6  0840               	movf	___ftadd@f1+2,w
 16690  0BE7  00C6               	movwf	??___ftadd+2
 16691  0BE8  1003               	clrc
 16692  0BE9  0D45               	rlf	??___ftadd+1,w
 16693  0BEA  0D46               	rlf	??___ftadd+2,w
 16694  0BEB  00C7               	movwf	??___ftadd+3
 16695  0BEC  0847               	movf	??___ftadd+3,w
 16696  0BED  00CA               	movwf	___ftadd@exp1
 16697  0BEE  0841               	movf	___ftadd@f2,w
 16698  0BEF  00C4               	movwf	??___ftadd
 16699  0BF0  0842               	movf	___ftadd@f2+1,w
 16700  0BF1  00C5               	movwf	??___ftadd+1
 16701  0BF2  0843               	movf	___ftadd@f2+2,w
 16702  0BF3  00C6               	movwf	??___ftadd+2
 16703  0BF4  1003               	clrc
 16704  0BF5  0D45               	rlf	??___ftadd+1,w
 16705  0BF6  0D46               	rlf	??___ftadd+2,w
 16706  0BF7  00C7               	movwf	??___ftadd+3
 16707  0BF8  0847               	movf	??___ftadd+3,w
 16708  0BF9  00C9               	movwf	___ftadd@exp2
 16709  0BFA  084A               	movf	___ftadd@exp1,w
 16710  0BFB  1903               	btfsc	3,2
 16711  0BFC  2C09               	goto	l6198
 16712  0BFD  0849               	movf	___ftadd@exp2,w
 16713  0BFE  024A               	subwf	___ftadd@exp1,w
 16714  0BFF  1803               	skipnc
 16715  0C00  2C10               	goto	l6202
 16716  0C01  034A               	decf	___ftadd@exp1,w
 16717  0C02  3AFF               	xorlw	255
 16718  0C03  0749               	addwf	___ftadd@exp2,w
 16719  0C04  00C4               	movwf	??___ftadd
 16720  0C05  3019               	movlw	25
 16721  0C06  0244               	subwf	??___ftadd,w
 16722  0C07  1C03               	skipc
 16723  0C08  2C10               	goto	l6202
 16724  0C09                     l6198:	
 16725  0C09  0841               	movf	___ftadd@f2,w
 16726  0C0A  00BE               	movwf	?___ftadd
 16727  0C0B  0842               	movf	___ftadd@f2+1,w
 16728  0C0C  00BF               	movwf	?___ftadd+1
 16729  0C0D  0843               	movf	___ftadd@f2+2,w
 16730  0C0E  00C0               	movwf	?___ftadd+2
 16731  0C0F  0008               	return
 16732  0C10                     l6202:	
 16733  0C10  0849               	movf	___ftadd@exp2,w
 16734  0C11  1903               	btfsc	3,2
 16735  0C12  0008               	return
 16736  0C13  084A               	movf	___ftadd@exp1,w
 16737  0C14  0249               	subwf	___ftadd@exp2,w
 16738  0C15  1803               	skipnc
 16739  0C16  2C1F               	goto	l6208
 16740  0C17  0349               	decf	___ftadd@exp2,w
 16741  0C18  3AFF               	xorlw	255
 16742  0C19  074A               	addwf	___ftadd@exp1,w
 16743  0C1A  00C4               	movwf	??___ftadd
 16744  0C1B  3019               	movlw	25
 16745  0C1C  0244               	subwf	??___ftadd,w
 16746  0C1D  1803               	btfsc	3,0
 16747  0C1E  0008               	return
 16748  0C1F                     l6208:	
 16749  0C1F  3006               	movlw	6
 16750  0C20  00C4               	movwf	??___ftadd
 16751  0C21  0844               	movf	??___ftadd,w
 16752  0C22  00C8               	movwf	___ftadd@sign
 16753  0C23  1BC0               	btfsc	___ftadd@f1+2,7
 16754  0C24  17C8               	bsf	___ftadd@sign,7
 16755  0C25  1BC3               	btfsc	___ftadd@f2+2,7
 16756  0C26  1748               	bsf	___ftadd@sign,6
 16757  0C27  17BF               	bsf	___ftadd@f1+1,7
 16758  0C28  30FF               	movlw	255
 16759  0C29  05BE               	andwf	___ftadd@f1,f
 16760  0C2A  30FF               	movlw	255
 16761  0C2B  05BF               	andwf	___ftadd@f1+1,f
 16762  0C2C  3000               	movlw	0
 16763  0C2D  05C0               	andwf	___ftadd@f1+2,f
 16764  0C2E  17C2               	bsf	___ftadd@f2+1,7
 16765  0C2F  30FF               	movlw	255
 16766  0C30  05C1               	andwf	___ftadd@f2,f
 16767  0C31  30FF               	movlw	255
 16768  0C32  05C2               	andwf	___ftadd@f2+1,f
 16769  0C33  3000               	movlw	0
 16770  0C34  05C3               	andwf	___ftadd@f2+2,f
 16771  0C35  0849               	movf	___ftadd@exp2,w
 16772  0C36  024A               	subwf	___ftadd@exp1,w
 16773  0C37  1803               	skipnc
 16774  0C38  2C5B               	goto	l6230
 16775  0C39                     l6220:	
 16776  0C39  3001               	movlw	1
 16777  0C3A                     u4315:	
 16778  0C3A  35C1               	lslf	___ftadd@f2,f
 16779  0C3B  0DC2               	rlf	___ftadd@f2+1,f
 16780  0C3C  0DC3               	rlf	___ftadd@f2+2,f
 16781  0C3D  0B89               	decfsz	9,f
 16782  0C3E  2C3A               	goto	u4315
 16783  0C3F  3001               	movlw	1
 16784  0C40  02C9               	subwf	___ftadd@exp2,f
 16785  0C41  0849               	movf	___ftadd@exp2,w
 16786  0C42  064A               	xorwf	___ftadd@exp1,w
 16787  0C43  1903               	skipnz
 16788  0C44  2C56               	goto	l6228
 16789  0C45  3001               	movlw	1
 16790  0C46  02C8               	subwf	___ftadd@sign,f
 16791  0C47  0848               	movf	___ftadd@sign,w
 16792  0C48  3907               	andlw	7
 16793  0C49  1903               	btfsc	3,2
 16794  0C4A  2C56               	goto	l6228
 16795  0C4B  2C39               	goto	l6220
 16796  0C4C                     l6226:	
 16797  0C4C  3001               	movlw	1
 16798  0C4D                     u4345:	
 16799  0C4D  36C0               	lsrf	___ftadd@f1+2,f
 16800  0C4E  0CBF               	rrf	___ftadd@f1+1,f
 16801  0C4F  0CBE               	rrf	___ftadd@f1,f
 16802  0C50  0B89               	decfsz	9,f
 16803  0C51  2C4D               	goto	u4345
 16804  0C52  3001               	movlw	1
 16805  0C53  00C4               	movwf	??___ftadd
 16806  0C54  0844               	movf	??___ftadd,w
 16807  0C55  07CA               	addwf	___ftadd@exp1,f
 16808  0C56                     l6228:	
 16809  0C56  084A               	movf	___ftadd@exp1,w
 16810  0C57  0649               	xorwf	___ftadd@exp2,w
 16811  0C58  1903               	btfsc	3,2
 16812  0C59  2C80               	goto	l3431
 16813  0C5A  2C4C               	goto	l6226
 16814  0C5B                     l6230:	
 16815  0C5B  084A               	movf	___ftadd@exp1,w
 16816  0C5C  0249               	subwf	___ftadd@exp2,w
 16817  0C5D  1803               	skipnc
 16818  0C5E  2C80               	goto	l3431
 16819  0C5F                     l6232:	
 16820  0C5F  3001               	movlw	1
 16821  0C60                     u4375:	
 16822  0C60  35BE               	lslf	___ftadd@f1,f
 16823  0C61  0DBF               	rlf	___ftadd@f1+1,f
 16824  0C62  0DC0               	rlf	___ftadd@f1+2,f
 16825  0C63  0B89               	decfsz	9,f
 16826  0C64  2C60               	goto	u4375
 16827  0C65  3001               	movlw	1
 16828  0C66  02CA               	subwf	___ftadd@exp1,f
 16829  0C67  0849               	movf	___ftadd@exp2,w
 16830  0C68  064A               	xorwf	___ftadd@exp1,w
 16831  0C69  1903               	skipnz
 16832  0C6A  2C7C               	goto	l6240
 16833  0C6B  3001               	movlw	1
 16834  0C6C  02C8               	subwf	___ftadd@sign,f
 16835  0C6D  0848               	movf	___ftadd@sign,w
 16836  0C6E  3907               	andlw	7
 16837  0C6F  1903               	btfsc	3,2
 16838  0C70  2C7C               	goto	l6240
 16839  0C71  2C5F               	goto	l6232
 16840  0C72                     l6238:	
 16841  0C72  3001               	movlw	1
 16842  0C73                     u4405:	
 16843  0C73  36C3               	lsrf	___ftadd@f2+2,f
 16844  0C74  0CC2               	rrf	___ftadd@f2+1,f
 16845  0C75  0CC1               	rrf	___ftadd@f2,f
 16846  0C76  0B89               	decfsz	9,f
 16847  0C77  2C73               	goto	u4405
 16848  0C78  3001               	movlw	1
 16849  0C79  00C4               	movwf	??___ftadd
 16850  0C7A  0844               	movf	??___ftadd,w
 16851  0C7B  07C9               	addwf	___ftadd@exp2,f
 16852  0C7C                     l6240:	
 16853  0C7C  084A               	movf	___ftadd@exp1,w
 16854  0C7D  0649               	xorwf	___ftadd@exp2,w
 16855  0C7E  1D03               	skipz
 16856  0C7F  2C72               	goto	l6238
 16857  0C80                     l3431:	
 16858  0C80  1FC8               	btfss	___ftadd@sign,7
 16859  0C81  2C92               	goto	l6244
 16860  0C82  30FF               	movlw	255
 16861  0C83  06BE               	xorwf	___ftadd@f1,f
 16862  0C84  30FF               	movlw	255
 16863  0C85  06BF               	xorwf	___ftadd@f1+1,f
 16864  0C86  30FF               	movlw	255
 16865  0C87  06C0               	xorwf	___ftadd@f1+2,f
 16866  0C88  3001               	movlw	1
 16867  0C89  07BE               	addwf	___ftadd@f1,f
 16868  0C8A  3000               	movlw	0
 16869  0C8B  1803               	skipnc
 16870  0C8C  3001               	movlw	1
 16871  0C8D  07BF               	addwf	___ftadd@f1+1,f
 16872  0C8E  3000               	movlw	0
 16873  0C8F  1803               	skipnc
 16874  0C90  3001               	movlw	1
 16875  0C91  07C0               	addwf	___ftadd@f1+2,f
 16876  0C92                     l6244:	
 16877  0C92  1F48               	btfss	___ftadd@sign,6
 16878  0C93  2CA4               	goto	l6248
 16879  0C94  30FF               	movlw	255
 16880  0C95  06C1               	xorwf	___ftadd@f2,f
 16881  0C96  30FF               	movlw	255
 16882  0C97  06C2               	xorwf	___ftadd@f2+1,f
 16883  0C98  30FF               	movlw	255
 16884  0C99  06C3               	xorwf	___ftadd@f2+2,f
 16885  0C9A  3001               	movlw	1
 16886  0C9B  07C1               	addwf	___ftadd@f2,f
 16887  0C9C  3000               	movlw	0
 16888  0C9D  1803               	skipnc
 16889  0C9E  3001               	movlw	1
 16890  0C9F  07C2               	addwf	___ftadd@f2+1,f
 16891  0CA0  3000               	movlw	0
 16892  0CA1  1803               	skipnc
 16893  0CA2  3001               	movlw	1
 16894  0CA3  07C3               	addwf	___ftadd@f2+2,f
 16895  0CA4                     l6248:	
 16896  0CA4  01C8               	clrf	___ftadd@sign
 16897  0CA5  083E               	movf	___ftadd@f1,w
 16898  0CA6  07C1               	addwf	___ftadd@f2,f
 16899  0CA7  083F               	movf	___ftadd@f1+1,w
 16900  0CA8  3DC2               	addwfc	___ftadd@f2+1,f
 16901  0CA9  0840               	movf	___ftadd@f1+2,w
 16902  0CAA  3DC3               	addwfc	___ftadd@f2+2,f
 16903  0CAB  1FC3               	btfss	___ftadd@f2+2,7
 16904  0CAC  2CBF               	goto	l6258
 16905  0CAD  30FF               	movlw	255
 16906  0CAE  06C1               	xorwf	___ftadd@f2,f
 16907  0CAF  30FF               	movlw	255
 16908  0CB0  06C2               	xorwf	___ftadd@f2+1,f
 16909  0CB1  30FF               	movlw	255
 16910  0CB2  06C3               	xorwf	___ftadd@f2+2,f
 16911  0CB3  3001               	movlw	1
 16912  0CB4  07C1               	addwf	___ftadd@f2,f
 16913  0CB5  3000               	movlw	0
 16914  0CB6  1803               	skipnc
 16915  0CB7  3001               	movlw	1
 16916  0CB8  07C2               	addwf	___ftadd@f2+1,f
 16917  0CB9  3000               	movlw	0
 16918  0CBA  1803               	skipnc
 16919  0CBB  3001               	movlw	1
 16920  0CBC  07C3               	addwf	___ftadd@f2+2,f
 16921  0CBD  01C8               	clrf	___ftadd@sign
 16922  0CBE  0AC8               	incf	___ftadd@sign,f
 16923  0CBF                     l6258:	
 16924  0CBF  0841               	movf	___ftadd@f2,w
 16925  0CC0  00A0               	movwf	___ftpack@arg
 16926  0CC1  0842               	movf	___ftadd@f2+1,w
 16927  0CC2  00A1               	movwf	___ftpack@arg+1
 16928  0CC3  0843               	movf	___ftadd@f2+2,w
 16929  0CC4  00A2               	movwf	___ftpack@arg+2
 16930  0CC5  084A               	movf	___ftadd@exp1,w
 16931  0CC6  00C4               	movwf	??___ftadd
 16932  0CC7  0844               	movf	??___ftadd,w
 16933  0CC8  00A3               	movwf	___ftpack@exp
 16934  0CC9  0848               	movf	___ftadd@sign,w
 16935  0CCA  00C5               	movwf	??___ftadd+1
 16936  0CCB  0845               	movf	??___ftadd+1,w
 16937  0CCC  00A4               	movwf	___ftpack@sign
 16938  0CCD  319F  279F         	fcall	___ftpack
 16939  0CCF  0020               	movlb	0	; select bank0
 16940  0CD0  0820               	movf	?___ftpack,w
 16941  0CD1  00BE               	movwf	?___ftadd
 16942  0CD2  0821               	movf	?___ftpack+1,w
 16943  0CD3  00BF               	movwf	?___ftadd+1
 16944  0CD4  0822               	movf	?___ftpack+2,w
 16945  0CD5  00C0               	movwf	?___ftadd+2
 16946  0CD6  0008               	return
 16947  0CD7                     __end_of___ftadd:	
 16948                           
 16949                           	psect	text101
 16950  27BC                     __ptext101:	
 16951 ;; *************** function ___awtoft *****************
 16952 ;; Defined at:
 16953 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16954 ;; Parameters:    Size  Location     Type
 16955 ;;  c               2    8[BANK0 ] int 
 16956 ;; Auto vars:     Size  Location     Type
 16957 ;;  sign            1   13[BANK0 ] unsigned char 
 16958 ;; Return value:  Size  Location     Type
 16959 ;;                  3    8[BANK0 ] float 
 16960 ;; Registers used:
 16961 ;;		wreg, status,2, status,0, pclath, cstack
 16962 ;; Tracked objects:
 16963 ;;		On entry : 0/0
 16964 ;;		On exit  : 0/0
 16965 ;;		Unchanged: 0/0
 16966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16967 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;Total ram usage:        6 bytes
 16972 ;; Hardware stack levels used:    1
 16973 ;; Hardware stack levels required when called:    5
 16974 ;; This function calls:
 16975 ;;		___ftpack
 16976 ;; This function is called by:
 16977 ;;		_getPercentValue
 16978 ;;		_setPercentValue
 16979 ;; This function uses a non-reentrant model
 16980 ;;
 16981                           
 16982                           
 16983                           ;psect for function ___awtoft
 16984  27BC                     ___awtoft:	
 16985                           
 16986                           ;incstack = 0
 16987                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16988  27BC  0020               	movlb	0	; select bank0
 16989  27BD  01AD               	clrf	___awtoft@sign
 16990  27BE  1FA9               	btfss	___awtoft@c+1,7
 16991  27BF  2FC7               	goto	l6186
 16992  27C0  09A8               	comf	___awtoft@c,f
 16993  27C1  09A9               	comf	___awtoft@c+1,f
 16994  27C2  0AA8               	incf	___awtoft@c,f
 16995  27C3  1903               	skipnz
 16996  27C4  0AA9               	incf	___awtoft@c+1,f
 16997  27C5  01AD               	clrf	___awtoft@sign
 16998  27C6  0AAD               	incf	___awtoft@sign,f
 16999  27C7                     l6186:	
 17000  27C7  0828               	movf	___awtoft@c,w
 17001  27C8  00A0               	movwf	___ftpack@arg
 17002  27C9  0829               	movf	___awtoft@c+1,w
 17003  27CA  00A1               	movwf	___ftpack@arg+1
 17004  27CB  01A2               	clrf	___ftpack@arg+2
 17005  27CC  308E               	movlw	142
 17006  27CD  00AB               	movwf	??___awtoft
 17007  27CE  082B               	movf	??___awtoft,w
 17008  27CF  00A3               	movwf	___ftpack@exp
 17009  27D0  082D               	movf	___awtoft@sign,w
 17010  27D1  00AC               	movwf	??___awtoft+1
 17011  27D2  082C               	movf	??___awtoft+1,w
 17012  27D3  00A4               	movwf	___ftpack@sign
 17013  27D4  319F  279F         	fcall	___ftpack
 17014  27D6  0020               	movlb	0	; select bank0
 17015  27D7  0820               	movf	?___ftpack,w
 17016  27D8  00A8               	movwf	?___awtoft
 17017  27D9  0821               	movf	?___ftpack+1,w
 17018  27DA  00A9               	movwf	?___awtoft+1
 17019  27DB  0822               	movf	?___ftpack+2,w
 17020  27DC  00AA               	movwf	?___awtoft+2
 17021  27DD  0008               	return
 17022  27DE                     __end_of___awtoft:	
 17023                           
 17024                           	psect	text102
 17025  1F9F                     __ptext102:	
 17026 ;; *************** function ___ftpack *****************
 17027 ;; Defined at:
 17028 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  arg             3    0[BANK0 ] unsigned um
 17031 ;;  exp             1    3[BANK0 ] unsigned char 
 17032 ;;  sign            1    4[BANK0 ] unsigned char 
 17033 ;; Auto vars:     Size  Location     Type
 17034 ;;		None
 17035 ;; Return value:  Size  Location     Type
 17036 ;;                  3    0[BANK0 ] float 
 17037 ;; Registers used:
 17038 ;;		wreg, status,2, status,0
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17044 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;Total ram usage:        8 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; Hardware stack levels required when called:    4
 17051 ;; This function calls:
 17052 ;;		Nothing
 17053 ;; This function is called by:
 17054 ;;		___awtoft
 17055 ;;		___ftadd
 17056 ;;		___ftdiv
 17057 ;;		___ftmul
 17058 ;; This function uses a non-reentrant model
 17059 ;;
 17060                           
 17061                           
 17062                           ;psect for function ___ftpack
 17063  1F9F                     ___ftpack:	
 17064                           
 17065                           ;incstack = 0
 17066                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17067  1F9F  0020               	movlb	0	; select bank0
 17068  1FA0  0823               	movf	___ftpack@exp,w
 17069  1FA1  1903               	btfsc	3,2
 17070  1FA2  2FA8               	goto	l6152
 17071  1FA3  0822               	movf	___ftpack@arg+2,w
 17072  1FA4  0421               	iorwf	___ftpack@arg+1,w
 17073  1FA5  0420               	iorwf	___ftpack@arg,w
 17074  1FA6  1D03               	skipz
 17075  1FA7  2FB9               	goto	l6158
 17076  1FA8                     l6152:	
 17077  1FA8  3000               	movlw	0
 17078  1FA9  00A0               	movwf	?___ftpack
 17079  1FAA  3000               	movlw	0
 17080  1FAB  00A1               	movwf	?___ftpack+1
 17081  1FAC  3000               	movlw	0
 17082  1FAD  00A2               	movwf	?___ftpack+2
 17083  1FAE  0008               	return
 17084  1FAF                     l6156:	
 17085  1FAF  3001               	movlw	1
 17086  1FB0  00A5               	movwf	??___ftpack
 17087  1FB1  0825               	movf	??___ftpack,w
 17088  1FB2  07A3               	addwf	___ftpack@exp,f
 17089  1FB3  3001               	movlw	1
 17090  1FB4                     u4125:	
 17091  1FB4  36A2               	lsrf	___ftpack@arg+2,f
 17092  1FB5  0CA1               	rrf	___ftpack@arg+1,f
 17093  1FB6  0CA0               	rrf	___ftpack@arg,f
 17094  1FB7  0B89               	decfsz	9,f
 17095  1FB8  2FB4               	goto	u4125
 17096  1FB9                     l6158:	
 17097  1FB9  30FE               	movlw	254
 17098  1FBA  0522               	andwf	___ftpack@arg+2,w
 17099  1FBB  1903               	btfsc	3,2
 17100  1FBC  2FD2               	goto	l3402
 17101  1FBD  2FAF               	goto	l6156
 17102  1FBE                     l6160:	
 17103  1FBE  3001               	movlw	1
 17104  1FBF  00A5               	movwf	??___ftpack
 17105  1FC0  0825               	movf	??___ftpack,w
 17106  1FC1  07A3               	addwf	___ftpack@exp,f
 17107  1FC2  3001               	movlw	1
 17108  1FC3  07A0               	addwf	___ftpack@arg,f
 17109  1FC4  3000               	movlw	0
 17110  1FC5  1803               	skipnc
 17111  1FC6  3001               	movlw	1
 17112  1FC7  07A1               	addwf	___ftpack@arg+1,f
 17113  1FC8  3000               	movlw	0
 17114  1FC9  1803               	skipnc
 17115  1FCA  3001               	movlw	1
 17116  1FCB  07A2               	addwf	___ftpack@arg+2,f
 17117  1FCC  3001               	movlw	1
 17118  1FCD                     u4145:	
 17119  1FCD  36A2               	lsrf	___ftpack@arg+2,f
 17120  1FCE  0CA1               	rrf	___ftpack@arg+1,f
 17121  1FCF  0CA0               	rrf	___ftpack@arg,f
 17122  1FD0  0B89               	decfsz	9,f
 17123  1FD1  2FCD               	goto	u4145
 17124  1FD2                     l3402:	
 17125  1FD2  30FF               	movlw	255
 17126  1FD3  0522               	andwf	___ftpack@arg+2,w
 17127  1FD4  1903               	btfsc	3,2
 17128  1FD5  2FDF               	goto	l6168
 17129  1FD6  2FBE               	goto	l6160
 17130  1FD7                     l6166:	
 17131  1FD7  3001               	movlw	1
 17132  1FD8  02A3               	subwf	___ftpack@exp,f
 17133  1FD9  3001               	movlw	1
 17134  1FDA                     u4165:	
 17135  1FDA  35A0               	lslf	___ftpack@arg,f
 17136  1FDB  0DA1               	rlf	___ftpack@arg+1,f
 17137  1FDC  0DA2               	rlf	___ftpack@arg+2,f
 17138  1FDD  0B89               	decfsz	9,f
 17139  1FDE  2FDA               	goto	u4165
 17140  1FDF                     l6168:	
 17141  1FDF  1FA1               	btfss	___ftpack@arg+1,7
 17142  1FE0  2FD7               	goto	l6166
 17143  1FE1  1823               	btfsc	___ftpack@exp,0
 17144  1FE2  2FE9               	goto	l3408
 17145  1FE3  30FF               	movlw	255
 17146  1FE4  05A0               	andwf	___ftpack@arg,f
 17147  1FE5  307F               	movlw	127
 17148  1FE6  05A1               	andwf	___ftpack@arg+1,f
 17149  1FE7  30FF               	movlw	255
 17150  1FE8  05A2               	andwf	___ftpack@arg+2,f
 17151  1FE9                     l3408:	
 17152  1FE9  1003               	clrc
 17153  1FEA  0CA3               	rrf	___ftpack@exp,f
 17154  1FEB  0823               	movf	___ftpack@exp,w
 17155  1FEC  00A5               	movwf	??___ftpack
 17156  1FED  01A6               	clrf	??___ftpack+1
 17157  1FEE  01A7               	clrf	??___ftpack+2
 17158  1FEF  3010               	movlw	16
 17159  1FF0                     u4195:	
 17160  1FF0  35A5               	lslf	??___ftpack,f
 17161  1FF1  0DA6               	rlf	??___ftpack+1,f
 17162  1FF2  0DA7               	rlf	??___ftpack+2,f
 17163  1FF3  0B89               	decfsz	9,f
 17164  1FF4  2FF0               	goto	u4195
 17165  1FF5  0825               	movf	??___ftpack,w
 17166  1FF6  04A0               	iorwf	___ftpack@arg,f
 17167  1FF7  0826               	movf	??___ftpack+1,w
 17168  1FF8  04A1               	iorwf	___ftpack@arg+1,f
 17169  1FF9  0827               	movf	??___ftpack+2,w
 17170  1FFA  04A2               	iorwf	___ftpack@arg+2,f
 17171  1FFB  0824               	movf	___ftpack@sign,w
 17172  1FFC  1903               	btfsc	3,2
 17173  1FFD  0008               	return
 17174  1FFE  17A2               	bsf	___ftpack@arg+2,7
 17175  1FFF  0008               	return
 17176  2000                     __end_of___ftpack:	
 17177                           
 17178                           	psect	text103
 17179  23A7                     __ptext103:	
 17180 ;; *************** function _Dimmer_Initialization *****************
 17181 ;; Defined at:
 17182 ;;		line 502 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17183 ;; Parameters:    Size  Location     Type
 17184 ;;		None
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;		None
 17187 ;; Return value:  Size  Location     Type
 17188 ;;		None               void
 17189 ;; Registers used:
 17190 ;;		wreg
 17191 ;; Tracked objects:
 17192 ;;		On entry : 0/0
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;Total ram usage:        1 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    4
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_DimmerLights_Initialization
 17207 ;; This function uses a non-reentrant model
 17208 ;;
 17209                           
 17210                           
 17211                           ;psect for function _Dimmer_Initialization
 17212  23A7                     _Dimmer_Initialization:	
 17213                           
 17214                           ;Dimmer_B1.c: 504: Dimmer=&Dimmer1;
 17215                           
 17216                           ;incstack = 0
 17217                           ; Regs used in _Dimmer_Initialization: [wreg]
 17218  23A7  30E1               	movlw	_Dimmer1& (0+255)
 17219  23A8  0020               	movlb	0	; select bank0
 17220  23A9  00A0               	movwf	??_Dimmer_Initialization
 17221  23AA  0820               	movf	??_Dimmer_Initialization,w
 17222  23AB  0021               	movlb	1	; select bank1
 17223  23AC  00B9               	movwf	_Dimmer^(0+128)
 17224  23AD  0008               	return
 17225  23AE                     __end_of_Dimmer_Initialization:	
 17226                           
 17227                           	psect	text104
 17228  23CB                     __ptext104:	
 17229 ;; *************** function _DelayOff_Main *****************
 17230 ;; Defined at:
 17231 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17232 ;; Parameters:    Size  Location     Type
 17233 ;;		None
 17234 ;; Auto vars:     Size  Location     Type
 17235 ;;		None
 17236 ;; Return value:  Size  Location     Type
 17237 ;;		None               void
 17238 ;; Registers used:
 17239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;Total ram usage:        0 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; Hardware stack levels required when called:    7
 17252 ;; This function calls:
 17253 ;;		_DlyOff_Main
 17254 ;; This function is called by:
 17255 ;;		_main
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           
 17260                           ;psect for function _DelayOff_Main
 17261  23CB                     _DelayOff_Main:	
 17262                           
 17263                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 17264                           
 17265                           ;incstack = 0
 17266                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17267  23CB  3001               	movlw	1
 17268  23CC  3194  24D8  31A3   	fcall	_DlyOff_Main
 17269                           
 17270                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 17271  23CF  3002               	movlw	2
 17272  23D0  3194  24D8         	fcall	_DlyOff_Main
 17273  23D2  0008               	return
 17274  23D3                     __end_of_DelayOff_Main:	
 17275                           
 17276                           	psect	text105
 17277  14D8                     __ptext105:	
 17278 ;; *************** function _DlyOff_Main *****************
 17279 ;; Defined at:
 17280 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17281 ;; Parameters:    Size  Location     Type
 17282 ;;  sw              1    wreg     unsigned char 
 17283 ;; Auto vars:     Size  Location     Type
 17284 ;;  sw              1   12[BANK0 ] unsigned char 
 17285 ;; Return value:  Size  Location     Type
 17286 ;;		None               void
 17287 ;; Registers used:
 17288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17289 ;; Tracked objects:
 17290 ;;		On entry : 0/0
 17291 ;;		On exit  : 0/0
 17292 ;;		Unchanged: 0/0
 17293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17298 ;;Total ram usage:        3 bytes
 17299 ;; Hardware stack levels used:    1
 17300 ;; Hardware stack levels required when called:    6
 17301 ;; This function calls:
 17302 ;;		_DelayOffPointSelect
 17303 ;;		_setBuz
 17304 ;;		_setDimmerLights_Switch
 17305 ;;		_setDimmerLights_Trigger
 17306 ;;		_setRFSW_Status
 17307 ;;		_setRF_DimmerLights
 17308 ;;		_setSw_Status
 17309 ;;		_setTxData
 17310 ;; This function is called by:
 17311 ;;		_DelayOff_Main
 17312 ;; This function uses a non-reentrant model
 17313 ;;
 17314                           
 17315                           
 17316                           ;psect for function _DlyOff_Main
 17317  14D8                     _DlyOff_Main:	
 17318                           
 17319                           ;incstack = 0
 17320                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17321                           ;DlyOff_Main@sw stored from wreg
 17322  14D8  0020               	movlb	0	; select bank0
 17323  14D9  00AC               	movwf	DlyOff_Main@sw
 17324                           
 17325                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 17326  14DA  082C               	movf	DlyOff_Main@sw,w
 17327  14DB  31A6  2643  3194   	fcall	_DelayOffPointSelect
 17328                           
 17329                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 17330  14DE  0021               	movlb	1	; select bank1
 17331  14DF  0838               	movf	_DelayOff^(0+128),w
 17332  14E0  0086               	movwf	6
 17333  14E1  0187               	clrf	7
 17334  14E2  1C81               	btfss	1,1
 17335  14E3  0008               	return
 17336                           
 17337                           ;DelayOff_B1.c: 70: {
 17338                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 17339  14E4  0838               	movf	_DelayOff^(0+128),w
 17340  14E5  3E02               	addlw	2
 17341  14E6  0086               	movwf	6
 17342  14E7  0187               	clrf	7
 17343  14E8  3001               	movlw	1
 17344  14E9  0781               	addwf	1,f
 17345  14EA  3141               	addfsr 1,1
 17346  14EB  1803               	skipnc
 17347  14EC  0A81               	incf	1,f
 17348                           
 17349                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 17350  14ED  0838               	movf	_DelayOff^(0+128),w
 17351  14EE  3E02               	addlw	2
 17352  14EF  0086               	movwf	6
 17353  14F0  0187               	clrf	7
 17354  14F1  3F40               	moviw [0]fsr1
 17355  14F2  0020               	movlb	0	; select bank0
 17356  14F3  00AA               	movwf	??_DlyOff_Main
 17357  14F4  3F41               	moviw [1]fsr1
 17358  14F5  00AB               	movwf	??_DlyOff_Main+1
 17359  14F6  3016               	movlw	22
 17360  14F7  022B               	subwf	??_DlyOff_Main+1,w
 17361  14F8  3012               	movlw	18
 17362  14F9  1903               	skipnz
 17363  14FA  022A               	subwf	??_DlyOff_Main,w
 17364  14FB  1C03               	skipc
 17365  14FC  0008               	return
 17366                           
 17367                           ;DelayOff_B1.c: 73: {
 17368                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 17369  14FD  0021               	movlb	1	; select bank1
 17370  14FE  0838               	movf	_DelayOff^(0+128),w
 17371  14FF  3E02               	addlw	2
 17372  1500  0086               	movwf	6
 17373  1501  0187               	clrf	7
 17374  1502  3000               	movlw	0
 17375  1503  3FC0               	movwi [0]fsr1
 17376  1504  3FC1               	movwi [1]fsr1
 17377                           
 17378                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 17379  1505  3001               	movlw	1
 17380  1506  0020               	movlb	0	; select bank0
 17381  1507  00AA               	movwf	??_DlyOff_Main
 17382  1508  0021               	movlb	1	; select bank1
 17383  1509  0838               	movf	_DelayOff^(0+128),w
 17384  150A  3E04               	addlw	4
 17385  150B  0086               	movwf	6
 17386  150C  0187               	clrf	7
 17387  150D  0020               	movlb	0	; select bank0
 17388  150E  082A               	movf	??_DlyOff_Main,w
 17389  150F  0781               	addwf	1,f
 17390                           
 17391                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 17392  1510  0021               	movlb	1	; select bank1
 17393  1511  0838               	movf	_DelayOff^(0+128),w
 17394  1512  3E04               	addlw	4
 17395  1513  0086               	movwf	6
 17396  1514  0187               	clrf	7
 17397  1515  0A38               	incf	_DelayOff^(0+128),w
 17398  1516  0084               	movwf	4
 17399  1517  0185               	clrf	5
 17400  1518  0800               	movf	0,w
 17401  1519  0201               	subwf	1,w
 17402  151A  1C03               	skipc
 17403  151B  0008               	return
 17404                           
 17405                           ;DelayOff_B1.c: 77: {
 17406                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 17407  151C  0838               	movf	_DelayOff^(0+128),w
 17408  151D  3E04               	addlw	4
 17409  151E  0086               	movwf	6
 17410  151F  0187               	clrf	7
 17411  1520  0181               	clrf	1
 17412                           
 17413                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 17414  1521  0838               	movf	_DelayOff^(0+128),w
 17415  1522  0086               	movwf	6
 17416  1523  0187               	clrf	7
 17417  1524  1081               	bcf	1,1
 17418                           
 17419                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 17420  1525  0020               	movlb	0	; select bank0
 17421  1526  01A2               	clrf	setSw_Status@command
 17422  1527  082C               	movf	DlyOff_Main@sw,w
 17423  1528  31A5  2511  3194   	fcall	_setSw_Status
 17424                           
 17425                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 17426  152B  0020               	movlb	0	; select bank0
 17427  152C  01A2               	clrf	setRFSW_Status@command
 17428  152D  082C               	movf	DlyOff_Main@sw,w
 17429  152E  31A5  2502  3194   	fcall	_setRFSW_Status
 17430                           
 17431                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 17432  1531  0020               	movlb	0	; select bank0
 17433  1532  01A0               	clrf	setRF_DimmerLights@on
 17434  1533  082C               	movf	DlyOff_Main@sw,w
 17435  1534  319E  262F  3194   	fcall	_setRF_DimmerLights
 17436                           
 17437                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17438  1537  0020               	movlb	0	; select bank0
 17439  1538  01A2               	clrf	setDimmerLights_Trigger@command
 17440  1539  0AA2               	incf	setDimmerLights_Trigger@command,f
 17441  153A  082C               	movf	DlyOff_Main@sw,w
 17442  153B  31A5  2540  3194   	fcall	_setDimmerLights_Trigger
 17443                           
 17444                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17445  153E  0020               	movlb	0	; select bank0
 17446  153F  01A2               	clrf	setDimmerLights_Switch@command
 17447  1540  082C               	movf	DlyOff_Main@sw,w
 17448  1541  31A5  2530  3194   	fcall	_setDimmerLights_Switch
 17449                           
 17450                           ;DelayOff_B1.c: 85: setTxData(1);
 17451  1544  3001               	movlw	1
 17452  1545  318B  2318  3194   	fcall	_setTxData
 17453                           
 17454                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17455  1548  3064               	movlw	100
 17456  1549  0020               	movlb	0	; select bank0
 17457  154A  00A6               	movwf	setBuz@time
 17458  154B  3000               	movlw	0
 17459  154C  00A7               	movwf	setBuz@time+1
 17460  154D  3001               	movlw	1
 17461  154E  3193  23EA         	fcall	_setBuz
 17462  1550  0008               	return
 17463  1551                     __end_of_DlyOff_Main:	
 17464                           
 17465                           	psect	text106
 17466  0B18                     __ptext106:	
 17467 ;; *************** function _setTxData *****************
 17468 ;; Defined at:
 17469 ;;		line 127 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;  rf              1    wreg     unsigned char 
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;  rf              1    3[BANK0 ] unsigned char 
 17474 ;;  i               1    0        unsigned char 
 17475 ;; Return value:  Size  Location     Type
 17476 ;;		None               void
 17477 ;; Registers used:
 17478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;Total ram usage:        2 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; Hardware stack levels required when called:    5
 17491 ;; This function calls:
 17492 ;;		_RfPointSelect
 17493 ;; This function is called by:
 17494 ;;		_DlyOff_Main
 17495 ;;		_setDimmerLights_Adj
 17496 ;;		_setControl_Lights_Table
 17497 ;;		_setRFSW_Control
 17498 ;;		_setRFSW_AdjControl
 17499 ;;		_Sw_DimmerOnFunc
 17500 ;;		_Sw_DimmerOffFunc
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           
 17505                           ;psect for function _setTxData
 17506  0B18                     _setTxData:	
 17507                           
 17508                           ;incstack = 0
 17509                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17510                           ;setTxData@rf stored from wreg
 17511  0B18  0020               	movlb	0	; select bank0
 17512  0B19  00A3               	movwf	setTxData@rf
 17513                           
 17514                           ;RF_Control_B1.c: 129: char i;
 17515                           ;RF_Control_B1.c: 130: RfPointSelect(rf);
 17516  0B1A  0823               	movf	setTxData@rf,w
 17517  0B1B  31A4  241D  318B   	fcall	_RfPointSelect
 17518                           
 17519                           ;RF_Control_B1.c: 131: if(RF->Enable)
 17520  0B1E  087C               	movf	_RF,w
 17521  0B1F  0086               	movwf	6
 17522  0B20  0187               	clrf	7
 17523  0B21  1C01               	btfss	1,0
 17524  0B22  0008               	return
 17525                           
 17526                           ;RF_Control_B1.c: 132: {
 17527                           ;RF_Control_B1.c: 134: if(!RF->TransceiveGO)
 17528  0B23  087C               	movf	_RF,w
 17529  0B24  0086               	movwf	6
 17530  0B25  0187               	clrf	7
 17531  0B26  1901               	btfsc	1,2
 17532  0B27  0008               	return
 17533                           
 17534                           ;RF_Control_B1.c: 135: {
 17535                           ;RF_Control_B1.c: 136: RF->TransceiveGO=1;
 17536  0B28  087C               	movf	_RF,w
 17537  0B29  0086               	movwf	6
 17538  0B2A  0187               	clrf	7
 17539  0B2B  1501               	bsf	1,2
 17540                           
 17541                           ;RF_Control_B1.c: 145: RF_Data[0]=0x63;
 17542  0B2C  3063               	movlw	99
 17543  0B2D  0020               	movlb	0	; select bank0
 17544  0B2E  00A2               	movwf	??_setTxData
 17545  0B2F  0822               	movf	??_setTxData,w
 17546  0B30  0021               	movlb	1	; select bank1
 17547  0B31  00A0               	movwf	_RF_Data^(0+128)
 17548                           
 17549                           ;RF_Control_B1.c: 146: RF_Data[1]=0x02;
 17550  0B32  3002               	movlw	2
 17551  0B33  0020               	movlb	0	; select bank0
 17552  0B34  00A2               	movwf	??_setTxData
 17553  0B35  0822               	movf	??_setTxData,w
 17554  0B36  0021               	movlb	1	; select bank1
 17555  0B37  00A1               	movwf	(_RF_Data^(0+128)+1)
 17556                           
 17557                           ;RF_Control_B1.c: 147: RF_Data[2]=Product->Data[2];
 17558  0B38  0020               	movlb	0	; select bank0
 17559  0B39  086F               	movf	_Product,w
 17560  0B3A  0086               	movwf	6
 17561  0B3B  3001               	movlw	1	; select bank2/3
 17562  0B3C  0087               	movwf	7
 17563  0B3D  3001               	movlw	1	; select bank2/3
 17564  0B3E  3F42               	moviw [2]fsr1
 17565  0B3F  0021               	movlb	1	; select bank1
 17566  0B40  00A2               	movwf	(_RF_Data^(0+128)+2)
 17567                           
 17568                           ;RF_Control_B1.c: 148: RF_Data[3]=Product->Data[3];
 17569  0B41  0020               	movlb	0	; select bank0
 17570  0B42  086F               	movf	_Product,w
 17571  0B43  0086               	movwf	6
 17572  0B44  3001               	movlw	1	; select bank2/3
 17573  0B45  0087               	movwf	7
 17574  0B46  3001               	movlw	1	; select bank2/3
 17575  0B47  3F43               	moviw [3]fsr1
 17576  0B48  0021               	movlb	1	; select bank1
 17577  0B49  00A3               	movwf	(_RF_Data^(0+128)+3)
 17578                           
 17579                           ;RF_Control_B1.c: 149: RF_Data[4]=Product->Data[4];
 17580  0B4A  0020               	movlb	0	; select bank0
 17581  0B4B  086F               	movf	_Product,w
 17582  0B4C  0086               	movwf	6
 17583  0B4D  3001               	movlw	1	; select bank2/3
 17584  0B4E  0087               	movwf	7
 17585  0B4F  3001               	movlw	1	; select bank2/3
 17586  0B50  3F44               	moviw [4]fsr1
 17587  0B51  0021               	movlb	1	; select bank1
 17588  0B52  00A4               	movwf	(_RF_Data^(0+128)+4)
 17589                           
 17590                           ;RF_Control_B1.c: 150: RF_Data[5]=Product->Data[5];
 17591  0B53  0020               	movlb	0	; select bank0
 17592  0B54  086F               	movf	_Product,w
 17593  0B55  0086               	movwf	6
 17594  0B56  3001               	movlw	1	; select bank2/3
 17595  0B57  0087               	movwf	7
 17596  0B58  3001               	movlw	1	; select bank2/3
 17597  0B59  3F45               	moviw [5]fsr1
 17598  0B5A  0021               	movlb	1	; select bank1
 17599  0B5B  00A5               	movwf	(_RF_Data^(0+128)+5)
 17600                           
 17601                           ;RF_Control_B1.c: 151: RF_Data[6]=Product->Data[6];
 17602  0B5C  0020               	movlb	0	; select bank0
 17603  0B5D  086F               	movf	_Product,w
 17604  0B5E  0086               	movwf	6
 17605  0B5F  3001               	movlw	1	; select bank2/3
 17606  0B60  0087               	movwf	7
 17607  0B61  3001               	movlw	1	; select bank2/3
 17608  0B62  3F46               	moviw [6]fsr1
 17609  0B63  0021               	movlb	1	; select bank1
 17610  0B64  00A6               	movwf	(_RF_Data^(0+128)+6)
 17611                           
 17612                           ;RF_Control_B1.c: 152: RF_Data[7]=Product->Data[7];
 17613  0B65  0020               	movlb	0	; select bank0
 17614  0B66  086F               	movf	_Product,w
 17615  0B67  0086               	movwf	6
 17616  0B68  3001               	movlw	1	; select bank2/3
 17617  0B69  0087               	movwf	7
 17618  0B6A  3001               	movlw	1	; select bank2/3
 17619  0B6B  3F47               	moviw [7]fsr1
 17620  0B6C  0021               	movlb	1	; select bank1
 17621  0B6D  00A7               	movwf	(_RF_Data^(0+128)+7)
 17622                           
 17623                           ;RF_Control_B1.c: 153: RF_Data[8]=Product->Data[8];
 17624  0B6E  0020               	movlb	0	; select bank0
 17625  0B6F  086F               	movf	_Product,w
 17626  0B70  0086               	movwf	6
 17627  0B71  3001               	movlw	1	; select bank2/3
 17628  0B72  0087               	movwf	7
 17629  0B73  3001               	movlw	1	; select bank2/3
 17630  0B74  3F48               	moviw [8]fsr1
 17631  0B75  0021               	movlb	1	; select bank1
 17632  0B76  00A8               	movwf	(_RF_Data^(0+128)+8)
 17633                           
 17634                           ;RF_Control_B1.c: 154: RF_Data[9]=Product->Data[9];
 17635  0B77  0020               	movlb	0	; select bank0
 17636  0B78  086F               	movf	_Product,w
 17637  0B79  0086               	movwf	6
 17638  0B7A  3001               	movlw	1	; select bank2/3
 17639  0B7B  0087               	movwf	7
 17640  0B7C  3001               	movlw	1	; select bank2/3
 17641  0B7D  3F49               	moviw [9]fsr1
 17642  0B7E  0021               	movlb	1	; select bank1
 17643  0B7F  00A9               	movwf	(_RF_Data^(0+128)+9)
 17644                           
 17645                           ;RF_Control_B1.c: 155: RF_Data[10]=Product->Data[10];
 17646  0B80  0020               	movlb	0	; select bank0
 17647  0B81  086F               	movf	_Product,w
 17648  0B82  0086               	movwf	6
 17649  0B83  3001               	movlw	1	; select bank2/3
 17650  0B84  0087               	movwf	7
 17651  0B85  3001               	movlw	1	; select bank2/3
 17652  0B86  3F4A               	moviw [10]fsr1
 17653  0B87  0021               	movlb	1	; select bank1
 17654  0B88  00AA               	movwf	(_RF_Data^(0+128)+10)
 17655                           
 17656                           ;RF_Control_B1.c: 156: RF_Data[11]=Product->Data[11];
 17657  0B89  0020               	movlb	0	; select bank0
 17658  0B8A  086F               	movf	_Product,w
 17659  0B8B  0086               	movwf	6
 17660  0B8C  3001               	movlw	1	; select bank2/3
 17661  0B8D  0087               	movwf	7
 17662  0B8E  3001               	movlw	1	; select bank2/3
 17663  0B8F  3F4B               	moviw [11]fsr1
 17664  0B90  0021               	movlb	1	; select bank1
 17665  0B91  00AB               	movwf	(_RF_Data^(0+128)+11)
 17666                           
 17667                           ;RF_Control_B1.c: 157: RF_Data[12]=Product->Data[12];
 17668  0B92  0020               	movlb	0	; select bank0
 17669  0B93  086F               	movf	_Product,w
 17670  0B94  0086               	movwf	6
 17671  0B95  3001               	movlw	1	; select bank2/3
 17672  0B96  0087               	movwf	7
 17673  0B97  3001               	movlw	1	; select bank2/3
 17674  0B98  3F4C               	moviw [12]fsr1
 17675  0B99  0021               	movlb	1	; select bank1
 17676  0B9A  00AC               	movwf	(_RF_Data^(0+128)+12)
 17677                           
 17678                           ;RF_Control_B1.c: 158: RF_Data[13]=Product->Data[13];
 17679  0B9B  0020               	movlb	0	; select bank0
 17680  0B9C  086F               	movf	_Product,w
 17681  0B9D  0086               	movwf	6
 17682  0B9E  3001               	movlw	1	; select bank2/3
 17683  0B9F  0087               	movwf	7
 17684  0BA0  3001               	movlw	1	; select bank2/3
 17685  0BA1  3F4D               	moviw [13]fsr1
 17686  0BA2  0021               	movlb	1	; select bank1
 17687  0BA3  00AD               	movwf	(_RF_Data^(0+128)+13)
 17688                           
 17689                           ;RF_Control_B1.c: 159: RF_Data[14]=Product->Data[14];
 17690  0BA4  0020               	movlb	0	; select bank0
 17691  0BA5  086F               	movf	_Product,w
 17692  0BA6  0086               	movwf	6
 17693  0BA7  3001               	movlw	1	; select bank2/3
 17694  0BA8  0087               	movwf	7
 17695  0BA9  3001               	movlw	1	; select bank2/3
 17696  0BAA  3F4E               	moviw [14]fsr1
 17697  0BAB  0021               	movlb	1	; select bank1
 17698  0BAC  00AE               	movwf	(_RF_Data^(0+128)+14)
 17699                           
 17700                           ;RF_Control_B1.c: 160: RF_Data[15]=Product->Data[15];
 17701  0BAD  0020               	movlb	0	; select bank0
 17702  0BAE  086F               	movf	_Product,w
 17703  0BAF  0086               	movwf	6
 17704  0BB0  3001               	movlw	1	; select bank2/3
 17705  0BB1  0087               	movwf	7
 17706  0BB2  3001               	movlw	1	; select bank2/3
 17707  0BB3  3F4F               	moviw [15]fsr1
 17708  0BB4  0021               	movlb	1	; select bank1
 17709  0BB5  00AF               	movwf	(_RF_Data^(0+128)+15)
 17710                           
 17711                           ;RF_Control_B1.c: 161: RF_Data[16]=Product->Data[16];
 17712  0BB6  0020               	movlb	0	; select bank0
 17713  0BB7  086F               	movf	_Product,w
 17714  0BB8  0086               	movwf	6
 17715  0BB9  3001               	movlw	1	; select bank2/3
 17716  0BBA  0087               	movwf	7
 17717  0BBB  3001               	movlw	1	; select bank2/3
 17718  0BBC  3F50               	moviw [16]fsr1
 17719  0BBD  0021               	movlb	1	; select bank1
 17720  0BBE  00B0               	movwf	(_RF_Data^(0+128)+16)
 17721                           
 17722                           ;RF_Control_B1.c: 162: RF_Data[17]=Product->Data[17];
 17723  0BBF  0020               	movlb	0	; select bank0
 17724  0BC0  086F               	movf	_Product,w
 17725  0BC1  0086               	movwf	6
 17726  0BC2  3001               	movlw	1	; select bank2/3
 17727  0BC3  0087               	movwf	7
 17728  0BC4  3001               	movlw	1	; select bank2/3
 17729  0BC5  3F51               	moviw [17]fsr1
 17730  0BC6  0021               	movlb	1	; select bank1
 17731  0BC7  00B1               	movwf	(_RF_Data^(0+128)+17)
 17732                           
 17733                           ;RF_Control_B1.c: 163: RF_Data[18]=Product->Data[18];
 17734  0BC8  0020               	movlb	0	; select bank0
 17735  0BC9  086F               	movf	_Product,w
 17736  0BCA  0086               	movwf	6
 17737  0BCB  3001               	movlw	1	; select bank2/3
 17738  0BCC  0087               	movwf	7
 17739  0BCD  3001               	movlw	1	; select bank2/3
 17740  0BCE  3F52               	moviw [18]fsr1
 17741  0BCF  0021               	movlb	1	; select bank1
 17742  0BD0  00B2               	movwf	(_RF_Data^(0+128)+18)
 17743                           
 17744                           ;RF_Control_B1.c: 164: RF_Data[19]=Product->Data[19];
 17745  0BD1  0020               	movlb	0	; select bank0
 17746  0BD2  086F               	movf	_Product,w
 17747  0BD3  0086               	movwf	6
 17748  0BD4  3001               	movlw	1	; select bank2/3
 17749  0BD5  0087               	movwf	7
 17750  0BD6  3001               	movlw	1	; select bank2/3
 17751  0BD7  3F53               	moviw [19]fsr1
 17752  0BD8  0021               	movlb	1	; select bank1
 17753  0BD9  00B3               	movwf	(_RF_Data^(0+128)+19)
 17754                           
 17755                           ;RF_Control_B1.c: 165: RF_Data[20]=2;
 17756  0BDA  3002               	movlw	2
 17757  0BDB  0020               	movlb	0	; select bank0
 17758  0BDC  00A2               	movwf	??_setTxData
 17759  0BDD  0822               	movf	??_setTxData,w
 17760  0BDE  0021               	movlb	1	; select bank1
 17761  0BDF  00B4               	movwf	(_RF_Data^(0+128)+20)
 17762  0BE0  0008               	return
 17763  0BE1                     __end_of_setTxData:	
 17764                           
 17765                           	psect	text107
 17766  241D                     __ptext107:	
 17767 ;; *************** function _RfPointSelect *****************
 17768 ;; Defined at:
 17769 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  rf              1    wreg     unsigned char 
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;  rf              1    1[BANK0 ] unsigned char 
 17774 ;; Return value:  Size  Location     Type
 17775 ;;		None               void
 17776 ;; Registers used:
 17777 ;;		wreg
 17778 ;; Tracked objects:
 17779 ;;		On entry : 0/0
 17780 ;;		On exit  : 0/0
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17787 ;;Total ram usage:        2 bytes
 17788 ;; Hardware stack levels used:    1
 17789 ;; Hardware stack levels required when called:    4
 17790 ;; This function calls:
 17791 ;;		Nothing
 17792 ;; This function is called by:
 17793 ;;		_setRF_Learn
 17794 ;;		_setRF_RxStatus
 17795 ;;		_setRF_Main
 17796 ;;		_setTxData
 17797 ;;		_setRF_Enable
 17798 ;;		_RF_RxDisable
 17799 ;;		_getRxData
 17800 ;;		_setLog_Code
 17801 ;;		_setControl_Lights_Table
 17802 ;; This function uses a non-reentrant model
 17803 ;;
 17804                           
 17805                           
 17806                           ;psect for function _RfPointSelect
 17807  241D                     _RfPointSelect:	
 17808                           
 17809                           ;incstack = 0
 17810                           ; Regs used in _RfPointSelect: [wreg]
 17811                           ;RfPointSelect@rf stored from wreg
 17812  241D  0020               	movlb	0	; select bank0
 17813  241E  00A1               	movwf	RfPointSelect@rf
 17814                           
 17815                           ;RF_Control_B1.c: 10: if(rf == 1)
 17816  241F  0821               	movf	RfPointSelect@rf,w
 17817  2420  3A01               	xorlw	1
 17818  2421  1D03               	skipz
 17819  2422  0008               	return
 17820                           
 17821                           ;RF_Control_B1.c: 11: {
 17822                           ;RF_Control_B1.c: 12: RF=&RF1;
 17823  2423  30E4               	movlw	_RF1& (0+255)
 17824  2424  00A0               	movwf	??_RfPointSelect
 17825  2425  0820               	movf	??_RfPointSelect,w
 17826  2426  00FC               	movwf	_RF
 17827  2427  0008               	return
 17828  2428                     __end_of_RfPointSelect:	
 17829                           
 17830                           	psect	text108
 17831  2511                     __ptext108:	
 17832 ;; *************** function _setSw_Status *****************
 17833 ;; Defined at:
 17834 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  sw              1    wreg     unsigned char 
 17837 ;;  command         1    2[BANK0 ] unsigned char 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;  sw              1    3[BANK0 ] unsigned char 
 17840 ;; Return value:  Size  Location     Type
 17841 ;;		None               void
 17842 ;; Registers used:
 17843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17844 ;; Tracked objects:
 17845 ;;		On entry : 0/0
 17846 ;;		On exit  : 0/0
 17847 ;;		Unchanged: 0/0
 17848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17849 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;Total ram usage:        2 bytes
 17854 ;; Hardware stack levels used:    1
 17855 ;; Hardware stack levels required when called:    5
 17856 ;; This function calls:
 17857 ;;		_SwPointSelect
 17858 ;; This function is called by:
 17859 ;;		_DlyOff_Main
 17860 ;;		_setDimmerLights_ERROR
 17861 ;;		_setControl_Lights_Table
 17862 ;;		_setRFSW_Control
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function _setSw_Status
 17868  2511                     _setSw_Status:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17872                           ;setSw_Status@sw stored from wreg
 17873  2511  0020               	movlb	0	; select bank0
 17874  2512  00A3               	movwf	setSw_Status@sw
 17875                           
 17876                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17877  2513  0823               	movf	setSw_Status@sw,w
 17878  2514  31A5  25C4         	fcall	_SwPointSelect
 17879                           
 17880                           ;Switch_B1.c: 109: Sw->Status=command;
 17881  2516  0020               	movlb	0	; select bank0
 17882  2517  086D               	movf	_Sw,w
 17883  2518  0086               	movwf	6
 17884  2519  3001               	movlw	1	; select bank2/3
 17885  251A  0087               	movwf	7
 17886  251B  0822               	movf	setSw_Status@command,w
 17887  251C  1301               	bcf	1,6
 17888  251D  1D03               	skipz
 17889  251E  1701               	bsf	1,6
 17890  251F  0008               	return
 17891  2520                     __end_of_setSw_Status:	
 17892                           
 17893                           	psect	text109
 17894  25C4                     __ptext109:	
 17895 ;; *************** function _SwPointSelect *****************
 17896 ;; Defined at:
 17897 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17898 ;; Parameters:    Size  Location     Type
 17899 ;;  sw              1    wreg     unsigned char 
 17900 ;; Auto vars:     Size  Location     Type
 17901 ;;  sw              1    1[BANK0 ] unsigned char 
 17902 ;; Return value:  Size  Location     Type
 17903 ;;		None               void
 17904 ;; Registers used:
 17905 ;;		wreg
 17906 ;; Tracked objects:
 17907 ;;		On entry : 0/0
 17908 ;;		On exit  : 0/0
 17909 ;;		Unchanged: 0/0
 17910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17914 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;Total ram usage:        2 bytes
 17916 ;; Hardware stack levels used:    1
 17917 ;; Hardware stack levels required when called:    4
 17918 ;; This function calls:
 17919 ;;		Nothing
 17920 ;; This function is called by:
 17921 ;;		_setSw_Enable
 17922 ;;		_setSw_Status
 17923 ;;		_setSw_Main
 17924 ;;		_Sw_Detect
 17925 ;; This function uses a non-reentrant model
 17926 ;;
 17927                           
 17928                           
 17929                           ;psect for function _SwPointSelect
 17930  25C4                     _SwPointSelect:	
 17931                           
 17932                           ;incstack = 0
 17933                           ; Regs used in _SwPointSelect: [wreg]
 17934                           ;SwPointSelect@sw stored from wreg
 17935  25C4  0020               	movlb	0	; select bank0
 17936  25C5  00A1               	movwf	SwPointSelect@sw
 17937                           
 17938                           ;Switch_B1.c: 19: if(sw == 1)
 17939  25C6  0821               	movf	SwPointSelect@sw,w
 17940  25C7  3A01               	xorlw	1
 17941  25C8  1D03               	skipz
 17942  25C9  2DCF               	goto	l6480
 17943                           
 17944                           ;Switch_B1.c: 20: {
 17945                           ;Switch_B1.c: 21: Sw=&Sw1;
 17946  25CA  3054               	movlw	_Sw1& (0+255)
 17947  25CB  00A0               	movwf	??_SwPointSelect
 17948  25CC  0820               	movf	??_SwPointSelect,w
 17949  25CD  00ED               	movwf	_Sw
 17950                           
 17951                           ;Switch_B1.c: 22: }
 17952  25CE  0008               	return
 17953  25CF                     l6480:	
 17954                           
 17955                           ;Switch_B1.c: 25: else if(sw == 2)
 17956  25CF  0821               	movf	SwPointSelect@sw,w
 17957  25D0  3A02               	xorlw	2
 17958  25D1  1D03               	skipz
 17959  25D2  0008               	return
 17960                           
 17961                           ;Switch_B1.c: 26: {
 17962                           ;Switch_B1.c: 27: Sw=&Sw2;
 17963  25D3  305D               	movlw	_Sw2& (0+255)
 17964  25D4  00A0               	movwf	??_SwPointSelect
 17965  25D5  0820               	movf	??_SwPointSelect,w
 17966  25D6  00ED               	movwf	_Sw
 17967  25D7  0008               	return
 17968  25D8                     __end_of_SwPointSelect:	
 17969                           
 17970                           	psect	text110
 17971  1E2F                     __ptext110:	
 17972 ;; *************** function _setRF_DimmerLights *****************
 17973 ;; Defined at:
 17974 ;;		line 438 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;  lights          1    wreg     unsigned char 
 17977 ;;  on              1    0[BANK0 ] unsigned char 
 17978 ;; Auto vars:     Size  Location     Type
 17979 ;;  lights          1    4[BANK0 ] unsigned char 
 17980 ;;  status          1    3[BANK0 ] unsigned char 
 17981 ;; Return value:  Size  Location     Type
 17982 ;;		None               void
 17983 ;; Registers used:
 17984 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17985 ;; Tracked objects:
 17986 ;;		On entry : 0/0
 17987 ;;		On exit  : 0/0
 17988 ;;		Unchanged: 0/0
 17989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17990 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17993 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17994 ;;Total ram usage:        5 bytes
 17995 ;; Hardware stack levels used:    1
 17996 ;; Hardware stack levels required when called:    4
 17997 ;; This function calls:
 17998 ;;		Nothing
 17999 ;; This function is called by:
 18000 ;;		_DlyOff_Main
 18001 ;;		_setDimmerLights_Adj
 18002 ;;		_setRFSW_Control
 18003 ;;		_Sw_DimmerOnFunc
 18004 ;;		_Sw_DimmerOffFunc
 18005 ;; This function uses a non-reentrant model
 18006 ;;
 18007                           
 18008                           
 18009                           ;psect for function _setRF_DimmerLights
 18010  1E2F                     _setRF_DimmerLights:	
 18011                           
 18012                           ;incstack = 0
 18013                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 18014                           ;setRF_DimmerLights@lights stored from wreg
 18015  1E2F  0020               	movlb	0	; select bank0
 18016  1E30  00A4               	movwf	setRF_DimmerLights@lights
 18017                           
 18018                           ;RF_Control_B1.c: 440: char status;
 18019                           ;RF_Control_B1.c: 441: status=1;
 18020  1E31  01A3               	clrf	setRF_DimmerLights@status
 18021  1E32  0AA3               	incf	setRF_DimmerLights@status,f
 18022                           
 18023                           ;RF_Control_B1.c: 442: status<<=(lights-1);
 18024  1E33  0824               	movf	setRF_DimmerLights@lights,w
 18025  1E34  3EFF               	addlw	-1
 18026  1E35  0A89               	incf	9,f
 18027  1E36  2E39               	goto	u5040
 18028  1E37                     u5045:	
 18029  1E37  1003               	clrc
 18030  1E38  0DA3               	rlf	setRF_DimmerLights@status,f
 18031  1E39                     u5040:	
 18032  1E39  3EFF               	addlw	-1
 18033  1E3A  1D03               	skipz
 18034  1E3B  2E37               	goto	u5045
 18035                           
 18036                           ;RF_Control_B1.c: 443: Product->Data[11]=lights;
 18037  1E3C  0824               	movf	setRF_DimmerLights@lights,w
 18038  1E3D  00A1               	movwf	??_setRF_DimmerLights
 18039  1E3E  086F               	movf	_Product,w
 18040  1E3F  3E0B               	addlw	11
 18041  1E40  0086               	movwf	6
 18042  1E41  3001               	movlw	1	; select bank2/3
 18043  1E42  0087               	movwf	7
 18044  1E43  0821               	movf	??_setRF_DimmerLights,w
 18045  1E44  0081               	movwf	1
 18046                           
 18047                           ;RF_Control_B1.c: 444: Product->Data[9]=Product->Data[20+lights];
 18048  1E45  0824               	movf	setRF_DimmerLights@lights,w
 18049  1E46  3E14               	addlw	20
 18050  1E47  076F               	addwf	_Product,w
 18051  1E48  00A1               	movwf	??_setRF_DimmerLights
 18052  1E49  0821               	movf	??_setRF_DimmerLights,w
 18053  1E4A  0086               	movwf	6
 18054  1E4B  3001               	movlw	1	; select bank2/3
 18055  1E4C  0087               	movwf	7
 18056  1E4D  0801               	movf	1,w
 18057  1E4E  00A2               	movwf	??_setRF_DimmerLights+1
 18058  1E4F  086F               	movf	_Product,w
 18059  1E50  3E09               	addlw	9
 18060  1E51  0086               	movwf	6
 18061  1E52  3001               	movlw	1	; select bank2/3
 18062  1E53  0087               	movwf	7
 18063  1E54  0822               	movf	??_setRF_DimmerLights+1,w
 18064  1E55  0081               	movwf	1
 18065                           
 18066                           ;RF_Control_B1.c: 445: Product->Data[17]=Product->Data[26+lights];
 18067  1E56  0824               	movf	setRF_DimmerLights@lights,w
 18068  1E57  3E1A               	addlw	26
 18069  1E58  076F               	addwf	_Product,w
 18070  1E59  00A1               	movwf	??_setRF_DimmerLights
 18071  1E5A  0821               	movf	??_setRF_DimmerLights,w
 18072  1E5B  0086               	movwf	6
 18073  1E5C  3001               	movlw	1	; select bank2/3
 18074  1E5D  0087               	movwf	7
 18075  1E5E  0801               	movf	1,w
 18076  1E5F  00A2               	movwf	??_setRF_DimmerLights+1
 18077  1E60  086F               	movf	_Product,w
 18078  1E61  3E11               	addlw	17
 18079  1E62  0086               	movwf	6
 18080  1E63  3001               	movlw	1	; select bank2/3
 18081  1E64  0087               	movwf	7
 18082  1E65  0822               	movf	??_setRF_DimmerLights+1,w
 18083  1E66  0081               	movwf	1
 18084                           
 18085                           ;RF_Control_B1.c: 446: if(on)
 18086  1E67  0820               	movf	setRF_DimmerLights@on,w
 18087  1E68  1903               	btfsc	3,2
 18088  1E69  2E7A               	goto	l6552
 18089                           
 18090                           ;RF_Control_B1.c: 447: {
 18091                           ;RF_Control_B1.c: 448: Product->Data[15]=(Product->Data[15]|status);
 18092  1E6A  086F               	movf	_Product,w
 18093  1E6B  3E0F               	addlw	15
 18094  1E6C  0086               	movwf	6
 18095  1E6D  3001               	movlw	1	; select bank2/3
 18096  1E6E  0087               	movwf	7
 18097  1E6F  0801               	movf	1,w
 18098  1E70  0423               	iorwf	setRF_DimmerLights@status,w
 18099  1E71  00A1               	movwf	??_setRF_DimmerLights
 18100  1E72  086F               	movf	_Product,w
 18101  1E73  3E0F               	addlw	15
 18102  1E74  0086               	movwf	6
 18103  1E75  3001               	movlw	1	; select bank2/3
 18104  1E76  0087               	movwf	7
 18105  1E77  0821               	movf	??_setRF_DimmerLights,w
 18106  1E78  0081               	movwf	1
 18107                           
 18108                           ;RF_Control_B1.c: 449: }
 18109  1E79  0008               	return
 18110  1E7A                     l6552:	
 18111                           
 18112                           ;RF_Control_B1.c: 450: else
 18113                           ;RF_Control_B1.c: 451: {
 18114                           ;RF_Control_B1.c: 452: Product->Data[15]=(Product->Data[15]&(~status));
 18115  1E7A  086F               	movf	_Product,w
 18116  1E7B  3E0F               	addlw	15
 18117  1E7C  0086               	movwf	6
 18118  1E7D  3001               	movlw	1	; select bank2/3
 18119  1E7E  0087               	movwf	7
 18120  1E7F  0923               	comf	setRF_DimmerLights@status,w
 18121  1E80  0501               	andwf	1,w
 18122  1E81  00A1               	movwf	??_setRF_DimmerLights
 18123  1E82  086F               	movf	_Product,w
 18124  1E83  3E0F               	addlw	15
 18125  1E84  0086               	movwf	6
 18126  1E85  3001               	movlw	1	; select bank2/3
 18127  1E86  0087               	movwf	7
 18128  1E87  0821               	movf	??_setRF_DimmerLights,w
 18129  1E88  0081               	movwf	1
 18130  1E89  0008               	return
 18131  1E8A                     __end_of_setRF_DimmerLights:	
 18132                           
 18133                           	psect	text111
 18134  2502                     __ptext111:	
 18135 ;; *************** function _setRFSW_Status *****************
 18136 ;; Defined at:
 18137 ;;		line 418 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18138 ;; Parameters:    Size  Location     Type
 18139 ;;  sw              1    wreg     unsigned char 
 18140 ;;  command         1    2[BANK0 ] unsigned char 
 18141 ;; Auto vars:     Size  Location     Type
 18142 ;;  sw              1    3[BANK0 ] unsigned char 
 18143 ;; Return value:  Size  Location     Type
 18144 ;;		None               void
 18145 ;; Registers used:
 18146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18147 ;; Tracked objects:
 18148 ;;		On entry : 0/0
 18149 ;;		On exit  : 0/0
 18150 ;;		Unchanged: 0/0
 18151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;Total ram usage:        2 bytes
 18157 ;; Hardware stack levels used:    1
 18158 ;; Hardware stack levels required when called:    5
 18159 ;; This function calls:
 18160 ;;		_RfSWPointSelect
 18161 ;; This function is called by:
 18162 ;;		_DlyOff_Main
 18163 ;;		_setDimmerLights_ERROR
 18164 ;;		_setControl_Lights_Table
 18165 ;;		_Sw_DimmerOnFunc
 18166 ;;		_Sw_DimmerAdjFunc
 18167 ;; This function uses a non-reentrant model
 18168 ;;
 18169                           
 18170                           
 18171                           ;psect for function _setRFSW_Status
 18172  2502                     _setRFSW_Status:	
 18173                           
 18174                           ;incstack = 0
 18175                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18176                           ;setRFSW_Status@sw stored from wreg
 18177  2502  0020               	movlb	0	; select bank0
 18178  2503  00A3               	movwf	setRFSW_Status@sw
 18179                           
 18180                           ;RF_Control_B1.c: 420: RfSWPointSelect(sw);
 18181  2504  0823               	movf	setRFSW_Status@sw,w
 18182  2505  31A6  2617         	fcall	_RfSWPointSelect
 18183                           
 18184                           ;RF_Control_B1.c: 421: RFSW->Status=command;
 18185  2507  0021               	movlb	1	; select bank1
 18186  2508  083C               	movf	_RFSW^(0+128),w
 18187  2509  0086               	movwf	6
 18188  250A  0187               	clrf	7
 18189  250B  0020               	movlb	0	; select bank0
 18190  250C  0822               	movf	setRFSW_Status@command,w
 18191  250D  1001               	bcf	1,0
 18192  250E  1D03               	skipz
 18193  250F  1401               	bsf	1,0
 18194  2510  0008               	return
 18195  2511                     __end_of_setRFSW_Status:	
 18196                           
 18197                           	psect	text112
 18198  2617                     __ptext112:	
 18199 ;; *************** function _RfSWPointSelect *****************
 18200 ;; Defined at:
 18201 ;;		line 340 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18202 ;; Parameters:    Size  Location     Type
 18203 ;;  sw              1    wreg     unsigned char 
 18204 ;; Auto vars:     Size  Location     Type
 18205 ;;  sw              1    1[BANK0 ] unsigned char 
 18206 ;; Return value:  Size  Location     Type
 18207 ;;		None               void
 18208 ;; Registers used:
 18209 ;;		wreg
 18210 ;; Tracked objects:
 18211 ;;		On entry : 0/0
 18212 ;;		On exit  : 0/0
 18213 ;;		Unchanged: 0/0
 18214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18219 ;;Total ram usage:        2 bytes
 18220 ;; Hardware stack levels used:    1
 18221 ;; Hardware stack levels required when called:    4
 18222 ;; This function calls:
 18223 ;;		Nothing
 18224 ;; This function is called by:
 18225 ;;		_setRFSW_Control
 18226 ;;		_setRFSW_AdjControl
 18227 ;;		_setRFSW_Status
 18228 ;; This function uses a non-reentrant model
 18229 ;;
 18230                           
 18231                           
 18232                           ;psect for function _RfSWPointSelect
 18233  2617                     _RfSWPointSelect:	
 18234                           
 18235                           ;incstack = 0
 18236                           ; Regs used in _RfSWPointSelect: [wreg]
 18237                           ;RfSWPointSelect@sw stored from wreg
 18238  2617  0020               	movlb	0	; select bank0
 18239  2618  00A1               	movwf	RfSWPointSelect@sw
 18240                           
 18241                           ;RF_Control_B1.c: 343: if(sw == 1)
 18242  2619  0821               	movf	RfSWPointSelect@sw,w
 18243  261A  3A01               	xorlw	1
 18244  261B  1D03               	skipz
 18245  261C  2E22               	goto	l2726
 18246                           
 18247                           ;RF_Control_B1.c: 344: {
 18248                           ;RF_Control_B1.c: 345: RFSW=&RFSW1;
 18249  261D  30E6               	movlw	_RFSW1& (0+255)
 18250  261E  00A0               	movwf	??_RfSWPointSelect
 18251  261F  0820               	movf	??_RfSWPointSelect,w
 18252  2620  0021               	movlb	1	; select bank1
 18253  2621  00BC               	movwf	_RFSW^(0+128)
 18254  2622                     l2726:	
 18255                           
 18256                           ;RF_Control_B1.c: 346: }
 18257                           ;RF_Control_B1.c: 349: if(sw == 2)
 18258  2622  0020               	movlb	0	; select bank0
 18259  2623  0821               	movf	RfSWPointSelect@sw,w
 18260  2624  3A02               	xorlw	2
 18261  2625  1D03               	skipz
 18262  2626  0008               	return
 18263                           
 18264                           ;RF_Control_B1.c: 350: {
 18265                           ;RF_Control_B1.c: 351: RFSW=&RFSW2;
 18266  2627  30E7               	movlw	_RFSW2& (0+255)
 18267  2628  00A0               	movwf	??_RfSWPointSelect
 18268  2629  0820               	movf	??_RfSWPointSelect,w
 18269  262A  0021               	movlb	1	; select bank1
 18270  262B  00BC               	movwf	_RFSW^(0+128)
 18271  262C  0008               	return
 18272  262D                     __end_of_RfSWPointSelect:	
 18273                           
 18274                           	psect	text113
 18275  2540                     __ptext113:	
 18276 ;; *************** function _setDimmerLights_Trigger *****************
 18277 ;; Defined at:
 18278 ;;		line 427 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18279 ;; Parameters:    Size  Location     Type
 18280 ;;  lights          1    wreg     unsigned char 
 18281 ;;  command         1    2[BANK0 ] unsigned char 
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;  lights          1    3[BANK0 ] unsigned char 
 18284 ;; Return value:  Size  Location     Type
 18285 ;;		None               void
 18286 ;; Registers used:
 18287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18288 ;; Tracked objects:
 18289 ;;		On entry : 0/0
 18290 ;;		On exit  : 0/0
 18291 ;;		Unchanged: 0/0
 18292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18293 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18297 ;;Total ram usage:        2 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    5
 18300 ;; This function calls:
 18301 ;;		_DimmerLightsPointSelect
 18302 ;; This function is called by:
 18303 ;;		_DlyOff_Main
 18304 ;;		_setRFSW_Control
 18305 ;;		_Sw_DimmerOnFunc
 18306 ;;		_Sw_DimmerOffFunc
 18307 ;; This function uses a non-reentrant model
 18308 ;;
 18309                           
 18310                           
 18311                           ;psect for function _setDimmerLights_Trigger
 18312  2540                     _setDimmerLights_Trigger:	
 18313                           
 18314                           ;incstack = 0
 18315                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18316                           ;setDimmerLights_Trigger@lights stored from wreg
 18317  2540  0020               	movlb	0	; select bank0
 18318  2541  00A3               	movwf	setDimmerLights_Trigger@lights
 18319                           
 18320                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 18321  2542  0823               	movf	setDimmerLights_Trigger@lights,w
 18322  2543  31A5  25B1         	fcall	_DimmerLightsPointSelect
 18323                           
 18324                           ;Dimmer_B1.c: 430: DimmerLights->Trigger=command;
 18325  2545  0020               	movlb	0	; select bank0
 18326  2546  086C               	movf	_DimmerLights,w
 18327  2547  3E09               	addlw	9
 18328  2548  0086               	movwf	6
 18329  2549  3001               	movlw	1	; select bank2/3
 18330  254A  0087               	movwf	7
 18331  254B  0822               	movf	setDimmerLights_Trigger@command,w
 18332  254C  1081               	bcf	1,1
 18333  254D  1D03               	skipz
 18334  254E  1481               	bsf	1,1
 18335  254F  0008               	return
 18336  2550                     __end_of_setDimmerLights_Trigger:	
 18337                           
 18338                           	psect	text114
 18339  2530                     __ptext114:	
 18340 ;; *************** function _setDimmerLights_Switch *****************
 18341 ;; Defined at:
 18342 ;;		line 417 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18343 ;; Parameters:    Size  Location     Type
 18344 ;;  lights          1    wreg     unsigned char 
 18345 ;;  command         1    2[BANK0 ] unsigned char 
 18346 ;; Auto vars:     Size  Location     Type
 18347 ;;  lights          1    3[BANK0 ] unsigned char 
 18348 ;; Return value:  Size  Location     Type
 18349 ;;		None               void
 18350 ;; Registers used:
 18351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18352 ;; Tracked objects:
 18353 ;;		On entry : 0/0
 18354 ;;		On exit  : 0/0
 18355 ;;		Unchanged: 0/0
 18356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18361 ;;Total ram usage:        2 bytes
 18362 ;; Hardware stack levels used:    1
 18363 ;; Hardware stack levels required when called:    5
 18364 ;; This function calls:
 18365 ;;		_DimmerLightsPointSelect
 18366 ;; This function is called by:
 18367 ;;		_DlyOff_Main
 18368 ;;		_setRFSW_Control
 18369 ;;		_Sw_DimmerOnFunc
 18370 ;;		_Sw_DimmerOffFunc
 18371 ;; This function uses a non-reentrant model
 18372 ;;
 18373                           
 18374                           
 18375                           ;psect for function _setDimmerLights_Switch
 18376  2530                     _setDimmerLights_Switch:	
 18377                           
 18378                           ;incstack = 0
 18379                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18380                           ;setDimmerLights_Switch@lights stored from wreg
 18381  2530  0020               	movlb	0	; select bank0
 18382  2531  00A3               	movwf	setDimmerLights_Switch@lights
 18383                           
 18384                           ;Dimmer_B1.c: 419: DimmerLightsPointSelect(lights);
 18385  2532  0823               	movf	setDimmerLights_Switch@lights,w
 18386  2533  31A5  25B1         	fcall	_DimmerLightsPointSelect
 18387                           
 18388                           ;Dimmer_B1.c: 420: DimmerLights->Switch=command;
 18389  2535  0020               	movlb	0	; select bank0
 18390  2536  086C               	movf	_DimmerLights,w
 18391  2537  3E09               	addlw	9
 18392  2538  0086               	movwf	6
 18393  2539  3001               	movlw	1	; select bank2/3
 18394  253A  0087               	movwf	7
 18395  253B  0822               	movf	setDimmerLights_Switch@command,w
 18396  253C  1001               	bcf	1,0
 18397  253D  1D03               	skipz
 18398  253E  1401               	bsf	1,0
 18399  253F  0008               	return
 18400  2540                     __end_of_setDimmerLights_Switch:	
 18401                           
 18402                           	psect	text115
 18403  25B1                     __ptext115:	
 18404 ;; *************** function _DimmerLightsPointSelect *****************
 18405 ;; Defined at:
 18406 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18407 ;; Parameters:    Size  Location     Type
 18408 ;;  lights          1    wreg     unsigned char 
 18409 ;; Auto vars:     Size  Location     Type
 18410 ;;  lights          1    1[BANK0 ] unsigned char 
 18411 ;; Return value:  Size  Location     Type
 18412 ;;		None               void
 18413 ;; Registers used:
 18414 ;;		wreg
 18415 ;; Tracked objects:
 18416 ;;		On entry : 0/0
 18417 ;;		On exit  : 0/0
 18418 ;;		Unchanged: 0/0
 18419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18424 ;;Total ram usage:        2 bytes
 18425 ;; Hardware stack levels used:    1
 18426 ;; Hardware stack levels required when called:    4
 18427 ;; This function calls:
 18428 ;;		Nothing
 18429 ;; This function is called by:
 18430 ;;		_setDimmerLights_Initialization
 18431 ;;		_setDimmerLights_Main
 18432 ;;		_setDimmerLights_ERROR
 18433 ;;		_setDimmerLights_TriggerERROR
 18434 ;;		_setDimmerLights
 18435 ;;		_setDimmerLights_Adj
 18436 ;;		_setDimmerLights_AdjRF
 18437 ;;		_setDimmerLights_Switch
 18438 ;;		_setDimmerLights_AdjGo
 18439 ;;		_setDimmerLights_Trigger
 18440 ;;		_setDimmerLights_TriggerAdj
 18441 ;;		_setDimmerLights_Clear
 18442 ;;		_setDimmerLights_GO
 18443 ;;		_setDimmerLights_MaxmumValue
 18444 ;; This function uses a non-reentrant model
 18445 ;;
 18446                           
 18447                           
 18448                           ;psect for function _DimmerLightsPointSelect
 18449  25B1                     _DimmerLightsPointSelect:	
 18450                           
 18451                           ;incstack = 0
 18452                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18453                           ;DimmerLightsPointSelect@lights stored from wreg
 18454  25B1  0020               	movlb	0	; select bank0
 18455  25B2  00A1               	movwf	DimmerLightsPointSelect@lights
 18456                           
 18457                           ;Dimmer_B1.c: 10: if(lights == 1)
 18458  25B3  0821               	movf	DimmerLightsPointSelect@lights,w
 18459  25B4  3A01               	xorlw	1
 18460  25B5  1D03               	skipz
 18461  25B6  2DBB               	goto	l877
 18462                           
 18463                           ;Dimmer_B1.c: 11: {
 18464                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18465  25B7  302E               	movlw	_DimmerLights1& (0+255)
 18466  25B8  00A0               	movwf	??_DimmerLightsPointSelect
 18467  25B9  0820               	movf	??_DimmerLightsPointSelect,w
 18468  25BA  00EC               	movwf	_DimmerLights
 18469  25BB                     l877:	
 18470                           
 18471                           ;Dimmer_B1.c: 13: }
 18472                           ;Dimmer_B1.c: 17: if(lights == 2)
 18473  25BB  0821               	movf	DimmerLightsPointSelect@lights,w
 18474  25BC  3A02               	xorlw	2
 18475  25BD  1D03               	skipz
 18476  25BE  0008               	return
 18477                           
 18478                           ;Dimmer_B1.c: 18: {
 18479                           ;Dimmer_B1.c: 19: DimmerLights=&DimmerLights2;
 18480  25BF  303B               	movlw	_DimmerLights2& (0+255)
 18481  25C0  00A0               	movwf	??_DimmerLightsPointSelect
 18482  25C1  0820               	movf	??_DimmerLightsPointSelect,w
 18483  25C2  00EC               	movwf	_DimmerLights
 18484  25C3  0008               	return
 18485  25C4                     __end_of_DimmerLightsPointSelect:	
 18486                           
 18487                           	psect	text116
 18488  13EA                     __ptext116:	
 18489 ;; *************** function _setBuz *****************
 18490 ;; Defined at:
 18491 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18492 ;; Parameters:    Size  Location     Type
 18493 ;;  count           1    wreg     unsigned char 
 18494 ;;  time            2    6[BANK0 ] int 
 18495 ;; Auto vars:     Size  Location     Type
 18496 ;;  count           1    9[BANK0 ] unsigned char 
 18497 ;; Return value:  Size  Location     Type
 18498 ;;		None               void
 18499 ;; Registers used:
 18500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18501 ;; Tracked objects:
 18502 ;;		On entry : 0/0
 18503 ;;		On exit  : 0/0
 18504 ;;		Unchanged: 0/0
 18505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18506 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18509 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18510 ;;Total ram usage:        4 bytes
 18511 ;; Hardware stack levels used:    1
 18512 ;; Hardware stack levels required when called:    5
 18513 ;; This function calls:
 18514 ;;		___wmul
 18515 ;; This function is called by:
 18516 ;;		_DlyOff_Main
 18517 ;;		_setDimmerLights_Main
 18518 ;;		_DimmerLights_Exceptions
 18519 ;;		_MainT
 18520 ;;		_setOverTemp_Exceptions
 18521 ;;		_setLog_Code
 18522 ;;		_setControl_Lights_Table
 18523 ;;		_setRFSW_Control
 18524 ;;		_setSw_Main
 18525 ;; This function uses a non-reentrant model
 18526 ;;
 18527                           
 18528                           
 18529                           ;psect for function _setBuz
 18530  13EA                     _setBuz:	
 18531                           
 18532                           ;incstack = 0
 18533                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18534                           ;setBuz@count stored from wreg
 18535  13EA  0020               	movlb	0	; select bank0
 18536  13EB  00A9               	movwf	setBuz@count
 18537                           
 18538                           ;Buzzer_B1.c: 24: time*=20;
 18539  13EC  3014               	movlw	20
 18540  13ED  00A0               	movwf	___wmul@multiplier
 18541  13EE  3000               	movlw	0
 18542  13EF  00A1               	movwf	___wmul@multiplier+1
 18543  13F0  0827               	movf	setBuz@time+1,w
 18544  13F1  01A3               	clrf	___wmul@multiplicand+1
 18545  13F2  07A3               	addwf	___wmul@multiplicand+1,f
 18546  13F3  0826               	movf	setBuz@time,w
 18547  13F4  01A2               	clrf	___wmul@multiplicand
 18548  13F5  07A2               	addwf	___wmul@multiplicand,f
 18549  13F6  31A7  275F  3193   	fcall	___wmul
 18550  13F9  0020               	movlb	0	; select bank0
 18551  13FA  0821               	movf	?___wmul+1,w
 18552  13FB  01A7               	clrf	setBuz@time+1
 18553  13FC  07A7               	addwf	setBuz@time+1,f
 18554  13FD  0820               	movf	?___wmul,w
 18555  13FE  01A6               	clrf	setBuz@time
 18556  13FF  07A6               	addwf	setBuz@time,f
 18557                           
 18558                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18559  1400  0878               	movf	_Buz,w
 18560  1401  0086               	movwf	6
 18561  1402  3001               	movlw	1	; select bank2/3
 18562  1403  0087               	movwf	7
 18563  1404  1C01               	btfss	1,0
 18564  1405  0008               	return
 18565                           
 18566                           ;Buzzer_B1.c: 26: {
 18567                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18568  1406  0878               	movf	_Buz,w
 18569  1407  0086               	movwf	6
 18570  1408  3001               	movlw	1	; select bank2/3
 18571  1409  0087               	movwf	7
 18572  140A  1881               	btfsc	1,1
 18573  140B  2C25               	goto	l8682
 18574                           
 18575                           ;Buzzer_B1.c: 28: {
 18576                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18577  140C  0878               	movf	_Buz,w
 18578  140D  0086               	movwf	6
 18579  140E  3001               	movlw	1	; select bank2/3
 18580  140F  0087               	movwf	7
 18581  1410  1481               	bsf	1,1
 18582                           
 18583                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18584  1411  0829               	movf	setBuz@count,w
 18585  1412  00A8               	movwf	??_setBuz
 18586  1413  0878               	movf	_Buz,w
 18587  1414  3E03               	addlw	3
 18588  1415  0086               	movwf	6
 18589  1416  3001               	movlw	1	; select bank2/3
 18590  1417  0087               	movwf	7
 18591  1418  0828               	movf	??_setBuz,w
 18592  1419  0081               	movwf	1
 18593                           
 18594                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18595  141A  0878               	movf	_Buz,w
 18596  141B  3E06               	addlw	6
 18597  141C  0086               	movwf	6
 18598  141D  3001               	movlw	1	; select bank2/3
 18599  141E  0087               	movwf	7
 18600  141F  0826               	movf	setBuz@time,w
 18601  1420  3FC0               	movwi [0]fsr1
 18602  1421  0827               	movf	setBuz@time+1,w
 18603  1422  3FC1               	movwi [1]fsr1
 18604                           
 18605                           ;Buzzer_B1.c: 33: RB3=1;
 18606  1423  158D               	bsf	13,3	;volatile
 18607                           
 18608                           ;Buzzer_B1.c: 34: }
 18609  1424  0008               	return
 18610  1425                     l8682:	
 18611                           
 18612                           ;Buzzer_B1.c: 35: else
 18613                           ;Buzzer_B1.c: 36: {
 18614                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18615  1425  0878               	movf	_Buz,w
 18616  1426  0086               	movwf	6
 18617  1427  3001               	movlw	1	; select bank2/3
 18618  1428  0087               	movwf	7
 18619  1429  1981               	btfsc	1,3
 18620  142A  2C43               	goto	l8686
 18621                           
 18622                           ;Buzzer_B1.c: 38: {
 18623                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18624  142B  0878               	movf	_Buz,w
 18625  142C  0086               	movwf	6
 18626  142D  3001               	movlw	1	; select bank2/3
 18627  142E  0087               	movwf	7
 18628  142F  1581               	bsf	1,3
 18629                           
 18630                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18631  1430  0829               	movf	setBuz@count,w
 18632  1431  00A8               	movwf	??_setBuz
 18633  1432  0878               	movf	_Buz,w
 18634  1433  3E04               	addlw	4
 18635  1434  0086               	movwf	6
 18636  1435  3001               	movlw	1	; select bank2/3
 18637  1436  0087               	movwf	7
 18638  1437  0828               	movf	??_setBuz,w
 18639  1438  0081               	movwf	1
 18640                           
 18641                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18642  1439  0878               	movf	_Buz,w
 18643  143A  3E08               	addlw	8
 18644  143B  0086               	movwf	6
 18645  143C  3001               	movlw	1	; select bank2/3
 18646  143D  0087               	movwf	7
 18647  143E  0826               	movf	setBuz@time,w
 18648  143F  3FC0               	movwi [0]fsr1
 18649  1440  0827               	movf	setBuz@time+1,w
 18650  1441  3FC1               	movwi [1]fsr1
 18651                           
 18652                           ;Buzzer_B1.c: 42: }
 18653  1442  0008               	return
 18654  1443                     l8686:	
 18655                           
 18656                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18657  1443  0878               	movf	_Buz,w
 18658  1444  0086               	movwf	6
 18659  1445  3001               	movlw	1	; select bank2/3
 18660  1446  0087               	movwf	7
 18661  1447  1A01               	btfsc	1,4
 18662  1448  0008               	return
 18663                           
 18664                           ;Buzzer_B1.c: 44: {
 18665                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18666  1449  0878               	movf	_Buz,w
 18667  144A  0086               	movwf	6
 18668  144B  3001               	movlw	1	; select bank2/3
 18669  144C  0087               	movwf	7
 18670  144D  1601               	bsf	1,4
 18671                           
 18672                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18673  144E  0829               	movf	setBuz@count,w
 18674  144F  00A8               	movwf	??_setBuz
 18675  1450  0878               	movf	_Buz,w
 18676  1451  3E05               	addlw	5
 18677  1452  0086               	movwf	6
 18678  1453  3001               	movlw	1	; select bank2/3
 18679  1454  0087               	movwf	7
 18680  1455  0828               	movf	??_setBuz,w
 18681  1456  0081               	movwf	1
 18682                           
 18683                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18684  1457  0878               	movf	_Buz,w
 18685  1458  3E0A               	addlw	10
 18686  1459  0086               	movwf	6
 18687  145A  3001               	movlw	1	; select bank2/3
 18688  145B  0087               	movwf	7
 18689  145C  0826               	movf	setBuz@time,w
 18690  145D  3FC0               	movwi [0]fsr1
 18691  145E  0827               	movf	setBuz@time+1,w
 18692  145F  3FC1               	movwi [1]fsr1
 18693  1460  0008               	return
 18694  1461                     __end_of_setBuz:	
 18695                           
 18696                           	psect	text117
 18697  275F                     __ptext117:	
 18698 ;; *************** function ___wmul *****************
 18699 ;; Defined at:
 18700 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18703 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18704 ;; Auto vars:     Size  Location     Type
 18705 ;;  product         2    4[BANK0 ] unsigned int 
 18706 ;; Return value:  Size  Location     Type
 18707 ;;                  2    0[BANK0 ] unsigned int 
 18708 ;; Registers used:
 18709 ;;		wreg, status,2, status,0
 18710 ;; Tracked objects:
 18711 ;;		On entry : 0/0
 18712 ;;		On exit  : 0/0
 18713 ;;		Unchanged: 0/0
 18714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18719 ;;Total ram usage:        6 bytes
 18720 ;; Hardware stack levels used:    1
 18721 ;; Hardware stack levels required when called:    4
 18722 ;; This function calls:
 18723 ;;		Nothing
 18724 ;; This function is called by:
 18725 ;;		_setBuz
 18726 ;;		_Load_Main
 18727 ;; This function uses a non-reentrant model
 18728 ;;
 18729                           
 18730                           
 18731                           ;psect for function ___wmul
 18732  275F                     ___wmul:	
 18733                           
 18734                           ;incstack = 0
 18735                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18736  275F  0020               	movlb	0	; select bank0
 18737  2760  01A4               	clrf	___wmul@product
 18738  2761  01A5               	clrf	___wmul@product+1
 18739  2762                     l8662:	
 18740  2762  1C20               	btfss	___wmul@multiplier,0
 18741  2763  2F68               	goto	l3241
 18742  2764  0822               	movf	___wmul@multiplicand,w
 18743  2765  07A4               	addwf	___wmul@product,f
 18744  2766  0823               	movf	___wmul@multiplicand+1,w
 18745  2767  3DA5               	addwfc	___wmul@product+1,f
 18746  2768                     l3241:	
 18747  2768  3001               	movlw	1
 18748  2769                     u8205:	
 18749  2769  35A2               	lslf	___wmul@multiplicand,f
 18750  276A  0DA3               	rlf	___wmul@multiplicand+1,f
 18751  276B  0B89               	decfsz	9,f
 18752  276C  2F69               	goto	u8205
 18753  276D  3001               	movlw	1
 18754  276E                     u8215:	
 18755  276E  36A1               	lsrf	___wmul@multiplier+1,f
 18756  276F  0CA0               	rrf	___wmul@multiplier,f
 18757  2770  0B89               	decfsz	9,f
 18758  2771  2F6E               	goto	u8215
 18759  2772  0821               	movf	___wmul@multiplier+1,w
 18760  2773  0420               	iorwf	___wmul@multiplier,w
 18761  2774  1D03               	skipz
 18762  2775  2F62               	goto	l8662
 18763  2776  0825               	movf	___wmul@product+1,w
 18764  2777  01A1               	clrf	?___wmul+1
 18765  2778  07A1               	addwf	?___wmul+1,f
 18766  2779  0824               	movf	___wmul@product,w
 18767  277A  01A0               	clrf	?___wmul
 18768  277B  07A0               	addwf	?___wmul,f
 18769  277C  0008               	return
 18770  277D                     __end_of___wmul:	
 18771                           
 18772                           	psect	text118
 18773  23C3                     __ptext118:	
 18774 ;; *************** function _DelayOff_Initialization *****************
 18775 ;; Defined at:
 18776 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18777 ;; Parameters:    Size  Location     Type
 18778 ;;		None
 18779 ;; Auto vars:     Size  Location     Type
 18780 ;;		None
 18781 ;; Return value:  Size  Location     Type
 18782 ;;		None               void
 18783 ;; Registers used:
 18784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18785 ;; Tracked objects:
 18786 ;;		On entry : 0/0
 18787 ;;		On exit  : 0/0
 18788 ;;		Unchanged: 0/0
 18789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18794 ;;Total ram usage:        0 bytes
 18795 ;; Hardware stack levels used:    1
 18796 ;; Hardware stack levels required when called:    6
 18797 ;; This function calls:
 18798 ;;		_DlyOff_Initialization
 18799 ;; This function is called by:
 18800 ;;		_main
 18801 ;; This function uses a non-reentrant model
 18802 ;;
 18803                           
 18804                           
 18805                           ;psect for function _DelayOff_Initialization
 18806  23C3                     _DelayOff_Initialization:	
 18807                           
 18808                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18809                           
 18810                           ;incstack = 0
 18811                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18812  23C3  3001               	movlw	1
 18813  23C4  31A4  2412  31A3   	fcall	_DlyOff_Initialization
 18814                           
 18815                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 18816  23C7  3002               	movlw	2
 18817  23C8  31A4  2412         	fcall	_DlyOff_Initialization
 18818  23CA  0008               	return
 18819  23CB                     __end_of_DelayOff_Initialization:	
 18820                           
 18821                           	psect	text119
 18822  2412                     __ptext119:	
 18823 ;; *************** function _DlyOff_Initialization *****************
 18824 ;; Defined at:
 18825 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18826 ;; Parameters:    Size  Location     Type
 18827 ;;  sw              1    wreg     unsigned char 
 18828 ;; Auto vars:     Size  Location     Type
 18829 ;;  sw              1    2[BANK0 ] unsigned char 
 18830 ;; Return value:  Size  Location     Type
 18831 ;;		None               void
 18832 ;; Registers used:
 18833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18834 ;; Tracked objects:
 18835 ;;		On entry : 0/0
 18836 ;;		On exit  : 0/0
 18837 ;;		Unchanged: 0/0
 18838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18843 ;;Total ram usage:        1 bytes
 18844 ;; Hardware stack levels used:    1
 18845 ;; Hardware stack levels required when called:    5
 18846 ;; This function calls:
 18847 ;;		_DelayOffPointSelect
 18848 ;; This function is called by:
 18849 ;;		_DelayOff_Initialization
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           
 18854                           ;psect for function _DlyOff_Initialization
 18855  2412                     _DlyOff_Initialization:	
 18856                           
 18857                           ;incstack = 0
 18858                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18859                           ;DlyOff_Initialization@sw stored from wreg
 18860  2412  0020               	movlb	0	; select bank0
 18861  2413  00A2               	movwf	DlyOff_Initialization@sw
 18862                           
 18863                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18864  2414  0822               	movf	DlyOff_Initialization@sw,w
 18865  2415  31A6  2643         	fcall	_DelayOffPointSelect
 18866                           
 18867                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18868  2417  0021               	movlb	1	; select bank1
 18869  2418  0838               	movf	_DelayOff^(0+128),w
 18870  2419  0086               	movwf	6
 18871  241A  0187               	clrf	7
 18872  241B  1401               	bsf	1,0
 18873  241C  0008               	return
 18874  241D                     __end_of_DlyOff_Initialization:	
 18875                           
 18876                           	psect	text120
 18877  2643                     __ptext120:	
 18878 ;; *************** function _DelayOffPointSelect *****************
 18879 ;; Defined at:
 18880 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18881 ;; Parameters:    Size  Location     Type
 18882 ;;  sw              1    wreg     unsigned char 
 18883 ;; Auto vars:     Size  Location     Type
 18884 ;;  sw              1    1[BANK0 ] unsigned char 
 18885 ;; Return value:  Size  Location     Type
 18886 ;;		None               void
 18887 ;; Registers used:
 18888 ;;		wreg
 18889 ;; Tracked objects:
 18890 ;;		On entry : 0/0
 18891 ;;		On exit  : 0/0
 18892 ;;		Unchanged: 0/0
 18893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;Total ram usage:        2 bytes
 18899 ;; Hardware stack levels used:    1
 18900 ;; Hardware stack levels required when called:    4
 18901 ;; This function calls:
 18902 ;;		Nothing
 18903 ;; This function is called by:
 18904 ;;		_DlyOff_Initialization
 18905 ;;		_DlyOff_Main
 18906 ;;		_setDelayOff_GO
 18907 ;; This function uses a non-reentrant model
 18908 ;;
 18909                           
 18910                           
 18911                           ;psect for function _DelayOffPointSelect
 18912  2643                     _DelayOffPointSelect:	
 18913                           
 18914                           ;incstack = 0
 18915                           ; Regs used in _DelayOffPointSelect: [wreg]
 18916                           ;DelayOffPointSelect@sw stored from wreg
 18917  2643  0020               	movlb	0	; select bank0
 18918  2644  00A1               	movwf	DelayOffPointSelect@sw
 18919                           
 18920                           ;DelayOff_B1.c: 11: if(sw == 1)
 18921  2645  0821               	movf	DelayOffPointSelect@sw,w
 18922  2646  3A01               	xorlw	1
 18923  2647  1D03               	skipz
 18924  2648  2E4F               	goto	l6416
 18925                           
 18926                           ;DelayOff_B1.c: 12: {
 18927                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18928  2649  30CB               	movlw	_DlySw1& (0+255)
 18929  264A  00A0               	movwf	??_DelayOffPointSelect
 18930  264B  0820               	movf	??_DelayOffPointSelect,w
 18931  264C  0021               	movlb	1	; select bank1
 18932  264D  00B8               	movwf	_DelayOff^(0+128)
 18933                           
 18934                           ;DelayOff_B1.c: 14: }
 18935  264E  0008               	return
 18936  264F                     l6416:	
 18937                           
 18938                           ;DelayOff_B1.c: 17: else if(sw == 2)
 18939  264F  0020               	movlb	0	; select bank0
 18940  2650  0821               	movf	DelayOffPointSelect@sw,w
 18941  2651  3A02               	xorlw	2
 18942  2652  1D03               	skipz
 18943  2653  0008               	return
 18944                           
 18945                           ;DelayOff_B1.c: 18: {
 18946                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 18947  2654  30D0               	movlw	_DlySw2& (0+255)
 18948  2655  00A0               	movwf	??_DelayOffPointSelect
 18949  2656  0820               	movf	??_DelayOffPointSelect,w
 18950  2657  0021               	movlb	1	; select bank1
 18951  2658  00B8               	movwf	_DelayOff^(0+128)
 18952  2659  0008               	return
 18953  265A                     __end_of_DelayOffPointSelect:	
 18954                           
 18955                           	psect	text121
 18956  25D8                     __ptext121:	
 18957 ;; *************** function _CC2500_PowerOnInitial *****************
 18958 ;; Defined at:
 18959 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18960 ;; Parameters:    Size  Location     Type
 18961 ;;		None
 18962 ;; Auto vars:     Size  Location     Type
 18963 ;;		None
 18964 ;; Return value:  Size  Location     Type
 18965 ;;		None               void
 18966 ;; Registers used:
 18967 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18968 ;; Tracked objects:
 18969 ;;		On entry : 0/0
 18970 ;;		On exit  : 0/0
 18971 ;;		Unchanged: 0/0
 18972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;Total ram usage:        0 bytes
 18978 ;; Hardware stack levels used:    1
 18979 ;; Hardware stack levels required when called:    7
 18980 ;; This function calls:
 18981 ;;		_CC2500_ClearRXFIFO
 18982 ;;		_CC2500_ClearTXFIFO
 18983 ;;		_CC2500_FrequencyCabr
 18984 ;;		_CC2500_InitPATable
 18985 ;;		_CC2500_InitSetREG
 18986 ;;		_CC2500_PowerRST
 18987 ;;		_CC2500_SIDLEMode
 18988 ;; This function is called by:
 18989 ;;		_main
 18990 ;; This function uses a non-reentrant model
 18991 ;;
 18992                           
 18993                           
 18994                           ;psect for function _CC2500_PowerOnInitial
 18995  25D8                     _CC2500_PowerOnInitial:	
 18996                           
 18997                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 18998                           
 18999                           ;incstack = 0
 19000                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19001  25D8  3199  21DC  31A5   	fcall	_CC2500_PowerRST
 19002                           
 19003                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19004  25DB  3199  2159  31A5   	fcall	_CC2500_InitSetREG
 19005                           
 19006                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19007  25DE  31A7  277D  31A5   	fcall	_CC2500_InitPATable
 19008                           
 19009                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19010  25E1  31A3  2389  31A5   	fcall	_CC2500_ClearTXFIFO
 19011                           
 19012                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19013  25E4  31A3  2385  31A5   	fcall	_CC2500_ClearRXFIFO
 19014                           
 19015                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19016  25E7  31A4  2482  31A5   	fcall	_CC2500_FrequencyCabr
 19017                           
 19018                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19019  25EA  31A3  238D         	fcall	_CC2500_SIDLEMode
 19020  25EC  0008               	return
 19021  25ED                     __end_of_CC2500_PowerOnInitial:	
 19022                           
 19023                           	psect	text122
 19024  238D                     __ptext122:	
 19025 ;; *************** function _CC2500_SIDLEMode *****************
 19026 ;; Defined at:
 19027 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19028 ;; Parameters:    Size  Location     Type
 19029 ;;		None
 19030 ;; Auto vars:     Size  Location     Type
 19031 ;;		None
 19032 ;; Return value:  Size  Location     Type
 19033 ;;		None               void
 19034 ;; Registers used:
 19035 ;;		wreg, status,2, status,0, pclath, cstack
 19036 ;; Tracked objects:
 19037 ;;		On entry : 0/0
 19038 ;;		On exit  : 0/0
 19039 ;;		Unchanged: 0/0
 19040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;Total ram usage:        0 bytes
 19046 ;; Hardware stack levels used:    1
 19047 ;; Hardware stack levels required when called:    6
 19048 ;; This function calls:
 19049 ;;		_CC2500_WriteCommand
 19050 ;; This function is called by:
 19051 ;;		_CC2500_PowerOnInitial
 19052 ;; This function uses a non-reentrant model
 19053 ;;
 19054                           
 19055                           
 19056                           ;psect for function _CC2500_SIDLEMode
 19057  238D                     _CC2500_SIDLEMode:	
 19058                           
 19059                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19060                           
 19061                           ;incstack = 0
 19062                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19063  238D  3036               	movlw	54
 19064  238E  31A5  2520         	fcall	_CC2500_WriteCommand
 19065  2390  0008               	return
 19066  2391                     __end_of_CC2500_SIDLEMode:	
 19067                           
 19068                           	psect	text123
 19069  19DC                     __ptext123:	
 19070 ;; *************** function _CC2500_PowerRST *****************
 19071 ;; Defined at:
 19072 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19073 ;; Parameters:    Size  Location     Type
 19074 ;;		None
 19075 ;; Auto vars:     Size  Location     Type
 19076 ;;		None
 19077 ;; Return value:  Size  Location     Type
 19078 ;;		None               void
 19079 ;; Registers used:
 19080 ;;		wreg, status,2, status,0, pclath, cstack
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;Total ram usage:        1 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    5
 19093 ;; This function calls:
 19094 ;;		_CC2500_WriteByte
 19095 ;;		_DelayTime_1us
 19096 ;; This function is called by:
 19097 ;;		_CC2500_PowerOnInitial
 19098 ;; This function uses a non-reentrant model
 19099 ;;
 19100                           
 19101                           
 19102                           ;psect for function _CC2500_PowerRST
 19103  19DC                     _CC2500_PowerRST:	
 19104                           
 19105                           ;CC2500_B1.c: 112: RC1=0;
 19106                           
 19107                           ;incstack = 0
 19108                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19109  19DC  0020               	movlb	0	; select bank0
 19110  19DD  108E               	bcf	14,1	;volatile
 19111                           
 19112                           ;CC2500_B1.c: 113: RC0=0;
 19113  19DE  100E               	bcf	14,0	;volatile
 19114                           
 19115                           ;CC2500_B1.c: 114: RC4=1;
 19116  19DF  160E               	bsf	14,4	;volatile
 19117                           
 19118                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19119  19E0  300A               	movlw	10
 19120  19E1  00A0               	movwf	DelayTime_1us@count
 19121  19E2  3000               	movlw	0
 19122  19E3  00A1               	movwf	DelayTime_1us@count+1
 19123  19E4  3198  20E6  3199   	fcall	_DelayTime_1us
 19124                           
 19125                           ;CC2500_B1.c: 116: RC4=0;
 19126  19E7  0020               	movlb	0	; select bank0
 19127  19E8  120E               	bcf	14,4	;volatile
 19128                           
 19129                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19130  19E9  300A               	movlw	10
 19131  19EA  00A0               	movwf	DelayTime_1us@count
 19132  19EB  3000               	movlw	0
 19133  19EC  00A1               	movwf	DelayTime_1us@count+1
 19134  19ED  3198  20E6  3199   	fcall	_DelayTime_1us
 19135                           
 19136                           ;CC2500_B1.c: 118: RC4=1;
 19137  19F0  0020               	movlb	0	; select bank0
 19138  19F1  160E               	bsf	14,4	;volatile
 19139                           
 19140                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19141  19F2  3028               	movlw	40
 19142  19F3  00A0               	movwf	DelayTime_1us@count
 19143  19F4  3000               	movlw	0
 19144  19F5  00A1               	movwf	DelayTime_1us@count+1
 19145  19F6  3198  20E6  3199   	fcall	_DelayTime_1us
 19146                           
 19147                           ;CC2500_B1.c: 120: RC4=0;
 19148  19F9  0020               	movlb	0	; select bank0
 19149  19FA  120E               	bcf	14,4	;volatile
 19150                           
 19151                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19152  19FB  3030               	movlw	48
 19153  19FC  00A6               	movwf	??_CC2500_PowerRST
 19154  19FD  0826               	movf	??_CC2500_PowerRST,w
 19155  19FE  0021               	movlb	1	; select bank1
 19156  19FF  00BF               	movwf	_SPI0Buffer^(0+128)
 19157  1A00                     l340:	
 19158                           ;CC2500_B1.c: 122: while(RC2==1);
 19159                           
 19160  1A00  0020               	movlb	0	; select bank0
 19161  1A01  190E               	btfsc	14,2	;volatile
 19162  1A02  2A00               	goto	l340
 19163                           
 19164                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19165  1A03  31A6  2672  3199   	fcall	_CC2500_WriteByte
 19166  1A06                     l343:	
 19167                           ;CC2500_B1.c: 124: while(RC2==1);
 19168                           
 19169  1A06  0020               	movlb	0	; select bank0
 19170  1A07  190E               	btfsc	14,2	;volatile
 19171  1A08  2A06               	goto	l343
 19172                           
 19173                           ;CC2500_B1.c: 125: RC0=0;
 19174  1A09  100E               	bcf	14,0	;volatile
 19175                           
 19176                           ;CC2500_B1.c: 126: RC4=1;
 19177  1A0A  160E               	bsf	14,4	;volatile
 19178  1A0B  0008               	return
 19179  1A0C                     __end_of_CC2500_PowerRST:	
 19180                           
 19181                           	psect	text124
 19182  1959                     __ptext124:	
 19183 ;; *************** function _CC2500_InitSetREG *****************
 19184 ;; Defined at:
 19185 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19186 ;; Parameters:    Size  Location     Type
 19187 ;;		None
 19188 ;; Auto vars:     Size  Location     Type
 19189 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19190 ;;  temp2           1    7[BANK0 ] unsigned char 
 19191 ;;  temp1           1    6[BANK0 ] unsigned char 
 19192 ;; Return value:  Size  Location     Type
 19193 ;;		None               void
 19194 ;; Registers used:
 19195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19196 ;; Tracked objects:
 19197 ;;		On entry : 0/0
 19198 ;;		On exit  : 0/0
 19199 ;;		Unchanged: 0/0
 19200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19202 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19204 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19205 ;;Total ram usage:        4 bytes
 19206 ;; Hardware stack levels used:    1
 19207 ;; Hardware stack levels required when called:    6
 19208 ;; This function calls:
 19209 ;;		_CC2500_WriteREG
 19210 ;; This function is called by:
 19211 ;;		_CC2500_PowerOnInitial
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           
 19216                           ;psect for function _CC2500_InitSetREG
 19217  1959                     _CC2500_InitSetREG:	
 19218                           
 19219                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19220                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19221                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19222                           
 19223                           ;incstack = 0
 19224                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19225  1959  0020               	movlb	0	; select bank0
 19226  195A  01A8               	clrf	CC2500_InitSetREG@loop_c
 19227  195B                     L15:	
 19228  195B  302F               	movlw	47
 19229  195C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19230  195D  1803               	btfsc	3,0
 19231  195E  0008               	return
 19232                           
 19233                           ;CC2500_B1.c: 137: {
 19234                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19235  195F  0828               	movf	CC2500_InitSetREG@loop_c,w
 19236  1960  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19237  1961  0084               	movwf	4
 19238  1962  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19239  1963  1803               	skipnc
 19240  1964  3E01               	addlw	1
 19241  1965  0085               	movwf	5
 19242  1966  0800               	movf	0,w	;code access
 19243  1967  00A5               	movwf	??_CC2500_InitSetREG
 19244  1968  0825               	movf	??_CC2500_InitSetREG,w
 19245  1969  00A6               	movwf	CC2500_InitSetREG@temp1
 19246                           
 19247                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19248  196A  0828               	movf	CC2500_InitSetREG@loop_c,w
 19249  196B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19250  196C  0084               	movwf	4
 19251  196D  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19252  196E  1803               	skipnc
 19253  196F  3E01               	addlw	1
 19254  1970  0085               	movwf	5
 19255  1971  0800               	movf	0,w	;code access
 19256  1972  00A5               	movwf	??_CC2500_InitSetREG
 19257  1973  0825               	movf	??_CC2500_InitSetREG,w
 19258  1974  00A7               	movwf	CC2500_InitSetREG@temp2
 19259                           
 19260                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19261  1975  0827               	movf	CC2500_InitSetREG@temp2,w
 19262  1976  00A5               	movwf	??_CC2500_InitSetREG
 19263  1977  0825               	movf	??_CC2500_InitSetREG,w
 19264  1978  00A2               	movwf	CC2500_WriteREG@value
 19265  1979  0826               	movf	CC2500_InitSetREG@temp1,w
 19266  197A  31A6  268B  3199   	fcall	_CC2500_WriteREG
 19267  197D  3001               	movlw	1
 19268  197E  0020               	movlb	0	; select bank0
 19269  197F  00A5               	movwf	??_CC2500_InitSetREG
 19270  1980  0825               	movf	??_CC2500_InitSetREG,w
 19271  1981  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19272  1982  295B               	goto	L15
 19273  1983                     __end_of_CC2500_InitSetREG:	
 19274                           
 19275                           	psect	text125
 19276  277D                     __ptext125:	
 19277 ;; *************** function _CC2500_InitPATable *****************
 19278 ;; Defined at:
 19279 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19280 ;; Parameters:    Size  Location     Type
 19281 ;;		None
 19282 ;; Auto vars:     Size  Location     Type
 19283 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19284 ;;  temp            1    6[BANK0 ] unsigned char 
 19285 ;; Return value:  Size  Location     Type
 19286 ;;		None               void
 19287 ;; Registers used:
 19288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19289 ;; Tracked objects:
 19290 ;;		On entry : 0/0
 19291 ;;		On exit  : 0/0
 19292 ;;		Unchanged: 0/0
 19293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19297 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19298 ;;Total ram usage:        3 bytes
 19299 ;; Hardware stack levels used:    1
 19300 ;; Hardware stack levels required when called:    6
 19301 ;; This function calls:
 19302 ;;		_CC2500_WriteREG
 19303 ;; This function is called by:
 19304 ;;		_CC2500_PowerOnInitial
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           
 19309                           ;psect for function _CC2500_InitPATable
 19310  277D                     _CC2500_InitPATable:	
 19311                           
 19312                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19313                           ;CC2500_B1.c: 150: unsigned char temp;
 19314                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19315                           
 19316                           ;incstack = 0
 19317                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19318  277D  0020               	movlb	0	; select bank0
 19319  277E  01A7               	clrf	CC2500_InitPATable@loop_d
 19320  277F                     L16:	
 19321  277F  3008               	movlw	8
 19322  2780  0227               	subwf	CC2500_InitPATable@loop_d,w
 19323  2781  1803               	btfsc	3,0
 19324  2782  0008               	return
 19325                           
 19326                           ;CC2500_B1.c: 153: {
 19327                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19328  2783  0827               	movf	CC2500_InitPATable@loop_d,w
 19329  2784  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19330  2785  0084               	movwf	4
 19331  2786  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19332  2787  1803               	skipnc
 19333  2788  3E01               	addlw	1
 19334  2789  0085               	movwf	5
 19335  278A  0800               	movf	0,w	;code access
 19336  278B  00A5               	movwf	??_CC2500_InitPATable
 19337  278C  0825               	movf	??_CC2500_InitPATable,w
 19338  278D  00A6               	movwf	CC2500_InitPATable@temp
 19339                           
 19340                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19341  278E  0826               	movf	CC2500_InitPATable@temp,w
 19342  278F  00A5               	movwf	??_CC2500_InitPATable
 19343  2790  0825               	movf	??_CC2500_InitPATable,w
 19344  2791  00A2               	movwf	CC2500_WriteREG@value
 19345  2792  303E               	movlw	62
 19346  2793  31A6  268B  31A7   	fcall	_CC2500_WriteREG
 19347  2796  3001               	movlw	1
 19348  2797  0020               	movlb	0	; select bank0
 19349  2798  00A5               	movwf	??_CC2500_InitPATable
 19350  2799  0825               	movf	??_CC2500_InitPATable,w
 19351  279A  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19352  279B  2F7F               	goto	L16
 19353  279C                     __end_of_CC2500_InitPATable:	
 19354                           
 19355                           	psect	text126
 19356  268B                     __ptext126:	
 19357 ;; *************** function _CC2500_WriteREG *****************
 19358 ;; Defined at:
 19359 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19360 ;; Parameters:    Size  Location     Type
 19361 ;;  w_addr          1    wreg     unsigned char 
 19362 ;;  value           1    2[BANK0 ] unsigned char 
 19363 ;; Auto vars:     Size  Location     Type
 19364 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19365 ;; Return value:  Size  Location     Type
 19366 ;;		None               void
 19367 ;; Registers used:
 19368 ;;		wreg, status,2, status,0, pclath, cstack
 19369 ;; Tracked objects:
 19370 ;;		On entry : 0/0
 19371 ;;		On exit  : 0/0
 19372 ;;		Unchanged: 0/0
 19373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19374 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19378 ;;Total ram usage:        3 bytes
 19379 ;; Hardware stack levels used:    1
 19380 ;; Hardware stack levels required when called:    5
 19381 ;; This function calls:
 19382 ;;		_CC2500_WriteByte
 19383 ;; This function is called by:
 19384 ;;		_CC2500_InitSetREG
 19385 ;;		_CC2500_InitPATable
 19386 ;; This function uses a non-reentrant model
 19387 ;;
 19388                           
 19389                           
 19390                           ;psect for function _CC2500_WriteREG
 19391  268B                     _CC2500_WriteREG:	
 19392                           
 19393                           ;incstack = 0
 19394                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19395                           ;CC2500_WriteREG@w_addr stored from wreg
 19396  268B  0020               	movlb	0	; select bank0
 19397  268C  00A4               	movwf	CC2500_WriteREG@w_addr
 19398                           
 19399                           ;CC2500_B1.c: 229: RC4=0;
 19400  268D  120E               	bcf	14,4	;volatile
 19401                           
 19402                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19403  268E  0824               	movf	CC2500_WriteREG@w_addr,w
 19404  268F  00A3               	movwf	??_CC2500_WriteREG
 19405  2690  0823               	movf	??_CC2500_WriteREG,w
 19406  2691  0021               	movlb	1	; select bank1
 19407  2692  00BF               	movwf	_SPI0Buffer^(0+128)
 19408  2693                     l385:	
 19409                           ;CC2500_B1.c: 231: while(RC2==1);
 19410                           
 19411  2693  0020               	movlb	0	; select bank0
 19412  2694  190E               	btfsc	14,2	;volatile
 19413  2695  2E93               	goto	l385
 19414                           
 19415                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19416  2696  31A6  2672  31A6   	fcall	_CC2500_WriteByte
 19417                           
 19418                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19419  2699  0020               	movlb	0	; select bank0
 19420  269A  0822               	movf	CC2500_WriteREG@value,w
 19421  269B  00A3               	movwf	??_CC2500_WriteREG
 19422  269C  0823               	movf	??_CC2500_WriteREG,w
 19423  269D  0021               	movlb	1	; select bank1
 19424  269E  00BF               	movwf	_SPI0Buffer^(0+128)
 19425                           
 19426                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19427  269F  31A6  2672         	fcall	_CC2500_WriteByte
 19428                           
 19429                           ;CC2500_B1.c: 235: RC4=1;
 19430  26A1  0020               	movlb	0	; select bank0
 19431  26A2  160E               	bsf	14,4	;volatile
 19432  26A3  0008               	return
 19433  26A4                     __end_of_CC2500_WriteREG:	
 19434                           
 19435                           	psect	text127
 19436  2482                     __ptext127:	
 19437 ;; *************** function _CC2500_FrequencyCabr *****************
 19438 ;; Defined at:
 19439 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19440 ;; Parameters:    Size  Location     Type
 19441 ;;		None
 19442 ;; Auto vars:     Size  Location     Type
 19443 ;;		None
 19444 ;; Return value:  Size  Location     Type
 19445 ;;		None               void
 19446 ;; Registers used:
 19447 ;;		wreg, status,2, status,0, pclath, cstack
 19448 ;; Tracked objects:
 19449 ;;		On entry : 0/0
 19450 ;;		On exit  : 0/0
 19451 ;;		Unchanged: 0/0
 19452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19457 ;;Total ram usage:        0 bytes
 19458 ;; Hardware stack levels used:    1
 19459 ;; Hardware stack levels required when called:    6
 19460 ;; This function calls:
 19461 ;;		_CC2500_WriteCommand
 19462 ;;		_DelayTime_1us
 19463 ;; This function is called by:
 19464 ;;		_CC2500_PowerOnInitial
 19465 ;; This function uses a non-reentrant model
 19466 ;;
 19467                           
 19468                           
 19469                           ;psect for function _CC2500_FrequencyCabr
 19470  2482                     _CC2500_FrequencyCabr:	
 19471                           
 19472                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19473                           
 19474                           ;incstack = 0
 19475                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19476  2482  3033               	movlw	51
 19477  2483  31A5  2520  31A4   	fcall	_CC2500_WriteCommand
 19478                           
 19479                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19480  2486  30E8               	movlw	232
 19481  2487  0020               	movlb	0	; select bank0
 19482  2488  00A0               	movwf	DelayTime_1us@count
 19483  2489  3003               	movlw	3
 19484  248A  00A1               	movwf	DelayTime_1us@count+1
 19485  248B  3198  20E6         	fcall	_DelayTime_1us
 19486  248D  0008               	return
 19487  248E                     __end_of_CC2500_FrequencyCabr:	
 19488                           
 19489                           	psect	text128
 19490  18E6                     __ptext128:	
 19491 ;; *************** function _DelayTime_1us *****************
 19492 ;; Defined at:
 19493 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;  count           2    0[BANK0 ] int 
 19496 ;; Auto vars:     Size  Location     Type
 19497 ;;  j               2    4[BANK0 ] unsigned int 
 19498 ;;  i               2    2[BANK0 ] unsigned int 
 19499 ;; Return value:  Size  Location     Type
 19500 ;;		None               void
 19501 ;; Registers used:
 19502 ;;		wreg, status,2
 19503 ;; Tracked objects:
 19504 ;;		On entry : 0/0
 19505 ;;		On exit  : 0/0
 19506 ;;		Unchanged: 0/0
 19507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19508 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19509 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19512 ;;Total ram usage:        6 bytes
 19513 ;; Hardware stack levels used:    1
 19514 ;; Hardware stack levels required when called:    4
 19515 ;; This function calls:
 19516 ;;		Nothing
 19517 ;; This function is called by:
 19518 ;;		_CC2500_PowerRST
 19519 ;;		_CC2500_FrequencyCabr
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523                           
 19524                           ;psect for function _DelayTime_1us
 19525  18E6                     _DelayTime_1us:	
 19526                           
 19527                           ;CC2500_B1.c: 285: unsigned int i,j;
 19528                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19529                           
 19530                           ;incstack = 0
 19531                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19532  18E6  3001               	movlw	1
 19533  18E7  0020               	movlb	0	; select bank0
 19534  18E8  00A2               	movwf	DelayTime_1us@i
 19535  18E9  3000               	movlw	0
 19536  18EA  00A3               	movwf	DelayTime_1us@i+1
 19537  18EB                     l409:	
 19538  18EB  0821               	movf	DelayTime_1us@count+1,w
 19539  18EC  0223               	subwf	DelayTime_1us@i+1,w
 19540  18ED  1D03               	skipz
 19541  18EE  28F1               	goto	u8755
 19542  18EF  0820               	movf	DelayTime_1us@count,w
 19543  18F0  0222               	subwf	DelayTime_1us@i,w
 19544  18F1                     u8755:	
 19545  18F1  1803               	btfsc	3,0
 19546  18F2  0008               	return
 19547                           
 19548                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19549  18F3  01A4               	clrf	DelayTime_1us@j
 19550  18F4  01A5               	clrf	DelayTime_1us@j+1
 19551  18F5  3000               	movlw	0
 19552  18F6  0225               	subwf	DelayTime_1us@j+1,w
 19553  18F7  3002               	movlw	2
 19554  18F8  1903               	skipnz
 19555  18F9  0224               	subwf	DelayTime_1us@j,w
 19556  18FA  1803               	btfsc	3,0
 19557  18FB  2907               	goto	l9050
 19558  18FC                     l9048:	
 19559  18FC  3001               	movlw	1
 19560  18FD  07A4               	addwf	DelayTime_1us@j,f
 19561  18FE  3000               	movlw	0
 19562  18FF  3DA5               	addwfc	DelayTime_1us@j+1,f
 19563  1900  3000               	movlw	0
 19564  1901  0225               	subwf	DelayTime_1us@j+1,w
 19565  1902  3002               	movlw	2
 19566  1903  1903               	skipnz
 19567  1904  0224               	subwf	DelayTime_1us@j,w
 19568  1905  1C03               	skipc
 19569  1906  28FC               	goto	l9048
 19570  1907                     l9050:	
 19571  1907  3001               	movlw	1
 19572  1908  07A2               	addwf	DelayTime_1us@i,f
 19573  1909  3000               	movlw	0
 19574  190A  3DA3               	addwfc	DelayTime_1us@i+1,f
 19575  190B  28EB               	goto	l409
 19576  190C                     __end_of_DelayTime_1us:	
 19577                           
 19578                           	psect	text129
 19579  2389                     __ptext129:	
 19580 ;; *************** function _CC2500_ClearTXFIFO *****************
 19581 ;; Defined at:
 19582 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19583 ;; Parameters:    Size  Location     Type
 19584 ;;		None
 19585 ;; Auto vars:     Size  Location     Type
 19586 ;;		None
 19587 ;; Return value:  Size  Location     Type
 19588 ;;		None               void
 19589 ;; Registers used:
 19590 ;;		wreg, status,2, status,0, pclath, cstack
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19600 ;;Total ram usage:        0 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; Hardware stack levels required when called:    6
 19603 ;; This function calls:
 19604 ;;		_CC2500_WriteCommand
 19605 ;; This function is called by:
 19606 ;;		_CC2500_PowerOnInitial
 19607 ;; This function uses a non-reentrant model
 19608 ;;
 19609                           
 19610                           
 19611                           ;psect for function _CC2500_ClearTXFIFO
 19612  2389                     _CC2500_ClearTXFIFO:	
 19613                           
 19614                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19615                           
 19616                           ;incstack = 0
 19617                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19618  2389  303B               	movlw	59
 19619  238A  31A5  2520         	fcall	_CC2500_WriteCommand
 19620  238C  0008               	return
 19621  238D                     __end_of_CC2500_ClearTXFIFO:	
 19622                           
 19623                           	psect	text130
 19624  2385                     __ptext130:	
 19625 ;; *************** function _CC2500_ClearRXFIFO *****************
 19626 ;; Defined at:
 19627 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19628 ;; Parameters:    Size  Location     Type
 19629 ;;		None
 19630 ;; Auto vars:     Size  Location     Type
 19631 ;;		None
 19632 ;; Return value:  Size  Location     Type
 19633 ;;		None               void
 19634 ;; Registers used:
 19635 ;;		wreg, status,2, status,0, pclath, cstack
 19636 ;; Tracked objects:
 19637 ;;		On entry : 0/0
 19638 ;;		On exit  : 0/0
 19639 ;;		Unchanged: 0/0
 19640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19645 ;;Total ram usage:        0 bytes
 19646 ;; Hardware stack levels used:    1
 19647 ;; Hardware stack levels required when called:    6
 19648 ;; This function calls:
 19649 ;;		_CC2500_WriteCommand
 19650 ;; This function is called by:
 19651 ;;		_CC2500_PowerOnInitial
 19652 ;; This function uses a non-reentrant model
 19653 ;;
 19654                           
 19655                           
 19656                           ;psect for function _CC2500_ClearRXFIFO
 19657  2385                     _CC2500_ClearRXFIFO:	
 19658                           
 19659                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19660                           
 19661                           ;incstack = 0
 19662                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19663  2385  303A               	movlw	58
 19664  2386  31A5  2520         	fcall	_CC2500_WriteCommand
 19665  2388  0008               	return
 19666  2389                     __end_of_CC2500_ClearRXFIFO:	
 19667                           
 19668                           	psect	text131
 19669  2520                     __ptext131:	
 19670 ;; *************** function _CC2500_WriteCommand *****************
 19671 ;; Defined at:
 19672 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19673 ;; Parameters:    Size  Location     Type
 19674 ;;  command         1    wreg     unsigned char 
 19675 ;; Auto vars:     Size  Location     Type
 19676 ;;  command         1    3[BANK0 ] unsigned char 
 19677 ;; Return value:  Size  Location     Type
 19678 ;;		None               void
 19679 ;; Registers used:
 19680 ;;		wreg, status,2, status,0, pclath, cstack
 19681 ;; Tracked objects:
 19682 ;;		On entry : 0/0
 19683 ;;		On exit  : 0/0
 19684 ;;		Unchanged: 0/0
 19685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19690 ;;Total ram usage:        2 bytes
 19691 ;; Hardware stack levels used:    1
 19692 ;; Hardware stack levels required when called:    5
 19693 ;; This function calls:
 19694 ;;		_CC2500_WriteByte
 19695 ;; This function is called by:
 19696 ;;		_CC2500_TxData
 19697 ;;		_CC2500_RxData
 19698 ;;		_CC2500_ClearTXFIFO
 19699 ;;		_CC2500_ClearRXFIFO
 19700 ;;		_CC2500_FrequencyCabr
 19701 ;;		_CC2500_SIDLEMode
 19702 ;;		_setRF_Main
 19703 ;;		_setRF_Enable
 19704 ;;		_RF_RxDisable
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708                           
 19709                           ;psect for function _CC2500_WriteCommand
 19710  2520                     _CC2500_WriteCommand:	
 19711                           
 19712                           ;incstack = 0
 19713                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19714                           ;CC2500_WriteCommand@command stored from wreg
 19715  2520  0020               	movlb	0	; select bank0
 19716  2521  00A3               	movwf	CC2500_WriteCommand@command
 19717                           
 19718                           ;CC2500_B1.c: 255: RC4=0;
 19719  2522  120E               	bcf	14,4	;volatile
 19720                           
 19721                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19722  2523  0823               	movf	CC2500_WriteCommand@command,w
 19723  2524  00A2               	movwf	??_CC2500_WriteCommand
 19724  2525  0822               	movf	??_CC2500_WriteCommand,w
 19725  2526  0021               	movlb	1	; select bank1
 19726  2527  00BF               	movwf	_SPI0Buffer^(0+128)
 19727  2528                     l397:	
 19728                           ;CC2500_B1.c: 258: while(RC2==1);
 19729                           
 19730  2528  0020               	movlb	0	; select bank0
 19731  2529  190E               	btfsc	14,2	;volatile
 19732  252A  2D28               	goto	l397
 19733                           
 19734                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19735  252B  31A6  2672         	fcall	_CC2500_WriteByte
 19736                           
 19737                           ;CC2500_B1.c: 261: RC4=1;
 19738  252D  0020               	movlb	0	; select bank0
 19739  252E  160E               	bsf	14,4	;volatile
 19740  252F  0008               	return
 19741  2530                     __end_of_CC2500_WriteCommand:	
 19742                           
 19743                           	psect	text132
 19744  2672                     __ptext132:	
 19745 ;; *************** function _CC2500_WriteByte *****************
 19746 ;; Defined at:
 19747 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19748 ;; Parameters:    Size  Location     Type
 19749 ;;		None
 19750 ;; Auto vars:     Size  Location     Type
 19751 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19752 ;; Return value:  Size  Location     Type
 19753 ;;		None               void
 19754 ;; Registers used:
 19755 ;;		wreg, status,2, status,0
 19756 ;; Tracked objects:
 19757 ;;		On entry : 0/0
 19758 ;;		On exit  : 0/0
 19759 ;;		Unchanged: 0/0
 19760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19765 ;;Total ram usage:        2 bytes
 19766 ;; Hardware stack levels used:    1
 19767 ;; Hardware stack levels required when called:    4
 19768 ;; This function calls:
 19769 ;;		Nothing
 19770 ;; This function is called by:
 19771 ;;		_CC2500_TxData
 19772 ;;		_CC2500_RxData
 19773 ;;		_CC2500_PowerRST
 19774 ;;		_CC2500_WriteREG
 19775 ;;		_CC2500_WriteCommand
 19776 ;;		_CC2500_ReadStatus
 19777 ;;		_CC2500_ReadREG
 19778 ;; This function uses a non-reentrant model
 19779 ;;
 19780                           
 19781                           
 19782                           ;psect for function _CC2500_WriteByte
 19783  2672                     _CC2500_WriteByte:	
 19784                           
 19785                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19786                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19787                           
 19788                           ;incstack = 0
 19789                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19790  2672  0020               	movlb	0	; select bank0
 19791  2673  01A1               	clrf	CC2500_WriteByte@loop_a
 19792  2674                     L17:	
 19793  2674  3008               	movlw	8
 19794  2675  0221               	subwf	CC2500_WriteByte@loop_a,w
 19795  2676  1803               	btfsc	3,0
 19796  2677  0008               	return
 19797                           
 19798                           ;CC2500_B1.c: 197: {
 19799                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19800  2678  0021               	movlb	1	; select bank1
 19801  2679  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19802  267A  2E7E               	goto	l373
 19803                           
 19804                           ;CC2500_B1.c: 199: RC0=1;
 19805  267B  0020               	movlb	0	; select bank0
 19806  267C  140E               	bsf	14,0	;volatile
 19807  267D  2E80               	goto	l374
 19808  267E                     l373:	
 19809                           
 19810                           ;CC2500_B1.c: 200: else
 19811                           ;CC2500_B1.c: 201: RC0=0;
 19812  267E  0020               	movlb	0	; select bank0
 19813  267F  100E               	bcf	14,0	;volatile
 19814  2680                     l374:	
 19815                           
 19816                           ;CC2500_B1.c: 202: RC1=1;
 19817  2680  148E               	bsf	14,1	;volatile
 19818                           
 19819                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19820  2681  1003               	clrc
 19821  2682  0021               	movlb	1	; select bank1
 19822  2683  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19823                           
 19824                           ;CC2500_B1.c: 204: RC1=0;
 19825  2684  0020               	movlb	0	; select bank0
 19826  2685  108E               	bcf	14,1	;volatile
 19827  2686  3001               	movlw	1
 19828  2687  00A0               	movwf	??_CC2500_WriteByte
 19829  2688  0820               	movf	??_CC2500_WriteByte,w
 19830  2689  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19831  268A  2E74               	goto	L17
 19832  268B                     __end_of_CC2500_WriteByte:	
 19833                           
 19834                           	psect	text133
 19835  0913                     __ptext133:	
 19836 ;; *************** function _Buzzer_Main *****************
 19837 ;; Defined at:
 19838 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 19839 ;; Parameters:    Size  Location     Type
 19840 ;;		None
 19841 ;; Auto vars:     Size  Location     Type
 19842 ;;		None
 19843 ;; Return value:  Size  Location     Type
 19844 ;;		None               void
 19845 ;; Registers used:
 19846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19847 ;; Tracked objects:
 19848 ;;		On entry : 0/0
 19849 ;;		On exit  : 0/0
 19850 ;;		Unchanged: 0/0
 19851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19854 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19856 ;;Total ram usage:        4 bytes
 19857 ;; Hardware stack levels used:    1
 19858 ;; Hardware stack levels required when called:    4
 19859 ;; This function calls:
 19860 ;;		Nothing
 19861 ;; This function is called by:
 19862 ;;		_main
 19863 ;; This function uses a non-reentrant model
 19864 ;;
 19865                           
 19866                           
 19867                           ;psect for function _Buzzer_Main
 19868  0913                     _Buzzer_Main:	
 19869                           
 19870                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19871                           
 19872                           ;incstack = 0
 19873                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19874  0913  0878               	movf	_Buz,w
 19875  0914  0086               	movwf	6
 19876  0915  3001               	movlw	1	; select bank2/3
 19877  0916  0087               	movwf	7
 19878  0917  1281               	bcf	1,5
 19879  0918  0020               	movlb	0	; select bank0
 19880  0919  198D               	btfsc	13,3	;volatile
 19881  091A  1681               	bsf	1,5
 19882                           
 19883                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19884  091B  0878               	movf	_Buz,w
 19885  091C  0086               	movwf	6
 19886  091D  3001               	movlw	1	; select bank2/3
 19887  091E  0087               	movwf	7
 19888  091F  1C81               	btfss	1,1
 19889  0920  0008               	return
 19890                           
 19891                           ;Buzzer_B1.c: 58: {
 19892                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19893  0921  0878               	movf	_Buz,w
 19894  0922  3E06               	addlw	6
 19895  0923  0086               	movwf	6
 19896  0924  3001               	movlw	1	; select bank2/3
 19897  0925  0087               	movwf	7
 19898  0926  3F40               	moviw [0]fsr1
 19899  0927  0020               	movlb	0	; select bank0
 19900  0928  00A0               	movwf	??_Buzzer_Main
 19901  0929  3F41               	moviw [1]fsr1
 19902  092A  00A1               	movwf	??_Buzzer_Main+1
 19903  092B  0A78               	incf	_Buz,w
 19904  092C  0086               	movwf	6
 19905  092D  3001               	movlw	1	; select bank2/3
 19906  092E  0087               	movwf	7
 19907  092F  3F40               	moviw [0]fsr1
 19908  0930  00A2               	movwf	??_Buzzer_Main+2
 19909  0931  3F41               	moviw [1]fsr1
 19910  0932  00A3               	movwf	??_Buzzer_Main+3
 19911  0933  0821               	movf	??_Buzzer_Main+1,w
 19912  0934  0223               	subwf	??_Buzzer_Main+3,w
 19913  0935  1D03               	skipz
 19914  0936  2939               	goto	u7075
 19915  0937  0820               	movf	??_Buzzer_Main,w
 19916  0938  0222               	subwf	??_Buzzer_Main+2,w
 19917  0939                     u7075:	
 19918  0939  1C03               	skipc
 19919  093A  0008               	return
 19920                           
 19921                           ;Buzzer_B1.c: 61: {
 19922                           ;Buzzer_B1.c: 62: Buz->Time=0;
 19923  093B  0A78               	incf	_Buz,w
 19924  093C  0086               	movwf	6
 19925  093D  3001               	movlw	1	; select bank2/3
 19926  093E  0087               	movwf	7
 19927  093F  3000               	movlw	0
 19928  0940  3FC0               	movwi [0]fsr1
 19929  0941  3FC1               	movwi [1]fsr1
 19930                           
 19931                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 19932  0942  0878               	movf	_Buz,w
 19933  0943  0086               	movwf	6
 19934  0944  3001               	movlw	1	; select bank2/3
 19935  0945  0087               	movwf	7
 19936  0946  1A81               	btfsc	1,5
 19937  0947  29AD               	goto	l7986
 19938                           
 19939                           ;Buzzer_B1.c: 64: {
 19940                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 19941  0948  0878               	movf	_Buz,w
 19942  0949  3E03               	addlw	3
 19943  094A  0086               	movwf	6
 19944  094B  3001               	movlw	1	; select bank2/3
 19945  094C  0087               	movwf	7
 19946  094D  0881               	movf	1,f
 19947  094E  1D03               	skipz
 19948  094F  29A6               	goto	l7982
 19949                           
 19950                           ;Buzzer_B1.c: 66: {
 19951                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 19952  0950  0878               	movf	_Buz,w
 19953  0951  0086               	movwf	6
 19954  0952  3001               	movlw	1	; select bank2/3
 19955  0953  0087               	movwf	7
 19956  0954  1D81               	btfss	1,3
 19957  0955  2978               	goto	l7974
 19958                           
 19959                           ;Buzzer_B1.c: 68: {
 19960                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 19961  0956  0878               	movf	_Buz,w
 19962  0957  0086               	movwf	6
 19963  0958  3001               	movlw	1	; select bank2/3
 19964  0959  0087               	movwf	7
 19965  095A  1181               	bcf	1,3
 19966                           
 19967                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 19968  095B  0878               	movf	_Buz,w
 19969  095C  3E04               	addlw	4
 19970  095D  0086               	movwf	6
 19971  095E  3001               	movlw	1	; select bank2/3
 19972  095F  0087               	movwf	7
 19973  0960  0801               	movf	1,w
 19974  0961  00A0               	movwf	??_Buzzer_Main
 19975  0962  0878               	movf	_Buz,w
 19976  0963  3E03               	addlw	3
 19977  0964  0086               	movwf	6
 19978  0965  3001               	movlw	1	; select bank2/3
 19979  0966  0087               	movwf	7
 19980  0967  0820               	movf	??_Buzzer_Main,w
 19981  0968  0081               	movwf	1
 19982                           
 19983                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 19984  0969  0878               	movf	_Buz,w
 19985  096A  3E08               	addlw	8
 19986  096B  0086               	movwf	6
 19987  096C  3001               	movlw	1	; select bank2/3
 19988  096D  0087               	movwf	7
 19989  096E  0878               	movf	_Buz,w
 19990  096F  3E06               	addlw	6
 19991  0970  0084               	movwf	4
 19992  0971  3001               	movlw	1	; select bank2/3
 19993  0972  0085               	movwf	5
 19994  0973  3F40               	moviw [0]fsr1
 19995  0974  3F80               	movwi [0]fsr0
 19996  0975  3F41               	moviw [1]fsr1
 19997  0976  3F81               	movwi [1]fsr0
 19998                           
 19999                           ;Buzzer_B1.c: 72: }
 20000  0977  0008               	return
 20001  0978                     l7974:	
 20002                           
 20003                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20004  0978  0878               	movf	_Buz,w
 20005  0979  0086               	movwf	6
 20006  097A  3001               	movlw	1	; select bank2/3
 20007  097B  0087               	movwf	7
 20008  097C  1E01               	btfss	1,4
 20009  097D  29A0               	goto	l7980
 20010                           
 20011                           ;Buzzer_B1.c: 74: {
 20012                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20013  097E  0878               	movf	_Buz,w
 20014  097F  0086               	movwf	6
 20015  0980  3001               	movlw	1	; select bank2/3
 20016  0981  0087               	movwf	7
 20017  0982  1201               	bcf	1,4
 20018                           
 20019                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20020  0983  0878               	movf	_Buz,w
 20021  0984  3E05               	addlw	5
 20022  0985  0086               	movwf	6
 20023  0986  3001               	movlw	1	; select bank2/3
 20024  0987  0087               	movwf	7
 20025  0988  0801               	movf	1,w
 20026  0989  00A0               	movwf	??_Buzzer_Main
 20027  098A  0878               	movf	_Buz,w
 20028  098B  3E03               	addlw	3
 20029  098C  0086               	movwf	6
 20030  098D  3001               	movlw	1	; select bank2/3
 20031  098E  0087               	movwf	7
 20032  098F  0820               	movf	??_Buzzer_Main,w
 20033  0990  0081               	movwf	1
 20034                           
 20035                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20036  0991  0878               	movf	_Buz,w
 20037  0992  3E0A               	addlw	10
 20038  0993  0086               	movwf	6
 20039  0994  3001               	movlw	1	; select bank2/3
 20040  0995  0087               	movwf	7
 20041  0996  0878               	movf	_Buz,w
 20042  0997  3E06               	addlw	6
 20043  0998  0084               	movwf	4
 20044  0999  3001               	movlw	1	; select bank2/3
 20045  099A  0085               	movwf	5
 20046  099B  3F40               	moviw [0]fsr1
 20047  099C  3F80               	movwi [0]fsr0
 20048  099D  3F41               	moviw [1]fsr1
 20049  099E  3F81               	movwi [1]fsr0
 20050                           
 20051                           ;Buzzer_B1.c: 78: }
 20052  099F  0008               	return
 20053  09A0                     l7980:	
 20054                           
 20055                           ;Buzzer_B1.c: 79: else
 20056                           ;Buzzer_B1.c: 80: {
 20057                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20058  09A0  0878               	movf	_Buz,w
 20059  09A1  0086               	movwf	6
 20060  09A2  3001               	movlw	1	; select bank2/3
 20061  09A3  0087               	movwf	7
 20062  09A4  1081               	bcf	1,1
 20063                           
 20064                           ;Buzzer_B1.c: 82: }
 20065                           ;Buzzer_B1.c: 83: }
 20066  09A5  0008               	return
 20067  09A6                     l7982:	
 20068                           
 20069                           ;Buzzer_B1.c: 84: else
 20070                           ;Buzzer_B1.c: 85: {
 20071                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20072  09A6  0878               	movf	_Buz,w
 20073  09A7  0086               	movwf	6
 20074  09A8  3001               	movlw	1	; select bank2/3
 20075  09A9  0087               	movwf	7
 20076  09AA  1681               	bsf	1,5
 20077                           
 20078                           ;Buzzer_B1.c: 88: RB3=1;
 20079  09AB  158D               	bsf	13,3	;volatile
 20080                           
 20081                           ;Buzzer_B1.c: 89: }
 20082                           ;Buzzer_B1.c: 90: }
 20083  09AC  0008               	return
 20084  09AD                     l7986:	
 20085                           
 20086                           ;Buzzer_B1.c: 91: else
 20087                           ;Buzzer_B1.c: 92: {
 20088                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20089  09AD  0878               	movf	_Buz,w
 20090  09AE  0086               	movwf	6
 20091  09AF  3001               	movlw	1	; select bank2/3
 20092  09B0  0087               	movwf	7
 20093  09B1  1281               	bcf	1,5
 20094                           
 20095                           ;Buzzer_B1.c: 95: RB3=0;
 20096  09B2  118D               	bcf	13,3	;volatile
 20097                           
 20098                           ;Buzzer_B1.c: 97: Buz->Count--;
 20099  09B3  0878               	movf	_Buz,w
 20100  09B4  3E03               	addlw	3
 20101  09B5  0086               	movwf	6
 20102  09B6  3001               	movlw	1	; select bank2/3
 20103  09B7  0087               	movwf	7
 20104  09B8  3001               	movlw	1
 20105  09B9  0281               	subwf	1,f
 20106  09BA  0008               	return
 20107  09BB                     __end_of_Buzzer_Main:	
 20108                           
 20109                           	psect	text134
 20110  2407                     __ptext134:	
 20111 ;; *************** function _Buzzer_Initialization *****************
 20112 ;; Defined at:
 20113 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20114 ;; Parameters:    Size  Location     Type
 20115 ;;		None
 20116 ;; Auto vars:     Size  Location     Type
 20117 ;;		None
 20118 ;; Return value:  Size  Location     Type
 20119 ;;		None               void
 20120 ;; Registers used:
 20121 ;;		wreg, fsr1l, fsr1h
 20122 ;; Tracked objects:
 20123 ;;		On entry : 0/0
 20124 ;;		On exit  : 0/0
 20125 ;;		Unchanged: 0/0
 20126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20131 ;;Total ram usage:        1 bytes
 20132 ;; Hardware stack levels used:    1
 20133 ;; Hardware stack levels required when called:    4
 20134 ;; This function calls:
 20135 ;;		Nothing
 20136 ;; This function is called by:
 20137 ;;		_main
 20138 ;; This function uses a non-reentrant model
 20139 ;;
 20140                           
 20141                           
 20142                           ;psect for function _Buzzer_Initialization
 20143  2407                     _Buzzer_Initialization:	
 20144                           
 20145                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20146                           
 20147                           ;incstack = 0
 20148                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20149  2407  3048               	movlw	_Buz1& (0+255)
 20150  2408  0020               	movlb	0	; select bank0
 20151  2409  00A0               	movwf	??_Buzzer_Initialization
 20152  240A  0820               	movf	??_Buzzer_Initialization,w
 20153  240B  00F8               	movwf	_Buz
 20154                           
 20155                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20156  240C  0878               	movf	_Buz,w
 20157  240D  0086               	movwf	6
 20158  240E  3001               	movlw	1	; select bank2/3
 20159  240F  0087               	movwf	7
 20160  2410  1401               	bsf	1,0
 20161  2411  0008               	return
 20162  2412                     __end_of_Buzzer_Initialization:	
 20163                           
 20164                           	psect	intentry
 20165  0004                     __pintentry:	
 20166 ;; *************** function _ISR *****************
 20167 ;; Defined at:
 20168 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20169 ;; Parameters:    Size  Location     Type
 20170 ;;		None
 20171 ;; Auto vars:     Size  Location     Type
 20172 ;;		None
 20173 ;; Return value:  Size  Location     Type
 20174 ;;		None               void
 20175 ;; Registers used:
 20176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20177 ;; Tracked objects:
 20178 ;;		On entry : 0/0
 20179 ;;		On exit  : 0/0
 20180 ;;		Unchanged: 0/0
 20181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20186 ;;Total ram usage:        1 bytes
 20187 ;; Hardware stack levels used:    1
 20188 ;; Hardware stack levels required when called:    3
 20189 ;; This function calls:
 20190 ;;		_INT_ISR
 20191 ;;		_IOC_ISR
 20192 ;;		_TMR0_ISR
 20193 ;; This function is called by:
 20194 ;;		Interrupt level 1
 20195 ;; This function uses a non-reentrant model
 20196 ;;
 20197                           
 20198  0004                     _ISR:	
 20199                           
 20200                           ;incstack = 0
 20201                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20202  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20203  0005  3180               	pagesel	$
 20204  0006  0020               	movlb	0	; select bank0
 20205  0007  087F               	movf	127,w
 20206  0008  00F7               	movwf	??_ISR
 20207                           
 20208                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 20209  0009  3198  20C1  3180   	fcall	_IOC_ISR
 20210                           
 20211                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 20212  000C  3180  2059  3180   	fcall	_TMR0_ISR
 20213                           
 20214                           ;MCU_16f1518_B1.c: 62: ;;
 20215                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 20216  000F  31A4  2476         	fcall	_INT_ISR
 20217  0011  0877               	movf	??_ISR,w
 20218  0012  0020               	movlb	0	; select bank0
 20219  0013  00FF               	movwf	127
 20220  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20221  0015  0009               	retfie
 20222  0016                     __end_of_ISR:	
 20223                           
 20224                           	psect	text136
 20225  0059                     __ptext136:	
 20226 ;; *************** function _TMR0_ISR *****************
 20227 ;; Defined at:
 20228 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;		None
 20231 ;; Auto vars:     Size  Location     Type
 20232 ;;		None
 20233 ;; Return value:  Size  Location     Type
 20234 ;;		None               void
 20235 ;; Registers used:
 20236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20237 ;; Tracked objects:
 20238 ;;		On entry : 0/0
 20239 ;;		On exit  : 0/0
 20240 ;;		Unchanged: 0/0
 20241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20244 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20245 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20246 ;;Total ram usage:        4 bytes
 20247 ;; Hardware stack levels used:    1
 20248 ;; Hardware stack levels required when called:    1
 20249 ;; This function calls:
 20250 ;;		i1_setLoad_StatusOff
 20251 ;; This function is called by:
 20252 ;;		_ISR
 20253 ;; This function uses a non-reentrant model
 20254 ;;
 20255                           
 20256                           
 20257                           ;psect for function _TMR0_ISR
 20258  0059                     _TMR0_ISR:	
 20259                           
 20260                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 20261                           
 20262                           ;incstack = 0
 20263                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20264  0059  1E8B               	btfss	11,5	;volatile
 20265  005A  0008               	return
 20266  005B  1D0B               	btfss	11,2	;volatile
 20267  005C  0008               	return
 20268                           
 20269                           ;MCU_16f1518_B1.c: 85: {
 20270                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 20271  005D  30A6               	movlw	166
 20272  005E  0020               	movlb	0	; select bank0
 20273  005F  0095               	movwf	21	;volatile
 20274                           
 20275                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 20276  0060  110B               	bcf	11,2	;volatile
 20277                           
 20278                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1
      +                          ; ;; } } }
 20279  0061  0879               	movf	_DimmerLights11,w
 20280  0062  0086               	movwf	6
 20281  0063  3001               	movlw	1	; select bank2/3
 20282  0064  0087               	movwf	7
 20283  0065  1C01               	btfss	1,0
 20284  0066  28B1               	goto	i1l8378
 20285  0067  3001               	movlw	1
 20286  0068  00F3               	movwf	??_TMR0_ISR
 20287  0069  0879               	movf	_DimmerLights11,w
 20288  006A  3E03               	addlw	3
 20289  006B  0086               	movwf	6
 20290  006C  3001               	movlw	1	; select bank2/3
 20291  006D  0087               	movwf	7
 20292  006E  0873               	movf	??_TMR0_ISR,w
 20293  006F  0781               	addwf	1,f
 20294  0070  0021               	movlb	1	; select bank1
 20295  0071  0839               	movf	_Dimmer^(0+128),w
 20296  0072  3E02               	addlw	2
 20297  0073  0086               	movwf	6
 20298  0074  0187               	clrf	7
 20299  0075  0801               	movf	1,w
 20300  0076  00F3               	movwf	??_TMR0_ISR
 20301  0077  01F4               	clrf	??_TMR0_ISR+1
 20302  0078  09F3               	comf	??_TMR0_ISR,f
 20303  0079  09F4               	comf	??_TMR0_ISR+1,f
 20304  007A  0AF3               	incf	??_TMR0_ISR,f
 20305  007B  1903               	skipnz
 20306  007C  0AF4               	incf	??_TMR0_ISR+1,f
 20307  007D  0879               	movf	_DimmerLights11,w
 20308  007E  3E04               	addlw	4
 20309  007F  0086               	movwf	6
 20310  0080  3001               	movlw	1	; select bank2/3
 20311  0081  0087               	movwf	7
 20312  0082  0801               	movf	1,w
 20313  0083  0773               	addwf	??_TMR0_ISR,w
 20314  0084  00F5               	movwf	??_TMR0_ISR+2
 20315  0085  0874               	movf	??_TMR0_ISR+1,w
 20316  0086  1803               	skipnc
 20317  0087  0A74               	incf	??_TMR0_ISR+1,w
 20318  0088  00F6               	movwf	??_TMR0_ISR+3
 20319  0089  0879               	movf	_DimmerLights11,w
 20320  008A  3E03               	addlw	3
 20321  008B  0086               	movwf	6
 20322  008C  3001               	movlw	1	; select bank2/3
 20323  008D  0087               	movwf	7
 20324  008E  0876               	movf	??_TMR0_ISR+3,w
 20325  008F  3A80               	xorlw	128
 20326  0090  3C80               	sublw	128
 20327  0091  1D03               	skipz
 20328  0092  2895               	goto	u766_25
 20329  0093  0875               	movf	??_TMR0_ISR+2,w
 20330  0094  0201               	subwf	1,w
 20331  0095                     u766_25:	
 20332  0095  1C03               	skipc
 20333  0096  29EB               	goto	i1l8444
 20334  0097  0879               	movf	_DimmerLights11,w
 20335  0098  3E03               	addlw	3
 20336  0099  0086               	movwf	6
 20337  009A  3001               	movlw	1	; select bank2/3
 20338  009B  0087               	movwf	7
 20339  009C  0181               	clrf	1
 20340  009D  0879               	movf	_DimmerLights11,w
 20341  009E  0086               	movwf	6
 20342  009F  3001               	movlw	1	; select bank2/3
 20343  00A0  0087               	movwf	7
 20344  00A1  1001               	bcf	1,0
 20345  00A2  0879               	movf	_DimmerLights11,w
 20346  00A3  3E07               	addlw	7
 20347  00A4  0086               	movwf	6
 20348  00A5  3001               	movlw	1	; select bank2/3
 20349  00A6  0087               	movwf	7
 20350  00A7  1401               	bsf	1,0
 20351  00A8  0879               	movf	_DimmerLights11,w
 20352  00A9  0086               	movwf	6
 20353  00AA  3001               	movlw	1	; select bank2/3
 20354  00AB  0087               	movwf	7
 20355  00AC  1F01               	btfss	1,6
 20356  00AD  29EB               	goto	i1l8444
 20357  00AE  0020               	movlb	0	; select bank0
 20358  00AF  178C               	bsf	12,7	;volatile
 20359  00B0  29EB               	goto	i1l8444
 20360  00B1                     i1l8378:	
 20361  00B1  0879               	movf	_DimmerLights11,w
 20362  00B2  3E07               	addlw	7
 20363  00B3  0086               	movwf	6
 20364  00B4  3001               	movlw	1	; select bank2/3
 20365  00B5  0087               	movwf	7
 20366  00B6  1C01               	btfss	1,0
 20367  00B7  29B6               	goto	i1l8436
 20368  00B8  0879               	movf	_DimmerLights11,w
 20369  00B9  3E07               	addlw	7
 20370  00BA  0086               	movwf	6
 20371  00BB  3001               	movlw	1	; select bank2/3
 20372  00BC  0087               	movwf	7
 20373  00BD  1001               	bcf	1,0
 20374  00BE  0879               	movf	_DimmerLights11,w
 20375  00BF  0086               	movwf	6
 20376  00C0  3001               	movlw	1	; select bank2/3
 20377  00C1  0087               	movwf	7
 20378  00C2  1C81               	btfss	1,1
 20379  00C3  29B6               	goto	i1l8436
 20380  00C4  3001               	movlw	1
 20381  00C5  00F3               	movwf	??_TMR0_ISR
 20382  00C6  0A79               	incf	_DimmerLights11,w
 20383  00C7  0086               	movwf	6
 20384  00C8  3001               	movlw	1	; select bank2/3
 20385  00C9  0087               	movwf	7
 20386  00CA  0873               	movf	??_TMR0_ISR,w
 20387  00CB  0781               	addwf	1,f
 20388  00CC  0A79               	incf	_DimmerLights11,w
 20389  00CD  0086               	movwf	6
 20390  00CE  3001               	movlw	1	; select bank2/3
 20391  00CF  0087               	movwf	7
 20392  00D0  0879               	movf	_DimmerLights11,w
 20393  00D1  3E02               	addlw	2
 20394  00D2  0084               	movwf	4
 20395  00D3  3001               	movlw	1	; select bank2/3
 20396  00D4  0085               	movwf	5
 20397  00D5  0800               	movf	0,w
 20398  00D6  0201               	subwf	1,w
 20399  00D7  1C03               	skipc
 20400  00D8  29B6               	goto	i1l8436
 20401  00D9  0A79               	incf	_DimmerLights11,w
 20402  00DA  0086               	movwf	6
 20403  00DB  3001               	movlw	1	; select bank2/3
 20404  00DC  0087               	movwf	7
 20405  00DD  0181               	clrf	1
 20406  00DE  0879               	movf	_DimmerLights11,w
 20407  00DF  0086               	movwf	6
 20408  00E0  3001               	movlw	1	; select bank2/3
 20409  00E1  0087               	movwf	7
 20410  00E2  1D81               	btfss	1,3
 20411  00E3  291A               	goto	i1l8404
 20412  00E4  0879               	movf	_DimmerLights11,w
 20413  00E5  0086               	movwf	6
 20414  00E6  3001               	movlw	1	; select bank2/3
 20415  00E7  0087               	movwf	7
 20416  00E8  1A01               	btfsc	1,4
 20417  00E9  2901               	goto	i1l8398
 20418  00EA  0879               	movf	_DimmerLights11,w
 20419  00EB  3E04               	addlw	4
 20420  00EC  0086               	movwf	6
 20421  00ED  3001               	movlw	1	; select bank2/3
 20422  00EE  0087               	movwf	7
 20423  00EF  303D               	movlw	61
 20424  00F0  0201               	subwf	1,w
 20425  00F1  1C03               	skipc
 20426  00F2  28FB               	goto	i1l8396
 20427  00F3  0879               	movf	_DimmerLights11,w
 20428  00F4  3E04               	addlw	4
 20429  00F5  0086               	movwf	6
 20430  00F6  3001               	movlw	1	; select bank2/3
 20431  00F7  0087               	movwf	7
 20432  00F8  3001               	movlw	1
 20433  00F9  0281               	subwf	1,f
 20434  00FA  29B6               	goto	i1l8436
 20435  00FB                     i1l8396:	
 20436  00FB  0879               	movf	_DimmerLights11,w
 20437  00FC  0086               	movwf	6
 20438  00FD  3001               	movlw	1	; select bank2/3
 20439  00FE  0087               	movwf	7
 20440  00FF  1601               	bsf	1,4
 20441  0100  29B6               	goto	i1l8436
 20442  0101                     i1l8398:	
 20443  0101  0879               	movf	_DimmerLights11,w
 20444  0102  3E04               	addlw	4
 20445  0103  0086               	movwf	6
 20446  0104  3001               	movlw	1	; select bank2/3
 20447  0105  0087               	movwf	7
 20448  0106  3078               	movlw	120
 20449  0107  0201               	subwf	1,w
 20450  0108  1803               	skipnc
 20451  0109  2914               	goto	i1l8402
 20452  010A  3001               	movlw	1
 20453  010B  00F3               	movwf	??_TMR0_ISR
 20454  010C  0879               	movf	_DimmerLights11,w
 20455  010D  3E04               	addlw	4
 20456  010E  0086               	movwf	6
 20457  010F  3001               	movlw	1	; select bank2/3
 20458  0110  0087               	movwf	7
 20459  0111  0873               	movf	??_TMR0_ISR,w
 20460  0112  0781               	addwf	1,f
 20461  0113  29B6               	goto	i1l8436
 20462  0114                     i1l8402:	
 20463  0114  0879               	movf	_DimmerLights11,w
 20464  0115  0086               	movwf	6
 20465  0116  3001               	movlw	1	; select bank2/3
 20466  0117  0087               	movwf	7
 20467  0118  1201               	bcf	1,4
 20468  0119  29B6               	goto	i1l8436
 20469  011A                     i1l8404:	
 20470  011A  0879               	movf	_DimmerLights11,w
 20471  011B  0086               	movwf	6
 20472  011C  3001               	movlw	1	; select bank2/3
 20473  011D  0087               	movwf	7
 20474  011E  1D01               	btfss	1,2
 20475  011F  2961               	goto	i1l8418
 20476  0120  0879               	movf	_DimmerLights11,w
 20477  0121  3E05               	addlw	5
 20478  0122  0086               	movwf	6
 20479  0123  3001               	movlw	1	; select bank2/3
 20480  0124  0087               	movwf	7
 20481  0125  0879               	movf	_DimmerLights11,w
 20482  0126  3E04               	addlw	4
 20483  0127  0084               	movwf	4
 20484  0128  3001               	movlw	1	; select bank2/3
 20485  0129  0085               	movwf	5
 20486  012A  0800               	movf	0,w
 20487  012B  0201               	subwf	1,w
 20488  012C  1803               	skipnc
 20489  012D  2936               	goto	i1l8410
 20490  012E  0879               	movf	_DimmerLights11,w
 20491  012F  3E04               	addlw	4
 20492  0130  0086               	movwf	6
 20493  0131  3001               	movlw	1	; select bank2/3
 20494  0132  0087               	movwf	7
 20495  0133  3001               	movlw	1
 20496  0134  0281               	subwf	1,f
 20497  0135  294D               	goto	i1l8414
 20498  0136                     i1l8410:	
 20499  0136  0879               	movf	_DimmerLights11,w
 20500  0137  3E04               	addlw	4
 20501  0138  0086               	movwf	6
 20502  0139  3001               	movlw	1	; select bank2/3
 20503  013A  0087               	movwf	7
 20504  013B  0879               	movf	_DimmerLights11,w
 20505  013C  3E05               	addlw	5
 20506  013D  0084               	movwf	4
 20507  013E  3001               	movlw	1	; select bank2/3
 20508  013F  0085               	movwf	5
 20509  0140  0800               	movf	0,w
 20510  0141  0201               	subwf	1,w
 20511  0142  1803               	skipnc
 20512  0143  294D               	goto	i1l8414
 20513  0144  3001               	movlw	1
 20514  0145  00F3               	movwf	??_TMR0_ISR
 20515  0146  0879               	movf	_DimmerLights11,w
 20516  0147  3E04               	addlw	4
 20517  0148  0086               	movwf	6
 20518  0149  3001               	movlw	1	; select bank2/3
 20519  014A  0087               	movwf	7
 20520  014B  0873               	movf	??_TMR0_ISR,w
 20521  014C  0781               	addwf	1,f
 20522  014D                     i1l8414:	
 20523  014D  0879               	movf	_DimmerLights11,w
 20524  014E  3E05               	addlw	5
 20525  014F  0086               	movwf	6
 20526  0150  3001               	movlw	1	; select bank2/3
 20527  0151  0087               	movwf	7
 20528  0152  0879               	movf	_DimmerLights11,w
 20529  0153  3E04               	addlw	4
 20530  0154  0084               	movwf	4
 20531  0155  3001               	movlw	1	; select bank2/3
 20532  0156  0085               	movwf	5
 20533  0157  0800               	movf	0,w
 20534  0158  0601               	xorwf	1,w
 20535  0159  1D03               	skipz
 20536  015A  29B6               	goto	i1l8436
 20537  015B  0879               	movf	_DimmerLights11,w
 20538  015C  0086               	movwf	6
 20539  015D  3001               	movlw	1	; select bank2/3
 20540  015E  0087               	movwf	7
 20541  015F  1101               	bcf	1,2
 20542  0160  297C               	goto	i1l8424
 20543  0161                     i1l8418:	
 20544  0161  0879               	movf	_DimmerLights11,w
 20545  0162  0086               	movwf	6
 20546  0163  3001               	movlw	1	; select bank2/3
 20547  0164  0087               	movwf	7
 20548  0165  1E81               	btfss	1,5
 20549  0166  2982               	goto	i1l8426
 20550  0167  0879               	movf	_DimmerLights11,w
 20551  0168  3E04               	addlw	4
 20552  0169  0086               	movwf	6
 20553  016A  3001               	movlw	1	; select bank2/3
 20554  016B  0087               	movwf	7
 20555  016C  3001               	movlw	1
 20556  016D  0281               	subwf	1,f
 20557  016E  0879               	movf	_DimmerLights11,w
 20558  016F  3E05               	addlw	5
 20559  0170  0086               	movwf	6
 20560  0171  3001               	movlw	1	; select bank2/3
 20561  0172  0087               	movwf	7
 20562  0173  0879               	movf	_DimmerLights11,w
 20563  0174  3E04               	addlw	4
 20564  0175  0084               	movwf	4
 20565  0176  3001               	movlw	1	; select bank2/3
 20566  0177  0085               	movwf	5
 20567  0178  0800               	movf	0,w
 20568  0179  0201               	subwf	1,w
 20569  017A  1C03               	skipc
 20570  017B  29B6               	goto	i1l8436
 20571  017C                     i1l8424:	
 20572  017C  0879               	movf	_DimmerLights11,w
 20573  017D  0086               	movwf	6
 20574  017E  3001               	movlw	1	; select bank2/3
 20575  017F  0087               	movwf	7
 20576  0180  1081               	bcf	1,1
 20577  0181  29B6               	goto	i1l8436
 20578  0182                     i1l8426:	
 20579  0182  3001               	movlw	1
 20580  0183  00F3               	movwf	??_TMR0_ISR
 20581  0184  0879               	movf	_DimmerLights11,w
 20582  0185  3E04               	addlw	4
 20583  0186  0086               	movwf	6
 20584  0187  3001               	movlw	1	; select bank2/3
 20585  0188  0087               	movwf	7
 20586  0189  0873               	movf	??_TMR0_ISR,w
 20587  018A  0781               	addwf	1,f
 20588  018B  0879               	movf	_DimmerLights11,w
 20589  018C  3E04               	addlw	4
 20590  018D  0086               	movwf	6
 20591  018E  3001               	movlw	1	; select bank2/3
 20592  018F  0087               	movwf	7
 20593  0190  0879               	movf	_DimmerLights11,w
 20594  0191  3E06               	addlw	6
 20595  0192  0084               	movwf	4
 20596  0193  3001               	movlw	1	; select bank2/3
 20597  0194  0085               	movwf	5
 20598  0195  0800               	movf	0,w
 20599  0196  0201               	subwf	1,w
 20600  0197  1C03               	skipc
 20601  0198  29B6               	goto	i1l8436
 20602  0199  0879               	movf	_DimmerLights11,w
 20603  019A  0086               	movwf	6
 20604  019B  3001               	movlw	1	; select bank2/3
 20605  019C  0087               	movwf	7
 20606  019D  1081               	bcf	1,1
 20607  019E  0879               	movf	_DimmerLights11,w
 20608  019F  0086               	movwf	6
 20609  01A0  3001               	movlw	1	; select bank2/3
 20610  01A1  0087               	movwf	7
 20611  01A2  1301               	bcf	1,6
 20612  01A3  0879               	movf	_DimmerLights11,w
 20613  01A4  3E0C               	addlw	12
 20614  01A5  0086               	movwf	6
 20615  01A6  3001               	movlw	1	; select bank2/3
 20616  01A7  0087               	movwf	7
 20617  01A8  1401               	bsf	1,0
 20618  01A9  0021               	movlb	1	; select bank1
 20619  01AA  0839               	movf	_Dimmer^(0+128),w
 20620  01AB  0086               	movwf	6
 20621  01AC  0187               	clrf	7
 20622  01AD  1401               	bsf	1,0
 20623  01AE  0020               	movlb	0	; select bank0
 20624  01AF  118C               	bcf	12,3	;volatile
 20625  01B0  01F1               	clrf	i1setLoad_StatusOff@command
 20626  01B1  0AF1               	incf	i1setLoad_StatusOff@command,f
 20627  01B2  3001               	movlw	1
 20628  01B3  319A  220C  3180   	fcall	i1_setLoad_StatusOff
 20629  01B6                     i1l8436:	
 20630  01B6  0020               	movlb	0	; select bank0
 20631  01B7  1F8C               	btfss	12,7	;volatile
 20632  01B8  29EB               	goto	i1l8444
 20633  01B9  3001               	movlw	1
 20634  01BA  00F3               	movwf	??_TMR0_ISR
 20635  01BB  0879               	movf	_DimmerLights11,w
 20636  01BC  3E08               	addlw	8
 20637  01BD  0086               	movwf	6
 20638  01BE  3001               	movlw	1	; select bank2/3
 20639  01BF  0087               	movwf	7
 20640  01C0  0873               	movf	??_TMR0_ISR,w
 20641  01C1  0781               	addwf	1,f
 20642  01C2  0879               	movf	_DimmerLights11,w
 20643  01C3  3E04               	addlw	4
 20644  01C4  0086               	movwf	6
 20645  01C5  3001               	movlw	1	; select bank2/3
 20646  01C6  0087               	movwf	7
 20647  01C7  0801               	movf	1,w
 20648  01C8  00F3               	movwf	??_TMR0_ISR
 20649  01C9  01F4               	clrf	??_TMR0_ISR+1
 20650  01CA  09F3               	comf	??_TMR0_ISR,f
 20651  01CB  09F4               	comf	??_TMR0_ISR+1,f
 20652  01CC  0AF3               	incf	??_TMR0_ISR,f
 20653  01CD  1903               	skipnz
 20654  01CE  0AF4               	incf	??_TMR0_ISR+1,f
 20655  01CF  0873               	movf	??_TMR0_ISR,w
 20656  01D0  3E78               	addlw	120
 20657  01D1  00F5               	movwf	??_TMR0_ISR+2
 20658  01D2  3000               	movlw	0
 20659  01D3  3D74               	addwfc	??_TMR0_ISR+1,w
 20660  01D4  00F6               	movwf	??_TMR0_ISR+3
 20661  01D5  0879               	movf	_DimmerLights11,w
 20662  01D6  3E08               	addlw	8
 20663  01D7  0086               	movwf	6
 20664  01D8  3001               	movlw	1	; select bank2/3
 20665  01D9  0087               	movwf	7
 20666  01DA  0876               	movf	??_TMR0_ISR+3,w
 20667  01DB  3A80               	xorlw	128
 20668  01DC  3C80               	sublw	128
 20669  01DD  1D03               	skipz
 20670  01DE  29E1               	goto	u783_25
 20671  01DF  0875               	movf	??_TMR0_ISR+2,w
 20672  01E0  0201               	subwf	1,w
 20673  01E1                     u783_25:	
 20674  01E1  1C03               	skipc
 20675  01E2  29EB               	goto	i1l8444
 20676  01E3  0879               	movf	_DimmerLights11,w
 20677  01E4  3E08               	addlw	8
 20678  01E5  0086               	movwf	6
 20679  01E6  3001               	movlw	1	; select bank2/3
 20680  01E7  0087               	movwf	7
 20681  01E8  0181               	clrf	1
 20682  01E9  0020               	movlb	0	; select bank0
 20683  01EA  138C               	bcf	12,7	;volatile
 20684  01EB                     i1l8444:	
 20685                           
 20686                           ;MCU_16f1518_B1.c: 104: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLight
      +                          s22->Count >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count
      +                          =0; DimmerLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=1
      +                          ; } } } el
 20687  01EB  087A               	movf	_DimmerLights22,w
 20688  01EC  0086               	movwf	6
 20689  01ED  3001               	movlw	1	; select bank2/3
 20690  01EE  0087               	movwf	7
 20691  01EF  1C01               	btfss	1,0
 20692  01F0  2A3B               	goto	i1l8458
 20693  01F1  3001               	movlw	1
 20694  01F2  00F3               	movwf	??_TMR0_ISR
 20695  01F3  087A               	movf	_DimmerLights22,w
 20696  01F4  3E03               	addlw	3
 20697  01F5  0086               	movwf	6
 20698  01F6  3001               	movlw	1	; select bank2/3
 20699  01F7  0087               	movwf	7
 20700  01F8  0873               	movf	??_TMR0_ISR,w
 20701  01F9  0781               	addwf	1,f
 20702  01FA  0021               	movlb	1	; select bank1
 20703  01FB  0839               	movf	_Dimmer^(0+128),w
 20704  01FC  3E02               	addlw	2
 20705  01FD  0086               	movwf	6
 20706  01FE  0187               	clrf	7
 20707  01FF  0801               	movf	1,w
 20708  0200  00F3               	movwf	??_TMR0_ISR
 20709  0201  01F4               	clrf	??_TMR0_ISR+1
 20710  0202  09F3               	comf	??_TMR0_ISR,f
 20711  0203  09F4               	comf	??_TMR0_ISR+1,f
 20712  0204  0AF3               	incf	??_TMR0_ISR,f
 20713  0205  1903               	skipnz
 20714  0206  0AF4               	incf	??_TMR0_ISR+1,f
 20715  0207  087A               	movf	_DimmerLights22,w
 20716  0208  3E04               	addlw	4
 20717  0209  0086               	movwf	6
 20718  020A  3001               	movlw	1	; select bank2/3
 20719  020B  0087               	movwf	7
 20720  020C  0801               	movf	1,w
 20721  020D  0773               	addwf	??_TMR0_ISR,w
 20722  020E  00F5               	movwf	??_TMR0_ISR+2
 20723  020F  0874               	movf	??_TMR0_ISR+1,w
 20724  0210  1803               	skipnc
 20725  0211  0A74               	incf	??_TMR0_ISR+1,w
 20726  0212  00F6               	movwf	??_TMR0_ISR+3
 20727  0213  087A               	movf	_DimmerLights22,w
 20728  0214  3E03               	addlw	3
 20729  0215  0086               	movwf	6
 20730  0216  3001               	movlw	1	; select bank2/3
 20731  0217  0087               	movwf	7
 20732  0218  0876               	movf	??_TMR0_ISR+3,w
 20733  0219  3A80               	xorlw	128
 20734  021A  3C80               	sublw	128
 20735  021B  1D03               	skipz
 20736  021C  2A1F               	goto	u785_25
 20737  021D  0875               	movf	??_TMR0_ISR+2,w
 20738  021E  0201               	subwf	1,w
 20739  021F                     u785_25:	
 20740  021F  1C03               	skipc
 20741  0220  2B75               	goto	i1l8524
 20742  0221  087A               	movf	_DimmerLights22,w
 20743  0222  3E03               	addlw	3
 20744  0223  0086               	movwf	6
 20745  0224  3001               	movlw	1	; select bank2/3
 20746  0225  0087               	movwf	7
 20747  0226  0181               	clrf	1
 20748  0227  087A               	movf	_DimmerLights22,w
 20749  0228  0086               	movwf	6
 20750  0229  3001               	movlw	1	; select bank2/3
 20751  022A  0087               	movwf	7
 20752  022B  1001               	bcf	1,0
 20753  022C  087A               	movf	_DimmerLights22,w
 20754  022D  3E07               	addlw	7
 20755  022E  0086               	movwf	6
 20756  022F  3001               	movlw	1	; select bank2/3
 20757  0230  0087               	movwf	7
 20758  0231  1401               	bsf	1,0
 20759  0232  087A               	movf	_DimmerLights22,w
 20760  0233  0086               	movwf	6
 20761  0234  3001               	movlw	1	; select bank2/3
 20762  0235  0087               	movwf	7
 20763  0236  1F01               	btfss	1,6
 20764  0237  2B75               	goto	i1l8524
 20765  0238  0020               	movlb	0	; select bank0
 20766  0239  160D               	bsf	13,4	;volatile
 20767  023A  2B75               	goto	i1l8524
 20768  023B                     i1l8458:	
 20769  023B  087A               	movf	_DimmerLights22,w
 20770  023C  3E07               	addlw	7
 20771  023D  0086               	movwf	6
 20772  023E  3001               	movlw	1	; select bank2/3
 20773  023F  0087               	movwf	7
 20774  0240  1C01               	btfss	1,0
 20775  0241  2B40               	goto	i1l8516
 20776  0242  087A               	movf	_DimmerLights22,w
 20777  0243  3E07               	addlw	7
 20778  0244  0086               	movwf	6
 20779  0245  3001               	movlw	1	; select bank2/3
 20780  0246  0087               	movwf	7
 20781  0247  1001               	bcf	1,0
 20782  0248  087A               	movf	_DimmerLights22,w
 20783  0249  0086               	movwf	6
 20784  024A  3001               	movlw	1	; select bank2/3
 20785  024B  0087               	movwf	7
 20786  024C  1C81               	btfss	1,1
 20787  024D  2B40               	goto	i1l8516
 20788  024E  3001               	movlw	1
 20789  024F  00F3               	movwf	??_TMR0_ISR
 20790  0250  0A7A               	incf	_DimmerLights22,w
 20791  0251  0086               	movwf	6
 20792  0252  3001               	movlw	1	; select bank2/3
 20793  0253  0087               	movwf	7
 20794  0254  0873               	movf	??_TMR0_ISR,w
 20795  0255  0781               	addwf	1,f
 20796  0256  0A7A               	incf	_DimmerLights22,w
 20797  0257  0086               	movwf	6
 20798  0258  3001               	movlw	1	; select bank2/3
 20799  0259  0087               	movwf	7
 20800  025A  087A               	movf	_DimmerLights22,w
 20801  025B  3E02               	addlw	2
 20802  025C  0084               	movwf	4
 20803  025D  3001               	movlw	1	; select bank2/3
 20804  025E  0085               	movwf	5
 20805  025F  0800               	movf	0,w
 20806  0260  0201               	subwf	1,w
 20807  0261  1C03               	skipc
 20808  0262  2B40               	goto	i1l8516
 20809  0263  0A7A               	incf	_DimmerLights22,w
 20810  0264  0086               	movwf	6
 20811  0265  3001               	movlw	1	; select bank2/3
 20812  0266  0087               	movwf	7
 20813  0267  0181               	clrf	1
 20814  0268  087A               	movf	_DimmerLights22,w
 20815  0269  0086               	movwf	6
 20816  026A  3001               	movlw	1	; select bank2/3
 20817  026B  0087               	movwf	7
 20818  026C  1D81               	btfss	1,3
 20819  026D  2AA4               	goto	i1l8484
 20820  026E  087A               	movf	_DimmerLights22,w
 20821  026F  0086               	movwf	6
 20822  0270  3001               	movlw	1	; select bank2/3
 20823  0271  0087               	movwf	7
 20824  0272  1A01               	btfsc	1,4
 20825  0273  2A8B               	goto	i1l8478
 20826  0274  087A               	movf	_DimmerLights22,w
 20827  0275  3E04               	addlw	4
 20828  0276  0086               	movwf	6
 20829  0277  3001               	movlw	1	; select bank2/3
 20830  0278  0087               	movwf	7
 20831  0279  303D               	movlw	61
 20832  027A  0201               	subwf	1,w
 20833  027B  1C03               	skipc
 20834  027C  2A85               	goto	i1l8476
 20835  027D  087A               	movf	_DimmerLights22,w
 20836  027E  3E04               	addlw	4
 20837  027F  0086               	movwf	6
 20838  0280  3001               	movlw	1	; select bank2/3
 20839  0281  0087               	movwf	7
 20840  0282  3001               	movlw	1
 20841  0283  0281               	subwf	1,f
 20842  0284  2B40               	goto	i1l8516
 20843  0285                     i1l8476:	
 20844  0285  087A               	movf	_DimmerLights22,w
 20845  0286  0086               	movwf	6
 20846  0287  3001               	movlw	1	; select bank2/3
 20847  0288  0087               	movwf	7
 20848  0289  1601               	bsf	1,4
 20849  028A  2B40               	goto	i1l8516
 20850  028B                     i1l8478:	
 20851  028B  087A               	movf	_DimmerLights22,w
 20852  028C  3E04               	addlw	4
 20853  028D  0086               	movwf	6
 20854  028E  3001               	movlw	1	; select bank2/3
 20855  028F  0087               	movwf	7
 20856  0290  3078               	movlw	120
 20857  0291  0201               	subwf	1,w
 20858  0292  1803               	skipnc
 20859  0293  2A9E               	goto	i1l8482
 20860  0294  3001               	movlw	1
 20861  0295  00F3               	movwf	??_TMR0_ISR
 20862  0296  087A               	movf	_DimmerLights22,w
 20863  0297  3E04               	addlw	4
 20864  0298  0086               	movwf	6
 20865  0299  3001               	movlw	1	; select bank2/3
 20866  029A  0087               	movwf	7
 20867  029B  0873               	movf	??_TMR0_ISR,w
 20868  029C  0781               	addwf	1,f
 20869  029D  2B40               	goto	i1l8516
 20870  029E                     i1l8482:	
 20871  029E  087A               	movf	_DimmerLights22,w
 20872  029F  0086               	movwf	6
 20873  02A0  3001               	movlw	1	; select bank2/3
 20874  02A1  0087               	movwf	7
 20875  02A2  1201               	bcf	1,4
 20876  02A3  2B40               	goto	i1l8516
 20877  02A4                     i1l8484:	
 20878  02A4  087A               	movf	_DimmerLights22,w
 20879  02A5  0086               	movwf	6
 20880  02A6  3001               	movlw	1	; select bank2/3
 20881  02A7  0087               	movwf	7
 20882  02A8  1D01               	btfss	1,2
 20883  02A9  2AEB               	goto	i1l8498
 20884  02AA  087A               	movf	_DimmerLights22,w
 20885  02AB  3E05               	addlw	5
 20886  02AC  0086               	movwf	6
 20887  02AD  3001               	movlw	1	; select bank2/3
 20888  02AE  0087               	movwf	7
 20889  02AF  087A               	movf	_DimmerLights22,w
 20890  02B0  3E04               	addlw	4
 20891  02B1  0084               	movwf	4
 20892  02B2  3001               	movlw	1	; select bank2/3
 20893  02B3  0085               	movwf	5
 20894  02B4  0800               	movf	0,w
 20895  02B5  0201               	subwf	1,w
 20896  02B6  1803               	skipnc
 20897  02B7  2AC0               	goto	i1l8490
 20898  02B8  087A               	movf	_DimmerLights22,w
 20899  02B9  3E04               	addlw	4
 20900  02BA  0086               	movwf	6
 20901  02BB  3001               	movlw	1	; select bank2/3
 20902  02BC  0087               	movwf	7
 20903  02BD  3001               	movlw	1
 20904  02BE  0281               	subwf	1,f
 20905  02BF  2AD7               	goto	i1l8494
 20906  02C0                     i1l8490:	
 20907  02C0  087A               	movf	_DimmerLights22,w
 20908  02C1  3E04               	addlw	4
 20909  02C2  0086               	movwf	6
 20910  02C3  3001               	movlw	1	; select bank2/3
 20911  02C4  0087               	movwf	7
 20912  02C5  087A               	movf	_DimmerLights22,w
 20913  02C6  3E05               	addlw	5
 20914  02C7  0084               	movwf	4
 20915  02C8  3001               	movlw	1	; select bank2/3
 20916  02C9  0085               	movwf	5
 20917  02CA  0800               	movf	0,w
 20918  02CB  0201               	subwf	1,w
 20919  02CC  1803               	skipnc
 20920  02CD  2AD7               	goto	i1l8494
 20921  02CE  3001               	movlw	1
 20922  02CF  00F3               	movwf	??_TMR0_ISR
 20923  02D0  087A               	movf	_DimmerLights22,w
 20924  02D1  3E04               	addlw	4
 20925  02D2  0086               	movwf	6
 20926  02D3  3001               	movlw	1	; select bank2/3
 20927  02D4  0087               	movwf	7
 20928  02D5  0873               	movf	??_TMR0_ISR,w
 20929  02D6  0781               	addwf	1,f
 20930  02D7                     i1l8494:	
 20931  02D7  087A               	movf	_DimmerLights22,w
 20932  02D8  3E05               	addlw	5
 20933  02D9  0086               	movwf	6
 20934  02DA  3001               	movlw	1	; select bank2/3
 20935  02DB  0087               	movwf	7
 20936  02DC  087A               	movf	_DimmerLights22,w
 20937  02DD  3E04               	addlw	4
 20938  02DE  0084               	movwf	4
 20939  02DF  3001               	movlw	1	; select bank2/3
 20940  02E0  0085               	movwf	5
 20941  02E1  0800               	movf	0,w
 20942  02E2  0601               	xorwf	1,w
 20943  02E3  1D03               	skipz
 20944  02E4  2B40               	goto	i1l8516
 20945  02E5  087A               	movf	_DimmerLights22,w
 20946  02E6  0086               	movwf	6
 20947  02E7  3001               	movlw	1	; select bank2/3
 20948  02E8  0087               	movwf	7
 20949  02E9  1101               	bcf	1,2
 20950  02EA  2B06               	goto	i1l8504
 20951  02EB                     i1l8498:	
 20952  02EB  087A               	movf	_DimmerLights22,w
 20953  02EC  0086               	movwf	6
 20954  02ED  3001               	movlw	1	; select bank2/3
 20955  02EE  0087               	movwf	7
 20956  02EF  1E81               	btfss	1,5
 20957  02F0  2B0C               	goto	i1l8506
 20958  02F1  087A               	movf	_DimmerLights22,w
 20959  02F2  3E04               	addlw	4
 20960  02F3  0086               	movwf	6
 20961  02F4  3001               	movlw	1	; select bank2/3
 20962  02F5  0087               	movwf	7
 20963  02F6  3001               	movlw	1
 20964  02F7  0281               	subwf	1,f
 20965  02F8  087A               	movf	_DimmerLights22,w
 20966  02F9  3E05               	addlw	5
 20967  02FA  0086               	movwf	6
 20968  02FB  3001               	movlw	1	; select bank2/3
 20969  02FC  0087               	movwf	7
 20970  02FD  087A               	movf	_DimmerLights22,w
 20971  02FE  3E04               	addlw	4
 20972  02FF  0084               	movwf	4
 20973  0300  3001               	movlw	1	; select bank2/3
 20974  0301  0085               	movwf	5
 20975  0302  0800               	movf	0,w
 20976  0303  0201               	subwf	1,w
 20977  0304  1C03               	skipc
 20978  0305  2B40               	goto	i1l8516
 20979  0306                     i1l8504:	
 20980  0306  087A               	movf	_DimmerLights22,w
 20981  0307  0086               	movwf	6
 20982  0308  3001               	movlw	1	; select bank2/3
 20983  0309  0087               	movwf	7
 20984  030A  1081               	bcf	1,1
 20985  030B  2B40               	goto	i1l8516
 20986  030C                     i1l8506:	
 20987  030C  3001               	movlw	1
 20988  030D  00F3               	movwf	??_TMR0_ISR
 20989  030E  087A               	movf	_DimmerLights22,w
 20990  030F  3E04               	addlw	4
 20991  0310  0086               	movwf	6
 20992  0311  3001               	movlw	1	; select bank2/3
 20993  0312  0087               	movwf	7
 20994  0313  0873               	movf	??_TMR0_ISR,w
 20995  0314  0781               	addwf	1,f
 20996  0315  087A               	movf	_DimmerLights22,w
 20997  0316  3E04               	addlw	4
 20998  0317  0086               	movwf	6
 20999  0318  3001               	movlw	1	; select bank2/3
 21000  0319  0087               	movwf	7
 21001  031A  087A               	movf	_DimmerLights22,w
 21002  031B  3E06               	addlw	6
 21003  031C  0084               	movwf	4
 21004  031D  3001               	movlw	1	; select bank2/3
 21005  031E  0085               	movwf	5
 21006  031F  0800               	movf	0,w
 21007  0320  0201               	subwf	1,w
 21008  0321  1C03               	skipc
 21009  0322  2B40               	goto	i1l8516
 21010  0323  087A               	movf	_DimmerLights22,w
 21011  0324  0086               	movwf	6
 21012  0325  3001               	movlw	1	; select bank2/3
 21013  0326  0087               	movwf	7
 21014  0327  1081               	bcf	1,1
 21015  0328  087A               	movf	_DimmerLights22,w
 21016  0329  0086               	movwf	6
 21017  032A  3001               	movlw	1	; select bank2/3
 21018  032B  0087               	movwf	7
 21019  032C  1301               	bcf	1,6
 21020  032D  087A               	movf	_DimmerLights22,w
 21021  032E  3E0C               	addlw	12
 21022  032F  0086               	movwf	6
 21023  0330  3001               	movlw	1	; select bank2/3
 21024  0331  0087               	movwf	7
 21025  0332  1401               	bsf	1,0
 21026  0333  0021               	movlb	1	; select bank1
 21027  0334  0839               	movf	_Dimmer^(0+128),w
 21028  0335  0086               	movwf	6
 21029  0336  0187               	clrf	7
 21030  0337  1401               	bsf	1,0
 21031  0338  0020               	movlb	0	; select bank0
 21032  0339  138E               	bcf	14,7	;volatile
 21033  033A  01F1               	clrf	i1setLoad_StatusOff@command
 21034  033B  0AF1               	incf	i1setLoad_StatusOff@command,f
 21035  033C  3002               	movlw	2
 21036  033D  319A  220C  3180   	fcall	i1_setLoad_StatusOff
 21037  0340                     i1l8516:	
 21038  0340  0020               	movlb	0	; select bank0
 21039  0341  1E0D               	btfss	13,4	;volatile
 21040  0342  2B75               	goto	i1l8524
 21041  0343  3001               	movlw	1
 21042  0344  00F3               	movwf	??_TMR0_ISR
 21043  0345  087A               	movf	_DimmerLights22,w
 21044  0346  3E08               	addlw	8
 21045  0347  0086               	movwf	6
 21046  0348  3001               	movlw	1	; select bank2/3
 21047  0349  0087               	movwf	7
 21048  034A  0873               	movf	??_TMR0_ISR,w
 21049  034B  0781               	addwf	1,f
 21050  034C  087A               	movf	_DimmerLights22,w
 21051  034D  3E04               	addlw	4
 21052  034E  0086               	movwf	6
 21053  034F  3001               	movlw	1	; select bank2/3
 21054  0350  0087               	movwf	7
 21055  0351  0801               	movf	1,w
 21056  0352  00F3               	movwf	??_TMR0_ISR
 21057  0353  01F4               	clrf	??_TMR0_ISR+1
 21058  0354  09F3               	comf	??_TMR0_ISR,f
 21059  0355  09F4               	comf	??_TMR0_ISR+1,f
 21060  0356  0AF3               	incf	??_TMR0_ISR,f
 21061  0357  1903               	skipnz
 21062  0358  0AF4               	incf	??_TMR0_ISR+1,f
 21063  0359  0873               	movf	??_TMR0_ISR,w
 21064  035A  3E78               	addlw	120
 21065  035B  00F5               	movwf	??_TMR0_ISR+2
 21066  035C  3000               	movlw	0
 21067  035D  3D74               	addwfc	??_TMR0_ISR+1,w
 21068  035E  00F6               	movwf	??_TMR0_ISR+3
 21069  035F  087A               	movf	_DimmerLights22,w
 21070  0360  3E08               	addlw	8
 21071  0361  0086               	movwf	6
 21072  0362  3001               	movlw	1	; select bank2/3
 21073  0363  0087               	movwf	7
 21074  0364  0876               	movf	??_TMR0_ISR+3,w
 21075  0365  3A80               	xorlw	128
 21076  0366  3C80               	sublw	128
 21077  0367  1D03               	skipz
 21078  0368  2B6B               	goto	u802_25
 21079  0369  0875               	movf	??_TMR0_ISR+2,w
 21080  036A  0201               	subwf	1,w
 21081  036B                     u802_25:	
 21082  036B  1C03               	skipc
 21083  036C  2B75               	goto	i1l8524
 21084  036D  087A               	movf	_DimmerLights22,w
 21085  036E  3E08               	addlw	8
 21086  036F  0086               	movwf	6
 21087  0370  3001               	movlw	1	; select bank2/3
 21088  0371  0087               	movwf	7
 21089  0372  0181               	clrf	1
 21090  0373  0020               	movlb	0	; select bank0
 21091  0374  120D               	bcf	13,4	;volatile
 21092  0375                     i1l8524:	
 21093                           
 21094                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 21095  0375  0021               	movlb	1	; select bank1
 21096  0376  0A6A               	incf	_Timer0^(0+128),w
 21097  0377  0086               	movwf	6
 21098  0378  0187               	clrf	7
 21099  0379  3001               	movlw	1
 21100  037A  0781               	addwf	1,f
 21101  037B  3141               	addfsr 1,1
 21102  037C  1803               	skipnc
 21103  037D  0A81               	incf	1,f
 21104                           
 21105                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 21106  037E  0A6A               	incf	_Timer0^(0+128),w
 21107  037F  0086               	movwf	6
 21108  0380  0187               	clrf	7
 21109  0381  3F40               	moviw [0]fsr1
 21110  0382  3AC8               	xorlw	200
 21111  0383  1D03               	skipz
 21112  0384  2B87               	goto	u803_25
 21113  0385  3F41               	moviw [1]fsr1
 21114  0386  3A00               	xorlw	0
 21115  0387                     u803_25:	
 21116  0387  1D03               	skipz
 21117  0388  2B94               	goto	i1l1687
 21118                           
 21119                           ;MCU_16f1518_B1.c: 115: {
 21120                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 21121  0389  0A6A               	incf	_Timer0^(0+128),w
 21122  038A  0086               	movwf	6
 21123  038B  0187               	clrf	7
 21124  038C  3000               	movlw	0
 21125  038D  3FC0               	movwi [0]fsr1
 21126  038E  3FC1               	movwi [1]fsr1
 21127                           
 21128                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 21129  038F  0869               	movf	_TMain^(0+128),w
 21130  0390  0086               	movwf	6
 21131  0391  3001               	movlw	1	; select bank2/3
 21132  0392  0087               	movwf	7
 21133  0393  1481               	bsf	1,1
 21134  0394                     i1l1687:	
 21135                           
 21136                           ;MCU_16f1518_B1.c: 118: }
 21137                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 21138  0394  0878               	movf	_Buz,w
 21139  0395  0086               	movwf	6
 21140  0396  3001               	movlw	1	; select bank2/3
 21141  0397  0087               	movwf	7
 21142  0398  1C81               	btfss	1,1
 21143  0399  0008               	return
 21144                           
 21145                           ;MCU_16f1518_B1.c: 122: {
 21146                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 21147  039A  0A78               	incf	_Buz,w
 21148  039B  0086               	movwf	6
 21149  039C  3001               	movlw	1	; select bank2/3
 21150  039D  0087               	movwf	7
 21151  039E  3001               	movlw	1
 21152  039F  0781               	addwf	1,f
 21153  03A0  3141               	addfsr 1,1
 21154  03A1  1803               	skipnc
 21155  03A2  0A81               	incf	1,f
 21156  03A3  0008               	return
 21157  03A4                     __end_of_TMR0_ISR:	
 21158                           
 21159                           	psect	text137
 21160  1A0C                     __ptext137:	
 21161 ;; *************** function i1_setLoad_StatusOff *****************
 21162 ;; Defined at:
 21163 ;;		line 282 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21164 ;; Parameters:    Size  Location     Type
 21165 ;;  lights          1    wreg     unsigned char 
 21166 ;;  command         1    0[COMMON] unsigned char 
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;  lights          1    1[COMMON] unsigned char 
 21169 ;; Return value:  Size  Location     Type
 21170 ;;		None               void
 21171 ;; Registers used:
 21172 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21173 ;; Tracked objects:
 21174 ;;		On entry : 0/0
 21175 ;;		On exit  : 0/0
 21176 ;;		Unchanged: 0/0
 21177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21178 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21181 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21182 ;;Total ram usage:        2 bytes
 21183 ;; Hardware stack levels used:    1
 21184 ;; This function calls:
 21185 ;;		Nothing
 21186 ;; This function is called by:
 21187 ;;		_TMR0_ISR
 21188 ;; This function uses a non-reentrant model
 21189 ;;
 21190                           
 21191                           
 21192                           ;psect for function i1_setLoad_StatusOff
 21193  1A0C                     i1_setLoad_StatusOff:	
 21194                           
 21195                           ;incstack = 0
 21196                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21197                           ;i1setLoad_StatusOff@lights stored from wreg
 21198  1A0C  00F2               	movwf	i1setLoad_StatusOff@lights
 21199                           
 21200                           ;OverLoad_B1.c: 284: Load->StatusOff=command;
 21201  1A0D  0020               	movlb	0	; select bank0
 21202  1A0E  086E               	movf	_Load,w
 21203  1A0F  3E46               	addlw	70
 21204  1A10  0086               	movwf	6
 21205  1A11  3002               	movlw	2	; select bank4/5
 21206  1A12  0087               	movwf	7
 21207  1A13  0871               	movf	i1setLoad_StatusOff@command,w
 21208  1A14  1081               	bcf	1,1
 21209  1A15  1D03               	skipz
 21210  1A16  1481               	bsf	1,1
 21211                           
 21212                           ;OverLoad_B1.c: 285: Load->SafeCount-=2;
 21213  1A17  086E               	movf	_Load,w
 21214  1A18  3E42               	addlw	66
 21215  1A19  0086               	movwf	6
 21216  1A1A  3002               	movlw	2	; select bank4/5
 21217  1A1B  0087               	movwf	7
 21218  1A1C  3002               	movlw	2
 21219  1A1D  0281               	subwf	1,f
 21220                           
 21221                           ;OverLoad_B1.c: 286: if(lights == 1)
 21222  1A1E  0872               	movf	i1setLoad_StatusOff@lights,w
 21223  1A1F  3A01               	xorlw	1
 21224  1A20  1D03               	skipz
 21225  1A21  2A28               	goto	i1l7948
 21226                           
 21227                           ;OverLoad_B1.c: 287: {
 21228                           ;OverLoad_B1.c: 288: Load->Lights1Status=0;
 21229  1A22  086E               	movf	_Load,w
 21230  1A23  3E43               	addlw	67
 21231  1A24  0086               	movwf	6
 21232  1A25  3002               	movlw	2	; select bank4/5
 21233  1A26  0087               	movwf	7
 21234  1A27  0181               	clrf	1
 21235  1A28                     i1l7948:	
 21236                           
 21237                           ;OverLoad_B1.c: 289: }
 21238                           ;OverLoad_B1.c: 290: if(lights == 2)
 21239  1A28  0872               	movf	i1setLoad_StatusOff@lights,w
 21240  1A29  3A02               	xorlw	2
 21241  1A2A  1D03               	skipz
 21242  1A2B  2A32               	goto	i1l7952
 21243                           
 21244                           ;OverLoad_B1.c: 291: {
 21245                           ;OverLoad_B1.c: 292: Load->Lights2Status=0;
 21246  1A2C  086E               	movf	_Load,w
 21247  1A2D  3E44               	addlw	68
 21248  1A2E  0086               	movwf	6
 21249  1A2F  3002               	movlw	2	; select bank4/5
 21250  1A30  0087               	movwf	7
 21251  1A31  0181               	clrf	1
 21252  1A32                     i1l7952:	
 21253                           
 21254                           ;OverLoad_B1.c: 293: }
 21255                           ;OverLoad_B1.c: 294: if(lights == 3)
 21256  1A32  0872               	movf	i1setLoad_StatusOff@lights,w
 21257  1A33  3A03               	xorlw	3
 21258  1A34  1D03               	skipz
 21259  1A35  0008               	return
 21260                           
 21261                           ;OverLoad_B1.c: 295: {
 21262                           ;OverLoad_B1.c: 296: Load->Lights3Status=0;
 21263  1A36  086E               	movf	_Load,w
 21264  1A37  3E45               	addlw	69
 21265  1A38  0086               	movwf	6
 21266  1A39  3002               	movlw	2	; select bank4/5
 21267  1A3A  0087               	movwf	7
 21268  1A3B  0181               	clrf	1
 21269  1A3C  0008               	return
 21270  1A3D                     __end_ofi1_setLoad_StatusOff:	
 21271                           
 21272                           	psect	text138
 21273  18C1                     __ptext138:	
 21274 ;; *************** function _IOC_ISR *****************
 21275 ;; Defined at:
 21276 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21277 ;; Parameters:    Size  Location     Type
 21278 ;;		None
 21279 ;; Auto vars:     Size  Location     Type
 21280 ;;		None
 21281 ;; Return value:  Size  Location     Type
 21282 ;;		None               void
 21283 ;; Registers used:
 21284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21285 ;; Tracked objects:
 21286 ;;		On entry : 0/0
 21287 ;;		On exit  : 0/0
 21288 ;;		Unchanged: 0/0
 21289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21294 ;;Total ram usage:        1 bytes
 21295 ;; Hardware stack levels used:    1
 21296 ;; Hardware stack levels required when called:    1
 21297 ;; This function calls:
 21298 ;;		_setDimmerReClock
 21299 ;; This function is called by:
 21300 ;;		_ISR
 21301 ;; This function uses a non-reentrant model
 21302 ;;
 21303                           
 21304                           
 21305                           ;psect for function _IOC_ISR
 21306  18C1                     _IOC_ISR:	
 21307                           
 21308                           ;MCU_16f1518_B1.c: 269: if(IOCIE && IOCBF2)
 21309                           
 21310                           ;incstack = 0
 21311                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21312  18C1  1D8B               	btfss	11,3	;volatile
 21313  18C2  0008               	return
 21314  18C3  0027               	movlb	7	; select bank7
 21315  18C4  1D16               	btfss	22,2	;volatile
 21316  18C5  0008               	return
 21317                           
 21318                           ;MCU_16f1518_B1.c: 270: {
 21319                           ;MCU_16f1518_B1.c: 271: IOCBF2=0;
 21320  18C6  1116               	bcf	22,2	;volatile
 21321                           
 21322                           ;MCU_16f1518_B1.c: 272: IOCIF=0;
 21323  18C7  100B               	bcf	11,0	;volatile
 21324                           
 21325                           ;MCU_16f1518_B1.c: 273: if(TMain->PowerON)
 21326  18C8  0021               	movlb	1	; select bank1
 21327  18C9  0869               	movf	_TMain^(0+128),w
 21328  18CA  0086               	movwf	6
 21329  18CB  3001               	movlw	1	; select bank2/3
 21330  18CC  0087               	movwf	7
 21331  18CD  1C01               	btfss	1,0
 21332  18CE  0008               	return
 21333                           
 21334                           ;MCU_16f1518_B1.c: 274: {
 21335                           ;MCU_16f1518_B1.c: 278: setDimmerReClock();
 21336  18CF  31A6  26D6  3198   	fcall	_setDimmerReClock
 21337                           
 21338                           ;MCU_16f1518_B1.c: 279: if(RB2)
 21339  18D2  0020               	movlb	0	; select bank0
 21340  18D3  1D0D               	btfss	13,2	;volatile
 21341  18D4  28DC               	goto	i1l8354
 21342                           
 21343                           ;MCU_16f1518_B1.c: 280: {
 21344                           ;MCU_16f1518_B1.c: 281: Dimmer->Correction=0;
 21345  18D5  0021               	movlb	1	; select bank1
 21346  18D6  0839               	movf	_Dimmer^(0+128),w
 21347  18D7  3E02               	addlw	2
 21348  18D8  0086               	movwf	6
 21349  18D9  0187               	clrf	7
 21350  18DA  0181               	clrf	1
 21351                           
 21352                           ;MCU_16f1518_B1.c: 282: }
 21353  18DB  0008               	return
 21354  18DC                     i1l8354:	
 21355                           
 21356                           ;MCU_16f1518_B1.c: 283: else
 21357                           ;MCU_16f1518_B1.c: 284: {
 21358                           ;MCU_16f1518_B1.c: 285: Dimmer->Correction=8;
 21359  18DC  3008               	movlw	8
 21360  18DD  00F1               	movwf	??_IOC_ISR
 21361  18DE  0021               	movlb	1	; select bank1
 21362  18DF  0839               	movf	_Dimmer^(0+128),w
 21363  18E0  3E02               	addlw	2
 21364  18E1  0086               	movwf	6
 21365  18E2  0187               	clrf	7
 21366  18E3  0871               	movf	??_IOC_ISR,w
 21367  18E4  0081               	movwf	1
 21368  18E5  0008               	return
 21369  18E6                     __end_of_IOC_ISR:	
 21370                           
 21371                           	psect	text139
 21372  26D6                     __ptext139:	
 21373 ;; *************** function _setDimmerReClock *****************
 21374 ;; Defined at:
 21375 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21376 ;; Parameters:    Size  Location     Type
 21377 ;;		None
 21378 ;; Auto vars:     Size  Location     Type
 21379 ;;		None
 21380 ;; Return value:  Size  Location     Type
 21381 ;;		None               void
 21382 ;; Registers used:
 21383 ;;		wreg, fsr1l, fsr1h
 21384 ;; Tracked objects:
 21385 ;;		On entry : 0/0
 21386 ;;		On exit  : 0/0
 21387 ;;		Unchanged: 0/0
 21388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21393 ;;Total ram usage:        0 bytes
 21394 ;; Hardware stack levels used:    1
 21395 ;; This function calls:
 21396 ;;		Nothing
 21397 ;; This function is called by:
 21398 ;;		_IOC_ISR
 21399 ;; This function uses a non-reentrant model
 21400 ;;
 21401                           
 21402                           
 21403                           ;psect for function _setDimmerReClock
 21404  26D6                     _setDimmerReClock:	
 21405                           
 21406                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 21407                           
 21408                           ;incstack = 0
 21409                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21410  26D6  30FF               	movlw	255
 21411  26D7  0020               	movlb	0	; select bank0
 21412  26D8  0095               	movwf	21	;volatile
 21413                           
 21414                           ;MCU_16f1518_B1.c: 136: if(!DimmerLights11->GO)
 21415  26D9  0879               	movf	_DimmerLights11,w
 21416  26DA  0086               	movwf	6
 21417  26DB  3001               	movlw	1	; select bank2/3
 21418  26DC  0087               	movwf	7
 21419  26DD  1801               	btfsc	1,0
 21420  26DE  2EE4               	goto	i1l1692
 21421                           
 21422                           ;MCU_16f1518_B1.c: 137: {
 21423                           ;MCU_16f1518_B1.c: 138: DimmerLights11->GO=1;
 21424  26DF  0879               	movf	_DimmerLights11,w
 21425  26E0  0086               	movwf	6
 21426  26E1  3001               	movlw	1	; select bank2/3
 21427  26E2  0087               	movwf	7
 21428  26E3  1401               	bsf	1,0
 21429  26E4                     i1l1692:	
 21430                           
 21431                           ;MCU_16f1518_B1.c: 139: }
 21432                           ;MCU_16f1518_B1.c: 158: if(!DimmerLights22->GO)
 21433  26E4  087A               	movf	_DimmerLights22,w
 21434  26E5  0086               	movwf	6
 21435  26E6  3001               	movlw	1	; select bank2/3
 21436  26E7  0087               	movwf	7
 21437  26E8  1801               	btfsc	1,0
 21438  26E9  0008               	return
 21439                           
 21440                           ;MCU_16f1518_B1.c: 159: {
 21441                           ;MCU_16f1518_B1.c: 160: DimmerLights22->GO=1;
 21442  26EA  087A               	movf	_DimmerLights22,w
 21443  26EB  0086               	movwf	6
 21444  26EC  3001               	movlw	1	; select bank2/3
 21445  26ED  0087               	movwf	7
 21446  26EE  1401               	bsf	1,0
 21447  26EF  0008               	return
 21448  26F0                     __end_of_setDimmerReClock:	
 21449                           
 21450                           	psect	text140
 21451  2476                     __ptext140:	
 21452 ;; *************** function _INT_ISR *****************
 21453 ;; Defined at:
 21454 ;;		line 225 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 21455 ;; Parameters:    Size  Location     Type
 21456 ;;		None
 21457 ;; Auto vars:     Size  Location     Type
 21458 ;;		None
 21459 ;; Return value:  Size  Location     Type
 21460 ;;		None               void
 21461 ;; Registers used:
 21462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21463 ;; Tracked objects:
 21464 ;;		On entry : 0/0
 21465 ;;		On exit  : 0/0
 21466 ;;		Unchanged: 0/0
 21467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21472 ;;Total ram usage:        0 bytes
 21473 ;; Hardware stack levels used:    1
 21474 ;; Hardware stack levels required when called:    2
 21475 ;; This function calls:
 21476 ;;		_setRF_ReceiveGO
 21477 ;; This function is called by:
 21478 ;;		_ISR
 21479 ;; This function uses a non-reentrant model
 21480 ;;
 21481                           
 21482                           
 21483                           ;psect for function _INT_ISR
 21484  2476                     _INT_ISR:	
 21485                           
 21486                           ;MCU_16f1518_B1.c: 227: if(INTE && INTF)
 21487                           
 21488                           ;incstack = 0
 21489                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21490  2476  1E0B               	btfss	11,4	;volatile
 21491  2477  0008               	return
 21492  2478  1C8B               	btfss	11,1	;volatile
 21493  2479  0008               	return
 21494                           
 21495                           ;MCU_16f1518_B1.c: 228: {
 21496                           ;MCU_16f1518_B1.c: 229: INTF=0;
 21497  247A  108B               	bcf	11,1	;volatile
 21498                           
 21499                           ;MCU_16f1518_B1.c: 230: INTE=0;
 21500  247B  120B               	bcf	11,4	;volatile
 21501                           
 21502                           ;MCU_16f1518_B1.c: 231: setRF_ReceiveGO(1,1);
 21503  247C  01F3               	clrf	setRF_ReceiveGO@command
 21504  247D  0AF3               	incf	setRF_ReceiveGO@command,f
 21505  247E  3001               	movlw	1
 21506  247F  31A4  246A         	fcall	_setRF_ReceiveGO
 21507  2481  0008               	return
 21508  2482                     __end_of_INT_ISR:	
 21509                           
 21510                           	psect	text141
 21511  246A                     __ptext141:	
 21512 ;; *************** function _setRF_ReceiveGO *****************
 21513 ;; Defined at:
 21514 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21515 ;; Parameters:    Size  Location     Type
 21516 ;;  rf              1    wreg     unsigned char 
 21517 ;;  command         1    2[COMMON] unsigned char 
 21518 ;; Auto vars:     Size  Location     Type
 21519 ;;  rf              1    3[COMMON] unsigned char 
 21520 ;; Return value:  Size  Location     Type
 21521 ;;		None               void
 21522 ;; Registers used:
 21523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21524 ;; Tracked objects:
 21525 ;;		On entry : 0/0
 21526 ;;		On exit  : 0/0
 21527 ;;		Unchanged: 0/0
 21528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21529 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21533 ;;Total ram usage:        2 bytes
 21534 ;; Hardware stack levels used:    1
 21535 ;; Hardware stack levels required when called:    1
 21536 ;; This function calls:
 21537 ;;		i1_RfPointSelect
 21538 ;; This function is called by:
 21539 ;;		_INT_ISR
 21540 ;; This function uses a non-reentrant model
 21541 ;;
 21542                           
 21543                           
 21544                           ;psect for function _setRF_ReceiveGO
 21545  246A                     _setRF_ReceiveGO:	
 21546                           
 21547                           ;incstack = 0
 21548                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21549                           ;setRF_ReceiveGO@rf stored from wreg
 21550  246A  00F4               	movwf	setRF_ReceiveGO@rf
 21551                           
 21552                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21553  246B  0874               	movf	setRF_ReceiveGO@rf,w
 21554  246C  31A3  23FD         	fcall	i1_RfPointSelect
 21555                           
 21556                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21557  246E  087C               	movf	_RF,w
 21558  246F  0086               	movwf	6
 21559  2470  0187               	clrf	7
 21560  2471  0873               	movf	setRF_ReceiveGO@command,w
 21561  2472  1081               	bcf	1,1
 21562  2473  1D03               	skipz
 21563  2474  1481               	bsf	1,1
 21564  2475  0008               	return
 21565  2476                     __end_of_setRF_ReceiveGO:	
 21566                           
 21567                           	psect	text142
 21568  23FD                     __ptext142:	
 21569 ;; *************** function i1_RfPointSelect *****************
 21570 ;; Defined at:
 21571 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21572 ;; Parameters:    Size  Location     Type
 21573 ;;  rf              1    wreg     unsigned char 
 21574 ;; Auto vars:     Size  Location     Type
 21575 ;;  rf              1    1[COMMON] unsigned char 
 21576 ;; Return value:  Size  Location     Type
 21577 ;;		None               void
 21578 ;; Registers used:
 21579 ;;		wreg
 21580 ;; Tracked objects:
 21581 ;;		On entry : 0/0
 21582 ;;		On exit  : 0/0
 21583 ;;		Unchanged: 0/0
 21584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21588 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21589 ;;Total ram usage:        2 bytes
 21590 ;; Hardware stack levels used:    1
 21591 ;; This function calls:
 21592 ;;		Nothing
 21593 ;; This function is called by:
 21594 ;;		_setRF_ReceiveGO
 21595 ;; This function uses a non-reentrant model
 21596 ;;
 21597                           
 21598                           
 21599                           ;psect for function i1_RfPointSelect
 21600  23FD                     i1_RfPointSelect:	
 21601                           
 21602                           ;incstack = 0
 21603                           ; Regs used in i1_RfPointSelect: [wreg]
 21604                           ;i1RfPointSelect@rf stored from wreg
 21605  23FD  00F2               	movwf	i1RfPointSelect@rf
 21606                           
 21607                           ;RF_Control_B1.c: 10: if(rf == 1)
 21608  23FE  0872               	movf	i1RfPointSelect@rf,w
 21609  23FF  3A01               	xorlw	1
 21610  2400  1D03               	skipz
 21611  2401  0008               	return
 21612                           
 21613                           ;RF_Control_B1.c: 11: {
 21614                           ;RF_Control_B1.c: 12: RF=&RF1;
 21615  2402  30E4               	movlw	_RF1& (0+255)
 21616  2403  00F1               	movwf	??i1_RfPointSelect
 21617  2404  0871               	movf	??i1_RfPointSelect,w
 21618  2405  00FC               	movwf	_RF
 21619  2406  0008               	return
 21620  2407                     __end_ofi1_RfPointSelect:	
 21621  007E                     btemp	set	126	;btemp
 21622  007E                     pic14e$flags	set	126
 21623  007E                     wtemp	set	126
 21624  007E                     wtemp0	set	126
 21625  0080                     wtemp1	set	128
 21626  0082                     wtemp2	set	130
 21627  0084                     wtemp3	set	132
 21628  0086                     wtemp4	set	134
 21629  0088                     wtemp5	set	136
 21630  007F                     wtemp6	set	127
 21631  007E                     ttemp	set	126
 21632  007E                     ttemp0	set	126
 21633  0081                     ttemp1	set	129
 21634  0084                     ttemp2	set	132
 21635  0087                     ttemp3	set	135
 21636  007F                     ttemp4	set	127
 21637  007E                     ltemp	set	126
 21638  007E                     ltemp0	set	126
 21639  0082                     ltemp1	set	130
 21640  0086                     ltemp2	set	134
 21641  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         283
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      75
    BANK2            80      0      78
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK1[2]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK3[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights2(BANK2[13]), DimmerLights1(BANK2[13]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setDelayOff_GO
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setBuz
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_CC2500_WriteCommand
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setPercentValue->___fttol
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_getPercentValue
    _getPercentValue->___fttol
    ___fttol->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setBuz
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   96765
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8182
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8182
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8182
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    9427
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0    9427
                                             11 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    2596
                                              5 BANK0      2     2      0
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    3443
                                              8 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1258
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1070
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1070
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23789
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   23789
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22785
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   21168
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    5201
                                             10 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6671
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6671
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6671
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2201
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8198
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6702
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     522
                                              4 BANK0      2     1      1
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4818
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2813
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1167
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1167
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    2     2      0     392
                                              7 BANK0      2     2      0
                _Flash_Memory_Modify
         _getDimmerLights_StatusFlag
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10598
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10519
                                             65 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    6854
                                             61 BANK0      4     3      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1791
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1039
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0   11135
                                             66 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       3     3      0   11135
                                             63 BANK0      3     3      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4648
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4648
                                             10 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1     668
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (6) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
       _getPercentValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
     _getDimmerLights_StatusFlag
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _CC2500_WriteCommand
             _CC2500_WriteByte
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _CC2500_WriteCommand
             _CC2500_WriteByte
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     193      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     193      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Sep 12 17:32:16 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007B  
                                     _RD 0CA8                                       _RF 007C  
                __end_of_CC2500_WriteREG 26A4                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 2643  
             _getDimmerLights_StatusFlag 262D                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1F41                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0060  
              __end_of_setLoad_StatusOff 1A6E                     _setDimmerLights_Main 15D1  
                           ___ftadd@sign 0048                                      l312 1D2D  
                                    l313 1D32                                      l403 2714  
                                    l323 1103                                      l307 1D03  
                                    l340 1A00                                      l316 1D35  
                                    l343 1A06                                      l327 1114  
                                    l409 18EB                                      l373 267E  
                                    l374 2680                                      l385 2693  
                                    l706 19DA                                      l397 2528  
                                    l923 119B                                      l877 25BB  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0015                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0166  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E4                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 0154  
                                    _Sw2 015D                                      _Buz 0078  
              setDimmerLights_Adj@status 005D                 __end_of_CC2500_WriteByte 268B  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2407  
                        __end_of_ADC_Set 23BC                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0061  
                        _setDimmerLights 0801                    _setDimmerLights_ERROR 1DD8  
                  _setDimmerLights_AdjRF 189E                    _setDimmerLights_AdjGo 2580  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 2550  
                                   ?_ISR 0071                          _PowerFault_Main 237C  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 18E6  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
               ?_DimmerLightsPointSelect 0071                                     l1720 1870  
                                   l3241 2768                                     l3402 1FD2  
                        __end_of_IOC_Set 24CC                                     l3431 0C80  
                                   l2463 0ED5                                     l3408 1FE9  
                                   l1748 1A98                                     l2740 1BDD  
                                   l2708 07F5                                     l2726 2622  
                                   l6202 0C10                                     l6220 0C39  
                                   l2924 1000                                     l6230 0C5B  
                                   l6310 0A7B                                     l6160 1FBE  
                                   l6152 1FA8                                     l6240 0C7C  
                                   l6232 0C5F                                     l6208 0C1F  
                                   l6226 0C4C                                     l6156 1FAF  
                                   l6244 0C92                                     l6228 0C56  
                                   l6340 0AE8                                     l6332 0AD4  
                                   l6316 0A91                                     l6166 1FD7  
                                   l6158 1FB9                                     l6238 0C72  
                                   l6416 264F                                     l6168 1FDF  
                                   l6248 0CA4                                     l6344 0AF0  
                                   l6328 0ACC                                     l6360 166F  
                                   l6440 19D2                                     l6432 19C6  
                                   l6424 19BA                                     l6600 1F33  
                                   l6186 27C7                                     l6258 0CBF  
                                   l6274 09E8                                     l6268 09D2  
                                   l6380 16AD                                     l7500 1BAC  
                                   l6436 19CC                                     l6428 19C0  
                                   l6198 0C09                                     l6390 16C6  
                                   l6462 27F5                                     l9022 1126  
                                   l6552 1E7A                                     l6480 25CF  
                                   l6296 0A42                                     l6288 0A29  
                                   l6720 2758                                     l9024 113E  
                                   l9050 1907                                     l6394 16D4  
                                   l6386 16BA                                     l6378 169F  
                                   l6458 27EA                                     l6388 16C3  
                                   l9060 1054                                     l9036 1157  
                                   l9132 1C80                                     l6734 263D  
                                   l6718 2752                                     l6590 1F14  
                                   l9048 18FC                                     l9224 11D4  
                                   l6690 1ADE                                     l6834 1BCB  
                                   l6594 1F1A                                     l9092 1A7C  
                                   l9148 100F                                     l6596 1F27  
                                   l9172 1D9D                                     l9244 121D  
                                   l9228 11E4                                     l9500 0F20  
                                   l9502 0F29                                     l7496 1BA5  
                                   l9184 1DB3                                     l8730 1F51  
                                   l8714 1A59                                     l9370 1611  
                                   l9354 15E0                                     l8804 0851  
                                   l9460 12BB                                     l7932 1B63  
                                   l7924 1B45                                     l9620 156C  
                                   l9276 13C5                                     l9540 0FCE  
                                   l9524 0F8F                                     l8662 2762  
                                   l8734 1F57                                     l8718 1A63  
                                   l9358 15ED                                     l9454 12A2  
                                   l7926 1B51                                     l9534 0FBD  
                                   l8760 1F89                                     l8744 1F67  
                                   l8752 1F73                                     l9376 1623  
                                   l9464 1302                                     l7936 1B6C  
                                   l9480 1CDD                                     l6992 1D15  
                                   l9632 158B                                     l9616 1565  
                                   l9704 06B5                                     l9536 0FC3  
                                   l8682 1425                                     l8738 1F5D  
                                   l9810 0D50                                     l9562 0E15  
                                   l8842 16FA                                     l9650 15BC  
                                   l9714 06E7                                     l7980 09A0  
                                   l8764 1F8F                                     l8748 1F6D  
                                   l9388 164F                                     l9564 0E1F  
                                   l8852 171E                                     l7974 0978  
                                   l7982 09A6                                     l8686 1443  
                                   l8782 1AC5                                     l9646 15B1  
                                   l9902 1273                                     l8768 1F95  
                                   l9584 0E88                                     l8856 1734  
                                   l9728 072C                                     _CFGS 0CAE  
                                   l7986 09AD                                     l8778 1ABA  
                                   l8882 117B                                     l9930 14AC  
                                   l9738 075F                                     l9596 0EC4  
                                   l9588 0EA7                                     l9676 0667  
                                   l8886 118E                                     l9598 0ECA  
                                   l8990 17EE                                     l8982 17DC  
                                   l9686 0677                                     l9678 066D  
                                   l9960 10F7                                     l8888 1193  
                                   l8976 17C0                                     l9688 067F  
                                   l8994 17F7                                     l8986 17E5  
                                   l9890 090E                                     l9874 08CF  
                                   l9868 089E                                     l9958 10EF  
                                   l9990 041E                                     l9974 03D1  
                                   l9878 08D7                                     l9996 044C  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 2482  
                                   _LATC 010E                                     u4125 1FB4  
                                   u5040 1E39                                     u4145 1FCD  
                                   u4315 0C3A                                     u5045 1E37  
                                   u4165 1FDA                                     u4405 0C73  
                                   u4345 0C4D                                     u4505 0A39  
                                   u4195 1FF0                                     u4515 0A43  
                                   _PEIE 005E                                     u7005 1B64  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 0C60                                     u4625 0AF1  
                                   u4475 09FA                                     u4635 0AF7  
                                   u4555 0A9D                                     u4485 0A0A  
                                   u4565 0AAD                                     u4725 16BB  
                                   u4495 0A2A                                     u4585 0AD5  
                                   u4665 1676                                     u7075 0939  
                                   u4595 0ADB                                     u8205 2769  
                                   u8215 276E                                     u4695 16A0  
                                   u8490 23FB                                     u6965 1B48  
                                   u6985 1B52                                     u8755 18F1  
                                   u6995 1B5C                                     u9905 08FA  
                                   _LWLO 0CAD                                     _RFSW 00BC  
                                   u9935 1262                                     _TMR0 0015  
                                   u9865 08B9                                     u9945 128B  
                                   u9965 1C24                                     u9985 147B  
                                   u9995 14C2                          __end_of_INT_Set 239B  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 0148                                     _Load 006E  
                                   _Temp 007D                                     _main 130A  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 237C  
                    __end_of_DlyOff_Main 1551                          __end_of_RF_Main 0800  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 26D6  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1005  
                    DelayTimejudge@value 0022                            _RfPointSelect 241D  
             __end_of_setRFSW_AdjControl 1BF3                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 010E                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 24B2                                    l10010 04E1  
                                  l10016 04FD                                    l10120 1331  
                                  l10034 0565                                    l10018 0515  
                                  l10028 054C                                    l10124 1347  
                                  l10062 05EE                                    l10046 059C  
                                  l10054 05D4                                    l10056 05D7  
                                  l10068 0601                    ?_setDimmerLights_Main 0071  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 2617  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0CD7                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0A64                                    u10115 0498  
                                  u10045 10D6                          __end_of___ftmul 0B18  
                                  u10165 052D                          __end_of___fttol 16DD  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1B73                   _setDimmerLights_Switch 2530  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E6  
                                  _RFSW2 00E7                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 00E9  
                          setRF_Learn@rf 0023                                    _MainT 1461  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                                  _Temp1 0120                         __end_of_TMR0_ISR 03A4  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 24D9  
                                  _getAD 1866                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 11CA            DimmerLights_Exceptions@status 002A  
                          ___ftpack@sign 0024                           _setLoad_Enable 2560  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 0380                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0071  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 25B1  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1E2F              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0071  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0071  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0071  
              setDimmerLights_Main@clear 0061                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1E8A  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0071                        ??_Sw_DimmerOnFunc 0025  
                   __end_of_getLoad_Safe 245F                        ??_setPercentValue 0059  
                           __end_of_main 1379                      ?_setRF_DimmerLights 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 087D                     _setSw_Initialization 23DB  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0071  
                _setControl_Lights_Table 176D                   ?_Buzzer_Initialization 0071  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 237F  
                             _Receive_GO 0381                               _Receive_OK 0382  
                              ??_IOC_ISR 0071                   ?_setDimmerLights_ERROR 0071  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 25C4  
                                 ?_MainT 0071                   ?_setDimmerLights_AdjRF 0071  
                              ??_INT_ISR 0075                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 2570  
                   __end_of_getTemp_Safe 23B5                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
                            _DlyOff_Main 14D8                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                        ?_getPowerFault_AD 0071  
                         setRF_Enable@rf 0025                         __end_of___awtoft 27DE  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 2000  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 2540  
                                 i1l1692 26E4                                   i1l1687 0394  
                                 i1l8410 0136                                   i1l8402 0114  
                                 i1l8404 011A                                   i1l8414 014D  
                                 i1l8504 0306                                   i1l8424 017C  
                                 i1l8354 18DC                                   i1l8506 030C  
                                 i1l8426 0182                                   i1l8418 0161  
                                 i1l8516 0340                                   i1l8524 0375  
                                 i1l8436 01B6                                   i1l8444 01EB  
                                 i1l8490 02C0                                   i1l8482 029E  
                                 i1l8458 023B                                   i1l8378 00B1  
                                 i1l8476 0285                                   i1l8484 02A4  
                                 i1l8396 00FB                                   i1l8494 02D7  
                                 i1l8478 028B                                   i1l8398 0101  
                                 i1l7952 1A32                                   i1l8498 02EB  
                                 i1l7948 1A28                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                                   u802_25 036B  
                                 u803_25 0387                       __size_of_Load_Main 02AC  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u766_25 0095                                   u783_25 01E1  
                                 _IO_Set 26BD                                   u785_25 021F  
                     DelayTime_1us@count 0020                               _VarProduct 01A0  
                  _Dimmer_Initialization 23A7           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 25ED                                   _Dimmer 00B9  
                                 _DlySw1 00CB                                   _DlySw2 00D0  
            __size_of_setLoad_Exceptions 0044               __end_of_Mcu_Initialization 2672  
                    __end_of_Buzzer_Main 09BB                                   _Memory 00E8  
                                 _Timer0 00EA       __end_of_setDimmerLights_TriggerAdj 25A0  
             _setDimmerLights_TriggerAdj 2590            setDimmerLights_Switch@command 0022  
                                 ___wmul 275F                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 23FD  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0061  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 1F41                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 13EA                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 24BF         ??_setDimmerLights_Initialization 005F  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 25D8                          ?_setLoad_Enable 0071  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0024  
                         _setTemp_Enable 243E                          _RfSWPointSelect 2617  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1000  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1EE5  
       __end_of_CC2500_registers_address 182F     __end_of_setPowerFault_Initialization 2580  
  __size_of_setPowerFault_Initialization 0010             _setPowerFault_Initialization 2570  
                __end_of__initialization 0055              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 14D8  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0028                             __pidataBANK3 279C  
                          __end_of_getAD 187C                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0061                       _LED_Initialization 249A  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0065  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 0650                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 26F0                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                   __end_of_setTemp_Enable 2449  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0025                           _DimmerLights11 0079  
                         _DimmerLights22 007A                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 237F                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                            _Buzzer_Main 0913                        ??_setRFSW_Control 002A  
                      __end_of_Temp_Main 2385                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 23C3                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 23D3  
                          ??_Switch_Main 0030                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 2407                      i1_setLoad_StatusOff 1A0C  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 130A                      _CC2500_WriteCommand 2520  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0062  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 087D                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 23B5                _PowerFault_Initialization 2379  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1230  
           __end_of_setRF_Initialization 23C3                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1BB3  
                __end_of_RfSWPointSelect 262D                        Sw_DimmerOnFunc@sw 0026  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 18C1  
                        ?_setTemp_Enable 0071                                  _IOC_Set 24BF  
                   __size_of_setLog_Code 0048                                  _INT_ISR 2476  
                                _INT_Set 2395                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 10A0                        _Flash_Memory_Read 26A4  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2454                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 07FC  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_setControl_Lights_Table 1800                              ?_TouchPower 0071  
                        _Sw_DimmerOnFunc 11CA                          _setPercentValue 1D40  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0071                                  _Dimmer1 00E1  
           __end_of_CC2500_FrequencyCabr 248E                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D9                                  _VarLED2 00DD  
                      __end_of_getRxData 1DD8               __end_of_setPowerFault_Main 0EDD  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 2550  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 23AE                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 2540                                  ___ftadd 0BE1  
                         ??_setSw_Enable 0022                                  ___ftdiv 09BB  
                        __size_of___wmul 001E                                  ___ftmul 0A64  
                                ___fttol 1656                      __end_of_Switch_Main 23EB  
                                ___lwdiv 1B3C                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 1230                                  __ptext2 1BF3  
                                __ptext3 087D                                  __ptext4 1866  
                                __ptext5 2382                                  __ptext6 0EDD  
                                __ptext7 1C76                                  __ptext8 237F  
                                __ptext9 245F                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0025  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1101                __end_of_Flash_Memory_Read 26BD  
                             _setRF_Main 1551                            _DelayOff_Main 23CB  
                      _DimmerLights_Main 2433                        __end_of_setINT_GO 23FD  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 241D                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 2389                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 238D            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 27DE                      _DelayOffPointSelect 2643  
                                clrloop0 23A2           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 24E6                     end_of_initialization 0055  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 2428  
                      _CC2500_InitSetREG 1959                            _DelayTime_1us 18E6  
                      __end_of_setTxData 0BE1               __end_of_Flash_Memory_Write 1A9F  
                                init_ram 239B                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0063                     Flash_Memory_Read@ret 0023  
                                initloop 239C                               _setSw_Main 0650  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 270B  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 25A0  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 000B                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1101                            _CC2500_TxData 1CFC  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1B3C  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0041            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 129C  
                _DimmerLights_Exceptions 1165                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 23EB  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1A9F         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 243E                       _Mcu_Initialization 265A  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4710 002D                          _setSw_Main$4711 002E  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 2800  
                __end_of_Sw_DimmerOnFunc 1230                  __end_of_setPercentValue 1D86  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1983  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 103F  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 005B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 103F  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 2726  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 1CFC  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 26D6  
                   _setRF_Initialization 23BC                              _Switch_Main 23E3  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 25B1                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 25D8                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 005D  
              __size_of_Sw_DimmerAdjFunc 0026                     setRF_DimmerLights@on 0020  
                         __end_of___wmul 277D                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 034B          __size_of_setOverTemp_Exceptions 0042  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0085  
                         __end_of_setLED 1F9F                           __end_of_setBuz 1461  
                          _setLoad_Count 2602          _getDimmerLights_StatusFlag$1819 0022  
                   _CC2500_FrequencyCabr 2482                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0061  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 16DD                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1AD1                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 270B                                _Load_Main 03A4  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 279C  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 1000  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 2742                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D5  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 2520                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 2428                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C4                                _Temp_Main 2382  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 005E                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C0  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 002D  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 238D               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1B06                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4359 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0024                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007C  
                          DlyOff_Main@sw 002C                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1C76                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 012E  
                          _DimmerLights2 013B                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 0036  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 189E  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E8  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                             ?_Temp_Main 0071                      __size_of_setRF_Main 0080  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0071                   _setTemp_Initialization 245F  
                       _getPowerFault_AD 1BF3        __size_of_setPowerFault_Exceptions 003A  
    __end_of_Flash_Memory_Initialization 0DCF              _Flash_Memory_Initialization 0CD7  
              ?_setPowerFault_Exceptions 0071                                __ptext100 0BE1  
                              __ptext101 27BC                                __ptext110 1E2F  
                              __ptext102 1F9F                                __ptext111 2502  
                              __ptext103 23A7                                __ptext120 2643  
                              __ptext112 2617                                __ptext104 23CB  
                              __ptext121 25D8                                __ptext113 2540  
                              __ptext105 14D8                                __ptext130 2385  
                              __ptext122 238D                                __ptext114 2530  
                              __ptext106 0B18                                __ptext131 2520  
                              __ptext123 19DC                                __ptext115 25B1  
                              __ptext107 241D                                __ptext140 2476  
                              __ptext132 2672                                __ptext124 1959  
                              __ptext116 13EA                                __ptext108 2511  
                              __ptext141 246A                                __ptext133 0913  
                              __ptext125 277D                                __ptext117 275F  
                              __ptext109 25C4                                 ?___ftadd 003E  
                              __ptext142 23FD                                __ptext134 2407  
                              __ptext126 268B                                __ptext118 23C3  
                              __ptext127 2482                                __ptext119 2412  
                              __ptext136 0059                                __ptext128 18E6  
                              __ptext137 1A0C                                __ptext129 2389  
                              __ptext138 18C1                                __ptext139 26D6  
                              _getRxData 1D86                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 176D  
                        _setRF_ReceiveGO 246A                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 2412                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 1005                       _setPowerFault_Main 0DCF  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 0164            __end_of_setDimmerLights_ERROR 1E2F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 18C1  
          __end_of_setDimmerLights_AdjGo 2590                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 2560  
                         __size_of_MainT 0077                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 1866                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1B06  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 25C4                       Sw_DimmerOffFunc@sw 002A  
                              _setINT_GO 23F4                      __end_of_setLED_Main 1BB3  
               __end_of_setLoad_StatusOn 1AD1                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 2382                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 24A6  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 23A1                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0B18      __end_of_DimmerLights_Initialization 2602  
            _DimmerLights_Initialization 25ED                       _CC2500_ClearRXFIFO 2385  
                     _CC2500_ClearTXFIFO 2389           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 2502                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0023  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1A6E                               ?_getRxData 0071  
                               _TMR0_ISR 0059                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1A3D                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 24CC                         _Sw_DimmerAdjFunc 190C  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1959  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 2530  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0071  
                       _Sw_DimmerOffFunc 1379                    __size_of_setTemp_Main 0123  
           __end_of_MainT_Initialization 2454                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 002F                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 23DB                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 249A  
                         ?_SwPointSelect 0071                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 07FC                    _DlyOff_Initialization 2412  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0913  
                  _Switch_Initialization 24D9                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 2502  
                   __size_of_Buzzer_Main 00A8                       __end_of_getTemp_AD 129C  
                             ?_setTxData 0071                             ?_Switch_Main 0071  
                       _CC2500_WriteByte 2672                                 _VarTMain 01C0  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 2476                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 002B  
                    _Load_Initialization 24B2                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 19AE  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1983  
                               _TxStatus 0386                             _setTemp_Main 0EDD  
                     _setLoad_Exceptions 1CB8                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0071                         __size_of___ftdiv 00A9  
                           _setSw_Enable 2726                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000A                                 ___awtoft 27BC  
                       ??_LedPointSelect 0020                                 ___ftpack 1F9F  
                           _setSw_Status 2511                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1B73                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 1E8A  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 23E3  
                               __ptext11 0650                                 __ptext20 1000  
                               __ptext12 24F4                                 __ptext21 07FC  
                               __ptext13 11CA                                 __ptext30 1AD1  
                               __ptext22 1551                                 __ptext14 1379  
                               __ptext31 189E                                 __ptext23 1D86  
                               __ptext15 190C                                 __ptext40 237C  
                               __ptext32 1932                                 __ptext24 07B4  
                               __ptext16 2590                                 __ptext41 0DCF  
                               __ptext33 1CFC                                 __ptext25 176D  
                               __ptext17 2580                                 __ptext50 2395  
                               __ptext42 1005                                 __ptext34 1101  
                               __ptext26 16DD                                 __ptext18 24D9  
                               __ptext51 23B5                                 __ptext43 2454  
                               __ptext35 24E6                                 __ptext27 1EE5  
                               __ptext19 23DB                                 __ptext60 23F4  
                               __ptext52 2449                                 __ptext44 2379  
                               __ptext36 270B                                 __ptext28 19AE  
                               __ptext61 1165                                 __ptext53 1461  
                               __ptext45 2570                                 __ptext37 2742  
                               __ptext29 1BB3                                 __ptext70 24A6  
                               __ptext62 1983                                 __ptext54 243E  
                               __ptext46 265A                                 __ptext38 2391  
                               __ptext71 1B73                                 __ptext63 1DD8  
                               __ptext55 2560                                 __ptext47 24CC  
                               __ptext39 23BC                                 __ptext80 26A4  
                               __ptext72 249A                                 __ptext64 2550  
                               __ptext56 03A4                                 __ptext48 26BD  
                               __ptext81 2433                                 __ptext73 25A0  
                               __ptext65 23AE                                 __ptext57 1CB8  
                               __ptext49 24BF                                 __ptext90 27DE  
                               __ptext82 15D1                                 __ptext74 10A0  
                               __ptext66 23D3                                 __ptext58 2726  
                               __ptext91 26F0                                 __ptext83 103F  
                               __ptext75 129C                                 __ptext67 1B3C  
                               __ptext59 1B06                                 __ptext92 2428  
                               __ptext84 1D40                                 __ptext76 248E  
                               __ptext68 24B2                                 __ptext93 262D  
                               __ptext85 1A3D                                 __ptext77 0CD7  
                               __ptext69 187C                                 __ptext94 25ED  
                               __ptext86 0801                                 __ptext78 1A6E  
                               __ptext95 1C34                                 __ptext87 1A9F  
                               __ptext79 23EB                                 __ptext96 1E8A  
                               __ptext88 2602                                 __ptext97 1656  
                               __ptext89 1F41                                 __ptext98 0A64  
                               __ptext99 09BB                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 2511  
          __end_of_Dimmer_Initialization 23AE             __end_of_setDimmerLights_Main 1656  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 002B  
                          setLED@command 0022                            __size_of_main 006F  
                            _setRF_Learn 24F4                 __end_of_CC2500_SIDLEMode 2391  
                         _setRF_RxStatus 24E6               setDimmerLights_Main@lights 0062  
            __end_of_DelayOffPointSelect 265A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 26F0                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 001A                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 2742                       _CC2500_InitPATable 277D  
    __size_of_getDimmerLights_StatusFlag 0016            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 15D1              __size_of_Mcu_Initialization 0018  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 19DC                    Flash_Memory_Main@Idle 0028  
                     __end_of_setLoad_GO 2433              __end_of_Flash_Memory_Modify 130A  
                      ??_getPercentValue 0059                              _setLog_Code 07B4  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 23F4  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 268B  
                     __end_of_setSw_Main 07B4                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_GO 0384  
                          _Transceive_OK 0385                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0071                  ?_setOverTemp_Exceptions 0071  
                         _DelayTimejudge 19AE                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1C34  
                   ??_DimmerLights_Close 0023                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 24F4                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1C76  
__size_of_setDimmerLights_Initialization 0042           _setDimmerLights_Initialization 1C34  
            __end_of_setDimmerLights_Adj 10A0                  ?_setTemp_Initialization 0071  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0073  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 2449  
                  __size_of_RF_RxDisable 0027                        _RF_Initialization 2391  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0071                     _Flash_Memory_Erasing 248E  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 23CB                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 23D3                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1EE5  
       __size_of_setControl_Lights_Table 0093                        _setLoad_StatusOff 1A3D  
                 __end_of_DelayTimejudge 19DC           __end_of_setOverTemp_Exceptions 1CB8  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 002A                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 190C                 __end_of_Sw_DimmerAdjFunc 1932  
                __end_of_CC2500_ReadByte 275F             __end_of_setSw_Initialization 23E3  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1932               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 24A6         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 246A  
               __size_of_Sw_DimmerOnFunc 0066                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 2395  
               __end_of_Sw_DimmerOffFunc 13EA                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1165                    __end_of_CC2500_TxData 1D40  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 187C  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1A0C  
