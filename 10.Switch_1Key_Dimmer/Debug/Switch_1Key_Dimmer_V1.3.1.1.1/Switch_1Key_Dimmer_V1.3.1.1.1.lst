

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Sep 26 15:35:34 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	psect	text143,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943                           
  1944                           	psect	idataBANK3
  1945  1905                     __pidataBANK3:	
  1946                           
  1947                           ;initializer for _VarProduct
  1948  1905  3463               	retlw	99
  1949  1906  3402               	retlw	2
  1950  1907  3400               	retlw	0
  1951  1908  3400               	retlw	0
  1952  1909  3400               	retlw	0
  1953  190A  3400               	retlw	0
  1954  190B  3400               	retlw	0
  1955  190C  3400               	retlw	0
  1956  190D  3400               	retlw	0
  1957  190E  3400               	retlw	0
  1958  190F  3400               	retlw	0
  1959  1910  3400               	retlw	0
  1960  1911  34FF               	retlw	255
  1961  1912  34FF               	retlw	255
  1962  1913  34FF               	retlw	255
  1963  1914  3400               	retlw	0
  1964  1915  3400               	retlw	0
  1965  1916  3400               	retlw	0
  1966  1917  3400               	retlw	0
  1967  1918  3400               	retlw	0
  1968  1919  3400               	retlw	0
  1969  191A  3400               	retlw	0
  1970  191B  3400               	retlw	0
  1971  191C  3400               	retlw	0
  1972  191D  3400               	retlw	0
  1973  191E  3400               	retlw	0
  1974  191F  3400               	retlw	0
  1975  1920  3400               	retlw	0
  1976  1921  3400               	retlw	0
  1977  1922  3400               	retlw	0
  1978  1923  3400               	retlw	0
  1979  1924  3400               	retlw	0
  1980                           
  1981                           	psect	stringtext
  1982  1800                     __pstringtext:	
  1983  1800                     _CC2500_registers_address:	
  1984  1800  3403               	retlw	3
  1985  1801  3416               	retlw	22
  1986  1802  3417               	retlw	23
  1987  1803  341E               	retlw	30
  1988  1804  341F               	retlw	31
  1989  1805  3420               	retlw	32
  1990  1806  342A               	retlw	42
  1991  1807  342B               	retlw	43
  1992  1808  340B               	retlw	11
  1993  1809  340C               	retlw	12
  1994  180A  340D               	retlw	13
  1995  180B  340E               	retlw	14
  1996  180C  340F               	retlw	15
  1997  180D  3410               	retlw	16
  1998  180E  3411               	retlw	17
  1999  180F  3412               	retlw	18
  2000  1810  3413               	retlw	19
  2001  1811  3414               	retlw	20
  2002  1812  340A               	retlw	10
  2003  1813  3415               	retlw	21
  2004  1814  3421               	retlw	33
  2005  1815  3422               	retlw	34
  2006  1816  3418               	retlw	24
  2007  1817  3419               	retlw	25
  2008  1818  341A               	retlw	26
  2009  1819  341B               	retlw	27
  2010  181A  341C               	retlw	28
  2011  181B  341D               	retlw	29
  2012  181C  3423               	retlw	35
  2013  181D  3424               	retlw	36
  2014  181E  3425               	retlw	37
  2015  181F  3426               	retlw	38
  2016  1820  3429               	retlw	41
  2017  1821  342C               	retlw	44
  2018  1822  342D               	retlw	45
  2019  1823  342E               	retlw	46
  2020  1824  3400               	retlw	0
  2021  1825  3401               	retlw	1
  2022  1826  3402               	retlw	2
  2023  1827  3407               	retlw	7
  2024  1828  3408               	retlw	8
  2025  1829  3409               	retlw	9
  2026  182A  3406               	retlw	6
  2027  182B  3404               	retlw	4
  2028  182C  3405               	retlw	5
  2029  182D  3427               	retlw	39
  2030  182E  3428               	retlw	40
  2031  182F                     __end_of_CC2500_registers_address:	
  2032  182F                     _CC2500_rfSettings:	
  2033  182F  3407               	retlw	7
  2034  1830  3407               	retlw	7
  2035  1831  3430               	retlw	48
  2036  1832  3487               	retlw	135
  2037  1833  346B               	retlw	107
  2038  1834  34F8               	retlw	248
  2039  1835  347F               	retlw	127
  2040  1836  343F               	retlw	63
  2041  1837  3409               	retlw	9
  2042  1838  3400               	retlw	0
  2043  1839  345C               	retlw	92
  2044  183A  34A7               	retlw	167
  2045  183B  3462               	retlw	98
  2046  183C  3486               	retlw	134
  2047  183D  3483               	retlw	131
  2048  183E  3403               	retlw	3
  2049  183F  3422               	retlw	34
  2050  1840  34F8               	retlw	248
  2051  1841  3400               	retlw	0
  2052  1842  3444               	retlw	68
  2053  1843  34B6               	retlw	182
  2054  1844  3410               	retlw	16
  2055  1845  3418               	retlw	24
  2056  1846  341D               	retlw	29
  2057  1847  341C               	retlw	28
  2058  1848  34C7               	retlw	199
  2059  1849  3400               	retlw	0
  2060  184A  34B2               	retlw	178
  2061  184B  34EA               	retlw	234
  2062  184C  340A               	retlw	10
  2063  184D  3400               	retlw	0
  2064  184E  3411               	retlw	17
  2065  184F  3459               	retlw	89
  2066  1850  3488               	retlw	136
  2067  1851  3431               	retlw	49
  2068  1852  340B               	retlw	11
  2069  1853  342F               	retlw	47
  2070  1854  342E               	retlw	46
  2071  1855  3406               	retlw	6
  2072  1856  3404               	retlw	4
  2073  1857  3405               	retlw	5
  2074  1858  3400               	retlw	0
  2075  1859  3430               	retlw	48
  2076  185A  34D3               	retlw	211
  2077  185B  3491               	retlw	145
  2078  185C  3441               	retlw	65
  2079  185D  3400               	retlw	0
  2080  185E                     __end_of_CC2500_rfSettings:	
  2081  185E                     _CC2500_patable_vaule:	
  2082  185E  34FE               	retlw	254
  2083  185F  34FE               	retlw	254
  2084  1860  34FE               	retlw	254
  2085  1861  34FE               	retlw	254
  2086  1862  34FE               	retlw	254
  2087  1863  34FE               	retlw	254
  2088  1864  34FE               	retlw	254
  2089  1865  34FE               	retlw	254
  2090  1866                     __end_of_CC2500_patable_vaule:	
  2091                           
  2092                           	psect	nvCOMMON
  2093  007D                     __pnvCOMMON:	
  2094  007D                     _TMain:	
  2095  007D                     	ds	1
  2096                           
  2097                           	psect	nvBANK0
  2098  006F                     __pnvBANK0:	
  2099  006F                     _Product:	
  2100  006F                     	ds	1
  2101                           
  2102                           	psect	nvBANK1
  2103  00ED                     __pnvBANK1:	
  2104  00ED                     _Memory:	
  2105  00ED                     	ds	1
  2106  00EE                     _Timer0:	
  2107  00EE                     	ds	1
  2108  000C                     _PORTA	set	12
  2109  000D                     _PORTB	set	13
  2110  000E                     _PORTC	set	14
  2111  0015                     _TMR0	set	21
  2112  005F                     _GIE	set	95
  2113  005C                     _INTE	set	92
  2114  0059                     _INTF	set	89
  2115  005B                     _IOCIE	set	91
  2116  0058                     _IOCIF	set	88
  2117  005E                     _PEIE	set	94
  2118  0060                     _RA0	set	96
  2119  0063                     _RA3	set	99
  2120  0064                     _RA4	set	100
  2121  0066                     _RA6	set	102
  2122  0067                     _RA7	set	103
  2123  0068                     _RB0	set	104
  2124  0069                     _RB1	set	105
  2125  006A                     _RB2	set	106
  2126  006B                     _RB3	set	107
  2127  006C                     _RB4	set	108
  2128  006D                     _RB5	set	109
  2129  0070                     _RC0	set	112
  2130  0071                     _RC1	set	113
  2131  0072                     _RC2	set	114
  2132  0074                     _RC4	set	116
  2133  0075                     _RC5	set	117
  2134  0077                     _RC7	set	119
  2135  005D                     _TMR0IE	set	93
  2136  005A                     _TMR0IF	set	90
  2137  009D                     _ADCON0	set	157
  2138  009E                     _ADCON1	set	158
  2139  009C                     _ADRESH	set	156
  2140  009B                     _ADRESL	set	155
  2141  0095                     _OPTION_REG	set	149
  2142  0099                     _OSCCON	set	153
  2143  008C                     _TRISA	set	140
  2144  008D                     _TRISB	set	141
  2145  008E                     _TRISC	set	142
  2146  04E9                     _GO_nDONE	set	1257
  2147  0117                     _FVRCON	set	279
  2148  010C                     _LATA	set	268
  2149  010D                     _LATB	set	269
  2150  010E                     _LATC	set	270
  2151  018C                     _ANSELA	set	396
  2152  018D                     _ANSELB	set	397
  2153  018E                     _ANSELC	set	398
  2154  0192                     _PMADRH	set	402
  2155  0191                     _PMADRL	set	401
  2156  0196                     _PMCON2	set	406
  2157  0194                     _PMDATH	set	404
  2158  0193                     _PMDATL	set	403
  2159  0CAE                     _CFGS	set	3246
  2160  0CAC                     _FREE	set	3244
  2161  0CAD                     _LWLO	set	3245
  2162  0CA8                     _RD	set	3240
  2163  0CA9                     _WR	set	3241
  2164  0CAA                     _WREN	set	3242
  2165  1068                     _WPUB0	set	4200
  2166  1069                     _WPUB1	set	4201
  2167  106A                     _WPUB2	set	4202
  2168  0396                     _IOCBF	set	918
  2169  0395                     _IOCBN	set	917
  2170  0394                     _IOCBP	set	916
  2171  1CB2                     _IOCBF2	set	7346
  2172                           
  2173                           ; #config settings
  2174  0000                     
  2175                           	psect	cinit
  2176  0018                     start_initialization:	
  2177  0018                     __initialization:	
  2178                           
  2179                           ; Clear objects allocated to BITCOMMON
  2180  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2181                           
  2182                           ; Clear objects allocated to COMMON
  2183  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2184  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2185  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2186  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2187  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2188                           
  2189                           ; Clear objects allocated to BANK0
  2190  001E  01EC               	clrf	__pbssBANK0& (0+127)
  2191  001F  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2192  0020  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2193                           
  2194                           ; Clear objects allocated to BANK1
  2195  0021  30A0               	movlw	low __pbssBANK1
  2196  0022  0084               	movwf	4
  2197  0023  3000               	movlw	high __pbssBANK1
  2198  0024  0085               	movwf	5
  2199  0025  304D               	movlw	77
  2200  0026  31A4  24EF  3180   	fcall	clear_ram0
  2201                           
  2202                           ; Clear objects allocated to BANK2
  2203  0029  3020               	movlw	low __pbssBANK2
  2204  002A  0084               	movwf	4
  2205  002B  3001               	movlw	high __pbssBANK2
  2206  002C  0085               	movwf	5
  2207  002D  3041               	movlw	65
  2208  002E  31A4  24EF  3180   	fcall	clear_ram0
  2209                           
  2210                           ; Clear objects allocated to BANK3
  2211  0031  30A0               	movlw	low __pbssBANK3
  2212  0032  0084               	movwf	4
  2213  0033  3001               	movlw	high __pbssBANK3
  2214  0034  0085               	movwf	5
  2215  0035  3025               	movlw	37
  2216  0036  31A4  24EF  3180   	fcall	clear_ram0
  2217                           
  2218                           ; Clear objects allocated to BANK4
  2219  0039  3020               	movlw	low __pbssBANK4
  2220  003A  0084               	movwf	4
  2221  003B  3002               	movlw	high __pbssBANK4
  2222  003C  0085               	movwf	5
  2223  003D  3047               	movlw	71
  2224  003E  31A4  24EF  3180   	fcall	clear_ram0
  2225                           
  2226                           ; Initialize objects allocated to BANK3
  2227  0041  3005               	movlw	low __pidataBANK3
  2228  0042  0084               	movwf	4
  2229  0043  3099               	movlw	(high __pidataBANK3)| (0+128)
  2230  0044  0085               	movwf	5
  2231  0045  30C5               	movlw	low __pdataBANK3
  2232  0046  0086               	movwf	6
  2233  0047  3001               	movlw	high __pdataBANK3
  2234  0048  0087               	movwf	7
  2235  0049  3020               	movlw	32
  2236  004A  31A4  24E9         	fcall	init_ram
  2237  004C                     end_of_initialization:	
  2238                           ;End of C runtime variable initialization code
  2239                           
  2240  004C                     __end_of__initialization:	
  2241  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2242  004D  0020               	movlb	0
  2243  004E  3194  2C35         	ljmp	_main	;jump to C main() function
  2244                           
  2245                           	psect	bitbssCOMMON
  2246  0380                     __pbitbssCOMMON:	
  2247  0380                     _CC2500_Enable:	
  2248  0380                     	ds	1
  2249  0381                     _Receive_GO:	
  2250  0381                     	ds	1
  2251  0382                     _Receive_OK:	
  2252  0382                     	ds	1
  2253  0383                     _RxStatus:	
  2254  0383                     	ds	1
  2255  0384                     _Transceive_GO:	
  2256  0384                     	ds	1
  2257  0385                     _Transceive_OK:	
  2258  0385                     	ds	1
  2259  0386                     _TxStatus:	
  2260  0386                     	ds	1
  2261                           
  2262                           	psect	bssCOMMON
  2263  0078                     __pbssCOMMON:	
  2264  0078                     _Buz:	
  2265  0078                     	ds	1
  2266  0079                     _DimmerLights11:	
  2267  0079                     	ds	1
  2268  007A                     _PF:	
  2269  007A                     	ds	1
  2270  007B                     _RF:	
  2271  007B                     	ds	1
  2272  007C                     _Temp:	
  2273  007C                     	ds	1
  2274                           
  2275                           	psect	bssBANK0
  2276  006C                     __pbssBANK0:	
  2277  006C                     _DimmerLights:	
  2278  006C                     	ds	1
  2279  006D                     _Sw:	
  2280  006D                     	ds	1
  2281  006E                     _Load:	
  2282  006E                     	ds	1
  2283                           
  2284                           	psect	bssBANK1
  2285  00A0                     __pbssBANK1:	
  2286  00A0                     _RF_Data:	
  2287  00A0                     	ds	21
  2288  00B5                     _RF_Count:	
  2289  00B5                     	ds	2
  2290  00B7                     _CRC:	
  2291  00B7                     	ds	1
  2292  00B8                     _DelayOff:	
  2293  00B8                     	ds	1
  2294  00B9                     _Dimmer:	
  2295  00B9                     	ds	1
  2296  00BA                     _DimmerLightsIntr:	
  2297  00BA                     	ds	1
  2298  00BB                     _LED:	
  2299  00BB                     	ds	1
  2300  00BC                     _RFSW:	
  2301  00BC                     	ds	1
  2302  00BD                     _RSSI:	
  2303  00BD                     	ds	1
  2304  00BE                     _Rx_Length:	
  2305  00BE                     	ds	1
  2306  00BF                     _SPI0Buffer:	
  2307  00BF                     	ds	1
  2308  00C0                     _Tx_Length:	
  2309  00C0                     	ds	1
  2310  00C1                     _r_address:	
  2311  00C1                     	ds	1
  2312  00C2                     _r_data:	
  2313  00C2                     	ds	1
  2314  00C3                     _s_data:	
  2315  00C3                     	ds	1
  2316  00C4                     _VarTimer0:	
  2317  00C4                     	ds	9
  2318  00CD                     _PF1:	
  2319  00CD                     	ds	8
  2320  00D5                     _DlySw1:	
  2321  00D5                     	ds	5
  2322  00DA                     _VarErrLED:	
  2323  00DA                     	ds	4
  2324  00DE                     _VarLED1:	
  2325  00DE                     	ds	4
  2326  00E2                     _VarLED2:	
  2327  00E2                     	ds	4
  2328  00E6                     _Dimmer1:	
  2329  00E6                     	ds	3
  2330  00E9                     _RF1:	
  2331  00E9                     	ds	3
  2332  00EC                     _RFSW1:	
  2333  00EC                     	ds	1
  2334                           
  2335                           	psect	bssBANK2
  2336  0120                     __pbssBANK2:	
  2337  0120                     _VarTMain:	
  2338  0120                     	ds	16
  2339  0130                     _DimmerLights1:	
  2340  0130                     	ds	14
  2341  013E                     _Temp1:	
  2342  013E                     	ds	14
  2343  014C                     _Buz1:	
  2344  014C                     	ds	12
  2345  0158                     _Sw1:	
  2346  0158                     	ds	9
  2347                           
  2348                           	psect	bssBANK3
  2349  01A0                     __pbssBANK3:	
  2350  01A0                     _VarMemory:	
  2351  01A0                     	ds	37
  2352                           
  2353                           	psect	dataBANK3
  2354  01C5                     __pdataBANK3:	
  2355  01C5                     _VarProduct:	
  2356  01C5                     	ds	32
  2357                           
  2358                           	psect	bssBANK4
  2359  0220                     __pbssBANK4:	
  2360  0220                     _Load1:	
  2361  0220                     	ds	71
  2362                           
  2363                           	psect	clrtext
  2364  24EF                     clear_ram0:	
  2365                           ;	Called with FSR0 containing the base address, and
  2366                           ;	WREG with the size to clear
  2367                           
  2368  24EF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2369  24F0                     clrloop0:	
  2370  24F0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2371  24F1  3101               	addfsr 0,1
  2372  24F2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2373  24F3  2CF0               	goto	clrloop0	;have we reached the end yet?
  2374  24F4  3400               	retlw	0	;all done for this memory range, return
  2375                           
  2376                           	psect	inittext
  2377  24E9                     init_ram:	
  2378  24E9  00FE               	movwf	126
  2379  24EA                     initloop:	
  2380  24EA  0012               	moviw fsr0++
  2381  24EB  001E               	movwi fsr1++
  2382  24EC  0BFE               	decfsz	126,f
  2383  24ED  2CEA               	goto	initloop
  2384  24EE  3400               	retlw	0
  2385                           
  2386                           	psect	cstackCOMMON
  2387  0071                     __pcstackCOMMON:	
  2388  0071                     ?_CC2500_WriteByte:	
  2389  0071                     ?_CC2500_WriteCommand:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0071                     ?_CC2500_ReadStatus:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0071                     ?_CC2500_ReadByte:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0071                     ?_CC2500_PowerRST:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0071                     ?_CC2500_InitSetREG:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0071                     ?_CC2500_InitPATable:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0071                     ?_CC2500_ClearTXFIFO:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0071                     ?_CC2500_ClearRXFIFO:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0071                     ?_CC2500_FrequencyCabr:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0071                     ?_CC2500_SIDLEMode:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0071                     ?_DlyOff_Initialization:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0071                     ?_DlyOff_Main:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0071                     ?_setTxData:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0071                     ?_setDimmerLights_Initialization:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0071                     ?_Dimmer_Initialization:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0071                     ?_setLoad_GO:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0071                     ?_setDimmerLights_Main:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0071                     ?_setDimmerLights_ERROR:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0071                     ?_setLoad_Count:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0071                     ?_setLED_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0071                     ?_setLED_Main:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0071                     ?_MainT_Initialization:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0071                     ?_Mcu_Initialization:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0071                     ?_Flash_Memory_Initialization:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0071                     ?_Temp_Initialization:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0071                     ?_Load_Initialization:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0071                     ?_PowerFault_Initialization:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0071                     ?_Switch_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0071                     ?_RF_Initialization:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0071                     ?_getLoad_AD:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0071                     ?_getTemp_AD:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0071                     ?_getPowerFault_AD:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0071                     ?_MainT:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0071                     ?_MainT_ResetClock:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0071                     ?_Flash_Memory_Main:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0071                     ?_Temp_Main:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0071                     ?_Load_Main:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0071                     ?_PowerFault_Main:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0071                     ?_Switch_Main:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0071                     ?_RF_Main:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0071                     ?_setTemp_Enable:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0071                     ?_setLoad_Enable:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0071                     ?_setSw_Enable:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0071                     ?_IO_Set:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0071                     ?_TMR0_Set:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0071                     ?_ADC_Set:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0071                     ?_INT_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0071                     ?_IOC_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0071                     ?_IOC_ISR:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0071                     ??_IOC_ISR:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0071                     ?_TMR0_ISR:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0071                     ?_INT_ISR:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0071                     ?_Flash_Memory_Write:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0071                     ?_Flash_Memory_Modify:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0071                     ?_setLoad_AH_AL_Restore:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0071                     ?_setLoad_Exceptions:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0071                     ?_setTemp_Initialization:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0071                     ?_setTemp_Main:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0071                     ?_setOverTemp_Exceptions:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0071                     ?_setPowerFault_Initialization:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0071                     ?_setPowerFault_Main:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0071                     ?_setPowerFault_Exceptions:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0071                     ?_setRF_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0071                     ?_setRF_Main:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0071                     ?_getRxData:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0071                     ?_RF_RxDisable:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0071                     ?_setLog_Code:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0071                     ?_setControl_Lights_Table:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0071                     ?_setRFSW_Control:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0071                     ?_setRFSW_AdjControl:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0071                     ?_setRF_DimmerValue:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0071                     ?_setSw_Initialization:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0071                     ?_setSw_Main:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0071                     ?_Sw_DimmerOnFunc:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0071                     ?_Sw_DimmerAdjFunc:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0071                     ?_Sw_DimmerOffFunc:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0071                     ?_Buzzer_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0071                     ?_Buzzer_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0071                     ?_CC2500_TxData:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0071                     ?_CC2500_RxData:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0071                     ?_CC2500_PowerOnInitial:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0071                     ?_DelayOffPointSelect:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0071                     ?_DelayOff_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0071                     ?_DelayOff_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0071                     ?_DimmerLightsPointSelect:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0071                     ?_DimmerLights_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0071                     ?_DimmerLights_Close:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0071                     ?_DimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0071                     ?_DimmerLights_Exceptions:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0071                     ?_setDimmerLights_AdjRF:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0071                     ?_LedPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0071                     ?_LED_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0071                     ?_LED_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0071                     ?_main:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0071                     ?_ISR:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0071                     ?_setDimmerReClock:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0071                     ??_setDimmerReClock:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0071                     ?_setINT_GO:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0071                     ?_Flash_Memory_Unlock:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0071                     ?_Flash_Memory_Erasing:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0071                     ?_RfPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0071                     ?_RfSWPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0071                     ?_TouchPower:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0071                     ?_SwPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0071                     ?i1_setLoad_StatusOff:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0071                     ?i1_RfPointSelect:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0071                     ??i1_RfPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0071                     ?_DelayTimejudge:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0071                     ?_getDimmerLights_StatusFlag:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0071                     ?_getPercentValue:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0071                     ?_Flash_Memory_Read:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0071                     ?_getTemp_Safe:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0071                     ?_getPF_Safe:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0071                     ?_setPercentValue:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0071                     ?_getLoad_Safe:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0071                     setRF_Initialization@rf:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0071                     i1setLoad_StatusOff@command:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740                           
  2741                           ; 1 bytes @ 0x0
  2742  0071                     	ds	1
  2743  0072                     ??i1_setLoad_StatusOff:	
  2744  0072                     i1setLoad_StatusOff@lights:	
  2745                           ; 0 bytes @ 0x1
  2746                           
  2747  0072                     i1RfPointSelect@rf:	
  2748                           ; 1 bytes @ 0x1
  2749                           
  2750                           
  2751                           ; 1 bytes @ 0x1
  2752  0072                     	ds	1
  2753  0073                     ??_TMR0_ISR:	
  2754  0073                     ?_setRF_ReceiveGO:	
  2755                           ; 0 bytes @ 0x2
  2756                           
  2757  0073                     setRF_ReceiveGO@command:	
  2758                           ; 0 bytes @ 0x2
  2759                           
  2760                           
  2761                           ; 1 bytes @ 0x2
  2762  0073                     	ds	1
  2763  0074                     ??_setRF_ReceiveGO:	
  2764  0074                     setRF_ReceiveGO@rf:	
  2765                           ; 0 bytes @ 0x3
  2766                           
  2767                           
  2768                           ; 1 bytes @ 0x3
  2769  0074                     	ds	1
  2770  0075                     ??_INT_ISR:	
  2771                           
  2772                           ; 0 bytes @ 0x4
  2773  0075                     	ds	2
  2774  0077                     ??_ISR:	
  2775                           
  2776                           ; 0 bytes @ 0x6
  2777  0077                     	ds	1
  2778                           
  2779                           	psect	cstackBANK0
  2780  0020                     __pcstackBANK0:	
  2781  0020                     ??_CC2500_WriteByte:	
  2782  0020                     ??_CC2500_ReadByte:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0020                     ?_DelayTime_1us:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0020                     ??_DelayTimejudge:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_Dimmer_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_getDimmerLights_StatusFlag:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ??_setLoad_GO:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ?_setLoad_StatusOff:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_setLoad_Count:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ?_setLoad_StatusOn:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_MainT_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_MainT_ResetClock:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_setTemp_Enable:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_setLoad_Enable:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_IO_Set:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_TMR0_Set:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_ADC_Set:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_INT_Set:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_IOC_Set:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_Flash_Memory_Read:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_Flash_Memory_Write:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_setLoad_AH_AL_Restore:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_getTemp_Safe:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_getPF_Safe:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_setTemp_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_setPowerFault_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_setRF_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_Buzzer_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_Buzzer_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_DelayOffPointSelect:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_DimmerLightsPointSelect:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_setINT_GO:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_Flash_Memory_Unlock:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_Flash_Memory_Erasing:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_getLoad_Safe:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_RfPointSelect:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_RfSWPointSelect:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ?_getAD:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ?___wmul:	
  2903                           ; 2 bytes @ 0x0
  2904                           
  2905  0020                     ?___lwdiv:	
  2906                           ; 2 bytes @ 0x0
  2907                           
  2908  0020                     ?___ftpack:	
  2909                           ; 2 bytes @ 0x0
  2910                           
  2911  0020                     getDimmerLights_StatusFlag@Status:	
  2912                           ; 3 bytes @ 0x0
  2913                           
  2914  0020                     setINT_GO@command:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0020                     getAD@adcon1:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0020                     setLoad_Enable@command:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0020                     setLoad_GO@command:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0020                     setLoad_StatusOn@command:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0020                     setLoad_StatusOff@command:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     setTemp_Enable@command:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0020                     DelayTime_1us@count:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0020                     ___wmul@multiplier:	
  2939                           ; 2 bytes @ 0x0
  2940                           
  2941  0020                     ___lwdiv@divisor:	
  2942                           ; 2 bytes @ 0x0
  2943                           
  2944  0020                     ___ftpack@arg:	
  2945                           ; 2 bytes @ 0x0
  2946                           
  2947                           
  2948                           ; 3 bytes @ 0x0
  2949  0020                     	ds	1
  2950  0021                     ??_setLoad_StatusOff:	
  2951  0021                     ??_setLoad_StatusOn:	
  2952                           ; 0 bytes @ 0x1
  2953                           
  2954  0021                     ??_Mcu_Initialization:	
  2955                           ; 0 bytes @ 0x1
  2956                           
  2957  0021                     ??_Temp_Initialization:	
  2958                           ; 0 bytes @ 0x1
  2959                           
  2960  0021                     ??_PowerFault_Initialization:	
  2961                           ; 0 bytes @ 0x1
  2962                           
  2963  0021                     ??_RF_Initialization:	
  2964                           ; 0 bytes @ 0x1
  2965                           
  2966  0021                     ??_DimmerLights_Close:	
  2967                           ; 0 bytes @ 0x1
  2968                           
  2969  0021                     CC2500_WriteByte@loop_a:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972  0021                     CC2500_ReadByte@loop_b:	
  2973                           ; 1 bytes @ 0x1
  2974                           
  2975  0021                     DelayOffPointSelect@sw:	
  2976                           ; 1 bytes @ 0x1
  2977                           
  2978  0021                     DelayTimejudge@i:	
  2979                           ; 1 bytes @ 0x1
  2980                           
  2981  0021                     DimmerLightsPointSelect@lights:	
  2982                           ; 1 bytes @ 0x1
  2983                           
  2984  0021                     LedPointSelect@led:	
  2985                           ; 1 bytes @ 0x1
  2986                           
  2987  0021                     MainT_ResetClock@i:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0021                     Flash_Memory_Read@i:	
  2991                           ; 1 bytes @ 0x1
  2992                           
  2993  0021                     Flash_Memory_Write@i:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     setLoad_Count@command:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     setLoad_StatusOn@lights:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     setLoad_StatusOff@lights:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     setLoad_AH_AL_Restore@i:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     RfPointSelect@rf:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     RfSWPointSelect@sw:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     SwPointSelect@sw:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017                           
  3018                           ; 1 bytes @ 0x1
  3019  0021                     	ds	1
  3020  0022                     ??_CC2500_WriteCommand:	
  3021  0022                     ??_CC2500_ReadStatus:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0022                     ?_setRF_RxStatus:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0022                     ??_DelayTime_1us:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0022                     ?_CC2500_WriteREG:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0022                     ??_DlyOff_Initialization:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0022                     ?_setSw_Status:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ?_setRFSW_Status:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ?_setDimmerLights_Trigger:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_setDimmerLights_Switch:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ??_setTxData:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ??_setDimmerLights_Initialization:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ?_setDimmerLights_TriggerERROR:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_setLED:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ??_setLED_Main:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ??_Load_Initialization:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_setSw_Enable:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_setRF_Enable:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ?_setDimmerLights_AdjGo:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ?_setDimmerLights_TriggerAdj:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ?_setDimmerLights_Clear:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setRF_Learn:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     CC2500_WriteREG@value:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     DlyOff_Initialization@sw:	
  3088                           ; 1 bytes @ 0x2
  3089                           
  3090  0022                     DelayTimejudge@value:	
  3091                           ; 1 bytes @ 0x2
  3092                           
  3093  0022                     setDimmerLights_TriggerERROR@command:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     setDimmerLights_Switch@command:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     setDimmerLights_AdjGo@command:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setDimmerLights_Trigger@command:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setDimmerLights_TriggerAdj@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     setDimmerLights_Clear@command:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setLED@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     Flash_Memory_Read@address:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setRF_Learn@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setRF_RxStatus@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setRF_Enable@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setRFSW_Status@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setSw_Enable@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setSw_Status@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     DelayTime_1us@i:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     ___wmul@multiplicand:	
  3139                           ; 2 bytes @ 0x2
  3140                           
  3141  0022                     ___lwdiv@dividend:	
  3142                           ; 2 bytes @ 0x2
  3143                           
  3144                           
  3145                           ; 2 bytes @ 0x2
  3146  0022                     	ds	1
  3147  0023                     ??_setRF_RxStatus:	
  3148  0023                     ??_CC2500_WriteREG:	
  3149                           ; 0 bytes @ 0x3
  3150                           
  3151  0023                     ??_setSw_Status:	
  3152                           ; 0 bytes @ 0x3
  3153                           
  3154  0023                     ??_setRFSW_Status:	
  3155                           ; 0 bytes @ 0x3
  3156                           
  3157  0023                     ??_setDimmerLights_Trigger:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_setDimmerLights_Switch:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_setDimmerLights_TriggerERROR:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_setLED:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setRF_Enable:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_DelayOff_Initialization:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ?_setDelayOff_GO:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_setDimmerLights_AdjGo:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ??_setDimmerLights_TriggerAdj:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_setDimmerLights_Clear:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_getAD:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setRF_Learn:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     CC2500_WriteCommand@command:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     CC2500_ReadStatus@status_addr:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     setDelayOff_GO@command:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     setDimmerLights_Initialization@lights:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     setDimmerLights_TriggerERROR@lights:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     setDimmerLights_Switch@lights:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setDimmerLights_AdjGo@lights:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     setDimmerLights_Trigger@lights:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     setDimmerLights_TriggerAdj@lights:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     setDimmerLights_Clear@lights:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setLED@led:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     getAD@adcon0:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     Flash_Memory_Read@ret:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     setRF_Learn@rf:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     setRF_RxStatus@rf:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setTxData@rf:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setRF_Enable@rf:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setRFSW_Status@sw:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     setSw_Status@sw:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     ___ftpack@exp:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253                           
  3254                           ; 1 bytes @ 0x3
  3255  0023                     	ds	1
  3256  0024                     ??_CC2500_ClearTXFIFO:	
  3257  0024                     ??_CC2500_ClearRXFIFO:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??_CC2500_SIDLEMode:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     ?_setDimmerLights:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??_setDimmerLights_ERROR:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     ??_setLED_Initialization:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_getLoad_AD:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ??_getTemp_AD:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_getPowerFault_AD:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_Flash_Memory_Modify:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_RF_RxDisable:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_setSw_Initialization:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_Sw_DimmerAdjFunc:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_CC2500_TxData:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_CC2500_RxData:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_DimmerLights_Initialization:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??___wmul:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??___lwdiv:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     CC2500_WriteREG@w_addr:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     setDelayOff_GO@value:	
  3312                           ; 1 bytes @ 0x4
  3313                           
  3314  0024                     setDimmerLights@status:	
  3315                           ; 1 bytes @ 0x4
  3316                           
  3317  0024                     setLED_Initialization@led:	
  3318                           ; 1 bytes @ 0x4
  3319                           
  3320  0024                     setLED_Main@led:	
  3321                           ; 1 bytes @ 0x4
  3322                           
  3323  0024                     RF_RxDisable@rf:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setSw_Initialization@sw:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     Sw_DimmerAdjFunc@Idle:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     ___ftpack@sign:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     DelayTime_1us@j:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     ___wmul@product:	
  3339                           ; 2 bytes @ 0x4
  3340                           
  3341                           
  3342                           ; 2 bytes @ 0x4
  3343  0024                     	ds	1
  3344  0025                     ??_CC2500_InitSetREG:	
  3345  0025                     ??_CC2500_InitPATable:	
  3346                           ; 0 bytes @ 0x5
  3347                           
  3348  0025                     ??_setDimmerLights:	
  3349                           ; 0 bytes @ 0x5
  3350                           
  3351  0025                     ??_Switch_Initialization:	
  3352                           ; 0 bytes @ 0x5
  3353                           
  3354  0025                     ??___ftpack:	
  3355                           ; 0 bytes @ 0x5
  3356                           
  3357  0025                     ??_setDelayOff_GO:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_LED_Initialization:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_LED_Main:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     CC2500_TxData@loop_e:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     CC2500_RxData@loop_f:	
  3370                           ; 1 bytes @ 0x5
  3371                           
  3372  0025                     setDimmerLights_ERROR@lights:	
  3373                           ; 1 bytes @ 0x5
  3374                           
  3375  0025                     Sw_DimmerAdjFunc@sw:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0025                     ___lwdiv@quotient:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381                           
  3382                           ; 2 bytes @ 0x5
  3383  0025                     	ds	1
  3384  0026                     ??_CC2500_PowerRST:	
  3385  0026                     ??_CC2500_FrequencyCabr:	
  3386                           ; 0 bytes @ 0x6
  3387                           
  3388  0026                     ?_setBuz:	
  3389                           ; 0 bytes @ 0x6
  3390                           
  3391  0026                     CC2500_InitSetREG@temp1:	
  3392                           ; 0 bytes @ 0x6
  3393                           
  3394  0026                     CC2500_InitPATable@temp:	
  3395                           ; 1 bytes @ 0x6
  3396                           
  3397  0026                     setDimmerLights@lights:	
  3398                           ; 1 bytes @ 0x6
  3399                           
  3400  0026                     Flash_Memory_Modify@i:	
  3401                           ; 1 bytes @ 0x6
  3402                           
  3403  0026                     setBuz@time:	
  3404                           ; 1 bytes @ 0x6
  3405                           
  3406                           
  3407                           ; 2 bytes @ 0x6
  3408  0026                     	ds	1
  3409  0027                     ??_Flash_Memory_Main:	
  3410  0027                     CC2500_InitSetREG@temp2:	
  3411                           ; 0 bytes @ 0x7
  3412                           
  3413  0027                     CC2500_InitPATable@loop_d:	
  3414                           ; 1 bytes @ 0x7
  3415                           
  3416  0027                     setDelayOff_GO@sw:	
  3417                           ; 1 bytes @ 0x7
  3418                           
  3419  0027                     ___lwdiv@counter:	
  3420                           ; 1 bytes @ 0x7
  3421                           
  3422                           
  3423                           ; 1 bytes @ 0x7
  3424  0027                     	ds	1
  3425  0028                     ??_setBuz:	
  3426  0028                     ?___awtoft:	
  3427                           ; 0 bytes @ 0x8
  3428                           
  3429  0028                     CC2500_InitSetREG@loop_c:	
  3430                           ; 3 bytes @ 0x8
  3431                           
  3432  0028                     getTemp_AD@channel:	
  3433                           ; 1 bytes @ 0x8
  3434                           
  3435  0028                     getPowerFault_AD@channel:	
  3436                           ; 1 bytes @ 0x8
  3437                           
  3438  0028                     ___awtoft@c:	
  3439                           ; 1 bytes @ 0x8
  3440                           
  3441                           
  3442                           ; 2 bytes @ 0x8
  3443  0028                     	ds	1
  3444  0029                     ??_CC2500_PowerOnInitial:	
  3445  0029                     setBuz@count:	
  3446                           ; 0 bytes @ 0x9
  3447                           
  3448  0029                     getLoad_AD@channel:	
  3449                           ; 1 bytes @ 0x9
  3450                           
  3451                           
  3452                           ; 1 bytes @ 0x9
  3453  0029                     	ds	1
  3454  002A                     ??_MainT:	
  3455  002A                     ??_setLog_Code:	
  3456                           ; 0 bytes @ 0xA
  3457                           
  3458  002A                     ??_DimmerLights_Exceptions:	
  3459                           ; 0 bytes @ 0xA
  3460                           
  3461  002A                     DimmerLights_Exceptions@status:	
  3462                           ; 0 bytes @ 0xA
  3463                           
  3464  002A                     getLoad_AD@j:	
  3465                           ; 1 bytes @ 0xA
  3466                           
  3467                           
  3468                           ; 1 bytes @ 0xA
  3469  002A                     	ds	1
  3470  002B                     ??_setLoad_Exceptions:	
  3471  002B                     ??_setOverTemp_Exceptions:	
  3472                           ; 0 bytes @ 0xB
  3473                           
  3474  002B                     ??_setPowerFault_Exceptions:	
  3475                           ; 0 bytes @ 0xB
  3476                           
  3477  002B                     ??___awtoft:	
  3478                           ; 0 bytes @ 0xB
  3479                           
  3480  002B                     getLoad_AD@i:	
  3481                           ; 0 bytes @ 0xB
  3482                           
  3483  002B                     setLog_Code@rf:	
  3484                           ; 1 bytes @ 0xB
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0xB
  3488  002B                     	ds	1
  3489  002C                     setLoad_Exceptions@command:	
  3490  002C                     setOverTemp_Exceptions@command:	
  3491                           ; 1 bytes @ 0xC
  3492                           
  3493  002C                     setPowerFault_Exceptions@command:	
  3494                           ; 1 bytes @ 0xC
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0xC
  3498  002C                     	ds	1
  3499  002D                     ??_Load_Main:	
  3500  002D                     ??_setTemp_Main:	
  3501                           ; 0 bytes @ 0xD
  3502                           
  3503  002D                     ??_setPowerFault_Main:	
  3504                           ; 0 bytes @ 0xD
  3505                           
  3506  002D                     ___awtoft@sign:	
  3507                           ; 0 bytes @ 0xD
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0xD
  3511  002D                     	ds	1
  3512  002E                     ?___ftdiv:	
  3513  002E                     ?___ftmul:	
  3514                           ; 3 bytes @ 0xE
  3515                           
  3516  002E                     ___ftdiv@f2:	
  3517                           ; 3 bytes @ 0xE
  3518                           
  3519  002E                     ___ftmul@f1:	
  3520                           ; 3 bytes @ 0xE
  3521                           
  3522                           
  3523                           ; 3 bytes @ 0xE
  3524  002E                     	ds	1
  3525  002F                     ??_PowerFault_Main:	
  3526                           
  3527                           ; 0 bytes @ 0xF
  3528  002F                     	ds	1
  3529  0030                     ??_Temp_Main:	
  3530                           
  3531                           ; 0 bytes @ 0x10
  3532  0030                     	ds	1
  3533  0031                     Load_Main@i:	
  3534  0031                     ___ftdiv@f1:	
  3535                           ; 1 bytes @ 0x11
  3536                           
  3537  0031                     ___ftmul@f2:	
  3538                           ; 3 bytes @ 0x11
  3539                           
  3540                           
  3541                           ; 3 bytes @ 0x11
  3542  0031                     	ds	3
  3543  0034                     ??___ftdiv:	
  3544  0034                     ??___ftmul:	
  3545                           ; 0 bytes @ 0x14
  3546                           
  3547                           
  3548                           ; 0 bytes @ 0x14
  3549  0034                     	ds	4
  3550  0038                     ___ftdiv@cntr:	
  3551  0038                     ___ftmul@exp:	
  3552                           ; 1 bytes @ 0x18
  3553                           
  3554                           
  3555                           ; 1 bytes @ 0x18
  3556  0038                     	ds	1
  3557  0039                     ___ftdiv@f3:	
  3558  0039                     ___ftmul@f3_as_product:	
  3559                           ; 3 bytes @ 0x19
  3560                           
  3561                           
  3562                           ; 3 bytes @ 0x19
  3563  0039                     	ds	3
  3564  003C                     ___ftdiv@exp:	
  3565  003C                     ___ftmul@cntr:	
  3566                           ; 1 bytes @ 0x1C
  3567                           
  3568                           
  3569                           ; 1 bytes @ 0x1C
  3570  003C                     	ds	1
  3571  003D                     ___ftdiv@sign:	
  3572  003D                     ___ftmul@sign:	
  3573                           ; 1 bytes @ 0x1D
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0x1D
  3577  003D                     	ds	1
  3578  003E                     ?___ftadd:	
  3579  003E                     ___ftadd@f1:	
  3580                           ; 3 bytes @ 0x1E
  3581                           
  3582                           
  3583                           ; 3 bytes @ 0x1E
  3584  003E                     	ds	3
  3585  0041                     ___ftadd@f2:	
  3586                           
  3587                           ; 3 bytes @ 0x21
  3588  0041                     	ds	3
  3589  0044                     ??___ftadd:	
  3590                           
  3591                           ; 0 bytes @ 0x24
  3592  0044                     	ds	4
  3593  0048                     ___ftadd@sign:	
  3594                           
  3595                           ; 1 bytes @ 0x28
  3596  0048                     	ds	1
  3597  0049                     ___ftadd@exp2:	
  3598                           
  3599                           ; 1 bytes @ 0x29
  3600  0049                     	ds	1
  3601  004A                     ___ftadd@exp1:	
  3602                           
  3603                           ; 1 bytes @ 0x2A
  3604  004A                     	ds	1
  3605  004B                     ?___fttol:	
  3606  004B                     ___fttol@f1:	
  3607                           ; 4 bytes @ 0x2B
  3608                           
  3609                           
  3610                           ; 3 bytes @ 0x2B
  3611  004B                     	ds	4
  3612  004F                     ??___fttol:	
  3613                           
  3614                           ; 0 bytes @ 0x2F
  3615  004F                     	ds	4
  3616  0053                     ___fttol@sign1:	
  3617                           
  3618                           ; 1 bytes @ 0x33
  3619  0053                     	ds	1
  3620  0054                     ___fttol@lval:	
  3621                           
  3622                           ; 4 bytes @ 0x34
  3623  0054                     	ds	4
  3624  0058                     ___fttol@exp1:	
  3625                           
  3626                           ; 1 bytes @ 0x38
  3627  0058                     	ds	1
  3628  0059                     ??_getPercentValue:	
  3629  0059                     ??_setPercentValue:	
  3630                           ; 0 bytes @ 0x39
  3631                           
  3632  0059                     setPercentValue@value:	
  3633                           ; 0 bytes @ 0x39
  3634                           
  3635                           
  3636                           ; 1 bytes @ 0x39
  3637  0059                     	ds	1
  3638  005A                     setPercentValue@i:	
  3639                           
  3640                           ; 3 bytes @ 0x3A
  3641  005A                     	ds	1
  3642  005B                     getPercentValue@value:	
  3643                           
  3644                           ; 1 bytes @ 0x3B
  3645  005B                     	ds	1
  3646  005C                     getPercentValue@i:	
  3647                           
  3648                           ; 3 bytes @ 0x3C
  3649  005C                     	ds	1
  3650  005D                     ?_setRF_DimmerLights:	
  3651  005D                     ??_Flash_Memory_Initialization:	
  3652                           ; 0 bytes @ 0x3D
  3653                           
  3654  005D                     setRF_DimmerLights@on:	
  3655                           ; 0 bytes @ 0x3D
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x3D
  3659  005D                     	ds	1
  3660  005E                     ??_setRF_DimmerLights:	
  3661  005E                     Flash_Memory_Initialization@i:	
  3662                           ; 0 bytes @ 0x3E
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x3E
  3666  005E                     	ds	1
  3667  005F                     ??_setDimmerLights_AdjRF:	
  3668                           
  3669                           ; 0 bytes @ 0x3F
  3670  005F                     	ds	1
  3671  0060                     setDimmerLights_AdjRF@lights:	
  3672  0060                     setRF_DimmerLights@status:	
  3673                           ; 1 bytes @ 0x40
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x40
  3677  0060                     	ds	1
  3678  0061                     ??_setRF_DimmerValue:	
  3679  0061                     setRF_DimmerLights@lights:	
  3680                           ; 0 bytes @ 0x41
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x41
  3684  0061                     	ds	1
  3685  0062                     ??_DlyOff_Main:	
  3686  0062                     ?_setDimmerLights_Adj:	
  3687                           ; 0 bytes @ 0x42
  3688                           
  3689  0062                     ??_setRFSW_Control:	
  3690                           ; 0 bytes @ 0x42
  3691                           
  3692  0062                     ??_Sw_DimmerOnFunc:	
  3693                           ; 0 bytes @ 0x42
  3694                           
  3695  0062                     ??_Sw_DimmerOffFunc:	
  3696                           ; 0 bytes @ 0x42
  3697                           
  3698  0062                     setDimmerLights_Adj@status:	
  3699                           ; 0 bytes @ 0x42
  3700                           
  3701  0062                     Sw_DimmerOnFunc@Idle:	
  3702                           ; 1 bytes @ 0x42
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x42
  3706  0062                     	ds	1
  3707  0063                     ??_setDimmerLights_Adj:	
  3708  0063                     setRFSW_Control@sw:	
  3709                           ; 0 bytes @ 0x43
  3710                           
  3711  0063                     setRF_DimmerValue@lights:	
  3712                           ; 1 bytes @ 0x43
  3713                           
  3714  0063                     Sw_DimmerOnFunc@sw:	
  3715                           ; 1 bytes @ 0x43
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x43
  3719  0063                     	ds	1
  3720  0064                     ??_setRFSW_AdjControl:	
  3721  0064                     DlyOff_Main@sw:	
  3722                           ; 0 bytes @ 0x44
  3723                           
  3724  0064                     setDimmerLights_Adj@lights:	
  3725                           ; 1 bytes @ 0x44
  3726                           
  3727  0064                     Sw_DimmerOffFunc@sw:	
  3728                           ; 1 bytes @ 0x44
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x44
  3732  0064                     	ds	1
  3733  0065                     ??_setDimmerLights_Main:	
  3734  0065                     ??_setSw_Main:	
  3735                           ; 0 bytes @ 0x45
  3736                           
  3737  0065                     ??_DelayOff_Main:	
  3738                           ; 0 bytes @ 0x45
  3739                           
  3740  0065                     setDimmerLights_Main@clear:	
  3741                           ; 0 bytes @ 0x45
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x45
  3745  0065                     	ds	1
  3746  0066                     setDimmerLights_Main@lights:	
  3747  0066                     setRFSW_AdjControl@sw:	
  3748                           ; 1 bytes @ 0x46
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x46
  3752  0066                     	ds	1
  3753  0067                     ??_setControl_Lights_Table:	
  3754  0067                     ??_DimmerLights_Main:	
  3755                           ; 0 bytes @ 0x47
  3756                           
  3757  0067                     setControl_Lights_Table@rf:	
  3758                           ; 0 bytes @ 0x47
  3759                           
  3760  0067                     _setSw_Main$4649:	
  3761                           ; 1 bytes @ 0x47
  3762                           
  3763                           
  3764                           ; 1 bytes @ 0x47
  3765  0067                     	ds	1
  3766  0068                     ??_getRxData:	
  3767  0068                     getRxData@rf:	
  3768                           ; 0 bytes @ 0x48
  3769                           
  3770  0068                     setSw_Main@sw:	
  3771                           ; 1 bytes @ 0x48
  3772                           
  3773                           
  3774                           ; 1 bytes @ 0x48
  3775  0068                     	ds	1
  3776  0069                     ??_Switch_Main:	
  3777  0069                     ??_setRF_Main:	
  3778                           ; 0 bytes @ 0x49
  3779                           
  3780                           
  3781                           ; 0 bytes @ 0x49
  3782  0069                     	ds	1
  3783  006A                     setRF_Main@rf:	
  3784                           
  3785                           ; 1 bytes @ 0x4A
  3786  006A                     	ds	1
  3787  006B                     _setRF_Main$4298:	
  3788                           
  3789                           ; 1 bytes @ 0x4B
  3790  006B                     	ds	1
  3791  006C                     ??_RF_Main:	
  3792  006C                     ??_main:	
  3793                           ; 0 bytes @ 0x4C
  3794                           
  3795                           
  3796                           	psect	maintext
  3797  1435                     __pmaintext:	
  3798                           ; 0 bytes @ 0x4C
  3799 ;;
  3800 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3801 ;;
  3802 ;; *************** function _main *****************
  3803 ;; Defined at:
  3804 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;		None               void
  3811 ;; Registers used:
  3812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 17F/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels required when called:   14
  3824 ;; This function calls:
  3825 ;;		_Buzzer_Initialization
  3826 ;;		_Buzzer_Main
  3827 ;;		_CC2500_PowerOnInitial
  3828 ;;		_DelayOff_Initialization
  3829 ;;		_DelayOff_Main
  3830 ;;		_DimmerLights_Initialization
  3831 ;;		_DimmerLights_Main
  3832 ;;		_Flash_Memory_Initialization
  3833 ;;		_Flash_Memory_Main
  3834 ;;		_LED_Initialization
  3835 ;;		_LED_Main
  3836 ;;		_Load_Initialization
  3837 ;;		_Load_Main
  3838 ;;		_MainT
  3839 ;;		_MainT_Initialization
  3840 ;;		_MainT_ResetClock
  3841 ;;		_Mcu_Initialization
  3842 ;;		_PowerFault_Initialization
  3843 ;;		_PowerFault_Main
  3844 ;;		_RF_Initialization
  3845 ;;		_RF_Main
  3846 ;;		_Switch_Initialization
  3847 ;;		_Switch_Main
  3848 ;;		_Temp_Initialization
  3849 ;;		_Temp_Main
  3850 ;;		_getLoad_AD
  3851 ;;		_getPowerFault_AD
  3852 ;;		_getTemp_AD
  3853 ;; This function is called by:
  3854 ;;		Startup code after reset
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           
  3859                           ;psect for function _main
  3860  1435                     _main:	
  3861                           
  3862                           ;main.c: 9: MainT_Initialization();
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3866  1435  31A7  271E  3194   	fcall	_MainT_Initialization
  3867                           
  3868                           ;main.c: 10: Mcu_Initialization();
  3869  1438  31A7  2784  3194   	fcall	_Mcu_Initialization
  3870                           
  3871                           ;main.c: 11: Flash_Memory_Initialization();
  3872  143B  318C  24F1  3194   	fcall	_Flash_Memory_Initialization
  3873                           
  3874                           ;main.c: 12: LED_Initialization();
  3875  143E  31A6  2607  3194   	fcall	_LED_Initialization
  3876                           
  3877                           ;main.c: 13: Buzzer_Initialization();
  3878  1441  31A5  2544  3194   	fcall	_Buzzer_Initialization
  3879                           
  3880                           ;main.c: 15: ;;
  3881                           ;main.c: 16: Temp_Initialization();
  3882  1444  31A4  24BB  3194   	fcall	_Temp_Initialization
  3883                           
  3884                           ;main.c: 17: Load_Initialization();
  3885  1447  31A6  261F  3194   	fcall	_Load_Initialization
  3886                           
  3887                           ;main.c: 18: PowerFault_Initialization();
  3888  144A  31A4  24B5  3194   	fcall	_PowerFault_Initialization
  3889                           
  3890                           ;main.c: 19: DelayOff_Initialization();
  3891  144D  31A4  24CA  3194   	fcall	_DelayOff_Initialization
  3892                           
  3893                           ;main.c: 21: DimmerLights_Initialization();
  3894  1450  31A5  25E3  3194   	fcall	_DimmerLights_Initialization
  3895                           
  3896                           ;main.c: 22: ;;
  3897                           ;main.c: 23: ;;
  3898                           ;main.c: 24: ;;
  3899                           ;main.c: 26: Switch_Initialization();
  3900  1453  31A5  2531  3194   	fcall	_Switch_Initialization
  3901                           
  3902                           ;main.c: 27: RF_Initialization();
  3903  1456  31A4  24D2  3194   	fcall	_RF_Initialization
  3904                           
  3905                           ;main.c: 28: CC2500_PowerOnInitial();
  3906  1459  31A7  2744  3194   	fcall	_CC2500_PowerOnInitial
  3907  145C                     l9683:	
  3908                           ;main.c: 30: while(1)
  3909                           
  3910                           
  3911                           ;main.c: 31: {
  3912                           ;main.c: 32: if(TMain->PowerON)
  3913  145C  087D               	movf	_TMain,w
  3914  145D  0086               	movwf	6
  3915  145E  3001               	movlw	1	; select bank2/3
  3916  145F  0087               	movwf	7
  3917  1460  1C01               	btfss	1,0
  3918  1461  2C71               	goto	l9687
  3919                           
  3920                           ;main.c: 33: {
  3921                           ;main.c: 35: ;;
  3922                           ;main.c: 39: getLoad_AD(0x05);
  3923  1462  3005               	movlw	5
  3924  1463  3189  214E  3194   	fcall	_getLoad_AD
  3925                           
  3926                           ;main.c: 43: getTemp_AD(0x09);
  3927  1466  3009               	movlw	9
  3928  1467  3192  22EC  3194   	fcall	_getTemp_AD
  3929                           
  3930                           ;main.c: 47: getPowerFault_AD(0x11);
  3931  146A  3011               	movlw	17
  3932  146B  319C  245F  3194   	fcall	_getPowerFault_AD
  3933                           
  3934                           ;main.c: 59: Buzzer_Main();
  3935  146E  3189  21E4  3194   	fcall	_Buzzer_Main
  3936  1471                     l9687:	
  3937                           
  3938                           ;main.c: 61: }
  3939                           ;main.c: 63: if(TMain->T0_Timerout)
  3940  1471  087D               	movf	_TMain,w
  3941  1472  0086               	movwf	6
  3942  1473  3001               	movlw	1	; select bank2/3
  3943  1474  0087               	movwf	7
  3944  1475  1C81               	btfss	1,1
  3945  1476  2C5C               	goto	l9683
  3946                           
  3947                           ;main.c: 64: {
  3948                           ;main.c: 65: TMain->T0_Timerout = 0;
  3949  1477  087D               	movf	_TMain,w
  3950  1478  0086               	movwf	6
  3951  1479  3001               	movlw	1	; select bank2/3
  3952  147A  0087               	movwf	7
  3953  147B  1081               	bcf	1,1
  3954                           
  3955                           ;main.c: 66: MainT();
  3956  147C  3196  2677  3194   	fcall	_MainT
  3957                           
  3958                           ;main.c: 67: MainT_ResetClock();
  3959  147F  31A7  2731  3194   	fcall	_MainT_ResetClock
  3960                           
  3961                           ;main.c: 68: if(TMain->PowerON)
  3962  1482  087D               	movf	_TMain,w
  3963  1483  0086               	movwf	6
  3964  1484  3001               	movlw	1	; select bank2/3
  3965  1485  0087               	movwf	7
  3966  1486  1C01               	btfss	1,0
  3967  1487  2C5C               	goto	l9683
  3968                           
  3969                           ;main.c: 69: {
  3970                           ;main.c: 70: Flash_Memory_Main();
  3971  1488  319D  25E1  3194   	fcall	_Flash_Memory_Main
  3972                           
  3973                           ;main.c: 72: LED_Main();
  3974  148B  31A6  2613  3194   	fcall	_LED_Main
  3975                           
  3976                           ;main.c: 74: ;;
  3977                           ;main.c: 75: Temp_Main();
  3978  148E  3190  2000  3194   	fcall	_Temp_Main
  3979                           
  3980                           ;main.c: 76: Load_Main();
  3981  1491  3180  2050  3194   	fcall	_Load_Main
  3982                           
  3983                           ;main.c: 77: PowerFault_Main();
  3984  1494  31A4  24B8  3194   	fcall	_PowerFault_Main
  3985                           
  3986                           ;main.c: 79: ;;
  3987                           ;main.c: 80: DimmerLights_Main();
  3988  1497  31A4  24FC  3194   	fcall	_DimmerLights_Main
  3989                           
  3990                           ;main.c: 81: Switch_Main();
  3991  149A  31A4  24DA  3194   	fcall	_Switch_Main
  3992                           
  3993                           ;main.c: 82: ;;
  3994                           ;main.c: 83: ;;
  3995                           ;main.c: 85: RF_Main();
  3996  149D  31A4  24D6  3194   	fcall	_RF_Main
  3997                           
  3998                           ;main.c: 86: DelayOff_Main();
  3999  14A0  31A4  24CE  3194   	fcall	_DelayOff_Main
  4000  14A3  2C5C               	goto	l9683
  4001  14A4                     __end_of_main:	
  4002                           
  4003                           	psect	text1
  4004  12EC                     __ptext1:	
  4005 ;; *************** function _getTemp_AD *****************
  4006 ;; Defined at:
  4007 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  channel         1    wreg     unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  channel         1    8[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;		None               void
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;Total ram usage:        5 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    5
  4028 ;; This function calls:
  4029 ;;		_getAD
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _getTemp_AD
  4037  12EC                     _getTemp_AD:	
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4041                           ;getTemp_AD@channel stored from wreg
  4042  12EC  0020               	movlb	0	; select bank0
  4043  12ED  00A8               	movwf	getTemp_AD@channel
  4044                           
  4045                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4046  12EE  087C               	movf	_Temp,w
  4047  12EF  0086               	movwf	6
  4048  12F0  3001               	movlw	1	; select bank2/3
  4049  12F1  0087               	movwf	7
  4050  12F2  1D01               	btfss	1,2
  4051  12F3  0008               	return
  4052                           
  4053                           ;OverTemperature_B1.c: 38: {
  4054                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4055  12F4  30F0               	movlw	240
  4056  12F5  00A4               	movwf	??_getTemp_AD
  4057  12F6  0824               	movf	??_getTemp_AD,w
  4058  12F7  00A0               	movwf	getAD@adcon1
  4059  12F8  0828               	movf	getTemp_AD@channel,w
  4060  12F9  31A7  276E  3192   	fcall	_getAD
  4061  12FC  087C               	movf	_Temp,w
  4062  12FD  3E0A               	addlw	10
  4063  12FE  0086               	movwf	6
  4064  12FF  3001               	movlw	1	; select bank2/3
  4065  1300  0087               	movwf	7
  4066  1301  0020               	movlb	0	; select bank0
  4067  1302  0820               	movf	?_getAD,w
  4068  1303  3FC0               	movwi [0]fsr1
  4069  1304  0821               	movf	?_getAD+1,w
  4070  1305  3FC1               	movwi [1]fsr1
  4071                           
  4072                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4073  1306  087C               	movf	_Temp,w
  4074  1307  3E0A               	addlw	10
  4075  1308  0086               	movwf	6
  4076  1309  3001               	movlw	1	; select bank2/3
  4077  130A  0087               	movwf	7
  4078  130B  3F40               	moviw [0]fsr1
  4079  130C  00A4               	movwf	??_getTemp_AD
  4080  130D  3F41               	moviw [1]fsr1
  4081  130E  00A5               	movwf	??_getTemp_AD+1
  4082  130F  087C               	movf	_Temp,w
  4083  1310  3E06               	addlw	6
  4084  1311  0086               	movwf	6
  4085  1312  3001               	movlw	1	; select bank2/3
  4086  1313  0087               	movwf	7
  4087  1314  3F40               	moviw [0]fsr1
  4088  1315  00A6               	movwf	??_getTemp_AD+2
  4089  1316  3F41               	moviw [1]fsr1
  4090  1317  00A7               	movwf	??_getTemp_AD+3
  4091  1318  0825               	movf	??_getTemp_AD+1,w
  4092  1319  0227               	subwf	??_getTemp_AD+3,w
  4093  131A  1D03               	skipz
  4094  131B  2B1E               	goto	u9205
  4095  131C  0824               	movf	??_getTemp_AD,w
  4096  131D  0226               	subwf	??_getTemp_AD+2,w
  4097  131E                     u9205:	
  4098  131E  1803               	skipnc
  4099  131F  2B2F               	goto	l9441
  4100                           
  4101                           ;OverTemperature_B1.c: 41: {
  4102                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4103  1320  087C               	movf	_Temp,w
  4104  1321  3E0A               	addlw	10
  4105  1322  0086               	movwf	6
  4106  1323  3001               	movlw	1	; select bank2/3
  4107  1324  0087               	movwf	7
  4108  1325  087C               	movf	_Temp,w
  4109  1326  3E06               	addlw	6
  4110  1327  0084               	movwf	4
  4111  1328  3001               	movlw	1	; select bank2/3
  4112  1329  0085               	movwf	5
  4113  132A  3F40               	moviw [0]fsr1
  4114  132B  3F80               	movwi [0]fsr0
  4115  132C  3F41               	moviw [1]fsr1
  4116  132D  3F81               	movwi [1]fsr0
  4117                           
  4118                           ;OverTemperature_B1.c: 43: }
  4119  132E  0008               	return
  4120  132F                     l9441:	
  4121                           
  4122                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4123  132F  087C               	movf	_Temp,w
  4124  1330  3E0A               	addlw	10
  4125  1331  0086               	movwf	6
  4126  1332  3001               	movlw	1	; select bank2/3
  4127  1333  0087               	movwf	7
  4128  1334  3F40               	moviw [0]fsr1
  4129  1335  00A4               	movwf	??_getTemp_AD
  4130  1336  3F41               	moviw [1]fsr1
  4131  1337  00A5               	movwf	??_getTemp_AD+1
  4132  1338  087C               	movf	_Temp,w
  4133  1339  3E08               	addlw	8
  4134  133A  0086               	movwf	6
  4135  133B  3001               	movlw	1	; select bank2/3
  4136  133C  0087               	movwf	7
  4137  133D  3F40               	moviw [0]fsr1
  4138  133E  00A6               	movwf	??_getTemp_AD+2
  4139  133F  3F41               	moviw [1]fsr1
  4140  1340  00A7               	movwf	??_getTemp_AD+3
  4141  1341  0825               	movf	??_getTemp_AD+1,w
  4142  1342  0227               	subwf	??_getTemp_AD+3,w
  4143  1343  1D03               	skipz
  4144  1344  2B47               	goto	u9215
  4145  1345  0824               	movf	??_getTemp_AD,w
  4146  1346  0226               	subwf	??_getTemp_AD+2,w
  4147  1347                     u9215:	
  4148  1347  1803               	skipnc
  4149  1348  0008               	return
  4150                           
  4151                           ;OverTemperature_B1.c: 45: {
  4152                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4153  1349  087C               	movf	_Temp,w
  4154  134A  3E0A               	addlw	10
  4155  134B  0086               	movwf	6
  4156  134C  3001               	movlw	1	; select bank2/3
  4157  134D  0087               	movwf	7
  4158  134E  087C               	movf	_Temp,w
  4159  134F  3E08               	addlw	8
  4160  1350  0084               	movwf	4
  4161  1351  3001               	movlw	1	; select bank2/3
  4162  1352  0085               	movwf	5
  4163  1353  3F40               	moviw [0]fsr1
  4164  1354  3F80               	movwi [0]fsr0
  4165  1355  3F41               	moviw [1]fsr1
  4166  1356  3F81               	movwi [1]fsr0
  4167  1357  0008               	return
  4168  1358                     __end_of_getTemp_AD:	
  4169                           
  4170                           	psect	text2
  4171  1C5F                     __ptext2:	
  4172 ;; *************** function _getPowerFault_AD *****************
  4173 ;; Defined at:
  4174 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  channel         1    wreg     unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  channel         1    8[BANK0 ] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;		None               void
  4181 ;; Registers used:
  4182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;Total ram usage:        5 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    5
  4195 ;; This function calls:
  4196 ;;		_getAD
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function _getPowerFault_AD
  4204  1C5F                     _getPowerFault_AD:	
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4208                           ;getPowerFault_AD@channel stored from wreg
  4209  1C5F  0020               	movlb	0	; select bank0
  4210  1C60  00A8               	movwf	getPowerFault_AD@channel
  4211                           
  4212                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4213  1C61  087A               	movf	_PF,w
  4214  1C62  0086               	movwf	6
  4215  1C63  0187               	clrf	7
  4216  1C64  1D81               	btfss	1,3
  4217  1C65  0008               	return
  4218                           
  4219                           ;PowerFault_B1.c: 52: {
  4220                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4221  1C66  30F0               	movlw	240
  4222  1C67  00A4               	movwf	??_getPowerFault_AD
  4223  1C68  0824               	movf	??_getPowerFault_AD,w
  4224  1C69  00A0               	movwf	getAD@adcon1
  4225  1C6A  0828               	movf	getPowerFault_AD@channel,w
  4226  1C6B  31A7  276E  319C   	fcall	_getAD
  4227  1C6E  087A               	movf	_PF,w
  4228  1C6F  3E03               	addlw	3
  4229  1C70  0086               	movwf	6
  4230  1C71  0187               	clrf	7
  4231  1C72  0020               	movlb	0	; select bank0
  4232  1C73  0820               	movf	?_getAD,w
  4233  1C74  3FC0               	movwi [0]fsr1
  4234  1C75  0821               	movf	?_getAD+1,w
  4235  1C76  3FC1               	movwi [1]fsr1
  4236                           
  4237                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4238  1C77  087A               	movf	_PF,w
  4239  1C78  3E03               	addlw	3
  4240  1C79  0086               	movwf	6
  4241  1C7A  0187               	clrf	7
  4242  1C7B  3F40               	moviw [0]fsr1
  4243  1C7C  00A4               	movwf	??_getPowerFault_AD
  4244  1C7D  3F41               	moviw [1]fsr1
  4245  1C7E  00A5               	movwf	??_getPowerFault_AD+1
  4246  1C7F  0A7A               	incf	_PF,w
  4247  1C80  0086               	movwf	6
  4248  1C81  0187               	clrf	7
  4249  1C82  3F40               	moviw [0]fsr1
  4250  1C83  00A6               	movwf	??_getPowerFault_AD+2
  4251  1C84  3F41               	moviw [1]fsr1
  4252  1C85  00A7               	movwf	??_getPowerFault_AD+3
  4253  1C86  0825               	movf	??_getPowerFault_AD+1,w
  4254  1C87  0227               	subwf	??_getPowerFault_AD+3,w
  4255  1C88  1D03               	skipz
  4256  1C89  2C8C               	goto	u9235
  4257  1C8A  0824               	movf	??_getPowerFault_AD,w
  4258  1C8B  0226               	subwf	??_getPowerFault_AD+2,w
  4259  1C8C                     u9235:	
  4260  1C8C  1803               	skipnc
  4261  1C8D  0008               	return
  4262                           
  4263                           ;PowerFault_B1.c: 55: {
  4264                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4265  1C8E  087A               	movf	_PF,w
  4266  1C8F  3E03               	addlw	3
  4267  1C90  0086               	movwf	6
  4268  1C91  0187               	clrf	7
  4269  1C92  0A7A               	incf	_PF,w
  4270  1C93  0084               	movwf	4
  4271  1C94  0185               	clrf	5
  4272  1C95  3F40               	moviw [0]fsr1
  4273  1C96  3F80               	movwi [0]fsr0
  4274  1C97  3F41               	moviw [1]fsr1
  4275  1C98  3F81               	movwi [1]fsr0
  4276  1C99  0008               	return
  4277  1C9A                     __end_of_getPowerFault_AD:	
  4278                           
  4279                           	psect	text3
  4280  094E                     __ptext3:	
  4281 ;; *************** function _getLoad_AD *****************
  4282 ;; Defined at:
  4283 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  channel         1    wreg     unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  channel         1    9[BANK0 ] unsigned char 
  4288 ;;  i               1   11[BANK0 ] unsigned char 
  4289 ;;  j               1   10[BANK0 ] unsigned char 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;		None               void
  4292 ;; Registers used:
  4293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;Total ram usage:        8 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    5
  4306 ;; This function calls:
  4307 ;;		_getAD
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _getLoad_AD
  4315  094E                     _getLoad_AD:	
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4319                           ;getLoad_AD@channel stored from wreg
  4320  094E  0020               	movlb	0	; select bank0
  4321  094F  00A9               	movwf	getLoad_AD@channel
  4322                           
  4323                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4324  0950  01AB               	clrf	getLoad_AD@i
  4325  0951  01AA               	clrf	getLoad_AD@j
  4326                           
  4327                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4328  0952  086E               	movf	_Load,w
  4329  0953  0086               	movwf	6
  4330  0954  3002               	movlw	2	; select bank4/5
  4331  0955  0087               	movwf	7
  4332  0956  1E01               	btfss	1,4
  4333  0957  0008               	return
  4334                           
  4335                           ;OverLoad_B1.c: 20: {
  4336                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4337  0958  30C0               	movlw	192
  4338  0959  00A4               	movwf	??_getLoad_AD
  4339  095A  0824               	movf	??_getLoad_AD,w
  4340  095B  00A0               	movwf	getAD@adcon1
  4341  095C  0829               	movf	getLoad_AD@channel,w
  4342  095D  31A7  276E  3189   	fcall	_getAD
  4343  0960  0020               	movlb	0	; select bank0
  4344  0961  086E               	movf	_Load,w
  4345  0962  3E32               	addlw	50
  4346  0963  0086               	movwf	6
  4347  0964  3002               	movlw	2	; select bank4/5
  4348  0965  0087               	movwf	7
  4349  0966  0820               	movf	?_getAD,w
  4350  0967  3FC0               	movwi [0]fsr1
  4351  0968  0821               	movf	?_getAD+1,w
  4352  0969  3FC1               	movwi [1]fsr1
  4353                           
  4354                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4355  096A  01AB               	clrf	getLoad_AD@i
  4356  096B  3005               	movlw	5
  4357  096C  022B               	subwf	getLoad_AD@i,w
  4358  096D  1803               	btfsc	3,0
  4359  096E  29A8               	goto	l9417
  4360  096F                     l9407:	
  4361                           
  4362                           ;OverLoad_B1.c: 23: {
  4363                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4364  096F  086E               	movf	_Load,w
  4365  0970  3E32               	addlw	50
  4366  0971  0086               	movwf	6
  4367  0972  3002               	movlw	2	; select bank4/5
  4368  0973  0087               	movwf	7
  4369  0974  3F40               	moviw [0]fsr1
  4370  0975  00A4               	movwf	??_getLoad_AD
  4371  0976  3F41               	moviw [1]fsr1
  4372  0977  00A5               	movwf	??_getLoad_AD+1
  4373  0978  352B               	lslf	getLoad_AD@i,w
  4374  0979  3E08               	addlw	8
  4375  097A  076E               	addwf	_Load,w
  4376  097B  00A6               	movwf	??_getLoad_AD+2
  4377  097C  0826               	movf	??_getLoad_AD+2,w
  4378  097D  0086               	movwf	6
  4379  097E  3002               	movlw	2	; select bank4/5
  4380  097F  0087               	movwf	7
  4381  0980  3F40               	moviw [0]fsr1
  4382  0981  00A7               	movwf	??_getLoad_AD+3
  4383  0982  3F41               	moviw [1]fsr1
  4384  0983  00A8               	movwf	??_getLoad_AD+4
  4385  0984  0825               	movf	??_getLoad_AD+1,w
  4386  0985  0228               	subwf	??_getLoad_AD+4,w
  4387  0986  1D03               	skipz
  4388  0987  298A               	goto	u9135
  4389  0988  0824               	movf	??_getLoad_AD,w
  4390  0989  0227               	subwf	??_getLoad_AD+3,w
  4391  098A                     u9135:	
  4392  098A  1803               	skipnc
  4393  098B  29A0               	goto	l9413
  4394                           
  4395                           ;OverLoad_B1.c: 25: {
  4396                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4397  098C  086E               	movf	_Load,w
  4398  098D  3E32               	addlw	50
  4399  098E  0086               	movwf	6
  4400  098F  3002               	movlw	2	; select bank4/5
  4401  0990  0087               	movwf	7
  4402  0991  352B               	lslf	getLoad_AD@i,w
  4403  0992  3E08               	addlw	8
  4404  0993  076E               	addwf	_Load,w
  4405  0994  00A4               	movwf	??_getLoad_AD
  4406  0995  0824               	movf	??_getLoad_AD,w
  4407  0996  0084               	movwf	4
  4408  0997  3002               	movlw	2	; select bank4/5
  4409  0998  0085               	movwf	5
  4410  0999  3F40               	moviw [0]fsr1
  4411  099A  3F80               	movwi [0]fsr0
  4412  099B  3F41               	moviw [1]fsr1
  4413  099C  3F81               	movwi [1]fsr0
  4414                           
  4415                           ;OverLoad_B1.c: 27: j=1;
  4416  099D  01AA               	clrf	getLoad_AD@j
  4417  099E  0AAA               	incf	getLoad_AD@j,f
  4418                           
  4419                           ;OverLoad_B1.c: 28: break;
  4420  099F  29A8               	goto	l9417
  4421  09A0                     l9413:	
  4422  09A0  3001               	movlw	1
  4423  09A1  00A4               	movwf	??_getLoad_AD
  4424  09A2  0824               	movf	??_getLoad_AD,w
  4425  09A3  07AB               	addwf	getLoad_AD@i,f
  4426  09A4  3005               	movlw	5
  4427  09A5  022B               	subwf	getLoad_AD@i,w
  4428  09A6  1C03               	skipc
  4429  09A7  296F               	goto	l9407
  4430  09A8                     l9417:	
  4431                           
  4432                           ;OverLoad_B1.c: 29: }
  4433                           ;OverLoad_B1.c: 30: }
  4434                           ;OverLoad_B1.c: 31: if(!j)
  4435  09A8  08AA               	movf	getLoad_AD@j,f
  4436  09A9  1D03               	skipz
  4437  09AA  0008               	return
  4438                           
  4439                           ;OverLoad_B1.c: 32: {
  4440                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4441  09AB  01AB               	clrf	getLoad_AD@i
  4442  09AC                     L1:	
  4443  09AC  3005               	movlw	5
  4444  09AD  022B               	subwf	getLoad_AD@i,w
  4445  09AE  1803               	btfsc	3,0
  4446  09AF  0008               	return
  4447                           
  4448                           ;OverLoad_B1.c: 34: {
  4449                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4450  09B0  352B               	lslf	getLoad_AD@i,w
  4451  09B1  3E1A               	addlw	26
  4452  09B2  076E               	addwf	_Load,w
  4453  09B3  00A4               	movwf	??_getLoad_AD
  4454  09B4  0824               	movf	??_getLoad_AD,w
  4455  09B5  0086               	movwf	6
  4456  09B6  3002               	movlw	2	; select bank4/5
  4457  09B7  0087               	movwf	7
  4458  09B8  3F40               	moviw [0]fsr1
  4459  09B9  00A5               	movwf	??_getLoad_AD+1
  4460  09BA  3F41               	moviw [1]fsr1
  4461  09BB  00A6               	movwf	??_getLoad_AD+2
  4462  09BC  086E               	movf	_Load,w
  4463  09BD  3E32               	addlw	50
  4464  09BE  0086               	movwf	6
  4465  09BF  3002               	movlw	2	; select bank4/5
  4466  09C0  0087               	movwf	7
  4467  09C1  3F40               	moviw [0]fsr1
  4468  09C2  00A7               	movwf	??_getLoad_AD+3
  4469  09C3  3F41               	moviw [1]fsr1
  4470  09C4  00A8               	movwf	??_getLoad_AD+4
  4471  09C5  0826               	movf	??_getLoad_AD+2,w
  4472  09C6  0228               	subwf	??_getLoad_AD+4,w
  4473  09C7  1D03               	skipz
  4474  09C8  29CB               	goto	u9175
  4475  09C9  0825               	movf	??_getLoad_AD+1,w
  4476  09CA  0227               	subwf	??_getLoad_AD+3,w
  4477  09CB                     u9175:	
  4478  09CB  1803               	skipnc
  4479  09CC  29DF               	goto	l9429
  4480                           
  4481                           ;OverLoad_B1.c: 36: {
  4482                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4483  09CD  086E               	movf	_Load,w
  4484  09CE  3E32               	addlw	50
  4485  09CF  0086               	movwf	6
  4486  09D0  3002               	movlw	2	; select bank4/5
  4487  09D1  0087               	movwf	7
  4488  09D2  352B               	lslf	getLoad_AD@i,w
  4489  09D3  3E1A               	addlw	26
  4490  09D4  076E               	addwf	_Load,w
  4491  09D5  00A4               	movwf	??_getLoad_AD
  4492  09D6  0824               	movf	??_getLoad_AD,w
  4493  09D7  0084               	movwf	4
  4494  09D8  3002               	movlw	2	; select bank4/5
  4495  09D9  0085               	movwf	5
  4496  09DA  3F40               	moviw [0]fsr1
  4497  09DB  3F80               	movwi [0]fsr0
  4498  09DC  3F41               	moviw [1]fsr1
  4499  09DD  3F81               	movwi [1]fsr0
  4500                           
  4501                           ;OverLoad_B1.c: 38: break;
  4502  09DE  0008               	return
  4503  09DF                     l9429:	
  4504  09DF  3001               	movlw	1
  4505  09E0  00A4               	movwf	??_getLoad_AD
  4506  09E1  0824               	movf	??_getLoad_AD,w
  4507  09E2  07AB               	addwf	getLoad_AD@i,f
  4508  09E3  29AC               	goto	L1
  4509  09E4                     __end_of_getLoad_AD:	
  4510                           
  4511                           	psect	text4
  4512  276E                     __ptext4:	
  4513 ;; *************** function _getAD *****************
  4514 ;; Defined at:
  4515 ;;		line 381 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  adcon0          1    wreg     unsigned char 
  4518 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2    0[BANK0 ] int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        4 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    4
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_getLoad_AD
  4541 ;;		_getTemp_AD
  4542 ;;		_getPowerFault_AD
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _getAD
  4548  276E                     _getAD:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4552                           ;getAD@adcon0 stored from wreg
  4553  276E  0020               	movlb	0	; select bank0
  4554  276F  00A3               	movwf	getAD@adcon0
  4555                           
  4556                           ;MCU_B1.c: 383: ADCON0=adcon0;
  4557  2770  0823               	movf	getAD@adcon0,w
  4558  2771  0021               	movlb	1	; select bank1
  4559  2772  009D               	movwf	29	;volatile
  4560                           
  4561                           ;MCU_B1.c: 384: ADCON1=adcon1;
  4562  2773  0020               	movlb	0	; select bank0
  4563  2774  0820               	movf	getAD@adcon1,w
  4564  2775  0021               	movlb	1	; select bank1
  4565  2776  009E               	movwf	30	;volatile
  4566                           
  4567                           ;MCU_B1.c: 385: GO_nDONE=1;
  4568  2777  149D               	bsf	29,1	;volatile
  4569  2778                     l1612:	
  4570                           ;MCU_B1.c: 386: while(GO_nDONE);
  4571                           
  4572  2778  189D               	btfsc	29,1	;volatile
  4573  2779  2F78               	goto	l1612
  4574                           
  4575                           ;MCU_B1.c: 387: return ((ADRESH*256)+ADRESL);
  4576  277A  081C               	movf	28,w	;volatile
  4577  277B  0020               	movlb	0	; select bank0
  4578  277C  01A1               	clrf	?_getAD+1
  4579  277D  07A1               	addwf	?_getAD+1,f
  4580  277E  0021               	movlb	1	; select bank1
  4581  277F  081B               	movf	27,w	;volatile
  4582  2780  0020               	movlb	0	; select bank0
  4583  2781  01A0               	clrf	?_getAD
  4584  2782  07A0               	addwf	?_getAD,f
  4585  2783  0008               	return
  4586  2784                     __end_of_getAD:	
  4587                           
  4588                           	psect	text5
  4589  1000                     __ptext5:	
  4590 ;; *************** function _Temp_Main *****************
  4591 ;; Defined at:
  4592 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;		None
  4597 ;; Return value:  Size  Location     Type
  4598 ;;		None               void
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;Total ram usage:        0 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:   10
  4613 ;; This function calls:
  4614 ;;		_setTemp_Main
  4615 ;; This function is called by:
  4616 ;;		_main
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _Temp_Main
  4622  1000                     _Temp_Main:	
  4623                           
  4624                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4628  1000  318E  26DD         	fcall	_setTemp_Main
  4629  1002  0008               	return
  4630  1003                     __end_of_Temp_Main:	
  4631                           
  4632                           	psect	text6
  4633  0EDD                     __ptext6:	
  4634 ;; *************** function _setTemp_Main *****************
  4635 ;; Defined at:
  4636 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;Total ram usage:        3 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    9
  4657 ;; This function calls:
  4658 ;;		_getLoad_Safe
  4659 ;;		_getPF_Safe
  4660 ;;		_setOverTemp_Exceptions
  4661 ;; This function is called by:
  4662 ;;		_Temp_Main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _setTemp_Main
  4668  0EDD                     _setTemp_Main:	
  4669                           
  4670                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4671                           
  4672                           ;incstack = 0
  4673                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4674  0EDD  087C               	movf	_Temp,w
  4675  0EDE  0086               	movwf	6
  4676  0EDF  3001               	movlw	1	; select bank2/3
  4677  0EE0  0087               	movwf	7
  4678  0EE1  1C01               	btfss	1,0
  4679  0EE2  0008               	return
  4680                           
  4681                           ;OverTemperature_B1.c: 67: {
  4682                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4683  0EE3  087C               	movf	_Temp,w
  4684  0EE4  0086               	movwf	6
  4685  0EE5  3001               	movlw	1	; select bank2/3
  4686  0EE6  0087               	movwf	7
  4687  0EE7  1901               	btfsc	1,2
  4688  0EE8  2F29               	goto	l9049
  4689                           
  4690                           ;OverTemperature_B1.c: 69: {
  4691                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4692  0EE9  0A7C               	incf	_Temp,w
  4693  0EEA  0086               	movwf	6
  4694  0EEB  3001               	movlw	1	; select bank2/3
  4695  0EEC  0087               	movwf	7
  4696  0EED  3001               	movlw	1
  4697  0EEE  0781               	addwf	1,f
  4698  0EEF  3141               	addfsr 1,1
  4699  0EF0  1803               	skipnc
  4700  0EF1  0A81               	incf	1,f
  4701                           
  4702                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4703  0EF2  0A7C               	incf	_Temp,w
  4704  0EF3  0086               	movwf	6
  4705  0EF4  3001               	movlw	1	; select bank2/3
  4706  0EF5  0087               	movwf	7
  4707  0EF6  3F40               	moviw [0]fsr1
  4708  0EF7  0020               	movlb	0	; select bank0
  4709  0EF8  00AD               	movwf	??_setTemp_Main
  4710  0EF9  3F41               	moviw [1]fsr1
  4711  0EFA  00AE               	movwf	??_setTemp_Main+1
  4712  0EFB  3001               	movlw	1
  4713  0EFC  022E               	subwf	??_setTemp_Main+1,w
  4714  0EFD  30F4               	movlw	244
  4715  0EFE  1903               	skipnz
  4716  0EFF  022D               	subwf	??_setTemp_Main,w
  4717  0F00  1C03               	skipc
  4718  0F01  0008               	return
  4719                           
  4720                           ;OverTemperature_B1.c: 72: {
  4721                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4722  0F02  31A5  2591  318E   	fcall	_getLoad_Safe
  4723  0F05  3A00               	xorlw	0
  4724  0F06  1903               	skipnz
  4725  0F07  2F20               	goto	l9047
  4726  0F08  31A5  2503  318E   	fcall	_getPF_Safe
  4727  0F0B  3A00               	xorlw	0
  4728  0F0C  1903               	skipnz
  4729  0F0D  2F20               	goto	l9047
  4730                           
  4731                           ;OverTemperature_B1.c: 74: {
  4732                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4733  0F0E  0A7C               	incf	_Temp,w
  4734  0F0F  0086               	movwf	6
  4735  0F10  3001               	movlw	1	; select bank2/3
  4736  0F11  0087               	movwf	7
  4737  0F12  3000               	movlw	0
  4738  0F13  3FC0               	movwi [0]fsr1
  4739  0F14  3FC1               	movwi [1]fsr1
  4740                           
  4741                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4742  0F15  087C               	movf	_Temp,w
  4743  0F16  0086               	movwf	6
  4744  0F17  3001               	movlw	1	; select bank2/3
  4745  0F18  0087               	movwf	7
  4746  0F19  1501               	bsf	1,2
  4747                           
  4748                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4749  0F1A  087C               	movf	_Temp,w
  4750  0F1B  0086               	movwf	6
  4751  0F1C  3001               	movlw	1	; select bank2/3
  4752  0F1D  0087               	movwf	7
  4753  0F1E  1201               	bcf	1,4
  4754                           
  4755                           ;OverTemperature_B1.c: 78: }
  4756  0F1F  0008               	return
  4757  0F20                     l9047:	
  4758                           
  4759                           ;OverTemperature_B1.c: 79: else
  4760                           ;OverTemperature_B1.c: 80: {
  4761                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4762  0F20  0A7C               	incf	_Temp,w
  4763  0F21  0086               	movwf	6
  4764  0F22  3001               	movlw	1	; select bank2/3
  4765  0F23  0087               	movwf	7
  4766  0F24  30E8               	movlw	232
  4767  0F25  3FC0               	movwi [0]fsr1
  4768  0F26  3003               	movlw	3
  4769  0F27  3FC1               	movwi [1]fsr1
  4770                           
  4771                           ;OverTemperature_B1.c: 82: }
  4772                           ;OverTemperature_B1.c: 83: }
  4773                           ;OverTemperature_B1.c: 84: }
  4774  0F28  0008               	return
  4775  0F29                     l9049:	
  4776                           
  4777                           ;OverTemperature_B1.c: 85: else
  4778                           ;OverTemperature_B1.c: 86: {
  4779                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4780  0F29  0A7C               	incf	_Temp,w
  4781  0F2A  0086               	movwf	6
  4782  0F2B  3001               	movlw	1	; select bank2/3
  4783  0F2C  0087               	movwf	7
  4784  0F2D  3001               	movlw	1
  4785  0F2E  0781               	addwf	1,f
  4786  0F2F  3141               	addfsr 1,1
  4787  0F30  1803               	skipnc
  4788  0F31  0A81               	incf	1,f
  4789                           
  4790                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4791  0F32  0A7C               	incf	_Temp,w
  4792  0F33  0086               	movwf	6
  4793  0F34  3001               	movlw	1	; select bank2/3
  4794  0F35  0087               	movwf	7
  4795  0F36  3F40               	moviw [0]fsr1
  4796  0F37  0020               	movlb	0	; select bank0
  4797  0F38  00AD               	movwf	??_setTemp_Main
  4798  0F39  3F41               	moviw [1]fsr1
  4799  0F3A  00AE               	movwf	??_setTemp_Main+1
  4800  0F3B  3000               	movlw	0
  4801  0F3C  022E               	subwf	??_setTemp_Main+1,w
  4802  0F3D  3004               	movlw	4
  4803  0F3E  1903               	skipnz
  4804  0F3F  022D               	subwf	??_setTemp_Main,w
  4805  0F40  1C03               	skipc
  4806  0F41  0008               	return
  4807                           
  4808                           ;OverTemperature_B1.c: 89: {
  4809                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4810  0F42  0A7C               	incf	_Temp,w
  4811  0F43  0086               	movwf	6
  4812  0F44  3001               	movlw	1	; select bank2/3
  4813  0F45  0087               	movwf	7
  4814  0F46  3000               	movlw	0
  4815  0F47  3FC0               	movwi [0]fsr1
  4816  0F48  3FC1               	movwi [1]fsr1
  4817                           
  4818                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4819  0F49  087C               	movf	_Temp,w
  4820  0F4A  0086               	movwf	6
  4821  0F4B  3001               	movlw	1	; select bank2/3
  4822  0F4C  0087               	movwf	7
  4823  0F4D  1101               	bcf	1,2
  4824                           
  4825                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4826  0F4E  087C               	movf	_Temp,w
  4827  0F4F  3E08               	addlw	8
  4828  0F50  0086               	movwf	6
  4829  0F51  3001               	movlw	1	; select bank2/3
  4830  0F52  0087               	movwf	7
  4831  0F53  087C               	movf	_Temp,w
  4832  0F54  3E04               	addlw	4
  4833  0F55  0084               	movwf	4
  4834  0F56  3001               	movlw	1	; select bank2/3
  4835  0F57  0085               	movwf	5
  4836  0F58  3F40               	moviw [0]fsr1
  4837  0F59  3F80               	movwi [0]fsr0
  4838  0F5A  3F41               	moviw [1]fsr1
  4839  0F5B  3F81               	movwi [1]fsr0
  4840                           
  4841                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4842  0F5C  087C               	movf	_Temp,w
  4843  0F5D  0086               	movwf	6
  4844  0F5E  3001               	movlw	1	; select bank2/3
  4845  0F5F  0087               	movwf	7
  4846  0F60  1C81               	btfss	1,1
  4847  0F61  2F8F               	goto	l9071
  4848                           
  4849                           ;OverTemperature_B1.c: 94: {
  4850                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4851  0F62  087C               	movf	_Temp,w
  4852  0F63  3E04               	addlw	4
  4853  0F64  0086               	movwf	6
  4854  0F65  3001               	movlw	1	; select bank2/3
  4855  0F66  0087               	movwf	7
  4856  0F67  3F40               	moviw [0]fsr1
  4857  0F68  00AD               	movwf	??_setTemp_Main
  4858  0F69  3F41               	moviw [1]fsr1
  4859  0F6A  00AE               	movwf	??_setTemp_Main+1
  4860  0F6B  3002               	movlw	2
  4861  0F6C  022E               	subwf	??_setTemp_Main+1,w
  4862  0F6D  3058               	movlw	88
  4863  0F6E  1903               	skipnz
  4864  0F6F  022D               	subwf	??_setTemp_Main,w
  4865  0F70  1C03               	skipc
  4866  0F71  2FBD               	goto	l9081
  4867                           
  4868                           ;OverTemperature_B1.c: 96: {
  4869                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4870  0F72  3001               	movlw	1
  4871  0F73  00AD               	movwf	??_setTemp_Main
  4872  0F74  087C               	movf	_Temp,w
  4873  0F75  3E03               	addlw	3
  4874  0F76  0086               	movwf	6
  4875  0F77  3001               	movlw	1	; select bank2/3
  4876  0F78  0087               	movwf	7
  4877  0F79  082D               	movf	??_setTemp_Main,w
  4878  0F7A  0781               	addwf	1,f
  4879                           
  4880                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4881  0F7B  087C               	movf	_Temp,w
  4882  0F7C  3E03               	addlw	3
  4883  0F7D  0086               	movwf	6
  4884  0F7E  3001               	movlw	1	; select bank2/3
  4885  0F7F  0087               	movwf	7
  4886  0F80  3003               	movlw	3
  4887  0F81  0201               	subwf	1,w
  4888  0F82  1C03               	skipc
  4889  0F83  2FC3               	goto	l9083
  4890                           
  4891                           ;OverTemperature_B1.c: 99: {
  4892                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4893  0F84  087C               	movf	_Temp,w
  4894  0F85  3E03               	addlw	3
  4895  0F86  0086               	movwf	6
  4896  0F87  3001               	movlw	1	; select bank2/3
  4897  0F88  0087               	movwf	7
  4898  0F89  0181               	clrf	1
  4899                           
  4900                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4901  0F8A  3000               	movlw	0
  4902  0F8B  319E  26B5  318E   	fcall	_setOverTemp_Exceptions
  4903                           
  4904                           ;OverTemperature_B1.c: 102: }
  4905                           ;OverTemperature_B1.c: 103: }
  4906  0F8E  2FC3               	goto	l9083
  4907  0F8F                     l9071:	
  4908                           ;OverTemperature_B1.c: 107: }
  4909                           ;OverTemperature_B1.c: 108: }
  4910                           
  4911                           ;OverTemperature_B1.c: 104: else
  4912                           ;OverTemperature_B1.c: 105: {
  4913                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4914                           
  4915                           
  4916                           ;OverTemperature_B1.c: 109: else
  4917                           ;OverTemperature_B1.c: 110: {
  4918                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4919  0F8F  087C               	movf	_Temp,w
  4920  0F90  3E04               	addlw	4
  4921  0F91  0086               	movwf	6
  4922  0F92  3001               	movlw	1	; select bank2/3
  4923  0F93  0087               	movwf	7
  4924  0F94  3F40               	moviw [0]fsr1
  4925  0F95  0020               	movlb	0	; select bank0
  4926  0F96  00AD               	movwf	??_setTemp_Main
  4927  0F97  3F41               	moviw [1]fsr1
  4928  0F98  00AE               	movwf	??_setTemp_Main+1
  4929  0F99  3002               	movlw	2
  4930  0F9A  022E               	subwf	??_setTemp_Main+1,w
  4931  0F9B  3027               	movlw	39
  4932  0F9C  1903               	skipnz
  4933  0F9D  022D               	subwf	??_setTemp_Main,w
  4934  0F9E  1803               	skipnc
  4935  0F9F  2FBD               	goto	l9081
  4936                           
  4937                           ;OverTemperature_B1.c: 112: {
  4938                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4939  0FA0  3001               	movlw	1
  4940  0FA1  00AD               	movwf	??_setTemp_Main
  4941  0FA2  087C               	movf	_Temp,w
  4942  0FA3  3E03               	addlw	3
  4943  0FA4  0086               	movwf	6
  4944  0FA5  3001               	movlw	1	; select bank2/3
  4945  0FA6  0087               	movwf	7
  4946  0FA7  082D               	movf	??_setTemp_Main,w
  4947  0FA8  0781               	addwf	1,f
  4948                           
  4949                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4950  0FA9  087C               	movf	_Temp,w
  4951  0FAA  3E03               	addlw	3
  4952  0FAB  0086               	movwf	6
  4953  0FAC  3001               	movlw	1	; select bank2/3
  4954  0FAD  0087               	movwf	7
  4955  0FAE  3003               	movlw	3
  4956  0FAF  0201               	subwf	1,w
  4957  0FB0  1C03               	skipc
  4958  0FB1  2FC3               	goto	l9083
  4959                           
  4960                           ;OverTemperature_B1.c: 115: {
  4961                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4962  0FB2  087C               	movf	_Temp,w
  4963  0FB3  3E03               	addlw	3
  4964  0FB4  0086               	movwf	6
  4965  0FB5  3001               	movlw	1	; select bank2/3
  4966  0FB6  0087               	movwf	7
  4967  0FB7  0181               	clrf	1
  4968                           
  4969                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4970  0FB8  3001               	movlw	1
  4971  0FB9  319E  26B5  318E   	fcall	_setOverTemp_Exceptions
  4972                           
  4973                           ;OverTemperature_B1.c: 118: }
  4974                           ;OverTemperature_B1.c: 119: }
  4975  0FBC  2FC3               	goto	l9083
  4976  0FBD                     l9081:	
  4977                           
  4978                           ;OverTemperature_B1.c: 120: else
  4979                           ;OverTemperature_B1.c: 121: {
  4980                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  4981  0FBD  087C               	movf	_Temp,w
  4982  0FBE  3E03               	addlw	3
  4983  0FBF  0086               	movwf	6
  4984  0FC0  3001               	movlw	1	; select bank2/3
  4985  0FC1  0087               	movwf	7
  4986  0FC2  0181               	clrf	1
  4987  0FC3                     l9083:	
  4988                           
  4989                           ;OverTemperature_B1.c: 123: }
  4990                           ;OverTemperature_B1.c: 124: }
  4991                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  4992  0FC3  087C               	movf	_Temp,w
  4993  0FC4  0086               	movwf	6
  4994  0FC5  3001               	movlw	1	; select bank2/3
  4995  0FC6  0087               	movwf	7
  4996  0FC7  1881               	btfsc	1,1
  4997  0FC8  2FCE               	goto	l9087
  4998                           
  4999                           ;OverTemperature_B1.c: 126: {
  5000                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5001  0FC9  087C               	movf	_Temp,w
  5002  0FCA  0086               	movwf	6
  5003  0FCB  3001               	movlw	1	; select bank2/3
  5004  0FCC  0087               	movwf	7
  5005  0FCD  1601               	bsf	1,4
  5006  0FCE                     l9087:	
  5007                           
  5008                           ;OverTemperature_B1.c: 128: }
  5009                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5010  0FCE  087C               	movf	_Temp,w
  5011  0FCF  3E04               	addlw	4
  5012  0FD0  0086               	movwf	6
  5013  0FD1  3001               	movlw	1	; select bank2/3
  5014  0FD2  0087               	movwf	7
  5015  0FD3  3F40               	moviw [0]fsr1
  5016  0FD4  0020               	movlb	0	; select bank0
  5017  0FD5  00AD               	movwf	??_setTemp_Main
  5018  0FD6  3F41               	moviw [1]fsr1
  5019  0FD7  00AE               	movwf	??_setTemp_Main+1
  5020  0FD8  082E               	movf	??_setTemp_Main+1,w
  5021  0FD9  00AF               	movwf	??_setTemp_Main+2
  5022  0FDA  086F               	movf	_Product,w
  5023  0FDB  3E18               	addlw	24
  5024  0FDC  0086               	movwf	6
  5025  0FDD  3001               	movlw	1	; select bank2/3
  5026  0FDE  0087               	movwf	7
  5027  0FDF  082F               	movf	??_setTemp_Main+2,w
  5028  0FE0  0081               	movwf	1
  5029                           
  5030                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5031  0FE1  087C               	movf	_Temp,w
  5032  0FE2  3E04               	addlw	4
  5033  0FE3  0086               	movwf	6
  5034  0FE4  3001               	movlw	1	; select bank2/3
  5035  0FE5  0087               	movwf	7
  5036  0FE6  0801               	movf	1,w
  5037  0FE7  00AD               	movwf	??_setTemp_Main
  5038  0FE8  086F               	movf	_Product,w
  5039  0FE9  3E19               	addlw	25
  5040  0FEA  0086               	movwf	6
  5041  0FEB  3001               	movlw	1	; select bank2/3
  5042  0FEC  0087               	movwf	7
  5043  0FED  082D               	movf	??_setTemp_Main,w
  5044  0FEE  0081               	movwf	1
  5045                           
  5046                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5047  0FEF  087C               	movf	_Temp,w
  5048  0FF0  3E06               	addlw	6
  5049  0FF1  0086               	movwf	6
  5050  0FF2  3001               	movlw	1	; select bank2/3
  5051  0FF3  0087               	movwf	7
  5052  0FF4  3000               	movlw	0
  5053  0FF5  3FC0               	movwi [0]fsr1
  5054  0FF6  3FC1               	movwi [1]fsr1
  5055                           
  5056                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5057  0FF7  087C               	movf	_Temp,w
  5058  0FF8  3E08               	addlw	8
  5059  0FF9  0086               	movwf	6
  5060  0FFA  3001               	movlw	1	; select bank2/3
  5061  0FFB  0087               	movwf	7
  5062  0FFC  3000               	movlw	0
  5063  0FFD  3FC0               	movwi [0]fsr1
  5064  0FFE  3FC1               	movwi [1]fsr1
  5065  0FFF  0008               	return
  5066  1000                     __end_of_setTemp_Main:	
  5067                           
  5068                           	psect	text7
  5069  1EB5                     __ptext7:	
  5070 ;; *************** function _setOverTemp_Exceptions *****************
  5071 ;; Defined at:
  5072 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  command         1    wreg     unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  command         1   12[BANK0 ] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;Total ram usage:        2 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    8
  5093 ;; This function calls:
  5094 ;;		_DimmerLights_Exceptions
  5095 ;;		_setBuz
  5096 ;;		_setLED
  5097 ;;		_setRF_Enable
  5098 ;;		_setSw_Enable
  5099 ;; This function is called by:
  5100 ;;		_setTemp_Main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _setOverTemp_Exceptions
  5106  1EB5                     _setOverTemp_Exceptions:	
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5110                           ;setOverTemp_Exceptions@command stored from wreg
  5111  1EB5  0020               	movlb	0	; select bank0
  5112  1EB6  00AC               	movwf	setOverTemp_Exceptions@command
  5113                           
  5114                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5115  1EB7  087C               	movf	_Temp,w
  5116  1EB8  0086               	movwf	6
  5117  1EB9  3001               	movlw	1	; select bank2/3
  5118  1EBA  0087               	movwf	7
  5119  1EBB  082C               	movf	setOverTemp_Exceptions@command,w
  5120  1EBC  1081               	bcf	1,1
  5121  1EBD  1D03               	skipz
  5122  1EBE  1481               	bsf	1,1
  5123                           
  5124                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5125  1EBF  092C               	comf	setOverTemp_Exceptions@command,w
  5126  1EC0  3901               	andlw	1
  5127  1EC1  00AB               	movwf	??_setOverTemp_Exceptions
  5128  1EC2  087C               	movf	_Temp,w
  5129  1EC3  0086               	movwf	6
  5130  1EC4  3001               	movlw	1	; select bank2/3
  5131  1EC5  0087               	movwf	7
  5132  1EC6  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5133  1EC7  0801               	movf	1,w
  5134  1EC8  062B               	xorwf	??_setOverTemp_Exceptions,w
  5135  1EC9  39EF               	andlw	-17
  5136  1ECA  062B               	xorwf	??_setOverTemp_Exceptions,w
  5137  1ECB  0081               	movwf	1
  5138                           
  5139                           ;OverTemperature_B1.c: 142: if(command)
  5140  1ECC  082C               	movf	setOverTemp_Exceptions@command,w
  5141  1ECD  1903               	btfsc	3,2
  5142  1ECE  2EDB               	goto	l8709
  5143                           
  5144                           ;OverTemperature_B1.c: 143: {
  5145                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5146  1ECF  3001               	movlw	1
  5147  1ED0  3190  204D  319E   	fcall	_DimmerLights_Exceptions
  5148                           
  5149                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5150  1ED3  0020               	movlb	0	; select bank0
  5151  1ED4  01A2               	clrf	setLED@command
  5152  1ED5  0AA2               	incf	setLED@command,f
  5153  1ED6  3002               	movlw	2
  5154  1ED7  3191  215E  319E   	fcall	_setLED
  5155                           
  5156                           ;OverTemperature_B1.c: 148: }
  5157  1EDA  2EE4               	goto	l2034
  5158  1EDB                     l8709:	
  5159                           
  5160                           ;OverTemperature_B1.c: 149: else
  5161                           ;OverTemperature_B1.c: 150: {
  5162                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5163  1EDB  3064               	movlw	100
  5164  1EDC  0020               	movlb	0	; select bank0
  5165  1EDD  00A6               	movwf	setBuz@time
  5166  1EDE  3000               	movlw	0
  5167  1EDF  00A7               	movwf	setBuz@time+1
  5168  1EE0  3002               	movlw	2
  5169  1EE1  3195  2587  319E   	fcall	_setBuz
  5170  1EE4                     l2034:	
  5171                           
  5172                           ;OverTemperature_B1.c: 152: }
  5173                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5174  1EE4  0020               	movlb	0	; select bank0
  5175  1EE5  082C               	movf	setOverTemp_Exceptions@command,w
  5176  1EE6  3E0A               	addlw	10
  5177  1EE7  00AB               	movwf	??_setOverTemp_Exceptions
  5178  1EE8  082B               	movf	??_setOverTemp_Exceptions,w
  5179  1EE9  00A2               	movwf	setLED@command
  5180  1EEA  3063               	movlw	99
  5181  1EEB  3191  215E  319E   	fcall	_setLED
  5182                           
  5183                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5184  1EEE  0020               	movlb	0	; select bank0
  5185  1EEF  092C               	comf	setOverTemp_Exceptions@command,w
  5186  1EF0  3901               	andlw	1
  5187  1EF1  3198  2066  319E   	fcall	_setSw_Enable
  5188                           
  5189                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5190  1EF4  0020               	movlb	0	; select bank0
  5191  1EF5  092C               	comf	setOverTemp_Exceptions@command,w
  5192  1EF6  3901               	andlw	1
  5193  1EF7  00AB               	movwf	??_setOverTemp_Exceptions
  5194  1EF8  082B               	movf	??_setOverTemp_Exceptions,w
  5195  1EF9  00A2               	movwf	setRF_Enable@command
  5196  1EFA  3001               	movlw	1
  5197  1EFB  319A  2222         	fcall	_setRF_Enable
  5198  1EFD  0008               	return
  5199  1EFE                     __end_of_setOverTemp_Exceptions:	
  5200                           
  5201                           	psect	text8
  5202  24BB                     __ptext8:	
  5203 ;; *************** function _Temp_Initialization *****************
  5204 ;; Defined at:
  5205 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;		None
  5210 ;; Return value:  Size  Location     Type
  5211 ;;		None               void
  5212 ;; Registers used:
  5213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;Total ram usage:        0 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:    5
  5226 ;; This function calls:
  5227 ;;		_setTemp_Initialization
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _Temp_Initialization
  5235  24BB                     _Temp_Initialization:	
  5236                           
  5237                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5238                           
  5239                           ;incstack = 0
  5240                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5241  24BB  31A5  259C         	fcall	_setTemp_Initialization
  5242  24BD  0008               	return
  5243  24BE                     __end_of_Temp_Initialization:	
  5244                           
  5245                           	psect	text9
  5246  259C                     __ptext9:	
  5247 ;; *************** function _setTemp_Initialization *****************
  5248 ;; Defined at:
  5249 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;		None
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg, fsr1l, fsr1h
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;Total ram usage:        1 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    4
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_Temp_Initialization
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _setTemp_Initialization
  5279  259C                     _setTemp_Initialization:	
  5280                           
  5281                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5285  259C  303E               	movlw	_Temp1& (0+255)
  5286  259D  0020               	movlb	0	; select bank0
  5287  259E  00A0               	movwf	??_setTemp_Initialization
  5288  259F  0820               	movf	??_setTemp_Initialization,w
  5289  25A0  00FC               	movwf	_Temp
  5290                           
  5291                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5292  25A1  087C               	movf	_Temp,w
  5293  25A2  0086               	movwf	6
  5294  25A3  3001               	movlw	1	; select bank2/3
  5295  25A4  0087               	movwf	7
  5296  25A5  1601               	bsf	1,4
  5297  25A6  0008               	return
  5298  25A7                     __end_of_setTemp_Initialization:	
  5299                           
  5300                           	psect	text10
  5301  24DA                     __ptext10:	
  5302 ;; *************** function _Switch_Main *****************
  5303 ;; Defined at:
  5304 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:   10
  5325 ;; This function calls:
  5326 ;;		_setSw_Main
  5327 ;; This function is called by:
  5328 ;;		_main
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _Switch_Main
  5334  24DA                     _Switch_Main:	
  5335                           
  5336                           ;Switch_B1.c: 65: setSw_Main(1);
  5337                           
  5338                           ;incstack = 0
  5339                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5340  24DA  3001               	movlw	1
  5341  24DB  3185  25F3         	fcall	_setSw_Main
  5342  24DD  0008               	return
  5343  24DE                     __end_of_Switch_Main:	
  5344                           
  5345                           	psect	text11
  5346  05F3                     __ptext11:	
  5347 ;; *************** function _setSw_Main *****************
  5348 ;; Defined at:
  5349 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  sw              1    wreg     unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  sw              1   72[BANK0 ] unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;		None               void
  5356 ;; Registers used:
  5357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;Total ram usage:        4 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    9
  5370 ;; This function calls:
  5371 ;;		_SwPointSelect
  5372 ;;		_Sw_DimmerAdjFunc
  5373 ;;		_Sw_DimmerOffFunc
  5374 ;;		_Sw_DimmerOnFunc
  5375 ;;		_setBuz
  5376 ;;		_setRF_Learn
  5377 ;; This function is called by:
  5378 ;;		_Switch_Main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _setSw_Main
  5384  05F3                     _setSw_Main:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5388                           ;setSw_Main@sw stored from wreg
  5389  05F3  0020               	movlb	0	; select bank0
  5390  05F4  00E8               	movwf	setSw_Main@sw
  5391                           
  5392                           ;Switch_B1.c: 114: if(Sw->Enable)
  5393  05F5  086D               	movf	_Sw,w
  5394  05F6  0086               	movwf	6
  5395  05F7  3001               	movlw	1	; select bank2/3
  5396  05F8  0087               	movwf	7
  5397  05F9  1C01               	btfss	1,0
  5398  05FA  0008               	return
  5399                           
  5400                           ;Switch_B1.c: 115: {
  5401                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5402  05FB  0868               	movf	setSw_Main@sw,w
  5403  05FC  31A5  2565  3185   	fcall	_SwPointSelect
  5404                           
  5405                           ;Switch_B1.c: 144: Sw->Touch=(RA6 || RA4 || RA0 || RB1)?1:0;
  5406  05FF  0020               	movlb	0	; select bank0
  5407  0600  01E7               	clrf	_setSw_Main$4649
  5408  0601  0AE7               	incf	_setSw_Main$4649,f
  5409  0602  1F0C               	btfss	12,6	;volatile
  5410  0603  1A0C               	btfsc	12,4	;volatile
  5411  0604  2E09               	goto	l9229
  5412  0605  1C0C               	btfss	12,0	;volatile
  5413  0606  188D               	btfsc	13,1	;volatile
  5414  0607  2E09               	goto	l9229
  5415  0608  01E7               	clrf	_setSw_Main$4649
  5416  0609                     l9229:	
  5417  0609  086D               	movf	_Sw,w
  5418  060A  0086               	movwf	6
  5419  060B  3001               	movlw	1	; select bank2/3
  5420  060C  0087               	movwf	7
  5421  060D  0867               	movf	_setSw_Main$4649,w
  5422  060E  1081               	bcf	1,1
  5423  060F  1D03               	skipz
  5424  0610  1481               	bsf	1,1
  5425                           
  5426                           ;Switch_B1.c: 148: if(Sw->Touch)
  5427  0611  086D               	movf	_Sw,w
  5428  0612  0086               	movwf	6
  5429  0613  3001               	movlw	1	; select bank2/3
  5430  0614  0087               	movwf	7
  5431  0615  1C81               	btfss	1,1
  5432  0616  2EE7               	goto	l9279
  5433                           
  5434                           ;Switch_B1.c: 149: {
  5435                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5436  0617  086D               	movf	_Sw,w
  5437  0618  0086               	movwf	6
  5438  0619  3001               	movlw	1	; select bank2/3
  5439  061A  0087               	movwf	7
  5440  061B  1901               	btfsc	1,2
  5441  061C  2E3E               	goto	l9245
  5442                           
  5443                           ;Switch_B1.c: 151: {
  5444                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5445  061D  3001               	movlw	1
  5446  061E  00E5               	movwf	??_setSw_Main
  5447  061F  086D               	movf	_Sw,w
  5448  0620  3E02               	addlw	2
  5449  0621  0086               	movwf	6
  5450  0622  3001               	movlw	1	; select bank2/3
  5451  0623  0087               	movwf	7
  5452  0624  0865               	movf	??_setSw_Main,w
  5453  0625  0781               	addwf	1,f
  5454                           
  5455                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5456  0626  086D               	movf	_Sw,w
  5457  0627  3E02               	addlw	2
  5458  0628  0086               	movwf	6
  5459  0629  3001               	movlw	1	; select bank2/3
  5460  062A  0087               	movwf	7
  5461  062B  3005               	movlw	5
  5462  062C  0201               	subwf	1,w
  5463  062D  1C03               	skipc
  5464  062E  0008               	return
  5465                           
  5466                           ;Switch_B1.c: 154: {
  5467                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5468  062F  086D               	movf	_Sw,w
  5469  0630  3E02               	addlw	2
  5470  0631  0086               	movwf	6
  5471  0632  3001               	movlw	1	; select bank2/3
  5472  0633  0087               	movwf	7
  5473  0634  0181               	clrf	1
  5474                           
  5475                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5476  0635  086D               	movf	_Sw,w
  5477  0636  0086               	movwf	6
  5478  0637  3001               	movlw	1	; select bank2/3
  5479  0638  0087               	movwf	7
  5480  0639  1501               	bsf	1,2
  5481                           
  5482                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5483  063A  0868               	movf	setSw_Main@sw,w
  5484  063B  319F  27A7         	fcall	_Sw_DimmerOnFunc
  5485                           
  5486                           ;Switch_B1.c: 162: }
  5487                           ;Switch_B1.c: 163: }
  5488  063D  0008               	return
  5489  063E                     l9245:	
  5490                           
  5491                           ;Switch_B1.c: 164: else
  5492                           ;Switch_B1.c: 165: {
  5493                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5494  063E  0020               	movlb	0	; select bank0
  5495  063F  086D               	movf	_Sw,w
  5496  0640  0086               	movwf	6
  5497  0641  3001               	movlw	1	; select bank2/3
  5498  0642  0087               	movwf	7
  5499  0643  1981               	btfsc	1,3
  5500  0644  2E70               	goto	l9255
  5501                           
  5502                           ;Switch_B1.c: 167: {
  5503                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5504  0645  086D               	movf	_Sw,w
  5505  0646  3E03               	addlw	3
  5506  0647  0086               	movwf	6
  5507  0648  3001               	movlw	1	; select bank2/3
  5508  0649  0087               	movwf	7
  5509  064A  3001               	movlw	1
  5510  064B  0781               	addwf	1,f
  5511  064C  3141               	addfsr 1,1
  5512  064D  1803               	skipnc
  5513  064E  0A81               	incf	1,f
  5514                           
  5515                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5516  064F  086D               	movf	_Sw,w
  5517  0650  3E03               	addlw	3
  5518  0651  0086               	movwf	6
  5519  0652  3001               	movlw	1	; select bank2/3
  5520  0653  0087               	movwf	7
  5521  0654  3F40               	moviw [0]fsr1
  5522  0655  00E5               	movwf	??_setSw_Main
  5523  0656  3F41               	moviw [1]fsr1
  5524  0657  00E6               	movwf	??_setSw_Main+1
  5525  0658  3000               	movlw	0
  5526  0659  0266               	subwf	??_setSw_Main+1,w
  5527  065A  3096               	movlw	150
  5528  065B  1903               	skipnz
  5529  065C  0265               	subwf	??_setSw_Main,w
  5530  065D  1C03               	skipc
  5531  065E  0008               	return
  5532                           
  5533                           ;Switch_B1.c: 170: {
  5534                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5535  065F  086D               	movf	_Sw,w
  5536  0660  3E03               	addlw	3
  5537  0661  0086               	movwf	6
  5538  0662  3001               	movlw	1	; select bank2/3
  5539  0663  0087               	movwf	7
  5540  0664  3000               	movlw	0
  5541  0665  3FC0               	movwi [0]fsr1
  5542  0666  3FC1               	movwi [1]fsr1
  5543                           
  5544                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5545  0667  086D               	movf	_Sw,w
  5546  0668  0086               	movwf	6
  5547  0669  3001               	movlw	1	; select bank2/3
  5548  066A  0087               	movwf	7
  5549  066B  1581               	bsf	1,3
  5550                           
  5551                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5552  066C  0868               	movf	setSw_Main@sw,w
  5553  066D  319A  2277         	fcall	_Sw_DimmerAdjFunc
  5554                           
  5555                           ;Switch_B1.c: 178: }
  5556                           ;Switch_B1.c: 179: }
  5557  066F  0008               	return
  5558  0670                     l9255:	
  5559                           
  5560                           ;Switch_B1.c: 180: else
  5561                           ;Switch_B1.c: 181: {
  5562                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5563  0670  0020               	movlb	0	; select bank0
  5564  0671  086D               	movf	_Sw,w
  5565  0672  0086               	movwf	6
  5566  0673  3001               	movlw	1	; select bank2/3
  5567  0674  0087               	movwf	7
  5568  0675  1A01               	btfsc	1,4
  5569  0676  2EB4               	goto	l9269
  5570                           
  5571                           ;Switch_B1.c: 183: {
  5572                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5573  0677  086D               	movf	_Sw,w
  5574  0678  3E05               	addlw	5
  5575  0679  0086               	movwf	6
  5576  067A  3001               	movlw	1	; select bank2/3
  5577  067B  0087               	movwf	7
  5578  067C  3001               	movlw	1
  5579  067D  0781               	addwf	1,f
  5580  067E  3141               	addfsr 1,1
  5581  067F  1803               	skipnc
  5582  0680  0A81               	incf	1,f
  5583                           
  5584                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5585  0681  086D               	movf	_Sw,w
  5586  0682  3E05               	addlw	5
  5587  0683  0086               	movwf	6
  5588  0684  3001               	movlw	1	; select bank2/3
  5589  0685  0087               	movwf	7
  5590  0686  3F40               	moviw [0]fsr1
  5591  0687  00E5               	movwf	??_setSw_Main
  5592  0688  3F41               	moviw [1]fsr1
  5593  0689  00E6               	movwf	??_setSw_Main+1
  5594  068A  3000               	movlw	0
  5595  068B  0266               	subwf	??_setSw_Main+1,w
  5596  068C  3096               	movlw	150
  5597  068D  1903               	skipnz
  5598  068E  0265               	subwf	??_setSw_Main,w
  5599  068F  1C03               	skipc
  5600  0690  0008               	return
  5601                           
  5602                           ;Switch_B1.c: 186: {
  5603                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5604  0691  086D               	movf	_Sw,w
  5605  0692  3E05               	addlw	5
  5606  0693  0086               	movwf	6
  5607  0694  3001               	movlw	1	; select bank2/3
  5608  0695  0087               	movwf	7
  5609  0696  3000               	movlw	0
  5610  0697  3FC0               	movwi [0]fsr1
  5611  0698  3FC1               	movwi [1]fsr1
  5612                           
  5613                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5614  0699  086D               	movf	_Sw,w
  5615  069A  0086               	movwf	6
  5616  069B  3001               	movlw	1	; select bank2/3
  5617  069C  0087               	movwf	7
  5618  069D  1601               	bsf	1,4
  5619                           
  5620                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5621  069E  01A2               	clrf	setRF_Learn@command
  5622  069F  0AA2               	incf	setRF_Learn@command,f
  5623  06A0  3001               	movlw	1
  5624  06A1  31A6  2662  3185   	fcall	_setRF_Learn
  5625                           
  5626                           ;Switch_B1.c: 194: if(TMain->First)
  5627  06A4  087D               	movf	_TMain,w
  5628  06A5  3E03               	addlw	3
  5629  06A6  0086               	movwf	6
  5630  06A7  3001               	movlw	1	; select bank2/3
  5631  06A8  0087               	movwf	7
  5632  06A9  1C81               	btfss	1,1
  5633  06AA  0008               	return
  5634                           
  5635                           ;Switch_B1.c: 195: {
  5636                           ;Switch_B1.c: 196: setBuz(2,100);
  5637  06AB  3064               	movlw	100
  5638  06AC  0020               	movlb	0	; select bank0
  5639  06AD  00A6               	movwf	setBuz@time
  5640  06AE  3000               	movlw	0
  5641  06AF  00A7               	movwf	setBuz@time+1
  5642  06B0  3002               	movlw	2
  5643  06B1  3195  2587         	fcall	_setBuz
  5644                           
  5645                           ;Switch_B1.c: 197: }
  5646                           ;Switch_B1.c: 199: }
  5647                           ;Switch_B1.c: 200: }
  5648  06B3  0008               	return
  5649  06B4                     l9269:	
  5650                           
  5651                           ;Switch_B1.c: 201: else
  5652                           ;Switch_B1.c: 202: {
  5653                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5654  06B4  0020               	movlb	0	; select bank0
  5655  06B5  086D               	movf	_Sw,w
  5656  06B6  0086               	movwf	6
  5657  06B7  3001               	movlw	1	; select bank2/3
  5658  06B8  0087               	movwf	7
  5659  06B9  1A81               	btfsc	1,5
  5660  06BA  0008               	return
  5661                           
  5662                           ;Switch_B1.c: 204: {
  5663                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5664  06BB  086D               	movf	_Sw,w
  5665  06BC  3E07               	addlw	7
  5666  06BD  0086               	movwf	6
  5667  06BE  3001               	movlw	1	; select bank2/3
  5668  06BF  0087               	movwf	7
  5669  06C0  3001               	movlw	1
  5670  06C1  0781               	addwf	1,f
  5671  06C2  3141               	addfsr 1,1
  5672  06C3  1803               	skipnc
  5673  06C4  0A81               	incf	1,f
  5674                           
  5675                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5676  06C5  086D               	movf	_Sw,w
  5677  06C6  3E07               	addlw	7
  5678  06C7  0086               	movwf	6
  5679  06C8  3001               	movlw	1	; select bank2/3
  5680  06C9  0087               	movwf	7
  5681  06CA  3F40               	moviw [0]fsr1
  5682  06CB  00E5               	movwf	??_setSw_Main
  5683  06CC  3F41               	moviw [1]fsr1
  5684  06CD  00E6               	movwf	??_setSw_Main+1
  5685  06CE  3001               	movlw	1
  5686  06CF  0266               	subwf	??_setSw_Main+1,w
  5687  06D0  302C               	movlw	44
  5688  06D1  1903               	skipnz
  5689  06D2  0265               	subwf	??_setSw_Main,w
  5690  06D3  1C03               	skipc
  5691  06D4  0008               	return
  5692                           
  5693                           ;Switch_B1.c: 207: {
  5694                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5695  06D5  086D               	movf	_Sw,w
  5696  06D6  3E07               	addlw	7
  5697  06D7  0086               	movwf	6
  5698  06D8  3001               	movlw	1	; select bank2/3
  5699  06D9  0087               	movwf	7
  5700  06DA  3000               	movlw	0
  5701  06DB  3FC0               	movwi [0]fsr1
  5702  06DC  3FC1               	movwi [1]fsr1
  5703                           
  5704                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5705  06DD  086D               	movf	_Sw,w
  5706  06DE  0086               	movwf	6
  5707  06DF  3001               	movlw	1	; select bank2/3
  5708  06E0  0087               	movwf	7
  5709  06E1  1681               	bsf	1,5
  5710                           
  5711                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5712  06E2  01A2               	clrf	setRF_Learn@command
  5713  06E3  3001               	movlw	1
  5714  06E4  31A6  2662         	fcall	_setRF_Learn
  5715                           
  5716                           ;Switch_B1.c: 215: }
  5717                           ;Switch_B1.c: 216: }
  5718                           ;Switch_B1.c: 217: }
  5719                           ;Switch_B1.c: 218: }
  5720                           ;Switch_B1.c: 219: }
  5721                           ;Switch_B1.c: 220: }
  5722  06E6  0008               	return
  5723  06E7                     l9279:	
  5724                           
  5725                           ;Switch_B1.c: 221: else
  5726                           ;Switch_B1.c: 222: {
  5727                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5728  06E7  0020               	movlb	0	; select bank0
  5729  06E8  086D               	movf	_Sw,w
  5730  06E9  0086               	movwf	6
  5731  06EA  3001               	movlw	1	; select bank2/3
  5732  06EB  0087               	movwf	7
  5733  06EC  1D01               	btfss	1,2
  5734  06ED  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 224: {
  5737                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5738  06EE  3001               	movlw	1
  5739  06EF  00E5               	movwf	??_setSw_Main
  5740  06F0  086D               	movf	_Sw,w
  5741  06F1  3E02               	addlw	2
  5742  06F2  0086               	movwf	6
  5743  06F3  3001               	movlw	1	; select bank2/3
  5744  06F4  0087               	movwf	7
  5745  06F5  0865               	movf	??_setSw_Main,w
  5746  06F6  0781               	addwf	1,f
  5747                           
  5748                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5749  06F7  086D               	movf	_Sw,w
  5750  06F8  3E02               	addlw	2
  5751  06F9  0086               	movwf	6
  5752  06FA  3001               	movlw	1	; select bank2/3
  5753  06FB  0087               	movwf	7
  5754  06FC  3005               	movlw	5
  5755  06FD  0201               	subwf	1,w
  5756  06FE  1C03               	skipc
  5757  06FF  0008               	return
  5758                           
  5759                           ;Switch_B1.c: 227: {
  5760                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5761  0700  086D               	movf	_Sw,w
  5762  0701  3E02               	addlw	2
  5763  0702  0086               	movwf	6
  5764  0703  3001               	movlw	1	; select bank2/3
  5765  0704  0087               	movwf	7
  5766  0705  0181               	clrf	1
  5767                           
  5768                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5769  0706  086D               	movf	_Sw,w
  5770  0707  0086               	movwf	6
  5771  0708  3001               	movlw	1	; select bank2/3
  5772  0709  0087               	movwf	7
  5773  070A  1101               	bcf	1,2
  5774                           
  5775                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5776  070B  086D               	movf	_Sw,w
  5777  070C  3E03               	addlw	3
  5778  070D  0086               	movwf	6
  5779  070E  3001               	movlw	1	; select bank2/3
  5780  070F  0087               	movwf	7
  5781  0710  3000               	movlw	0
  5782  0711  3FC0               	movwi [0]fsr1
  5783  0712  3FC1               	movwi [1]fsr1
  5784                           
  5785                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5786  0713  086D               	movf	_Sw,w
  5787  0714  0086               	movwf	6
  5788  0715  3001               	movlw	1	; select bank2/3
  5789  0716  0087               	movwf	7
  5790  0717  1181               	bcf	1,3
  5791                           
  5792                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5793  0718  086D               	movf	_Sw,w
  5794  0719  3E05               	addlw	5
  5795  071A  0086               	movwf	6
  5796  071B  3001               	movlw	1	; select bank2/3
  5797  071C  0087               	movwf	7
  5798  071D  3000               	movlw	0
  5799  071E  3FC0               	movwi [0]fsr1
  5800  071F  3FC1               	movwi [1]fsr1
  5801                           
  5802                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5803  0720  086D               	movf	_Sw,w
  5804  0721  0086               	movwf	6
  5805  0722  3001               	movlw	1	; select bank2/3
  5806  0723  0087               	movwf	7
  5807  0724  1201               	bcf	1,4
  5808                           
  5809                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5810  0725  086D               	movf	_Sw,w
  5811  0726  3E07               	addlw	7
  5812  0727  0086               	movwf	6
  5813  0728  3001               	movlw	1	; select bank2/3
  5814  0729  0087               	movwf	7
  5815  072A  3000               	movlw	0
  5816  072B  3FC0               	movwi [0]fsr1
  5817  072C  3FC1               	movwi [1]fsr1
  5818                           
  5819                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5820  072D  086D               	movf	_Sw,w
  5821  072E  0086               	movwf	6
  5822  072F  3001               	movlw	1	; select bank2/3
  5823  0730  0087               	movwf	7
  5824  0731  1281               	bcf	1,5
  5825                           
  5826                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5827  0732  0868               	movf	setSw_Main@sw,w
  5828  0733  3194  24A4  3185   	fcall	_Sw_DimmerOffFunc
  5829                           
  5830                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5831  0736  0020               	movlb	0	; select bank0
  5832  0737  01A2               	clrf	setRF_Learn@command
  5833  0738  3001               	movlw	1
  5834  0739  31A6  2662         	fcall	_setRF_Learn
  5835  073B  0008               	return
  5836  073C                     __end_of_setSw_Main:	
  5837                           
  5838                           	psect	text12
  5839  2662                     __ptext12:	
  5840 ;; *************** function _setRF_Learn *****************
  5841 ;; Defined at:
  5842 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  rf              1    wreg     unsigned char 
  5845 ;;  command         1    2[BANK0 ] unsigned char 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  rf              1    3[BANK0 ] unsigned char 
  5848 ;; Return value:  Size  Location     Type
  5849 ;;		None               void
  5850 ;; Registers used:
  5851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;Total ram usage:        2 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    5
  5864 ;; This function calls:
  5865 ;;		_RfPointSelect
  5866 ;; This function is called by:
  5867 ;;		_setSw_Main
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           
  5872                           ;psect for function _setRF_Learn
  5873  2662                     _setRF_Learn:	
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5877                           ;setRF_Learn@rf stored from wreg
  5878  2662  0020               	movlb	0	; select bank0
  5879  2663  00A3               	movwf	setRF_Learn@rf
  5880                           
  5881                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5882  2664  0823               	movf	setRF_Learn@rf,w
  5883  2665  31A5  2570         	fcall	_RfPointSelect
  5884                           
  5885                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5886  2667  087B               	movf	_RF,w
  5887  2668  0086               	movwf	6
  5888  2669  0187               	clrf	7
  5889  266A  0020               	movlb	0	; select bank0
  5890  266B  0822               	movf	setRF_Learn@command,w
  5891  266C  1301               	bcf	1,6
  5892  266D  1D03               	skipz
  5893  266E  1701               	bsf	1,6
  5894  266F  0008               	return
  5895  2670                     __end_of_setRF_Learn:	
  5896                           
  5897                           	psect	text13
  5898  1FA7                     __ptext13:	
  5899 ;; *************** function _Sw_DimmerOnFunc *****************
  5900 ;; Defined at:
  5901 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  sw              1    wreg     unsigned char 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  sw              1   67[BANK0 ] unsigned char 
  5906 ;;  Idle            1   66[BANK0 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;		None               void
  5909 ;; Registers used:
  5910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;Total ram usage:        2 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    8
  5923 ;; This function calls:
  5924 ;;		_setBuz
  5925 ;;		_setDimmerLights_Switch
  5926 ;;		_setDimmerLights_Trigger
  5927 ;;		_setRFSW_Status
  5928 ;;		_setRF_DimmerLights
  5929 ;;		_setTxData
  5930 ;; This function is called by:
  5931 ;;		_setSw_Main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           
  5936                           ;psect for function _Sw_DimmerOnFunc
  5937  1FA7                     _Sw_DimmerOnFunc:	
  5938                           
  5939                           ;incstack = 0
  5940                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5941                           ;Sw_DimmerOnFunc@sw stored from wreg
  5942  1FA7  0020               	movlb	0	; select bank0
  5943  1FA8  00E3               	movwf	Sw_DimmerOnFunc@sw
  5944                           
  5945                           ;Switch_B1.c: 253: char Idle=1;
  5946  1FA9  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5947  1FAA  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5948                           
  5949                           ;Switch_B1.c: 280: if(Idle)
  5950  1FAB  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5951  1FAC  1903               	btfsc	3,2
  5952  1FAD  0008               	return
  5953                           
  5954                           ;Switch_B1.c: 281: {
  5955                           ;Switch_B1.c: 282: Sw->Flag=1;
  5956  1FAE  086D               	movf	_Sw,w
  5957  1FAF  0086               	movwf	6
  5958  1FB0  3001               	movlw	1	; select bank2/3
  5959  1FB1  0087               	movwf	7
  5960  1FB2  1781               	bsf	1,7
  5961                           
  5962                           ;Switch_B1.c: 283: setBuz(1,100);
  5963  1FB3  3064               	movlw	100
  5964  1FB4  00A6               	movwf	setBuz@time
  5965  1FB5  3000               	movlw	0
  5966  1FB6  00A7               	movwf	setBuz@time+1
  5967  1FB7  3001               	movlw	1
  5968  1FB8  3195  2587  319F   	fcall	_setBuz
  5969                           
  5970                           ;Switch_B1.c: 284: if(!Sw->Status)
  5971  1FBB  0020               	movlb	0	; select bank0
  5972  1FBC  086D               	movf	_Sw,w
  5973  1FBD  0086               	movwf	6
  5974  1FBE  3001               	movlw	1	; select bank2/3
  5975  1FBF  0087               	movwf	7
  5976  1FC0  1B01               	btfsc	1,6
  5977  1FC1  2FED               	goto	l8799
  5978                           
  5979                           ;Switch_B1.c: 285: {
  5980                           ;Switch_B1.c: 286: Sw->Status=1;
  5981  1FC2  086D               	movf	_Sw,w
  5982  1FC3  0086               	movwf	6
  5983  1FC4  3001               	movlw	1	; select bank2/3
  5984  1FC5  0087               	movwf	7
  5985  1FC6  1701               	bsf	1,6
  5986                           
  5987                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  5988  1FC7  01A2               	clrf	setRFSW_Status@command
  5989  1FC8  0AA2               	incf	setRFSW_Status@command,f
  5990  1FC9  0863               	movf	Sw_DimmerOnFunc@sw,w
  5991  1FCA  31A6  267F  319F   	fcall	_setRFSW_Status
  5992                           
  5993                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  5994  1FCD  0020               	movlb	0	; select bank0
  5995  1FCE  01A2               	clrf	setDimmerLights_Trigger@command
  5996  1FCF  0AA2               	incf	setDimmerLights_Trigger@command,f
  5997  1FD0  0863               	movf	Sw_DimmerOnFunc@sw,w
  5998  1FD1  31A6  26BD  319F   	fcall	_setDimmerLights_Trigger
  5999                           
  6000                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  6001  1FD4  0020               	movlb	0	; select bank0
  6002  1FD5  01A2               	clrf	setDimmerLights_Switch@command
  6003  1FD6  0AA2               	incf	setDimmerLights_Switch@command,f
  6004  1FD7  0863               	movf	Sw_DimmerOnFunc@sw,w
  6005  1FD8  31A6  26AD  319F   	fcall	_setDimmerLights_Switch
  6006                           
  6007                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  6008  1FDB  0020               	movlb	0	; select bank0
  6009  1FDC  086D               	movf	_Sw,w
  6010  1FDD  0086               	movwf	6
  6011  1FDE  3001               	movlw	1	; select bank2/3
  6012  1FDF  0087               	movwf	7
  6013  1FE0  3000               	movlw	0
  6014  1FE1  1B01               	btfsc	1,6
  6015  1FE2  3001               	movlw	1
  6016  1FE3  00DD               	movwf	setRF_DimmerLights@on
  6017  1FE4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6018  1FE5  3192  2281  319F   	fcall	_setRF_DimmerLights
  6019                           
  6020                           ;Switch_B1.c: 293: setTxData(1);
  6021  1FE8  3001               	movlw	1
  6022  1FE9  318B  2335         	fcall	_setTxData
  6023                           
  6024                           ;Switch_B1.c: 294: }
  6025  1FEB  0020               	movlb	0	; select bank0
  6026  1FEC  0008               	return
  6027  1FED                     l8799:	
  6028                           
  6029                           ;Switch_B1.c: 295: else
  6030                           ;Switch_B1.c: 296: {
  6031                           ;Switch_B1.c: 297: Sw->Status=0;
  6032  1FED  0020               	movlb	0	; select bank0
  6033  1FEE  086D               	movf	_Sw,w
  6034  1FEF  0086               	movwf	6
  6035  1FF0  3001               	movlw	1	; select bank2/3
  6036  1FF1  0087               	movwf	7
  6037  1FF2  1301               	bcf	1,6
  6038                           
  6039                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6040  1FF3  086D               	movf	_Sw,w
  6041  1FF4  0086               	movwf	6
  6042  1FF5  3001               	movlw	1	; select bank2/3
  6043  1FF6  0087               	movwf	7
  6044  1FF7  3000               	movlw	0
  6045  1FF8  1B01               	btfsc	1,6
  6046  1FF9  3001               	movlw	1
  6047  1FFA  00A2               	movwf	setRFSW_Status@command
  6048  1FFB  0863               	movf	Sw_DimmerOnFunc@sw,w
  6049  1FFC  31A6  267F         	fcall	_setRFSW_Status
  6050  1FFE  0020               	movlb	0	; select bank0
  6051  1FFF  0008               	return
  6052  2000                     __end_of_Sw_DimmerOnFunc:	
  6053                           
  6054                           	psect	text14
  6055  14A4                     __ptext14:	
  6056 ;; *************** function _Sw_DimmerOffFunc *****************
  6057 ;; Defined at:
  6058 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  sw              1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  sw              1   68[BANK0 ] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;		None               void
  6065 ;; Registers used:
  6066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;Total ram usage:        3 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    8
  6079 ;; This function calls:
  6080 ;;		_setDelayOff_GO
  6081 ;;		_setDimmerLights_AdjGo
  6082 ;;		_setDimmerLights_Switch
  6083 ;;		_setDimmerLights_Trigger
  6084 ;;		_setDimmerLights_TriggerAdj
  6085 ;;		_setRF_DimmerLights
  6086 ;;		_setTxData
  6087 ;; This function is called by:
  6088 ;;		_setSw_Main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _Sw_DimmerOffFunc
  6094  14A4                     _Sw_DimmerOffFunc:	
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6098                           ;Sw_DimmerOffFunc@sw stored from wreg
  6099  14A4  0020               	movlb	0	; select bank0
  6100  14A5  00E4               	movwf	Sw_DimmerOffFunc@sw
  6101                           
  6102                           ;Switch_B1.c: 305: if(Sw->Flag)
  6103  14A6  086D               	movf	_Sw,w
  6104  14A7  0086               	movwf	6
  6105  14A8  3001               	movlw	1	; select bank2/3
  6106  14A9  0087               	movwf	7
  6107  14AA  1F81               	btfss	1,7
  6108  14AB  0008               	return
  6109                           
  6110                           ;Switch_B1.c: 306: {
  6111                           ;Switch_B1.c: 307: Sw->Flag=0;
  6112  14AC  086D               	movf	_Sw,w
  6113  14AD  0086               	movwf	6
  6114  14AE  3001               	movlw	1	; select bank2/3
  6115  14AF  0087               	movwf	7
  6116  14B0  1381               	bcf	1,7
  6117                           
  6118                           ;Switch_B1.c: 308: if(Sw->Status)
  6119  14B1  086D               	movf	_Sw,w
  6120  14B2  0086               	movwf	6
  6121  14B3  3001               	movlw	1	; select bank2/3
  6122  14B4  0087               	movwf	7
  6123  14B5  1F01               	btfss	1,6
  6124  14B6  2CF0               	goto	l8833
  6125                           
  6126                           ;Switch_B1.c: 309: {
  6127                           ;Switch_B1.c: 310: if(Sw->Adj)
  6128  14B7  0A6D               	incf	_Sw,w
  6129  14B8  0086               	movwf	6
  6130  14B9  3001               	movlw	1	; select bank2/3
  6131  14BA  0087               	movwf	7
  6132  14BB  1C01               	btfss	1,0
  6133  14BC  0008               	return
  6134                           
  6135                           ;Switch_B1.c: 311: {
  6136                           ;Switch_B1.c: 312: Sw->Adj=0;
  6137  14BD  0A6D               	incf	_Sw,w
  6138  14BE  0086               	movwf	6
  6139  14BF  3001               	movlw	1	; select bank2/3
  6140  14C0  0087               	movwf	7
  6141  14C1  1001               	bcf	1,0
  6142                           
  6143                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6144  14C2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6145  14C3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6146  14C4  0864               	movf	Sw_DimmerOffFunc@sw,w
  6147  14C5  3187  27F0  3194   	fcall	_setDimmerLights_TriggerAdj
  6148                           
  6149                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6150  14C8  0020               	movlb	0	; select bank0
  6151  14C9  01A2               	clrf	setDimmerLights_AdjGo@command
  6152  14CA  0864               	movf	Sw_DimmerOffFunc@sw,w
  6153  14CB  31A6  26FD  3194   	fcall	_setDimmerLights_AdjGo
  6154                           
  6155                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6156  14CE  0020               	movlb	0	; select bank0
  6157  14CF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6158  14D0  3E1A               	addlw	26
  6159  14D1  076F               	addwf	_Product,w
  6160  14D2  00E2               	movwf	??_Sw_DimmerOffFunc
  6161  14D3  0862               	movf	??_Sw_DimmerOffFunc,w
  6162  14D4  0086               	movwf	6
  6163  14D5  3001               	movlw	1	; select bank2/3
  6164  14D6  0087               	movwf	7
  6165  14D7  0801               	movf	1,w
  6166  14D8  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6167  14D9  086F               	movf	_Product,w
  6168  14DA  3E11               	addlw	17
  6169  14DB  0086               	movwf	6
  6170  14DC  3001               	movlw	1	; select bank2/3
  6171  14DD  0087               	movwf	7
  6172  14DE  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6173  14DF  0081               	movwf	1
  6174                           
  6175                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6176  14E0  086D               	movf	_Sw,w
  6177  14E1  0086               	movwf	6
  6178  14E2  3001               	movlw	1	; select bank2/3
  6179  14E3  0087               	movwf	7
  6180  14E4  3000               	movlw	0
  6181  14E5  1B01               	btfsc	1,6
  6182  14E6  3001               	movlw	1
  6183  14E7  00DD               	movwf	setRF_DimmerLights@on
  6184  14E8  0864               	movf	Sw_DimmerOffFunc@sw,w
  6185  14E9  3192  2281  3194   	fcall	_setRF_DimmerLights
  6186                           
  6187                           ;Switch_B1.c: 318: setTxData(1);
  6188  14EC  3001               	movlw	1
  6189  14ED  318B  2335         	fcall	_setTxData
  6190                           
  6191                           ;Switch_B1.c: 320: }
  6192                           ;Switch_B1.c: 321: }
  6193  14EF  0008               	return
  6194  14F0                     l8833:	
  6195                           
  6196                           ;Switch_B1.c: 322: else
  6197                           ;Switch_B1.c: 323: {
  6198                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6199  14F0  0020               	movlb	0	; select bank0
  6200  14F1  01A2               	clrf	setDimmerLights_Trigger@command
  6201  14F2  0AA2               	incf	setDimmerLights_Trigger@command,f
  6202  14F3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6203  14F4  31A6  26BD  3194   	fcall	_setDimmerLights_Trigger
  6204                           
  6205                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6206  14F7  0020               	movlb	0	; select bank0
  6207  14F8  01A2               	clrf	setDimmerLights_Switch@command
  6208  14F9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6209  14FA  31A6  26AD  3194   	fcall	_setDimmerLights_Switch
  6210                           
  6211                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6212  14FD  0020               	movlb	0	; select bank0
  6213  14FE  01A3               	clrf	setDelayOff_GO@command
  6214  14FF  01A4               	clrf	setDelayOff_GO@value
  6215  1500  0864               	movf	Sw_DimmerOffFunc@sw,w
  6216  1501  3191  2102  3194   	fcall	_setDelayOff_GO
  6217                           
  6218                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6219  1504  0020               	movlb	0	; select bank0
  6220  1505  086D               	movf	_Sw,w
  6221  1506  0086               	movwf	6
  6222  1507  3001               	movlw	1	; select bank2/3
  6223  1508  0087               	movwf	7
  6224  1509  3000               	movlw	0
  6225  150A  1B01               	btfsc	1,6
  6226  150B  3001               	movlw	1
  6227  150C  00DD               	movwf	setRF_DimmerLights@on
  6228  150D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6229  150E  3192  2281  3194   	fcall	_setRF_DimmerLights
  6230                           
  6231                           ;Switch_B1.c: 329: setTxData(1);
  6232  1511  3001               	movlw	1
  6233  1512  318B  2335         	fcall	_setTxData
  6234  1514  0008               	return
  6235  1515                     __end_of_Sw_DimmerOffFunc:	
  6236                           
  6237                           	psect	text15
  6238  1A77                     __ptext15:	
  6239 ;; *************** function _Sw_DimmerAdjFunc *****************
  6240 ;; Defined at:
  6241 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  sw              1    wreg     unsigned char 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  sw              1    5[BANK0 ] unsigned char 
  6246 ;;  Idle            1    4[BANK0 ] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;		None               void
  6249 ;; Registers used:
  6250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;Total ram usage:        2 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    6
  6263 ;; This function calls:
  6264 ;;		_setDimmerLights_AdjGo
  6265 ;;		_setDimmerLights_TriggerAdj
  6266 ;;		_setRFSW_Status
  6267 ;; This function is called by:
  6268 ;;		_setSw_Main
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _Sw_DimmerAdjFunc
  6274  1A77                     _Sw_DimmerAdjFunc:	
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6278                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6279  1A77  0020               	movlb	0	; select bank0
  6280  1A78  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6281                           
  6282                           ;Switch_B1.c: 336: char Idle=1;
  6283  1A79  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6284  1A7A  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6285                           
  6286                           ;Switch_B1.c: 363: if(Idle)
  6287  1A7B  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6288  1A7C  1903               	btfsc	3,2
  6289  1A7D  0008               	return
  6290                           
  6291                           ;Switch_B1.c: 364: {
  6292                           ;Switch_B1.c: 365: if(Sw->Flag)
  6293  1A7E  086D               	movf	_Sw,w
  6294  1A7F  0086               	movwf	6
  6295  1A80  3001               	movlw	1	; select bank2/3
  6296  1A81  0087               	movwf	7
  6297  1A82  1F81               	btfss	1,7
  6298  1A83  0008               	return
  6299                           
  6300                           ;Switch_B1.c: 366: {
  6301                           ;Switch_B1.c: 367: Sw->Adj=1;
  6302  1A84  0A6D               	incf	_Sw,w
  6303  1A85  0086               	movwf	6
  6304  1A86  3001               	movlw	1	; select bank2/3
  6305  1A87  0087               	movwf	7
  6306  1A88  1401               	bsf	1,0
  6307                           
  6308                           ;Switch_B1.c: 368: Sw->Status=1;
  6309  1A89  086D               	movf	_Sw,w
  6310  1A8A  0086               	movwf	6
  6311  1A8B  3001               	movlw	1	; select bank2/3
  6312  1A8C  0087               	movwf	7
  6313  1A8D  1701               	bsf	1,6
  6314                           
  6315                           ;Switch_B1.c: 369: setRFSW_Status(sw,1);
  6316  1A8E  01A2               	clrf	setRFSW_Status@command
  6317  1A8F  0AA2               	incf	setRFSW_Status@command,f
  6318  1A90  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6319  1A91  31A6  267F  319A   	fcall	_setRFSW_Status
  6320                           
  6321                           ;Switch_B1.c: 371: setDimmerLights_TriggerAdj(sw,1);
  6322  1A94  0020               	movlb	0	; select bank0
  6323  1A95  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6324  1A96  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6325  1A97  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6326  1A98  3187  27F0  319A   	fcall	_setDimmerLights_TriggerAdj
  6327                           
  6328                           ;Switch_B1.c: 372: setDimmerLights_AdjGo(sw,1);
  6329  1A9B  0020               	movlb	0	; select bank0
  6330  1A9C  01A2               	clrf	setDimmerLights_AdjGo@command
  6331  1A9D  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6332  1A9E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6333  1A9F  31A6  26FD         	fcall	_setDimmerLights_AdjGo
  6334  1AA1  0020               	movlb	0	; select bank0
  6335  1AA2  0008               	return
  6336  1AA3                     __end_of_Sw_DimmerAdjFunc:	
  6337                           
  6338                           	psect	text16
  6339  07F0                     __ptext16:	
  6340 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6341 ;; Defined at:
  6342 ;;		line 450 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  lights          1    wreg     unsigned char 
  6345 ;;  command         1    2[BANK0 ] unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  lights          1    3[BANK0 ] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;		None               void
  6350 ;; Registers used:
  6351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;Total ram usage:        2 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    5
  6364 ;; This function calls:
  6365 ;;		_DimmerLightsPointSelect
  6366 ;; This function is called by:
  6367 ;;		_Sw_DimmerOffFunc
  6368 ;;		_Sw_DimmerAdjFunc
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           
  6373                           ;psect for function _setDimmerLights_TriggerAdj
  6374  07F0                     _setDimmerLights_TriggerAdj:	
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6378                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6379  07F0  0020               	movlb	0	; select bank0
  6380  07F1  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6381                           
  6382                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6383  07F2  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6384  07F3  31A5  255A         	fcall	_DimmerLightsPointSelect
  6385                           
  6386                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6387  07F5  0020               	movlb	0	; select bank0
  6388  07F6  086C               	movf	_DimmerLights,w
  6389  07F7  3E09               	addlw	9
  6390  07F8  0086               	movwf	6
  6391  07F9  3001               	movlw	1	; select bank2/3
  6392  07FA  0087               	movwf	7
  6393  07FB  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6394  07FC  1181               	bcf	1,3
  6395  07FD  1D03               	skipz
  6396  07FE  1581               	bsf	1,3
  6397  07FF  0008               	return
  6398  0800                     __end_of_setDimmerLights_TriggerAdj:	
  6399                           
  6400                           	psect	text17
  6401  26FD                     __ptext17:	
  6402 ;; *************** function _setDimmerLights_AdjGo *****************
  6403 ;; Defined at:
  6404 ;;		line 440 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  lights          1    wreg     unsigned char 
  6407 ;;  command         1    2[BANK0 ] unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  lights          1    3[BANK0 ] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        2 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    5
  6426 ;; This function calls:
  6427 ;;		_DimmerLightsPointSelect
  6428 ;; This function is called by:
  6429 ;;		_Sw_DimmerOffFunc
  6430 ;;		_Sw_DimmerAdjFunc
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _setDimmerLights_AdjGo
  6436  26FD                     _setDimmerLights_AdjGo:	
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6440                           ;setDimmerLights_AdjGo@lights stored from wreg
  6441  26FD  0020               	movlb	0	; select bank0
  6442  26FE  00A3               	movwf	setDimmerLights_AdjGo@lights
  6443                           
  6444                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6445  26FF  0823               	movf	setDimmerLights_AdjGo@lights,w
  6446  2700  31A5  255A         	fcall	_DimmerLightsPointSelect
  6447                           
  6448                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6449  2702  0020               	movlb	0	; select bank0
  6450  2703  086C               	movf	_DimmerLights,w
  6451  2704  3E09               	addlw	9
  6452  2705  0086               	movwf	6
  6453  2706  3001               	movlw	1	; select bank2/3
  6454  2707  0087               	movwf	7
  6455  2708  0822               	movf	setDimmerLights_AdjGo@command,w
  6456  2709  1101               	bcf	1,2
  6457  270A  1D03               	skipz
  6458  270B  1501               	bsf	1,2
  6459  270C  0008               	return
  6460  270D                     __end_of_setDimmerLights_AdjGo:	
  6461                           
  6462                           	psect	text18
  6463  2531                     __ptext18:	
  6464 ;; *************** function _Switch_Initialization *****************
  6465 ;; Defined at:
  6466 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;		None               void
  6473 ;; Registers used:
  6474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    7
  6487 ;; This function calls:
  6488 ;;		_TouchPower
  6489 ;;		_setSw_Initialization
  6490 ;; This function is called by:
  6491 ;;		_main
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           
  6496                           ;psect for function _Switch_Initialization
  6497  2531                     _Switch_Initialization:	
  6498                           
  6499                           ;Switch_B1.c: 40: TouchPower();
  6500                           
  6501                           ;incstack = 0
  6502                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6503  2531  31A4  24DE  31A5   	fcall	_TouchPower
  6504                           
  6505                           ;Switch_B1.c: 42: WPUB1=0;
  6506  2534  0024               	movlb	4	; select bank4
  6507  2535  108D               	bcf	13,1	;volatile
  6508                           
  6509                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6510  2536  3001               	movlw	1
  6511  2537  31A6  26ED         	fcall	_setSw_Initialization
  6512  2539  0008               	return
  6513  253A                     __end_of_Switch_Initialization:	
  6514                           
  6515                           	psect	text19
  6516  26ED                     __ptext19:	
  6517 ;; *************** function _setSw_Initialization *****************
  6518 ;; Defined at:
  6519 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  sw              1    wreg     unsigned char 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  sw              1    4[BANK0 ] unsigned char 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;		None               void
  6526 ;; Registers used:
  6527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;Total ram usage:        1 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    6
  6540 ;; This function calls:
  6541 ;;		_setLED
  6542 ;; This function is called by:
  6543 ;;		_Switch_Initialization
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _setSw_Initialization
  6549  26ED                     _setSw_Initialization:	
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6553                           ;setSw_Initialization@sw stored from wreg
  6554  26ED  0020               	movlb	0	; select bank0
  6555  26EE  00A4               	movwf	setSw_Initialization@sw
  6556                           
  6557                           ;Switch_B1.c: 80: setLED(sw,1);
  6558  26EF  01A2               	clrf	setLED@command
  6559  26F0  0AA2               	incf	setLED@command,f
  6560  26F1  0824               	movf	setSw_Initialization@sw,w
  6561  26F2  3191  215E  31A6   	fcall	_setLED
  6562                           
  6563                           ;Switch_B1.c: 82: setLED(sw+1,1);
  6564  26F5  0020               	movlb	0	; select bank0
  6565  26F6  01A2               	clrf	setLED@command
  6566  26F7  0AA2               	incf	setLED@command,f
  6567  26F8  0824               	movf	setSw_Initialization@sw,w
  6568  26F9  3E01               	addlw	1
  6569  26FA  3191  215E         	fcall	_setLED
  6570  26FC  0008               	return
  6571  26FD                     __end_of_setSw_Initialization:	
  6572                           
  6573                           	psect	text20
  6574  24DE                     __ptext20:	
  6575 ;; *************** function _TouchPower *****************
  6576 ;; Defined at:
  6577 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		None
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;Total ram usage:        0 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    4
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_Switch_Initialization
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _TouchPower
  6607  24DE                     _TouchPower:	
  6608  24DE                     l2751:	
  6609                           ;Switch_B1.c: 11: while(!RC5)
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _TouchPower: []
  6613                           
  6614  24DE  0020               	movlb	0	; select bank0
  6615  24DF  1A8E               	btfsc	14,5	;volatile
  6616  24E0  0008               	return
  6617                           
  6618                           ;Switch_B1.c: 12: RC5=1;
  6619  24E1  168E               	bsf	14,5	;volatile
  6620  24E2  2CDE               	goto	l2751
  6621  24E3                     __end_of_TouchPower:	
  6622                           
  6623                           	psect	text21
  6624  24D6                     __ptext21:	
  6625 ;; *************** function _RF_Main *****************
  6626 ;; Defined at:
  6627 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;		None               void
  6634 ;; Registers used:
  6635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;Total ram usage:        0 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:   13
  6648 ;; This function calls:
  6649 ;;		_setRF_Main
  6650 ;; This function is called by:
  6651 ;;		_main
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _RF_Main
  6657  24D6                     _RF_Main:	
  6658                           
  6659                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6663  24D6  3001               	movlw	1
  6664  24D7  3197  2778         	fcall	_setRF_Main
  6665  24D9  0008               	return
  6666  24DA                     __end_of_RF_Main:	
  6667                           
  6668                           	psect	text22
  6669  1778                     __ptext22:	
  6670 ;; *************** function _setRF_Main *****************
  6671 ;; Defined at:
  6672 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  rf              1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  rf              1   74[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        3 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:   12
  6693 ;; This function calls:
  6694 ;;		_CC2500_RxData
  6695 ;;		_CC2500_TxData
  6696 ;;		_CC2500_WriteCommand
  6697 ;;		_RF_RxDisable
  6698 ;;		_RfPointSelect
  6699 ;;		_getRxData
  6700 ;;		_setINT_GO
  6701 ;; This function is called by:
  6702 ;;		_RF_Main
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           
  6707                           ;psect for function _setRF_Main
  6708  1778                     _setRF_Main:	
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6712                           ;setRF_Main@rf stored from wreg
  6713  1778  0020               	movlb	0	; select bank0
  6714  1779  00EA               	movwf	setRF_Main@rf
  6715                           
  6716                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6717  177A  086A               	movf	setRF_Main@rf,w
  6718  177B  31A5  2570  3197   	fcall	_RfPointSelect
  6719                           
  6720                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6721  177E  087B               	movf	_RF,w
  6722  177F  0086               	movwf	6
  6723  1780  0187               	clrf	7
  6724  1781  1C01               	btfss	1,0
  6725  1782  0008               	return
  6726                           
  6727                           ;RF_Control_B1.c: 62: {
  6728                           ;RF_Control_B1.c: 73: RF->Key=((RA6 || RA4 || RA0 || RB1) && !RF->Learn)?1:0;
  6729  1783  0020               	movlb	0	; select bank0
  6730  1784  01EB               	clrf	_setRF_Main$4298
  6731  1785  1F0C               	btfss	12,6	;volatile
  6732  1786  1A0C               	btfsc	12,4	;volatile
  6733  1787  2F8C               	goto	l9163
  6734  1788  180C               	btfsc	12,0	;volatile
  6735  1789  2F8C               	goto	l9163
  6736  178A  1C8D               	btfss	13,1	;volatile
  6737  178B  2F93               	goto	l9167
  6738  178C                     l9163:	
  6739  178C  087B               	movf	_RF,w
  6740  178D  0086               	movwf	6
  6741  178E  0187               	clrf	7
  6742  178F  1B01               	btfsc	1,6
  6743  1790  2F93               	goto	l9167
  6744  1791  01EB               	clrf	_setRF_Main$4298
  6745  1792  0AEB               	incf	_setRF_Main$4298,f
  6746  1793                     l9167:	
  6747  1793  087B               	movf	_RF,w
  6748  1794  0086               	movwf	6
  6749  1795  0187               	clrf	7
  6750  1796  086B               	movf	_setRF_Main$4298,w
  6751  1797  1381               	bcf	1,7
  6752  1798  1D03               	skipz
  6753  1799  1781               	bsf	1,7
  6754                           
  6755                           ;RF_Control_B1.c: 77: if(!RF->Key)
  6756  179A  087B               	movf	_RF,w
  6757  179B  0086               	movwf	6
  6758  179C  0187               	clrf	7
  6759  179D  1B81               	btfsc	1,7
  6760  179E  2FCB               	goto	l9189
  6761                           
  6762                           ;RF_Control_B1.c: 78: {
  6763                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  6764  179F  087B               	movf	_RF,w
  6765  17A0  0086               	movwf	6
  6766  17A1  0187               	clrf	7
  6767  17A2  1C81               	btfss	1,1
  6768  17A3  2FB0               	goto	l9177
  6769                           
  6770                           ;RF_Control_B1.c: 80: {
  6771                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  6772  17A4  087B               	movf	_RF,w
  6773  17A5  0086               	movwf	6
  6774  17A6  0187               	clrf	7
  6775  17A7  1081               	bcf	1,1
  6776                           
  6777                           ;RF_Control_B1.c: 82: CC2500_RxData();
  6778  17A8  3192  221D  3197   	fcall	_CC2500_RxData
  6779                           
  6780                           ;RF_Control_B1.c: 88: getRxData(1);
  6781  17AB  3001               	movlw	1
  6782  17AC  319E  26FE  3197   	fcall	_getRxData
  6783                           
  6784                           ;RF_Control_B1.c: 91: }
  6785  17AF  2FCF               	goto	l9191
  6786  17B0                     l9177:	
  6787                           
  6788                           ;RF_Control_B1.c: 92: else
  6789                           ;RF_Control_B1.c: 93: {
  6790                           ;RF_Control_B1.c: 94: if(!RF->TransceiveGO)
  6791  17B0  087B               	movf	_RF,w
  6792  17B1  0086               	movwf	6
  6793  17B2  0187               	clrf	7
  6794  17B3  1901               	btfsc	1,2
  6795  17B4  2FCF               	goto	l9191
  6796                           
  6797                           ;RF_Control_B1.c: 95: {
  6798                           ;RF_Control_B1.c: 97: if(!RF->RxStatus)
  6799  17B5  087B               	movf	_RF,w
  6800  17B6  0086               	movwf	6
  6801  17B7  0187               	clrf	7
  6802  17B8  1981               	btfsc	1,3
  6803  17B9  2FCF               	goto	l9191
  6804                           
  6805                           ;RF_Control_B1.c: 98: {
  6806                           ;RF_Control_B1.c: 99: RF->RxStatus=1;
  6807  17BA  087B               	movf	_RF,w
  6808  17BB  0086               	movwf	6
  6809  17BC  0187               	clrf	7
  6810  17BD  1581               	bsf	1,3
  6811                           
  6812                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  6813  17BE  3036               	movlw	54
  6814  17BF  31A6  269D  3197   	fcall	_CC2500_WriteCommand
  6815                           
  6816                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x34);
  6817  17C2  3034               	movlw	52
  6818  17C3  31A6  269D  3197   	fcall	_CC2500_WriteCommand
  6819                           
  6820                           ;RF_Control_B1.c: 102: setINT_GO(1);
  6821  17C6  3001               	movlw	1
  6822  17C7  31A5  2528  3197   	fcall	_setINT_GO
  6823                           
  6824                           ;RF_Control_B1.c: 103: }
  6825                           ;RF_Control_B1.c: 105: }
  6826                           ;RF_Control_B1.c: 106: }
  6827                           ;RF_Control_B1.c: 107: }
  6828  17CA  2FCF               	goto	l9191
  6829  17CB                     l9189:	
  6830                           
  6831                           ;RF_Control_B1.c: 108: else
  6832                           ;RF_Control_B1.c: 109: {
  6833                           ;RF_Control_B1.c: 110: RF_RxDisable(1);
  6834  17CB  3001               	movlw	1
  6835  17CC  3188  2001  3197   	fcall	_RF_RxDisable
  6836  17CF                     l9191:	
  6837                           
  6838                           ;RF_Control_B1.c: 111: }
  6839                           ;RF_Control_B1.c: 112: if(RF->TransceiveGO)
  6840  17CF  087B               	movf	_RF,w
  6841  17D0  0086               	movwf	6
  6842  17D1  0187               	clrf	7
  6843  17D2  1D01               	btfss	1,2
  6844  17D3  0008               	return
  6845                           
  6846                           ;RF_Control_B1.c: 113: {
  6847                           ;RF_Control_B1.c: 114: RF_RxDisable(1);
  6848  17D4  3001               	movlw	1
  6849  17D5  3188  2001  3197   	fcall	_RF_RxDisable
  6850                           
  6851                           ;RF_Control_B1.c: 115: if(!RF->Debounce)
  6852  17D8  087B               	movf	_RF,w
  6853  17D9  0086               	movwf	6
  6854  17DA  0187               	clrf	7
  6855  17DB  1A81               	btfsc	1,5
  6856  17DC  2FF5               	goto	l9205
  6857                           
  6858                           ;RF_Control_B1.c: 116: {
  6859                           ;RF_Control_B1.c: 117: RF->DebounceTime++;
  6860  17DD  3001               	movlw	1
  6861  17DE  0020               	movlb	0	; select bank0
  6862  17DF  00E9               	movwf	??_setRF_Main
  6863  17E0  0A7B               	incf	_RF,w
  6864  17E1  0086               	movwf	6
  6865  17E2  0187               	clrf	7
  6866  17E3  0869               	movf	??_setRF_Main,w
  6867  17E4  0781               	addwf	1,f
  6868                           
  6869                           ;RF_Control_B1.c: 118: if(RF->DebounceTime == 25)
  6870  17E5  0A7B               	incf	_RF,w
  6871  17E6  0086               	movwf	6
  6872  17E7  0187               	clrf	7
  6873  17E8  0801               	movf	1,w
  6874  17E9  3A19               	xorlw	25
  6875  17EA  1D03               	skipz
  6876  17EB  0008               	return
  6877                           
  6878                           ;RF_Control_B1.c: 119: {
  6879                           ;RF_Control_B1.c: 120: RF->DebounceTime=0;
  6880  17EC  0A7B               	incf	_RF,w
  6881  17ED  0086               	movwf	6
  6882  17EE  0187               	clrf	7
  6883  17EF  0181               	clrf	1
  6884                           
  6885                           ;RF_Control_B1.c: 121: RF->Debounce=1;
  6886  17F0  087B               	movf	_RF,w
  6887  17F1  0086               	movwf	6
  6888  17F2  0187               	clrf	7
  6889  17F3  1681               	bsf	1,5
  6890                           
  6891                           ;RF_Control_B1.c: 122: }
  6892                           ;RF_Control_B1.c: 123: }
  6893  17F4  0008               	return
  6894  17F5                     l9205:	
  6895                           
  6896                           ;RF_Control_B1.c: 124: else
  6897                           ;RF_Control_B1.c: 125: {
  6898                           ;RF_Control_B1.c: 126: RF->Debounce=0;
  6899  17F5  087B               	movf	_RF,w
  6900  17F6  0086               	movwf	6
  6901  17F7  0187               	clrf	7
  6902  17F8  1281               	bcf	1,5
  6903                           
  6904                           ;RF_Control_B1.c: 127: RF->TransceiveGO=0;
  6905  17F9  087B               	movf	_RF,w
  6906  17FA  0086               	movwf	6
  6907  17FB  0187               	clrf	7
  6908  17FC  1101               	bcf	1,2
  6909                           
  6910                           ;RF_Control_B1.c: 128: CC2500_TxData();
  6911  17FD  319D  259D         	fcall	_CC2500_TxData
  6912  17FF  0008               	return
  6913  1800                     __end_of_setRF_Main:	
  6914                           
  6915                           	psect	text23
  6916  1EFE                     __ptext23:	
  6917 ;; *************** function _getRxData *****************
  6918 ;; Defined at:
  6919 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;  rf              1    wreg     unsigned char 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  rf              1   72[BANK0 ] unsigned char 
  6924 ;;  i               1    0        unsigned char 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;		None               void
  6927 ;; Registers used:
  6928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;Total ram usage:        1 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:   11
  6941 ;; This function calls:
  6942 ;;		_RfPointSelect
  6943 ;;		_setControl_Lights_Table
  6944 ;;		_setLog_Code
  6945 ;; This function is called by:
  6946 ;;		_setRF_Main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _getRxData
  6952  1EFE                     _getRxData:	
  6953                           
  6954                           ;incstack = 0
  6955                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6956                           ;getRxData@rf stored from wreg
  6957  1EFE  0020               	movlb	0	; select bank0
  6958  1EFF  00E8               	movwf	getRxData@rf
  6959                           
  6960                           ;RF_Control_B1.c: 216: unsigned char i;
  6961                           ;RF_Control_B1.c: 217: RfPointSelect(rf);
  6962  1F00  0868               	movf	getRxData@rf,w
  6963  1F01  31A5  2570  319E   	fcall	_RfPointSelect
  6964                           
  6965                           ;RF_Control_B1.c: 218: if(RF->Learn)
  6966  1F04  087B               	movf	_RF,w
  6967  1F05  0086               	movwf	6
  6968  1F06  0187               	clrf	7
  6969  1F07  1F01               	btfss	1,6
  6970  1F08  2F15               	goto	l8733
  6971                           
  6972                           ;RF_Control_B1.c: 219: {
  6973                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6974  1F09  0021               	movlb	1	; select bank1
  6975  1F0A  08A0               	movf	_RF_Data^(0+128),f
  6976  1F0B  1D03               	skipz
  6977  1F0C  0008               	return
  6978  1F0D  0821               	movf	(_RF_Data^(0+128)+1),w
  6979  1F0E  3A64               	xorlw	100
  6980  1F0F  1D03               	skipz
  6981  1F10  0008               	return
  6982                           
  6983                           ;RF_Control_B1.c: 221: {
  6984                           ;RF_Control_B1.c: 222: setLog_Code(1);
  6985  1F11  3001               	movlw	1
  6986  1F12  319E  266C         	fcall	_setLog_Code
  6987                           
  6988                           ;RF_Control_B1.c: 223: }
  6989                           ;RF_Control_B1.c: 224: }
  6990  1F14  0008               	return
  6991  1F15                     l8733:	
  6992                           
  6993                           ;RF_Control_B1.c: 225: else
  6994                           ;RF_Control_B1.c: 226: {
  6995                           ;RF_Control_B1.c: 227: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6996  1F15  0021               	movlb	1	; select bank1
  6997  1F16  08A0               	movf	_RF_Data^(0+128),f
  6998  1F17  1D03               	skipz
  6999  1F18  0008               	return
  7000  1F19  0821               	movf	(_RF_Data^(0+128)+1),w
  7001  1F1A  3A02               	xorlw	2
  7002  1F1B  1D03               	skipz
  7003  1F1C  0008               	return
  7004                           
  7005                           ;RF_Control_B1.c: 228: {
  7006                           ;RF_Control_B1.c: 229: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7007  1F1D  082C               	movf	(_RF_Data^(0+128)+12),w
  7008  1F1E  3AFF               	xorlw	255
  7009  1F1F  1D03               	skipz
  7010  1F20  2F2B               	goto	l8745
  7011  1F21  082D               	movf	(_RF_Data^(0+128)+13),w
  7012  1F22  3AFF               	xorlw	255
  7013  1F23  1D03               	skipz
  7014  1F24  2F2B               	goto	l8745
  7015  1F25  082E               	movf	(_RF_Data^(0+128)+14),w
  7016  1F26  3AFF               	xorlw	255
  7017  1F27  1D03               	skipz
  7018  1F28  2F2B               	goto	l8745
  7019                           
  7020                           ;RF_Control_B1.c: 230: {
  7021                           ;RF_Control_B1.c: 231: __nop();
  7022  1F29  0000               	nop
  7023                           
  7024                           ;RF_Control_B1.c: 232: }
  7025  1F2A  0008               	return
  7026  1F2B                     l8745:	
  7027                           
  7028                           ;RF_Control_B1.c: 233: else
  7029                           ;RF_Control_B1.c: 234: {
  7030                           ;RF_Control_B1.c: 235: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7031  1F2B  0020               	movlb	0	; select bank0
  7032  1F2C  086F               	movf	_Product,w
  7033  1F2D  3E0C               	addlw	12
  7034  1F2E  0086               	movwf	6
  7035  1F2F  3001               	movlw	1	; select bank2/3
  7036  1F30  0087               	movwf	7
  7037  1F31  0021               	movlb	1	; select bank1
  7038  1F32  082C               	movf	(_RF_Data^(0+128)+12),w
  7039  1F33  0601               	xorwf	1,w
  7040  1F34  1D03               	skipz
  7041  1F35  0008               	return
  7042  1F36  0020               	movlb	0	; select bank0
  7043  1F37  086F               	movf	_Product,w
  7044  1F38  3E0D               	addlw	13
  7045  1F39  0086               	movwf	6
  7046  1F3A  3001               	movlw	1	; select bank2/3
  7047  1F3B  0087               	movwf	7
  7048  1F3C  0021               	movlb	1	; select bank1
  7049  1F3D  082D               	movf	(_RF_Data^(0+128)+13),w
  7050  1F3E  0601               	xorwf	1,w
  7051  1F3F  1D03               	skipz
  7052  1F40  0008               	return
  7053  1F41  0020               	movlb	0	; select bank0
  7054  1F42  086F               	movf	_Product,w
  7055  1F43  3E0E               	addlw	14
  7056  1F44  0086               	movwf	6
  7057  1F45  3001               	movlw	1	; select bank2/3
  7058  1F46  0087               	movwf	7
  7059  1F47  0021               	movlb	1	; select bank1
  7060  1F48  082E               	movf	(_RF_Data^(0+128)+14),w
  7061  1F49  0601               	xorwf	1,w
  7062  1F4A  1D03               	skipz
  7063  1F4B  0008               	return
  7064                           
  7065                           ;RF_Control_B1.c: 236: {
  7066                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  7067  1F4C  3001               	movlw	1
  7068  1F4D  3193  23C6         	fcall	_setControl_Lights_Table
  7069                           
  7070                           ;RF_Control_B1.c: 246: {
  7071                           ;RF_Control_B1.c: 247: ;
  7072                           
  7073                           ;RF_Control_B1.c: 242: {
  7074                           ;RF_Control_B1.c: 243: ;
  7075                           ;RF_Control_B1.c: 244: }
  7076                           
  7077                           ;RF_Control_B1.c: 238: }
  7078                           ;RF_Control_B1.c: 239: }
  7079                           ;RF_Control_B1.c: 240: }
  7080  1F4F  0008               	return
  7081  1F50                     __end_of_getRxData:	
  7082                           
  7083                           	psect	text24
  7084  1E6C                     __ptext24:	
  7085 ;; *************** function _setLog_Code *****************
  7086 ;; Defined at:
  7087 ;;		line 256 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  rf              1    wreg     unsigned char 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  rf              1   11[BANK0 ] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;		None               void
  7094 ;; Registers used:
  7095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        2 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    6
  7108 ;; This function calls:
  7109 ;;		_RfPointSelect
  7110 ;;		_setBuz
  7111 ;; This function is called by:
  7112 ;;		_getRxData
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           
  7117                           ;psect for function _setLog_Code
  7118  1E6C                     _setLog_Code:	
  7119                           
  7120                           ;incstack = 0
  7121                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7122                           ;setLog_Code@rf stored from wreg
  7123  1E6C  0020               	movlb	0	; select bank0
  7124  1E6D  00AB               	movwf	setLog_Code@rf
  7125                           
  7126                           ;RF_Control_B1.c: 258: RfPointSelect(rf);
  7127  1E6E  082B               	movf	setLog_Code@rf,w
  7128  1E6F  31A5  2570  319E   	fcall	_RfPointSelect
  7129                           
  7130                           ;RF_Control_B1.c: 259: Product->Data[12]=RF_Data[12];
  7131  1E72  0021               	movlb	1	; select bank1
  7132  1E73  082C               	movf	(_RF_Data^(0+128)+12),w
  7133  1E74  0020               	movlb	0	; select bank0
  7134  1E75  00AA               	movwf	??_setLog_Code
  7135  1E76  086F               	movf	_Product,w
  7136  1E77  3E0C               	addlw	12
  7137  1E78  0086               	movwf	6
  7138  1E79  3001               	movlw	1	; select bank2/3
  7139  1E7A  0087               	movwf	7
  7140  1E7B  082A               	movf	??_setLog_Code,w
  7141  1E7C  0081               	movwf	1
  7142                           
  7143                           ;RF_Control_B1.c: 260: Product->Data[13]=RF_Data[13];
  7144  1E7D  0021               	movlb	1	; select bank1
  7145  1E7E  082D               	movf	(_RF_Data^(0+128)+13),w
  7146  1E7F  0020               	movlb	0	; select bank0
  7147  1E80  00AA               	movwf	??_setLog_Code
  7148  1E81  086F               	movf	_Product,w
  7149  1E82  3E0D               	addlw	13
  7150  1E83  0086               	movwf	6
  7151  1E84  3001               	movlw	1	; select bank2/3
  7152  1E85  0087               	movwf	7
  7153  1E86  082A               	movf	??_setLog_Code,w
  7154  1E87  0081               	movwf	1
  7155                           
  7156                           ;RF_Control_B1.c: 261: Product->Data[14]=RF_Data[14];
  7157  1E88  0021               	movlb	1	; select bank1
  7158  1E89  082E               	movf	(_RF_Data^(0+128)+14),w
  7159  1E8A  0020               	movlb	0	; select bank0
  7160  1E8B  00AA               	movwf	??_setLog_Code
  7161  1E8C  086F               	movf	_Product,w
  7162  1E8D  3E0E               	addlw	14
  7163  1E8E  0086               	movwf	6
  7164  1E8F  3001               	movlw	1	; select bank2/3
  7165  1E90  0087               	movwf	7
  7166  1E91  082A               	movf	??_setLog_Code,w
  7167  1E92  0081               	movwf	1
  7168                           
  7169                           ;RF_Control_B1.c: 262: setBuz(1,100);
  7170  1E93  3064               	movlw	100
  7171  1E94  00A6               	movwf	setBuz@time
  7172  1E95  3000               	movlw	0
  7173  1E96  00A7               	movwf	setBuz@time+1
  7174  1E97  3001               	movlw	1
  7175  1E98  3195  2587  319E   	fcall	_setBuz
  7176                           
  7177                           ;RF_Control_B1.c: 263: RF->Learn=0;
  7178  1E9B  087B               	movf	_RF,w
  7179  1E9C  0086               	movwf	6
  7180  1E9D  0187               	clrf	7
  7181  1E9E  1301               	bcf	1,6
  7182                           
  7183                           ;RF_Control_B1.c: 264: if(TMain->First)
  7184  1E9F  087D               	movf	_TMain,w
  7185  1EA0  3E03               	addlw	3
  7186  1EA1  0086               	movwf	6
  7187  1EA2  3001               	movlw	1	; select bank2/3
  7188  1EA3  0087               	movwf	7
  7189  1EA4  1C81               	btfss	1,1
  7190  1EA5  2EAD               	goto	l2550
  7191                           
  7192                           ;RF_Control_B1.c: 265: {
  7193                           ;RF_Control_B1.c: 266: Memory->LoopSave=1;
  7194  1EA6  0021               	movlb	1	; select bank1
  7195  1EA7  086D               	movf	_Memory^(0+128),w
  7196  1EA8  3E22               	addlw	34
  7197  1EA9  0086               	movwf	6
  7198  1EAA  3001               	movlw	1	; select bank2/3
  7199  1EAB  0087               	movwf	7
  7200  1EAC  1501               	bsf	1,2
  7201  1EAD                     l2550:	
  7202                           
  7203                           ;RF_Control_B1.c: 267: }
  7204                           ;RF_Control_B1.c: 268: Memory->Modify=1;
  7205  1EAD  0021               	movlb	1	; select bank1
  7206  1EAE  086D               	movf	_Memory^(0+128),w
  7207  1EAF  3E22               	addlw	34
  7208  1EB0  0086               	movwf	6
  7209  1EB1  3001               	movlw	1	; select bank2/3
  7210  1EB2  0087               	movwf	7
  7211  1EB3  1401               	bsf	1,0
  7212  1EB4  0008               	return
  7213  1EB5                     __end_of_setLog_Code:	
  7214                           
  7215                           	psect	text25
  7216  13C6                     __ptext25:	
  7217 ;; *************** function _setControl_Lights_Table *****************
  7218 ;; Defined at:
  7219 ;;		line 271 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  rf              1    wreg     unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  rf              1   71[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        1 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:   10
  7240 ;; This function calls:
  7241 ;;		_RfPointSelect
  7242 ;;		_setBuz
  7243 ;;		_setDimmerLights
  7244 ;;		_setRFSW_AdjControl
  7245 ;;		_setRFSW_Control
  7246 ;;		_setRFSW_Status
  7247 ;;		_setSw_Status
  7248 ;;		_setTxData
  7249 ;; This function is called by:
  7250 ;;		_getRxData
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _setControl_Lights_Table
  7256  13C6                     _setControl_Lights_Table:	
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7260                           ;setControl_Lights_Table@rf stored from wreg
  7261  13C6  0020               	movlb	0	; select bank0
  7262  13C7  00E7               	movwf	setControl_Lights_Table@rf
  7263                           
  7264                           ;RF_Control_B1.c: 273: RfPointSelect(rf);
  7265  13C8  0867               	movf	setControl_Lights_Table@rf,w
  7266  13C9  31A5  2570  3193   	fcall	_RfPointSelect
  7267                           
  7268                           ;RF_Control_B1.c: 274: if(RF_Data[15] == 0x00)
  7269  13CC  0021               	movlb	1	; select bank1
  7270  13CD  08AF               	movf	(_RF_Data^(0+128)+15),f
  7271  13CE  1D03               	skipz
  7272  13CF  2C07               	goto	l8565
  7273                           
  7274                           ;RF_Control_B1.c: 275: {
  7275                           ;RF_Control_B1.c: 277: setDimmerLights(1,0);
  7276  13D0  0020               	movlb	0	; select bank0
  7277  13D1  01A4               	clrf	setDimmerLights@status
  7278  13D2  3001               	movlw	1
  7279  13D3  3188  20B8  3193   	fcall	_setDimmerLights
  7280                           
  7281                           ;RF_Control_B1.c: 278: setRFSW_Status(1,0);
  7282  13D6  0020               	movlb	0	; select bank0
  7283  13D7  01A2               	clrf	setRFSW_Status@command
  7284  13D8  3001               	movlw	1
  7285  13D9  31A6  267F  3193   	fcall	_setRFSW_Status
  7286                           
  7287                           ;RF_Control_B1.c: 279: setSw_Status(1,0);
  7288  13DC  0020               	movlb	0	; select bank0
  7289  13DD  01A2               	clrf	setSw_Status@command
  7290  13DE  3001               	movlw	1
  7291  13DF  31A6  268E  3193   	fcall	_setSw_Status
  7292                           
  7293                           ;RF_Control_B1.c: 292: Product->Data[9]=0;
  7294  13E2  0020               	movlb	0	; select bank0
  7295  13E3  086F               	movf	_Product,w
  7296  13E4  3E09               	addlw	9
  7297  13E5  0086               	movwf	6
  7298  13E6  3001               	movlw	1	; select bank2/3
  7299  13E7  0087               	movwf	7
  7300  13E8  0181               	clrf	1
  7301                           
  7302                           ;RF_Control_B1.c: 293: Product->Data[11]=0;
  7303  13E9  086F               	movf	_Product,w
  7304  13EA  3E0B               	addlw	11
  7305  13EB  0086               	movwf	6
  7306  13EC  3001               	movlw	1	; select bank2/3
  7307  13ED  0087               	movwf	7
  7308  13EE  0181               	clrf	1
  7309                           
  7310                           ;RF_Control_B1.c: 294: Product->Data[15]=0;
  7311  13EF  086F               	movf	_Product,w
  7312  13F0  3E0F               	addlw	15
  7313  13F1  0086               	movwf	6
  7314  13F2  3001               	movlw	1	; select bank2/3
  7315  13F3  0087               	movwf	7
  7316  13F4  0181               	clrf	1
  7317                           
  7318                           ;RF_Control_B1.c: 295: Product->Data[17]=0;
  7319  13F5  086F               	movf	_Product,w
  7320  13F6  3E11               	addlw	17
  7321  13F7  0086               	movwf	6
  7322  13F8  3001               	movlw	1	; select bank2/3
  7323  13F9  0087               	movwf	7
  7324  13FA  0181               	clrf	1
  7325                           
  7326                           ;RF_Control_B1.c: 296: setBuz(1,100);
  7327  13FB  3064               	movlw	100
  7328  13FC  00A6               	movwf	setBuz@time
  7329  13FD  3000               	movlw	0
  7330  13FE  00A7               	movwf	setBuz@time+1
  7331  13FF  3001               	movlw	1
  7332  1400  3195  2587  3193   	fcall	_setBuz
  7333                           
  7334                           ;RF_Control_B1.c: 297: setTxData(1);
  7335  1403  3001               	movlw	1
  7336  1404  318B  2335         	fcall	_setTxData
  7337                           
  7338                           ;RF_Control_B1.c: 298: }
  7339  1406  0008               	return
  7340  1407                     l8565:	
  7341                           
  7342                           ;RF_Control_B1.c: 299: else if(RF_Data[15] == 0x20)
  7343  1407  0021               	movlb	1	; select bank1
  7344  1408  082F               	movf	(_RF_Data^(0+128)+15),w
  7345  1409  3A20               	xorlw	32
  7346  140A  1D03               	skipz
  7347  140B  2C23               	goto	l8571
  7348                           
  7349                           ;RF_Control_B1.c: 300: {
  7350                           ;RF_Control_B1.c: 301: Product->Data[9]=0;
  7351  140C  0020               	movlb	0	; select bank0
  7352  140D  086F               	movf	_Product,w
  7353  140E  3E09               	addlw	9
  7354  140F  0086               	movwf	6
  7355  1410  3001               	movlw	1	; select bank2/3
  7356  1411  0087               	movwf	7
  7357  1412  0181               	clrf	1
  7358                           
  7359                           ;RF_Control_B1.c: 302: Product->Data[11]=0;
  7360  1413  086F               	movf	_Product,w
  7361  1414  3E0B               	addlw	11
  7362  1415  0086               	movwf	6
  7363  1416  3001               	movlw	1	; select bank2/3
  7364  1417  0087               	movwf	7
  7365  1418  0181               	clrf	1
  7366                           
  7367                           ;RF_Control_B1.c: 303: Product->Data[17]=0;
  7368  1419  086F               	movf	_Product,w
  7369  141A  3E11               	addlw	17
  7370  141B  0086               	movwf	6
  7371  141C  3001               	movlw	1	; select bank2/3
  7372  141D  0087               	movwf	7
  7373  141E  0181               	clrf	1
  7374                           
  7375                           ;RF_Control_B1.c: 304: setTxData(1);
  7376  141F  3001               	movlw	1
  7377  1420  318B  2335         	fcall	_setTxData
  7378                           
  7379                           ;RF_Control_B1.c: 305: }
  7380  1422  0008               	return
  7381  1423                     l8571:	
  7382                           
  7383                           ;RF_Control_B1.c: 307: else if(RF_Data[15] == 0x01)
  7384  1423  0021               	movlb	1	; select bank1
  7385  1424  082F               	movf	(_RF_Data^(0+128)+15),w
  7386  1425  3A01               	xorlw	1
  7387  1426  1D03               	skipz
  7388  1427  2C2C               	goto	l8575
  7389                           
  7390                           ;RF_Control_B1.c: 308: {
  7391                           ;RF_Control_B1.c: 309: setRFSW_Control(1);
  7392  1428  3001               	movlw	1
  7393  1429  3188  2028         	fcall	_setRFSW_Control
  7394                           
  7395                           ;RF_Control_B1.c: 310: }
  7396  142B  0008               	return
  7397  142C                     l8575:	
  7398                           
  7399                           ;RF_Control_B1.c: 312: else if(RF_Data[15] == 0x11)
  7400  142C  0021               	movlb	1	; select bank1
  7401  142D  082F               	movf	(_RF_Data^(0+128)+15),w
  7402  142E  3A11               	xorlw	17
  7403  142F  1D03               	skipz
  7404  1430  0008               	return
  7405                           
  7406                           ;RF_Control_B1.c: 313: {
  7407                           ;RF_Control_B1.c: 314: setRFSW_AdjControl(1);
  7408  1431  3001               	movlw	1
  7409  1432  319D  2519         	fcall	_setRFSW_AdjControl
  7410  1434  0008               	return
  7411  1435                     __end_of_setControl_Lights_Table:	
  7412                           
  7413                           	psect	text26
  7414  0828                     __ptext26:	
  7415 ;; *************** function _setRFSW_Control *****************
  7416 ;; Defined at:
  7417 ;;		line 368 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  sw              1    wreg     unsigned char 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  sw              1   67[BANK0 ] unsigned char 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;		None               void
  7424 ;; Registers used:
  7425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;Total ram usage:        2 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    8
  7438 ;; This function calls:
  7439 ;;		_RfSWPointSelect
  7440 ;;		_setBuz
  7441 ;;		_setDelayOff_GO
  7442 ;;		_setDimmerLights_Switch
  7443 ;;		_setDimmerLights_Trigger
  7444 ;;		_setRF_DimmerLights
  7445 ;;		_setSw_Status
  7446 ;;		_setTxData
  7447 ;; This function is called by:
  7448 ;;		_setControl_Lights_Table
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           
  7453                           ;psect for function _setRFSW_Control
  7454  0828                     _setRFSW_Control:	
  7455                           
  7456                           ;incstack = 0
  7457                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7458                           ;setRFSW_Control@sw stored from wreg
  7459  0828  0020               	movlb	0	; select bank0
  7460  0829  00E3               	movwf	setRFSW_Control@sw
  7461                           
  7462                           ;RF_Control_B1.c: 370: RfSWPointSelect(sw);
  7463  082A  0863               	movf	setRFSW_Control@sw,w
  7464  082B  31A5  25D7  3188   	fcall	_RfSWPointSelect
  7465                           
  7466                           ;RF_Control_B1.c: 371: if(!RFSW->Status)
  7467  082E  0021               	movlb	1	; select bank1
  7468  082F  083C               	movf	_RFSW^(0+128),w
  7469  0830  0086               	movwf	6
  7470  0831  0187               	clrf	7
  7471  0832  1801               	btfsc	1,0
  7472  0833  2869               	goto	l8455
  7473                           
  7474                           ;RF_Control_B1.c: 372: {
  7475                           ;RF_Control_B1.c: 373: if(RF_Data[16] == 0x80)
  7476  0834  0830               	movf	(_RF_Data^(0+128)+16),w
  7477  0835  3A80               	xorlw	128
  7478  0836  1D03               	skipz
  7479  0837  2845               	goto	l8445
  7480                           
  7481                           ;RF_Control_B1.c: 374: {
  7482                           ;RF_Control_B1.c: 375: setDelayOff_GO(sw,1,RF_Data[17]);
  7483  0838  0020               	movlb	0	; select bank0
  7484  0839  01A3               	clrf	setDelayOff_GO@command
  7485  083A  0AA3               	incf	setDelayOff_GO@command,f
  7486  083B  0021               	movlb	1	; select bank1
  7487  083C  0831               	movf	(_RF_Data^(0+128)+17),w
  7488  083D  0020               	movlb	0	; select bank0
  7489  083E  00E2               	movwf	??_setRFSW_Control
  7490  083F  0862               	movf	??_setRFSW_Control,w
  7491  0840  00A4               	movwf	setDelayOff_GO@value
  7492  0841  0863               	movf	setRFSW_Control@sw,w
  7493  0842  3191  2102  3188   	fcall	_setDelayOff_GO
  7494  0845                     l8445:	
  7495                           
  7496                           ;RF_Control_B1.c: 376: }
  7497                           ;RF_Control_B1.c: 377: RFSW->Status=1;
  7498  0845  0021               	movlb	1	; select bank1
  7499  0846  083C               	movf	_RFSW^(0+128),w
  7500  0847  0086               	movwf	6
  7501  0848  0187               	clrf	7
  7502  0849  1401               	bsf	1,0
  7503                           
  7504                           ;RF_Control_B1.c: 378: setSw_Status(sw,1);
  7505  084A  0020               	movlb	0	; select bank0
  7506  084B  01A2               	clrf	setSw_Status@command
  7507  084C  0AA2               	incf	setSw_Status@command,f
  7508  084D  0863               	movf	setRFSW_Control@sw,w
  7509  084E  31A6  268E  3188   	fcall	_setSw_Status
  7510                           
  7511                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw,1);
  7512  0851  0020               	movlb	0	; select bank0
  7513  0852  01A2               	clrf	setDimmerLights_Trigger@command
  7514  0853  0AA2               	incf	setDimmerLights_Trigger@command,f
  7515  0854  0863               	movf	setRFSW_Control@sw,w
  7516  0855  31A6  26BD  3188   	fcall	_setDimmerLights_Trigger
  7517                           
  7518                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw,1);
  7519  0858  0020               	movlb	0	; select bank0
  7520  0859  01A2               	clrf	setDimmerLights_Switch@command
  7521  085A  0AA2               	incf	setDimmerLights_Switch@command,f
  7522  085B  0863               	movf	setRFSW_Control@sw,w
  7523  085C  31A6  26AD  3188   	fcall	_setDimmerLights_Switch
  7524                           
  7525                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,RFSW->Status);
  7526  085F  0021               	movlb	1	; select bank1
  7527  0860  083C               	movf	_RFSW^(0+128),w
  7528  0861  0086               	movwf	6
  7529  0862  0187               	clrf	7
  7530  0863  3000               	movlw	0
  7531  0864  1801               	btfsc	1,0
  7532  0865  3001               	movlw	1
  7533  0866  0020               	movlb	0	; select bank0
  7534  0867  00DD               	movwf	setRF_DimmerLights@on
  7535  0868  28A7               	goto	L2
  7536  0869                     l8455:	
  7537                           ;RF_Control_B1.c: 384: }
  7538                           
  7539                           
  7540                           ;RF_Control_B1.c: 385: else
  7541                           ;RF_Control_B1.c: 386: {
  7542                           ;RF_Control_B1.c: 387: if(RF_Data[16] == 0x80)
  7543  0869  0021               	movlb	1	; select bank1
  7544  086A  0830               	movf	(_RF_Data^(0+128)+16),w
  7545  086B  3A80               	xorlw	128
  7546  086C  1D03               	skipz
  7547  086D  287F               	goto	l8459
  7548                           
  7549                           ;RF_Control_B1.c: 388: {
  7550                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw,1,RF_Data[17]);
  7551  086E  0020               	movlb	0	; select bank0
  7552  086F  01A3               	clrf	setDelayOff_GO@command
  7553  0870  0AA3               	incf	setDelayOff_GO@command,f
  7554  0871  0021               	movlb	1	; select bank1
  7555  0872  0831               	movf	(_RF_Data^(0+128)+17),w
  7556  0873  0020               	movlb	0	; select bank0
  7557  0874  00E2               	movwf	??_setRFSW_Control
  7558  0875  0862               	movf	??_setRFSW_Control,w
  7559  0876  00A4               	movwf	setDelayOff_GO@value
  7560  0877  0863               	movf	setRFSW_Control@sw,w
  7561  0878  3191  2102  3188   	fcall	_setDelayOff_GO
  7562                           
  7563                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw,1);
  7564  087B  0020               	movlb	0	; select bank0
  7565  087C  01DD               	clrf	setRF_DimmerLights@on
  7566  087D  0ADD               	incf	setRF_DimmerLights@on,f
  7567  087E  28A7               	goto	L2
  7568  087F                     l8459:	
  7569                           ;RF_Control_B1.c: 391: }
  7570                           
  7571                           
  7572                           ;RF_Control_B1.c: 392: else
  7573                           ;RF_Control_B1.c: 393: {
  7574                           ;RF_Control_B1.c: 394: RFSW->Status=0;
  7575  087F  0021               	movlb	1	; select bank1
  7576  0880  083C               	movf	_RFSW^(0+128),w
  7577  0881  0086               	movwf	6
  7578  0882  0187               	clrf	7
  7579  0883  1001               	bcf	1,0
  7580                           
  7581                           ;RF_Control_B1.c: 395: setSw_Status(sw,0);
  7582  0884  0020               	movlb	0	; select bank0
  7583  0885  01A2               	clrf	setSw_Status@command
  7584  0886  0863               	movf	setRFSW_Control@sw,w
  7585  0887  31A6  268E  3188   	fcall	_setSw_Status
  7586                           
  7587                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw,1);
  7588  088A  0020               	movlb	0	; select bank0
  7589  088B  01A2               	clrf	setDimmerLights_Trigger@command
  7590  088C  0AA2               	incf	setDimmerLights_Trigger@command,f
  7591  088D  0863               	movf	setRFSW_Control@sw,w
  7592  088E  31A6  26BD  3188   	fcall	_setDimmerLights_Trigger
  7593                           
  7594                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw,RFSW->Status);
  7595  0891  0021               	movlb	1	; select bank1
  7596  0892  083C               	movf	_RFSW^(0+128),w
  7597  0893  0086               	movwf	6
  7598  0894  0187               	clrf	7
  7599  0895  3000               	movlw	0
  7600  0896  1801               	btfsc	1,0
  7601  0897  3001               	movlw	1
  7602  0898  0020               	movlb	0	; select bank0
  7603  0899  00A2               	movwf	setDimmerLights_Switch@command
  7604  089A  0863               	movf	setRFSW_Control@sw,w
  7605  089B  31A6  26AD  3188   	fcall	_setDimmerLights_Switch
  7606                           
  7607                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw,0,0);
  7608  089E  0020               	movlb	0	; select bank0
  7609  089F  01A3               	clrf	setDelayOff_GO@command
  7610  08A0  01A4               	clrf	setDelayOff_GO@value
  7611  08A1  0863               	movf	setRFSW_Control@sw,w
  7612  08A2  3191  2102  3188   	fcall	_setDelayOff_GO
  7613                           
  7614                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw,0);
  7615  08A5  0020               	movlb	0	; select bank0
  7616  08A6  01DD               	clrf	setRF_DimmerLights@on
  7617  08A7                     L2:	
  7618  08A7  0863               	movf	setRFSW_Control@sw,w
  7619  08A8  3192  2281  3188   	fcall	_setRF_DimmerLights
  7620                           
  7621                           ;RF_Control_B1.c: 402: }
  7622                           ;RF_Control_B1.c: 403: }
  7623                           ;RF_Control_B1.c: 404: setBuz(1,100);
  7624  08AB  3064               	movlw	100
  7625  08AC  0020               	movlb	0	; select bank0
  7626  08AD  00A6               	movwf	setBuz@time
  7627  08AE  3000               	movlw	0
  7628  08AF  00A7               	movwf	setBuz@time+1
  7629  08B0  3001               	movlw	1
  7630  08B1  3195  2587  3188   	fcall	_setBuz
  7631                           
  7632                           ;RF_Control_B1.c: 405: setTxData(1);
  7633  08B4  3001               	movlw	1
  7634  08B5  318B  2335         	fcall	_setTxData
  7635  08B7  0008               	return
  7636  08B8                     __end_of_setRFSW_Control:	
  7637                           
  7638                           	psect	text27
  7639  1102                     __ptext27:	
  7640 ;; *************** function _setDelayOff_GO *****************
  7641 ;; Defined at:
  7642 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  sw              1    wreg     unsigned char 
  7645 ;;  command         1    3[BANK0 ] unsigned char 
  7646 ;;  value           1    4[BANK0 ] unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  sw              1    7[BANK0 ] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;Total ram usage:        5 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    5
  7665 ;; This function calls:
  7666 ;;		_DelayOffPointSelect
  7667 ;;		_DelayTimejudge
  7668 ;; This function is called by:
  7669 ;;		_setRFSW_Control
  7670 ;;		_Sw_DimmerOffFunc
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _setDelayOff_GO
  7676  1102                     _setDelayOff_GO:	
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7680                           ;setDelayOff_GO@sw stored from wreg
  7681  1102  0020               	movlb	0	; select bank0
  7682  1103  00A7               	movwf	setDelayOff_GO@sw
  7683                           
  7684                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7685  1104  0827               	movf	setDelayOff_GO@sw,w
  7686  1105  31A5  25CB  3191   	fcall	_DelayOffPointSelect
  7687                           
  7688                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7689  1108  0021               	movlb	1	; select bank1
  7690  1109  0838               	movf	_DelayOff^(0+128),w
  7691  110A  0086               	movwf	6
  7692  110B  0187               	clrf	7
  7693  110C  1C01               	btfss	1,0
  7694  110D  0008               	return
  7695                           
  7696                           ;DelayOff_B1.c: 96: {
  7697                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7698  110E  0838               	movf	_DelayOff^(0+128),w
  7699  110F  0086               	movwf	6
  7700  1110  0187               	clrf	7
  7701  1111  0020               	movlb	0	; select bank0
  7702  1112  0823               	movf	setDelayOff_GO@command,w
  7703  1113  1081               	bcf	1,1
  7704  1114  1D03               	skipz
  7705  1115  1481               	bsf	1,1
  7706                           
  7707                           ;DelayOff_B1.c: 98: if(command)
  7708  1116  0823               	movf	setDelayOff_GO@command,w
  7709  1117  1903               	btfsc	3,2
  7710  1118  2944               	goto	l6257
  7711                           
  7712                           ;DelayOff_B1.c: 99: {
  7713                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7714  1119  0824               	movf	setDelayOff_GO@value,w
  7715  111A  319A  22D0  3191   	fcall	_DelayTimejudge
  7716  111D  0020               	movlb	0	; select bank0
  7717  111E  00A5               	movwf	??_setDelayOff_GO
  7718  111F  0021               	movlb	1	; select bank1
  7719  1120  0A38               	incf	_DelayOff^(0+128),w
  7720  1121  0086               	movwf	6
  7721  1122  0187               	clrf	7
  7722  1123  0020               	movlb	0	; select bank0
  7723  1124  0825               	movf	??_setDelayOff_GO,w
  7724  1125  0081               	movwf	1
  7725                           
  7726                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7727  1126  300F               	movlw	15
  7728  1127  0524               	andwf	setDelayOff_GO@value,w
  7729  1128  00A5               	movwf	??_setDelayOff_GO
  7730  1129  0825               	movf	??_setDelayOff_GO,w
  7731  112A  3A05               	xorlw	5
  7732  112B  1903               	skipnz
  7733  112C  2931               	goto	l6251
  7734  112D  0824               	movf	setDelayOff_GO@value,w
  7735  112E  390F               	andlw	15
  7736  112F  1D03               	btfss	3,2
  7737  1130  2937               	goto	l6255
  7738  1131                     l6251:	
  7739  1131  3026               	movlw	38
  7740  1132  0224               	subwf	setDelayOff_GO@value,w
  7741  1133  1803               	skipnc
  7742  1134  2937               	goto	l6255
  7743                           
  7744                           ;DelayOff_B1.c: 102: {
  7745                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7746  1135  0824               	movf	setDelayOff_GO@value,w
  7747  1136  2938               	goto	L3
  7748  1137                     l6255:	
  7749                           ;DelayOff_B1.c: 104: }
  7750                           
  7751                           
  7752                           ;DelayOff_B1.c: 105: else
  7753                           ;DelayOff_B1.c: 106: {
  7754                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7755  1137  3005               	movlw	5
  7756  1138                     L3:	
  7757  1138  00A5               	movwf	??_setDelayOff_GO
  7758  1139  0827               	movf	setDelayOff_GO@sw,w
  7759  113A  3E1A               	addlw	26
  7760  113B  076F               	addwf	_Product,w
  7761  113C  00A6               	movwf	??_setDelayOff_GO+1
  7762  113D  0826               	movf	??_setDelayOff_GO+1,w
  7763  113E  0086               	movwf	6
  7764  113F  3001               	movlw	1	; select bank2/3
  7765  1140  0087               	movwf	7
  7766  1141  0825               	movf	??_setDelayOff_GO,w
  7767  1142  0081               	movwf	1
  7768                           
  7769                           ;DelayOff_B1.c: 108: }
  7770                           ;DelayOff_B1.c: 109: }
  7771  1143  2950               	goto	l6261
  7772  1144                     l6257:	
  7773                           
  7774                           ;DelayOff_B1.c: 110: else if(!command)
  7775  1144  08A3               	movf	setDelayOff_GO@command,f
  7776  1145  1D03               	skipz
  7777  1146  2950               	goto	l6261
  7778                           
  7779                           ;DelayOff_B1.c: 111: {
  7780                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7781  1147  0827               	movf	setDelayOff_GO@sw,w
  7782  1148  3E1A               	addlw	26
  7783  1149  076F               	addwf	_Product,w
  7784  114A  00A5               	movwf	??_setDelayOff_GO
  7785  114B  0825               	movf	??_setDelayOff_GO,w
  7786  114C  0086               	movwf	6
  7787  114D  3001               	movlw	1	; select bank2/3
  7788  114E  0087               	movwf	7
  7789  114F  0181               	clrf	1
  7790  1150                     l6261:	
  7791                           
  7792                           ;DelayOff_B1.c: 113: }
  7793                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7794  1150  0021               	movlb	1	; select bank1
  7795  1151  0838               	movf	_DelayOff^(0+128),w
  7796  1152  3E02               	addlw	2
  7797  1153  0086               	movwf	6
  7798  1154  0187               	clrf	7
  7799  1155  3000               	movlw	0
  7800  1156  3FC0               	movwi [0]fsr1
  7801  1157  3FC1               	movwi [1]fsr1
  7802                           
  7803                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7804  1158  0838               	movf	_DelayOff^(0+128),w
  7805  1159  3E04               	addlw	4
  7806  115A  0086               	movwf	6
  7807  115B  0187               	clrf	7
  7808  115C  0181               	clrf	1
  7809  115D  0008               	return
  7810  115E                     __end_of_setDelayOff_GO:	
  7811                           
  7812                           	psect	text28
  7813  1AD0                     __ptext28:	
  7814 ;; *************** function _DelayTimejudge *****************
  7815 ;; Defined at:
  7816 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  value           1    wreg     unsigned char 
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;  value           1    2[BANK0 ] unsigned char 
  7821 ;;  i               1    1[BANK0 ] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      unsigned char 
  7824 ;; Registers used:
  7825 ;;		wreg
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;Total ram usage:        3 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    4
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_setDelayOff_GO
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           
  7846                           ;psect for function _DelayTimejudge
  7847  1AD0                     _DelayTimejudge:	
  7848                           
  7849                           ;incstack = 0
  7850                           ; Regs used in _DelayTimejudge: [wreg]
  7851                           ;DelayTimejudge@value stored from wreg
  7852  1AD0  0020               	movlb	0	; select bank0
  7853  1AD1  00A2               	movwf	DelayTimejudge@value
  7854                           
  7855                           ;DelayOff_B1.c: 121: char i=5;
  7856  1AD2  3005               	movlw	5
  7857  1AD3  00A0               	movwf	??_DelayTimejudge
  7858  1AD4  0820               	movf	??_DelayTimejudge,w
  7859  1AD5  00A1               	movwf	DelayTimejudge@i
  7860                           
  7861                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7862  1AD6  0822               	movf	DelayTimejudge@value,w
  7863  1AD7  3A05               	xorlw	5
  7864  1AD8  1D03               	skipz
  7865  1AD9  2ADC               	goto	l6097
  7866                           
  7867                           ;DelayOff_B1.c: 123: {
  7868                           ;DelayOff_B1.c: 124: i=5;
  7869  1ADA  3005               	movlw	5
  7870  1ADB  2AF9               	goto	L8
  7871  1ADC                     l6097:	
  7872                           ;DelayOff_B1.c: 125: }
  7873                           
  7874                           
  7875                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7876  1ADC  0822               	movf	DelayTimejudge@value,w
  7877  1ADD  3A10               	xorlw	16
  7878  1ADE  1D03               	skipz
  7879  1ADF  2AE2               	goto	l6101
  7880                           
  7881                           ;DelayOff_B1.c: 127: {
  7882                           ;DelayOff_B1.c: 128: i=10;
  7883  1AE0  300A               	movlw	10
  7884  1AE1  2AF9               	goto	L8
  7885  1AE2                     l6101:	
  7886                           ;DelayOff_B1.c: 129: }
  7887                           
  7888                           
  7889                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7890  1AE2  0822               	movf	DelayTimejudge@value,w
  7891  1AE3  3A15               	xorlw	21
  7892  1AE4  1D03               	skipz
  7893  1AE5  2AE8               	goto	l6105
  7894                           
  7895                           ;DelayOff_B1.c: 131: {
  7896                           ;DelayOff_B1.c: 132: i=15;
  7897  1AE6  300F               	movlw	15
  7898  1AE7  2AF9               	goto	L8
  7899  1AE8                     l6105:	
  7900                           ;DelayOff_B1.c: 133: }
  7901                           
  7902                           
  7903                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7904  1AE8  0822               	movf	DelayTimejudge@value,w
  7905  1AE9  3A20               	xorlw	32
  7906  1AEA  1D03               	skipz
  7907  1AEB  2AEE               	goto	l6109
  7908                           
  7909                           ;DelayOff_B1.c: 135: {
  7910                           ;DelayOff_B1.c: 136: i=20;
  7911  1AEC  3014               	movlw	20
  7912  1AED  2AF9               	goto	L8
  7913  1AEE                     l6109:	
  7914                           ;DelayOff_B1.c: 137: }
  7915                           
  7916                           
  7917                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7918  1AEE  0822               	movf	DelayTimejudge@value,w
  7919  1AEF  3A25               	xorlw	37
  7920  1AF0  1D03               	skipz
  7921  1AF1  2AF4               	goto	l6113
  7922                           
  7923                           ;DelayOff_B1.c: 139: {
  7924                           ;DelayOff_B1.c: 140: i=25;
  7925  1AF2  3019               	movlw	25
  7926  1AF3  2AF9               	goto	L8
  7927  1AF4                     l6113:	
  7928                           ;DelayOff_B1.c: 141: }
  7929                           
  7930                           
  7931                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  7932  1AF4  0822               	movf	DelayTimejudge@value,w
  7933  1AF5  3A30               	xorlw	48
  7934  1AF6  1D03               	skipz
  7935  1AF7  2AFC               	goto	l664
  7936                           
  7937                           ;DelayOff_B1.c: 143: {
  7938                           ;DelayOff_B1.c: 144: i=30;
  7939  1AF8  301E               	movlw	30
  7940  1AF9                     L8:	
  7941  1AF9  00A0               	movwf	??_DelayTimejudge
  7942  1AFA  0820               	movf	??_DelayTimejudge,w
  7943  1AFB  00A1               	movwf	DelayTimejudge@i
  7944  1AFC                     l664:	
  7945                           
  7946                           ;DelayOff_B1.c: 145: }
  7947                           ;DelayOff_B1.c: 146: return i;
  7948  1AFC  0821               	movf	DelayTimejudge@i,w
  7949  1AFD  0008               	return
  7950  1AFE                     __end_of_DelayTimejudge:	
  7951                           
  7952                           	psect	text29
  7953  1D19                     __ptext29:	
  7954 ;; *************** function _setRFSW_AdjControl *****************
  7955 ;; Defined at:
  7956 ;;		line 408 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  sw              1    wreg     unsigned char 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  sw              1   70[BANK0 ] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;		None               void
  7963 ;; Registers used:
  7964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        3 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    9
  7977 ;; This function calls:
  7978 ;;		_RfSWPointSelect
  7979 ;;		_setRF_DimmerValue
  7980 ;;		_setTxData
  7981 ;; This function is called by:
  7982 ;;		_setControl_Lights_Table
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           
  7987                           ;psect for function _setRFSW_AdjControl
  7988  1D19                     _setRFSW_AdjControl:	
  7989                           
  7990                           ;incstack = 0
  7991                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7992                           ;setRFSW_AdjControl@sw stored from wreg
  7993  1D19  0020               	movlb	0	; select bank0
  7994  1D1A  00E6               	movwf	setRFSW_AdjControl@sw
  7995                           
  7996                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  7997  1D1B  0866               	movf	setRFSW_AdjControl@sw,w
  7998  1D1C  31A5  25D7  319D   	fcall	_RfSWPointSelect
  7999                           
  8000                           ;RF_Control_B1.c: 411: if(RFSW->Status)
  8001  1D1F  0021               	movlb	1	; select bank1
  8002  1D20  083C               	movf	_RFSW^(0+128),w
  8003  1D21  0086               	movwf	6
  8004  1D22  0187               	clrf	7
  8005  1D23  1C01               	btfss	1,0
  8006  1D24  2D31               	goto	l6503
  8007                           
  8008                           ;RF_Control_B1.c: 412: {
  8009                           ;RF_Control_B1.c: 413: Memory->Modify=1;
  8010  1D25  086D               	movf	_Memory^(0+128),w
  8011  1D26  3E22               	addlw	34
  8012  1D27  0086               	movwf	6
  8013  1D28  3001               	movlw	1	; select bank2/3
  8014  1D29  0087               	movwf	7
  8015  1D2A  1401               	bsf	1,0
  8016                           
  8017                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  8018  1D2B  0020               	movlb	0	; select bank0
  8019  1D2C  0866               	movf	setRFSW_AdjControl@sw,w
  8020  1D2D  319B  23F3  319D   	fcall	_setRF_DimmerValue
  8021                           
  8022                           ;RF_Control_B1.c: 415: }
  8023  1D30  2D43               	goto	l2577
  8024  1D31                     l6503:	
  8025                           
  8026                           ;RF_Control_B1.c: 416: else
  8027                           ;RF_Control_B1.c: 417: {
  8028                           ;RF_Control_B1.c: 418: Product->Data[9]=Product->Data[20+sw];
  8029  1D31  0020               	movlb	0	; select bank0
  8030  1D32  0866               	movf	setRFSW_AdjControl@sw,w
  8031  1D33  3E14               	addlw	20
  8032  1D34  076F               	addwf	_Product,w
  8033  1D35  00E4               	movwf	??_setRFSW_AdjControl
  8034  1D36  0864               	movf	??_setRFSW_AdjControl,w
  8035  1D37  0086               	movwf	6
  8036  1D38  3001               	movlw	1	; select bank2/3
  8037  1D39  0087               	movwf	7
  8038  1D3A  0801               	movf	1,w
  8039  1D3B  00E5               	movwf	??_setRFSW_AdjControl+1
  8040  1D3C  086F               	movf	_Product,w
  8041  1D3D  3E09               	addlw	9
  8042  1D3E  0086               	movwf	6
  8043  1D3F  3001               	movlw	1	; select bank2/3
  8044  1D40  0087               	movwf	7
  8045  1D41  0865               	movf	??_setRFSW_AdjControl+1,w
  8046  1D42  0081               	movwf	1
  8047  1D43                     l2577:	
  8048                           
  8049                           ;RF_Control_B1.c: 419: }
  8050                           ;RF_Control_B1.c: 420: Product->Data[17]=Product->Data[26+sw];
  8051  1D43  0020               	movlb	0	; select bank0
  8052  1D44  0866               	movf	setRFSW_AdjControl@sw,w
  8053  1D45  3E1A               	addlw	26
  8054  1D46  076F               	addwf	_Product,w
  8055  1D47  00E4               	movwf	??_setRFSW_AdjControl
  8056  1D48  0864               	movf	??_setRFSW_AdjControl,w
  8057  1D49  0086               	movwf	6
  8058  1D4A  3001               	movlw	1	; select bank2/3
  8059  1D4B  0087               	movwf	7
  8060  1D4C  0801               	movf	1,w
  8061  1D4D  00E5               	movwf	??_setRFSW_AdjControl+1
  8062  1D4E  086F               	movf	_Product,w
  8063  1D4F  3E11               	addlw	17
  8064  1D50  0086               	movwf	6
  8065  1D51  3001               	movlw	1	; select bank2/3
  8066  1D52  0087               	movwf	7
  8067  1D53  0865               	movf	??_setRFSW_AdjControl+1,w
  8068  1D54  0081               	movwf	1
  8069                           
  8070                           ;RF_Control_B1.c: 421: setTxData(1);
  8071  1D55  3001               	movlw	1
  8072  1D56  318B  2335         	fcall	_setTxData
  8073  1D58  0008               	return
  8074  1D59                     __end_of_setRFSW_AdjControl:	
  8075                           
  8076                           	psect	text30
  8077  1BF3                     __ptext30:	
  8078 ;; *************** function _setRF_DimmerValue *****************
  8079 ;; Defined at:
  8080 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  lights          1    wreg     unsigned char 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  lights          1   67[BANK0 ] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;		None               void
  8087 ;; Registers used:
  8088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;Total ram usage:        3 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    8
  8101 ;; This function calls:
  8102 ;;		_setDimmerLights_AdjRF
  8103 ;; This function is called by:
  8104 ;;		_setRFSW_AdjControl
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           
  8109                           ;psect for function _setRF_DimmerValue
  8110  1BF3                     _setRF_DimmerValue:	
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8114                           ;setRF_DimmerValue@lights stored from wreg
  8115  1BF3  0020               	movlb	0	; select bank0
  8116  1BF4  00E3               	movwf	setRF_DimmerValue@lights
  8117                           
  8118                           ;RF_Control_B1.c: 434: if(RF_Data[9] > 0x64)
  8119  1BF5  3065               	movlw	101
  8120  1BF6  0021               	movlb	1	; select bank1
  8121  1BF7  0229               	subwf	(_RF_Data^(0+128)+9),w
  8122  1BF8  1C03               	skipc
  8123  1BF9  2C00               	goto	l6351
  8124                           
  8125                           ;RF_Control_B1.c: 435: {
  8126                           ;RF_Control_B1.c: 436: RF_Data[9]=0x64;
  8127  1BFA  3064               	movlw	100
  8128  1BFB  0020               	movlb	0	; select bank0
  8129  1BFC  00E1               	movwf	??_setRF_DimmerValue
  8130  1BFD  0861               	movf	??_setRF_DimmerValue,w
  8131  1BFE  0021               	movlb	1	; select bank1
  8132  1BFF  00A9               	movwf	(_RF_Data^(0+128)+9)
  8133  1C00                     l6351:	
  8134                           
  8135                           ;RF_Control_B1.c: 437: }
  8136                           ;RF_Control_B1.c: 438: Product->Data[9]=RF_Data[9];
  8137  1C00  0829               	movf	(_RF_Data^(0+128)+9),w
  8138  1C01  0020               	movlb	0	; select bank0
  8139  1C02  00E1               	movwf	??_setRF_DimmerValue
  8140  1C03  086F               	movf	_Product,w
  8141  1C04  3E09               	addlw	9
  8142  1C05  0086               	movwf	6
  8143  1C06  3001               	movlw	1	; select bank2/3
  8144  1C07  0087               	movwf	7
  8145  1C08  0861               	movf	??_setRF_DimmerValue,w
  8146  1C09  0081               	movwf	1
  8147                           
  8148                           ;RF_Control_B1.c: 439: Product->Data[11]=lights;
  8149  1C0A  0863               	movf	setRF_DimmerValue@lights,w
  8150  1C0B  00E1               	movwf	??_setRF_DimmerValue
  8151  1C0C  086F               	movf	_Product,w
  8152  1C0D  3E0B               	addlw	11
  8153  1C0E  0086               	movwf	6
  8154  1C0F  3001               	movlw	1	; select bank2/3
  8155  1C10  0087               	movwf	7
  8156  1C11  0861               	movf	??_setRF_DimmerValue,w
  8157  1C12  0081               	movwf	1
  8158                           
  8159                           ;RF_Control_B1.c: 440: Product->Data[(20+lights)]=Product->Data[9];
  8160  1C13  086F               	movf	_Product,w
  8161  1C14  3E09               	addlw	9
  8162  1C15  0086               	movwf	6
  8163  1C16  3001               	movlw	1	; select bank2/3
  8164  1C17  0087               	movwf	7
  8165  1C18  0801               	movf	1,w
  8166  1C19  00E1               	movwf	??_setRF_DimmerValue
  8167  1C1A  0863               	movf	setRF_DimmerValue@lights,w
  8168  1C1B  3E14               	addlw	20
  8169  1C1C  076F               	addwf	_Product,w
  8170  1C1D  00E2               	movwf	??_setRF_DimmerValue+1
  8171  1C1E  0862               	movf	??_setRF_DimmerValue+1,w
  8172  1C1F  0086               	movwf	6
  8173  1C20  3001               	movlw	1	; select bank2/3
  8174  1C21  0087               	movwf	7
  8175  1C22  0861               	movf	??_setRF_DimmerValue,w
  8176  1C23  0081               	movwf	1
  8177                           
  8178                           ;RF_Control_B1.c: 441: setDimmerLights_AdjRF(lights);
  8179  1C24  0863               	movf	setRF_DimmerValue@lights,w
  8180  1C25  3199  218B         	fcall	_setDimmerLights_AdjRF
  8181  1C27  0008               	return
  8182  1C28                     __end_of_setRF_DimmerValue:	
  8183                           
  8184                           	psect	text31
  8185  198B                     __ptext31:	
  8186 ;; *************** function _setDimmerLights_AdjRF *****************
  8187 ;; Defined at:
  8188 ;;		line 423 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  lights          1    wreg     unsigned char 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  lights          1   64[BANK0 ] unsigned char 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;		None               void
  8195 ;; Registers used:
  8196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;Total ram usage:        2 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    7
  8209 ;; This function calls:
  8210 ;;		_DimmerLightsPointSelect
  8211 ;;		_getPercentValue
  8212 ;; This function is called by:
  8213 ;;		_setRF_DimmerValue
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           
  8218                           ;psect for function _setDimmerLights_AdjRF
  8219  198B                     _setDimmerLights_AdjRF:	
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8223                           ;setDimmerLights_AdjRF@lights stored from wreg
  8224  198B  0020               	movlb	0	; select bank0
  8225  198C  00E0               	movwf	setDimmerLights_AdjRF@lights
  8226                           
  8227                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8228  198D  0860               	movf	setDimmerLights_AdjRF@lights,w
  8229  198E  31A5  255A  3199   	fcall	_DimmerLightsPointSelect
  8230                           
  8231                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8232  1991  0020               	movlb	0	; select bank0
  8233  1992  086C               	movf	_DimmerLights,w
  8234  1993  0086               	movwf	6
  8235  1994  3001               	movlw	1	; select bank2/3
  8236  1995  0087               	movwf	7
  8237  1996  1501               	bsf	1,2
  8238                           
  8239                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8240  1997  086C               	movf	_DimmerLights,w
  8241  1998  0086               	movwf	6
  8242  1999  3001               	movlw	1	; select bank2/3
  8243  199A  0087               	movwf	7
  8244  199B  1481               	bsf	1,1
  8245                           
  8246                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8247  199C  086F               	movf	_Product,w
  8248  199D  3E09               	addlw	9
  8249  199E  0086               	movwf	6
  8250  199F  3001               	movlw	1	; select bank2/3
  8251  19A0  0087               	movwf	7
  8252  19A1  0801               	movf	1,w
  8253  19A2  3190  20A7         	fcall	_getPercentValue
  8254  19A4  0020               	movlb	0	; select bank0
  8255  19A5  00DF               	movwf	??_setDimmerLights_AdjRF
  8256  19A6  086C               	movf	_DimmerLights,w
  8257  19A7  3E05               	addlw	5
  8258  19A8  0086               	movwf	6
  8259  19A9  3001               	movlw	1	; select bank2/3
  8260  19AA  0087               	movwf	7
  8261  19AB  085F               	movf	??_setDimmerLights_AdjRF,w
  8262  19AC  0081               	movwf	1
  8263  19AD  0008               	return
  8264  19AE                     __end_of_setDimmerLights_AdjRF:	
  8265                           
  8266                           	psect	text32
  8267  10A7                     __ptext32:	
  8268 ;; *************** function _getPercentValue *****************
  8269 ;; Defined at:
  8270 ;;		line 490 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  value           1    wreg     unsigned char 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  value           1   59[BANK0 ] unsigned char 
  8275 ;;  i               3   60[BANK0 ] float 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      unsigned char 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2, status,0, pclath, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;Total ram usage:        6 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    6
  8292 ;; This function calls:
  8293 ;;		___awtoft
  8294 ;;		___ftadd
  8295 ;;		___ftdiv
  8296 ;;		___ftmul
  8297 ;;		___fttol
  8298 ;; This function is called by:
  8299 ;;		_setDimmerLights_AdjRF
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _getPercentValue
  8305  10A7                     _getPercentValue:	
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8309                           ;getPercentValue@value stored from wreg
  8310  10A7  0020               	movlb	0	; select bank0
  8311  10A8  00DB               	movwf	getPercentValue@value
  8312                           
  8313                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8314  10A9  3000               	movlw	0
  8315  10AA  00DC               	movwf	getPercentValue@i
  8316  10AB  3054               	movlw	84
  8317  10AC  00DD               	movwf	getPercentValue@i+1
  8318  10AD  3042               	movlw	66
  8319  10AE  00DE               	movwf	getPercentValue@i+2
  8320                           
  8321                           ;Dimmer_B1.c: 494: i/=100;
  8322  10AF  3000               	movlw	0
  8323  10B0  00AE               	movwf	___ftdiv@f2
  8324  10B1  30C8               	movlw	200
  8325  10B2  00AF               	movwf	___ftdiv@f2+1
  8326  10B3  3042               	movlw	66
  8327  10B4  00B0               	movwf	___ftdiv@f2+2
  8328  10B5  085C               	movf	getPercentValue@i,w
  8329  10B6  00B1               	movwf	___ftdiv@f1
  8330  10B7  085D               	movf	getPercentValue@i+1,w
  8331  10B8  00B2               	movwf	___ftdiv@f1+1
  8332  10B9  085E               	movf	getPercentValue@i+2,w
  8333  10BA  00B3               	movwf	___ftdiv@f1+2
  8334  10BB  318A  228C  3190   	fcall	___ftdiv
  8335  10BE  0020               	movlb	0	; select bank0
  8336  10BF  082E               	movf	?___ftdiv,w
  8337  10C0  00DC               	movwf	getPercentValue@i
  8338  10C1  082F               	movf	?___ftdiv+1,w
  8339  10C2  00DD               	movwf	getPercentValue@i+1
  8340  10C3  0830               	movf	?___ftdiv+2,w
  8341  10C4  00DE               	movwf	getPercentValue@i+2
  8342                           
  8343                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8344  10C5  085B               	movf	getPercentValue@value,w
  8345  10C6  00D9               	movwf	??_getPercentValue
  8346  10C7  01DA               	clrf	??_getPercentValue+1
  8347  10C8  09D9               	comf	??_getPercentValue,f
  8348  10C9  09DA               	comf	??_getPercentValue+1,f
  8349  10CA  0AD9               	incf	??_getPercentValue,f
  8350  10CB  1903               	skipnz
  8351  10CC  0ADA               	incf	??_getPercentValue+1,f
  8352  10CD  0859               	movf	??_getPercentValue,w
  8353  10CE  3E64               	addlw	100
  8354  10CF  00A8               	movwf	___awtoft@c
  8355  10D0  3000               	movlw	0
  8356  10D1  3D5A               	addwfc	??_getPercentValue+1,w
  8357  10D2  00A9               	movwf	___awtoft@c+1
  8358  10D3  3199  2125  3190   	fcall	___awtoft
  8359  10D6  0020               	movlb	0	; select bank0
  8360  10D7  0828               	movf	?___awtoft,w
  8361  10D8  00B1               	movwf	___ftmul@f2
  8362  10D9  0829               	movf	?___awtoft+1,w
  8363  10DA  00B2               	movwf	___ftmul@f2+1
  8364  10DB  082A               	movf	?___awtoft+2,w
  8365  10DC  00B3               	movwf	___ftmul@f2+2
  8366  10DD  085C               	movf	getPercentValue@i,w
  8367  10DE  00AE               	movwf	___ftmul@f1
  8368  10DF  085D               	movf	getPercentValue@i+1,w
  8369  10E0  00AF               	movwf	___ftmul@f1+1
  8370  10E1  085E               	movf	getPercentValue@i+2,w
  8371  10E2  00B0               	movwf	___ftmul@f1+2
  8372  10E3  3187  273C  3190   	fcall	___ftmul
  8373  10E6  0020               	movlb	0	; select bank0
  8374  10E7  082E               	movf	?___ftmul,w
  8375  10E8  00C1               	movwf	___ftadd@f2
  8376  10E9  082F               	movf	?___ftmul+1,w
  8377  10EA  00C2               	movwf	___ftadd@f2+1
  8378  10EB  0830               	movf	?___ftmul+2,w
  8379  10EC  00C3               	movwf	___ftadd@f2+2
  8380  10ED  3000               	movlw	0
  8381  10EE  00BE               	movwf	___ftadd@f1
  8382  10EF  3086               	movlw	134
  8383  10F0  00BF               	movwf	___ftadd@f1+1
  8384  10F1  3042               	movlw	66
  8385  10F2  00C0               	movwf	___ftadd@f1+2
  8386  10F3  318D  25E7  3190   	fcall	___ftadd
  8387  10F6  0020               	movlb	0	; select bank0
  8388  10F7  083E               	movf	?___ftadd,w
  8389  10F8  00CB               	movwf	___fttol@f1
  8390  10F9  083F               	movf	?___ftadd+1,w
  8391  10FA  00CC               	movwf	___fttol@f1+1
  8392  10FB  0840               	movf	?___ftadd+2,w
  8393  10FC  00CD               	movwf	___fttol@f1+2
  8394  10FD  3196  26F1         	fcall	___fttol
  8395  10FF  0020               	movlb	0	; select bank0
  8396  1100  084B               	movf	?___fttol,w
  8397  1101  0008               	return
  8398  1102                     __end_of_getPercentValue:	
  8399                           
  8400                           	psect	text33
  8401  073C                     __ptext33:	
  8402 ;; *************** function ___ftmul *****************
  8403 ;; Defined at:
  8404 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  f1              3   14[BANK0 ] float 
  8407 ;;  f2              3   17[BANK0 ] float 
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8410 ;;  sign            1   29[BANK0 ] unsigned char 
  8411 ;;  cntr            1   28[BANK0 ] unsigned char 
  8412 ;;  exp             1   24[BANK0 ] unsigned char 
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  3   14[BANK0 ] float 
  8415 ;; Registers used:
  8416 ;;		wreg, status,2, status,0, pclath, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8422 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;Total ram usage:       16 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    5
  8429 ;; This function calls:
  8430 ;;		___ftpack
  8431 ;; This function is called by:
  8432 ;;		_getPercentValue
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function ___ftmul
  8438  073C                     ___ftmul:	
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8442  073C  0020               	movlb	0	; select bank0
  8443  073D  082E               	movf	___ftmul@f1,w
  8444  073E  00B4               	movwf	??___ftmul
  8445  073F  082F               	movf	___ftmul@f1+1,w
  8446  0740  00B5               	movwf	??___ftmul+1
  8447  0741  0830               	movf	___ftmul@f1+2,w
  8448  0742  00B6               	movwf	??___ftmul+2
  8449  0743  1003               	clrc
  8450  0744  0D35               	rlf	??___ftmul+1,w
  8451  0745  0D36               	rlf	??___ftmul+2,w
  8452  0746  00B7               	movwf	??___ftmul+3
  8453  0747  0837               	movf	??___ftmul+3,w
  8454  0748  00B8               	movwf	___ftmul@exp
  8455  0749  08B8               	movf	___ftmul@exp,f
  8456  074A  1D03               	skipz
  8457  074B  2F53               	goto	l5989
  8458  074C  3000               	movlw	0
  8459  074D  00AE               	movwf	?___ftmul
  8460  074E  3000               	movlw	0
  8461  074F  00AF               	movwf	?___ftmul+1
  8462  0750  3000               	movlw	0
  8463  0751  00B0               	movwf	?___ftmul+2
  8464  0752  0008               	return
  8465  0753                     l5989:	
  8466  0753  0831               	movf	___ftmul@f2,w
  8467  0754  00B4               	movwf	??___ftmul
  8468  0755  0832               	movf	___ftmul@f2+1,w
  8469  0756  00B5               	movwf	??___ftmul+1
  8470  0757  0833               	movf	___ftmul@f2+2,w
  8471  0758  00B6               	movwf	??___ftmul+2
  8472  0759  1003               	clrc
  8473  075A  0D35               	rlf	??___ftmul+1,w
  8474  075B  0D36               	rlf	??___ftmul+2,w
  8475  075C  00B7               	movwf	??___ftmul+3
  8476  075D  0837               	movf	??___ftmul+3,w
  8477  075E  00BD               	movwf	___ftmul@sign
  8478  075F  08BD               	movf	___ftmul@sign,f
  8479  0760  1D03               	skipz
  8480  0761  2F69               	goto	l5995
  8481  0762  3000               	movlw	0
  8482  0763  00AE               	movwf	?___ftmul
  8483  0764  3000               	movlw	0
  8484  0765  00AF               	movwf	?___ftmul+1
  8485  0766  3000               	movlw	0
  8486  0767  00B0               	movwf	?___ftmul+2
  8487  0768  0008               	return
  8488  0769                     l5995:	
  8489  0769  083D               	movf	___ftmul@sign,w
  8490  076A  3E7B               	addlw	123
  8491  076B  00B4               	movwf	??___ftmul
  8492  076C  0834               	movf	??___ftmul,w
  8493  076D  07B8               	addwf	___ftmul@exp,f
  8494  076E  082E               	movf	___ftmul@f1,w
  8495  076F  00B4               	movwf	??___ftmul
  8496  0770  082F               	movf	___ftmul@f1+1,w
  8497  0771  00B5               	movwf	??___ftmul+1
  8498  0772  0830               	movf	___ftmul@f1+2,w
  8499  0773  00B6               	movwf	??___ftmul+2
  8500  0774  3010               	movlw	16
  8501  0775                     u4215:	
  8502  0775  36B6               	lsrf	??___ftmul+2,f
  8503  0776  0CB5               	rrf	??___ftmul+1,f
  8504  0777  0CB4               	rrf	??___ftmul,f
  8505  0778  0B89               	decfsz	9,f
  8506  0779  2F75               	goto	u4215
  8507  077A  0834               	movf	??___ftmul,w
  8508  077B  00B7               	movwf	??___ftmul+3
  8509  077C  0837               	movf	??___ftmul+3,w
  8510  077D  00BD               	movwf	___ftmul@sign
  8511  077E  0831               	movf	___ftmul@f2,w
  8512  077F  00B4               	movwf	??___ftmul
  8513  0780  0832               	movf	___ftmul@f2+1,w
  8514  0781  00B5               	movwf	??___ftmul+1
  8515  0782  0833               	movf	___ftmul@f2+2,w
  8516  0783  00B6               	movwf	??___ftmul+2
  8517  0784  3010               	movlw	16
  8518  0785                     u4225:	
  8519  0785  36B6               	lsrf	??___ftmul+2,f
  8520  0786  0CB5               	rrf	??___ftmul+1,f
  8521  0787  0CB4               	rrf	??___ftmul,f
  8522  0788  0B89               	decfsz	9,f
  8523  0789  2F85               	goto	u4225
  8524  078A  0834               	movf	??___ftmul,w
  8525  078B  00B7               	movwf	??___ftmul+3
  8526  078C  0837               	movf	??___ftmul+3,w
  8527  078D  06BD               	xorwf	___ftmul@sign,f
  8528  078E  3080               	movlw	128
  8529  078F  00B4               	movwf	??___ftmul
  8530  0790  0834               	movf	??___ftmul,w
  8531  0791  05BD               	andwf	___ftmul@sign,f
  8532  0792  17AF               	bsf	___ftmul@f1+1,7
  8533  0793  17B2               	bsf	___ftmul@f2+1,7
  8534  0794  30FF               	movlw	255
  8535  0795  05B1               	andwf	___ftmul@f2,f
  8536  0796  30FF               	movlw	255
  8537  0797  05B2               	andwf	___ftmul@f2+1,f
  8538  0798  3000               	movlw	0
  8539  0799  05B3               	andwf	___ftmul@f2+2,f
  8540  079A  3000               	movlw	0
  8541  079B  00B9               	movwf	___ftmul@f3_as_product
  8542  079C  3000               	movlw	0
  8543  079D  00BA               	movwf	___ftmul@f3_as_product+1
  8544  079E  3000               	movlw	0
  8545  079F  00BB               	movwf	___ftmul@f3_as_product+2
  8546  07A0  3007               	movlw	7
  8547  07A1  00B4               	movwf	??___ftmul
  8548  07A2  0834               	movf	??___ftmul,w
  8549  07A3  00BC               	movwf	___ftmul@cntr
  8550  07A4                     l6007:	
  8551  07A4  1C2E               	btfss	___ftmul@f1,0
  8552  07A5  2FAC               	goto	l6011
  8553  07A6  0831               	movf	___ftmul@f2,w
  8554  07A7  07B9               	addwf	___ftmul@f3_as_product,f
  8555  07A8  0832               	movf	___ftmul@f2+1,w
  8556  07A9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8557  07AA  0833               	movf	___ftmul@f2+2,w
  8558  07AB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8559  07AC                     l6011:	
  8560  07AC  3001               	movlw	1
  8561  07AD                     u4245:	
  8562  07AD  36B0               	lsrf	___ftmul@f1+2,f
  8563  07AE  0CAF               	rrf	___ftmul@f1+1,f
  8564  07AF  0CAE               	rrf	___ftmul@f1,f
  8565  07B0  0B89               	decfsz	9,f
  8566  07B1  2FAD               	goto	u4245
  8567  07B2  3001               	movlw	1
  8568  07B3                     u4255:	
  8569  07B3  35B1               	lslf	___ftmul@f2,f
  8570  07B4  0DB2               	rlf	___ftmul@f2+1,f
  8571  07B5  0DB3               	rlf	___ftmul@f2+2,f
  8572  07B6  0B89               	decfsz	9,f
  8573  07B7  2FB3               	goto	u4255
  8574  07B8  3001               	movlw	1
  8575  07B9  02BC               	subwf	___ftmul@cntr,f
  8576  07BA  1D03               	btfss	3,2
  8577  07BB  2FA4               	goto	l6007
  8578  07BC  3009               	movlw	9
  8579  07BD  00B4               	movwf	??___ftmul
  8580  07BE  0834               	movf	??___ftmul,w
  8581  07BF  00BC               	movwf	___ftmul@cntr
  8582  07C0                     l6019:	
  8583  07C0  1C2E               	btfss	___ftmul@f1,0
  8584  07C1  2FC8               	goto	l6023
  8585  07C2  0831               	movf	___ftmul@f2,w
  8586  07C3  07B9               	addwf	___ftmul@f3_as_product,f
  8587  07C4  0832               	movf	___ftmul@f2+1,w
  8588  07C5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8589  07C6  0833               	movf	___ftmul@f2+2,w
  8590  07C7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8591  07C8                     l6023:	
  8592  07C8  3001               	movlw	1
  8593  07C9                     u4285:	
  8594  07C9  36B0               	lsrf	___ftmul@f1+2,f
  8595  07CA  0CAF               	rrf	___ftmul@f1+1,f
  8596  07CB  0CAE               	rrf	___ftmul@f1,f
  8597  07CC  0B89               	decfsz	9,f
  8598  07CD  2FC9               	goto	u4285
  8599  07CE  3001               	movlw	1
  8600  07CF                     u4295:	
  8601  07CF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8602  07D0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8603  07D1  0CB9               	rrf	___ftmul@f3_as_product,f
  8604  07D2  0B89               	decfsz	9,f
  8605  07D3  2FCF               	goto	u4295
  8606  07D4  3001               	movlw	1
  8607  07D5  02BC               	subwf	___ftmul@cntr,f
  8608  07D6  1D03               	btfss	3,2
  8609  07D7  2FC0               	goto	l6019
  8610  07D8  0839               	movf	___ftmul@f3_as_product,w
  8611  07D9  00A0               	movwf	___ftpack@arg
  8612  07DA  083A               	movf	___ftmul@f3_as_product+1,w
  8613  07DB  00A1               	movwf	___ftpack@arg+1
  8614  07DC  083B               	movf	___ftmul@f3_as_product+2,w
  8615  07DD  00A2               	movwf	___ftpack@arg+2
  8616  07DE  0838               	movf	___ftmul@exp,w
  8617  07DF  00B4               	movwf	??___ftmul
  8618  07E0  0834               	movf	??___ftmul,w
  8619  07E1  00A3               	movwf	___ftpack@exp
  8620  07E2  083D               	movf	___ftmul@sign,w
  8621  07E3  00B5               	movwf	??___ftmul+1
  8622  07E4  0835               	movf	??___ftmul+1,w
  8623  07E5  00A4               	movwf	___ftpack@sign
  8624  07E6  3191  21BC         	fcall	___ftpack
  8625  07E8  0020               	movlb	0	; select bank0
  8626  07E9  0820               	movf	?___ftpack,w
  8627  07EA  00AE               	movwf	?___ftmul
  8628  07EB  0821               	movf	?___ftpack+1,w
  8629  07EC  00AF               	movwf	?___ftmul+1
  8630  07ED  0822               	movf	?___ftpack+2,w
  8631  07EE  00B0               	movwf	?___ftmul+2
  8632  07EF  0008               	return
  8633  07F0                     __end_of___ftmul:	
  8634                           
  8635                           	psect	text34
  8636  0DE7                     __ptext34:	
  8637 ;; *************** function ___ftadd *****************
  8638 ;; Defined at:
  8639 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  f1              3   30[BANK0 ] float 
  8642 ;;  f2              3   33[BANK0 ] float 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  exp1            1   42[BANK0 ] unsigned char 
  8645 ;;  exp2            1   41[BANK0 ] unsigned char 
  8646 ;;  sign            1   40[BANK0 ] unsigned char 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  3   30[BANK0 ] float 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, pclath, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;Total ram usage:       13 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    5
  8663 ;; This function calls:
  8664 ;;		___ftpack
  8665 ;; This function is called by:
  8666 ;;		_getPercentValue
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function ___ftadd
  8672  0DE7                     ___ftadd:	
  8673                           
  8674                           ;incstack = 0
  8675                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8676  0DE7  0020               	movlb	0	; select bank0
  8677  0DE8  083E               	movf	___ftadd@f1,w
  8678  0DE9  00C4               	movwf	??___ftadd
  8679  0DEA  083F               	movf	___ftadd@f1+1,w
  8680  0DEB  00C5               	movwf	??___ftadd+1
  8681  0DEC  0840               	movf	___ftadd@f1+2,w
  8682  0DED  00C6               	movwf	??___ftadd+2
  8683  0DEE  1003               	clrc
  8684  0DEF  0D45               	rlf	??___ftadd+1,w
  8685  0DF0  0D46               	rlf	??___ftadd+2,w
  8686  0DF1  00C7               	movwf	??___ftadd+3
  8687  0DF2  0847               	movf	??___ftadd+3,w
  8688  0DF3  00CA               	movwf	___ftadd@exp1
  8689  0DF4  0841               	movf	___ftadd@f2,w
  8690  0DF5  00C4               	movwf	??___ftadd
  8691  0DF6  0842               	movf	___ftadd@f2+1,w
  8692  0DF7  00C5               	movwf	??___ftadd+1
  8693  0DF8  0843               	movf	___ftadd@f2+2,w
  8694  0DF9  00C6               	movwf	??___ftadd+2
  8695  0DFA  1003               	clrc
  8696  0DFB  0D45               	rlf	??___ftadd+1,w
  8697  0DFC  0D46               	rlf	??___ftadd+2,w
  8698  0DFD  00C7               	movwf	??___ftadd+3
  8699  0DFE  0847               	movf	??___ftadd+3,w
  8700  0DFF  00C9               	movwf	___ftadd@exp2
  8701  0E00  084A               	movf	___ftadd@exp1,w
  8702  0E01  1903               	btfsc	3,2
  8703  0E02  2E0F               	goto	l5877
  8704  0E03  0849               	movf	___ftadd@exp2,w
  8705  0E04  024A               	subwf	___ftadd@exp1,w
  8706  0E05  1803               	skipnc
  8707  0E06  2E16               	goto	l5881
  8708  0E07  034A               	decf	___ftadd@exp1,w
  8709  0E08  3AFF               	xorlw	255
  8710  0E09  0749               	addwf	___ftadd@exp2,w
  8711  0E0A  00C4               	movwf	??___ftadd
  8712  0E0B  3019               	movlw	25
  8713  0E0C  0244               	subwf	??___ftadd,w
  8714  0E0D  1C03               	skipc
  8715  0E0E  2E16               	goto	l5881
  8716  0E0F                     l5877:	
  8717  0E0F  0841               	movf	___ftadd@f2,w
  8718  0E10  00BE               	movwf	?___ftadd
  8719  0E11  0842               	movf	___ftadd@f2+1,w
  8720  0E12  00BF               	movwf	?___ftadd+1
  8721  0E13  0843               	movf	___ftadd@f2+2,w
  8722  0E14  00C0               	movwf	?___ftadd+2
  8723  0E15  0008               	return
  8724  0E16                     l5881:	
  8725  0E16  0849               	movf	___ftadd@exp2,w
  8726  0E17  1903               	btfsc	3,2
  8727  0E18  0008               	return
  8728  0E19  084A               	movf	___ftadd@exp1,w
  8729  0E1A  0249               	subwf	___ftadd@exp2,w
  8730  0E1B  1803               	skipnc
  8731  0E1C  2E25               	goto	l5887
  8732  0E1D  0349               	decf	___ftadd@exp2,w
  8733  0E1E  3AFF               	xorlw	255
  8734  0E1F  074A               	addwf	___ftadd@exp1,w
  8735  0E20  00C4               	movwf	??___ftadd
  8736  0E21  3019               	movlw	25
  8737  0E22  0244               	subwf	??___ftadd,w
  8738  0E23  1803               	btfsc	3,0
  8739  0E24  0008               	return
  8740  0E25                     l5887:	
  8741  0E25  3006               	movlw	6
  8742  0E26  00C4               	movwf	??___ftadd
  8743  0E27  0844               	movf	??___ftadd,w
  8744  0E28  00C8               	movwf	___ftadd@sign
  8745  0E29  1BC0               	btfsc	___ftadd@f1+2,7
  8746  0E2A  17C8               	bsf	___ftadd@sign,7
  8747  0E2B  1BC3               	btfsc	___ftadd@f2+2,7
  8748  0E2C  1748               	bsf	___ftadd@sign,6
  8749  0E2D  17BF               	bsf	___ftadd@f1+1,7
  8750  0E2E  30FF               	movlw	255
  8751  0E2F  05BE               	andwf	___ftadd@f1,f
  8752  0E30  30FF               	movlw	255
  8753  0E31  05BF               	andwf	___ftadd@f1+1,f
  8754  0E32  3000               	movlw	0
  8755  0E33  05C0               	andwf	___ftadd@f1+2,f
  8756  0E34  17C2               	bsf	___ftadd@f2+1,7
  8757  0E35  30FF               	movlw	255
  8758  0E36  05C1               	andwf	___ftadd@f2,f
  8759  0E37  30FF               	movlw	255
  8760  0E38  05C2               	andwf	___ftadd@f2+1,f
  8761  0E39  3000               	movlw	0
  8762  0E3A  05C3               	andwf	___ftadd@f2+2,f
  8763  0E3B  0849               	movf	___ftadd@exp2,w
  8764  0E3C  024A               	subwf	___ftadd@exp1,w
  8765  0E3D  1803               	skipnc
  8766  0E3E  2E61               	goto	l5909
  8767  0E3F                     l5899:	
  8768  0E3F  3001               	movlw	1
  8769  0E40                     u3975:	
  8770  0E40  35C1               	lslf	___ftadd@f2,f
  8771  0E41  0DC2               	rlf	___ftadd@f2+1,f
  8772  0E42  0DC3               	rlf	___ftadd@f2+2,f
  8773  0E43  0B89               	decfsz	9,f
  8774  0E44  2E40               	goto	u3975
  8775  0E45  3001               	movlw	1
  8776  0E46  02C9               	subwf	___ftadd@exp2,f
  8777  0E47  0849               	movf	___ftadd@exp2,w
  8778  0E48  064A               	xorwf	___ftadd@exp1,w
  8779  0E49  1903               	skipnz
  8780  0E4A  2E5C               	goto	l5907
  8781  0E4B  3001               	movlw	1
  8782  0E4C  02C8               	subwf	___ftadd@sign,f
  8783  0E4D  0848               	movf	___ftadd@sign,w
  8784  0E4E  3907               	andlw	7
  8785  0E4F  1903               	btfsc	3,2
  8786  0E50  2E5C               	goto	l5907
  8787  0E51  2E3F               	goto	l5899
  8788  0E52                     l5905:	
  8789  0E52  3001               	movlw	1
  8790  0E53                     u4005:	
  8791  0E53  36C0               	lsrf	___ftadd@f1+2,f
  8792  0E54  0CBF               	rrf	___ftadd@f1+1,f
  8793  0E55  0CBE               	rrf	___ftadd@f1,f
  8794  0E56  0B89               	decfsz	9,f
  8795  0E57  2E53               	goto	u4005
  8796  0E58  3001               	movlw	1
  8797  0E59  00C4               	movwf	??___ftadd
  8798  0E5A  0844               	movf	??___ftadd,w
  8799  0E5B  07CA               	addwf	___ftadd@exp1,f
  8800  0E5C                     l5907:	
  8801  0E5C  084A               	movf	___ftadd@exp1,w
  8802  0E5D  0649               	xorwf	___ftadd@exp2,w
  8803  0E5E  1903               	btfsc	3,2
  8804  0E5F  2E86               	goto	l3228
  8805  0E60  2E52               	goto	l5905
  8806  0E61                     l5909:	
  8807  0E61  084A               	movf	___ftadd@exp1,w
  8808  0E62  0249               	subwf	___ftadd@exp2,w
  8809  0E63  1803               	skipnc
  8810  0E64  2E86               	goto	l3228
  8811  0E65                     l5911:	
  8812  0E65  3001               	movlw	1
  8813  0E66                     u4035:	
  8814  0E66  35BE               	lslf	___ftadd@f1,f
  8815  0E67  0DBF               	rlf	___ftadd@f1+1,f
  8816  0E68  0DC0               	rlf	___ftadd@f1+2,f
  8817  0E69  0B89               	decfsz	9,f
  8818  0E6A  2E66               	goto	u4035
  8819  0E6B  3001               	movlw	1
  8820  0E6C  02CA               	subwf	___ftadd@exp1,f
  8821  0E6D  0849               	movf	___ftadd@exp2,w
  8822  0E6E  064A               	xorwf	___ftadd@exp1,w
  8823  0E6F  1903               	skipnz
  8824  0E70  2E82               	goto	l5919
  8825  0E71  3001               	movlw	1
  8826  0E72  02C8               	subwf	___ftadd@sign,f
  8827  0E73  0848               	movf	___ftadd@sign,w
  8828  0E74  3907               	andlw	7
  8829  0E75  1903               	btfsc	3,2
  8830  0E76  2E82               	goto	l5919
  8831  0E77  2E65               	goto	l5911
  8832  0E78                     l5917:	
  8833  0E78  3001               	movlw	1
  8834  0E79                     u4065:	
  8835  0E79  36C3               	lsrf	___ftadd@f2+2,f
  8836  0E7A  0CC2               	rrf	___ftadd@f2+1,f
  8837  0E7B  0CC1               	rrf	___ftadd@f2,f
  8838  0E7C  0B89               	decfsz	9,f
  8839  0E7D  2E79               	goto	u4065
  8840  0E7E  3001               	movlw	1
  8841  0E7F  00C4               	movwf	??___ftadd
  8842  0E80  0844               	movf	??___ftadd,w
  8843  0E81  07C9               	addwf	___ftadd@exp2,f
  8844  0E82                     l5919:	
  8845  0E82  084A               	movf	___ftadd@exp1,w
  8846  0E83  0649               	xorwf	___ftadd@exp2,w
  8847  0E84  1D03               	skipz
  8848  0E85  2E78               	goto	l5917
  8849  0E86                     l3228:	
  8850  0E86  1FC8               	btfss	___ftadd@sign,7
  8851  0E87  2E98               	goto	l5923
  8852  0E88  30FF               	movlw	255
  8853  0E89  06BE               	xorwf	___ftadd@f1,f
  8854  0E8A  30FF               	movlw	255
  8855  0E8B  06BF               	xorwf	___ftadd@f1+1,f
  8856  0E8C  30FF               	movlw	255
  8857  0E8D  06C0               	xorwf	___ftadd@f1+2,f
  8858  0E8E  3001               	movlw	1
  8859  0E8F  07BE               	addwf	___ftadd@f1,f
  8860  0E90  3000               	movlw	0
  8861  0E91  1803               	skipnc
  8862  0E92  3001               	movlw	1
  8863  0E93  07BF               	addwf	___ftadd@f1+1,f
  8864  0E94  3000               	movlw	0
  8865  0E95  1803               	skipnc
  8866  0E96  3001               	movlw	1
  8867  0E97  07C0               	addwf	___ftadd@f1+2,f
  8868  0E98                     l5923:	
  8869  0E98  1F48               	btfss	___ftadd@sign,6
  8870  0E99  2EAA               	goto	l5927
  8871  0E9A  30FF               	movlw	255
  8872  0E9B  06C1               	xorwf	___ftadd@f2,f
  8873  0E9C  30FF               	movlw	255
  8874  0E9D  06C2               	xorwf	___ftadd@f2+1,f
  8875  0E9E  30FF               	movlw	255
  8876  0E9F  06C3               	xorwf	___ftadd@f2+2,f
  8877  0EA0  3001               	movlw	1
  8878  0EA1  07C1               	addwf	___ftadd@f2,f
  8879  0EA2  3000               	movlw	0
  8880  0EA3  1803               	skipnc
  8881  0EA4  3001               	movlw	1
  8882  0EA5  07C2               	addwf	___ftadd@f2+1,f
  8883  0EA6  3000               	movlw	0
  8884  0EA7  1803               	skipnc
  8885  0EA8  3001               	movlw	1
  8886  0EA9  07C3               	addwf	___ftadd@f2+2,f
  8887  0EAA                     l5927:	
  8888  0EAA  01C8               	clrf	___ftadd@sign
  8889  0EAB  083E               	movf	___ftadd@f1,w
  8890  0EAC  07C1               	addwf	___ftadd@f2,f
  8891  0EAD  083F               	movf	___ftadd@f1+1,w
  8892  0EAE  3DC2               	addwfc	___ftadd@f2+1,f
  8893  0EAF  0840               	movf	___ftadd@f1+2,w
  8894  0EB0  3DC3               	addwfc	___ftadd@f2+2,f
  8895  0EB1  1FC3               	btfss	___ftadd@f2+2,7
  8896  0EB2  2EC5               	goto	l5937
  8897  0EB3  30FF               	movlw	255
  8898  0EB4  06C1               	xorwf	___ftadd@f2,f
  8899  0EB5  30FF               	movlw	255
  8900  0EB6  06C2               	xorwf	___ftadd@f2+1,f
  8901  0EB7  30FF               	movlw	255
  8902  0EB8  06C3               	xorwf	___ftadd@f2+2,f
  8903  0EB9  3001               	movlw	1
  8904  0EBA  07C1               	addwf	___ftadd@f2,f
  8905  0EBB  3000               	movlw	0
  8906  0EBC  1803               	skipnc
  8907  0EBD  3001               	movlw	1
  8908  0EBE  07C2               	addwf	___ftadd@f2+1,f
  8909  0EBF  3000               	movlw	0
  8910  0EC0  1803               	skipnc
  8911  0EC1  3001               	movlw	1
  8912  0EC2  07C3               	addwf	___ftadd@f2+2,f
  8913  0EC3  01C8               	clrf	___ftadd@sign
  8914  0EC4  0AC8               	incf	___ftadd@sign,f
  8915  0EC5                     l5937:	
  8916  0EC5  0841               	movf	___ftadd@f2,w
  8917  0EC6  00A0               	movwf	___ftpack@arg
  8918  0EC7  0842               	movf	___ftadd@f2+1,w
  8919  0EC8  00A1               	movwf	___ftpack@arg+1
  8920  0EC9  0843               	movf	___ftadd@f2+2,w
  8921  0ECA  00A2               	movwf	___ftpack@arg+2
  8922  0ECB  084A               	movf	___ftadd@exp1,w
  8923  0ECC  00C4               	movwf	??___ftadd
  8924  0ECD  0844               	movf	??___ftadd,w
  8925  0ECE  00A3               	movwf	___ftpack@exp
  8926  0ECF  0848               	movf	___ftadd@sign,w
  8927  0ED0  00C5               	movwf	??___ftadd+1
  8928  0ED1  0845               	movf	??___ftadd+1,w
  8929  0ED2  00A4               	movwf	___ftpack@sign
  8930  0ED3  3191  21BC         	fcall	___ftpack
  8931  0ED5  0020               	movlb	0	; select bank0
  8932  0ED6  0820               	movf	?___ftpack,w
  8933  0ED7  00BE               	movwf	?___ftadd
  8934  0ED8  0821               	movf	?___ftpack+1,w
  8935  0ED9  00BF               	movwf	?___ftadd+1
  8936  0EDA  0822               	movf	?___ftpack+2,w
  8937  0EDB  00C0               	movwf	?___ftadd+2
  8938  0EDC  0008               	return
  8939  0EDD                     __end_of___ftadd:	
  8940                           
  8941                           	psect	text35
  8942  0801                     __ptext35:	
  8943 ;; *************** function _RF_RxDisable *****************
  8944 ;; Defined at:
  8945 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  rf              1    wreg     unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  rf              1    4[BANK0 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    6
  8966 ;; This function calls:
  8967 ;;		_CC2500_WriteCommand
  8968 ;;		_RfPointSelect
  8969 ;;		_setINT_GO
  8970 ;; This function is called by:
  8971 ;;		_setRF_Main
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function _RF_RxDisable
  8977  0801                     _RF_RxDisable:	
  8978                           
  8979                           ;incstack = 0
  8980                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8981                           ;RF_RxDisable@rf stored from wreg
  8982  0801  0020               	movlb	0	; select bank0
  8983  0802  00A4               	movwf	RF_RxDisable@rf
  8984                           
  8985                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  8986  0803  0824               	movf	RF_RxDisable@rf,w
  8987  0804  31A5  2570  3188   	fcall	_RfPointSelect
  8988                           
  8989                           ;RF_Control_B1.c: 202: if(RF->RxStatus)
  8990  0807  087B               	movf	_RF,w
  8991  0808  0086               	movwf	6
  8992  0809  0187               	clrf	7
  8993  080A  1D81               	btfss	1,3
  8994  080B  0008               	return
  8995                           
  8996                           ;RF_Control_B1.c: 203: {
  8997                           ;RF_Control_B1.c: 204: RF->RxStatus=0;
  8998  080C  087B               	movf	_RF,w
  8999  080D  0086               	movwf	6
  9000  080E  0187               	clrf	7
  9001  080F  1181               	bcf	1,3
  9002                           
  9003                           ;RF_Control_B1.c: 205: RF->ReceiveGO=0;
  9004  0810  087B               	movf	_RF,w
  9005  0811  0086               	movwf	6
  9006  0812  0187               	clrf	7
  9007  0813  1081               	bcf	1,1
  9008                           
  9009                           ;RF_Control_B1.c: 206: RF->DebounceTime=0;
  9010  0814  0A7B               	incf	_RF,w
  9011  0815  0086               	movwf	6
  9012  0816  0187               	clrf	7
  9013  0817  0181               	clrf	1
  9014                           
  9015                           ;RF_Control_B1.c: 207: RF->Debounce=0;
  9016  0818  087B               	movf	_RF,w
  9017  0819  0086               	movwf	6
  9018  081A  0187               	clrf	7
  9019  081B  1281               	bcf	1,5
  9020                           
  9021                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x36);
  9022  081C  3036               	movlw	54
  9023  081D  31A6  269D  3188   	fcall	_CC2500_WriteCommand
  9024                           
  9025                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x3A);
  9026  0820  303A               	movlw	58
  9027  0821  31A6  269D  3188   	fcall	_CC2500_WriteCommand
  9028                           
  9029                           ;RF_Control_B1.c: 210: setINT_GO(0);
  9030  0824  3000               	movlw	0
  9031  0825  31A5  2528         	fcall	_setINT_GO
  9032  0827  0008               	return
  9033  0828                     __end_of_RF_RxDisable:	
  9034                           
  9035                           	psect	text36
  9036  1D9D                     __ptext36:	
  9037 ;; *************** function _CC2500_TxData *****************
  9038 ;; Defined at:
  9039 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;		None
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;Total ram usage:        2 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    6
  9060 ;; This function calls:
  9061 ;;		_CC2500_WriteByte
  9062 ;;		_CC2500_WriteCommand
  9063 ;; This function is called by:
  9064 ;;		_setRF_Main
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           
  9069                           ;psect for function _CC2500_TxData
  9070  1D9D                     _CC2500_TxData:	
  9071                           
  9072                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9073                           ;CC2500_B1.c: 34: RC4=0;
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9077  1D9D  0020               	movlb	0	; select bank0
  9078  1D9E  120E               	bcf	14,4	;volatile
  9079                           
  9080                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9081  1D9F  307F               	movlw	127
  9082  1DA0  00A4               	movwf	??_CC2500_TxData
  9083  1DA1  0824               	movf	??_CC2500_TxData,w
  9084  1DA2  0021               	movlb	1	; select bank1
  9085  1DA3  00BF               	movwf	_SPI0Buffer^(0+128)
  9086  1DA4                     l287:	
  9087                           ;CC2500_B1.c: 36: while(RC2==1);
  9088                           
  9089  1DA4  0020               	movlb	0	; select bank0
  9090  1DA5  190E               	btfsc	14,2	;volatile
  9091  1DA6  2DA4               	goto	l287
  9092                           
  9093                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9094  1DA7  31A7  279C  319D   	fcall	_CC2500_WriteByte
  9095                           
  9096                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9097  1DAA  0021               	movlb	1	; select bank1
  9098  1DAB  0840               	movf	_Tx_Length^(0+128),w
  9099  1DAC  0020               	movlb	0	; select bank0
  9100  1DAD  00A4               	movwf	??_CC2500_TxData
  9101  1DAE  0824               	movf	??_CC2500_TxData,w
  9102  1DAF  0021               	movlb	1	; select bank1
  9103  1DB0  00BF               	movwf	_SPI0Buffer^(0+128)
  9104                           
  9105                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9106  1DB1  31A7  279C  319D   	fcall	_CC2500_WriteByte
  9107                           
  9108                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9109  1DB4  0020               	movlb	0	; select bank0
  9110  1DB5  01A5               	clrf	CC2500_TxData@loop_e
  9111  1DB6                     l6647:	
  9112  1DB6  0021               	movlb	1	; select bank1
  9113  1DB7  0840               	movf	_Tx_Length^(0+128),w
  9114  1DB8  0020               	movlb	0	; select bank0
  9115  1DB9  0225               	subwf	CC2500_TxData@loop_e,w
  9116  1DBA  1803               	btfsc	3,0
  9117  1DBB  2DCE               	goto	l292
  9118                           
  9119                           ;CC2500_B1.c: 41: {
  9120                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9121  1DBC  0825               	movf	CC2500_TxData@loop_e,w
  9122  1DBD  3EA0               	addlw	_RF_Data& (0+255)
  9123  1DBE  0086               	movwf	6
  9124  1DBF  0187               	clrf	7
  9125  1DC0  0801               	movf	1,w
  9126  1DC1  00A4               	movwf	??_CC2500_TxData
  9127  1DC2  0824               	movf	??_CC2500_TxData,w
  9128  1DC3  0021               	movlb	1	; select bank1
  9129  1DC4  00BF               	movwf	_SPI0Buffer^(0+128)
  9130                           
  9131                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9132  1DC5  31A7  279C  319D   	fcall	_CC2500_WriteByte
  9133  1DC8  3001               	movlw	1
  9134  1DC9  0020               	movlb	0	; select bank0
  9135  1DCA  00A4               	movwf	??_CC2500_TxData
  9136  1DCB  0824               	movf	??_CC2500_TxData,w
  9137  1DCC  07A5               	addwf	CC2500_TxData@loop_e,f
  9138  1DCD  2DB6               	goto	l6647
  9139  1DCE                     l292:	
  9140                           
  9141                           ;CC2500_B1.c: 44: }
  9142                           ;CC2500_B1.c: 45: RC4=1;
  9143  1DCE  160E               	bsf	14,4	;volatile
  9144                           
  9145                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9146  1DCF  3035               	movlw	53
  9147  1DD0  31A6  269D  319D   	fcall	_CC2500_WriteCommand
  9148  1DD3                     l293:	
  9149                           ;CC2500_B1.c: 47: while(RB0==0);
  9150                           
  9151  1DD3  0020               	movlb	0	; select bank0
  9152  1DD4  1C0D               	btfss	13,0	;volatile
  9153  1DD5  2DD3               	goto	l293
  9154  1DD6                     l296:	
  9155                           ;CC2500_B1.c: 48: while(RB0==1);
  9156                           
  9157  1DD6  180D               	btfsc	13,0	;volatile
  9158  1DD7  2DD6               	goto	l296
  9159                           
  9160                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9161  1DD8  3036               	movlw	54
  9162  1DD9  31A6  269D  319D   	fcall	_CC2500_WriteCommand
  9163                           
  9164                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9165  1DDC  303B               	movlw	59
  9166  1DDD  31A6  269D         	fcall	_CC2500_WriteCommand
  9167                           
  9168                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9169  1DDF  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9170  1DE0  0008               	return
  9171  1DE1                     __end_of_CC2500_TxData:	
  9172                           
  9173                           	psect	text37
  9174  121D                     __ptext37:	
  9175 ;; *************** function _CC2500_RxData *****************
  9176 ;; Defined at:
  9177 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;		None               void
  9184 ;; Registers used:
  9185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;Total ram usage:        2 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    6
  9198 ;; This function calls:
  9199 ;;		_CC2500_ReadByte
  9200 ;;		_CC2500_ReadStatus
  9201 ;;		_CC2500_WriteByte
  9202 ;;		_CC2500_WriteCommand
  9203 ;;		_setRF_RxStatus
  9204 ;; This function is called by:
  9205 ;;		_setRF_Main
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function _CC2500_RxData
  9211  121D                     _CC2500_RxData:	
  9212                           
  9213                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9214                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9218  121D  0020               	movlb	0	; select bank0
  9219  121E  180D               	btfsc	13,0	;volatile
  9220  121F                     l303:	
  9221                           ;CC2500_B1.c: 63: {
  9222                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9223                           
  9224  121F  180D               	btfsc	13,0	;volatile
  9225  1220  2A1F               	goto	l303
  9226                           
  9227                           ;CC2500_B1.c: 65: }
  9228                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9229  1221  303B               	movlw	59
  9230  1222  3198  2090  3192   	fcall	_CC2500_ReadStatus
  9231                           
  9232                           ;CC2500_B1.c: 67: if(s_data != 0)
  9233  1225  0021               	movlb	1	; select bank1
  9234  1226  0843               	movf	_s_data^(0+128),w
  9235  1227  1903               	btfsc	3,2
  9236  1228  2A73               	goto	l8617
  9237                           
  9238                           ;CC2500_B1.c: 69: {
  9239                           ;CC2500_B1.c: 70: RC4=0;
  9240  1229  0020               	movlb	0	; select bank0
  9241  122A  120E               	bcf	14,4	;volatile
  9242                           
  9243                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9244  122B  30FF               	movlw	255
  9245  122C  00A4               	movwf	??_CC2500_RxData
  9246  122D  0824               	movf	??_CC2500_RxData,w
  9247  122E  0021               	movlb	1	; select bank1
  9248  122F  00BF               	movwf	_SPI0Buffer^(0+128)
  9249  1230                     l307:	
  9250                           ;CC2500_B1.c: 72: while(RC2==1);
  9251                           
  9252  1230  0020               	movlb	0	; select bank0
  9253  1231  190E               	btfsc	14,2	;volatile
  9254  1232  2A30               	goto	l307
  9255                           
  9256                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9257  1233  31A7  279C  3192   	fcall	_CC2500_WriteByte
  9258                           
  9259                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9260  1236  3198  20AB  3192   	fcall	_CC2500_ReadByte
  9261                           
  9262                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9263  1239  0021               	movlb	1	; select bank1
  9264  123A  083F               	movf	_SPI0Buffer^(0+128),w
  9265  123B  0020               	movlb	0	; select bank0
  9266  123C  00A4               	movwf	??_CC2500_RxData
  9267  123D  0824               	movf	??_CC2500_RxData,w
  9268  123E  0021               	movlb	1	; select bank1
  9269  123F  00BE               	movwf	_Rx_Length^(0+128)
  9270                           
  9271                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9272  1240  0020               	movlb	0	; select bank0
  9273  1241  01A5               	clrf	CC2500_RxData@loop_f
  9274  1242                     l8603:	
  9275  1242  0021               	movlb	1	; select bank1
  9276  1243  083E               	movf	_Rx_Length^(0+128),w
  9277  1244  0020               	movlb	0	; select bank0
  9278  1245  0225               	subwf	CC2500_RxData@loop_f,w
  9279  1246  1803               	btfsc	3,0
  9280  1247  2A5A               	goto	l8605
  9281                           
  9282                           ;CC2500_B1.c: 78: {
  9283                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9284  1248  3198  20AB  3192   	fcall	_CC2500_ReadByte
  9285                           
  9286                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9287  124B  0021               	movlb	1	; select bank1
  9288  124C  083F               	movf	_SPI0Buffer^(0+128),w
  9289  124D  0020               	movlb	0	; select bank0
  9290  124E  00A4               	movwf	??_CC2500_RxData
  9291  124F  0825               	movf	CC2500_RxData@loop_f,w
  9292  1250  3EA0               	addlw	_RF_Data& (0+255)
  9293  1251  0086               	movwf	6
  9294  1252  0187               	clrf	7
  9295  1253  0824               	movf	??_CC2500_RxData,w
  9296  1254  0081               	movwf	1
  9297  1255  3001               	movlw	1
  9298  1256  00A4               	movwf	??_CC2500_RxData
  9299  1257  0824               	movf	??_CC2500_RxData,w
  9300  1258  07A5               	addwf	CC2500_RxData@loop_f,f
  9301  1259  2A42               	goto	l8603
  9302  125A                     l8605:	
  9303                           
  9304                           ;CC2500_B1.c: 81: }
  9305                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9306  125A  3198  20AB  3192   	fcall	_CC2500_ReadByte
  9307                           
  9308                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9309  125D  0021               	movlb	1	; select bank1
  9310  125E  083F               	movf	_SPI0Buffer^(0+128),w
  9311  125F  0020               	movlb	0	; select bank0
  9312  1260  00A4               	movwf	??_CC2500_RxData
  9313  1261  0824               	movf	??_CC2500_RxData,w
  9314  1262  0021               	movlb	1	; select bank1
  9315  1263  00BD               	movwf	_RSSI^(0+128)
  9316                           
  9317                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9318  1264  3198  20AB  3192   	fcall	_CC2500_ReadByte
  9319                           
  9320                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9321  1267  0021               	movlb	1	; select bank1
  9322  1268  083F               	movf	_SPI0Buffer^(0+128),w
  9323  1269  0020               	movlb	0	; select bank0
  9324  126A  00A4               	movwf	??_CC2500_RxData
  9325  126B  0824               	movf	??_CC2500_RxData,w
  9326  126C  0021               	movlb	1	; select bank1
  9327  126D  00B7               	movwf	_CRC^(0+128)
  9328                           
  9329                           ;CC2500_B1.c: 86: RC4=1;
  9330  126E  0020               	movlb	0	; select bank0
  9331  126F  160E               	bsf	14,4	;volatile
  9332                           
  9333                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9334  1270  0021               	movlb	1	; select bank1
  9335  1271  1BB7               	btfsc	_CRC^(0+128),7
  9336                           
  9337                           ;CC2500_B1.c: 88: Receive_OK=1;
  9338  1272  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9339  1273                     l8617:	
  9340                           
  9341                           ;CC2500_B1.c: 89: }
  9342                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9343  1273  3036               	movlw	54
  9344  1274  31A6  269D  3192   	fcall	_CC2500_WriteCommand
  9345                           
  9346                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9347  1277  303A               	movlw	58
  9348  1278  31A6  269D  3192   	fcall	_CC2500_WriteCommand
  9349                           
  9350                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9351  127B  0020               	movlb	0	; select bank0
  9352  127C  01A2               	clrf	setRF_RxStatus@command
  9353  127D  3001               	movlw	1
  9354  127E  31A6  2654         	fcall	_setRF_RxStatus
  9355  1280  0008               	return
  9356  1281                     __end_of_CC2500_RxData:	
  9357                           
  9358                           	psect	text38
  9359  2654                     __ptext38:	
  9360 ;; *************** function _setRF_RxStatus *****************
  9361 ;; Defined at:
  9362 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  rf              1    wreg     unsigned char 
  9365 ;;  command         1    2[BANK0 ] unsigned char 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  rf              1    3[BANK0 ] unsigned char 
  9368 ;; Return value:  Size  Location     Type
  9369 ;;		None               void
  9370 ;; Registers used:
  9371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9377 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;Total ram usage:        2 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:    5
  9384 ;; This function calls:
  9385 ;;		_RfPointSelect
  9386 ;; This function is called by:
  9387 ;;		_CC2500_RxData
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function _setRF_RxStatus
  9393  2654                     _setRF_RxStatus:	
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9397                           ;setRF_RxStatus@rf stored from wreg
  9398  2654  0020               	movlb	0	; select bank0
  9399  2655  00A3               	movwf	setRF_RxStatus@rf
  9400                           
  9401                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9402  2656  0823               	movf	setRF_RxStatus@rf,w
  9403  2657  31A5  2570         	fcall	_RfPointSelect
  9404                           
  9405                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9406  2659  087B               	movf	_RF,w
  9407  265A  0086               	movwf	6
  9408  265B  0187               	clrf	7
  9409  265C  0020               	movlb	0	; select bank0
  9410  265D  0822               	movf	setRF_RxStatus@command,w
  9411  265E  1181               	bcf	1,3
  9412  265F  1D03               	skipz
  9413  2660  1581               	bsf	1,3
  9414  2661  0008               	return
  9415  2662                     __end_of_setRF_RxStatus:	
  9416                           
  9417                           	psect	text39
  9418  1890                     __ptext39:	
  9419 ;; *************** function _CC2500_ReadStatus *****************
  9420 ;; Defined at:
  9421 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  status_addr     1    wreg     unsigned char 
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9426 ;; Return value:  Size  Location     Type
  9427 ;;		None               void
  9428 ;; Registers used:
  9429 ;;		wreg, status,2, status,0, pclath, cstack
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;Total ram usage:        2 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:    5
  9442 ;; This function calls:
  9443 ;;		_CC2500_ReadByte
  9444 ;;		_CC2500_WriteByte
  9445 ;; This function is called by:
  9446 ;;		_CC2500_RxData
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _CC2500_ReadStatus
  9452  1890                     _CC2500_ReadStatus:	
  9453                           
  9454                           ;incstack = 0
  9455                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9456                           ;CC2500_ReadStatus@status_addr stored from wreg
  9457  1890  0020               	movlb	0	; select bank0
  9458  1891  00A3               	movwf	CC2500_ReadStatus@status_addr
  9459                           
  9460                           ;CC2500_B1.c: 269: RC4=0;
  9461  1892  120E               	bcf	14,4	;volatile
  9462                           
  9463                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9464  1893  0823               	movf	CC2500_ReadStatus@status_addr,w
  9465  1894  3EC0               	addlw	192
  9466  1895  00A2               	movwf	??_CC2500_ReadStatus
  9467  1896  0822               	movf	??_CC2500_ReadStatus,w
  9468  1897  0021               	movlb	1	; select bank1
  9469  1898  00BF               	movwf	_SPI0Buffer^(0+128)
  9470  1899                     l383:	
  9471                           ;CC2500_B1.c: 272: while(RC2==1);
  9472                           
  9473  1899  0020               	movlb	0	; select bank0
  9474  189A  190E               	btfsc	14,2	;volatile
  9475  189B  2899               	goto	l383
  9476                           
  9477                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9478  189C  31A7  279C  3198   	fcall	_CC2500_WriteByte
  9479                           
  9480                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9481  189F  3198  20AB         	fcall	_CC2500_ReadByte
  9482                           
  9483                           ;CC2500_B1.c: 276: RC4=1;
  9484  18A1  0020               	movlb	0	; select bank0
  9485  18A2  160E               	bsf	14,4	;volatile
  9486                           
  9487                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9488  18A3  0021               	movlb	1	; select bank1
  9489  18A4  083F               	movf	_SPI0Buffer^(0+128),w
  9490  18A5  0020               	movlb	0	; select bank0
  9491  18A6  00A2               	movwf	??_CC2500_ReadStatus
  9492  18A7  0822               	movf	??_CC2500_ReadStatus,w
  9493  18A8  0021               	movlb	1	; select bank1
  9494  18A9  00C3               	movwf	_s_data^(0+128)
  9495  18AA  0008               	return
  9496  18AB                     __end_of_CC2500_ReadStatus:	
  9497                           
  9498                           	psect	text40
  9499  18AB                     __ptext40:	
  9500 ;; *************** function _CC2500_ReadByte *****************
  9501 ;; Defined at:
  9502 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, status,0
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        2 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    4
  9523 ;; This function calls:
  9524 ;;		Nothing
  9525 ;; This function is called by:
  9526 ;;		_CC2500_RxData
  9527 ;;		_CC2500_ReadStatus
  9528 ;;		_CC2500_ReadREG
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           
  9533                           ;psect for function _CC2500_ReadByte
  9534  18AB                     _CC2500_ReadByte:	
  9535                           
  9536                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9537                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9538                           
  9539                           ;incstack = 0
  9540                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9541  18AB  0020               	movlb	0	; select bank0
  9542  18AC  01A1               	clrf	CC2500_ReadByte@loop_b
  9543  18AD                     L9:	
  9544  18AD  3008               	movlw	8
  9545  18AE  0221               	subwf	CC2500_ReadByte@loop_b,w
  9546  18AF  1803               	btfsc	3,0
  9547  18B0  0008               	return
  9548                           
  9549                           ;CC2500_B1.c: 214: {
  9550                           ;CC2500_B1.c: 215: RC1=1;
  9551  18B1  148E               	bsf	14,1	;volatile
  9552                           
  9553                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9554  18B2  1003               	clrc
  9555  18B3  0021               	movlb	1	; select bank1
  9556  18B4  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9557                           
  9558                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9559  18B5  0020               	movlb	0	; select bank0
  9560  18B6  1D0E               	btfss	14,2	;volatile
  9561  18B7  28BB               	goto	l6387
  9562                           
  9563                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9564  18B8  0021               	movlb	1	; select bank1
  9565  18B9  143F               	bsf	_SPI0Buffer^(0+128),0
  9566  18BA  28C1               	goto	l6389
  9567  18BB                     l6387:	
  9568                           
  9569                           ;CC2500_B1.c: 219: else
  9570                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9571  18BB  30FE               	movlw	254
  9572  18BC  0020               	movlb	0	; select bank0
  9573  18BD  00A0               	movwf	??_CC2500_ReadByte
  9574  18BE  0820               	movf	??_CC2500_ReadByte,w
  9575  18BF  0021               	movlb	1	; select bank1
  9576  18C0  05BF               	andwf	_SPI0Buffer^(0+128),f
  9577  18C1                     l6389:	
  9578                           
  9579                           ;CC2500_B1.c: 221: RC1=0;
  9580  18C1  0020               	movlb	0	; select bank0
  9581  18C2  108E               	bcf	14,1	;volatile
  9582  18C3  3001               	movlw	1
  9583  18C4  00A0               	movwf	??_CC2500_ReadByte
  9584  18C5  0820               	movf	??_CC2500_ReadByte,w
  9585  18C6  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9586  18C7  28AD               	goto	L9
  9587  18C8                     __end_of_CC2500_ReadByte:	
  9588                           
  9589                           	psect	text41
  9590  24D2                     __ptext41:	
  9591 ;; *************** function _RF_Initialization *****************
  9592 ;; Defined at:
  9593 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;		None
  9598 ;; Return value:  Size  Location     Type
  9599 ;;		None               void
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0, pclath, cstack
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;Total ram usage:        0 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    5
  9614 ;; This function calls:
  9615 ;;		_setRF_Initialization
  9616 ;; This function is called by:
  9617 ;;		_main
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           
  9622                           ;psect for function _RF_Initialization
  9623  24D2                     _RF_Initialization:	
  9624                           
  9625                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9626                           
  9627                           ;incstack = 0
  9628                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9629  24D2  3001               	movlw	1
  9630  24D3  31A5  2518         	fcall	_setRF_Initialization
  9631  24D5  0008               	return
  9632  24D6                     __end_of_RF_Initialization:	
  9633                           
  9634                           	psect	text42
  9635  2518                     __ptext42:	
  9636 ;; *************** function _setRF_Initialization *****************
  9637 ;; Defined at:
  9638 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;  rf              1    wreg     unsigned char 
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;  rf              1    0[COMMON] unsigned char 
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;Total ram usage:        1 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    4
  9659 ;; This function calls:
  9660 ;;		Nothing
  9661 ;; This function is called by:
  9662 ;;		_RF_Initialization
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           
  9667                           ;psect for function _setRF_Initialization
  9668  2518                     _setRF_Initialization:	
  9669                           
  9670                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9671                           
  9672                           ;incstack = 0
  9673                           ; Regs used in _setRF_Initialization: [wreg]
  9674  2518  3015               	movlw	21
  9675  2519  0020               	movlb	0	; select bank0
  9676  251A  00A0               	movwf	??_setRF_Initialization
  9677  251B  0820               	movf	??_setRF_Initialization,w
  9678  251C  0021               	movlb	1	; select bank1
  9679  251D  00C0               	movwf	_Tx_Length^(0+128)
  9680  251E  0008               	return
  9681  251F                     __end_of_setRF_Initialization:	
  9682                           
  9683                           	psect	text43
  9684  24B8                     __ptext43:	
  9685 ;; *************** function _PowerFault_Main *****************
  9686 ;; Defined at:
  9687 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;		None               void
  9694 ;; Registers used:
  9695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;Total ram usage:        0 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:   10
  9708 ;; This function calls:
  9709 ;;		_setPowerFault_Main
  9710 ;; This function is called by:
  9711 ;;		_main
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           
  9716                           ;psect for function _PowerFault_Main
  9717  24B8                     _PowerFault_Main:	
  9718                           
  9719                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9720                           
  9721                           ;incstack = 0
  9722                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9723  24B8  318B  23FE         	fcall	_setPowerFault_Main
  9724  24BA  0008               	return
  9725  24BB                     __end_of_PowerFault_Main:	
  9726                           
  9727                           	psect	text44
  9728  0BFE                     __ptext44:	
  9729 ;; *************** function _setPowerFault_Main *****************
  9730 ;; Defined at:
  9731 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;		None
  9736 ;; Return value:  Size  Location     Type
  9737 ;;		None               void
  9738 ;; Registers used:
  9739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;Total ram usage:        2 bytes
  9750 ;; Hardware stack levels used:    1
  9751 ;; Hardware stack levels required when called:    9
  9752 ;; This function calls:
  9753 ;;		_getLoad_Safe
  9754 ;;		_getTemp_Safe
  9755 ;;		_setPowerFault_Exceptions
  9756 ;; This function is called by:
  9757 ;;		_PowerFault_Main
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function _setPowerFault_Main
  9763  0BFE                     _setPowerFault_Main:	
  9764                           
  9765                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9769  0BFE  087A               	movf	_PF,w
  9770  0BFF  0086               	movwf	6
  9771  0C00  0187               	clrf	7
  9772  0C01  1C01               	btfss	1,0
  9773  0C02  0008               	return
  9774                           
  9775                           ;PowerFault_B1.c: 64: {
  9776                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9777  0C03  087A               	movf	_PF,w
  9778  0C04  0086               	movwf	6
  9779  0C05  0187               	clrf	7
  9780  0C06  1981               	btfsc	1,3
  9781  0C07  2C46               	goto	l9111
  9782                           
  9783                           ;PowerFault_B1.c: 66: {
  9784                           ;PowerFault_B1.c: 67: PF->Time++;
  9785  0C08  087A               	movf	_PF,w
  9786  0C09  3E06               	addlw	6
  9787  0C0A  0086               	movwf	6
  9788  0C0B  0187               	clrf	7
  9789  0C0C  3001               	movlw	1
  9790  0C0D  0781               	addwf	1,f
  9791  0C0E  3141               	addfsr 1,1
  9792  0C0F  1803               	skipnc
  9793  0C10  0A81               	incf	1,f
  9794                           
  9795                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9796  0C11  087A               	movf	_PF,w
  9797  0C12  3E06               	addlw	6
  9798  0C13  0086               	movwf	6
  9799  0C14  0187               	clrf	7
  9800  0C15  3F40               	moviw [0]fsr1
  9801  0C16  0020               	movlb	0	; select bank0
  9802  0C17  00AD               	movwf	??_setPowerFault_Main
  9803  0C18  3F41               	moviw [1]fsr1
  9804  0C19  00AE               	movwf	??_setPowerFault_Main+1
  9805  0C1A  3002               	movlw	2
  9806  0C1B  022E               	subwf	??_setPowerFault_Main+1,w
  9807  0C1C  30BC               	movlw	188
  9808  0C1D  1903               	skipnz
  9809  0C1E  022D               	subwf	??_setPowerFault_Main,w
  9810  0C1F  1C03               	skipc
  9811  0C20  0008               	return
  9812                           
  9813                           ;PowerFault_B1.c: 69: {
  9814                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9815  0C21  31A5  2591  318B   	fcall	_getLoad_Safe
  9816  0C24  3A00               	xorlw	0
  9817  0C25  1903               	skipnz
  9818  0C26  2C3D               	goto	l9109
  9819  0C27  31A5  250A  318B   	fcall	_getTemp_Safe
  9820  0C2A  3A00               	xorlw	0
  9821  0C2B  1903               	skipnz
  9822  0C2C  2C3D               	goto	l9109
  9823                           
  9824                           ;PowerFault_B1.c: 71: {
  9825                           ;PowerFault_B1.c: 72: PF->Time=0;
  9826  0C2D  087A               	movf	_PF,w
  9827  0C2E  3E06               	addlw	6
  9828  0C2F  0086               	movwf	6
  9829  0C30  0187               	clrf	7
  9830  0C31  3000               	movlw	0
  9831  0C32  3FC0               	movwi [0]fsr1
  9832  0C33  3FC1               	movwi [1]fsr1
  9833                           
  9834                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9835  0C34  087A               	movf	_PF,w
  9836  0C35  0086               	movwf	6
  9837  0C36  0187               	clrf	7
  9838  0C37  1581               	bsf	1,3
  9839                           
  9840                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9841  0C38  087A               	movf	_PF,w
  9842  0C39  0086               	movwf	6
  9843  0C3A  0187               	clrf	7
  9844  0C3B  1101               	bcf	1,2
  9845                           
  9846                           ;PowerFault_B1.c: 75: }
  9847  0C3C  0008               	return
  9848  0C3D                     l9109:	
  9849                           
  9850                           ;PowerFault_B1.c: 76: else
  9851                           ;PowerFault_B1.c: 77: {
  9852                           ;PowerFault_B1.c: 78: PF->Time=700;
  9853  0C3D  087A               	movf	_PF,w
  9854  0C3E  3E06               	addlw	6
  9855  0C3F  0086               	movwf	6
  9856  0C40  0187               	clrf	7
  9857  0C41  30BC               	movlw	188
  9858  0C42  3FC0               	movwi [0]fsr1
  9859  0C43  3002               	movlw	2
  9860  0C44  3FC1               	movwi [1]fsr1
  9861                           
  9862                           ;PowerFault_B1.c: 79: }
  9863                           ;PowerFault_B1.c: 80: }
  9864                           ;PowerFault_B1.c: 81: }
  9865  0C45  0008               	return
  9866  0C46                     l9111:	
  9867                           
  9868                           ;PowerFault_B1.c: 82: else
  9869                           ;PowerFault_B1.c: 83: {
  9870                           ;PowerFault_B1.c: 84: PF->Time++;
  9871  0C46  087A               	movf	_PF,w
  9872  0C47  3E06               	addlw	6
  9873  0C48  0086               	movwf	6
  9874  0C49  0187               	clrf	7
  9875  0C4A  3001               	movlw	1
  9876  0C4B  0781               	addwf	1,f
  9877  0C4C  3141               	addfsr 1,1
  9878  0C4D  1803               	skipnc
  9879  0C4E  0A81               	incf	1,f
  9880                           
  9881                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9882  0C4F  087A               	movf	_PF,w
  9883  0C50  3E06               	addlw	6
  9884  0C51  0086               	movwf	6
  9885  0C52  0187               	clrf	7
  9886  0C53  3F40               	moviw [0]fsr1
  9887  0C54  0020               	movlb	0	; select bank0
  9888  0C55  00AD               	movwf	??_setPowerFault_Main
  9889  0C56  3F41               	moviw [1]fsr1
  9890  0C57  00AE               	movwf	??_setPowerFault_Main+1
  9891  0C58  3000               	movlw	0
  9892  0C59  022E               	subwf	??_setPowerFault_Main+1,w
  9893  0C5A  3002               	movlw	2
  9894  0C5B  1903               	skipnz
  9895  0C5C  022D               	subwf	??_setPowerFault_Main,w
  9896  0C5D  1C03               	skipc
  9897  0C5E  0008               	return
  9898                           
  9899                           ;PowerFault_B1.c: 86: {
  9900                           ;PowerFault_B1.c: 87: PF->Time=0;
  9901  0C5F  087A               	movf	_PF,w
  9902  0C60  3E06               	addlw	6
  9903  0C61  0086               	movwf	6
  9904  0C62  0187               	clrf	7
  9905  0C63  3000               	movlw	0
  9906  0C64  3FC0               	movwi [0]fsr1
  9907  0C65  3FC1               	movwi [1]fsr1
  9908                           
  9909                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9910  0C66  087A               	movf	_PF,w
  9911  0C67  0086               	movwf	6
  9912  0C68  0187               	clrf	7
  9913  0C69  1181               	bcf	1,3
  9914                           
  9915                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9916  0C6A  087A               	movf	_PF,w
  9917  0C6B  0086               	movwf	6
  9918  0C6C  0187               	clrf	7
  9919  0C6D  1C81               	btfss	1,1
  9920  0C6E  2CA5               	goto	l9131
  9921                           
  9922                           ;PowerFault_B1.c: 91: {
  9923                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9924  0C6F  0A7A               	incf	_PF,w
  9925  0C70  0086               	movwf	6
  9926  0C71  0187               	clrf	7
  9927  0C72  3F40               	moviw [0]fsr1
  9928  0C73  00AD               	movwf	??_setPowerFault_Main
  9929  0C74  3F41               	moviw [1]fsr1
  9930  0C75  00AE               	movwf	??_setPowerFault_Main+1
  9931  0C76  3001               	movlw	1
  9932  0C77  022E               	subwf	??_setPowerFault_Main+1,w
  9933  0C78  3091               	movlw	145
  9934  0C79  1903               	skipnz
  9935  0C7A  022D               	subwf	??_setPowerFault_Main,w
  9936  0C7B  1803               	skipnc
  9937  0C7C  2CDC               	goto	l9143
  9938  0C7D  0A7A               	incf	_PF,w
  9939  0C7E  0086               	movwf	6
  9940  0C7F  0187               	clrf	7
  9941  0C80  3F40               	moviw [0]fsr1
  9942  0C81  00AD               	movwf	??_setPowerFault_Main
  9943  0C82  3F41               	moviw [1]fsr1
  9944  0C83  00AE               	movwf	??_setPowerFault_Main+1
  9945  0C84  3000               	movlw	0
  9946  0C85  022E               	subwf	??_setPowerFault_Main+1,w
  9947  0C86  30C8               	movlw	200
  9948  0C87  1903               	skipnz
  9949  0C88  022D               	subwf	??_setPowerFault_Main,w
  9950  0C89  1C03               	skipc
  9951  0C8A  2CDC               	goto	l9143
  9952                           
  9953                           ;PowerFault_B1.c: 93: {
  9954                           ;PowerFault_B1.c: 94: PF->Count++;
  9955  0C8B  3001               	movlw	1
  9956  0C8C  00AD               	movwf	??_setPowerFault_Main
  9957  0C8D  087A               	movf	_PF,w
  9958  0C8E  3E05               	addlw	5
  9959  0C8F  0086               	movwf	6
  9960  0C90  0187               	clrf	7
  9961  0C91  082D               	movf	??_setPowerFault_Main,w
  9962  0C92  0781               	addwf	1,f
  9963                           
  9964                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9965  0C93  087A               	movf	_PF,w
  9966  0C94  3E05               	addlw	5
  9967  0C95  0086               	movwf	6
  9968  0C96  0187               	clrf	7
  9969  0C97  3002               	movlw	2
  9970  0C98  0201               	subwf	1,w
  9971  0C99  1C03               	skipc
  9972  0C9A  2CE1               	goto	l9145
  9973                           
  9974                           ;PowerFault_B1.c: 96: {
  9975                           ;PowerFault_B1.c: 97: PF->Count=0;
  9976  0C9B  087A               	movf	_PF,w
  9977  0C9C  3E05               	addlw	5
  9978  0C9D  0086               	movwf	6
  9979  0C9E  0187               	clrf	7
  9980  0C9F  0181               	clrf	1
  9981                           
  9982                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9983  0CA0  3000               	movlw	0
  9984  0CA1  319C  249A  318B   	fcall	_setPowerFault_Exceptions
  9985                           
  9986                           ;PowerFault_B1.c: 99: }
  9987                           ;PowerFault_B1.c: 100: }
  9988  0CA4  2CE1               	goto	l9145
  9989  0CA5                     l9131:	
  9990                           ;PowerFault_B1.c: 104: }
  9991                           ;PowerFault_B1.c: 105: }
  9992                           
  9993                           ;PowerFault_B1.c: 101: else
  9994                           ;PowerFault_B1.c: 102: {
  9995                           ;PowerFault_B1.c: 103: PF->Count=0;
  9996                           
  9997                           
  9998                           ;PowerFault_B1.c: 106: else
  9999                           ;PowerFault_B1.c: 107: {
 10000                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10001  0CA5  0A7A               	incf	_PF,w
 10002  0CA6  0086               	movwf	6
 10003  0CA7  0187               	clrf	7
 10004  0CA8  3F40               	moviw [0]fsr1
 10005  0CA9  0020               	movlb	0	; select bank0
 10006  0CAA  00AD               	movwf	??_setPowerFault_Main
 10007  0CAB  3F41               	moviw [1]fsr1
 10008  0CAC  00AE               	movwf	??_setPowerFault_Main+1
 10009  0CAD  3001               	movlw	1
 10010  0CAE  022E               	subwf	??_setPowerFault_Main+1,w
 10011  0CAF  3090               	movlw	144
 10012  0CB0  1903               	skipnz
 10013  0CB1  022D               	subwf	??_setPowerFault_Main,w
 10014  0CB2  1803               	skipnc
 10015  0CB3  2CC2               	goto	l9135
 10016  0CB4  0A7A               	incf	_PF,w
 10017  0CB5  0086               	movwf	6
 10018  0CB6  0187               	clrf	7
 10019  0CB7  3F40               	moviw [0]fsr1
 10020  0CB8  00AD               	movwf	??_setPowerFault_Main
 10021  0CB9  3F41               	moviw [1]fsr1
 10022  0CBA  00AE               	movwf	??_setPowerFault_Main+1
 10023  0CBB  3000               	movlw	0
 10024  0CBC  022E               	subwf	??_setPowerFault_Main+1,w
 10025  0CBD  30D3               	movlw	211
 10026  0CBE  1903               	skipnz
 10027  0CBF  022D               	subwf	??_setPowerFault_Main,w
 10028  0CC0  1803               	skipnc
 10029  0CC1  2CDC               	goto	l9143
 10030  0CC2                     l9135:	
 10031                           
 10032                           ;PowerFault_B1.c: 109: {
 10033                           ;PowerFault_B1.c: 110: PF->Count++;
 10034  0CC2  3001               	movlw	1
 10035  0CC3  00AD               	movwf	??_setPowerFault_Main
 10036  0CC4  087A               	movf	_PF,w
 10037  0CC5  3E05               	addlw	5
 10038  0CC6  0086               	movwf	6
 10039  0CC7  0187               	clrf	7
 10040  0CC8  082D               	movf	??_setPowerFault_Main,w
 10041  0CC9  0781               	addwf	1,f
 10042                           
 10043                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10044  0CCA  087A               	movf	_PF,w
 10045  0CCB  3E05               	addlw	5
 10046  0CCC  0086               	movwf	6
 10047  0CCD  0187               	clrf	7
 10048  0CCE  3002               	movlw	2
 10049  0CCF  0201               	subwf	1,w
 10050  0CD0  1C03               	skipc
 10051  0CD1  2CE1               	goto	l9145
 10052                           
 10053                           ;PowerFault_B1.c: 112: {
 10054                           ;PowerFault_B1.c: 113: PF->Count=0;
 10055  0CD2  087A               	movf	_PF,w
 10056  0CD3  3E05               	addlw	5
 10057  0CD4  0086               	movwf	6
 10058  0CD5  0187               	clrf	7
 10059  0CD6  0181               	clrf	1
 10060                           
 10061                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10062  0CD7  3001               	movlw	1
 10063  0CD8  319C  249A  318B   	fcall	_setPowerFault_Exceptions
 10064                           
 10065                           ;PowerFault_B1.c: 115: }
 10066                           ;PowerFault_B1.c: 116: }
 10067  0CDB  2CE1               	goto	l9145
 10068  0CDC                     l9143:	
 10069                           
 10070                           ;PowerFault_B1.c: 117: else
 10071                           ;PowerFault_B1.c: 118: {
 10072                           ;PowerFault_B1.c: 119: PF->Count=0;
 10073  0CDC  087A               	movf	_PF,w
 10074  0CDD  3E05               	addlw	5
 10075  0CDE  0086               	movwf	6
 10076  0CDF  0187               	clrf	7
 10077  0CE0  0181               	clrf	1
 10078  0CE1                     l9145:	
 10079                           
 10080                           ;PowerFault_B1.c: 120: }
 10081                           ;PowerFault_B1.c: 122: }
 10082                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10083  0CE1  087A               	movf	_PF,w
 10084  0CE2  0086               	movwf	6
 10085  0CE3  0187               	clrf	7
 10086  0CE4  1881               	btfsc	1,1
 10087  0CE5  2CEA               	goto	l2314
 10088                           
 10089                           ;PowerFault_B1.c: 124: {
 10090                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10091  0CE6  087A               	movf	_PF,w
 10092  0CE7  0086               	movwf	6
 10093  0CE8  0187               	clrf	7
 10094  0CE9  1501               	bsf	1,2
 10095  0CEA                     l2314:	
 10096                           
 10097                           ;PowerFault_B1.c: 126: }
 10098                           ;PowerFault_B1.c: 127: PF->AD=0;
 10099  0CEA  0A7A               	incf	_PF,w
 10100  0CEB  0086               	movwf	6
 10101  0CEC  0187               	clrf	7
 10102  0CED  3000               	movlw	0
 10103  0CEE  3FC0               	movwi [0]fsr1
 10104  0CEF  3FC1               	movwi [1]fsr1
 10105  0CF0  0008               	return
 10106  0CF1                     __end_of_setPowerFault_Main:	
 10107                           
 10108                           	psect	text45
 10109  1C9A                     __ptext45:	
 10110 ;; *************** function _setPowerFault_Exceptions *****************
 10111 ;; Defined at:
 10112 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  command         1    wreg     unsigned char 
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;  command         1   12[BANK0 ] unsigned char 
 10117 ;; Return value:  Size  Location     Type
 10118 ;;		None               void
 10119 ;; Registers used:
 10120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;Total ram usage:        2 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    8
 10133 ;; This function calls:
 10134 ;;		_DimmerLights_Exceptions
 10135 ;;		_setLED
 10136 ;;		_setRF_Enable
 10137 ;;		_setSw_Enable
 10138 ;; This function is called by:
 10139 ;;		_setPowerFault_Main
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _setPowerFault_Exceptions
 10145  1C9A                     _setPowerFault_Exceptions:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10149                           ;setPowerFault_Exceptions@command stored from wreg
 10150  1C9A  0020               	movlb	0	; select bank0
 10151  1C9B  00AC               	movwf	setPowerFault_Exceptions@command
 10152                           
 10153                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10154  1C9C  087A               	movf	_PF,w
 10155  1C9D  0086               	movwf	6
 10156  1C9E  0187               	clrf	7
 10157  1C9F  082C               	movf	setPowerFault_Exceptions@command,w
 10158  1CA0  1081               	bcf	1,1
 10159  1CA1  1D03               	skipz
 10160  1CA2  1481               	bsf	1,1
 10161                           
 10162                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10163  1CA3  092C               	comf	setPowerFault_Exceptions@command,w
 10164  1CA4  3901               	andlw	1
 10165  1CA5  00AB               	movwf	??_setPowerFault_Exceptions
 10166  1CA6  087A               	movf	_PF,w
 10167  1CA7  0086               	movwf	6
 10168  1CA8  0187               	clrf	7
 10169  1CA9  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10170  1CAA  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10171  1CAB  0801               	movf	1,w
 10172  1CAC  062B               	xorwf	??_setPowerFault_Exceptions,w
 10173  1CAD  39FB               	andlw	-5
 10174  1CAE  062B               	xorwf	??_setPowerFault_Exceptions,w
 10175  1CAF  0081               	movwf	1
 10176                           
 10177                           ;PowerFault_B1.c: 137: if(command == 1)
 10178  1CB0  082C               	movf	setPowerFault_Exceptions@command,w
 10179  1CB1  3A01               	xorlw	1
 10180  1CB2  1D03               	skipz
 10181  1CB3  2CBF               	goto	l2318
 10182                           
 10183                           ;PowerFault_B1.c: 138: {
 10184                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10185  1CB4  3003               	movlw	3
 10186  1CB5  3190  204D  319C   	fcall	_DimmerLights_Exceptions
 10187                           
 10188                           ;PowerFault_B1.c: 141: setLED(2,1);
 10189  1CB8  0020               	movlb	0	; select bank0
 10190  1CB9  01A2               	clrf	setLED@command
 10191  1CBA  0AA2               	incf	setLED@command,f
 10192  1CBB  3002               	movlw	2
 10193  1CBC  3191  215E  319C   	fcall	_setLED
 10194  1CBF                     l2318:	
 10195                           
 10196                           ;PowerFault_B1.c: 143: }
 10197                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10198  1CBF  0020               	movlb	0	; select bank0
 10199  1CC0  082C               	movf	setPowerFault_Exceptions@command,w
 10200  1CC1  3E0A               	addlw	10
 10201  1CC2  00AB               	movwf	??_setPowerFault_Exceptions
 10202  1CC3  082B               	movf	??_setPowerFault_Exceptions,w
 10203  1CC4  00A2               	movwf	setLED@command
 10204  1CC5  3063               	movlw	99
 10205  1CC6  3191  215E  319C   	fcall	_setLED
 10206                           
 10207                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10208  1CC9  0020               	movlb	0	; select bank0
 10209  1CCA  092C               	comf	setPowerFault_Exceptions@command,w
 10210  1CCB  3901               	andlw	1
 10211  1CCC  3198  2066  319C   	fcall	_setSw_Enable
 10212                           
 10213                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10214  1CCF  0020               	movlb	0	; select bank0
 10215  1CD0  092C               	comf	setPowerFault_Exceptions@command,w
 10216  1CD1  3901               	andlw	1
 10217  1CD2  00AB               	movwf	??_setPowerFault_Exceptions
 10218  1CD3  082B               	movf	??_setPowerFault_Exceptions,w
 10219  1CD4  00A2               	movwf	setRF_Enable@command
 10220  1CD5  3001               	movlw	1
 10221  1CD6  319A  2222         	fcall	_setRF_Enable
 10222  1CD8  0008               	return
 10223  1CD9                     __end_of_setPowerFault_Exceptions:	
 10224                           
 10225                           	psect	text46
 10226  2591                     __ptext46:	
 10227 ;; *************** function _getLoad_Safe *****************
 10228 ;; Defined at:
 10229 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;		None
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;		None
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  1    wreg      unsigned char 
 10236 ;; Registers used:
 10237 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;Total ram usage:        1 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    4
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_setTemp_Main
 10254 ;;		_setPowerFault_Main
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           
 10259                           ;psect for function _getLoad_Safe
 10260  2591                     _getLoad_Safe:	
 10261                           
 10262                           ;OverLoad_B1.c: 341: return Load->Safe;
 10263                           
 10264                           ;incstack = 0
 10265                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10266  2591  0020               	movlb	0	; select bank0
 10267  2592  086E               	movf	_Load,w
 10268  2593  0086               	movwf	6
 10269  2594  3002               	movlw	2	; select bank4/5
 10270  2595  0087               	movwf	7
 10271  2596  0C01               	rrf	1,w
 10272  2597  00A0               	movwf	??_getLoad_Safe
 10273  2598  0CA0               	rrf	??_getLoad_Safe,f
 10274  2599  0C20               	rrf	??_getLoad_Safe,w
 10275  259A  3901               	andlw	1
 10276  259B  0008               	return
 10277  259C                     __end_of_getLoad_Safe:	
 10278                           
 10279                           	psect	text47
 10280  24B5                     __ptext47:	
 10281 ;; *************** function _PowerFault_Initialization *****************
 10282 ;; Defined at:
 10283 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;		None
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;		None
 10288 ;; Return value:  Size  Location     Type
 10289 ;;		None               void
 10290 ;; Registers used:
 10291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;Total ram usage:        0 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    5
 10304 ;; This function calls:
 10305 ;;		_setPowerFault_Initialization
 10306 ;; This function is called by:
 10307 ;;		_main
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           
 10312                           ;psect for function _PowerFault_Initialization
 10313  24B5                     _PowerFault_Initialization:	
 10314                           
 10315                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10316                           
 10317                           ;incstack = 0
 10318                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10319  24B5  31A6  2646         	fcall	_setPowerFault_Initialization
 10320  24B7  0008               	return
 10321  24B8                     __end_of_PowerFault_Initialization:	
 10322                           
 10323                           	psect	text48
 10324  2646                     __ptext48:	
 10325 ;; *************** function _setPowerFault_Initialization *****************
 10326 ;; Defined at:
 10327 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;		None               void
 10334 ;; Registers used:
 10335 ;;		wreg, fsr1l, fsr1h
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;Total ram usage:        1 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    4
 10348 ;; This function calls:
 10349 ;;		Nothing
 10350 ;; This function is called by:
 10351 ;;		_PowerFault_Initialization
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _setPowerFault_Initialization
 10357  2646                     _setPowerFault_Initialization:	
 10358                           
 10359                           ;PowerFault_B1.c: 31: PF=&PF1;
 10360                           
 10361                           ;incstack = 0
 10362                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10363  2646  30CD               	movlw	_PF1& (0+255)
 10364  2647  0020               	movlb	0	; select bank0
 10365  2648  00A0               	movwf	??_setPowerFault_Initialization
 10366  2649  0820               	movf	??_setPowerFault_Initialization,w
 10367  264A  00FA               	movwf	_PF
 10368                           
 10369                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10370  264B  087A               	movf	_PF,w
 10371  264C  0086               	movwf	6
 10372  264D  0187               	clrf	7
 10373  264E  1401               	bsf	1,0
 10374                           
 10375                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10376  264F  087A               	movf	_PF,w
 10377  2650  0086               	movwf	6
 10378  2651  0187               	clrf	7
 10379  2652  1501               	bsf	1,2
 10380  2653  0008               	return
 10381  2654                     __end_of_setPowerFault_Initialization:	
 10382                           
 10383                           	psect	text49
 10384  2784                     __ptext49:	
 10385 ;; *************** function _Mcu_Initialization *****************
 10386 ;; Defined at:
 10387 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;		None
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;		None
 10392 ;; Return value:  Size  Location     Type
 10393 ;;		None               void
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0, pclath, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/0
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;Total ram usage:        1 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    5
 10408 ;; This function calls:
 10409 ;;		_ADC_Set
 10410 ;;		_INT_Set
 10411 ;;		_IOC_Set
 10412 ;;		_IO_Set
 10413 ;;		_TMR0_Set
 10414 ;; This function is called by:
 10415 ;;		_main
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           
 10420                           ;psect for function _Mcu_Initialization
 10421  2784                     _Mcu_Initialization:	
 10422                           
 10423                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10427  2784  3078               	movlw	120
 10428  2785  0021               	movlb	1	; select bank1
 10429  2786  0099               	movwf	25	;volatile
 10430                           
 10431                           ;MCU_B1.c: 29: IO_Set();
 10432  2787  31A7  27E7  31A7   	fcall	_IO_Set
 10433                           
 10434                           ;MCU_B1.c: 31: TMR0_Set();
 10435  278A  31A6  2639  31A7   	fcall	_TMR0_Set
 10436                           
 10437                           ;MCU_B1.c: 33: ;;
 10438                           ;MCU_B1.c: 35: ADC_Set();
 10439  278D  31A5  2511  31A7   	fcall	_ADC_Set
 10440                           
 10441                           ;MCU_B1.c: 39: INT_Set();
 10442  2790  31A4  24E3  31A7   	fcall	_INT_Set
 10443                           
 10444                           ;MCU_B1.c: 41: IOC_Set();
 10445  2793  31A6  262C         	fcall	_IOC_Set
 10446                           
 10447                           ;MCU_B1.c: 43: ;;
 10448                           ;MCU_B1.c: 45: ;;
 10449                           ;MCU_B1.c: 47: Memory=&VarMemory;
 10450  2795  30A0               	movlw	_VarMemory& (0+255)
 10451  2796  0020               	movlb	0	; select bank0
 10452  2797  00A1               	movwf	??_Mcu_Initialization
 10453  2798  0821               	movf	??_Mcu_Initialization,w
 10454  2799  0021               	movlb	1	; select bank1
 10455  279A  00ED               	movwf	_Memory^(0+128)
 10456  279B  0008               	return
 10457  279C                     __end_of_Mcu_Initialization:	
 10458                           
 10459                           	psect	text50
 10460  2639                     __ptext50:	
 10461 ;; *************** function _TMR0_Set *****************
 10462 ;; Defined at:
 10463 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;		None
 10468 ;; Return value:  Size  Location     Type
 10469 ;;		None               void
 10470 ;; Registers used:
 10471 ;;		wreg, status,2
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;Total ram usage:        1 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    4
 10484 ;; This function calls:
 10485 ;;		Nothing
 10486 ;; This function is called by:
 10487 ;;		_Mcu_Initialization
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           
 10492                           ;psect for function _TMR0_Set
 10493  2639                     _TMR0_Set:	
 10494                           
 10495                           ;MCU_B1.c: 116: Timer0=&VarTimer0;
 10496                           
 10497                           ;incstack = 0
 10498                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10499  2639  30C4               	movlw	_VarTimer0& (0+255)
 10500  263A  0020               	movlb	0	; select bank0
 10501  263B  00A0               	movwf	??_TMR0_Set
 10502  263C  0820               	movf	??_TMR0_Set,w
 10503  263D  0021               	movlb	1	; select bank1
 10504  263E  00EE               	movwf	_Timer0^(0+128)
 10505                           
 10506                           ;MCU_B1.c: 117: OPTION_REG=0x00;
 10507  263F  0195               	clrf	21	;volatile
 10508                           
 10509                           ;MCU_B1.c: 118: TMR0=(256-90);
 10510  2640  30A6               	movlw	166
 10511  2641  0020               	movlb	0	; select bank0
 10512  2642  0095               	movwf	21	;volatile
 10513                           
 10514                           ;MCU_B1.c: 119: TMR0IE=1;
 10515  2643  168B               	bsf	11,5	;volatile
 10516                           
 10517                           ;MCU_B1.c: 120: GIE=1;
 10518  2644  178B               	bsf	11,7	;volatile
 10519  2645  0008               	return
 10520  2646                     __end_of_TMR0_Set:	
 10521                           
 10522                           	psect	text51
 10523  27E7                     __ptext51:	
 10524 ;; *************** function _IO_Set *****************
 10525 ;; Defined at:
 10526 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;		None               void
 10533 ;; Registers used:
 10534 ;;		wreg, status,2
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;Total ram usage:        0 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    4
 10547 ;; This function calls:
 10548 ;;		Nothing
 10549 ;; This function is called by:
 10550 ;;		_Mcu_Initialization
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _IO_Set
 10556  27E7                     _IO_Set:	
 10557                           
 10558                           ;MCU_B1.c: 79: TRISA=0b01110111;;
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _IO_Set: [wreg+status,2]
 10562  27E7  3077               	movlw	119
 10563  27E8  0021               	movlb	1	; select bank1
 10564  27E9  008C               	movwf	12	;volatile
 10565                           
 10566                           ;MCU_B1.c: 80: TRISB=0b00000111;;
 10567  27EA  3007               	movlw	7
 10568  27EB  008D               	movwf	13	;volatile
 10569                           
 10570                           ;MCU_B1.c: 81: TRISC=0b00001100;;
 10571  27EC  300C               	movlw	12
 10572  27ED  008E               	movwf	14	;volatile
 10573                           
 10574                           ;MCU_B1.c: 82: LATA=0b00000000;;
 10575  27EE  0022               	movlb	2	; select bank2
 10576  27EF  018C               	clrf	12	;volatile
 10577                           
 10578                           ;MCU_B1.c: 83: LATB=0b00000010;;
 10579  27F0  3002               	movlw	2
 10580  27F1  008D               	movwf	13	;volatile
 10581                           
 10582                           ;MCU_B1.c: 84: LATC=0b00000000;;
 10583  27F2  018E               	clrf	14	;volatile
 10584                           
 10585                           ;MCU_B1.c: 85: ANSELA=0b00100010;;
 10586  27F3  3022               	movlw	34
 10587  27F4  0023               	movlb	3	; select bank3
 10588  27F5  008C               	movwf	12	;volatile
 10589                           
 10590                           ;MCU_B1.c: 86: ANSELB=0b00000000;;
 10591  27F6  018D               	clrf	13	;volatile
 10592                           
 10593                           ;MCU_B1.c: 87: ANSELC=0b00000000;;
 10594  27F7  018E               	clrf	14	;volatile
 10595                           
 10596                           ;MCU_B1.c: 88: PORTA=0b01110111;;
 10597  27F8  3077               	movlw	119
 10598  27F9  0020               	movlb	0	; select bank0
 10599  27FA  008C               	movwf	12	;volatile
 10600                           
 10601                           ;MCU_B1.c: 89: PORTB=0b00000111;;
 10602  27FB  3007               	movlw	7
 10603  27FC  008D               	movwf	13	;volatile
 10604                           
 10605                           ;MCU_B1.c: 90: PORTC=0b00001100;;
 10606  27FD  300C               	movlw	12
 10607  27FE  008E               	movwf	14	;volatile
 10608  27FF  0008               	return
 10609  2800                     __end_of_IO_Set:	
 10610                           
 10611                           	psect	text52
 10612  262C                     __ptext52:	
 10613 ;; *************** function _IOC_Set *****************
 10614 ;; Defined at:
 10615 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;		None               void
 10622 ;; Registers used:
 10623 ;;		wreg, status,2
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    4
 10636 ;; This function calls:
 10637 ;;		Nothing
 10638 ;; This function is called by:
 10639 ;;		_Mcu_Initialization
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _IOC_Set
 10645  262C                     _IOC_Set:	
 10646                           
 10647                           ;MCU_B1.c: 312: WPUB2=0;
 10648                           
 10649                           ;incstack = 0
 10650                           ; Regs used in _IOC_Set: [wreg+status,2]
 10651  262C  0024               	movlb	4	; select bank4
 10652  262D  110D               	bcf	13,2	;volatile
 10653                           
 10654                           ;MCU_B1.c: 314: IOCBP=0b00000100;
 10655  262E  3004               	movlw	4
 10656  262F  0027               	movlb	7	; select bank7
 10657  2630  0094               	movwf	20	;volatile
 10658                           
 10659                           ;MCU_B1.c: 315: IOCBN=0b00000100;
 10660  2631  3004               	movlw	4
 10661  2632  0095               	movwf	21	;volatile
 10662                           
 10663                           ;MCU_B1.c: 330: IOCBF=0b00000000;
 10664  2633  0196               	clrf	22	;volatile
 10665                           
 10666                           ;MCU_B1.c: 332: IOCIE=1;
 10667  2634  158B               	bsf	11,3	;volatile
 10668                           
 10669                           ;MCU_B1.c: 333: IOCIF=0;
 10670  2635  100B               	bcf	11,0	;volatile
 10671                           
 10672                           ;MCU_B1.c: 334: PEIE=1;
 10673  2636  170B               	bsf	11,6	;volatile
 10674                           
 10675                           ;MCU_B1.c: 335: GIE=1;
 10676  2637  178B               	bsf	11,7	;volatile
 10677  2638  0008               	return
 10678  2639                     __end_of_IOC_Set:	
 10679                           
 10680                           	psect	text53
 10681  24E3                     __ptext53:	
 10682 ;; *************** function _INT_Set *****************
 10683 ;; Defined at:
 10684 ;;		line 281 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;		None
 10689 ;; Return value:  Size  Location     Type
 10690 ;;		None               void
 10691 ;; Registers used:
 10692 ;;		None
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;Total ram usage:        0 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    4
 10705 ;; This function calls:
 10706 ;;		Nothing
 10707 ;; This function is called by:
 10708 ;;		_Mcu_Initialization
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           
 10713                           ;psect for function _INT_Set
 10714  24E3                     _INT_Set:	
 10715                           
 10716                           ;MCU_B1.c: 283: WPUB0=0;
 10717                           
 10718                           ;incstack = 0
 10719                           ; Regs used in _INT_Set: []
 10720  24E3  0024               	movlb	4	; select bank4
 10721  24E4  100D               	bcf	13,0	;volatile
 10722                           
 10723                           ;MCU_B1.c: 284: INTE=1;
 10724  24E5  160B               	bsf	11,4	;volatile
 10725                           
 10726                           ;MCU_B1.c: 285: PEIE=1;
 10727  24E6  170B               	bsf	11,6	;volatile
 10728                           
 10729                           ;MCU_B1.c: 286: GIE=1;
 10730  24E7  178B               	bsf	11,7	;volatile
 10731  24E8  0008               	return
 10732  24E9                     __end_of_INT_Set:	
 10733                           
 10734                           	psect	text54
 10735  2511                     __ptext54:	
 10736 ;; *************** function _ADC_Set *****************
 10737 ;; Defined at:
 10738 ;;		line 375 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;		None               void
 10745 ;; Registers used:
 10746 ;;		wreg
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;Total ram usage:        0 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:    4
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_Mcu_Initialization
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function _ADC_Set
 10768  2511                     _ADC_Set:	
 10769                           
 10770                           ;MCU_B1.c: 377: ADCON1=0xf2;
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in _ADC_Set: [wreg]
 10774  2511  30F2               	movlw	242
 10775  2512  0021               	movlb	1	; select bank1
 10776  2513  009E               	movwf	30	;volatile
 10777                           
 10778                           ;MCU_B1.c: 378: FVRCON=0xc0;
 10779  2514  30C0               	movlw	192
 10780  2515  0022               	movlb	2	; select bank2
 10781  2516  0097               	movwf	23	;volatile
 10782  2517  0008               	return
 10783  2518                     __end_of_ADC_Set:	
 10784                           
 10785                           	psect	text55
 10786  2731                     __ptext55:	
 10787 ;; *************** function _MainT_ResetClock *****************
 10788 ;; Defined at:
 10789 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  i               1    1[BANK0 ] unsigned char 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;		None               void
 10796 ;; Registers used:
 10797 ;;		wreg, status,2, status,0
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;Total ram usage:        2 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    4
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_main
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _MainT_ResetClock
 10819  2731                     _MainT_ResetClock:	
 10820                           
 10821                           ;main.c: 194: char i;
 10822                           ;main.c: 196: if(RB5){
 10823                           
 10824                           ;incstack = 0
 10825                           ; Regs used in _MainT_ResetClock: [wreg+status,2+status,0]
 10826  2731  0020               	movlb	0	; select bank0
 10827  2732  1E8D               	btfss	13,5	;volatile
 10828  2733  0008               	return
 10829                           
 10830                           ;main.c: 197: RB5=0;
 10831  2734  128D               	bcf	13,5	;volatile
 10832                           
 10833                           ;main.c: 198: for(i=0 ;i<10 ; i++);
 10834  2735  01A1               	clrf	MainT_ResetClock@i
 10835  2736  300A               	movlw	10
 10836  2737  0221               	subwf	MainT_ResetClock@i,w
 10837  2738  1803               	btfsc	3,0
 10838  2739  2F42               	goto	l1296
 10839  273A                     l7805:	
 10840  273A  3001               	movlw	1
 10841  273B  00A0               	movwf	??_MainT_ResetClock
 10842  273C  0820               	movf	??_MainT_ResetClock,w
 10843  273D  07A1               	addwf	MainT_ResetClock@i,f
 10844  273E  300A               	movlw	10
 10845  273F  0221               	subwf	MainT_ResetClock@i,w
 10846  2740  1C03               	skipc
 10847  2741  2F3A               	goto	l7805
 10848  2742                     l1296:	
 10849                           
 10850                           ;main.c: 199: RB5=1;
 10851  2742  168D               	bsf	13,5	;volatile
 10852  2743  0008               	return
 10853  2744                     __end_of_MainT_ResetClock:	
 10854                           
 10855                           	psect	text56
 10856  271E                     __ptext56:	
 10857 ;; *************** function _MainT_Initialization *****************
 10858 ;; Defined at:
 10859 ;;		line 93 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;		None
 10864 ;; Return value:  Size  Location     Type
 10865 ;;		None               void
 10866 ;; Registers used:
 10867 ;;		wreg, fsr1l, fsr1h
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        1 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    4
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_main
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function _MainT_Initialization
 10889  271E                     _MainT_Initialization:	
 10890                           
 10891                           ;main.c: 96: Product=&VarProduct;
 10892                           
 10893                           ;incstack = 0
 10894                           ; Regs used in _MainT_Initialization: [wregfsr1]
 10895  271E  30C5               	movlw	_VarProduct& (0+255)
 10896  271F  0020               	movlb	0	; select bank0
 10897  2720  00A0               	movwf	??_MainT_Initialization
 10898  2721  0820               	movf	??_MainT_Initialization,w
 10899  2722  00EF               	movwf	_Product
 10900                           
 10901                           ;main.c: 97: Product->Data[20]=209;
 10902  2723  30D1               	movlw	209
 10903  2724  00A0               	movwf	??_MainT_Initialization
 10904  2725  086F               	movf	_Product,w
 10905  2726  3E14               	addlw	20
 10906  2727  0086               	movwf	6
 10907  2728  3001               	movlw	1	; select bank2/3
 10908  2729  0087               	movwf	7
 10909  272A  0820               	movf	??_MainT_Initialization,w
 10910  272B  0081               	movwf	1
 10911                           
 10912                           ;main.c: 100: TMain=&VarTMain;
 10913  272C  3020               	movlw	_VarTMain& (0+255)
 10914  272D  00A0               	movwf	??_MainT_Initialization
 10915  272E  0820               	movf	??_MainT_Initialization,w
 10916  272F  00FD               	movwf	_TMain
 10917  2730  0008               	return
 10918  2731                     __end_of_MainT_Initialization:	
 10919                           
 10920                           	psect	text57
 10921  1677                     __ptext57:	
 10922 ;; *************** function _MainT *****************
 10923 ;; Defined at:
 10924 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;Total ram usage:        0 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    6
 10945 ;; This function calls:
 10946 ;;		_setBuz
 10947 ;;		_setLoad_Enable
 10948 ;;		_setRF_Enable
 10949 ;;		_setSw_Enable
 10950 ;;		_setTemp_Enable
 10951 ;; This function is called by:
 10952 ;;		_main
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _MainT
 10958  1677                     _MainT:	
 10959                           
 10960                           ;main.c: 108: if(!TMain->PowerON)
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10964  1677  087D               	movf	_TMain,w
 10965  1678  0086               	movwf	6
 10966  1679  3001               	movlw	1	; select bank2/3
 10967  167A  0087               	movwf	7
 10968  167B  1801               	btfsc	1,0
 10969  167C  2EC0               	goto	l9469
 10970                           
 10971                           ;main.c: 109: {
 10972                           ;main.c: 110: TMain->PowerCount++;
 10973  167D  0A7D               	incf	_TMain,w
 10974  167E  0086               	movwf	6
 10975  167F  3001               	movlw	1	; select bank2/3
 10976  1680  0087               	movwf	7
 10977  1681  3001               	movlw	1
 10978  1682  0781               	addwf	1,f
 10979  1683  3141               	addfsr 1,1
 10980  1684  1803               	skipnc
 10981  1685  0A81               	incf	1,f
 10982                           
 10983                           ;main.c: 111: if(TMain->PowerCount == 150)
 10984  1686  0A7D               	incf	_TMain,w
 10985  1687  0086               	movwf	6
 10986  1688  3001               	movlw	1	; select bank2/3
 10987  1689  0087               	movwf	7
 10988  168A  3F40               	moviw [0]fsr1
 10989  168B  3A96               	xorlw	150
 10990  168C  1D03               	skipz
 10991  168D  2E90               	goto	u9255
 10992  168E  3F41               	moviw [1]fsr1
 10993  168F  3A00               	xorlw	0
 10994  1690                     u9255:	
 10995  1690  1D03               	skipz
 10996  1691  0008               	return
 10997                           
 10998                           ;main.c: 112: {
 10999                           ;main.c: 113: TMain->PowerCount=0;
 11000  1692  0A7D               	incf	_TMain,w
 11001  1693  0086               	movwf	6
 11002  1694  3001               	movlw	1	; select bank2/3
 11003  1695  0087               	movwf	7
 11004  1696  3000               	movlw	0
 11005  1697  3FC0               	movwi [0]fsr1
 11006  1698  3FC1               	movwi [1]fsr1
 11007                           
 11008                           ;main.c: 114: TMain->PowerON=1;
 11009  1699  087D               	movf	_TMain,w
 11010  169A  0086               	movwf	6
 11011  169B  3001               	movlw	1	; select bank2/3
 11012  169C  0087               	movwf	7
 11013  169D  1401               	bsf	1,0
 11014                           
 11015                           ;main.c: 117: setTemp_Enable(1);
 11016  169E  3001               	movlw	1
 11017  169F  31A5  2586  3196   	fcall	_setTemp_Enable
 11018                           
 11019                           ;main.c: 121: setLoad_Enable(1);
 11020  16A2  3001               	movlw	1
 11021  16A3  31A6  26DD  3196   	fcall	_setLoad_Enable
 11022                           
 11023                           ;main.c: 127: setBuz(3,50);
 11024  16A6  3032               	movlw	50
 11025  16A7  0020               	movlb	0	; select bank0
 11026  16A8  00A6               	movwf	setBuz@time
 11027  16A9  3000               	movlw	0
 11028  16AA  00A7               	movwf	setBuz@time+1
 11029  16AB  3003               	movlw	3
 11030  16AC  3195  2587  3196   	fcall	_setBuz
 11031                           
 11032                           ;main.c: 128: TMain->SelfTest=1;
 11033  16AF  087D               	movf	_TMain,w
 11034  16B0  3E03               	addlw	3
 11035  16B1  0086               	movwf	6
 11036  16B2  3001               	movlw	1	; select bank2/3
 11037  16B3  0087               	movwf	7
 11038  16B4  1401               	bsf	1,0
 11039                           
 11040                           ;main.c: 130: setSw_Enable(1);
 11041  16B5  3001               	movlw	1
 11042  16B6  3198  2066  3196   	fcall	_setSw_Enable
 11043                           
 11044                           ;main.c: 133: setRF_Enable(1,1);
 11045  16B9  0020               	movlb	0	; select bank0
 11046  16BA  01A2               	clrf	setRF_Enable@command
 11047  16BB  0AA2               	incf	setRF_Enable@command,f
 11048  16BC  3001               	movlw	1
 11049  16BD  319A  2222         	fcall	_setRF_Enable
 11050                           
 11051                           ;main.c: 137: }
 11052                           ;main.c: 138: }
 11053  16BF  0008               	return
 11054  16C0                     l9469:	
 11055                           
 11056                           ;main.c: 139: else
 11057                           ;main.c: 140: {
 11058                           ;main.c: 148: TMain->Count1++;
 11059  16C0  087D               	movf	_TMain,w
 11060  16C1  3E06               	addlw	6
 11061  16C2  0086               	movwf	6
 11062  16C3  3001               	movlw	1	; select bank2/3
 11063  16C4  0087               	movwf	7
 11064  16C5  3001               	movlw	1
 11065  16C6  0781               	addwf	1,f
 11066  16C7  3141               	addfsr 1,1
 11067  16C8  1803               	skipnc
 11068  16C9  0A81               	incf	1,f
 11069                           
 11070                           ;main.c: 149: if(TMain->Count1 == 100)
 11071  16CA  087D               	movf	_TMain,w
 11072  16CB  3E06               	addlw	6
 11073  16CC  0086               	movwf	6
 11074  16CD  3001               	movlw	1	; select bank2/3
 11075  16CE  0087               	movwf	7
 11076  16CF  3F40               	moviw [0]fsr1
 11077  16D0  3A64               	xorlw	100
 11078  16D1  1D03               	skipz
 11079  16D2  2ED5               	goto	u9265
 11080  16D3  3F41               	moviw [1]fsr1
 11081  16D4  3A00               	xorlw	0
 11082  16D5                     u9265:	
 11083  16D5  1D03               	skipz
 11084  16D6  0008               	return
 11085                           
 11086                           ;main.c: 150: {
 11087                           ;main.c: 151: TMain->Count1=0;
 11088  16D7  087D               	movf	_TMain,w
 11089  16D8  3E06               	addlw	6
 11090  16D9  0086               	movwf	6
 11091  16DA  3001               	movlw	1	; select bank2/3
 11092  16DB  0087               	movwf	7
 11093  16DC  3000               	movlw	0
 11094  16DD  3FC0               	movwi [0]fsr1
 11095  16DE  3FC1               	movwi [1]fsr1
 11096                           
 11097                           ;main.c: 164: if(TMain->Flag)
 11098  16DF  087D               	movf	_TMain,w
 11099  16E0  0086               	movwf	6
 11100  16E1  3001               	movlw	1	; select bank2/3
 11101  16E2  0087               	movwf	7
 11102  16E3  1D81               	btfss	1,3
 11103  16E4  2EEB               	goto	l9477
 11104                           
 11105                           ;main.c: 165: {
 11106                           ;main.c: 166: TMain->Flag=0;
 11107  16E5  087D               	movf	_TMain,w
 11108  16E6  0086               	movwf	6
 11109  16E7  3001               	movlw	1	; select bank2/3
 11110  16E8  0087               	movwf	7
 11111  16E9  1181               	bcf	1,3
 11112                           
 11113                           ;main.c: 175: }
 11114  16EA  0008               	return
 11115  16EB                     l9477:	
 11116                           
 11117                           ;main.c: 176: else
 11118                           ;main.c: 177: {
 11119                           ;main.c: 178: TMain->Flag=1;
 11120  16EB  087D               	movf	_TMain,w
 11121  16EC  0086               	movwf	6
 11122  16ED  3001               	movlw	1	; select bank2/3
 11123  16EE  0087               	movwf	7
 11124  16EF  1581               	bsf	1,3
 11125  16F0  0008               	return
 11126  16F1                     __end_of_MainT:	
 11127                           
 11128                           	psect	text58
 11129  2586                     __ptext58:	
 11130 ;; *************** function _setTemp_Enable *****************
 11131 ;; Defined at:
 11132 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;  command         1    wreg     unsigned char 
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;  command         1    0[BANK0 ] unsigned char 
 11137 ;; Return value:  Size  Location     Type
 11138 ;;		None               void
 11139 ;; Registers used:
 11140 ;;		wreg, fsr1l, fsr1h
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;Total ram usage:        1 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    4
 11153 ;; This function calls:
 11154 ;;		Nothing
 11155 ;; This function is called by:
 11156 ;;		_MainT
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function _setTemp_Enable
 11162  2586                     _setTemp_Enable:	
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11166                           ;setTemp_Enable@command stored from wreg
 11167  2586  0020               	movlb	0	; select bank0
 11168  2587  00A0               	movwf	setTemp_Enable@command
 11169                           
 11170                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11171  2588  087C               	movf	_Temp,w
 11172  2589  0086               	movwf	6
 11173  258A  3001               	movlw	1	; select bank2/3
 11174  258B  0087               	movwf	7
 11175  258C  0820               	movf	setTemp_Enable@command,w
 11176  258D  1001               	bcf	1,0
 11177  258E  1D03               	skipz
 11178  258F  1401               	bsf	1,0
 11179  2590  0008               	return
 11180  2591                     __end_of_setTemp_Enable:	
 11181                           
 11182                           	psect	text59
 11183  26DD                     __ptext59:	
 11184 ;; *************** function _setLoad_Enable *****************
 11185 ;; Defined at:
 11186 ;;		line 295 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11187 ;; Parameters:    Size  Location     Type
 11188 ;;  command         1    wreg     unsigned char 
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;  command         1    0[BANK0 ] unsigned char 
 11191 ;; Return value:  Size  Location     Type
 11192 ;;		None               void
 11193 ;; Registers used:
 11194 ;;		wreg, fsr1l, fsr1h
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;Total ram usage:        1 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    4
 11207 ;; This function calls:
 11208 ;;		Nothing
 11209 ;; This function is called by:
 11210 ;;		_MainT
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           
 11215                           ;psect for function _setLoad_Enable
 11216  26DD                     _setLoad_Enable:	
 11217                           
 11218                           ;incstack = 0
 11219                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11220                           ;setLoad_Enable@command stored from wreg
 11221  26DD  0020               	movlb	0	; select bank0
 11222  26DE  00A0               	movwf	setLoad_Enable@command
 11223                           
 11224                           ;OverLoad_B1.c: 297: Load->Enable=command;
 11225  26DF  086E               	movf	_Load,w
 11226  26E0  0086               	movwf	6
 11227  26E1  3002               	movlw	2	; select bank4/5
 11228  26E2  0087               	movwf	7
 11229  26E3  0820               	movf	setLoad_Enable@command,w
 11230  26E4  1001               	bcf	1,0
 11231  26E5  1D03               	skipz
 11232  26E6  1401               	bsf	1,0
 11233                           
 11234                           ;OverLoad_B1.c: 298: Load->GO=0;
 11235  26E7  086E               	movf	_Load,w
 11236  26E8  0086               	movwf	6
 11237  26E9  3002               	movlw	2	; select bank4/5
 11238  26EA  0087               	movwf	7
 11239  26EB  1081               	bcf	1,1
 11240  26EC  0008               	return
 11241  26ED                     __end_of_setLoad_Enable:	
 11242                           
 11243                           	psect	text60
 11244  0050                     __ptext60:	
 11245 ;; *************** function _Load_Main *****************
 11246 ;; Defined at:
 11247 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;		None
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;  i               1   17[BANK0 ] unsigned char 
 11252 ;; Return value:  Size  Location     Type
 11253 ;;		None               void
 11254 ;; Registers used:
 11255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;Total ram usage:        5 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    9
 11268 ;; This function calls:
 11269 ;;		___lwdiv
 11270 ;;		___wmul
 11271 ;;		_getPF_Safe
 11272 ;;		_getTemp_Safe
 11273 ;;		_setDimmerLights_Clear
 11274 ;;		_setLoad_AH_AL_Restore
 11275 ;;		_setLoad_Exceptions
 11276 ;; This function is called by:
 11277 ;;		_main
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _Load_Main
 11283  0050                     _Load_Main:	
 11284                           
 11285                           ;OverLoad_B1.c: 47: char i;
 11286                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11287                           
 11288                           ;incstack = 0
 11289                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11290  0050  0020               	movlb	0	; select bank0
 11291  0051  086E               	movf	_Load,w
 11292  0052  0086               	movwf	6
 11293  0053  3002               	movlw	2	; select bank4/5
 11294  0054  0087               	movwf	7
 11295  0055  1E81               	btfss	1,5
 11296  0056  287D               	goto	l9505
 11297                           
 11298                           ;OverLoad_B1.c: 49: {
 11299                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11300  0057  086E               	movf	_Load,w
 11301  0058  3E03               	addlw	3
 11302  0059  0086               	movwf	6
 11303  005A  3002               	movlw	2	; select bank4/5
 11304  005B  0087               	movwf	7
 11305  005C  3001               	movlw	1
 11306  005D  0781               	addwf	1,f
 11307  005E  3141               	addfsr 1,1
 11308  005F  1803               	skipnc
 11309  0060  0A81               	incf	1,f
 11310                           
 11311                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11312  0061  086E               	movf	_Load,w
 11313  0062  3E03               	addlw	3
 11314  0063  0086               	movwf	6
 11315  0064  3002               	movlw	2	; select bank4/5
 11316  0065  0087               	movwf	7
 11317  0066  3F40               	moviw [0]fsr1
 11318  0067  00AD               	movwf	??_Load_Main
 11319  0068  3F41               	moviw [1]fsr1
 11320  0069  00AE               	movwf	??_Load_Main+1
 11321  006A  3003               	movlw	3
 11322  006B  022E               	subwf	??_Load_Main+1,w
 11323  006C  30E8               	movlw	232
 11324  006D  1903               	skipnz
 11325  006E  022D               	subwf	??_Load_Main,w
 11326  006F  1C03               	skipc
 11327  0070  0008               	return
 11328                           
 11329                           ;OverLoad_B1.c: 52: {
 11330                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11331  0071  086E               	movf	_Load,w
 11332  0072  3E03               	addlw	3
 11333  0073  0086               	movwf	6
 11334  0074  3002               	movlw	2	; select bank4/5
 11335  0075  0087               	movwf	7
 11336  0076  3000               	movlw	0
 11337  0077  3FC0               	movwi [0]fsr1
 11338  0078  3FC1               	movwi [1]fsr1
 11339                           
 11340                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11341  0079  3000               	movlw	0
 11342  007A  3190  2003         	fcall	_setLoad_Exceptions
 11343                           
 11344                           ;OverLoad_B1.c: 55: }
 11345                           ;OverLoad_B1.c: 56: }
 11346  007C  0008               	return
 11347  007D                     l9505:	
 11348                           
 11349                           ;OverLoad_B1.c: 57: else
 11350                           ;OverLoad_B1.c: 58: {
 11351                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11352  007D  0020               	movlb	0	; select bank0
 11353  007E  086E               	movf	_Load,w
 11354  007F  0086               	movwf	6
 11355  0080  3002               	movlw	2	; select bank4/5
 11356  0081  0087               	movwf	7
 11357  0082  1E01               	btfss	1,4
 11358  0083  2B44               	goto	l9613
 11359                           
 11360                           ;OverLoad_B1.c: 60: {
 11361                           ;OverLoad_B1.c: 61: Load->Time++;
 11362  0084  0A6E               	incf	_Load,w
 11363  0085  0086               	movwf	6
 11364  0086  3002               	movlw	2	; select bank4/5
 11365  0087  0087               	movwf	7
 11366  0088  3001               	movlw	1
 11367  0089  0781               	addwf	1,f
 11368  008A  3141               	addfsr 1,1
 11369  008B  1803               	skipnc
 11370  008C  0A81               	incf	1,f
 11371                           
 11372                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11373  008D  0A6E               	incf	_Load,w
 11374  008E  0086               	movwf	6
 11375  008F  3002               	movlw	2	; select bank4/5
 11376  0090  0087               	movwf	7
 11377  0091  3F40               	moviw [0]fsr1
 11378  0092  00AD               	movwf	??_Load_Main
 11379  0093  3F41               	moviw [1]fsr1
 11380  0094  00AE               	movwf	??_Load_Main+1
 11381  0095  3000               	movlw	0
 11382  0096  022E               	subwf	??_Load_Main+1,w
 11383  0097  3005               	movlw	5
 11384  0098  1903               	skipnz
 11385  0099  022D               	subwf	??_Load_Main,w
 11386  009A  1C03               	skipc
 11387  009B  0008               	return
 11388                           
 11389                           ;OverLoad_B1.c: 63: {
 11390                           ;OverLoad_B1.c: 64: Load->Time=0;
 11391  009C  0A6E               	incf	_Load,w
 11392  009D  0086               	movwf	6
 11393  009E  3002               	movlw	2	; select bank4/5
 11394  009F  0087               	movwf	7
 11395  00A0  3000               	movlw	0
 11396  00A1  3FC0               	movwi [0]fsr1
 11397  00A2  3FC1               	movwi [1]fsr1
 11398                           
 11399                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11400  00A3  086E               	movf	_Load,w
 11401  00A4  0086               	movwf	6
 11402  00A5  3002               	movlw	2	; select bank4/5
 11403  00A6  0087               	movwf	7
 11404  00A7  1201               	bcf	1,4
 11405                           
 11406                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11407  00A8  086E               	movf	_Load,w
 11408  00A9  3E45               	addlw	69
 11409  00AA  0086               	movwf	6
 11410  00AB  3002               	movlw	2	; select bank4/5
 11411  00AC  0087               	movwf	7
 11412  00AD  086E               	movf	_Load,w
 11413  00AE  3E44               	addlw	68
 11414  00AF  0084               	movwf	4
 11415  00B0  3002               	movlw	2	; select bank4/5
 11416  00B1  0085               	movwf	5
 11417  00B2  0800               	movf	0,w
 11418  00B3  00AD               	movwf	??_Load_Main
 11419  00B4  086E               	movf	_Load,w
 11420  00B5  3E43               	addlw	67
 11421  00B6  0084               	movwf	4
 11422  00B7  3002               	movlw	2	; select bank4/5
 11423  00B8  0085               	movwf	5
 11424  00B9  0800               	movf	0,w
 11425  00BA  072D               	addwf	??_Load_Main,w
 11426  00BB  0701               	addwf	1,w
 11427  00BC  00AE               	movwf	??_Load_Main+1
 11428  00BD  086E               	movf	_Load,w
 11429  00BE  3E3E               	addlw	62
 11430  00BF  0086               	movwf	6
 11431  00C0  3002               	movlw	2	; select bank4/5
 11432  00C1  0087               	movwf	7
 11433  00C2  082E               	movf	??_Load_Main+1,w
 11434  00C3  0081               	movwf	1
 11435                           
 11436                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11437  00C4  01B1               	clrf	Load_Main@i
 11438  00C5  0AB1               	incf	Load_Main@i,f
 11439  00C6  3004               	movlw	4
 11440  00C7  0231               	subwf	Load_Main@i,w
 11441  00C8  1803               	btfsc	3,0
 11442  00C9  28F8               	goto	l9527
 11443  00CA                     l9521:	
 11444                           
 11445                           ;OverLoad_B1.c: 68: {
 11446                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11447  00CA  3531               	lslf	Load_Main@i,w
 11448  00CB  3E08               	addlw	8
 11449  00CC  076E               	addwf	_Load,w
 11450  00CD  00AD               	movwf	??_Load_Main
 11451  00CE  082D               	movf	??_Load_Main,w
 11452  00CF  0086               	movwf	6
 11453  00D0  3002               	movlw	2	; select bank4/5
 11454  00D1  0087               	movwf	7
 11455  00D2  086E               	movf	_Load,w
 11456  00D3  3E2E               	addlw	46
 11457  00D4  0084               	movwf	4
 11458  00D5  3002               	movlw	2	; select bank4/5
 11459  00D6  0085               	movwf	5
 11460  00D7  3F40               	moviw [0]fsr1
 11461  00D8  0780               	addwf	0,f
 11462  00D9  3101               	addfsr 0,1
 11463  00DA  3F41               	moviw [1]fsr1
 11464  00DB  3D80               	addwfc	0,f
 11465  00DC  313F               	addfsr 0,-1
 11466                           
 11467                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11468  00DD  3531               	lslf	Load_Main@i,w
 11469  00DE  3E1A               	addlw	26
 11470  00DF  076E               	addwf	_Load,w
 11471  00E0  00AD               	movwf	??_Load_Main
 11472  00E1  082D               	movf	??_Load_Main,w
 11473  00E2  0086               	movwf	6
 11474  00E3  3002               	movlw	2	; select bank4/5
 11475  00E4  0087               	movwf	7
 11476  00E5  086E               	movf	_Load,w
 11477  00E6  3E30               	addlw	48
 11478  00E7  0084               	movwf	4
 11479  00E8  3002               	movlw	2	; select bank4/5
 11480  00E9  0085               	movwf	5
 11481  00EA  3F40               	moviw [0]fsr1
 11482  00EB  0780               	addwf	0,f
 11483  00EC  3101               	addfsr 0,1
 11484  00ED  3F41               	moviw [1]fsr1
 11485  00EE  3D80               	addwfc	0,f
 11486  00EF  313F               	addfsr 0,-1
 11487  00F0  3001               	movlw	1
 11488  00F1  00AD               	movwf	??_Load_Main
 11489  00F2  082D               	movf	??_Load_Main,w
 11490  00F3  07B1               	addwf	Load_Main@i,f
 11491  00F4  3004               	movlw	4
 11492  00F5  0231               	subwf	Load_Main@i,w
 11493  00F6  1C03               	skipc
 11494  00F7  28CA               	goto	l9521
 11495  00F8                     l9527:	
 11496                           
 11497                           ;OverLoad_B1.c: 71: }
 11498                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11499  00F8  3003               	movlw	3
 11500  00F9  00A0               	movwf	___lwdiv@divisor
 11501  00FA  3000               	movlw	0
 11502  00FB  00A1               	movwf	___lwdiv@divisor+1
 11503  00FC  086E               	movf	_Load,w
 11504  00FD  3E2E               	addlw	46
 11505  00FE  0086               	movwf	6
 11506  00FF  3002               	movlw	2	; select bank4/5
 11507  0100  0087               	movwf	7
 11508  0101  3F40               	moviw [0]fsr1
 11509  0102  00A2               	movwf	___lwdiv@dividend
 11510  0103  3F41               	moviw [1]fsr1
 11511  0104  00A3               	movwf	___lwdiv@dividend+1
 11512  0105  319C  2428  3180   	fcall	___lwdiv
 11513  0108  0020               	movlb	0	; select bank0
 11514  0109  086E               	movf	_Load,w
 11515  010A  3E2E               	addlw	46
 11516  010B  0086               	movwf	6
 11517  010C  3002               	movlw	2	; select bank4/5
 11518  010D  0087               	movwf	7
 11519  010E  0820               	movf	?___lwdiv,w
 11520  010F  3FC0               	movwi [0]fsr1
 11521  0110  0821               	movf	?___lwdiv+1,w
 11522  0111  3FC1               	movwi [1]fsr1
 11523                           
 11524                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11525  0112  3003               	movlw	3
 11526  0113  00A0               	movwf	___lwdiv@divisor
 11527  0114  3000               	movlw	0
 11528  0115  00A1               	movwf	___lwdiv@divisor+1
 11529  0116  086E               	movf	_Load,w
 11530  0117  3E30               	addlw	48
 11531  0118  0086               	movwf	6
 11532  0119  3002               	movlw	2	; select bank4/5
 11533  011A  0087               	movwf	7
 11534  011B  3F40               	moviw [0]fsr1
 11535  011C  00A2               	movwf	___lwdiv@dividend
 11536  011D  3F41               	moviw [1]fsr1
 11537  011E  00A3               	movwf	___lwdiv@dividend+1
 11538  011F  319C  2428  3180   	fcall	___lwdiv
 11539  0122  0020               	movlb	0	; select bank0
 11540  0123  086E               	movf	_Load,w
 11541  0124  3E30               	addlw	48
 11542  0125  0086               	movwf	6
 11543  0126  3002               	movlw	2	; select bank4/5
 11544  0127  0087               	movwf	7
 11545  0128  0820               	movf	?___lwdiv,w
 11546  0129  3FC0               	movwi [0]fsr1
 11547  012A  0821               	movf	?___lwdiv+1,w
 11548  012B  3FC1               	movwi [1]fsr1
 11549                           
 11550                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11551  012C  086E               	movf	_Load,w
 11552  012D  3E2E               	addlw	46
 11553  012E  0086               	movwf	6
 11554  012F  3002               	movlw	2	; select bank4/5
 11555  0130  0087               	movwf	7
 11556  0131  3F40               	moviw [0]fsr1
 11557  0132  00AD               	movwf	??_Load_Main
 11558  0133  3F41               	moviw [1]fsr1
 11559  0134  00AE               	movwf	??_Load_Main+1
 11560  0135  086E               	movf	_Load,w
 11561  0136  3E30               	addlw	48
 11562  0137  0086               	movwf	6
 11563  0138  3002               	movlw	2	; select bank4/5
 11564  0139  0087               	movwf	7
 11565  013A  3F40               	moviw [0]fsr1
 11566  013B  00AF               	movwf	??_Load_Main+2
 11567  013C  3F41               	moviw [1]fsr1
 11568  013D  00B0               	movwf	??_Load_Main+3
 11569  013E  082E               	movf	??_Load_Main+1,w
 11570  013F  0230               	subwf	??_Load_Main+3,w
 11571  0140  1D03               	skipz
 11572  0141  2944               	goto	u9375
 11573  0142  082D               	movf	??_Load_Main,w
 11574  0143  022F               	subwf	??_Load_Main+2,w
 11575  0144                     u9375:	
 11576  0144  1803               	skipnc
 11577  0145  2AC7               	goto	l9595
 11578                           
 11579                           ;OverLoad_B1.c: 75: {
 11580                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11581  0146  086E               	movf	_Load,w
 11582  0147  3E2E               	addlw	46
 11583  0148  0086               	movwf	6
 11584  0149  3002               	movlw	2	; select bank4/5
 11585  014A  0087               	movwf	7
 11586  014B  086E               	movf	_Load,w
 11587  014C  3E30               	addlw	48
 11588  014D  0084               	movwf	4
 11589  014E  3002               	movlw	2	; select bank4/5
 11590  014F  0085               	movwf	5
 11591  0150  3F00               	moviw [0]fsr0
 11592  0151  00AD               	movwf	??_Load_Main
 11593  0152  3F01               	moviw [1]fsr0
 11594  0153  00AE               	movwf	??_Load_Main+1
 11595  0154  09AD               	comf	??_Load_Main,f
 11596  0155  09AE               	comf	??_Load_Main+1,f
 11597  0156  0AAD               	incf	??_Load_Main,f
 11598  0157  1903               	skipnz
 11599  0158  0AAE               	incf	??_Load_Main+1,f
 11600  0159  3F40               	moviw [0]fsr1
 11601  015A  072D               	addwf	??_Load_Main,w
 11602  015B  00AF               	movwf	??_Load_Main+2
 11603  015C  3F41               	moviw [1]fsr1
 11604  015D  3D2E               	addwfc	??_Load_Main+1,w
 11605  015E  00B0               	movwf	??_Load_Main+3
 11606  015F  086E               	movf	_Load,w
 11607  0160  3E2C               	addlw	44
 11608  0161  0086               	movwf	6
 11609  0162  3002               	movlw	2	; select bank4/5
 11610  0163  0087               	movwf	7
 11611  0164  082F               	movf	??_Load_Main+2,w
 11612  0165  3FC0               	movwi [0]fsr1
 11613  0166  0830               	movf	??_Load_Main+3,w
 11614  0167  3FC1               	movwi [1]fsr1
 11615                           
 11616                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11617  0168  086E               	movf	_Load,w
 11618  0169  3E3A               	addlw	58
 11619  016A  0086               	movwf	6
 11620  016B  3002               	movlw	2	; select bank4/5
 11621  016C  0087               	movwf	7
 11622  016D  3002               	movlw	2
 11623  016E  0201               	subwf	1,w
 11624  016F  1803               	skipnc
 11625  0170  29C1               	goto	l9549
 11626                           
 11627                           ;OverLoad_B1.c: 79: {
 11628                           ;OverLoad_B1.c: 80: Load->Count++;
 11629  0171  3001               	movlw	1
 11630  0172  00AD               	movwf	??_Load_Main
 11631  0173  086E               	movf	_Load,w
 11632  0174  3E3A               	addlw	58
 11633  0175  0086               	movwf	6
 11634  0176  3002               	movlw	2	; select bank4/5
 11635  0177  0087               	movwf	7
 11636  0178  082D               	movf	??_Load_Main,w
 11637  0179  0781               	addwf	1,f
 11638                           
 11639                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11640  017A  086E               	movf	_Load,w
 11641  017B  3E3A               	addlw	58
 11642  017C  0086               	movwf	6
 11643  017D  3002               	movlw	2	; select bank4/5
 11644  017E  0087               	movwf	7
 11645  017F  0801               	movf	1,w
 11646  0180  3A01               	xorlw	1
 11647  0181  1D03               	skipz
 11648  0182  298D               	goto	l9541
 11649                           
 11650                           ;OverLoad_B1.c: 82: {
 11651                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11652  0183  086E               	movf	_Load,w
 11653  0184  3E36               	addlw	54
 11654  0185  0086               	movwf	6
 11655  0186  3002               	movlw	2	; select bank4/5
 11656  0187  0087               	movwf	7
 11657  0188  30F4               	movlw	244
 11658  0189  3FC0               	movwi [0]fsr1
 11659  018A  3001               	movlw	1
 11660  018B  3FC1               	movwi [1]fsr1
 11661                           
 11662                           ;OverLoad_B1.c: 84: }
 11663  018C  29C1               	goto	l9549
 11664  018D                     l9541:	
 11665                           
 11666                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11667  018D  086E               	movf	_Load,w
 11668  018E  3E3A               	addlw	58
 11669  018F  0086               	movwf	6
 11670  0190  3002               	movlw	2	; select bank4/5
 11671  0191  0087               	movwf	7
 11672  0192  0801               	movf	1,w
 11673  0193  3A02               	xorlw	2
 11674  0194  1D03               	skipz
 11675  0195  29C1               	goto	l9549
 11676                           
 11677                           ;OverLoad_B1.c: 86: {
 11678                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11679  0196  086E               	movf	_Load,w
 11680  0197  3E3E               	addlw	62
 11681  0198  0086               	movwf	6
 11682  0199  3002               	movlw	2	; select bank4/5
 11683  019A  0087               	movwf	7
 11684  019B  0801               	movf	1,w
 11685  019C  3A01               	xorlw	1
 11686  019D  1D03               	skipz
 11687  019E  29A9               	goto	l9547
 11688                           
 11689                           ;OverLoad_B1.c: 88: {
 11690                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x42;
 11691  019F  086E               	movf	_Load,w
 11692  01A0  3E36               	addlw	54
 11693  01A1  0086               	movwf	6
 11694  01A2  3002               	movlw	2	; select bank4/5
 11695  01A3  0087               	movwf	7
 11696  01A4  3042               	movlw	66
 11697  01A5  3FC0               	movwi [0]fsr1
 11698  01A6  3000               	movlw	0
 11699  01A7  3FC1               	movwi [1]fsr1
 11700                           
 11701                           ;OverLoad_B1.c: 90: }
 11702  01A8  29C1               	goto	l9549
 11703  01A9                     l9547:	
 11704                           
 11705                           ;OverLoad_B1.c: 91: else
 11706                           ;OverLoad_B1.c: 92: {
 11707                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x42+Load->TotalLoad)-0x08;
 11708  01A9  086E               	movf	_Load,w
 11709  01AA  3E06               	addlw	6
 11710  01AB  0086               	movwf	6
 11711  01AC  3002               	movlw	2	; select bank4/5
 11712  01AD  0087               	movwf	7
 11713  01AE  3F40               	moviw [0]fsr1
 11714  01AF  00AD               	movwf	??_Load_Main
 11715  01B0  3F41               	moviw [1]fsr1
 11716  01B1  00AE               	movwf	??_Load_Main+1
 11717  01B2  082D               	movf	??_Load_Main,w
 11718  01B3  3E3A               	addlw	58
 11719  01B4  00AF               	movwf	??_Load_Main+2
 11720  01B5  3000               	movlw	0
 11721  01B6  3D2E               	addwfc	??_Load_Main+1,w
 11722  01B7  00B0               	movwf	??_Load_Main+3
 11723  01B8  086E               	movf	_Load,w
 11724  01B9  3E36               	addlw	54
 11725  01BA  0086               	movwf	6
 11726  01BB  3002               	movlw	2	; select bank4/5
 11727  01BC  0087               	movwf	7
 11728  01BD  082F               	movf	??_Load_Main+2,w
 11729  01BE  3FC0               	movwi [0]fsr1
 11730  01BF  0830               	movf	??_Load_Main+3,w
 11731  01C0  3FC1               	movwi [1]fsr1
 11732  01C1                     l9549:	
 11733                           
 11734                           ;OverLoad_B1.c: 94: }
 11735                           ;OverLoad_B1.c: 95: }
 11736                           ;OverLoad_B1.c: 96: }
 11737                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11738  01C1  086E               	movf	_Load,w
 11739  01C2  3E36               	addlw	54
 11740  01C3  0086               	movwf	6
 11741  01C4  3002               	movlw	2	; select bank4/5
 11742  01C5  0087               	movwf	7
 11743  01C6  3F40               	moviw [0]fsr1
 11744  01C7  00AD               	movwf	??_Load_Main
 11745  01C8  3F41               	moviw [1]fsr1
 11746  01C9  00AE               	movwf	??_Load_Main+1
 11747  01CA  086E               	movf	_Load,w
 11748  01CB  3E2C               	addlw	44
 11749  01CC  0086               	movwf	6
 11750  01CD  3002               	movlw	2	; select bank4/5
 11751  01CE  0087               	movwf	7
 11752  01CF  3F40               	moviw [0]fsr1
 11753  01D0  00AF               	movwf	??_Load_Main+2
 11754  01D1  3F41               	moviw [1]fsr1
 11755  01D2  00B0               	movwf	??_Load_Main+3
 11756  01D3  082E               	movf	??_Load_Main+1,w
 11757  01D4  0230               	subwf	??_Load_Main+3,w
 11758  01D5  1D03               	skipz
 11759  01D6  29D9               	goto	u9425
 11760  01D7  082D               	movf	??_Load_Main,w
 11761  01D8  022F               	subwf	??_Load_Main+2,w
 11762  01D9                     u9425:	
 11763  01D9  1C03               	skipc
 11764  01DA  2A47               	goto	l9569
 11765                           
 11766                           ;OverLoad_B1.c: 99: {
 11767                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11768  01DB  3001               	movlw	1
 11769  01DC  00AD               	movwf	??_Load_Main
 11770  01DD  086E               	movf	_Load,w
 11771  01DE  3E3C               	addlw	60
 11772  01DF  0086               	movwf	6
 11773  01E0  3002               	movlw	2	; select bank4/5
 11774  01E1  0087               	movwf	7
 11775  01E2  082D               	movf	??_Load_Main,w
 11776  01E3  0781               	addwf	1,f
 11777                           
 11778                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11779  01E4  086E               	movf	_Load,w
 11780  01E5  3E3C               	addlw	60
 11781  01E6  0086               	movwf	6
 11782  01E7  3002               	movlw	2	; select bank4/5
 11783  01E8  0087               	movwf	7
 11784  01E9  3003               	movlw	3
 11785  01EA  0201               	subwf	1,w
 11786  01EB  1C03               	skipc
 11787  01EC  2AC7               	goto	l9595
 11788                           
 11789                           ;OverLoad_B1.c: 102: {
 11790                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11791  01ED  086E               	movf	_Load,w
 11792  01EE  3E3C               	addlw	60
 11793  01EF  0086               	movwf	6
 11794  01F0  3002               	movlw	2	; select bank4/5
 11795  01F1  0087               	movwf	7
 11796  01F2  0181               	clrf	1
 11797                           
 11798                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11799  01F3  3001               	movlw	1
 11800  01F4  3190  2003  3180   	fcall	_setLoad_Exceptions
 11801                           
 11802                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 11803  01F7  0020               	movlb	0	; select bank0
 11804  01F8  086E               	movf	_Load,w
 11805  01F9  3E2C               	addlw	44
 11806  01FA  0086               	movwf	6
 11807  01FB  3002               	movlw	2	; select bank4/5
 11808  01FC  0087               	movwf	7
 11809  01FD  3F40               	moviw [0]fsr1
 11810  01FE  00AD               	movwf	??_Load_Main
 11811  01FF  3F41               	moviw [1]fsr1
 11812  0200  00AE               	movwf	??_Load_Main+1
 11813  0201  082E               	movf	??_Load_Main+1,w
 11814  0202  00AF               	movwf	??_Load_Main+2
 11815  0203  086F               	movf	_Product,w
 11816  0204  3E04               	addlw	4
 11817  0205  0086               	movwf	6
 11818  0206  3001               	movlw	1	; select bank2/3
 11819  0207  0087               	movwf	7
 11820  0208  082F               	movf	??_Load_Main+2,w
 11821  0209  0081               	movwf	1
 11822                           
 11823                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 11824  020A  086E               	movf	_Load,w
 11825  020B  3E2C               	addlw	44
 11826  020C  0086               	movwf	6
 11827  020D  3002               	movlw	2	; select bank4/5
 11828  020E  0087               	movwf	7
 11829  020F  0801               	movf	1,w
 11830  0210  00AD               	movwf	??_Load_Main
 11831  0211  086F               	movf	_Product,w
 11832  0212  3E05               	addlw	5
 11833  0213  0086               	movwf	6
 11834  0214  3001               	movlw	1	; select bank2/3
 11835  0215  0087               	movwf	7
 11836  0216  082D               	movf	??_Load_Main,w
 11837  0217  0081               	movwf	1
 11838                           
 11839                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 11840  0218  086E               	movf	_Load,w
 11841  0219  3E36               	addlw	54
 11842  021A  0086               	movwf	6
 11843  021B  3002               	movlw	2	; select bank4/5
 11844  021C  0087               	movwf	7
 11845  021D  3F40               	moviw [0]fsr1
 11846  021E  00AD               	movwf	??_Load_Main
 11847  021F  3F41               	moviw [1]fsr1
 11848  0220  00AE               	movwf	??_Load_Main+1
 11849  0221  082E               	movf	??_Load_Main+1,w
 11850  0222  00AF               	movwf	??_Load_Main+2
 11851  0223  086F               	movf	_Product,w
 11852  0224  3E10               	addlw	16
 11853  0225  0086               	movwf	6
 11854  0226  3001               	movlw	1	; select bank2/3
 11855  0227  0087               	movwf	7
 11856  0228  082F               	movf	??_Load_Main+2,w
 11857  0229  0081               	movwf	1
 11858                           
 11859                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 11860  022A  086E               	movf	_Load,w
 11861  022B  3E36               	addlw	54
 11862  022C  0086               	movwf	6
 11863  022D  3002               	movlw	2	; select bank4/5
 11864  022E  0087               	movwf	7
 11865  022F  0801               	movf	1,w
 11866  0230  00AD               	movwf	??_Load_Main
 11867  0231  086F               	movf	_Product,w
 11868  0232  3E11               	addlw	17
 11869  0233  0086               	movwf	6
 11870  0234  3001               	movlw	1	; select bank2/3
 11871  0235  0087               	movwf	7
 11872  0236  082D               	movf	??_Load_Main,w
 11873  0237  0081               	movwf	1
 11874                           
 11875                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 11876  0238  086E               	movf	_Load,w
 11877  0239  3E3E               	addlw	62
 11878  023A  0086               	movwf	6
 11879  023B  3002               	movlw	2	; select bank4/5
 11880  023C  0087               	movwf	7
 11881  023D  0801               	movf	1,w
 11882  023E  00AD               	movwf	??_Load_Main
 11883  023F  086F               	movf	_Product,w
 11884  0240  3E08               	addlw	8
 11885  0241  0086               	movwf	6
 11886  0242  3001               	movlw	1	; select bank2/3
 11887  0243  0087               	movwf	7
 11888  0244  082D               	movf	??_Load_Main,w
 11889  0245  0081               	movwf	1
 11890                           
 11891                           ;OverLoad_B1.c: 113: }
 11892                           ;OverLoad_B1.c: 114: }
 11893  0246  2AC7               	goto	l9595
 11894  0247                     l9569:	
 11895                           
 11896                           ;OverLoad_B1.c: 115: else
 11897                           ;OverLoad_B1.c: 116: {
 11898                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11899  0247  086E               	movf	_Load,w
 11900  0248  3E3C               	addlw	60
 11901  0249  0086               	movwf	6
 11902  024A  3002               	movlw	2	; select bank4/5
 11903  024B  0087               	movwf	7
 11904  024C  0181               	clrf	1
 11905                           
 11906                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11907  024D  086E               	movf	_Load,w
 11908  024E  3E42               	addlw	66
 11909  024F  0086               	movwf	6
 11910  0250  3002               	movlw	2	; select bank4/5
 11911  0251  0087               	movwf	7
 11912  0252  300A               	movlw	10
 11913  0253  0201               	subwf	1,w
 11914  0254  1803               	skipnc
 11915  0255  2A5F               	goto	l9575
 11916                           
 11917                           ;OverLoad_B1.c: 119: {
 11918                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11919  0256  3001               	movlw	1
 11920  0257  00AD               	movwf	??_Load_Main
 11921  0258  086E               	movf	_Load,w
 11922  0259  3E42               	addlw	66
 11923  025A  0086               	movwf	6
 11924  025B  3002               	movlw	2	; select bank4/5
 11925  025C  0087               	movwf	7
 11926  025D  082D               	movf	??_Load_Main,w
 11927  025E  0781               	addwf	1,f
 11928  025F                     l9575:	
 11929                           
 11930                           ;OverLoad_B1.c: 121: }
 11931                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11932  025F  086E               	movf	_Load,w
 11933  0260  3E42               	addlw	66
 11934  0261  0086               	movwf	6
 11935  0262  3002               	movlw	2	; select bank4/5
 11936  0263  0087               	movwf	7
 11937  0264  300A               	movlw	10
 11938  0265  0201               	subwf	1,w
 11939  0266  1C03               	skipc
 11940  0267  2AC7               	goto	l9595
 11941                           
 11942                           ;OverLoad_B1.c: 123: {
 11943                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11944  0268  086E               	movf	_Load,w
 11945  0269  0086               	movwf	6
 11946  026A  3002               	movlw	2	; select bank4/5
 11947  026B  0087               	movwf	7
 11948  026C  1581               	bsf	1,3
 11949                           
 11950                           ;OverLoad_B1.c: 128: setDimmerLights_Clear(1,1);
 11951  026D  01A2               	clrf	setDimmerLights_Clear@command
 11952  026E  0AA2               	incf	setDimmerLights_Clear@command,f
 11953  026F  3001               	movlw	1
 11954  0270  31A6  26CD  3180   	fcall	_setDimmerLights_Clear
 11955                           
 11956                           ;OverLoad_B1.c: 132: ;;
 11957                           ;OverLoad_B1.c: 157: if(Load->StatusOn)
 11958  0273  0020               	movlb	0	; select bank0
 11959  0274  086E               	movf	_Load,w
 11960  0275  3E46               	addlw	70
 11961  0276  0086               	movwf	6
 11962  0277  3002               	movlw	2	; select bank4/5
 11963  0278  0087               	movwf	7
 11964  0279  1C01               	btfss	1,0
 11965  027A  2A8F               	goto	l9587
 11966                           
 11967                           ;OverLoad_B1.c: 158: {
 11968                           ;OverLoad_B1.c: 159: Load->StatusOn=0;
 11969  027B  086E               	movf	_Load,w
 11970  027C  3E46               	addlw	70
 11971  027D  0086               	movwf	6
 11972  027E  3002               	movlw	2	; select bank4/5
 11973  027F  0087               	movwf	7
 11974  0280  1001               	bcf	1,0
 11975                           
 11976                           ;OverLoad_B1.c: 160: Load->TotalLoad=Load->AD;
 11977  0281  086E               	movf	_Load,w
 11978  0282  3E2C               	addlw	44
 11979  0283  0086               	movwf	6
 11980  0284  3002               	movlw	2	; select bank4/5
 11981  0285  0087               	movwf	7
 11982  0286  086E               	movf	_Load,w
 11983  0287  3E06               	addlw	6
 11984  0288  0084               	movwf	4
 11985  0289  3002               	movlw	2	; select bank4/5
 11986  028A  0085               	movwf	5
 11987  028B  3F40               	moviw [0]fsr1
 11988  028C  3F80               	movwi [0]fsr0
 11989  028D  3F41               	moviw [1]fsr1
 11990  028E  3F81               	movwi [1]fsr0
 11991  028F                     l9587:	
 11992                           
 11993                           ;OverLoad_B1.c: 162: }
 11994                           ;OverLoad_B1.c: 164: if(Load->StatusOff)
 11995  028F  086E               	movf	_Load,w
 11996  0290  3E46               	addlw	70
 11997  0291  0086               	movwf	6
 11998  0292  3002               	movlw	2	; select bank4/5
 11999  0293  0087               	movwf	7
 12000  0294  1C81               	btfss	1,1
 12001  0295  2AC7               	goto	l9595
 12002                           
 12003                           ;OverLoad_B1.c: 165: {
 12004                           ;OverLoad_B1.c: 166: Load->StatusOff=0;
 12005  0296  086E               	movf	_Load,w
 12006  0297  3E46               	addlw	70
 12007  0298  0086               	movwf	6
 12008  0299  3002               	movlw	2	; select bank4/5
 12009  029A  0087               	movwf	7
 12010  029B  1081               	bcf	1,1
 12011                           
 12012                           ;OverLoad_B1.c: 167: Load->TotalLoad=Load->AD;
 12013  029C  086E               	movf	_Load,w
 12014  029D  3E2C               	addlw	44
 12015  029E  0086               	movwf	6
 12016  029F  3002               	movlw	2	; select bank4/5
 12017  02A0  0087               	movwf	7
 12018  02A1  086E               	movf	_Load,w
 12019  02A2  3E06               	addlw	6
 12020  02A3  0084               	movwf	4
 12021  02A4  3002               	movlw	2	; select bank4/5
 12022  02A5  0085               	movwf	5
 12023  02A6  3F40               	moviw [0]fsr1
 12024  02A7  3F80               	movwi [0]fsr0
 12025  02A8  3F41               	moviw [1]fsr1
 12026  02A9  3F81               	movwi [1]fsr0
 12027                           
 12028                           ;OverLoad_B1.c: 168: Load->JudgeValue=0x42*Load->LightsCount;
 12029  02AA  086E               	movf	_Load,w
 12030  02AB  3E3E               	addlw	62
 12031  02AC  0086               	movwf	6
 12032  02AD  3002               	movlw	2	; select bank4/5
 12033  02AE  0087               	movwf	7
 12034  02AF  0801               	movf	1,w
 12035  02B0  00AD               	movwf	??_Load_Main
 12036  02B1  01AE               	clrf	??_Load_Main+1
 12037  02B2  082D               	movf	??_Load_Main,w
 12038  02B3  00A0               	movwf	___wmul@multiplier
 12039  02B4  082E               	movf	??_Load_Main+1,w
 12040  02B5  00A1               	movwf	___wmul@multiplier+1
 12041  02B6  3042               	movlw	66
 12042  02B7  00A2               	movwf	___wmul@multiplicand
 12043  02B8  3000               	movlw	0
 12044  02B9  00A3               	movwf	___wmul@multiplicand+1
 12045  02BA  3198  20C8  3180   	fcall	___wmul
 12046  02BD  0020               	movlb	0	; select bank0
 12047  02BE  086E               	movf	_Load,w
 12048  02BF  3E36               	addlw	54
 12049  02C0  0086               	movwf	6
 12050  02C1  3002               	movlw	2	; select bank4/5
 12051  02C2  0087               	movwf	7
 12052  02C3  0820               	movf	?___wmul,w
 12053  02C4  3FC0               	movwi [0]fsr1
 12054  02C5  0821               	movf	?___wmul+1,w
 12055  02C6  3FC1               	movwi [1]fsr1
 12056  02C7                     l9595:	
 12057                           
 12058                           ;OverLoad_B1.c: 169: }
 12059                           ;OverLoad_B1.c: 170: }
 12060                           ;OverLoad_B1.c: 171: }
 12061                           ;OverLoad_B1.c: 172: }
 12062                           ;OverLoad_B1.c: 173: setLoad_AH_AL_Restore();
 12063  02C7  3199  2169  3180   	fcall	_setLoad_AH_AL_Restore
 12064                           
 12065                           ;OverLoad_B1.c: 175: Product->Data[2]=(Load->AD >> 8);
 12066  02CA  0020               	movlb	0	; select bank0
 12067  02CB  086E               	movf	_Load,w
 12068  02CC  3E2C               	addlw	44
 12069  02CD  0086               	movwf	6
 12070  02CE  3002               	movlw	2	; select bank4/5
 12071  02CF  0087               	movwf	7
 12072  02D0  3F40               	moviw [0]fsr1
 12073  02D1  00AD               	movwf	??_Load_Main
 12074  02D2  3F41               	moviw [1]fsr1
 12075  02D3  00AE               	movwf	??_Load_Main+1
 12076  02D4  082E               	movf	??_Load_Main+1,w
 12077  02D5  00AF               	movwf	??_Load_Main+2
 12078  02D6  086F               	movf	_Product,w
 12079  02D7  3E02               	addlw	2
 12080  02D8  0086               	movwf	6
 12081  02D9  3001               	movlw	1	; select bank2/3
 12082  02DA  0087               	movwf	7
 12083  02DB  082F               	movf	??_Load_Main+2,w
 12084  02DC  0081               	movwf	1
 12085                           
 12086                           ;OverLoad_B1.c: 176: Product->Data[3]=Load->AD;
 12087  02DD  086E               	movf	_Load,w
 12088  02DE  3E2C               	addlw	44
 12089  02DF  0086               	movwf	6
 12090  02E0  3002               	movlw	2	; select bank4/5
 12091  02E1  0087               	movwf	7
 12092  02E2  0801               	movf	1,w
 12093  02E3  00AD               	movwf	??_Load_Main
 12094  02E4  086F               	movf	_Product,w
 12095  02E5  3E03               	addlw	3
 12096  02E6  0086               	movwf	6
 12097  02E7  3001               	movlw	1	; select bank2/3
 12098  02E8  0087               	movwf	7
 12099  02E9  082D               	movf	??_Load_Main,w
 12100  02EA  0081               	movwf	1
 12101                           
 12102                           ;OverLoad_B1.c: 177: Product->Data[8]=Load->LightsCount;
 12103  02EB  086E               	movf	_Load,w
 12104  02EC  3E3E               	addlw	62
 12105  02ED  0086               	movwf	6
 12106  02EE  3002               	movlw	2	; select bank4/5
 12107  02EF  0087               	movwf	7
 12108  02F0  0801               	movf	1,w
 12109  02F1  00AD               	movwf	??_Load_Main
 12110  02F2  086F               	movf	_Product,w
 12111  02F3  3E08               	addlw	8
 12112  02F4  0086               	movwf	6
 12113  02F5  3001               	movlw	1	; select bank2/3
 12114  02F6  0087               	movwf	7
 12115  02F7  082D               	movf	??_Load_Main,w
 12116  02F8  0081               	movwf	1
 12117                           
 12118                           ;OverLoad_B1.c: 178: Product->Data[10]=Load->TotalLoad;
 12119  02F9  086E               	movf	_Load,w
 12120  02FA  3E06               	addlw	6
 12121  02FB  0086               	movwf	6
 12122  02FC  3002               	movlw	2	; select bank4/5
 12123  02FD  0087               	movwf	7
 12124  02FE  0801               	movf	1,w
 12125  02FF  00AD               	movwf	??_Load_Main
 12126  0300  086F               	movf	_Product,w
 12127  0301  3E0A               	addlw	10
 12128  0302  0086               	movwf	6
 12129  0303  3001               	movlw	1	; select bank2/3
 12130  0304  0087               	movwf	7
 12131  0305  082D               	movf	??_Load_Main,w
 12132  0306  0081               	movwf	1
 12133                           
 12134                           ;OverLoad_B1.c: 179: Product->Data[16]=(Load->JudgeValue >> 8);
 12135  0307  086E               	movf	_Load,w
 12136  0308  3E36               	addlw	54
 12137  0309  0086               	movwf	6
 12138  030A  3002               	movlw	2	; select bank4/5
 12139  030B  0087               	movwf	7
 12140  030C  3F40               	moviw [0]fsr1
 12141  030D  00AD               	movwf	??_Load_Main
 12142  030E  3F41               	moviw [1]fsr1
 12143  030F  00AE               	movwf	??_Load_Main+1
 12144  0310  082E               	movf	??_Load_Main+1,w
 12145  0311  00AF               	movwf	??_Load_Main+2
 12146  0312  086F               	movf	_Product,w
 12147  0313  3E10               	addlw	16
 12148  0314  0086               	movwf	6
 12149  0315  3001               	movlw	1	; select bank2/3
 12150  0316  0087               	movwf	7
 12151  0317  082F               	movf	??_Load_Main+2,w
 12152  0318  0081               	movwf	1
 12153                           
 12154                           ;OverLoad_B1.c: 180: Product->Data[17]=Load->JudgeValue;
 12155  0319  086E               	movf	_Load,w
 12156  031A  3E36               	addlw	54
 12157  031B  0086               	movwf	6
 12158  031C  3002               	movlw	2	; select bank4/5
 12159  031D  0087               	movwf	7
 12160  031E  0801               	movf	1,w
 12161  031F  00AD               	movwf	??_Load_Main
 12162  0320  086F               	movf	_Product,w
 12163  0321  3E11               	addlw	17
 12164  0322  0086               	movwf	6
 12165  0323  3001               	movlw	1	; select bank2/3
 12166  0324  0087               	movwf	7
 12167  0325  082D               	movf	??_Load_Main,w
 12168  0326  0081               	movwf	1
 12169                           
 12170                           ;OverLoad_B1.c: 181: Product->Data[18]=Load->ErrorStatus;
 12171  0327  086E               	movf	_Load,w
 12172  0328  3E05               	addlw	5
 12173  0329  0086               	movwf	6
 12174  032A  3002               	movlw	2	; select bank4/5
 12175  032B  0087               	movwf	7
 12176  032C  0801               	movf	1,w
 12177  032D  00AD               	movwf	??_Load_Main
 12178  032E  086F               	movf	_Product,w
 12179  032F  3E12               	addlw	18
 12180  0330  0086               	movwf	6
 12181  0331  3001               	movlw	1	; select bank2/3
 12182  0332  0087               	movwf	7
 12183  0333  082D               	movf	??_Load_Main,w
 12184  0334  0081               	movwf	1
 12185                           
 12186                           ;OverLoad_B1.c: 182: Product->Data[19]=Load->Count;
 12187  0335  086E               	movf	_Load,w
 12188  0336  3E3A               	addlw	58
 12189  0337  0086               	movwf	6
 12190  0338  3002               	movlw	2	; select bank4/5
 12191  0339  0087               	movwf	7
 12192  033A  0801               	movf	1,w
 12193  033B  00AD               	movwf	??_Load_Main
 12194  033C  086F               	movf	_Product,w
 12195  033D  3E13               	addlw	19
 12196  033E  0086               	movwf	6
 12197  033F  3001               	movlw	1	; select bank2/3
 12198  0340  0087               	movwf	7
 12199  0341  082D               	movf	??_Load_Main,w
 12200  0342  0081               	movwf	1
 12201                           
 12202                           ;OverLoad_B1.c: 185: }
 12203                           ;OverLoad_B1.c: 186: }
 12204  0343  0008               	return
 12205  0344                     l9613:	
 12206                           
 12207                           ;OverLoad_B1.c: 187: else
 12208                           ;OverLoad_B1.c: 188: {
 12209                           ;OverLoad_B1.c: 189: if(Load->GO)
 12210  0344  086E               	movf	_Load,w
 12211  0345  0086               	movwf	6
 12212  0346  3002               	movlw	2	; select bank4/5
 12213  0347  0087               	movwf	7
 12214  0348  1C81               	btfss	1,1
 12215  0349  2B6D               	goto	l9625
 12216                           
 12217                           ;OverLoad_B1.c: 190: {
 12218                           ;OverLoad_B1.c: 191: if(!Load->LightsON)
 12219  034A  086E               	movf	_Load,w
 12220  034B  0086               	movwf	6
 12221  034C  3002               	movlw	2	; select bank4/5
 12222  034D  0087               	movwf	7
 12223  034E  1901               	btfsc	1,2
 12224  034F  2B5A               	goto	l9619
 12225                           
 12226                           ;OverLoad_B1.c: 192: {
 12227                           ;OverLoad_B1.c: 193: Load->LightsON=1;
 12228  0350  086E               	movf	_Load,w
 12229  0351  0086               	movwf	6
 12230  0352  3002               	movlw	2	; select bank4/5
 12231  0353  0087               	movwf	7
 12232  0354  1501               	bsf	1,2
 12233                           
 12234                           ;OverLoad_B1.c: 194: Load->Safe=0;
 12235  0355  086E               	movf	_Load,w
 12236  0356  0086               	movwf	6
 12237  0357  3002               	movlw	2	; select bank4/5
 12238  0358  0087               	movwf	7
 12239  0359  1181               	bcf	1,3
 12240  035A                     l9619:	
 12241                           
 12242                           ;OverLoad_B1.c: 195: }
 12243                           ;OverLoad_B1.c: 196: if(getTemp_Safe() && getPF_Safe())
 12244  035A  31A5  250A  3180   	fcall	_getTemp_Safe
 12245  035D  3A00               	xorlw	0
 12246  035E  1903               	skipnz
 12247  035F  0008               	return
 12248  0360  31A5  2503  3180   	fcall	_getPF_Safe
 12249  0363  3A00               	xorlw	0
 12250  0364  1903               	skipnz
 12251  0365  0008               	return
 12252                           
 12253                           ;OverLoad_B1.c: 197: {
 12254                           ;OverLoad_B1.c: 198: Load->ADtoGO=1;
 12255  0366  0020               	movlb	0	; select bank0
 12256  0367  086E               	movf	_Load,w
 12257  0368  0086               	movwf	6
 12258  0369  3002               	movlw	2	; select bank4/5
 12259  036A  0087               	movwf	7
 12260  036B  1601               	bsf	1,4
 12261                           
 12262                           ;OverLoad_B1.c: 199: }
 12263                           ;OverLoad_B1.c: 200: }
 12264  036C  0008               	return
 12265  036D                     l9625:	
 12266                           
 12267                           ;OverLoad_B1.c: 201: else
 12268                           ;OverLoad_B1.c: 202: {
 12269                           ;OverLoad_B1.c: 203: if(Load->LightsON)
 12270  036D  086E               	movf	_Load,w
 12271  036E  0086               	movwf	6
 12272  036F  3002               	movlw	2	; select bank4/5
 12273  0370  0087               	movwf	7
 12274  0371  1D01               	btfss	1,2
 12275  0372  0008               	return
 12276                           
 12277                           ;OverLoad_B1.c: 204: {
 12278                           ;OverLoad_B1.c: 205: Load->LightsON=0;
 12279  0373  086E               	movf	_Load,w
 12280  0374  0086               	movwf	6
 12281  0375  3002               	movlw	2	; select bank4/5
 12282  0376  0087               	movwf	7
 12283  0377  1101               	bcf	1,2
 12284                           
 12285                           ;OverLoad_B1.c: 206: Load->Safe=1;
 12286  0378  086E               	movf	_Load,w
 12287  0379  0086               	movwf	6
 12288  037A  3002               	movlw	2	; select bank4/5
 12289  037B  0087               	movwf	7
 12290  037C  1581               	bsf	1,3
 12291                           
 12292                           ;OverLoad_B1.c: 207: Load->ErrorCount=0;
 12293  037D  086E               	movf	_Load,w
 12294  037E  3E3C               	addlw	60
 12295  037F  0086               	movwf	6
 12296  0380  3002               	movlw	2	; select bank4/5
 12297  0381  0087               	movwf	7
 12298  0382  0181               	clrf	1
 12299                           
 12300                           ;OverLoad_B1.c: 208: Load->Count=0;
 12301  0383  086E               	movf	_Load,w
 12302  0384  3E3A               	addlw	58
 12303  0385  0086               	movwf	6
 12304  0386  3002               	movlw	2	; select bank4/5
 12305  0387  0087               	movwf	7
 12306  0388  0181               	clrf	1
 12307                           
 12308                           ;OverLoad_B1.c: 209: Load->TotalLoad=0;
 12309  0389  086E               	movf	_Load,w
 12310  038A  3E06               	addlw	6
 12311  038B  0086               	movwf	6
 12312  038C  3002               	movlw	2	; select bank4/5
 12313  038D  0087               	movwf	7
 12314  038E  3000               	movlw	0
 12315  038F  3FC0               	movwi [0]fsr1
 12316  0390  3FC1               	movwi [1]fsr1
 12317                           
 12318                           ;OverLoad_B1.c: 210: Load->NumberCount=0;
 12319  0391  086E               	movf	_Load,w
 12320  0392  3E3F               	addlw	63
 12321  0393  0086               	movwf	6
 12322  0394  3002               	movlw	2	; select bank4/5
 12323  0395  0087               	movwf	7
 12324  0396  0181               	clrf	1
 12325                           
 12326                           ;OverLoad_B1.c: 211: Load->StatusOn=0;
 12327  0397  086E               	movf	_Load,w
 12328  0398  3E46               	addlw	70
 12329  0399  0086               	movwf	6
 12330  039A  3002               	movlw	2	; select bank4/5
 12331  039B  0087               	movwf	7
 12332  039C  1001               	bcf	1,0
 12333                           
 12334                           ;OverLoad_B1.c: 212: Load->StatusOff=0;
 12335  039D  086E               	movf	_Load,w
 12336  039E  3E46               	addlw	70
 12337  039F  0086               	movwf	6
 12338  03A0  3002               	movlw	2	; select bank4/5
 12339  03A1  0087               	movwf	7
 12340  03A2  1081               	bcf	1,1
 12341                           
 12342                           ;OverLoad_B1.c: 213: Load->AD=0;
 12343  03A3  086E               	movf	_Load,w
 12344  03A4  3E2C               	addlw	44
 12345  03A5  0086               	movwf	6
 12346  03A6  3002               	movlw	2	; select bank4/5
 12347  03A7  0087               	movwf	7
 12348  03A8  3000               	movlw	0
 12349  03A9  3FC0               	movwi [0]fsr1
 12350  03AA  3FC1               	movwi [1]fsr1
 12351                           
 12352                           ;OverLoad_B1.c: 214: setLoad_AH_AL_Restore();
 12353  03AB  3199  2169  3180   	fcall	_setLoad_AH_AL_Restore
 12354                           
 12355                           ;OverLoad_B1.c: 218: setDimmerLights_Clear(1,1);
 12356  03AE  0020               	movlb	0	; select bank0
 12357  03AF  01A2               	clrf	setDimmerLights_Clear@command
 12358  03B0  0AA2               	incf	setDimmerLights_Clear@command,f
 12359  03B1  3001               	movlw	1
 12360  03B2  31A6  26CD  3180   	fcall	_setDimmerLights_Clear
 12361                           
 12362                           ;OverLoad_B1.c: 222: ;;
 12363                           ;OverLoad_B1.c: 247: Product->Data[2]=(Load->AD >> 8);
 12364  03B5  0020               	movlb	0	; select bank0
 12365  03B6  086E               	movf	_Load,w
 12366  03B7  3E2C               	addlw	44
 12367  03B8  0086               	movwf	6
 12368  03B9  3002               	movlw	2	; select bank4/5
 12369  03BA  0087               	movwf	7
 12370  03BB  3F40               	moviw [0]fsr1
 12371  03BC  00AD               	movwf	??_Load_Main
 12372  03BD  3F41               	moviw [1]fsr1
 12373  03BE  00AE               	movwf	??_Load_Main+1
 12374  03BF  082E               	movf	??_Load_Main+1,w
 12375  03C0  00AF               	movwf	??_Load_Main+2
 12376  03C1  086F               	movf	_Product,w
 12377  03C2  3E02               	addlw	2
 12378  03C3  0086               	movwf	6
 12379  03C4  3001               	movlw	1	; select bank2/3
 12380  03C5  0087               	movwf	7
 12381  03C6  082F               	movf	??_Load_Main+2,w
 12382  03C7  0081               	movwf	1
 12383                           
 12384                           ;OverLoad_B1.c: 248: Product->Data[3]=Load->AD;
 12385  03C8  086E               	movf	_Load,w
 12386  03C9  3E2C               	addlw	44
 12387  03CA  0086               	movwf	6
 12388  03CB  3002               	movlw	2	; select bank4/5
 12389  03CC  0087               	movwf	7
 12390  03CD  0801               	movf	1,w
 12391  03CE  00AD               	movwf	??_Load_Main
 12392  03CF  086F               	movf	_Product,w
 12393  03D0  3E03               	addlw	3
 12394  03D1  0086               	movwf	6
 12395  03D2  3001               	movlw	1	; select bank2/3
 12396  03D3  0087               	movwf	7
 12397  03D4  082D               	movf	??_Load_Main,w
 12398  03D5  0081               	movwf	1
 12399                           
 12400                           ;OverLoad_B1.c: 253: Product->Data[8]=Load->NumberCount;
 12401  03D6  086E               	movf	_Load,w
 12402  03D7  3E3F               	addlw	63
 12403  03D8  0086               	movwf	6
 12404  03D9  3002               	movlw	2	; select bank4/5
 12405  03DA  0087               	movwf	7
 12406  03DB  0801               	movf	1,w
 12407  03DC  00AD               	movwf	??_Load_Main
 12408  03DD  086F               	movf	_Product,w
 12409  03DE  3E08               	addlw	8
 12410  03DF  0086               	movwf	6
 12411  03E0  3001               	movlw	1	; select bank2/3
 12412  03E1  0087               	movwf	7
 12413  03E2  082D               	movf	??_Load_Main,w
 12414  03E3  0081               	movwf	1
 12415                           
 12416                           ;OverLoad_B1.c: 254: Product->Data[10]=Load->TotalLoad;
 12417  03E4  086E               	movf	_Load,w
 12418  03E5  3E06               	addlw	6
 12419  03E6  0086               	movwf	6
 12420  03E7  3002               	movlw	2	; select bank4/5
 12421  03E8  0087               	movwf	7
 12422  03E9  0801               	movf	1,w
 12423  03EA  00AD               	movwf	??_Load_Main
 12424  03EB  086F               	movf	_Product,w
 12425  03EC  3E0A               	addlw	10
 12426  03ED  0086               	movwf	6
 12427  03EE  3001               	movlw	1	; select bank2/3
 12428  03EF  0087               	movwf	7
 12429  03F0  082D               	movf	??_Load_Main,w
 12430  03F1  0081               	movwf	1
 12431                           
 12432                           ;OverLoad_B1.c: 255: Product->Data[16]=(Load->JudgeValue >> 8);
 12433  03F2  086E               	movf	_Load,w
 12434  03F3  3E36               	addlw	54
 12435  03F4  0086               	movwf	6
 12436  03F5  3002               	movlw	2	; select bank4/5
 12437  03F6  0087               	movwf	7
 12438  03F7  3F40               	moviw [0]fsr1
 12439  03F8  00AD               	movwf	??_Load_Main
 12440  03F9  3F41               	moviw [1]fsr1
 12441  03FA  00AE               	movwf	??_Load_Main+1
 12442  03FB  082E               	movf	??_Load_Main+1,w
 12443  03FC  00AF               	movwf	??_Load_Main+2
 12444  03FD  086F               	movf	_Product,w
 12445  03FE  3E10               	addlw	16
 12446  03FF  0086               	movwf	6
 12447  0400  3001               	movlw	1	; select bank2/3
 12448  0401  0087               	movwf	7
 12449  0402  082F               	movf	??_Load_Main+2,w
 12450  0403  0081               	movwf	1
 12451                           
 12452                           ;OverLoad_B1.c: 256: Product->Data[17]=Load->JudgeValue;
 12453  0404  086E               	movf	_Load,w
 12454  0405  3E36               	addlw	54
 12455  0406  0086               	movwf	6
 12456  0407  3002               	movlw	2	; select bank4/5
 12457  0408  0087               	movwf	7
 12458  0409  0801               	movf	1,w
 12459  040A  00AD               	movwf	??_Load_Main
 12460  040B  086F               	movf	_Product,w
 12461  040C  3E11               	addlw	17
 12462  040D  0086               	movwf	6
 12463  040E  3001               	movlw	1	; select bank2/3
 12464  040F  0087               	movwf	7
 12465  0410  082D               	movf	??_Load_Main,w
 12466  0411  0081               	movwf	1
 12467                           
 12468                           ;OverLoad_B1.c: 257: Product->Data[18]=Load->ErrorStatus;
 12469  0412  086E               	movf	_Load,w
 12470  0413  3E05               	addlw	5
 12471  0414  0086               	movwf	6
 12472  0415  3002               	movlw	2	; select bank4/5
 12473  0416  0087               	movwf	7
 12474  0417  0801               	movf	1,w
 12475  0418  00AD               	movwf	??_Load_Main
 12476  0419  086F               	movf	_Product,w
 12477  041A  3E12               	addlw	18
 12478  041B  0086               	movwf	6
 12479  041C  3001               	movlw	1	; select bank2/3
 12480  041D  0087               	movwf	7
 12481  041E  082D               	movf	??_Load_Main,w
 12482  041F  0081               	movwf	1
 12483                           
 12484                           ;OverLoad_B1.c: 258: Product->Data[19]=Load->Count;
 12485  0420  086E               	movf	_Load,w
 12486  0421  3E3A               	addlw	58
 12487  0422  0086               	movwf	6
 12488  0423  3002               	movlw	2	; select bank4/5
 12489  0424  0087               	movwf	7
 12490  0425  0801               	movf	1,w
 12491  0426  00AD               	movwf	??_Load_Main
 12492  0427  086F               	movf	_Product,w
 12493  0428  3E13               	addlw	19
 12494  0429  0086               	movwf	6
 12495  042A  3001               	movlw	1	; select bank2/3
 12496  042B  0087               	movwf	7
 12497  042C  082D               	movf	??_Load_Main,w
 12498  042D  0081               	movwf	1
 12499  042E  0008               	return
 12500  042F                     __end_of_Load_Main:	
 12501                           
 12502                           	psect	text61
 12503  1003                     __ptext61:	
 12504 ;; *************** function _setLoad_Exceptions *****************
 12505 ;; Defined at:
 12506 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  command         1    wreg     unsigned char 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  command         1   12[BANK0 ] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;		None               void
 12513 ;; Registers used:
 12514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;Total ram usage:        2 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    8
 12527 ;; This function calls:
 12528 ;;		_DimmerLights_Exceptions
 12529 ;;		_setLED
 12530 ;;		_setRF_Enable
 12531 ;;		_setSw_Enable
 12532 ;; This function is called by:
 12533 ;;		_Load_Main
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _setLoad_Exceptions
 12539  1003                     _setLoad_Exceptions:	
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12543                           ;setLoad_Exceptions@command stored from wreg
 12544  1003  0020               	movlb	0	; select bank0
 12545  1004  00AC               	movwf	setLoad_Exceptions@command
 12546                           
 12547                           ;OverLoad_B1.c: 268: Load->ERROR=command;
 12548  1005  086E               	movf	_Load,w
 12549  1006  0086               	movwf	6
 12550  1007  3002               	movlw	2	; select bank4/5
 12551  1008  0087               	movwf	7
 12552  1009  082C               	movf	setLoad_Exceptions@command,w
 12553  100A  1281               	bcf	1,5
 12554  100B  1D03               	skipz
 12555  100C  1681               	bsf	1,5
 12556                           
 12557                           ;OverLoad_B1.c: 269: Load->Safe=(~command) & 0x01;
 12558  100D  092C               	comf	setLoad_Exceptions@command,w
 12559  100E  3901               	andlw	1
 12560  100F  00AB               	movwf	??_setLoad_Exceptions
 12561  1010  086E               	movf	_Load,w
 12562  1011  0086               	movwf	6
 12563  1012  3002               	movlw	2	; select bank4/5
 12564  1013  0087               	movwf	7
 12565  1014  0DAB               	rlf	??_setLoad_Exceptions,f
 12566  1015  0DAB               	rlf	??_setLoad_Exceptions,f
 12567  1016  0DAB               	rlf	??_setLoad_Exceptions,f
 12568  1017  0801               	movf	1,w
 12569  1018  062B               	xorwf	??_setLoad_Exceptions,w
 12570  1019  39F7               	andlw	-9
 12571  101A  062B               	xorwf	??_setLoad_Exceptions,w
 12572  101B  0081               	movwf	1
 12573                           
 12574                           ;OverLoad_B1.c: 270: Load->ErrorStatus=command;
 12575  101C  082C               	movf	setLoad_Exceptions@command,w
 12576  101D  00AB               	movwf	??_setLoad_Exceptions
 12577  101E  086E               	movf	_Load,w
 12578  101F  3E05               	addlw	5
 12579  1020  0086               	movwf	6
 12580  1021  3002               	movlw	2	; select bank4/5
 12581  1022  0087               	movwf	7
 12582  1023  082B               	movf	??_setLoad_Exceptions,w
 12583  1024  0081               	movwf	1
 12584                           
 12585                           ;OverLoad_B1.c: 272: if(command)
 12586  1025  082C               	movf	setLoad_Exceptions@command,w
 12587  1026  1903               	btfsc	3,2
 12588  1027  2833               	goto	l1823
 12589                           
 12590                           ;OverLoad_B1.c: 273: {
 12591                           ;OverLoad_B1.c: 274: DimmerLights_Exceptions(2);
 12592  1028  3002               	movlw	2
 12593  1029  3190  204D  3190   	fcall	_DimmerLights_Exceptions
 12594                           
 12595                           ;OverLoad_B1.c: 276: setLED(2,1);
 12596  102C  0020               	movlb	0	; select bank0
 12597  102D  01A2               	clrf	setLED@command
 12598  102E  0AA2               	incf	setLED@command,f
 12599  102F  3002               	movlw	2
 12600  1030  3191  215E  3190   	fcall	_setLED
 12601  1033                     l1823:	
 12602                           
 12603                           ;OverLoad_B1.c: 278: }
 12604                           ;OverLoad_B1.c: 279: setLED(99,command+10);
 12605  1033  0020               	movlb	0	; select bank0
 12606  1034  082C               	movf	setLoad_Exceptions@command,w
 12607  1035  3E0A               	addlw	10
 12608  1036  00AB               	movwf	??_setLoad_Exceptions
 12609  1037  082B               	movf	??_setLoad_Exceptions,w
 12610  1038  00A2               	movwf	setLED@command
 12611  1039  3063               	movlw	99
 12612  103A  3191  215E  3190   	fcall	_setLED
 12613                           
 12614                           ;OverLoad_B1.c: 281: setSw_Enable((~command) & 0x01);
 12615  103D  0020               	movlb	0	; select bank0
 12616  103E  092C               	comf	setLoad_Exceptions@command,w
 12617  103F  3901               	andlw	1
 12618  1040  3198  2066  3190   	fcall	_setSw_Enable
 12619                           
 12620                           ;OverLoad_B1.c: 283: setRF_Enable(1,(~command) & 0x01);
 12621  1043  0020               	movlb	0	; select bank0
 12622  1044  092C               	comf	setLoad_Exceptions@command,w
 12623  1045  3901               	andlw	1
 12624  1046  00AB               	movwf	??_setLoad_Exceptions
 12625  1047  082B               	movf	??_setLoad_Exceptions,w
 12626  1048  00A2               	movwf	setRF_Enable@command
 12627  1049  3001               	movlw	1
 12628  104A  319A  2222         	fcall	_setRF_Enable
 12629  104C  0008               	return
 12630  104D                     __end_of_setLoad_Exceptions:	
 12631                           
 12632                           	psect	text62
 12633  1866                     __ptext62:	
 12634 ;; *************** function _setSw_Enable *****************
 12635 ;; Defined at:
 12636 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12637 ;; Parameters:    Size  Location     Type
 12638 ;;  command         1    wreg     unsigned char 
 12639 ;; Auto vars:     Size  Location     Type
 12640 ;;  command         1    2[BANK0 ] unsigned char 
 12641 ;; Return value:  Size  Location     Type
 12642 ;;		None               void
 12643 ;; Registers used:
 12644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;Total ram usage:        1 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; Hardware stack levels required when called:    5
 12657 ;; This function calls:
 12658 ;;		_SwPointSelect
 12659 ;; This function is called by:
 12660 ;;		_MainT
 12661 ;;		_setLoad_Exceptions
 12662 ;;		_setOverTemp_Exceptions
 12663 ;;		_setPowerFault_Exceptions
 12664 ;; This function uses a non-reentrant model
 12665 ;;
 12666                           
 12667                           
 12668                           ;psect for function _setSw_Enable
 12669  1866                     _setSw_Enable:	
 12670                           
 12671                           ;incstack = 0
 12672                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12673                           ;setSw_Enable@command stored from wreg
 12674  1866  0020               	movlb	0	; select bank0
 12675  1867  00A2               	movwf	setSw_Enable@command
 12676                           
 12677                           ;Switch_B1.c: 90: SwPointSelect(1);
 12678  1868  3001               	movlw	1
 12679  1869  31A5  2565         	fcall	_SwPointSelect
 12680                           
 12681                           ;Switch_B1.c: 91: Sw->Enable=command;
 12682  186B  0020               	movlb	0	; select bank0
 12683  186C  086D               	movf	_Sw,w
 12684  186D  0086               	movwf	6
 12685  186E  3001               	movlw	1	; select bank2/3
 12686  186F  0087               	movwf	7
 12687  1870  0822               	movf	setSw_Enable@command,w
 12688  1871  1001               	bcf	1,0
 12689  1872  1D03               	skipz
 12690  1873  1401               	bsf	1,0
 12691  1874  0008               	return
 12692  1875                     __end_of_setSw_Enable:	
 12693                           
 12694                           	psect	text63
 12695  1A22                     __ptext63:	
 12696 ;; *************** function _setRF_Enable *****************
 12697 ;; Defined at:
 12698 ;;		line 185 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  rf              1    wreg     unsigned char 
 12701 ;;  command         1    2[BANK0 ] unsigned char 
 12702 ;; Auto vars:     Size  Location     Type
 12703 ;;  rf              1    3[BANK0 ] unsigned char 
 12704 ;; Return value:  Size  Location     Type
 12705 ;;		None               void
 12706 ;; Registers used:
 12707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12708 ;; Tracked objects:
 12709 ;;		On entry : 0/0
 12710 ;;		On exit  : 0/0
 12711 ;;		Unchanged: 0/0
 12712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;Total ram usage:        2 bytes
 12718 ;; Hardware stack levels used:    1
 12719 ;; Hardware stack levels required when called:    5
 12720 ;; This function calls:
 12721 ;;		_RfPointSelect
 12722 ;;		_setINT_GO
 12723 ;; This function is called by:
 12724 ;;		_MainT
 12725 ;;		_setLoad_Exceptions
 12726 ;;		_setOverTemp_Exceptions
 12727 ;;		_setPowerFault_Exceptions
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           
 12732                           ;psect for function _setRF_Enable
 12733  1A22                     _setRF_Enable:	
 12734                           
 12735                           ;incstack = 0
 12736                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12737                           ;setRF_Enable@rf stored from wreg
 12738  1A22  0020               	movlb	0	; select bank0
 12739  1A23  00A3               	movwf	setRF_Enable@rf
 12740                           
 12741                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
 12742  1A24  0823               	movf	setRF_Enable@rf,w
 12743  1A25  31A5  2570  319A   	fcall	_RfPointSelect
 12744                           
 12745                           ;RF_Control_B1.c: 188: RF->Enable=command;
 12746  1A28  087B               	movf	_RF,w
 12747  1A29  0086               	movwf	6
 12748  1A2A  0187               	clrf	7
 12749  1A2B  0020               	movlb	0	; select bank0
 12750  1A2C  0822               	movf	setRF_Enable@command,w
 12751  1A2D  1001               	bcf	1,0
 12752  1A2E  1D03               	skipz
 12753  1A2F  1401               	bsf	1,0
 12754                           
 12755                           ;RF_Control_B1.c: 189: RF->Learn=0;
 12756  1A30  087B               	movf	_RF,w
 12757  1A31  0086               	movwf	6
 12758  1A32  0187               	clrf	7
 12759  1A33  1301               	bcf	1,6
 12760                           
 12761                           ;RF_Control_B1.c: 190: RF->TransceiveGO=0;
 12762  1A34  087B               	movf	_RF,w
 12763  1A35  0086               	movwf	6
 12764  1A36  0187               	clrf	7
 12765  1A37  1101               	bcf	1,2
 12766                           
 12767                           ;RF_Control_B1.c: 191: RF->RxStatus=0;
 12768  1A38  087B               	movf	_RF,w
 12769  1A39  0086               	movwf	6
 12770  1A3A  0187               	clrf	7
 12771  1A3B  1181               	bcf	1,3
 12772                           
 12773                           ;RF_Control_B1.c: 192: RF->ReceiveGO=0;
 12774  1A3C  087B               	movf	_RF,w
 12775  1A3D  0086               	movwf	6
 12776  1A3E  0187               	clrf	7
 12777  1A3F  1081               	bcf	1,1
 12778                           
 12779                           ;RF_Control_B1.c: 193: RF->DebounceTime=0;
 12780  1A40  0A7B               	incf	_RF,w
 12781  1A41  0086               	movwf	6
 12782  1A42  0187               	clrf	7
 12783  1A43  0181               	clrf	1
 12784                           
 12785                           ;RF_Control_B1.c: 194: RF->Debounce=0;
 12786  1A44  087B               	movf	_RF,w
 12787  1A45  0086               	movwf	6
 12788  1A46  0187               	clrf	7
 12789  1A47  1281               	bcf	1,5
 12790                           
 12791                           ;RF_Control_B1.c: 195: setINT_GO(0);
 12792  1A48  3000               	movlw	0
 12793  1A49  31A5  2528         	fcall	_setINT_GO
 12794  1A4B  0008               	return
 12795  1A4C                     __end_of_setRF_Enable:	
 12796                           
 12797                           	psect	text64
 12798  2528                     __ptext64:	
 12799 ;; *************** function _setINT_GO *****************
 12800 ;; Defined at:
 12801 ;;		line 299 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;  command         1    wreg     unsigned char 
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;  command         1    0[BANK0 ] unsigned char 
 12806 ;; Return value:  Size  Location     Type
 12807 ;;		None               void
 12808 ;; Registers used:
 12809 ;;		wreg
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;Total ram usage:        1 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    4
 12822 ;; This function calls:
 12823 ;;		Nothing
 12824 ;; This function is called by:
 12825 ;;		_setRF_Main
 12826 ;;		_setRF_Enable
 12827 ;;		_RF_RxDisable
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           
 12832                           ;psect for function _setINT_GO
 12833  2528                     _setINT_GO:	
 12834                           
 12835                           ;incstack = 0
 12836                           ; Regs used in _setINT_GO: [wreg]
 12837                           ;setINT_GO@command stored from wreg
 12838  2528  0020               	movlb	0	; select bank0
 12839  2529  00A0               	movwf	setINT_GO@command
 12840                           
 12841                           ;MCU_B1.c: 301: INTF=0;
 12842  252A  108B               	bcf	11,1	;volatile
 12843                           
 12844                           ;MCU_B1.c: 302: INTE=command;
 12845  252B  1C20               	btfss	setINT_GO@command,0
 12846  252C  2D2F               	goto	u7830
 12847  252D  160B               	bsf	11,4	;volatile
 12848  252E  0008               	return
 12849  252F                     u7830:	
 12850  252F  120B               	bcf	11,4	;volatile
 12851  2530  0008               	return
 12852  2531                     __end_of_setINT_GO:	
 12853                           
 12854                           	psect	text65
 12855  104D                     __ptext65:	
 12856 ;; *************** function _DimmerLights_Exceptions *****************
 12857 ;; Defined at:
 12858 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;  status          1    wreg     unsigned char 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;  status          1   10[BANK0 ] unsigned char 
 12863 ;; Return value:  Size  Location     Type
 12864 ;;		None               void
 12865 ;; Registers used:
 12866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;Total ram usage:        1 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    7
 12879 ;; This function calls:
 12880 ;;		_getDimmerLights_StatusFlag
 12881 ;;		_setBuz
 12882 ;;		_setDimmerLights_ERROR
 12883 ;;		_setDimmerLights_TriggerERROR
 12884 ;; This function is called by:
 12885 ;;		_setLoad_Exceptions
 12886 ;;		_setOverTemp_Exceptions
 12887 ;;		_setPowerFault_Exceptions
 12888 ;; This function uses a non-reentrant model
 12889 ;;
 12890                           
 12891                           
 12892                           ;psect for function _DimmerLights_Exceptions
 12893  104D                     _DimmerLights_Exceptions:	
 12894                           
 12895                           ;incstack = 0
 12896                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12897                           ;DimmerLights_Exceptions@status stored from wreg
 12898  104D  0020               	movlb	0	; select bank0
 12899  104E  00AA               	movwf	DimmerLights_Exceptions@status
 12900                           
 12901                           ;Dimmer_B1.c: 248: if(status == 1)
 12902  104F  082A               	movf	DimmerLights_Exceptions@status,w
 12903  1050  3A01               	xorlw	1
 12904  1051  1D03               	skipz
 12905  1052  2863               	goto	l8485
 12906                           
 12907                           ;Dimmer_B1.c: 249: {
 12908                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 12909  1053  31A5  25EF  3190   	fcall	_getDimmerLights_StatusFlag
 12910  1056  3A00               	xorlw	0
 12911  1057  1903               	skipnz
 12912  1058  287B               	goto	l8491
 12913                           
 12914                           ;Dimmer_B1.c: 251: {
 12915                           ;Dimmer_B1.c: 252: setBuz(10,300);
 12916  1059  302C               	movlw	44
 12917  105A  0020               	movlb	0	; select bank0
 12918  105B  00A6               	movwf	setBuz@time
 12919  105C  3001               	movlw	1
 12920  105D  00A7               	movwf	setBuz@time+1
 12921  105E  300A               	movlw	10
 12922  105F  3195  2587  3190   	fcall	_setBuz
 12923  1062  287B               	goto	l8491
 12924  1063                     l8485:	
 12925                           ;Dimmer_B1.c: 264: }
 12926                           
 12927                           ;Dimmer_B1.c: 253: }
 12928                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 12929                           
 12930                           
 12931                           ;Dimmer_B1.c: 265: else if(status == 2)
 12932  1063  0020               	movlb	0	; select bank0
 12933  1064  082A               	movf	DimmerLights_Exceptions@status,w
 12934  1065  3A02               	xorlw	2
 12935  1066  1D03               	skipz
 12936  1067  2876               	goto	l8489
 12937                           
 12938                           ;Dimmer_B1.c: 266: {
 12939                           ;Dimmer_B1.c: 267: setBuz(5,300);
 12940  1068  302C               	movlw	44
 12941  1069  00A6               	movwf	setBuz@time
 12942  106A  3001               	movlw	1
 12943  106B  00A7               	movwf	setBuz@time+1
 12944  106C  3005               	movlw	5
 12945  106D  3195  2587  3190   	fcall	_setBuz
 12946                           
 12947                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 12948  1070  0021               	movlb	1	; select bank1
 12949  1071  0A39               	incf	_Dimmer^(0+128),w
 12950  1072  0086               	movwf	6
 12951  1073  0187               	clrf	7
 12952  1074  0801               	movf	1,w
 12953  1075  287C               	goto	L10
 12954  1076                     l8489:	
 12955                           ;Dimmer_B1.c: 269: }
 12956                           
 12957                           
 12958                           ;Dimmer_B1.c: 270: else if(status == 3)
 12959  1076  0020               	movlb	0	; select bank0
 12960  1077  082A               	movf	DimmerLights_Exceptions@status,w
 12961  1078  3A03               	xorlw	3
 12962  1079  1D03               	skipz
 12963  107A  287F               	goto	l864
 12964  107B                     l8491:	
 12965                           
 12966                           ;Dimmer_B1.c: 271: {
 12967                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 12968  107B  3001               	movlw	1
 12969  107C                     L10:	
 12970  107C  319F  2750  3190   	fcall	_setDimmerLights_ERROR
 12971  107F                     l864:	
 12972                           
 12973                           ;Dimmer_B1.c: 281: }
 12974                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 12975  107F  0020               	movlb	0	; select bank0
 12976  1080  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12977  1081  3001               	movlw	1
 12978  1082  319A  224C  3190   	fcall	_setDimmerLights_TriggerERROR
 12979                           
 12980                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 12981  1085  087D               	movf	_TMain,w
 12982  1086  3E03               	addlw	3
 12983  1087  0086               	movwf	6
 12984  1088  3001               	movlw	1	; select bank2/3
 12985  1089  0087               	movwf	7
 12986  108A  1801               	btfsc	1,0
 12987  108B  0008               	return
 12988                           
 12989                           ;Dimmer_B1.c: 294: {
 12990                           ;Dimmer_B1.c: 295: TMain->i=0;
 12991  108C  087D               	movf	_TMain,w
 12992  108D  3E0E               	addlw	14
 12993  108E  0086               	movwf	6
 12994  108F  3001               	movlw	1	; select bank2/3
 12995  1090  0087               	movwf	7
 12996  1091  1001               	bcf	1,0
 12997                           
 12998                           ;Dimmer_B1.c: 296: TMain->j=0;
 12999  1092  087D               	movf	_TMain,w
 13000  1093  3E0E               	addlw	14
 13001  1094  0086               	movwf	6
 13002  1095  3001               	movlw	1	; select bank2/3
 13003  1096  0087               	movwf	7
 13004  1097  1081               	bcf	1,1
 13005                           
 13006                           ;Dimmer_B1.c: 297: TMain->k=1;
 13007  1098  087D               	movf	_TMain,w
 13008  1099  3E0E               	addlw	14
 13009  109A  0086               	movwf	6
 13010  109B  3001               	movlw	1	; select bank2/3
 13011  109C  0087               	movwf	7
 13012  109D  1501               	bsf	1,2
 13013                           
 13014                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 13015  109E  087D               	movf	_TMain,w
 13016  109F  3E08               	addlw	8
 13017  10A0  0086               	movwf	6
 13018  10A1  3001               	movlw	1	; select bank2/3
 13019  10A2  0087               	movwf	7
 13020  10A3  3000               	movlw	0
 13021  10A4  3FC0               	movwi [0]fsr1
 13022  10A5  3FC1               	movwi [1]fsr1
 13023  10A6  0008               	return
 13024  10A7                     __end_of_DimmerLights_Exceptions:	
 13025                           
 13026                           	psect	text66
 13027  1A4C                     __ptext66:	
 13028 ;; *************** function _setDimmerLights_TriggerERROR *****************
 13029 ;; Defined at:
 13030 ;;		line 320 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;  lights          1    wreg     unsigned char 
 13033 ;;  command         1    2[BANK0 ] unsigned char 
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;  lights          1    3[BANK0 ] unsigned char 
 13036 ;; Return value:  Size  Location     Type
 13037 ;;		None               void
 13038 ;; Registers used:
 13039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13045 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;Total ram usage:        2 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    5
 13052 ;; This function calls:
 13053 ;;		_DimmerLightsPointSelect
 13054 ;; This function is called by:
 13055 ;;		_DimmerLights_Exceptions
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           
 13060                           ;psect for function _setDimmerLights_TriggerERROR
 13061  1A4C                     _setDimmerLights_TriggerERROR:	
 13062                           
 13063                           ;incstack = 0
 13064                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13065                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 13066  1A4C  0020               	movlb	0	; select bank0
 13067  1A4D  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 13068                           
 13069                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 13070  1A4E  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 13071  1A4F  31A5  255A         	fcall	_DimmerLightsPointSelect
 13072                           
 13073                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 13074  1A51  0020               	movlb	0	; select bank0
 13075  1A52  086C               	movf	_DimmerLights,w
 13076  1A53  3E09               	addlw	9
 13077  1A54  0086               	movwf	6
 13078  1A55  3001               	movlw	1	; select bank2/3
 13079  1A56  0087               	movwf	7
 13080  1A57  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13081  1A58  1081               	bcf	1,1
 13082  1A59  1D03               	skipz
 13083  1A5A  1481               	bsf	1,1
 13084                           
 13085                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 13086  1A5B  086C               	movf	_DimmerLights,w
 13087  1A5C  3E09               	addlw	9
 13088  1A5D  0086               	movwf	6
 13089  1A5E  3001               	movlw	1	; select bank2/3
 13090  1A5F  0087               	movwf	7
 13091  1A60  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13092  1A61  1001               	bcf	1,0
 13093  1A62  1D03               	skipz
 13094  1A63  1401               	bsf	1,0
 13095                           
 13096                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 13097  1A64  086C               	movf	_DimmerLights,w
 13098  1A65  3E09               	addlw	9
 13099  1A66  0086               	movwf	6
 13100  1A67  3001               	movlw	1	; select bank2/3
 13101  1A68  0087               	movwf	7
 13102  1A69  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13103  1A6A  1181               	bcf	1,3
 13104  1A6B  1D03               	skipz
 13105  1A6C  1581               	bsf	1,3
 13106                           
 13107                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13108  1A6D  086C               	movf	_DimmerLights,w
 13109  1A6E  3E09               	addlw	9
 13110  1A6F  0086               	movwf	6
 13111  1A70  3001               	movlw	1	; select bank2/3
 13112  1A71  0087               	movwf	7
 13113  1A72  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13114  1A73  1101               	bcf	1,2
 13115  1A74  1D03               	skipz
 13116  1A75  1501               	bsf	1,2
 13117  1A76  0008               	return
 13118  1A77                     __end_of_setDimmerLights_TriggerERROR:	
 13119                           
 13120                           	psect	text67
 13121  1F50                     __ptext67:	
 13122 ;; *************** function _setDimmerLights_ERROR *****************
 13123 ;; Defined at:
 13124 ;;		line 302 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  lights          1    wreg     unsigned char 
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;  lights          1    5[BANK0 ] unsigned char 
 13129 ;; Return value:  Size  Location     Type
 13130 ;;		None               void
 13131 ;; Registers used:
 13132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13133 ;; Tracked objects:
 13134 ;;		On entry : 0/0
 13135 ;;		On exit  : 0/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;Total ram usage:        2 bytes
 13143 ;; Hardware stack levels used:    1
 13144 ;; Hardware stack levels required when called:    6
 13145 ;; This function calls:
 13146 ;;		_DimmerLightsPointSelect
 13147 ;;		_setLED
 13148 ;;		_setLoad_StatusOff
 13149 ;;		_setRFSW_Status
 13150 ;;		_setSw_Status
 13151 ;; This function is called by:
 13152 ;;		_DimmerLights_Exceptions
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           
 13157                           ;psect for function _setDimmerLights_ERROR
 13158  1F50                     _setDimmerLights_ERROR:	
 13159                           
 13160                           ;incstack = 0
 13161                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13162                           ;setDimmerLights_ERROR@lights stored from wreg
 13163  1F50  0020               	movlb	0	; select bank0
 13164  1F51  00A5               	movwf	setDimmerLights_ERROR@lights
 13165                           
 13166                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13167  1F52  0825               	movf	setDimmerLights_ERROR@lights,w
 13168  1F53  31A5  255A  319F   	fcall	_DimmerLightsPointSelect
 13169                           
 13170                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13171  1F56  0020               	movlb	0	; select bank0
 13172  1F57  086C               	movf	_DimmerLights,w
 13173  1F58  0086               	movwf	6
 13174  1F59  3001               	movlw	1	; select bank2/3
 13175  1F5A  0087               	movwf	7
 13176  1F5B  1E81               	btfss	1,5
 13177  1F5C  0008               	return
 13178                           
 13179                           ;Dimmer_B1.c: 306: {
 13180                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13181  1F5D  086C               	movf	_DimmerLights,w
 13182  1F5E  0086               	movwf	6
 13183  1F5F  3001               	movlw	1	; select bank2/3
 13184  1F60  0087               	movwf	7
 13185  1F61  1081               	bcf	1,1
 13186                           
 13187                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13188  1F62  086C               	movf	_DimmerLights,w
 13189  1F63  0086               	movwf	6
 13190  1F64  3001               	movlw	1	; select bank2/3
 13191  1F65  0087               	movwf	7
 13192  1F66  1181               	bcf	1,3
 13193                           
 13194                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13195  1F67  086C               	movf	_DimmerLights,w
 13196  1F68  0086               	movwf	6
 13197  1F69  3001               	movlw	1	; select bank2/3
 13198  1F6A  0087               	movwf	7
 13199  1F6B  1201               	bcf	1,4
 13200                           
 13201                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13202  1F6C  086C               	movf	_DimmerLights,w
 13203  1F6D  0086               	movwf	6
 13204  1F6E  3001               	movlw	1	; select bank2/3
 13205  1F6F  0087               	movwf	7
 13206  1F70  1301               	bcf	1,6
 13207                           
 13208                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13209  1F71  3003               	movlw	3
 13210  1F72  00A4               	movwf	??_setDimmerLights_ERROR
 13211  1F73  086C               	movf	_DimmerLights,w
 13212  1F74  3E02               	addlw	2
 13213  1F75  0086               	movwf	6
 13214  1F76  3001               	movlw	1	; select bank2/3
 13215  1F77  0087               	movwf	7
 13216  1F78  0824               	movf	??_setDimmerLights_ERROR,w
 13217  1F79  0081               	movwf	1
 13218                           
 13219                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13220  1F7A  086C               	movf	_DimmerLights,w
 13221  1F7B  3E06               	addlw	6
 13222  1F7C  0086               	movwf	6
 13223  1F7D  3001               	movlw	1	; select bank2/3
 13224  1F7E  0087               	movwf	7
 13225  1F7F  0801               	movf	1,w
 13226  1F80  00A4               	movwf	??_setDimmerLights_ERROR
 13227  1F81  086C               	movf	_DimmerLights,w
 13228  1F82  3E04               	addlw	4
 13229  1F83  0086               	movwf	6
 13230  1F84  3001               	movlw	1	; select bank2/3
 13231  1F85  0087               	movwf	7
 13232  1F86  0824               	movf	??_setDimmerLights_ERROR,w
 13233  1F87  0081               	movwf	1
 13234                           
 13235                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13236  1F88  0021               	movlb	1	; select bank1
 13237  1F89  0839               	movf	_Dimmer^(0+128),w
 13238  1F8A  0086               	movwf	6
 13239  1F8B  0187               	clrf	7
 13240  1F8C  1401               	bsf	1,0
 13241                           
 13242                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13243  1F8D  0020               	movlb	0	; select bank0
 13244  1F8E  01A0               	clrf	setLoad_StatusOff@command
 13245  1F8F  0AA0               	incf	setLoad_StatusOff@command,f
 13246  1F90  0825               	movf	setDimmerLights_ERROR@lights,w
 13247  1F91  319B  235F  319F   	fcall	_setLoad_StatusOff
 13248                           
 13249                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13250  1F94  0020               	movlb	0	; select bank0
 13251  1F95  01A2               	clrf	setLED@command
 13252  1F96  0AA2               	incf	setLED@command,f
 13253  1F97  0825               	movf	setDimmerLights_ERROR@lights,w
 13254  1F98  3191  215E  319F   	fcall	_setLED
 13255                           
 13256                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13257  1F9B  0020               	movlb	0	; select bank0
 13258  1F9C  01A2               	clrf	setSw_Status@command
 13259  1F9D  0825               	movf	setDimmerLights_ERROR@lights,w
 13260  1F9E  31A6  268E  319F   	fcall	_setSw_Status
 13261                           
 13262                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13263  1FA1  0020               	movlb	0	; select bank0
 13264  1FA2  01A2               	clrf	setRFSW_Status@command
 13265  1FA3  0825               	movf	setDimmerLights_ERROR@lights,w
 13266  1FA4  31A6  267F         	fcall	_setRFSW_Status
 13267  1FA6  0008               	return
 13268  1FA7                     __end_of_setDimmerLights_ERROR:	
 13269                           
 13270                           	psect	text68
 13271  26CD                     __ptext68:	
 13272 ;; *************** function _setDimmerLights_Clear *****************
 13273 ;; Defined at:
 13274 ;;		line 456 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13275 ;; Parameters:    Size  Location     Type
 13276 ;;  lights          1    wreg     unsigned char 
 13277 ;;  command         1    2[BANK0 ] unsigned char 
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;  lights          1    3[BANK0 ] unsigned char 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;		None               void
 13282 ;; Registers used:
 13283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13289 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;Total ram usage:        2 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    5
 13296 ;; This function calls:
 13297 ;;		_DimmerLightsPointSelect
 13298 ;; This function is called by:
 13299 ;;		_Load_Main
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           
 13304                           ;psect for function _setDimmerLights_Clear
 13305  26CD                     _setDimmerLights_Clear:	
 13306                           
 13307                           ;incstack = 0
 13308                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13309                           ;setDimmerLights_Clear@lights stored from wreg
 13310  26CD  0020               	movlb	0	; select bank0
 13311  26CE  00A3               	movwf	setDimmerLights_Clear@lights
 13312                           
 13313                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13314  26CF  0823               	movf	setDimmerLights_Clear@lights,w
 13315  26D0  31A5  255A         	fcall	_DimmerLightsPointSelect
 13316                           
 13317                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13318  26D2  0020               	movlb	0	; select bank0
 13319  26D3  086C               	movf	_DimmerLights,w
 13320  26D4  3E0C               	addlw	12
 13321  26D5  0086               	movwf	6
 13322  26D6  3001               	movlw	1	; select bank2/3
 13323  26D7  0087               	movwf	7
 13324  26D8  0822               	movf	setDimmerLights_Clear@command,w
 13325  26D9  1001               	bcf	1,0
 13326  26DA  1D03               	skipz
 13327  26DB  1401               	bsf	1,0
 13328  26DC  0008               	return
 13329  26DD                     __end_of_setDimmerLights_Clear:	
 13330                           
 13331                           	psect	text69
 13332  250A                     __ptext69:	
 13333 ;; *************** function _getTemp_Safe *****************
 13334 ;; Defined at:
 13335 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;		None
 13338 ;; Auto vars:     Size  Location     Type
 13339 ;;		None
 13340 ;; Return value:  Size  Location     Type
 13341 ;;                  1    wreg      unsigned char 
 13342 ;; Registers used:
 13343 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13344 ;; Tracked objects:
 13345 ;;		On entry : 0/0
 13346 ;;		On exit  : 0/0
 13347 ;;		Unchanged: 0/0
 13348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;Total ram usage:        0 bytes
 13354 ;; Hardware stack levels used:    1
 13355 ;; Hardware stack levels required when called:    4
 13356 ;; This function calls:
 13357 ;;		Nothing
 13358 ;; This function is called by:
 13359 ;;		_Load_Main
 13360 ;;		_setPowerFault_Main
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           
 13365                           ;psect for function _getTemp_Safe
 13366  250A                     _getTemp_Safe:	
 13367                           
 13368                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13369                           
 13370                           ;incstack = 0
 13371                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13372  250A  087C               	movf	_Temp,w
 13373  250B  0086               	movwf	6
 13374  250C  3001               	movlw	1	; select bank2/3
 13375  250D  0087               	movwf	7
 13376  250E  0E01               	swapf	1,w
 13377  250F  3901               	andlw	1
 13378  2510  0008               	return
 13379  2511                     __end_of_getTemp_Safe:	
 13380                           
 13381                           	psect	text70
 13382  2503                     __ptext70:	
 13383 ;; *************** function _getPF_Safe *****************
 13384 ;; Defined at:
 13385 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      unsigned char 
 13392 ;; Registers used:
 13393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;Total ram usage:        0 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    4
 13406 ;; This function calls:
 13407 ;;		Nothing
 13408 ;; This function is called by:
 13409 ;;		_Load_Main
 13410 ;;		_setTemp_Main
 13411 ;; This function uses a non-reentrant model
 13412 ;;
 13413                           
 13414                           
 13415                           ;psect for function _getPF_Safe
 13416  2503                     _getPF_Safe:	
 13417                           
 13418                           ;PowerFault_B1.c: 42: return PF->Safe;
 13419                           
 13420                           ;incstack = 0
 13421                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13422  2503  087A               	movf	_PF,w
 13423  2504  0086               	movwf	6
 13424  2505  0187               	clrf	7
 13425  2506  0C01               	rrf	1,w
 13426  2507  0C89               	rrf	9,f
 13427  2508  3901               	andlw	1
 13428  2509  0008               	return
 13429  250A                     __end_of_getPF_Safe:	
 13430                           
 13431                           	psect	text71
 13432  1C28                     __ptext71:	
 13433 ;; *************** function ___lwdiv *****************
 13434 ;; Defined at:
 13435 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;  divisor         2    0[BANK0 ] unsigned int 
 13438 ;;  dividend        2    2[BANK0 ] unsigned int 
 13439 ;; Auto vars:     Size  Location     Type
 13440 ;;  quotient        2    5[BANK0 ] unsigned int 
 13441 ;;  counter         1    7[BANK0 ] unsigned char 
 13442 ;; Return value:  Size  Location     Type
 13443 ;;                  2    0[BANK0 ] unsigned int 
 13444 ;; Registers used:
 13445 ;;		wreg, status,2, status,0
 13446 ;; Tracked objects:
 13447 ;;		On entry : 0/0
 13448 ;;		On exit  : 0/0
 13449 ;;		Unchanged: 0/0
 13450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;Total ram usage:        8 bytes
 13456 ;; Hardware stack levels used:    1
 13457 ;; Hardware stack levels required when called:    4
 13458 ;; This function calls:
 13459 ;;		Nothing
 13460 ;; This function is called by:
 13461 ;;		_Load_Main
 13462 ;; This function uses a non-reentrant model
 13463 ;;
 13464                           
 13465                           
 13466                           ;psect for function ___lwdiv
 13467  1C28                     ___lwdiv:	
 13468                           
 13469                           ;incstack = 0
 13470                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13471  1C28  0020               	movlb	0	; select bank0
 13472  1C29  01A5               	clrf	___lwdiv@quotient
 13473  1C2A  01A6               	clrf	___lwdiv@quotient+1
 13474  1C2B  0821               	movf	___lwdiv@divisor+1,w
 13475  1C2C  0420               	iorwf	___lwdiv@divisor,w
 13476  1C2D  1903               	skipnz
 13477  1C2E  2C58               	goto	l7547
 13478  1C2F  01A7               	clrf	___lwdiv@counter
 13479  1C30  0AA7               	incf	___lwdiv@counter,f
 13480  1C31                     l7535:	
 13481  1C31  1BA1               	btfsc	___lwdiv@divisor+1,7
 13482  1C32  2C3D               	goto	l7537
 13483  1C33  3001               	movlw	1
 13484  1C34                     u6485:	
 13485  1C34  35A0               	lslf	___lwdiv@divisor,f
 13486  1C35  0DA1               	rlf	___lwdiv@divisor+1,f
 13487  1C36  0B89               	decfsz	9,f
 13488  1C37  2C34               	goto	u6485
 13489  1C38  3001               	movlw	1
 13490  1C39  00A4               	movwf	??___lwdiv
 13491  1C3A  0824               	movf	??___lwdiv,w
 13492  1C3B  07A7               	addwf	___lwdiv@counter,f
 13493  1C3C  2C31               	goto	l7535
 13494  1C3D                     l7537:	
 13495  1C3D  3001               	movlw	1
 13496  1C3E                     u6505:	
 13497  1C3E  35A5               	lslf	___lwdiv@quotient,f
 13498  1C3F  0DA6               	rlf	___lwdiv@quotient+1,f
 13499  1C40  0B89               	decfsz	9,f
 13500  1C41  2C3E               	goto	u6505
 13501  1C42  0821               	movf	___lwdiv@divisor+1,w
 13502  1C43  0223               	subwf	___lwdiv@dividend+1,w
 13503  1C44  1D03               	skipz
 13504  1C45  2C48               	goto	u6515
 13505  1C46  0820               	movf	___lwdiv@divisor,w
 13506  1C47  0222               	subwf	___lwdiv@dividend,w
 13507  1C48                     u6515:	
 13508  1C48  1C03               	skipc
 13509  1C49  2C4F               	goto	l7543
 13510  1C4A  0820               	movf	___lwdiv@divisor,w
 13511  1C4B  02A2               	subwf	___lwdiv@dividend,f
 13512  1C4C  0821               	movf	___lwdiv@divisor+1,w
 13513  1C4D  3BA3               	subwfb	___lwdiv@dividend+1,f
 13514  1C4E  1425               	bsf	___lwdiv@quotient,0
 13515  1C4F                     l7543:	
 13516  1C4F  3001               	movlw	1
 13517  1C50                     u6525:	
 13518  1C50  36A1               	lsrf	___lwdiv@divisor+1,f
 13519  1C51  0CA0               	rrf	___lwdiv@divisor,f
 13520  1C52  0B89               	decfsz	9,f
 13521  1C53  2C50               	goto	u6525
 13522  1C54  3001               	movlw	1
 13523  1C55  02A7               	subwf	___lwdiv@counter,f
 13524  1C56  1D03               	btfss	3,2
 13525  1C57  2C3D               	goto	l7537
 13526  1C58                     l7547:	
 13527  1C58  0826               	movf	___lwdiv@quotient+1,w
 13528  1C59  01A1               	clrf	?___lwdiv+1
 13529  1C5A  07A1               	addwf	?___lwdiv+1,f
 13530  1C5B  0825               	movf	___lwdiv@quotient,w
 13531  1C5C  01A0               	clrf	?___lwdiv
 13532  1C5D  07A0               	addwf	?___lwdiv,f
 13533  1C5E  0008               	return
 13534  1C5F                     __end_of___lwdiv:	
 13535                           
 13536                           	psect	text72
 13537  261F                     __ptext72:	
 13538 ;; *************** function _Load_Initialization *****************
 13539 ;; Defined at:
 13540 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13541 ;; Parameters:    Size  Location     Type
 13542 ;;		None
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;		None
 13545 ;; Return value:  Size  Location     Type
 13546 ;;		None               void
 13547 ;; Registers used:
 13548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;Total ram usage:        1 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; Hardware stack levels required when called:    5
 13561 ;; This function calls:
 13562 ;;		_setLoad_AH_AL_Restore
 13563 ;; This function is called by:
 13564 ;;		_main
 13565 ;; This function uses a non-reentrant model
 13566 ;;
 13567                           
 13568                           
 13569                           ;psect for function _Load_Initialization
 13570  261F                     _Load_Initialization:	
 13571                           
 13572                           ;OverLoad_B1.c: 10: Load=&Load1;
 13573                           
 13574                           ;incstack = 0
 13575                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13576  261F  3020               	movlw	_Load1& (0+255)
 13577  2620  0020               	movlb	0	; select bank0
 13578  2621  00A2               	movwf	??_Load_Initialization
 13579  2622  0822               	movf	??_Load_Initialization,w
 13580  2623  00EE               	movwf	_Load
 13581                           
 13582                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13583  2624  086E               	movf	_Load,w
 13584  2625  0086               	movwf	6
 13585  2626  3002               	movlw	2	; select bank4/5
 13586  2627  0087               	movwf	7
 13587  2628  1581               	bsf	1,3
 13588                           
 13589                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13590  2629  3199  2169         	fcall	_setLoad_AH_AL_Restore
 13591  262B  0008               	return
 13592  262C                     __end_of_Load_Initialization:	
 13593                           
 13594                           	psect	text73
 13595  1969                     __ptext73:	
 13596 ;; *************** function _setLoad_AH_AL_Restore *****************
 13597 ;; Defined at:
 13598 ;;		line 348 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;		None
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  i               1    1[BANK0 ] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;		None               void
 13605 ;; Registers used:
 13606 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        2 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    4
 13619 ;; This function calls:
 13620 ;;		Nothing
 13621 ;; This function is called by:
 13622 ;;		_Load_Initialization
 13623 ;;		_Load_Main
 13624 ;; This function uses a non-reentrant model
 13625 ;;
 13626                           
 13627                           
 13628                           ;psect for function _setLoad_AH_AL_Restore
 13629  1969                     _setLoad_AH_AL_Restore:	
 13630                           
 13631                           ;OverLoad_B1.c: 350: char i;
 13632                           ;OverLoad_B1.c: 351: for(i=0 ; i<5 ;i++)
 13633                           
 13634                           ;incstack = 0
 13635                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13636  1969  0020               	movlb	0	; select bank0
 13637  196A  01A1               	clrf	setLoad_AH_AL_Restore@i
 13638  196B                     L11:	
 13639  196B  3005               	movlw	5
 13640  196C  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13641  196D  1803               	btfsc	3,0
 13642  196E  0008               	return
 13643                           
 13644                           ;OverLoad_B1.c: 352: {
 13645                           ;OverLoad_B1.c: 353: Load->AH[i]=0;
 13646  196F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13647  1970  3E08               	addlw	8
 13648  1971  076E               	addwf	_Load,w
 13649  1972  00A0               	movwf	??_setLoad_AH_AL_Restore
 13650  1973  0820               	movf	??_setLoad_AH_AL_Restore,w
 13651  1974  0086               	movwf	6
 13652  1975  3002               	movlw	2	; select bank4/5
 13653  1976  0087               	movwf	7
 13654  1977  3000               	movlw	0
 13655  1978  3FC0               	movwi [0]fsr1
 13656  1979  3FC1               	movwi [1]fsr1
 13657                           
 13658                           ;OverLoad_B1.c: 354: Load->AL[i]=0xffff;
 13659  197A  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13660  197B  3E1A               	addlw	26
 13661  197C  076E               	addwf	_Load,w
 13662  197D  00A0               	movwf	??_setLoad_AH_AL_Restore
 13663  197E  0820               	movf	??_setLoad_AH_AL_Restore,w
 13664  197F  0086               	movwf	6
 13665  1980  3002               	movlw	2	; select bank4/5
 13666  1981  0087               	movwf	7
 13667  1982  30FF               	movlw	255
 13668  1983  3FC0               	movwi [0]fsr1
 13669  1984  30FF               	movlw	255
 13670  1985  3FC1               	movwi [1]fsr1
 13671  1986  3001               	movlw	1
 13672  1987  00A0               	movwf	??_setLoad_AH_AL_Restore
 13673  1988  0820               	movf	??_setLoad_AH_AL_Restore,w
 13674  1989  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13675  198A  296B               	goto	L11
 13676  198B                     __end_of_setLoad_AH_AL_Restore:	
 13677                           
 13678                           	psect	text74
 13679  2613                     __ptext74:	
 13680 ;; *************** function _LED_Main *****************
 13681 ;; Defined at:
 13682 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;		None
 13685 ;; Auto vars:     Size  Location     Type
 13686 ;;		None
 13687 ;; Return value:  Size  Location     Type
 13688 ;;		None               void
 13689 ;; Registers used:
 13690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;Total ram usage:        0 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    6
 13703 ;; This function calls:
 13704 ;;		_setLED_Main
 13705 ;; This function is called by:
 13706 ;;		_main
 13707 ;; This function uses a non-reentrant model
 13708 ;;
 13709                           
 13710                           
 13711                           ;psect for function _LED_Main
 13712  2613                     _LED_Main:	
 13713                           
 13714                           ;LED_B1.c: 54: setLED_Main(1);
 13715                           
 13716                           ;incstack = 0
 13717                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13718  2613  3001               	movlw	1
 13719  2614  319C  24D9  31A6   	fcall	_setLED_Main
 13720                           
 13721                           ;LED_B1.c: 57: setLED_Main(2);
 13722  2617  3002               	movlw	2
 13723  2618  319C  24D9  31A6   	fcall	_setLED_Main
 13724                           
 13725                           ;LED_B1.c: 63: setLED_Main(99);
 13726  261B  3063               	movlw	99
 13727  261C  319C  24D9         	fcall	_setLED_Main
 13728  261E  0008               	return
 13729  261F                     __end_of_LED_Main:	
 13730                           
 13731                           	psect	text75
 13732  1CD9                     __ptext75:	
 13733 ;; *************** function _setLED_Main *****************
 13734 ;; Defined at:
 13735 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  led             1    wreg     unsigned char 
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;  led             1    4[BANK0 ] unsigned char 
 13740 ;; Return value:  Size  Location     Type
 13741 ;;		None               void
 13742 ;; Registers used:
 13743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;Total ram usage:        3 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    5
 13756 ;; This function calls:
 13757 ;;		_LedPointSelect
 13758 ;; This function is called by:
 13759 ;;		_LED_Main
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           
 13764                           ;psect for function _setLED_Main
 13765  1CD9                     _setLED_Main:	
 13766                           
 13767                           ;incstack = 0
 13768                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13769                           ;setLED_Main@led stored from wreg
 13770  1CD9  0020               	movlb	0	; select bank0
 13771  1CDA  00A4               	movwf	setLED_Main@led
 13772                           
 13773                           ;LED_B1.c: 216: LedPointSelect(led);
 13774  1CDB  0824               	movf	setLED_Main@led,w
 13775  1CDC  3199  2147  319C   	fcall	_LedPointSelect
 13776                           
 13777                           ;LED_B1.c: 217: if(LED->GO)
 13778  1CDF  0021               	movlb	1	; select bank1
 13779  1CE0  083B               	movf	_LED^(0+128),w
 13780  1CE1  0086               	movwf	6
 13781  1CE2  0187               	clrf	7
 13782  1CE3  1C81               	btfss	1,1
 13783  1CE4  0008               	return
 13784                           
 13785                           ;LED_B1.c: 218: {
 13786                           ;LED_B1.c: 219: LED->Time++;
 13787  1CE5  0A3B               	incf	_LED^(0+128),w
 13788  1CE6  0086               	movwf	6
 13789  1CE7  0187               	clrf	7
 13790  1CE8  3001               	movlw	1
 13791  1CE9  0781               	addwf	1,f
 13792  1CEA  3141               	addfsr 1,1
 13793  1CEB  1803               	skipnc
 13794  1CEC  0A81               	incf	1,f
 13795                           
 13796                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13797  1CED  0A3B               	incf	_LED^(0+128),w
 13798  1CEE  0086               	movwf	6
 13799  1CEF  0187               	clrf	7
 13800  1CF0  3F40               	moviw [0]fsr1
 13801  1CF1  0020               	movlb	0	; select bank0
 13802  1CF2  00A2               	movwf	??_setLED_Main
 13803  1CF3  3F41               	moviw [1]fsr1
 13804  1CF4  00A3               	movwf	??_setLED_Main+1
 13805  1CF5  3000               	movlw	0
 13806  1CF6  0223               	subwf	??_setLED_Main+1,w
 13807  1CF7  3032               	movlw	50
 13808  1CF8  1903               	skipnz
 13809  1CF9  0222               	subwf	??_setLED_Main,w
 13810  1CFA  1C03               	skipc
 13811  1CFB  0008               	return
 13812                           
 13813                           ;LED_B1.c: 221: {
 13814                           ;LED_B1.c: 222: LED->Time=0;
 13815  1CFC  0021               	movlb	1	; select bank1
 13816  1CFD  0A3B               	incf	_LED^(0+128),w
 13817  1CFE  0086               	movwf	6
 13818  1CFF  0187               	clrf	7
 13819  1D00  3000               	movlw	0
 13820  1D01  3FC0               	movwi [0]fsr1
 13821  1D02  3FC1               	movwi [1]fsr1
 13822                           
 13823                           ;LED_B1.c: 224: if(led == 1)
 13824  1D03  0020               	movlb	0	; select bank0
 13825  1D04  0824               	movf	setLED_Main@led,w
 13826  1D05  3A01               	xorlw	1
 13827  1D06  1D03               	skipz
 13828  1D07  2D0B               	goto	l7119
 13829                           
 13830                           ;LED_B1.c: 225: {
 13831                           ;LED_B1.c: 226: RA3=~RA3;
 13832  1D08  3008               	movlw	8
 13833  1D09  068C               	xorwf	12,f
 13834                           
 13835                           ;LED_B1.c: 227: }
 13836  1D0A  0008               	return
 13837  1D0B                     l7119:	
 13838                           
 13839                           ;LED_B1.c: 230: else if(led == 2)
 13840  1D0B  0824               	movf	setLED_Main@led,w
 13841  1D0C  3A02               	xorlw	2
 13842  1D0D  1D03               	skipz
 13843  1D0E  2D12               	goto	l7123
 13844                           
 13845                           ;LED_B1.c: 231: {
 13846                           ;LED_B1.c: 232: RC7=~RC7;
 13847  1D0F  3080               	movlw	128
 13848  1D10  068E               	xorwf	14,f
 13849                           
 13850                           ;LED_B1.c: 233: }
 13851  1D11  0008               	return
 13852  1D12                     l7123:	
 13853                           
 13854                           ;LED_B1.c: 242: else if(led == 99)
 13855  1D12  0824               	movf	setLED_Main@led,w
 13856  1D13  3A63               	xorlw	99
 13857  1D14  1D03               	skipz
 13858  1D15  0008               	return
 13859                           
 13860                           ;LED_B1.c: 243: {
 13861                           ;LED_B1.c: 244: RB5=~RB5;
 13862  1D16  3020               	movlw	32
 13863  1D17  068D               	xorwf	13,f
 13864  1D18  0008               	return
 13865  1D19                     __end_of_setLED_Main:	
 13866                           
 13867                           	psect	text76
 13868  2607                     __ptext76:	
 13869 ;; *************** function _LED_Initialization *****************
 13870 ;; Defined at:
 13871 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;		None               void
 13878 ;; Registers used:
 13879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;Total ram usage:        0 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    7
 13892 ;; This function calls:
 13893 ;;		_setLED_Initialization
 13894 ;; This function is called by:
 13895 ;;		_main
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           
 13900                           ;psect for function _LED_Initialization
 13901  2607                     _LED_Initialization:	
 13902                           
 13903                           ;LED_B1.c: 38: setLED_Initialization(1);
 13904                           
 13905                           ;incstack = 0
 13906                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13907  2607  3001               	movlw	1
 13908  2608  31A7  270D  31A6   	fcall	_setLED_Initialization
 13909                           
 13910                           ;LED_B1.c: 41: setLED_Initialization(2);
 13911  260B  3002               	movlw	2
 13912  260C  31A7  270D  31A6   	fcall	_setLED_Initialization
 13913                           
 13914                           ;LED_B1.c: 47: setLED_Initialization(99);
 13915  260F  3063               	movlw	99
 13916  2610  31A7  270D         	fcall	_setLED_Initialization
 13917  2612  0008               	return
 13918  2613                     __end_of_LED_Initialization:	
 13919                           
 13920                           	psect	text77
 13921  270D                     __ptext77:	
 13922 ;; *************** function _setLED_Initialization *****************
 13923 ;; Defined at:
 13924 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;  led             1    wreg     unsigned char 
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;  led             1    4[BANK0 ] unsigned char 
 13929 ;; Return value:  Size  Location     Type
 13930 ;;		None               void
 13931 ;; Registers used:
 13932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13933 ;; Tracked objects:
 13934 ;;		On entry : 0/0
 13935 ;;		On exit  : 0/0
 13936 ;;		Unchanged: 0/0
 13937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;Total ram usage:        1 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; Hardware stack levels required when called:    6
 13945 ;; This function calls:
 13946 ;;		_LedPointSelect
 13947 ;;		_setLED
 13948 ;; This function is called by:
 13949 ;;		_LED_Initialization
 13950 ;; This function uses a non-reentrant model
 13951 ;;
 13952                           
 13953                           
 13954                           ;psect for function _setLED_Initialization
 13955  270D                     _setLED_Initialization:	
 13956                           
 13957                           ;incstack = 0
 13958                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13959                           ;setLED_Initialization@led stored from wreg
 13960  270D  0020               	movlb	0	; select bank0
 13961  270E  00A4               	movwf	setLED_Initialization@led
 13962                           
 13963                           ;LED_B1.c: 69: LedPointSelect(led);
 13964  270F  0824               	movf	setLED_Initialization@led,w
 13965  2710  3199  2147  31A7   	fcall	_LedPointSelect
 13966                           
 13967                           ;LED_B1.c: 70: LED->Enable=1;
 13968  2713  0021               	movlb	1	; select bank1
 13969  2714  083B               	movf	_LED^(0+128),w
 13970  2715  0086               	movwf	6
 13971  2716  0187               	clrf	7
 13972  2717  1401               	bsf	1,0
 13973                           
 13974                           ;LED_B1.c: 71: setLED(led,0);
 13975  2718  0020               	movlb	0	; select bank0
 13976  2719  01A2               	clrf	setLED@command
 13977  271A  0824               	movf	setLED_Initialization@led,w
 13978  271B  3191  215E         	fcall	_setLED
 13979  271D  0008               	return
 13980  271E                     __end_of_setLED_Initialization:	
 13981                           
 13982                           	psect	text78
 13983  1DE1                     __ptext78:	
 13984 ;; *************** function _Flash_Memory_Main *****************
 13985 ;; Defined at:
 13986 ;;		line 852 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;		None
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;		None
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;Total ram usage:        0 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    7
 14007 ;; This function calls:
 14008 ;;		_Flash_Memory_Modify
 14009 ;; This function is called by:
 14010 ;;		_main
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _Flash_Memory_Main
 14016  1DE1                     _Flash_Memory_Main:	
 14017                           
 14018                           ;MCU_B1.c: 854: if(Memory->GO)
 14019                           
 14020                           ;incstack = 0
 14021                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14022  1DE1  0021               	movlb	1	; select bank1
 14023  1DE2  086D               	movf	_Memory^(0+128),w
 14024  1DE3  3E22               	addlw	34
 14025  1DE4  0086               	movwf	6
 14026  1DE5  3001               	movlw	1	; select bank2/3
 14027  1DE6  0087               	movwf	7
 14028  1DE7  1C81               	btfss	1,1
 14029  1DE8  0008               	return
 14030                           
 14031                           ;MCU_B1.c: 855: {
 14032                           ;MCU_B1.c: 856: if(Memory->Modify)
 14033  1DE9  086D               	movf	_Memory^(0+128),w
 14034  1DEA  3E22               	addlw	34
 14035  1DEB  0086               	movwf	6
 14036  1DEC  3001               	movlw	1	; select bank2/3
 14037  1DED  0087               	movwf	7
 14038  1DEE  1C01               	btfss	1,0
 14039  1DEF  2E1E               	goto	l9491
 14040                           
 14041                           ;MCU_B1.c: 857: {
 14042                           ;MCU_B1.c: 858: Memory->Time++;
 14043  1DF0  086D               	movf	_Memory^(0+128),w
 14044  1DF1  3E23               	addlw	35
 14045  1DF2  0086               	movwf	6
 14046  1DF3  3001               	movlw	1	; select bank2/3
 14047  1DF4  0087               	movwf	7
 14048  1DF5  3001               	movlw	1
 14049  1DF6  0781               	addwf	1,f
 14050  1DF7  3141               	addfsr 1,1
 14051  1DF8  1803               	skipnc
 14052  1DF9  0A81               	incf	1,f
 14053                           
 14054                           ;MCU_B1.c: 859: if(Memory->Time == 25)
 14055  1DFA  086D               	movf	_Memory^(0+128),w
 14056  1DFB  3E23               	addlw	35
 14057  1DFC  0086               	movwf	6
 14058  1DFD  3001               	movlw	1	; select bank2/3
 14059  1DFE  0087               	movwf	7
 14060  1DFF  3F40               	moviw [0]fsr1
 14061  1E00  3A19               	xorlw	25
 14062  1E01  1D03               	skipz
 14063  1E02  2E05               	goto	u9305
 14064  1E03  3F41               	moviw [1]fsr1
 14065  1E04  3A00               	xorlw	0
 14066  1E05                     u9305:	
 14067  1E05  1D03               	skipz
 14068  1E06  0008               	return
 14069                           
 14070                           ;MCU_B1.c: 860: {
 14071                           ;MCU_B1.c: 861: Memory->Time=0;
 14072  1E07  086D               	movf	_Memory^(0+128),w
 14073  1E08  3E23               	addlw	35
 14074  1E09  0086               	movwf	6
 14075  1E0A  3001               	movlw	1	; select bank2/3
 14076  1E0B  0087               	movwf	7
 14077  1E0C  3000               	movlw	0
 14078  1E0D  3FC0               	movwi [0]fsr1
 14079  1E0E  3FC1               	movwi [1]fsr1
 14080                           
 14081                           ;MCU_B1.c: 862: Memory->Modify=0;
 14082  1E0F  086D               	movf	_Memory^(0+128),w
 14083  1E10  3E22               	addlw	34
 14084  1E11  0086               	movwf	6
 14085  1E12  3001               	movlw	1	; select bank2/3
 14086  1E13  0087               	movwf	7
 14087  1E14  1001               	bcf	1,0
 14088                           
 14089                           ;MCU_B1.c: 863: Memory->GO=0;
 14090  1E15  086D               	movf	_Memory^(0+128),w
 14091  1E16  3E22               	addlw	34
 14092  1E17  0086               	movwf	6
 14093  1E18  3001               	movlw	1	; select bank2/3
 14094  1E19  0087               	movwf	7
 14095  1E1A  1081               	bcf	1,1
 14096                           
 14097                           ;MCU_B1.c: 864: Flash_Memory_Modify();
 14098  1E1B  3193  2358         	fcall	_Flash_Memory_Modify
 14099                           
 14100                           ;MCU_B1.c: 866: }
 14101                           ;MCU_B1.c: 867: }
 14102  1E1D  0008               	return
 14103  1E1E                     l9491:	
 14104                           
 14105                           ;MCU_B1.c: 868: else
 14106                           ;MCU_B1.c: 869: {
 14107                           ;MCU_B1.c: 870: Memory->GO=0;
 14108  1E1E  0021               	movlb	1	; select bank1
 14109  1E1F  086D               	movf	_Memory^(0+128),w
 14110  1E20  3E22               	addlw	34
 14111  1E21  0086               	movwf	6
 14112  1E22  3001               	movlw	1	; select bank2/3
 14113  1E23  0087               	movwf	7
 14114  1E24  1081               	bcf	1,1
 14115  1E25  0008               	return
 14116  1E26                     __end_of_Flash_Memory_Main:	
 14117                           
 14118                           	psect	text79
 14119  1358                     __ptext79:	
 14120 ;; *************** function _Flash_Memory_Modify *****************
 14121 ;; Defined at:
 14122 ;;		line 927 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;		None
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  i               1    6[BANK0 ] unsigned char 
 14127 ;; Return value:  Size  Location     Type
 14128 ;;		None               void
 14129 ;; Registers used:
 14130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        3 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    6
 14143 ;; This function calls:
 14144 ;;		_Flash_Memory_Erasing
 14145 ;;		_Flash_Memory_Read
 14146 ;;		_Flash_Memory_Write
 14147 ;; This function is called by:
 14148 ;;		_Flash_Memory_Main
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _Flash_Memory_Modify
 14154  1358                     _Flash_Memory_Modify:	
 14155                           
 14156                           ;MCU_B1.c: 929: char i;
 14157                           ;MCU_B1.c: 930: for(i=0;i<32;i++)
 14158                           
 14159                           ;incstack = 0
 14160                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14161  1358  0020               	movlb	0	; select bank0
 14162  1359  01A6               	clrf	Flash_Memory_Modify@i
 14163  135A  3020               	movlw	32
 14164  135B  0226               	subwf	Flash_Memory_Modify@i,w
 14165  135C  1803               	btfsc	3,0
 14166  135D  2B77               	goto	l9011
 14167  135E                     l9005:	
 14168                           
 14169                           ;MCU_B1.c: 931: {
 14170                           ;MCU_B1.c: 932: Memory->Data[i]=Flash_Memory_Read(i);
 14171  135E  0826               	movf	Flash_Memory_Modify@i,w
 14172  135F  31A7  27CE  3193   	fcall	_Flash_Memory_Read
 14173  1362  0020               	movlb	0	; select bank0
 14174  1363  00A4               	movwf	??_Flash_Memory_Modify
 14175  1364  0826               	movf	Flash_Memory_Modify@i,w
 14176  1365  0021               	movlb	1	; select bank1
 14177  1366  076D               	addwf	_Memory^(0+128),w
 14178  1367  0020               	movlb	0	; select bank0
 14179  1368  00A5               	movwf	??_Flash_Memory_Modify+1
 14180  1369  0825               	movf	??_Flash_Memory_Modify+1,w
 14181  136A  0086               	movwf	6
 14182  136B  3001               	movlw	1	; select bank2/3
 14183  136C  0087               	movwf	7
 14184  136D  0824               	movf	??_Flash_Memory_Modify,w
 14185  136E  0081               	movwf	1
 14186  136F  3001               	movlw	1
 14187  1370  00A4               	movwf	??_Flash_Memory_Modify
 14188  1371  0824               	movf	??_Flash_Memory_Modify,w
 14189  1372  07A6               	addwf	Flash_Memory_Modify@i,f
 14190  1373  3020               	movlw	32
 14191  1374  0226               	subwf	Flash_Memory_Modify@i,w
 14192  1375  1C03               	skipc
 14193  1376  2B5E               	goto	l9005
 14194  1377                     l9011:	
 14195                           
 14196                           ;MCU_B1.c: 933: }
 14197                           ;MCU_B1.c: 934: Memory->Data[0]=Product->Data[12];
 14198  1377  086F               	movf	_Product,w
 14199  1378  3E0C               	addlw	12
 14200  1379  0086               	movwf	6
 14201  137A  3001               	movlw	1	; select bank2/3
 14202  137B  0087               	movwf	7
 14203  137C  0801               	movf	1,w
 14204  137D  00A4               	movwf	??_Flash_Memory_Modify
 14205  137E  0021               	movlb	1	; select bank1
 14206  137F  086D               	movf	_Memory^(0+128),w
 14207  1380  0086               	movwf	6
 14208  1381  3001               	movlw	1	; select bank2/3
 14209  1382  0087               	movwf	7
 14210  1383  0020               	movlb	0	; select bank0
 14211  1384  0824               	movf	??_Flash_Memory_Modify,w
 14212  1385  0081               	movwf	1
 14213                           
 14214                           ;MCU_B1.c: 935: Memory->Data[1]=Product->Data[13];
 14215  1386  086F               	movf	_Product,w
 14216  1387  3E0D               	addlw	13
 14217  1388  0086               	movwf	6
 14218  1389  3001               	movlw	1	; select bank2/3
 14219  138A  0087               	movwf	7
 14220  138B  0801               	movf	1,w
 14221  138C  00A4               	movwf	??_Flash_Memory_Modify
 14222  138D  0021               	movlb	1	; select bank1
 14223  138E  0A6D               	incf	_Memory^(0+128),w
 14224  138F  0086               	movwf	6
 14225  1390  3001               	movlw	1	; select bank2/3
 14226  1391  0087               	movwf	7
 14227  1392  0020               	movlb	0	; select bank0
 14228  1393  0824               	movf	??_Flash_Memory_Modify,w
 14229  1394  0081               	movwf	1
 14230                           
 14231                           ;MCU_B1.c: 936: Memory->Data[2]=Product->Data[14];
 14232  1395  086F               	movf	_Product,w
 14233  1396  3E0E               	addlw	14
 14234  1397  0086               	movwf	6
 14235  1398  3001               	movlw	1	; select bank2/3
 14236  1399  0087               	movwf	7
 14237  139A  0801               	movf	1,w
 14238  139B  00A4               	movwf	??_Flash_Memory_Modify
 14239  139C  0021               	movlb	1	; select bank1
 14240  139D  086D               	movf	_Memory^(0+128),w
 14241  139E  3E02               	addlw	2
 14242  139F  0086               	movwf	6
 14243  13A0  3001               	movlw	1	; select bank2/3
 14244  13A1  0087               	movwf	7
 14245  13A2  0020               	movlb	0	; select bank0
 14246  13A3  0824               	movf	??_Flash_Memory_Modify,w
 14247  13A4  0081               	movwf	1
 14248                           
 14249                           ;MCU_B1.c: 942: if(Memory->LoopSave)
 14250  13A5  0021               	movlb	1	; select bank1
 14251  13A6  086D               	movf	_Memory^(0+128),w
 14252  13A7  3E22               	addlw	34
 14253  13A8  0086               	movwf	6
 14254  13A9  3001               	movlw	1	; select bank2/3
 14255  13AA  0087               	movwf	7
 14256  13AB  1D01               	btfss	1,2
 14257  13AC  2BBE               	goto	l9015
 14258                           
 14259                           ;MCU_B1.c: 943: {
 14260                           ;MCU_B1.c: 944: Memory->LoopSave=0;
 14261  13AD  086D               	movf	_Memory^(0+128),w
 14262  13AE  3E22               	addlw	34
 14263  13AF  0086               	movwf	6
 14264  13B0  3001               	movlw	1	; select bank2/3
 14265  13B1  0087               	movwf	7
 14266  13B2  1101               	bcf	1,2
 14267                           
 14268                           ;MCU_B1.c: 945: TMain->FirstOpen=0;
 14269  13B3  087D               	movf	_TMain,w
 14270  13B4  0086               	movwf	6
 14271  13B5  3001               	movlw	1	; select bank2/3
 14272  13B6  0087               	movwf	7
 14273  13B7  1281               	bcf	1,5
 14274                           
 14275                           ;MCU_B1.c: 946: TMain->First=0;
 14276  13B8  087D               	movf	_TMain,w
 14277  13B9  3E03               	addlw	3
 14278  13BA  0086               	movwf	6
 14279  13BB  3001               	movlw	1	; select bank2/3
 14280  13BC  0087               	movwf	7
 14281  13BD  1081               	bcf	1,1
 14282  13BE                     l9015:	
 14283                           
 14284                           ;MCU_B1.c: 948: }
 14285                           ;MCU_B1.c: 949: GIE=0;
 14286  13BE  138B               	bcf	11,7	;volatile
 14287                           
 14288                           ;MCU_B1.c: 950: Flash_Memory_Erasing();
 14289  13BF  31A5  25FB  3193   	fcall	_Flash_Memory_Erasing
 14290                           
 14291                           ;MCU_B1.c: 951: Flash_Memory_Write();
 14292  13C2  319B  2390         	fcall	_Flash_Memory_Write
 14293                           
 14294                           ;MCU_B1.c: 952: GIE=1;
 14295  13C4  178B               	bsf	11,7	;volatile
 14296  13C5  0008               	return
 14297  13C6                     __end_of_Flash_Memory_Modify:	
 14298                           
 14299                           	psect	text80
 14300  25FB                     __ptext80:	
 14301 ;; *************** function _Flash_Memory_Erasing *****************
 14302 ;; Defined at:
 14303 ;;		line 916 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;		None
 14306 ;; Auto vars:     Size  Location     Type
 14307 ;;		None
 14308 ;; Return value:  Size  Location     Type
 14309 ;;		None               void
 14310 ;; Registers used:
 14311 ;;		wreg, status,2, status,0, pclath, cstack
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:        0 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; Hardware stack levels required when called:    5
 14324 ;; This function calls:
 14325 ;;		_Flash_Memory_Unlock
 14326 ;; This function is called by:
 14327 ;;		_Flash_Memory_Modify
 14328 ;; This function uses a non-reentrant model
 14329 ;;
 14330                           
 14331                           
 14332                           ;psect for function _Flash_Memory_Erasing
 14333  25FB                     _Flash_Memory_Erasing:	
 14334                           
 14335                           ;MCU_B1.c: 918: CFGS=0;
 14336                           
 14337                           ;incstack = 0
 14338                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14339  25FB  0023               	movlb	3	; select bank3
 14340  25FC  1315               	bcf	21,6	;volatile
 14341                           
 14342                           ;MCU_B1.c: 919: PMADRH=0x30;
 14343  25FD  3030               	movlw	48
 14344  25FE  0092               	movwf	18	;volatile
 14345                           
 14346                           ;MCU_B1.c: 920: PMADRL=0x00;
 14347  25FF  0191               	clrf	17	;volatile
 14348                           
 14349                           ;MCU_B1.c: 921: FREE=1;
 14350  2600  1615               	bsf	21,4	;volatile
 14351                           
 14352                           ;MCU_B1.c: 922: WREN=1;
 14353  2601  1515               	bsf	21,2	;volatile
 14354                           
 14355                           ;MCU_B1.c: 923: Flash_Memory_Unlock();
 14356  2602  31A5  251F         	fcall	_Flash_Memory_Unlock
 14357                           
 14358                           ;MCU_B1.c: 924: WREN=0;
 14359  2604  0023               	movlb	3	; select bank3
 14360  2605  1115               	bcf	21,2	;volatile
 14361  2606  0008               	return
 14362  2607                     __end_of_Flash_Memory_Erasing:	
 14363                           
 14364                           	psect	text81
 14365  0CF1                     __ptext81:	
 14366 ;; *************** function _Flash_Memory_Initialization *****************
 14367 ;; Defined at:
 14368 ;;		line 807 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;		None
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  i               1   62[BANK0 ] unsigned char 
 14373 ;; Return value:  Size  Location     Type
 14374 ;;		None               void
 14375 ;; Registers used:
 14376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;Total ram usage:        2 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; Hardware stack levels required when called:    7
 14389 ;; This function calls:
 14390 ;;		_Flash_Memory_Read
 14391 ;;		_Flash_Memory_Write
 14392 ;;		_setPercentValue
 14393 ;; This function is called by:
 14394 ;;		_main
 14395 ;; This function uses a non-reentrant model
 14396 ;;
 14397                           
 14398                           
 14399                           ;psect for function _Flash_Memory_Initialization
 14400  0CF1                     _Flash_Memory_Initialization:	
 14401                           
 14402                           ;MCU_B1.c: 809: char i;
 14403                           ;MCU_B1.c: 810: if(Flash_Memory_Read(31) == 0xaa)
 14404                           
 14405                           ;incstack = 0
 14406                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14407  0CF1  301F               	movlw	31
 14408  0CF2  31A7  27CE  318C   	fcall	_Flash_Memory_Read
 14409  0CF5  3AAA               	xorlw	170
 14410  0CF6  1D03               	skipz
 14411  0CF7  2D69               	goto	l9351
 14412                           
 14413                           ;MCU_B1.c: 811: {
 14414                           ;MCU_B1.c: 812: Product->Data[12]=Flash_Memory_Read(0);
 14415  0CF8  3000               	movlw	0
 14416  0CF9  31A7  27CE  318C   	fcall	_Flash_Memory_Read
 14417  0CFC  0020               	movlb	0	; select bank0
 14418  0CFD  00DD               	movwf	??_Flash_Memory_Initialization
 14419  0CFE  086F               	movf	_Product,w
 14420  0CFF  3E0C               	addlw	12
 14421  0D00  0086               	movwf	6
 14422  0D01  3001               	movlw	1	; select bank2/3
 14423  0D02  0087               	movwf	7
 14424  0D03  085D               	movf	??_Flash_Memory_Initialization,w
 14425  0D04  0081               	movwf	1
 14426                           
 14427                           ;MCU_B1.c: 813: Product->Data[13]=Flash_Memory_Read(1);
 14428  0D05  3001               	movlw	1
 14429  0D06  31A7  27CE  318C   	fcall	_Flash_Memory_Read
 14430  0D09  0020               	movlb	0	; select bank0
 14431  0D0A  00DD               	movwf	??_Flash_Memory_Initialization
 14432  0D0B  086F               	movf	_Product,w
 14433  0D0C  3E0D               	addlw	13
 14434  0D0D  0086               	movwf	6
 14435  0D0E  3001               	movlw	1	; select bank2/3
 14436  0D0F  0087               	movwf	7
 14437  0D10  085D               	movf	??_Flash_Memory_Initialization,w
 14438  0D11  0081               	movwf	1
 14439                           
 14440                           ;MCU_B1.c: 814: Product->Data[14]=Flash_Memory_Read(2);
 14441  0D12  3002               	movlw	2
 14442  0D13  31A7  27CE  318C   	fcall	_Flash_Memory_Read
 14443  0D16  0020               	movlb	0	; select bank0
 14444  0D17  00DD               	movwf	??_Flash_Memory_Initialization
 14445  0D18  086F               	movf	_Product,w
 14446  0D19  3E0E               	addlw	14
 14447  0D1A  0086               	movwf	6
 14448  0D1B  3001               	movlw	1	; select bank2/3
 14449  0D1C  0087               	movwf	7
 14450  0D1D  085D               	movf	??_Flash_Memory_Initialization,w
 14451  0D1E  0081               	movwf	1
 14452                           
 14453                           ;MCU_B1.c: 820: i=setPercentValue(((char)((100-55)*1.5)));
 14454  0D1F  3043               	movlw	67
 14455  0D20  319E  2626  318C   	fcall	_setPercentValue
 14456  0D23  0020               	movlb	0	; select bank0
 14457  0D24  00DD               	movwf	??_Flash_Memory_Initialization
 14458  0D25  085D               	movf	??_Flash_Memory_Initialization,w
 14459  0D26  00DE               	movwf	Flash_Memory_Initialization@i
 14460                           
 14461                           ;MCU_B1.c: 821: Product->Data[21]=i;
 14462  0D27  085E               	movf	Flash_Memory_Initialization@i,w
 14463  0D28  00DD               	movwf	??_Flash_Memory_Initialization
 14464  0D29  086F               	movf	_Product,w
 14465  0D2A  3E15               	addlw	21
 14466  0D2B  0086               	movwf	6
 14467  0D2C  3001               	movlw	1	; select bank2/3
 14468  0D2D  0087               	movwf	7
 14469  0D2E  085D               	movf	??_Flash_Memory_Initialization,w
 14470  0D2F  0081               	movwf	1
 14471                           
 14472                           ;MCU_B1.c: 822: Product->Data[22]=i;
 14473  0D30  085E               	movf	Flash_Memory_Initialization@i,w
 14474  0D31  00DD               	movwf	??_Flash_Memory_Initialization
 14475  0D32  086F               	movf	_Product,w
 14476  0D33  3E16               	addlw	22
 14477  0D34  0086               	movwf	6
 14478  0D35  3001               	movlw	1	; select bank2/3
 14479  0D36  0087               	movwf	7
 14480  0D37  085D               	movf	??_Flash_Memory_Initialization,w
 14481  0D38  0081               	movwf	1
 14482                           
 14483                           ;MCU_B1.c: 823: Product->Data[23]=i;
 14484  0D39  085E               	movf	Flash_Memory_Initialization@i,w
 14485  0D3A  00DD               	movwf	??_Flash_Memory_Initialization
 14486  0D3B  086F               	movf	_Product,w
 14487  0D3C  3E17               	addlw	23
 14488  0D3D  0086               	movwf	6
 14489  0D3E  3001               	movlw	1	; select bank2/3
 14490  0D3F  0087               	movwf	7
 14491  0D40  085D               	movf	??_Flash_Memory_Initialization,w
 14492  0D41  0081               	movwf	1
 14493                           
 14494                           ;MCU_B1.c: 825: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product->Data[1
      +                          4]==0xff)
 14495  0D42  086F               	movf	_Product,w
 14496  0D43  3E0C               	addlw	12
 14497  0D44  0086               	movwf	6
 14498  0D45  3001               	movlw	1	; select bank2/3
 14499  0D46  0087               	movwf	7
 14500  0D47  0801               	movf	1,w
 14501  0D48  3AFF               	xorlw	255
 14502  0D49  1D03               	skipz
 14503  0D4A  0008               	return
 14504  0D4B  086F               	movf	_Product,w
 14505  0D4C  3E0D               	addlw	13
 14506  0D4D  0086               	movwf	6
 14507  0D4E  3001               	movlw	1	; select bank2/3
 14508  0D4F  0087               	movwf	7
 14509  0D50  0801               	movf	1,w
 14510  0D51  3AFF               	xorlw	255
 14511  0D52  1D03               	skipz
 14512  0D53  0008               	return
 14513  0D54  086F               	movf	_Product,w
 14514  0D55  3E0E               	addlw	14
 14515  0D56  0086               	movwf	6
 14516  0D57  3001               	movlw	1	; select bank2/3
 14517  0D58  0087               	movwf	7
 14518  0D59  0801               	movf	1,w
 14519  0D5A  3AFF               	xorlw	255
 14520  0D5B  1D03               	skipz
 14521  0D5C  0008               	return
 14522                           
 14523                           ;MCU_B1.c: 826: {
 14524                           ;MCU_B1.c: 827: TMain->FirstOpen=1;
 14525  0D5D  087D               	movf	_TMain,w
 14526  0D5E  0086               	movwf	6
 14527  0D5F  3001               	movlw	1	; select bank2/3
 14528  0D60  0087               	movwf	7
 14529  0D61  1681               	bsf	1,5
 14530                           
 14531                           ;MCU_B1.c: 828: TMain->First=1;
 14532  0D62  087D               	movf	_TMain,w
 14533  0D63  3E03               	addlw	3
 14534  0D64  0086               	movwf	6
 14535  0D65  3001               	movlw	1	; select bank2/3
 14536  0D66  0087               	movwf	7
 14537  0D67  1481               	bsf	1,1
 14538                           
 14539                           ;MCU_B1.c: 829: }
 14540                           ;MCU_B1.c: 830: }
 14541  0D68  0008               	return
 14542  0D69                     l9351:	
 14543                           
 14544                           ;MCU_B1.c: 831: else
 14545                           ;MCU_B1.c: 832: {
 14546                           ;MCU_B1.c: 833: i=setPercentValue(((char)((100-55)*1.5)));
 14547  0D69  3043               	movlw	67
 14548  0D6A  319E  2626  318C   	fcall	_setPercentValue
 14549  0D6D  0020               	movlb	0	; select bank0
 14550  0D6E  00DD               	movwf	??_Flash_Memory_Initialization
 14551  0D6F  085D               	movf	??_Flash_Memory_Initialization,w
 14552  0D70  00DE               	movwf	Flash_Memory_Initialization@i
 14553                           
 14554                           ;MCU_B1.c: 834: Memory->Data[0]=0xff;
 14555  0D71  30FF               	movlw	255
 14556  0D72  00DD               	movwf	??_Flash_Memory_Initialization
 14557  0D73  0021               	movlb	1	; select bank1
 14558  0D74  086D               	movf	_Memory^(0+128),w
 14559  0D75  0086               	movwf	6
 14560  0D76  3001               	movlw	1	; select bank2/3
 14561  0D77  0087               	movwf	7
 14562  0D78  0020               	movlb	0	; select bank0
 14563  0D79  085D               	movf	??_Flash_Memory_Initialization,w
 14564  0D7A  0081               	movwf	1
 14565                           
 14566                           ;MCU_B1.c: 835: Memory->Data[1]=0xff;
 14567  0D7B  30FF               	movlw	255
 14568  0D7C  00DD               	movwf	??_Flash_Memory_Initialization
 14569  0D7D  0021               	movlb	1	; select bank1
 14570  0D7E  0A6D               	incf	_Memory^(0+128),w
 14571  0D7F  0086               	movwf	6
 14572  0D80  3001               	movlw	1	; select bank2/3
 14573  0D81  0087               	movwf	7
 14574  0D82  0020               	movlb	0	; select bank0
 14575  0D83  085D               	movf	??_Flash_Memory_Initialization,w
 14576  0D84  0081               	movwf	1
 14577                           
 14578                           ;MCU_B1.c: 836: Memory->Data[2]=0xff;
 14579  0D85  30FF               	movlw	255
 14580  0D86  00DD               	movwf	??_Flash_Memory_Initialization
 14581  0D87  0021               	movlb	1	; select bank1
 14582  0D88  086D               	movf	_Memory^(0+128),w
 14583  0D89  3E02               	addlw	2
 14584  0D8A  0086               	movwf	6
 14585  0D8B  3001               	movlw	1	; select bank2/3
 14586  0D8C  0087               	movwf	7
 14587  0D8D  0020               	movlb	0	; select bank0
 14588  0D8E  085D               	movf	??_Flash_Memory_Initialization,w
 14589  0D8F  0081               	movwf	1
 14590                           
 14591                           ;MCU_B1.c: 837: Memory->Data[3]=0xff;
 14592  0D90  30FF               	movlw	255
 14593  0D91  00DD               	movwf	??_Flash_Memory_Initialization
 14594  0D92  0021               	movlb	1	; select bank1
 14595  0D93  086D               	movf	_Memory^(0+128),w
 14596  0D94  3E03               	addlw	3
 14597  0D95  0086               	movwf	6
 14598  0D96  3001               	movlw	1	; select bank2/3
 14599  0D97  0087               	movwf	7
 14600  0D98  0020               	movlb	0	; select bank0
 14601  0D99  085D               	movf	??_Flash_Memory_Initialization,w
 14602  0D9A  0081               	movwf	1
 14603                           
 14604                           ;MCU_B1.c: 838: Memory->Data[4]=0xff;
 14605  0D9B  30FF               	movlw	255
 14606  0D9C  00DD               	movwf	??_Flash_Memory_Initialization
 14607  0D9D  0021               	movlb	1	; select bank1
 14608  0D9E  086D               	movf	_Memory^(0+128),w
 14609  0D9F  3E04               	addlw	4
 14610  0DA0  0086               	movwf	6
 14611  0DA1  3001               	movlw	1	; select bank2/3
 14612  0DA2  0087               	movwf	7
 14613  0DA3  0020               	movlb	0	; select bank0
 14614  0DA4  085D               	movf	??_Flash_Memory_Initialization,w
 14615  0DA5  0081               	movwf	1
 14616                           
 14617                           ;MCU_B1.c: 839: Memory->Data[5]=0xff;
 14618  0DA6  30FF               	movlw	255
 14619  0DA7  00DD               	movwf	??_Flash_Memory_Initialization
 14620  0DA8  0021               	movlb	1	; select bank1
 14621  0DA9  086D               	movf	_Memory^(0+128),w
 14622  0DAA  3E05               	addlw	5
 14623  0DAB  0086               	movwf	6
 14624  0DAC  3001               	movlw	1	; select bank2/3
 14625  0DAD  0087               	movwf	7
 14626  0DAE  0020               	movlb	0	; select bank0
 14627  0DAF  085D               	movf	??_Flash_Memory_Initialization,w
 14628  0DB0  0081               	movwf	1
 14629                           
 14630                           ;MCU_B1.c: 840: Memory->Data[31]=0xaa;
 14631  0DB1  30AA               	movlw	170
 14632  0DB2  00DD               	movwf	??_Flash_Memory_Initialization
 14633  0DB3  0021               	movlb	1	; select bank1
 14634  0DB4  086D               	movf	_Memory^(0+128),w
 14635  0DB5  3E1F               	addlw	31
 14636  0DB6  0086               	movwf	6
 14637  0DB7  3001               	movlw	1	; select bank2/3
 14638  0DB8  0087               	movwf	7
 14639  0DB9  0020               	movlb	0	; select bank0
 14640  0DBA  085D               	movf	??_Flash_Memory_Initialization,w
 14641  0DBB  0081               	movwf	1
 14642                           
 14643                           ;MCU_B1.c: 841: Product->Data[21]=i;
 14644  0DBC  085E               	movf	Flash_Memory_Initialization@i,w
 14645  0DBD  00DD               	movwf	??_Flash_Memory_Initialization
 14646  0DBE  086F               	movf	_Product,w
 14647  0DBF  3E15               	addlw	21
 14648  0DC0  0086               	movwf	6
 14649  0DC1  3001               	movlw	1	; select bank2/3
 14650  0DC2  0087               	movwf	7
 14651  0DC3  085D               	movf	??_Flash_Memory_Initialization,w
 14652  0DC4  0081               	movwf	1
 14653                           
 14654                           ;MCU_B1.c: 842: Product->Data[22]=i;
 14655  0DC5  085E               	movf	Flash_Memory_Initialization@i,w
 14656  0DC6  00DD               	movwf	??_Flash_Memory_Initialization
 14657  0DC7  086F               	movf	_Product,w
 14658  0DC8  3E16               	addlw	22
 14659  0DC9  0086               	movwf	6
 14660  0DCA  3001               	movlw	1	; select bank2/3
 14661  0DCB  0087               	movwf	7
 14662  0DCC  085D               	movf	??_Flash_Memory_Initialization,w
 14663  0DCD  0081               	movwf	1
 14664                           
 14665                           ;MCU_B1.c: 843: Product->Data[23]=i;
 14666  0DCE  085E               	movf	Flash_Memory_Initialization@i,w
 14667  0DCF  00DD               	movwf	??_Flash_Memory_Initialization
 14668  0DD0  086F               	movf	_Product,w
 14669  0DD1  3E17               	addlw	23
 14670  0DD2  0086               	movwf	6
 14671  0DD3  3001               	movlw	1	; select bank2/3
 14672  0DD4  0087               	movwf	7
 14673  0DD5  085D               	movf	??_Flash_Memory_Initialization,w
 14674  0DD6  0081               	movwf	1
 14675                           
 14676                           ;MCU_B1.c: 844: GIE=0;
 14677  0DD7  138B               	bcf	11,7	;volatile
 14678                           
 14679                           ;MCU_B1.c: 845: Flash_Memory_Write();
 14680  0DD8  319B  2390         	fcall	_Flash_Memory_Write
 14681                           
 14682                           ;MCU_B1.c: 846: GIE=1;
 14683  0DDA  178B               	bsf	11,7	;volatile
 14684                           
 14685                           ;MCU_B1.c: 847: TMain->FirstOpen=1;
 14686  0DDB  087D               	movf	_TMain,w
 14687  0DDC  0086               	movwf	6
 14688  0DDD  3001               	movlw	1	; select bank2/3
 14689  0DDE  0087               	movwf	7
 14690  0DDF  1681               	bsf	1,5
 14691                           
 14692                           ;MCU_B1.c: 848: TMain->First=1;
 14693  0DE0  087D               	movf	_TMain,w
 14694  0DE1  3E03               	addlw	3
 14695  0DE2  0086               	movwf	6
 14696  0DE3  3001               	movlw	1	; select bank2/3
 14697  0DE4  0087               	movwf	7
 14698  0DE5  1481               	bsf	1,1
 14699  0DE6  0008               	return
 14700  0DE7                     __end_of_Flash_Memory_Initialization:	
 14701                           
 14702                           	psect	text82
 14703  1B90                     __ptext82:	
 14704 ;; *************** function _Flash_Memory_Write *****************
 14705 ;; Defined at:
 14706 ;;		line 896 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14707 ;; Parameters:    Size  Location     Type
 14708 ;;		None
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;  i               1    1[BANK0 ] unsigned char 
 14711 ;; Return value:  Size  Location     Type
 14712 ;;		None               void
 14713 ;; Registers used:
 14714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;Total ram usage:        2 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:    5
 14727 ;; This function calls:
 14728 ;;		_Flash_Memory_Unlock
 14729 ;; This function is called by:
 14730 ;;		_Flash_Memory_Initialization
 14731 ;;		_Flash_Memory_Modify
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           
 14736                           ;psect for function _Flash_Memory_Write
 14737  1B90                     _Flash_Memory_Write:	
 14738                           
 14739                           ;MCU_B1.c: 898: char i;
 14740                           ;MCU_B1.c: 899: CFGS=0;
 14741                           
 14742                           ;incstack = 0
 14743                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14744  1B90  0023               	movlb	3	; select bank3
 14745  1B91  1315               	bcf	21,6	;volatile
 14746                           
 14747                           ;MCU_B1.c: 900: PMADRH=0x30;
 14748  1B92  3030               	movlw	48
 14749  1B93  0092               	movwf	18	;volatile
 14750                           
 14751                           ;MCU_B1.c: 901: PMDATH=0;
 14752  1B94  0194               	clrf	20	;volatile
 14753                           
 14754                           ;MCU_B1.c: 902: FREE=0;
 14755  1B95  1215               	bcf	21,4	;volatile
 14756                           
 14757                           ;MCU_B1.c: 903: LWLO=1;
 14758  1B96  1695               	bsf	21,5	;volatile
 14759                           
 14760                           ;MCU_B1.c: 904: WREN=1;
 14761  1B97  1515               	bsf	21,2	;volatile
 14762                           
 14763                           ;MCU_B1.c: 905: for(i=0 ; i<32 ; i++)
 14764  1B98  0020               	movlb	0	; select bank0
 14765  1B99  01A1               	clrf	Flash_Memory_Write@i
 14766  1B9A  3020               	movlw	32
 14767  1B9B  0221               	subwf	Flash_Memory_Write@i,w
 14768  1B9C  1803               	btfsc	3,0
 14769  1B9D  2BBA               	goto	l1638
 14770  1B9E                     l8665:	
 14771                           
 14772                           ;MCU_B1.c: 906: {
 14773                           ;MCU_B1.c: 907: PMADRL=i;
 14774  1B9E  0821               	movf	Flash_Memory_Write@i,w
 14775  1B9F  0023               	movlb	3	; select bank3
 14776  1BA0  0091               	movwf	17	;volatile
 14777                           
 14778                           ;MCU_B1.c: 908: PMDATL=Memory->Data[i];
 14779  1BA1  0020               	movlb	0	; select bank0
 14780  1BA2  0821               	movf	Flash_Memory_Write@i,w
 14781  1BA3  0021               	movlb	1	; select bank1
 14782  1BA4  076D               	addwf	_Memory^(0+128),w
 14783  1BA5  0020               	movlb	0	; select bank0
 14784  1BA6  00A0               	movwf	??_Flash_Memory_Write
 14785  1BA7  0820               	movf	??_Flash_Memory_Write,w
 14786  1BA8  0086               	movwf	6
 14787  1BA9  3001               	movlw	1	; select bank2/3
 14788  1BAA  0087               	movwf	7
 14789  1BAB  0801               	movf	1,w
 14790  1BAC  0023               	movlb	3	; select bank3
 14791  1BAD  0093               	movwf	19	;volatile
 14792                           
 14793                           ;MCU_B1.c: 909: Flash_Memory_Unlock();
 14794  1BAE  31A5  251F  319B   	fcall	_Flash_Memory_Unlock
 14795  1BB1  3001               	movlw	1
 14796  1BB2  0020               	movlb	0	; select bank0
 14797  1BB3  00A0               	movwf	??_Flash_Memory_Write
 14798  1BB4  0820               	movf	??_Flash_Memory_Write,w
 14799  1BB5  07A1               	addwf	Flash_Memory_Write@i,f
 14800  1BB6  3020               	movlw	32
 14801  1BB7  0221               	subwf	Flash_Memory_Write@i,w
 14802  1BB8  1C03               	skipc
 14803  1BB9  2B9E               	goto	l8665
 14804  1BBA                     l1638:	
 14805                           
 14806                           ;MCU_B1.c: 910: }
 14807                           ;MCU_B1.c: 911: LWLO=0;
 14808  1BBA  0023               	movlb	3	; select bank3
 14809  1BBB  1295               	bcf	21,5	;volatile
 14810                           
 14811                           ;MCU_B1.c: 912: Flash_Memory_Unlock();
 14812  1BBC  31A5  251F         	fcall	_Flash_Memory_Unlock
 14813                           
 14814                           ;MCU_B1.c: 913: WREN=0;
 14815  1BBE  0023               	movlb	3	; select bank3
 14816  1BBF  1115               	bcf	21,2	;volatile
 14817  1BC0  0008               	return
 14818  1BC1                     __end_of_Flash_Memory_Write:	
 14819                           
 14820                           	psect	text83
 14821  251F                     __ptext83:	
 14822 ;; *************** function _Flash_Memory_Unlock *****************
 14823 ;; Defined at:
 14824 ;;		line 875 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;		None
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;		None
 14829 ;; Return value:  Size  Location     Type
 14830 ;;		None               void
 14831 ;; Registers used:
 14832 ;;		wreg
 14833 ;; Tracked objects:
 14834 ;;		On entry : 0/0
 14835 ;;		On exit  : 0/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;Total ram usage:        0 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    4
 14845 ;; This function calls:
 14846 ;;		Nothing
 14847 ;; This function is called by:
 14848 ;;		_Flash_Memory_Write
 14849 ;;		_Flash_Memory_Erasing
 14850 ;; This function uses a non-reentrant model
 14851 ;;
 14852                           
 14853                           
 14854                           ;psect for function _Flash_Memory_Unlock
 14855  251F                     _Flash_Memory_Unlock:	
 14856                           
 14857                           ;MCU_B1.c: 877: PMCON2=0x55;
 14858                           
 14859                           ;incstack = 0
 14860                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14861  251F  3055               	movlw	85
 14862  2520  0023               	movlb	3	; select bank3
 14863  2521  0096               	movwf	22	;volatile
 14864                           
 14865                           ;MCU_B1.c: 878: PMCON2=0xaa;
 14866  2522  30AA               	movlw	170
 14867  2523  0096               	movwf	22	;volatile
 14868                           
 14869                           ;MCU_B1.c: 879: WR=1;
 14870  2524  1495               	bsf	21,1	;volatile
 14871                           
 14872                           ;MCU_B1.c: 880: __nop();
 14873  2525  0000               	nop
 14874                           
 14875                           ;MCU_B1.c: 881: __nop();
 14876  2526  0000               	nop
 14877  2527  0008               	return
 14878  2528                     __end_of_Flash_Memory_Unlock:	
 14879                           
 14880                           	psect	text84
 14881  27CE                     __ptext84:	
 14882 ;; *************** function _Flash_Memory_Read *****************
 14883 ;; Defined at:
 14884 ;;		line 884 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;  address         1    wreg     unsigned char 
 14887 ;; Auto vars:     Size  Location     Type
 14888 ;;  address         1    2[BANK0 ] unsigned char 
 14889 ;;  ret             1    3[BANK0 ] unsigned char 
 14890 ;;  i               1    1[BANK0 ] unsigned char 
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  1    wreg      unsigned char 
 14893 ;; Registers used:
 14894 ;;		wreg, status,2
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;Total ram usage:        4 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; Hardware stack levels required when called:    4
 14907 ;; This function calls:
 14908 ;;		Nothing
 14909 ;; This function is called by:
 14910 ;;		_Flash_Memory_Initialization
 14911 ;;		_Flash_Memory_Modify
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           
 14916                           ;psect for function _Flash_Memory_Read
 14917  27CE                     _Flash_Memory_Read:	
 14918                           
 14919                           ;incstack = 0
 14920                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14921                           ;Flash_Memory_Read@address stored from wreg
 14922  27CE  0020               	movlb	0	; select bank0
 14923  27CF  00A2               	movwf	Flash_Memory_Read@address
 14924                           
 14925                           ;MCU_B1.c: 886: char i,ret=0;
 14926  27D0  01A3               	clrf	Flash_Memory_Read@ret
 14927                           
 14928                           ;MCU_B1.c: 887: PMADRH=0x30;
 14929  27D1  3030               	movlw	48
 14930  27D2  0023               	movlb	3	; select bank3
 14931  27D3  0092               	movwf	18	;volatile
 14932                           
 14933                           ;MCU_B1.c: 888: PMADRL=address;
 14934  27D4  0020               	movlb	0	; select bank0
 14935  27D5  0822               	movf	Flash_Memory_Read@address,w
 14936  27D6  0023               	movlb	3	; select bank3
 14937  27D7  0091               	movwf	17	;volatile
 14938                           
 14939                           ;MCU_B1.c: 889: CFGS=0;
 14940  27D8  1315               	bcf	21,6	;volatile
 14941                           
 14942                           ;MCU_B1.c: 890: RD=1;
 14943  27D9  1415               	bsf	21,0	;volatile
 14944                           
 14945                           ;MCU_B1.c: 891: i=PMDATH;
 14946  27DA  0814               	movf	20,w	;volatile
 14947  27DB  0020               	movlb	0	; select bank0
 14948  27DC  00A0               	movwf	??_Flash_Memory_Read
 14949  27DD  0820               	movf	??_Flash_Memory_Read,w
 14950  27DE  00A1               	movwf	Flash_Memory_Read@i
 14951                           
 14952                           ;MCU_B1.c: 892: ret=PMDATL;
 14953  27DF  0023               	movlb	3	; select bank3
 14954  27E0  0813               	movf	19,w	;volatile
 14955  27E1  0020               	movlb	0	; select bank0
 14956  27E2  00A0               	movwf	??_Flash_Memory_Read
 14957  27E3  0820               	movf	??_Flash_Memory_Read,w
 14958  27E4  00A3               	movwf	Flash_Memory_Read@ret
 14959                           
 14960                           ;MCU_B1.c: 893: return ret;
 14961  27E5  0823               	movf	Flash_Memory_Read@ret,w
 14962  27E6  0008               	return
 14963  27E7                     __end_of_Flash_Memory_Read:	
 14964                           
 14965                           	psect	text85
 14966  24FC                     __ptext85:	
 14967 ;; *************** function _DimmerLights_Main *****************
 14968 ;; Defined at:
 14969 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;		None
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;		None
 14974 ;; Return value:  Size  Location     Type
 14975 ;;		None               void
 14976 ;; Registers used:
 14977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;Total ram usage:        0 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; Hardware stack levels required when called:   10
 14990 ;; This function calls:
 14991 ;;		_DimmerLights_Close
 14992 ;;		_setDimmerLights_Main
 14993 ;; This function is called by:
 14994 ;;		_main
 14995 ;; This function uses a non-reentrant model
 14996 ;;
 14997                           
 14998                           
 14999                           ;psect for function _DimmerLights_Main
 15000  24FC                     _DimmerLights_Main:	
 15001                           
 15002                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 15003                           
 15004                           ;incstack = 0
 15005                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15006  24FC  3001               	movlw	1
 15007  24FD  3195  2515  31A4   	fcall	_setDimmerLights_Main
 15008                           
 15009                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 15010  2500  3198  2075         	fcall	_DimmerLights_Close
 15011  2502  0008               	return
 15012  2503                     __end_of_DimmerLights_Main:	
 15013                           
 15014                           	psect	text86
 15015  1515                     __ptext86:	
 15016 ;; *************** function _setDimmerLights_Main *****************
 15017 ;; Defined at:
 15018 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;  lights          1    wreg     unsigned char 
 15021 ;; Auto vars:     Size  Location     Type
 15022 ;;  lights          1   70[BANK0 ] unsigned char 
 15023 ;;  clear           1   69[BANK0 ] unsigned char 
 15024 ;; Return value:  Size  Location     Type
 15025 ;;		None               void
 15026 ;; Registers used:
 15027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;Total ram usage:        2 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:    9
 15040 ;; This function calls:
 15041 ;;		_DimmerLightsPointSelect
 15042 ;;		_setBuz
 15043 ;;		_setDimmerLights
 15044 ;;		_setDimmerLights_Adj
 15045 ;; This function is called by:
 15046 ;;		_DimmerLights_Main
 15047 ;; This function uses a non-reentrant model
 15048 ;;
 15049                           
 15050                           
 15051                           ;psect for function _setDimmerLights_Main
 15052  1515                     _setDimmerLights_Main:	
 15053                           
 15054                           ;incstack = 0
 15055                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15056                           ;setDimmerLights_Main@lights stored from wreg
 15057  1515  0020               	movlb	0	; select bank0
 15058  1516  00E6               	movwf	setDimmerLights_Main@lights
 15059                           
 15060                           ;Dimmer_B1.c: 133: char clear=1;
 15061  1517  01E5               	clrf	setDimmerLights_Main@clear
 15062  1518  0AE5               	incf	setDimmerLights_Main@clear,f
 15063                           
 15064                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 15065  1519  0866               	movf	setDimmerLights_Main@lights,w
 15066  151A  31A5  255A  3195   	fcall	_DimmerLightsPointSelect
 15067                           
 15068                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 15069  151D  0020               	movlb	0	; select bank0
 15070  151E  086C               	movf	_DimmerLights,w
 15071  151F  3E09               	addlw	9
 15072  1520  0086               	movwf	6
 15073  1521  3001               	movlw	1	; select bank2/3
 15074  1522  0087               	movwf	7
 15075  1523  1C81               	btfss	1,1
 15076  1524  2D54               	goto	l8927
 15077                           
 15078                           ;Dimmer_B1.c: 163: {
 15079                           ;Dimmer_B1.c: 164: if(clear)
 15080  1525  0865               	movf	setDimmerLights_Main@clear,w
 15081  1526  1903               	btfsc	3,2
 15082  1527  0008               	return
 15083                           
 15084                           ;Dimmer_B1.c: 165: {
 15085                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 15086  1528  086C               	movf	_DimmerLights,w
 15087  1529  3E09               	addlw	9
 15088  152A  0086               	movwf	6
 15089  152B  3001               	movlw	1	; select bank2/3
 15090  152C  0087               	movwf	7
 15091  152D  1C01               	btfss	1,0
 15092  152E  2D42               	goto	l8921
 15093                           
 15094                           ;Dimmer_B1.c: 167: {
 15095                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15096  152F  086C               	movf	_DimmerLights,w
 15097  1530  3E09               	addlw	9
 15098  1531  0086               	movwf	6
 15099  1532  3001               	movlw	1	; select bank2/3
 15100  1533  0087               	movwf	7
 15101  1534  1081               	bcf	1,1
 15102                           
 15103                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 15104  1535  01A4               	clrf	setDimmerLights@status
 15105  1536  0AA4               	incf	setDimmerLights@status,f
 15106  1537  0866               	movf	setDimmerLights_Main@lights,w
 15107  1538  3188  20B8         	fcall	_setDimmerLights
 15108                           
 15109                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15110  153A  0020               	movlb	0	; select bank0
 15111  153B  086C               	movf	_DimmerLights,w
 15112  153C  3E0C               	addlw	12
 15113  153D  0086               	movwf	6
 15114  153E  3001               	movlw	1	; select bank2/3
 15115  153F  0087               	movwf	7
 15116  1540  1001               	bcf	1,0
 15117                           
 15118                           ;Dimmer_B1.c: 174: }
 15119  1541  0008               	return
 15120  1542                     l8921:	
 15121                           
 15122                           ;Dimmer_B1.c: 175: else
 15123                           ;Dimmer_B1.c: 176: {
 15124                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15125  1542  086C               	movf	_DimmerLights,w
 15126  1543  3E09               	addlw	9
 15127  1544  0086               	movwf	6
 15128  1545  3001               	movlw	1	; select bank2/3
 15129  1546  0087               	movwf	7
 15130  1547  1081               	bcf	1,1
 15131                           
 15132                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15133  1548  01A4               	clrf	setDimmerLights@status
 15134  1549  0866               	movf	setDimmerLights_Main@lights,w
 15135  154A  3188  20B8         	fcall	_setDimmerLights
 15136                           
 15137                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15138  154C  0020               	movlb	0	; select bank0
 15139  154D  086C               	movf	_DimmerLights,w
 15140  154E  3E0C               	addlw	12
 15141  154F  0086               	movwf	6
 15142  1550  3001               	movlw	1	; select bank2/3
 15143  1551  0087               	movwf	7
 15144  1552  1001               	bcf	1,0
 15145                           
 15146                           ;Dimmer_B1.c: 183: }
 15147                           ;Dimmer_B1.c: 184: }
 15148                           ;Dimmer_B1.c: 185: }
 15149  1553  0008               	return
 15150  1554                     l8927:	
 15151                           
 15152                           ;Dimmer_B1.c: 186: else
 15153                           ;Dimmer_B1.c: 187: {
 15154                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15155  1554  086C               	movf	_DimmerLights,w
 15156  1555  3E09               	addlw	9
 15157  1556  0086               	movwf	6
 15158  1557  3001               	movlw	1	; select bank2/3
 15159  1558  0087               	movwf	7
 15160  1559  1D81               	btfss	1,3
 15161  155A  0008               	return
 15162                           
 15163                           ;Dimmer_B1.c: 189: {
 15164                           ;Dimmer_B1.c: 190: if(clear)
 15165  155B  0865               	movf	setDimmerLights_Main@clear,w
 15166  155C  1903               	btfsc	3,2
 15167  155D  0008               	return
 15168                           
 15169                           ;Dimmer_B1.c: 191: {
 15170                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15171  155E  0866               	movf	setDimmerLights_Main@lights,w
 15172  155F  31A5  255A  3195   	fcall	_DimmerLightsPointSelect
 15173                           
 15174                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15175  1562  0020               	movlb	0	; select bank0
 15176  1563  086C               	movf	_DimmerLights,w
 15177  1564  3E09               	addlw	9
 15178  1565  0086               	movwf	6
 15179  1566  3001               	movlw	1	; select bank2/3
 15180  1567  0087               	movwf	7
 15181  1568  1181               	bcf	1,3
 15182                           
 15183                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15184  1569  086C               	movf	_DimmerLights,w
 15185  156A  3E09               	addlw	9
 15186  156B  0086               	movwf	6
 15187  156C  3001               	movlw	1	; select bank2/3
 15188  156D  0087               	movwf	7
 15189  156E  1D01               	btfss	1,2
 15190  156F  2D80               	goto	l8939
 15191                           
 15192                           ;Dimmer_B1.c: 195: {
 15193                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15194  1570  01E2               	clrf	setDimmerLights_Adj@status
 15195  1571  0AE2               	incf	setDimmerLights_Adj@status,f
 15196  1572  0866               	movf	setDimmerLights_Main@lights,w
 15197  1573  319D  2559  3195   	fcall	_setDimmerLights_Adj
 15198                           
 15199                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15200  1576  3064               	movlw	100
 15201  1577  0020               	movlb	0	; select bank0
 15202  1578  00A6               	movwf	setBuz@time
 15203  1579  3000               	movlw	0
 15204  157A  00A7               	movwf	setBuz@time+1
 15205  157B  3001               	movlw	1
 15206  157C  3195  2587         	fcall	_setBuz
 15207                           
 15208                           ;Dimmer_B1.c: 198: }
 15209  157E  0020               	movlb	0	; select bank0
 15210  157F  0008               	return
 15211  1580                     l8939:	
 15212                           
 15213                           ;Dimmer_B1.c: 199: else
 15214                           ;Dimmer_B1.c: 200: {
 15215                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15216  1580  0020               	movlb	0	; select bank0
 15217  1581  01E2               	clrf	setDimmerLights_Adj@status
 15218  1582  0866               	movf	setDimmerLights_Main@lights,w
 15219  1583  319D  2559         	fcall	_setDimmerLights_Adj
 15220  1585  0020               	movlb	0	; select bank0
 15221  1586  0008               	return
 15222  1587                     __end_of_setDimmerLights_Main:	
 15223                           
 15224                           	psect	text87
 15225  1D59                     __ptext87:	
 15226 ;; *************** function _setDimmerLights_Adj *****************
 15227 ;; Defined at:
 15228 ;;		line 388 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15229 ;; Parameters:    Size  Location     Type
 15230 ;;  lights          1    wreg     unsigned char 
 15231 ;;  status          1   66[BANK0 ] unsigned char 
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;  lights          1   68[BANK0 ] unsigned char 
 15234 ;; Return value:  Size  Location     Type
 15235 ;;		None               void
 15236 ;; Registers used:
 15237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15238 ;; Tracked objects:
 15239 ;;		On entry : 0/0
 15240 ;;		On exit  : 0/0
 15241 ;;		Unchanged: 0/0
 15242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;Total ram usage:        3 bytes
 15248 ;; Hardware stack levels used:    1
 15249 ;; Hardware stack levels required when called:    8
 15250 ;; This function calls:
 15251 ;;		_DimmerLightsPointSelect
 15252 ;;		_setLoad_StatusOff
 15253 ;;		_setRF_DimmerLights
 15254 ;;		_setTxData
 15255 ;; This function is called by:
 15256 ;;		_setDimmerLights_Main
 15257 ;; This function uses a non-reentrant model
 15258 ;;
 15259                           
 15260                           
 15261                           ;psect for function _setDimmerLights_Adj
 15262  1D59                     _setDimmerLights_Adj:	
 15263                           
 15264                           ;incstack = 0
 15265                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15266                           ;setDimmerLights_Adj@lights stored from wreg
 15267  1D59  0020               	movlb	0	; select bank0
 15268  1D5A  00E4               	movwf	setDimmerLights_Adj@lights
 15269                           
 15270                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15271  1D5B  0864               	movf	setDimmerLights_Adj@lights,w
 15272  1D5C  31A5  255A  319D   	fcall	_DimmerLightsPointSelect
 15273                           
 15274                           ;Dimmer_B1.c: 391: if(status)
 15275  1D5F  0020               	movlb	0	; select bank0
 15276  1D60  0862               	movf	setDimmerLights_Adj@status,w
 15277  1D61  1903               	btfsc	3,2
 15278  1D62  2D6E               	goto	l8641
 15279                           
 15280                           ;Dimmer_B1.c: 392: {
 15281                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15282  1D63  086C               	movf	_DimmerLights,w
 15283  1D64  0086               	movwf	6
 15284  1D65  3001               	movlw	1	; select bank2/3
 15285  1D66  0087               	movwf	7
 15286  1D67  1581               	bsf	1,3
 15287                           
 15288                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15289  1D68  086C               	movf	_DimmerLights,w
 15290  1D69  0086               	movwf	6
 15291  1D6A  3001               	movlw	1	; select bank2/3
 15292  1D6B  0087               	movwf	7
 15293  1D6C  1481               	bsf	1,1
 15294                           
 15295                           ;Dimmer_B1.c: 395: }
 15296  1D6D  0008               	return
 15297  1D6E                     l8641:	
 15298                           
 15299                           ;Dimmer_B1.c: 396: else
 15300                           ;Dimmer_B1.c: 397: {
 15301                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15302  1D6E  086C               	movf	_DimmerLights,w
 15303  1D6F  0086               	movwf	6
 15304  1D70  3001               	movlw	1	; select bank2/3
 15305  1D71  0087               	movwf	7
 15306  1D72  1D81               	btfss	1,3
 15307  1D73  0008               	return
 15308                           
 15309                           ;Dimmer_B1.c: 399: {
 15310                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15311  1D74  086C               	movf	_DimmerLights,w
 15312  1D75  0086               	movwf	6
 15313  1D76  3001               	movlw	1	; select bank2/3
 15314  1D77  0087               	movwf	7
 15315  1D78  1081               	bcf	1,1
 15316                           
 15317                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15318  1D79  086C               	movf	_DimmerLights,w
 15319  1D7A  0086               	movwf	6
 15320  1D7B  3001               	movlw	1	; select bank2/3
 15321  1D7C  0087               	movwf	7
 15322  1D7D  1181               	bcf	1,3
 15323                           
 15324                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15325  1D7E  01A0               	clrf	setLoad_StatusOff@command
 15326  1D7F  0AA0               	incf	setLoad_StatusOff@command,f
 15327  1D80  3000               	movlw	0
 15328  1D81  319B  235F  319D   	fcall	_setLoad_StatusOff
 15329                           
 15330                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15331  1D84  0020               	movlb	0	; select bank0
 15332  1D85  086C               	movf	_DimmerLights,w
 15333  1D86  3E04               	addlw	4
 15334  1D87  0086               	movwf	6
 15335  1D88  3001               	movlw	1	; select bank2/3
 15336  1D89  0087               	movwf	7
 15337  1D8A  0801               	movf	1,w
 15338  1D8B  00E3               	movwf	??_setDimmerLights_Adj
 15339  1D8C  086C               	movf	_DimmerLights,w
 15340  1D8D  3E05               	addlw	5
 15341  1D8E  0086               	movwf	6
 15342  1D8F  3001               	movlw	1	; select bank2/3
 15343  1D90  0087               	movwf	7
 15344  1D91  0863               	movf	??_setDimmerLights_Adj,w
 15345  1D92  0081               	movwf	1
 15346                           
 15347                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15348  1D93  01DD               	clrf	setRF_DimmerLights@on
 15349  1D94  0ADD               	incf	setRF_DimmerLights@on,f
 15350  1D95  0864               	movf	setDimmerLights_Adj@lights,w
 15351  1D96  3192  2281  319D   	fcall	_setRF_DimmerLights
 15352                           
 15353                           ;Dimmer_B1.c: 412: setTxData(1);
 15354  1D99  3001               	movlw	1
 15355  1D9A  318B  2335         	fcall	_setTxData
 15356  1D9C  0008               	return
 15357  1D9D                     __end_of_setDimmerLights_Adj:	
 15358                           
 15359                           	psect	text88
 15360  1B5F                     __ptext88:	
 15361 ;; *************** function _setLoad_StatusOff *****************
 15362 ;; Defined at:
 15363 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;  lights          1    wreg     unsigned char 
 15366 ;;  command         1    0[BANK0 ] unsigned char 
 15367 ;; Auto vars:     Size  Location     Type
 15368 ;;  lights          1    1[BANK0 ] unsigned char 
 15369 ;; Return value:  Size  Location     Type
 15370 ;;		None               void
 15371 ;; Registers used:
 15372 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15373 ;; Tracked objects:
 15374 ;;		On entry : 0/0
 15375 ;;		On exit  : 0/0
 15376 ;;		Unchanged: 0/0
 15377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15378 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15382 ;;Total ram usage:        2 bytes
 15383 ;; Hardware stack levels used:    1
 15384 ;; Hardware stack levels required when called:    4
 15385 ;; This function calls:
 15386 ;;		Nothing
 15387 ;; This function is called by:
 15388 ;;		_setDimmerLights_ERROR
 15389 ;;		_setDimmerLights_Adj
 15390 ;; This function uses a non-reentrant model
 15391 ;;
 15392                           
 15393                           
 15394                           ;psect for function _setLoad_StatusOff
 15395  1B5F                     _setLoad_StatusOff:	
 15396                           
 15397                           ;incstack = 0
 15398                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15399                           ;setLoad_StatusOff@lights stored from wreg
 15400  1B5F  0020               	movlb	0	; select bank0
 15401  1B60  00A1               	movwf	setLoad_StatusOff@lights
 15402                           
 15403                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 15404  1B61  086E               	movf	_Load,w
 15405  1B62  3E46               	addlw	70
 15406  1B63  0086               	movwf	6
 15407  1B64  3002               	movlw	2	; select bank4/5
 15408  1B65  0087               	movwf	7
 15409  1B66  0820               	movf	setLoad_StatusOff@command,w
 15410  1B67  1081               	bcf	1,1
 15411  1B68  1D03               	skipz
 15412  1B69  1481               	bsf	1,1
 15413                           
 15414                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 15415  1B6A  086E               	movf	_Load,w
 15416  1B6B  3E42               	addlw	66
 15417  1B6C  0086               	movwf	6
 15418  1B6D  3002               	movlw	2	; select bank4/5
 15419  1B6E  0087               	movwf	7
 15420  1B6F  3002               	movlw	2
 15421  1B70  0281               	subwf	1,f
 15422                           
 15423                           ;OverLoad_B1.c: 326: if(lights == 1)
 15424  1B71  0821               	movf	setLoad_StatusOff@lights,w
 15425  1B72  3A01               	xorlw	1
 15426  1B73  1D03               	skipz
 15427  1B74  2B7B               	goto	l8301
 15428                           
 15429                           ;OverLoad_B1.c: 327: {
 15430                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 15431  1B75  086E               	movf	_Load,w
 15432  1B76  3E43               	addlw	67
 15433  1B77  0086               	movwf	6
 15434  1B78  3002               	movlw	2	; select bank4/5
 15435  1B79  0087               	movwf	7
 15436  1B7A  0181               	clrf	1
 15437  1B7B                     l8301:	
 15438                           
 15439                           ;OverLoad_B1.c: 329: }
 15440                           ;OverLoad_B1.c: 330: if(lights == 2)
 15441  1B7B  0821               	movf	setLoad_StatusOff@lights,w
 15442  1B7C  3A02               	xorlw	2
 15443  1B7D  1D03               	skipz
 15444  1B7E  2B85               	goto	l8305
 15445                           
 15446                           ;OverLoad_B1.c: 331: {
 15447                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 15448  1B7F  086E               	movf	_Load,w
 15449  1B80  3E44               	addlw	68
 15450  1B81  0086               	movwf	6
 15451  1B82  3002               	movlw	2	; select bank4/5
 15452  1B83  0087               	movwf	7
 15453  1B84  0181               	clrf	1
 15454  1B85                     l8305:	
 15455                           
 15456                           ;OverLoad_B1.c: 333: }
 15457                           ;OverLoad_B1.c: 334: if(lights == 3)
 15458  1B85  0821               	movf	setLoad_StatusOff@lights,w
 15459  1B86  3A03               	xorlw	3
 15460  1B87  1D03               	skipz
 15461  1B88  0008               	return
 15462                           
 15463                           ;OverLoad_B1.c: 335: {
 15464                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 15465  1B89  086E               	movf	_Load,w
 15466  1B8A  3E45               	addlw	69
 15467  1B8B  0086               	movwf	6
 15468  1B8C  3002               	movlw	2	; select bank4/5
 15469  1B8D  0087               	movwf	7
 15470  1B8E  0181               	clrf	1
 15471  1B8F  0008               	return
 15472  1B90                     __end_of_setLoad_StatusOff:	
 15473                           
 15474                           	psect	text89
 15475  08B8                     __ptext89:	
 15476 ;; *************** function _setDimmerLights *****************
 15477 ;; Defined at:
 15478 ;;		line 330 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15479 ;; Parameters:    Size  Location     Type
 15480 ;;  lights          1    wreg     unsigned char 
 15481 ;;  status          1    4[BANK0 ] unsigned char 
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;  lights          1    6[BANK0 ] unsigned char 
 15484 ;; Return value:  Size  Location     Type
 15485 ;;		None               void
 15486 ;; Registers used:
 15487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15488 ;; Tracked objects:
 15489 ;;		On entry : 0/0
 15490 ;;		On exit  : 0/0
 15491 ;;		Unchanged: 0/0
 15492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15493 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;Total ram usage:        3 bytes
 15498 ;; Hardware stack levels used:    1
 15499 ;; Hardware stack levels required when called:    6
 15500 ;; This function calls:
 15501 ;;		_DimmerLightsPointSelect
 15502 ;;		_setLED
 15503 ;;		_setLoad_Count
 15504 ;;		_setLoad_StatusOn
 15505 ;; This function is called by:
 15506 ;;		_setDimmerLights_Main
 15507 ;;		_setControl_Lights_Table
 15508 ;; This function uses a non-reentrant model
 15509 ;;
 15510                           
 15511                           
 15512                           ;psect for function _setDimmerLights
 15513  08B8                     _setDimmerLights:	
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15517                           ;setDimmerLights@lights stored from wreg
 15518  08B8  0020               	movlb	0	; select bank0
 15519  08B9  00A6               	movwf	setDimmerLights@lights
 15520                           
 15521                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15522  08BA  0826               	movf	setDimmerLights@lights,w
 15523  08BB  31A5  255A  3188   	fcall	_DimmerLightsPointSelect
 15524                           
 15525                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15526  08BE  0020               	movlb	0	; select bank0
 15527  08BF  0826               	movf	setDimmerLights@lights,w
 15528  08C0  00A5               	movwf	??_setDimmerLights
 15529  08C1  0021               	movlb	1	; select bank1
 15530  08C2  0A39               	incf	_Dimmer^(0+128),w
 15531  08C3  0086               	movwf	6
 15532  08C4  0187               	clrf	7
 15533  08C5  0020               	movlb	0	; select bank0
 15534  08C6  0825               	movf	??_setDimmerLights,w
 15535  08C7  0081               	movwf	1
 15536                           
 15537                           ;Dimmer_B1.c: 334: if(status)
 15538  08C8  0824               	movf	setDimmerLights@status,w
 15539  08C9  1903               	btfsc	3,2
 15540  08CA  2922               	goto	l8407
 15541                           
 15542                           ;Dimmer_B1.c: 335: {
 15543                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15544  08CB  086C               	movf	_DimmerLights,w
 15545  08CC  0086               	movwf	6
 15546  08CD  3001               	movlw	1	; select bank2/3
 15547  08CE  0087               	movwf	7
 15548  08CF  1681               	bsf	1,5
 15549                           
 15550                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15551  08D0  01A2               	clrf	setLED@command
 15552  08D1  0826               	movf	setDimmerLights@lights,w
 15553  08D2  3191  215E  3188   	fcall	_setLED
 15554                           
 15555                           ;Dimmer_B1.c: 338: RC7=!0;
 15556  08D5  0020               	movlb	0	; select bank0
 15557  08D6  178E               	bsf	14,7	;volatile
 15558                           
 15559                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15560  08D7  3000               	movlw	0
 15561  08D8  31A7  2759  3188   	fcall	_setLoad_Count
 15562                           
 15563                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15564  08DB  0020               	movlb	0	; select bank0
 15565  08DC  086C               	movf	_DimmerLights,w
 15566  08DD  0086               	movwf	6
 15567  08DE  3001               	movlw	1	; select bank2/3
 15568  08DF  0087               	movwf	7
 15569  08E0  1481               	bsf	1,1
 15570                           
 15571                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15572  08E1  3003               	movlw	3
 15573  08E2  00A5               	movwf	??_setDimmerLights
 15574  08E3  086C               	movf	_DimmerLights,w
 15575  08E4  3E02               	addlw	2
 15576  08E5  0086               	movwf	6
 15577  08E6  3001               	movlw	1	; select bank2/3
 15578  08E7  0087               	movwf	7
 15579  08E8  0825               	movf	??_setDimmerLights,w
 15580  08E9  0081               	movwf	1
 15581                           
 15582                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15583  08EA  086C               	movf	_DimmerLights,w
 15584  08EB  0086               	movwf	6
 15585  08EC  3001               	movlw	1	; select bank2/3
 15586  08ED  0087               	movwf	7
 15587  08EE  1B01               	btfsc	1,6
 15588  08EF  0008               	return
 15589                           
 15590                           ;Dimmer_B1.c: 345: {
 15591                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15592  08F0  086C               	movf	_DimmerLights,w
 15593  08F1  0086               	movwf	6
 15594  08F2  3001               	movlw	1	; select bank2/3
 15595  08F3  0087               	movwf	7
 15596  08F4  1701               	bsf	1,6
 15597                           
 15598                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15599  08F5  01A0               	clrf	setLoad_StatusOn@command
 15600  08F6  0AA0               	incf	setLoad_StatusOn@command,f
 15601  08F7  0826               	movf	setDimmerLights@lights,w
 15602  08F8  319B  23C1         	fcall	_setLoad_StatusOn
 15603                           
 15604                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15605  08FA  0021               	movlb	1	; select bank1
 15606  08FB  086D               	movf	_Memory^(0+128),w
 15607  08FC  3E22               	addlw	34
 15608  08FD  0086               	movwf	6
 15609  08FE  3001               	movlw	1	; select bank2/3
 15610  08FF  0087               	movwf	7
 15611  0900  1081               	bcf	1,1
 15612  0901  086D               	movf	_Memory^(0+128),w
 15613  0902  3E23               	addlw	35
 15614  0903  0086               	movwf	6
 15615  0904  3001               	movlw	1	; select bank2/3
 15616  0905  0087               	movwf	7
 15617  0906  3000               	movlw	0
 15618  0907  3FC0               	movwi [0]fsr1
 15619  0908  3FC1               	movwi [1]fsr1
 15620                           
 15621                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15622  0909  0020               	movlb	0	; select bank0
 15623  090A  086C               	movf	_DimmerLights,w
 15624  090B  3E05               	addlw	5
 15625  090C  0086               	movwf	6
 15626  090D  3001               	movlw	1	; select bank2/3
 15627  090E  0087               	movwf	7
 15628  090F  0801               	movf	1,w
 15629  0910  00A5               	movwf	??_setDimmerLights
 15630  0911  086C               	movf	_DimmerLights,w
 15631  0912  3E04               	addlw	4
 15632  0913  0086               	movwf	6
 15633  0914  3001               	movlw	1	; select bank2/3
 15634  0915  0087               	movwf	7
 15635  0916  0825               	movf	??_setDimmerLights,w
 15636  0917  0081               	movwf	1
 15637                           
 15638                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15639  0918  3043               	movlw	67
 15640  0919  00A5               	movwf	??_setDimmerLights
 15641  091A  086C               	movf	_DimmerLights,w
 15642  091B  3E04               	addlw	4
 15643  091C  0086               	movwf	6
 15644  091D  3001               	movlw	1	; select bank2/3
 15645  091E  0087               	movwf	7
 15646  091F  0825               	movf	??_setDimmerLights,w
 15647  0920  0081               	movwf	1
 15648                           
 15649                           ;Dimmer_B1.c: 357: }
 15650                           ;Dimmer_B1.c: 358: }
 15651  0921  0008               	return
 15652  0922                     l8407:	
 15653                           
 15654                           ;Dimmer_B1.c: 359: else
 15655                           ;Dimmer_B1.c: 360: {
 15656                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15657  0922  086C               	movf	_DimmerLights,w
 15658  0923  0086               	movwf	6
 15659  0924  3001               	movlw	1	; select bank2/3
 15660  0925  0087               	movwf	7
 15661  0926  1281               	bcf	1,5
 15662                           
 15663                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15664  0927  086C               	movf	_DimmerLights,w
 15665  0928  3E06               	addlw	6
 15666  0929  0086               	movwf	6
 15667  092A  3001               	movlw	1	; select bank2/3
 15668  092B  0087               	movwf	7
 15669  092C  0801               	movf	1,w
 15670  092D  00A5               	movwf	??_setDimmerLights
 15671  092E  086C               	movf	_DimmerLights,w
 15672  092F  3E04               	addlw	4
 15673  0930  0086               	movwf	6
 15674  0931  3001               	movlw	1	; select bank2/3
 15675  0932  0087               	movwf	7
 15676  0933  0825               	movf	??_setDimmerLights,w
 15677  0934  0081               	movwf	1
 15678                           
 15679                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15680  0935  086C               	movf	_DimmerLights,w
 15681  0936  0086               	movwf	6
 15682  0937  3001               	movlw	1	; select bank2/3
 15683  0938  0087               	movwf	7
 15684  0939  1481               	bsf	1,1
 15685                           
 15686                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15687  093A  086C               	movf	_DimmerLights,w
 15688  093B  0086               	movwf	6
 15689  093C  3001               	movlw	1	; select bank2/3
 15690  093D  0087               	movwf	7
 15691  093E  1181               	bcf	1,3
 15692                           
 15693                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15694  093F  086C               	movf	_DimmerLights,w
 15695  0940  0086               	movwf	6
 15696  0941  3001               	movlw	1	; select bank2/3
 15697  0942  0087               	movwf	7
 15698  0943  1201               	bcf	1,4
 15699                           
 15700                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15701  0944  3003               	movlw	3
 15702  0945  00A5               	movwf	??_setDimmerLights
 15703  0946  086C               	movf	_DimmerLights,w
 15704  0947  3E02               	addlw	2
 15705  0948  0086               	movwf	6
 15706  0949  3001               	movlw	1	; select bank2/3
 15707  094A  0087               	movwf	7
 15708  094B  0825               	movf	??_setDimmerLights,w
 15709  094C  0081               	movwf	1
 15710  094D  0008               	return
 15711  094E                     __end_of_setDimmerLights:	
 15712                           
 15713                           	psect	text90
 15714  1BC1                     __ptext90:	
 15715 ;; *************** function _setLoad_StatusOn *****************
 15716 ;; Defined at:
 15717 ;;		line 304 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15718 ;; Parameters:    Size  Location     Type
 15719 ;;  lights          1    wreg     unsigned char 
 15720 ;;  command         1    0[BANK0 ] unsigned char 
 15721 ;; Auto vars:     Size  Location     Type
 15722 ;;  lights          1    1[BANK0 ] unsigned char 
 15723 ;; Return value:  Size  Location     Type
 15724 ;;		None               void
 15725 ;; Registers used:
 15726 ;;		wreg, fsr1l, fsr1h
 15727 ;; Tracked objects:
 15728 ;;		On entry : 0/0
 15729 ;;		On exit  : 0/0
 15730 ;;		Unchanged: 0/0
 15731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15732 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;Total ram usage:        2 bytes
 15737 ;; Hardware stack levels used:    1
 15738 ;; Hardware stack levels required when called:    4
 15739 ;; This function calls:
 15740 ;;		Nothing
 15741 ;; This function is called by:
 15742 ;;		_setDimmerLights
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           
 15747                           ;psect for function _setLoad_StatusOn
 15748  1BC1                     _setLoad_StatusOn:	
 15749                           
 15750                           ;incstack = 0
 15751                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15752                           ;setLoad_StatusOn@lights stored from wreg
 15753  1BC1  0020               	movlb	0	; select bank0
 15754  1BC2  00A1               	movwf	setLoad_StatusOn@lights
 15755                           
 15756                           ;OverLoad_B1.c: 306: Load->GO=1;
 15757  1BC3  086E               	movf	_Load,w
 15758  1BC4  0086               	movwf	6
 15759  1BC5  3002               	movlw	2	; select bank4/5
 15760  1BC6  0087               	movwf	7
 15761  1BC7  1481               	bsf	1,1
 15762                           
 15763                           ;OverLoad_B1.c: 307: Load->StatusOn=command;
 15764  1BC8  086E               	movf	_Load,w
 15765  1BC9  3E46               	addlw	70
 15766  1BCA  0086               	movwf	6
 15767  1BCB  3002               	movlw	2	; select bank4/5
 15768  1BCC  0087               	movwf	7
 15769  1BCD  0820               	movf	setLoad_StatusOn@command,w
 15770  1BCE  1001               	bcf	1,0
 15771  1BCF  1D03               	skipz
 15772  1BD0  1401               	bsf	1,0
 15773                           
 15774                           ;OverLoad_B1.c: 309: if(lights == 1)
 15775  1BD1  0821               	movf	setLoad_StatusOn@lights,w
 15776  1BD2  3A01               	xorlw	1
 15777  1BD3  1D03               	skipz
 15778  1BD4  2BDC               	goto	l8365
 15779                           
 15780                           ;OverLoad_B1.c: 310: {
 15781                           ;OverLoad_B1.c: 311: Load->Lights1Status=1;
 15782  1BD5  086E               	movf	_Load,w
 15783  1BD6  3E43               	addlw	67
 15784  1BD7  0086               	movwf	6
 15785  1BD8  3002               	movlw	2	; select bank4/5
 15786  1BD9  0087               	movwf	7
 15787  1BDA  0181               	clrf	1
 15788  1BDB  0A81               	incf	1,f
 15789  1BDC                     l8365:	
 15790                           
 15791                           ;OverLoad_B1.c: 312: }
 15792                           ;OverLoad_B1.c: 313: if(lights == 2)
 15793  1BDC  0821               	movf	setLoad_StatusOn@lights,w
 15794  1BDD  3A02               	xorlw	2
 15795  1BDE  1D03               	skipz
 15796  1BDF  2BE7               	goto	l8369
 15797                           
 15798                           ;OverLoad_B1.c: 314: {
 15799                           ;OverLoad_B1.c: 315: Load->Lights2Status=1;
 15800  1BE0  086E               	movf	_Load,w
 15801  1BE1  3E44               	addlw	68
 15802  1BE2  0086               	movwf	6
 15803  1BE3  3002               	movlw	2	; select bank4/5
 15804  1BE4  0087               	movwf	7
 15805  1BE5  0181               	clrf	1
 15806  1BE6  0A81               	incf	1,f
 15807  1BE7                     l8369:	
 15808                           
 15809                           ;OverLoad_B1.c: 316: }
 15810                           ;OverLoad_B1.c: 317: if(lights == 3)
 15811  1BE7  0821               	movf	setLoad_StatusOn@lights,w
 15812  1BE8  3A03               	xorlw	3
 15813  1BE9  1D03               	skipz
 15814  1BEA  0008               	return
 15815                           
 15816                           ;OverLoad_B1.c: 318: {
 15817                           ;OverLoad_B1.c: 319: Load->Lights3Status=1;
 15818  1BEB  086E               	movf	_Load,w
 15819  1BEC  3E45               	addlw	69
 15820  1BED  0086               	movwf	6
 15821  1BEE  3002               	movlw	2	; select bank4/5
 15822  1BEF  0087               	movwf	7
 15823  1BF0  0181               	clrf	1
 15824  1BF1  0A81               	incf	1,f
 15825  1BF2  0008               	return
 15826  1BF3                     __end_of_setLoad_StatusOn:	
 15827                           
 15828                           	psect	text91
 15829  2759                     __ptext91:	
 15830 ;; *************** function _setLoad_Count *****************
 15831 ;; Defined at:
 15832 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;  command         1    wreg     unsigned char 
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;  command         1    1[BANK0 ] unsigned char 
 15837 ;; Return value:  Size  Location     Type
 15838 ;;		None               void
 15839 ;; Registers used:
 15840 ;;		wreg, fsr1l, fsr1h
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;Total ram usage:        2 bytes
 15851 ;; Hardware stack levels used:    1
 15852 ;; Hardware stack levels required when called:    4
 15853 ;; This function calls:
 15854 ;;		Nothing
 15855 ;; This function is called by:
 15856 ;;		_setDimmerLights
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           
 15861                           ;psect for function _setLoad_Count
 15862  2759                     _setLoad_Count:	
 15863                           
 15864                           ;incstack = 0
 15865                           ; Regs used in _setLoad_Count: [wregfsr1]
 15866                           ;setLoad_Count@command stored from wreg
 15867  2759  0020               	movlb	0	; select bank0
 15868  275A  00A1               	movwf	setLoad_Count@command
 15869                           
 15870                           ;OverLoad_B1.c: 291: Load->Count=command;
 15871  275B  0821               	movf	setLoad_Count@command,w
 15872  275C  00A0               	movwf	??_setLoad_Count
 15873  275D  086E               	movf	_Load,w
 15874  275E  3E3A               	addlw	58
 15875  275F  0086               	movwf	6
 15876  2760  3002               	movlw	2	; select bank4/5
 15877  2761  0087               	movwf	7
 15878  2762  0820               	movf	??_setLoad_Count,w
 15879  2763  0081               	movwf	1
 15880                           
 15881                           ;OverLoad_B1.c: 292: Load->SafeCount=command;
 15882  2764  0821               	movf	setLoad_Count@command,w
 15883  2765  00A0               	movwf	??_setLoad_Count
 15884  2766  086E               	movf	_Load,w
 15885  2767  3E42               	addlw	66
 15886  2768  0086               	movwf	6
 15887  2769  3002               	movlw	2	; select bank4/5
 15888  276A  0087               	movwf	7
 15889  276B  0820               	movf	??_setLoad_Count,w
 15890  276C  0081               	movwf	1
 15891  276D  0008               	return
 15892  276E                     __end_of_setLoad_Count:	
 15893                           
 15894                           	psect	text92
 15895  115E                     __ptext92:	
 15896 ;; *************** function _setLED *****************
 15897 ;; Defined at:
 15898 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;  led             1    wreg     unsigned char 
 15901 ;;  command         1    2[BANK0 ] unsigned char 
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;  led             1    3[BANK0 ] unsigned char 
 15904 ;; Return value:  Size  Location     Type
 15905 ;;		None               void
 15906 ;; Registers used:
 15907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15908 ;; Tracked objects:
 15909 ;;		On entry : 0/0
 15910 ;;		On exit  : 0/0
 15911 ;;		Unchanged: 0/0
 15912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15913 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;Total ram usage:        2 bytes
 15918 ;; Hardware stack levels used:    1
 15919 ;; Hardware stack levels required when called:    5
 15920 ;; This function calls:
 15921 ;;		_LedPointSelect
 15922 ;; This function is called by:
 15923 ;;		_setDimmerLights_ERROR
 15924 ;;		_setDimmerLights
 15925 ;;		_setLED_Initialization
 15926 ;;		_setLoad_Exceptions
 15927 ;;		_setOverTemp_Exceptions
 15928 ;;		_setPowerFault_Exceptions
 15929 ;;		_setSw_Initialization
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           
 15934                           ;psect for function _setLED
 15935  115E                     _setLED:	
 15936                           
 15937                           ;incstack = 0
 15938                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15939                           ;setLED@led stored from wreg
 15940  115E  0020               	movlb	0	; select bank0
 15941  115F  00A3               	movwf	setLED@led
 15942                           
 15943                           ;LED_B1.c: 76: LedPointSelect(led);
 15944  1160  0823               	movf	setLED@led,w
 15945  1161  3199  2147  3191   	fcall	_LedPointSelect
 15946                           
 15947                           ;LED_B1.c: 77: if(command == 0)
 15948  1164  0020               	movlb	0	; select bank0
 15949  1165  08A2               	movf	setLED@command,f
 15950  1166  1D03               	skipz
 15951  1167  297A               	goto	l8325
 15952                           
 15953                           ;LED_B1.c: 78: {
 15954                           ;LED_B1.c: 80: if(led == 1)
 15955  1168  0823               	movf	setLED@led,w
 15956  1169  3A01               	xorlw	1
 15957  116A  1D03               	skipz
 15958  116B  296E               	goto	l8317
 15959                           
 15960                           ;LED_B1.c: 81: {
 15961                           ;LED_B1.c: 85: RA3=1;
 15962  116C  158C               	bsf	12,3	;volatile
 15963                           
 15964                           ;LED_B1.c: 87: }
 15965  116D  0008               	return
 15966  116E                     l8317:	
 15967                           
 15968                           ;LED_B1.c: 90: else if(led == 2)
 15969  116E  0823               	movf	setLED@led,w
 15970  116F  3A02               	xorlw	2
 15971  1170  1D03               	skipz
 15972  1171  2974               	goto	l8321
 15973                           
 15974                           ;LED_B1.c: 91: {
 15975                           ;LED_B1.c: 95: RC7=1;
 15976  1172  178E               	bsf	14,7	;volatile
 15977                           
 15978                           ;LED_B1.c: 97: }
 15979  1173  0008               	return
 15980  1174                     l8321:	
 15981                           
 15982                           ;LED_B1.c: 110: else if(led == 99)
 15983  1174  0823               	movf	setLED@led,w
 15984  1175  3A63               	xorlw	99
 15985  1176  1D03               	skipz
 15986  1177  0008               	return
 15987                           
 15988                           ;LED_B1.c: 111: {
 15989                           ;LED_B1.c: 115: RB5=1;
 15990  1178  168D               	bsf	13,5	;volatile
 15991                           
 15992                           ;LED_B1.c: 117: }
 15993                           ;LED_B1.c: 119: }
 15994  1179  0008               	return
 15995  117A                     l8325:	
 15996                           
 15997                           ;LED_B1.c: 120: else if(command == 1)
 15998  117A  0822               	movf	setLED@command,w
 15999  117B  3A01               	xorlw	1
 16000  117C  1D03               	skipz
 16001  117D  2990               	goto	l8339
 16002                           
 16003                           ;LED_B1.c: 121: {
 16004                           ;LED_B1.c: 123: if(led == 1)
 16005  117E  0823               	movf	setLED@led,w
 16006  117F  3A01               	xorlw	1
 16007  1180  1D03               	skipz
 16008  1181  2984               	goto	l8331
 16009                           
 16010                           ;LED_B1.c: 124: {
 16011                           ;LED_B1.c: 128: RA3=0;
 16012  1182  118C               	bcf	12,3	;volatile
 16013                           
 16014                           ;LED_B1.c: 130: }
 16015  1183  0008               	return
 16016  1184                     l8331:	
 16017                           
 16018                           ;LED_B1.c: 133: else if(led == 2)
 16019  1184  0823               	movf	setLED@led,w
 16020  1185  3A02               	xorlw	2
 16021  1186  1D03               	skipz
 16022  1187  298A               	goto	l8335
 16023                           
 16024                           ;LED_B1.c: 134: {
 16025                           ;LED_B1.c: 138: RC7=0;
 16026  1188  138E               	bcf	14,7	;volatile
 16027                           
 16028                           ;LED_B1.c: 140: }
 16029  1189  0008               	return
 16030  118A                     l8335:	
 16031                           
 16032                           ;LED_B1.c: 153: else if(led == 99)
 16033  118A  0823               	movf	setLED@led,w
 16034  118B  3A63               	xorlw	99
 16035  118C  1D03               	skipz
 16036  118D  0008               	return
 16037                           
 16038                           ;LED_B1.c: 154: {
 16039                           ;LED_B1.c: 158: RB5=0;
 16040  118E  128D               	bcf	13,5	;volatile
 16041                           
 16042                           ;LED_B1.c: 160: }
 16043                           ;LED_B1.c: 162: }
 16044  118F  0008               	return
 16045  1190                     l8339:	
 16046                           
 16047                           ;LED_B1.c: 163: else if(command == 10)
 16048  1190  0822               	movf	setLED@command,w
 16049  1191  3A0A               	xorlw	10
 16050  1192  1D03               	skipz
 16051  1193  29B2               	goto	l8355
 16052                           
 16053                           ;LED_B1.c: 164: {
 16054                           ;LED_B1.c: 165: LED->GO=0;
 16055  1194  0021               	movlb	1	; select bank1
 16056  1195  083B               	movf	_LED^(0+128),w
 16057  1196  0086               	movwf	6
 16058  1197  0187               	clrf	7
 16059  1198  1081               	bcf	1,1
 16060                           
 16061                           ;LED_B1.c: 166: LED->Time=0;
 16062  1199  0A3B               	incf	_LED^(0+128),w
 16063  119A  0086               	movwf	6
 16064  119B  0187               	clrf	7
 16065  119C  3000               	movlw	0
 16066  119D  3FC0               	movwi [0]fsr1
 16067  119E  3FC1               	movwi [1]fsr1
 16068                           
 16069                           ;LED_B1.c: 168: if(led == 1)
 16070  119F  0020               	movlb	0	; select bank0
 16071  11A0  0823               	movf	setLED@led,w
 16072  11A1  3A01               	xorlw	1
 16073  11A2  1D03               	skipz
 16074  11A3  29A6               	goto	l8347
 16075                           
 16076                           ;LED_B1.c: 169: {
 16077                           ;LED_B1.c: 173: RA3=1;
 16078  11A4  158C               	bsf	12,3	;volatile
 16079                           
 16080                           ;LED_B1.c: 175: }
 16081  11A5  0008               	return
 16082  11A6                     l8347:	
 16083                           
 16084                           ;LED_B1.c: 178: else if(led == 2)
 16085  11A6  0823               	movf	setLED@led,w
 16086  11A7  3A02               	xorlw	2
 16087  11A8  1D03               	skipz
 16088  11A9  29AC               	goto	l8351
 16089                           
 16090                           ;LED_B1.c: 179: {
 16091                           ;LED_B1.c: 183: RC7=1;
 16092  11AA  178E               	bsf	14,7	;volatile
 16093                           
 16094                           ;LED_B1.c: 185: }
 16095  11AB  0008               	return
 16096  11AC                     l8351:	
 16097                           
 16098                           ;LED_B1.c: 198: else if(led == 99)
 16099  11AC  0823               	movf	setLED@led,w
 16100  11AD  3A63               	xorlw	99
 16101  11AE  1D03               	skipz
 16102  11AF  0008               	return
 16103                           
 16104                           ;LED_B1.c: 199: {
 16105                           ;LED_B1.c: 203: RB5=1;
 16106  11B0  168D               	bsf	13,5	;volatile
 16107                           
 16108                           ;LED_B1.c: 205: }
 16109                           ;LED_B1.c: 207: }
 16110  11B1  0008               	return
 16111  11B2                     l8355:	
 16112                           
 16113                           ;LED_B1.c: 208: else if(command == 11)
 16114  11B2  0822               	movf	setLED@command,w
 16115  11B3  3A0B               	xorlw	11
 16116  11B4  1D03               	skipz
 16117  11B5  0008               	return
 16118                           
 16119                           ;LED_B1.c: 209: {
 16120                           ;LED_B1.c: 210: LED->GO=1;
 16121  11B6  0021               	movlb	1	; select bank1
 16122  11B7  083B               	movf	_LED^(0+128),w
 16123  11B8  0086               	movwf	6
 16124  11B9  0187               	clrf	7
 16125  11BA  1481               	bsf	1,1
 16126  11BB  0008               	return
 16127  11BC                     __end_of_setLED:	
 16128                           
 16129                           	psect	text93
 16130  1947                     __ptext93:	
 16131 ;; *************** function _LedPointSelect *****************
 16132 ;; Defined at:
 16133 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16134 ;; Parameters:    Size  Location     Type
 16135 ;;  led             1    wreg     unsigned char 
 16136 ;; Auto vars:     Size  Location     Type
 16137 ;;  led             1    1[BANK0 ] unsigned char 
 16138 ;; Return value:  Size  Location     Type
 16139 ;;		None               void
 16140 ;; Registers used:
 16141 ;;		wreg
 16142 ;; Tracked objects:
 16143 ;;		On entry : 0/0
 16144 ;;		On exit  : 0/0
 16145 ;;		Unchanged: 0/0
 16146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;Total ram usage:        2 bytes
 16152 ;; Hardware stack levels used:    1
 16153 ;; Hardware stack levels required when called:    4
 16154 ;; This function calls:
 16155 ;;		Nothing
 16156 ;; This function is called by:
 16157 ;;		_setLED_Initialization
 16158 ;;		_setLED
 16159 ;;		_setLED_Main
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           
 16164                           ;psect for function _LedPointSelect
 16165  1947                     _LedPointSelect:	
 16166                           
 16167                           ;incstack = 0
 16168                           ; Regs used in _LedPointSelect: [wreg]
 16169                           ;LedPointSelect@led stored from wreg
 16170  1947  0020               	movlb	0	; select bank0
 16171  1948  00A1               	movwf	LedPointSelect@led
 16172                           
 16173                           ;LED_B1.c: 10: if(led == 1)
 16174  1949  0821               	movf	LedPointSelect@led,w
 16175  194A  3A01               	xorlw	1
 16176  194B  1D03               	skipz
 16177  194C  2953               	goto	l6139
 16178                           
 16179                           ;LED_B1.c: 11: {
 16180                           ;LED_B1.c: 12: LED=&VarLED1;
 16181  194D  30DE               	movlw	_VarLED1& (0+255)
 16182  194E  00A0               	movwf	??_LedPointSelect
 16183  194F  0820               	movf	??_LedPointSelect,w
 16184  1950  0021               	movlb	1	; select bank1
 16185  1951  00BB               	movwf	_LED^(0+128)
 16186                           
 16187                           ;LED_B1.c: 13: }
 16188  1952  0008               	return
 16189  1953                     l6139:	
 16190                           
 16191                           ;LED_B1.c: 16: else if(led == 2)
 16192  1953  0020               	movlb	0	; select bank0
 16193  1954  0821               	movf	LedPointSelect@led,w
 16194  1955  3A02               	xorlw	2
 16195  1956  1D03               	skipz
 16196  1957  295E               	goto	l6143
 16197                           
 16198                           ;LED_B1.c: 17: {
 16199                           ;LED_B1.c: 18: LED=&VarLED2;
 16200  1958  30E2               	movlw	_VarLED2& (0+255)
 16201  1959  00A0               	movwf	??_LedPointSelect
 16202  195A  0820               	movf	??_LedPointSelect,w
 16203  195B  0021               	movlb	1	; select bank1
 16204  195C  00BB               	movwf	_LED^(0+128)
 16205                           
 16206                           ;LED_B1.c: 19: }
 16207  195D  0008               	return
 16208  195E                     l6143:	
 16209                           
 16210                           ;LED_B1.c: 28: else if(led == 99)
 16211  195E  0020               	movlb	0	; select bank0
 16212  195F  0821               	movf	LedPointSelect@led,w
 16213  1960  3A63               	xorlw	99
 16214  1961  1D03               	skipz
 16215  1962  0008               	return
 16216                           
 16217                           ;LED_B1.c: 29: {
 16218                           ;LED_B1.c: 30: LED=&VarErrLED;
 16219  1963  30DA               	movlw	_VarErrLED& (0+255)
 16220  1964  00A0               	movwf	??_LedPointSelect
 16221  1965  0820               	movf	??_LedPointSelect,w
 16222  1966  0021               	movlb	1	; select bank1
 16223  1967  00BB               	movwf	_LED^(0+128)
 16224  1968  0008               	return
 16225  1969                     __end_of_LedPointSelect:	
 16226                           
 16227                           	psect	text94
 16228  1875                     __ptext94:	
 16229 ;; *************** function _DimmerLights_Close *****************
 16230 ;; Defined at:
 16231 ;;		line 101 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;		None
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;		None
 16236 ;; Return value:  Size  Location     Type
 16237 ;;		None               void
 16238 ;; Registers used:
 16239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16240 ;; Tracked objects:
 16241 ;;		On entry : 0/0
 16242 ;;		On exit  : 0/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;Total ram usage:        0 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; Hardware stack levels required when called:    5
 16252 ;; This function calls:
 16253 ;;		_getDimmerLights_StatusFlag
 16254 ;;		_setLoad_GO
 16255 ;; This function is called by:
 16256 ;;		_DimmerLights_Main
 16257 ;; This function uses a non-reentrant model
 16258 ;;
 16259                           
 16260                           
 16261                           ;psect for function _DimmerLights_Close
 16262  1875                     _DimmerLights_Close:	
 16263                           
 16264                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16265                           
 16266                           ;incstack = 0
 16267                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16268  1875  0021               	movlb	1	; select bank1
 16269  1876  0839               	movf	_Dimmer^(0+128),w
 16270  1877  0086               	movwf	6
 16271  1878  0187               	clrf	7
 16272  1879  1C01               	btfss	1,0
 16273  187A  0008               	return
 16274                           
 16275                           ;Dimmer_B1.c: 104: {
 16276                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16277  187B  0839               	movf	_Dimmer^(0+128),w
 16278  187C  0086               	movwf	6
 16279  187D  0187               	clrf	7
 16280  187E  1001               	bcf	1,0
 16281                           
 16282                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16283  187F  31A5  25EF  3198   	fcall	_getDimmerLights_StatusFlag
 16284  1882  3800               	iorlw	0
 16285  1883  1D03               	skipz
 16286  1884  0008               	return
 16287                           
 16288                           ;Dimmer_B1.c: 107: {
 16289                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16290  1885  3000               	movlw	0
 16291  1886  31A5  257B         	fcall	_setLoad_GO
 16292                           
 16293                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16294  1888  0021               	movlb	1	; select bank1
 16295  1889  086D               	movf	_Memory^(0+128),w
 16296  188A  3E22               	addlw	34
 16297  188B  0086               	movwf	6
 16298  188C  3001               	movlw	1	; select bank2/3
 16299  188D  0087               	movwf	7
 16300  188E  1481               	bsf	1,1
 16301  188F  0008               	return
 16302  1890                     __end_of_DimmerLights_Close:	
 16303                           
 16304                           	psect	text95
 16305  257B                     __ptext95:	
 16306 ;; *************** function _setLoad_GO *****************
 16307 ;; Defined at:
 16308 ;;		line 300 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;  command         1    wreg     unsigned char 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  command         1    0[BANK0 ] unsigned char 
 16313 ;; Return value:  Size  Location     Type
 16314 ;;		None               void
 16315 ;; Registers used:
 16316 ;;		wreg, fsr1l, fsr1h
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;Total ram usage:        1 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    4
 16329 ;; This function calls:
 16330 ;;		Nothing
 16331 ;; This function is called by:
 16332 ;;		_DimmerLights_Close
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _setLoad_GO
 16338  257B                     _setLoad_GO:	
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _setLoad_GO: [wregfsr1]
 16342                           ;setLoad_GO@command stored from wreg
 16343  257B  0020               	movlb	0	; select bank0
 16344  257C  00A0               	movwf	setLoad_GO@command
 16345                           
 16346                           ;OverLoad_B1.c: 302: Load->GO=command;
 16347  257D  086E               	movf	_Load,w
 16348  257E  0086               	movwf	6
 16349  257F  3002               	movlw	2	; select bank4/5
 16350  2580  0087               	movwf	7
 16351  2581  0820               	movf	setLoad_GO@command,w
 16352  2582  1081               	bcf	1,1
 16353  2583  1D03               	skipz
 16354  2584  1481               	bsf	1,1
 16355  2585  0008               	return
 16356  2586                     __end_of_setLoad_GO:	
 16357                           
 16358                           	psect	text96
 16359  25EF                     __ptext96:	
 16360 ;; *************** function _getDimmerLights_StatusFlag *****************
 16361 ;; Defined at:
 16362 ;;		line 208 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16363 ;; Parameters:    Size  Location     Type
 16364 ;;		None
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;  Status          1    0[BANK0 ] unsigned char 
 16367 ;; Return value:  Size  Location     Type
 16368 ;;                  1    wreg      unsigned char 
 16369 ;; Registers used:
 16370 ;;		wreg, fsr1l, fsr1h, status,2
 16371 ;; Tracked objects:
 16372 ;;		On entry : 0/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;Total ram usage:        1 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; Hardware stack levels required when called:    4
 16383 ;; This function calls:
 16384 ;;		Nothing
 16385 ;; This function is called by:
 16386 ;;		_DimmerLights_Close
 16387 ;;		_DimmerLights_Exceptions
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           
 16392                           ;psect for function _getDimmerLights_StatusFlag
 16393  25EF                     _getDimmerLights_StatusFlag:	
 16394                           
 16395                           ;Dimmer_B1.c: 210: char Status=0;
 16396                           
 16397                           ;incstack = 0
 16398                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16399  25EF  0020               	movlb	0	; select bank0
 16400  25F0  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16401                           
 16402                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16403  25F1  0879               	movf	_DimmerLights11,w
 16404  25F2  0086               	movwf	6
 16405  25F3  3001               	movlw	1	; select bank2/3
 16406  25F4  0087               	movwf	7
 16407  25F5  3000               	movlw	0
 16408  25F6  1B01               	btfsc	1,6
 16409  25F7  3001               	movlw	1
 16410  25F8  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16411                           
 16412                           ;Dimmer_B1.c: 224: return Status;
 16413  25F9  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16414  25FA  0008               	return
 16415  25FB                     __end_of_getDimmerLights_StatusFlag:	
 16416                           
 16417                           	psect	text97
 16418  25E3                     __ptext97:	
 16419 ;; *************** function _DimmerLights_Initialization *****************
 16420 ;; Defined at:
 16421 ;;		line 41 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;		None
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;		None
 16426 ;; Return value:  Size  Location     Type
 16427 ;;		None               void
 16428 ;; Registers used:
 16429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16438 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;Total ram usage:        1 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    6
 16442 ;; This function calls:
 16443 ;;		_Dimmer_Initialization
 16444 ;;		_setDimmerLights_Initialization
 16445 ;; This function is called by:
 16446 ;;		_main
 16447 ;; This function uses a non-reentrant model
 16448 ;;
 16449                           
 16450                           
 16451                           ;psect for function _DimmerLights_Initialization
 16452  25E3                     _DimmerLights_Initialization:	
 16453                           
 16454                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16455                           
 16456                           ;incstack = 0
 16457                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16458  25E3  3030               	movlw	_DimmerLights1& (0+255)
 16459  25E4  0020               	movlb	0	; select bank0
 16460  25E5  00A4               	movwf	??_DimmerLights_Initialization
 16461  25E6  0824               	movf	??_DimmerLights_Initialization,w
 16462  25E7  00F9               	movwf	_DimmerLights11
 16463                           
 16464                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16465  25E8  3001               	movlw	1
 16466  25E9  319A  22A3  31A5   	fcall	_setDimmerLights_Initialization
 16467                           
 16468                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16469  25EC  31A4  24F5         	fcall	_Dimmer_Initialization
 16470  25EE  0008               	return
 16471  25EF                     __end_of_DimmerLights_Initialization:	
 16472                           
 16473                           	psect	text98
 16474  1AA3                     __ptext98:	
 16475 ;; *************** function _setDimmerLights_Initialization *****************
 16476 ;; Defined at:
 16477 ;;		line 63 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  lights          1    wreg     unsigned char 
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;  lights          1    3[BANK0 ] unsigned char 
 16482 ;; Return value:  Size  Location     Type
 16483 ;;		None               void
 16484 ;; Registers used:
 16485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16486 ;; Tracked objects:
 16487 ;;		On entry : 0/0
 16488 ;;		On exit  : 0/0
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;Total ram usage:        2 bytes
 16496 ;; Hardware stack levels used:    1
 16497 ;; Hardware stack levels required when called:    5
 16498 ;; This function calls:
 16499 ;;		_DimmerLightsPointSelect
 16500 ;; This function is called by:
 16501 ;;		_DimmerLights_Initialization
 16502 ;; This function uses a non-reentrant model
 16503 ;;
 16504                           
 16505                           
 16506                           ;psect for function _setDimmerLights_Initialization
 16507  1AA3                     _setDimmerLights_Initialization:	
 16508                           
 16509                           ;incstack = 0
 16510                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16511                           ;setDimmerLights_Initialization@lights stored from wreg
 16512  1AA3  0020               	movlb	0	; select bank0
 16513  1AA4  00A3               	movwf	setDimmerLights_Initialization@lights
 16514                           
 16515                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16516  1AA5  0823               	movf	setDimmerLights_Initialization@lights,w
 16517  1AA6  31A5  255A         	fcall	_DimmerLightsPointSelect
 16518                           
 16519                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16520  1AA8  0020               	movlb	0	; select bank0
 16521  1AA9  086C               	movf	_DimmerLights,w
 16522  1AAA  3E0C               	addlw	12
 16523  1AAB  0086               	movwf	6
 16524  1AAC  3001               	movlw	1	; select bank2/3
 16525  1AAD  0087               	movwf	7
 16526  1AAE  1401               	bsf	1,0
 16527                           
 16528                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16529  1AAF  3043               	movlw	67
 16530  1AB0  00A2               	movwf	??_setDimmerLights_Initialization
 16531  1AB1  086C               	movf	_DimmerLights,w
 16532  1AB2  3E05               	addlw	5
 16533  1AB3  0086               	movwf	6
 16534  1AB4  3001               	movlw	1	; select bank2/3
 16535  1AB5  0087               	movwf	7
 16536  1AB6  0822               	movf	??_setDimmerLights_Initialization,w
 16537  1AB7  0081               	movwf	1
 16538                           
 16539                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16540  1AB8  3078               	movlw	120
 16541  1AB9  00A2               	movwf	??_setDimmerLights_Initialization
 16542  1ABA  086C               	movf	_DimmerLights,w
 16543  1ABB  3E06               	addlw	6
 16544  1ABC  0086               	movwf	6
 16545  1ABD  3001               	movlw	1	; select bank2/3
 16546  1ABE  0087               	movwf	7
 16547  1ABF  0822               	movf	??_setDimmerLights_Initialization,w
 16548  1AC0  0081               	movwf	1
 16549                           
 16550                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16551  1AC1  086C               	movf	_DimmerLights,w
 16552  1AC2  3E06               	addlw	6
 16553  1AC3  0086               	movwf	6
 16554  1AC4  3001               	movlw	1	; select bank2/3
 16555  1AC5  0087               	movwf	7
 16556  1AC6  0801               	movf	1,w
 16557  1AC7  00A2               	movwf	??_setDimmerLights_Initialization
 16558  1AC8  086C               	movf	_DimmerLights,w
 16559  1AC9  3E04               	addlw	4
 16560  1ACA  0086               	movwf	6
 16561  1ACB  3001               	movlw	1	; select bank2/3
 16562  1ACC  0087               	movwf	7
 16563  1ACD  0822               	movf	??_setDimmerLights_Initialization,w
 16564  1ACE  0081               	movwf	1
 16565  1ACF  0008               	return
 16566  1AD0                     __end_of_setDimmerLights_Initialization:	
 16567                           
 16568                           	psect	text99
 16569  24F5                     __ptext99:	
 16570 ;; *************** function _Dimmer_Initialization *****************
 16571 ;; Defined at:
 16572 ;;		line 520 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;		None
 16577 ;; Return value:  Size  Location     Type
 16578 ;;		None               void
 16579 ;; Registers used:
 16580 ;;		wreg
 16581 ;; Tracked objects:
 16582 ;;		On entry : 0/0
 16583 ;;		On exit  : 0/0
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;Total ram usage:        1 bytes
 16591 ;; Hardware stack levels used:    1
 16592 ;; Hardware stack levels required when called:    4
 16593 ;; This function calls:
 16594 ;;		Nothing
 16595 ;; This function is called by:
 16596 ;;		_DimmerLights_Initialization
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function _Dimmer_Initialization
 16602  24F5                     _Dimmer_Initialization:	
 16603                           
 16604                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16605                           
 16606                           ;incstack = 0
 16607                           ; Regs used in _Dimmer_Initialization: [wreg]
 16608  24F5  30E6               	movlw	_Dimmer1& (0+255)
 16609  24F6  0020               	movlb	0	; select bank0
 16610  24F7  00A0               	movwf	??_Dimmer_Initialization
 16611  24F8  0820               	movf	??_Dimmer_Initialization,w
 16612  24F9  0021               	movlb	1	; select bank1
 16613  24FA  00B9               	movwf	_Dimmer^(0+128)
 16614  24FB  0008               	return
 16615  24FC                     __end_of_Dimmer_Initialization:	
 16616                           
 16617                           	psect	text100
 16618  24CE                     __ptext100:	
 16619 ;; *************** function _DelayOff_Main *****************
 16620 ;; Defined at:
 16621 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16622 ;; Parameters:    Size  Location     Type
 16623 ;;		None
 16624 ;; Auto vars:     Size  Location     Type
 16625 ;;		None
 16626 ;; Return value:  Size  Location     Type
 16627 ;;		None               void
 16628 ;; Registers used:
 16629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;Total ram usage:        0 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    9
 16642 ;; This function calls:
 16643 ;;		_DlyOff_Main
 16644 ;; This function is called by:
 16645 ;;		_main
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           
 16650                           ;psect for function _DelayOff_Main
 16651  24CE                     _DelayOff_Main:	
 16652                           
 16653                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16654                           
 16655                           ;incstack = 0
 16656                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16657  24CE  3001               	movlw	1
 16658  24CF  3195  25FE         	fcall	_DlyOff_Main
 16659  24D1  0008               	return
 16660  24D2                     __end_of_DelayOff_Main:	
 16661                           
 16662                           	psect	text101
 16663  15FE                     __ptext101:	
 16664 ;; *************** function _DlyOff_Main *****************
 16665 ;; Defined at:
 16666 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  sw              1    wreg     unsigned char 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  sw              1   68[BANK0 ] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;		None               void
 16673 ;; Registers used:
 16674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;Total ram usage:        3 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    8
 16687 ;; This function calls:
 16688 ;;		_DelayOffPointSelect
 16689 ;;		_setBuz
 16690 ;;		_setDimmerLights_Switch
 16691 ;;		_setDimmerLights_Trigger
 16692 ;;		_setRFSW_Status
 16693 ;;		_setRF_DimmerLights
 16694 ;;		_setSw_Status
 16695 ;;		_setTxData
 16696 ;; This function is called by:
 16697 ;;		_DelayOff_Main
 16698 ;; This function uses a non-reentrant model
 16699 ;;
 16700                           
 16701                           
 16702                           ;psect for function _DlyOff_Main
 16703  15FE                     _DlyOff_Main:	
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16707                           ;DlyOff_Main@sw stored from wreg
 16708  15FE  0020               	movlb	0	; select bank0
 16709  15FF  00E4               	movwf	DlyOff_Main@sw
 16710                           
 16711                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16712  1600  0864               	movf	DlyOff_Main@sw,w
 16713  1601  31A5  25CB  3195   	fcall	_DelayOffPointSelect
 16714                           
 16715                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16716  1604  0021               	movlb	1	; select bank1
 16717  1605  0838               	movf	_DelayOff^(0+128),w
 16718  1606  0086               	movwf	6
 16719  1607  0187               	clrf	7
 16720  1608  1C81               	btfss	1,1
 16721  1609  0008               	return
 16722                           
 16723                           ;DelayOff_B1.c: 70: {
 16724                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16725  160A  0838               	movf	_DelayOff^(0+128),w
 16726  160B  3E02               	addlw	2
 16727  160C  0086               	movwf	6
 16728  160D  0187               	clrf	7
 16729  160E  3001               	movlw	1
 16730  160F  0781               	addwf	1,f
 16731  1610  3141               	addfsr 1,1
 16732  1611  1803               	skipnc
 16733  1612  0A81               	incf	1,f
 16734                           
 16735                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16736  1613  0838               	movf	_DelayOff^(0+128),w
 16737  1614  3E02               	addlw	2
 16738  1615  0086               	movwf	6
 16739  1616  0187               	clrf	7
 16740  1617  3F40               	moviw [0]fsr1
 16741  1618  0020               	movlb	0	; select bank0
 16742  1619  00E2               	movwf	??_DlyOff_Main
 16743  161A  3F41               	moviw [1]fsr1
 16744  161B  00E3               	movwf	??_DlyOff_Main+1
 16745  161C  3015               	movlw	21
 16746  161D  0263               	subwf	??_DlyOff_Main+1,w
 16747  161E  30E0               	movlw	224
 16748  161F  1903               	skipnz
 16749  1620  0262               	subwf	??_DlyOff_Main,w
 16750  1621  1C03               	skipc
 16751  1622  0008               	return
 16752                           
 16753                           ;DelayOff_B1.c: 73: {
 16754                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16755  1623  0021               	movlb	1	; select bank1
 16756  1624  0838               	movf	_DelayOff^(0+128),w
 16757  1625  3E02               	addlw	2
 16758  1626  0086               	movwf	6
 16759  1627  0187               	clrf	7
 16760  1628  3000               	movlw	0
 16761  1629  3FC0               	movwi [0]fsr1
 16762  162A  3FC1               	movwi [1]fsr1
 16763                           
 16764                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16765  162B  3001               	movlw	1
 16766  162C  0020               	movlb	0	; select bank0
 16767  162D  00E2               	movwf	??_DlyOff_Main
 16768  162E  0021               	movlb	1	; select bank1
 16769  162F  0838               	movf	_DelayOff^(0+128),w
 16770  1630  3E04               	addlw	4
 16771  1631  0086               	movwf	6
 16772  1632  0187               	clrf	7
 16773  1633  0020               	movlb	0	; select bank0
 16774  1634  0862               	movf	??_DlyOff_Main,w
 16775  1635  0781               	addwf	1,f
 16776                           
 16777                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16778  1636  0021               	movlb	1	; select bank1
 16779  1637  0838               	movf	_DelayOff^(0+128),w
 16780  1638  3E04               	addlw	4
 16781  1639  0086               	movwf	6
 16782  163A  0187               	clrf	7
 16783  163B  0A38               	incf	_DelayOff^(0+128),w
 16784  163C  0084               	movwf	4
 16785  163D  0185               	clrf	5
 16786  163E  0800               	movf	0,w
 16787  163F  0201               	subwf	1,w
 16788  1640  1C03               	skipc
 16789  1641  0008               	return
 16790                           
 16791                           ;DelayOff_B1.c: 77: {
 16792                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16793  1642  0838               	movf	_DelayOff^(0+128),w
 16794  1643  3E04               	addlw	4
 16795  1644  0086               	movwf	6
 16796  1645  0187               	clrf	7
 16797  1646  0181               	clrf	1
 16798                           
 16799                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16800  1647  0838               	movf	_DelayOff^(0+128),w
 16801  1648  0086               	movwf	6
 16802  1649  0187               	clrf	7
 16803  164A  1081               	bcf	1,1
 16804                           
 16805                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16806  164B  0020               	movlb	0	; select bank0
 16807  164C  01A2               	clrf	setSw_Status@command
 16808  164D  0864               	movf	DlyOff_Main@sw,w
 16809  164E  31A6  268E  3195   	fcall	_setSw_Status
 16810                           
 16811                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16812  1651  0020               	movlb	0	; select bank0
 16813  1652  01A2               	clrf	setRFSW_Status@command
 16814  1653  0864               	movf	DlyOff_Main@sw,w
 16815  1654  31A6  267F  3195   	fcall	_setRFSW_Status
 16816                           
 16817                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16818  1657  0020               	movlb	0	; select bank0
 16819  1658  01DD               	clrf	setRF_DimmerLights@on
 16820  1659  0864               	movf	DlyOff_Main@sw,w
 16821  165A  3192  2281  3195   	fcall	_setRF_DimmerLights
 16822                           
 16823                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16824  165D  0020               	movlb	0	; select bank0
 16825  165E  01A2               	clrf	setDimmerLights_Trigger@command
 16826  165F  0AA2               	incf	setDimmerLights_Trigger@command,f
 16827  1660  0864               	movf	DlyOff_Main@sw,w
 16828  1661  31A6  26BD  3195   	fcall	_setDimmerLights_Trigger
 16829                           
 16830                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16831  1664  0020               	movlb	0	; select bank0
 16832  1665  01A2               	clrf	setDimmerLights_Switch@command
 16833  1666  0864               	movf	DlyOff_Main@sw,w
 16834  1667  31A6  26AD  3195   	fcall	_setDimmerLights_Switch
 16835                           
 16836                           ;DelayOff_B1.c: 85: setTxData(1);
 16837  166A  3001               	movlw	1
 16838  166B  318B  2335  3195   	fcall	_setTxData
 16839                           
 16840                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16841  166E  3064               	movlw	100
 16842  166F  0020               	movlb	0	; select bank0
 16843  1670  00A6               	movwf	setBuz@time
 16844  1671  3000               	movlw	0
 16845  1672  00A7               	movwf	setBuz@time+1
 16846  1673  3001               	movlw	1
 16847  1674  3195  2587         	fcall	_setBuz
 16848  1676  0008               	return
 16849  1677                     __end_of_DlyOff_Main:	
 16850                           
 16851                           	psect	text102
 16852  0B35                     __ptext102:	
 16853 ;; *************** function _setTxData *****************
 16854 ;; Defined at:
 16855 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;  rf              1    wreg     unsigned char 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  rf              1    3[BANK0 ] unsigned char 
 16860 ;;  i               1    0        unsigned char 
 16861 ;; Return value:  Size  Location     Type
 16862 ;;		None               void
 16863 ;; Registers used:
 16864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16865 ;; Tracked objects:
 16866 ;;		On entry : 0/0
 16867 ;;		On exit  : 0/0
 16868 ;;		Unchanged: 0/0
 16869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;Total ram usage:        2 bytes
 16875 ;; Hardware stack levels used:    1
 16876 ;; Hardware stack levels required when called:    5
 16877 ;; This function calls:
 16878 ;;		_RfPointSelect
 16879 ;; This function is called by:
 16880 ;;		_DlyOff_Main
 16881 ;;		_setDimmerLights_Adj
 16882 ;;		_setControl_Lights_Table
 16883 ;;		_setRFSW_Control
 16884 ;;		_setRFSW_AdjControl
 16885 ;;		_Sw_DimmerOnFunc
 16886 ;;		_Sw_DimmerOffFunc
 16887 ;; This function uses a non-reentrant model
 16888 ;;
 16889                           
 16890                           
 16891                           ;psect for function _setTxData
 16892  0B35                     _setTxData:	
 16893                           
 16894                           ;incstack = 0
 16895                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16896                           ;setTxData@rf stored from wreg
 16897  0B35  0020               	movlb	0	; select bank0
 16898  0B36  00A3               	movwf	setTxData@rf
 16899                           
 16900                           ;RF_Control_B1.c: 142: char i;
 16901                           ;RF_Control_B1.c: 143: RfPointSelect(rf);
 16902  0B37  0823               	movf	setTxData@rf,w
 16903  0B38  31A5  2570  318B   	fcall	_RfPointSelect
 16904                           
 16905                           ;RF_Control_B1.c: 144: if(RF->Enable)
 16906  0B3B  087B               	movf	_RF,w
 16907  0B3C  0086               	movwf	6
 16908  0B3D  0187               	clrf	7
 16909  0B3E  1C01               	btfss	1,0
 16910  0B3F  0008               	return
 16911                           
 16912                           ;RF_Control_B1.c: 145: {
 16913                           ;RF_Control_B1.c: 147: if(!RF->TransceiveGO)
 16914  0B40  087B               	movf	_RF,w
 16915  0B41  0086               	movwf	6
 16916  0B42  0187               	clrf	7
 16917  0B43  1901               	btfsc	1,2
 16918  0B44  0008               	return
 16919                           
 16920                           ;RF_Control_B1.c: 148: {
 16921                           ;RF_Control_B1.c: 149: RF->TransceiveGO=1;
 16922  0B45  087B               	movf	_RF,w
 16923  0B46  0086               	movwf	6
 16924  0B47  0187               	clrf	7
 16925  0B48  1501               	bsf	1,2
 16926                           
 16927                           ;RF_Control_B1.c: 158: RF_Data[0]=0x63;
 16928  0B49  3063               	movlw	99
 16929  0B4A  0020               	movlb	0	; select bank0
 16930  0B4B  00A2               	movwf	??_setTxData
 16931  0B4C  0822               	movf	??_setTxData,w
 16932  0B4D  0021               	movlb	1	; select bank1
 16933  0B4E  00A0               	movwf	_RF_Data^(0+128)
 16934                           
 16935                           ;RF_Control_B1.c: 159: RF_Data[1]=0x02;
 16936  0B4F  3002               	movlw	2
 16937  0B50  0020               	movlb	0	; select bank0
 16938  0B51  00A2               	movwf	??_setTxData
 16939  0B52  0822               	movf	??_setTxData,w
 16940  0B53  0021               	movlb	1	; select bank1
 16941  0B54  00A1               	movwf	(_RF_Data^(0+128)+1)
 16942                           
 16943                           ;RF_Control_B1.c: 160: RF_Data[2]=Product->Data[2];
 16944  0B55  0020               	movlb	0	; select bank0
 16945  0B56  086F               	movf	_Product,w
 16946  0B57  0086               	movwf	6
 16947  0B58  3001               	movlw	1	; select bank2/3
 16948  0B59  0087               	movwf	7
 16949  0B5A  3001               	movlw	1	; select bank2/3
 16950  0B5B  3F42               	moviw [2]fsr1
 16951  0B5C  0021               	movlb	1	; select bank1
 16952  0B5D  00A2               	movwf	(_RF_Data^(0+128)+2)
 16953                           
 16954                           ;RF_Control_B1.c: 161: RF_Data[3]=Product->Data[3];
 16955  0B5E  0020               	movlb	0	; select bank0
 16956  0B5F  086F               	movf	_Product,w
 16957  0B60  0086               	movwf	6
 16958  0B61  3001               	movlw	1	; select bank2/3
 16959  0B62  0087               	movwf	7
 16960  0B63  3001               	movlw	1	; select bank2/3
 16961  0B64  3F43               	moviw [3]fsr1
 16962  0B65  0021               	movlb	1	; select bank1
 16963  0B66  00A3               	movwf	(_RF_Data^(0+128)+3)
 16964                           
 16965                           ;RF_Control_B1.c: 162: RF_Data[4]=Product->Data[4];
 16966  0B67  0020               	movlb	0	; select bank0
 16967  0B68  086F               	movf	_Product,w
 16968  0B69  0086               	movwf	6
 16969  0B6A  3001               	movlw	1	; select bank2/3
 16970  0B6B  0087               	movwf	7
 16971  0B6C  3001               	movlw	1	; select bank2/3
 16972  0B6D  3F44               	moviw [4]fsr1
 16973  0B6E  0021               	movlb	1	; select bank1
 16974  0B6F  00A4               	movwf	(_RF_Data^(0+128)+4)
 16975                           
 16976                           ;RF_Control_B1.c: 163: RF_Data[5]=Product->Data[5];
 16977  0B70  0020               	movlb	0	; select bank0
 16978  0B71  086F               	movf	_Product,w
 16979  0B72  0086               	movwf	6
 16980  0B73  3001               	movlw	1	; select bank2/3
 16981  0B74  0087               	movwf	7
 16982  0B75  3001               	movlw	1	; select bank2/3
 16983  0B76  3F45               	moviw [5]fsr1
 16984  0B77  0021               	movlb	1	; select bank1
 16985  0B78  00A5               	movwf	(_RF_Data^(0+128)+5)
 16986                           
 16987                           ;RF_Control_B1.c: 164: RF_Data[6]=Product->Data[6];
 16988  0B79  0020               	movlb	0	; select bank0
 16989  0B7A  086F               	movf	_Product,w
 16990  0B7B  0086               	movwf	6
 16991  0B7C  3001               	movlw	1	; select bank2/3
 16992  0B7D  0087               	movwf	7
 16993  0B7E  3001               	movlw	1	; select bank2/3
 16994  0B7F  3F46               	moviw [6]fsr1
 16995  0B80  0021               	movlb	1	; select bank1
 16996  0B81  00A6               	movwf	(_RF_Data^(0+128)+6)
 16997                           
 16998                           ;RF_Control_B1.c: 165: RF_Data[7]=Product->Data[7];
 16999  0B82  0020               	movlb	0	; select bank0
 17000  0B83  086F               	movf	_Product,w
 17001  0B84  0086               	movwf	6
 17002  0B85  3001               	movlw	1	; select bank2/3
 17003  0B86  0087               	movwf	7
 17004  0B87  3001               	movlw	1	; select bank2/3
 17005  0B88  3F47               	moviw [7]fsr1
 17006  0B89  0021               	movlb	1	; select bank1
 17007  0B8A  00A7               	movwf	(_RF_Data^(0+128)+7)
 17008                           
 17009                           ;RF_Control_B1.c: 166: RF_Data[8]=Product->Data[8];
 17010  0B8B  0020               	movlb	0	; select bank0
 17011  0B8C  086F               	movf	_Product,w
 17012  0B8D  0086               	movwf	6
 17013  0B8E  3001               	movlw	1	; select bank2/3
 17014  0B8F  0087               	movwf	7
 17015  0B90  3001               	movlw	1	; select bank2/3
 17016  0B91  3F48               	moviw [8]fsr1
 17017  0B92  0021               	movlb	1	; select bank1
 17018  0B93  00A8               	movwf	(_RF_Data^(0+128)+8)
 17019                           
 17020                           ;RF_Control_B1.c: 167: RF_Data[9]=Product->Data[9];
 17021  0B94  0020               	movlb	0	; select bank0
 17022  0B95  086F               	movf	_Product,w
 17023  0B96  0086               	movwf	6
 17024  0B97  3001               	movlw	1	; select bank2/3
 17025  0B98  0087               	movwf	7
 17026  0B99  3001               	movlw	1	; select bank2/3
 17027  0B9A  3F49               	moviw [9]fsr1
 17028  0B9B  0021               	movlb	1	; select bank1
 17029  0B9C  00A9               	movwf	(_RF_Data^(0+128)+9)
 17030                           
 17031                           ;RF_Control_B1.c: 168: RF_Data[10]=Product->Data[10];
 17032  0B9D  0020               	movlb	0	; select bank0
 17033  0B9E  086F               	movf	_Product,w
 17034  0B9F  0086               	movwf	6
 17035  0BA0  3001               	movlw	1	; select bank2/3
 17036  0BA1  0087               	movwf	7
 17037  0BA2  3001               	movlw	1	; select bank2/3
 17038  0BA3  3F4A               	moviw [10]fsr1
 17039  0BA4  0021               	movlb	1	; select bank1
 17040  0BA5  00AA               	movwf	(_RF_Data^(0+128)+10)
 17041                           
 17042                           ;RF_Control_B1.c: 169: RF_Data[11]=Product->Data[11];
 17043  0BA6  0020               	movlb	0	; select bank0
 17044  0BA7  086F               	movf	_Product,w
 17045  0BA8  0086               	movwf	6
 17046  0BA9  3001               	movlw	1	; select bank2/3
 17047  0BAA  0087               	movwf	7
 17048  0BAB  3001               	movlw	1	; select bank2/3
 17049  0BAC  3F4B               	moviw [11]fsr1
 17050  0BAD  0021               	movlb	1	; select bank1
 17051  0BAE  00AB               	movwf	(_RF_Data^(0+128)+11)
 17052                           
 17053                           ;RF_Control_B1.c: 170: RF_Data[12]=Product->Data[12];
 17054  0BAF  0020               	movlb	0	; select bank0
 17055  0BB0  086F               	movf	_Product,w
 17056  0BB1  0086               	movwf	6
 17057  0BB2  3001               	movlw	1	; select bank2/3
 17058  0BB3  0087               	movwf	7
 17059  0BB4  3001               	movlw	1	; select bank2/3
 17060  0BB5  3F4C               	moviw [12]fsr1
 17061  0BB6  0021               	movlb	1	; select bank1
 17062  0BB7  00AC               	movwf	(_RF_Data^(0+128)+12)
 17063                           
 17064                           ;RF_Control_B1.c: 171: RF_Data[13]=Product->Data[13];
 17065  0BB8  0020               	movlb	0	; select bank0
 17066  0BB9  086F               	movf	_Product,w
 17067  0BBA  0086               	movwf	6
 17068  0BBB  3001               	movlw	1	; select bank2/3
 17069  0BBC  0087               	movwf	7
 17070  0BBD  3001               	movlw	1	; select bank2/3
 17071  0BBE  3F4D               	moviw [13]fsr1
 17072  0BBF  0021               	movlb	1	; select bank1
 17073  0BC0  00AD               	movwf	(_RF_Data^(0+128)+13)
 17074                           
 17075                           ;RF_Control_B1.c: 172: RF_Data[14]=Product->Data[14];
 17076  0BC1  0020               	movlb	0	; select bank0
 17077  0BC2  086F               	movf	_Product,w
 17078  0BC3  0086               	movwf	6
 17079  0BC4  3001               	movlw	1	; select bank2/3
 17080  0BC5  0087               	movwf	7
 17081  0BC6  3001               	movlw	1	; select bank2/3
 17082  0BC7  3F4E               	moviw [14]fsr1
 17083  0BC8  0021               	movlb	1	; select bank1
 17084  0BC9  00AE               	movwf	(_RF_Data^(0+128)+14)
 17085                           
 17086                           ;RF_Control_B1.c: 173: RF_Data[15]=Product->Data[15];
 17087  0BCA  0020               	movlb	0	; select bank0
 17088  0BCB  086F               	movf	_Product,w
 17089  0BCC  0086               	movwf	6
 17090  0BCD  3001               	movlw	1	; select bank2/3
 17091  0BCE  0087               	movwf	7
 17092  0BCF  3001               	movlw	1	; select bank2/3
 17093  0BD0  3F4F               	moviw [15]fsr1
 17094  0BD1  0021               	movlb	1	; select bank1
 17095  0BD2  00AF               	movwf	(_RF_Data^(0+128)+15)
 17096                           
 17097                           ;RF_Control_B1.c: 174: RF_Data[16]=Product->Data[16];
 17098  0BD3  0020               	movlb	0	; select bank0
 17099  0BD4  086F               	movf	_Product,w
 17100  0BD5  0086               	movwf	6
 17101  0BD6  3001               	movlw	1	; select bank2/3
 17102  0BD7  0087               	movwf	7
 17103  0BD8  3001               	movlw	1	; select bank2/3
 17104  0BD9  3F50               	moviw [16]fsr1
 17105  0BDA  0021               	movlb	1	; select bank1
 17106  0BDB  00B0               	movwf	(_RF_Data^(0+128)+16)
 17107                           
 17108                           ;RF_Control_B1.c: 175: RF_Data[17]=Product->Data[17];
 17109  0BDC  0020               	movlb	0	; select bank0
 17110  0BDD  086F               	movf	_Product,w
 17111  0BDE  0086               	movwf	6
 17112  0BDF  3001               	movlw	1	; select bank2/3
 17113  0BE0  0087               	movwf	7
 17114  0BE1  3001               	movlw	1	; select bank2/3
 17115  0BE2  3F51               	moviw [17]fsr1
 17116  0BE3  0021               	movlb	1	; select bank1
 17117  0BE4  00B1               	movwf	(_RF_Data^(0+128)+17)
 17118                           
 17119                           ;RF_Control_B1.c: 176: RF_Data[18]=Product->Data[18];
 17120  0BE5  0020               	movlb	0	; select bank0
 17121  0BE6  086F               	movf	_Product,w
 17122  0BE7  0086               	movwf	6
 17123  0BE8  3001               	movlw	1	; select bank2/3
 17124  0BE9  0087               	movwf	7
 17125  0BEA  3001               	movlw	1	; select bank2/3
 17126  0BEB  3F52               	moviw [18]fsr1
 17127  0BEC  0021               	movlb	1	; select bank1
 17128  0BED  00B2               	movwf	(_RF_Data^(0+128)+18)
 17129                           
 17130                           ;RF_Control_B1.c: 177: RF_Data[19]=Product->Data[19];
 17131  0BEE  0020               	movlb	0	; select bank0
 17132  0BEF  086F               	movf	_Product,w
 17133  0BF0  0086               	movwf	6
 17134  0BF1  3001               	movlw	1	; select bank2/3
 17135  0BF2  0087               	movwf	7
 17136  0BF3  3001               	movlw	1	; select bank2/3
 17137  0BF4  3F53               	moviw [19]fsr1
 17138  0BF5  0021               	movlb	1	; select bank1
 17139  0BF6  00B3               	movwf	(_RF_Data^(0+128)+19)
 17140                           
 17141                           ;RF_Control_B1.c: 178: RF_Data[20]=209;
 17142  0BF7  30D1               	movlw	209
 17143  0BF8  0020               	movlb	0	; select bank0
 17144  0BF9  00A2               	movwf	??_setTxData
 17145  0BFA  0822               	movf	??_setTxData,w
 17146  0BFB  0021               	movlb	1	; select bank1
 17147  0BFC  00B4               	movwf	(_RF_Data^(0+128)+20)
 17148  0BFD  0008               	return
 17149  0BFE                     __end_of_setTxData:	
 17150                           
 17151                           	psect	text103
 17152  2570                     __ptext103:	
 17153 ;; *************** function _RfPointSelect *****************
 17154 ;; Defined at:
 17155 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17156 ;; Parameters:    Size  Location     Type
 17157 ;;  rf              1    wreg     unsigned char 
 17158 ;; Auto vars:     Size  Location     Type
 17159 ;;  rf              1    1[BANK0 ] unsigned char 
 17160 ;; Return value:  Size  Location     Type
 17161 ;;		None               void
 17162 ;; Registers used:
 17163 ;;		wreg
 17164 ;; Tracked objects:
 17165 ;;		On entry : 0/0
 17166 ;;		On exit  : 0/0
 17167 ;;		Unchanged: 0/0
 17168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;Total ram usage:        2 bytes
 17174 ;; Hardware stack levels used:    1
 17175 ;; Hardware stack levels required when called:    4
 17176 ;; This function calls:
 17177 ;;		Nothing
 17178 ;; This function is called by:
 17179 ;;		_setRF_Learn
 17180 ;;		_setRF_RxStatus
 17181 ;;		_setRF_Main
 17182 ;;		_setTxData
 17183 ;;		_setRF_Enable
 17184 ;;		_RF_RxDisable
 17185 ;;		_getRxData
 17186 ;;		_setLog_Code
 17187 ;;		_setControl_Lights_Table
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           
 17192                           ;psect for function _RfPointSelect
 17193  2570                     _RfPointSelect:	
 17194                           
 17195                           ;incstack = 0
 17196                           ; Regs used in _RfPointSelect: [wreg]
 17197                           ;RfPointSelect@rf stored from wreg
 17198  2570  0020               	movlb	0	; select bank0
 17199  2571  00A1               	movwf	RfPointSelect@rf
 17200                           
 17201                           ;RF_Control_B1.c: 10: if(rf == 1)
 17202  2572  0821               	movf	RfPointSelect@rf,w
 17203  2573  3A01               	xorlw	1
 17204  2574  1D03               	skipz
 17205  2575  0008               	return
 17206                           
 17207                           ;RF_Control_B1.c: 11: {
 17208                           ;RF_Control_B1.c: 12: RF=&RF1;
 17209  2576  30E9               	movlw	_RF1& (0+255)
 17210  2577  00A0               	movwf	??_RfPointSelect
 17211  2578  0820               	movf	??_RfPointSelect,w
 17212  2579  00FB               	movwf	_RF
 17213  257A  0008               	return
 17214  257B                     __end_of_RfPointSelect:	
 17215                           
 17216                           	psect	text104
 17217  268E                     __ptext104:	
 17218 ;; *************** function _setSw_Status *****************
 17219 ;; Defined at:
 17220 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;  sw              1    wreg     unsigned char 
 17223 ;;  command         1    2[BANK0 ] unsigned char 
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;  sw              1    3[BANK0 ] unsigned char 
 17226 ;; Return value:  Size  Location     Type
 17227 ;;		None               void
 17228 ;; Registers used:
 17229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17230 ;; Tracked objects:
 17231 ;;		On entry : 0/0
 17232 ;;		On exit  : 0/0
 17233 ;;		Unchanged: 0/0
 17234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17235 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;Total ram usage:        2 bytes
 17240 ;; Hardware stack levels used:    1
 17241 ;; Hardware stack levels required when called:    5
 17242 ;; This function calls:
 17243 ;;		_SwPointSelect
 17244 ;; This function is called by:
 17245 ;;		_DlyOff_Main
 17246 ;;		_setDimmerLights_ERROR
 17247 ;;		_setControl_Lights_Table
 17248 ;;		_setRFSW_Control
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           
 17253                           ;psect for function _setSw_Status
 17254  268E                     _setSw_Status:	
 17255                           
 17256                           ;incstack = 0
 17257                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17258                           ;setSw_Status@sw stored from wreg
 17259  268E  0020               	movlb	0	; select bank0
 17260  268F  00A3               	movwf	setSw_Status@sw
 17261                           
 17262                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17263  2690  0823               	movf	setSw_Status@sw,w
 17264  2691  31A5  2565         	fcall	_SwPointSelect
 17265                           
 17266                           ;Switch_B1.c: 109: Sw->Status=command;
 17267  2693  0020               	movlb	0	; select bank0
 17268  2694  086D               	movf	_Sw,w
 17269  2695  0086               	movwf	6
 17270  2696  3001               	movlw	1	; select bank2/3
 17271  2697  0087               	movwf	7
 17272  2698  0822               	movf	setSw_Status@command,w
 17273  2699  1301               	bcf	1,6
 17274  269A  1D03               	skipz
 17275  269B  1701               	bsf	1,6
 17276  269C  0008               	return
 17277  269D                     __end_of_setSw_Status:	
 17278                           
 17279                           	psect	text105
 17280  2565                     __ptext105:	
 17281 ;; *************** function _SwPointSelect *****************
 17282 ;; Defined at:
 17283 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17284 ;; Parameters:    Size  Location     Type
 17285 ;;  sw              1    wreg     unsigned char 
 17286 ;; Auto vars:     Size  Location     Type
 17287 ;;  sw              1    1[BANK0 ] unsigned char 
 17288 ;; Return value:  Size  Location     Type
 17289 ;;		None               void
 17290 ;; Registers used:
 17291 ;;		wreg
 17292 ;; Tracked objects:
 17293 ;;		On entry : 0/0
 17294 ;;		On exit  : 0/0
 17295 ;;		Unchanged: 0/0
 17296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;Total ram usage:        2 bytes
 17302 ;; Hardware stack levels used:    1
 17303 ;; Hardware stack levels required when called:    4
 17304 ;; This function calls:
 17305 ;;		Nothing
 17306 ;; This function is called by:
 17307 ;;		_setSw_Enable
 17308 ;;		_setSw_Status
 17309 ;;		_setSw_Main
 17310 ;;		_Sw_Detect
 17311 ;; This function uses a non-reentrant model
 17312 ;;
 17313                           
 17314                           
 17315                           ;psect for function _SwPointSelect
 17316  2565                     _SwPointSelect:	
 17317                           
 17318                           ;incstack = 0
 17319                           ; Regs used in _SwPointSelect: [wreg]
 17320                           ;SwPointSelect@sw stored from wreg
 17321  2565  0020               	movlb	0	; select bank0
 17322  2566  00A1               	movwf	SwPointSelect@sw
 17323                           
 17324                           ;Switch_B1.c: 19: if(sw == 1)
 17325  2567  0821               	movf	SwPointSelect@sw,w
 17326  2568  3A01               	xorlw	1
 17327  2569  1D03               	skipz
 17328  256A  0008               	return
 17329                           
 17330                           ;Switch_B1.c: 20: {
 17331                           ;Switch_B1.c: 21: Sw=&Sw1;
 17332  256B  3058               	movlw	_Sw1& (0+255)
 17333  256C  00A0               	movwf	??_SwPointSelect
 17334  256D  0820               	movf	??_SwPointSelect,w
 17335  256E  00ED               	movwf	_Sw
 17336  256F  0008               	return
 17337  2570                     __end_of_SwPointSelect:	
 17338                           
 17339                           	psect	text106
 17340  1281                     __ptext106:	
 17341 ;; *************** function _setRF_DimmerLights *****************
 17342 ;; Defined at:
 17343 ;;		line 444 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17344 ;; Parameters:    Size  Location     Type
 17345 ;;  lights          1    wreg     unsigned char 
 17346 ;;  on              1   61[BANK0 ] unsigned char 
 17347 ;; Auto vars:     Size  Location     Type
 17348 ;;  lights          1   65[BANK0 ] unsigned char 
 17349 ;;  status          1   64[BANK0 ] unsigned char 
 17350 ;; Return value:  Size  Location     Type
 17351 ;;		None               void
 17352 ;; Registers used:
 17353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17354 ;; Tracked objects:
 17355 ;;		On entry : 0/0
 17356 ;;		On exit  : 0/0
 17357 ;;		Unchanged: 0/0
 17358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17361 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;Total ram usage:        5 bytes
 17364 ;; Hardware stack levels used:    1
 17365 ;; Hardware stack levels required when called:    7
 17366 ;; This function calls:
 17367 ;;		_setPercentValue
 17368 ;; This function is called by:
 17369 ;;		_DlyOff_Main
 17370 ;;		_setDimmerLights_Adj
 17371 ;;		_setRFSW_Control
 17372 ;;		_Sw_DimmerOnFunc
 17373 ;;		_Sw_DimmerOffFunc
 17374 ;; This function uses a non-reentrant model
 17375 ;;
 17376                           
 17377                           
 17378                           ;psect for function _setRF_DimmerLights
 17379  1281                     _setRF_DimmerLights:	
 17380                           
 17381                           ;incstack = 0
 17382                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17383                           ;setRF_DimmerLights@lights stored from wreg
 17384  1281  0020               	movlb	0	; select bank0
 17385  1282  00E1               	movwf	setRF_DimmerLights@lights
 17386                           
 17387                           ;RF_Control_B1.c: 446: char status;
 17388                           ;RF_Control_B1.c: 447: status=1;
 17389  1283  01E0               	clrf	setRF_DimmerLights@status
 17390  1284  0AE0               	incf	setRF_DimmerLights@status,f
 17391                           
 17392                           ;RF_Control_B1.c: 448: status<<=(lights-1);
 17393  1285  0861               	movf	setRF_DimmerLights@lights,w
 17394  1286  3EFF               	addlw	-1
 17395  1287  0A89               	incf	9,f
 17396  1288  2A8B               	goto	u7590
 17397  1289                     u7595:	
 17398  1289  1003               	clrc
 17399  128A  0DE0               	rlf	setRF_DimmerLights@status,f
 17400  128B                     u7590:	
 17401  128B  3EFF               	addlw	-1
 17402  128C  1D03               	skipz
 17403  128D  2A89               	goto	u7595
 17404                           
 17405                           ;RF_Control_B1.c: 449: Product->Data[11]=lights;
 17406  128E  0861               	movf	setRF_DimmerLights@lights,w
 17407  128F  00DE               	movwf	??_setRF_DimmerLights
 17408  1290  086F               	movf	_Product,w
 17409  1291  3E0B               	addlw	11
 17410  1292  0086               	movwf	6
 17411  1293  3001               	movlw	1	; select bank2/3
 17412  1294  0087               	movwf	7
 17413  1295  085E               	movf	??_setRF_DimmerLights,w
 17414  1296  0081               	movwf	1
 17415                           
 17416                           ;RF_Control_B1.c: 452: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 17417  1297  3043               	movlw	67
 17418  1298  319E  2626  3192   	fcall	_setPercentValue
 17419  129B  0020               	movlb	0	; select bank0
 17420  129C  00DE               	movwf	??_setRF_DimmerLights
 17421  129D  0861               	movf	setRF_DimmerLights@lights,w
 17422  129E  3E14               	addlw	20
 17423  129F  076F               	addwf	_Product,w
 17424  12A0  00DF               	movwf	??_setRF_DimmerLights+1
 17425  12A1  085F               	movf	??_setRF_DimmerLights+1,w
 17426  12A2  0086               	movwf	6
 17427  12A3  3001               	movlw	1	; select bank2/3
 17428  12A4  0087               	movwf	7
 17429  12A5  085E               	movf	??_setRF_DimmerLights,w
 17430  12A6  0081               	movwf	1
 17431                           
 17432                           ;RF_Control_B1.c: 455: Product->Data[9]=Product->Data[20+lights];
 17433  12A7  0861               	movf	setRF_DimmerLights@lights,w
 17434  12A8  3E14               	addlw	20
 17435  12A9  076F               	addwf	_Product,w
 17436  12AA  00DE               	movwf	??_setRF_DimmerLights
 17437  12AB  085E               	movf	??_setRF_DimmerLights,w
 17438  12AC  0086               	movwf	6
 17439  12AD  3001               	movlw	1	; select bank2/3
 17440  12AE  0087               	movwf	7
 17441  12AF  0801               	movf	1,w
 17442  12B0  00DF               	movwf	??_setRF_DimmerLights+1
 17443  12B1  086F               	movf	_Product,w
 17444  12B2  3E09               	addlw	9
 17445  12B3  0086               	movwf	6
 17446  12B4  3001               	movlw	1	; select bank2/3
 17447  12B5  0087               	movwf	7
 17448  12B6  085F               	movf	??_setRF_DimmerLights+1,w
 17449  12B7  0081               	movwf	1
 17450                           
 17451                           ;RF_Control_B1.c: 456: Product->Data[17]=Product->Data[26+lights];
 17452  12B8  0861               	movf	setRF_DimmerLights@lights,w
 17453  12B9  3E1A               	addlw	26
 17454  12BA  076F               	addwf	_Product,w
 17455  12BB  00DE               	movwf	??_setRF_DimmerLights
 17456  12BC  085E               	movf	??_setRF_DimmerLights,w
 17457  12BD  0086               	movwf	6
 17458  12BE  3001               	movlw	1	; select bank2/3
 17459  12BF  0087               	movwf	7
 17460  12C0  0801               	movf	1,w
 17461  12C1  00DF               	movwf	??_setRF_DimmerLights+1
 17462  12C2  086F               	movf	_Product,w
 17463  12C3  3E11               	addlw	17
 17464  12C4  0086               	movwf	6
 17465  12C5  3001               	movlw	1	; select bank2/3
 17466  12C6  0087               	movwf	7
 17467  12C7  085F               	movf	??_setRF_DimmerLights+1,w
 17468  12C8  0081               	movwf	1
 17469                           
 17470                           ;RF_Control_B1.c: 457: if(on)
 17471  12C9  085D               	movf	setRF_DimmerLights@on,w
 17472  12CA  1903               	btfsc	3,2
 17473  12CB  2ADC               	goto	l8283
 17474                           
 17475                           ;RF_Control_B1.c: 458: {
 17476                           ;RF_Control_B1.c: 459: Product->Data[15]=(Product->Data[15]|status);
 17477  12CC  086F               	movf	_Product,w
 17478  12CD  3E0F               	addlw	15
 17479  12CE  0086               	movwf	6
 17480  12CF  3001               	movlw	1	; select bank2/3
 17481  12D0  0087               	movwf	7
 17482  12D1  0801               	movf	1,w
 17483  12D2  0460               	iorwf	setRF_DimmerLights@status,w
 17484  12D3  00DE               	movwf	??_setRF_DimmerLights
 17485  12D4  086F               	movf	_Product,w
 17486  12D5  3E0F               	addlw	15
 17487  12D6  0086               	movwf	6
 17488  12D7  3001               	movlw	1	; select bank2/3
 17489  12D8  0087               	movwf	7
 17490  12D9  085E               	movf	??_setRF_DimmerLights,w
 17491  12DA  0081               	movwf	1
 17492                           
 17493                           ;RF_Control_B1.c: 460: }
 17494  12DB  0008               	return
 17495  12DC                     l8283:	
 17496                           
 17497                           ;RF_Control_B1.c: 461: else
 17498                           ;RF_Control_B1.c: 462: {
 17499                           ;RF_Control_B1.c: 463: Product->Data[15]=(Product->Data[15]&(~status));
 17500  12DC  086F               	movf	_Product,w
 17501  12DD  3E0F               	addlw	15
 17502  12DE  0086               	movwf	6
 17503  12DF  3001               	movlw	1	; select bank2/3
 17504  12E0  0087               	movwf	7
 17505  12E1  0960               	comf	setRF_DimmerLights@status,w
 17506  12E2  0501               	andwf	1,w
 17507  12E3  00DE               	movwf	??_setRF_DimmerLights
 17508  12E4  086F               	movf	_Product,w
 17509  12E5  3E0F               	addlw	15
 17510  12E6  0086               	movwf	6
 17511  12E7  3001               	movlw	1	; select bank2/3
 17512  12E8  0087               	movwf	7
 17513  12E9  085E               	movf	??_setRF_DimmerLights,w
 17514  12EA  0081               	movwf	1
 17515  12EB  0008               	return
 17516  12EC                     __end_of_setRF_DimmerLights:	
 17517                           
 17518                           	psect	text107
 17519  1E26                     __ptext107:	
 17520 ;; *************** function _setPercentValue *****************
 17521 ;; Defined at:
 17522 ;;		line 505 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17523 ;; Parameters:    Size  Location     Type
 17524 ;;  value           1    wreg     unsigned char 
 17525 ;; Auto vars:     Size  Location     Type
 17526 ;;  value           1   57[BANK0 ] unsigned char 
 17527 ;;  i               3   58[BANK0 ] float 
 17528 ;; Return value:  Size  Location     Type
 17529 ;;                  1    wreg      unsigned char 
 17530 ;; Registers used:
 17531 ;;		wreg, status,2, status,0, pclath, cstack
 17532 ;; Tracked objects:
 17533 ;;		On entry : 0/0
 17534 ;;		On exit  : 0/0
 17535 ;;		Unchanged: 0/0
 17536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;Total ram usage:        4 bytes
 17542 ;; Hardware stack levels used:    1
 17543 ;; Hardware stack levels required when called:    6
 17544 ;; This function calls:
 17545 ;;		___awtoft
 17546 ;;		___ftdiv
 17547 ;;		___fttol
 17548 ;; This function is called by:
 17549 ;;		_Flash_Memory_Initialization
 17550 ;;		_setRF_DimmerLights
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           
 17555                           ;psect for function _setPercentValue
 17556  1E26                     _setPercentValue:	
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17560                           ;setPercentValue@value stored from wreg
 17561  1E26  0020               	movlb	0	; select bank0
 17562  1E27  00D9               	movwf	setPercentValue@value
 17563                           
 17564                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17565  1E28  3000               	movlw	0
 17566  1E29  00DA               	movwf	setPercentValue@i
 17567  1E2A  3054               	movlw	84
 17568  1E2B  00DB               	movwf	setPercentValue@i+1
 17569  1E2C  3042               	movlw	66
 17570  1E2D  00DC               	movwf	setPercentValue@i+2
 17571                           
 17572                           ;Dimmer_B1.c: 509: i/=100;
 17573  1E2E  3000               	movlw	0
 17574  1E2F  00AE               	movwf	___ftdiv@f2
 17575  1E30  30C8               	movlw	200
 17576  1E31  00AF               	movwf	___ftdiv@f2+1
 17577  1E32  3042               	movlw	66
 17578  1E33  00B0               	movwf	___ftdiv@f2+2
 17579  1E34  085A               	movf	setPercentValue@i,w
 17580  1E35  00B1               	movwf	___ftdiv@f1
 17581  1E36  085B               	movf	setPercentValue@i+1,w
 17582  1E37  00B2               	movwf	___ftdiv@f1+1
 17583  1E38  085C               	movf	setPercentValue@i+2,w
 17584  1E39  00B3               	movwf	___ftdiv@f1+2
 17585  1E3A  318A  228C  319E   	fcall	___ftdiv
 17586  1E3D  0020               	movlb	0	; select bank0
 17587  1E3E  082E               	movf	?___ftdiv,w
 17588  1E3F  00DA               	movwf	setPercentValue@i
 17589  1E40  082F               	movf	?___ftdiv+1,w
 17590  1E41  00DB               	movwf	setPercentValue@i+1
 17591  1E42  0830               	movf	?___ftdiv+2,w
 17592  1E43  00DC               	movwf	setPercentValue@i+2
 17593                           
 17594                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17595  1E44  0859               	movf	setPercentValue@value,w
 17596  1E45  3EBD               	addlw	189
 17597  1E46  00A8               	movwf	___awtoft@c
 17598  1E47  30FF               	movlw	255
 17599  1E48  1803               	skipnc
 17600  1E49  3000               	movlw	0
 17601  1E4A  00A9               	movwf	___awtoft@c+1
 17602  1E4B  3199  2125  319E   	fcall	___awtoft
 17603  1E4E  0020               	movlb	0	; select bank0
 17604  1E4F  0828               	movf	?___awtoft,w
 17605  1E50  00B1               	movwf	___ftdiv@f1
 17606  1E51  0829               	movf	?___awtoft+1,w
 17607  1E52  00B2               	movwf	___ftdiv@f1+1
 17608  1E53  082A               	movf	?___awtoft+2,w
 17609  1E54  00B3               	movwf	___ftdiv@f1+2
 17610  1E55  085A               	movf	setPercentValue@i,w
 17611  1E56  00AE               	movwf	___ftdiv@f2
 17612  1E57  085B               	movf	setPercentValue@i+1,w
 17613  1E58  00AF               	movwf	___ftdiv@f2+1
 17614  1E59  085C               	movf	setPercentValue@i+2,w
 17615  1E5A  00B0               	movwf	___ftdiv@f2+2
 17616  1E5B  318A  228C  319E   	fcall	___ftdiv
 17617  1E5E  0020               	movlb	0	; select bank0
 17618  1E5F  082E               	movf	?___ftdiv,w
 17619  1E60  00CB               	movwf	___fttol@f1
 17620  1E61  082F               	movf	?___ftdiv+1,w
 17621  1E62  00CC               	movwf	___fttol@f1+1
 17622  1E63  0830               	movf	?___ftdiv+2,w
 17623  1E64  00CD               	movwf	___fttol@f1+2
 17624  1E65  3196  26F1         	fcall	___fttol
 17625  1E67  0020               	movlb	0	; select bank0
 17626  1E68  034B               	decf	?___fttol,w
 17627  1E69  3AFF               	xorlw	255
 17628  1E6A  3E64               	addlw	100
 17629  1E6B  0008               	return
 17630  1E6C                     __end_of_setPercentValue:	
 17631                           
 17632                           	psect	text108
 17633  16F1                     __ptext108:	
 17634 ;; *************** function ___fttol *****************
 17635 ;; Defined at:
 17636 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17637 ;; Parameters:    Size  Location     Type
 17638 ;;  f1              3   43[BANK0 ] float 
 17639 ;; Auto vars:     Size  Location     Type
 17640 ;;  lval            4   52[BANK0 ] unsigned long 
 17641 ;;  exp1            1   56[BANK0 ] unsigned char 
 17642 ;;  sign1           1   51[BANK0 ] unsigned char 
 17643 ;; Return value:  Size  Location     Type
 17644 ;;                  4   43[BANK0 ] long 
 17645 ;; Registers used:
 17646 ;;		wreg, status,2, status,0
 17647 ;; Tracked objects:
 17648 ;;		On entry : 0/0
 17649 ;;		On exit  : 0/0
 17650 ;;		Unchanged: 0/0
 17651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17653 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17654 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;Total ram usage:       14 bytes
 17657 ;; Hardware stack levels used:    1
 17658 ;; Hardware stack levels required when called:    4
 17659 ;; This function calls:
 17660 ;;		Nothing
 17661 ;; This function is called by:
 17662 ;;		_getPercentValue
 17663 ;;		_setPercentValue
 17664 ;; This function uses a non-reentrant model
 17665 ;;
 17666                           
 17667                           
 17668                           ;psect for function ___fttol
 17669  16F1                     ___fttol:	
 17670                           
 17671                           ;incstack = 0
 17672                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17673  16F1  0020               	movlb	0	; select bank0
 17674  16F2  084B               	movf	___fttol@f1,w
 17675  16F3  00CF               	movwf	??___fttol
 17676  16F4  084C               	movf	___fttol@f1+1,w
 17677  16F5  00D0               	movwf	??___fttol+1
 17678  16F6  084D               	movf	___fttol@f1+2,w
 17679  16F7  00D1               	movwf	??___fttol+2
 17680  16F8  1003               	clrc
 17681  16F9  0D50               	rlf	??___fttol+1,w
 17682  16FA  0D51               	rlf	??___fttol+2,w
 17683  16FB  00D2               	movwf	??___fttol+3
 17684  16FC  0852               	movf	??___fttol+3,w
 17685  16FD  00D8               	movwf	___fttol@exp1
 17686  16FE  08D8               	movf	___fttol@exp1,f
 17687  16FF  1D03               	skipz
 17688  1700  2F0A               	goto	l6039
 17689  1701  3000               	movlw	0
 17690  1702  00CE               	movwf	?___fttol+3
 17691  1703  3000               	movlw	0
 17692  1704  00CD               	movwf	?___fttol+2
 17693  1705  3000               	movlw	0
 17694  1706  00CC               	movwf	?___fttol+1
 17695  1707  3000               	movlw	0
 17696  1708  00CB               	movwf	?___fttol
 17697  1709  0008               	return
 17698  170A                     l6039:	
 17699  170A  084B               	movf	___fttol@f1,w
 17700  170B  00CF               	movwf	??___fttol
 17701  170C  084C               	movf	___fttol@f1+1,w
 17702  170D  00D0               	movwf	??___fttol+1
 17703  170E  084D               	movf	___fttol@f1+2,w
 17704  170F  00D1               	movwf	??___fttol+2
 17705  1710  3017               	movlw	23
 17706  1711                     u4325:	
 17707  1711  36D1               	lsrf	??___fttol+2,f
 17708  1712  0CD0               	rrf	??___fttol+1,f
 17709  1713  0CCF               	rrf	??___fttol,f
 17710  1714  0B89               	decfsz	9,f
 17711  1715  2F11               	goto	u4325
 17712  1716  084F               	movf	??___fttol,w
 17713  1717  00D2               	movwf	??___fttol+3
 17714  1718  0852               	movf	??___fttol+3,w
 17715  1719  00D3               	movwf	___fttol@sign1
 17716  171A  17CC               	bsf	___fttol@f1+1,7
 17717  171B  30FF               	movlw	255
 17718  171C  05CB               	andwf	___fttol@f1,f
 17719  171D  30FF               	movlw	255
 17720  171E  05CC               	andwf	___fttol@f1+1,f
 17721  171F  3000               	movlw	0
 17722  1720  05CD               	andwf	___fttol@f1+2,f
 17723  1721  084B               	movf	___fttol@f1,w
 17724  1722  00D4               	movwf	___fttol@lval
 17725  1723  084C               	movf	___fttol@f1+1,w
 17726  1724  00D5               	movwf	___fttol@lval+1
 17727  1725  084D               	movf	___fttol@f1+2,w
 17728  1726  00D6               	movwf	___fttol@lval+2
 17729  1727  01D7               	clrf	___fttol@lval+3
 17730  1728  308E               	movlw	142
 17731  1729  02D8               	subwf	___fttol@exp1,f
 17732  172A  1FD8               	btfss	___fttol@exp1,7
 17733  172B  2F48               	goto	l6059
 17734  172C  0858               	movf	___fttol@exp1,w
 17735  172D  3A80               	xorlw	128
 17736  172E  3E8F               	addlw	143
 17737  172F  1803               	skipnc
 17738  1730  2F3A               	goto	l6057
 17739  1731  3000               	movlw	0
 17740  1732  00CE               	movwf	?___fttol+3
 17741  1733  3000               	movlw	0
 17742  1734  00CD               	movwf	?___fttol+2
 17743  1735  3000               	movlw	0
 17744  1736  00CC               	movwf	?___fttol+1
 17745  1737  3000               	movlw	0
 17746  1738  00CB               	movwf	?___fttol
 17747  1739  0008               	return
 17748  173A                     l6057:	
 17749  173A  3001               	movlw	1
 17750  173B                     u4355:	
 17751  173B  36D7               	lsrf	___fttol@lval+3,f
 17752  173C  0CD6               	rrf	___fttol@lval+2,f
 17753  173D  0CD5               	rrf	___fttol@lval+1,f
 17754  173E  0CD4               	rrf	___fttol@lval,f
 17755  173F  0B89               	decfsz	9,f
 17756  1740  2F3B               	goto	u4355
 17757  1741  3001               	movlw	1
 17758  1742  00CF               	movwf	??___fttol
 17759  1743  084F               	movf	??___fttol,w
 17760  1744  07D8               	addwf	___fttol@exp1,f
 17761  1745  1903               	btfsc	3,2
 17762  1746  2F61               	goto	l6069
 17763  1747  2F3A               	goto	l6057
 17764  1748                     l6059:	
 17765  1748  3018               	movlw	24
 17766  1749  0258               	subwf	___fttol@exp1,w
 17767  174A  1C03               	skipc
 17768  174B  2F5E               	goto	l6067
 17769  174C  3000               	movlw	0
 17770  174D  00CE               	movwf	?___fttol+3
 17771  174E  3000               	movlw	0
 17772  174F  00CD               	movwf	?___fttol+2
 17773  1750  3000               	movlw	0
 17774  1751  00CC               	movwf	?___fttol+1
 17775  1752  3000               	movlw	0
 17776  1753  00CB               	movwf	?___fttol
 17777  1754  0008               	return
 17778  1755                     l6065:	
 17779  1755  3001               	movlw	1
 17780  1756                     u4385:	
 17781  1756  35D4               	lslf	___fttol@lval,f
 17782  1757  0DD5               	rlf	___fttol@lval+1,f
 17783  1758  0DD6               	rlf	___fttol@lval+2,f
 17784  1759  0DD7               	rlf	___fttol@lval+3,f
 17785  175A  0B89               	decfsz	9,f
 17786  175B  2F56               	goto	u4385
 17787  175C  3001               	movlw	1
 17788  175D  02D8               	subwf	___fttol@exp1,f
 17789  175E                     l6067:	
 17790  175E  08D8               	movf	___fttol@exp1,f
 17791  175F  1D03               	skipz
 17792  1760  2F55               	goto	l6065
 17793  1761                     l6069:	
 17794  1761  0853               	movf	___fttol@sign1,w
 17795  1762  1903               	btfsc	3,2
 17796  1763  2F6F               	goto	l6073
 17797  1764  09D4               	comf	___fttol@lval,f
 17798  1765  09D5               	comf	___fttol@lval+1,f
 17799  1766  09D6               	comf	___fttol@lval+2,f
 17800  1767  09D7               	comf	___fttol@lval+3,f
 17801  1768  0AD4               	incf	___fttol@lval,f
 17802  1769  1903               	skipnz
 17803  176A  0AD5               	incf	___fttol@lval+1,f
 17804  176B  1903               	skipnz
 17805  176C  0AD6               	incf	___fttol@lval+2,f
 17806  176D  1903               	skipnz
 17807  176E  0AD7               	incf	___fttol@lval+3,f
 17808  176F                     l6073:	
 17809  176F  0857               	movf	___fttol@lval+3,w
 17810  1770  00CE               	movwf	?___fttol+3
 17811  1771  0856               	movf	___fttol@lval+2,w
 17812  1772  00CD               	movwf	?___fttol+2
 17813  1773  0855               	movf	___fttol@lval+1,w
 17814  1774  00CC               	movwf	?___fttol+1
 17815  1775  0854               	movf	___fttol@lval,w
 17816  1776  00CB               	movwf	?___fttol
 17817  1777  0008               	return
 17818  1778                     __end_of___fttol:	
 17819                           
 17820                           	psect	text109
 17821  0A8C                     __ptext109:	
 17822 ;; *************** function ___ftdiv *****************
 17823 ;; Defined at:
 17824 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17825 ;; Parameters:    Size  Location     Type
 17826 ;;  f2              3   14[BANK0 ] float 
 17827 ;;  f1              3   17[BANK0 ] float 
 17828 ;; Auto vars:     Size  Location     Type
 17829 ;;  f3              3   25[BANK0 ] float 
 17830 ;;  sign            1   29[BANK0 ] unsigned char 
 17831 ;;  exp             1   28[BANK0 ] unsigned char 
 17832 ;;  cntr            1   24[BANK0 ] unsigned char 
 17833 ;; Return value:  Size  Location     Type
 17834 ;;                  3   14[BANK0 ] float 
 17835 ;; Registers used:
 17836 ;;		wreg, status,2, status,0, pclath, cstack
 17837 ;; Tracked objects:
 17838 ;;		On entry : 0/0
 17839 ;;		On exit  : 0/0
 17840 ;;		Unchanged: 0/0
 17841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17842 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;Total ram usage:       16 bytes
 17847 ;; Hardware stack levels used:    1
 17848 ;; Hardware stack levels required when called:    5
 17849 ;; This function calls:
 17850 ;;		___ftpack
 17851 ;; This function is called by:
 17852 ;;		_getPercentValue
 17853 ;;		_setPercentValue
 17854 ;; This function uses a non-reentrant model
 17855 ;;
 17856                           
 17857                           
 17858                           ;psect for function ___ftdiv
 17859  0A8C                     ___ftdiv:	
 17860                           
 17861                           ;incstack = 0
 17862                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17863  0A8C  0020               	movlb	0	; select bank0
 17864  0A8D  0831               	movf	___ftdiv@f1,w
 17865  0A8E  00B4               	movwf	??___ftdiv
 17866  0A8F  0832               	movf	___ftdiv@f1+1,w
 17867  0A90  00B5               	movwf	??___ftdiv+1
 17868  0A91  0833               	movf	___ftdiv@f1+2,w
 17869  0A92  00B6               	movwf	??___ftdiv+2
 17870  0A93  1003               	clrc
 17871  0A94  0D35               	rlf	??___ftdiv+1,w
 17872  0A95  0D36               	rlf	??___ftdiv+2,w
 17873  0A96  00B7               	movwf	??___ftdiv+3
 17874  0A97  0837               	movf	??___ftdiv+3,w
 17875  0A98  00BC               	movwf	___ftdiv@exp
 17876  0A99  08BC               	movf	___ftdiv@exp,f
 17877  0A9A  1D03               	skipz
 17878  0A9B  2AA3               	goto	l5947
 17879  0A9C  3000               	movlw	0
 17880  0A9D  00AE               	movwf	?___ftdiv
 17881  0A9E  3000               	movlw	0
 17882  0A9F  00AF               	movwf	?___ftdiv+1
 17883  0AA0  3000               	movlw	0
 17884  0AA1  00B0               	movwf	?___ftdiv+2
 17885  0AA2  0008               	return
 17886  0AA3                     l5947:	
 17887  0AA3  082E               	movf	___ftdiv@f2,w
 17888  0AA4  00B4               	movwf	??___ftdiv
 17889  0AA5  082F               	movf	___ftdiv@f2+1,w
 17890  0AA6  00B5               	movwf	??___ftdiv+1
 17891  0AA7  0830               	movf	___ftdiv@f2+2,w
 17892  0AA8  00B6               	movwf	??___ftdiv+2
 17893  0AA9  1003               	clrc
 17894  0AAA  0D35               	rlf	??___ftdiv+1,w
 17895  0AAB  0D36               	rlf	??___ftdiv+2,w
 17896  0AAC  00B7               	movwf	??___ftdiv+3
 17897  0AAD  0837               	movf	??___ftdiv+3,w
 17898  0AAE  00BD               	movwf	___ftdiv@sign
 17899  0AAF  08BD               	movf	___ftdiv@sign,f
 17900  0AB0  1D03               	skipz
 17901  0AB1  2AB9               	goto	l5953
 17902  0AB2  3000               	movlw	0
 17903  0AB3  00AE               	movwf	?___ftdiv
 17904  0AB4  3000               	movlw	0
 17905  0AB5  00AF               	movwf	?___ftdiv+1
 17906  0AB6  3000               	movlw	0
 17907  0AB7  00B0               	movwf	?___ftdiv+2
 17908  0AB8  0008               	return
 17909  0AB9                     l5953:	
 17910  0AB9  3000               	movlw	0
 17911  0ABA  00B9               	movwf	___ftdiv@f3
 17912  0ABB  3000               	movlw	0
 17913  0ABC  00BA               	movwf	___ftdiv@f3+1
 17914  0ABD  3000               	movlw	0
 17915  0ABE  00BB               	movwf	___ftdiv@f3+2
 17916  0ABF  3089               	movlw	137
 17917  0AC0  073D               	addwf	___ftdiv@sign,w
 17918  0AC1  00B4               	movwf	??___ftdiv
 17919  0AC2  0834               	movf	??___ftdiv,w
 17920  0AC3  02BC               	subwf	___ftdiv@exp,f
 17921  0AC4  0831               	movf	___ftdiv@f1,w
 17922  0AC5  00B4               	movwf	??___ftdiv
 17923  0AC6  0832               	movf	___ftdiv@f1+1,w
 17924  0AC7  00B5               	movwf	??___ftdiv+1
 17925  0AC8  0833               	movf	___ftdiv@f1+2,w
 17926  0AC9  00B6               	movwf	??___ftdiv+2
 17927  0ACA  3010               	movlw	16
 17928  0ACB                     u4135:	
 17929  0ACB  36B6               	lsrf	??___ftdiv+2,f
 17930  0ACC  0CB5               	rrf	??___ftdiv+1,f
 17931  0ACD  0CB4               	rrf	??___ftdiv,f
 17932  0ACE  0B89               	decfsz	9,f
 17933  0ACF  2ACB               	goto	u4135
 17934  0AD0  0834               	movf	??___ftdiv,w
 17935  0AD1  00B7               	movwf	??___ftdiv+3
 17936  0AD2  0837               	movf	??___ftdiv+3,w
 17937  0AD3  00BD               	movwf	___ftdiv@sign
 17938  0AD4  082E               	movf	___ftdiv@f2,w
 17939  0AD5  00B4               	movwf	??___ftdiv
 17940  0AD6  082F               	movf	___ftdiv@f2+1,w
 17941  0AD7  00B5               	movwf	??___ftdiv+1
 17942  0AD8  0830               	movf	___ftdiv@f2+2,w
 17943  0AD9  00B6               	movwf	??___ftdiv+2
 17944  0ADA  3010               	movlw	16
 17945  0ADB                     u4145:	
 17946  0ADB  36B6               	lsrf	??___ftdiv+2,f
 17947  0ADC  0CB5               	rrf	??___ftdiv+1,f
 17948  0ADD  0CB4               	rrf	??___ftdiv,f
 17949  0ADE  0B89               	decfsz	9,f
 17950  0ADF  2ADB               	goto	u4145
 17951  0AE0  0834               	movf	??___ftdiv,w
 17952  0AE1  00B7               	movwf	??___ftdiv+3
 17953  0AE2  0837               	movf	??___ftdiv+3,w
 17954  0AE3  06BD               	xorwf	___ftdiv@sign,f
 17955  0AE4  3080               	movlw	128
 17956  0AE5  00B4               	movwf	??___ftdiv
 17957  0AE6  0834               	movf	??___ftdiv,w
 17958  0AE7  05BD               	andwf	___ftdiv@sign,f
 17959  0AE8  17B2               	bsf	___ftdiv@f1+1,7
 17960  0AE9  30FF               	movlw	255
 17961  0AEA  05B1               	andwf	___ftdiv@f1,f
 17962  0AEB  30FF               	movlw	255
 17963  0AEC  05B2               	andwf	___ftdiv@f1+1,f
 17964  0AED  3000               	movlw	0
 17965  0AEE  05B3               	andwf	___ftdiv@f1+2,f
 17966  0AEF  17AF               	bsf	___ftdiv@f2+1,7
 17967  0AF0  30FF               	movlw	255
 17968  0AF1  05AE               	andwf	___ftdiv@f2,f
 17969  0AF2  30FF               	movlw	255
 17970  0AF3  05AF               	andwf	___ftdiv@f2+1,f
 17971  0AF4  3000               	movlw	0
 17972  0AF5  05B0               	andwf	___ftdiv@f2+2,f
 17973  0AF6  3018               	movlw	24
 17974  0AF7  00B4               	movwf	??___ftdiv
 17975  0AF8  0834               	movf	??___ftdiv,w
 17976  0AF9  00B8               	movwf	___ftdiv@cntr
 17977  0AFA                     l5967:	
 17978  0AFA  3001               	movlw	1
 17979  0AFB                     u4155:	
 17980  0AFB  35B9               	lslf	___ftdiv@f3,f
 17981  0AFC  0DBA               	rlf	___ftdiv@f3+1,f
 17982  0AFD  0DBB               	rlf	___ftdiv@f3+2,f
 17983  0AFE  0B89               	decfsz	9,f
 17984  0AFF  2AFB               	goto	u4155
 17985  0B00  0830               	movf	___ftdiv@f2+2,w
 17986  0B01  0233               	subwf	___ftdiv@f1+2,w
 17987  0B02  1D03               	skipz
 17988  0B03  2B0A               	goto	u4165
 17989  0B04  082F               	movf	___ftdiv@f2+1,w
 17990  0B05  0232               	subwf	___ftdiv@f1+1,w
 17991  0B06  1D03               	skipz
 17992  0B07  2B0A               	goto	u4165
 17993  0B08  082E               	movf	___ftdiv@f2,w
 17994  0B09  0231               	subwf	___ftdiv@f1,w
 17995  0B0A                     u4165:	
 17996  0B0A  1C03               	skipc
 17997  0B0B  2B13               	goto	l5975
 17998  0B0C  082E               	movf	___ftdiv@f2,w
 17999  0B0D  02B1               	subwf	___ftdiv@f1,f
 18000  0B0E  082F               	movf	___ftdiv@f2+1,w
 18001  0B0F  3BB2               	subwfb	___ftdiv@f1+1,f
 18002  0B10  0830               	movf	___ftdiv@f2+2,w
 18003  0B11  3BB3               	subwfb	___ftdiv@f1+2,f
 18004  0B12  1439               	bsf	___ftdiv@f3,0
 18005  0B13                     l5975:	
 18006  0B13  3001               	movlw	1
 18007  0B14                     u4175:	
 18008  0B14  35B1               	lslf	___ftdiv@f1,f
 18009  0B15  0DB2               	rlf	___ftdiv@f1+1,f
 18010  0B16  0DB3               	rlf	___ftdiv@f1+2,f
 18011  0B17  0B89               	decfsz	9,f
 18012  0B18  2B14               	goto	u4175
 18013  0B19  3001               	movlw	1
 18014  0B1A  02B8               	subwf	___ftdiv@cntr,f
 18015  0B1B  1D03               	btfss	3,2
 18016  0B1C  2AFA               	goto	l5967
 18017  0B1D  0839               	movf	___ftdiv@f3,w
 18018  0B1E  00A0               	movwf	___ftpack@arg
 18019  0B1F  083A               	movf	___ftdiv@f3+1,w
 18020  0B20  00A1               	movwf	___ftpack@arg+1
 18021  0B21  083B               	movf	___ftdiv@f3+2,w
 18022  0B22  00A2               	movwf	___ftpack@arg+2
 18023  0B23  083C               	movf	___ftdiv@exp,w
 18024  0B24  00B4               	movwf	??___ftdiv
 18025  0B25  0834               	movf	??___ftdiv,w
 18026  0B26  00A3               	movwf	___ftpack@exp
 18027  0B27  083D               	movf	___ftdiv@sign,w
 18028  0B28  00B5               	movwf	??___ftdiv+1
 18029  0B29  0835               	movf	??___ftdiv+1,w
 18030  0B2A  00A4               	movwf	___ftpack@sign
 18031  0B2B  3191  21BC         	fcall	___ftpack
 18032  0B2D  0020               	movlb	0	; select bank0
 18033  0B2E  0820               	movf	?___ftpack,w
 18034  0B2F  00AE               	movwf	?___ftdiv
 18035  0B30  0821               	movf	?___ftpack+1,w
 18036  0B31  00AF               	movwf	?___ftdiv+1
 18037  0B32  0822               	movf	?___ftpack+2,w
 18038  0B33  00B0               	movwf	?___ftdiv+2
 18039  0B34  0008               	return
 18040  0B35                     __end_of___ftdiv:	
 18041                           
 18042                           	psect	text110
 18043  1925                     __ptext110:	
 18044 ;; *************** function ___awtoft *****************
 18045 ;; Defined at:
 18046 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18047 ;; Parameters:    Size  Location     Type
 18048 ;;  c               2    8[BANK0 ] int 
 18049 ;; Auto vars:     Size  Location     Type
 18050 ;;  sign            1   13[BANK0 ] unsigned char 
 18051 ;; Return value:  Size  Location     Type
 18052 ;;                  3    8[BANK0 ] float 
 18053 ;; Registers used:
 18054 ;;		wreg, status,2, status,0, pclath, cstack
 18055 ;; Tracked objects:
 18056 ;;		On entry : 0/0
 18057 ;;		On exit  : 0/0
 18058 ;;		Unchanged: 0/0
 18059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18060 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;Total ram usage:        6 bytes
 18065 ;; Hardware stack levels used:    1
 18066 ;; Hardware stack levels required when called:    5
 18067 ;; This function calls:
 18068 ;;		___ftpack
 18069 ;; This function is called by:
 18070 ;;		_getPercentValue
 18071 ;;		_setPercentValue
 18072 ;; This function uses a non-reentrant model
 18073 ;;
 18074                           
 18075                           
 18076                           ;psect for function ___awtoft
 18077  1925                     ___awtoft:	
 18078                           
 18079                           ;incstack = 0
 18080                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18081  1925  0020               	movlb	0	; select bank0
 18082  1926  01AD               	clrf	___awtoft@sign
 18083  1927  1FA9               	btfss	___awtoft@c+1,7
 18084  1928  2930               	goto	l5865
 18085  1929  09A8               	comf	___awtoft@c,f
 18086  192A  09A9               	comf	___awtoft@c+1,f
 18087  192B  0AA8               	incf	___awtoft@c,f
 18088  192C  1903               	skipnz
 18089  192D  0AA9               	incf	___awtoft@c+1,f
 18090  192E  01AD               	clrf	___awtoft@sign
 18091  192F  0AAD               	incf	___awtoft@sign,f
 18092  1930                     l5865:	
 18093  1930  0828               	movf	___awtoft@c,w
 18094  1931  00A0               	movwf	___ftpack@arg
 18095  1932  0829               	movf	___awtoft@c+1,w
 18096  1933  00A1               	movwf	___ftpack@arg+1
 18097  1934  01A2               	clrf	___ftpack@arg+2
 18098  1935  308E               	movlw	142
 18099  1936  00AB               	movwf	??___awtoft
 18100  1937  082B               	movf	??___awtoft,w
 18101  1938  00A3               	movwf	___ftpack@exp
 18102  1939  082D               	movf	___awtoft@sign,w
 18103  193A  00AC               	movwf	??___awtoft+1
 18104  193B  082C               	movf	??___awtoft+1,w
 18105  193C  00A4               	movwf	___ftpack@sign
 18106  193D  3191  21BC         	fcall	___ftpack
 18107  193F  0020               	movlb	0	; select bank0
 18108  1940  0820               	movf	?___ftpack,w
 18109  1941  00A8               	movwf	?___awtoft
 18110  1942  0821               	movf	?___ftpack+1,w
 18111  1943  00A9               	movwf	?___awtoft+1
 18112  1944  0822               	movf	?___ftpack+2,w
 18113  1945  00AA               	movwf	?___awtoft+2
 18114  1946  0008               	return
 18115  1947                     __end_of___awtoft:	
 18116                           
 18117                           	psect	text111
 18118  11BC                     __ptext111:	
 18119 ;; *************** function ___ftpack *****************
 18120 ;; Defined at:
 18121 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;  arg             3    0[BANK0 ] unsigned um
 18124 ;;  exp             1    3[BANK0 ] unsigned char 
 18125 ;;  sign            1    4[BANK0 ] unsigned char 
 18126 ;; Auto vars:     Size  Location     Type
 18127 ;;		None
 18128 ;; Return value:  Size  Location     Type
 18129 ;;                  3    0[BANK0 ] float 
 18130 ;; Registers used:
 18131 ;;		wreg, status,2, status,0
 18132 ;; Tracked objects:
 18133 ;;		On entry : 0/0
 18134 ;;		On exit  : 0/0
 18135 ;;		Unchanged: 0/0
 18136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18137 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18140 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18141 ;;Total ram usage:        8 bytes
 18142 ;; Hardware stack levels used:    1
 18143 ;; Hardware stack levels required when called:    4
 18144 ;; This function calls:
 18145 ;;		Nothing
 18146 ;; This function is called by:
 18147 ;;		___awtoft
 18148 ;;		___ftadd
 18149 ;;		___ftdiv
 18150 ;;		___ftmul
 18151 ;; This function uses a non-reentrant model
 18152 ;;
 18153                           
 18154                           
 18155                           ;psect for function ___ftpack
 18156  11BC                     ___ftpack:	
 18157                           
 18158                           ;incstack = 0
 18159                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18160  11BC  0020               	movlb	0	; select bank0
 18161  11BD  0823               	movf	___ftpack@exp,w
 18162  11BE  1903               	btfsc	3,2
 18163  11BF  29C5               	goto	l5831
 18164  11C0  0822               	movf	___ftpack@arg+2,w
 18165  11C1  0421               	iorwf	___ftpack@arg+1,w
 18166  11C2  0420               	iorwf	___ftpack@arg,w
 18167  11C3  1D03               	skipz
 18168  11C4  29D6               	goto	l5837
 18169  11C5                     l5831:	
 18170  11C5  3000               	movlw	0
 18171  11C6  00A0               	movwf	?___ftpack
 18172  11C7  3000               	movlw	0
 18173  11C8  00A1               	movwf	?___ftpack+1
 18174  11C9  3000               	movlw	0
 18175  11CA  00A2               	movwf	?___ftpack+2
 18176  11CB  0008               	return
 18177  11CC                     l5835:	
 18178  11CC  3001               	movlw	1
 18179  11CD  00A5               	movwf	??___ftpack
 18180  11CE  0825               	movf	??___ftpack,w
 18181  11CF  07A3               	addwf	___ftpack@exp,f
 18182  11D0  3001               	movlw	1
 18183  11D1                     u3785:	
 18184  11D1  36A2               	lsrf	___ftpack@arg+2,f
 18185  11D2  0CA1               	rrf	___ftpack@arg+1,f
 18186  11D3  0CA0               	rrf	___ftpack@arg,f
 18187  11D4  0B89               	decfsz	9,f
 18188  11D5  29D1               	goto	u3785
 18189  11D6                     l5837:	
 18190  11D6  30FE               	movlw	254
 18191  11D7  0522               	andwf	___ftpack@arg+2,w
 18192  11D8  1903               	btfsc	3,2
 18193  11D9  29EF               	goto	l3199
 18194  11DA  29CC               	goto	l5835
 18195  11DB                     l5839:	
 18196  11DB  3001               	movlw	1
 18197  11DC  00A5               	movwf	??___ftpack
 18198  11DD  0825               	movf	??___ftpack,w
 18199  11DE  07A3               	addwf	___ftpack@exp,f
 18200  11DF  3001               	movlw	1
 18201  11E0  07A0               	addwf	___ftpack@arg,f
 18202  11E1  3000               	movlw	0
 18203  11E2  1803               	skipnc
 18204  11E3  3001               	movlw	1
 18205  11E4  07A1               	addwf	___ftpack@arg+1,f
 18206  11E5  3000               	movlw	0
 18207  11E6  1803               	skipnc
 18208  11E7  3001               	movlw	1
 18209  11E8  07A2               	addwf	___ftpack@arg+2,f
 18210  11E9  3001               	movlw	1
 18211  11EA                     u3805:	
 18212  11EA  36A2               	lsrf	___ftpack@arg+2,f
 18213  11EB  0CA1               	rrf	___ftpack@arg+1,f
 18214  11EC  0CA0               	rrf	___ftpack@arg,f
 18215  11ED  0B89               	decfsz	9,f
 18216  11EE  29EA               	goto	u3805
 18217  11EF                     l3199:	
 18218  11EF  30FF               	movlw	255
 18219  11F0  0522               	andwf	___ftpack@arg+2,w
 18220  11F1  1903               	btfsc	3,2
 18221  11F2  29FC               	goto	l5847
 18222  11F3  29DB               	goto	l5839
 18223  11F4                     l5845:	
 18224  11F4  3001               	movlw	1
 18225  11F5  02A3               	subwf	___ftpack@exp,f
 18226  11F6  3001               	movlw	1
 18227  11F7                     u3825:	
 18228  11F7  35A0               	lslf	___ftpack@arg,f
 18229  11F8  0DA1               	rlf	___ftpack@arg+1,f
 18230  11F9  0DA2               	rlf	___ftpack@arg+2,f
 18231  11FA  0B89               	decfsz	9,f
 18232  11FB  29F7               	goto	u3825
 18233  11FC                     l5847:	
 18234  11FC  1FA1               	btfss	___ftpack@arg+1,7
 18235  11FD  29F4               	goto	l5845
 18236  11FE  1823               	btfsc	___ftpack@exp,0
 18237  11FF  2A06               	goto	l3205
 18238  1200  30FF               	movlw	255
 18239  1201  05A0               	andwf	___ftpack@arg,f
 18240  1202  307F               	movlw	127
 18241  1203  05A1               	andwf	___ftpack@arg+1,f
 18242  1204  30FF               	movlw	255
 18243  1205  05A2               	andwf	___ftpack@arg+2,f
 18244  1206                     l3205:	
 18245  1206  1003               	clrc
 18246  1207  0CA3               	rrf	___ftpack@exp,f
 18247  1208  0823               	movf	___ftpack@exp,w
 18248  1209  00A5               	movwf	??___ftpack
 18249  120A  01A6               	clrf	??___ftpack+1
 18250  120B  01A7               	clrf	??___ftpack+2
 18251  120C  3010               	movlw	16
 18252  120D                     u3855:	
 18253  120D  35A5               	lslf	??___ftpack,f
 18254  120E  0DA6               	rlf	??___ftpack+1,f
 18255  120F  0DA7               	rlf	??___ftpack+2,f
 18256  1210  0B89               	decfsz	9,f
 18257  1211  2A0D               	goto	u3855
 18258  1212  0825               	movf	??___ftpack,w
 18259  1213  04A0               	iorwf	___ftpack@arg,f
 18260  1214  0826               	movf	??___ftpack+1,w
 18261  1215  04A1               	iorwf	___ftpack@arg+1,f
 18262  1216  0827               	movf	??___ftpack+2,w
 18263  1217  04A2               	iorwf	___ftpack@arg+2,f
 18264  1218  0824               	movf	___ftpack@sign,w
 18265  1219  1903               	btfsc	3,2
 18266  121A  0008               	return
 18267  121B  17A2               	bsf	___ftpack@arg+2,7
 18268  121C  0008               	return
 18269  121D                     __end_of___ftpack:	
 18270                           
 18271                           	psect	text112
 18272  267F                     __ptext112:	
 18273 ;; *************** function _setRFSW_Status *****************
 18274 ;; Defined at:
 18275 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18276 ;; Parameters:    Size  Location     Type
 18277 ;;  sw              1    wreg     unsigned char 
 18278 ;;  command         1    2[BANK0 ] unsigned char 
 18279 ;; Auto vars:     Size  Location     Type
 18280 ;;  sw              1    3[BANK0 ] unsigned char 
 18281 ;; Return value:  Size  Location     Type
 18282 ;;		None               void
 18283 ;; Registers used:
 18284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18285 ;; Tracked objects:
 18286 ;;		On entry : 0/0
 18287 ;;		On exit  : 0/0
 18288 ;;		Unchanged: 0/0
 18289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18290 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18294 ;;Total ram usage:        2 bytes
 18295 ;; Hardware stack levels used:    1
 18296 ;; Hardware stack levels required when called:    5
 18297 ;; This function calls:
 18298 ;;		_RfSWPointSelect
 18299 ;; This function is called by:
 18300 ;;		_DlyOff_Main
 18301 ;;		_setDimmerLights_ERROR
 18302 ;;		_setControl_Lights_Table
 18303 ;;		_Sw_DimmerOnFunc
 18304 ;;		_Sw_DimmerAdjFunc
 18305 ;; This function uses a non-reentrant model
 18306 ;;
 18307                           
 18308                           
 18309                           ;psect for function _setRFSW_Status
 18310  267F                     _setRFSW_Status:	
 18311                           
 18312                           ;incstack = 0
 18313                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18314                           ;setRFSW_Status@sw stored from wreg
 18315  267F  0020               	movlb	0	; select bank0
 18316  2680  00A3               	movwf	setRFSW_Status@sw
 18317                           
 18318                           ;RF_Control_B1.c: 426: RfSWPointSelect(sw);
 18319  2681  0823               	movf	setRFSW_Status@sw,w
 18320  2682  31A5  25D7         	fcall	_RfSWPointSelect
 18321                           
 18322                           ;RF_Control_B1.c: 427: RFSW->Status=command;
 18323  2684  0021               	movlb	1	; select bank1
 18324  2685  083C               	movf	_RFSW^(0+128),w
 18325  2686  0086               	movwf	6
 18326  2687  0187               	clrf	7
 18327  2688  0020               	movlb	0	; select bank0
 18328  2689  0822               	movf	setRFSW_Status@command,w
 18329  268A  1001               	bcf	1,0
 18330  268B  1D03               	skipz
 18331  268C  1401               	bsf	1,0
 18332  268D  0008               	return
 18333  268E                     __end_of_setRFSW_Status:	
 18334                           
 18335                           	psect	text113
 18336  25D7                     __ptext113:	
 18337 ;; *************** function _RfSWPointSelect *****************
 18338 ;; Defined at:
 18339 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18340 ;; Parameters:    Size  Location     Type
 18341 ;;  sw              1    wreg     unsigned char 
 18342 ;; Auto vars:     Size  Location     Type
 18343 ;;  sw              1    1[BANK0 ] unsigned char 
 18344 ;; Return value:  Size  Location     Type
 18345 ;;		None               void
 18346 ;; Registers used:
 18347 ;;		wreg
 18348 ;; Tracked objects:
 18349 ;;		On entry : 0/0
 18350 ;;		On exit  : 0/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;Total ram usage:        2 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; Hardware stack levels required when called:    4
 18360 ;; This function calls:
 18361 ;;		Nothing
 18362 ;; This function is called by:
 18363 ;;		_setRFSW_Control
 18364 ;;		_setRFSW_AdjControl
 18365 ;;		_setRFSW_Status
 18366 ;; This function uses a non-reentrant model
 18367 ;;
 18368                           
 18369                           
 18370                           ;psect for function _RfSWPointSelect
 18371  25D7                     _RfSWPointSelect:	
 18372                           
 18373                           ;incstack = 0
 18374                           ; Regs used in _RfSWPointSelect: [wreg]
 18375                           ;RfSWPointSelect@sw stored from wreg
 18376  25D7  0020               	movlb	0	; select bank0
 18377  25D8  00A1               	movwf	RfSWPointSelect@sw
 18378                           
 18379                           ;RF_Control_B1.c: 349: if(sw == 1)
 18380  25D9  0821               	movf	RfSWPointSelect@sw,w
 18381  25DA  3A01               	xorlw	1
 18382  25DB  1D03               	skipz
 18383  25DC  0008               	return
 18384                           
 18385                           ;RF_Control_B1.c: 350: {
 18386                           ;RF_Control_B1.c: 351: RFSW=&RFSW1;
 18387  25DD  30EC               	movlw	_RFSW1& (0+255)
 18388  25DE  00A0               	movwf	??_RfSWPointSelect
 18389  25DF  0820               	movf	??_RfSWPointSelect,w
 18390  25E0  0021               	movlb	1	; select bank1
 18391  25E1  00BC               	movwf	_RFSW^(0+128)
 18392  25E2  0008               	return
 18393  25E3                     __end_of_RfSWPointSelect:	
 18394                           
 18395                           	psect	text114
 18396  26BD                     __ptext114:	
 18397 ;; *************** function _setDimmerLights_Trigger *****************
 18398 ;; Defined at:
 18399 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18400 ;; Parameters:    Size  Location     Type
 18401 ;;  lights          1    wreg     unsigned char 
 18402 ;;  command         1    2[BANK0 ] unsigned char 
 18403 ;; Auto vars:     Size  Location     Type
 18404 ;;  lights          1    3[BANK0 ] unsigned char 
 18405 ;; Return value:  Size  Location     Type
 18406 ;;		None               void
 18407 ;; Registers used:
 18408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18409 ;; Tracked objects:
 18410 ;;		On entry : 0/0
 18411 ;;		On exit  : 0/0
 18412 ;;		Unchanged: 0/0
 18413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18414 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18418 ;;Total ram usage:        2 bytes
 18419 ;; Hardware stack levels used:    1
 18420 ;; Hardware stack levels required when called:    5
 18421 ;; This function calls:
 18422 ;;		_DimmerLightsPointSelect
 18423 ;; This function is called by:
 18424 ;;		_DlyOff_Main
 18425 ;;		_setRFSW_Control
 18426 ;;		_Sw_DimmerOnFunc
 18427 ;;		_Sw_DimmerOffFunc
 18428 ;; This function uses a non-reentrant model
 18429 ;;
 18430                           
 18431                           
 18432                           ;psect for function _setDimmerLights_Trigger
 18433  26BD                     _setDimmerLights_Trigger:	
 18434                           
 18435                           ;incstack = 0
 18436                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18437                           ;setDimmerLights_Trigger@lights stored from wreg
 18438  26BD  0020               	movlb	0	; select bank0
 18439  26BE  00A3               	movwf	setDimmerLights_Trigger@lights
 18440                           
 18441                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18442  26BF  0823               	movf	setDimmerLights_Trigger@lights,w
 18443  26C0  31A5  255A         	fcall	_DimmerLightsPointSelect
 18444                           
 18445                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18446  26C2  0020               	movlb	0	; select bank0
 18447  26C3  086C               	movf	_DimmerLights,w
 18448  26C4  3E09               	addlw	9
 18449  26C5  0086               	movwf	6
 18450  26C6  3001               	movlw	1	; select bank2/3
 18451  26C7  0087               	movwf	7
 18452  26C8  0822               	movf	setDimmerLights_Trigger@command,w
 18453  26C9  1081               	bcf	1,1
 18454  26CA  1D03               	skipz
 18455  26CB  1481               	bsf	1,1
 18456  26CC  0008               	return
 18457  26CD                     __end_of_setDimmerLights_Trigger:	
 18458                           
 18459                           	psect	text115
 18460  26AD                     __ptext115:	
 18461 ;; *************** function _setDimmerLights_Switch *****************
 18462 ;; Defined at:
 18463 ;;		line 435 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18464 ;; Parameters:    Size  Location     Type
 18465 ;;  lights          1    wreg     unsigned char 
 18466 ;;  command         1    2[BANK0 ] unsigned char 
 18467 ;; Auto vars:     Size  Location     Type
 18468 ;;  lights          1    3[BANK0 ] unsigned char 
 18469 ;; Return value:  Size  Location     Type
 18470 ;;		None               void
 18471 ;; Registers used:
 18472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18473 ;; Tracked objects:
 18474 ;;		On entry : 0/0
 18475 ;;		On exit  : 0/0
 18476 ;;		Unchanged: 0/0
 18477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18478 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18482 ;;Total ram usage:        2 bytes
 18483 ;; Hardware stack levels used:    1
 18484 ;; Hardware stack levels required when called:    5
 18485 ;; This function calls:
 18486 ;;		_DimmerLightsPointSelect
 18487 ;; This function is called by:
 18488 ;;		_DlyOff_Main
 18489 ;;		_setRFSW_Control
 18490 ;;		_Sw_DimmerOnFunc
 18491 ;;		_Sw_DimmerOffFunc
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           
 18496                           ;psect for function _setDimmerLights_Switch
 18497  26AD                     _setDimmerLights_Switch:	
 18498                           
 18499                           ;incstack = 0
 18500                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18501                           ;setDimmerLights_Switch@lights stored from wreg
 18502  26AD  0020               	movlb	0	; select bank0
 18503  26AE  00A3               	movwf	setDimmerLights_Switch@lights
 18504                           
 18505                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18506  26AF  0823               	movf	setDimmerLights_Switch@lights,w
 18507  26B0  31A5  255A         	fcall	_DimmerLightsPointSelect
 18508                           
 18509                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18510  26B2  0020               	movlb	0	; select bank0
 18511  26B3  086C               	movf	_DimmerLights,w
 18512  26B4  3E09               	addlw	9
 18513  26B5  0086               	movwf	6
 18514  26B6  3001               	movlw	1	; select bank2/3
 18515  26B7  0087               	movwf	7
 18516  26B8  0822               	movf	setDimmerLights_Switch@command,w
 18517  26B9  1001               	bcf	1,0
 18518  26BA  1D03               	skipz
 18519  26BB  1401               	bsf	1,0
 18520  26BC  0008               	return
 18521  26BD                     __end_of_setDimmerLights_Switch:	
 18522                           
 18523                           	psect	text116
 18524  255A                     __ptext116:	
 18525 ;; *************** function _DimmerLightsPointSelect *****************
 18526 ;; Defined at:
 18527 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18528 ;; Parameters:    Size  Location     Type
 18529 ;;  lights          1    wreg     unsigned char 
 18530 ;; Auto vars:     Size  Location     Type
 18531 ;;  lights          1    1[BANK0 ] unsigned char 
 18532 ;; Return value:  Size  Location     Type
 18533 ;;		None               void
 18534 ;; Registers used:
 18535 ;;		wreg
 18536 ;; Tracked objects:
 18537 ;;		On entry : 0/0
 18538 ;;		On exit  : 0/0
 18539 ;;		Unchanged: 0/0
 18540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;Total ram usage:        2 bytes
 18546 ;; Hardware stack levels used:    1
 18547 ;; Hardware stack levels required when called:    4
 18548 ;; This function calls:
 18549 ;;		Nothing
 18550 ;; This function is called by:
 18551 ;;		_setDimmerLights_Initialization
 18552 ;;		_setDimmerLights_Main
 18553 ;;		_setDimmerLights_ERROR
 18554 ;;		_setDimmerLights_TriggerERROR
 18555 ;;		_setDimmerLights
 18556 ;;		_setDimmerLights_Adj
 18557 ;;		_setDimmerLights_AdjRF
 18558 ;;		_setDimmerLights_Switch
 18559 ;;		_setDimmerLights_AdjGo
 18560 ;;		_setDimmerLights_Trigger
 18561 ;;		_setDimmerLights_TriggerAdj
 18562 ;;		_setDimmerLights_Clear
 18563 ;;		_setDimmerLights_GO
 18564 ;;		_setDimmerLights_MaxmumValue
 18565 ;; This function uses a non-reentrant model
 18566 ;;
 18567                           
 18568                           
 18569                           ;psect for function _DimmerLightsPointSelect
 18570  255A                     _DimmerLightsPointSelect:	
 18571                           
 18572                           ;incstack = 0
 18573                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18574                           ;DimmerLightsPointSelect@lights stored from wreg
 18575  255A  0020               	movlb	0	; select bank0
 18576  255B  00A1               	movwf	DimmerLightsPointSelect@lights
 18577                           
 18578                           ;Dimmer_B1.c: 10: if(lights == 1)
 18579  255C  0821               	movf	DimmerLightsPointSelect@lights,w
 18580  255D  3A01               	xorlw	1
 18581  255E  1D03               	skipz
 18582  255F  0008               	return
 18583                           
 18584                           ;Dimmer_B1.c: 11: {
 18585                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18586  2560  3030               	movlw	_DimmerLights1& (0+255)
 18587  2561  00A0               	movwf	??_DimmerLightsPointSelect
 18588  2562  0820               	movf	??_DimmerLightsPointSelect,w
 18589  2563  00EC               	movwf	_DimmerLights
 18590  2564  0008               	return
 18591  2565                     __end_of_DimmerLightsPointSelect:	
 18592                           
 18593                           	psect	text117
 18594  1587                     __ptext117:	
 18595 ;; *************** function _setBuz *****************
 18596 ;; Defined at:
 18597 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18598 ;; Parameters:    Size  Location     Type
 18599 ;;  count           1    wreg     unsigned char 
 18600 ;;  time            2    6[BANK0 ] int 
 18601 ;; Auto vars:     Size  Location     Type
 18602 ;;  count           1    9[BANK0 ] unsigned char 
 18603 ;; Return value:  Size  Location     Type
 18604 ;;		None               void
 18605 ;; Registers used:
 18606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18607 ;; Tracked objects:
 18608 ;;		On entry : 0/0
 18609 ;;		On exit  : 0/0
 18610 ;;		Unchanged: 0/0
 18611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18615 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18616 ;;Total ram usage:        4 bytes
 18617 ;; Hardware stack levels used:    1
 18618 ;; Hardware stack levels required when called:    5
 18619 ;; This function calls:
 18620 ;;		___wmul
 18621 ;; This function is called by:
 18622 ;;		_DlyOff_Main
 18623 ;;		_setDimmerLights_Main
 18624 ;;		_DimmerLights_Exceptions
 18625 ;;		_MainT
 18626 ;;		_setOverTemp_Exceptions
 18627 ;;		_setLog_Code
 18628 ;;		_setControl_Lights_Table
 18629 ;;		_setRFSW_Control
 18630 ;;		_setSw_Main
 18631 ;;		_Sw_DimmerOnFunc
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           
 18636                           ;psect for function _setBuz
 18637  1587                     _setBuz:	
 18638                           
 18639                           ;incstack = 0
 18640                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18641                           ;setBuz@count stored from wreg
 18642  1587  0020               	movlb	0	; select bank0
 18643  1588  00A9               	movwf	setBuz@count
 18644                           
 18645                           ;Buzzer_B1.c: 24: time*=20;
 18646  1589  3014               	movlw	20
 18647  158A  00A0               	movwf	___wmul@multiplier
 18648  158B  3000               	movlw	0
 18649  158C  00A1               	movwf	___wmul@multiplier+1
 18650  158D  0827               	movf	setBuz@time+1,w
 18651  158E  01A3               	clrf	___wmul@multiplicand+1
 18652  158F  07A3               	addwf	___wmul@multiplicand+1,f
 18653  1590  0826               	movf	setBuz@time,w
 18654  1591  01A2               	clrf	___wmul@multiplicand
 18655  1592  07A2               	addwf	___wmul@multiplicand,f
 18656  1593  3198  20C8  3195   	fcall	___wmul
 18657  1596  0020               	movlb	0	; select bank0
 18658  1597  0821               	movf	?___wmul+1,w
 18659  1598  01A7               	clrf	setBuz@time+1
 18660  1599  07A7               	addwf	setBuz@time+1,f
 18661  159A  0820               	movf	?___wmul,w
 18662  159B  01A6               	clrf	setBuz@time
 18663  159C  07A6               	addwf	setBuz@time,f
 18664                           
 18665                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18666  159D  0878               	movf	_Buz,w
 18667  159E  0086               	movwf	6
 18668  159F  3001               	movlw	1	; select bank2/3
 18669  15A0  0087               	movwf	7
 18670  15A1  1C01               	btfss	1,0
 18671  15A2  0008               	return
 18672                           
 18673                           ;Buzzer_B1.c: 26: {
 18674                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18675  15A3  0878               	movf	_Buz,w
 18676  15A4  0086               	movwf	6
 18677  15A5  3001               	movlw	1	; select bank2/3
 18678  15A6  0087               	movwf	7
 18679  15A7  1881               	btfsc	1,1
 18680  15A8  2DC2               	goto	l8251
 18681                           
 18682                           ;Buzzer_B1.c: 28: {
 18683                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18684  15A9  0878               	movf	_Buz,w
 18685  15AA  0086               	movwf	6
 18686  15AB  3001               	movlw	1	; select bank2/3
 18687  15AC  0087               	movwf	7
 18688  15AD  1481               	bsf	1,1
 18689                           
 18690                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18691  15AE  0829               	movf	setBuz@count,w
 18692  15AF  00A8               	movwf	??_setBuz
 18693  15B0  0878               	movf	_Buz,w
 18694  15B1  3E03               	addlw	3
 18695  15B2  0086               	movwf	6
 18696  15B3  3001               	movlw	1	; select bank2/3
 18697  15B4  0087               	movwf	7
 18698  15B5  0828               	movf	??_setBuz,w
 18699  15B6  0081               	movwf	1
 18700                           
 18701                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18702  15B7  0878               	movf	_Buz,w
 18703  15B8  3E06               	addlw	6
 18704  15B9  0086               	movwf	6
 18705  15BA  3001               	movlw	1	; select bank2/3
 18706  15BB  0087               	movwf	7
 18707  15BC  0826               	movf	setBuz@time,w
 18708  15BD  3FC0               	movwi [0]fsr1
 18709  15BE  0827               	movf	setBuz@time+1,w
 18710  15BF  3FC1               	movwi [1]fsr1
 18711                           
 18712                           ;Buzzer_B1.c: 33: RB3=1;
 18713  15C0  158D               	bsf	13,3	;volatile
 18714                           
 18715                           ;Buzzer_B1.c: 34: }
 18716  15C1  0008               	return
 18717  15C2                     l8251:	
 18718                           
 18719                           ;Buzzer_B1.c: 35: else
 18720                           ;Buzzer_B1.c: 36: {
 18721                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18722  15C2  0878               	movf	_Buz,w
 18723  15C3  0086               	movwf	6
 18724  15C4  3001               	movlw	1	; select bank2/3
 18725  15C5  0087               	movwf	7
 18726  15C6  1981               	btfsc	1,3
 18727  15C7  2DE0               	goto	l8255
 18728                           
 18729                           ;Buzzer_B1.c: 38: {
 18730                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18731  15C8  0878               	movf	_Buz,w
 18732  15C9  0086               	movwf	6
 18733  15CA  3001               	movlw	1	; select bank2/3
 18734  15CB  0087               	movwf	7
 18735  15CC  1581               	bsf	1,3
 18736                           
 18737                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18738  15CD  0829               	movf	setBuz@count,w
 18739  15CE  00A8               	movwf	??_setBuz
 18740  15CF  0878               	movf	_Buz,w
 18741  15D0  3E04               	addlw	4
 18742  15D1  0086               	movwf	6
 18743  15D2  3001               	movlw	1	; select bank2/3
 18744  15D3  0087               	movwf	7
 18745  15D4  0828               	movf	??_setBuz,w
 18746  15D5  0081               	movwf	1
 18747                           
 18748                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18749  15D6  0878               	movf	_Buz,w
 18750  15D7  3E08               	addlw	8
 18751  15D8  0086               	movwf	6
 18752  15D9  3001               	movlw	1	; select bank2/3
 18753  15DA  0087               	movwf	7
 18754  15DB  0826               	movf	setBuz@time,w
 18755  15DC  3FC0               	movwi [0]fsr1
 18756  15DD  0827               	movf	setBuz@time+1,w
 18757  15DE  3FC1               	movwi [1]fsr1
 18758                           
 18759                           ;Buzzer_B1.c: 42: }
 18760  15DF  0008               	return
 18761  15E0                     l8255:	
 18762                           
 18763                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18764  15E0  0878               	movf	_Buz,w
 18765  15E1  0086               	movwf	6
 18766  15E2  3001               	movlw	1	; select bank2/3
 18767  15E3  0087               	movwf	7
 18768  15E4  1A01               	btfsc	1,4
 18769  15E5  0008               	return
 18770                           
 18771                           ;Buzzer_B1.c: 44: {
 18772                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18773  15E6  0878               	movf	_Buz,w
 18774  15E7  0086               	movwf	6
 18775  15E8  3001               	movlw	1	; select bank2/3
 18776  15E9  0087               	movwf	7
 18777  15EA  1601               	bsf	1,4
 18778                           
 18779                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18780  15EB  0829               	movf	setBuz@count,w
 18781  15EC  00A8               	movwf	??_setBuz
 18782  15ED  0878               	movf	_Buz,w
 18783  15EE  3E05               	addlw	5
 18784  15EF  0086               	movwf	6
 18785  15F0  3001               	movlw	1	; select bank2/3
 18786  15F1  0087               	movwf	7
 18787  15F2  0828               	movf	??_setBuz,w
 18788  15F3  0081               	movwf	1
 18789                           
 18790                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18791  15F4  0878               	movf	_Buz,w
 18792  15F5  3E0A               	addlw	10
 18793  15F6  0086               	movwf	6
 18794  15F7  3001               	movlw	1	; select bank2/3
 18795  15F8  0087               	movwf	7
 18796  15F9  0826               	movf	setBuz@time,w
 18797  15FA  3FC0               	movwi [0]fsr1
 18798  15FB  0827               	movf	setBuz@time+1,w
 18799  15FC  3FC1               	movwi [1]fsr1
 18800  15FD  0008               	return
 18801  15FE                     __end_of_setBuz:	
 18802                           
 18803                           	psect	text118
 18804  18C8                     __ptext118:	
 18805 ;; *************** function ___wmul *****************
 18806 ;; Defined at:
 18807 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18808 ;; Parameters:    Size  Location     Type
 18809 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18810 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18811 ;; Auto vars:     Size  Location     Type
 18812 ;;  product         2    4[BANK0 ] unsigned int 
 18813 ;; Return value:  Size  Location     Type
 18814 ;;                  2    0[BANK0 ] unsigned int 
 18815 ;; Registers used:
 18816 ;;		wreg, status,2, status,0
 18817 ;; Tracked objects:
 18818 ;;		On entry : 0/0
 18819 ;;		On exit  : 0/0
 18820 ;;		Unchanged: 0/0
 18821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18822 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18823 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18825 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18826 ;;Total ram usage:        6 bytes
 18827 ;; Hardware stack levels used:    1
 18828 ;; Hardware stack levels required when called:    4
 18829 ;; This function calls:
 18830 ;;		Nothing
 18831 ;; This function is called by:
 18832 ;;		_setBuz
 18833 ;;		_Load_Main
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           
 18838                           ;psect for function ___wmul
 18839  18C8                     ___wmul:	
 18840                           
 18841                           ;incstack = 0
 18842                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18843  18C8  0020               	movlb	0	; select bank0
 18844  18C9  01A4               	clrf	___wmul@product
 18845  18CA  01A5               	clrf	___wmul@product+1
 18846  18CB                     l8231:	
 18847  18CB  1C20               	btfss	___wmul@multiplier,0
 18848  18CC  28D1               	goto	l3038
 18849  18CD  0822               	movf	___wmul@multiplicand,w
 18850  18CE  07A4               	addwf	___wmul@product,f
 18851  18CF  0823               	movf	___wmul@multiplicand+1,w
 18852  18D0  3DA5               	addwfc	___wmul@product+1,f
 18853  18D1                     l3038:	
 18854  18D1  3001               	movlw	1
 18855  18D2                     u7525:	
 18856  18D2  35A2               	lslf	___wmul@multiplicand,f
 18857  18D3  0DA3               	rlf	___wmul@multiplicand+1,f
 18858  18D4  0B89               	decfsz	9,f
 18859  18D5  28D2               	goto	u7525
 18860  18D6  3001               	movlw	1
 18861  18D7                     u7535:	
 18862  18D7  36A1               	lsrf	___wmul@multiplier+1,f
 18863  18D8  0CA0               	rrf	___wmul@multiplier,f
 18864  18D9  0B89               	decfsz	9,f
 18865  18DA  28D7               	goto	u7535
 18866  18DB  0821               	movf	___wmul@multiplier+1,w
 18867  18DC  0420               	iorwf	___wmul@multiplier,w
 18868  18DD  1D03               	skipz
 18869  18DE  28CB               	goto	l8231
 18870  18DF  0825               	movf	___wmul@product+1,w
 18871  18E0  01A1               	clrf	?___wmul+1
 18872  18E1  07A1               	addwf	?___wmul+1,f
 18873  18E2  0824               	movf	___wmul@product,w
 18874  18E3  01A0               	clrf	?___wmul
 18875  18E4  07A0               	addwf	?___wmul,f
 18876  18E5  0008               	return
 18877  18E6                     __end_of___wmul:	
 18878                           
 18879                           	psect	text119
 18880  24CA                     __ptext119:	
 18881 ;; *************** function _DelayOff_Initialization *****************
 18882 ;; Defined at:
 18883 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;		None
 18886 ;; Auto vars:     Size  Location     Type
 18887 ;;		None
 18888 ;; Return value:  Size  Location     Type
 18889 ;;		None               void
 18890 ;; Registers used:
 18891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18892 ;; Tracked objects:
 18893 ;;		On entry : 0/0
 18894 ;;		On exit  : 0/0
 18895 ;;		Unchanged: 0/0
 18896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;Total ram usage:        0 bytes
 18902 ;; Hardware stack levels used:    1
 18903 ;; Hardware stack levels required when called:    6
 18904 ;; This function calls:
 18905 ;;		_DlyOff_Initialization
 18906 ;; This function is called by:
 18907 ;;		_main
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           
 18912                           ;psect for function _DelayOff_Initialization
 18913  24CA                     _DelayOff_Initialization:	
 18914                           
 18915                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18916                           
 18917                           ;incstack = 0
 18918                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18919  24CA  3001               	movlw	1
 18920  24CB  31A5  254F         	fcall	_DlyOff_Initialization
 18921  24CD  0008               	return
 18922  24CE                     __end_of_DelayOff_Initialization:	
 18923                           
 18924                           	psect	text120
 18925  254F                     __ptext120:	
 18926 ;; *************** function _DlyOff_Initialization *****************
 18927 ;; Defined at:
 18928 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18929 ;; Parameters:    Size  Location     Type
 18930 ;;  sw              1    wreg     unsigned char 
 18931 ;; Auto vars:     Size  Location     Type
 18932 ;;  sw              1    2[BANK0 ] unsigned char 
 18933 ;; Return value:  Size  Location     Type
 18934 ;;		None               void
 18935 ;; Registers used:
 18936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18937 ;; Tracked objects:
 18938 ;;		On entry : 0/0
 18939 ;;		On exit  : 0/0
 18940 ;;		Unchanged: 0/0
 18941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18945 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18946 ;;Total ram usage:        1 bytes
 18947 ;; Hardware stack levels used:    1
 18948 ;; Hardware stack levels required when called:    5
 18949 ;; This function calls:
 18950 ;;		_DelayOffPointSelect
 18951 ;; This function is called by:
 18952 ;;		_DelayOff_Initialization
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           
 18957                           ;psect for function _DlyOff_Initialization
 18958  254F                     _DlyOff_Initialization:	
 18959                           
 18960                           ;incstack = 0
 18961                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18962                           ;DlyOff_Initialization@sw stored from wreg
 18963  254F  0020               	movlb	0	; select bank0
 18964  2550  00A2               	movwf	DlyOff_Initialization@sw
 18965                           
 18966                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18967  2551  0822               	movf	DlyOff_Initialization@sw,w
 18968  2552  31A5  25CB         	fcall	_DelayOffPointSelect
 18969                           
 18970                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18971  2554  0021               	movlb	1	; select bank1
 18972  2555  0838               	movf	_DelayOff^(0+128),w
 18973  2556  0086               	movwf	6
 18974  2557  0187               	clrf	7
 18975  2558  1401               	bsf	1,0
 18976  2559  0008               	return
 18977  255A                     __end_of_DlyOff_Initialization:	
 18978                           
 18979                           	psect	text121
 18980  25CB                     __ptext121:	
 18981 ;; *************** function _DelayOffPointSelect *****************
 18982 ;; Defined at:
 18983 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;  sw              1    wreg     unsigned char 
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;  sw              1    1[BANK0 ] unsigned char 
 18988 ;; Return value:  Size  Location     Type
 18989 ;;		None               void
 18990 ;; Registers used:
 18991 ;;		wreg
 18992 ;; Tracked objects:
 18993 ;;		On entry : 0/0
 18994 ;;		On exit  : 0/0
 18995 ;;		Unchanged: 0/0
 18996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19001 ;;Total ram usage:        2 bytes
 19002 ;; Hardware stack levels used:    1
 19003 ;; Hardware stack levels required when called:    4
 19004 ;; This function calls:
 19005 ;;		Nothing
 19006 ;; This function is called by:
 19007 ;;		_DlyOff_Initialization
 19008 ;;		_DlyOff_Main
 19009 ;;		_setDelayOff_GO
 19010 ;; This function uses a non-reentrant model
 19011 ;;
 19012                           
 19013                           
 19014                           ;psect for function _DelayOffPointSelect
 19015  25CB                     _DelayOffPointSelect:	
 19016                           
 19017                           ;incstack = 0
 19018                           ; Regs used in _DelayOffPointSelect: [wreg]
 19019                           ;DelayOffPointSelect@sw stored from wreg
 19020  25CB  0020               	movlb	0	; select bank0
 19021  25CC  00A1               	movwf	DelayOffPointSelect@sw
 19022                           
 19023                           ;DelayOff_B1.c: 11: if(sw == 1)
 19024  25CD  0821               	movf	DelayOffPointSelect@sw,w
 19025  25CE  3A01               	xorlw	1
 19026  25CF  1D03               	skipz
 19027  25D0  0008               	return
 19028                           
 19029                           ;DelayOff_B1.c: 12: {
 19030                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 19031  25D1  30D5               	movlw	_DlySw1& (0+255)
 19032  25D2  00A0               	movwf	??_DelayOffPointSelect
 19033  25D3  0820               	movf	??_DelayOffPointSelect,w
 19034  25D4  0021               	movlb	1	; select bank1
 19035  25D5  00B8               	movwf	_DelayOff^(0+128)
 19036  25D6  0008               	return
 19037  25D7                     __end_of_DelayOffPointSelect:	
 19038                           
 19039                           	psect	text122
 19040  2744                     __ptext122:	
 19041 ;; *************** function _CC2500_PowerOnInitial *****************
 19042 ;; Defined at:
 19043 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19044 ;; Parameters:    Size  Location     Type
 19045 ;;		None
 19046 ;; Auto vars:     Size  Location     Type
 19047 ;;		None
 19048 ;; Return value:  Size  Location     Type
 19049 ;;		None               void
 19050 ;; Registers used:
 19051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19052 ;; Tracked objects:
 19053 ;;		On entry : 0/0
 19054 ;;		On exit  : 0/0
 19055 ;;		Unchanged: 0/0
 19056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19061 ;;Total ram usage:        0 bytes
 19062 ;; Hardware stack levels used:    1
 19063 ;; Hardware stack levels required when called:    7
 19064 ;; This function calls:
 19065 ;;		_CC2500_ClearRXFIFO
 19066 ;;		_CC2500_ClearTXFIFO
 19067 ;;		_CC2500_FrequencyCabr
 19068 ;;		_CC2500_InitPATable
 19069 ;;		_CC2500_InitSetREG
 19070 ;;		_CC2500_PowerRST
 19071 ;;		_CC2500_SIDLEMode
 19072 ;; This function is called by:
 19073 ;;		_main
 19074 ;; This function uses a non-reentrant model
 19075 ;;
 19076                           
 19077                           
 19078                           ;psect for function _CC2500_PowerOnInitial
 19079  2744                     _CC2500_PowerOnInitial:	
 19080                           
 19081                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 19082                           
 19083                           ;incstack = 0
 19084                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19085  2744  319A  22FE  31A7   	fcall	_CC2500_PowerRST
 19086                           
 19087                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19088  2747  3199  21F8  31A7   	fcall	_CC2500_InitSetREG
 19089                           
 19090                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19091  274A  3198  20E6  31A7   	fcall	_CC2500_InitPATable
 19092                           
 19093                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19094  274D  31A4  24C2  31A7   	fcall	_CC2500_ClearTXFIFO
 19095                           
 19096                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19097  2750  31A4  24BE  31A7   	fcall	_CC2500_ClearRXFIFO
 19098                           
 19099                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19100  2753  31A5  25BF  31A7   	fcall	_CC2500_FrequencyCabr
 19101                           
 19102                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19103  2756  31A4  24C6         	fcall	_CC2500_SIDLEMode
 19104  2758  0008               	return
 19105  2759                     __end_of_CC2500_PowerOnInitial:	
 19106                           
 19107                           	psect	text123
 19108  24C6                     __ptext123:	
 19109 ;; *************** function _CC2500_SIDLEMode *****************
 19110 ;; Defined at:
 19111 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19112 ;; Parameters:    Size  Location     Type
 19113 ;;		None
 19114 ;; Auto vars:     Size  Location     Type
 19115 ;;		None
 19116 ;; Return value:  Size  Location     Type
 19117 ;;		None               void
 19118 ;; Registers used:
 19119 ;;		wreg, status,2, status,0, pclath, cstack
 19120 ;; Tracked objects:
 19121 ;;		On entry : 0/0
 19122 ;;		On exit  : 0/0
 19123 ;;		Unchanged: 0/0
 19124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19129 ;;Total ram usage:        0 bytes
 19130 ;; Hardware stack levels used:    1
 19131 ;; Hardware stack levels required when called:    6
 19132 ;; This function calls:
 19133 ;;		_CC2500_WriteCommand
 19134 ;; This function is called by:
 19135 ;;		_CC2500_PowerOnInitial
 19136 ;; This function uses a non-reentrant model
 19137 ;;
 19138                           
 19139                           
 19140                           ;psect for function _CC2500_SIDLEMode
 19141  24C6                     _CC2500_SIDLEMode:	
 19142                           
 19143                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19144                           
 19145                           ;incstack = 0
 19146                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19147  24C6  3036               	movlw	54
 19148  24C7  31A6  269D         	fcall	_CC2500_WriteCommand
 19149  24C9  0008               	return
 19150  24CA                     __end_of_CC2500_SIDLEMode:	
 19151                           
 19152                           	psect	text124
 19153  1AFE                     __ptext124:	
 19154 ;; *************** function _CC2500_PowerRST *****************
 19155 ;; Defined at:
 19156 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19157 ;; Parameters:    Size  Location     Type
 19158 ;;		None
 19159 ;; Auto vars:     Size  Location     Type
 19160 ;;		None
 19161 ;; Return value:  Size  Location     Type
 19162 ;;		None               void
 19163 ;; Registers used:
 19164 ;;		wreg, status,2, status,0, pclath, cstack
 19165 ;; Tracked objects:
 19166 ;;		On entry : 0/0
 19167 ;;		On exit  : 0/0
 19168 ;;		Unchanged: 0/0
 19169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19174 ;;Total ram usage:        1 bytes
 19175 ;; Hardware stack levels used:    1
 19176 ;; Hardware stack levels required when called:    5
 19177 ;; This function calls:
 19178 ;;		_CC2500_WriteByte
 19179 ;;		_DelayTime_1us
 19180 ;; This function is called by:
 19181 ;;		_CC2500_PowerOnInitial
 19182 ;; This function uses a non-reentrant model
 19183 ;;
 19184                           
 19185                           
 19186                           ;psect for function _CC2500_PowerRST
 19187  1AFE                     _CC2500_PowerRST:	
 19188                           
 19189                           ;CC2500_B1.c: 112: RC1=0;
 19190                           
 19191                           ;incstack = 0
 19192                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19193  1AFE  0020               	movlb	0	; select bank0
 19194  1AFF  108E               	bcf	14,1	;volatile
 19195                           
 19196                           ;CC2500_B1.c: 113: RC0=0;
 19197  1B00  100E               	bcf	14,0	;volatile
 19198                           
 19199                           ;CC2500_B1.c: 114: RC4=1;
 19200  1B01  160E               	bsf	14,4	;volatile
 19201                           
 19202                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19203  1B02  300A               	movlw	10
 19204  1B03  00A0               	movwf	DelayTime_1us@count
 19205  1B04  3000               	movlw	0
 19206  1B05  00A1               	movwf	DelayTime_1us@count+1
 19207  1B06  3199  21D2  319A   	fcall	_DelayTime_1us
 19208                           
 19209                           ;CC2500_B1.c: 116: RC4=0;
 19210  1B09  0020               	movlb	0	; select bank0
 19211  1B0A  120E               	bcf	14,4	;volatile
 19212                           
 19213                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19214  1B0B  300A               	movlw	10
 19215  1B0C  00A0               	movwf	DelayTime_1us@count
 19216  1B0D  3000               	movlw	0
 19217  1B0E  00A1               	movwf	DelayTime_1us@count+1
 19218  1B0F  3199  21D2  319A   	fcall	_DelayTime_1us
 19219                           
 19220                           ;CC2500_B1.c: 118: RC4=1;
 19221  1B12  0020               	movlb	0	; select bank0
 19222  1B13  160E               	bsf	14,4	;volatile
 19223                           
 19224                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19225  1B14  3028               	movlw	40
 19226  1B15  00A0               	movwf	DelayTime_1us@count
 19227  1B16  3000               	movlw	0
 19228  1B17  00A1               	movwf	DelayTime_1us@count+1
 19229  1B18  3199  21D2  319A   	fcall	_DelayTime_1us
 19230                           
 19231                           ;CC2500_B1.c: 120: RC4=0;
 19232  1B1B  0020               	movlb	0	; select bank0
 19233  1B1C  120E               	bcf	14,4	;volatile
 19234                           
 19235                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19236  1B1D  3030               	movlw	48
 19237  1B1E  00A6               	movwf	??_CC2500_PowerRST
 19238  1B1F  0826               	movf	??_CC2500_PowerRST,w
 19239  1B20  0021               	movlb	1	; select bank1
 19240  1B21  00BF               	movwf	_SPI0Buffer^(0+128)
 19241  1B22                     l320:	
 19242                           ;CC2500_B1.c: 122: while(RC2==1);
 19243                           
 19244  1B22  0020               	movlb	0	; select bank0
 19245  1B23  190E               	btfsc	14,2	;volatile
 19246  1B24  2B22               	goto	l320
 19247                           
 19248                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19249  1B25  31A7  279C  319A   	fcall	_CC2500_WriteByte
 19250  1B28                     l323:	
 19251                           ;CC2500_B1.c: 124: while(RC2==1);
 19252                           
 19253  1B28  0020               	movlb	0	; select bank0
 19254  1B29  190E               	btfsc	14,2	;volatile
 19255  1B2A  2B28               	goto	l323
 19256                           
 19257                           ;CC2500_B1.c: 125: RC0=0;
 19258  1B2B  100E               	bcf	14,0	;volatile
 19259                           
 19260                           ;CC2500_B1.c: 126: RC4=1;
 19261  1B2C  160E               	bsf	14,4	;volatile
 19262  1B2D  0008               	return
 19263  1B2E                     __end_of_CC2500_PowerRST:	
 19264                           
 19265                           	psect	text125
 19266  19F8                     __ptext125:	
 19267 ;; *************** function _CC2500_InitSetREG *****************
 19268 ;; Defined at:
 19269 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19270 ;; Parameters:    Size  Location     Type
 19271 ;;		None
 19272 ;; Auto vars:     Size  Location     Type
 19273 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19274 ;;  temp2           1    7[BANK0 ] unsigned char 
 19275 ;;  temp1           1    6[BANK0 ] unsigned char 
 19276 ;; Return value:  Size  Location     Type
 19277 ;;		None               void
 19278 ;; Registers used:
 19279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19280 ;; Tracked objects:
 19281 ;;		On entry : 0/0
 19282 ;;		On exit  : 0/0
 19283 ;;		Unchanged: 0/0
 19284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19286 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19288 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19289 ;;Total ram usage:        4 bytes
 19290 ;; Hardware stack levels used:    1
 19291 ;; Hardware stack levels required when called:    6
 19292 ;; This function calls:
 19293 ;;		_CC2500_WriteREG
 19294 ;; This function is called by:
 19295 ;;		_CC2500_PowerOnInitial
 19296 ;; This function uses a non-reentrant model
 19297 ;;
 19298                           
 19299                           
 19300                           ;psect for function _CC2500_InitSetREG
 19301  19F8                     _CC2500_InitSetREG:	
 19302                           
 19303                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19304                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19305                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19306                           
 19307                           ;incstack = 0
 19308                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19309  19F8  0020               	movlb	0	; select bank0
 19310  19F9  01A8               	clrf	CC2500_InitSetREG@loop_c
 19311  19FA                     L12:	
 19312  19FA  302F               	movlw	47
 19313  19FB  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19314  19FC  1803               	btfsc	3,0
 19315  19FD  0008               	return
 19316                           
 19317                           ;CC2500_B1.c: 137: {
 19318                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19319  19FE  0828               	movf	CC2500_InitSetREG@loop_c,w
 19320  19FF  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19321  1A00  0084               	movwf	4
 19322  1A01  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19323  1A02  1803               	skipnc
 19324  1A03  3E01               	addlw	1
 19325  1A04  0085               	movwf	5
 19326  1A05  0800               	movf	0,w	;code access
 19327  1A06  00A5               	movwf	??_CC2500_InitSetREG
 19328  1A07  0825               	movf	??_CC2500_InitSetREG,w
 19329  1A08  00A6               	movwf	CC2500_InitSetREG@temp1
 19330                           
 19331                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19332  1A09  0828               	movf	CC2500_InitSetREG@loop_c,w
 19333  1A0A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19334  1A0B  0084               	movwf	4
 19335  1A0C  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19336  1A0D  1803               	skipnc
 19337  1A0E  3E01               	addlw	1
 19338  1A0F  0085               	movwf	5
 19339  1A10  0800               	movf	0,w	;code access
 19340  1A11  00A5               	movwf	??_CC2500_InitSetREG
 19341  1A12  0825               	movf	??_CC2500_InitSetREG,w
 19342  1A13  00A7               	movwf	CC2500_InitSetREG@temp2
 19343                           
 19344                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19345  1A14  0827               	movf	CC2500_InitSetREG@temp2,w
 19346  1A15  00A5               	movwf	??_CC2500_InitSetREG
 19347  1A16  0825               	movf	??_CC2500_InitSetREG,w
 19348  1A17  00A2               	movwf	CC2500_WriteREG@value
 19349  1A18  0826               	movf	CC2500_InitSetREG@temp1,w
 19350  1A19  31A7  27B5  3199   	fcall	_CC2500_WriteREG
 19351  1A1C  3001               	movlw	1
 19352  1A1D  0020               	movlb	0	; select bank0
 19353  1A1E  00A5               	movwf	??_CC2500_InitSetREG
 19354  1A1F  0825               	movf	??_CC2500_InitSetREG,w
 19355  1A20  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19356  1A21  29FA               	goto	L12
 19357  1A22                     __end_of_CC2500_InitSetREG:	
 19358                           
 19359                           	psect	text126
 19360  18E6                     __ptext126:	
 19361 ;; *************** function _CC2500_InitPATable *****************
 19362 ;; Defined at:
 19363 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19364 ;; Parameters:    Size  Location     Type
 19365 ;;		None
 19366 ;; Auto vars:     Size  Location     Type
 19367 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19368 ;;  temp            1    6[BANK0 ] unsigned char 
 19369 ;; Return value:  Size  Location     Type
 19370 ;;		None               void
 19371 ;; Registers used:
 19372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19373 ;; Tracked objects:
 19374 ;;		On entry : 0/0
 19375 ;;		On exit  : 0/0
 19376 ;;		Unchanged: 0/0
 19377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;Total ram usage:        3 bytes
 19383 ;; Hardware stack levels used:    1
 19384 ;; Hardware stack levels required when called:    6
 19385 ;; This function calls:
 19386 ;;		_CC2500_WriteREG
 19387 ;; This function is called by:
 19388 ;;		_CC2500_PowerOnInitial
 19389 ;; This function uses a non-reentrant model
 19390 ;;
 19391                           
 19392                           
 19393                           ;psect for function _CC2500_InitPATable
 19394  18E6                     _CC2500_InitPATable:	
 19395                           
 19396                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19397                           ;CC2500_B1.c: 150: unsigned char temp;
 19398                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19399                           
 19400                           ;incstack = 0
 19401                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19402  18E6  0020               	movlb	0	; select bank0
 19403  18E7  01A7               	clrf	CC2500_InitPATable@loop_d
 19404  18E8                     L13:	
 19405  18E8  3008               	movlw	8
 19406  18E9  0227               	subwf	CC2500_InitPATable@loop_d,w
 19407  18EA  1803               	btfsc	3,0
 19408  18EB  0008               	return
 19409                           
 19410                           ;CC2500_B1.c: 153: {
 19411                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19412  18EC  0827               	movf	CC2500_InitPATable@loop_d,w
 19413  18ED  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19414  18EE  0084               	movwf	4
 19415  18EF  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19416  18F0  1803               	skipnc
 19417  18F1  3E01               	addlw	1
 19418  18F2  0085               	movwf	5
 19419  18F3  0800               	movf	0,w	;code access
 19420  18F4  00A5               	movwf	??_CC2500_InitPATable
 19421  18F5  0825               	movf	??_CC2500_InitPATable,w
 19422  18F6  00A6               	movwf	CC2500_InitPATable@temp
 19423                           
 19424                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19425  18F7  0826               	movf	CC2500_InitPATable@temp,w
 19426  18F8  00A5               	movwf	??_CC2500_InitPATable
 19427  18F9  0825               	movf	??_CC2500_InitPATable,w
 19428  18FA  00A2               	movwf	CC2500_WriteREG@value
 19429  18FB  303E               	movlw	62
 19430  18FC  31A7  27B5  3198   	fcall	_CC2500_WriteREG
 19431  18FF  3001               	movlw	1
 19432  1900  0020               	movlb	0	; select bank0
 19433  1901  00A5               	movwf	??_CC2500_InitPATable
 19434  1902  0825               	movf	??_CC2500_InitPATable,w
 19435  1903  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19436  1904  28E8               	goto	L13
 19437  1905                     __end_of_CC2500_InitPATable:	
 19438                           
 19439                           	psect	text127
 19440  27B5                     __ptext127:	
 19441 ;; *************** function _CC2500_WriteREG *****************
 19442 ;; Defined at:
 19443 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19444 ;; Parameters:    Size  Location     Type
 19445 ;;  w_addr          1    wreg     unsigned char 
 19446 ;;  value           1    2[BANK0 ] unsigned char 
 19447 ;; Auto vars:     Size  Location     Type
 19448 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19449 ;; Return value:  Size  Location     Type
 19450 ;;		None               void
 19451 ;; Registers used:
 19452 ;;		wreg, status,2, status,0, pclath, cstack
 19453 ;; Tracked objects:
 19454 ;;		On entry : 0/0
 19455 ;;		On exit  : 0/0
 19456 ;;		Unchanged: 0/0
 19457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19458 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19462 ;;Total ram usage:        3 bytes
 19463 ;; Hardware stack levels used:    1
 19464 ;; Hardware stack levels required when called:    5
 19465 ;; This function calls:
 19466 ;;		_CC2500_WriteByte
 19467 ;; This function is called by:
 19468 ;;		_CC2500_InitSetREG
 19469 ;;		_CC2500_InitPATable
 19470 ;; This function uses a non-reentrant model
 19471 ;;
 19472                           
 19473                           
 19474                           ;psect for function _CC2500_WriteREG
 19475  27B5                     _CC2500_WriteREG:	
 19476                           
 19477                           ;incstack = 0
 19478                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19479                           ;CC2500_WriteREG@w_addr stored from wreg
 19480  27B5  0020               	movlb	0	; select bank0
 19481  27B6  00A4               	movwf	CC2500_WriteREG@w_addr
 19482                           
 19483                           ;CC2500_B1.c: 229: RC4=0;
 19484  27B7  120E               	bcf	14,4	;volatile
 19485                           
 19486                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19487  27B8  0824               	movf	CC2500_WriteREG@w_addr,w
 19488  27B9  00A3               	movwf	??_CC2500_WriteREG
 19489  27BA  0823               	movf	??_CC2500_WriteREG,w
 19490  27BB  0021               	movlb	1	; select bank1
 19491  27BC  00BF               	movwf	_SPI0Buffer^(0+128)
 19492  27BD                     l365:	
 19493                           ;CC2500_B1.c: 231: while(RC2==1);
 19494                           
 19495  27BD  0020               	movlb	0	; select bank0
 19496  27BE  190E               	btfsc	14,2	;volatile
 19497  27BF  2FBD               	goto	l365
 19498                           
 19499                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19500  27C0  31A7  279C  31A7   	fcall	_CC2500_WriteByte
 19501                           
 19502                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19503  27C3  0020               	movlb	0	; select bank0
 19504  27C4  0822               	movf	CC2500_WriteREG@value,w
 19505  27C5  00A3               	movwf	??_CC2500_WriteREG
 19506  27C6  0823               	movf	??_CC2500_WriteREG,w
 19507  27C7  0021               	movlb	1	; select bank1
 19508  27C8  00BF               	movwf	_SPI0Buffer^(0+128)
 19509                           
 19510                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19511  27C9  31A7  279C         	fcall	_CC2500_WriteByte
 19512                           
 19513                           ;CC2500_B1.c: 235: RC4=1;
 19514  27CB  0020               	movlb	0	; select bank0
 19515  27CC  160E               	bsf	14,4	;volatile
 19516  27CD  0008               	return
 19517  27CE                     __end_of_CC2500_WriteREG:	
 19518                           
 19519                           	psect	text128
 19520  25BF                     __ptext128:	
 19521 ;; *************** function _CC2500_FrequencyCabr *****************
 19522 ;; Defined at:
 19523 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19524 ;; Parameters:    Size  Location     Type
 19525 ;;		None
 19526 ;; Auto vars:     Size  Location     Type
 19527 ;;		None
 19528 ;; Return value:  Size  Location     Type
 19529 ;;		None               void
 19530 ;; Registers used:
 19531 ;;		wreg, status,2, status,0, pclath, cstack
 19532 ;; Tracked objects:
 19533 ;;		On entry : 0/0
 19534 ;;		On exit  : 0/0
 19535 ;;		Unchanged: 0/0
 19536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19541 ;;Total ram usage:        0 bytes
 19542 ;; Hardware stack levels used:    1
 19543 ;; Hardware stack levels required when called:    6
 19544 ;; This function calls:
 19545 ;;		_CC2500_WriteCommand
 19546 ;;		_DelayTime_1us
 19547 ;; This function is called by:
 19548 ;;		_CC2500_PowerOnInitial
 19549 ;; This function uses a non-reentrant model
 19550 ;;
 19551                           
 19552                           
 19553                           ;psect for function _CC2500_FrequencyCabr
 19554  25BF                     _CC2500_FrequencyCabr:	
 19555                           
 19556                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19557                           
 19558                           ;incstack = 0
 19559                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19560  25BF  3033               	movlw	51
 19561  25C0  31A6  269D  31A5   	fcall	_CC2500_WriteCommand
 19562                           
 19563                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19564  25C3  30E8               	movlw	232
 19565  25C4  0020               	movlb	0	; select bank0
 19566  25C5  00A0               	movwf	DelayTime_1us@count
 19567  25C6  3003               	movlw	3
 19568  25C7  00A1               	movwf	DelayTime_1us@count+1
 19569  25C8  3199  21D2         	fcall	_DelayTime_1us
 19570  25CA  0008               	return
 19571  25CB                     __end_of_CC2500_FrequencyCabr:	
 19572                           
 19573                           	psect	text129
 19574  19D2                     __ptext129:	
 19575 ;; *************** function _DelayTime_1us *****************
 19576 ;; Defined at:
 19577 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19578 ;; Parameters:    Size  Location     Type
 19579 ;;  count           2    0[BANK0 ] int 
 19580 ;; Auto vars:     Size  Location     Type
 19581 ;;  j               2    4[BANK0 ] unsigned int 
 19582 ;;  i               2    2[BANK0 ] unsigned int 
 19583 ;; Return value:  Size  Location     Type
 19584 ;;		None               void
 19585 ;; Registers used:
 19586 ;;		wreg, status,2
 19587 ;; Tracked objects:
 19588 ;;		On entry : 0/0
 19589 ;;		On exit  : 0/0
 19590 ;;		Unchanged: 0/0
 19591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19593 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19596 ;;Total ram usage:        6 bytes
 19597 ;; Hardware stack levels used:    1
 19598 ;; Hardware stack levels required when called:    4
 19599 ;; This function calls:
 19600 ;;		Nothing
 19601 ;; This function is called by:
 19602 ;;		_CC2500_PowerRST
 19603 ;;		_CC2500_FrequencyCabr
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           
 19608                           ;psect for function _DelayTime_1us
 19609  19D2                     _DelayTime_1us:	
 19610                           
 19611                           ;CC2500_B1.c: 285: unsigned int i,j;
 19612                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19613                           
 19614                           ;incstack = 0
 19615                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19616  19D2  3001               	movlw	1
 19617  19D3  0020               	movlb	0	; select bank0
 19618  19D4  00A2               	movwf	DelayTime_1us@i
 19619  19D5  3000               	movlw	0
 19620  19D6  00A3               	movwf	DelayTime_1us@i+1
 19621  19D7                     l389:	
 19622  19D7  0821               	movf	DelayTime_1us@count+1,w
 19623  19D8  0223               	subwf	DelayTime_1us@i+1,w
 19624  19D9  1D03               	skipz
 19625  19DA  29DD               	goto	u8065
 19626  19DB  0820               	movf	DelayTime_1us@count,w
 19627  19DC  0222               	subwf	DelayTime_1us@i,w
 19628  19DD                     u8065:	
 19629  19DD  1803               	btfsc	3,0
 19630  19DE  0008               	return
 19631                           
 19632                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19633  19DF  01A4               	clrf	DelayTime_1us@j
 19634  19E0  01A5               	clrf	DelayTime_1us@j+1
 19635  19E1  3000               	movlw	0
 19636  19E2  0225               	subwf	DelayTime_1us@j+1,w
 19637  19E3  3002               	movlw	2
 19638  19E4  1903               	skipnz
 19639  19E5  0224               	subwf	DelayTime_1us@j,w
 19640  19E6  1803               	btfsc	3,0
 19641  19E7  29F3               	goto	l8631
 19642  19E8                     l8629:	
 19643  19E8  3001               	movlw	1
 19644  19E9  07A4               	addwf	DelayTime_1us@j,f
 19645  19EA  3000               	movlw	0
 19646  19EB  3DA5               	addwfc	DelayTime_1us@j+1,f
 19647  19EC  3000               	movlw	0
 19648  19ED  0225               	subwf	DelayTime_1us@j+1,w
 19649  19EE  3002               	movlw	2
 19650  19EF  1903               	skipnz
 19651  19F0  0224               	subwf	DelayTime_1us@j,w
 19652  19F1  1C03               	skipc
 19653  19F2  29E8               	goto	l8629
 19654  19F3                     l8631:	
 19655  19F3  3001               	movlw	1
 19656  19F4  07A2               	addwf	DelayTime_1us@i,f
 19657  19F5  3000               	movlw	0
 19658  19F6  3DA3               	addwfc	DelayTime_1us@i+1,f
 19659  19F7  29D7               	goto	l389
 19660  19F8                     __end_of_DelayTime_1us:	
 19661                           
 19662                           	psect	text130
 19663  24C2                     __ptext130:	
 19664 ;; *************** function _CC2500_ClearTXFIFO *****************
 19665 ;; Defined at:
 19666 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19667 ;; Parameters:    Size  Location     Type
 19668 ;;		None
 19669 ;; Auto vars:     Size  Location     Type
 19670 ;;		None
 19671 ;; Return value:  Size  Location     Type
 19672 ;;		None               void
 19673 ;; Registers used:
 19674 ;;		wreg, status,2, status,0, pclath, cstack
 19675 ;; Tracked objects:
 19676 ;;		On entry : 0/0
 19677 ;;		On exit  : 0/0
 19678 ;;		Unchanged: 0/0
 19679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;Total ram usage:        0 bytes
 19685 ;; Hardware stack levels used:    1
 19686 ;; Hardware stack levels required when called:    6
 19687 ;; This function calls:
 19688 ;;		_CC2500_WriteCommand
 19689 ;; This function is called by:
 19690 ;;		_CC2500_PowerOnInitial
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           
 19695                           ;psect for function _CC2500_ClearTXFIFO
 19696  24C2                     _CC2500_ClearTXFIFO:	
 19697                           
 19698                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19699                           
 19700                           ;incstack = 0
 19701                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19702  24C2  303B               	movlw	59
 19703  24C3  31A6  269D         	fcall	_CC2500_WriteCommand
 19704  24C5  0008               	return
 19705  24C6                     __end_of_CC2500_ClearTXFIFO:	
 19706                           
 19707                           	psect	text131
 19708  24BE                     __ptext131:	
 19709 ;; *************** function _CC2500_ClearRXFIFO *****************
 19710 ;; Defined at:
 19711 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;		None
 19716 ;; Return value:  Size  Location     Type
 19717 ;;		None               void
 19718 ;; Registers used:
 19719 ;;		wreg, status,2, status,0, pclath, cstack
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;Total ram usage:        0 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    6
 19732 ;; This function calls:
 19733 ;;		_CC2500_WriteCommand
 19734 ;; This function is called by:
 19735 ;;		_CC2500_PowerOnInitial
 19736 ;; This function uses a non-reentrant model
 19737 ;;
 19738                           
 19739                           
 19740                           ;psect for function _CC2500_ClearRXFIFO
 19741  24BE                     _CC2500_ClearRXFIFO:	
 19742                           
 19743                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19744                           
 19745                           ;incstack = 0
 19746                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19747  24BE  303A               	movlw	58
 19748  24BF  31A6  269D         	fcall	_CC2500_WriteCommand
 19749  24C1  0008               	return
 19750  24C2                     __end_of_CC2500_ClearRXFIFO:	
 19751                           
 19752                           	psect	text132
 19753  269D                     __ptext132:	
 19754 ;; *************** function _CC2500_WriteCommand *****************
 19755 ;; Defined at:
 19756 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19757 ;; Parameters:    Size  Location     Type
 19758 ;;  command         1    wreg     unsigned char 
 19759 ;; Auto vars:     Size  Location     Type
 19760 ;;  command         1    3[BANK0 ] unsigned char 
 19761 ;; Return value:  Size  Location     Type
 19762 ;;		None               void
 19763 ;; Registers used:
 19764 ;;		wreg, status,2, status,0, pclath, cstack
 19765 ;; Tracked objects:
 19766 ;;		On entry : 0/0
 19767 ;;		On exit  : 0/0
 19768 ;;		Unchanged: 0/0
 19769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;Total ram usage:        2 bytes
 19775 ;; Hardware stack levels used:    1
 19776 ;; Hardware stack levels required when called:    5
 19777 ;; This function calls:
 19778 ;;		_CC2500_WriteByte
 19779 ;; This function is called by:
 19780 ;;		_CC2500_TxData
 19781 ;;		_CC2500_RxData
 19782 ;;		_CC2500_ClearTXFIFO
 19783 ;;		_CC2500_ClearRXFIFO
 19784 ;;		_CC2500_FrequencyCabr
 19785 ;;		_CC2500_SIDLEMode
 19786 ;;		_setRF_Main
 19787 ;;		_RF_RxDisable
 19788 ;; This function uses a non-reentrant model
 19789 ;;
 19790                           
 19791                           
 19792                           ;psect for function _CC2500_WriteCommand
 19793  269D                     _CC2500_WriteCommand:	
 19794                           
 19795                           ;incstack = 0
 19796                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19797                           ;CC2500_WriteCommand@command stored from wreg
 19798  269D  0020               	movlb	0	; select bank0
 19799  269E  00A3               	movwf	CC2500_WriteCommand@command
 19800                           
 19801                           ;CC2500_B1.c: 255: RC4=0;
 19802  269F  120E               	bcf	14,4	;volatile
 19803                           
 19804                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19805  26A0  0823               	movf	CC2500_WriteCommand@command,w
 19806  26A1  00A2               	movwf	??_CC2500_WriteCommand
 19807  26A2  0822               	movf	??_CC2500_WriteCommand,w
 19808  26A3  0021               	movlb	1	; select bank1
 19809  26A4  00BF               	movwf	_SPI0Buffer^(0+128)
 19810  26A5                     l377:	
 19811                           ;CC2500_B1.c: 258: while(RC2==1);
 19812                           
 19813  26A5  0020               	movlb	0	; select bank0
 19814  26A6  190E               	btfsc	14,2	;volatile
 19815  26A7  2EA5               	goto	l377
 19816                           
 19817                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19818  26A8  31A7  279C         	fcall	_CC2500_WriteByte
 19819                           
 19820                           ;CC2500_B1.c: 261: RC4=1;
 19821  26AA  0020               	movlb	0	; select bank0
 19822  26AB  160E               	bsf	14,4	;volatile
 19823  26AC  0008               	return
 19824  26AD                     __end_of_CC2500_WriteCommand:	
 19825                           
 19826                           	psect	text133
 19827  279C                     __ptext133:	
 19828 ;; *************** function _CC2500_WriteByte *****************
 19829 ;; Defined at:
 19830 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19831 ;; Parameters:    Size  Location     Type
 19832 ;;		None
 19833 ;; Auto vars:     Size  Location     Type
 19834 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19835 ;; Return value:  Size  Location     Type
 19836 ;;		None               void
 19837 ;; Registers used:
 19838 ;;		wreg, status,2, status,0
 19839 ;; Tracked objects:
 19840 ;;		On entry : 0/0
 19841 ;;		On exit  : 0/0
 19842 ;;		Unchanged: 0/0
 19843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19848 ;;Total ram usage:        2 bytes
 19849 ;; Hardware stack levels used:    1
 19850 ;; Hardware stack levels required when called:    4
 19851 ;; This function calls:
 19852 ;;		Nothing
 19853 ;; This function is called by:
 19854 ;;		_CC2500_TxData
 19855 ;;		_CC2500_RxData
 19856 ;;		_CC2500_PowerRST
 19857 ;;		_CC2500_WriteREG
 19858 ;;		_CC2500_WriteCommand
 19859 ;;		_CC2500_ReadStatus
 19860 ;;		_CC2500_ReadREG
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           
 19865                           ;psect for function _CC2500_WriteByte
 19866  279C                     _CC2500_WriteByte:	
 19867                           
 19868                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19869                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19870                           
 19871                           ;incstack = 0
 19872                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19873  279C  0020               	movlb	0	; select bank0
 19874  279D  01A1               	clrf	CC2500_WriteByte@loop_a
 19875  279E                     L14:	
 19876  279E  3008               	movlw	8
 19877  279F  0221               	subwf	CC2500_WriteByte@loop_a,w
 19878  27A0  1803               	btfsc	3,0
 19879  27A1  0008               	return
 19880                           
 19881                           ;CC2500_B1.c: 197: {
 19882                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19883  27A2  0021               	movlb	1	; select bank1
 19884  27A3  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19885  27A4  2FA8               	goto	l353
 19886                           
 19887                           ;CC2500_B1.c: 199: RC0=1;
 19888  27A5  0020               	movlb	0	; select bank0
 19889  27A6  140E               	bsf	14,0	;volatile
 19890  27A7  2FAA               	goto	l354
 19891  27A8                     l353:	
 19892                           
 19893                           ;CC2500_B1.c: 200: else
 19894                           ;CC2500_B1.c: 201: RC0=0;
 19895  27A8  0020               	movlb	0	; select bank0
 19896  27A9  100E               	bcf	14,0	;volatile
 19897  27AA                     l354:	
 19898                           
 19899                           ;CC2500_B1.c: 202: RC1=1;
 19900  27AA  148E               	bsf	14,1	;volatile
 19901                           
 19902                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19903  27AB  1003               	clrc
 19904  27AC  0021               	movlb	1	; select bank1
 19905  27AD  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19906                           
 19907                           ;CC2500_B1.c: 204: RC1=0;
 19908  27AE  0020               	movlb	0	; select bank0
 19909  27AF  108E               	bcf	14,1	;volatile
 19910  27B0  3001               	movlw	1
 19911  27B1  00A0               	movwf	??_CC2500_WriteByte
 19912  27B2  0820               	movf	??_CC2500_WriteByte,w
 19913  27B3  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19914  27B4  2F9E               	goto	L14
 19915  27B5                     __end_of_CC2500_WriteByte:	
 19916                           
 19917                           	psect	text134
 19918  09E4                     __ptext134:	
 19919 ;; *************** function _Buzzer_Main *****************
 19920 ;; Defined at:
 19921 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 19922 ;; Parameters:    Size  Location     Type
 19923 ;;		None
 19924 ;; Auto vars:     Size  Location     Type
 19925 ;;		None
 19926 ;; Return value:  Size  Location     Type
 19927 ;;		None               void
 19928 ;; Registers used:
 19929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19930 ;; Tracked objects:
 19931 ;;		On entry : 0/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19937 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19938 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19939 ;;Total ram usage:        4 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; Hardware stack levels required when called:    4
 19942 ;; This function calls:
 19943 ;;		Nothing
 19944 ;; This function is called by:
 19945 ;;		_main
 19946 ;; This function uses a non-reentrant model
 19947 ;;
 19948                           
 19949                           
 19950                           ;psect for function _Buzzer_Main
 19951  09E4                     _Buzzer_Main:	
 19952                           
 19953                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19954                           
 19955                           ;incstack = 0
 19956                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19957  09E4  0878               	movf	_Buz,w
 19958  09E5  0086               	movwf	6
 19959  09E6  3001               	movlw	1	; select bank2/3
 19960  09E7  0087               	movwf	7
 19961  09E8  1281               	bcf	1,5
 19962  09E9  0020               	movlb	0	; select bank0
 19963  09EA  198D               	btfsc	13,3	;volatile
 19964  09EB  1681               	bsf	1,5
 19965                           
 19966                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19967  09EC  0878               	movf	_Buz,w
 19968  09ED  0086               	movwf	6
 19969  09EE  3001               	movlw	1	; select bank2/3
 19970  09EF  0087               	movwf	7
 19971  09F0  1C81               	btfss	1,1
 19972  09F1  0008               	return
 19973                           
 19974                           ;Buzzer_B1.c: 58: {
 19975                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19976  09F2  0878               	movf	_Buz,w
 19977  09F3  3E06               	addlw	6
 19978  09F4  0086               	movwf	6
 19979  09F5  3001               	movlw	1	; select bank2/3
 19980  09F6  0087               	movwf	7
 19981  09F7  3F40               	moviw [0]fsr1
 19982  09F8  0020               	movlb	0	; select bank0
 19983  09F9  00A0               	movwf	??_Buzzer_Main
 19984  09FA  3F41               	moviw [1]fsr1
 19985  09FB  00A1               	movwf	??_Buzzer_Main+1
 19986  09FC  0A78               	incf	_Buz,w
 19987  09FD  0086               	movwf	6
 19988  09FE  3001               	movlw	1	; select bank2/3
 19989  09FF  0087               	movwf	7
 19990  0A00  3F40               	moviw [0]fsr1
 19991  0A01  00A2               	movwf	??_Buzzer_Main+2
 19992  0A02  3F41               	moviw [1]fsr1
 19993  0A03  00A3               	movwf	??_Buzzer_Main+3
 19994  0A04  0821               	movf	??_Buzzer_Main+1,w
 19995  0A05  0223               	subwf	??_Buzzer_Main+3,w
 19996  0A06  1D03               	skipz
 19997  0A07  2A0A               	goto	u6595
 19998  0A08  0820               	movf	??_Buzzer_Main,w
 19999  0A09  0222               	subwf	??_Buzzer_Main+2,w
 20000  0A0A                     u6595:	
 20001  0A0A  1C03               	skipc
 20002  0A0B  0008               	return
 20003                           
 20004                           ;Buzzer_B1.c: 61: {
 20005                           ;Buzzer_B1.c: 62: Buz->Time=0;
 20006  0A0C  0A78               	incf	_Buz,w
 20007  0A0D  0086               	movwf	6
 20008  0A0E  3001               	movlw	1	; select bank2/3
 20009  0A0F  0087               	movwf	7
 20010  0A10  3000               	movlw	0
 20011  0A11  3FC0               	movwi [0]fsr1
 20012  0A12  3FC1               	movwi [1]fsr1
 20013                           
 20014                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 20015  0A13  0878               	movf	_Buz,w
 20016  0A14  0086               	movwf	6
 20017  0A15  3001               	movlw	1	; select bank2/3
 20018  0A16  0087               	movwf	7
 20019  0A17  1A81               	btfsc	1,5
 20020  0A18  2A7E               	goto	l7597
 20021                           
 20022                           ;Buzzer_B1.c: 64: {
 20023                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 20024  0A19  0878               	movf	_Buz,w
 20025  0A1A  3E03               	addlw	3
 20026  0A1B  0086               	movwf	6
 20027  0A1C  3001               	movlw	1	; select bank2/3
 20028  0A1D  0087               	movwf	7
 20029  0A1E  0881               	movf	1,f
 20030  0A1F  1D03               	skipz
 20031  0A20  2A77               	goto	l7593
 20032                           
 20033                           ;Buzzer_B1.c: 66: {
 20034                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 20035  0A21  0878               	movf	_Buz,w
 20036  0A22  0086               	movwf	6
 20037  0A23  3001               	movlw	1	; select bank2/3
 20038  0A24  0087               	movwf	7
 20039  0A25  1D81               	btfss	1,3
 20040  0A26  2A49               	goto	l7585
 20041                           
 20042                           ;Buzzer_B1.c: 68: {
 20043                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 20044  0A27  0878               	movf	_Buz,w
 20045  0A28  0086               	movwf	6
 20046  0A29  3001               	movlw	1	; select bank2/3
 20047  0A2A  0087               	movwf	7
 20048  0A2B  1181               	bcf	1,3
 20049                           
 20050                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 20051  0A2C  0878               	movf	_Buz,w
 20052  0A2D  3E04               	addlw	4
 20053  0A2E  0086               	movwf	6
 20054  0A2F  3001               	movlw	1	; select bank2/3
 20055  0A30  0087               	movwf	7
 20056  0A31  0801               	movf	1,w
 20057  0A32  00A0               	movwf	??_Buzzer_Main
 20058  0A33  0878               	movf	_Buz,w
 20059  0A34  3E03               	addlw	3
 20060  0A35  0086               	movwf	6
 20061  0A36  3001               	movlw	1	; select bank2/3
 20062  0A37  0087               	movwf	7
 20063  0A38  0820               	movf	??_Buzzer_Main,w
 20064  0A39  0081               	movwf	1
 20065                           
 20066                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 20067  0A3A  0878               	movf	_Buz,w
 20068  0A3B  3E08               	addlw	8
 20069  0A3C  0086               	movwf	6
 20070  0A3D  3001               	movlw	1	; select bank2/3
 20071  0A3E  0087               	movwf	7
 20072  0A3F  0878               	movf	_Buz,w
 20073  0A40  3E06               	addlw	6
 20074  0A41  0084               	movwf	4
 20075  0A42  3001               	movlw	1	; select bank2/3
 20076  0A43  0085               	movwf	5
 20077  0A44  3F40               	moviw [0]fsr1
 20078  0A45  3F80               	movwi [0]fsr0
 20079  0A46  3F41               	moviw [1]fsr1
 20080  0A47  3F81               	movwi [1]fsr0
 20081                           
 20082                           ;Buzzer_B1.c: 72: }
 20083  0A48  0008               	return
 20084  0A49                     l7585:	
 20085                           
 20086                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20087  0A49  0878               	movf	_Buz,w
 20088  0A4A  0086               	movwf	6
 20089  0A4B  3001               	movlw	1	; select bank2/3
 20090  0A4C  0087               	movwf	7
 20091  0A4D  1E01               	btfss	1,4
 20092  0A4E  2A71               	goto	l7591
 20093                           
 20094                           ;Buzzer_B1.c: 74: {
 20095                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20096  0A4F  0878               	movf	_Buz,w
 20097  0A50  0086               	movwf	6
 20098  0A51  3001               	movlw	1	; select bank2/3
 20099  0A52  0087               	movwf	7
 20100  0A53  1201               	bcf	1,4
 20101                           
 20102                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20103  0A54  0878               	movf	_Buz,w
 20104  0A55  3E05               	addlw	5
 20105  0A56  0086               	movwf	6
 20106  0A57  3001               	movlw	1	; select bank2/3
 20107  0A58  0087               	movwf	7
 20108  0A59  0801               	movf	1,w
 20109  0A5A  00A0               	movwf	??_Buzzer_Main
 20110  0A5B  0878               	movf	_Buz,w
 20111  0A5C  3E03               	addlw	3
 20112  0A5D  0086               	movwf	6
 20113  0A5E  3001               	movlw	1	; select bank2/3
 20114  0A5F  0087               	movwf	7
 20115  0A60  0820               	movf	??_Buzzer_Main,w
 20116  0A61  0081               	movwf	1
 20117                           
 20118                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20119  0A62  0878               	movf	_Buz,w
 20120  0A63  3E0A               	addlw	10
 20121  0A64  0086               	movwf	6
 20122  0A65  3001               	movlw	1	; select bank2/3
 20123  0A66  0087               	movwf	7
 20124  0A67  0878               	movf	_Buz,w
 20125  0A68  3E06               	addlw	6
 20126  0A69  0084               	movwf	4
 20127  0A6A  3001               	movlw	1	; select bank2/3
 20128  0A6B  0085               	movwf	5
 20129  0A6C  3F40               	moviw [0]fsr1
 20130  0A6D  3F80               	movwi [0]fsr0
 20131  0A6E  3F41               	moviw [1]fsr1
 20132  0A6F  3F81               	movwi [1]fsr0
 20133                           
 20134                           ;Buzzer_B1.c: 78: }
 20135  0A70  0008               	return
 20136  0A71                     l7591:	
 20137                           
 20138                           ;Buzzer_B1.c: 79: else
 20139                           ;Buzzer_B1.c: 80: {
 20140                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20141  0A71  0878               	movf	_Buz,w
 20142  0A72  0086               	movwf	6
 20143  0A73  3001               	movlw	1	; select bank2/3
 20144  0A74  0087               	movwf	7
 20145  0A75  1081               	bcf	1,1
 20146                           
 20147                           ;Buzzer_B1.c: 82: }
 20148                           ;Buzzer_B1.c: 83: }
 20149  0A76  0008               	return
 20150  0A77                     l7593:	
 20151                           
 20152                           ;Buzzer_B1.c: 84: else
 20153                           ;Buzzer_B1.c: 85: {
 20154                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20155  0A77  0878               	movf	_Buz,w
 20156  0A78  0086               	movwf	6
 20157  0A79  3001               	movlw	1	; select bank2/3
 20158  0A7A  0087               	movwf	7
 20159  0A7B  1681               	bsf	1,5
 20160                           
 20161                           ;Buzzer_B1.c: 88: RB3=1;
 20162  0A7C  158D               	bsf	13,3	;volatile
 20163                           
 20164                           ;Buzzer_B1.c: 89: }
 20165                           ;Buzzer_B1.c: 90: }
 20166  0A7D  0008               	return
 20167  0A7E                     l7597:	
 20168                           
 20169                           ;Buzzer_B1.c: 91: else
 20170                           ;Buzzer_B1.c: 92: {
 20171                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20172  0A7E  0878               	movf	_Buz,w
 20173  0A7F  0086               	movwf	6
 20174  0A80  3001               	movlw	1	; select bank2/3
 20175  0A81  0087               	movwf	7
 20176  0A82  1281               	bcf	1,5
 20177                           
 20178                           ;Buzzer_B1.c: 95: RB3=0;
 20179  0A83  118D               	bcf	13,3	;volatile
 20180                           
 20181                           ;Buzzer_B1.c: 97: Buz->Count--;
 20182  0A84  0878               	movf	_Buz,w
 20183  0A85  3E03               	addlw	3
 20184  0A86  0086               	movwf	6
 20185  0A87  3001               	movlw	1	; select bank2/3
 20186  0A88  0087               	movwf	7
 20187  0A89  3001               	movlw	1
 20188  0A8A  0281               	subwf	1,f
 20189  0A8B  0008               	return
 20190  0A8C                     __end_of_Buzzer_Main:	
 20191                           
 20192                           	psect	text135
 20193  2544                     __ptext135:	
 20194 ;; *************** function _Buzzer_Initialization *****************
 20195 ;; Defined at:
 20196 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20197 ;; Parameters:    Size  Location     Type
 20198 ;;		None
 20199 ;; Auto vars:     Size  Location     Type
 20200 ;;		None
 20201 ;; Return value:  Size  Location     Type
 20202 ;;		None               void
 20203 ;; Registers used:
 20204 ;;		wreg, fsr1l, fsr1h
 20205 ;; Tracked objects:
 20206 ;;		On entry : 0/0
 20207 ;;		On exit  : 0/0
 20208 ;;		Unchanged: 0/0
 20209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20214 ;;Total ram usage:        1 bytes
 20215 ;; Hardware stack levels used:    1
 20216 ;; Hardware stack levels required when called:    4
 20217 ;; This function calls:
 20218 ;;		Nothing
 20219 ;; This function is called by:
 20220 ;;		_main
 20221 ;; This function uses a non-reentrant model
 20222 ;;
 20223                           
 20224                           
 20225                           ;psect for function _Buzzer_Initialization
 20226  2544                     _Buzzer_Initialization:	
 20227                           
 20228                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20229                           
 20230                           ;incstack = 0
 20231                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20232  2544  304C               	movlw	_Buz1& (0+255)
 20233  2545  0020               	movlb	0	; select bank0
 20234  2546  00A0               	movwf	??_Buzzer_Initialization
 20235  2547  0820               	movf	??_Buzzer_Initialization,w
 20236  2548  00F8               	movwf	_Buz
 20237                           
 20238                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20239  2549  0878               	movf	_Buz,w
 20240  254A  0086               	movwf	6
 20241  254B  3001               	movlw	1	; select bank2/3
 20242  254C  0087               	movwf	7
 20243  254D  1401               	bsf	1,0
 20244  254E  0008               	return
 20245  254F                     __end_of_Buzzer_Initialization:	
 20246                           
 20247                           	psect	intentry
 20248  0004                     __pintentry:	
 20249 ;; *************** function _ISR *****************
 20250 ;; Defined at:
 20251 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20252 ;; Parameters:    Size  Location     Type
 20253 ;;		None
 20254 ;; Auto vars:     Size  Location     Type
 20255 ;;		None
 20256 ;; Return value:  Size  Location     Type
 20257 ;;		None               void
 20258 ;; Registers used:
 20259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20260 ;; Tracked objects:
 20261 ;;		On entry : 0/0
 20262 ;;		On exit  : 0/0
 20263 ;;		Unchanged: 0/0
 20264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20269 ;;Total ram usage:        1 bytes
 20270 ;; Hardware stack levels used:    1
 20271 ;; Hardware stack levels required when called:    3
 20272 ;; This function calls:
 20273 ;;		_INT_ISR
 20274 ;;		_IOC_ISR
 20275 ;;		_TMR0_ISR
 20276 ;; This function is called by:
 20277 ;;		Interrupt level 1
 20278 ;; This function uses a non-reentrant model
 20279 ;;
 20280                           
 20281  0004                     _ISR:	
 20282                           
 20283                           ;incstack = 0
 20284                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20285  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20286  0005  3180               	pagesel	$
 20287  0006  0020               	movlb	0	; select bank0
 20288  0007  087F               	movf	127,w
 20289  0008  00F7               	movwf	??_ISR
 20290                           
 20291                           ;MCU_B1.c: 99: IOC_ISR();
 20292  0009  3199  21AE  3180   	fcall	_IOC_ISR
 20293                           
 20294                           ;MCU_B1.c: 101: TMR0_ISR();
 20295  000C  3184  242F  3180   	fcall	_TMR0_ISR
 20296                           
 20297                           ;MCU_B1.c: 103: ;;
 20298                           ;MCU_B1.c: 107: INT_ISR();
 20299  000F  31A5  25B3         	fcall	_INT_ISR
 20300  0011  0877               	movf	??_ISR,w
 20301  0012  0020               	movlb	0	; select bank0
 20302  0013  00FF               	movwf	127
 20303  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20304  0015  0009               	retfie
 20305  0016                     __end_of_ISR:	
 20306                           
 20307                           	psect	text137
 20308  042F                     __ptext137:	
 20309 ;; *************** function _TMR0_ISR *****************
 20310 ;; Defined at:
 20311 ;;		line 123 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20312 ;; Parameters:    Size  Location     Type
 20313 ;;		None
 20314 ;; Auto vars:     Size  Location     Type
 20315 ;;		None
 20316 ;; Return value:  Size  Location     Type
 20317 ;;		None               void
 20318 ;; Registers used:
 20319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20320 ;; Tracked objects:
 20321 ;;		On entry : 0/0
 20322 ;;		On exit  : 0/0
 20323 ;;		Unchanged: 0/0
 20324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20327 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20328 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20329 ;;Total ram usage:        4 bytes
 20330 ;; Hardware stack levels used:    1
 20331 ;; Hardware stack levels required when called:    1
 20332 ;; This function calls:
 20333 ;;		i1_setLoad_StatusOff
 20334 ;; This function is called by:
 20335 ;;		_ISR
 20336 ;; This function uses a non-reentrant model
 20337 ;;
 20338                           
 20339                           
 20340                           ;psect for function _TMR0_ISR
 20341  042F                     _TMR0_ISR:	
 20342                           
 20343                           ;MCU_B1.c: 125: if(TMR0IE && TMR0IF)
 20344                           
 20345                           ;incstack = 0
 20346                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20347  042F  1E8B               	btfss	11,5	;volatile
 20348  0430  0008               	return
 20349  0431  1D0B               	btfss	11,2	;volatile
 20350  0432  0008               	return
 20351                           
 20352                           ;MCU_B1.c: 126: {
 20353                           ;MCU_B1.c: 127: TMR0=(256-90);
 20354  0433  30A6               	movlw	166
 20355  0434  0020               	movlb	0	; select bank0
 20356  0435  0095               	movwf	21	;volatile
 20357                           
 20358                           ;MCU_B1.c: 128: TMR0IF=0;
 20359  0436  110B               	bcf	11,2	;volatile
 20360                           
 20361                           ;MCU_B1.c: 133: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20362  0437  0879               	movf	_DimmerLights11,w
 20363  0438  0086               	movwf	6
 20364  0439  3001               	movlw	1	; select bank2/3
 20365  043A  0087               	movwf	7
 20366  043B  1C01               	btfss	1,0
 20367  043C  2C88               	goto	i1l8027
 20368  043D  3001               	movlw	1
 20369  043E  00F3               	movwf	??_TMR0_ISR
 20370  043F  0879               	movf	_DimmerLights11,w
 20371  0440  3E03               	addlw	3
 20372  0441  0086               	movwf	6
 20373  0442  3001               	movlw	1	; select bank2/3
 20374  0443  0087               	movwf	7
 20375  0444  0873               	movf	??_TMR0_ISR,w
 20376  0445  0781               	addwf	1,f
 20377  0446  0021               	movlb	1	; select bank1
 20378  0447  0839               	movf	_Dimmer^(0+128),w
 20379  0448  3E02               	addlw	2
 20380  0449  0086               	movwf	6
 20381  044A  0187               	clrf	7
 20382  044B  0801               	movf	1,w
 20383  044C  00F3               	movwf	??_TMR0_ISR
 20384  044D  01F4               	clrf	??_TMR0_ISR+1
 20385  044E  09F3               	comf	??_TMR0_ISR,f
 20386  044F  09F4               	comf	??_TMR0_ISR+1,f
 20387  0450  0AF3               	incf	??_TMR0_ISR,f
 20388  0451  1903               	skipnz
 20389  0452  0AF4               	incf	??_TMR0_ISR+1,f
 20390  0453  0879               	movf	_DimmerLights11,w
 20391  0454  3E04               	addlw	4
 20392  0455  0086               	movwf	6
 20393  0456  3001               	movlw	1	; select bank2/3
 20394  0457  0087               	movwf	7
 20395  0458  0801               	movf	1,w
 20396  0459  0773               	addwf	??_TMR0_ISR,w
 20397  045A  00F5               	movwf	??_TMR0_ISR+2
 20398  045B  0874               	movf	??_TMR0_ISR+1,w
 20399  045C  1803               	skipnc
 20400  045D  0A74               	incf	??_TMR0_ISR+1,w
 20401  045E  00F6               	movwf	??_TMR0_ISR+3
 20402  045F  0879               	movf	_DimmerLights11,w
 20403  0460  3E03               	addlw	3
 20404  0461  0086               	movwf	6
 20405  0462  3001               	movlw	1	; select bank2/3
 20406  0463  0087               	movwf	7
 20407  0464  0876               	movf	??_TMR0_ISR+3,w
 20408  0465  3A80               	xorlw	128
 20409  0466  3C80               	sublw	128
 20410  0467  1D03               	skipz
 20411  0468  2C6B               	goto	u720_25
 20412  0469  0875               	movf	??_TMR0_ISR+2,w
 20413  046A  0201               	subwf	1,w
 20414  046B                     u720_25:	
 20415  046B  1C03               	skipc
 20416  046C  2DC4               	goto	i1l8097
 20417  046D  0879               	movf	_DimmerLights11,w
 20418  046E  3E03               	addlw	3
 20419  046F  0086               	movwf	6
 20420  0470  3001               	movlw	1	; select bank2/3
 20421  0471  0087               	movwf	7
 20422  0472  0181               	clrf	1
 20423  0473  0879               	movf	_DimmerLights11,w
 20424  0474  0086               	movwf	6
 20425  0475  3001               	movlw	1	; select bank2/3
 20426  0476  0087               	movwf	7
 20427  0477  1001               	bcf	1,0
 20428  0478  0879               	movf	_DimmerLights11,w
 20429  0479  3E07               	addlw	7
 20430  047A  0086               	movwf	6
 20431  047B  3001               	movlw	1	; select bank2/3
 20432  047C  0087               	movwf	7
 20433  047D  1401               	bsf	1,0
 20434  047E  0879               	movf	_DimmerLights11,w
 20435  047F  0086               	movwf	6
 20436  0480  3001               	movlw	1	; select bank2/3
 20437  0481  0087               	movwf	7
 20438  0482  1F01               	btfss	1,6
 20439  0483  2DC4               	goto	i1l8097
 20440  0484  0020               	movlb	0	; select bank0
 20441  0485  178C               	bsf	12,7	;volatile
 20442  0486  160D               	bsf	13,4	;volatile
 20443  0487  2DC4               	goto	i1l8097
 20444  0488                     i1l8027:	
 20445  0488  0879               	movf	_DimmerLights11,w
 20446  0489  3E07               	addlw	7
 20447  048A  0086               	movwf	6
 20448  048B  3001               	movlw	1	; select bank2/3
 20449  048C  0087               	movwf	7
 20450  048D  1C01               	btfss	1,0
 20451  048E  2D8E               	goto	i1l8087
 20452  048F  0879               	movf	_DimmerLights11,w
 20453  0490  3E07               	addlw	7
 20454  0491  0086               	movwf	6
 20455  0492  3001               	movlw	1	; select bank2/3
 20456  0493  0087               	movwf	7
 20457  0494  1001               	bcf	1,0
 20458  0495  0879               	movf	_DimmerLights11,w
 20459  0496  0086               	movwf	6
 20460  0497  3001               	movlw	1	; select bank2/3
 20461  0498  0087               	movwf	7
 20462  0499  1C81               	btfss	1,1
 20463  049A  2D8E               	goto	i1l8087
 20464  049B  3001               	movlw	1
 20465  049C  00F3               	movwf	??_TMR0_ISR
 20466  049D  0A79               	incf	_DimmerLights11,w
 20467  049E  0086               	movwf	6
 20468  049F  3001               	movlw	1	; select bank2/3
 20469  04A0  0087               	movwf	7
 20470  04A1  0873               	movf	??_TMR0_ISR,w
 20471  04A2  0781               	addwf	1,f
 20472  04A3  0A79               	incf	_DimmerLights11,w
 20473  04A4  0086               	movwf	6
 20474  04A5  3001               	movlw	1	; select bank2/3
 20475  04A6  0087               	movwf	7
 20476  04A7  0879               	movf	_DimmerLights11,w
 20477  04A8  3E02               	addlw	2
 20478  04A9  0084               	movwf	4
 20479  04AA  3001               	movlw	1	; select bank2/3
 20480  04AB  0085               	movwf	5
 20481  04AC  0800               	movf	0,w
 20482  04AD  0201               	subwf	1,w
 20483  04AE  1C03               	skipc
 20484  04AF  2D8E               	goto	i1l8087
 20485  04B0  0A79               	incf	_DimmerLights11,w
 20486  04B1  0086               	movwf	6
 20487  04B2  3001               	movlw	1	; select bank2/3
 20488  04B3  0087               	movwf	7
 20489  04B4  0181               	clrf	1
 20490  04B5  0879               	movf	_DimmerLights11,w
 20491  04B6  0086               	movwf	6
 20492  04B7  3001               	movlw	1	; select bank2/3
 20493  04B8  0087               	movwf	7
 20494  04B9  1D81               	btfss	1,3
 20495  04BA  2CF1               	goto	i1l8053
 20496  04BB  0879               	movf	_DimmerLights11,w
 20497  04BC  0086               	movwf	6
 20498  04BD  3001               	movlw	1	; select bank2/3
 20499  04BE  0087               	movwf	7
 20500  04BF  1A01               	btfsc	1,4
 20501  04C0  2CD8               	goto	i1l8047
 20502  04C1  0879               	movf	_DimmerLights11,w
 20503  04C2  3E04               	addlw	4
 20504  04C3  0086               	movwf	6
 20505  04C4  3001               	movlw	1	; select bank2/3
 20506  04C5  0087               	movwf	7
 20507  04C6  3044               	movlw	68
 20508  04C7  0201               	subwf	1,w
 20509  04C8  1C03               	skipc
 20510  04C9  2CD2               	goto	i1l8045
 20511  04CA  0879               	movf	_DimmerLights11,w
 20512  04CB  3E04               	addlw	4
 20513  04CC  0086               	movwf	6
 20514  04CD  3001               	movlw	1	; select bank2/3
 20515  04CE  0087               	movwf	7
 20516  04CF  3001               	movlw	1
 20517  04D0  0281               	subwf	1,f
 20518  04D1  2D8E               	goto	i1l8087
 20519  04D2                     i1l8045:	
 20520  04D2  0879               	movf	_DimmerLights11,w
 20521  04D3  0086               	movwf	6
 20522  04D4  3001               	movlw	1	; select bank2/3
 20523  04D5  0087               	movwf	7
 20524  04D6  1601               	bsf	1,4
 20525  04D7  2D8E               	goto	i1l8087
 20526  04D8                     i1l8047:	
 20527  04D8  0879               	movf	_DimmerLights11,w
 20528  04D9  3E04               	addlw	4
 20529  04DA  0086               	movwf	6
 20530  04DB  3001               	movlw	1	; select bank2/3
 20531  04DC  0087               	movwf	7
 20532  04DD  3078               	movlw	120
 20533  04DE  0201               	subwf	1,w
 20534  04DF  1803               	skipnc
 20535  04E0  2CEB               	goto	i1l8051
 20536  04E1  3001               	movlw	1
 20537  04E2  00F3               	movwf	??_TMR0_ISR
 20538  04E3  0879               	movf	_DimmerLights11,w
 20539  04E4  3E04               	addlw	4
 20540  04E5  0086               	movwf	6
 20541  04E6  3001               	movlw	1	; select bank2/3
 20542  04E7  0087               	movwf	7
 20543  04E8  0873               	movf	??_TMR0_ISR,w
 20544  04E9  0781               	addwf	1,f
 20545  04EA  2D8E               	goto	i1l8087
 20546  04EB                     i1l8051:	
 20547  04EB  0879               	movf	_DimmerLights11,w
 20548  04EC  0086               	movwf	6
 20549  04ED  3001               	movlw	1	; select bank2/3
 20550  04EE  0087               	movwf	7
 20551  04EF  1201               	bcf	1,4
 20552  04F0  2D8E               	goto	i1l8087
 20553  04F1                     i1l8053:	
 20554  04F1  0879               	movf	_DimmerLights11,w
 20555  04F2  0086               	movwf	6
 20556  04F3  3001               	movlw	1	; select bank2/3
 20557  04F4  0087               	movwf	7
 20558  04F5  1D01               	btfss	1,2
 20559  04F6  2D38               	goto	i1l8067
 20560  04F7  0879               	movf	_DimmerLights11,w
 20561  04F8  3E05               	addlw	5
 20562  04F9  0086               	movwf	6
 20563  04FA  3001               	movlw	1	; select bank2/3
 20564  04FB  0087               	movwf	7
 20565  04FC  0879               	movf	_DimmerLights11,w
 20566  04FD  3E04               	addlw	4
 20567  04FE  0084               	movwf	4
 20568  04FF  3001               	movlw	1	; select bank2/3
 20569  0500  0085               	movwf	5
 20570  0501  0800               	movf	0,w
 20571  0502  0201               	subwf	1,w
 20572  0503  1803               	skipnc
 20573  0504  2D0D               	goto	i1l8059
 20574  0505  0879               	movf	_DimmerLights11,w
 20575  0506  3E04               	addlw	4
 20576  0507  0086               	movwf	6
 20577  0508  3001               	movlw	1	; select bank2/3
 20578  0509  0087               	movwf	7
 20579  050A  3001               	movlw	1
 20580  050B  0281               	subwf	1,f
 20581  050C  2D24               	goto	i1l8063
 20582  050D                     i1l8059:	
 20583  050D  0879               	movf	_DimmerLights11,w
 20584  050E  3E04               	addlw	4
 20585  050F  0086               	movwf	6
 20586  0510  3001               	movlw	1	; select bank2/3
 20587  0511  0087               	movwf	7
 20588  0512  0879               	movf	_DimmerLights11,w
 20589  0513  3E05               	addlw	5
 20590  0514  0084               	movwf	4
 20591  0515  3001               	movlw	1	; select bank2/3
 20592  0516  0085               	movwf	5
 20593  0517  0800               	movf	0,w
 20594  0518  0201               	subwf	1,w
 20595  0519  1803               	skipnc
 20596  051A  2D24               	goto	i1l8063
 20597  051B  3001               	movlw	1
 20598  051C  00F3               	movwf	??_TMR0_ISR
 20599  051D  0879               	movf	_DimmerLights11,w
 20600  051E  3E04               	addlw	4
 20601  051F  0086               	movwf	6
 20602  0520  3001               	movlw	1	; select bank2/3
 20603  0521  0087               	movwf	7
 20604  0522  0873               	movf	??_TMR0_ISR,w
 20605  0523  0781               	addwf	1,f
 20606  0524                     i1l8063:	
 20607  0524  0879               	movf	_DimmerLights11,w
 20608  0525  3E05               	addlw	5
 20609  0526  0086               	movwf	6
 20610  0527  3001               	movlw	1	; select bank2/3
 20611  0528  0087               	movwf	7
 20612  0529  0879               	movf	_DimmerLights11,w
 20613  052A  3E04               	addlw	4
 20614  052B  0084               	movwf	4
 20615  052C  3001               	movlw	1	; select bank2/3
 20616  052D  0085               	movwf	5
 20617  052E  0800               	movf	0,w
 20618  052F  0601               	xorwf	1,w
 20619  0530  1D03               	skipz
 20620  0531  2D8E               	goto	i1l8087
 20621  0532  0879               	movf	_DimmerLights11,w
 20622  0533  0086               	movwf	6
 20623  0534  3001               	movlw	1	; select bank2/3
 20624  0535  0087               	movwf	7
 20625  0536  1101               	bcf	1,2
 20626  0537  2D53               	goto	i1l8073
 20627  0538                     i1l8067:	
 20628  0538  0879               	movf	_DimmerLights11,w
 20629  0539  0086               	movwf	6
 20630  053A  3001               	movlw	1	; select bank2/3
 20631  053B  0087               	movwf	7
 20632  053C  1E81               	btfss	1,5
 20633  053D  2D59               	goto	i1l8075
 20634  053E  0879               	movf	_DimmerLights11,w
 20635  053F  3E04               	addlw	4
 20636  0540  0086               	movwf	6
 20637  0541  3001               	movlw	1	; select bank2/3
 20638  0542  0087               	movwf	7
 20639  0543  3001               	movlw	1
 20640  0544  0281               	subwf	1,f
 20641  0545  0879               	movf	_DimmerLights11,w
 20642  0546  3E05               	addlw	5
 20643  0547  0086               	movwf	6
 20644  0548  3001               	movlw	1	; select bank2/3
 20645  0549  0087               	movwf	7
 20646  054A  0879               	movf	_DimmerLights11,w
 20647  054B  3E04               	addlw	4
 20648  054C  0084               	movwf	4
 20649  054D  3001               	movlw	1	; select bank2/3
 20650  054E  0085               	movwf	5
 20651  054F  0800               	movf	0,w
 20652  0550  0201               	subwf	1,w
 20653  0551  1C03               	skipc
 20654  0552  2D8E               	goto	i1l8087
 20655  0553                     i1l8073:	
 20656  0553  0879               	movf	_DimmerLights11,w
 20657  0554  0086               	movwf	6
 20658  0555  3001               	movlw	1	; select bank2/3
 20659  0556  0087               	movwf	7
 20660  0557  1081               	bcf	1,1
 20661  0558  2D8E               	goto	i1l8087
 20662  0559                     i1l8075:	
 20663  0559  3001               	movlw	1
 20664  055A  00F3               	movwf	??_TMR0_ISR
 20665  055B  0879               	movf	_DimmerLights11,w
 20666  055C  3E04               	addlw	4
 20667  055D  0086               	movwf	6
 20668  055E  3001               	movlw	1	; select bank2/3
 20669  055F  0087               	movwf	7
 20670  0560  0873               	movf	??_TMR0_ISR,w
 20671  0561  0781               	addwf	1,f
 20672  0562  0879               	movf	_DimmerLights11,w
 20673  0563  3E04               	addlw	4
 20674  0564  0086               	movwf	6
 20675  0565  3001               	movlw	1	; select bank2/3
 20676  0566  0087               	movwf	7
 20677  0567  0879               	movf	_DimmerLights11,w
 20678  0568  3E06               	addlw	6
 20679  0569  0084               	movwf	4
 20680  056A  3001               	movlw	1	; select bank2/3
 20681  056B  0085               	movwf	5
 20682  056C  0800               	movf	0,w
 20683  056D  0201               	subwf	1,w
 20684  056E  1C03               	skipc
 20685  056F  2D8E               	goto	i1l8087
 20686  0570  0879               	movf	_DimmerLights11,w
 20687  0571  0086               	movwf	6
 20688  0572  3001               	movlw	1	; select bank2/3
 20689  0573  0087               	movwf	7
 20690  0574  1081               	bcf	1,1
 20691  0575  0879               	movf	_DimmerLights11,w
 20692  0576  0086               	movwf	6
 20693  0577  3001               	movlw	1	; select bank2/3
 20694  0578  0087               	movwf	7
 20695  0579  1301               	bcf	1,6
 20696  057A  0879               	movf	_DimmerLights11,w
 20697  057B  3E0C               	addlw	12
 20698  057C  0086               	movwf	6
 20699  057D  3001               	movlw	1	; select bank2/3
 20700  057E  0087               	movwf	7
 20701  057F  1401               	bsf	1,0
 20702  0580  0021               	movlb	1	; select bank1
 20703  0581  0839               	movf	_Dimmer^(0+128),w
 20704  0582  0086               	movwf	6
 20705  0583  0187               	clrf	7
 20706  0584  1401               	bsf	1,0
 20707  0585  0020               	movlb	0	; select bank0
 20708  0586  118C               	bcf	12,3	;volatile
 20709  0587  138E               	bcf	14,7	;volatile
 20710  0588  01F1               	clrf	i1setLoad_StatusOff@command
 20711  0589  0AF1               	incf	i1setLoad_StatusOff@command,f
 20712  058A  3001               	movlw	1
 20713  058B  319B  232E  3184   	fcall	i1_setLoad_StatusOff
 20714  058E                     i1l8087:	
 20715  058E  0020               	movlb	0	; select bank0
 20716  058F  1F8C               	btfss	12,7	;volatile
 20717  0590  2DC4               	goto	i1l8097
 20718  0591  3001               	movlw	1
 20719  0592  00F3               	movwf	??_TMR0_ISR
 20720  0593  0879               	movf	_DimmerLights11,w
 20721  0594  3E08               	addlw	8
 20722  0595  0086               	movwf	6
 20723  0596  3001               	movlw	1	; select bank2/3
 20724  0597  0087               	movwf	7
 20725  0598  0873               	movf	??_TMR0_ISR,w
 20726  0599  0781               	addwf	1,f
 20727  059A  0879               	movf	_DimmerLights11,w
 20728  059B  3E04               	addlw	4
 20729  059C  0086               	movwf	6
 20730  059D  3001               	movlw	1	; select bank2/3
 20731  059E  0087               	movwf	7
 20732  059F  0801               	movf	1,w
 20733  05A0  00F3               	movwf	??_TMR0_ISR
 20734  05A1  01F4               	clrf	??_TMR0_ISR+1
 20735  05A2  09F3               	comf	??_TMR0_ISR,f
 20736  05A3  09F4               	comf	??_TMR0_ISR+1,f
 20737  05A4  0AF3               	incf	??_TMR0_ISR,f
 20738  05A5  1903               	skipnz
 20739  05A6  0AF4               	incf	??_TMR0_ISR+1,f
 20740  05A7  0873               	movf	??_TMR0_ISR,w
 20741  05A8  3E78               	addlw	120
 20742  05A9  00F5               	movwf	??_TMR0_ISR+2
 20743  05AA  3000               	movlw	0
 20744  05AB  3D74               	addwfc	??_TMR0_ISR+1,w
 20745  05AC  00F6               	movwf	??_TMR0_ISR+3
 20746  05AD  0879               	movf	_DimmerLights11,w
 20747  05AE  3E08               	addlw	8
 20748  05AF  0086               	movwf	6
 20749  05B0  3001               	movlw	1	; select bank2/3
 20750  05B1  0087               	movwf	7
 20751  05B2  0876               	movf	??_TMR0_ISR+3,w
 20752  05B3  3A80               	xorlw	128
 20753  05B4  3C80               	sublw	128
 20754  05B5  1D03               	skipz
 20755  05B6  2DB9               	goto	u737_25
 20756  05B7  0875               	movf	??_TMR0_ISR+2,w
 20757  05B8  0201               	subwf	1,w
 20758  05B9                     u737_25:	
 20759  05B9  1C03               	skipc
 20760  05BA  2DC4               	goto	i1l8097
 20761  05BB  0879               	movf	_DimmerLights11,w
 20762  05BC  3E08               	addlw	8
 20763  05BD  0086               	movwf	6
 20764  05BE  3001               	movlw	1	; select bank2/3
 20765  05BF  0087               	movwf	7
 20766  05C0  0181               	clrf	1
 20767  05C1  0020               	movlb	0	; select bank0
 20768  05C2  138C               	bcf	12,7	;volatile
 20769  05C3  120D               	bcf	13,4	;volatile
 20770  05C4                     i1l8097:	
 20771                           
 20772                           ;MCU_B1.c: 146: Timer0->Count++;
 20773  05C4  0021               	movlb	1	; select bank1
 20774  05C5  0A6E               	incf	_Timer0^(0+128),w
 20775  05C6  0086               	movwf	6
 20776  05C7  0187               	clrf	7
 20777  05C8  3001               	movlw	1
 20778  05C9  0781               	addwf	1,f
 20779  05CA  3141               	addfsr 1,1
 20780  05CB  1803               	skipnc
 20781  05CC  0A81               	incf	1,f
 20782                           
 20783                           ;MCU_B1.c: 147: if(Timer0->Count == 200)
 20784  05CD  0A6E               	incf	_Timer0^(0+128),w
 20785  05CE  0086               	movwf	6
 20786  05CF  0187               	clrf	7
 20787  05D0  3F40               	moviw [0]fsr1
 20788  05D1  3AC8               	xorlw	200
 20789  05D2  1D03               	skipz
 20790  05D3  2DD6               	goto	u738_25
 20791  05D4  3F41               	moviw [1]fsr1
 20792  05D5  3A00               	xorlw	0
 20793  05D6                     u738_25:	
 20794  05D6  1D03               	skipz
 20795  05D7  2DE3               	goto	i1l1580
 20796                           
 20797                           ;MCU_B1.c: 148: {
 20798                           ;MCU_B1.c: 149: Timer0->Count=0;
 20799  05D8  0A6E               	incf	_Timer0^(0+128),w
 20800  05D9  0086               	movwf	6
 20801  05DA  0187               	clrf	7
 20802  05DB  3000               	movlw	0
 20803  05DC  3FC0               	movwi [0]fsr1
 20804  05DD  3FC1               	movwi [1]fsr1
 20805                           
 20806                           ;MCU_B1.c: 150: TMain->T0_Timerout=1;
 20807  05DE  087D               	movf	_TMain,w
 20808  05DF  0086               	movwf	6
 20809  05E0  3001               	movlw	1	; select bank2/3
 20810  05E1  0087               	movwf	7
 20811  05E2  1481               	bsf	1,1
 20812  05E3                     i1l1580:	
 20813                           
 20814                           ;MCU_B1.c: 151: }
 20815                           ;MCU_B1.c: 154: if(Buz->GO)
 20816  05E3  0878               	movf	_Buz,w
 20817  05E4  0086               	movwf	6
 20818  05E5  3001               	movlw	1	; select bank2/3
 20819  05E6  0087               	movwf	7
 20820  05E7  1C81               	btfss	1,1
 20821  05E8  0008               	return
 20822                           
 20823                           ;MCU_B1.c: 155: {
 20824                           ;MCU_B1.c: 156: Buz->Time++;
 20825  05E9  0A78               	incf	_Buz,w
 20826  05EA  0086               	movwf	6
 20827  05EB  3001               	movlw	1	; select bank2/3
 20828  05EC  0087               	movwf	7
 20829  05ED  3001               	movlw	1
 20830  05EE  0781               	addwf	1,f
 20831  05EF  3141               	addfsr 1,1
 20832  05F0  1803               	skipnc
 20833  05F1  0A81               	incf	1,f
 20834  05F2  0008               	return
 20835  05F3                     __end_of_TMR0_ISR:	
 20836                           
 20837                           	psect	text138
 20838  1B2E                     __ptext138:	
 20839 ;; *************** function i1_setLoad_StatusOff *****************
 20840 ;; Defined at:
 20841 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 20842 ;; Parameters:    Size  Location     Type
 20843 ;;  lights          1    wreg     unsigned char 
 20844 ;;  command         1    0[COMMON] unsigned char 
 20845 ;; Auto vars:     Size  Location     Type
 20846 ;;  lights          1    1[COMMON] unsigned char 
 20847 ;; Return value:  Size  Location     Type
 20848 ;;		None               void
 20849 ;; Registers used:
 20850 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20851 ;; Tracked objects:
 20852 ;;		On entry : 0/0
 20853 ;;		On exit  : 0/0
 20854 ;;		Unchanged: 0/0
 20855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20856 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20860 ;;Total ram usage:        2 bytes
 20861 ;; Hardware stack levels used:    1
 20862 ;; This function calls:
 20863 ;;		Nothing
 20864 ;; This function is called by:
 20865 ;;		_TMR0_ISR
 20866 ;; This function uses a non-reentrant model
 20867 ;;
 20868                           
 20869                           
 20870                           ;psect for function i1_setLoad_StatusOff
 20871  1B2E                     i1_setLoad_StatusOff:	
 20872                           
 20873                           ;incstack = 0
 20874                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20875                           ;i1setLoad_StatusOff@lights stored from wreg
 20876  1B2E  00F2               	movwf	i1setLoad_StatusOff@lights
 20877                           
 20878                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 20879  1B2F  0020               	movlb	0	; select bank0
 20880  1B30  086E               	movf	_Load,w
 20881  1B31  3E46               	addlw	70
 20882  1B32  0086               	movwf	6
 20883  1B33  3002               	movlw	2	; select bank4/5
 20884  1B34  0087               	movwf	7
 20885  1B35  0871               	movf	i1setLoad_StatusOff@command,w
 20886  1B36  1081               	bcf	1,1
 20887  1B37  1D03               	skipz
 20888  1B38  1481               	bsf	1,1
 20889                           
 20890                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 20891  1B39  086E               	movf	_Load,w
 20892  1B3A  3E42               	addlw	66
 20893  1B3B  0086               	movwf	6
 20894  1B3C  3002               	movlw	2	; select bank4/5
 20895  1B3D  0087               	movwf	7
 20896  1B3E  3002               	movlw	2
 20897  1B3F  0281               	subwf	1,f
 20898                           
 20899                           ;OverLoad_B1.c: 326: if(lights == 1)
 20900  1B40  0872               	movf	i1setLoad_StatusOff@lights,w
 20901  1B41  3A01               	xorlw	1
 20902  1B42  1D03               	skipz
 20903  1B43  2B4A               	goto	i1l7559
 20904                           
 20905                           ;OverLoad_B1.c: 327: {
 20906                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 20907  1B44  086E               	movf	_Load,w
 20908  1B45  3E43               	addlw	67
 20909  1B46  0086               	movwf	6
 20910  1B47  3002               	movlw	2	; select bank4/5
 20911  1B48  0087               	movwf	7
 20912  1B49  0181               	clrf	1
 20913  1B4A                     i1l7559:	
 20914                           
 20915                           ;OverLoad_B1.c: 329: }
 20916                           ;OverLoad_B1.c: 330: if(lights == 2)
 20917  1B4A  0872               	movf	i1setLoad_StatusOff@lights,w
 20918  1B4B  3A02               	xorlw	2
 20919  1B4C  1D03               	skipz
 20920  1B4D  2B54               	goto	i1l7563
 20921                           
 20922                           ;OverLoad_B1.c: 331: {
 20923                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 20924  1B4E  086E               	movf	_Load,w
 20925  1B4F  3E44               	addlw	68
 20926  1B50  0086               	movwf	6
 20927  1B51  3002               	movlw	2	; select bank4/5
 20928  1B52  0087               	movwf	7
 20929  1B53  0181               	clrf	1
 20930  1B54                     i1l7563:	
 20931                           
 20932                           ;OverLoad_B1.c: 333: }
 20933                           ;OverLoad_B1.c: 334: if(lights == 3)
 20934  1B54  0872               	movf	i1setLoad_StatusOff@lights,w
 20935  1B55  3A03               	xorlw	3
 20936  1B56  1D03               	skipz
 20937  1B57  0008               	return
 20938                           
 20939                           ;OverLoad_B1.c: 335: {
 20940                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 20941  1B58  086E               	movf	_Load,w
 20942  1B59  3E45               	addlw	69
 20943  1B5A  0086               	movwf	6
 20944  1B5B  3002               	movlw	2	; select bank4/5
 20945  1B5C  0087               	movwf	7
 20946  1B5D  0181               	clrf	1
 20947  1B5E  0008               	return
 20948  1B5F                     __end_ofi1_setLoad_StatusOff:	
 20949                           
 20950                           	psect	text139
 20951  19AE                     __ptext139:	
 20952 ;; *************** function _IOC_ISR *****************
 20953 ;; Defined at:
 20954 ;;		line 338 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20955 ;; Parameters:    Size  Location     Type
 20956 ;;		None
 20957 ;; Auto vars:     Size  Location     Type
 20958 ;;		None
 20959 ;; Return value:  Size  Location     Type
 20960 ;;		None               void
 20961 ;; Registers used:
 20962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20963 ;; Tracked objects:
 20964 ;;		On entry : 0/0
 20965 ;;		On exit  : 0/0
 20966 ;;		Unchanged: 0/0
 20967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20972 ;;Total ram usage:        1 bytes
 20973 ;; Hardware stack levels used:    1
 20974 ;; Hardware stack levels required when called:    1
 20975 ;; This function calls:
 20976 ;;		_setDimmerReClock
 20977 ;; This function is called by:
 20978 ;;		_ISR
 20979 ;; This function uses a non-reentrant model
 20980 ;;
 20981                           
 20982                           
 20983                           ;psect for function _IOC_ISR
 20984  19AE                     _IOC_ISR:	
 20985                           
 20986                           ;MCU_B1.c: 340: if(IOCIE && IOCBF2)
 20987                           
 20988                           ;incstack = 0
 20989                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20990  19AE  1D8B               	btfss	11,3	;volatile
 20991  19AF  0008               	return
 20992  19B0  0027               	movlb	7	; select bank7
 20993  19B1  1D16               	btfss	22,2	;volatile
 20994  19B2  0008               	return
 20995                           
 20996                           ;MCU_B1.c: 341: {
 20997                           ;MCU_B1.c: 342: IOCBF2=0;
 20998  19B3  1116               	bcf	22,2	;volatile
 20999                           
 21000                           ;MCU_B1.c: 343: IOCIF=0;
 21001  19B4  100B               	bcf	11,0	;volatile
 21002                           
 21003                           ;MCU_B1.c: 344: if(TMain->PowerON)
 21004  19B5  087D               	movf	_TMain,w
 21005  19B6  0086               	movwf	6
 21006  19B7  3001               	movlw	1	; select bank2/3
 21007  19B8  0087               	movwf	7
 21008  19B9  1C01               	btfss	1,0
 21009  19BA  0008               	return
 21010                           
 21011                           ;MCU_B1.c: 345: {
 21012                           ;MCU_B1.c: 349: setDimmerReClock();
 21013  19BB  31A6  2670  3199   	fcall	_setDimmerReClock
 21014                           
 21015                           ;MCU_B1.c: 350: if(RB2)
 21016  19BE  0020               	movlb	0	; select bank0
 21017  19BF  1D0D               	btfss	13,2	;volatile
 21018  19C0  29C8               	goto	i1l8003
 21019                           
 21020                           ;MCU_B1.c: 351: {
 21021                           ;MCU_B1.c: 352: Dimmer->Correction=0;
 21022  19C1  0021               	movlb	1	; select bank1
 21023  19C2  0839               	movf	_Dimmer^(0+128),w
 21024  19C3  3E02               	addlw	2
 21025  19C4  0086               	movwf	6
 21026  19C5  0187               	clrf	7
 21027  19C6  0181               	clrf	1
 21028                           
 21029                           ;MCU_B1.c: 353: }
 21030  19C7  0008               	return
 21031  19C8                     i1l8003:	
 21032                           
 21033                           ;MCU_B1.c: 354: else
 21034                           ;MCU_B1.c: 355: {
 21035                           ;MCU_B1.c: 356: Dimmer->Correction=8;
 21036  19C8  3008               	movlw	8
 21037  19C9  00F1               	movwf	??_IOC_ISR
 21038  19CA  0021               	movlb	1	; select bank1
 21039  19CB  0839               	movf	_Dimmer^(0+128),w
 21040  19CC  3E02               	addlw	2
 21041  19CD  0086               	movwf	6
 21042  19CE  0187               	clrf	7
 21043  19CF  0871               	movf	??_IOC_ISR,w
 21044  19D0  0081               	movwf	1
 21045  19D1  0008               	return
 21046  19D2                     __end_of_IOC_ISR:	
 21047                           
 21048                           	psect	text140
 21049  2670                     __ptext140:	
 21050 ;; *************** function _setDimmerReClock *****************
 21051 ;; Defined at:
 21052 ;;		line 164 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21053 ;; Parameters:    Size  Location     Type
 21054 ;;		None
 21055 ;; Auto vars:     Size  Location     Type
 21056 ;;		None
 21057 ;; Return value:  Size  Location     Type
 21058 ;;		None               void
 21059 ;; Registers used:
 21060 ;;		wreg, fsr1l, fsr1h
 21061 ;; Tracked objects:
 21062 ;;		On entry : 0/0
 21063 ;;		On exit  : 0/0
 21064 ;;		Unchanged: 0/0
 21065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21070 ;;Total ram usage:        0 bytes
 21071 ;; Hardware stack levels used:    1
 21072 ;; This function calls:
 21073 ;;		Nothing
 21074 ;; This function is called by:
 21075 ;;		_IOC_ISR
 21076 ;; This function uses a non-reentrant model
 21077 ;;
 21078                           
 21079                           
 21080                           ;psect for function _setDimmerReClock
 21081  2670                     _setDimmerReClock:	
 21082                           
 21083                           ;MCU_B1.c: 166: TMR0=255;
 21084                           
 21085                           ;incstack = 0
 21086                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21087  2670  30FF               	movlw	255
 21088  2671  0020               	movlb	0	; select bank0
 21089  2672  0095               	movwf	21	;volatile
 21090                           
 21091                           ;MCU_B1.c: 171: if(!DimmerLights11->GO)
 21092  2673  0879               	movf	_DimmerLights11,w
 21093  2674  0086               	movwf	6
 21094  2675  3001               	movlw	1	; select bank2/3
 21095  2676  0087               	movwf	7
 21096  2677  1801               	btfsc	1,0
 21097  2678  0008               	return
 21098                           
 21099                           ;MCU_B1.c: 172: {
 21100                           ;MCU_B1.c: 173: DimmerLights11->GO=1;
 21101  2679  0879               	movf	_DimmerLights11,w
 21102  267A  0086               	movwf	6
 21103  267B  3001               	movlw	1	; select bank2/3
 21104  267C  0087               	movwf	7
 21105  267D  1401               	bsf	1,0
 21106  267E  0008               	return
 21107  267F                     __end_of_setDimmerReClock:	
 21108                           
 21109                           	psect	text141
 21110  25B3                     __ptext141:	
 21111 ;; *************** function _INT_ISR *****************
 21112 ;; Defined at:
 21113 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21114 ;; Parameters:    Size  Location     Type
 21115 ;;		None
 21116 ;; Auto vars:     Size  Location     Type
 21117 ;;		None
 21118 ;; Return value:  Size  Location     Type
 21119 ;;		None               void
 21120 ;; Registers used:
 21121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21122 ;; Tracked objects:
 21123 ;;		On entry : 0/0
 21124 ;;		On exit  : 0/0
 21125 ;;		Unchanged: 0/0
 21126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21131 ;;Total ram usage:        0 bytes
 21132 ;; Hardware stack levels used:    1
 21133 ;; Hardware stack levels required when called:    2
 21134 ;; This function calls:
 21135 ;;		_setRF_ReceiveGO
 21136 ;; This function is called by:
 21137 ;;		_ISR
 21138 ;; This function uses a non-reentrant model
 21139 ;;
 21140                           
 21141                           
 21142                           ;psect for function _INT_ISR
 21143  25B3                     _INT_ISR:	
 21144                           
 21145                           ;MCU_B1.c: 291: if(INTE && INTF)
 21146                           
 21147                           ;incstack = 0
 21148                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21149  25B3  1E0B               	btfss	11,4	;volatile
 21150  25B4  0008               	return
 21151  25B5  1C8B               	btfss	11,1	;volatile
 21152  25B6  0008               	return
 21153                           
 21154                           ;MCU_B1.c: 292: {
 21155                           ;MCU_B1.c: 293: INTF=0;
 21156  25B7  108B               	bcf	11,1	;volatile
 21157                           
 21158                           ;MCU_B1.c: 294: INTE=0;
 21159  25B8  120B               	bcf	11,4	;volatile
 21160                           
 21161                           ;MCU_B1.c: 295: setRF_ReceiveGO(1,1);
 21162  25B9  01F3               	clrf	setRF_ReceiveGO@command
 21163  25BA  0AF3               	incf	setRF_ReceiveGO@command,f
 21164  25BB  3001               	movlw	1
 21165  25BC  31A5  25A7         	fcall	_setRF_ReceiveGO
 21166  25BE  0008               	return
 21167  25BF                     __end_of_INT_ISR:	
 21168                           
 21169                           	psect	text142
 21170  25A7                     __ptext142:	
 21171 ;; *************** function _setRF_ReceiveGO *****************
 21172 ;; Defined at:
 21173 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;  rf              1    wreg     unsigned char 
 21176 ;;  command         1    2[COMMON] unsigned char 
 21177 ;; Auto vars:     Size  Location     Type
 21178 ;;  rf              1    3[COMMON] unsigned char 
 21179 ;; Return value:  Size  Location     Type
 21180 ;;		None               void
 21181 ;; Registers used:
 21182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21183 ;; Tracked objects:
 21184 ;;		On entry : 0/0
 21185 ;;		On exit  : 0/0
 21186 ;;		Unchanged: 0/0
 21187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21188 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21191 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21192 ;;Total ram usage:        2 bytes
 21193 ;; Hardware stack levels used:    1
 21194 ;; Hardware stack levels required when called:    1
 21195 ;; This function calls:
 21196 ;;		i1_RfPointSelect
 21197 ;; This function is called by:
 21198 ;;		_INT_ISR
 21199 ;; This function uses a non-reentrant model
 21200 ;;
 21201                           
 21202                           
 21203                           ;psect for function _setRF_ReceiveGO
 21204  25A7                     _setRF_ReceiveGO:	
 21205                           
 21206                           ;incstack = 0
 21207                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21208                           ;setRF_ReceiveGO@rf stored from wreg
 21209  25A7  00F4               	movwf	setRF_ReceiveGO@rf
 21210                           
 21211                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21212  25A8  0874               	movf	setRF_ReceiveGO@rf,w
 21213  25A9  31A5  253A         	fcall	i1_RfPointSelect
 21214                           
 21215                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21216  25AB  087B               	movf	_RF,w
 21217  25AC  0086               	movwf	6
 21218  25AD  0187               	clrf	7
 21219  25AE  0873               	movf	setRF_ReceiveGO@command,w
 21220  25AF  1081               	bcf	1,1
 21221  25B0  1D03               	skipz
 21222  25B1  1481               	bsf	1,1
 21223  25B2  0008               	return
 21224  25B3                     __end_of_setRF_ReceiveGO:	
 21225                           
 21226                           	psect	text143
 21227  253A                     __ptext143:	
 21228 ;; *************** function i1_RfPointSelect *****************
 21229 ;; Defined at:
 21230 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21231 ;; Parameters:    Size  Location     Type
 21232 ;;  rf              1    wreg     unsigned char 
 21233 ;; Auto vars:     Size  Location     Type
 21234 ;;  rf              1    1[COMMON] unsigned char 
 21235 ;; Return value:  Size  Location     Type
 21236 ;;		None               void
 21237 ;; Registers used:
 21238 ;;		wreg
 21239 ;; Tracked objects:
 21240 ;;		On entry : 0/0
 21241 ;;		On exit  : 0/0
 21242 ;;		Unchanged: 0/0
 21243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21247 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21248 ;;Total ram usage:        2 bytes
 21249 ;; Hardware stack levels used:    1
 21250 ;; This function calls:
 21251 ;;		Nothing
 21252 ;; This function is called by:
 21253 ;;		_setRF_ReceiveGO
 21254 ;; This function uses a non-reentrant model
 21255 ;;
 21256                           
 21257                           
 21258                           ;psect for function i1_RfPointSelect
 21259  253A                     i1_RfPointSelect:	
 21260                           
 21261                           ;incstack = 0
 21262                           ; Regs used in i1_RfPointSelect: [wreg]
 21263                           ;i1RfPointSelect@rf stored from wreg
 21264  253A  00F2               	movwf	i1RfPointSelect@rf
 21265                           
 21266                           ;RF_Control_B1.c: 10: if(rf == 1)
 21267  253B  0872               	movf	i1RfPointSelect@rf,w
 21268  253C  3A01               	xorlw	1
 21269  253D  1D03               	skipz
 21270  253E  0008               	return
 21271                           
 21272                           ;RF_Control_B1.c: 11: {
 21273                           ;RF_Control_B1.c: 12: RF=&RF1;
 21274  253F  30E9               	movlw	_RF1& (0+255)
 21275  2540  00F1               	movwf	??i1_RfPointSelect
 21276  2541  0871               	movf	??i1_RfPointSelect,w
 21277  2542  00FB               	movwf	_RF
 21278  2543  0008               	return
 21279  2544                     __end_ofi1_RfPointSelect:	
 21280  007E                     btemp	set	126	;btemp
 21281  007E                     pic14e$flags	set	126
 21282  007E                     wtemp	set	126
 21283  007E                     wtemp0	set	126
 21284  0080                     wtemp1	set	128
 21285  0082                     wtemp2	set	130
 21286  0084                     wtemp3	set	132
 21287  0086                     wtemp4	set	134
 21288  0088                     wtemp5	set	136
 21289  007F                     wtemp6	set	127
 21290  007E                     ttemp	set	126
 21291  007E                     ttemp0	set	126
 21292  0081                     ttemp1	set	129
 21293  0084                     ttemp2	set	132
 21294  0087                     ttemp3	set	135
 21295  007F                     ttemp4	set	127
 21296  007E                     ltemp	set	126
 21297  007E                     ltemp0	set	126
 21298  0082                     ltemp1	set	130
 21299  0086                     ltemp2	set	134
 21300  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         258
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      79
    BANK2            80      0      65
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK1[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK2[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109539
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                   _MainT_ResetClock
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21707
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21707
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_ResetClock                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _MainT_ResetClock
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Sep 26 15:35:34 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007A  
                                     _RD 0CA8                                       _RF 007B  
                __end_of_CC2500_WriteREG 27CE                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 25FB  
             _getDimmerLights_StatusFlag 25EF                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 115E                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1B90                     _setDimmerLights_Main 1515  
                           ___ftadd@sign 0048                                      l303 121F  
                                    l320 1B22                                      l323 1B28  
                                    l307 1230                                      l353 27A8  
                                    l354 27AA                                      l292 1DCE  
                                    l365 27BD                                      l293 1DD3  
                                    l383 1899                                      l287 1DA4  
                                    l296 1DD6                                      l377 26A5  
                                    l389 19D7                                      l664 1AFC  
                                    l864 107F                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000C  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00CD                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00BB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00E9  
                                    _ISR 0004          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0158                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 27B5  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2544  
                        __end_of_ADC_Set 2518                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 08B8                    _setDimmerLights_ERROR 1F50  
                  _setDimmerLights_AdjRF 198B                    _setDimmerLights_AdjGo 26FD  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 26CD  
                                   ?_ISR 0071                          _PowerFault_Main 24B8  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 19D2  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2034 1EE4                                     l2314 0CEA  
               ?_DimmerLightsPointSelect 0071                                     l1612 2778  
                                   l3205 1206                                     l3038 18D1  
                                   l2318 1CBF                                     l1296 2742  
                                   l3228 0E86                          __end_of_IOC_Set 2639  
                                   l1638 1BBA                                     l2550 1EAD  
                                   l1823 1033                                     l6011 07AC  
                                   l6101 1AE2                                     l3199 11EF  
                                   l6023 07C8                                     l6007 07A4  
                                   l2751 24DE                                     l2577 1D43  
                                   l6113 1AF4                                     l6105 1AE8  
                                   l6019 07C0                                     l6109 1AEE  
                                   l6039 170A                                     l6143 195E  
                                   l6073 176F                                     l6065 1755  
                                   l6057 173A                                     l6067 175E  
                                   l6059 1748                                     l6139 1953  
                                   l7123 1D12                                     l6251 1131  
                                   l6069 1761                                     l6261 1150  
                                   l7119 1D0B                                     l6351 1C00  
                                   l6503 1D31                                     l6255 1137  
                                   l6097 1ADC                                     l6257 1144  
                                   l9011 1377                                     l8301 1B7B  
                                   l9005 135E                                     l8231 18CB  
                                   l5831 11C5                                     l9015 13BE  
                                   l9111 0C46                                     l5911 0E65  
                                   l8321 1174                                     l8305 1B85  
                                   l5905 0E52                                     l8251 15C2  
                                   l5835 11CC                                     l8331 1184  
                                   l9131 0CA5                                     l6387 18BB  
                                   l5923 0E98                                     l5907 0E5C  
                                   l5845 11F4                                     l5837 11D6  
                                   l8317 116E                                     l8325 117A  
                                   l9109 0C3D                                     l6389 18C1  
                                   l5917 0E78                                     l5909 0E61  
                                   l9205 17F5                                     l8255 15E0  
                                   l5847 11FC                                     l5839 11DB  
                                   l8351 11AC                                     l8335 118A  
                                   l8407 0922                                     l7543 1C4F  
                                   l7535 1C31                                     l9143 0CDC  
                                   l9135 0CC2                                     l6647 1DB6  
                                   l5927 0EAA                                     l5919 0E82  
                                   l9071 0F8F                                     l9047 0F20  
                                   l5865 1930                                     l5953 0AB9  
                                   l7537 1C3D                                     l9145 0CE1  
                                   l5937 0EC5                                     l5881 0E16  
                                   l9081 0FBD                                     l9049 0F29  
                                   l5947 0AA3                                     l8283 12DC  
                                   l8347 11A6                                     l8355 11B2  
                                   l8339 1190                                     l7547 1C58  
                                   l8603 1242                                     l9163 178C  
                                   l9083 0FC3                                     l8365 1BDC  
                                   l7805 273A                                     l8605 125A  
                                   l5877 0E0F                                     l8445 0845  
                                   l9245 063E                                     l9229 0609  
                                   l9413 09A0                                     l7591 0A71  
                                   l8631 19F3                                     l5975 0B13  
                                   l5967 0AFA                                     l9351 0D69  
                                   l5887 0E25                                     l8455 0869  
                                   l9191 17CF                                     l9167 1793  
                                   l9255 0670                                     l9087 0FCE  
                                   l9407 096F                                     l7585 0A49  
                                   l7593 0A77                                     l8369 1BE7  
                                   l8641 1D6E                                     l9521 00CA  
                                   l9505 007D                                     l8617 1273  
                                   l9177 17B0                                     l9417 09A8  
                                   l9441 132F                                     l8491 107B  
                                   l5899 0E3F                                     l5995 0769  
                                   l8459 087F                                     l8571 1423  
                                   l7597 0A7E                                     l8629 19E8  
                                   l8485 1063                                     l9541 018D  
                                   l9613 0344                                     l5989 0753  
                                   l8565 1407                                     l8733 1F15  
                                   l9189 17CB                                     l9269 06B4  
                                   l8709 1EDB                                     l9429 09DF  
                                   l9527 00F8                                     l8575 142C  
                                   l9279 06E7                                     l8921 1542  
                                   l8665 1B9E                                     l8489 1076  
                                   l9625 036D                                     l8745 1F2B  
                                   l8833 14F0                                     l9491 1E1E  
                                   l9619 035A                                     l9547 01A9  
                                   l9549 01C1                                     l9477 16EB  
                                   l9469 16C0                                     l8927 1554  
                                   l9575 025F                                     l9569 0247  
                                   _CFGS 0CAE                                     l8939 1580  
                                   l9587 028F                                     l9595 02C7  
                                   l9683 145C                                     l8799 1FED  
                                   l9687 1471                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 25BF                                     _LATC 010E  
                                   u4005 0E53                                     u4035 0E66  
                                   u4135 0ACB                                     u4215 0775  
                                   u4145 0ADB                                     u4065 0E79  
                                   u4225 0785                                     u4155 0AFB  
                                   u4165 0B0A                                     u4325 1711  
                                   u4245 07AD                                     u4175 0B14  
                                   u4255 07B3                                     u4355 173B  
                                   _PEIE 005E                                     u3805 11EA  
                                   u4285 07C9                                     _INTE 005C  
                                   _INTF 0059                                     u4295 07CF  
                                   u3825 11F7                                     u4385 1756  
                                   u3855 120D                                     u3785 11D1  
                                   u6505 1C3E                                     u6515 1C48  
                                   u6525 1C50                                     u3975 0E40  
                                   u8065 19DD                                     u7525 18D2  
                                   u6485 1C34                                     u9205 131E  
                                   u7535 18D7                                     u9135 098A  
                                   u9215 1347                                     u9305 1E05  
                                   u6595 0A0A                                     u9235 1C8C  
                                   u7590 128B                                     u7830 252F  
                                   u9255 1690                                     u9175 09CB  
                                   u9425 01D9                                     u9265 16D5  
                                   u7595 1289                                     u9375 0144  
                                   _LWLO 0CAD                                     _RFSW 00BC  
                                   _TMR0 0015                          __end_of_INT_Set 24E9  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 014C                                     _Load 006E  
                                   _Temp 007C                                     _main 1435  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 24B8  
                    __end_of_DlyOff_Main 1677                          __end_of_RF_Main 24DA  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 2670  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1C9A  
                    DelayTimejudge@value 0022                            _RfPointSelect 2570  
             __end_of_setRFSW_AdjControl 1D59                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 00F3                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 261F                    ?_setDimmerLights_Main 0071  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 276E  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0EDD                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0B35                          __end_of___ftmul 07F0  
                        __end_of___fttol 1778             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1C5F  
                 _setDimmerLights_Switch 26AD            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EC                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 007D  
                          setRF_Learn@rf 0023                                    _MainT 1677  
                                  _Load1 0220                            __CFG_WRT$HALF 0000  
                                  _Temp1 013E                         __end_of_TMR0_ISR 05F3  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 2646  
                      ?_MainT_ResetClock 0071                                    _getAD 276E  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 10A7  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 26DD              __size_of_CC2500_ClearRXFIFO 0004  
                     ??_MainT_ResetClock 0020                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 0380                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0071  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 271E  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1281              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0071  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0071  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0071  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 10A7  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0071                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 259C                        ??_setPercentValue 0059  
                           __end_of_main 14A4                      ?_setRF_DimmerLights 005D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 094E                     _setSw_Initialization 26ED  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0071  
                _setControl_Lights_Table 13C6                   ?_Buzzer_Initialization 0071  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 24BB  
                             _Receive_GO 0381                               _Receive_OK 0382  
                              ??_IOC_ISR 0071                   ?_setDimmerLights_ERROR 0071  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 2565  
                                 ?_MainT 0071                   ?_setDimmerLights_AdjRF 0071  
                              ??_INT_ISR 0075                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 26ED  
                   __end_of_getTemp_Safe 2511                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 15FE                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                        ?_getPowerFault_AD 0071  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1947  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 121D  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 26BD  
                                 i1l1580 05E3                                   i1l8003 19C8  
                                 i1l8051 04EB                                   i1l8027 0488  
                                 i1l8045 04D2                                   i1l8053 04F1  
                                 i1l8063 0524                                   i1l8047 04D8  
                                 i1l8073 0553                                   i1l8075 0559  
                                 i1l8059 050D                                   i1l8067 0538  
                                 i1l8087 058E                                   i1l8097 05C4  
                                 i1l7563 1B54                                   i1l7559 1B4A  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   u720_25 046B  
                                 _OSCCON 0099                       __size_of_Load_Main 03DF  
                                 u737_25 05B9                                   u738_25 05D6  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 27E7                       DelayTime_1us@count 0020  
                             _VarProduct 01C5                    _Dimmer_Initialization 24F5  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 2759  
                                 _Dimmer 00B9                                   _DlySw1 00D5  
            __size_of_setLoad_Exceptions 004A               __end_of_Mcu_Initialization 279C  
                    __end_of_Buzzer_Main 0A8C                                   _Memory 00ED  
                                 _Timer0 00EE       __end_of_setDimmerLights_TriggerAdj 0800  
             _setDimmerLights_TriggerAdj 07F0            setDimmerLights_Switch@command 0022  
                                 ___wmul 18C8                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 253A  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 115E                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 1587                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 262C         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 2570                          ?_setLoad_Enable 0071  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0022  
                         _setTemp_Enable 2586                          _RfSWPointSelect 25D7  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 24DE  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1102  
       __end_of_CC2500_registers_address 182F     __end_of_setPowerFault_Initialization 2654  
  __size_of_setPowerFault_Initialization 000E             _setPowerFault_Initialization 2646  
                __end_of__initialization 004C              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 16F1  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 1905  
                          __end_of_getAD 2784                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 2607  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 042F                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 267F                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                   __end_of_setTemp_Enable 2591  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0023                           _DimmerLights11 0079  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 24BB  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002B  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006C  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                            _Buzzer_Main 09E4                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1003                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 24CA                               __pnvCOMMON 007D  
                  __size_of_getLoad_Safe 000B            ?_setPowerFault_Initialization 0071  
                             _getPF_Safe 2503                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006C  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 2544  
                    i1_setLoad_StatusOff 1B2E                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 000E  
                            setBuz@count 0029                               __pmaintext 1435  
                    _CC2500_WriteCommand 269D                     ?_Temp_Initialization 0071  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0073                            ?_setTemp_Main 0071  
                             ??_TMR0_Set 0020                               _getLoad_AD 094E  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0071                       __size_of_setTxData 00C9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 2511                _PowerFault_Initialization 24B5  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 12EC  
           __end_of_setRF_Initialization 251F                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1D19  
                __end_of_RfSWPointSelect 25E3                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 19AE  
                        ?_setTemp_Enable 0071                                  _IOC_Set 262C  
                   __size_of_setLog_Code 0049                                  _INT_ISR 25B3  
                                _INT_Set 24E3                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1DE1                        _Flash_Memory_Read 27CE  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2591                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 24D6  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_setControl_Lights_Table 1435                              ?_TouchPower 0071  
                        _Sw_DimmerOnFunc 1FA7                          _setPercentValue 1E26  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0071                                  _Dimmer1 00E6  
           __end_of_CC2500_FrequencyCabr 25CB                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DE                                  _VarLED2 00E2  
                      __end_of_getRxData 1F50               __end_of_setPowerFault_Main 0CF1  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021                __size_of_MainT_ResetClock 0013  
        __end_of_setDimmerLights_Trigger 26CD                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 250A  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 26BD  
                                ___ftadd 0DE7                           ??_setSw_Enable 0022  
                                ___ftdiv 0A8C                          __size_of___wmul 001E  
                                ___ftmul 073C                                  ___fttol 16F1  
                    __end_of_Switch_Main 24DE                                  ___lwdiv 1C28  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 12EC  
                                __ptext2 1C5F                                  __ptext3 094E  
                                __ptext4 276E                                  __ptext5 1000  
                                __ptext6 0EDD                                  __ptext7 1EB5  
                                __ptext8 24BB                                  __ptext9 259C  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0072  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1E26  
              __end_of_Flash_Memory_Read 27E7                               _setRF_Main 1778  
                          _DelayOff_Main 24CE                        _DimmerLights_Main 24FC  
                      __end_of_setINT_GO 2531           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 255A  
                      ??_setRF_ReceiveGO 0074               __end_of_CC2500_ClearRXFIFO 24C2  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 24C6  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0071  
                     ?_DimmerLights_Main 0071                           _LedPointSelect 1947  
                    _DelayOffPointSelect 25CB                                  clrloop0 24F0  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 253A  
                   end_of_initialization 004C                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 257B                        _CC2500_InitSetREG 19F8  
                          _DelayTime_1us 19D2                        __end_of_setTxData 0BFE  
             __end_of_Flash_Memory_Write 1BC1                                  init_ram 24E9  
                     ?_CC2500_InitSetREG 0071                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 24EA  
                             _setSw_Main 05F3                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1890                              ?_getPF_Safe 0071  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 270D                            _CC2500_Enable 0380  
                       ?i1_RfPointSelect 0071                       ?_CC2500_ReadStatus 0071  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 0013  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 121D  
                          _CC2500_TxData 1D9D                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1A4C           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 003B  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0071  
                    _Flash_Memory_Modify 1358                  _DimmerLights_Exceptions 104D  
                            ?_getLoad_AD 0071                             __pstringtext 1800  
                    _Flash_Memory_Unlock 251F                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0071                         _setLoad_StatusOn 1BC1  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0071                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 2503  
                     _Mcu_Initialization 2784                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0071  
                       ?_RfSWPointSelect 0071                          _setSw_Main$4649 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1969  
                __end_of_Sw_DimmerOnFunc 2000                  __end_of_setPercentValue 1E6C  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1A22  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1CD9  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1D59  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 18AB  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 104D  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 2800  
                   _setRF_Initialization 2518                              _Switch_Main 24DA  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 255A                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 2744                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 002C                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 18E6                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 01C4          __size_of_setOverTemp_Exceptions 0049  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0072  
                         __end_of_setLED 11BC                           __end_of_setBuz 15FE  
                          _setLoad_Count 2759                     _CC2500_FrequencyCabr 25BF  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 0019  
                            ?_setRF_Main 0071                          _setRFSW_Control 0828  
                    __size_of_getPF_Safe 0007                        ?_setDimmerReClock 0071  
                    start_initialization 0018                        _setRF_DimmerValue 1BF3  
                        ?_LedPointSelect 0071               __end_of_DimmerLights_Close 1890  
                              _Load_Main 0050                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0071                       ?_setRF_DimmerValue 0071  
             __end_of_CC2500_InitPATable 1905          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 1000                              ?_setLoad_GO 0071  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1875  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0071                                 ??_IO_Set 0020  
                              _VarErrLED 00DA                              ?_setSw_Main 0071  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0071                     __end_of_setSw_Status 269D  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0071  
              i1setLoad_StatusOff@lights 0072                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 257B  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00C4  
                              _Temp_Main 1000                ??_DimmerLights_Exceptions 002A  
          setOverTemp_Exceptions@command 002C                         _MainT_ResetClock 2731  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 24C6               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1C28                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4298 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1EB5                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0130  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002A                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 198B                  __size_of_setRF_RxStatus 000E  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00ED              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0071                               ?_Temp_Main 0071  
                    __size_of_setRF_Main 0088                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
                 _setTemp_Initialization 259C                         _getPowerFault_AD 1C5F  
      __size_of_setPowerFault_Exceptions 003F      __end_of_Flash_Memory_Initialization 0DE7  
            _Flash_Memory_Initialization 0CF1                ?_setPowerFault_Exceptions 0071  
                              __ptext100 24CE                                __ptext101 15FE  
                              __ptext110 1925                                __ptext102 0B35  
                              __ptext111 11BC                                __ptext103 2570  
                              __ptext120 254F                                __ptext112 267F  
                              __ptext104 268E                                __ptext121 25CB  
                              __ptext113 25D7                                __ptext105 2565  
                              __ptext130 24C2                                __ptext122 2744  
                              __ptext114 26BD                                __ptext106 1281  
                              __ptext131 24BE                                __ptext123 24C6  
                              __ptext115 26AD                                __ptext107 1E26  
                              __ptext140 2670                                __ptext132 269D  
                              __ptext124 1AFE                                __ptext116 255A  
                              __ptext108 16F1                                __ptext141 25B3  
                              __ptext133 279C                                __ptext125 19F8  
                              __ptext117 1587                                __ptext109 0A8C  
                               ?___ftadd 003E                                __ptext142 25A7  
                              __ptext134 09E4                                __ptext126 18E6  
                              __ptext118 18C8                                __ptext143 253A  
                              __ptext135 2544                                __ptext127 27B5  
                              __ptext119 24CA                                __ptext128 25BF  
                              __ptext137 042F                                __ptext129 19D2  
                              __ptext138 1B2E                                __ptext139 19AE  
                              _getRxData 1EFE                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 08B8  
                        _setRF_ReceiveGO 25A7                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 254F                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 24E3                       _setPowerFault_Main 0BFE  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 0149            __end_of_setDimmerLights_ERROR 1FA7  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 19AE  
          __end_of_setDimmerLights_AdjGo 270D                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 26DD  
                         __size_of_MainT 007A                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 1866                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1A22  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 2565                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 2528                      __end_of_setLED_Main 1D19  
               __end_of_setLoad_StatusOn 1BF3                        MainT_ResetClock@i 0021  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 24BE  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 2613                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 24EF  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0B35  
    __end_of_DimmerLights_Initialization 25EF              _DimmerLights_Initialization 25E3  
                     _CC2500_ClearRXFIFO 24BE                       _CC2500_ClearTXFIFO 24C2  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 2670  
                   ??_setPowerFault_Main 002D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0073  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1B90  
                             ?_getRxData 0071                                 _TMR0_ISR 042F  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1B5F  
                      setRF_ReceiveGO@rf 0074                                 _TMR0_Set 2639  
                       _Sw_DimmerAdjFunc 1A77                      ?_CC2500_ClearRXFIFO 0071  
                    ?_CC2500_ClearTXFIFO 0071                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 0828                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 26AD                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 14A4  
                  __size_of_setTemp_Main 0123             __end_of_MainT_Initialization 2731  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B8                             setSw_Main@sw 0068  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 250A  
                       __size_of_IOC_ISR 0024                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 2607                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1EB5  
                  _DlyOff_Initialization 254F                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0071                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 09E4                    _Switch_Initialization 2531  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 267F                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 1358                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 279C  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 25B3  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 0063                      _Load_Initialization 261F  
                              setLED@led 0023                                 _RxStatus 0383  
   __end_of_setDimmerLights_TriggerERROR 1A77    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1A4C                                 _TxStatus 0386  
                           _setTemp_Main 0EDD                       _setLoad_Exceptions 1003  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1866  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1925                         ??_LedPointSelect 0020  
                               ___ftpack 11BC                             _setSw_Status 268E  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1CD9  
                    ?_setLoad_Exceptions 0071                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 12EC                 ?_DelayOff_Initialization 0071  
               __end_of_MainT_ResetClock 2744                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 24DA  
                               __ptext11 05F3                                 __ptext20 24DE  
                               __ptext12 2662                                 __ptext21 24D6  
                               __ptext13 1FA7                                 __ptext30 1BF3  
                               __ptext22 1778                                 __ptext14 14A4  
                               __ptext31 198B                                 __ptext23 1EFE  
                               __ptext15 1A77                                 __ptext40 18AB  
                               __ptext32 10A7                                 __ptext24 1E6C  
                               __ptext16 07F0                                 __ptext41 24D2  
                               __ptext33 073C                                 __ptext25 13C6  
                               __ptext17 26FD                                 __ptext50 2639  
                               __ptext42 2518                                 __ptext34 0DE7  
                               __ptext26 0828                                 __ptext18 2531  
                               __ptext51 27E7                                 __ptext43 24B8  
                               __ptext35 0801                                 __ptext27 1102  
                               __ptext19 26ED                                 __ptext60 0050  
                               __ptext52 262C                                 __ptext44 0BFE  
                               __ptext36 1D9D                                 __ptext28 1AD0  
                               __ptext61 1003                                 __ptext53 24E3  
                               __ptext45 1C9A                                 __ptext37 121D  
                               __ptext29 1D19                                 __ptext70 2503  
                               __ptext62 1866                                 __ptext54 2511  
                               __ptext46 2591                                 __ptext38 2654  
                               __ptext71 1C28                                 __ptext63 1A22  
                               __ptext55 2731                                 __ptext47 24B5  
                               __ptext39 1890                                 __ptext80 25FB  
                               __ptext72 261F                                 __ptext64 2528  
                               __ptext56 271E                                 __ptext48 2646  
                               __ptext81 0CF1                                 __ptext73 1969  
                               __ptext65 104D                                 __ptext57 1677  
                               __ptext49 2784                                 __ptext90 1BC1  
                               __ptext82 1B90                                 __ptext74 2613  
                               __ptext66 1A4C                                 __ptext58 2586  
                               __ptext91 2759                                 __ptext83 251F  
                               __ptext75 1CD9                                 __ptext67 1F50  
                               __ptext59 26DD                                 __ptext92 115E  
                               __ptext84 27CE                                 __ptext76 2607  
                               __ptext68 26CD                                 __ptext93 1947  
                               __ptext85 24FC                                 __ptext77 270D  
                               __ptext69 250A                                 __ptext94 1875  
                               __ptext86 1515                                 __ptext78 1DE1  
                               __ptext95 257B                                 __ptext87 1D59  
                               __ptext79 1358                                 __ptext96 25EF  
                               __ptext88 1B5F                                 __ptext97 25E3  
                               __ptext89 08B8                                 __ptext98 1AA3  
                               __ptext99 24F5                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 268E  
          __end_of_Dimmer_Initialization 24FC             __end_of_setDimmerLights_Main 1587  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 006F  
                            _setRF_Learn 2662                 __end_of_CC2500_SIDLEMode 24CA  
                         _setRF_RxStatus 2654               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 25D7               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1875                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000F                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 18AB                       _CC2500_InitPATable 18E6  
    __size_of_getDimmerLights_StatusFlag 000C            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 1800              __size_of_Mcu_Initialization 0018  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 1AFE                       __end_of_setLoad_GO 2586  
            __end_of_Flash_Memory_Modify 13C6                        ??_getPercentValue 0059  
                            _setLog_Code 1E6C                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 2528                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 27B5                       __end_of_setSw_Main 073C  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                ?_setOverTemp_Exceptions 0071                           _DelayTimejudge 1AD0  
                          ?_getLoad_Safe 0071                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1C9A                     ??_DimmerLights_Close 0021  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0071                   __end_of_setRF_RxStatus 2662  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1AD0  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1AA3              __end_of_setDimmerLights_Adj 1D9D  
                ?_setTemp_Initialization 0071                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 271E                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 24D2                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0071  
                   _Flash_Memory_Erasing 25FB                       ?_RF_Initialization 0071  
                             _SPI0Buffer 00BF          __end_of_DelayOff_Initialization 24CE  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 24D2  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 1102         __size_of_setControl_Lights_Table 006F  
                      _setLoad_StatusOff 1B5F                   __end_of_DelayTimejudge 1AFE  
         __end_of_setOverTemp_Exceptions 1EFE                   __size_of_RfPointSelect 000B  
                      ??i1_RfPointSelect 0071                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00F6                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 19F8  
               __end_of_Sw_DimmerAdjFunc 1AA3                  __end_of_CC2500_ReadByte 18C8  
           __end_of_setSw_Initialization 26FD                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 0801  
             ?_PowerFault_Initialization 0071               __end_of_LED_Initialization 2613  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 25A7                 __size_of_Sw_DimmerOnFunc 0059  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0071  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 24D6                 __end_of_Sw_DimmerOffFunc 1515  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    ?_MainT_Initialization 0071  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1281  
                  __end_of_CC2500_TxData 1DE1                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1969                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1B2E  
