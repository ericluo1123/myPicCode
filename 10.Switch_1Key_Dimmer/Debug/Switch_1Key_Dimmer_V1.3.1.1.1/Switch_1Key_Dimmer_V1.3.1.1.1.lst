

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 01 08:36:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	psect	text143,local,class=CODE,merge=1,delta=2
   166                           	psect	text144,local,class=CODE,merge=1,delta=2
   167                           	psect	text145,local,class=CODE,merge=1,delta=2
   168                           	dabs	1,0x7E,2
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0090                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  0116                     	;# 
   216  0117                     	;# 
   217  011D                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0194                     	;# 
   227  0195                     	;# 
   228  0196                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020D                     	;# 
   242  0210                     	;# 
   243  0211                     	;# 
   244  0211                     	;# 
   245  0212                     	;# 
   246  0212                     	;# 
   247  0213                     	;# 
   248  0213                     	;# 
   249  0214                     	;# 
   250  0214                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0216                     	;# 
   255  0216                     	;# 
   256  0217                     	;# 
   257  0217                     	;# 
   258  0291                     	;# 
   259  0291                     	;# 
   260  0292                     	;# 
   261  0293                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  029A                     	;# 
   266  0394                     	;# 
   267  0395                     	;# 
   268  0396                     	;# 
   269  0FE4                     	;# 
   270  0FE5                     	;# 
   271  0FE6                     	;# 
   272  0FE7                     	;# 
   273  0FE8                     	;# 
   274  0FE9                     	;# 
   275  0FEA                     	;# 
   276  0FEB                     	;# 
   277  0FED                     	;# 
   278  0FEE                     	;# 
   279  0FEF                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  0010                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0015                     	;# 
   299  0016                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001C                     	;# 
   307  008C                     	;# 
   308  008D                     	;# 
   309  008E                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  0116                     	;# 
   327  0117                     	;# 
   328  011D                     	;# 
   329  018C                     	;# 
   330  018D                     	;# 
   331  018E                     	;# 
   332  0191                     	;# 
   333  0191                     	;# 
   334  0192                     	;# 
   335  0193                     	;# 
   336  0193                     	;# 
   337  0194                     	;# 
   338  0195                     	;# 
   339  0196                     	;# 
   340  0197                     	;# 
   341  0199                     	;# 
   342  019A                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019C                     	;# 
   348  019C                     	;# 
   349  019D                     	;# 
   350  019E                     	;# 
   351  019F                     	;# 
   352  020D                     	;# 
   353  0210                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0216                     	;# 
   366  0216                     	;# 
   367  0217                     	;# 
   368  0217                     	;# 
   369  0291                     	;# 
   370  0291                     	;# 
   371  0292                     	;# 
   372  0293                     	;# 
   373  0298                     	;# 
   374  0298                     	;# 
   375  0299                     	;# 
   376  029A                     	;# 
   377  0394                     	;# 
   378  0395                     	;# 
   379  0396                     	;# 
   380  0FE4                     	;# 
   381  0FE5                     	;# 
   382  0FE6                     	;# 
   383  0FE7                     	;# 
   384  0FE8                     	;# 
   385  0FE9                     	;# 
   386  0FEA                     	;# 
   387  0FEB                     	;# 
   388  0FED                     	;# 
   389  0FEE                     	;# 
   390  0FEF                     	;# 
   391  0000                     	;# 
   392  0001                     	;# 
   393  0002                     	;# 
   394  0003                     	;# 
   395  0004                     	;# 
   396  0005                     	;# 
   397  0006                     	;# 
   398  0007                     	;# 
   399  0008                     	;# 
   400  0009                     	;# 
   401  000A                     	;# 
   402  000B                     	;# 
   403  000C                     	;# 
   404  000D                     	;# 
   405  000E                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0015                     	;# 
   410  0016                     	;# 
   411  0016                     	;# 
   412  0017                     	;# 
   413  0018                     	;# 
   414  0019                     	;# 
   415  001A                     	;# 
   416  001B                     	;# 
   417  001C                     	;# 
   418  008C                     	;# 
   419  008D                     	;# 
   420  008E                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0095                     	;# 
   425  0096                     	;# 
   426  0097                     	;# 
   427  0099                     	;# 
   428  009A                     	;# 
   429  009B                     	;# 
   430  009B                     	;# 
   431  009C                     	;# 
   432  009D                     	;# 
   433  009E                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018E                     	;# 
   443  0191                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0197                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019C                     	;# 
   460  019D                     	;# 
   461  019E                     	;# 
   462  019F                     	;# 
   463  020D                     	;# 
   464  0210                     	;# 
   465  0211                     	;# 
   466  0211                     	;# 
   467  0212                     	;# 
   468  0212                     	;# 
   469  0213                     	;# 
   470  0213                     	;# 
   471  0214                     	;# 
   472  0214                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0216                     	;# 
   477  0216                     	;# 
   478  0217                     	;# 
   479  0217                     	;# 
   480  0291                     	;# 
   481  0291                     	;# 
   482  0292                     	;# 
   483  0293                     	;# 
   484  0298                     	;# 
   485  0298                     	;# 
   486  0299                     	;# 
   487  029A                     	;# 
   488  0394                     	;# 
   489  0395                     	;# 
   490  0396                     	;# 
   491  0FE4                     	;# 
   492  0FE5                     	;# 
   493  0FE6                     	;# 
   494  0FE7                     	;# 
   495  0FE8                     	;# 
   496  0FE9                     	;# 
   497  0FEA                     	;# 
   498  0FEB                     	;# 
   499  0FED                     	;# 
   500  0FEE                     	;# 
   501  0FEF                     	;# 
   502  0000                     	;# 
   503  0001                     	;# 
   504  0002                     	;# 
   505  0003                     	;# 
   506  0004                     	;# 
   507  0005                     	;# 
   508  0006                     	;# 
   509  0007                     	;# 
   510  0008                     	;# 
   511  0009                     	;# 
   512  000A                     	;# 
   513  000B                     	;# 
   514  000C                     	;# 
   515  000D                     	;# 
   516  000E                     	;# 
   517  0010                     	;# 
   518  0011                     	;# 
   519  0012                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0016                     	;# 
   523  0017                     	;# 
   524  0018                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  008C                     	;# 
   530  008D                     	;# 
   531  008E                     	;# 
   532  0090                     	;# 
   533  0091                     	;# 
   534  0092                     	;# 
   535  0095                     	;# 
   536  0096                     	;# 
   537  0097                     	;# 
   538  0099                     	;# 
   539  009A                     	;# 
   540  009B                     	;# 
   541  009B                     	;# 
   542  009C                     	;# 
   543  009D                     	;# 
   544  009E                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  011D                     	;# 
   551  018C                     	;# 
   552  018D                     	;# 
   553  018E                     	;# 
   554  0191                     	;# 
   555  0191                     	;# 
   556  0192                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0197                     	;# 
   563  0199                     	;# 
   564  019A                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019C                     	;# 
   570  019C                     	;# 
   571  019D                     	;# 
   572  019E                     	;# 
   573  019F                     	;# 
   574  020D                     	;# 
   575  0210                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0291                     	;# 
   592  0291                     	;# 
   593  0292                     	;# 
   594  0293                     	;# 
   595  0298                     	;# 
   596  0298                     	;# 
   597  0299                     	;# 
   598  029A                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000D                     	;# 
   627  000E                     	;# 
   628  0010                     	;# 
   629  0011                     	;# 
   630  0012                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0095                     	;# 
   647  0096                     	;# 
   648  0097                     	;# 
   649  0099                     	;# 
   650  009A                     	;# 
   651  009B                     	;# 
   652  009B                     	;# 
   653  009C                     	;# 
   654  009D                     	;# 
   655  009E                     	;# 
   656  010C                     	;# 
   657  010D                     	;# 
   658  010E                     	;# 
   659  0116                     	;# 
   660  0117                     	;# 
   661  011D                     	;# 
   662  018C                     	;# 
   663  018D                     	;# 
   664  018E                     	;# 
   665  0191                     	;# 
   666  0191                     	;# 
   667  0192                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  019A                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019C                     	;# 
   681  019C                     	;# 
   682  019D                     	;# 
   683  019E                     	;# 
   684  019F                     	;# 
   685  020D                     	;# 
   686  0210                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0212                     	;# 
   691  0213                     	;# 
   692  0213                     	;# 
   693  0214                     	;# 
   694  0214                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0216                     	;# 
   699  0216                     	;# 
   700  0217                     	;# 
   701  0217                     	;# 
   702  0291                     	;# 
   703  0291                     	;# 
   704  0292                     	;# 
   705  0293                     	;# 
   706  0298                     	;# 
   707  0298                     	;# 
   708  0299                     	;# 
   709  029A                     	;# 
   710  0394                     	;# 
   711  0395                     	;# 
   712  0396                     	;# 
   713  0FE4                     	;# 
   714  0FE5                     	;# 
   715  0FE6                     	;# 
   716  0FE7                     	;# 
   717  0FE8                     	;# 
   718  0FE9                     	;# 
   719  0FEA                     	;# 
   720  0FEB                     	;# 
   721  0FED                     	;# 
   722  0FEE                     	;# 
   723  0FEF                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  000D                     	;# 
   738  000E                     	;# 
   739  0010                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0015                     	;# 
   743  0016                     	;# 
   744  0016                     	;# 
   745  0017                     	;# 
   746  0018                     	;# 
   747  0019                     	;# 
   748  001A                     	;# 
   749  001B                     	;# 
   750  001C                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  0090                     	;# 
   755  0091                     	;# 
   756  0092                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0099                     	;# 
   761  009A                     	;# 
   762  009B                     	;# 
   763  009B                     	;# 
   764  009C                     	;# 
   765  009D                     	;# 
   766  009E                     	;# 
   767  010C                     	;# 
   768  010D                     	;# 
   769  010E                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  011D                     	;# 
   773  018C                     	;# 
   774  018D                     	;# 
   775  018E                     	;# 
   776  0191                     	;# 
   777  0191                     	;# 
   778  0192                     	;# 
   779  0193                     	;# 
   780  0193                     	;# 
   781  0194                     	;# 
   782  0195                     	;# 
   783  0196                     	;# 
   784  0197                     	;# 
   785  0199                     	;# 
   786  019A                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019C                     	;# 
   792  019C                     	;# 
   793  019D                     	;# 
   794  019E                     	;# 
   795  019F                     	;# 
   796  020D                     	;# 
   797  0210                     	;# 
   798  0211                     	;# 
   799  0211                     	;# 
   800  0212                     	;# 
   801  0212                     	;# 
   802  0213                     	;# 
   803  0213                     	;# 
   804  0214                     	;# 
   805  0214                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0216                     	;# 
   810  0216                     	;# 
   811  0217                     	;# 
   812  0217                     	;# 
   813  0291                     	;# 
   814  0291                     	;# 
   815  0292                     	;# 
   816  0293                     	;# 
   817  0298                     	;# 
   818  0298                     	;# 
   819  0299                     	;# 
   820  029A                     	;# 
   821  0394                     	;# 
   822  0395                     	;# 
   823  0396                     	;# 
   824  0FE4                     	;# 
   825  0FE5                     	;# 
   826  0FE6                     	;# 
   827  0FE7                     	;# 
   828  0FE8                     	;# 
   829  0FE9                     	;# 
   830  0FEA                     	;# 
   831  0FEB                     	;# 
   832  0FED                     	;# 
   833  0FEE                     	;# 
   834  0FEF                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0008                     	;# 
   844  0009                     	;# 
   845  000A                     	;# 
   846  000B                     	;# 
   847  000C                     	;# 
   848  000D                     	;# 
   849  000E                     	;# 
   850  0010                     	;# 
   851  0011                     	;# 
   852  0012                     	;# 
   853  0015                     	;# 
   854  0016                     	;# 
   855  0016                     	;# 
   856  0017                     	;# 
   857  0018                     	;# 
   858  0019                     	;# 
   859  001A                     	;# 
   860  001B                     	;# 
   861  001C                     	;# 
   862  008C                     	;# 
   863  008D                     	;# 
   864  008E                     	;# 
   865  0090                     	;# 
   866  0091                     	;# 
   867  0092                     	;# 
   868  0095                     	;# 
   869  0096                     	;# 
   870  0097                     	;# 
   871  0099                     	;# 
   872  009A                     	;# 
   873  009B                     	;# 
   874  009B                     	;# 
   875  009C                     	;# 
   876  009D                     	;# 
   877  009E                     	;# 
   878  010C                     	;# 
   879  010D                     	;# 
   880  010E                     	;# 
   881  0116                     	;# 
   882  0117                     	;# 
   883  011D                     	;# 
   884  018C                     	;# 
   885  018D                     	;# 
   886  018E                     	;# 
   887  0191                     	;# 
   888  0191                     	;# 
   889  0192                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0194                     	;# 
   893  0195                     	;# 
   894  0196                     	;# 
   895  0197                     	;# 
   896  0199                     	;# 
   897  019A                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019D                     	;# 
   905  019E                     	;# 
   906  019F                     	;# 
   907  020D                     	;# 
   908  0210                     	;# 
   909  0211                     	;# 
   910  0211                     	;# 
   911  0212                     	;# 
   912  0212                     	;# 
   913  0213                     	;# 
   914  0213                     	;# 
   915  0214                     	;# 
   916  0214                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0216                     	;# 
   921  0216                     	;# 
   922  0217                     	;# 
   923  0217                     	;# 
   924  0291                     	;# 
   925  0291                     	;# 
   926  0292                     	;# 
   927  0293                     	;# 
   928  0298                     	;# 
   929  0298                     	;# 
   930  0299                     	;# 
   931  029A                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0010                     	;# 
   962  0011                     	;# 
   963  0012                     	;# 
   964  0015                     	;# 
   965  0016                     	;# 
   966  0016                     	;# 
   967  0017                     	;# 
   968  0018                     	;# 
   969  0019                     	;# 
   970  001A                     	;# 
   971  001B                     	;# 
   972  001C                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0090                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0099                     	;# 
   983  009A                     	;# 
   984  009B                     	;# 
   985  009B                     	;# 
   986  009C                     	;# 
   987  009D                     	;# 
   988  009E                     	;# 
   989  010C                     	;# 
   990  010D                     	;# 
   991  010E                     	;# 
   992  0116                     	;# 
   993  0117                     	;# 
   994  011D                     	;# 
   995  018C                     	;# 
   996  018D                     	;# 
   997  018E                     	;# 
   998  0191                     	;# 
   999  0191                     	;# 
  1000  0192                     	;# 
  1001  0193                     	;# 
  1002  0193                     	;# 
  1003  0194                     	;# 
  1004  0195                     	;# 
  1005  0196                     	;# 
  1006  0197                     	;# 
  1007  0199                     	;# 
  1008  019A                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019C                     	;# 
  1014  019C                     	;# 
  1015  019D                     	;# 
  1016  019E                     	;# 
  1017  019F                     	;# 
  1018  020D                     	;# 
  1019  0210                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0291                     	;# 
  1036  0291                     	;# 
  1037  0292                     	;# 
  1038  0293                     	;# 
  1039  0298                     	;# 
  1040  0298                     	;# 
  1041  0299                     	;# 
  1042  029A                     	;# 
  1043  0394                     	;# 
  1044  0395                     	;# 
  1045  0396                     	;# 
  1046  0FE4                     	;# 
  1047  0FE5                     	;# 
  1048  0FE6                     	;# 
  1049  0FE7                     	;# 
  1050  0FE8                     	;# 
  1051  0FE9                     	;# 
  1052  0FEA                     	;# 
  1053  0FEB                     	;# 
  1054  0FED                     	;# 
  1055  0FEE                     	;# 
  1056  0FEF                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0008                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000D                     	;# 
  1071  000E                     	;# 
  1072  0010                     	;# 
  1073  0011                     	;# 
  1074  0012                     	;# 
  1075  0015                     	;# 
  1076  0016                     	;# 
  1077  0016                     	;# 
  1078  0017                     	;# 
  1079  0018                     	;# 
  1080  0019                     	;# 
  1081  001A                     	;# 
  1082  001B                     	;# 
  1083  001C                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  0090                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0095                     	;# 
  1091  0096                     	;# 
  1092  0097                     	;# 
  1093  0099                     	;# 
  1094  009A                     	;# 
  1095  009B                     	;# 
  1096  009B                     	;# 
  1097  009C                     	;# 
  1098  009D                     	;# 
  1099  009E                     	;# 
  1100  010C                     	;# 
  1101  010D                     	;# 
  1102  010E                     	;# 
  1103  0116                     	;# 
  1104  0117                     	;# 
  1105  011D                     	;# 
  1106  018C                     	;# 
  1107  018D                     	;# 
  1108  018E                     	;# 
  1109  0191                     	;# 
  1110  0191                     	;# 
  1111  0192                     	;# 
  1112  0193                     	;# 
  1113  0193                     	;# 
  1114  0194                     	;# 
  1115  0195                     	;# 
  1116  0196                     	;# 
  1117  0197                     	;# 
  1118  0199                     	;# 
  1119  019A                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019C                     	;# 
  1125  019C                     	;# 
  1126  019D                     	;# 
  1127  019E                     	;# 
  1128  019F                     	;# 
  1129  020D                     	;# 
  1130  0210                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  0291                     	;# 
  1147  0291                     	;# 
  1148  0292                     	;# 
  1149  0293                     	;# 
  1150  0298                     	;# 
  1151  0298                     	;# 
  1152  0299                     	;# 
  1153  029A                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE9                     	;# 
  1163  0FEA                     	;# 
  1164  0FEB                     	;# 
  1165  0FED                     	;# 
  1166  0FEE                     	;# 
  1167  0FEF                     	;# 
  1168  0000                     	;# 
  1169  0001                     	;# 
  1170  0002                     	;# 
  1171  0003                     	;# 
  1172  0004                     	;# 
  1173  0005                     	;# 
  1174  0006                     	;# 
  1175  0007                     	;# 
  1176  0008                     	;# 
  1177  0009                     	;# 
  1178  000A                     	;# 
  1179  000B                     	;# 
  1180  000C                     	;# 
  1181  000D                     	;# 
  1182  000E                     	;# 
  1183  0010                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0015                     	;# 
  1187  0016                     	;# 
  1188  0016                     	;# 
  1189  0017                     	;# 
  1190  0018                     	;# 
  1191  0019                     	;# 
  1192  001A                     	;# 
  1193  001B                     	;# 
  1194  001C                     	;# 
  1195  008C                     	;# 
  1196  008D                     	;# 
  1197  008E                     	;# 
  1198  0090                     	;# 
  1199  0091                     	;# 
  1200  0092                     	;# 
  1201  0095                     	;# 
  1202  0096                     	;# 
  1203  0097                     	;# 
  1204  0099                     	;# 
  1205  009A                     	;# 
  1206  009B                     	;# 
  1207  009B                     	;# 
  1208  009C                     	;# 
  1209  009D                     	;# 
  1210  009E                     	;# 
  1211  010C                     	;# 
  1212  010D                     	;# 
  1213  010E                     	;# 
  1214  0116                     	;# 
  1215  0117                     	;# 
  1216  011D                     	;# 
  1217  018C                     	;# 
  1218  018D                     	;# 
  1219  018E                     	;# 
  1220  0191                     	;# 
  1221  0191                     	;# 
  1222  0192                     	;# 
  1223  0193                     	;# 
  1224  0193                     	;# 
  1225  0194                     	;# 
  1226  0195                     	;# 
  1227  0196                     	;# 
  1228  0197                     	;# 
  1229  0199                     	;# 
  1230  019A                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019C                     	;# 
  1236  019C                     	;# 
  1237  019D                     	;# 
  1238  019E                     	;# 
  1239  019F                     	;# 
  1240  020D                     	;# 
  1241  0210                     	;# 
  1242  0211                     	;# 
  1243  0211                     	;# 
  1244  0212                     	;# 
  1245  0212                     	;# 
  1246  0213                     	;# 
  1247  0213                     	;# 
  1248  0214                     	;# 
  1249  0214                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0215                     	;# 
  1253  0216                     	;# 
  1254  0216                     	;# 
  1255  0217                     	;# 
  1256  0217                     	;# 
  1257  0291                     	;# 
  1258  0291                     	;# 
  1259  0292                     	;# 
  1260  0293                     	;# 
  1261  0298                     	;# 
  1262  0298                     	;# 
  1263  0299                     	;# 
  1264  029A                     	;# 
  1265  0394                     	;# 
  1266  0395                     	;# 
  1267  0396                     	;# 
  1268  0FE4                     	;# 
  1269  0FE5                     	;# 
  1270  0FE6                     	;# 
  1271  0FE7                     	;# 
  1272  0FE8                     	;# 
  1273  0FE9                     	;# 
  1274  0FEA                     	;# 
  1275  0FEB                     	;# 
  1276  0FED                     	;# 
  1277  0FEE                     	;# 
  1278  0FEF                     	;# 
  1279  0000                     	;# 
  1280  0001                     	;# 
  1281  0002                     	;# 
  1282  0003                     	;# 
  1283  0004                     	;# 
  1284  0005                     	;# 
  1285  0006                     	;# 
  1286  0007                     	;# 
  1287  0008                     	;# 
  1288  0009                     	;# 
  1289  000A                     	;# 
  1290  000B                     	;# 
  1291  000C                     	;# 
  1292  000D                     	;# 
  1293  000E                     	;# 
  1294  0010                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0015                     	;# 
  1298  0016                     	;# 
  1299  0016                     	;# 
  1300  0017                     	;# 
  1301  0018                     	;# 
  1302  0019                     	;# 
  1303  001A                     	;# 
  1304  001B                     	;# 
  1305  001C                     	;# 
  1306  008C                     	;# 
  1307  008D                     	;# 
  1308  008E                     	;# 
  1309  0090                     	;# 
  1310  0091                     	;# 
  1311  0092                     	;# 
  1312  0095                     	;# 
  1313  0096                     	;# 
  1314  0097                     	;# 
  1315  0099                     	;# 
  1316  009A                     	;# 
  1317  009B                     	;# 
  1318  009B                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009E                     	;# 
  1322  010C                     	;# 
  1323  010D                     	;# 
  1324  010E                     	;# 
  1325  0116                     	;# 
  1326  0117                     	;# 
  1327  011D                     	;# 
  1328  018C                     	;# 
  1329  018D                     	;# 
  1330  018E                     	;# 
  1331  0191                     	;# 
  1332  0191                     	;# 
  1333  0192                     	;# 
  1334  0193                     	;# 
  1335  0193                     	;# 
  1336  0194                     	;# 
  1337  0195                     	;# 
  1338  0196                     	;# 
  1339  0197                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019C                     	;# 
  1347  019C                     	;# 
  1348  019D                     	;# 
  1349  019E                     	;# 
  1350  019F                     	;# 
  1351  020D                     	;# 
  1352  0210                     	;# 
  1353  0211                     	;# 
  1354  0211                     	;# 
  1355  0212                     	;# 
  1356  0212                     	;# 
  1357  0213                     	;# 
  1358  0213                     	;# 
  1359  0214                     	;# 
  1360  0214                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0216                     	;# 
  1365  0216                     	;# 
  1366  0217                     	;# 
  1367  0217                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0298                     	;# 
  1373  0298                     	;# 
  1374  0299                     	;# 
  1375  029A                     	;# 
  1376  0394                     	;# 
  1377  0395                     	;# 
  1378  0396                     	;# 
  1379  0FE4                     	;# 
  1380  0FE5                     	;# 
  1381  0FE6                     	;# 
  1382  0FE7                     	;# 
  1383  0FE8                     	;# 
  1384  0FE9                     	;# 
  1385  0FEA                     	;# 
  1386  0FEB                     	;# 
  1387  0FED                     	;# 
  1388  0FEE                     	;# 
  1389  0FEF                     	;# 
  1390  0000                     	;# 
  1391  0001                     	;# 
  1392  0002                     	;# 
  1393  0003                     	;# 
  1394  0004                     	;# 
  1395  0005                     	;# 
  1396  0006                     	;# 
  1397  0007                     	;# 
  1398  0008                     	;# 
  1399  0009                     	;# 
  1400  000A                     	;# 
  1401  000B                     	;# 
  1402  000C                     	;# 
  1403  000D                     	;# 
  1404  000E                     	;# 
  1405  0010                     	;# 
  1406  0011                     	;# 
  1407  0012                     	;# 
  1408  0015                     	;# 
  1409  0016                     	;# 
  1410  0016                     	;# 
  1411  0017                     	;# 
  1412  0018                     	;# 
  1413  0019                     	;# 
  1414  001A                     	;# 
  1415  001B                     	;# 
  1416  001C                     	;# 
  1417  008C                     	;# 
  1418  008D                     	;# 
  1419  008E                     	;# 
  1420  0090                     	;# 
  1421  0091                     	;# 
  1422  0092                     	;# 
  1423  0095                     	;# 
  1424  0096                     	;# 
  1425  0097                     	;# 
  1426  0099                     	;# 
  1427  009A                     	;# 
  1428  009B                     	;# 
  1429  009B                     	;# 
  1430  009C                     	;# 
  1431  009D                     	;# 
  1432  009E                     	;# 
  1433  010C                     	;# 
  1434  010D                     	;# 
  1435  010E                     	;# 
  1436  0116                     	;# 
  1437  0117                     	;# 
  1438  011D                     	;# 
  1439  018C                     	;# 
  1440  018D                     	;# 
  1441  018E                     	;# 
  1442  0191                     	;# 
  1443  0191                     	;# 
  1444  0192                     	;# 
  1445  0193                     	;# 
  1446  0193                     	;# 
  1447  0194                     	;# 
  1448  0195                     	;# 
  1449  0196                     	;# 
  1450  0197                     	;# 
  1451  0199                     	;# 
  1452  019A                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019D                     	;# 
  1460  019E                     	;# 
  1461  019F                     	;# 
  1462  020D                     	;# 
  1463  0210                     	;# 
  1464  0211                     	;# 
  1465  0211                     	;# 
  1466  0212                     	;# 
  1467  0212                     	;# 
  1468  0213                     	;# 
  1469  0213                     	;# 
  1470  0214                     	;# 
  1471  0214                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0215                     	;# 
  1475  0216                     	;# 
  1476  0216                     	;# 
  1477  0217                     	;# 
  1478  0217                     	;# 
  1479  0291                     	;# 
  1480  0291                     	;# 
  1481  0292                     	;# 
  1482  0293                     	;# 
  1483  0298                     	;# 
  1484  0298                     	;# 
  1485  0299                     	;# 
  1486  029A                     	;# 
  1487  0394                     	;# 
  1488  0395                     	;# 
  1489  0396                     	;# 
  1490  0FE4                     	;# 
  1491  0FE5                     	;# 
  1492  0FE6                     	;# 
  1493  0FE7                     	;# 
  1494  0FE8                     	;# 
  1495  0FE9                     	;# 
  1496  0FEA                     	;# 
  1497  0FEB                     	;# 
  1498  0FED                     	;# 
  1499  0FEE                     	;# 
  1500  0FEF                     	;# 
  1501  0000                     	;# 
  1502  0001                     	;# 
  1503  0002                     	;# 
  1504  0003                     	;# 
  1505  0004                     	;# 
  1506  0005                     	;# 
  1507  0006                     	;# 
  1508  0007                     	;# 
  1509  0008                     	;# 
  1510  0009                     	;# 
  1511  000A                     	;# 
  1512  000B                     	;# 
  1513  000C                     	;# 
  1514  000D                     	;# 
  1515  000E                     	;# 
  1516  0010                     	;# 
  1517  0011                     	;# 
  1518  0012                     	;# 
  1519  0015                     	;# 
  1520  0016                     	;# 
  1521  0016                     	;# 
  1522  0017                     	;# 
  1523  0018                     	;# 
  1524  0019                     	;# 
  1525  001A                     	;# 
  1526  001B                     	;# 
  1527  001C                     	;# 
  1528  008C                     	;# 
  1529  008D                     	;# 
  1530  008E                     	;# 
  1531  0090                     	;# 
  1532  0091                     	;# 
  1533  0092                     	;# 
  1534  0095                     	;# 
  1535  0096                     	;# 
  1536  0097                     	;# 
  1537  0099                     	;# 
  1538  009A                     	;# 
  1539  009B                     	;# 
  1540  009B                     	;# 
  1541  009C                     	;# 
  1542  009D                     	;# 
  1543  009E                     	;# 
  1544  010C                     	;# 
  1545  010D                     	;# 
  1546  010E                     	;# 
  1547  0116                     	;# 
  1548  0117                     	;# 
  1549  011D                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0191                     	;# 
  1554  0191                     	;# 
  1555  0192                     	;# 
  1556  0193                     	;# 
  1557  0193                     	;# 
  1558  0194                     	;# 
  1559  0195                     	;# 
  1560  0196                     	;# 
  1561  0197                     	;# 
  1562  0199                     	;# 
  1563  019A                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019C                     	;# 
  1569  019C                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  020D                     	;# 
  1574  0210                     	;# 
  1575  0211                     	;# 
  1576  0211                     	;# 
  1577  0212                     	;# 
  1578  0212                     	;# 
  1579  0213                     	;# 
  1580  0213                     	;# 
  1581  0214                     	;# 
  1582  0214                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0216                     	;# 
  1587  0216                     	;# 
  1588  0217                     	;# 
  1589  0217                     	;# 
  1590  0291                     	;# 
  1591  0291                     	;# 
  1592  0292                     	;# 
  1593  0293                     	;# 
  1594  0298                     	;# 
  1595  0298                     	;# 
  1596  0299                     	;# 
  1597  029A                     	;# 
  1598  0394                     	;# 
  1599  0395                     	;# 
  1600  0396                     	;# 
  1601  0FE4                     	;# 
  1602  0FE5                     	;# 
  1603  0FE6                     	;# 
  1604  0FE7                     	;# 
  1605  0FE8                     	;# 
  1606  0FE9                     	;# 
  1607  0FEA                     	;# 
  1608  0FEB                     	;# 
  1609  0FED                     	;# 
  1610  0FEE                     	;# 
  1611  0FEF                     	;# 
  1612  0000                     	;# 
  1613  0001                     	;# 
  1614  0002                     	;# 
  1615  0003                     	;# 
  1616  0004                     	;# 
  1617  0005                     	;# 
  1618  0006                     	;# 
  1619  0007                     	;# 
  1620  0008                     	;# 
  1621  0009                     	;# 
  1622  000A                     	;# 
  1623  000B                     	;# 
  1624  000C                     	;# 
  1625  000D                     	;# 
  1626  000E                     	;# 
  1627  0010                     	;# 
  1628  0011                     	;# 
  1629  0012                     	;# 
  1630  0015                     	;# 
  1631  0016                     	;# 
  1632  0016                     	;# 
  1633  0017                     	;# 
  1634  0018                     	;# 
  1635  0019                     	;# 
  1636  001A                     	;# 
  1637  001B                     	;# 
  1638  001C                     	;# 
  1639  008C                     	;# 
  1640  008D                     	;# 
  1641  008E                     	;# 
  1642  0090                     	;# 
  1643  0091                     	;# 
  1644  0092                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0099                     	;# 
  1649  009A                     	;# 
  1650  009B                     	;# 
  1651  009B                     	;# 
  1652  009C                     	;# 
  1653  009D                     	;# 
  1654  009E                     	;# 
  1655  010C                     	;# 
  1656  010D                     	;# 
  1657  010E                     	;# 
  1658  0116                     	;# 
  1659  0117                     	;# 
  1660  011D                     	;# 
  1661  018C                     	;# 
  1662  018D                     	;# 
  1663  018E                     	;# 
  1664  0191                     	;# 
  1665  0191                     	;# 
  1666  0192                     	;# 
  1667  0193                     	;# 
  1668  0193                     	;# 
  1669  0194                     	;# 
  1670  0195                     	;# 
  1671  0196                     	;# 
  1672  0197                     	;# 
  1673  0199                     	;# 
  1674  019A                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  019C                     	;# 
  1681  019D                     	;# 
  1682  019E                     	;# 
  1683  019F                     	;# 
  1684  020D                     	;# 
  1685  0210                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0216                     	;# 
  1698  0216                     	;# 
  1699  0217                     	;# 
  1700  0217                     	;# 
  1701  0291                     	;# 
  1702  0291                     	;# 
  1703  0292                     	;# 
  1704  0293                     	;# 
  1705  0298                     	;# 
  1706  0298                     	;# 
  1707  0299                     	;# 
  1708  029A                     	;# 
  1709  0394                     	;# 
  1710  0395                     	;# 
  1711  0396                     	;# 
  1712  0FE4                     	;# 
  1713  0FE5                     	;# 
  1714  0FE6                     	;# 
  1715  0FE7                     	;# 
  1716  0FE8                     	;# 
  1717  0FE9                     	;# 
  1718  0FEA                     	;# 
  1719  0FEB                     	;# 
  1720  0FED                     	;# 
  1721  0FEE                     	;# 
  1722  0FEF                     	;# 
  1723  0000                     	;# 
  1724  0001                     	;# 
  1725  0002                     	;# 
  1726  0003                     	;# 
  1727  0004                     	;# 
  1728  0005                     	;# 
  1729  0006                     	;# 
  1730  0007                     	;# 
  1731  0008                     	;# 
  1732  0009                     	;# 
  1733  000A                     	;# 
  1734  000B                     	;# 
  1735  000C                     	;# 
  1736  000D                     	;# 
  1737  000E                     	;# 
  1738  0010                     	;# 
  1739  0011                     	;# 
  1740  0012                     	;# 
  1741  0015                     	;# 
  1742  0016                     	;# 
  1743  0016                     	;# 
  1744  0017                     	;# 
  1745  0018                     	;# 
  1746  0019                     	;# 
  1747  001A                     	;# 
  1748  001B                     	;# 
  1749  001C                     	;# 
  1750  008C                     	;# 
  1751  008D                     	;# 
  1752  008E                     	;# 
  1753  0090                     	;# 
  1754  0091                     	;# 
  1755  0092                     	;# 
  1756  0095                     	;# 
  1757  0096                     	;# 
  1758  0097                     	;# 
  1759  0099                     	;# 
  1760  009A                     	;# 
  1761  009B                     	;# 
  1762  009B                     	;# 
  1763  009C                     	;# 
  1764  009D                     	;# 
  1765  009E                     	;# 
  1766  010C                     	;# 
  1767  010D                     	;# 
  1768  010E                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  011D                     	;# 
  1772  018C                     	;# 
  1773  018D                     	;# 
  1774  018E                     	;# 
  1775  0191                     	;# 
  1776  0191                     	;# 
  1777  0192                     	;# 
  1778  0193                     	;# 
  1779  0193                     	;# 
  1780  0194                     	;# 
  1781  0195                     	;# 
  1782  0196                     	;# 
  1783  0197                     	;# 
  1784  0199                     	;# 
  1785  019A                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019C                     	;# 
  1791  019C                     	;# 
  1792  019D                     	;# 
  1793  019E                     	;# 
  1794  019F                     	;# 
  1795  020D                     	;# 
  1796  0210                     	;# 
  1797  0211                     	;# 
  1798  0211                     	;# 
  1799  0212                     	;# 
  1800  0212                     	;# 
  1801  0213                     	;# 
  1802  0213                     	;# 
  1803  0214                     	;# 
  1804  0214                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0215                     	;# 
  1808  0216                     	;# 
  1809  0216                     	;# 
  1810  0217                     	;# 
  1811  0217                     	;# 
  1812  0291                     	;# 
  1813  0291                     	;# 
  1814  0292                     	;# 
  1815  0293                     	;# 
  1816  0298                     	;# 
  1817  0298                     	;# 
  1818  0299                     	;# 
  1819  029A                     	;# 
  1820  0394                     	;# 
  1821  0395                     	;# 
  1822  0396                     	;# 
  1823  0FE4                     	;# 
  1824  0FE5                     	;# 
  1825  0FE6                     	;# 
  1826  0FE7                     	;# 
  1827  0FE8                     	;# 
  1828  0FE9                     	;# 
  1829  0FEA                     	;# 
  1830  0FEB                     	;# 
  1831  0FED                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;# 
  1834  0000                     	;# 
  1835  0001                     	;# 
  1836  0002                     	;# 
  1837  0003                     	;# 
  1838  0004                     	;# 
  1839  0005                     	;# 
  1840  0006                     	;# 
  1841  0007                     	;# 
  1842  0008                     	;# 
  1843  0009                     	;# 
  1844  000A                     	;# 
  1845  000B                     	;# 
  1846  000C                     	;# 
  1847  000D                     	;# 
  1848  000E                     	;# 
  1849  0010                     	;# 
  1850  0011                     	;# 
  1851  0012                     	;# 
  1852  0015                     	;# 
  1853  0016                     	;# 
  1854  0016                     	;# 
  1855  0017                     	;# 
  1856  0018                     	;# 
  1857  0019                     	;# 
  1858  001A                     	;# 
  1859  001B                     	;# 
  1860  001C                     	;# 
  1861  008C                     	;# 
  1862  008D                     	;# 
  1863  008E                     	;# 
  1864  0090                     	;# 
  1865  0091                     	;# 
  1866  0092                     	;# 
  1867  0095                     	;# 
  1868  0096                     	;# 
  1869  0097                     	;# 
  1870  0099                     	;# 
  1871  009A                     	;# 
  1872  009B                     	;# 
  1873  009B                     	;# 
  1874  009C                     	;# 
  1875  009D                     	;# 
  1876  009E                     	;# 
  1877  010C                     	;# 
  1878  010D                     	;# 
  1879  010E                     	;# 
  1880  0116                     	;# 
  1881  0117                     	;# 
  1882  011D                     	;# 
  1883  018C                     	;# 
  1884  018D                     	;# 
  1885  018E                     	;# 
  1886  0191                     	;# 
  1887  0191                     	;# 
  1888  0192                     	;# 
  1889  0193                     	;# 
  1890  0193                     	;# 
  1891  0194                     	;# 
  1892  0195                     	;# 
  1893  0196                     	;# 
  1894  0197                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019C                     	;# 
  1902  019C                     	;# 
  1903  019D                     	;# 
  1904  019E                     	;# 
  1905  019F                     	;# 
  1906  020D                     	;# 
  1907  0210                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0213                     	;# 
  1914  0214                     	;# 
  1915  0214                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0216                     	;# 
  1920  0216                     	;# 
  1921  0217                     	;# 
  1922  0217                     	;# 
  1923  0291                     	;# 
  1924  0291                     	;# 
  1925  0292                     	;# 
  1926  0293                     	;# 
  1927  0298                     	;# 
  1928  0298                     	;# 
  1929  0299                     	;# 
  1930  029A                     	;# 
  1931  0394                     	;# 
  1932  0395                     	;# 
  1933  0396                     	;# 
  1934  0FE4                     	;# 
  1935  0FE5                     	;# 
  1936  0FE6                     	;# 
  1937  0FE7                     	;# 
  1938  0FE8                     	;# 
  1939  0FE9                     	;# 
  1940  0FEA                     	;# 
  1941  0FEB                     	;# 
  1942  0FED                     	;# 
  1943  0FEE                     	;# 
  1944  0FEF                     	;# 
  1945                           
  1946                           	psect	idataBANK3
  1947  18D6                     __pidataBANK3:	
  1948                           
  1949                           ;initializer for _VarProduct
  1950  18D6  3463               	retlw	99
  1951  18D7  3402               	retlw	2
  1952  18D8  3400               	retlw	0
  1953  18D9  3400               	retlw	0
  1954  18DA  3400               	retlw	0
  1955  18DB  3400               	retlw	0
  1956  18DC  3400               	retlw	0
  1957  18DD  3400               	retlw	0
  1958  18DE  3400               	retlw	0
  1959  18DF  3400               	retlw	0
  1960  18E0  3400               	retlw	0
  1961  18E1  3400               	retlw	0
  1962  18E2  34FF               	retlw	255
  1963  18E3  34FF               	retlw	255
  1964  18E4  34FF               	retlw	255
  1965  18E5  3400               	retlw	0
  1966  18E6  3400               	retlw	0
  1967  18E7  3400               	retlw	0
  1968  18E8  3400               	retlw	0
  1969  18E9  3400               	retlw	0
  1970  18EA  3400               	retlw	0
  1971  18EB  3400               	retlw	0
  1972  18EC  3400               	retlw	0
  1973  18ED  3400               	retlw	0
  1974  18EE  3400               	retlw	0
  1975  18EF  3400               	retlw	0
  1976  18F0  3400               	retlw	0
  1977  18F1  3400               	retlw	0
  1978  18F2  3400               	retlw	0
  1979  18F3  3400               	retlw	0
  1980  18F4  3400               	retlw	0
  1981  18F5  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext
  1984  1800                     __pstringtext:	
  1985  1800                     _CC2500_registers_address:	
  1986  1800  3403               	retlw	3
  1987  1801  3416               	retlw	22
  1988  1802  3417               	retlw	23
  1989  1803  341E               	retlw	30
  1990  1804  341F               	retlw	31
  1991  1805  3420               	retlw	32
  1992  1806  342A               	retlw	42
  1993  1807  342B               	retlw	43
  1994  1808  340B               	retlw	11
  1995  1809  340C               	retlw	12
  1996  180A  340D               	retlw	13
  1997  180B  340E               	retlw	14
  1998  180C  340F               	retlw	15
  1999  180D  3410               	retlw	16
  2000  180E  3411               	retlw	17
  2001  180F  3412               	retlw	18
  2002  1810  3413               	retlw	19
  2003  1811  3414               	retlw	20
  2004  1812  340A               	retlw	10
  2005  1813  3415               	retlw	21
  2006  1814  3421               	retlw	33
  2007  1815  3422               	retlw	34
  2008  1816  3418               	retlw	24
  2009  1817  3419               	retlw	25
  2010  1818  341A               	retlw	26
  2011  1819  341B               	retlw	27
  2012  181A  341C               	retlw	28
  2013  181B  341D               	retlw	29
  2014  181C  3423               	retlw	35
  2015  181D  3424               	retlw	36
  2016  181E  3425               	retlw	37
  2017  181F  3426               	retlw	38
  2018  1820  3429               	retlw	41
  2019  1821  342C               	retlw	44
  2020  1822  342D               	retlw	45
  2021  1823  342E               	retlw	46
  2022  1824  3400               	retlw	0
  2023  1825  3401               	retlw	1
  2024  1826  3402               	retlw	2
  2025  1827  3407               	retlw	7
  2026  1828  3408               	retlw	8
  2027  1829  3409               	retlw	9
  2028  182A  3406               	retlw	6
  2029  182B  3404               	retlw	4
  2030  182C  3405               	retlw	5
  2031  182D  3427               	retlw	39
  2032  182E  3428               	retlw	40
  2033  182F                     __end_of_CC2500_registers_address:	
  2034  182F                     _CC2500_rfSettings:	
  2035  182F  3407               	retlw	7
  2036  1830  3407               	retlw	7
  2037  1831  3430               	retlw	48
  2038  1832  3487               	retlw	135
  2039  1833  346B               	retlw	107
  2040  1834  34F8               	retlw	248
  2041  1835  347F               	retlw	127
  2042  1836  343F               	retlw	63
  2043  1837  3409               	retlw	9
  2044  1838  3400               	retlw	0
  2045  1839  345C               	retlw	92
  2046  183A  34A7               	retlw	167
  2047  183B  3462               	retlw	98
  2048  183C  3486               	retlw	134
  2049  183D  3483               	retlw	131
  2050  183E  3403               	retlw	3
  2051  183F  3422               	retlw	34
  2052  1840  34F8               	retlw	248
  2053  1841  3400               	retlw	0
  2054  1842  3444               	retlw	68
  2055  1843  34B6               	retlw	182
  2056  1844  3410               	retlw	16
  2057  1845  3418               	retlw	24
  2058  1846  341D               	retlw	29
  2059  1847  341C               	retlw	28
  2060  1848  34C7               	retlw	199
  2061  1849  3400               	retlw	0
  2062  184A  34B2               	retlw	178
  2063  184B  34EA               	retlw	234
  2064  184C  340A               	retlw	10
  2065  184D  3400               	retlw	0
  2066  184E  3411               	retlw	17
  2067  184F  3459               	retlw	89
  2068  1850  3488               	retlw	136
  2069  1851  3431               	retlw	49
  2070  1852  340B               	retlw	11
  2071  1853  342F               	retlw	47
  2072  1854  342E               	retlw	46
  2073  1855  3406               	retlw	6
  2074  1856  3404               	retlw	4
  2075  1857  3405               	retlw	5
  2076  1858  3400               	retlw	0
  2077  1859  3430               	retlw	48
  2078  185A  34D3               	retlw	211
  2079  185B  3491               	retlw	145
  2080  185C  3441               	retlw	65
  2081  185D  3400               	retlw	0
  2082  185E                     __end_of_CC2500_rfSettings:	
  2083  185E                     _CC2500_patable_vaule:	
  2084  185E  34FE               	retlw	254
  2085  185F  34FE               	retlw	254
  2086  1860  34FE               	retlw	254
  2087  1861  34FE               	retlw	254
  2088  1862  34FE               	retlw	254
  2089  1863  34FE               	retlw	254
  2090  1864  34FE               	retlw	254
  2091  1865  34FE               	retlw	254
  2092  1866                     __end_of_CC2500_patable_vaule:	
  2093                           
  2094                           	psect	nvCOMMON
  2095  007D                     __pnvCOMMON:	
  2096  007D                     _TMain:	
  2097  007D                     	ds	1
  2098                           
  2099                           	psect	nvBANK0
  2100  006F                     __pnvBANK0:	
  2101  006F                     _Product:	
  2102  006F                     	ds	1
  2103                           
  2104                           	psect	nvBANK1
  2105  00E7                     __pnvBANK1:	
  2106  00E7                     _Memory:	
  2107  00E7                     	ds	1
  2108  00E8                     _Timer0:	
  2109  00E8                     	ds	1
  2110  00E9                     _WDT:	
  2111  00E9                     	ds	1
  2112  000C                     _PORTA	set	12
  2113  000D                     _PORTB	set	13
  2114  000E                     _PORTC	set	14
  2115  0015                     _TMR0	set	21
  2116  005F                     _GIE	set	95
  2117  005C                     _INTE	set	92
  2118  0059                     _INTF	set	89
  2119  005B                     _IOCIE	set	91
  2120  0058                     _IOCIF	set	88
  2121  005E                     _PEIE	set	94
  2122  0060                     _RA0	set	96
  2123  0063                     _RA3	set	99
  2124  0064                     _RA4	set	100
  2125  0066                     _RA6	set	102
  2126  0067                     _RA7	set	103
  2127  0068                     _RB0	set	104
  2128  0069                     _RB1	set	105
  2129  006A                     _RB2	set	106
  2130  006B                     _RB3	set	107
  2131  006C                     _RB4	set	108
  2132  006D                     _RB5	set	109
  2133  0070                     _RC0	set	112
  2134  0071                     _RC1	set	113
  2135  0072                     _RC2	set	114
  2136  0074                     _RC4	set	116
  2137  0075                     _RC5	set	117
  2138  0077                     _RC7	set	119
  2139  005D                     _TMR0IE	set	93
  2140  005A                     _TMR0IF	set	90
  2141  009D                     _ADCON0	set	157
  2142  009E                     _ADCON1	set	158
  2143  009C                     _ADRESH	set	156
  2144  009B                     _ADRESL	set	155
  2145  0095                     _OPTION_REG	set	149
  2146  0099                     _OSCCON	set	153
  2147  008C                     _TRISA	set	140
  2148  008D                     _TRISB	set	141
  2149  008E                     _TRISC	set	142
  2150  0097                     _WDTCON	set	151
  2151  04E9                     _GO_nDONE	set	1257
  2152  0117                     _FVRCON	set	279
  2153  010C                     _LATA	set	268
  2154  010D                     _LATB	set	269
  2155  010E                     _LATC	set	270
  2156  018C                     _ANSELA	set	396
  2157  018D                     _ANSELB	set	397
  2158  018E                     _ANSELC	set	398
  2159  0192                     _PMADRH	set	402
  2160  0191                     _PMADRL	set	401
  2161  0196                     _PMCON2	set	406
  2162  0194                     _PMDATH	set	404
  2163  0193                     _PMDATL	set	403
  2164  0CAE                     _CFGS	set	3246
  2165  0CAC                     _FREE	set	3244
  2166  0CAD                     _LWLO	set	3245
  2167  0CA8                     _RD	set	3240
  2168  0CA9                     _WR	set	3241
  2169  0CAA                     _WREN	set	3242
  2170  1068                     _WPUB0	set	4200
  2171  1069                     _WPUB1	set	4201
  2172  106A                     _WPUB2	set	4202
  2173  0396                     _IOCBF	set	918
  2174  0395                     _IOCBN	set	917
  2175  0394                     _IOCBP	set	916
  2176  1CB2                     _IOCBF2	set	7346
  2177                           
  2178                           ; #config settings
  2179  0000                     
  2180                           	psect	cinit
  2181  0018                     start_initialization:	
  2182  0018                     __initialization:	
  2183                           
  2184                           ; Clear objects allocated to BITCOMMON
  2185  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2186                           
  2187                           ; Clear objects allocated to COMMON
  2188  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2189  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2190  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2191  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2192  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2193                           
  2194                           ; Clear objects allocated to BANK0
  2195  001E  01EC               	clrf	__pbssBANK0& (0+127)
  2196  001F  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2197  0020  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2198                           
  2199                           ; Clear objects allocated to BANK1
  2200  0021  30A0               	movlw	low __pbssBANK1
  2201  0022  0084               	movwf	4
  2202  0023  3000               	movlw	high __pbssBANK1
  2203  0024  0085               	movwf	5
  2204  0025  3047               	movlw	71
  2205  0026  31A4  24A6  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK2
  2208  0029  3020               	movlw	low __pbssBANK2
  2209  002A  0084               	movwf	4
  2210  002B  3001               	movlw	high __pbssBANK2
  2211  002C  0085               	movwf	5
  2212  002D  304A               	movlw	74
  2213  002E  31A4  24A6  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Clear objects allocated to BANK3
  2216  0031  30A0               	movlw	low __pbssBANK3
  2217  0032  0084               	movwf	4
  2218  0033  3001               	movlw	high __pbssBANK3
  2219  0034  0085               	movwf	5
  2220  0035  3025               	movlw	37
  2221  0036  31A4  24A6  3180   	fcall	clear_ram0
  2222                           
  2223                           ; Clear objects allocated to BANK4
  2224  0039  3020               	movlw	low __pbssBANK4
  2225  003A  0084               	movwf	4
  2226  003B  3002               	movlw	high __pbssBANK4
  2227  003C  0085               	movwf	5
  2228  003D  3047               	movlw	71
  2229  003E  31A4  24A6  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Initialize objects allocated to BANK3
  2232  0041  30D6               	movlw	low __pidataBANK3
  2233  0042  0084               	movwf	4
  2234  0043  3098               	movlw	(high __pidataBANK3)| (0+128)
  2235  0044  0085               	movwf	5
  2236  0045  30C5               	movlw	low __pdataBANK3
  2237  0046  0086               	movwf	6
  2238  0047  3001               	movlw	high __pdataBANK3
  2239  0048  0087               	movwf	7
  2240  0049  3020               	movlw	32
  2241  004A  31A4  24A0         	fcall	init_ram
  2242  004C                     end_of_initialization:	
  2243                           ;End of C runtime variable initialization code
  2244                           
  2245  004C                     __end_of__initialization:	
  2246  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2247  004D  0020               	movlb	0
  2248  004E  3194  2C35         	ljmp	_main	;jump to C main() function
  2249                           
  2250                           	psect	bitbssCOMMON
  2251  0380                     __pbitbssCOMMON:	
  2252  0380                     _CC2500_Enable:	
  2253  0380                     	ds	1
  2254  0381                     _Receive_GO:	
  2255  0381                     	ds	1
  2256  0382                     _Receive_OK:	
  2257  0382                     	ds	1
  2258  0383                     _RxStatus:	
  2259  0383                     	ds	1
  2260  0384                     _Transceive_GO:	
  2261  0384                     	ds	1
  2262  0385                     _Transceive_OK:	
  2263  0385                     	ds	1
  2264  0386                     _TxStatus:	
  2265  0386                     	ds	1
  2266                           
  2267                           	psect	bssCOMMON
  2268  0078                     __pbssCOMMON:	
  2269  0078                     _Buz:	
  2270  0078                     	ds	1
  2271  0079                     _DimmerLights11:	
  2272  0079                     	ds	1
  2273  007A                     _PF:	
  2274  007A                     	ds	1
  2275  007B                     _RF:	
  2276  007B                     	ds	1
  2277  007C                     _Temp:	
  2278  007C                     	ds	1
  2279                           
  2280                           	psect	bssBANK0
  2281  006C                     __pbssBANK0:	
  2282  006C                     _DimmerLights:	
  2283  006C                     	ds	1
  2284  006D                     _Sw:	
  2285  006D                     	ds	1
  2286  006E                     _Load:	
  2287  006E                     	ds	1
  2288                           
  2289                           	psect	bssBANK1
  2290  00A0                     __pbssBANK1:	
  2291  00A0                     _RF_Data:	
  2292  00A0                     	ds	21
  2293  00B5                     _RF_Count:	
  2294  00B5                     	ds	2
  2295  00B7                     _CRC:	
  2296  00B7                     	ds	1
  2297  00B8                     _DelayOff:	
  2298  00B8                     	ds	1
  2299  00B9                     _Dimmer:	
  2300  00B9                     	ds	1
  2301  00BA                     _DimmerLightsIntr:	
  2302  00BA                     	ds	1
  2303  00BB                     _LED:	
  2304  00BB                     	ds	1
  2305  00BC                     _RFSW:	
  2306  00BC                     	ds	1
  2307  00BD                     _RSSI:	
  2308  00BD                     	ds	1
  2309  00BE                     _Rx_Length:	
  2310  00BE                     	ds	1
  2311  00BF                     _SPI0Buffer:	
  2312  00BF                     	ds	1
  2313  00C0                     _Tx_Length:	
  2314  00C0                     	ds	1
  2315  00C1                     _r_address:	
  2316  00C1                     	ds	1
  2317  00C2                     _r_data:	
  2318  00C2                     	ds	1
  2319  00C3                     _s_data:	
  2320  00C3                     	ds	1
  2321  00C4                     _VarTimer0:	
  2322  00C4                     	ds	9
  2323  00CD                     _DlySw1:	
  2324  00CD                     	ds	5
  2325  00D2                     _VarErrLED:	
  2326  00D2                     	ds	4
  2327  00D6                     _VarLED1:	
  2328  00D6                     	ds	4
  2329  00DA                     _VarLED2:	
  2330  00DA                     	ds	4
  2331  00DE                     _Dimmer1:	
  2332  00DE                     	ds	3
  2333  00E1                     _RF1:	
  2334  00E1                     	ds	3
  2335  00E4                     __WDT:	
  2336  00E4                     	ds	2
  2337  00E6                     _RFSW1:	
  2338  00E6                     	ds	1
  2339                           
  2340                           	psect	bssBANK2
  2341  0120                     __pbssBANK2:	
  2342  0120                     _VarTMain:	
  2343  0120                     	ds	17
  2344  0131                     _DimmerLights1:	
  2345  0131                     	ds	14
  2346  013F                     _Temp1:	
  2347  013F                     	ds	14
  2348  014D                     _Buz1:	
  2349  014D                     	ds	12
  2350  0159                     _Sw1:	
  2351  0159                     	ds	9
  2352  0162                     _PF1:	
  2353  0162                     	ds	8
  2354                           
  2355                           	psect	bssBANK3
  2356  01A0                     __pbssBANK3:	
  2357  01A0                     _VarMemory:	
  2358  01A0                     	ds	37
  2359                           
  2360                           	psect	dataBANK3
  2361  01C5                     __pdataBANK3:	
  2362  01C5                     _VarProduct:	
  2363  01C5                     	ds	32
  2364                           
  2365                           	psect	bssBANK4
  2366  0220                     __pbssBANK4:	
  2367  0220                     _Load1:	
  2368  0220                     	ds	71
  2369                           
  2370                           	psect	clrtext
  2371  24A6                     clear_ram0:	
  2372                           ;	Called with FSR0 containing the base address, and
  2373                           ;	WREG with the size to clear
  2374                           
  2375  24A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2376  24A7                     clrloop0:	
  2377  24A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2378  24A8  3101               	addfsr 0,1
  2379  24A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2380  24AA  2CA7               	goto	clrloop0	;have we reached the end yet?
  2381  24AB  3400               	retlw	0	;all done for this memory range, return
  2382                           
  2383                           	psect	inittext
  2384  24A0                     init_ram:	
  2385  24A0  00FE               	movwf	126
  2386  24A1                     initloop:	
  2387  24A1  0012               	moviw fsr0++
  2388  24A2  001E               	movwi fsr1++
  2389  24A3  0BFE               	decfsz	126,f
  2390  24A4  2CA1               	goto	initloop
  2391  24A5  3400               	retlw	0
  2392                           
  2393                           	psect	cstackCOMMON
  2394  0071                     __pcstackCOMMON:	
  2395  0071                     ?_CC2500_WriteByte:	
  2396  0071                     ?_CC2500_WriteCommand:	
  2397                           ; 0 bytes @ 0x0
  2398                           
  2399  0071                     ?_CC2500_ReadStatus:	
  2400                           ; 0 bytes @ 0x0
  2401                           
  2402  0071                     ?_CC2500_ReadByte:	
  2403                           ; 0 bytes @ 0x0
  2404                           
  2405  0071                     ?_CC2500_PowerRST:	
  2406                           ; 0 bytes @ 0x0
  2407                           
  2408  0071                     ?_CC2500_InitSetREG:	
  2409                           ; 0 bytes @ 0x0
  2410                           
  2411  0071                     ?_CC2500_InitPATable:	
  2412                           ; 0 bytes @ 0x0
  2413                           
  2414  0071                     ?_CC2500_ClearTXFIFO:	
  2415                           ; 0 bytes @ 0x0
  2416                           
  2417  0071                     ?_CC2500_ClearRXFIFO:	
  2418                           ; 0 bytes @ 0x0
  2419                           
  2420  0071                     ?_CC2500_FrequencyCabr:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0071                     ?_CC2500_SIDLEMode:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0071                     ?_DlyOff_Initialization:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0071                     ?_DlyOff_Main:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0071                     ?_setTxData:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0071                     ?_setDimmerLights_Initialization:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0071                     ?_Dimmer_Initialization:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0071                     ?_setLoad_GO:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0071                     ?_setDimmerLights_Main:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0071                     ?_setDimmerLights_ERROR:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0071                     ?_setLoad_Count:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0071                     ?_setLED_Initialization:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0071                     ?_setLED_Main:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0071                     ?_MainT_Initialization:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0071                     ?_Mcu_Initialization:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0071                     ?_Flash_Memory_Initialization:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0071                     ?_Temp_Initialization:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0071                     ?_Load_Initialization:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0071                     ?_PowerFault_Initialization:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0071                     ?_Switch_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0071                     ?_RF_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0071                     ?_getLoad_AD:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0071                     ?_getTemp_AD:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0071                     ?_getPowerFault_AD:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0071                     ?_MainT:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0071                     ?_WDT_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0071                     ?_Flash_Memory_Main:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0071                     ?_Temp_Main:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0071                     ?_Load_Main:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0071                     ?_PowerFault_Main:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0071                     ?_Switch_Main:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0071                     ?_RF_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0071                     ?_setTemp_Enable:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0071                     ?_setLoad_Enable:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0071                     ?_setSw_Enable:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0071                     ?_IO_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0071                     ?_TMR0_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0071                     ?_ADC_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0071                     ?_INT_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0071                     ?_IOC_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0071                     ?_WDT_Set:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0071                     ?_IOC_ISR:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0071                     ??_IOC_ISR:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0071                     ?_TMR0_ISR:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0071                     ?_INT_ISR:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0071                     ?_Flash_Memory_Write:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0071                     ?_Flash_Memory_Modify:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0071                     ?_WDT_Clearing:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0071                     ?_setLoad_AH_AL_Restore:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0071                     ?_setLoad_Exceptions:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0071                     ?_setTemp_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0071                     ?_setTemp_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0071                     ?_setOverTemp_Exceptions:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0071                     ?_setPowerFault_Initialization:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0071                     ?_setPowerFault_Main:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0071                     ?_setPowerFault_Exceptions:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0071                     ?_setRF_Initialization:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0071                     ?_setRF_Main:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0071                     ?_getRxData:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0071                     ?_RF_RxDisable:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0071                     ?_setLog_Code:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0071                     ?_setControl_Lights_Table:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0071                     ?_setRFSW_Control:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0071                     ?_setRFSW_AdjControl:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0071                     ?_setRF_DimmerValue:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0071                     ?_setSw_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0071                     ?_setSw_Main:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0071                     ?_Sw_DimmerOnFunc:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0071                     ?_Sw_DimmerAdjFunc:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0071                     ?_Sw_DimmerOffFunc:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0071                     ?_Buzzer_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0071                     ?_Buzzer_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0071                     ?_CC2500_TxData:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0071                     ?_CC2500_RxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0071                     ?_CC2500_PowerOnInitial:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0071                     ?_DelayOffPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0071                     ?_DelayOff_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0071                     ?_DelayOff_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0071                     ?_DimmerLightsPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0071                     ?_DimmerLights_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0071                     ?_DimmerLights_Close:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0071                     ?_DimmerLights_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0071                     ?_DimmerLights_Exceptions:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0071                     ?_setDimmerLights_AdjRF:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0071                     ?_LedPointSelect:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0071                     ?_LED_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0071                     ?_LED_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0071                     ?_main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0071                     ?_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0071                     ?_setDimmerReClock:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0071                     ??_setDimmerReClock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0071                     ?_setINT_GO:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0071                     ?_Flash_Memory_Unlock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0071                     ?_Flash_Memory_Erasing:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0071                     ?_RfPointSelect:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0071                     ?_RfSWPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0071                     ?_TouchPower:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0071                     ?_SwPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0071                     ?i1_setLoad_StatusOff:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0071                     ?i1_RfPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0071                     ??i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0071                     ?_DelayTimejudge:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0071                     ?_getDimmerLights_StatusFlag:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0071                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0071                     ?_Flash_Memory_Read:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0071                     ?_getTemp_Safe:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0071                     ?_getPF_Safe:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0071                     ?_setPercentValue:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0071                     ?_getLoad_Safe:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0071                     setRF_Initialization@rf:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0071                     i1setLoad_StatusOff@command:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x0
  2755  0071                     	ds	1
  2756  0072                     ??i1_setLoad_StatusOff:	
  2757  0072                     i1setLoad_StatusOff@lights:	
  2758                           ; 0 bytes @ 0x1
  2759                           
  2760  0072                     i1RfPointSelect@rf:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x1
  2765  0072                     	ds	1
  2766  0073                     ??_TMR0_ISR:	
  2767  0073                     ?_setRF_ReceiveGO:	
  2768                           ; 0 bytes @ 0x2
  2769                           
  2770  0073                     setRF_ReceiveGO@command:	
  2771                           ; 0 bytes @ 0x2
  2772                           
  2773                           
  2774                           ; 1 bytes @ 0x2
  2775  0073                     	ds	1
  2776  0074                     ??_setRF_ReceiveGO:	
  2777  0074                     setRF_ReceiveGO@rf:	
  2778                           ; 0 bytes @ 0x3
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0x3
  2782  0074                     	ds	1
  2783  0075                     ??_INT_ISR:	
  2784                           
  2785                           ; 0 bytes @ 0x4
  2786  0075                     	ds	2
  2787  0077                     ??_ISR:	
  2788                           
  2789                           ; 0 bytes @ 0x6
  2790  0077                     	ds	1
  2791                           
  2792                           	psect	cstackBANK0
  2793  0020                     __pcstackBANK0:	
  2794  0020                     ??_CC2500_WriteByte:	
  2795  0020                     ??_CC2500_ReadByte:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ?_DelayTime_1us:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_DelayTimejudge:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_Dimmer_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_getDimmerLights_StatusFlag:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_setLoad_GO:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ?_setLoad_StatusOff:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_setLoad_Count:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ?_setLoad_StatusOn:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_MainT_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_WDT_Main:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_setTemp_Enable:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_setLoad_Enable:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_IO_Set:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_TMR0_Set:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_ADC_Set:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_INT_Set:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_IOC_Set:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_WDT_Set:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_Flash_Memory_Read:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_Flash_Memory_Write:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Clearing:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_setLoad_AH_AL_Restore:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_getTemp_Safe:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_getPF_Safe:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_setTemp_Initialization:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_setPowerFault_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setRF_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_Buzzer_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Buzzer_Main:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_DelayOffPointSelect:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_DimmerLightsPointSelect:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_LedPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_setINT_GO:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_Flash_Memory_Unlock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Erasing:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_getLoad_Safe:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_RfPointSelect:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_RfSWPointSelect:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_TouchPower:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_SwPointSelect:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ?_getAD:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ?___wmul:	
  2922                           ; 2 bytes @ 0x0
  2923                           
  2924  0020                     ?___lwdiv:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     ?___ftpack:	
  2928                           ; 2 bytes @ 0x0
  2929                           
  2930  0020                     getDimmerLights_StatusFlag@Status:	
  2931                           ; 3 bytes @ 0x0
  2932                           
  2933  0020                     setINT_GO@command:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0020                     getAD@adcon1:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0020                     setLoad_Enable@command:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0020                     setLoad_GO@command:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0020                     setLoad_StatusOn@command:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0020                     setLoad_StatusOff@command:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     setTemp_Enable@command:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     DelayTime_1us@count:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0020                     ___wmul@multiplier:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0020                     ___lwdiv@divisor:	
  2961                           ; 2 bytes @ 0x0
  2962                           
  2963  0020                     ___ftpack@arg:	
  2964                           ; 2 bytes @ 0x0
  2965                           
  2966                           
  2967                           ; 3 bytes @ 0x0
  2968  0020                     	ds	1
  2969  0021                     ??_setLoad_StatusOff:	
  2970  0021                     ??_setLoad_StatusOn:	
  2971                           ; 0 bytes @ 0x1
  2972                           
  2973  0021                     ??_Mcu_Initialization:	
  2974                           ; 0 bytes @ 0x1
  2975                           
  2976  0021                     ??_Temp_Initialization:	
  2977                           ; 0 bytes @ 0x1
  2978                           
  2979  0021                     ??_PowerFault_Initialization:	
  2980                           ; 0 bytes @ 0x1
  2981                           
  2982  0021                     ??_RF_Initialization:	
  2983                           ; 0 bytes @ 0x1
  2984                           
  2985  0021                     ??_DimmerLights_Close:	
  2986                           ; 0 bytes @ 0x1
  2987                           
  2988  0021                     CC2500_WriteByte@loop_a:	
  2989                           ; 0 bytes @ 0x1
  2990                           
  2991  0021                     CC2500_ReadByte@loop_b:	
  2992                           ; 1 bytes @ 0x1
  2993                           
  2994  0021                     DelayOffPointSelect@sw:	
  2995                           ; 1 bytes @ 0x1
  2996                           
  2997  0021                     DelayTimejudge@i:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0021                     DimmerLightsPointSelect@lights:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003  0021                     LedPointSelect@led:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0021                     Flash_Memory_Read@i:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0021                     Flash_Memory_Write@i:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0021                     setLoad_Count@command:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0021                     setLoad_StatusOn@lights:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0021                     setLoad_StatusOff@lights:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021  0021                     setLoad_AH_AL_Restore@i:	
  3022                           ; 1 bytes @ 0x1
  3023                           
  3024  0021                     RfPointSelect@rf:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0021                     RfSWPointSelect@sw:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0021                     SwPointSelect@sw:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033                           
  3034                           ; 1 bytes @ 0x1
  3035  0021                     	ds	1
  3036  0022                     ??_CC2500_WriteCommand:	
  3037  0022                     ??_CC2500_ReadStatus:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0022                     ?_setRF_RxStatus:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0022                     ??_DelayTime_1us:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0022                     ?_CC2500_WriteREG:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0022                     ??_DlyOff_Initialization:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0022                     ?_setSw_Status:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0022                     ?_setRFSW_Status:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0022                     ?_setDimmerLights_Trigger:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0022                     ?_setDimmerLights_Switch:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0022                     ??_setTxData:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0022                     ??_setDimmerLights_Initialization:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0022                     ?_setDimmerLights_TriggerERROR:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0022                     ?_setLED:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0022                     ??_setLED_Main:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0022                     ??_Load_Initialization:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0022                     ??_setSw_Enable:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0022                     ?_setRF_Enable:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0022                     ?_setDimmerLights_AdjGo:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0022                     ?_setDimmerLights_TriggerAdj:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0022                     ?_setDimmerLights_Clear:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0022                     ?_setRF_Learn:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0022                     CC2500_WriteREG@value:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0022                     DlyOff_Initialization@sw:	
  3104                           ; 1 bytes @ 0x2
  3105                           
  3106  0022                     DelayTimejudge@value:	
  3107                           ; 1 bytes @ 0x2
  3108                           
  3109  0022                     setDimmerLights_TriggerERROR@command:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0022                     setDimmerLights_Switch@command:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0022                     setDimmerLights_AdjGo@command:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0022                     setDimmerLights_Trigger@command:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0022                     setDimmerLights_TriggerAdj@command:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0022                     setDimmerLights_Clear@command:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0022                     setLED@command:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0022                     Flash_Memory_Read@address:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0022                     setRF_Learn@command:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0022                     setRF_RxStatus@command:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0022                     setRF_Enable@command:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0022                     setRFSW_Status@command:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0022                     setSw_Enable@command:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     setSw_Status@command:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     DelayTime_1us@i:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     ___wmul@multiplicand:	
  3155                           ; 2 bytes @ 0x2
  3156                           
  3157  0022                     ___lwdiv@dividend:	
  3158                           ; 2 bytes @ 0x2
  3159                           
  3160                           
  3161                           ; 2 bytes @ 0x2
  3162  0022                     	ds	1
  3163  0023                     ??_setRF_RxStatus:	
  3164  0023                     ??_CC2500_WriteREG:	
  3165                           ; 0 bytes @ 0x3
  3166                           
  3167  0023                     ??_setSw_Status:	
  3168                           ; 0 bytes @ 0x3
  3169                           
  3170  0023                     ??_setRFSW_Status:	
  3171                           ; 0 bytes @ 0x3
  3172                           
  3173  0023                     ??_setDimmerLights_Trigger:	
  3174                           ; 0 bytes @ 0x3
  3175                           
  3176  0023                     ??_setDimmerLights_Switch:	
  3177                           ; 0 bytes @ 0x3
  3178                           
  3179  0023                     ??_setDimmerLights_TriggerERROR:	
  3180                           ; 0 bytes @ 0x3
  3181                           
  3182  0023                     ??_setLED:	
  3183                           ; 0 bytes @ 0x3
  3184                           
  3185  0023                     ??_setRF_Enable:	
  3186                           ; 0 bytes @ 0x3
  3187                           
  3188  0023                     ??_DelayOff_Initialization:	
  3189                           ; 0 bytes @ 0x3
  3190                           
  3191  0023                     ?_setDelayOff_GO:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0023                     ??_setDimmerLights_AdjGo:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0023                     ??_setDimmerLights_TriggerAdj:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0023                     ??_setDimmerLights_Clear:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0023                     ??_getAD:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     ??_setRF_Learn:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     CC2500_WriteCommand@command:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0023                     CC2500_ReadStatus@status_addr:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215  0023                     setDelayOff_GO@command:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0023                     setDimmerLights_Initialization@lights:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0023                     setDimmerLights_TriggerERROR@lights:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     setDimmerLights_Switch@lights:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     setDimmerLights_AdjGo@lights:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     setDimmerLights_Trigger@lights:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     setDimmerLights_TriggerAdj@lights:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     setDimmerLights_Clear@lights:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     setLED@led:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0023                     getAD@adcon0:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0023                     Flash_Memory_Read@ret:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0023                     setRF_Learn@rf:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0023                     setRF_RxStatus@rf:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0023                     setTxData@rf:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0023                     setRF_Enable@rf:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0023                     setRFSW_Status@sw:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0023                     setSw_Status@sw:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0023                     ___ftpack@exp:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269                           
  3270                           ; 1 bytes @ 0x3
  3271  0023                     	ds	1
  3272  0024                     ??_CC2500_ClearTXFIFO:	
  3273  0024                     ??_CC2500_ClearRXFIFO:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0024                     ??_CC2500_SIDLEMode:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0024                     ?_setDimmerLights:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??_setDimmerLights_ERROR:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     ??_setLED_Initialization:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     ??_getLoad_AD:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0024                     ??_getTemp_AD:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0024                     ??_getPowerFault_AD:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0024                     ??_Flash_Memory_Modify:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0024                     ??_RF_RxDisable:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0024                     ??_setSw_Initialization:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0024                     ??_Sw_DimmerAdjFunc:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0024                     ??_CC2500_TxData:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0024                     ??_CC2500_RxData:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0024                     ??_DimmerLights_Initialization:	
  3316                           ; 0 bytes @ 0x4
  3317                           
  3318  0024                     ??___wmul:	
  3319                           ; 0 bytes @ 0x4
  3320                           
  3321  0024                     ??___lwdiv:	
  3322                           ; 0 bytes @ 0x4
  3323                           
  3324  0024                     CC2500_WriteREG@w_addr:	
  3325                           ; 0 bytes @ 0x4
  3326                           
  3327  0024                     setDelayOff_GO@value:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0024                     setDimmerLights@status:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0024                     setLED_Initialization@led:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0024                     setLED_Main@led:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0024                     RF_RxDisable@rf:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0024                     setSw_Initialization@sw:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0024                     Sw_DimmerAdjFunc@Idle:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0024                     ___ftpack@sign:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0024                     DelayTime_1us@j:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0024                     ___wmul@product:	
  3355                           ; 2 bytes @ 0x4
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0x4
  3359  0024                     	ds	1
  3360  0025                     ??_CC2500_InitSetREG:	
  3361  0025                     ??_CC2500_InitPATable:	
  3362                           ; 0 bytes @ 0x5
  3363                           
  3364  0025                     ??_setDimmerLights:	
  3365                           ; 0 bytes @ 0x5
  3366                           
  3367  0025                     ??_Switch_Initialization:	
  3368                           ; 0 bytes @ 0x5
  3369                           
  3370  0025                     ??___ftpack:	
  3371                           ; 0 bytes @ 0x5
  3372                           
  3373  0025                     ??_setDelayOff_GO:	
  3374                           ; 0 bytes @ 0x5
  3375                           
  3376  0025                     ??_LED_Initialization:	
  3377                           ; 0 bytes @ 0x5
  3378                           
  3379  0025                     ??_LED_Main:	
  3380                           ; 0 bytes @ 0x5
  3381                           
  3382  0025                     CC2500_TxData@loop_e:	
  3383                           ; 0 bytes @ 0x5
  3384                           
  3385  0025                     CC2500_RxData@loop_f:	
  3386                           ; 1 bytes @ 0x5
  3387                           
  3388  0025                     setDimmerLights_ERROR@lights:	
  3389                           ; 1 bytes @ 0x5
  3390                           
  3391  0025                     Sw_DimmerAdjFunc@sw:	
  3392                           ; 1 bytes @ 0x5
  3393                           
  3394  0025                     ___lwdiv@quotient:	
  3395                           ; 1 bytes @ 0x5
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x5
  3399  0025                     	ds	1
  3400  0026                     ??_CC2500_PowerRST:	
  3401  0026                     ??_CC2500_FrequencyCabr:	
  3402                           ; 0 bytes @ 0x6
  3403                           
  3404  0026                     ?_setBuz:	
  3405                           ; 0 bytes @ 0x6
  3406                           
  3407  0026                     CC2500_InitSetREG@temp1:	
  3408                           ; 0 bytes @ 0x6
  3409                           
  3410  0026                     CC2500_InitPATable@temp:	
  3411                           ; 1 bytes @ 0x6
  3412                           
  3413  0026                     setDimmerLights@lights:	
  3414                           ; 1 bytes @ 0x6
  3415                           
  3416  0026                     Flash_Memory_Modify@i:	
  3417                           ; 1 bytes @ 0x6
  3418                           
  3419  0026                     setBuz@time:	
  3420                           ; 1 bytes @ 0x6
  3421                           
  3422                           
  3423                           ; 2 bytes @ 0x6
  3424  0026                     	ds	1
  3425  0027                     ??_Flash_Memory_Main:	
  3426  0027                     CC2500_InitSetREG@temp2:	
  3427                           ; 0 bytes @ 0x7
  3428                           
  3429  0027                     CC2500_InitPATable@loop_d:	
  3430                           ; 1 bytes @ 0x7
  3431                           
  3432  0027                     setDelayOff_GO@sw:	
  3433                           ; 1 bytes @ 0x7
  3434                           
  3435  0027                     ___lwdiv@counter:	
  3436                           ; 1 bytes @ 0x7
  3437                           
  3438                           
  3439                           ; 1 bytes @ 0x7
  3440  0027                     	ds	1
  3441  0028                     ??_setBuz:	
  3442  0028                     ?___awtoft:	
  3443                           ; 0 bytes @ 0x8
  3444                           
  3445  0028                     CC2500_InitSetREG@loop_c:	
  3446                           ; 3 bytes @ 0x8
  3447                           
  3448  0028                     getTemp_AD@channel:	
  3449                           ; 1 bytes @ 0x8
  3450                           
  3451  0028                     getPowerFault_AD@channel:	
  3452                           ; 1 bytes @ 0x8
  3453                           
  3454  0028                     ___awtoft@c:	
  3455                           ; 1 bytes @ 0x8
  3456                           
  3457                           
  3458                           ; 2 bytes @ 0x8
  3459  0028                     	ds	1
  3460  0029                     ??_CC2500_PowerOnInitial:	
  3461  0029                     setBuz@count:	
  3462                           ; 0 bytes @ 0x9
  3463                           
  3464  0029                     getLoad_AD@channel:	
  3465                           ; 1 bytes @ 0x9
  3466                           
  3467                           
  3468                           ; 1 bytes @ 0x9
  3469  0029                     	ds	1
  3470  002A                     ??_MainT:	
  3471  002A                     ??_setLog_Code:	
  3472                           ; 0 bytes @ 0xA
  3473                           
  3474  002A                     ??_DimmerLights_Exceptions:	
  3475                           ; 0 bytes @ 0xA
  3476                           
  3477  002A                     DimmerLights_Exceptions@status:	
  3478                           ; 0 bytes @ 0xA
  3479                           
  3480  002A                     getLoad_AD@j:	
  3481                           ; 1 bytes @ 0xA
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0xA
  3485  002A                     	ds	1
  3486  002B                     ??_setLoad_Exceptions:	
  3487  002B                     ??_setOverTemp_Exceptions:	
  3488                           ; 0 bytes @ 0xB
  3489                           
  3490  002B                     ??_setPowerFault_Exceptions:	
  3491                           ; 0 bytes @ 0xB
  3492                           
  3493  002B                     ??___awtoft:	
  3494                           ; 0 bytes @ 0xB
  3495                           
  3496  002B                     getLoad_AD@i:	
  3497                           ; 0 bytes @ 0xB
  3498                           
  3499  002B                     setLog_Code@rf:	
  3500                           ; 1 bytes @ 0xB
  3501                           
  3502                           
  3503                           ; 1 bytes @ 0xB
  3504  002B                     	ds	1
  3505  002C                     setLoad_Exceptions@command:	
  3506  002C                     setOverTemp_Exceptions@command:	
  3507                           ; 1 bytes @ 0xC
  3508                           
  3509  002C                     setPowerFault_Exceptions@command:	
  3510                           ; 1 bytes @ 0xC
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0xC
  3514  002C                     	ds	1
  3515  002D                     ??_Load_Main:	
  3516  002D                     ??_setTemp_Main:	
  3517                           ; 0 bytes @ 0xD
  3518                           
  3519  002D                     ??_setPowerFault_Main:	
  3520                           ; 0 bytes @ 0xD
  3521                           
  3522  002D                     ___awtoft@sign:	
  3523                           ; 0 bytes @ 0xD
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0xD
  3527  002D                     	ds	1
  3528  002E                     ?___ftdiv:	
  3529  002E                     ?___ftmul:	
  3530                           ; 3 bytes @ 0xE
  3531                           
  3532  002E                     ___ftdiv@f2:	
  3533                           ; 3 bytes @ 0xE
  3534                           
  3535  002E                     ___ftmul@f1:	
  3536                           ; 3 bytes @ 0xE
  3537                           
  3538                           
  3539                           ; 3 bytes @ 0xE
  3540  002E                     	ds	1
  3541  002F                     ??_PowerFault_Main:	
  3542                           
  3543                           ; 0 bytes @ 0xF
  3544  002F                     	ds	1
  3545  0030                     ??_Temp_Main:	
  3546                           
  3547                           ; 0 bytes @ 0x10
  3548  0030                     	ds	1
  3549  0031                     Load_Main@i:	
  3550  0031                     ___ftdiv@f1:	
  3551                           ; 1 bytes @ 0x11
  3552                           
  3553  0031                     ___ftmul@f2:	
  3554                           ; 3 bytes @ 0x11
  3555                           
  3556                           
  3557                           ; 3 bytes @ 0x11
  3558  0031                     	ds	3
  3559  0034                     ??___ftdiv:	
  3560  0034                     ??___ftmul:	
  3561                           ; 0 bytes @ 0x14
  3562                           
  3563                           
  3564                           ; 0 bytes @ 0x14
  3565  0034                     	ds	4
  3566  0038                     ___ftdiv@cntr:	
  3567  0038                     ___ftmul@exp:	
  3568                           ; 1 bytes @ 0x18
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x18
  3572  0038                     	ds	1
  3573  0039                     ___ftdiv@f3:	
  3574  0039                     ___ftmul@f3_as_product:	
  3575                           ; 3 bytes @ 0x19
  3576                           
  3577                           
  3578                           ; 3 bytes @ 0x19
  3579  0039                     	ds	3
  3580  003C                     ___ftdiv@exp:	
  3581  003C                     ___ftmul@cntr:	
  3582                           ; 1 bytes @ 0x1C
  3583                           
  3584                           
  3585                           ; 1 bytes @ 0x1C
  3586  003C                     	ds	1
  3587  003D                     ___ftdiv@sign:	
  3588  003D                     ___ftmul@sign:	
  3589                           ; 1 bytes @ 0x1D
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x1D
  3593  003D                     	ds	1
  3594  003E                     ?___ftadd:	
  3595  003E                     ___ftadd@f1:	
  3596                           ; 3 bytes @ 0x1E
  3597                           
  3598                           
  3599                           ; 3 bytes @ 0x1E
  3600  003E                     	ds	3
  3601  0041                     ___ftadd@f2:	
  3602                           
  3603                           ; 3 bytes @ 0x21
  3604  0041                     	ds	3
  3605  0044                     ??___ftadd:	
  3606                           
  3607                           ; 0 bytes @ 0x24
  3608  0044                     	ds	4
  3609  0048                     ___ftadd@sign:	
  3610                           
  3611                           ; 1 bytes @ 0x28
  3612  0048                     	ds	1
  3613  0049                     ___ftadd@exp2:	
  3614                           
  3615                           ; 1 bytes @ 0x29
  3616  0049                     	ds	1
  3617  004A                     ___ftadd@exp1:	
  3618                           
  3619                           ; 1 bytes @ 0x2A
  3620  004A                     	ds	1
  3621  004B                     ?___fttol:	
  3622  004B                     ___fttol@f1:	
  3623                           ; 4 bytes @ 0x2B
  3624                           
  3625                           
  3626                           ; 3 bytes @ 0x2B
  3627  004B                     	ds	4
  3628  004F                     ??___fttol:	
  3629                           
  3630                           ; 0 bytes @ 0x2F
  3631  004F                     	ds	4
  3632  0053                     ___fttol@sign1:	
  3633                           
  3634                           ; 1 bytes @ 0x33
  3635  0053                     	ds	1
  3636  0054                     ___fttol@lval:	
  3637                           
  3638                           ; 4 bytes @ 0x34
  3639  0054                     	ds	4
  3640  0058                     ___fttol@exp1:	
  3641                           
  3642                           ; 1 bytes @ 0x38
  3643  0058                     	ds	1
  3644  0059                     ??_getPercentValue:	
  3645  0059                     ??_setPercentValue:	
  3646                           ; 0 bytes @ 0x39
  3647                           
  3648  0059                     setPercentValue@value:	
  3649                           ; 0 bytes @ 0x39
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x39
  3653  0059                     	ds	1
  3654  005A                     setPercentValue@i:	
  3655                           
  3656                           ; 3 bytes @ 0x3A
  3657  005A                     	ds	1
  3658  005B                     getPercentValue@value:	
  3659                           
  3660                           ; 1 bytes @ 0x3B
  3661  005B                     	ds	1
  3662  005C                     getPercentValue@i:	
  3663                           
  3664                           ; 3 bytes @ 0x3C
  3665  005C                     	ds	1
  3666  005D                     ?_setRF_DimmerLights:	
  3667  005D                     ??_Flash_Memory_Initialization:	
  3668                           ; 0 bytes @ 0x3D
  3669                           
  3670  005D                     setRF_DimmerLights@on:	
  3671                           ; 0 bytes @ 0x3D
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0x3D
  3675  005D                     	ds	1
  3676  005E                     ??_setRF_DimmerLights:	
  3677  005E                     Flash_Memory_Initialization@i:	
  3678                           ; 0 bytes @ 0x3E
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0x3E
  3682  005E                     	ds	1
  3683  005F                     ??_setDimmerLights_AdjRF:	
  3684                           
  3685                           ; 0 bytes @ 0x3F
  3686  005F                     	ds	1
  3687  0060                     setDimmerLights_AdjRF@lights:	
  3688  0060                     setRF_DimmerLights@status:	
  3689                           ; 1 bytes @ 0x40
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x40
  3693  0060                     	ds	1
  3694  0061                     ??_setRF_DimmerValue:	
  3695  0061                     setRF_DimmerLights@lights:	
  3696                           ; 0 bytes @ 0x41
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x41
  3700  0061                     	ds	1
  3701  0062                     ??_DlyOff_Main:	
  3702  0062                     ?_setDimmerLights_Adj:	
  3703                           ; 0 bytes @ 0x42
  3704                           
  3705  0062                     ??_setRFSW_Control:	
  3706                           ; 0 bytes @ 0x42
  3707                           
  3708  0062                     ??_Sw_DimmerOnFunc:	
  3709                           ; 0 bytes @ 0x42
  3710                           
  3711  0062                     ??_Sw_DimmerOffFunc:	
  3712                           ; 0 bytes @ 0x42
  3713                           
  3714  0062                     setDimmerLights_Adj@status:	
  3715                           ; 0 bytes @ 0x42
  3716                           
  3717  0062                     Sw_DimmerOnFunc@Idle:	
  3718                           ; 1 bytes @ 0x42
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x42
  3722  0062                     	ds	1
  3723  0063                     ??_setDimmerLights_Adj:	
  3724  0063                     setRFSW_Control@sw:	
  3725                           ; 0 bytes @ 0x43
  3726                           
  3727  0063                     setRF_DimmerValue@lights:	
  3728                           ; 1 bytes @ 0x43
  3729                           
  3730  0063                     Sw_DimmerOnFunc@sw:	
  3731                           ; 1 bytes @ 0x43
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x43
  3735  0063                     	ds	1
  3736  0064                     ??_setRFSW_AdjControl:	
  3737  0064                     DlyOff_Main@sw:	
  3738                           ; 0 bytes @ 0x44
  3739                           
  3740  0064                     setDimmerLights_Adj@lights:	
  3741                           ; 1 bytes @ 0x44
  3742                           
  3743  0064                     Sw_DimmerOffFunc@sw:	
  3744                           ; 1 bytes @ 0x44
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x44
  3748  0064                     	ds	1
  3749  0065                     ??_setDimmerLights_Main:	
  3750  0065                     ??_setSw_Main:	
  3751                           ; 0 bytes @ 0x45
  3752                           
  3753  0065                     ??_DelayOff_Main:	
  3754                           ; 0 bytes @ 0x45
  3755                           
  3756  0065                     setDimmerLights_Main@clear:	
  3757                           ; 0 bytes @ 0x45
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x45
  3761  0065                     	ds	1
  3762  0066                     setDimmerLights_Main@lights:	
  3763  0066                     setRFSW_AdjControl@sw:	
  3764                           ; 1 bytes @ 0x46
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x46
  3768  0066                     	ds	1
  3769  0067                     ??_setControl_Lights_Table:	
  3770  0067                     ??_DimmerLights_Main:	
  3771                           ; 0 bytes @ 0x47
  3772                           
  3773  0067                     setControl_Lights_Table@rf:	
  3774                           ; 0 bytes @ 0x47
  3775                           
  3776  0067                     _setSw_Main$4748:	
  3777                           ; 1 bytes @ 0x47
  3778                           
  3779                           
  3780                           ; 1 bytes @ 0x47
  3781  0067                     	ds	1
  3782  0068                     ??_getRxData:	
  3783  0068                     getRxData@rf:	
  3784                           ; 0 bytes @ 0x48
  3785                           
  3786  0068                     setSw_Main@sw:	
  3787                           ; 1 bytes @ 0x48
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x48
  3791  0068                     	ds	1
  3792  0069                     ??_Switch_Main:	
  3793  0069                     ??_setRF_Main:	
  3794                           ; 0 bytes @ 0x49
  3795                           
  3796                           
  3797                           ; 0 bytes @ 0x49
  3798  0069                     	ds	1
  3799  006A                     setRF_Main@rf:	
  3800                           
  3801                           ; 1 bytes @ 0x4A
  3802  006A                     	ds	1
  3803  006B                     _setRF_Main$4391:	
  3804                           
  3805                           ; 1 bytes @ 0x4B
  3806  006B                     	ds	1
  3807  006C                     ??_RF_Main:	
  3808  006C                     ??_main:	
  3809                           ; 0 bytes @ 0x4C
  3810                           
  3811                           
  3812                           	psect	maintext
  3813  1435                     __pmaintext:	
  3814                           ; 0 bytes @ 0x4C
  3815 ;;
  3816 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3817 ;;
  3818 ;; *************** function _main *****************
  3819 ;; Defined at:
  3820 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;		None               void
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 17F/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels required when called:   14
  3840 ;; This function calls:
  3841 ;;		_Buzzer_Initialization
  3842 ;;		_Buzzer_Main
  3843 ;;		_CC2500_PowerOnInitial
  3844 ;;		_DelayOff_Initialization
  3845 ;;		_DelayOff_Main
  3846 ;;		_DimmerLights_Initialization
  3847 ;;		_DimmerLights_Main
  3848 ;;		_Flash_Memory_Initialization
  3849 ;;		_Flash_Memory_Main
  3850 ;;		_LED_Initialization
  3851 ;;		_LED_Main
  3852 ;;		_Load_Initialization
  3853 ;;		_Load_Main
  3854 ;;		_MainT
  3855 ;;		_MainT_Initialization
  3856 ;;		_Mcu_Initialization
  3857 ;;		_PowerFault_Initialization
  3858 ;;		_PowerFault_Main
  3859 ;;		_RF_Initialization
  3860 ;;		_RF_Main
  3861 ;;		_Switch_Initialization
  3862 ;;		_Switch_Main
  3863 ;;		_Temp_Initialization
  3864 ;;		_Temp_Main
  3865 ;;		_WDT_Main
  3866 ;;		_getLoad_AD
  3867 ;;		_getPowerFault_AD
  3868 ;;		_getTemp_AD
  3869 ;; This function is called by:
  3870 ;;		Startup code after reset
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function _main
  3876  1435                     _main:	
  3877                           
  3878                           ;main.c: 9: MainT_Initialization();
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3882  1435  31A6  26DA  3194   	fcall	_MainT_Initialization
  3883                           
  3884                           ;main.c: 10: Mcu_Initialization();
  3885  1438  31A7  27AE  3194   	fcall	_Mcu_Initialization
  3886                           
  3887                           ;main.c: 11: Flash_Memory_Initialization();
  3888  143B  318B  23E3  3194   	fcall	_Flash_Memory_Initialization
  3889                           
  3890                           ;main.c: 12: LED_Initialization();
  3891  143E  31A5  25BF  3194   	fcall	_LED_Initialization
  3892                           
  3893                           ;main.c: 13: Buzzer_Initialization();
  3894  1441  31A4  24FC  3194   	fcall	_Buzzer_Initialization
  3895                           
  3896                           ;main.c: 15: ;;
  3897                           ;main.c: 16: Temp_Initialization();
  3898  1444  31A4  2472  3194   	fcall	_Temp_Initialization
  3899                           
  3900                           ;main.c: 17: Load_Initialization();
  3901  1447  31A5  25D7  3194   	fcall	_Load_Initialization
  3902                           
  3903                           ;main.c: 18: PowerFault_Initialization();
  3904  144A  31A4  246C  3194   	fcall	_PowerFault_Initialization
  3905                           
  3906                           ;main.c: 19: DelayOff_Initialization();
  3907  144D  31A4  2481  3194   	fcall	_DelayOff_Initialization
  3908                           
  3909                           ;main.c: 21: DimmerLights_Initialization();
  3910  1450  31A5  259B  3194   	fcall	_DimmerLights_Initialization
  3911                           
  3912                           ;main.c: 22: ;;
  3913                           ;main.c: 23: ;;
  3914                           ;main.c: 24: ;;
  3915                           ;main.c: 26: Switch_Initialization();
  3916  1453  31A4  24E9  3194   	fcall	_Switch_Initialization
  3917                           
  3918                           ;main.c: 27: RF_Initialization();
  3919  1456  31A4  2489  3194   	fcall	_RF_Initialization
  3920                           
  3921                           ;main.c: 28: CC2500_PowerOnInitial();
  3922  1459  31A6  26ED  3194   	fcall	_CC2500_PowerOnInitial
  3923  145C                     l9718:	
  3924                           ;main.c: 30: while(1)
  3925                           
  3926                           
  3927                           ;main.c: 31: {
  3928                           ;main.c: 32: if(TMain->PowerON)
  3929  145C  087D               	movf	_TMain,w
  3930  145D  0086               	movwf	6
  3931  145E  3001               	movlw	1	; select bank2/3
  3932  145F  0087               	movwf	7
  3933  1460  1C01               	btfss	1,0
  3934  1461  2C71               	goto	l9722
  3935                           
  3936                           ;main.c: 33: {
  3937                           ;main.c: 35: ;;
  3938                           ;main.c: 39: getLoad_AD(0x05);
  3939  1462  3005               	movlw	5
  3940  1463  3189  2133  3194   	fcall	_getLoad_AD
  3941                           
  3942                           ;main.c: 43: getTemp_AD(0x09);
  3943  1466  3009               	movlw	9
  3944  1467  3192  22EC  3194   	fcall	_getTemp_AD
  3945                           
  3946                           ;main.c: 47: getPowerFault_AD(0x11);
  3947  146A  3011               	movlw	17
  3948  146B  319D  2518  3194   	fcall	_getPowerFault_AD
  3949                           
  3950                           ;main.c: 59: Buzzer_Main();
  3951  146E  3189  21C9  3194   	fcall	_Buzzer_Main
  3952  1471                     l9722:	
  3953                           
  3954                           ;main.c: 61: }
  3955                           ;main.c: 63: if(TMain->T0_Timerout)
  3956  1471  087D               	movf	_TMain,w
  3957  1472  0086               	movwf	6
  3958  1473  3001               	movlw	1	; select bank2/3
  3959  1474  0087               	movwf	7
  3960  1475  1C81               	btfss	1,1
  3961  1476  2C5C               	goto	l9718
  3962                           
  3963                           ;main.c: 64: {
  3964                           ;main.c: 65: TMain->T0_Timerout = 0;
  3965  1477  087D               	movf	_TMain,w
  3966  1478  0086               	movwf	6
  3967  1479  3001               	movlw	1	; select bank2/3
  3968  147A  0087               	movwf	7
  3969  147B  1081               	bcf	1,1
  3970                           
  3971                           ;main.c: 66: MainT();
  3972  147C  3196  2677  3194   	fcall	_MainT
  3973                           
  3974                           ;main.c: 67: WDT_Main();
  3975  147F  31A7  27E4  3194   	fcall	_WDT_Main
  3976                           
  3977                           ;main.c: 68: if(TMain->PowerON)
  3978  1482  087D               	movf	_TMain,w
  3979  1483  0086               	movwf	6
  3980  1484  3001               	movlw	1	; select bank2/3
  3981  1485  0087               	movwf	7
  3982  1486  1C01               	btfss	1,0
  3983  1487  2C5C               	goto	l9718
  3984                           
  3985                           ;main.c: 69: {
  3986                           ;main.c: 70: Flash_Memory_Main();
  3987  1488  319D  25E1  3194   	fcall	_Flash_Memory_Main
  3988                           
  3989                           ;main.c: 72: LED_Main();
  3990  148B  31A5  25CB  3194   	fcall	_LED_Main
  3991                           
  3992                           ;main.c: 74: ;;
  3993                           ;main.c: 75: Temp_Main();
  3994  148E  3190  2000  3194   	fcall	_Temp_Main
  3995                           
  3996                           ;main.c: 76: Load_Main();
  3997  1491  3180  2050  3194   	fcall	_Load_Main
  3998                           
  3999                           ;main.c: 77: PowerFault_Main();
  4000  1494  31A4  246F  3194   	fcall	_PowerFault_Main
  4001                           
  4002                           ;main.c: 79: ;;
  4003                           ;main.c: 80: DimmerLights_Main();
  4004  1497  31A4  24B3  3194   	fcall	_DimmerLights_Main
  4005                           
  4006                           ;main.c: 81: Switch_Main();
  4007  149A  31A4  2491  3194   	fcall	_Switch_Main
  4008                           
  4009                           ;main.c: 82: ;;
  4010                           ;main.c: 83: ;;
  4011                           ;main.c: 85: RF_Main();
  4012  149D  31A4  248D  3194   	fcall	_RF_Main
  4013                           
  4014                           ;main.c: 86: DelayOff_Main();
  4015  14A0  31A4  2485  3194   	fcall	_DelayOff_Main
  4016  14A3  2C5C               	goto	l9718
  4017  14A4                     __end_of_main:	
  4018                           
  4019                           	psect	text1
  4020  12EC                     __ptext1:	
  4021 ;; *************** function _getTemp_AD *****************
  4022 ;; Defined at:
  4023 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  channel         1    wreg     unsigned char 
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;  channel         1    8[BANK0 ] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;		None               void
  4030 ;; Registers used:
  4031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;Total ram usage:        5 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    5
  4044 ;; This function calls:
  4045 ;;		_getAD
  4046 ;; This function is called by:
  4047 ;;		_main
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _getTemp_AD
  4053  12EC                     _getTemp_AD:	
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4057                           ;getTemp_AD@channel stored from wreg
  4058  12EC  0020               	movlb	0	; select bank0
  4059  12ED  00A8               	movwf	getTemp_AD@channel
  4060                           
  4061                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4062  12EE  087C               	movf	_Temp,w
  4063  12EF  0086               	movwf	6
  4064  12F0  3001               	movlw	1	; select bank2/3
  4065  12F1  0087               	movwf	7
  4066  12F2  1D01               	btfss	1,2
  4067  12F3  0008               	return
  4068                           
  4069                           ;OverTemperature_B1.c: 38: {
  4070                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4071  12F4  30F0               	movlw	240
  4072  12F5  00A4               	movwf	??_getTemp_AD
  4073  12F6  0824               	movf	??_getTemp_AD,w
  4074  12F7  00A0               	movwf	getAD@adcon1
  4075  12F8  0828               	movf	getTemp_AD@channel,w
  4076  12F9  3198  2066  3192   	fcall	_getAD
  4077  12FC  087C               	movf	_Temp,w
  4078  12FD  3E0A               	addlw	10
  4079  12FE  0086               	movwf	6
  4080  12FF  3001               	movlw	1	; select bank2/3
  4081  1300  0087               	movwf	7
  4082  1301  0020               	movlb	0	; select bank0
  4083  1302  0820               	movf	?_getAD,w
  4084  1303  3FC0               	movwi [0]fsr1
  4085  1304  0821               	movf	?_getAD+1,w
  4086  1305  3FC1               	movwi [1]fsr1
  4087                           
  4088                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4089  1306  087C               	movf	_Temp,w
  4090  1307  3E0A               	addlw	10
  4091  1308  0086               	movwf	6
  4092  1309  3001               	movlw	1	; select bank2/3
  4093  130A  0087               	movwf	7
  4094  130B  3F40               	moviw [0]fsr1
  4095  130C  00A4               	movwf	??_getTemp_AD
  4096  130D  3F41               	moviw [1]fsr1
  4097  130E  00A5               	movwf	??_getTemp_AD+1
  4098  130F  087C               	movf	_Temp,w
  4099  1310  3E06               	addlw	6
  4100  1311  0086               	movwf	6
  4101  1312  3001               	movlw	1	; select bank2/3
  4102  1313  0087               	movwf	7
  4103  1314  3F40               	moviw [0]fsr1
  4104  1315  00A6               	movwf	??_getTemp_AD+2
  4105  1316  3F41               	moviw [1]fsr1
  4106  1317  00A7               	movwf	??_getTemp_AD+3
  4107  1318  0825               	movf	??_getTemp_AD+1,w
  4108  1319  0227               	subwf	??_getTemp_AD+3,w
  4109  131A  1D03               	skipz
  4110  131B  2B1E               	goto	u9185
  4111  131C  0824               	movf	??_getTemp_AD,w
  4112  131D  0226               	subwf	??_getTemp_AD+2,w
  4113  131E                     u9185:	
  4114  131E  1803               	skipnc
  4115  131F  2B2F               	goto	l9486
  4116                           
  4117                           ;OverTemperature_B1.c: 41: {
  4118                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4119  1320  087C               	movf	_Temp,w
  4120  1321  3E0A               	addlw	10
  4121  1322  0086               	movwf	6
  4122  1323  3001               	movlw	1	; select bank2/3
  4123  1324  0087               	movwf	7
  4124  1325  087C               	movf	_Temp,w
  4125  1326  3E06               	addlw	6
  4126  1327  0084               	movwf	4
  4127  1328  3001               	movlw	1	; select bank2/3
  4128  1329  0085               	movwf	5
  4129  132A  3F40               	moviw [0]fsr1
  4130  132B  3F80               	movwi [0]fsr0
  4131  132C  3F41               	moviw [1]fsr1
  4132  132D  3F81               	movwi [1]fsr0
  4133                           
  4134                           ;OverTemperature_B1.c: 43: }
  4135  132E  0008               	return
  4136  132F                     l9486:	
  4137                           
  4138                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4139  132F  087C               	movf	_Temp,w
  4140  1330  3E0A               	addlw	10
  4141  1331  0086               	movwf	6
  4142  1332  3001               	movlw	1	; select bank2/3
  4143  1333  0087               	movwf	7
  4144  1334  3F40               	moviw [0]fsr1
  4145  1335  00A4               	movwf	??_getTemp_AD
  4146  1336  3F41               	moviw [1]fsr1
  4147  1337  00A5               	movwf	??_getTemp_AD+1
  4148  1338  087C               	movf	_Temp,w
  4149  1339  3E08               	addlw	8
  4150  133A  0086               	movwf	6
  4151  133B  3001               	movlw	1	; select bank2/3
  4152  133C  0087               	movwf	7
  4153  133D  3F40               	moviw [0]fsr1
  4154  133E  00A6               	movwf	??_getTemp_AD+2
  4155  133F  3F41               	moviw [1]fsr1
  4156  1340  00A7               	movwf	??_getTemp_AD+3
  4157  1341  0825               	movf	??_getTemp_AD+1,w
  4158  1342  0227               	subwf	??_getTemp_AD+3,w
  4159  1343  1D03               	skipz
  4160  1344  2B47               	goto	u9195
  4161  1345  0824               	movf	??_getTemp_AD,w
  4162  1346  0226               	subwf	??_getTemp_AD+2,w
  4163  1347                     u9195:	
  4164  1347  1803               	skipnc
  4165  1348  0008               	return
  4166                           
  4167                           ;OverTemperature_B1.c: 45: {
  4168                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4169  1349  087C               	movf	_Temp,w
  4170  134A  3E0A               	addlw	10
  4171  134B  0086               	movwf	6
  4172  134C  3001               	movlw	1	; select bank2/3
  4173  134D  0087               	movwf	7
  4174  134E  087C               	movf	_Temp,w
  4175  134F  3E08               	addlw	8
  4176  1350  0084               	movwf	4
  4177  1351  3001               	movlw	1	; select bank2/3
  4178  1352  0085               	movwf	5
  4179  1353  3F40               	moviw [0]fsr1
  4180  1354  3F80               	movwi [0]fsr0
  4181  1355  3F41               	moviw [1]fsr1
  4182  1356  3F81               	movwi [1]fsr0
  4183  1357  0008               	return
  4184  1358                     __end_of_getTemp_AD:	
  4185                           
  4186                           	psect	text2
  4187  1D18                     __ptext2:	
  4188 ;; *************** function _getPowerFault_AD *****************
  4189 ;; Defined at:
  4190 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  channel         1    wreg     unsigned char 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  channel         1    8[BANK0 ] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;		None               void
  4197 ;; Registers used:
  4198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;Total ram usage:        5 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    5
  4211 ;; This function calls:
  4212 ;;		_getAD
  4213 ;; This function is called by:
  4214 ;;		_main
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function _getPowerFault_AD
  4220  1D18                     _getPowerFault_AD:	
  4221                           
  4222                           ;incstack = 0
  4223                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4224                           ;getPowerFault_AD@channel stored from wreg
  4225  1D18  0020               	movlb	0	; select bank0
  4226  1D19  00A8               	movwf	getPowerFault_AD@channel
  4227                           
  4228                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4229  1D1A  087A               	movf	_PF,w
  4230  1D1B  0086               	movwf	6
  4231  1D1C  3001               	movlw	1	; select bank2/3
  4232  1D1D  0087               	movwf	7
  4233  1D1E  1D81               	btfss	1,3
  4234  1D1F  0008               	return
  4235                           
  4236                           ;PowerFault_B1.c: 52: {
  4237                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4238  1D20  30F0               	movlw	240
  4239  1D21  00A4               	movwf	??_getPowerFault_AD
  4240  1D22  0824               	movf	??_getPowerFault_AD,w
  4241  1D23  00A0               	movwf	getAD@adcon1
  4242  1D24  0828               	movf	getPowerFault_AD@channel,w
  4243  1D25  3198  2066  319D   	fcall	_getAD
  4244  1D28  087A               	movf	_PF,w
  4245  1D29  3E03               	addlw	3
  4246  1D2A  0086               	movwf	6
  4247  1D2B  3001               	movlw	1	; select bank2/3
  4248  1D2C  0087               	movwf	7
  4249  1D2D  0020               	movlb	0	; select bank0
  4250  1D2E  0820               	movf	?_getAD,w
  4251  1D2F  3FC0               	movwi [0]fsr1
  4252  1D30  0821               	movf	?_getAD+1,w
  4253  1D31  3FC1               	movwi [1]fsr1
  4254                           
  4255                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4256  1D32  087A               	movf	_PF,w
  4257  1D33  3E03               	addlw	3
  4258  1D34  0086               	movwf	6
  4259  1D35  3001               	movlw	1	; select bank2/3
  4260  1D36  0087               	movwf	7
  4261  1D37  3F40               	moviw [0]fsr1
  4262  1D38  00A4               	movwf	??_getPowerFault_AD
  4263  1D39  3F41               	moviw [1]fsr1
  4264  1D3A  00A5               	movwf	??_getPowerFault_AD+1
  4265  1D3B  0A7A               	incf	_PF,w
  4266  1D3C  0086               	movwf	6
  4267  1D3D  3001               	movlw	1	; select bank2/3
  4268  1D3E  0087               	movwf	7
  4269  1D3F  3F40               	moviw [0]fsr1
  4270  1D40  00A6               	movwf	??_getPowerFault_AD+2
  4271  1D41  3F41               	moviw [1]fsr1
  4272  1D42  00A7               	movwf	??_getPowerFault_AD+3
  4273  1D43  0825               	movf	??_getPowerFault_AD+1,w
  4274  1D44  0227               	subwf	??_getPowerFault_AD+3,w
  4275  1D45  1D03               	skipz
  4276  1D46  2D49               	goto	u9215
  4277  1D47  0824               	movf	??_getPowerFault_AD,w
  4278  1D48  0226               	subwf	??_getPowerFault_AD+2,w
  4279  1D49                     u9215:	
  4280  1D49  1803               	skipnc
  4281  1D4A  0008               	return
  4282                           
  4283                           ;PowerFault_B1.c: 55: {
  4284                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4285  1D4B  087A               	movf	_PF,w
  4286  1D4C  3E03               	addlw	3
  4287  1D4D  0086               	movwf	6
  4288  1D4E  3001               	movlw	1	; select bank2/3
  4289  1D4F  0087               	movwf	7
  4290  1D50  0A7A               	incf	_PF,w
  4291  1D51  0084               	movwf	4
  4292  1D52  3001               	movlw	1	; select bank2/3
  4293  1D53  0085               	movwf	5
  4294  1D54  3F40               	moviw [0]fsr1
  4295  1D55  3F80               	movwi [0]fsr0
  4296  1D56  3F41               	moviw [1]fsr1
  4297  1D57  3F81               	movwi [1]fsr0
  4298  1D58  0008               	return
  4299  1D59                     __end_of_getPowerFault_AD:	
  4300                           
  4301                           	psect	text3
  4302  0933                     __ptext3:	
  4303 ;; *************** function _getLoad_AD *****************
  4304 ;; Defined at:
  4305 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  channel         1    wreg     unsigned char 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  channel         1    9[BANK0 ] unsigned char 
  4310 ;;  i               1   11[BANK0 ] unsigned char 
  4311 ;;  j               1   10[BANK0 ] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;		None               void
  4314 ;; Registers used:
  4315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;Total ram usage:        8 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    5
  4328 ;; This function calls:
  4329 ;;		_getAD
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _getLoad_AD
  4337  0933                     _getLoad_AD:	
  4338                           
  4339                           ;incstack = 0
  4340                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4341                           ;getLoad_AD@channel stored from wreg
  4342  0933  0020               	movlb	0	; select bank0
  4343  0934  00A9               	movwf	getLoad_AD@channel
  4344                           
  4345                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4346  0935  01AB               	clrf	getLoad_AD@i
  4347  0936  01AA               	clrf	getLoad_AD@j
  4348                           
  4349                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4350  0937  086E               	movf	_Load,w
  4351  0938  0086               	movwf	6
  4352  0939  3002               	movlw	2	; select bank4/5
  4353  093A  0087               	movwf	7
  4354  093B  1E01               	btfss	1,4
  4355  093C  0008               	return
  4356                           
  4357                           ;OverLoad_B1.c: 20: {
  4358                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4359  093D  30C0               	movlw	192
  4360  093E  00A4               	movwf	??_getLoad_AD
  4361  093F  0824               	movf	??_getLoad_AD,w
  4362  0940  00A0               	movwf	getAD@adcon1
  4363  0941  0829               	movf	getLoad_AD@channel,w
  4364  0942  3198  2066  3189   	fcall	_getAD
  4365  0945  0020               	movlb	0	; select bank0
  4366  0946  086E               	movf	_Load,w
  4367  0947  3E32               	addlw	50
  4368  0948  0086               	movwf	6
  4369  0949  3002               	movlw	2	; select bank4/5
  4370  094A  0087               	movwf	7
  4371  094B  0820               	movf	?_getAD,w
  4372  094C  3FC0               	movwi [0]fsr1
  4373  094D  0821               	movf	?_getAD+1,w
  4374  094E  3FC1               	movwi [1]fsr1
  4375                           
  4376                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4377  094F  01AB               	clrf	getLoad_AD@i
  4378  0950  3005               	movlw	5
  4379  0951  022B               	subwf	getLoad_AD@i,w
  4380  0952  1803               	btfsc	3,0
  4381  0953  298D               	goto	l9462
  4382  0954                     l9452:	
  4383                           
  4384                           ;OverLoad_B1.c: 23: {
  4385                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4386  0954  086E               	movf	_Load,w
  4387  0955  3E32               	addlw	50
  4388  0956  0086               	movwf	6
  4389  0957  3002               	movlw	2	; select bank4/5
  4390  0958  0087               	movwf	7
  4391  0959  3F40               	moviw [0]fsr1
  4392  095A  00A4               	movwf	??_getLoad_AD
  4393  095B  3F41               	moviw [1]fsr1
  4394  095C  00A5               	movwf	??_getLoad_AD+1
  4395  095D  352B               	lslf	getLoad_AD@i,w
  4396  095E  3E08               	addlw	8
  4397  095F  076E               	addwf	_Load,w
  4398  0960  00A6               	movwf	??_getLoad_AD+2
  4399  0961  0826               	movf	??_getLoad_AD+2,w
  4400  0962  0086               	movwf	6
  4401  0963  3002               	movlw	2	; select bank4/5
  4402  0964  0087               	movwf	7
  4403  0965  3F40               	moviw [0]fsr1
  4404  0966  00A7               	movwf	??_getLoad_AD+3
  4405  0967  3F41               	moviw [1]fsr1
  4406  0968  00A8               	movwf	??_getLoad_AD+4
  4407  0969  0825               	movf	??_getLoad_AD+1,w
  4408  096A  0228               	subwf	??_getLoad_AD+4,w
  4409  096B  1D03               	skipz
  4410  096C  296F               	goto	u9115
  4411  096D  0824               	movf	??_getLoad_AD,w
  4412  096E  0227               	subwf	??_getLoad_AD+3,w
  4413  096F                     u9115:	
  4414  096F  1803               	skipnc
  4415  0970  2985               	goto	l9458
  4416                           
  4417                           ;OverLoad_B1.c: 25: {
  4418                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4419  0971  086E               	movf	_Load,w
  4420  0972  3E32               	addlw	50
  4421  0973  0086               	movwf	6
  4422  0974  3002               	movlw	2	; select bank4/5
  4423  0975  0087               	movwf	7
  4424  0976  352B               	lslf	getLoad_AD@i,w
  4425  0977  3E08               	addlw	8
  4426  0978  076E               	addwf	_Load,w
  4427  0979  00A4               	movwf	??_getLoad_AD
  4428  097A  0824               	movf	??_getLoad_AD,w
  4429  097B  0084               	movwf	4
  4430  097C  3002               	movlw	2	; select bank4/5
  4431  097D  0085               	movwf	5
  4432  097E  3F40               	moviw [0]fsr1
  4433  097F  3F80               	movwi [0]fsr0
  4434  0980  3F41               	moviw [1]fsr1
  4435  0981  3F81               	movwi [1]fsr0
  4436                           
  4437                           ;OverLoad_B1.c: 27: j=1;
  4438  0982  01AA               	clrf	getLoad_AD@j
  4439  0983  0AAA               	incf	getLoad_AD@j,f
  4440                           
  4441                           ;OverLoad_B1.c: 28: break;
  4442  0984  298D               	goto	l9462
  4443  0985                     l9458:	
  4444  0985  3001               	movlw	1
  4445  0986  00A4               	movwf	??_getLoad_AD
  4446  0987  0824               	movf	??_getLoad_AD,w
  4447  0988  07AB               	addwf	getLoad_AD@i,f
  4448  0989  3005               	movlw	5
  4449  098A  022B               	subwf	getLoad_AD@i,w
  4450  098B  1C03               	skipc
  4451  098C  2954               	goto	l9452
  4452  098D                     l9462:	
  4453                           
  4454                           ;OverLoad_B1.c: 29: }
  4455                           ;OverLoad_B1.c: 30: }
  4456                           ;OverLoad_B1.c: 31: if(!j)
  4457  098D  08AA               	movf	getLoad_AD@j,f
  4458  098E  1D03               	skipz
  4459  098F  0008               	return
  4460                           
  4461                           ;OverLoad_B1.c: 32: {
  4462                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4463  0990  01AB               	clrf	getLoad_AD@i
  4464  0991                     L1:	
  4465  0991  3005               	movlw	5
  4466  0992  022B               	subwf	getLoad_AD@i,w
  4467  0993  1803               	btfsc	3,0
  4468  0994  0008               	return
  4469                           
  4470                           ;OverLoad_B1.c: 34: {
  4471                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4472  0995  352B               	lslf	getLoad_AD@i,w
  4473  0996  3E1A               	addlw	26
  4474  0997  076E               	addwf	_Load,w
  4475  0998  00A4               	movwf	??_getLoad_AD
  4476  0999  0824               	movf	??_getLoad_AD,w
  4477  099A  0086               	movwf	6
  4478  099B  3002               	movlw	2	; select bank4/5
  4479  099C  0087               	movwf	7
  4480  099D  3F40               	moviw [0]fsr1
  4481  099E  00A5               	movwf	??_getLoad_AD+1
  4482  099F  3F41               	moviw [1]fsr1
  4483  09A0  00A6               	movwf	??_getLoad_AD+2
  4484  09A1  086E               	movf	_Load,w
  4485  09A2  3E32               	addlw	50
  4486  09A3  0086               	movwf	6
  4487  09A4  3002               	movlw	2	; select bank4/5
  4488  09A5  0087               	movwf	7
  4489  09A6  3F40               	moviw [0]fsr1
  4490  09A7  00A7               	movwf	??_getLoad_AD+3
  4491  09A8  3F41               	moviw [1]fsr1
  4492  09A9  00A8               	movwf	??_getLoad_AD+4
  4493  09AA  0826               	movf	??_getLoad_AD+2,w
  4494  09AB  0228               	subwf	??_getLoad_AD+4,w
  4495  09AC  1D03               	skipz
  4496  09AD  29B0               	goto	u9155
  4497  09AE  0825               	movf	??_getLoad_AD+1,w
  4498  09AF  0227               	subwf	??_getLoad_AD+3,w
  4499  09B0                     u9155:	
  4500  09B0  1803               	skipnc
  4501  09B1  29C4               	goto	l9474
  4502                           
  4503                           ;OverLoad_B1.c: 36: {
  4504                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4505  09B2  086E               	movf	_Load,w
  4506  09B3  3E32               	addlw	50
  4507  09B4  0086               	movwf	6
  4508  09B5  3002               	movlw	2	; select bank4/5
  4509  09B6  0087               	movwf	7
  4510  09B7  352B               	lslf	getLoad_AD@i,w
  4511  09B8  3E1A               	addlw	26
  4512  09B9  076E               	addwf	_Load,w
  4513  09BA  00A4               	movwf	??_getLoad_AD
  4514  09BB  0824               	movf	??_getLoad_AD,w
  4515  09BC  0084               	movwf	4
  4516  09BD  3002               	movlw	2	; select bank4/5
  4517  09BE  0085               	movwf	5
  4518  09BF  3F40               	moviw [0]fsr1
  4519  09C0  3F80               	movwi [0]fsr0
  4520  09C1  3F41               	moviw [1]fsr1
  4521  09C2  3F81               	movwi [1]fsr0
  4522                           
  4523                           ;OverLoad_B1.c: 38: break;
  4524  09C3  0008               	return
  4525  09C4                     l9474:	
  4526  09C4  3001               	movlw	1
  4527  09C5  00A4               	movwf	??_getLoad_AD
  4528  09C6  0824               	movf	??_getLoad_AD,w
  4529  09C7  07AB               	addwf	getLoad_AD@i,f
  4530  09C8  2991               	goto	L1
  4531  09C9                     __end_of_getLoad_AD:	
  4532                           
  4533                           	psect	text4
  4534  1866                     __ptext4:	
  4535 ;; *************** function _getAD *****************
  4536 ;; Defined at:
  4537 ;;		line 385 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  adcon0          1    wreg     unsigned char 
  4540 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    0[BANK0 ] int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4552 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;Total ram usage:        4 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    4
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_getLoad_AD
  4563 ;;		_getTemp_AD
  4564 ;;		_getPowerFault_AD
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           
  4569                           ;psect for function _getAD
  4570  1866                     _getAD:	
  4571                           
  4572                           ;incstack = 0
  4573                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4574                           ;getAD@adcon0 stored from wreg
  4575  1866  0020               	movlb	0	; select bank0
  4576  1867  00A3               	movwf	getAD@adcon0
  4577                           
  4578                           ;MCU_B1.c: 387: ADCON0=adcon0;
  4579  1868  0823               	movf	getAD@adcon0,w
  4580  1869  0021               	movlb	1	; select bank1
  4581  186A  009D               	movwf	29	;volatile
  4582                           
  4583                           ;MCU_B1.c: 388: ADCON1=adcon1;
  4584  186B  0020               	movlb	0	; select bank0
  4585  186C  0820               	movf	getAD@adcon1,w
  4586  186D  0021               	movlb	1	; select bank1
  4587  186E  009E               	movwf	30	;volatile
  4588                           
  4589                           ;MCU_B1.c: 389: GO_nDONE=1;
  4590  186F  149D               	bsf	29,1	;volatile
  4591  1870                     l1642:	
  4592                           ;MCU_B1.c: 390: while(GO_nDONE);
  4593                           
  4594  1870  189D               	btfsc	29,1	;volatile
  4595  1871  2870               	goto	l1642
  4596                           
  4597                           ;MCU_B1.c: 391: return ((ADRESH*256)+ADRESL);
  4598  1872  081C               	movf	28,w	;volatile
  4599  1873  0020               	movlb	0	; select bank0
  4600  1874  01A1               	clrf	?_getAD+1
  4601  1875  07A1               	addwf	?_getAD+1,f
  4602  1876  0021               	movlb	1	; select bank1
  4603  1877  081B               	movf	27,w	;volatile
  4604  1878  0020               	movlb	0	; select bank0
  4605  1879  01A0               	clrf	?_getAD
  4606  187A  07A0               	addwf	?_getAD,f
  4607  187B  0008               	return
  4608  187C                     __end_of_getAD:	
  4609                           
  4610                           	psect	text5
  4611  27E4                     __ptext5:	
  4612 ;; *************** function _WDT_Main *****************
  4613 ;; Defined at:
  4614 ;;		line 986 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;		None               void
  4621 ;; Registers used:
  4622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;Total ram usage:        1 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    5
  4635 ;; This function calls:
  4636 ;;		_WDT_Clearing
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _WDT_Main
  4644  27E4                     _WDT_Main:	
  4645                           
  4646                           ;MCU_B1.c: 987: if(WDT->Enable){
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4650  27E4  0021               	movlb	1	; select bank1
  4651  27E5  0869               	movf	_WDT^(0+128),w
  4652  27E6  0086               	movwf	6
  4653  27E7  0187               	clrf	7
  4654  27E8  1C01               	btfss	1,0
  4655  27E9  0008               	return
  4656                           
  4657                           ;MCU_B1.c: 988: if(WDT->Count-- > 0){
  4658  27EA  0A69               	incf	_WDT^(0+128),w
  4659  27EB  0086               	movwf	6
  4660  27EC  0187               	clrf	7
  4661  27ED  3001               	movlw	1
  4662  27EE  0281               	subwf	1,f
  4663  27EF  0801               	movf	1,w
  4664  27F0  3AFF               	xorlw	255
  4665  27F1  1903               	skipnz
  4666  27F2  0008               	return
  4667                           
  4668                           ;MCU_B1.c: 989: WDT->Count=10;
  4669  27F3  300A               	movlw	10
  4670  27F4  0020               	movlb	0	; select bank0
  4671  27F5  00A0               	movwf	??_WDT_Main
  4672  27F6  0021               	movlb	1	; select bank1
  4673  27F7  0A69               	incf	_WDT^(0+128),w
  4674  27F8  0086               	movwf	6
  4675  27F9  0187               	clrf	7
  4676  27FA  0020               	movlb	0	; select bank0
  4677  27FB  0820               	movf	??_WDT_Main,w
  4678  27FC  0081               	movwf	1
  4679                           
  4680                           ;MCU_B1.c: 990: WDT_Clearing();
  4681  27FD  3180  2002         	fcall	_WDT_Clearing
  4682  27FF  0008               	return
  4683  2800                     __end_of_WDT_Main:	
  4684                           
  4685                           	psect	text6
  4686  0002                     __ptext6:	
  4687 ;; *************** function _WDT_Clearing *****************
  4688 ;; Defined at:
  4689 ;;		line 995 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;		None               void
  4696 ;; Registers used:
  4697 ;;		None
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    4
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_WDT_Main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           
  4718                           ;psect for function _WDT_Clearing
  4719  0002                     _WDT_Clearing:	
  4720                           
  4721                           ;incstack = 0
  4722                           ; Regs used in _WDT_Clearing: []
  4723  0002  0064               	clrwdt	;# 
  4724  0003  0008               	return
  4725  0004                     __end_of_WDT_Clearing:	
  4726                           
  4727                           	psect	text7
  4728  1000                     __ptext7:	
  4729 ;; *************** function _Temp_Main *****************
  4730 ;; Defined at:
  4731 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;Total ram usage:        0 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:   10
  4752 ;; This function calls:
  4753 ;;		_setTemp_Main
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _Temp_Main
  4761  1000                     _Temp_Main:	
  4762                           
  4763                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4767  1000  318E  26DD         	fcall	_setTemp_Main
  4768  1002  0008               	return
  4769  1003                     __end_of_Temp_Main:	
  4770                           
  4771                           	psect	text8
  4772  0EDD                     __ptext8:	
  4773 ;; *************** function _setTemp_Main *****************
  4774 ;; Defined at:
  4775 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;Total ram usage:        3 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    9
  4796 ;; This function calls:
  4797 ;;		_getLoad_Safe
  4798 ;;		_getPF_Safe
  4799 ;;		_setOverTemp_Exceptions
  4800 ;; This function is called by:
  4801 ;;		_Temp_Main
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _setTemp_Main
  4807  0EDD                     _setTemp_Main:	
  4808                           
  4809                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4813  0EDD  087C               	movf	_Temp,w
  4814  0EDE  0086               	movwf	6
  4815  0EDF  3001               	movlw	1	; select bank2/3
  4816  0EE0  0087               	movwf	7
  4817  0EE1  1C01               	btfss	1,0
  4818  0EE2  0008               	return
  4819                           
  4820                           ;OverTemperature_B1.c: 67: {
  4821                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4822  0EE3  087C               	movf	_Temp,w
  4823  0EE4  0086               	movwf	6
  4824  0EE5  3001               	movlw	1	; select bank2/3
  4825  0EE6  0087               	movwf	7
  4826  0EE7  1901               	btfsc	1,2
  4827  0EE8  2F29               	goto	l9092
  4828                           
  4829                           ;OverTemperature_B1.c: 69: {
  4830                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4831  0EE9  0A7C               	incf	_Temp,w
  4832  0EEA  0086               	movwf	6
  4833  0EEB  3001               	movlw	1	; select bank2/3
  4834  0EEC  0087               	movwf	7
  4835  0EED  3001               	movlw	1
  4836  0EEE  0781               	addwf	1,f
  4837  0EEF  3141               	addfsr 1,1
  4838  0EF0  1803               	skipnc
  4839  0EF1  0A81               	incf	1,f
  4840                           
  4841                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4842  0EF2  0A7C               	incf	_Temp,w
  4843  0EF3  0086               	movwf	6
  4844  0EF4  3001               	movlw	1	; select bank2/3
  4845  0EF5  0087               	movwf	7
  4846  0EF6  3F40               	moviw [0]fsr1
  4847  0EF7  0020               	movlb	0	; select bank0
  4848  0EF8  00AD               	movwf	??_setTemp_Main
  4849  0EF9  3F41               	moviw [1]fsr1
  4850  0EFA  00AE               	movwf	??_setTemp_Main+1
  4851  0EFB  3001               	movlw	1
  4852  0EFC  022E               	subwf	??_setTemp_Main+1,w
  4853  0EFD  30F4               	movlw	244
  4854  0EFE  1903               	skipnz
  4855  0EFF  022D               	subwf	??_setTemp_Main,w
  4856  0F00  1C03               	skipc
  4857  0F01  0008               	return
  4858                           
  4859                           ;OverTemperature_B1.c: 72: {
  4860                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4861  0F02  31A5  2549  318E   	fcall	_getLoad_Safe
  4862  0F05  3A00               	xorlw	0
  4863  0F06  1903               	skipnz
  4864  0F07  2F20               	goto	l9090
  4865  0F08  31A4  24CF  318E   	fcall	_getPF_Safe
  4866  0F0B  3A00               	xorlw	0
  4867  0F0C  1903               	skipnz
  4868  0F0D  2F20               	goto	l9090
  4869                           
  4870                           ;OverTemperature_B1.c: 74: {
  4871                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4872  0F0E  0A7C               	incf	_Temp,w
  4873  0F0F  0086               	movwf	6
  4874  0F10  3001               	movlw	1	; select bank2/3
  4875  0F11  0087               	movwf	7
  4876  0F12  3000               	movlw	0
  4877  0F13  3FC0               	movwi [0]fsr1
  4878  0F14  3FC1               	movwi [1]fsr1
  4879                           
  4880                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4881  0F15  087C               	movf	_Temp,w
  4882  0F16  0086               	movwf	6
  4883  0F17  3001               	movlw	1	; select bank2/3
  4884  0F18  0087               	movwf	7
  4885  0F19  1501               	bsf	1,2
  4886                           
  4887                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4888  0F1A  087C               	movf	_Temp,w
  4889  0F1B  0086               	movwf	6
  4890  0F1C  3001               	movlw	1	; select bank2/3
  4891  0F1D  0087               	movwf	7
  4892  0F1E  1201               	bcf	1,4
  4893                           
  4894                           ;OverTemperature_B1.c: 78: }
  4895  0F1F  0008               	return
  4896  0F20                     l9090:	
  4897                           
  4898                           ;OverTemperature_B1.c: 79: else
  4899                           ;OverTemperature_B1.c: 80: {
  4900                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4901  0F20  0A7C               	incf	_Temp,w
  4902  0F21  0086               	movwf	6
  4903  0F22  3001               	movlw	1	; select bank2/3
  4904  0F23  0087               	movwf	7
  4905  0F24  30E8               	movlw	232
  4906  0F25  3FC0               	movwi [0]fsr1
  4907  0F26  3003               	movlw	3
  4908  0F27  3FC1               	movwi [1]fsr1
  4909                           
  4910                           ;OverTemperature_B1.c: 82: }
  4911                           ;OverTemperature_B1.c: 83: }
  4912                           ;OverTemperature_B1.c: 84: }
  4913  0F28  0008               	return
  4914  0F29                     l9092:	
  4915                           
  4916                           ;OverTemperature_B1.c: 85: else
  4917                           ;OverTemperature_B1.c: 86: {
  4918                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4919  0F29  0A7C               	incf	_Temp,w
  4920  0F2A  0086               	movwf	6
  4921  0F2B  3001               	movlw	1	; select bank2/3
  4922  0F2C  0087               	movwf	7
  4923  0F2D  3001               	movlw	1
  4924  0F2E  0781               	addwf	1,f
  4925  0F2F  3141               	addfsr 1,1
  4926  0F30  1803               	skipnc
  4927  0F31  0A81               	incf	1,f
  4928                           
  4929                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4930  0F32  0A7C               	incf	_Temp,w
  4931  0F33  0086               	movwf	6
  4932  0F34  3001               	movlw	1	; select bank2/3
  4933  0F35  0087               	movwf	7
  4934  0F36  3F40               	moviw [0]fsr1
  4935  0F37  0020               	movlb	0	; select bank0
  4936  0F38  00AD               	movwf	??_setTemp_Main
  4937  0F39  3F41               	moviw [1]fsr1
  4938  0F3A  00AE               	movwf	??_setTemp_Main+1
  4939  0F3B  3000               	movlw	0
  4940  0F3C  022E               	subwf	??_setTemp_Main+1,w
  4941  0F3D  3004               	movlw	4
  4942  0F3E  1903               	skipnz
  4943  0F3F  022D               	subwf	??_setTemp_Main,w
  4944  0F40  1C03               	skipc
  4945  0F41  0008               	return
  4946                           
  4947                           ;OverTemperature_B1.c: 89: {
  4948                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4949  0F42  0A7C               	incf	_Temp,w
  4950  0F43  0086               	movwf	6
  4951  0F44  3001               	movlw	1	; select bank2/3
  4952  0F45  0087               	movwf	7
  4953  0F46  3000               	movlw	0
  4954  0F47  3FC0               	movwi [0]fsr1
  4955  0F48  3FC1               	movwi [1]fsr1
  4956                           
  4957                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4958  0F49  087C               	movf	_Temp,w
  4959  0F4A  0086               	movwf	6
  4960  0F4B  3001               	movlw	1	; select bank2/3
  4961  0F4C  0087               	movwf	7
  4962  0F4D  1101               	bcf	1,2
  4963                           
  4964                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4965  0F4E  087C               	movf	_Temp,w
  4966  0F4F  3E08               	addlw	8
  4967  0F50  0086               	movwf	6
  4968  0F51  3001               	movlw	1	; select bank2/3
  4969  0F52  0087               	movwf	7
  4970  0F53  087C               	movf	_Temp,w
  4971  0F54  3E04               	addlw	4
  4972  0F55  0084               	movwf	4
  4973  0F56  3001               	movlw	1	; select bank2/3
  4974  0F57  0085               	movwf	5
  4975  0F58  3F40               	moviw [0]fsr1
  4976  0F59  3F80               	movwi [0]fsr0
  4977  0F5A  3F41               	moviw [1]fsr1
  4978  0F5B  3F81               	movwi [1]fsr0
  4979                           
  4980                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4981  0F5C  087C               	movf	_Temp,w
  4982  0F5D  0086               	movwf	6
  4983  0F5E  3001               	movlw	1	; select bank2/3
  4984  0F5F  0087               	movwf	7
  4985  0F60  1C81               	btfss	1,1
  4986  0F61  2F8F               	goto	l9114
  4987                           
  4988                           ;OverTemperature_B1.c: 94: {
  4989                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4990  0F62  087C               	movf	_Temp,w
  4991  0F63  3E04               	addlw	4
  4992  0F64  0086               	movwf	6
  4993  0F65  3001               	movlw	1	; select bank2/3
  4994  0F66  0087               	movwf	7
  4995  0F67  3F40               	moviw [0]fsr1
  4996  0F68  00AD               	movwf	??_setTemp_Main
  4997  0F69  3F41               	moviw [1]fsr1
  4998  0F6A  00AE               	movwf	??_setTemp_Main+1
  4999  0F6B  3002               	movlw	2
  5000  0F6C  022E               	subwf	??_setTemp_Main+1,w
  5001  0F6D  3058               	movlw	88
  5002  0F6E  1903               	skipnz
  5003  0F6F  022D               	subwf	??_setTemp_Main,w
  5004  0F70  1C03               	skipc
  5005  0F71  2FBD               	goto	l9124
  5006                           
  5007                           ;OverTemperature_B1.c: 96: {
  5008                           ;OverTemperature_B1.c: 97: Temp->Count++;
  5009  0F72  3001               	movlw	1
  5010  0F73  00AD               	movwf	??_setTemp_Main
  5011  0F74  087C               	movf	_Temp,w
  5012  0F75  3E03               	addlw	3
  5013  0F76  0086               	movwf	6
  5014  0F77  3001               	movlw	1	; select bank2/3
  5015  0F78  0087               	movwf	7
  5016  0F79  082D               	movf	??_setTemp_Main,w
  5017  0F7A  0781               	addwf	1,f
  5018                           
  5019                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5020  0F7B  087C               	movf	_Temp,w
  5021  0F7C  3E03               	addlw	3
  5022  0F7D  0086               	movwf	6
  5023  0F7E  3001               	movlw	1	; select bank2/3
  5024  0F7F  0087               	movwf	7
  5025  0F80  3003               	movlw	3
  5026  0F81  0201               	subwf	1,w
  5027  0F82  1C03               	skipc
  5028  0F83  2FC3               	goto	l9126
  5029                           
  5030                           ;OverTemperature_B1.c: 99: {
  5031                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5032  0F84  087C               	movf	_Temp,w
  5033  0F85  3E03               	addlw	3
  5034  0F86  0086               	movwf	6
  5035  0F87  3001               	movlw	1	; select bank2/3
  5036  0F88  0087               	movwf	7
  5037  0F89  0181               	clrf	1
  5038                           
  5039                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5040  0F8A  3000               	movlw	0
  5041  0F8B  319E  26B5  318E   	fcall	_setOverTemp_Exceptions
  5042                           
  5043                           ;OverTemperature_B1.c: 102: }
  5044                           ;OverTemperature_B1.c: 103: }
  5045  0F8E  2FC3               	goto	l9126
  5046  0F8F                     l9114:	
  5047                           ;OverTemperature_B1.c: 107: }
  5048                           ;OverTemperature_B1.c: 108: }
  5049                           
  5050                           ;OverTemperature_B1.c: 104: else
  5051                           ;OverTemperature_B1.c: 105: {
  5052                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5053                           
  5054                           
  5055                           ;OverTemperature_B1.c: 109: else
  5056                           ;OverTemperature_B1.c: 110: {
  5057                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5058  0F8F  087C               	movf	_Temp,w
  5059  0F90  3E04               	addlw	4
  5060  0F91  0086               	movwf	6
  5061  0F92  3001               	movlw	1	; select bank2/3
  5062  0F93  0087               	movwf	7
  5063  0F94  3F40               	moviw [0]fsr1
  5064  0F95  0020               	movlb	0	; select bank0
  5065  0F96  00AD               	movwf	??_setTemp_Main
  5066  0F97  3F41               	moviw [1]fsr1
  5067  0F98  00AE               	movwf	??_setTemp_Main+1
  5068  0F99  3002               	movlw	2
  5069  0F9A  022E               	subwf	??_setTemp_Main+1,w
  5070  0F9B  3027               	movlw	39
  5071  0F9C  1903               	skipnz
  5072  0F9D  022D               	subwf	??_setTemp_Main,w
  5073  0F9E  1803               	skipnc
  5074  0F9F  2FBD               	goto	l9124
  5075                           
  5076                           ;OverTemperature_B1.c: 112: {
  5077                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5078  0FA0  3001               	movlw	1
  5079  0FA1  00AD               	movwf	??_setTemp_Main
  5080  0FA2  087C               	movf	_Temp,w
  5081  0FA3  3E03               	addlw	3
  5082  0FA4  0086               	movwf	6
  5083  0FA5  3001               	movlw	1	; select bank2/3
  5084  0FA6  0087               	movwf	7
  5085  0FA7  082D               	movf	??_setTemp_Main,w
  5086  0FA8  0781               	addwf	1,f
  5087                           
  5088                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5089  0FA9  087C               	movf	_Temp,w
  5090  0FAA  3E03               	addlw	3
  5091  0FAB  0086               	movwf	6
  5092  0FAC  3001               	movlw	1	; select bank2/3
  5093  0FAD  0087               	movwf	7
  5094  0FAE  3003               	movlw	3
  5095  0FAF  0201               	subwf	1,w
  5096  0FB0  1C03               	skipc
  5097  0FB1  2FC3               	goto	l9126
  5098                           
  5099                           ;OverTemperature_B1.c: 115: {
  5100                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5101  0FB2  087C               	movf	_Temp,w
  5102  0FB3  3E03               	addlw	3
  5103  0FB4  0086               	movwf	6
  5104  0FB5  3001               	movlw	1	; select bank2/3
  5105  0FB6  0087               	movwf	7
  5106  0FB7  0181               	clrf	1
  5107                           
  5108                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5109  0FB8  3001               	movlw	1
  5110  0FB9  319E  26B5  318E   	fcall	_setOverTemp_Exceptions
  5111                           
  5112                           ;OverTemperature_B1.c: 118: }
  5113                           ;OverTemperature_B1.c: 119: }
  5114  0FBC  2FC3               	goto	l9126
  5115  0FBD                     l9124:	
  5116                           
  5117                           ;OverTemperature_B1.c: 120: else
  5118                           ;OverTemperature_B1.c: 121: {
  5119                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5120  0FBD  087C               	movf	_Temp,w
  5121  0FBE  3E03               	addlw	3
  5122  0FBF  0086               	movwf	6
  5123  0FC0  3001               	movlw	1	; select bank2/3
  5124  0FC1  0087               	movwf	7
  5125  0FC2  0181               	clrf	1
  5126  0FC3                     l9126:	
  5127                           
  5128                           ;OverTemperature_B1.c: 123: }
  5129                           ;OverTemperature_B1.c: 124: }
  5130                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5131  0FC3  087C               	movf	_Temp,w
  5132  0FC4  0086               	movwf	6
  5133  0FC5  3001               	movlw	1	; select bank2/3
  5134  0FC6  0087               	movwf	7
  5135  0FC7  1881               	btfsc	1,1
  5136  0FC8  2FCE               	goto	l9130
  5137                           
  5138                           ;OverTemperature_B1.c: 126: {
  5139                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5140  0FC9  087C               	movf	_Temp,w
  5141  0FCA  0086               	movwf	6
  5142  0FCB  3001               	movlw	1	; select bank2/3
  5143  0FCC  0087               	movwf	7
  5144  0FCD  1601               	bsf	1,4
  5145  0FCE                     l9130:	
  5146                           
  5147                           ;OverTemperature_B1.c: 128: }
  5148                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5149  0FCE  087C               	movf	_Temp,w
  5150  0FCF  3E04               	addlw	4
  5151  0FD0  0086               	movwf	6
  5152  0FD1  3001               	movlw	1	; select bank2/3
  5153  0FD2  0087               	movwf	7
  5154  0FD3  3F40               	moviw [0]fsr1
  5155  0FD4  0020               	movlb	0	; select bank0
  5156  0FD5  00AD               	movwf	??_setTemp_Main
  5157  0FD6  3F41               	moviw [1]fsr1
  5158  0FD7  00AE               	movwf	??_setTemp_Main+1
  5159  0FD8  082E               	movf	??_setTemp_Main+1,w
  5160  0FD9  00AF               	movwf	??_setTemp_Main+2
  5161  0FDA  086F               	movf	_Product,w
  5162  0FDB  3E18               	addlw	24
  5163  0FDC  0086               	movwf	6
  5164  0FDD  3001               	movlw	1	; select bank2/3
  5165  0FDE  0087               	movwf	7
  5166  0FDF  082F               	movf	??_setTemp_Main+2,w
  5167  0FE0  0081               	movwf	1
  5168                           
  5169                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5170  0FE1  087C               	movf	_Temp,w
  5171  0FE2  3E04               	addlw	4
  5172  0FE3  0086               	movwf	6
  5173  0FE4  3001               	movlw	1	; select bank2/3
  5174  0FE5  0087               	movwf	7
  5175  0FE6  0801               	movf	1,w
  5176  0FE7  00AD               	movwf	??_setTemp_Main
  5177  0FE8  086F               	movf	_Product,w
  5178  0FE9  3E19               	addlw	25
  5179  0FEA  0086               	movwf	6
  5180  0FEB  3001               	movlw	1	; select bank2/3
  5181  0FEC  0087               	movwf	7
  5182  0FED  082D               	movf	??_setTemp_Main,w
  5183  0FEE  0081               	movwf	1
  5184                           
  5185                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5186  0FEF  087C               	movf	_Temp,w
  5187  0FF0  3E06               	addlw	6
  5188  0FF1  0086               	movwf	6
  5189  0FF2  3001               	movlw	1	; select bank2/3
  5190  0FF3  0087               	movwf	7
  5191  0FF4  3000               	movlw	0
  5192  0FF5  3FC0               	movwi [0]fsr1
  5193  0FF6  3FC1               	movwi [1]fsr1
  5194                           
  5195                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5196  0FF7  087C               	movf	_Temp,w
  5197  0FF8  3E08               	addlw	8
  5198  0FF9  0086               	movwf	6
  5199  0FFA  3001               	movlw	1	; select bank2/3
  5200  0FFB  0087               	movwf	7
  5201  0FFC  3000               	movlw	0
  5202  0FFD  3FC0               	movwi [0]fsr1
  5203  0FFE  3FC1               	movwi [1]fsr1
  5204  0FFF  0008               	return
  5205  1000                     __end_of_setTemp_Main:	
  5206                           
  5207                           	psect	text9
  5208  1EB5                     __ptext9:	
  5209 ;; *************** function _setOverTemp_Exceptions *****************
  5210 ;; Defined at:
  5211 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  command         1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  command         1   12[BANK0 ] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;Total ram usage:        2 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    8
  5232 ;; This function calls:
  5233 ;;		_DimmerLights_Exceptions
  5234 ;;		_setBuz
  5235 ;;		_setLED
  5236 ;;		_setRF_Enable
  5237 ;;		_setSw_Enable
  5238 ;; This function is called by:
  5239 ;;		_setTemp_Main
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           
  5244                           ;psect for function _setOverTemp_Exceptions
  5245  1EB5                     _setOverTemp_Exceptions:	
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5249                           ;setOverTemp_Exceptions@command stored from wreg
  5250  1EB5  0020               	movlb	0	; select bank0
  5251  1EB6  00AC               	movwf	setOverTemp_Exceptions@command
  5252                           
  5253                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5254  1EB7  087C               	movf	_Temp,w
  5255  1EB8  0086               	movwf	6
  5256  1EB9  3001               	movlw	1	; select bank2/3
  5257  1EBA  0087               	movwf	7
  5258  1EBB  082C               	movf	setOverTemp_Exceptions@command,w
  5259  1EBC  1081               	bcf	1,1
  5260  1EBD  1D03               	skipz
  5261  1EBE  1481               	bsf	1,1
  5262                           
  5263                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5264  1EBF  092C               	comf	setOverTemp_Exceptions@command,w
  5265  1EC0  3901               	andlw	1
  5266  1EC1  00AB               	movwf	??_setOverTemp_Exceptions
  5267  1EC2  087C               	movf	_Temp,w
  5268  1EC3  0086               	movwf	6
  5269  1EC4  3001               	movlw	1	; select bank2/3
  5270  1EC5  0087               	movwf	7
  5271  1EC6  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5272  1EC7  0801               	movf	1,w
  5273  1EC8  062B               	xorwf	??_setOverTemp_Exceptions,w
  5274  1EC9  39EF               	andlw	-17
  5275  1ECA  062B               	xorwf	??_setOverTemp_Exceptions,w
  5276  1ECB  0081               	movwf	1
  5277                           
  5278                           ;OverTemperature_B1.c: 142: if(command)
  5279  1ECC  082C               	movf	setOverTemp_Exceptions@command,w
  5280  1ECD  1903               	btfsc	3,2
  5281  1ECE  2EDB               	goto	l8750
  5282                           
  5283                           ;OverTemperature_B1.c: 143: {
  5284                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5285  1ECF  3001               	movlw	1
  5286  1ED0  3190  204D  319E   	fcall	_DimmerLights_Exceptions
  5287                           
  5288                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5289  1ED3  0020               	movlb	0	; select bank0
  5290  1ED4  01A2               	clrf	setLED@command
  5291  1ED5  0AA2               	incf	setLED@command,f
  5292  1ED6  3002               	movlw	2
  5293  1ED7  3191  215E  319E   	fcall	_setLED
  5294                           
  5295                           ;OverTemperature_B1.c: 148: }
  5296  1EDA  2EE4               	goto	l2083
  5297  1EDB                     l8750:	
  5298                           
  5299                           ;OverTemperature_B1.c: 149: else
  5300                           ;OverTemperature_B1.c: 150: {
  5301                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5302  1EDB  3064               	movlw	100
  5303  1EDC  0020               	movlb	0	; select bank0
  5304  1EDD  00A6               	movwf	setBuz@time
  5305  1EDE  3000               	movlw	0
  5306  1EDF  00A7               	movwf	setBuz@time+1
  5307  1EE0  3002               	movlw	2
  5308  1EE1  3195  2587  319E   	fcall	_setBuz
  5309  1EE4                     l2083:	
  5310                           
  5311                           ;OverTemperature_B1.c: 152: }
  5312                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5313  1EE4  0020               	movlb	0	; select bank0
  5314  1EE5  082C               	movf	setOverTemp_Exceptions@command,w
  5315  1EE6  3E0A               	addlw	10
  5316  1EE7  00AB               	movwf	??_setOverTemp_Exceptions
  5317  1EE8  082B               	movf	??_setOverTemp_Exceptions,w
  5318  1EE9  00A2               	movwf	setLED@command
  5319  1EEA  3063               	movlw	99
  5320  1EEB  3191  215E  319E   	fcall	_setLED
  5321                           
  5322                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5323  1EEE  0020               	movlb	0	; select bank0
  5324  1EEF  092C               	comf	setOverTemp_Exceptions@command,w
  5325  1EF0  3901               	andlw	1
  5326  1EF1  31A6  263A  319E   	fcall	_setSw_Enable
  5327                           
  5328                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5329  1EF4  0020               	movlb	0	; select bank0
  5330  1EF5  092C               	comf	setOverTemp_Exceptions@command,w
  5331  1EF6  3901               	andlw	1
  5332  1EF7  00AB               	movwf	??_setOverTemp_Exceptions
  5333  1EF8  082B               	movf	??_setOverTemp_Exceptions,w
  5334  1EF9  00A2               	movwf	setRF_Enable@command
  5335  1EFA  3001               	movlw	1
  5336  1EFB  319A  221A         	fcall	_setRF_Enable
  5337  1EFD  0008               	return
  5338  1EFE                     __end_of_setOverTemp_Exceptions:	
  5339                           
  5340                           	psect	text10
  5341  2472                     __ptext10:	
  5342 ;; *************** function _Temp_Initialization *****************
  5343 ;; Defined at:
  5344 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;		None               void
  5351 ;; Registers used:
  5352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;Total ram usage:        0 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    5
  5365 ;; This function calls:
  5366 ;;		_setTemp_Initialization
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _Temp_Initialization
  5374  2472                     _Temp_Initialization:	
  5375                           
  5376                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5380  2472  31A5  2554         	fcall	_setTemp_Initialization
  5381  2474  0008               	return
  5382  2475                     __end_of_Temp_Initialization:	
  5383                           
  5384                           	psect	text11
  5385  2554                     __ptext11:	
  5386 ;; *************** function _setTemp_Initialization *****************
  5387 ;; Defined at:
  5388 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;		None               void
  5395 ;; Registers used:
  5396 ;;		wreg, fsr1l, fsr1h
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;Total ram usage:        1 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    4
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_Temp_Initialization
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _setTemp_Initialization
  5418  2554                     _setTemp_Initialization:	
  5419                           
  5420                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5421                           
  5422                           ;incstack = 0
  5423                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5424  2554  303F               	movlw	_Temp1& (0+255)
  5425  2555  0020               	movlb	0	; select bank0
  5426  2556  00A0               	movwf	??_setTemp_Initialization
  5427  2557  0820               	movf	??_setTemp_Initialization,w
  5428  2558  00FC               	movwf	_Temp
  5429                           
  5430                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5431  2559  087C               	movf	_Temp,w
  5432  255A  0086               	movwf	6
  5433  255B  3001               	movlw	1	; select bank2/3
  5434  255C  0087               	movwf	7
  5435  255D  1601               	bsf	1,4
  5436  255E  0008               	return
  5437  255F                     __end_of_setTemp_Initialization:	
  5438                           
  5439                           	psect	text12
  5440  2491                     __ptext12:	
  5441 ;; *************** function _Switch_Main *****************
  5442 ;; Defined at:
  5443 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;		None               void
  5450 ;; Registers used:
  5451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;Total ram usage:        0 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:   10
  5464 ;; This function calls:
  5465 ;;		_setSw_Main
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           
  5472                           ;psect for function _Switch_Main
  5473  2491                     _Switch_Main:	
  5474                           
  5475                           ;Switch_B1.c: 65: setSw_Main(1);
  5476                           
  5477                           ;incstack = 0
  5478                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5479  2491  3001               	movlw	1
  5480  2492  3185  25F3         	fcall	_setSw_Main
  5481  2494  0008               	return
  5482  2495                     __end_of_Switch_Main:	
  5483                           
  5484                           	psect	text13
  5485  05F3                     __ptext13:	
  5486 ;; *************** function _setSw_Main *****************
  5487 ;; Defined at:
  5488 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  sw              1    wreg     unsigned char 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  sw              1   72[BANK0 ] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;		None               void
  5495 ;; Registers used:
  5496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        4 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    9
  5509 ;; This function calls:
  5510 ;;		_SwPointSelect
  5511 ;;		_Sw_DimmerAdjFunc
  5512 ;;		_Sw_DimmerOffFunc
  5513 ;;		_Sw_DimmerOnFunc
  5514 ;;		_setBuz
  5515 ;;		_setRF_Learn
  5516 ;; This function is called by:
  5517 ;;		_Switch_Main
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           
  5522                           ;psect for function _setSw_Main
  5523  05F3                     _setSw_Main:	
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5527                           ;setSw_Main@sw stored from wreg
  5528  05F3  0020               	movlb	0	; select bank0
  5529  05F4  00E8               	movwf	setSw_Main@sw
  5530                           
  5531                           ;Switch_B1.c: 114: if(Sw->Enable)
  5532  05F5  086D               	movf	_Sw,w
  5533  05F6  0086               	movwf	6
  5534  05F7  3001               	movlw	1	; select bank2/3
  5535  05F8  0087               	movwf	7
  5536  05F9  1C01               	btfss	1,0
  5537  05FA  0008               	return
  5538                           
  5539                           ;Switch_B1.c: 115: {
  5540                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5541  05FB  0868               	movf	setSw_Main@sw,w
  5542  05FC  31A5  251D  3185   	fcall	_SwPointSelect
  5543                           
  5544                           ;Switch_B1.c: 144: Sw->Touch=(RA6 || RA4 || RA0 || RB1)?1:0;
  5545  05FF  0020               	movlb	0	; select bank0
  5546  0600  01E7               	clrf	_setSw_Main$4748
  5547  0601  0AE7               	incf	_setSw_Main$4748,f
  5548  0602  1F0C               	btfss	12,6	;volatile
  5549  0603  1A0C               	btfsc	12,4	;volatile
  5550  0604  2E09               	goto	l9272
  5551  0605  1C0C               	btfss	12,0	;volatile
  5552  0606  188D               	btfsc	13,1	;volatile
  5553  0607  2E09               	goto	l9272
  5554  0608  01E7               	clrf	_setSw_Main$4748
  5555  0609                     l9272:	
  5556  0609  086D               	movf	_Sw,w
  5557  060A  0086               	movwf	6
  5558  060B  3001               	movlw	1	; select bank2/3
  5559  060C  0087               	movwf	7
  5560  060D  0867               	movf	_setSw_Main$4748,w
  5561  060E  1081               	bcf	1,1
  5562  060F  1D03               	skipz
  5563  0610  1481               	bsf	1,1
  5564                           
  5565                           ;Switch_B1.c: 148: if(Sw->Touch)
  5566  0611  086D               	movf	_Sw,w
  5567  0612  0086               	movwf	6
  5568  0613  3001               	movlw	1	; select bank2/3
  5569  0614  0087               	movwf	7
  5570  0615  1C81               	btfss	1,1
  5571  0616  2EE7               	goto	l9322
  5572                           
  5573                           ;Switch_B1.c: 149: {
  5574                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5575  0617  086D               	movf	_Sw,w
  5576  0618  0086               	movwf	6
  5577  0619  3001               	movlw	1	; select bank2/3
  5578  061A  0087               	movwf	7
  5579  061B  1901               	btfsc	1,2
  5580  061C  2E3E               	goto	l9288
  5581                           
  5582                           ;Switch_B1.c: 151: {
  5583                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5584  061D  3001               	movlw	1
  5585  061E  00E5               	movwf	??_setSw_Main
  5586  061F  086D               	movf	_Sw,w
  5587  0620  3E02               	addlw	2
  5588  0621  0086               	movwf	6
  5589  0622  3001               	movlw	1	; select bank2/3
  5590  0623  0087               	movwf	7
  5591  0624  0865               	movf	??_setSw_Main,w
  5592  0625  0781               	addwf	1,f
  5593                           
  5594                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5595  0626  086D               	movf	_Sw,w
  5596  0627  3E02               	addlw	2
  5597  0628  0086               	movwf	6
  5598  0629  3001               	movlw	1	; select bank2/3
  5599  062A  0087               	movwf	7
  5600  062B  3005               	movlw	5
  5601  062C  0201               	subwf	1,w
  5602  062D  1C03               	skipc
  5603  062E  0008               	return
  5604                           
  5605                           ;Switch_B1.c: 154: {
  5606                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5607  062F  086D               	movf	_Sw,w
  5608  0630  3E02               	addlw	2
  5609  0631  0086               	movwf	6
  5610  0632  3001               	movlw	1	; select bank2/3
  5611  0633  0087               	movwf	7
  5612  0634  0181               	clrf	1
  5613                           
  5614                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5615  0635  086D               	movf	_Sw,w
  5616  0636  0086               	movwf	6
  5617  0637  3001               	movlw	1	; select bank2/3
  5618  0638  0087               	movwf	7
  5619  0639  1501               	bsf	1,2
  5620                           
  5621                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5622  063A  0868               	movf	setSw_Main@sw,w
  5623  063B  319F  27A7         	fcall	_Sw_DimmerOnFunc
  5624                           
  5625                           ;Switch_B1.c: 162: }
  5626                           ;Switch_B1.c: 163: }
  5627  063D  0008               	return
  5628  063E                     l9288:	
  5629                           
  5630                           ;Switch_B1.c: 164: else
  5631                           ;Switch_B1.c: 165: {
  5632                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5633  063E  0020               	movlb	0	; select bank0
  5634  063F  086D               	movf	_Sw,w
  5635  0640  0086               	movwf	6
  5636  0641  3001               	movlw	1	; select bank2/3
  5637  0642  0087               	movwf	7
  5638  0643  1981               	btfsc	1,3
  5639  0644  2E70               	goto	l9298
  5640                           
  5641                           ;Switch_B1.c: 167: {
  5642                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5643  0645  086D               	movf	_Sw,w
  5644  0646  3E03               	addlw	3
  5645  0647  0086               	movwf	6
  5646  0648  3001               	movlw	1	; select bank2/3
  5647  0649  0087               	movwf	7
  5648  064A  3001               	movlw	1
  5649  064B  0781               	addwf	1,f
  5650  064C  3141               	addfsr 1,1
  5651  064D  1803               	skipnc
  5652  064E  0A81               	incf	1,f
  5653                           
  5654                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5655  064F  086D               	movf	_Sw,w
  5656  0650  3E03               	addlw	3
  5657  0651  0086               	movwf	6
  5658  0652  3001               	movlw	1	; select bank2/3
  5659  0653  0087               	movwf	7
  5660  0654  3F40               	moviw [0]fsr1
  5661  0655  00E5               	movwf	??_setSw_Main
  5662  0656  3F41               	moviw [1]fsr1
  5663  0657  00E6               	movwf	??_setSw_Main+1
  5664  0658  3000               	movlw	0
  5665  0659  0266               	subwf	??_setSw_Main+1,w
  5666  065A  3096               	movlw	150
  5667  065B  1903               	skipnz
  5668  065C  0265               	subwf	??_setSw_Main,w
  5669  065D  1C03               	skipc
  5670  065E  0008               	return
  5671                           
  5672                           ;Switch_B1.c: 170: {
  5673                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5674  065F  086D               	movf	_Sw,w
  5675  0660  3E03               	addlw	3
  5676  0661  0086               	movwf	6
  5677  0662  3001               	movlw	1	; select bank2/3
  5678  0663  0087               	movwf	7
  5679  0664  3000               	movlw	0
  5680  0665  3FC0               	movwi [0]fsr1
  5681  0666  3FC1               	movwi [1]fsr1
  5682                           
  5683                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5684  0667  086D               	movf	_Sw,w
  5685  0668  0086               	movwf	6
  5686  0669  3001               	movlw	1	; select bank2/3
  5687  066A  0087               	movwf	7
  5688  066B  1581               	bsf	1,3
  5689                           
  5690                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5691  066C  0868               	movf	setSw_Main@sw,w
  5692  066D  319A  226F         	fcall	_Sw_DimmerAdjFunc
  5693                           
  5694                           ;Switch_B1.c: 178: }
  5695                           ;Switch_B1.c: 179: }
  5696  066F  0008               	return
  5697  0670                     l9298:	
  5698                           
  5699                           ;Switch_B1.c: 180: else
  5700                           ;Switch_B1.c: 181: {
  5701                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5702  0670  0020               	movlb	0	; select bank0
  5703  0671  086D               	movf	_Sw,w
  5704  0672  0086               	movwf	6
  5705  0673  3001               	movlw	1	; select bank2/3
  5706  0674  0087               	movwf	7
  5707  0675  1A01               	btfsc	1,4
  5708  0676  2EB4               	goto	l9312
  5709                           
  5710                           ;Switch_B1.c: 183: {
  5711                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5712  0677  086D               	movf	_Sw,w
  5713  0678  3E05               	addlw	5
  5714  0679  0086               	movwf	6
  5715  067A  3001               	movlw	1	; select bank2/3
  5716  067B  0087               	movwf	7
  5717  067C  3001               	movlw	1
  5718  067D  0781               	addwf	1,f
  5719  067E  3141               	addfsr 1,1
  5720  067F  1803               	skipnc
  5721  0680  0A81               	incf	1,f
  5722                           
  5723                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5724  0681  086D               	movf	_Sw,w
  5725  0682  3E05               	addlw	5
  5726  0683  0086               	movwf	6
  5727  0684  3001               	movlw	1	; select bank2/3
  5728  0685  0087               	movwf	7
  5729  0686  3F40               	moviw [0]fsr1
  5730  0687  00E5               	movwf	??_setSw_Main
  5731  0688  3F41               	moviw [1]fsr1
  5732  0689  00E6               	movwf	??_setSw_Main+1
  5733  068A  3000               	movlw	0
  5734  068B  0266               	subwf	??_setSw_Main+1,w
  5735  068C  3096               	movlw	150
  5736  068D  1903               	skipnz
  5737  068E  0265               	subwf	??_setSw_Main,w
  5738  068F  1C03               	skipc
  5739  0690  0008               	return
  5740                           
  5741                           ;Switch_B1.c: 186: {
  5742                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5743  0691  086D               	movf	_Sw,w
  5744  0692  3E05               	addlw	5
  5745  0693  0086               	movwf	6
  5746  0694  3001               	movlw	1	; select bank2/3
  5747  0695  0087               	movwf	7
  5748  0696  3000               	movlw	0
  5749  0697  3FC0               	movwi [0]fsr1
  5750  0698  3FC1               	movwi [1]fsr1
  5751                           
  5752                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5753  0699  086D               	movf	_Sw,w
  5754  069A  0086               	movwf	6
  5755  069B  3001               	movlw	1	; select bank2/3
  5756  069C  0087               	movwf	7
  5757  069D  1601               	bsf	1,4
  5758                           
  5759                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5760  069E  01A2               	clrf	setRF_Learn@command
  5761  069F  0AA2               	incf	setRF_Learn@command,f
  5762  06A0  3001               	movlw	1
  5763  06A1  31A5  25FF  3185   	fcall	_setRF_Learn
  5764                           
  5765                           ;Switch_B1.c: 194: if(TMain->First)
  5766  06A4  087D               	movf	_TMain,w
  5767  06A5  3E03               	addlw	3
  5768  06A6  0086               	movwf	6
  5769  06A7  3001               	movlw	1	; select bank2/3
  5770  06A8  0087               	movwf	7
  5771  06A9  1C81               	btfss	1,1
  5772  06AA  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 195: {
  5775                           ;Switch_B1.c: 196: setBuz(2,100);
  5776  06AB  3064               	movlw	100
  5777  06AC  0020               	movlb	0	; select bank0
  5778  06AD  00A6               	movwf	setBuz@time
  5779  06AE  3000               	movlw	0
  5780  06AF  00A7               	movwf	setBuz@time+1
  5781  06B0  3002               	movlw	2
  5782  06B1  3195  2587         	fcall	_setBuz
  5783                           
  5784                           ;Switch_B1.c: 197: }
  5785                           ;Switch_B1.c: 199: }
  5786                           ;Switch_B1.c: 200: }
  5787  06B3  0008               	return
  5788  06B4                     l9312:	
  5789                           
  5790                           ;Switch_B1.c: 201: else
  5791                           ;Switch_B1.c: 202: {
  5792                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5793  06B4  0020               	movlb	0	; select bank0
  5794  06B5  086D               	movf	_Sw,w
  5795  06B6  0086               	movwf	6
  5796  06B7  3001               	movlw	1	; select bank2/3
  5797  06B8  0087               	movwf	7
  5798  06B9  1A81               	btfsc	1,5
  5799  06BA  0008               	return
  5800                           
  5801                           ;Switch_B1.c: 204: {
  5802                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5803  06BB  086D               	movf	_Sw,w
  5804  06BC  3E07               	addlw	7
  5805  06BD  0086               	movwf	6
  5806  06BE  3001               	movlw	1	; select bank2/3
  5807  06BF  0087               	movwf	7
  5808  06C0  3001               	movlw	1
  5809  06C1  0781               	addwf	1,f
  5810  06C2  3141               	addfsr 1,1
  5811  06C3  1803               	skipnc
  5812  06C4  0A81               	incf	1,f
  5813                           
  5814                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5815  06C5  086D               	movf	_Sw,w
  5816  06C6  3E07               	addlw	7
  5817  06C7  0086               	movwf	6
  5818  06C8  3001               	movlw	1	; select bank2/3
  5819  06C9  0087               	movwf	7
  5820  06CA  3F40               	moviw [0]fsr1
  5821  06CB  00E5               	movwf	??_setSw_Main
  5822  06CC  3F41               	moviw [1]fsr1
  5823  06CD  00E6               	movwf	??_setSw_Main+1
  5824  06CE  3001               	movlw	1
  5825  06CF  0266               	subwf	??_setSw_Main+1,w
  5826  06D0  302C               	movlw	44
  5827  06D1  1903               	skipnz
  5828  06D2  0265               	subwf	??_setSw_Main,w
  5829  06D3  1C03               	skipc
  5830  06D4  0008               	return
  5831                           
  5832                           ;Switch_B1.c: 207: {
  5833                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5834  06D5  086D               	movf	_Sw,w
  5835  06D6  3E07               	addlw	7
  5836  06D7  0086               	movwf	6
  5837  06D8  3001               	movlw	1	; select bank2/3
  5838  06D9  0087               	movwf	7
  5839  06DA  3000               	movlw	0
  5840  06DB  3FC0               	movwi [0]fsr1
  5841  06DC  3FC1               	movwi [1]fsr1
  5842                           
  5843                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5844  06DD  086D               	movf	_Sw,w
  5845  06DE  0086               	movwf	6
  5846  06DF  3001               	movlw	1	; select bank2/3
  5847  06E0  0087               	movwf	7
  5848  06E1  1681               	bsf	1,5
  5849                           
  5850                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5851  06E2  01A2               	clrf	setRF_Learn@command
  5852  06E3  3001               	movlw	1
  5853  06E4  31A5  25FF         	fcall	_setRF_Learn
  5854                           
  5855                           ;Switch_B1.c: 215: }
  5856                           ;Switch_B1.c: 216: }
  5857                           ;Switch_B1.c: 217: }
  5858                           ;Switch_B1.c: 218: }
  5859                           ;Switch_B1.c: 219: }
  5860                           ;Switch_B1.c: 220: }
  5861  06E6  0008               	return
  5862  06E7                     l9322:	
  5863                           
  5864                           ;Switch_B1.c: 221: else
  5865                           ;Switch_B1.c: 222: {
  5866                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5867  06E7  0020               	movlb	0	; select bank0
  5868  06E8  086D               	movf	_Sw,w
  5869  06E9  0086               	movwf	6
  5870  06EA  3001               	movlw	1	; select bank2/3
  5871  06EB  0087               	movwf	7
  5872  06EC  1D01               	btfss	1,2
  5873  06ED  0008               	return
  5874                           
  5875                           ;Switch_B1.c: 224: {
  5876                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5877  06EE  3001               	movlw	1
  5878  06EF  00E5               	movwf	??_setSw_Main
  5879  06F0  086D               	movf	_Sw,w
  5880  06F1  3E02               	addlw	2
  5881  06F2  0086               	movwf	6
  5882  06F3  3001               	movlw	1	; select bank2/3
  5883  06F4  0087               	movwf	7
  5884  06F5  0865               	movf	??_setSw_Main,w
  5885  06F6  0781               	addwf	1,f
  5886                           
  5887                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5888  06F7  086D               	movf	_Sw,w
  5889  06F8  3E02               	addlw	2
  5890  06F9  0086               	movwf	6
  5891  06FA  3001               	movlw	1	; select bank2/3
  5892  06FB  0087               	movwf	7
  5893  06FC  3005               	movlw	5
  5894  06FD  0201               	subwf	1,w
  5895  06FE  1C03               	skipc
  5896  06FF  0008               	return
  5897                           
  5898                           ;Switch_B1.c: 227: {
  5899                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5900  0700  086D               	movf	_Sw,w
  5901  0701  3E02               	addlw	2
  5902  0702  0086               	movwf	6
  5903  0703  3001               	movlw	1	; select bank2/3
  5904  0704  0087               	movwf	7
  5905  0705  0181               	clrf	1
  5906                           
  5907                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5908  0706  086D               	movf	_Sw,w
  5909  0707  0086               	movwf	6
  5910  0708  3001               	movlw	1	; select bank2/3
  5911  0709  0087               	movwf	7
  5912  070A  1101               	bcf	1,2
  5913                           
  5914                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5915  070B  086D               	movf	_Sw,w
  5916  070C  3E03               	addlw	3
  5917  070D  0086               	movwf	6
  5918  070E  3001               	movlw	1	; select bank2/3
  5919  070F  0087               	movwf	7
  5920  0710  3000               	movlw	0
  5921  0711  3FC0               	movwi [0]fsr1
  5922  0712  3FC1               	movwi [1]fsr1
  5923                           
  5924                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5925  0713  086D               	movf	_Sw,w
  5926  0714  0086               	movwf	6
  5927  0715  3001               	movlw	1	; select bank2/3
  5928  0716  0087               	movwf	7
  5929  0717  1181               	bcf	1,3
  5930                           
  5931                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5932  0718  086D               	movf	_Sw,w
  5933  0719  3E05               	addlw	5
  5934  071A  0086               	movwf	6
  5935  071B  3001               	movlw	1	; select bank2/3
  5936  071C  0087               	movwf	7
  5937  071D  3000               	movlw	0
  5938  071E  3FC0               	movwi [0]fsr1
  5939  071F  3FC1               	movwi [1]fsr1
  5940                           
  5941                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5942  0720  086D               	movf	_Sw,w
  5943  0721  0086               	movwf	6
  5944  0722  3001               	movlw	1	; select bank2/3
  5945  0723  0087               	movwf	7
  5946  0724  1201               	bcf	1,4
  5947                           
  5948                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5949  0725  086D               	movf	_Sw,w
  5950  0726  3E07               	addlw	7
  5951  0727  0086               	movwf	6
  5952  0728  3001               	movlw	1	; select bank2/3
  5953  0729  0087               	movwf	7
  5954  072A  3000               	movlw	0
  5955  072B  3FC0               	movwi [0]fsr1
  5956  072C  3FC1               	movwi [1]fsr1
  5957                           
  5958                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5959  072D  086D               	movf	_Sw,w
  5960  072E  0086               	movwf	6
  5961  072F  3001               	movlw	1	; select bank2/3
  5962  0730  0087               	movwf	7
  5963  0731  1281               	bcf	1,5
  5964                           
  5965                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5966  0732  0868               	movf	setSw_Main@sw,w
  5967  0733  3194  24A4  3185   	fcall	_Sw_DimmerOffFunc
  5968                           
  5969                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5970  0736  0020               	movlb	0	; select bank0
  5971  0737  01A2               	clrf	setRF_Learn@command
  5972  0738  3001               	movlw	1
  5973  0739  31A5  25FF         	fcall	_setRF_Learn
  5974  073B  0008               	return
  5975  073C                     __end_of_setSw_Main:	
  5976                           
  5977                           	psect	text14
  5978  25FF                     __ptext14:	
  5979 ;; *************** function _setRF_Learn *****************
  5980 ;; Defined at:
  5981 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  rf              1    wreg     unsigned char 
  5984 ;;  command         1    2[BANK0 ] unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  rf              1    3[BANK0 ] unsigned char 
  5987 ;; Return value:  Size  Location     Type
  5988 ;;		None               void
  5989 ;; Registers used:
  5990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5996 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;Total ram usage:        2 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    5
  6003 ;; This function calls:
  6004 ;;		_RfPointSelect
  6005 ;; This function is called by:
  6006 ;;		_setSw_Main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _setRF_Learn
  6012  25FF                     _setRF_Learn:	
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6016                           ;setRF_Learn@rf stored from wreg
  6017  25FF  0020               	movlb	0	; select bank0
  6018  2600  00A3               	movwf	setRF_Learn@rf
  6019                           
  6020                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  6021  2601  0823               	movf	setRF_Learn@rf,w
  6022  2602  31A5  2528         	fcall	_RfPointSelect
  6023                           
  6024                           ;RF_Control_B1.c: 34: RF->Learn=command;
  6025  2604  087B               	movf	_RF,w
  6026  2605  0086               	movwf	6
  6027  2606  0187               	clrf	7
  6028  2607  0020               	movlb	0	; select bank0
  6029  2608  0822               	movf	setRF_Learn@command,w
  6030  2609  1301               	bcf	1,6
  6031  260A  1D03               	skipz
  6032  260B  1701               	bsf	1,6
  6033  260C  0008               	return
  6034  260D                     __end_of_setRF_Learn:	
  6035                           
  6036                           	psect	text15
  6037  1FA7                     __ptext15:	
  6038 ;; *************** function _Sw_DimmerOnFunc *****************
  6039 ;; Defined at:
  6040 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  sw              1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  sw              1   67[BANK0 ] unsigned char 
  6045 ;;  Idle            1   66[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        2 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    8
  6062 ;; This function calls:
  6063 ;;		_setBuz
  6064 ;;		_setDimmerLights_Switch
  6065 ;;		_setDimmerLights_Trigger
  6066 ;;		_setRFSW_Status
  6067 ;;		_setRF_DimmerLights
  6068 ;;		_setTxData
  6069 ;; This function is called by:
  6070 ;;		_setSw_Main
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _Sw_DimmerOnFunc
  6076  1FA7                     _Sw_DimmerOnFunc:	
  6077                           
  6078                           ;incstack = 0
  6079                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6080                           ;Sw_DimmerOnFunc@sw stored from wreg
  6081  1FA7  0020               	movlb	0	; select bank0
  6082  1FA8  00E3               	movwf	Sw_DimmerOnFunc@sw
  6083                           
  6084                           ;Switch_B1.c: 253: char Idle=1;
  6085  1FA9  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6086  1FAA  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6087                           
  6088                           ;Switch_B1.c: 280: if(Idle)
  6089  1FAB  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6090  1FAC  1903               	btfsc	3,2
  6091  1FAD  0008               	return
  6092                           
  6093                           ;Switch_B1.c: 281: {
  6094                           ;Switch_B1.c: 282: Sw->Flag=1;
  6095  1FAE  086D               	movf	_Sw,w
  6096  1FAF  0086               	movwf	6
  6097  1FB0  3001               	movlw	1	; select bank2/3
  6098  1FB1  0087               	movwf	7
  6099  1FB2  1781               	bsf	1,7
  6100                           
  6101                           ;Switch_B1.c: 283: setBuz(1,100);
  6102  1FB3  3064               	movlw	100
  6103  1FB4  00A6               	movwf	setBuz@time
  6104  1FB5  3000               	movlw	0
  6105  1FB6  00A7               	movwf	setBuz@time+1
  6106  1FB7  3001               	movlw	1
  6107  1FB8  3195  2587  319F   	fcall	_setBuz
  6108                           
  6109                           ;Switch_B1.c: 284: if(!Sw->Status)
  6110  1FBB  0020               	movlb	0	; select bank0
  6111  1FBC  086D               	movf	_Sw,w
  6112  1FBD  0086               	movwf	6
  6113  1FBE  3001               	movlw	1	; select bank2/3
  6114  1FBF  0087               	movwf	7
  6115  1FC0  1B01               	btfsc	1,6
  6116  1FC1  2FED               	goto	l8840
  6117                           
  6118                           ;Switch_B1.c: 285: {
  6119                           ;Switch_B1.c: 286: Sw->Status=1;
  6120  1FC2  086D               	movf	_Sw,w
  6121  1FC3  0086               	movwf	6
  6122  1FC4  3001               	movlw	1	; select bank2/3
  6123  1FC5  0087               	movwf	7
  6124  1FC6  1701               	bsf	1,6
  6125                           
  6126                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  6127  1FC7  01A2               	clrf	setRFSW_Status@command
  6128  1FC8  0AA2               	incf	setRFSW_Status@command,f
  6129  1FC9  0863               	movf	Sw_DimmerOnFunc@sw,w
  6130  1FCA  31A6  261C  319F   	fcall	_setRFSW_Status
  6131                           
  6132                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  6133  1FCD  0020               	movlb	0	; select bank0
  6134  1FCE  01A2               	clrf	setDimmerLights_Trigger@command
  6135  1FCF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6136  1FD0  0863               	movf	Sw_DimmerOnFunc@sw,w
  6137  1FD1  31A6  2669  319F   	fcall	_setDimmerLights_Trigger
  6138                           
  6139                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  6140  1FD4  0020               	movlb	0	; select bank0
  6141  1FD5  01A2               	clrf	setDimmerLights_Switch@command
  6142  1FD6  0AA2               	incf	setDimmerLights_Switch@command,f
  6143  1FD7  0863               	movf	Sw_DimmerOnFunc@sw,w
  6144  1FD8  31A6  2659  319F   	fcall	_setDimmerLights_Switch
  6145                           
  6146                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  6147  1FDB  0020               	movlb	0	; select bank0
  6148  1FDC  086D               	movf	_Sw,w
  6149  1FDD  0086               	movwf	6
  6150  1FDE  3001               	movlw	1	; select bank2/3
  6151  1FDF  0087               	movwf	7
  6152  1FE0  3000               	movlw	0
  6153  1FE1  1B01               	btfsc	1,6
  6154  1FE2  3001               	movlw	1
  6155  1FE3  00DD               	movwf	setRF_DimmerLights@on
  6156  1FE4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6157  1FE5  3192  2281  319F   	fcall	_setRF_DimmerLights
  6158                           
  6159                           ;Switch_B1.c: 293: setTxData(1);
  6160  1FE8  3001               	movlw	1
  6161  1FE9  318B  231A         	fcall	_setTxData
  6162                           
  6163                           ;Switch_B1.c: 295: }
  6164  1FEB  0020               	movlb	0	; select bank0
  6165  1FEC  0008               	return
  6166  1FED                     l8840:	
  6167                           
  6168                           ;Switch_B1.c: 296: else
  6169                           ;Switch_B1.c: 297: {
  6170                           ;Switch_B1.c: 298: Sw->Status=0;
  6171  1FED  0020               	movlb	0	; select bank0
  6172  1FEE  086D               	movf	_Sw,w
  6173  1FEF  0086               	movwf	6
  6174  1FF0  3001               	movlw	1	; select bank2/3
  6175  1FF1  0087               	movwf	7
  6176  1FF2  1301               	bcf	1,6
  6177                           
  6178                           ;Switch_B1.c: 299: setRFSW_Status(sw,Sw->Status);
  6179  1FF3  086D               	movf	_Sw,w
  6180  1FF4  0086               	movwf	6
  6181  1FF5  3001               	movlw	1	; select bank2/3
  6182  1FF6  0087               	movwf	7
  6183  1FF7  3000               	movlw	0
  6184  1FF8  1B01               	btfsc	1,6
  6185  1FF9  3001               	movlw	1
  6186  1FFA  00A2               	movwf	setRFSW_Status@command
  6187  1FFB  0863               	movf	Sw_DimmerOnFunc@sw,w
  6188  1FFC  31A6  261C         	fcall	_setRFSW_Status
  6189  1FFE  0020               	movlb	0	; select bank0
  6190  1FFF  0008               	return
  6191  2000                     __end_of_Sw_DimmerOnFunc:	
  6192                           
  6193                           	psect	text16
  6194  14A4                     __ptext16:	
  6195 ;; *************** function _Sw_DimmerOffFunc *****************
  6196 ;; Defined at:
  6197 ;;		line 304 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  sw              1    wreg     unsigned char 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;  sw              1   68[BANK0 ] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        3 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    8
  6218 ;; This function calls:
  6219 ;;		_setDelayOff_GO
  6220 ;;		_setDimmerLights_AdjGo
  6221 ;;		_setDimmerLights_Switch
  6222 ;;		_setDimmerLights_Trigger
  6223 ;;		_setDimmerLights_TriggerAdj
  6224 ;;		_setRF_DimmerLights
  6225 ;;		_setTxData
  6226 ;; This function is called by:
  6227 ;;		_setSw_Main
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           
  6232                           ;psect for function _Sw_DimmerOffFunc
  6233  14A4                     _Sw_DimmerOffFunc:	
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6237                           ;Sw_DimmerOffFunc@sw stored from wreg
  6238  14A4  0020               	movlb	0	; select bank0
  6239  14A5  00E4               	movwf	Sw_DimmerOffFunc@sw
  6240                           
  6241                           ;Switch_B1.c: 306: if(Sw->Flag)
  6242  14A6  086D               	movf	_Sw,w
  6243  14A7  0086               	movwf	6
  6244  14A8  3001               	movlw	1	; select bank2/3
  6245  14A9  0087               	movwf	7
  6246  14AA  1F81               	btfss	1,7
  6247  14AB  0008               	return
  6248                           
  6249                           ;Switch_B1.c: 307: {
  6250                           ;Switch_B1.c: 308: Sw->Flag=0;
  6251  14AC  086D               	movf	_Sw,w
  6252  14AD  0086               	movwf	6
  6253  14AE  3001               	movlw	1	; select bank2/3
  6254  14AF  0087               	movwf	7
  6255  14B0  1381               	bcf	1,7
  6256                           
  6257                           ;Switch_B1.c: 309: if(Sw->Status)
  6258  14B1  086D               	movf	_Sw,w
  6259  14B2  0086               	movwf	6
  6260  14B3  3001               	movlw	1	; select bank2/3
  6261  14B4  0087               	movwf	7
  6262  14B5  1F01               	btfss	1,6
  6263  14B6  2CF0               	goto	l8874
  6264                           
  6265                           ;Switch_B1.c: 310: {
  6266                           ;Switch_B1.c: 311: if(Sw->Adj)
  6267  14B7  0A6D               	incf	_Sw,w
  6268  14B8  0086               	movwf	6
  6269  14B9  3001               	movlw	1	; select bank2/3
  6270  14BA  0087               	movwf	7
  6271  14BB  1C01               	btfss	1,0
  6272  14BC  0008               	return
  6273                           
  6274                           ;Switch_B1.c: 312: {
  6275                           ;Switch_B1.c: 313: Sw->Adj=0;
  6276  14BD  0A6D               	incf	_Sw,w
  6277  14BE  0086               	movwf	6
  6278  14BF  3001               	movlw	1	; select bank2/3
  6279  14C0  0087               	movwf	7
  6280  14C1  1001               	bcf	1,0
  6281                           
  6282                           ;Switch_B1.c: 314: setDimmerLights_TriggerAdj(sw,1);
  6283  14C2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6284  14C3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6285  14C4  0864               	movf	Sw_DimmerOffFunc@sw,w
  6286  14C5  3187  27F0  3194   	fcall	_setDimmerLights_TriggerAdj
  6287                           
  6288                           ;Switch_B1.c: 315: setDimmerLights_AdjGo(sw,0);
  6289  14C8  0020               	movlb	0	; select bank0
  6290  14C9  01A2               	clrf	setDimmerLights_AdjGo@command
  6291  14CA  0864               	movf	Sw_DimmerOffFunc@sw,w
  6292  14CB  31A6  26B9  3194   	fcall	_setDimmerLights_AdjGo
  6293                           
  6294                           ;Switch_B1.c: 317: Product->Data[17]=Product->Data[26+sw];
  6295  14CE  0020               	movlb	0	; select bank0
  6296  14CF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6297  14D0  3E1A               	addlw	26
  6298  14D1  076F               	addwf	_Product,w
  6299  14D2  00E2               	movwf	??_Sw_DimmerOffFunc
  6300  14D3  0862               	movf	??_Sw_DimmerOffFunc,w
  6301  14D4  0086               	movwf	6
  6302  14D5  3001               	movlw	1	; select bank2/3
  6303  14D6  0087               	movwf	7
  6304  14D7  0801               	movf	1,w
  6305  14D8  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6306  14D9  086F               	movf	_Product,w
  6307  14DA  3E11               	addlw	17
  6308  14DB  0086               	movwf	6
  6309  14DC  3001               	movlw	1	; select bank2/3
  6310  14DD  0087               	movwf	7
  6311  14DE  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6312  14DF  0081               	movwf	1
  6313                           
  6314                           ;Switch_B1.c: 318: setRF_DimmerLights(sw,Sw->Status);
  6315  14E0  086D               	movf	_Sw,w
  6316  14E1  0086               	movwf	6
  6317  14E2  3001               	movlw	1	; select bank2/3
  6318  14E3  0087               	movwf	7
  6319  14E4  3000               	movlw	0
  6320  14E5  1B01               	btfsc	1,6
  6321  14E6  3001               	movlw	1
  6322  14E7  00DD               	movwf	setRF_DimmerLights@on
  6323  14E8  0864               	movf	Sw_DimmerOffFunc@sw,w
  6324  14E9  3192  2281  3194   	fcall	_setRF_DimmerLights
  6325                           
  6326                           ;Switch_B1.c: 319: setTxData(1);
  6327  14EC  3001               	movlw	1
  6328  14ED  318B  231A         	fcall	_setTxData
  6329                           
  6330                           ;Switch_B1.c: 321: }
  6331                           ;Switch_B1.c: 322: }
  6332  14EF  0008               	return
  6333  14F0                     l8874:	
  6334                           
  6335                           ;Switch_B1.c: 323: else
  6336                           ;Switch_B1.c: 324: {
  6337                           ;Switch_B1.c: 325: setDimmerLights_Trigger(sw,1);
  6338  14F0  0020               	movlb	0	; select bank0
  6339  14F1  01A2               	clrf	setDimmerLights_Trigger@command
  6340  14F2  0AA2               	incf	setDimmerLights_Trigger@command,f
  6341  14F3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6342  14F4  31A6  2669  3194   	fcall	_setDimmerLights_Trigger
  6343                           
  6344                           ;Switch_B1.c: 326: setDimmerLights_Switch(sw,0);
  6345  14F7  0020               	movlb	0	; select bank0
  6346  14F8  01A2               	clrf	setDimmerLights_Switch@command
  6347  14F9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6348  14FA  31A6  2659  3194   	fcall	_setDimmerLights_Switch
  6349                           
  6350                           ;Switch_B1.c: 328: setDelayOff_GO(sw,0,0);
  6351  14FD  0020               	movlb	0	; select bank0
  6352  14FE  01A3               	clrf	setDelayOff_GO@command
  6353  14FF  01A4               	clrf	setDelayOff_GO@value
  6354  1500  0864               	movf	Sw_DimmerOffFunc@sw,w
  6355  1501  3191  2102  3194   	fcall	_setDelayOff_GO
  6356                           
  6357                           ;Switch_B1.c: 329: setRF_DimmerLights(sw,Sw->Status);
  6358  1504  0020               	movlb	0	; select bank0
  6359  1505  086D               	movf	_Sw,w
  6360  1506  0086               	movwf	6
  6361  1507  3001               	movlw	1	; select bank2/3
  6362  1508  0087               	movwf	7
  6363  1509  3000               	movlw	0
  6364  150A  1B01               	btfsc	1,6
  6365  150B  3001               	movlw	1
  6366  150C  00DD               	movwf	setRF_DimmerLights@on
  6367  150D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6368  150E  3192  2281  3194   	fcall	_setRF_DimmerLights
  6369                           
  6370                           ;Switch_B1.c: 330: setTxData(1);
  6371  1511  3001               	movlw	1
  6372  1512  318B  231A         	fcall	_setTxData
  6373  1514  0008               	return
  6374  1515                     __end_of_Sw_DimmerOffFunc:	
  6375                           
  6376                           	psect	text17
  6377  1A6F                     __ptext17:	
  6378 ;; *************** function _Sw_DimmerAdjFunc *****************
  6379 ;; Defined at:
  6380 ;;		line 336 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  sw              1    wreg     unsigned char 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  sw              1    5[BANK0 ] unsigned char 
  6385 ;;  Idle            1    4[BANK0 ] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    6
  6402 ;; This function calls:
  6403 ;;		_setDimmerLights_AdjGo
  6404 ;;		_setDimmerLights_TriggerAdj
  6405 ;;		_setRFSW_Status
  6406 ;; This function is called by:
  6407 ;;		_setSw_Main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _Sw_DimmerAdjFunc
  6413  1A6F                     _Sw_DimmerAdjFunc:	
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6418  1A6F  0020               	movlb	0	; select bank0
  6419  1A70  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6420                           
  6421                           ;Switch_B1.c: 338: char Idle=1;
  6422  1A71  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6423  1A72  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6424                           
  6425                           ;Switch_B1.c: 365: if(Idle)
  6426  1A73  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6427  1A74  1903               	btfsc	3,2
  6428  1A75  0008               	return
  6429                           
  6430                           ;Switch_B1.c: 366: {
  6431                           ;Switch_B1.c: 367: if(Sw->Flag)
  6432  1A76  086D               	movf	_Sw,w
  6433  1A77  0086               	movwf	6
  6434  1A78  3001               	movlw	1	; select bank2/3
  6435  1A79  0087               	movwf	7
  6436  1A7A  1F81               	btfss	1,7
  6437  1A7B  0008               	return
  6438                           
  6439                           ;Switch_B1.c: 368: {
  6440                           ;Switch_B1.c: 369: Sw->Adj=1;
  6441  1A7C  0A6D               	incf	_Sw,w
  6442  1A7D  0086               	movwf	6
  6443  1A7E  3001               	movlw	1	; select bank2/3
  6444  1A7F  0087               	movwf	7
  6445  1A80  1401               	bsf	1,0
  6446                           
  6447                           ;Switch_B1.c: 370: Sw->Status=1;
  6448  1A81  086D               	movf	_Sw,w
  6449  1A82  0086               	movwf	6
  6450  1A83  3001               	movlw	1	; select bank2/3
  6451  1A84  0087               	movwf	7
  6452  1A85  1701               	bsf	1,6
  6453                           
  6454                           ;Switch_B1.c: 371: setRFSW_Status(sw,1);
  6455  1A86  01A2               	clrf	setRFSW_Status@command
  6456  1A87  0AA2               	incf	setRFSW_Status@command,f
  6457  1A88  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6458  1A89  31A6  261C  319A   	fcall	_setRFSW_Status
  6459                           
  6460                           ;Switch_B1.c: 373: setDimmerLights_TriggerAdj(sw,1);
  6461  1A8C  0020               	movlb	0	; select bank0
  6462  1A8D  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6463  1A8E  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6464  1A8F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6465  1A90  3187  27F0  319A   	fcall	_setDimmerLights_TriggerAdj
  6466                           
  6467                           ;Switch_B1.c: 374: setDimmerLights_AdjGo(sw,1);
  6468  1A93  0020               	movlb	0	; select bank0
  6469  1A94  01A2               	clrf	setDimmerLights_AdjGo@command
  6470  1A95  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6471  1A96  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6472  1A97  31A6  26B9         	fcall	_setDimmerLights_AdjGo
  6473  1A99  0020               	movlb	0	; select bank0
  6474  1A9A  0008               	return
  6475  1A9B                     __end_of_Sw_DimmerAdjFunc:	
  6476                           
  6477                           	psect	text18
  6478  07F0                     __ptext18:	
  6479 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6480 ;; Defined at:
  6481 ;;		line 450 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  lights          1    wreg     unsigned char 
  6484 ;;  command         1    2[BANK0 ] unsigned char 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  lights          1    3[BANK0 ] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6496 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;Total ram usage:        2 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    5
  6503 ;; This function calls:
  6504 ;;		_DimmerLightsPointSelect
  6505 ;; This function is called by:
  6506 ;;		_Sw_DimmerOffFunc
  6507 ;;		_Sw_DimmerAdjFunc
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function _setDimmerLights_TriggerAdj
  6513  07F0                     _setDimmerLights_TriggerAdj:	
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6517                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6518  07F0  0020               	movlb	0	; select bank0
  6519  07F1  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6520                           
  6521                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6522  07F2  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6523  07F3  31A5  2512         	fcall	_DimmerLightsPointSelect
  6524                           
  6525                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6526  07F5  0020               	movlb	0	; select bank0
  6527  07F6  086C               	movf	_DimmerLights,w
  6528  07F7  3E09               	addlw	9
  6529  07F8  0086               	movwf	6
  6530  07F9  3001               	movlw	1	; select bank2/3
  6531  07FA  0087               	movwf	7
  6532  07FB  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6533  07FC  1181               	bcf	1,3
  6534  07FD  1D03               	skipz
  6535  07FE  1581               	bsf	1,3
  6536  07FF  0008               	return
  6537  0800                     __end_of_setDimmerLights_TriggerAdj:	
  6538                           
  6539                           	psect	text19
  6540  26B9                     __ptext19:	
  6541 ;; *************** function _setDimmerLights_AdjGo *****************
  6542 ;; Defined at:
  6543 ;;		line 440 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  lights          1    wreg     unsigned char 
  6546 ;;  command         1    2[BANK0 ] unsigned char 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  lights          1    3[BANK0 ] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6558 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;Total ram usage:        2 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    5
  6565 ;; This function calls:
  6566 ;;		_DimmerLightsPointSelect
  6567 ;; This function is called by:
  6568 ;;		_Sw_DimmerOffFunc
  6569 ;;		_Sw_DimmerAdjFunc
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           
  6574                           ;psect for function _setDimmerLights_AdjGo
  6575  26B9                     _setDimmerLights_AdjGo:	
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6579                           ;setDimmerLights_AdjGo@lights stored from wreg
  6580  26B9  0020               	movlb	0	; select bank0
  6581  26BA  00A3               	movwf	setDimmerLights_AdjGo@lights
  6582                           
  6583                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6584  26BB  0823               	movf	setDimmerLights_AdjGo@lights,w
  6585  26BC  31A5  2512         	fcall	_DimmerLightsPointSelect
  6586                           
  6587                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6588  26BE  0020               	movlb	0	; select bank0
  6589  26BF  086C               	movf	_DimmerLights,w
  6590  26C0  3E09               	addlw	9
  6591  26C1  0086               	movwf	6
  6592  26C2  3001               	movlw	1	; select bank2/3
  6593  26C3  0087               	movwf	7
  6594  26C4  0822               	movf	setDimmerLights_AdjGo@command,w
  6595  26C5  1101               	bcf	1,2
  6596  26C6  1D03               	skipz
  6597  26C7  1501               	bsf	1,2
  6598  26C8  0008               	return
  6599  26C9                     __end_of_setDimmerLights_AdjGo:	
  6600                           
  6601                           	psect	text20
  6602  24E9                     __ptext20:	
  6603 ;; *************** function _Switch_Initialization *****************
  6604 ;; Defined at:
  6605 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;Total ram usage:        0 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    7
  6626 ;; This function calls:
  6627 ;;		_TouchPower
  6628 ;;		_setSw_Initialization
  6629 ;; This function is called by:
  6630 ;;		_main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _Switch_Initialization
  6636  24E9                     _Switch_Initialization:	
  6637                           
  6638                           ;Switch_B1.c: 40: TouchPower();
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6642  24E9  31A4  2495  31A4   	fcall	_TouchPower
  6643                           
  6644                           ;Switch_B1.c: 42: WPUB1=0;
  6645  24EC  0024               	movlb	4	; select bank4
  6646  24ED  108D               	bcf	13,1	;volatile
  6647                           
  6648                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6649  24EE  3001               	movlw	1
  6650  24EF  31A6  26A9         	fcall	_setSw_Initialization
  6651  24F1  0008               	return
  6652  24F2                     __end_of_Switch_Initialization:	
  6653                           
  6654                           	psect	text21
  6655  26A9                     __ptext21:	
  6656 ;; *************** function _setSw_Initialization *****************
  6657 ;; Defined at:
  6658 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  sw              1    wreg     unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  sw              1    4[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        1 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    6
  6679 ;; This function calls:
  6680 ;;		_setLED
  6681 ;; This function is called by:
  6682 ;;		_Switch_Initialization
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           
  6687                           ;psect for function _setSw_Initialization
  6688  26A9                     _setSw_Initialization:	
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6692                           ;setSw_Initialization@sw stored from wreg
  6693  26A9  0020               	movlb	0	; select bank0
  6694  26AA  00A4               	movwf	setSw_Initialization@sw
  6695                           
  6696                           ;Switch_B1.c: 80: setLED(sw,1);
  6697  26AB  01A2               	clrf	setLED@command
  6698  26AC  0AA2               	incf	setLED@command,f
  6699  26AD  0824               	movf	setSw_Initialization@sw,w
  6700  26AE  3191  215E  31A6   	fcall	_setLED
  6701                           
  6702                           ;Switch_B1.c: 82: setLED(sw+1,1);
  6703  26B1  0020               	movlb	0	; select bank0
  6704  26B2  01A2               	clrf	setLED@command
  6705  26B3  0AA2               	incf	setLED@command,f
  6706  26B4  0824               	movf	setSw_Initialization@sw,w
  6707  26B5  3E01               	addlw	1
  6708  26B6  3191  215E         	fcall	_setLED
  6709  26B8  0008               	return
  6710  26B9                     __end_of_setSw_Initialization:	
  6711                           
  6712                           	psect	text22
  6713  2495                     __ptext22:	
  6714 ;; *************** function _TouchPower *****************
  6715 ;; Defined at:
  6716 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;		None               void
  6723 ;; Registers used:
  6724 ;;		None
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    4
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_Switch_Initialization
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           
  6745                           ;psect for function _TouchPower
  6746  2495                     _TouchPower:	
  6747  2495                     l2816:	
  6748                           ;Switch_B1.c: 11: while(!RC5)
  6749                           
  6750                           ;incstack = 0
  6751                           ; Regs used in _TouchPower: []
  6752                           
  6753  2495  0020               	movlb	0	; select bank0
  6754  2496  1A8E               	btfsc	14,5	;volatile
  6755  2497  0008               	return
  6756                           
  6757                           ;Switch_B1.c: 12: RC5=1;
  6758  2498  168E               	bsf	14,5	;volatile
  6759  2499  2C95               	goto	l2816
  6760  249A                     __end_of_TouchPower:	
  6761                           
  6762                           	psect	text23
  6763  248D                     __ptext23:	
  6764 ;; *************** function _RF_Main *****************
  6765 ;; Defined at:
  6766 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:   13
  6787 ;; This function calls:
  6788 ;;		_setRF_Main
  6789 ;; This function is called by:
  6790 ;;		_main
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _RF_Main
  6796  248D                     _RF_Main:	
  6797                           
  6798                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6802  248D  3001               	movlw	1
  6803  248E  3197  2778         	fcall	_setRF_Main
  6804  2490  0008               	return
  6805  2491                     __end_of_RF_Main:	
  6806                           
  6807                           	psect	text24
  6808  1778                     __ptext24:	
  6809 ;; *************** function _setRF_Main *****************
  6810 ;; Defined at:
  6811 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  rf              1    wreg     unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  rf              1   74[BANK0 ] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        3 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:   12
  6832 ;; This function calls:
  6833 ;;		_CC2500_RxData
  6834 ;;		_CC2500_TxData
  6835 ;;		_CC2500_WriteCommand
  6836 ;;		_RF_RxDisable
  6837 ;;		_RfPointSelect
  6838 ;;		_getRxData
  6839 ;;		_setINT_GO
  6840 ;; This function is called by:
  6841 ;;		_RF_Main
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           
  6846                           ;psect for function _setRF_Main
  6847  1778                     _setRF_Main:	
  6848                           
  6849                           ;incstack = 0
  6850                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6851                           ;setRF_Main@rf stored from wreg
  6852  1778  0020               	movlb	0	; select bank0
  6853  1779  00EA               	movwf	setRF_Main@rf
  6854                           
  6855                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6856  177A  086A               	movf	setRF_Main@rf,w
  6857  177B  31A5  2528  3197   	fcall	_RfPointSelect
  6858                           
  6859                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6860  177E  087B               	movf	_RF,w
  6861  177F  0086               	movwf	6
  6862  1780  0187               	clrf	7
  6863  1781  1C01               	btfss	1,0
  6864  1782  0008               	return
  6865                           
  6866                           ;RF_Control_B1.c: 62: {
  6867                           ;RF_Control_B1.c: 73: RF->Key=((RA6 || RA4 || RA0 || RB1) && !RF->Learn)?1:0;
  6868  1783  0020               	movlb	0	; select bank0
  6869  1784  01EB               	clrf	_setRF_Main$4391
  6870  1785  1F0C               	btfss	12,6	;volatile
  6871  1786  1A0C               	btfsc	12,4	;volatile
  6872  1787  2F8C               	goto	l9206
  6873  1788  180C               	btfsc	12,0	;volatile
  6874  1789  2F8C               	goto	l9206
  6875  178A  1C8D               	btfss	13,1	;volatile
  6876  178B  2F93               	goto	l9210
  6877  178C                     l9206:	
  6878  178C  087B               	movf	_RF,w
  6879  178D  0086               	movwf	6
  6880  178E  0187               	clrf	7
  6881  178F  1B01               	btfsc	1,6
  6882  1790  2F93               	goto	l9210
  6883  1791  01EB               	clrf	_setRF_Main$4391
  6884  1792  0AEB               	incf	_setRF_Main$4391,f
  6885  1793                     l9210:	
  6886  1793  087B               	movf	_RF,w
  6887  1794  0086               	movwf	6
  6888  1795  0187               	clrf	7
  6889  1796  086B               	movf	_setRF_Main$4391,w
  6890  1797  1381               	bcf	1,7
  6891  1798  1D03               	skipz
  6892  1799  1781               	bsf	1,7
  6893                           
  6894                           ;RF_Control_B1.c: 77: if(!RF->Key)
  6895  179A  087B               	movf	_RF,w
  6896  179B  0086               	movwf	6
  6897  179C  0187               	clrf	7
  6898  179D  1B81               	btfsc	1,7
  6899  179E  2FCB               	goto	l9232
  6900                           
  6901                           ;RF_Control_B1.c: 78: {
  6902                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  6903  179F  087B               	movf	_RF,w
  6904  17A0  0086               	movwf	6
  6905  17A1  0187               	clrf	7
  6906  17A2  1C81               	btfss	1,1
  6907  17A3  2FB0               	goto	l9220
  6908                           
  6909                           ;RF_Control_B1.c: 80: {
  6910                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  6911  17A4  087B               	movf	_RF,w
  6912  17A5  0086               	movwf	6
  6913  17A6  0187               	clrf	7
  6914  17A7  1081               	bcf	1,1
  6915                           
  6916                           ;RF_Control_B1.c: 82: CC2500_RxData();
  6917  17A8  3192  221D  3197   	fcall	_CC2500_RxData
  6918                           
  6919                           ;RF_Control_B1.c: 89: getRxData(1);
  6920  17AB  3001               	movlw	1
  6921  17AC  319E  26FE  3197   	fcall	_getRxData
  6922                           
  6923                           ;RF_Control_B1.c: 92: }
  6924  17AF  2FCF               	goto	l9234
  6925  17B0                     l9220:	
  6926                           
  6927                           ;RF_Control_B1.c: 93: else
  6928                           ;RF_Control_B1.c: 94: {
  6929                           ;RF_Control_B1.c: 95: if(!RF->TransceiveGO)
  6930  17B0  087B               	movf	_RF,w
  6931  17B1  0086               	movwf	6
  6932  17B2  0187               	clrf	7
  6933  17B3  1901               	btfsc	1,2
  6934  17B4  2FCF               	goto	l9234
  6935                           
  6936                           ;RF_Control_B1.c: 96: {
  6937                           ;RF_Control_B1.c: 98: if(!RF->RxStatus)
  6938  17B5  087B               	movf	_RF,w
  6939  17B6  0086               	movwf	6
  6940  17B7  0187               	clrf	7
  6941  17B8  1981               	btfsc	1,3
  6942  17B9  2FCF               	goto	l9234
  6943                           
  6944                           ;RF_Control_B1.c: 99: {
  6945                           ;RF_Control_B1.c: 100: RF->RxStatus=1;
  6946  17BA  087B               	movf	_RF,w
  6947  17BB  0086               	movwf	6
  6948  17BC  0187               	clrf	7
  6949  17BD  1581               	bsf	1,3
  6950                           
  6951                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  6952  17BE  3036               	movlw	54
  6953  17BF  31A6  2649  3197   	fcall	_CC2500_WriteCommand
  6954                           
  6955                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x34);
  6956  17C2  3034               	movlw	52
  6957  17C3  31A6  2649  3197   	fcall	_CC2500_WriteCommand
  6958                           
  6959                           ;RF_Control_B1.c: 103: setINT_GO(1);
  6960  17C6  3001               	movlw	1
  6961  17C7  31A4  24E0  3197   	fcall	_setINT_GO
  6962                           
  6963                           ;RF_Control_B1.c: 104: }
  6964                           ;RF_Control_B1.c: 106: }
  6965                           ;RF_Control_B1.c: 107: }
  6966                           ;RF_Control_B1.c: 108: }
  6967  17CA  2FCF               	goto	l9234
  6968  17CB                     l9232:	
  6969                           
  6970                           ;RF_Control_B1.c: 109: else
  6971                           ;RF_Control_B1.c: 110: {
  6972                           ;RF_Control_B1.c: 111: RF_RxDisable(1);
  6973  17CB  3001               	movlw	1
  6974  17CC  3199  21C9  3197   	fcall	_RF_RxDisable
  6975  17CF                     l9234:	
  6976                           
  6977                           ;RF_Control_B1.c: 112: }
  6978                           ;RF_Control_B1.c: 113: if(RF->TransceiveGO)
  6979  17CF  087B               	movf	_RF,w
  6980  17D0  0086               	movwf	6
  6981  17D1  0187               	clrf	7
  6982  17D2  1D01               	btfss	1,2
  6983  17D3  0008               	return
  6984                           
  6985                           ;RF_Control_B1.c: 114: {
  6986                           ;RF_Control_B1.c: 115: RF_RxDisable(1);
  6987  17D4  3001               	movlw	1
  6988  17D5  3199  21C9  3197   	fcall	_RF_RxDisable
  6989                           
  6990                           ;RF_Control_B1.c: 116: if(!RF->Debounce)
  6991  17D8  087B               	movf	_RF,w
  6992  17D9  0086               	movwf	6
  6993  17DA  0187               	clrf	7
  6994  17DB  1A81               	btfsc	1,5
  6995  17DC  2FF5               	goto	l9248
  6996                           
  6997                           ;RF_Control_B1.c: 117: {
  6998                           ;RF_Control_B1.c: 118: RF->DebounceTime++;
  6999  17DD  3001               	movlw	1
  7000  17DE  0020               	movlb	0	; select bank0
  7001  17DF  00E9               	movwf	??_setRF_Main
  7002  17E0  0A7B               	incf	_RF,w
  7003  17E1  0086               	movwf	6
  7004  17E2  0187               	clrf	7
  7005  17E3  0869               	movf	??_setRF_Main,w
  7006  17E4  0781               	addwf	1,f
  7007                           
  7008                           ;RF_Control_B1.c: 119: if(RF->DebounceTime == 25)
  7009  17E5  0A7B               	incf	_RF,w
  7010  17E6  0086               	movwf	6
  7011  17E7  0187               	clrf	7
  7012  17E8  0801               	movf	1,w
  7013  17E9  3A19               	xorlw	25
  7014  17EA  1D03               	skipz
  7015  17EB  0008               	return
  7016                           
  7017                           ;RF_Control_B1.c: 120: {
  7018                           ;RF_Control_B1.c: 121: RF->DebounceTime=0;
  7019  17EC  0A7B               	incf	_RF,w
  7020  17ED  0086               	movwf	6
  7021  17EE  0187               	clrf	7
  7022  17EF  0181               	clrf	1
  7023                           
  7024                           ;RF_Control_B1.c: 122: RF->Debounce=1;
  7025  17F0  087B               	movf	_RF,w
  7026  17F1  0086               	movwf	6
  7027  17F2  0187               	clrf	7
  7028  17F3  1681               	bsf	1,5
  7029                           
  7030                           ;RF_Control_B1.c: 123: }
  7031                           ;RF_Control_B1.c: 124: }
  7032  17F4  0008               	return
  7033  17F5                     l9248:	
  7034                           
  7035                           ;RF_Control_B1.c: 125: else
  7036                           ;RF_Control_B1.c: 126: {
  7037                           ;RF_Control_B1.c: 127: RF->Debounce=0;
  7038  17F5  087B               	movf	_RF,w
  7039  17F6  0086               	movwf	6
  7040  17F7  0187               	clrf	7
  7041  17F8  1281               	bcf	1,5
  7042                           
  7043                           ;RF_Control_B1.c: 128: RF->TransceiveGO=0;
  7044  17F9  087B               	movf	_RF,w
  7045  17FA  0086               	movwf	6
  7046  17FB  0187               	clrf	7
  7047  17FC  1101               	bcf	1,2
  7048                           
  7049                           ;RF_Control_B1.c: 129: CC2500_TxData();
  7050  17FD  319D  259D         	fcall	_CC2500_TxData
  7051  17FF  0008               	return
  7052  1800                     __end_of_setRF_Main:	
  7053                           
  7054                           	psect	text25
  7055  1EFE                     __ptext25:	
  7056 ;; *************** function _getRxData *****************
  7057 ;; Defined at:
  7058 ;;		line 215 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  rf              1    wreg     unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  rf              1   72[BANK0 ] unsigned char 
  7063 ;;  i               1    0        unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;		None               void
  7066 ;; Registers used:
  7067 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:        1 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:   11
  7080 ;; This function calls:
  7081 ;;		_RfPointSelect
  7082 ;;		_setControl_Lights_Table
  7083 ;;		_setLog_Code
  7084 ;; This function is called by:
  7085 ;;		_setRF_Main
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           
  7090                           ;psect for function _getRxData
  7091  1EFE                     _getRxData:	
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7095                           ;getRxData@rf stored from wreg
  7096  1EFE  0020               	movlb	0	; select bank0
  7097  1EFF  00E8               	movwf	getRxData@rf
  7098                           
  7099                           ;RF_Control_B1.c: 217: unsigned char i;
  7100                           ;RF_Control_B1.c: 218: RfPointSelect(rf);
  7101  1F00  0868               	movf	getRxData@rf,w
  7102  1F01  31A5  2528  319E   	fcall	_RfPointSelect
  7103                           
  7104                           ;RF_Control_B1.c: 219: if(RF->Learn)
  7105  1F04  087B               	movf	_RF,w
  7106  1F05  0086               	movwf	6
  7107  1F06  0187               	clrf	7
  7108  1F07  1F01               	btfss	1,6
  7109  1F08  2F15               	goto	l8774
  7110                           
  7111                           ;RF_Control_B1.c: 220: {
  7112                           ;RF_Control_B1.c: 221: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7113  1F09  0021               	movlb	1	; select bank1
  7114  1F0A  08A0               	movf	_RF_Data^(0+128),f
  7115  1F0B  1D03               	skipz
  7116  1F0C  0008               	return
  7117  1F0D  0821               	movf	(_RF_Data^(0+128)+1),w
  7118  1F0E  3A64               	xorlw	100
  7119  1F0F  1D03               	skipz
  7120  1F10  0008               	return
  7121                           
  7122                           ;RF_Control_B1.c: 222: {
  7123                           ;RF_Control_B1.c: 223: setLog_Code(1);
  7124  1F11  3001               	movlw	1
  7125  1F12  319E  266C         	fcall	_setLog_Code
  7126                           
  7127                           ;RF_Control_B1.c: 224: }
  7128                           ;RF_Control_B1.c: 225: }
  7129  1F14  0008               	return
  7130  1F15                     l8774:	
  7131                           
  7132                           ;RF_Control_B1.c: 226: else
  7133                           ;RF_Control_B1.c: 227: {
  7134                           ;RF_Control_B1.c: 228: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7135  1F15  0021               	movlb	1	; select bank1
  7136  1F16  08A0               	movf	_RF_Data^(0+128),f
  7137  1F17  1D03               	skipz
  7138  1F18  0008               	return
  7139  1F19  0821               	movf	(_RF_Data^(0+128)+1),w
  7140  1F1A  3A02               	xorlw	2
  7141  1F1B  1D03               	skipz
  7142  1F1C  0008               	return
  7143                           
  7144                           ;RF_Control_B1.c: 229: {
  7145                           ;RF_Control_B1.c: 230: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  7146  1F1D  082C               	movf	(_RF_Data^(0+128)+12),w
  7147  1F1E  3AFF               	xorlw	255
  7148  1F1F  1D03               	skipz
  7149  1F20  2F2B               	goto	l8786
  7150  1F21  082D               	movf	(_RF_Data^(0+128)+13),w
  7151  1F22  3AFF               	xorlw	255
  7152  1F23  1D03               	skipz
  7153  1F24  2F2B               	goto	l8786
  7154  1F25  082E               	movf	(_RF_Data^(0+128)+14),w
  7155  1F26  3AFF               	xorlw	255
  7156  1F27  1D03               	skipz
  7157  1F28  2F2B               	goto	l8786
  7158                           
  7159                           ;RF_Control_B1.c: 231: {
  7160                           ;RF_Control_B1.c: 232: __nop();
  7161  1F29  0000               	nop
  7162                           
  7163                           ;RF_Control_B1.c: 233: }
  7164  1F2A  0008               	return
  7165  1F2B                     l8786:	
  7166                           
  7167                           ;RF_Control_B1.c: 234: else
  7168                           ;RF_Control_B1.c: 235: {
  7169                           ;RF_Control_B1.c: 236: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7170  1F2B  0020               	movlb	0	; select bank0
  7171  1F2C  086F               	movf	_Product,w
  7172  1F2D  3E0C               	addlw	12
  7173  1F2E  0086               	movwf	6
  7174  1F2F  3001               	movlw	1	; select bank2/3
  7175  1F30  0087               	movwf	7
  7176  1F31  0021               	movlb	1	; select bank1
  7177  1F32  082C               	movf	(_RF_Data^(0+128)+12),w
  7178  1F33  0601               	xorwf	1,w
  7179  1F34  1D03               	skipz
  7180  1F35  0008               	return
  7181  1F36  0020               	movlb	0	; select bank0
  7182  1F37  086F               	movf	_Product,w
  7183  1F38  3E0D               	addlw	13
  7184  1F39  0086               	movwf	6
  7185  1F3A  3001               	movlw	1	; select bank2/3
  7186  1F3B  0087               	movwf	7
  7187  1F3C  0021               	movlb	1	; select bank1
  7188  1F3D  082D               	movf	(_RF_Data^(0+128)+13),w
  7189  1F3E  0601               	xorwf	1,w
  7190  1F3F  1D03               	skipz
  7191  1F40  0008               	return
  7192  1F41  0020               	movlb	0	; select bank0
  7193  1F42  086F               	movf	_Product,w
  7194  1F43  3E0E               	addlw	14
  7195  1F44  0086               	movwf	6
  7196  1F45  3001               	movlw	1	; select bank2/3
  7197  1F46  0087               	movwf	7
  7198  1F47  0021               	movlb	1	; select bank1
  7199  1F48  082E               	movf	(_RF_Data^(0+128)+14),w
  7200  1F49  0601               	xorwf	1,w
  7201  1F4A  1D03               	skipz
  7202  1F4B  0008               	return
  7203                           
  7204                           ;RF_Control_B1.c: 237: {
  7205                           ;RF_Control_B1.c: 238: setControl_Lights_Table(1);
  7206  1F4C  3001               	movlw	1
  7207  1F4D  3193  23C6         	fcall	_setControl_Lights_Table
  7208                           
  7209                           ;RF_Control_B1.c: 247: {
  7210                           ;RF_Control_B1.c: 248: ;
  7211                           
  7212                           ;RF_Control_B1.c: 243: {
  7213                           ;RF_Control_B1.c: 244: ;
  7214                           ;RF_Control_B1.c: 245: }
  7215                           
  7216                           ;RF_Control_B1.c: 239: }
  7217                           ;RF_Control_B1.c: 240: }
  7218                           ;RF_Control_B1.c: 241: }
  7219  1F4F  0008               	return
  7220  1F50                     __end_of_getRxData:	
  7221                           
  7222                           	psect	text26
  7223  1E6C                     __ptext26:	
  7224 ;; *************** function _setLog_Code *****************
  7225 ;; Defined at:
  7226 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  rf              1    wreg     unsigned char 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  rf              1   11[BANK0 ] unsigned char 
  7231 ;; Return value:  Size  Location     Type
  7232 ;;		None               void
  7233 ;; Registers used:
  7234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        2 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    6
  7247 ;; This function calls:
  7248 ;;		_RfPointSelect
  7249 ;;		_setBuz
  7250 ;; This function is called by:
  7251 ;;		_getRxData
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _setLog_Code
  7257  1E6C                     _setLog_Code:	
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7261                           ;setLog_Code@rf stored from wreg
  7262  1E6C  0020               	movlb	0	; select bank0
  7263  1E6D  00AB               	movwf	setLog_Code@rf
  7264                           
  7265                           ;RF_Control_B1.c: 259: RfPointSelect(rf);
  7266  1E6E  082B               	movf	setLog_Code@rf,w
  7267  1E6F  31A5  2528  319E   	fcall	_RfPointSelect
  7268                           
  7269                           ;RF_Control_B1.c: 260: Product->Data[12]=RF_Data[12];
  7270  1E72  0021               	movlb	1	; select bank1
  7271  1E73  082C               	movf	(_RF_Data^(0+128)+12),w
  7272  1E74  0020               	movlb	0	; select bank0
  7273  1E75  00AA               	movwf	??_setLog_Code
  7274  1E76  086F               	movf	_Product,w
  7275  1E77  3E0C               	addlw	12
  7276  1E78  0086               	movwf	6
  7277  1E79  3001               	movlw	1	; select bank2/3
  7278  1E7A  0087               	movwf	7
  7279  1E7B  082A               	movf	??_setLog_Code,w
  7280  1E7C  0081               	movwf	1
  7281                           
  7282                           ;RF_Control_B1.c: 261: Product->Data[13]=RF_Data[13];
  7283  1E7D  0021               	movlb	1	; select bank1
  7284  1E7E  082D               	movf	(_RF_Data^(0+128)+13),w
  7285  1E7F  0020               	movlb	0	; select bank0
  7286  1E80  00AA               	movwf	??_setLog_Code
  7287  1E81  086F               	movf	_Product,w
  7288  1E82  3E0D               	addlw	13
  7289  1E83  0086               	movwf	6
  7290  1E84  3001               	movlw	1	; select bank2/3
  7291  1E85  0087               	movwf	7
  7292  1E86  082A               	movf	??_setLog_Code,w
  7293  1E87  0081               	movwf	1
  7294                           
  7295                           ;RF_Control_B1.c: 262: Product->Data[14]=RF_Data[14];
  7296  1E88  0021               	movlb	1	; select bank1
  7297  1E89  082E               	movf	(_RF_Data^(0+128)+14),w
  7298  1E8A  0020               	movlb	0	; select bank0
  7299  1E8B  00AA               	movwf	??_setLog_Code
  7300  1E8C  086F               	movf	_Product,w
  7301  1E8D  3E0E               	addlw	14
  7302  1E8E  0086               	movwf	6
  7303  1E8F  3001               	movlw	1	; select bank2/3
  7304  1E90  0087               	movwf	7
  7305  1E91  082A               	movf	??_setLog_Code,w
  7306  1E92  0081               	movwf	1
  7307                           
  7308                           ;RF_Control_B1.c: 263: setBuz(1,100);
  7309  1E93  3064               	movlw	100
  7310  1E94  00A6               	movwf	setBuz@time
  7311  1E95  3000               	movlw	0
  7312  1E96  00A7               	movwf	setBuz@time+1
  7313  1E97  3001               	movlw	1
  7314  1E98  3195  2587  319E   	fcall	_setBuz
  7315                           
  7316                           ;RF_Control_B1.c: 264: RF->Learn=0;
  7317  1E9B  087B               	movf	_RF,w
  7318  1E9C  0086               	movwf	6
  7319  1E9D  0187               	clrf	7
  7320  1E9E  1301               	bcf	1,6
  7321                           
  7322                           ;RF_Control_B1.c: 265: if(TMain->First)
  7323  1E9F  087D               	movf	_TMain,w
  7324  1EA0  3E03               	addlw	3
  7325  1EA1  0086               	movwf	6
  7326  1EA2  3001               	movlw	1	; select bank2/3
  7327  1EA3  0087               	movwf	7
  7328  1EA4  1C81               	btfss	1,1
  7329  1EA5  2EAD               	goto	l2611
  7330                           
  7331                           ;RF_Control_B1.c: 266: {
  7332                           ;RF_Control_B1.c: 267: Memory->LoopSave=1;
  7333  1EA6  0021               	movlb	1	; select bank1
  7334  1EA7  0867               	movf	_Memory^(0+128),w
  7335  1EA8  3E22               	addlw	34
  7336  1EA9  0086               	movwf	6
  7337  1EAA  3001               	movlw	1	; select bank2/3
  7338  1EAB  0087               	movwf	7
  7339  1EAC  1501               	bsf	1,2
  7340  1EAD                     l2611:	
  7341                           
  7342                           ;RF_Control_B1.c: 268: }
  7343                           ;RF_Control_B1.c: 269: Memory->Modify=1;
  7344  1EAD  0021               	movlb	1	; select bank1
  7345  1EAE  0867               	movf	_Memory^(0+128),w
  7346  1EAF  3E22               	addlw	34
  7347  1EB0  0086               	movwf	6
  7348  1EB1  3001               	movlw	1	; select bank2/3
  7349  1EB2  0087               	movwf	7
  7350  1EB3  1401               	bsf	1,0
  7351  1EB4  0008               	return
  7352  1EB5                     __end_of_setLog_Code:	
  7353                           
  7354                           	psect	text27
  7355  13C6                     __ptext27:	
  7356 ;; *************** function _setControl_Lights_Table *****************
  7357 ;; Defined at:
  7358 ;;		line 272 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  rf              1    wreg     unsigned char 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  rf              1   71[BANK0 ] unsigned char 
  7363 ;; Return value:  Size  Location     Type
  7364 ;;		None               void
  7365 ;; Registers used:
  7366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;Total ram usage:        1 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:   10
  7379 ;; This function calls:
  7380 ;;		_RfPointSelect
  7381 ;;		_setBuz
  7382 ;;		_setDimmerLights
  7383 ;;		_setRFSW_AdjControl
  7384 ;;		_setRFSW_Control
  7385 ;;		_setRFSW_Status
  7386 ;;		_setSw_Status
  7387 ;;		_setTxData
  7388 ;; This function is called by:
  7389 ;;		_getRxData
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _setControl_Lights_Table
  7395  13C6                     _setControl_Lights_Table:	
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7399                           ;setControl_Lights_Table@rf stored from wreg
  7400  13C6  0020               	movlb	0	; select bank0
  7401  13C7  00E7               	movwf	setControl_Lights_Table@rf
  7402                           
  7403                           ;RF_Control_B1.c: 274: RfPointSelect(rf);
  7404  13C8  0867               	movf	setControl_Lights_Table@rf,w
  7405  13C9  31A5  2528  3193   	fcall	_RfPointSelect
  7406                           
  7407                           ;RF_Control_B1.c: 275: if(RF_Data[15] == 0x00)
  7408  13CC  0021               	movlb	1	; select bank1
  7409  13CD  08AF               	movf	(_RF_Data^(0+128)+15),f
  7410  13CE  1D03               	skipz
  7411  13CF  2C07               	goto	l8606
  7412                           
  7413                           ;RF_Control_B1.c: 276: {
  7414                           ;RF_Control_B1.c: 278: setDimmerLights(1,0);
  7415  13D0  0020               	movlb	0	; select bank0
  7416  13D1  01A4               	clrf	setDimmerLights@status
  7417  13D2  3001               	movlw	1
  7418  13D3  3188  209D  3193   	fcall	_setDimmerLights
  7419                           
  7420                           ;RF_Control_B1.c: 279: setRFSW_Status(1,0);
  7421  13D6  0020               	movlb	0	; select bank0
  7422  13D7  01A2               	clrf	setRFSW_Status@command
  7423  13D8  3001               	movlw	1
  7424  13D9  31A6  261C  3193   	fcall	_setRFSW_Status
  7425                           
  7426                           ;RF_Control_B1.c: 280: setSw_Status(1,0);
  7427  13DC  0020               	movlb	0	; select bank0
  7428  13DD  01A2               	clrf	setSw_Status@command
  7429  13DE  3001               	movlw	1
  7430  13DF  31A6  262B  3193   	fcall	_setSw_Status
  7431                           
  7432                           ;RF_Control_B1.c: 293: Product->Data[9]=0;
  7433  13E2  0020               	movlb	0	; select bank0
  7434  13E3  086F               	movf	_Product,w
  7435  13E4  3E09               	addlw	9
  7436  13E5  0086               	movwf	6
  7437  13E6  3001               	movlw	1	; select bank2/3
  7438  13E7  0087               	movwf	7
  7439  13E8  0181               	clrf	1
  7440                           
  7441                           ;RF_Control_B1.c: 294: Product->Data[11]=0;
  7442  13E9  086F               	movf	_Product,w
  7443  13EA  3E0B               	addlw	11
  7444  13EB  0086               	movwf	6
  7445  13EC  3001               	movlw	1	; select bank2/3
  7446  13ED  0087               	movwf	7
  7447  13EE  0181               	clrf	1
  7448                           
  7449                           ;RF_Control_B1.c: 295: Product->Data[15]=0;
  7450  13EF  086F               	movf	_Product,w
  7451  13F0  3E0F               	addlw	15
  7452  13F1  0086               	movwf	6
  7453  13F2  3001               	movlw	1	; select bank2/3
  7454  13F3  0087               	movwf	7
  7455  13F4  0181               	clrf	1
  7456                           
  7457                           ;RF_Control_B1.c: 296: Product->Data[17]=0;
  7458  13F5  086F               	movf	_Product,w
  7459  13F6  3E11               	addlw	17
  7460  13F7  0086               	movwf	6
  7461  13F8  3001               	movlw	1	; select bank2/3
  7462  13F9  0087               	movwf	7
  7463  13FA  0181               	clrf	1
  7464                           
  7465                           ;RF_Control_B1.c: 297: setBuz(1,100);
  7466  13FB  3064               	movlw	100
  7467  13FC  00A6               	movwf	setBuz@time
  7468  13FD  3000               	movlw	0
  7469  13FE  00A7               	movwf	setBuz@time+1
  7470  13FF  3001               	movlw	1
  7471  1400  3195  2587  3193   	fcall	_setBuz
  7472                           
  7473                           ;RF_Control_B1.c: 298: setTxData(1);
  7474  1403  3001               	movlw	1
  7475  1404  318B  231A         	fcall	_setTxData
  7476                           
  7477                           ;RF_Control_B1.c: 299: }
  7478  1406  0008               	return
  7479  1407                     l8606:	
  7480                           
  7481                           ;RF_Control_B1.c: 300: else if(RF_Data[15] == 0x20)
  7482  1407  0021               	movlb	1	; select bank1
  7483  1408  082F               	movf	(_RF_Data^(0+128)+15),w
  7484  1409  3A20               	xorlw	32
  7485  140A  1D03               	skipz
  7486  140B  2C23               	goto	l8612
  7487                           
  7488                           ;RF_Control_B1.c: 301: {
  7489                           ;RF_Control_B1.c: 302: Product->Data[9]=0;
  7490  140C  0020               	movlb	0	; select bank0
  7491  140D  086F               	movf	_Product,w
  7492  140E  3E09               	addlw	9
  7493  140F  0086               	movwf	6
  7494  1410  3001               	movlw	1	; select bank2/3
  7495  1411  0087               	movwf	7
  7496  1412  0181               	clrf	1
  7497                           
  7498                           ;RF_Control_B1.c: 303: Product->Data[11]=0;
  7499  1413  086F               	movf	_Product,w
  7500  1414  3E0B               	addlw	11
  7501  1415  0086               	movwf	6
  7502  1416  3001               	movlw	1	; select bank2/3
  7503  1417  0087               	movwf	7
  7504  1418  0181               	clrf	1
  7505                           
  7506                           ;RF_Control_B1.c: 304: Product->Data[17]=0;
  7507  1419  086F               	movf	_Product,w
  7508  141A  3E11               	addlw	17
  7509  141B  0086               	movwf	6
  7510  141C  3001               	movlw	1	; select bank2/3
  7511  141D  0087               	movwf	7
  7512  141E  0181               	clrf	1
  7513                           
  7514                           ;RF_Control_B1.c: 305: setTxData(1);
  7515  141F  3001               	movlw	1
  7516  1420  318B  231A         	fcall	_setTxData
  7517                           
  7518                           ;RF_Control_B1.c: 306: }
  7519  1422  0008               	return
  7520  1423                     l8612:	
  7521                           
  7522                           ;RF_Control_B1.c: 308: else if(RF_Data[15] == 0x01)
  7523  1423  0021               	movlb	1	; select bank1
  7524  1424  082F               	movf	(_RF_Data^(0+128)+15),w
  7525  1425  3A01               	xorlw	1
  7526  1426  1D03               	skipz
  7527  1427  2C2C               	goto	l8616
  7528                           
  7529                           ;RF_Control_B1.c: 309: {
  7530                           ;RF_Control_B1.c: 310: setRFSW_Control(1);
  7531  1428  3001               	movlw	1
  7532  1429  3188  200D         	fcall	_setRFSW_Control
  7533                           
  7534                           ;RF_Control_B1.c: 311: }
  7535  142B  0008               	return
  7536  142C                     l8616:	
  7537                           
  7538                           ;RF_Control_B1.c: 313: else if(RF_Data[15] == 0x11)
  7539  142C  0021               	movlb	1	; select bank1
  7540  142D  082F               	movf	(_RF_Data^(0+128)+15),w
  7541  142E  3A11               	xorlw	17
  7542  142F  1D03               	skipz
  7543  1430  0008               	return
  7544                           
  7545                           ;RF_Control_B1.c: 314: {
  7546                           ;RF_Control_B1.c: 315: setRFSW_AdjControl(1);
  7547  1431  3001               	movlw	1
  7548  1432  319C  2497         	fcall	_setRFSW_AdjControl
  7549  1434  0008               	return
  7550  1435                     __end_of_setControl_Lights_Table:	
  7551                           
  7552                           	psect	text28
  7553  080D                     __ptext28:	
  7554 ;; *************** function _setRFSW_Control *****************
  7555 ;; Defined at:
  7556 ;;		line 369 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  sw              1    wreg     unsigned char 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  sw              1   67[BANK0 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;		None               void
  7563 ;; Registers used:
  7564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;Total ram usage:        2 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    8
  7577 ;; This function calls:
  7578 ;;		_RfSWPointSelect
  7579 ;;		_setBuz
  7580 ;;		_setDelayOff_GO
  7581 ;;		_setDimmerLights_Switch
  7582 ;;		_setDimmerLights_Trigger
  7583 ;;		_setRF_DimmerLights
  7584 ;;		_setSw_Status
  7585 ;;		_setTxData
  7586 ;; This function is called by:
  7587 ;;		_setControl_Lights_Table
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           
  7592                           ;psect for function _setRFSW_Control
  7593  080D                     _setRFSW_Control:	
  7594                           
  7595                           ;incstack = 0
  7596                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7597                           ;setRFSW_Control@sw stored from wreg
  7598  080D  0020               	movlb	0	; select bank0
  7599  080E  00E3               	movwf	setRFSW_Control@sw
  7600                           
  7601                           ;RF_Control_B1.c: 371: RfSWPointSelect(sw);
  7602  080F  0863               	movf	setRFSW_Control@sw,w
  7603  0810  31A5  258F  3188   	fcall	_RfSWPointSelect
  7604                           
  7605                           ;RF_Control_B1.c: 372: if(!RFSW->Status)
  7606  0813  0021               	movlb	1	; select bank1
  7607  0814  083C               	movf	_RFSW^(0+128),w
  7608  0815  0086               	movwf	6
  7609  0816  0187               	clrf	7
  7610  0817  1801               	btfsc	1,0
  7611  0818  284E               	goto	l8496
  7612                           
  7613                           ;RF_Control_B1.c: 373: {
  7614                           ;RF_Control_B1.c: 374: if(RF_Data[16] == 0x80)
  7615  0819  0830               	movf	(_RF_Data^(0+128)+16),w
  7616  081A  3A80               	xorlw	128
  7617  081B  1D03               	skipz
  7618  081C  282A               	goto	l8486
  7619                           
  7620                           ;RF_Control_B1.c: 375: {
  7621                           ;RF_Control_B1.c: 376: setDelayOff_GO(sw,1,RF_Data[17]);
  7622  081D  0020               	movlb	0	; select bank0
  7623  081E  01A3               	clrf	setDelayOff_GO@command
  7624  081F  0AA3               	incf	setDelayOff_GO@command,f
  7625  0820  0021               	movlb	1	; select bank1
  7626  0821  0831               	movf	(_RF_Data^(0+128)+17),w
  7627  0822  0020               	movlb	0	; select bank0
  7628  0823  00E2               	movwf	??_setRFSW_Control
  7629  0824  0862               	movf	??_setRFSW_Control,w
  7630  0825  00A4               	movwf	setDelayOff_GO@value
  7631  0826  0863               	movf	setRFSW_Control@sw,w
  7632  0827  3191  2102  3188   	fcall	_setDelayOff_GO
  7633  082A                     l8486:	
  7634                           
  7635                           ;RF_Control_B1.c: 377: }
  7636                           ;RF_Control_B1.c: 378: RFSW->Status=1;
  7637  082A  0021               	movlb	1	; select bank1
  7638  082B  083C               	movf	_RFSW^(0+128),w
  7639  082C  0086               	movwf	6
  7640  082D  0187               	clrf	7
  7641  082E  1401               	bsf	1,0
  7642                           
  7643                           ;RF_Control_B1.c: 379: setSw_Status(sw,1);
  7644  082F  0020               	movlb	0	; select bank0
  7645  0830  01A2               	clrf	setSw_Status@command
  7646  0831  0AA2               	incf	setSw_Status@command,f
  7647  0832  0863               	movf	setRFSW_Control@sw,w
  7648  0833  31A6  262B  3188   	fcall	_setSw_Status
  7649                           
  7650                           ;RF_Control_B1.c: 381: setDimmerLights_Trigger(sw,1);
  7651  0836  0020               	movlb	0	; select bank0
  7652  0837  01A2               	clrf	setDimmerLights_Trigger@command
  7653  0838  0AA2               	incf	setDimmerLights_Trigger@command,f
  7654  0839  0863               	movf	setRFSW_Control@sw,w
  7655  083A  31A6  2669  3188   	fcall	_setDimmerLights_Trigger
  7656                           
  7657                           ;RF_Control_B1.c: 382: setDimmerLights_Switch(sw,1);
  7658  083D  0020               	movlb	0	; select bank0
  7659  083E  01A2               	clrf	setDimmerLights_Switch@command
  7660  083F  0AA2               	incf	setDimmerLights_Switch@command,f
  7661  0840  0863               	movf	setRFSW_Control@sw,w
  7662  0841  31A6  2659  3188   	fcall	_setDimmerLights_Switch
  7663                           
  7664                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw,RFSW->Status);
  7665  0844  0021               	movlb	1	; select bank1
  7666  0845  083C               	movf	_RFSW^(0+128),w
  7667  0846  0086               	movwf	6
  7668  0847  0187               	clrf	7
  7669  0848  3000               	movlw	0
  7670  0849  1801               	btfsc	1,0
  7671  084A  3001               	movlw	1
  7672  084B  0020               	movlb	0	; select bank0
  7673  084C  00DD               	movwf	setRF_DimmerLights@on
  7674  084D  288C               	goto	L2
  7675  084E                     l8496:	
  7676                           ;RF_Control_B1.c: 385: }
  7677                           
  7678                           
  7679                           ;RF_Control_B1.c: 386: else
  7680                           ;RF_Control_B1.c: 387: {
  7681                           ;RF_Control_B1.c: 388: if(RF_Data[16] == 0x80)
  7682  084E  0021               	movlb	1	; select bank1
  7683  084F  0830               	movf	(_RF_Data^(0+128)+16),w
  7684  0850  3A80               	xorlw	128
  7685  0851  1D03               	skipz
  7686  0852  2864               	goto	l8500
  7687                           
  7688                           ;RF_Control_B1.c: 389: {
  7689                           ;RF_Control_B1.c: 390: setDelayOff_GO(sw,1,RF_Data[17]);
  7690  0853  0020               	movlb	0	; select bank0
  7691  0854  01A3               	clrf	setDelayOff_GO@command
  7692  0855  0AA3               	incf	setDelayOff_GO@command,f
  7693  0856  0021               	movlb	1	; select bank1
  7694  0857  0831               	movf	(_RF_Data^(0+128)+17),w
  7695  0858  0020               	movlb	0	; select bank0
  7696  0859  00E2               	movwf	??_setRFSW_Control
  7697  085A  0862               	movf	??_setRFSW_Control,w
  7698  085B  00A4               	movwf	setDelayOff_GO@value
  7699  085C  0863               	movf	setRFSW_Control@sw,w
  7700  085D  3191  2102  3188   	fcall	_setDelayOff_GO
  7701                           
  7702                           ;RF_Control_B1.c: 391: setRF_DimmerLights(sw,1);
  7703  0860  0020               	movlb	0	; select bank0
  7704  0861  01DD               	clrf	setRF_DimmerLights@on
  7705  0862  0ADD               	incf	setRF_DimmerLights@on,f
  7706  0863  288C               	goto	L2
  7707  0864                     l8500:	
  7708                           ;RF_Control_B1.c: 392: }
  7709                           
  7710                           
  7711                           ;RF_Control_B1.c: 393: else
  7712                           ;RF_Control_B1.c: 394: {
  7713                           ;RF_Control_B1.c: 395: RFSW->Status=0;
  7714  0864  0021               	movlb	1	; select bank1
  7715  0865  083C               	movf	_RFSW^(0+128),w
  7716  0866  0086               	movwf	6
  7717  0867  0187               	clrf	7
  7718  0868  1001               	bcf	1,0
  7719                           
  7720                           ;RF_Control_B1.c: 396: setSw_Status(sw,0);
  7721  0869  0020               	movlb	0	; select bank0
  7722  086A  01A2               	clrf	setSw_Status@command
  7723  086B  0863               	movf	setRFSW_Control@sw,w
  7724  086C  31A6  262B  3188   	fcall	_setSw_Status
  7725                           
  7726                           ;RF_Control_B1.c: 398: setDimmerLights_Trigger(sw,1);
  7727  086F  0020               	movlb	0	; select bank0
  7728  0870  01A2               	clrf	setDimmerLights_Trigger@command
  7729  0871  0AA2               	incf	setDimmerLights_Trigger@command,f
  7730  0872  0863               	movf	setRFSW_Control@sw,w
  7731  0873  31A6  2669  3188   	fcall	_setDimmerLights_Trigger
  7732                           
  7733                           ;RF_Control_B1.c: 399: setDimmerLights_Switch(sw,RFSW->Status);
  7734  0876  0021               	movlb	1	; select bank1
  7735  0877  083C               	movf	_RFSW^(0+128),w
  7736  0878  0086               	movwf	6
  7737  0879  0187               	clrf	7
  7738  087A  3000               	movlw	0
  7739  087B  1801               	btfsc	1,0
  7740  087C  3001               	movlw	1
  7741  087D  0020               	movlb	0	; select bank0
  7742  087E  00A2               	movwf	setDimmerLights_Switch@command
  7743  087F  0863               	movf	setRFSW_Control@sw,w
  7744  0880  31A6  2659  3188   	fcall	_setDimmerLights_Switch
  7745                           
  7746                           ;RF_Control_B1.c: 401: setDelayOff_GO(sw,0,0);
  7747  0883  0020               	movlb	0	; select bank0
  7748  0884  01A3               	clrf	setDelayOff_GO@command
  7749  0885  01A4               	clrf	setDelayOff_GO@value
  7750  0886  0863               	movf	setRFSW_Control@sw,w
  7751  0887  3191  2102  3188   	fcall	_setDelayOff_GO
  7752                           
  7753                           ;RF_Control_B1.c: 402: setRF_DimmerLights(sw,0);
  7754  088A  0020               	movlb	0	; select bank0
  7755  088B  01DD               	clrf	setRF_DimmerLights@on
  7756  088C                     L2:	
  7757  088C  0863               	movf	setRFSW_Control@sw,w
  7758  088D  3192  2281  3188   	fcall	_setRF_DimmerLights
  7759                           
  7760                           ;RF_Control_B1.c: 403: }
  7761                           ;RF_Control_B1.c: 404: }
  7762                           ;RF_Control_B1.c: 405: setBuz(1,100);
  7763  0890  3064               	movlw	100
  7764  0891  0020               	movlb	0	; select bank0
  7765  0892  00A6               	movwf	setBuz@time
  7766  0893  3000               	movlw	0
  7767  0894  00A7               	movwf	setBuz@time+1
  7768  0895  3001               	movlw	1
  7769  0896  3195  2587  3188   	fcall	_setBuz
  7770                           
  7771                           ;RF_Control_B1.c: 406: setTxData(1);
  7772  0899  3001               	movlw	1
  7773  089A  318B  231A         	fcall	_setTxData
  7774  089C  0008               	return
  7775  089D                     __end_of_setRFSW_Control:	
  7776                           
  7777                           	psect	text29
  7778  1102                     __ptext29:	
  7779 ;; *************** function _setDelayOff_GO *****************
  7780 ;; Defined at:
  7781 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  sw              1    wreg     unsigned char 
  7784 ;;  command         1    3[BANK0 ] unsigned char 
  7785 ;;  value           1    4[BANK0 ] unsigned char 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  sw              1    7[BANK0 ] unsigned char 
  7788 ;; Return value:  Size  Location     Type
  7789 ;;		None               void
  7790 ;; Registers used:
  7791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7797 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;Total ram usage:        5 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    5
  7804 ;; This function calls:
  7805 ;;		_DelayOffPointSelect
  7806 ;;		_DelayTimejudge
  7807 ;; This function is called by:
  7808 ;;		_setRFSW_Control
  7809 ;;		_Sw_DimmerOffFunc
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function _setDelayOff_GO
  7815  1102                     _setDelayOff_GO:	
  7816                           
  7817                           ;incstack = 0
  7818                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7819                           ;setDelayOff_GO@sw stored from wreg
  7820  1102  0020               	movlb	0	; select bank0
  7821  1103  00A7               	movwf	setDelayOff_GO@sw
  7822                           
  7823                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7824  1104  0827               	movf	setDelayOff_GO@sw,w
  7825  1105  31A5  2583  3191   	fcall	_DelayOffPointSelect
  7826                           
  7827                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7828  1108  0021               	movlb	1	; select bank1
  7829  1109  0838               	movf	_DelayOff^(0+128),w
  7830  110A  0086               	movwf	6
  7831  110B  0187               	clrf	7
  7832  110C  1C01               	btfss	1,0
  7833  110D  0008               	return
  7834                           
  7835                           ;DelayOff_B1.c: 96: {
  7836                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7837  110E  0838               	movf	_DelayOff^(0+128),w
  7838  110F  0086               	movwf	6
  7839  1110  0187               	clrf	7
  7840  1111  0020               	movlb	0	; select bank0
  7841  1112  0823               	movf	setDelayOff_GO@command,w
  7842  1113  1081               	bcf	1,1
  7843  1114  1D03               	skipz
  7844  1115  1481               	bsf	1,1
  7845                           
  7846                           ;DelayOff_B1.c: 98: if(command)
  7847  1116  0823               	movf	setDelayOff_GO@command,w
  7848  1117  1903               	btfsc	3,2
  7849  1118  2944               	goto	l6314
  7850                           
  7851                           ;DelayOff_B1.c: 99: {
  7852                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7853  1119  0824               	movf	setDelayOff_GO@value,w
  7854  111A  319A  22C8  3191   	fcall	_DelayTimejudge
  7855  111D  0020               	movlb	0	; select bank0
  7856  111E  00A5               	movwf	??_setDelayOff_GO
  7857  111F  0021               	movlb	1	; select bank1
  7858  1120  0A38               	incf	_DelayOff^(0+128),w
  7859  1121  0086               	movwf	6
  7860  1122  0187               	clrf	7
  7861  1123  0020               	movlb	0	; select bank0
  7862  1124  0825               	movf	??_setDelayOff_GO,w
  7863  1125  0081               	movwf	1
  7864                           
  7865                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7866  1126  300F               	movlw	15
  7867  1127  0524               	andwf	setDelayOff_GO@value,w
  7868  1128  00A5               	movwf	??_setDelayOff_GO
  7869  1129  0825               	movf	??_setDelayOff_GO,w
  7870  112A  3A05               	xorlw	5
  7871  112B  1903               	skipnz
  7872  112C  2931               	goto	l6308
  7873  112D  0824               	movf	setDelayOff_GO@value,w
  7874  112E  390F               	andlw	15
  7875  112F  1D03               	btfss	3,2
  7876  1130  2937               	goto	l6312
  7877  1131                     l6308:	
  7878  1131  3026               	movlw	38
  7879  1132  0224               	subwf	setDelayOff_GO@value,w
  7880  1133  1803               	skipnc
  7881  1134  2937               	goto	l6312
  7882                           
  7883                           ;DelayOff_B1.c: 102: {
  7884                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7885  1135  0824               	movf	setDelayOff_GO@value,w
  7886  1136  2938               	goto	L3
  7887  1137                     l6312:	
  7888                           ;DelayOff_B1.c: 104: }
  7889                           
  7890                           
  7891                           ;DelayOff_B1.c: 105: else
  7892                           ;DelayOff_B1.c: 106: {
  7893                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7894  1137  3005               	movlw	5
  7895  1138                     L3:	
  7896  1138  00A5               	movwf	??_setDelayOff_GO
  7897  1139  0827               	movf	setDelayOff_GO@sw,w
  7898  113A  3E1A               	addlw	26
  7899  113B  076F               	addwf	_Product,w
  7900  113C  00A6               	movwf	??_setDelayOff_GO+1
  7901  113D  0826               	movf	??_setDelayOff_GO+1,w
  7902  113E  0086               	movwf	6
  7903  113F  3001               	movlw	1	; select bank2/3
  7904  1140  0087               	movwf	7
  7905  1141  0825               	movf	??_setDelayOff_GO,w
  7906  1142  0081               	movwf	1
  7907                           
  7908                           ;DelayOff_B1.c: 108: }
  7909                           ;DelayOff_B1.c: 109: }
  7910  1143  2950               	goto	l6318
  7911  1144                     l6314:	
  7912                           
  7913                           ;DelayOff_B1.c: 110: else if(!command)
  7914  1144  08A3               	movf	setDelayOff_GO@command,f
  7915  1145  1D03               	skipz
  7916  1146  2950               	goto	l6318
  7917                           
  7918                           ;DelayOff_B1.c: 111: {
  7919                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7920  1147  0827               	movf	setDelayOff_GO@sw,w
  7921  1148  3E1A               	addlw	26
  7922  1149  076F               	addwf	_Product,w
  7923  114A  00A5               	movwf	??_setDelayOff_GO
  7924  114B  0825               	movf	??_setDelayOff_GO,w
  7925  114C  0086               	movwf	6
  7926  114D  3001               	movlw	1	; select bank2/3
  7927  114E  0087               	movwf	7
  7928  114F  0181               	clrf	1
  7929  1150                     l6318:	
  7930                           
  7931                           ;DelayOff_B1.c: 113: }
  7932                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7933  1150  0021               	movlb	1	; select bank1
  7934  1151  0838               	movf	_DelayOff^(0+128),w
  7935  1152  3E02               	addlw	2
  7936  1153  0086               	movwf	6
  7937  1154  0187               	clrf	7
  7938  1155  3000               	movlw	0
  7939  1156  3FC0               	movwi [0]fsr1
  7940  1157  3FC1               	movwi [1]fsr1
  7941                           
  7942                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7943  1158  0838               	movf	_DelayOff^(0+128),w
  7944  1159  3E04               	addlw	4
  7945  115A  0086               	movwf	6
  7946  115B  0187               	clrf	7
  7947  115C  0181               	clrf	1
  7948  115D  0008               	return
  7949  115E                     __end_of_setDelayOff_GO:	
  7950                           
  7951                           	psect	text30
  7952  1AC8                     __ptext30:	
  7953 ;; *************** function _DelayTimejudge *****************
  7954 ;; Defined at:
  7955 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  value           1    wreg     unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  value           1    2[BANK0 ] unsigned char 
  7960 ;;  i               1    1[BANK0 ] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      unsigned char 
  7963 ;; Registers used:
  7964 ;;		wreg
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        3 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    4
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_setDelayOff_GO
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function _DelayTimejudge
  7986  1AC8                     _DelayTimejudge:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in _DelayTimejudge: [wreg]
  7990                           ;DelayTimejudge@value stored from wreg
  7991  1AC8  0020               	movlb	0	; select bank0
  7992  1AC9  00A2               	movwf	DelayTimejudge@value
  7993                           
  7994                           ;DelayOff_B1.c: 121: char i=5;
  7995  1ACA  3005               	movlw	5
  7996  1ACB  00A0               	movwf	??_DelayTimejudge
  7997  1ACC  0820               	movf	??_DelayTimejudge,w
  7998  1ACD  00A1               	movwf	DelayTimejudge@i
  7999                           
  8000                           ;DelayOff_B1.c: 122: if(value == 0x05)
  8001  1ACE  0822               	movf	DelayTimejudge@value,w
  8002  1ACF  3A05               	xorlw	5
  8003  1AD0  1D03               	skipz
  8004  1AD1  2AD4               	goto	l6154
  8005                           
  8006                           ;DelayOff_B1.c: 123: {
  8007                           ;DelayOff_B1.c: 124: i=5;
  8008  1AD2  3005               	movlw	5
  8009  1AD3  2AF1               	goto	L8
  8010  1AD4                     l6154:	
  8011                           ;DelayOff_B1.c: 125: }
  8012                           
  8013                           
  8014                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  8015  1AD4  0822               	movf	DelayTimejudge@value,w
  8016  1AD5  3A10               	xorlw	16
  8017  1AD6  1D03               	skipz
  8018  1AD7  2ADA               	goto	l6158
  8019                           
  8020                           ;DelayOff_B1.c: 127: {
  8021                           ;DelayOff_B1.c: 128: i=10;
  8022  1AD8  300A               	movlw	10
  8023  1AD9  2AF1               	goto	L8
  8024  1ADA                     l6158:	
  8025                           ;DelayOff_B1.c: 129: }
  8026                           
  8027                           
  8028                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  8029  1ADA  0822               	movf	DelayTimejudge@value,w
  8030  1ADB  3A15               	xorlw	21
  8031  1ADC  1D03               	skipz
  8032  1ADD  2AE0               	goto	l6162
  8033                           
  8034                           ;DelayOff_B1.c: 131: {
  8035                           ;DelayOff_B1.c: 132: i=15;
  8036  1ADE  300F               	movlw	15
  8037  1ADF  2AF1               	goto	L8
  8038  1AE0                     l6162:	
  8039                           ;DelayOff_B1.c: 133: }
  8040                           
  8041                           
  8042                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8043  1AE0  0822               	movf	DelayTimejudge@value,w
  8044  1AE1  3A20               	xorlw	32
  8045  1AE2  1D03               	skipz
  8046  1AE3  2AE6               	goto	l6166
  8047                           
  8048                           ;DelayOff_B1.c: 135: {
  8049                           ;DelayOff_B1.c: 136: i=20;
  8050  1AE4  3014               	movlw	20
  8051  1AE5  2AF1               	goto	L8
  8052  1AE6                     l6166:	
  8053                           ;DelayOff_B1.c: 137: }
  8054                           
  8055                           
  8056                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8057  1AE6  0822               	movf	DelayTimejudge@value,w
  8058  1AE7  3A25               	xorlw	37
  8059  1AE8  1D03               	skipz
  8060  1AE9  2AEC               	goto	l6170
  8061                           
  8062                           ;DelayOff_B1.c: 139: {
  8063                           ;DelayOff_B1.c: 140: i=25;
  8064  1AEA  3019               	movlw	25
  8065  1AEB  2AF1               	goto	L8
  8066  1AEC                     l6170:	
  8067                           ;DelayOff_B1.c: 141: }
  8068                           
  8069                           
  8070                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8071  1AEC  0822               	movf	DelayTimejudge@value,w
  8072  1AED  3A30               	xorlw	48
  8073  1AEE  1D03               	skipz
  8074  1AEF  2AF4               	goto	l680
  8075                           
  8076                           ;DelayOff_B1.c: 143: {
  8077                           ;DelayOff_B1.c: 144: i=30;
  8078  1AF0  301E               	movlw	30
  8079  1AF1                     L8:	
  8080  1AF1  00A0               	movwf	??_DelayTimejudge
  8081  1AF2  0820               	movf	??_DelayTimejudge,w
  8082  1AF3  00A1               	movwf	DelayTimejudge@i
  8083  1AF4                     l680:	
  8084                           
  8085                           ;DelayOff_B1.c: 145: }
  8086                           ;DelayOff_B1.c: 146: return i;
  8087  1AF4  0821               	movf	DelayTimejudge@i,w
  8088  1AF5  0008               	return
  8089  1AF6                     __end_of_DelayTimejudge:	
  8090                           
  8091                           	psect	text31
  8092  1C97                     __ptext31:	
  8093 ;; *************** function _setRFSW_AdjControl *****************
  8094 ;; Defined at:
  8095 ;;		line 409 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  sw              1    wreg     unsigned char 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  sw              1   70[BANK0 ] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;		None               void
  8102 ;; Registers used:
  8103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        3 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    9
  8116 ;; This function calls:
  8117 ;;		_RfSWPointSelect
  8118 ;;		_setRF_DimmerValue
  8119 ;;		_setTxData
  8120 ;; This function is called by:
  8121 ;;		_setControl_Lights_Table
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function _setRFSW_AdjControl
  8127  1C97                     _setRFSW_AdjControl:	
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8131                           ;setRFSW_AdjControl@sw stored from wreg
  8132  1C97  0020               	movlb	0	; select bank0
  8133  1C98  00E6               	movwf	setRFSW_AdjControl@sw
  8134                           
  8135                           ;RF_Control_B1.c: 411: RfSWPointSelect(sw);
  8136  1C99  0866               	movf	setRFSW_AdjControl@sw,w
  8137  1C9A  31A5  258F  319C   	fcall	_RfSWPointSelect
  8138                           
  8139                           ;RF_Control_B1.c: 412: if(RFSW->Status)
  8140  1C9D  0021               	movlb	1	; select bank1
  8141  1C9E  083C               	movf	_RFSW^(0+128),w
  8142  1C9F  0086               	movwf	6
  8143  1CA0  0187               	clrf	7
  8144  1CA1  1C01               	btfss	1,0
  8145  1CA2  2CAF               	goto	l6560
  8146                           
  8147                           ;RF_Control_B1.c: 413: {
  8148                           ;RF_Control_B1.c: 414: Memory->Modify=1;
  8149  1CA3  0867               	movf	_Memory^(0+128),w
  8150  1CA4  3E22               	addlw	34
  8151  1CA5  0086               	movwf	6
  8152  1CA6  3001               	movlw	1	; select bank2/3
  8153  1CA7  0087               	movwf	7
  8154  1CA8  1401               	bsf	1,0
  8155                           
  8156                           ;RF_Control_B1.c: 415: setRF_DimmerValue(sw);
  8157  1CA9  0020               	movlb	0	; select bank0
  8158  1CAA  0866               	movf	setRFSW_AdjControl@sw,w
  8159  1CAB  319B  23EB  319C   	fcall	_setRF_DimmerValue
  8160                           
  8161                           ;RF_Control_B1.c: 416: }
  8162  1CAE  2CC1               	goto	l2638
  8163  1CAF                     l6560:	
  8164                           
  8165                           ;RF_Control_B1.c: 417: else
  8166                           ;RF_Control_B1.c: 418: {
  8167                           ;RF_Control_B1.c: 419: Product->Data[9]=Product->Data[20+sw];
  8168  1CAF  0020               	movlb	0	; select bank0
  8169  1CB0  0866               	movf	setRFSW_AdjControl@sw,w
  8170  1CB1  3E14               	addlw	20
  8171  1CB2  076F               	addwf	_Product,w
  8172  1CB3  00E4               	movwf	??_setRFSW_AdjControl
  8173  1CB4  0864               	movf	??_setRFSW_AdjControl,w
  8174  1CB5  0086               	movwf	6
  8175  1CB6  3001               	movlw	1	; select bank2/3
  8176  1CB7  0087               	movwf	7
  8177  1CB8  0801               	movf	1,w
  8178  1CB9  00E5               	movwf	??_setRFSW_AdjControl+1
  8179  1CBA  086F               	movf	_Product,w
  8180  1CBB  3E09               	addlw	9
  8181  1CBC  0086               	movwf	6
  8182  1CBD  3001               	movlw	1	; select bank2/3
  8183  1CBE  0087               	movwf	7
  8184  1CBF  0865               	movf	??_setRFSW_AdjControl+1,w
  8185  1CC0  0081               	movwf	1
  8186  1CC1                     l2638:	
  8187                           
  8188                           ;RF_Control_B1.c: 420: }
  8189                           ;RF_Control_B1.c: 421: Product->Data[17]=Product->Data[26+sw];
  8190  1CC1  0020               	movlb	0	; select bank0
  8191  1CC2  0866               	movf	setRFSW_AdjControl@sw,w
  8192  1CC3  3E1A               	addlw	26
  8193  1CC4  076F               	addwf	_Product,w
  8194  1CC5  00E4               	movwf	??_setRFSW_AdjControl
  8195  1CC6  0864               	movf	??_setRFSW_AdjControl,w
  8196  1CC7  0086               	movwf	6
  8197  1CC8  3001               	movlw	1	; select bank2/3
  8198  1CC9  0087               	movwf	7
  8199  1CCA  0801               	movf	1,w
  8200  1CCB  00E5               	movwf	??_setRFSW_AdjControl+1
  8201  1CCC  086F               	movf	_Product,w
  8202  1CCD  3E11               	addlw	17
  8203  1CCE  0086               	movwf	6
  8204  1CCF  3001               	movlw	1	; select bank2/3
  8205  1CD0  0087               	movwf	7
  8206  1CD1  0865               	movf	??_setRFSW_AdjControl+1,w
  8207  1CD2  0081               	movwf	1
  8208                           
  8209                           ;RF_Control_B1.c: 422: setTxData(1);
  8210  1CD3  3001               	movlw	1
  8211  1CD4  318B  231A         	fcall	_setTxData
  8212  1CD6  0008               	return
  8213  1CD7                     __end_of_setRFSW_AdjControl:	
  8214                           
  8215                           	psect	text32
  8216  1BEB                     __ptext32:	
  8217 ;; *************** function _setRF_DimmerValue *****************
  8218 ;; Defined at:
  8219 ;;		line 433 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  lights          1    wreg     unsigned char 
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;  lights          1   67[BANK0 ] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;		None               void
  8226 ;; Registers used:
  8227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;Total ram usage:        3 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    8
  8240 ;; This function calls:
  8241 ;;		_setDimmerLights_AdjRF
  8242 ;; This function is called by:
  8243 ;;		_setRFSW_AdjControl
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           
  8248                           ;psect for function _setRF_DimmerValue
  8249  1BEB                     _setRF_DimmerValue:	
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8253                           ;setRF_DimmerValue@lights stored from wreg
  8254  1BEB  0020               	movlb	0	; select bank0
  8255  1BEC  00E3               	movwf	setRF_DimmerValue@lights
  8256                           
  8257                           ;RF_Control_B1.c: 435: if(RF_Data[9] > 0x64)
  8258  1BED  3065               	movlw	101
  8259  1BEE  0021               	movlb	1	; select bank1
  8260  1BEF  0229               	subwf	(_RF_Data^(0+128)+9),w
  8261  1BF0  1C03               	skipc
  8262  1BF1  2BF8               	goto	l6408
  8263                           
  8264                           ;RF_Control_B1.c: 436: {
  8265                           ;RF_Control_B1.c: 437: RF_Data[9]=0x64;
  8266  1BF2  3064               	movlw	100
  8267  1BF3  0020               	movlb	0	; select bank0
  8268  1BF4  00E1               	movwf	??_setRF_DimmerValue
  8269  1BF5  0861               	movf	??_setRF_DimmerValue,w
  8270  1BF6  0021               	movlb	1	; select bank1
  8271  1BF7  00A9               	movwf	(_RF_Data^(0+128)+9)
  8272  1BF8                     l6408:	
  8273                           
  8274                           ;RF_Control_B1.c: 438: }
  8275                           ;RF_Control_B1.c: 439: Product->Data[9]=RF_Data[9];
  8276  1BF8  0829               	movf	(_RF_Data^(0+128)+9),w
  8277  1BF9  0020               	movlb	0	; select bank0
  8278  1BFA  00E1               	movwf	??_setRF_DimmerValue
  8279  1BFB  086F               	movf	_Product,w
  8280  1BFC  3E09               	addlw	9
  8281  1BFD  0086               	movwf	6
  8282  1BFE  3001               	movlw	1	; select bank2/3
  8283  1BFF  0087               	movwf	7
  8284  1C00  0861               	movf	??_setRF_DimmerValue,w
  8285  1C01  0081               	movwf	1
  8286                           
  8287                           ;RF_Control_B1.c: 440: Product->Data[11]=lights;
  8288  1C02  0863               	movf	setRF_DimmerValue@lights,w
  8289  1C03  00E1               	movwf	??_setRF_DimmerValue
  8290  1C04  086F               	movf	_Product,w
  8291  1C05  3E0B               	addlw	11
  8292  1C06  0086               	movwf	6
  8293  1C07  3001               	movlw	1	; select bank2/3
  8294  1C08  0087               	movwf	7
  8295  1C09  0861               	movf	??_setRF_DimmerValue,w
  8296  1C0A  0081               	movwf	1
  8297                           
  8298                           ;RF_Control_B1.c: 441: Product->Data[(20+lights)]=Product->Data[9];
  8299  1C0B  086F               	movf	_Product,w
  8300  1C0C  3E09               	addlw	9
  8301  1C0D  0086               	movwf	6
  8302  1C0E  3001               	movlw	1	; select bank2/3
  8303  1C0F  0087               	movwf	7
  8304  1C10  0801               	movf	1,w
  8305  1C11  00E1               	movwf	??_setRF_DimmerValue
  8306  1C12  0863               	movf	setRF_DimmerValue@lights,w
  8307  1C13  3E14               	addlw	20
  8308  1C14  076F               	addwf	_Product,w
  8309  1C15  00E2               	movwf	??_setRF_DimmerValue+1
  8310  1C16  0862               	movf	??_setRF_DimmerValue+1,w
  8311  1C17  0086               	movwf	6
  8312  1C18  3001               	movlw	1	; select bank2/3
  8313  1C19  0087               	movwf	7
  8314  1C1A  0861               	movf	??_setRF_DimmerValue,w
  8315  1C1B  0081               	movwf	1
  8316                           
  8317                           ;RF_Control_B1.c: 442: setDimmerLights_AdjRF(lights);
  8318  1C1C  0863               	movf	setRF_DimmerValue@lights,w
  8319  1C1D  3199  215C         	fcall	_setDimmerLights_AdjRF
  8320  1C1F  0008               	return
  8321  1C20                     __end_of_setRF_DimmerValue:	
  8322                           
  8323                           	psect	text33
  8324  195C                     __ptext33:	
  8325 ;; *************** function _setDimmerLights_AdjRF *****************
  8326 ;; Defined at:
  8327 ;;		line 423 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  lights          1    wreg     unsigned char 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  lights          1   64[BANK0 ] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;		None               void
  8334 ;; Registers used:
  8335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        2 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    7
  8348 ;; This function calls:
  8349 ;;		_DimmerLightsPointSelect
  8350 ;;		_getPercentValue
  8351 ;; This function is called by:
  8352 ;;		_setRF_DimmerValue
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _setDimmerLights_AdjRF
  8358  195C                     _setDimmerLights_AdjRF:	
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8362                           ;setDimmerLights_AdjRF@lights stored from wreg
  8363  195C  0020               	movlb	0	; select bank0
  8364  195D  00E0               	movwf	setDimmerLights_AdjRF@lights
  8365                           
  8366                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8367  195E  0860               	movf	setDimmerLights_AdjRF@lights,w
  8368  195F  31A5  2512  3199   	fcall	_DimmerLightsPointSelect
  8369                           
  8370                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8371  1962  0020               	movlb	0	; select bank0
  8372  1963  086C               	movf	_DimmerLights,w
  8373  1964  0086               	movwf	6
  8374  1965  3001               	movlw	1	; select bank2/3
  8375  1966  0087               	movwf	7
  8376  1967  1501               	bsf	1,2
  8377                           
  8378                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8379  1968  086C               	movf	_DimmerLights,w
  8380  1969  0086               	movwf	6
  8381  196A  3001               	movlw	1	; select bank2/3
  8382  196B  0087               	movwf	7
  8383  196C  1481               	bsf	1,1
  8384                           
  8385                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8386  196D  086F               	movf	_Product,w
  8387  196E  3E09               	addlw	9
  8388  196F  0086               	movwf	6
  8389  1970  3001               	movlw	1	; select bank2/3
  8390  1971  0087               	movwf	7
  8391  1972  0801               	movf	1,w
  8392  1973  3190  20A7         	fcall	_getPercentValue
  8393  1975  0020               	movlb	0	; select bank0
  8394  1976  00DF               	movwf	??_setDimmerLights_AdjRF
  8395  1977  086C               	movf	_DimmerLights,w
  8396  1978  3E05               	addlw	5
  8397  1979  0086               	movwf	6
  8398  197A  3001               	movlw	1	; select bank2/3
  8399  197B  0087               	movwf	7
  8400  197C  085F               	movf	??_setDimmerLights_AdjRF,w
  8401  197D  0081               	movwf	1
  8402  197E  0008               	return
  8403  197F                     __end_of_setDimmerLights_AdjRF:	
  8404                           
  8405                           	psect	text34
  8406  10A7                     __ptext34:	
  8407 ;; *************** function _getPercentValue *****************
  8408 ;; Defined at:
  8409 ;;		line 490 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  value           1    wreg     unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  value           1   59[BANK0 ] unsigned char 
  8414 ;;  i               3   60[BANK0 ] float 
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      unsigned char 
  8417 ;; Registers used:
  8418 ;;		wreg, status,2, status,0, pclath, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;Total ram usage:        6 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    6
  8431 ;; This function calls:
  8432 ;;		___awtoft
  8433 ;;		___ftadd
  8434 ;;		___ftdiv
  8435 ;;		___ftmul
  8436 ;;		___fttol
  8437 ;; This function is called by:
  8438 ;;		_setDimmerLights_AdjRF
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _getPercentValue
  8444  10A7                     _getPercentValue:	
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8448                           ;getPercentValue@value stored from wreg
  8449  10A7  0020               	movlb	0	; select bank0
  8450  10A8  00DB               	movwf	getPercentValue@value
  8451                           
  8452                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8453  10A9  3000               	movlw	0
  8454  10AA  00DC               	movwf	getPercentValue@i
  8455  10AB  3054               	movlw	84
  8456  10AC  00DD               	movwf	getPercentValue@i+1
  8457  10AD  3042               	movlw	66
  8458  10AE  00DE               	movwf	getPercentValue@i+2
  8459                           
  8460                           ;Dimmer_B1.c: 494: i/=100;
  8461  10AF  3000               	movlw	0
  8462  10B0  00AE               	movwf	___ftdiv@f2
  8463  10B1  30C8               	movlw	200
  8464  10B2  00AF               	movwf	___ftdiv@f2+1
  8465  10B3  3042               	movlw	66
  8466  10B4  00B0               	movwf	___ftdiv@f2+2
  8467  10B5  085C               	movf	getPercentValue@i,w
  8468  10B6  00B1               	movwf	___ftdiv@f1
  8469  10B7  085D               	movf	getPercentValue@i+1,w
  8470  10B8  00B2               	movwf	___ftdiv@f1+1
  8471  10B9  085E               	movf	getPercentValue@i+2,w
  8472  10BA  00B3               	movwf	___ftdiv@f1+2
  8473  10BB  318A  2271  3190   	fcall	___ftdiv
  8474  10BE  0020               	movlb	0	; select bank0
  8475  10BF  082E               	movf	?___ftdiv,w
  8476  10C0  00DC               	movwf	getPercentValue@i
  8477  10C1  082F               	movf	?___ftdiv+1,w
  8478  10C2  00DD               	movwf	getPercentValue@i+1
  8479  10C3  0830               	movf	?___ftdiv+2,w
  8480  10C4  00DE               	movwf	getPercentValue@i+2
  8481                           
  8482                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8483  10C5  085B               	movf	getPercentValue@value,w
  8484  10C6  00D9               	movwf	??_getPercentValue
  8485  10C7  01DA               	clrf	??_getPercentValue+1
  8486  10C8  09D9               	comf	??_getPercentValue,f
  8487  10C9  09DA               	comf	??_getPercentValue+1,f
  8488  10CA  0AD9               	incf	??_getPercentValue,f
  8489  10CB  1903               	skipnz
  8490  10CC  0ADA               	incf	??_getPercentValue+1,f
  8491  10CD  0859               	movf	??_getPercentValue,w
  8492  10CE  3E64               	addlw	100
  8493  10CF  00A8               	movwf	___awtoft@c
  8494  10D0  3000               	movlw	0
  8495  10D1  3D5A               	addwfc	??_getPercentValue+1,w
  8496  10D2  00A9               	movwf	___awtoft@c+1
  8497  10D3  3198  20F6  3190   	fcall	___awtoft
  8498  10D6  0020               	movlb	0	; select bank0
  8499  10D7  0828               	movf	?___awtoft,w
  8500  10D8  00B1               	movwf	___ftmul@f2
  8501  10D9  0829               	movf	?___awtoft+1,w
  8502  10DA  00B2               	movwf	___ftmul@f2+1
  8503  10DB  082A               	movf	?___awtoft+2,w
  8504  10DC  00B3               	movwf	___ftmul@f2+2
  8505  10DD  085C               	movf	getPercentValue@i,w
  8506  10DE  00AE               	movwf	___ftmul@f1
  8507  10DF  085D               	movf	getPercentValue@i+1,w
  8508  10E0  00AF               	movwf	___ftmul@f1+1
  8509  10E1  085E               	movf	getPercentValue@i+2,w
  8510  10E2  00B0               	movwf	___ftmul@f1+2
  8511  10E3  3187  273C  3190   	fcall	___ftmul
  8512  10E6  0020               	movlb	0	; select bank0
  8513  10E7  082E               	movf	?___ftmul,w
  8514  10E8  00C1               	movwf	___ftadd@f2
  8515  10E9  082F               	movf	?___ftmul+1,w
  8516  10EA  00C2               	movwf	___ftadd@f2+1
  8517  10EB  0830               	movf	?___ftmul+2,w
  8518  10EC  00C3               	movwf	___ftadd@f2+2
  8519  10ED  3000               	movlw	0
  8520  10EE  00BE               	movwf	___ftadd@f1
  8521  10EF  3086               	movlw	134
  8522  10F0  00BF               	movwf	___ftadd@f1+1
  8523  10F1  3042               	movlw	66
  8524  10F2  00C0               	movwf	___ftadd@f1+2
  8525  10F3  318C  24D9  3190   	fcall	___ftadd
  8526  10F6  0020               	movlb	0	; select bank0
  8527  10F7  083E               	movf	?___ftadd,w
  8528  10F8  00CB               	movwf	___fttol@f1
  8529  10F9  083F               	movf	?___ftadd+1,w
  8530  10FA  00CC               	movwf	___fttol@f1+1
  8531  10FB  0840               	movf	?___ftadd+2,w
  8532  10FC  00CD               	movwf	___fttol@f1+2
  8533  10FD  3196  26F1         	fcall	___fttol
  8534  10FF  0020               	movlb	0	; select bank0
  8535  1100  084B               	movf	?___fttol,w
  8536  1101  0008               	return
  8537  1102                     __end_of_getPercentValue:	
  8538                           
  8539                           	psect	text35
  8540  073C                     __ptext35:	
  8541 ;; *************** function ___ftmul *****************
  8542 ;; Defined at:
  8543 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  f1              3   14[BANK0 ] float 
  8546 ;;  f2              3   17[BANK0 ] float 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8549 ;;  sign            1   29[BANK0 ] unsigned char 
  8550 ;;  cntr            1   28[BANK0 ] unsigned char 
  8551 ;;  exp             1   24[BANK0 ] unsigned char 
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  3   14[BANK0 ] float 
  8554 ;; Registers used:
  8555 ;;		wreg, status,2, status,0, pclath, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8561 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;Total ram usage:       16 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    5
  8568 ;; This function calls:
  8569 ;;		___ftpack
  8570 ;; This function is called by:
  8571 ;;		_getPercentValue
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           
  8576                           ;psect for function ___ftmul
  8577  073C                     ___ftmul:	
  8578                           
  8579                           ;incstack = 0
  8580                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8581  073C  0020               	movlb	0	; select bank0
  8582  073D  082E               	movf	___ftmul@f1,w
  8583  073E  00B4               	movwf	??___ftmul
  8584  073F  082F               	movf	___ftmul@f1+1,w
  8585  0740  00B5               	movwf	??___ftmul+1
  8586  0741  0830               	movf	___ftmul@f1+2,w
  8587  0742  00B6               	movwf	??___ftmul+2
  8588  0743  1003               	clrc
  8589  0744  0D35               	rlf	??___ftmul+1,w
  8590  0745  0D36               	rlf	??___ftmul+2,w
  8591  0746  00B7               	movwf	??___ftmul+3
  8592  0747  0837               	movf	??___ftmul+3,w
  8593  0748  00B8               	movwf	___ftmul@exp
  8594  0749  08B8               	movf	___ftmul@exp,f
  8595  074A  1D03               	skipz
  8596  074B  2F53               	goto	l6046
  8597  074C  3000               	movlw	0
  8598  074D  00AE               	movwf	?___ftmul
  8599  074E  3000               	movlw	0
  8600  074F  00AF               	movwf	?___ftmul+1
  8601  0750  3000               	movlw	0
  8602  0751  00B0               	movwf	?___ftmul+2
  8603  0752  0008               	return
  8604  0753                     l6046:	
  8605  0753  0831               	movf	___ftmul@f2,w
  8606  0754  00B4               	movwf	??___ftmul
  8607  0755  0832               	movf	___ftmul@f2+1,w
  8608  0756  00B5               	movwf	??___ftmul+1
  8609  0757  0833               	movf	___ftmul@f2+2,w
  8610  0758  00B6               	movwf	??___ftmul+2
  8611  0759  1003               	clrc
  8612  075A  0D35               	rlf	??___ftmul+1,w
  8613  075B  0D36               	rlf	??___ftmul+2,w
  8614  075C  00B7               	movwf	??___ftmul+3
  8615  075D  0837               	movf	??___ftmul+3,w
  8616  075E  00BD               	movwf	___ftmul@sign
  8617  075F  08BD               	movf	___ftmul@sign,f
  8618  0760  1D03               	skipz
  8619  0761  2F69               	goto	l6052
  8620  0762  3000               	movlw	0
  8621  0763  00AE               	movwf	?___ftmul
  8622  0764  3000               	movlw	0
  8623  0765  00AF               	movwf	?___ftmul+1
  8624  0766  3000               	movlw	0
  8625  0767  00B0               	movwf	?___ftmul+2
  8626  0768  0008               	return
  8627  0769                     l6052:	
  8628  0769  083D               	movf	___ftmul@sign,w
  8629  076A  3E7B               	addlw	123
  8630  076B  00B4               	movwf	??___ftmul
  8631  076C  0834               	movf	??___ftmul,w
  8632  076D  07B8               	addwf	___ftmul@exp,f
  8633  076E  082E               	movf	___ftmul@f1,w
  8634  076F  00B4               	movwf	??___ftmul
  8635  0770  082F               	movf	___ftmul@f1+1,w
  8636  0771  00B5               	movwf	??___ftmul+1
  8637  0772  0830               	movf	___ftmul@f1+2,w
  8638  0773  00B6               	movwf	??___ftmul+2
  8639  0774  3010               	movlw	16
  8640  0775                     u4205:	
  8641  0775  36B6               	lsrf	??___ftmul+2,f
  8642  0776  0CB5               	rrf	??___ftmul+1,f
  8643  0777  0CB4               	rrf	??___ftmul,f
  8644  0778  0B89               	decfsz	9,f
  8645  0779  2F75               	goto	u4205
  8646  077A  0834               	movf	??___ftmul,w
  8647  077B  00B7               	movwf	??___ftmul+3
  8648  077C  0837               	movf	??___ftmul+3,w
  8649  077D  00BD               	movwf	___ftmul@sign
  8650  077E  0831               	movf	___ftmul@f2,w
  8651  077F  00B4               	movwf	??___ftmul
  8652  0780  0832               	movf	___ftmul@f2+1,w
  8653  0781  00B5               	movwf	??___ftmul+1
  8654  0782  0833               	movf	___ftmul@f2+2,w
  8655  0783  00B6               	movwf	??___ftmul+2
  8656  0784  3010               	movlw	16
  8657  0785                     u4215:	
  8658  0785  36B6               	lsrf	??___ftmul+2,f
  8659  0786  0CB5               	rrf	??___ftmul+1,f
  8660  0787  0CB4               	rrf	??___ftmul,f
  8661  0788  0B89               	decfsz	9,f
  8662  0789  2F85               	goto	u4215
  8663  078A  0834               	movf	??___ftmul,w
  8664  078B  00B7               	movwf	??___ftmul+3
  8665  078C  0837               	movf	??___ftmul+3,w
  8666  078D  06BD               	xorwf	___ftmul@sign,f
  8667  078E  3080               	movlw	128
  8668  078F  00B4               	movwf	??___ftmul
  8669  0790  0834               	movf	??___ftmul,w
  8670  0791  05BD               	andwf	___ftmul@sign,f
  8671  0792  17AF               	bsf	___ftmul@f1+1,7
  8672  0793  17B2               	bsf	___ftmul@f2+1,7
  8673  0794  30FF               	movlw	255
  8674  0795  05B1               	andwf	___ftmul@f2,f
  8675  0796  30FF               	movlw	255
  8676  0797  05B2               	andwf	___ftmul@f2+1,f
  8677  0798  3000               	movlw	0
  8678  0799  05B3               	andwf	___ftmul@f2+2,f
  8679  079A  3000               	movlw	0
  8680  079B  00B9               	movwf	___ftmul@f3_as_product
  8681  079C  3000               	movlw	0
  8682  079D  00BA               	movwf	___ftmul@f3_as_product+1
  8683  079E  3000               	movlw	0
  8684  079F  00BB               	movwf	___ftmul@f3_as_product+2
  8685  07A0  3007               	movlw	7
  8686  07A1  00B4               	movwf	??___ftmul
  8687  07A2  0834               	movf	??___ftmul,w
  8688  07A3  00BC               	movwf	___ftmul@cntr
  8689  07A4                     l6064:	
  8690  07A4  1C2E               	btfss	___ftmul@f1,0
  8691  07A5  2FAC               	goto	l6068
  8692  07A6  0831               	movf	___ftmul@f2,w
  8693  07A7  07B9               	addwf	___ftmul@f3_as_product,f
  8694  07A8  0832               	movf	___ftmul@f2+1,w
  8695  07A9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8696  07AA  0833               	movf	___ftmul@f2+2,w
  8697  07AB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8698  07AC                     l6068:	
  8699  07AC  3001               	movlw	1
  8700  07AD                     u4235:	
  8701  07AD  36B0               	lsrf	___ftmul@f1+2,f
  8702  07AE  0CAF               	rrf	___ftmul@f1+1,f
  8703  07AF  0CAE               	rrf	___ftmul@f1,f
  8704  07B0  0B89               	decfsz	9,f
  8705  07B1  2FAD               	goto	u4235
  8706  07B2  3001               	movlw	1
  8707  07B3                     u4245:	
  8708  07B3  35B1               	lslf	___ftmul@f2,f
  8709  07B4  0DB2               	rlf	___ftmul@f2+1,f
  8710  07B5  0DB3               	rlf	___ftmul@f2+2,f
  8711  07B6  0B89               	decfsz	9,f
  8712  07B7  2FB3               	goto	u4245
  8713  07B8  3001               	movlw	1
  8714  07B9  02BC               	subwf	___ftmul@cntr,f
  8715  07BA  1D03               	btfss	3,2
  8716  07BB  2FA4               	goto	l6064
  8717  07BC  3009               	movlw	9
  8718  07BD  00B4               	movwf	??___ftmul
  8719  07BE  0834               	movf	??___ftmul,w
  8720  07BF  00BC               	movwf	___ftmul@cntr
  8721  07C0                     l6076:	
  8722  07C0  1C2E               	btfss	___ftmul@f1,0
  8723  07C1  2FC8               	goto	l6080
  8724  07C2  0831               	movf	___ftmul@f2,w
  8725  07C3  07B9               	addwf	___ftmul@f3_as_product,f
  8726  07C4  0832               	movf	___ftmul@f2+1,w
  8727  07C5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8728  07C6  0833               	movf	___ftmul@f2+2,w
  8729  07C7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8730  07C8                     l6080:	
  8731  07C8  3001               	movlw	1
  8732  07C9                     u4275:	
  8733  07C9  36B0               	lsrf	___ftmul@f1+2,f
  8734  07CA  0CAF               	rrf	___ftmul@f1+1,f
  8735  07CB  0CAE               	rrf	___ftmul@f1,f
  8736  07CC  0B89               	decfsz	9,f
  8737  07CD  2FC9               	goto	u4275
  8738  07CE  3001               	movlw	1
  8739  07CF                     u4285:	
  8740  07CF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8741  07D0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8742  07D1  0CB9               	rrf	___ftmul@f3_as_product,f
  8743  07D2  0B89               	decfsz	9,f
  8744  07D3  2FCF               	goto	u4285
  8745  07D4  3001               	movlw	1
  8746  07D5  02BC               	subwf	___ftmul@cntr,f
  8747  07D6  1D03               	btfss	3,2
  8748  07D7  2FC0               	goto	l6076
  8749  07D8  0839               	movf	___ftmul@f3_as_product,w
  8750  07D9  00A0               	movwf	___ftpack@arg
  8751  07DA  083A               	movf	___ftmul@f3_as_product+1,w
  8752  07DB  00A1               	movwf	___ftpack@arg+1
  8753  07DC  083B               	movf	___ftmul@f3_as_product+2,w
  8754  07DD  00A2               	movwf	___ftpack@arg+2
  8755  07DE  0838               	movf	___ftmul@exp,w
  8756  07DF  00B4               	movwf	??___ftmul
  8757  07E0  0834               	movf	??___ftmul,w
  8758  07E1  00A3               	movwf	___ftpack@exp
  8759  07E2  083D               	movf	___ftmul@sign,w
  8760  07E3  00B5               	movwf	??___ftmul+1
  8761  07E4  0835               	movf	??___ftmul+1,w
  8762  07E5  00A4               	movwf	___ftpack@sign
  8763  07E6  3191  21BC         	fcall	___ftpack
  8764  07E8  0020               	movlb	0	; select bank0
  8765  07E9  0820               	movf	?___ftpack,w
  8766  07EA  00AE               	movwf	?___ftmul
  8767  07EB  0821               	movf	?___ftpack+1,w
  8768  07EC  00AF               	movwf	?___ftmul+1
  8769  07ED  0822               	movf	?___ftpack+2,w
  8770  07EE  00B0               	movwf	?___ftmul+2
  8771  07EF  0008               	return
  8772  07F0                     __end_of___ftmul:	
  8773                           
  8774                           	psect	text36
  8775  0CD9                     __ptext36:	
  8776 ;; *************** function ___ftadd *****************
  8777 ;; Defined at:
  8778 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  f1              3   30[BANK0 ] float 
  8781 ;;  f2              3   33[BANK0 ] float 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  exp1            1   42[BANK0 ] unsigned char 
  8784 ;;  exp2            1   41[BANK0 ] unsigned char 
  8785 ;;  sign            1   40[BANK0 ] unsigned char 
  8786 ;; Return value:  Size  Location     Type
  8787 ;;                  3   30[BANK0 ] float 
  8788 ;; Registers used:
  8789 ;;		wreg, status,2, status,0, pclath, cstack
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8795 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;Total ram usage:       13 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    5
  8802 ;; This function calls:
  8803 ;;		___ftpack
  8804 ;; This function is called by:
  8805 ;;		_getPercentValue
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           
  8810                           ;psect for function ___ftadd
  8811  0CD9                     ___ftadd:	
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8815  0CD9  0020               	movlb	0	; select bank0
  8816  0CDA  083E               	movf	___ftadd@f1,w
  8817  0CDB  00C4               	movwf	??___ftadd
  8818  0CDC  083F               	movf	___ftadd@f1+1,w
  8819  0CDD  00C5               	movwf	??___ftadd+1
  8820  0CDE  0840               	movf	___ftadd@f1+2,w
  8821  0CDF  00C6               	movwf	??___ftadd+2
  8822  0CE0  1003               	clrc
  8823  0CE1  0D45               	rlf	??___ftadd+1,w
  8824  0CE2  0D46               	rlf	??___ftadd+2,w
  8825  0CE3  00C7               	movwf	??___ftadd+3
  8826  0CE4  0847               	movf	??___ftadd+3,w
  8827  0CE5  00CA               	movwf	___ftadd@exp1
  8828  0CE6  0841               	movf	___ftadd@f2,w
  8829  0CE7  00C4               	movwf	??___ftadd
  8830  0CE8  0842               	movf	___ftadd@f2+1,w
  8831  0CE9  00C5               	movwf	??___ftadd+1
  8832  0CEA  0843               	movf	___ftadd@f2+2,w
  8833  0CEB  00C6               	movwf	??___ftadd+2
  8834  0CEC  1003               	clrc
  8835  0CED  0D45               	rlf	??___ftadd+1,w
  8836  0CEE  0D46               	rlf	??___ftadd+2,w
  8837  0CEF  00C7               	movwf	??___ftadd+3
  8838  0CF0  0847               	movf	??___ftadd+3,w
  8839  0CF1  00C9               	movwf	___ftadd@exp2
  8840  0CF2  084A               	movf	___ftadd@exp1,w
  8841  0CF3  1903               	btfsc	3,2
  8842  0CF4  2D01               	goto	l5934
  8843  0CF5  0849               	movf	___ftadd@exp2,w
  8844  0CF6  024A               	subwf	___ftadd@exp1,w
  8845  0CF7  1803               	skipnc
  8846  0CF8  2D08               	goto	l5938
  8847  0CF9  034A               	decf	___ftadd@exp1,w
  8848  0CFA  3AFF               	xorlw	255
  8849  0CFB  0749               	addwf	___ftadd@exp2,w
  8850  0CFC  00C4               	movwf	??___ftadd
  8851  0CFD  3019               	movlw	25
  8852  0CFE  0244               	subwf	??___ftadd,w
  8853  0CFF  1C03               	skipc
  8854  0D00  2D08               	goto	l5938
  8855  0D01                     l5934:	
  8856  0D01  0841               	movf	___ftadd@f2,w
  8857  0D02  00BE               	movwf	?___ftadd
  8858  0D03  0842               	movf	___ftadd@f2+1,w
  8859  0D04  00BF               	movwf	?___ftadd+1
  8860  0D05  0843               	movf	___ftadd@f2+2,w
  8861  0D06  00C0               	movwf	?___ftadd+2
  8862  0D07  0008               	return
  8863  0D08                     l5938:	
  8864  0D08  0849               	movf	___ftadd@exp2,w
  8865  0D09  1903               	btfsc	3,2
  8866  0D0A  0008               	return
  8867  0D0B  084A               	movf	___ftadd@exp1,w
  8868  0D0C  0249               	subwf	___ftadd@exp2,w
  8869  0D0D  1803               	skipnc
  8870  0D0E  2D17               	goto	l5944
  8871  0D0F  0349               	decf	___ftadd@exp2,w
  8872  0D10  3AFF               	xorlw	255
  8873  0D11  074A               	addwf	___ftadd@exp1,w
  8874  0D12  00C4               	movwf	??___ftadd
  8875  0D13  3019               	movlw	25
  8876  0D14  0244               	subwf	??___ftadd,w
  8877  0D15  1803               	btfsc	3,0
  8878  0D16  0008               	return
  8879  0D17                     l5944:	
  8880  0D17  3006               	movlw	6
  8881  0D18  00C4               	movwf	??___ftadd
  8882  0D19  0844               	movf	??___ftadd,w
  8883  0D1A  00C8               	movwf	___ftadd@sign
  8884  0D1B  1BC0               	btfsc	___ftadd@f1+2,7
  8885  0D1C  17C8               	bsf	___ftadd@sign,7
  8886  0D1D  1BC3               	btfsc	___ftadd@f2+2,7
  8887  0D1E  1748               	bsf	___ftadd@sign,6
  8888  0D1F  17BF               	bsf	___ftadd@f1+1,7
  8889  0D20  30FF               	movlw	255
  8890  0D21  05BE               	andwf	___ftadd@f1,f
  8891  0D22  30FF               	movlw	255
  8892  0D23  05BF               	andwf	___ftadd@f1+1,f
  8893  0D24  3000               	movlw	0
  8894  0D25  05C0               	andwf	___ftadd@f1+2,f
  8895  0D26  17C2               	bsf	___ftadd@f2+1,7
  8896  0D27  30FF               	movlw	255
  8897  0D28  05C1               	andwf	___ftadd@f2,f
  8898  0D29  30FF               	movlw	255
  8899  0D2A  05C2               	andwf	___ftadd@f2+1,f
  8900  0D2B  3000               	movlw	0
  8901  0D2C  05C3               	andwf	___ftadd@f2+2,f
  8902  0D2D  0849               	movf	___ftadd@exp2,w
  8903  0D2E  024A               	subwf	___ftadd@exp1,w
  8904  0D2F  1803               	skipnc
  8905  0D30  2D53               	goto	l5966
  8906  0D31                     l5956:	
  8907  0D31  3001               	movlw	1
  8908  0D32                     u3965:	
  8909  0D32  35C1               	lslf	___ftadd@f2,f
  8910  0D33  0DC2               	rlf	___ftadd@f2+1,f
  8911  0D34  0DC3               	rlf	___ftadd@f2+2,f
  8912  0D35  0B89               	decfsz	9,f
  8913  0D36  2D32               	goto	u3965
  8914  0D37  3001               	movlw	1
  8915  0D38  02C9               	subwf	___ftadd@exp2,f
  8916  0D39  0849               	movf	___ftadd@exp2,w
  8917  0D3A  064A               	xorwf	___ftadd@exp1,w
  8918  0D3B  1903               	skipnz
  8919  0D3C  2D4E               	goto	l5964
  8920  0D3D  3001               	movlw	1
  8921  0D3E  02C8               	subwf	___ftadd@sign,f
  8922  0D3F  0848               	movf	___ftadd@sign,w
  8923  0D40  3907               	andlw	7
  8924  0D41  1903               	btfsc	3,2
  8925  0D42  2D4E               	goto	l5964
  8926  0D43  2D31               	goto	l5956
  8927  0D44                     l5962:	
  8928  0D44  3001               	movlw	1
  8929  0D45                     u3995:	
  8930  0D45  36C0               	lsrf	___ftadd@f1+2,f
  8931  0D46  0CBF               	rrf	___ftadd@f1+1,f
  8932  0D47  0CBE               	rrf	___ftadd@f1,f
  8933  0D48  0B89               	decfsz	9,f
  8934  0D49  2D45               	goto	u3995
  8935  0D4A  3001               	movlw	1
  8936  0D4B  00C4               	movwf	??___ftadd
  8937  0D4C  0844               	movf	??___ftadd,w
  8938  0D4D  07CA               	addwf	___ftadd@exp1,f
  8939  0D4E                     l5964:	
  8940  0D4E  084A               	movf	___ftadd@exp1,w
  8941  0D4F  0649               	xorwf	___ftadd@exp2,w
  8942  0D50  1903               	btfsc	3,2
  8943  0D51  2D78               	goto	l3301
  8944  0D52  2D44               	goto	l5962
  8945  0D53                     l5966:	
  8946  0D53  084A               	movf	___ftadd@exp1,w
  8947  0D54  0249               	subwf	___ftadd@exp2,w
  8948  0D55  1803               	skipnc
  8949  0D56  2D78               	goto	l3301
  8950  0D57                     l5968:	
  8951  0D57  3001               	movlw	1
  8952  0D58                     u4025:	
  8953  0D58  35BE               	lslf	___ftadd@f1,f
  8954  0D59  0DBF               	rlf	___ftadd@f1+1,f
  8955  0D5A  0DC0               	rlf	___ftadd@f1+2,f
  8956  0D5B  0B89               	decfsz	9,f
  8957  0D5C  2D58               	goto	u4025
  8958  0D5D  3001               	movlw	1
  8959  0D5E  02CA               	subwf	___ftadd@exp1,f
  8960  0D5F  0849               	movf	___ftadd@exp2,w
  8961  0D60  064A               	xorwf	___ftadd@exp1,w
  8962  0D61  1903               	skipnz
  8963  0D62  2D74               	goto	l5976
  8964  0D63  3001               	movlw	1
  8965  0D64  02C8               	subwf	___ftadd@sign,f
  8966  0D65  0848               	movf	___ftadd@sign,w
  8967  0D66  3907               	andlw	7
  8968  0D67  1903               	btfsc	3,2
  8969  0D68  2D74               	goto	l5976
  8970  0D69  2D57               	goto	l5968
  8971  0D6A                     l5974:	
  8972  0D6A  3001               	movlw	1
  8973  0D6B                     u4055:	
  8974  0D6B  36C3               	lsrf	___ftadd@f2+2,f
  8975  0D6C  0CC2               	rrf	___ftadd@f2+1,f
  8976  0D6D  0CC1               	rrf	___ftadd@f2,f
  8977  0D6E  0B89               	decfsz	9,f
  8978  0D6F  2D6B               	goto	u4055
  8979  0D70  3001               	movlw	1
  8980  0D71  00C4               	movwf	??___ftadd
  8981  0D72  0844               	movf	??___ftadd,w
  8982  0D73  07C9               	addwf	___ftadd@exp2,f
  8983  0D74                     l5976:	
  8984  0D74  084A               	movf	___ftadd@exp1,w
  8985  0D75  0649               	xorwf	___ftadd@exp2,w
  8986  0D76  1D03               	skipz
  8987  0D77  2D6A               	goto	l5974
  8988  0D78                     l3301:	
  8989  0D78  1FC8               	btfss	___ftadd@sign,7
  8990  0D79  2D8A               	goto	l5980
  8991  0D7A  30FF               	movlw	255
  8992  0D7B  06BE               	xorwf	___ftadd@f1,f
  8993  0D7C  30FF               	movlw	255
  8994  0D7D  06BF               	xorwf	___ftadd@f1+1,f
  8995  0D7E  30FF               	movlw	255
  8996  0D7F  06C0               	xorwf	___ftadd@f1+2,f
  8997  0D80  3001               	movlw	1
  8998  0D81  07BE               	addwf	___ftadd@f1,f
  8999  0D82  3000               	movlw	0
  9000  0D83  1803               	skipnc
  9001  0D84  3001               	movlw	1
  9002  0D85  07BF               	addwf	___ftadd@f1+1,f
  9003  0D86  3000               	movlw	0
  9004  0D87  1803               	skipnc
  9005  0D88  3001               	movlw	1
  9006  0D89  07C0               	addwf	___ftadd@f1+2,f
  9007  0D8A                     l5980:	
  9008  0D8A  1F48               	btfss	___ftadd@sign,6
  9009  0D8B  2D9C               	goto	l5984
  9010  0D8C  30FF               	movlw	255
  9011  0D8D  06C1               	xorwf	___ftadd@f2,f
  9012  0D8E  30FF               	movlw	255
  9013  0D8F  06C2               	xorwf	___ftadd@f2+1,f
  9014  0D90  30FF               	movlw	255
  9015  0D91  06C3               	xorwf	___ftadd@f2+2,f
  9016  0D92  3001               	movlw	1
  9017  0D93  07C1               	addwf	___ftadd@f2,f
  9018  0D94  3000               	movlw	0
  9019  0D95  1803               	skipnc
  9020  0D96  3001               	movlw	1
  9021  0D97  07C2               	addwf	___ftadd@f2+1,f
  9022  0D98  3000               	movlw	0
  9023  0D99  1803               	skipnc
  9024  0D9A  3001               	movlw	1
  9025  0D9B  07C3               	addwf	___ftadd@f2+2,f
  9026  0D9C                     l5984:	
  9027  0D9C  01C8               	clrf	___ftadd@sign
  9028  0D9D  083E               	movf	___ftadd@f1,w
  9029  0D9E  07C1               	addwf	___ftadd@f2,f
  9030  0D9F  083F               	movf	___ftadd@f1+1,w
  9031  0DA0  3DC2               	addwfc	___ftadd@f2+1,f
  9032  0DA1  0840               	movf	___ftadd@f1+2,w
  9033  0DA2  3DC3               	addwfc	___ftadd@f2+2,f
  9034  0DA3  1FC3               	btfss	___ftadd@f2+2,7
  9035  0DA4  2DB7               	goto	l5994
  9036  0DA5  30FF               	movlw	255
  9037  0DA6  06C1               	xorwf	___ftadd@f2,f
  9038  0DA7  30FF               	movlw	255
  9039  0DA8  06C2               	xorwf	___ftadd@f2+1,f
  9040  0DA9  30FF               	movlw	255
  9041  0DAA  06C3               	xorwf	___ftadd@f2+2,f
  9042  0DAB  3001               	movlw	1
  9043  0DAC  07C1               	addwf	___ftadd@f2,f
  9044  0DAD  3000               	movlw	0
  9045  0DAE  1803               	skipnc
  9046  0DAF  3001               	movlw	1
  9047  0DB0  07C2               	addwf	___ftadd@f2+1,f
  9048  0DB1  3000               	movlw	0
  9049  0DB2  1803               	skipnc
  9050  0DB3  3001               	movlw	1
  9051  0DB4  07C3               	addwf	___ftadd@f2+2,f
  9052  0DB5  01C8               	clrf	___ftadd@sign
  9053  0DB6  0AC8               	incf	___ftadd@sign,f
  9054  0DB7                     l5994:	
  9055  0DB7  0841               	movf	___ftadd@f2,w
  9056  0DB8  00A0               	movwf	___ftpack@arg
  9057  0DB9  0842               	movf	___ftadd@f2+1,w
  9058  0DBA  00A1               	movwf	___ftpack@arg+1
  9059  0DBB  0843               	movf	___ftadd@f2+2,w
  9060  0DBC  00A2               	movwf	___ftpack@arg+2
  9061  0DBD  084A               	movf	___ftadd@exp1,w
  9062  0DBE  00C4               	movwf	??___ftadd
  9063  0DBF  0844               	movf	??___ftadd,w
  9064  0DC0  00A3               	movwf	___ftpack@exp
  9065  0DC1  0848               	movf	___ftadd@sign,w
  9066  0DC2  00C5               	movwf	??___ftadd+1
  9067  0DC3  0845               	movf	??___ftadd+1,w
  9068  0DC4  00A4               	movwf	___ftpack@sign
  9069  0DC5  3191  21BC         	fcall	___ftpack
  9070  0DC7  0020               	movlb	0	; select bank0
  9071  0DC8  0820               	movf	?___ftpack,w
  9072  0DC9  00BE               	movwf	?___ftadd
  9073  0DCA  0821               	movf	?___ftpack+1,w
  9074  0DCB  00BF               	movwf	?___ftadd+1
  9075  0DCC  0822               	movf	?___ftpack+2,w
  9076  0DCD  00C0               	movwf	?___ftadd+2
  9077  0DCE  0008               	return
  9078  0DCF                     __end_of___ftadd:	
  9079                           
  9080                           	psect	text37
  9081  19C9                     __ptext37:	
  9082 ;; *************** function _RF_RxDisable *****************
  9083 ;; Defined at:
  9084 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  rf              1    wreg     unsigned char 
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;  rf              1    4[BANK0 ] unsigned char 
  9089 ;; Return value:  Size  Location     Type
  9090 ;;		None               void
  9091 ;; Registers used:
  9092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;Total ram usage:        1 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    6
  9105 ;; This function calls:
  9106 ;;		_CC2500_WriteCommand
  9107 ;;		_RfPointSelect
  9108 ;;		_setINT_GO
  9109 ;; This function is called by:
  9110 ;;		_setRF_Main
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           
  9115                           ;psect for function _RF_RxDisable
  9116  19C9                     _RF_RxDisable:	
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9120                           ;RF_RxDisable@rf stored from wreg
  9121  19C9  0020               	movlb	0	; select bank0
  9122  19CA  00A4               	movwf	RF_RxDisable@rf
  9123                           
  9124                           ;RF_Control_B1.c: 201: RfPointSelect(rf);
  9125  19CB  0824               	movf	RF_RxDisable@rf,w
  9126  19CC  31A5  2528  3199   	fcall	_RfPointSelect
  9127                           
  9128                           ;RF_Control_B1.c: 203: if(RF->RxStatus)
  9129  19CF  087B               	movf	_RF,w
  9130  19D0  0086               	movwf	6
  9131  19D1  0187               	clrf	7
  9132  19D2  1D81               	btfss	1,3
  9133  19D3  0008               	return
  9134                           
  9135                           ;RF_Control_B1.c: 204: {
  9136                           ;RF_Control_B1.c: 205: RF->RxStatus=0;
  9137  19D4  087B               	movf	_RF,w
  9138  19D5  0086               	movwf	6
  9139  19D6  0187               	clrf	7
  9140  19D7  1181               	bcf	1,3
  9141                           
  9142                           ;RF_Control_B1.c: 206: RF->ReceiveGO=0;
  9143  19D8  087B               	movf	_RF,w
  9144  19D9  0086               	movwf	6
  9145  19DA  0187               	clrf	7
  9146  19DB  1081               	bcf	1,1
  9147                           
  9148                           ;RF_Control_B1.c: 207: RF->DebounceTime=0;
  9149  19DC  0A7B               	incf	_RF,w
  9150  19DD  0086               	movwf	6
  9151  19DE  0187               	clrf	7
  9152  19DF  0181               	clrf	1
  9153                           
  9154                           ;RF_Control_B1.c: 208: RF->Debounce=0;
  9155  19E0  087B               	movf	_RF,w
  9156  19E1  0086               	movwf	6
  9157  19E2  0187               	clrf	7
  9158  19E3  1281               	bcf	1,5
  9159                           
  9160                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x36);
  9161  19E4  3036               	movlw	54
  9162  19E5  31A6  2649  3199   	fcall	_CC2500_WriteCommand
  9163                           
  9164                           ;RF_Control_B1.c: 210: CC2500_WriteCommand(0x3A);
  9165  19E8  303A               	movlw	58
  9166  19E9  31A6  2649  3199   	fcall	_CC2500_WriteCommand
  9167                           
  9168                           ;RF_Control_B1.c: 211: setINT_GO(0);
  9169  19EC  3000               	movlw	0
  9170  19ED  31A4  24E0         	fcall	_setINT_GO
  9171  19EF  0008               	return
  9172  19F0                     __end_of_RF_RxDisable:	
  9173                           
  9174                           	psect	text38
  9175  1D9D                     __ptext38:	
  9176 ;; *************** function _CC2500_TxData *****************
  9177 ;; Defined at:
  9178 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;		None
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9183 ;; Return value:  Size  Location     Type
  9184 ;;		None               void
  9185 ;; Registers used:
  9186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;Total ram usage:        2 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    6
  9199 ;; This function calls:
  9200 ;;		_CC2500_WriteByte
  9201 ;;		_CC2500_WriteCommand
  9202 ;; This function is called by:
  9203 ;;		_setRF_Main
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _CC2500_TxData
  9209  1D9D                     _CC2500_TxData:	
  9210                           
  9211                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9212                           ;CC2500_B1.c: 34: RC4=0;
  9213                           
  9214                           ;incstack = 0
  9215                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9216  1D9D  0020               	movlb	0	; select bank0
  9217  1D9E  120E               	bcf	14,4	;volatile
  9218                           
  9219                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9220  1D9F  307F               	movlw	127
  9221  1DA0  00A4               	movwf	??_CC2500_TxData
  9222  1DA1  0824               	movf	??_CC2500_TxData,w
  9223  1DA2  0021               	movlb	1	; select bank1
  9224  1DA3  00BF               	movwf	_SPI0Buffer^(0+128)
  9225  1DA4                     l295:	
  9226                           ;CC2500_B1.c: 36: while(RC2==1);
  9227                           
  9228  1DA4  0020               	movlb	0	; select bank0
  9229  1DA5  190E               	btfsc	14,2	;volatile
  9230  1DA6  2DA4               	goto	l295
  9231                           
  9232                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9233  1DA7  31A7  272F  319D   	fcall	_CC2500_WriteByte
  9234                           
  9235                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9236  1DAA  0021               	movlb	1	; select bank1
  9237  1DAB  0840               	movf	_Tx_Length^(0+128),w
  9238  1DAC  0020               	movlb	0	; select bank0
  9239  1DAD  00A4               	movwf	??_CC2500_TxData
  9240  1DAE  0824               	movf	??_CC2500_TxData,w
  9241  1DAF  0021               	movlb	1	; select bank1
  9242  1DB0  00BF               	movwf	_SPI0Buffer^(0+128)
  9243                           
  9244                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9245  1DB1  31A7  272F  319D   	fcall	_CC2500_WriteByte
  9246                           
  9247                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9248  1DB4  0020               	movlb	0	; select bank0
  9249  1DB5  01A5               	clrf	CC2500_TxData@loop_e
  9250  1DB6                     l6704:	
  9251  1DB6  0021               	movlb	1	; select bank1
  9252  1DB7  0840               	movf	_Tx_Length^(0+128),w
  9253  1DB8  0020               	movlb	0	; select bank0
  9254  1DB9  0225               	subwf	CC2500_TxData@loop_e,w
  9255  1DBA  1803               	btfsc	3,0
  9256  1DBB  2DCE               	goto	l300
  9257                           
  9258                           ;CC2500_B1.c: 41: {
  9259                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9260  1DBC  0825               	movf	CC2500_TxData@loop_e,w
  9261  1DBD  3EA0               	addlw	_RF_Data& (0+255)
  9262  1DBE  0086               	movwf	6
  9263  1DBF  0187               	clrf	7
  9264  1DC0  0801               	movf	1,w
  9265  1DC1  00A4               	movwf	??_CC2500_TxData
  9266  1DC2  0824               	movf	??_CC2500_TxData,w
  9267  1DC3  0021               	movlb	1	; select bank1
  9268  1DC4  00BF               	movwf	_SPI0Buffer^(0+128)
  9269                           
  9270                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9271  1DC5  31A7  272F  319D   	fcall	_CC2500_WriteByte
  9272  1DC8  3001               	movlw	1
  9273  1DC9  0020               	movlb	0	; select bank0
  9274  1DCA  00A4               	movwf	??_CC2500_TxData
  9275  1DCB  0824               	movf	??_CC2500_TxData,w
  9276  1DCC  07A5               	addwf	CC2500_TxData@loop_e,f
  9277  1DCD  2DB6               	goto	l6704
  9278  1DCE                     l300:	
  9279                           
  9280                           ;CC2500_B1.c: 44: }
  9281                           ;CC2500_B1.c: 45: RC4=1;
  9282  1DCE  160E               	bsf	14,4	;volatile
  9283                           
  9284                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9285  1DCF  3035               	movlw	53
  9286  1DD0  31A6  2649  319D   	fcall	_CC2500_WriteCommand
  9287  1DD3                     l301:	
  9288                           ;CC2500_B1.c: 47: while(RB0==0);
  9289                           
  9290  1DD3  0020               	movlb	0	; select bank0
  9291  1DD4  1C0D               	btfss	13,0	;volatile
  9292  1DD5  2DD3               	goto	l301
  9293  1DD6                     l304:	
  9294                           ;CC2500_B1.c: 48: while(RB0==1);
  9295                           
  9296  1DD6  180D               	btfsc	13,0	;volatile
  9297  1DD7  2DD6               	goto	l304
  9298                           
  9299                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9300  1DD8  3036               	movlw	54
  9301  1DD9  31A6  2649  319D   	fcall	_CC2500_WriteCommand
  9302                           
  9303                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9304  1DDC  303B               	movlw	59
  9305  1DDD  31A6  2649         	fcall	_CC2500_WriteCommand
  9306                           
  9307                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9308  1DDF  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9309  1DE0  0008               	return
  9310  1DE1                     __end_of_CC2500_TxData:	
  9311                           
  9312                           	psect	text39
  9313  121D                     __ptext39:	
  9314 ;; *************** function _CC2500_RxData *****************
  9315 ;; Defined at:
  9316 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;		None
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;		None               void
  9323 ;; Registers used:
  9324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;Total ram usage:        2 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    6
  9337 ;; This function calls:
  9338 ;;		_CC2500_ReadByte
  9339 ;;		_CC2500_ReadStatus
  9340 ;;		_CC2500_WriteByte
  9341 ;;		_CC2500_WriteCommand
  9342 ;;		_setRF_RxStatus
  9343 ;; This function is called by:
  9344 ;;		_setRF_Main
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function _CC2500_RxData
  9350  121D                     _CC2500_RxData:	
  9351                           
  9352                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9353                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9354                           
  9355                           ;incstack = 0
  9356                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9357  121D  0020               	movlb	0	; select bank0
  9358  121E  180D               	btfsc	13,0	;volatile
  9359  121F                     l311:	
  9360                           ;CC2500_B1.c: 63: {
  9361                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9362                           
  9363  121F  180D               	btfsc	13,0	;volatile
  9364  1220  2A1F               	goto	l311
  9365                           
  9366                           ;CC2500_B1.c: 65: }
  9367                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9368  1221  303B               	movlw	59
  9369  1222  31A7  27C9  3192   	fcall	_CC2500_ReadStatus
  9370                           
  9371                           ;CC2500_B1.c: 67: if(s_data != 0)
  9372  1225  0021               	movlb	1	; select bank1
  9373  1226  0843               	movf	_s_data^(0+128),w
  9374  1227  1903               	btfsc	3,2
  9375  1228  2A73               	goto	l8658
  9376                           
  9377                           ;CC2500_B1.c: 69: {
  9378                           ;CC2500_B1.c: 70: RC4=0;
  9379  1229  0020               	movlb	0	; select bank0
  9380  122A  120E               	bcf	14,4	;volatile
  9381                           
  9382                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9383  122B  30FF               	movlw	255
  9384  122C  00A4               	movwf	??_CC2500_RxData
  9385  122D  0824               	movf	??_CC2500_RxData,w
  9386  122E  0021               	movlb	1	; select bank1
  9387  122F  00BF               	movwf	_SPI0Buffer^(0+128)
  9388  1230                     l315:	
  9389                           ;CC2500_B1.c: 72: while(RC2==1);
  9390                           
  9391  1230  0020               	movlb	0	; select bank0
  9392  1231  190E               	btfsc	14,2	;volatile
  9393  1232  2A30               	goto	l315
  9394                           
  9395                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9396  1233  31A7  272F  3192   	fcall	_CC2500_WriteByte
  9397                           
  9398                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9399  1236  3198  207C  3192   	fcall	_CC2500_ReadByte
  9400                           
  9401                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9402  1239  0021               	movlb	1	; select bank1
  9403  123A  083F               	movf	_SPI0Buffer^(0+128),w
  9404  123B  0020               	movlb	0	; select bank0
  9405  123C  00A4               	movwf	??_CC2500_RxData
  9406  123D  0824               	movf	??_CC2500_RxData,w
  9407  123E  0021               	movlb	1	; select bank1
  9408  123F  00BE               	movwf	_Rx_Length^(0+128)
  9409                           
  9410                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9411  1240  0020               	movlb	0	; select bank0
  9412  1241  01A5               	clrf	CC2500_RxData@loop_f
  9413  1242                     l8644:	
  9414  1242  0021               	movlb	1	; select bank1
  9415  1243  083E               	movf	_Rx_Length^(0+128),w
  9416  1244  0020               	movlb	0	; select bank0
  9417  1245  0225               	subwf	CC2500_RxData@loop_f,w
  9418  1246  1803               	btfsc	3,0
  9419  1247  2A5A               	goto	l8646
  9420                           
  9421                           ;CC2500_B1.c: 78: {
  9422                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9423  1248  3198  207C  3192   	fcall	_CC2500_ReadByte
  9424                           
  9425                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9426  124B  0021               	movlb	1	; select bank1
  9427  124C  083F               	movf	_SPI0Buffer^(0+128),w
  9428  124D  0020               	movlb	0	; select bank0
  9429  124E  00A4               	movwf	??_CC2500_RxData
  9430  124F  0825               	movf	CC2500_RxData@loop_f,w
  9431  1250  3EA0               	addlw	_RF_Data& (0+255)
  9432  1251  0086               	movwf	6
  9433  1252  0187               	clrf	7
  9434  1253  0824               	movf	??_CC2500_RxData,w
  9435  1254  0081               	movwf	1
  9436  1255  3001               	movlw	1
  9437  1256  00A4               	movwf	??_CC2500_RxData
  9438  1257  0824               	movf	??_CC2500_RxData,w
  9439  1258  07A5               	addwf	CC2500_RxData@loop_f,f
  9440  1259  2A42               	goto	l8644
  9441  125A                     l8646:	
  9442                           
  9443                           ;CC2500_B1.c: 81: }
  9444                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9445  125A  3198  207C  3192   	fcall	_CC2500_ReadByte
  9446                           
  9447                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9448  125D  0021               	movlb	1	; select bank1
  9449  125E  083F               	movf	_SPI0Buffer^(0+128),w
  9450  125F  0020               	movlb	0	; select bank0
  9451  1260  00A4               	movwf	??_CC2500_RxData
  9452  1261  0824               	movf	??_CC2500_RxData,w
  9453  1262  0021               	movlb	1	; select bank1
  9454  1263  00BD               	movwf	_RSSI^(0+128)
  9455                           
  9456                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9457  1264  3198  207C  3192   	fcall	_CC2500_ReadByte
  9458                           
  9459                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9460  1267  0021               	movlb	1	; select bank1
  9461  1268  083F               	movf	_SPI0Buffer^(0+128),w
  9462  1269  0020               	movlb	0	; select bank0
  9463  126A  00A4               	movwf	??_CC2500_RxData
  9464  126B  0824               	movf	??_CC2500_RxData,w
  9465  126C  0021               	movlb	1	; select bank1
  9466  126D  00B7               	movwf	_CRC^(0+128)
  9467                           
  9468                           ;CC2500_B1.c: 86: RC4=1;
  9469  126E  0020               	movlb	0	; select bank0
  9470  126F  160E               	bsf	14,4	;volatile
  9471                           
  9472                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9473  1270  0021               	movlb	1	; select bank1
  9474  1271  1BB7               	btfsc	_CRC^(0+128),7
  9475                           
  9476                           ;CC2500_B1.c: 88: Receive_OK=1;
  9477  1272  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9478  1273                     l8658:	
  9479                           
  9480                           ;CC2500_B1.c: 89: }
  9481                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9482  1273  3036               	movlw	54
  9483  1274  31A6  2649  3192   	fcall	_CC2500_WriteCommand
  9484                           
  9485                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9486  1277  303A               	movlw	58
  9487  1278  31A6  2649  3192   	fcall	_CC2500_WriteCommand
  9488                           
  9489                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9490  127B  0020               	movlb	0	; select bank0
  9491  127C  01A2               	clrf	setRF_RxStatus@command
  9492  127D  3001               	movlw	1
  9493  127E  31A5  25F1         	fcall	_setRF_RxStatus
  9494  1280  0008               	return
  9495  1281                     __end_of_CC2500_RxData:	
  9496                           
  9497                           	psect	text40
  9498  25F1                     __ptext40:	
  9499 ;; *************** function _setRF_RxStatus *****************
  9500 ;; Defined at:
  9501 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  rf              1    wreg     unsigned char 
  9504 ;;  command         1    2[BANK0 ] unsigned char 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  rf              1    3[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        2 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    5
  9523 ;; This function calls:
  9524 ;;		_RfPointSelect
  9525 ;; This function is called by:
  9526 ;;		_CC2500_RxData
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _setRF_RxStatus
  9532  25F1                     _setRF_RxStatus:	
  9533                           
  9534                           ;incstack = 0
  9535                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9536                           ;setRF_RxStatus@rf stored from wreg
  9537  25F1  0020               	movlb	0	; select bank0
  9538  25F2  00A3               	movwf	setRF_RxStatus@rf
  9539                           
  9540                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9541  25F3  0823               	movf	setRF_RxStatus@rf,w
  9542  25F4  31A5  2528         	fcall	_RfPointSelect
  9543                           
  9544                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9545  25F6  087B               	movf	_RF,w
  9546  25F7  0086               	movwf	6
  9547  25F8  0187               	clrf	7
  9548  25F9  0020               	movlb	0	; select bank0
  9549  25FA  0822               	movf	setRF_RxStatus@command,w
  9550  25FB  1181               	bcf	1,3
  9551  25FC  1D03               	skipz
  9552  25FD  1581               	bsf	1,3
  9553  25FE  0008               	return
  9554  25FF                     __end_of_setRF_RxStatus:	
  9555                           
  9556                           	psect	text41
  9557  27C9                     __ptext41:	
  9558 ;; *************** function _CC2500_ReadStatus *****************
  9559 ;; Defined at:
  9560 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;  status_addr     1    wreg     unsigned char 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9565 ;; Return value:  Size  Location     Type
  9566 ;;		None               void
  9567 ;; Registers used:
  9568 ;;		wreg, status,2, status,0, pclath, cstack
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;Total ram usage:        2 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    5
  9581 ;; This function calls:
  9582 ;;		_CC2500_ReadByte
  9583 ;;		_CC2500_WriteByte
  9584 ;; This function is called by:
  9585 ;;		_CC2500_RxData
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           
  9590                           ;psect for function _CC2500_ReadStatus
  9591  27C9                     _CC2500_ReadStatus:	
  9592                           
  9593                           ;incstack = 0
  9594                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9595                           ;CC2500_ReadStatus@status_addr stored from wreg
  9596  27C9  0020               	movlb	0	; select bank0
  9597  27CA  00A3               	movwf	CC2500_ReadStatus@status_addr
  9598                           
  9599                           ;CC2500_B1.c: 269: RC4=0;
  9600  27CB  120E               	bcf	14,4	;volatile
  9601                           
  9602                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9603  27CC  0823               	movf	CC2500_ReadStatus@status_addr,w
  9604  27CD  3EC0               	addlw	192
  9605  27CE  00A2               	movwf	??_CC2500_ReadStatus
  9606  27CF  0822               	movf	??_CC2500_ReadStatus,w
  9607  27D0  0021               	movlb	1	; select bank1
  9608  27D1  00BF               	movwf	_SPI0Buffer^(0+128)
  9609  27D2                     l391:	
  9610                           ;CC2500_B1.c: 272: while(RC2==1);
  9611                           
  9612  27D2  0020               	movlb	0	; select bank0
  9613  27D3  190E               	btfsc	14,2	;volatile
  9614  27D4  2FD2               	goto	l391
  9615                           
  9616                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9617  27D5  31A7  272F  31A7   	fcall	_CC2500_WriteByte
  9618                           
  9619                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9620  27D8  3198  207C         	fcall	_CC2500_ReadByte
  9621                           
  9622                           ;CC2500_B1.c: 276: RC4=1;
  9623  27DA  0020               	movlb	0	; select bank0
  9624  27DB  160E               	bsf	14,4	;volatile
  9625                           
  9626                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9627  27DC  0021               	movlb	1	; select bank1
  9628  27DD  083F               	movf	_SPI0Buffer^(0+128),w
  9629  27DE  0020               	movlb	0	; select bank0
  9630  27DF  00A2               	movwf	??_CC2500_ReadStatus
  9631  27E0  0822               	movf	??_CC2500_ReadStatus,w
  9632  27E1  0021               	movlb	1	; select bank1
  9633  27E2  00C3               	movwf	_s_data^(0+128)
  9634  27E3  0008               	return
  9635  27E4                     __end_of_CC2500_ReadStatus:	
  9636                           
  9637                           	psect	text42
  9638  187C                     __ptext42:	
  9639 ;; *************** function _CC2500_ReadByte *****************
  9640 ;; Defined at:
  9641 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9646 ;; Return value:  Size  Location     Type
  9647 ;;		None               void
  9648 ;; Registers used:
  9649 ;;		wreg, status,2, status,0
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;Total ram usage:        2 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    4
  9662 ;; This function calls:
  9663 ;;		Nothing
  9664 ;; This function is called by:
  9665 ;;		_CC2500_RxData
  9666 ;;		_CC2500_ReadStatus
  9667 ;;		_CC2500_ReadREG
  9668 ;; This function uses a non-reentrant model
  9669 ;;
  9670                           
  9671                           
  9672                           ;psect for function _CC2500_ReadByte
  9673  187C                     _CC2500_ReadByte:	
  9674                           
  9675                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9676                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9680  187C  0020               	movlb	0	; select bank0
  9681  187D  01A1               	clrf	CC2500_ReadByte@loop_b
  9682  187E                     L9:	
  9683  187E  3008               	movlw	8
  9684  187F  0221               	subwf	CC2500_ReadByte@loop_b,w
  9685  1880  1803               	btfsc	3,0
  9686  1881  0008               	return
  9687                           
  9688                           ;CC2500_B1.c: 214: {
  9689                           ;CC2500_B1.c: 215: RC1=1;
  9690  1882  148E               	bsf	14,1	;volatile
  9691                           
  9692                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9693  1883  1003               	clrc
  9694  1884  0021               	movlb	1	; select bank1
  9695  1885  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9696                           
  9697                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9698  1886  0020               	movlb	0	; select bank0
  9699  1887  1D0E               	btfss	14,2	;volatile
  9700  1888  288C               	goto	l6444
  9701                           
  9702                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9703  1889  0021               	movlb	1	; select bank1
  9704  188A  143F               	bsf	_SPI0Buffer^(0+128),0
  9705  188B  2892               	goto	l6446
  9706  188C                     l6444:	
  9707                           
  9708                           ;CC2500_B1.c: 219: else
  9709                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9710  188C  30FE               	movlw	254
  9711  188D  0020               	movlb	0	; select bank0
  9712  188E  00A0               	movwf	??_CC2500_ReadByte
  9713  188F  0820               	movf	??_CC2500_ReadByte,w
  9714  1890  0021               	movlb	1	; select bank1
  9715  1891  05BF               	andwf	_SPI0Buffer^(0+128),f
  9716  1892                     l6446:	
  9717                           
  9718                           ;CC2500_B1.c: 221: RC1=0;
  9719  1892  0020               	movlb	0	; select bank0
  9720  1893  108E               	bcf	14,1	;volatile
  9721  1894  3001               	movlw	1
  9722  1895  00A0               	movwf	??_CC2500_ReadByte
  9723  1896  0820               	movf	??_CC2500_ReadByte,w
  9724  1897  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9725  1898  287E               	goto	L9
  9726  1899                     __end_of_CC2500_ReadByte:	
  9727                           
  9728                           	psect	text43
  9729  2489                     __ptext43:	
  9730 ;; *************** function _RF_Initialization *****************
  9731 ;; Defined at:
  9732 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;		None               void
  9739 ;; Registers used:
  9740 ;;		wreg, status,2, status,0, pclath, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    5
  9753 ;; This function calls:
  9754 ;;		_setRF_Initialization
  9755 ;; This function is called by:
  9756 ;;		_main
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           
  9761                           ;psect for function _RF_Initialization
  9762  2489                     _RF_Initialization:	
  9763                           
  9764                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9768  2489  3001               	movlw	1
  9769  248A  31A4  24C8         	fcall	_setRF_Initialization
  9770  248C  0008               	return
  9771  248D                     __end_of_RF_Initialization:	
  9772                           
  9773                           	psect	text44
  9774  24C8                     __ptext44:	
  9775 ;; *************** function _setRF_Initialization *****************
  9776 ;; Defined at:
  9777 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  rf              1    wreg     unsigned char 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  rf              1    0[COMMON] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        1 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    4
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_RF_Initialization
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _setRF_Initialization
  9807  24C8                     _setRF_Initialization:	
  9808                           
  9809                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in _setRF_Initialization: [wreg]
  9813  24C8  3015               	movlw	21
  9814  24C9  0020               	movlb	0	; select bank0
  9815  24CA  00A0               	movwf	??_setRF_Initialization
  9816  24CB  0820               	movf	??_setRF_Initialization,w
  9817  24CC  0021               	movlb	1	; select bank1
  9818  24CD  00C0               	movwf	_Tx_Length^(0+128)
  9819  24CE  0008               	return
  9820  24CF                     __end_of_setRF_Initialization:	
  9821                           
  9822                           	psect	text45
  9823  246F                     __ptext45:	
  9824 ;; *************** function _PowerFault_Main *****************
  9825 ;; Defined at:
  9826 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;		None
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;		None               void
  9833 ;; Registers used:
  9834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;Total ram usage:        0 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:   10
  9847 ;; This function calls:
  9848 ;;		_setPowerFault_Main
  9849 ;; This function is called by:
  9850 ;;		_main
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function _PowerFault_Main
  9856  246F                     _PowerFault_Main:	
  9857                           
  9858                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9862  246F  318D  25CF         	fcall	_setPowerFault_Main
  9863  2471  0008               	return
  9864  2472                     __end_of_PowerFault_Main:	
  9865                           
  9866                           	psect	text46
  9867  0DCF                     __ptext46:	
  9868 ;; *************** function _setPowerFault_Main *****************
  9869 ;; Defined at:
  9870 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;		None               void
  9877 ;; Registers used:
  9878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        2 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    9
  9891 ;; This function calls:
  9892 ;;		_getLoad_Safe
  9893 ;;		_getTemp_Safe
  9894 ;;		_setPowerFault_Exceptions
  9895 ;; This function is called by:
  9896 ;;		_PowerFault_Main
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _setPowerFault_Main
  9902  0DCF                     _setPowerFault_Main:	
  9903                           
  9904                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9908  0DCF  087A               	movf	_PF,w
  9909  0DD0  0086               	movwf	6
  9910  0DD1  3001               	movlw	1	; select bank2/3
  9911  0DD2  0087               	movwf	7
  9912  0DD3  1C01               	btfss	1,0
  9913  0DD4  0008               	return
  9914                           
  9915                           ;PowerFault_B1.c: 64: {
  9916                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9917  0DD5  087A               	movf	_PF,w
  9918  0DD6  0086               	movwf	6
  9919  0DD7  3001               	movlw	1	; select bank2/3
  9920  0DD8  0087               	movwf	7
  9921  0DD9  1981               	btfsc	1,3
  9922  0DDA  2E1F               	goto	l9154
  9923                           
  9924                           ;PowerFault_B1.c: 66: {
  9925                           ;PowerFault_B1.c: 67: PF->Time++;
  9926  0DDB  087A               	movf	_PF,w
  9927  0DDC  3E06               	addlw	6
  9928  0DDD  0086               	movwf	6
  9929  0DDE  3001               	movlw	1	; select bank2/3
  9930  0DDF  0087               	movwf	7
  9931  0DE0  3001               	movlw	1
  9932  0DE1  0781               	addwf	1,f
  9933  0DE2  3141               	addfsr 1,1
  9934  0DE3  1803               	skipnc
  9935  0DE4  0A81               	incf	1,f
  9936                           
  9937                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9938  0DE5  087A               	movf	_PF,w
  9939  0DE6  3E06               	addlw	6
  9940  0DE7  0086               	movwf	6
  9941  0DE8  3001               	movlw	1	; select bank2/3
  9942  0DE9  0087               	movwf	7
  9943  0DEA  3F40               	moviw [0]fsr1
  9944  0DEB  0020               	movlb	0	; select bank0
  9945  0DEC  00AD               	movwf	??_setPowerFault_Main
  9946  0DED  3F41               	moviw [1]fsr1
  9947  0DEE  00AE               	movwf	??_setPowerFault_Main+1
  9948  0DEF  3002               	movlw	2
  9949  0DF0  022E               	subwf	??_setPowerFault_Main+1,w
  9950  0DF1  30BC               	movlw	188
  9951  0DF2  1903               	skipnz
  9952  0DF3  022D               	subwf	??_setPowerFault_Main,w
  9953  0DF4  1C03               	skipc
  9954  0DF5  0008               	return
  9955                           
  9956                           ;PowerFault_B1.c: 69: {
  9957                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9958  0DF6  31A5  2549  318D   	fcall	_getLoad_Safe
  9959  0DF9  3A00               	xorlw	0
  9960  0DFA  1903               	skipnz
  9961  0DFB  2E15               	goto	l9152
  9962  0DFC  31A4  24BA  318D   	fcall	_getTemp_Safe
  9963  0DFF  3A00               	xorlw	0
  9964  0E00  1903               	skipnz
  9965  0E01  2E15               	goto	l9152
  9966                           
  9967                           ;PowerFault_B1.c: 71: {
  9968                           ;PowerFault_B1.c: 72: PF->Time=0;
  9969  0E02  087A               	movf	_PF,w
  9970  0E03  3E06               	addlw	6
  9971  0E04  0086               	movwf	6
  9972  0E05  3001               	movlw	1	; select bank2/3
  9973  0E06  0087               	movwf	7
  9974  0E07  3000               	movlw	0
  9975  0E08  3FC0               	movwi [0]fsr1
  9976  0E09  3FC1               	movwi [1]fsr1
  9977                           
  9978                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9979  0E0A  087A               	movf	_PF,w
  9980  0E0B  0086               	movwf	6
  9981  0E0C  3001               	movlw	1	; select bank2/3
  9982  0E0D  0087               	movwf	7
  9983  0E0E  1581               	bsf	1,3
  9984                           
  9985                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9986  0E0F  087A               	movf	_PF,w
  9987  0E10  0086               	movwf	6
  9988  0E11  3001               	movlw	1	; select bank2/3
  9989  0E12  0087               	movwf	7
  9990  0E13  1101               	bcf	1,2
  9991                           
  9992                           ;PowerFault_B1.c: 75: }
  9993  0E14  0008               	return
  9994  0E15                     l9152:	
  9995                           
  9996                           ;PowerFault_B1.c: 76: else
  9997                           ;PowerFault_B1.c: 77: {
  9998                           ;PowerFault_B1.c: 78: PF->Time=700;
  9999  0E15  087A               	movf	_PF,w
 10000  0E16  3E06               	addlw	6
 10001  0E17  0086               	movwf	6
 10002  0E18  3001               	movlw	1	; select bank2/3
 10003  0E19  0087               	movwf	7
 10004  0E1A  30BC               	movlw	188
 10005  0E1B  3FC0               	movwi [0]fsr1
 10006  0E1C  3002               	movlw	2
 10007  0E1D  3FC1               	movwi [1]fsr1
 10008                           
 10009                           ;PowerFault_B1.c: 79: }
 10010                           ;PowerFault_B1.c: 80: }
 10011                           ;PowerFault_B1.c: 81: }
 10012  0E1E  0008               	return
 10013  0E1F                     l9154:	
 10014                           
 10015                           ;PowerFault_B1.c: 82: else
 10016                           ;PowerFault_B1.c: 83: {
 10017                           ;PowerFault_B1.c: 84: PF->Time++;
 10018  0E1F  087A               	movf	_PF,w
 10019  0E20  3E06               	addlw	6
 10020  0E21  0086               	movwf	6
 10021  0E22  3001               	movlw	1	; select bank2/3
 10022  0E23  0087               	movwf	7
 10023  0E24  3001               	movlw	1
 10024  0E25  0781               	addwf	1,f
 10025  0E26  3141               	addfsr 1,1
 10026  0E27  1803               	skipnc
 10027  0E28  0A81               	incf	1,f
 10028                           
 10029                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10030  0E29  087A               	movf	_PF,w
 10031  0E2A  3E06               	addlw	6
 10032  0E2B  0086               	movwf	6
 10033  0E2C  3001               	movlw	1	; select bank2/3
 10034  0E2D  0087               	movwf	7
 10035  0E2E  3F40               	moviw [0]fsr1
 10036  0E2F  0020               	movlb	0	; select bank0
 10037  0E30  00AD               	movwf	??_setPowerFault_Main
 10038  0E31  3F41               	moviw [1]fsr1
 10039  0E32  00AE               	movwf	??_setPowerFault_Main+1
 10040  0E33  3000               	movlw	0
 10041  0E34  022E               	subwf	??_setPowerFault_Main+1,w
 10042  0E35  3002               	movlw	2
 10043  0E36  1903               	skipnz
 10044  0E37  022D               	subwf	??_setPowerFault_Main,w
 10045  0E38  1C03               	skipc
 10046  0E39  0008               	return
 10047                           
 10048                           ;PowerFault_B1.c: 86: {
 10049                           ;PowerFault_B1.c: 87: PF->Time=0;
 10050  0E3A  087A               	movf	_PF,w
 10051  0E3B  3E06               	addlw	6
 10052  0E3C  0086               	movwf	6
 10053  0E3D  3001               	movlw	1	; select bank2/3
 10054  0E3E  0087               	movwf	7
 10055  0E3F  3000               	movlw	0
 10056  0E40  3FC0               	movwi [0]fsr1
 10057  0E41  3FC1               	movwi [1]fsr1
 10058                           
 10059                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10060  0E42  087A               	movf	_PF,w
 10061  0E43  0086               	movwf	6
 10062  0E44  3001               	movlw	1	; select bank2/3
 10063  0E45  0087               	movwf	7
 10064  0E46  1181               	bcf	1,3
 10065                           
 10066                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10067  0E47  087A               	movf	_PF,w
 10068  0E48  0086               	movwf	6
 10069  0E49  3001               	movlw	1	; select bank2/3
 10070  0E4A  0087               	movwf	7
 10071  0E4B  1C81               	btfss	1,1
 10072  0E4C  2E88               	goto	l9174
 10073                           
 10074                           ;PowerFault_B1.c: 91: {
 10075                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10076  0E4D  0A7A               	incf	_PF,w
 10077  0E4E  0086               	movwf	6
 10078  0E4F  3001               	movlw	1	; select bank2/3
 10079  0E50  0087               	movwf	7
 10080  0E51  3F40               	moviw [0]fsr1
 10081  0E52  00AD               	movwf	??_setPowerFault_Main
 10082  0E53  3F41               	moviw [1]fsr1
 10083  0E54  00AE               	movwf	??_setPowerFault_Main+1
 10084  0E55  3001               	movlw	1
 10085  0E56  022E               	subwf	??_setPowerFault_Main+1,w
 10086  0E57  3091               	movlw	145
 10087  0E58  1903               	skipnz
 10088  0E59  022D               	subwf	??_setPowerFault_Main,w
 10089  0E5A  1803               	skipnc
 10090  0E5B  2EC4               	goto	l9186
 10091  0E5C  0A7A               	incf	_PF,w
 10092  0E5D  0086               	movwf	6
 10093  0E5E  3001               	movlw	1	; select bank2/3
 10094  0E5F  0087               	movwf	7
 10095  0E60  3F40               	moviw [0]fsr1
 10096  0E61  00AD               	movwf	??_setPowerFault_Main
 10097  0E62  3F41               	moviw [1]fsr1
 10098  0E63  00AE               	movwf	??_setPowerFault_Main+1
 10099  0E64  3000               	movlw	0
 10100  0E65  022E               	subwf	??_setPowerFault_Main+1,w
 10101  0E66  30C8               	movlw	200
 10102  0E67  1903               	skipnz
 10103  0E68  022D               	subwf	??_setPowerFault_Main,w
 10104  0E69  1C03               	skipc
 10105  0E6A  2EC4               	goto	l9186
 10106                           
 10107                           ;PowerFault_B1.c: 93: {
 10108                           ;PowerFault_B1.c: 94: PF->Count++;
 10109  0E6B  3001               	movlw	1
 10110  0E6C  00AD               	movwf	??_setPowerFault_Main
 10111  0E6D  087A               	movf	_PF,w
 10112  0E6E  3E05               	addlw	5
 10113  0E6F  0086               	movwf	6
 10114  0E70  3001               	movlw	1	; select bank2/3
 10115  0E71  0087               	movwf	7
 10116  0E72  082D               	movf	??_setPowerFault_Main,w
 10117  0E73  0781               	addwf	1,f
 10118                           
 10119                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10120  0E74  087A               	movf	_PF,w
 10121  0E75  3E05               	addlw	5
 10122  0E76  0086               	movwf	6
 10123  0E77  3001               	movlw	1	; select bank2/3
 10124  0E78  0087               	movwf	7
 10125  0E79  3002               	movlw	2
 10126  0E7A  0201               	subwf	1,w
 10127  0E7B  1C03               	skipc
 10128  0E7C  2ECA               	goto	l9188
 10129                           
 10130                           ;PowerFault_B1.c: 96: {
 10131                           ;PowerFault_B1.c: 97: PF->Count=0;
 10132  0E7D  087A               	movf	_PF,w
 10133  0E7E  3E05               	addlw	5
 10134  0E7F  0086               	movwf	6
 10135  0E80  3001               	movlw	1	; select bank2/3
 10136  0E81  0087               	movwf	7
 10137  0E82  0181               	clrf	1
 10138                           
 10139                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10140  0E83  3000               	movlw	0
 10141  0E84  319C  24D7  318D   	fcall	_setPowerFault_Exceptions
 10142                           
 10143                           ;PowerFault_B1.c: 99: }
 10144                           ;PowerFault_B1.c: 100: }
 10145  0E87  2ECA               	goto	l9188
 10146  0E88                     l9174:	
 10147                           ;PowerFault_B1.c: 104: }
 10148                           ;PowerFault_B1.c: 105: }
 10149                           
 10150                           ;PowerFault_B1.c: 101: else
 10151                           ;PowerFault_B1.c: 102: {
 10152                           ;PowerFault_B1.c: 103: PF->Count=0;
 10153                           
 10154                           
 10155                           ;PowerFault_B1.c: 106: else
 10156                           ;PowerFault_B1.c: 107: {
 10157                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10158  0E88  0A7A               	incf	_PF,w
 10159  0E89  0086               	movwf	6
 10160  0E8A  3001               	movlw	1	; select bank2/3
 10161  0E8B  0087               	movwf	7
 10162  0E8C  3F40               	moviw [0]fsr1
 10163  0E8D  0020               	movlb	0	; select bank0
 10164  0E8E  00AD               	movwf	??_setPowerFault_Main
 10165  0E8F  3F41               	moviw [1]fsr1
 10166  0E90  00AE               	movwf	??_setPowerFault_Main+1
 10167  0E91  3001               	movlw	1
 10168  0E92  022E               	subwf	??_setPowerFault_Main+1,w
 10169  0E93  3090               	movlw	144
 10170  0E94  1903               	skipnz
 10171  0E95  022D               	subwf	??_setPowerFault_Main,w
 10172  0E96  1803               	skipnc
 10173  0E97  2EA7               	goto	l9178
 10174  0E98  0A7A               	incf	_PF,w
 10175  0E99  0086               	movwf	6
 10176  0E9A  3001               	movlw	1	; select bank2/3
 10177  0E9B  0087               	movwf	7
 10178  0E9C  3F40               	moviw [0]fsr1
 10179  0E9D  00AD               	movwf	??_setPowerFault_Main
 10180  0E9E  3F41               	moviw [1]fsr1
 10181  0E9F  00AE               	movwf	??_setPowerFault_Main+1
 10182  0EA0  3000               	movlw	0
 10183  0EA1  022E               	subwf	??_setPowerFault_Main+1,w
 10184  0EA2  30D3               	movlw	211
 10185  0EA3  1903               	skipnz
 10186  0EA4  022D               	subwf	??_setPowerFault_Main,w
 10187  0EA5  1803               	skipnc
 10188  0EA6  2EC4               	goto	l9186
 10189  0EA7                     l9178:	
 10190                           
 10191                           ;PowerFault_B1.c: 109: {
 10192                           ;PowerFault_B1.c: 110: PF->Count++;
 10193  0EA7  3001               	movlw	1
 10194  0EA8  00AD               	movwf	??_setPowerFault_Main
 10195  0EA9  087A               	movf	_PF,w
 10196  0EAA  3E05               	addlw	5
 10197  0EAB  0086               	movwf	6
 10198  0EAC  3001               	movlw	1	; select bank2/3
 10199  0EAD  0087               	movwf	7
 10200  0EAE  082D               	movf	??_setPowerFault_Main,w
 10201  0EAF  0781               	addwf	1,f
 10202                           
 10203                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10204  0EB0  087A               	movf	_PF,w
 10205  0EB1  3E05               	addlw	5
 10206  0EB2  0086               	movwf	6
 10207  0EB3  3001               	movlw	1	; select bank2/3
 10208  0EB4  0087               	movwf	7
 10209  0EB5  3002               	movlw	2
 10210  0EB6  0201               	subwf	1,w
 10211  0EB7  1C03               	skipc
 10212  0EB8  2ECA               	goto	l9188
 10213                           
 10214                           ;PowerFault_B1.c: 112: {
 10215                           ;PowerFault_B1.c: 113: PF->Count=0;
 10216  0EB9  087A               	movf	_PF,w
 10217  0EBA  3E05               	addlw	5
 10218  0EBB  0086               	movwf	6
 10219  0EBC  3001               	movlw	1	; select bank2/3
 10220  0EBD  0087               	movwf	7
 10221  0EBE  0181               	clrf	1
 10222                           
 10223                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10224  0EBF  3001               	movlw	1
 10225  0EC0  319C  24D7  318D   	fcall	_setPowerFault_Exceptions
 10226                           
 10227                           ;PowerFault_B1.c: 115: }
 10228                           ;PowerFault_B1.c: 116: }
 10229  0EC3  2ECA               	goto	l9188
 10230  0EC4                     l9186:	
 10231                           
 10232                           ;PowerFault_B1.c: 117: else
 10233                           ;PowerFault_B1.c: 118: {
 10234                           ;PowerFault_B1.c: 119: PF->Count=0;
 10235  0EC4  087A               	movf	_PF,w
 10236  0EC5  3E05               	addlw	5
 10237  0EC6  0086               	movwf	6
 10238  0EC7  3001               	movlw	1	; select bank2/3
 10239  0EC8  0087               	movwf	7
 10240  0EC9  0181               	clrf	1
 10241  0ECA                     l9188:	
 10242                           
 10243                           ;PowerFault_B1.c: 120: }
 10244                           ;PowerFault_B1.c: 122: }
 10245                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10246  0ECA  087A               	movf	_PF,w
 10247  0ECB  0086               	movwf	6
 10248  0ECC  3001               	movlw	1	; select bank2/3
 10249  0ECD  0087               	movwf	7
 10250  0ECE  1881               	btfsc	1,1
 10251  0ECF  2ED5               	goto	l2371
 10252                           
 10253                           ;PowerFault_B1.c: 124: {
 10254                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10255  0ED0  087A               	movf	_PF,w
 10256  0ED1  0086               	movwf	6
 10257  0ED2  3001               	movlw	1	; select bank2/3
 10258  0ED3  0087               	movwf	7
 10259  0ED4  1501               	bsf	1,2
 10260  0ED5                     l2371:	
 10261                           
 10262                           ;PowerFault_B1.c: 126: }
 10263                           ;PowerFault_B1.c: 127: PF->AD=0;
 10264  0ED5  0A7A               	incf	_PF,w
 10265  0ED6  0086               	movwf	6
 10266  0ED7  3001               	movlw	1	; select bank2/3
 10267  0ED8  0087               	movwf	7
 10268  0ED9  3000               	movlw	0
 10269  0EDA  3FC0               	movwi [0]fsr1
 10270  0EDB  3FC1               	movwi [1]fsr1
 10271  0EDC  0008               	return
 10272  0EDD                     __end_of_setPowerFault_Main:	
 10273                           
 10274                           	psect	text47
 10275  1CD7                     __ptext47:	
 10276 ;; *************** function _setPowerFault_Exceptions *****************
 10277 ;; Defined at:
 10278 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  command         1    wreg     unsigned char 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  command         1   12[BANK0 ] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:        2 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    8
 10299 ;; This function calls:
 10300 ;;		_DimmerLights_Exceptions
 10301 ;;		_setLED
 10302 ;;		_setRF_Enable
 10303 ;;		_setSw_Enable
 10304 ;; This function is called by:
 10305 ;;		_setPowerFault_Main
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           
 10310                           ;psect for function _setPowerFault_Exceptions
 10311  1CD7                     _setPowerFault_Exceptions:	
 10312                           
 10313                           ;incstack = 0
 10314                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10315                           ;setPowerFault_Exceptions@command stored from wreg
 10316  1CD7  0020               	movlb	0	; select bank0
 10317  1CD8  00AC               	movwf	setPowerFault_Exceptions@command
 10318                           
 10319                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10320  1CD9  087A               	movf	_PF,w
 10321  1CDA  0086               	movwf	6
 10322  1CDB  3001               	movlw	1	; select bank2/3
 10323  1CDC  0087               	movwf	7
 10324  1CDD  082C               	movf	setPowerFault_Exceptions@command,w
 10325  1CDE  1081               	bcf	1,1
 10326  1CDF  1D03               	skipz
 10327  1CE0  1481               	bsf	1,1
 10328                           
 10329                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10330  1CE1  092C               	comf	setPowerFault_Exceptions@command,w
 10331  1CE2  3901               	andlw	1
 10332  1CE3  00AB               	movwf	??_setPowerFault_Exceptions
 10333  1CE4  087A               	movf	_PF,w
 10334  1CE5  0086               	movwf	6
 10335  1CE6  3001               	movlw	1	; select bank2/3
 10336  1CE7  0087               	movwf	7
 10337  1CE8  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10338  1CE9  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10339  1CEA  0801               	movf	1,w
 10340  1CEB  062B               	xorwf	??_setPowerFault_Exceptions,w
 10341  1CEC  39FB               	andlw	-5
 10342  1CED  062B               	xorwf	??_setPowerFault_Exceptions,w
 10343  1CEE  0081               	movwf	1
 10344                           
 10345                           ;PowerFault_B1.c: 137: if(command == 1)
 10346  1CEF  082C               	movf	setPowerFault_Exceptions@command,w
 10347  1CF0  3A01               	xorlw	1
 10348  1CF1  1D03               	skipz
 10349  1CF2  2CFE               	goto	l2375
 10350                           
 10351                           ;PowerFault_B1.c: 138: {
 10352                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10353  1CF3  3003               	movlw	3
 10354  1CF4  3190  204D  319C   	fcall	_DimmerLights_Exceptions
 10355                           
 10356                           ;PowerFault_B1.c: 141: setLED(2,1);
 10357  1CF7  0020               	movlb	0	; select bank0
 10358  1CF8  01A2               	clrf	setLED@command
 10359  1CF9  0AA2               	incf	setLED@command,f
 10360  1CFA  3002               	movlw	2
 10361  1CFB  3191  215E  319C   	fcall	_setLED
 10362  1CFE                     l2375:	
 10363                           
 10364                           ;PowerFault_B1.c: 143: }
 10365                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10366  1CFE  0020               	movlb	0	; select bank0
 10367  1CFF  082C               	movf	setPowerFault_Exceptions@command,w
 10368  1D00  3E0A               	addlw	10
 10369  1D01  00AB               	movwf	??_setPowerFault_Exceptions
 10370  1D02  082B               	movf	??_setPowerFault_Exceptions,w
 10371  1D03  00A2               	movwf	setLED@command
 10372  1D04  3063               	movlw	99
 10373  1D05  3191  215E  319C   	fcall	_setLED
 10374                           
 10375                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10376  1D08  0020               	movlb	0	; select bank0
 10377  1D09  092C               	comf	setPowerFault_Exceptions@command,w
 10378  1D0A  3901               	andlw	1
 10379  1D0B  31A6  263A  319C   	fcall	_setSw_Enable
 10380                           
 10381                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10382  1D0E  0020               	movlb	0	; select bank0
 10383  1D0F  092C               	comf	setPowerFault_Exceptions@command,w
 10384  1D10  3901               	andlw	1
 10385  1D11  00AB               	movwf	??_setPowerFault_Exceptions
 10386  1D12  082B               	movf	??_setPowerFault_Exceptions,w
 10387  1D13  00A2               	movwf	setRF_Enable@command
 10388  1D14  3001               	movlw	1
 10389  1D15  319A  221A         	fcall	_setRF_Enable
 10390  1D17  0008               	return
 10391  1D18                     __end_of_setPowerFault_Exceptions:	
 10392                           
 10393                           	psect	text48
 10394  2549                     __ptext48:	
 10395 ;; *************** function _getLoad_Safe *****************
 10396 ;; Defined at:
 10397 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      unsigned char 
 10404 ;; Registers used:
 10405 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:        1 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    4
 10418 ;; This function calls:
 10419 ;;		Nothing
 10420 ;; This function is called by:
 10421 ;;		_setTemp_Main
 10422 ;;		_setPowerFault_Main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _getLoad_Safe
 10428  2549                     _getLoad_Safe:	
 10429                           
 10430                           ;OverLoad_B1.c: 341: return Load->Safe;
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10434  2549  0020               	movlb	0	; select bank0
 10435  254A  086E               	movf	_Load,w
 10436  254B  0086               	movwf	6
 10437  254C  3002               	movlw	2	; select bank4/5
 10438  254D  0087               	movwf	7
 10439  254E  0C01               	rrf	1,w
 10440  254F  00A0               	movwf	??_getLoad_Safe
 10441  2550  0CA0               	rrf	??_getLoad_Safe,f
 10442  2551  0C20               	rrf	??_getLoad_Safe,w
 10443  2552  3901               	andlw	1
 10444  2553  0008               	return
 10445  2554                     __end_of_getLoad_Safe:	
 10446                           
 10447                           	psect	text49
 10448  246C                     __ptext49:	
 10449 ;; *************** function _PowerFault_Initialization *****************
 10450 ;; Defined at:
 10451 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;		None
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;		None
 10456 ;; Return value:  Size  Location     Type
 10457 ;;		None               void
 10458 ;; Registers used:
 10459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10460 ;; Tracked objects:
 10461 ;;		On entry : 0/0
 10462 ;;		On exit  : 0/0
 10463 ;;		Unchanged: 0/0
 10464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;Total ram usage:        0 bytes
 10470 ;; Hardware stack levels used:    1
 10471 ;; Hardware stack levels required when called:    5
 10472 ;; This function calls:
 10473 ;;		_setPowerFault_Initialization
 10474 ;; This function is called by:
 10475 ;;		_main
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _PowerFault_Initialization
 10481  246C                     _PowerFault_Initialization:	
 10482                           
 10483                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10487  246C  31A6  2699         	fcall	_setPowerFault_Initialization
 10488  246E  0008               	return
 10489  246F                     __end_of_PowerFault_Initialization:	
 10490                           
 10491                           	psect	text50
 10492  2699                     __ptext50:	
 10493 ;; *************** function _setPowerFault_Initialization *****************
 10494 ;; Defined at:
 10495 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;		None
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;		None
 10500 ;; Return value:  Size  Location     Type
 10501 ;;		None               void
 10502 ;; Registers used:
 10503 ;;		wreg, fsr1l, fsr1h
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;Total ram usage:        1 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    4
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_PowerFault_Initialization
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _setPowerFault_Initialization
 10525  2699                     _setPowerFault_Initialization:	
 10526                           
 10527                           ;PowerFault_B1.c: 31: PF=&PF1;
 10528                           
 10529                           ;incstack = 0
 10530                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10531  2699  3062               	movlw	_PF1& (0+255)
 10532  269A  0020               	movlb	0	; select bank0
 10533  269B  00A0               	movwf	??_setPowerFault_Initialization
 10534  269C  0820               	movf	??_setPowerFault_Initialization,w
 10535  269D  00FA               	movwf	_PF
 10536                           
 10537                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10538  269E  087A               	movf	_PF,w
 10539  269F  0086               	movwf	6
 10540  26A0  3001               	movlw	1	; select bank2/3
 10541  26A1  0087               	movwf	7
 10542  26A2  1401               	bsf	1,0
 10543                           
 10544                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10545  26A3  087A               	movf	_PF,w
 10546  26A4  0086               	movwf	6
 10547  26A5  3001               	movlw	1	; select bank2/3
 10548  26A6  0087               	movwf	7
 10549  26A7  1501               	bsf	1,2
 10550  26A8  0008               	return
 10551  26A9                     __end_of_setPowerFault_Initialization:	
 10552                           
 10553                           	psect	text51
 10554  27AE                     __ptext51:	
 10555 ;; *************** function _Mcu_Initialization *****************
 10556 ;; Defined at:
 10557 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;		None               void
 10564 ;; Registers used:
 10565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        1 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    5
 10578 ;; This function calls:
 10579 ;;		_ADC_Set
 10580 ;;		_INT_Set
 10581 ;;		_IOC_Set
 10582 ;;		_IO_Set
 10583 ;;		_TMR0_Set
 10584 ;;		_WDT_Set
 10585 ;; This function is called by:
 10586 ;;		_main
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           
 10591                           ;psect for function _Mcu_Initialization
 10592  27AE                     _Mcu_Initialization:	
 10593                           
 10594                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
 10595                           
 10596                           ;incstack = 0
 10597                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10598  27AE  3078               	movlw	120
 10599  27AF  0021               	movlb	1	; select bank1
 10600  27B0  0099               	movwf	25	;volatile
 10601                           
 10602                           ;MCU_B1.c: 29: IO_Set();
 10603  27B1  31A7  277A  31A7   	fcall	_IO_Set
 10604                           
 10605                           ;MCU_B1.c: 31: TMR0_Set();
 10606  27B4  3188  2000  31A7   	fcall	_TMR0_Set
 10607                           
 10608                           ;MCU_B1.c: 33: ;;
 10609                           ;MCU_B1.c: 35: ADC_Set();
 10610  27B7  31A4  24C1  31A7   	fcall	_ADC_Set
 10611                           
 10612                           ;MCU_B1.c: 39: INT_Set();
 10613  27BA  31A4  249A  31A7   	fcall	_INT_Set
 10614                           
 10615                           ;MCU_B1.c: 41: IOC_Set();
 10616  27BD  31A5  25E4  31A7   	fcall	_IOC_Set
 10617                           
 10618                           ;MCU_B1.c: 43: ;;
 10619                           ;MCU_B1.c: 45: ;;
 10620                           ;MCU_B1.c: 47: Memory=&VarMemory;
 10621  27C0  30A0               	movlw	_VarMemory& (0+255)
 10622  27C1  0020               	movlb	0	; select bank0
 10623  27C2  00A1               	movwf	??_Mcu_Initialization
 10624  27C3  0821               	movf	??_Mcu_Initialization,w
 10625  27C4  0021               	movlb	1	; select bank1
 10626  27C5  00E7               	movwf	_Memory^(0+128)
 10627                           
 10628                           ;MCU_B1.c: 49: WDT_Set();
 10629  27C6  31A7  2717         	fcall	_WDT_Set
 10630  27C8  0008               	return
 10631  27C9                     __end_of_Mcu_Initialization:	
 10632                           
 10633                           	psect	text52
 10634  2717                     __ptext52:	
 10635 ;; *************** function _WDT_Set *****************
 10636 ;; Defined at:
 10637 ;;		line 979 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;		None               void
 10644 ;; Registers used:
 10645 ;;		wreg, fsr1l, fsr1h
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;Total ram usage:        1 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    4
 10658 ;; This function calls:
 10659 ;;		Nothing
 10660 ;; This function is called by:
 10661 ;;		_Mcu_Initialization
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function _WDT_Set
 10667  2717                     _WDT_Set:	
 10668                           
 10669                           ;MCU_B1.c: 980: WDTCON=0b00010111;;
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in _WDT_Set: [wregfsr1]
 10673  2717  3017               	movlw	23
 10674  2718  0021               	movlb	1	; select bank1
 10675  2719  0097               	movwf	23	;volatile
 10676                           
 10677                           ;MCU_B1.c: 981: WDT=&_WDT;
 10678  271A  30E4               	movlw	__WDT& (0+255)
 10679  271B  0020               	movlb	0	; select bank0
 10680  271C  00A0               	movwf	??_WDT_Set
 10681  271D  0820               	movf	??_WDT_Set,w
 10682  271E  0021               	movlb	1	; select bank1
 10683  271F  00E9               	movwf	_WDT^(0+128)
 10684                           
 10685                           ;MCU_B1.c: 982: WDT->Enable=1;
 10686  2720  0869               	movf	_WDT^(0+128),w
 10687  2721  0086               	movwf	6
 10688  2722  0187               	clrf	7
 10689  2723  1401               	bsf	1,0
 10690                           
 10691                           ;MCU_B1.c: 983: WDT->Count=10;
 10692  2724  300A               	movlw	10
 10693  2725  0020               	movlb	0	; select bank0
 10694  2726  00A0               	movwf	??_WDT_Set
 10695  2727  0021               	movlb	1	; select bank1
 10696  2728  0A69               	incf	_WDT^(0+128),w
 10697  2729  0086               	movwf	6
 10698  272A  0187               	clrf	7
 10699  272B  0020               	movlb	0	; select bank0
 10700  272C  0820               	movf	??_WDT_Set,w
 10701  272D  0081               	movwf	1
 10702  272E  0008               	return
 10703  272F                     __end_of_WDT_Set:	
 10704                           
 10705                           	psect	text53
 10706  0800                     __ptext53:	
 10707 ;; *************** function _TMR0_Set *****************
 10708 ;; Defined at:
 10709 ;;		line 118 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;		None               void
 10716 ;; Registers used:
 10717 ;;		wreg, status,2
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        1 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    4
 10730 ;; This function calls:
 10731 ;;		Nothing
 10732 ;; This function is called by:
 10733 ;;		_Mcu_Initialization
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           
 10738                           ;psect for function _TMR0_Set
 10739  0800                     _TMR0_Set:	
 10740                           
 10741                           ;MCU_B1.c: 120: Timer0=&VarTimer0;
 10742                           
 10743                           ;incstack = 0
 10744                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10745  0800  30C4               	movlw	_VarTimer0& (0+255)
 10746  0801  0020               	movlb	0	; select bank0
 10747  0802  00A0               	movwf	??_TMR0_Set
 10748  0803  0820               	movf	??_TMR0_Set,w
 10749  0804  0021               	movlb	1	; select bank1
 10750  0805  00E8               	movwf	_Timer0^(0+128)
 10751                           
 10752                           ;MCU_B1.c: 121: OPTION_REG=0x00;
 10753  0806  0195               	clrf	21	;volatile
 10754                           
 10755                           ;MCU_B1.c: 122: TMR0=(256-90);
 10756  0807  30A6               	movlw	166
 10757  0808  0020               	movlb	0	; select bank0
 10758  0809  0095               	movwf	21	;volatile
 10759                           
 10760                           ;MCU_B1.c: 123: TMR0IE=1;
 10761  080A  168B               	bsf	11,5	;volatile
 10762                           
 10763                           ;MCU_B1.c: 124: GIE=1;
 10764  080B  178B               	bsf	11,7	;volatile
 10765  080C  0008               	return
 10766  080D                     __end_of_TMR0_Set:	
 10767                           
 10768                           	psect	text54
 10769  277A                     __ptext54:	
 10770 ;; *************** function _IO_Set *****************
 10771 ;; Defined at:
 10772 ;;		line 52 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;		None
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;		None
 10777 ;; Return value:  Size  Location     Type
 10778 ;;		None               void
 10779 ;; Registers used:
 10780 ;;		wreg, status,2
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;Total ram usage:        0 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    4
 10793 ;; This function calls:
 10794 ;;		Nothing
 10795 ;; This function is called by:
 10796 ;;		_Mcu_Initialization
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           
 10801                           ;psect for function _IO_Set
 10802  277A                     _IO_Set:	
 10803                           
 10804                           ;MCU_B1.c: 81: TRISA=0b01110111;;
 10805                           
 10806                           ;incstack = 0
 10807                           ; Regs used in _IO_Set: [wreg+status,2]
 10808  277A  3077               	movlw	119
 10809  277B  0021               	movlb	1	; select bank1
 10810  277C  008C               	movwf	12	;volatile
 10811                           
 10812                           ;MCU_B1.c: 82: TRISB=0b00000111;;
 10813  277D  3007               	movlw	7
 10814  277E  008D               	movwf	13	;volatile
 10815                           
 10816                           ;MCU_B1.c: 83: TRISC=0b00001100;;
 10817  277F  300C               	movlw	12
 10818  2780  008E               	movwf	14	;volatile
 10819                           
 10820                           ;MCU_B1.c: 84: LATA=0b00000000;;
 10821  2781  0022               	movlb	2	; select bank2
 10822  2782  018C               	clrf	12	;volatile
 10823                           
 10824                           ;MCU_B1.c: 85: LATB=0b00000010;;
 10825  2783  3002               	movlw	2
 10826  2784  008D               	movwf	13	;volatile
 10827                           
 10828                           ;MCU_B1.c: 86: LATC=0b00000000;;
 10829  2785  018E               	clrf	14	;volatile
 10830                           
 10831                           ;MCU_B1.c: 87: ANSELA=0b00100010;;
 10832  2786  3022               	movlw	34
 10833  2787  0023               	movlb	3	; select bank3
 10834  2788  008C               	movwf	12	;volatile
 10835                           
 10836                           ;MCU_B1.c: 88: ANSELB=0b00000000;;
 10837  2789  018D               	clrf	13	;volatile
 10838                           
 10839                           ;MCU_B1.c: 89: ANSELC=0b00000000;;
 10840  278A  018E               	clrf	14	;volatile
 10841                           
 10842                           ;MCU_B1.c: 90: PORTA=0b01110111;;
 10843  278B  3077               	movlw	119
 10844  278C  0020               	movlb	0	; select bank0
 10845  278D  008C               	movwf	12	;volatile
 10846                           
 10847                           ;MCU_B1.c: 91: PORTB=0b00000111;;
 10848  278E  3007               	movlw	7
 10849  278F  008D               	movwf	13	;volatile
 10850                           
 10851                           ;MCU_B1.c: 92: PORTC=0b00001100;;
 10852  2790  300C               	movlw	12
 10853  2791  008E               	movwf	14	;volatile
 10854  2792  0008               	return
 10855  2793                     __end_of_IO_Set:	
 10856                           
 10857                           	psect	text55
 10858  25E4                     __ptext55:	
 10859 ;; *************** function _IOC_Set *****************
 10860 ;; Defined at:
 10861 ;;		line 314 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;		None
 10864 ;; Auto vars:     Size  Location     Type
 10865 ;;		None
 10866 ;; Return value:  Size  Location     Type
 10867 ;;		None               void
 10868 ;; Registers used:
 10869 ;;		wreg, status,2
 10870 ;; Tracked objects:
 10871 ;;		On entry : 0/0
 10872 ;;		On exit  : 0/0
 10873 ;;		Unchanged: 0/0
 10874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;Total ram usage:        0 bytes
 10880 ;; Hardware stack levels used:    1
 10881 ;; Hardware stack levels required when called:    4
 10882 ;; This function calls:
 10883 ;;		Nothing
 10884 ;; This function is called by:
 10885 ;;		_Mcu_Initialization
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           
 10890                           ;psect for function _IOC_Set
 10891  25E4                     _IOC_Set:	
 10892                           
 10893                           ;MCU_B1.c: 316: WPUB2=0;
 10894                           
 10895                           ;incstack = 0
 10896                           ; Regs used in _IOC_Set: [wreg+status,2]
 10897  25E4  0024               	movlb	4	; select bank4
 10898  25E5  110D               	bcf	13,2	;volatile
 10899                           
 10900                           ;MCU_B1.c: 318: IOCBP=0b00000100;
 10901  25E6  3004               	movlw	4
 10902  25E7  0027               	movlb	7	; select bank7
 10903  25E8  0094               	movwf	20	;volatile
 10904                           
 10905                           ;MCU_B1.c: 319: IOCBN=0b00000100;
 10906  25E9  3004               	movlw	4
 10907  25EA  0095               	movwf	21	;volatile
 10908                           
 10909                           ;MCU_B1.c: 334: IOCBF=0b00000000;
 10910  25EB  0196               	clrf	22	;volatile
 10911                           
 10912                           ;MCU_B1.c: 336: IOCIE=1;
 10913  25EC  158B               	bsf	11,3	;volatile
 10914                           
 10915                           ;MCU_B1.c: 337: IOCIF=0;
 10916  25ED  100B               	bcf	11,0	;volatile
 10917                           
 10918                           ;MCU_B1.c: 338: PEIE=1;
 10919  25EE  170B               	bsf	11,6	;volatile
 10920                           
 10921                           ;MCU_B1.c: 339: GIE=1;
 10922  25EF  178B               	bsf	11,7	;volatile
 10923  25F0  0008               	return
 10924  25F1                     __end_of_IOC_Set:	
 10925                           
 10926                           	psect	text56
 10927  249A                     __ptext56:	
 10928 ;; *************** function _INT_Set *****************
 10929 ;; Defined at:
 10930 ;;		line 285 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;		None               void
 10937 ;; Registers used:
 10938 ;;		None
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        0 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    4
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_Mcu_Initialization
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function _INT_Set
 10960  249A                     _INT_Set:	
 10961                           
 10962                           ;MCU_B1.c: 287: WPUB0=0;
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _INT_Set: []
 10966  249A  0024               	movlb	4	; select bank4
 10967  249B  100D               	bcf	13,0	;volatile
 10968                           
 10969                           ;MCU_B1.c: 288: INTE=1;
 10970  249C  160B               	bsf	11,4	;volatile
 10971                           
 10972                           ;MCU_B1.c: 289: PEIE=1;
 10973  249D  170B               	bsf	11,6	;volatile
 10974                           
 10975                           ;MCU_B1.c: 290: GIE=1;
 10976  249E  178B               	bsf	11,7	;volatile
 10977  249F  0008               	return
 10978  24A0                     __end_of_INT_Set:	
 10979                           
 10980                           	psect	text57
 10981  24C1                     __ptext57:	
 10982 ;; *************** function _ADC_Set *****************
 10983 ;; Defined at:
 10984 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;		None
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;		None               void
 10991 ;; Registers used:
 10992 ;;		wreg
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;Total ram usage:        0 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    4
 11005 ;; This function calls:
 11006 ;;		Nothing
 11007 ;; This function is called by:
 11008 ;;		_Mcu_Initialization
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _ADC_Set
 11014  24C1                     _ADC_Set:	
 11015                           
 11016                           ;MCU_B1.c: 381: ADCON1=0xf2;
 11017                           
 11018                           ;incstack = 0
 11019                           ; Regs used in _ADC_Set: [wreg]
 11020  24C1  30F2               	movlw	242
 11021  24C2  0021               	movlb	1	; select bank1
 11022  24C3  009E               	movwf	30	;volatile
 11023                           
 11024                           ;MCU_B1.c: 382: FVRCON=0xc0;
 11025  24C4  30C0               	movlw	192
 11026  24C5  0022               	movlb	2	; select bank2
 11027  24C6  0097               	movwf	23	;volatile
 11028  24C7  0008               	return
 11029  24C8                     __end_of_ADC_Set:	
 11030                           
 11031                           	psect	text58
 11032  26DA                     __ptext58:	
 11033 ;; *************** function _MainT_Initialization *****************
 11034 ;; Defined at:
 11035 ;;		line 93 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;		None
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;		None
 11040 ;; Return value:  Size  Location     Type
 11041 ;;		None               void
 11042 ;; Registers used:
 11043 ;;		wreg, fsr1l, fsr1h
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;Total ram usage:        1 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    4
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		_main
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           
 11064                           ;psect for function _MainT_Initialization
 11065  26DA                     _MainT_Initialization:	
 11066                           
 11067                           ;main.c: 96: Product=&VarProduct;
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _MainT_Initialization: [wregfsr1]
 11071  26DA  30C5               	movlw	_VarProduct& (0+255)
 11072  26DB  0020               	movlb	0	; select bank0
 11073  26DC  00A0               	movwf	??_MainT_Initialization
 11074  26DD  0820               	movf	??_MainT_Initialization,w
 11075  26DE  00EF               	movwf	_Product
 11076                           
 11077                           ;main.c: 97: Product->Data[20]=209;
 11078  26DF  30D1               	movlw	209
 11079  26E0  00A0               	movwf	??_MainT_Initialization
 11080  26E1  086F               	movf	_Product,w
 11081  26E2  3E14               	addlw	20
 11082  26E3  0086               	movwf	6
 11083  26E4  3001               	movlw	1	; select bank2/3
 11084  26E5  0087               	movwf	7
 11085  26E6  0820               	movf	??_MainT_Initialization,w
 11086  26E7  0081               	movwf	1
 11087                           
 11088                           ;main.c: 100: TMain=&VarTMain;
 11089  26E8  3020               	movlw	_VarTMain& (0+255)
 11090  26E9  00A0               	movwf	??_MainT_Initialization
 11091  26EA  0820               	movf	??_MainT_Initialization,w
 11092  26EB  00FD               	movwf	_TMain
 11093  26EC  0008               	return
 11094  26ED                     __end_of_MainT_Initialization:	
 11095                           
 11096                           	psect	text59
 11097  1677                     __ptext59:	
 11098 ;; *************** function _MainT *****************
 11099 ;; Defined at:
 11100 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;		None
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;		None               void
 11107 ;; Registers used:
 11108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        0 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    6
 11121 ;; This function calls:
 11122 ;;		_setBuz
 11123 ;;		_setLoad_Enable
 11124 ;;		_setRF_Enable
 11125 ;;		_setSw_Enable
 11126 ;;		_setTemp_Enable
 11127 ;; This function is called by:
 11128 ;;		_main
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           
 11133                           ;psect for function _MainT
 11134  1677                     _MainT:	
 11135                           
 11136                           ;main.c: 108: if(!TMain->PowerON)
 11137                           
 11138                           ;incstack = 0
 11139                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11140  1677  087D               	movf	_TMain,w
 11141  1678  0086               	movwf	6
 11142  1679  3001               	movlw	1	; select bank2/3
 11143  167A  0087               	movwf	7
 11144  167B  1801               	btfsc	1,0
 11145  167C  2EC0               	goto	l9514
 11146                           
 11147                           ;main.c: 109: {
 11148                           ;main.c: 110: TMain->PowerCount++;
 11149  167D  0A7D               	incf	_TMain,w
 11150  167E  0086               	movwf	6
 11151  167F  3001               	movlw	1	; select bank2/3
 11152  1680  0087               	movwf	7
 11153  1681  3001               	movlw	1
 11154  1682  0781               	addwf	1,f
 11155  1683  3141               	addfsr 1,1
 11156  1684  1803               	skipnc
 11157  1685  0A81               	incf	1,f
 11158                           
 11159                           ;main.c: 111: if(TMain->PowerCount == 150)
 11160  1686  0A7D               	incf	_TMain,w
 11161  1687  0086               	movwf	6
 11162  1688  3001               	movlw	1	; select bank2/3
 11163  1689  0087               	movwf	7
 11164  168A  3F40               	moviw [0]fsr1
 11165  168B  3A96               	xorlw	150
 11166  168C  1D03               	skipz
 11167  168D  2E90               	goto	u9235
 11168  168E  3F41               	moviw [1]fsr1
 11169  168F  3A00               	xorlw	0
 11170  1690                     u9235:	
 11171  1690  1D03               	skipz
 11172  1691  0008               	return
 11173                           
 11174                           ;main.c: 112: {
 11175                           ;main.c: 113: TMain->PowerCount=0;
 11176  1692  0A7D               	incf	_TMain,w
 11177  1693  0086               	movwf	6
 11178  1694  3001               	movlw	1	; select bank2/3
 11179  1695  0087               	movwf	7
 11180  1696  3000               	movlw	0
 11181  1697  3FC0               	movwi [0]fsr1
 11182  1698  3FC1               	movwi [1]fsr1
 11183                           
 11184                           ;main.c: 114: TMain->PowerON=1;
 11185  1699  087D               	movf	_TMain,w
 11186  169A  0086               	movwf	6
 11187  169B  3001               	movlw	1	; select bank2/3
 11188  169C  0087               	movwf	7
 11189  169D  1401               	bsf	1,0
 11190                           
 11191                           ;main.c: 117: setTemp_Enable(1);
 11192  169E  3001               	movlw	1
 11193  169F  31A5  253E  3196   	fcall	_setTemp_Enable
 11194                           
 11195                           ;main.c: 121: setLoad_Enable(1);
 11196  16A2  3001               	movlw	1
 11197  16A3  31A6  2689  3196   	fcall	_setLoad_Enable
 11198                           
 11199                           ;main.c: 127: setBuz(3,50);
 11200  16A6  3032               	movlw	50
 11201  16A7  0020               	movlb	0	; select bank0
 11202  16A8  00A6               	movwf	setBuz@time
 11203  16A9  3000               	movlw	0
 11204  16AA  00A7               	movwf	setBuz@time+1
 11205  16AB  3003               	movlw	3
 11206  16AC  3195  2587  3196   	fcall	_setBuz
 11207                           
 11208                           ;main.c: 128: TMain->SelfTest=1;
 11209  16AF  087D               	movf	_TMain,w
 11210  16B0  3E03               	addlw	3
 11211  16B1  0086               	movwf	6
 11212  16B2  3001               	movlw	1	; select bank2/3
 11213  16B3  0087               	movwf	7
 11214  16B4  1401               	bsf	1,0
 11215                           
 11216                           ;main.c: 130: setSw_Enable(1);
 11217  16B5  3001               	movlw	1
 11218  16B6  31A6  263A  3196   	fcall	_setSw_Enable
 11219                           
 11220                           ;main.c: 133: setRF_Enable(1,1);
 11221  16B9  0020               	movlb	0	; select bank0
 11222  16BA  01A2               	clrf	setRF_Enable@command
 11223  16BB  0AA2               	incf	setRF_Enable@command,f
 11224  16BC  3001               	movlw	1
 11225  16BD  319A  221A         	fcall	_setRF_Enable
 11226                           
 11227                           ;main.c: 137: }
 11228                           ;main.c: 138: }
 11229  16BF  0008               	return
 11230  16C0                     l9514:	
 11231                           
 11232                           ;main.c: 139: else
 11233                           ;main.c: 140: {
 11234                           ;main.c: 148: TMain->Count1++;
 11235  16C0  087D               	movf	_TMain,w
 11236  16C1  3E06               	addlw	6
 11237  16C2  0086               	movwf	6
 11238  16C3  3001               	movlw	1	; select bank2/3
 11239  16C4  0087               	movwf	7
 11240  16C5  3001               	movlw	1
 11241  16C6  0781               	addwf	1,f
 11242  16C7  3141               	addfsr 1,1
 11243  16C8  1803               	skipnc
 11244  16C9  0A81               	incf	1,f
 11245                           
 11246                           ;main.c: 149: if(TMain->Count1 == 100)
 11247  16CA  087D               	movf	_TMain,w
 11248  16CB  3E06               	addlw	6
 11249  16CC  0086               	movwf	6
 11250  16CD  3001               	movlw	1	; select bank2/3
 11251  16CE  0087               	movwf	7
 11252  16CF  3F40               	moviw [0]fsr1
 11253  16D0  3A64               	xorlw	100
 11254  16D1  1D03               	skipz
 11255  16D2  2ED5               	goto	u9245
 11256  16D3  3F41               	moviw [1]fsr1
 11257  16D4  3A00               	xorlw	0
 11258  16D5                     u9245:	
 11259  16D5  1D03               	skipz
 11260  16D6  0008               	return
 11261                           
 11262                           ;main.c: 150: {
 11263                           ;main.c: 151: TMain->Count1=0;
 11264  16D7  087D               	movf	_TMain,w
 11265  16D8  3E06               	addlw	6
 11266  16D9  0086               	movwf	6
 11267  16DA  3001               	movlw	1	; select bank2/3
 11268  16DB  0087               	movwf	7
 11269  16DC  3000               	movlw	0
 11270  16DD  3FC0               	movwi [0]fsr1
 11271  16DE  3FC1               	movwi [1]fsr1
 11272                           
 11273                           ;main.c: 164: if(TMain->Flag)
 11274  16DF  087D               	movf	_TMain,w
 11275  16E0  0086               	movwf	6
 11276  16E1  3001               	movlw	1	; select bank2/3
 11277  16E2  0087               	movwf	7
 11278  16E3  1D81               	btfss	1,3
 11279  16E4  2EEB               	goto	l9522
 11280                           
 11281                           ;main.c: 165: {
 11282                           ;main.c: 166: TMain->Flag=0;
 11283  16E5  087D               	movf	_TMain,w
 11284  16E6  0086               	movwf	6
 11285  16E7  3001               	movlw	1	; select bank2/3
 11286  16E8  0087               	movwf	7
 11287  16E9  1181               	bcf	1,3
 11288                           
 11289                           ;main.c: 175: }
 11290  16EA  0008               	return
 11291  16EB                     l9522:	
 11292                           
 11293                           ;main.c: 176: else
 11294                           ;main.c: 177: {
 11295                           ;main.c: 178: TMain->Flag=1;
 11296  16EB  087D               	movf	_TMain,w
 11297  16EC  0086               	movwf	6
 11298  16ED  3001               	movlw	1	; select bank2/3
 11299  16EE  0087               	movwf	7
 11300  16EF  1581               	bsf	1,3
 11301  16F0  0008               	return
 11302  16F1                     __end_of_MainT:	
 11303                           
 11304                           	psect	text60
 11305  253E                     __ptext60:	
 11306 ;; *************** function _setTemp_Enable *****************
 11307 ;; Defined at:
 11308 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  command         1    wreg     unsigned char 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  command         1    0[BANK0 ] unsigned char 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, fsr1l, fsr1h
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        1 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    4
 11329 ;; This function calls:
 11330 ;;		Nothing
 11331 ;; This function is called by:
 11332 ;;		_MainT
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           
 11337                           ;psect for function _setTemp_Enable
 11338  253E                     _setTemp_Enable:	
 11339                           
 11340                           ;incstack = 0
 11341                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11342                           ;setTemp_Enable@command stored from wreg
 11343  253E  0020               	movlb	0	; select bank0
 11344  253F  00A0               	movwf	setTemp_Enable@command
 11345                           
 11346                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11347  2540  087C               	movf	_Temp,w
 11348  2541  0086               	movwf	6
 11349  2542  3001               	movlw	1	; select bank2/3
 11350  2543  0087               	movwf	7
 11351  2544  0820               	movf	setTemp_Enable@command,w
 11352  2545  1001               	bcf	1,0
 11353  2546  1D03               	skipz
 11354  2547  1401               	bsf	1,0
 11355  2548  0008               	return
 11356  2549                     __end_of_setTemp_Enable:	
 11357                           
 11358                           	psect	text61
 11359  2689                     __ptext61:	
 11360 ;; *************** function _setLoad_Enable *****************
 11361 ;; Defined at:
 11362 ;;		line 295 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;  command         1    wreg     unsigned char 
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  command         1    0[BANK0 ] unsigned char 
 11367 ;; Return value:  Size  Location     Type
 11368 ;;		None               void
 11369 ;; Registers used:
 11370 ;;		wreg, fsr1l, fsr1h
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;Total ram usage:        1 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    4
 11383 ;; This function calls:
 11384 ;;		Nothing
 11385 ;; This function is called by:
 11386 ;;		_MainT
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _setLoad_Enable
 11392  2689                     _setLoad_Enable:	
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11396                           ;setLoad_Enable@command stored from wreg
 11397  2689  0020               	movlb	0	; select bank0
 11398  268A  00A0               	movwf	setLoad_Enable@command
 11399                           
 11400                           ;OverLoad_B1.c: 297: Load->Enable=command;
 11401  268B  086E               	movf	_Load,w
 11402  268C  0086               	movwf	6
 11403  268D  3002               	movlw	2	; select bank4/5
 11404  268E  0087               	movwf	7
 11405  268F  0820               	movf	setLoad_Enable@command,w
 11406  2690  1001               	bcf	1,0
 11407  2691  1D03               	skipz
 11408  2692  1401               	bsf	1,0
 11409                           
 11410                           ;OverLoad_B1.c: 298: Load->GO=0;
 11411  2693  086E               	movf	_Load,w
 11412  2694  0086               	movwf	6
 11413  2695  3002               	movlw	2	; select bank4/5
 11414  2696  0087               	movwf	7
 11415  2697  1081               	bcf	1,1
 11416  2698  0008               	return
 11417  2699                     __end_of_setLoad_Enable:	
 11418                           
 11419                           	psect	text62
 11420  0050                     __ptext62:	
 11421 ;; *************** function _Load_Main *****************
 11422 ;; Defined at:
 11423 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11424 ;; Parameters:    Size  Location     Type
 11425 ;;		None
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;  i               1   17[BANK0 ] unsigned char 
 11428 ;; Return value:  Size  Location     Type
 11429 ;;		None               void
 11430 ;; Registers used:
 11431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;Total ram usage:        5 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    9
 11444 ;; This function calls:
 11445 ;;		___lwdiv
 11446 ;;		___wmul
 11447 ;;		_getPF_Safe
 11448 ;;		_getTemp_Safe
 11449 ;;		_setDimmerLights_Clear
 11450 ;;		_setLoad_AH_AL_Restore
 11451 ;;		_setLoad_Exceptions
 11452 ;; This function is called by:
 11453 ;;		_main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _Load_Main
 11459  0050                     _Load_Main:	
 11460                           
 11461                           ;OverLoad_B1.c: 47: char i;
 11462                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11466  0050  0020               	movlb	0	; select bank0
 11467  0051  086E               	movf	_Load,w
 11468  0052  0086               	movwf	6
 11469  0053  3002               	movlw	2	; select bank4/5
 11470  0054  0087               	movwf	7
 11471  0055  1E81               	btfss	1,5
 11472  0056  287D               	goto	l9558
 11473                           
 11474                           ;OverLoad_B1.c: 49: {
 11475                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11476  0057  086E               	movf	_Load,w
 11477  0058  3E03               	addlw	3
 11478  0059  0086               	movwf	6
 11479  005A  3002               	movlw	2	; select bank4/5
 11480  005B  0087               	movwf	7
 11481  005C  3001               	movlw	1
 11482  005D  0781               	addwf	1,f
 11483  005E  3141               	addfsr 1,1
 11484  005F  1803               	skipnc
 11485  0060  0A81               	incf	1,f
 11486                           
 11487                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11488  0061  086E               	movf	_Load,w
 11489  0062  3E03               	addlw	3
 11490  0063  0086               	movwf	6
 11491  0064  3002               	movlw	2	; select bank4/5
 11492  0065  0087               	movwf	7
 11493  0066  3F40               	moviw [0]fsr1
 11494  0067  00AD               	movwf	??_Load_Main
 11495  0068  3F41               	moviw [1]fsr1
 11496  0069  00AE               	movwf	??_Load_Main+1
 11497  006A  3003               	movlw	3
 11498  006B  022E               	subwf	??_Load_Main+1,w
 11499  006C  30E8               	movlw	232
 11500  006D  1903               	skipnz
 11501  006E  022D               	subwf	??_Load_Main,w
 11502  006F  1C03               	skipc
 11503  0070  0008               	return
 11504                           
 11505                           ;OverLoad_B1.c: 52: {
 11506                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11507  0071  086E               	movf	_Load,w
 11508  0072  3E03               	addlw	3
 11509  0073  0086               	movwf	6
 11510  0074  3002               	movlw	2	; select bank4/5
 11511  0075  0087               	movwf	7
 11512  0076  3000               	movlw	0
 11513  0077  3FC0               	movwi [0]fsr1
 11514  0078  3FC1               	movwi [1]fsr1
 11515                           
 11516                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11517  0079  3000               	movlw	0
 11518  007A  3190  2003         	fcall	_setLoad_Exceptions
 11519                           
 11520                           ;OverLoad_B1.c: 55: }
 11521                           ;OverLoad_B1.c: 56: }
 11522  007C  0008               	return
 11523  007D                     l9558:	
 11524                           
 11525                           ;OverLoad_B1.c: 57: else
 11526                           ;OverLoad_B1.c: 58: {
 11527                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11528  007D  0020               	movlb	0	; select bank0
 11529  007E  086E               	movf	_Load,w
 11530  007F  0086               	movwf	6
 11531  0080  3002               	movlw	2	; select bank4/5
 11532  0081  0087               	movwf	7
 11533  0082  1E01               	btfss	1,4
 11534  0083  2B44               	goto	l9666
 11535                           
 11536                           ;OverLoad_B1.c: 60: {
 11537                           ;OverLoad_B1.c: 61: Load->Time++;
 11538  0084  0A6E               	incf	_Load,w
 11539  0085  0086               	movwf	6
 11540  0086  3002               	movlw	2	; select bank4/5
 11541  0087  0087               	movwf	7
 11542  0088  3001               	movlw	1
 11543  0089  0781               	addwf	1,f
 11544  008A  3141               	addfsr 1,1
 11545  008B  1803               	skipnc
 11546  008C  0A81               	incf	1,f
 11547                           
 11548                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11549  008D  0A6E               	incf	_Load,w
 11550  008E  0086               	movwf	6
 11551  008F  3002               	movlw	2	; select bank4/5
 11552  0090  0087               	movwf	7
 11553  0091  3F40               	moviw [0]fsr1
 11554  0092  00AD               	movwf	??_Load_Main
 11555  0093  3F41               	moviw [1]fsr1
 11556  0094  00AE               	movwf	??_Load_Main+1
 11557  0095  3000               	movlw	0
 11558  0096  022E               	subwf	??_Load_Main+1,w
 11559  0097  3005               	movlw	5
 11560  0098  1903               	skipnz
 11561  0099  022D               	subwf	??_Load_Main,w
 11562  009A  1C03               	skipc
 11563  009B  0008               	return
 11564                           
 11565                           ;OverLoad_B1.c: 63: {
 11566                           ;OverLoad_B1.c: 64: Load->Time=0;
 11567  009C  0A6E               	incf	_Load,w
 11568  009D  0086               	movwf	6
 11569  009E  3002               	movlw	2	; select bank4/5
 11570  009F  0087               	movwf	7
 11571  00A0  3000               	movlw	0
 11572  00A1  3FC0               	movwi [0]fsr1
 11573  00A2  3FC1               	movwi [1]fsr1
 11574                           
 11575                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11576  00A3  086E               	movf	_Load,w
 11577  00A4  0086               	movwf	6
 11578  00A5  3002               	movlw	2	; select bank4/5
 11579  00A6  0087               	movwf	7
 11580  00A7  1201               	bcf	1,4
 11581                           
 11582                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11583  00A8  086E               	movf	_Load,w
 11584  00A9  3E45               	addlw	69
 11585  00AA  0086               	movwf	6
 11586  00AB  3002               	movlw	2	; select bank4/5
 11587  00AC  0087               	movwf	7
 11588  00AD  086E               	movf	_Load,w
 11589  00AE  3E44               	addlw	68
 11590  00AF  0084               	movwf	4
 11591  00B0  3002               	movlw	2	; select bank4/5
 11592  00B1  0085               	movwf	5
 11593  00B2  0800               	movf	0,w
 11594  00B3  00AD               	movwf	??_Load_Main
 11595  00B4  086E               	movf	_Load,w
 11596  00B5  3E43               	addlw	67
 11597  00B6  0084               	movwf	4
 11598  00B7  3002               	movlw	2	; select bank4/5
 11599  00B8  0085               	movwf	5
 11600  00B9  0800               	movf	0,w
 11601  00BA  072D               	addwf	??_Load_Main,w
 11602  00BB  0701               	addwf	1,w
 11603  00BC  00AE               	movwf	??_Load_Main+1
 11604  00BD  086E               	movf	_Load,w
 11605  00BE  3E3E               	addlw	62
 11606  00BF  0086               	movwf	6
 11607  00C0  3002               	movlw	2	; select bank4/5
 11608  00C1  0087               	movwf	7
 11609  00C2  082E               	movf	??_Load_Main+1,w
 11610  00C3  0081               	movwf	1
 11611                           
 11612                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11613  00C4  01B1               	clrf	Load_Main@i
 11614  00C5  0AB1               	incf	Load_Main@i,f
 11615  00C6  3004               	movlw	4
 11616  00C7  0231               	subwf	Load_Main@i,w
 11617  00C8  1803               	btfsc	3,0
 11618  00C9  28F8               	goto	l9580
 11619  00CA                     l9574:	
 11620                           
 11621                           ;OverLoad_B1.c: 68: {
 11622                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11623  00CA  3531               	lslf	Load_Main@i,w
 11624  00CB  3E08               	addlw	8
 11625  00CC  076E               	addwf	_Load,w
 11626  00CD  00AD               	movwf	??_Load_Main
 11627  00CE  082D               	movf	??_Load_Main,w
 11628  00CF  0086               	movwf	6
 11629  00D0  3002               	movlw	2	; select bank4/5
 11630  00D1  0087               	movwf	7
 11631  00D2  086E               	movf	_Load,w
 11632  00D3  3E2E               	addlw	46
 11633  00D4  0084               	movwf	4
 11634  00D5  3002               	movlw	2	; select bank4/5
 11635  00D6  0085               	movwf	5
 11636  00D7  3F40               	moviw [0]fsr1
 11637  00D8  0780               	addwf	0,f
 11638  00D9  3101               	addfsr 0,1
 11639  00DA  3F41               	moviw [1]fsr1
 11640  00DB  3D80               	addwfc	0,f
 11641  00DC  313F               	addfsr 0,-1
 11642                           
 11643                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11644  00DD  3531               	lslf	Load_Main@i,w
 11645  00DE  3E1A               	addlw	26
 11646  00DF  076E               	addwf	_Load,w
 11647  00E0  00AD               	movwf	??_Load_Main
 11648  00E1  082D               	movf	??_Load_Main,w
 11649  00E2  0086               	movwf	6
 11650  00E3  3002               	movlw	2	; select bank4/5
 11651  00E4  0087               	movwf	7
 11652  00E5  086E               	movf	_Load,w
 11653  00E6  3E30               	addlw	48
 11654  00E7  0084               	movwf	4
 11655  00E8  3002               	movlw	2	; select bank4/5
 11656  00E9  0085               	movwf	5
 11657  00EA  3F40               	moviw [0]fsr1
 11658  00EB  0780               	addwf	0,f
 11659  00EC  3101               	addfsr 0,1
 11660  00ED  3F41               	moviw [1]fsr1
 11661  00EE  3D80               	addwfc	0,f
 11662  00EF  313F               	addfsr 0,-1
 11663  00F0  3001               	movlw	1
 11664  00F1  00AD               	movwf	??_Load_Main
 11665  00F2  082D               	movf	??_Load_Main,w
 11666  00F3  07B1               	addwf	Load_Main@i,f
 11667  00F4  3004               	movlw	4
 11668  00F5  0231               	subwf	Load_Main@i,w
 11669  00F6  1C03               	skipc
 11670  00F7  28CA               	goto	l9574
 11671  00F8                     l9580:	
 11672                           
 11673                           ;OverLoad_B1.c: 71: }
 11674                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11675  00F8  3003               	movlw	3
 11676  00F9  00A0               	movwf	___lwdiv@divisor
 11677  00FA  3000               	movlw	0
 11678  00FB  00A1               	movwf	___lwdiv@divisor+1
 11679  00FC  086E               	movf	_Load,w
 11680  00FD  3E2E               	addlw	46
 11681  00FE  0086               	movwf	6
 11682  00FF  3002               	movlw	2	; select bank4/5
 11683  0100  0087               	movwf	7
 11684  0101  3F40               	moviw [0]fsr1
 11685  0102  00A2               	movwf	___lwdiv@dividend
 11686  0103  3F41               	moviw [1]fsr1
 11687  0104  00A3               	movwf	___lwdiv@dividend+1
 11688  0105  319C  2420  3180   	fcall	___lwdiv
 11689  0108  0020               	movlb	0	; select bank0
 11690  0109  086E               	movf	_Load,w
 11691  010A  3E2E               	addlw	46
 11692  010B  0086               	movwf	6
 11693  010C  3002               	movlw	2	; select bank4/5
 11694  010D  0087               	movwf	7
 11695  010E  0820               	movf	?___lwdiv,w
 11696  010F  3FC0               	movwi [0]fsr1
 11697  0110  0821               	movf	?___lwdiv+1,w
 11698  0111  3FC1               	movwi [1]fsr1
 11699                           
 11700                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11701  0112  3003               	movlw	3
 11702  0113  00A0               	movwf	___lwdiv@divisor
 11703  0114  3000               	movlw	0
 11704  0115  00A1               	movwf	___lwdiv@divisor+1
 11705  0116  086E               	movf	_Load,w
 11706  0117  3E30               	addlw	48
 11707  0118  0086               	movwf	6
 11708  0119  3002               	movlw	2	; select bank4/5
 11709  011A  0087               	movwf	7
 11710  011B  3F40               	moviw [0]fsr1
 11711  011C  00A2               	movwf	___lwdiv@dividend
 11712  011D  3F41               	moviw [1]fsr1
 11713  011E  00A3               	movwf	___lwdiv@dividend+1
 11714  011F  319C  2420  3180   	fcall	___lwdiv
 11715  0122  0020               	movlb	0	; select bank0
 11716  0123  086E               	movf	_Load,w
 11717  0124  3E30               	addlw	48
 11718  0125  0086               	movwf	6
 11719  0126  3002               	movlw	2	; select bank4/5
 11720  0127  0087               	movwf	7
 11721  0128  0820               	movf	?___lwdiv,w
 11722  0129  3FC0               	movwi [0]fsr1
 11723  012A  0821               	movf	?___lwdiv+1,w
 11724  012B  3FC1               	movwi [1]fsr1
 11725                           
 11726                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11727  012C  086E               	movf	_Load,w
 11728  012D  3E2E               	addlw	46
 11729  012E  0086               	movwf	6
 11730  012F  3002               	movlw	2	; select bank4/5
 11731  0130  0087               	movwf	7
 11732  0131  3F40               	moviw [0]fsr1
 11733  0132  00AD               	movwf	??_Load_Main
 11734  0133  3F41               	moviw [1]fsr1
 11735  0134  00AE               	movwf	??_Load_Main+1
 11736  0135  086E               	movf	_Load,w
 11737  0136  3E30               	addlw	48
 11738  0137  0086               	movwf	6
 11739  0138  3002               	movlw	2	; select bank4/5
 11740  0139  0087               	movwf	7
 11741  013A  3F40               	moviw [0]fsr1
 11742  013B  00AF               	movwf	??_Load_Main+2
 11743  013C  3F41               	moviw [1]fsr1
 11744  013D  00B0               	movwf	??_Load_Main+3
 11745  013E  082E               	movf	??_Load_Main+1,w
 11746  013F  0230               	subwf	??_Load_Main+3,w
 11747  0140  1D03               	skipz
 11748  0141  2944               	goto	u9375
 11749  0142  082D               	movf	??_Load_Main,w
 11750  0143  022F               	subwf	??_Load_Main+2,w
 11751  0144                     u9375:	
 11752  0144  1803               	skipnc
 11753  0145  2AC7               	goto	l9648
 11754                           
 11755                           ;OverLoad_B1.c: 75: {
 11756                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11757  0146  086E               	movf	_Load,w
 11758  0147  3E2E               	addlw	46
 11759  0148  0086               	movwf	6
 11760  0149  3002               	movlw	2	; select bank4/5
 11761  014A  0087               	movwf	7
 11762  014B  086E               	movf	_Load,w
 11763  014C  3E30               	addlw	48
 11764  014D  0084               	movwf	4
 11765  014E  3002               	movlw	2	; select bank4/5
 11766  014F  0085               	movwf	5
 11767  0150  3F00               	moviw [0]fsr0
 11768  0151  00AD               	movwf	??_Load_Main
 11769  0152  3F01               	moviw [1]fsr0
 11770  0153  00AE               	movwf	??_Load_Main+1
 11771  0154  09AD               	comf	??_Load_Main,f
 11772  0155  09AE               	comf	??_Load_Main+1,f
 11773  0156  0AAD               	incf	??_Load_Main,f
 11774  0157  1903               	skipnz
 11775  0158  0AAE               	incf	??_Load_Main+1,f
 11776  0159  3F40               	moviw [0]fsr1
 11777  015A  072D               	addwf	??_Load_Main,w
 11778  015B  00AF               	movwf	??_Load_Main+2
 11779  015C  3F41               	moviw [1]fsr1
 11780  015D  3D2E               	addwfc	??_Load_Main+1,w
 11781  015E  00B0               	movwf	??_Load_Main+3
 11782  015F  086E               	movf	_Load,w
 11783  0160  3E2C               	addlw	44
 11784  0161  0086               	movwf	6
 11785  0162  3002               	movlw	2	; select bank4/5
 11786  0163  0087               	movwf	7
 11787  0164  082F               	movf	??_Load_Main+2,w
 11788  0165  3FC0               	movwi [0]fsr1
 11789  0166  0830               	movf	??_Load_Main+3,w
 11790  0167  3FC1               	movwi [1]fsr1
 11791                           
 11792                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11793  0168  086E               	movf	_Load,w
 11794  0169  3E3A               	addlw	58
 11795  016A  0086               	movwf	6
 11796  016B  3002               	movlw	2	; select bank4/5
 11797  016C  0087               	movwf	7
 11798  016D  3002               	movlw	2
 11799  016E  0201               	subwf	1,w
 11800  016F  1803               	skipnc
 11801  0170  29C1               	goto	l9602
 11802                           
 11803                           ;OverLoad_B1.c: 79: {
 11804                           ;OverLoad_B1.c: 80: Load->Count++;
 11805  0171  3001               	movlw	1
 11806  0172  00AD               	movwf	??_Load_Main
 11807  0173  086E               	movf	_Load,w
 11808  0174  3E3A               	addlw	58
 11809  0175  0086               	movwf	6
 11810  0176  3002               	movlw	2	; select bank4/5
 11811  0177  0087               	movwf	7
 11812  0178  082D               	movf	??_Load_Main,w
 11813  0179  0781               	addwf	1,f
 11814                           
 11815                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11816  017A  086E               	movf	_Load,w
 11817  017B  3E3A               	addlw	58
 11818  017C  0086               	movwf	6
 11819  017D  3002               	movlw	2	; select bank4/5
 11820  017E  0087               	movwf	7
 11821  017F  0801               	movf	1,w
 11822  0180  3A01               	xorlw	1
 11823  0181  1D03               	skipz
 11824  0182  298D               	goto	l9594
 11825                           
 11826                           ;OverLoad_B1.c: 82: {
 11827                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11828  0183  086E               	movf	_Load,w
 11829  0184  3E36               	addlw	54
 11830  0185  0086               	movwf	6
 11831  0186  3002               	movlw	2	; select bank4/5
 11832  0187  0087               	movwf	7
 11833  0188  30F4               	movlw	244
 11834  0189  3FC0               	movwi [0]fsr1
 11835  018A  3001               	movlw	1
 11836  018B  3FC1               	movwi [1]fsr1
 11837                           
 11838                           ;OverLoad_B1.c: 84: }
 11839  018C  29C1               	goto	l9602
 11840  018D                     l9594:	
 11841                           
 11842                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11843  018D  086E               	movf	_Load,w
 11844  018E  3E3A               	addlw	58
 11845  018F  0086               	movwf	6
 11846  0190  3002               	movlw	2	; select bank4/5
 11847  0191  0087               	movwf	7
 11848  0192  0801               	movf	1,w
 11849  0193  3A02               	xorlw	2
 11850  0194  1D03               	skipz
 11851  0195  29C1               	goto	l9602
 11852                           
 11853                           ;OverLoad_B1.c: 86: {
 11854                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11855  0196  086E               	movf	_Load,w
 11856  0197  3E3E               	addlw	62
 11857  0198  0086               	movwf	6
 11858  0199  3002               	movlw	2	; select bank4/5
 11859  019A  0087               	movwf	7
 11860  019B  0801               	movf	1,w
 11861  019C  3A01               	xorlw	1
 11862  019D  1D03               	skipz
 11863  019E  29A9               	goto	l9600
 11864                           
 11865                           ;OverLoad_B1.c: 88: {
 11866                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x42;
 11867  019F  086E               	movf	_Load,w
 11868  01A0  3E36               	addlw	54
 11869  01A1  0086               	movwf	6
 11870  01A2  3002               	movlw	2	; select bank4/5
 11871  01A3  0087               	movwf	7
 11872  01A4  3042               	movlw	66
 11873  01A5  3FC0               	movwi [0]fsr1
 11874  01A6  3000               	movlw	0
 11875  01A7  3FC1               	movwi [1]fsr1
 11876                           
 11877                           ;OverLoad_B1.c: 90: }
 11878  01A8  29C1               	goto	l9602
 11879  01A9                     l9600:	
 11880                           
 11881                           ;OverLoad_B1.c: 91: else
 11882                           ;OverLoad_B1.c: 92: {
 11883                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x42+Load->TotalLoad)-0x08;
 11884  01A9  086E               	movf	_Load,w
 11885  01AA  3E06               	addlw	6
 11886  01AB  0086               	movwf	6
 11887  01AC  3002               	movlw	2	; select bank4/5
 11888  01AD  0087               	movwf	7
 11889  01AE  3F40               	moviw [0]fsr1
 11890  01AF  00AD               	movwf	??_Load_Main
 11891  01B0  3F41               	moviw [1]fsr1
 11892  01B1  00AE               	movwf	??_Load_Main+1
 11893  01B2  082D               	movf	??_Load_Main,w
 11894  01B3  3E3A               	addlw	58
 11895  01B4  00AF               	movwf	??_Load_Main+2
 11896  01B5  3000               	movlw	0
 11897  01B6  3D2E               	addwfc	??_Load_Main+1,w
 11898  01B7  00B0               	movwf	??_Load_Main+3
 11899  01B8  086E               	movf	_Load,w
 11900  01B9  3E36               	addlw	54
 11901  01BA  0086               	movwf	6
 11902  01BB  3002               	movlw	2	; select bank4/5
 11903  01BC  0087               	movwf	7
 11904  01BD  082F               	movf	??_Load_Main+2,w
 11905  01BE  3FC0               	movwi [0]fsr1
 11906  01BF  0830               	movf	??_Load_Main+3,w
 11907  01C0  3FC1               	movwi [1]fsr1
 11908  01C1                     l9602:	
 11909                           
 11910                           ;OverLoad_B1.c: 94: }
 11911                           ;OverLoad_B1.c: 95: }
 11912                           ;OverLoad_B1.c: 96: }
 11913                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11914  01C1  086E               	movf	_Load,w
 11915  01C2  3E36               	addlw	54
 11916  01C3  0086               	movwf	6
 11917  01C4  3002               	movlw	2	; select bank4/5
 11918  01C5  0087               	movwf	7
 11919  01C6  3F40               	moviw [0]fsr1
 11920  01C7  00AD               	movwf	??_Load_Main
 11921  01C8  3F41               	moviw [1]fsr1
 11922  01C9  00AE               	movwf	??_Load_Main+1
 11923  01CA  086E               	movf	_Load,w
 11924  01CB  3E2C               	addlw	44
 11925  01CC  0086               	movwf	6
 11926  01CD  3002               	movlw	2	; select bank4/5
 11927  01CE  0087               	movwf	7
 11928  01CF  3F40               	moviw [0]fsr1
 11929  01D0  00AF               	movwf	??_Load_Main+2
 11930  01D1  3F41               	moviw [1]fsr1
 11931  01D2  00B0               	movwf	??_Load_Main+3
 11932  01D3  082E               	movf	??_Load_Main+1,w
 11933  01D4  0230               	subwf	??_Load_Main+3,w
 11934  01D5  1D03               	skipz
 11935  01D6  29D9               	goto	u9425
 11936  01D7  082D               	movf	??_Load_Main,w
 11937  01D8  022F               	subwf	??_Load_Main+2,w
 11938  01D9                     u9425:	
 11939  01D9  1C03               	skipc
 11940  01DA  2A47               	goto	l9622
 11941                           
 11942                           ;OverLoad_B1.c: 99: {
 11943                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11944  01DB  3001               	movlw	1
 11945  01DC  00AD               	movwf	??_Load_Main
 11946  01DD  086E               	movf	_Load,w
 11947  01DE  3E3C               	addlw	60
 11948  01DF  0086               	movwf	6
 11949  01E0  3002               	movlw	2	; select bank4/5
 11950  01E1  0087               	movwf	7
 11951  01E2  082D               	movf	??_Load_Main,w
 11952  01E3  0781               	addwf	1,f
 11953                           
 11954                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11955  01E4  086E               	movf	_Load,w
 11956  01E5  3E3C               	addlw	60
 11957  01E6  0086               	movwf	6
 11958  01E7  3002               	movlw	2	; select bank4/5
 11959  01E8  0087               	movwf	7
 11960  01E9  3003               	movlw	3
 11961  01EA  0201               	subwf	1,w
 11962  01EB  1C03               	skipc
 11963  01EC  2AC7               	goto	l9648
 11964                           
 11965                           ;OverLoad_B1.c: 102: {
 11966                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11967  01ED  086E               	movf	_Load,w
 11968  01EE  3E3C               	addlw	60
 11969  01EF  0086               	movwf	6
 11970  01F0  3002               	movlw	2	; select bank4/5
 11971  01F1  0087               	movwf	7
 11972  01F2  0181               	clrf	1
 11973                           
 11974                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11975  01F3  3001               	movlw	1
 11976  01F4  3190  2003  3180   	fcall	_setLoad_Exceptions
 11977                           
 11978                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 11979  01F7  0020               	movlb	0	; select bank0
 11980  01F8  086E               	movf	_Load,w
 11981  01F9  3E2C               	addlw	44
 11982  01FA  0086               	movwf	6
 11983  01FB  3002               	movlw	2	; select bank4/5
 11984  01FC  0087               	movwf	7
 11985  01FD  3F40               	moviw [0]fsr1
 11986  01FE  00AD               	movwf	??_Load_Main
 11987  01FF  3F41               	moviw [1]fsr1
 11988  0200  00AE               	movwf	??_Load_Main+1
 11989  0201  082E               	movf	??_Load_Main+1,w
 11990  0202  00AF               	movwf	??_Load_Main+2
 11991  0203  086F               	movf	_Product,w
 11992  0204  3E04               	addlw	4
 11993  0205  0086               	movwf	6
 11994  0206  3001               	movlw	1	; select bank2/3
 11995  0207  0087               	movwf	7
 11996  0208  082F               	movf	??_Load_Main+2,w
 11997  0209  0081               	movwf	1
 11998                           
 11999                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 12000  020A  086E               	movf	_Load,w
 12001  020B  3E2C               	addlw	44
 12002  020C  0086               	movwf	6
 12003  020D  3002               	movlw	2	; select bank4/5
 12004  020E  0087               	movwf	7
 12005  020F  0801               	movf	1,w
 12006  0210  00AD               	movwf	??_Load_Main
 12007  0211  086F               	movf	_Product,w
 12008  0212  3E05               	addlw	5
 12009  0213  0086               	movwf	6
 12010  0214  3001               	movlw	1	; select bank2/3
 12011  0215  0087               	movwf	7
 12012  0216  082D               	movf	??_Load_Main,w
 12013  0217  0081               	movwf	1
 12014                           
 12015                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 12016  0218  086E               	movf	_Load,w
 12017  0219  3E36               	addlw	54
 12018  021A  0086               	movwf	6
 12019  021B  3002               	movlw	2	; select bank4/5
 12020  021C  0087               	movwf	7
 12021  021D  3F40               	moviw [0]fsr1
 12022  021E  00AD               	movwf	??_Load_Main
 12023  021F  3F41               	moviw [1]fsr1
 12024  0220  00AE               	movwf	??_Load_Main+1
 12025  0221  082E               	movf	??_Load_Main+1,w
 12026  0222  00AF               	movwf	??_Load_Main+2
 12027  0223  086F               	movf	_Product,w
 12028  0224  3E10               	addlw	16
 12029  0225  0086               	movwf	6
 12030  0226  3001               	movlw	1	; select bank2/3
 12031  0227  0087               	movwf	7
 12032  0228  082F               	movf	??_Load_Main+2,w
 12033  0229  0081               	movwf	1
 12034                           
 12035                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 12036  022A  086E               	movf	_Load,w
 12037  022B  3E36               	addlw	54
 12038  022C  0086               	movwf	6
 12039  022D  3002               	movlw	2	; select bank4/5
 12040  022E  0087               	movwf	7
 12041  022F  0801               	movf	1,w
 12042  0230  00AD               	movwf	??_Load_Main
 12043  0231  086F               	movf	_Product,w
 12044  0232  3E11               	addlw	17
 12045  0233  0086               	movwf	6
 12046  0234  3001               	movlw	1	; select bank2/3
 12047  0235  0087               	movwf	7
 12048  0236  082D               	movf	??_Load_Main,w
 12049  0237  0081               	movwf	1
 12050                           
 12051                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 12052  0238  086E               	movf	_Load,w
 12053  0239  3E3E               	addlw	62
 12054  023A  0086               	movwf	6
 12055  023B  3002               	movlw	2	; select bank4/5
 12056  023C  0087               	movwf	7
 12057  023D  0801               	movf	1,w
 12058  023E  00AD               	movwf	??_Load_Main
 12059  023F  086F               	movf	_Product,w
 12060  0240  3E08               	addlw	8
 12061  0241  0086               	movwf	6
 12062  0242  3001               	movlw	1	; select bank2/3
 12063  0243  0087               	movwf	7
 12064  0244  082D               	movf	??_Load_Main,w
 12065  0245  0081               	movwf	1
 12066                           
 12067                           ;OverLoad_B1.c: 113: }
 12068                           ;OverLoad_B1.c: 114: }
 12069  0246  2AC7               	goto	l9648
 12070  0247                     l9622:	
 12071                           
 12072                           ;OverLoad_B1.c: 115: else
 12073                           ;OverLoad_B1.c: 116: {
 12074                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 12075  0247  086E               	movf	_Load,w
 12076  0248  3E3C               	addlw	60
 12077  0249  0086               	movwf	6
 12078  024A  3002               	movlw	2	; select bank4/5
 12079  024B  0087               	movwf	7
 12080  024C  0181               	clrf	1
 12081                           
 12082                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 12083  024D  086E               	movf	_Load,w
 12084  024E  3E42               	addlw	66
 12085  024F  0086               	movwf	6
 12086  0250  3002               	movlw	2	; select bank4/5
 12087  0251  0087               	movwf	7
 12088  0252  300A               	movlw	10
 12089  0253  0201               	subwf	1,w
 12090  0254  1803               	skipnc
 12091  0255  2A5F               	goto	l9628
 12092                           
 12093                           ;OverLoad_B1.c: 119: {
 12094                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 12095  0256  3001               	movlw	1
 12096  0257  00AD               	movwf	??_Load_Main
 12097  0258  086E               	movf	_Load,w
 12098  0259  3E42               	addlw	66
 12099  025A  0086               	movwf	6
 12100  025B  3002               	movlw	2	; select bank4/5
 12101  025C  0087               	movwf	7
 12102  025D  082D               	movf	??_Load_Main,w
 12103  025E  0781               	addwf	1,f
 12104  025F                     l9628:	
 12105                           
 12106                           ;OverLoad_B1.c: 121: }
 12107                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 12108  025F  086E               	movf	_Load,w
 12109  0260  3E42               	addlw	66
 12110  0261  0086               	movwf	6
 12111  0262  3002               	movlw	2	; select bank4/5
 12112  0263  0087               	movwf	7
 12113  0264  300A               	movlw	10
 12114  0265  0201               	subwf	1,w
 12115  0266  1C03               	skipc
 12116  0267  2AC7               	goto	l9648
 12117                           
 12118                           ;OverLoad_B1.c: 123: {
 12119                           ;OverLoad_B1.c: 124: Load->Safe=1;
 12120  0268  086E               	movf	_Load,w
 12121  0269  0086               	movwf	6
 12122  026A  3002               	movlw	2	; select bank4/5
 12123  026B  0087               	movwf	7
 12124  026C  1581               	bsf	1,3
 12125                           
 12126                           ;OverLoad_B1.c: 128: setDimmerLights_Clear(1,1);
 12127  026D  01A2               	clrf	setDimmerLights_Clear@command
 12128  026E  0AA2               	incf	setDimmerLights_Clear@command,f
 12129  026F  3001               	movlw	1
 12130  0270  31A6  2679  3180   	fcall	_setDimmerLights_Clear
 12131                           
 12132                           ;OverLoad_B1.c: 132: ;;
 12133                           ;OverLoad_B1.c: 157: if(Load->StatusOn)
 12134  0273  0020               	movlb	0	; select bank0
 12135  0274  086E               	movf	_Load,w
 12136  0275  3E46               	addlw	70
 12137  0276  0086               	movwf	6
 12138  0277  3002               	movlw	2	; select bank4/5
 12139  0278  0087               	movwf	7
 12140  0279  1C01               	btfss	1,0
 12141  027A  2A8F               	goto	l9640
 12142                           
 12143                           ;OverLoad_B1.c: 158: {
 12144                           ;OverLoad_B1.c: 159: Load->StatusOn=0;
 12145  027B  086E               	movf	_Load,w
 12146  027C  3E46               	addlw	70
 12147  027D  0086               	movwf	6
 12148  027E  3002               	movlw	2	; select bank4/5
 12149  027F  0087               	movwf	7
 12150  0280  1001               	bcf	1,0
 12151                           
 12152                           ;OverLoad_B1.c: 160: Load->TotalLoad=Load->AD;
 12153  0281  086E               	movf	_Load,w
 12154  0282  3E2C               	addlw	44
 12155  0283  0086               	movwf	6
 12156  0284  3002               	movlw	2	; select bank4/5
 12157  0285  0087               	movwf	7
 12158  0286  086E               	movf	_Load,w
 12159  0287  3E06               	addlw	6
 12160  0288  0084               	movwf	4
 12161  0289  3002               	movlw	2	; select bank4/5
 12162  028A  0085               	movwf	5
 12163  028B  3F40               	moviw [0]fsr1
 12164  028C  3F80               	movwi [0]fsr0
 12165  028D  3F41               	moviw [1]fsr1
 12166  028E  3F81               	movwi [1]fsr0
 12167  028F                     l9640:	
 12168                           
 12169                           ;OverLoad_B1.c: 162: }
 12170                           ;OverLoad_B1.c: 164: if(Load->StatusOff)
 12171  028F  086E               	movf	_Load,w
 12172  0290  3E46               	addlw	70
 12173  0291  0086               	movwf	6
 12174  0292  3002               	movlw	2	; select bank4/5
 12175  0293  0087               	movwf	7
 12176  0294  1C81               	btfss	1,1
 12177  0295  2AC7               	goto	l9648
 12178                           
 12179                           ;OverLoad_B1.c: 165: {
 12180                           ;OverLoad_B1.c: 166: Load->StatusOff=0;
 12181  0296  086E               	movf	_Load,w
 12182  0297  3E46               	addlw	70
 12183  0298  0086               	movwf	6
 12184  0299  3002               	movlw	2	; select bank4/5
 12185  029A  0087               	movwf	7
 12186  029B  1081               	bcf	1,1
 12187                           
 12188                           ;OverLoad_B1.c: 167: Load->TotalLoad=Load->AD;
 12189  029C  086E               	movf	_Load,w
 12190  029D  3E2C               	addlw	44
 12191  029E  0086               	movwf	6
 12192  029F  3002               	movlw	2	; select bank4/5
 12193  02A0  0087               	movwf	7
 12194  02A1  086E               	movf	_Load,w
 12195  02A2  3E06               	addlw	6
 12196  02A3  0084               	movwf	4
 12197  02A4  3002               	movlw	2	; select bank4/5
 12198  02A5  0085               	movwf	5
 12199  02A6  3F40               	moviw [0]fsr1
 12200  02A7  3F80               	movwi [0]fsr0
 12201  02A8  3F41               	moviw [1]fsr1
 12202  02A9  3F81               	movwi [1]fsr0
 12203                           
 12204                           ;OverLoad_B1.c: 168: Load->JudgeValue=0x42*Load->LightsCount;
 12205  02AA  086E               	movf	_Load,w
 12206  02AB  3E3E               	addlw	62
 12207  02AC  0086               	movwf	6
 12208  02AD  3002               	movlw	2	; select bank4/5
 12209  02AE  0087               	movwf	7
 12210  02AF  0801               	movf	1,w
 12211  02B0  00AD               	movwf	??_Load_Main
 12212  02B1  01AE               	clrf	??_Load_Main+1
 12213  02B2  082D               	movf	??_Load_Main,w
 12214  02B3  00A0               	movwf	___wmul@multiplier
 12215  02B4  082E               	movf	??_Load_Main+1,w
 12216  02B5  00A1               	movwf	___wmul@multiplier+1
 12217  02B6  3042               	movlw	66
 12218  02B7  00A2               	movwf	___wmul@multiplicand
 12219  02B8  3000               	movlw	0
 12220  02B9  00A3               	movwf	___wmul@multiplicand+1
 12221  02BA  3198  2099  3180   	fcall	___wmul
 12222  02BD  0020               	movlb	0	; select bank0
 12223  02BE  086E               	movf	_Load,w
 12224  02BF  3E36               	addlw	54
 12225  02C0  0086               	movwf	6
 12226  02C1  3002               	movlw	2	; select bank4/5
 12227  02C2  0087               	movwf	7
 12228  02C3  0820               	movf	?___wmul,w
 12229  02C4  3FC0               	movwi [0]fsr1
 12230  02C5  0821               	movf	?___wmul+1,w
 12231  02C6  3FC1               	movwi [1]fsr1
 12232  02C7                     l9648:	
 12233                           
 12234                           ;OverLoad_B1.c: 169: }
 12235                           ;OverLoad_B1.c: 170: }
 12236                           ;OverLoad_B1.c: 171: }
 12237                           ;OverLoad_B1.c: 172: }
 12238                           ;OverLoad_B1.c: 173: setLoad_AH_AL_Restore();
 12239  02C7  3199  213A  3180   	fcall	_setLoad_AH_AL_Restore
 12240                           
 12241                           ;OverLoad_B1.c: 175: Product->Data[2]=(Load->AD >> 8);
 12242  02CA  0020               	movlb	0	; select bank0
 12243  02CB  086E               	movf	_Load,w
 12244  02CC  3E2C               	addlw	44
 12245  02CD  0086               	movwf	6
 12246  02CE  3002               	movlw	2	; select bank4/5
 12247  02CF  0087               	movwf	7
 12248  02D0  3F40               	moviw [0]fsr1
 12249  02D1  00AD               	movwf	??_Load_Main
 12250  02D2  3F41               	moviw [1]fsr1
 12251  02D3  00AE               	movwf	??_Load_Main+1
 12252  02D4  082E               	movf	??_Load_Main+1,w
 12253  02D5  00AF               	movwf	??_Load_Main+2
 12254  02D6  086F               	movf	_Product,w
 12255  02D7  3E02               	addlw	2
 12256  02D8  0086               	movwf	6
 12257  02D9  3001               	movlw	1	; select bank2/3
 12258  02DA  0087               	movwf	7
 12259  02DB  082F               	movf	??_Load_Main+2,w
 12260  02DC  0081               	movwf	1
 12261                           
 12262                           ;OverLoad_B1.c: 176: Product->Data[3]=Load->AD;
 12263  02DD  086E               	movf	_Load,w
 12264  02DE  3E2C               	addlw	44
 12265  02DF  0086               	movwf	6
 12266  02E0  3002               	movlw	2	; select bank4/5
 12267  02E1  0087               	movwf	7
 12268  02E2  0801               	movf	1,w
 12269  02E3  00AD               	movwf	??_Load_Main
 12270  02E4  086F               	movf	_Product,w
 12271  02E5  3E03               	addlw	3
 12272  02E6  0086               	movwf	6
 12273  02E7  3001               	movlw	1	; select bank2/3
 12274  02E8  0087               	movwf	7
 12275  02E9  082D               	movf	??_Load_Main,w
 12276  02EA  0081               	movwf	1
 12277                           
 12278                           ;OverLoad_B1.c: 177: Product->Data[8]=Load->LightsCount;
 12279  02EB  086E               	movf	_Load,w
 12280  02EC  3E3E               	addlw	62
 12281  02ED  0086               	movwf	6
 12282  02EE  3002               	movlw	2	; select bank4/5
 12283  02EF  0087               	movwf	7
 12284  02F0  0801               	movf	1,w
 12285  02F1  00AD               	movwf	??_Load_Main
 12286  02F2  086F               	movf	_Product,w
 12287  02F3  3E08               	addlw	8
 12288  02F4  0086               	movwf	6
 12289  02F5  3001               	movlw	1	; select bank2/3
 12290  02F6  0087               	movwf	7
 12291  02F7  082D               	movf	??_Load_Main,w
 12292  02F8  0081               	movwf	1
 12293                           
 12294                           ;OverLoad_B1.c: 178: Product->Data[10]=Load->TotalLoad;
 12295  02F9  086E               	movf	_Load,w
 12296  02FA  3E06               	addlw	6
 12297  02FB  0086               	movwf	6
 12298  02FC  3002               	movlw	2	; select bank4/5
 12299  02FD  0087               	movwf	7
 12300  02FE  0801               	movf	1,w
 12301  02FF  00AD               	movwf	??_Load_Main
 12302  0300  086F               	movf	_Product,w
 12303  0301  3E0A               	addlw	10
 12304  0302  0086               	movwf	6
 12305  0303  3001               	movlw	1	; select bank2/3
 12306  0304  0087               	movwf	7
 12307  0305  082D               	movf	??_Load_Main,w
 12308  0306  0081               	movwf	1
 12309                           
 12310                           ;OverLoad_B1.c: 179: Product->Data[16]=(Load->JudgeValue >> 8);
 12311  0307  086E               	movf	_Load,w
 12312  0308  3E36               	addlw	54
 12313  0309  0086               	movwf	6
 12314  030A  3002               	movlw	2	; select bank4/5
 12315  030B  0087               	movwf	7
 12316  030C  3F40               	moviw [0]fsr1
 12317  030D  00AD               	movwf	??_Load_Main
 12318  030E  3F41               	moviw [1]fsr1
 12319  030F  00AE               	movwf	??_Load_Main+1
 12320  0310  082E               	movf	??_Load_Main+1,w
 12321  0311  00AF               	movwf	??_Load_Main+2
 12322  0312  086F               	movf	_Product,w
 12323  0313  3E10               	addlw	16
 12324  0314  0086               	movwf	6
 12325  0315  3001               	movlw	1	; select bank2/3
 12326  0316  0087               	movwf	7
 12327  0317  082F               	movf	??_Load_Main+2,w
 12328  0318  0081               	movwf	1
 12329                           
 12330                           ;OverLoad_B1.c: 180: Product->Data[17]=Load->JudgeValue;
 12331  0319  086E               	movf	_Load,w
 12332  031A  3E36               	addlw	54
 12333  031B  0086               	movwf	6
 12334  031C  3002               	movlw	2	; select bank4/5
 12335  031D  0087               	movwf	7
 12336  031E  0801               	movf	1,w
 12337  031F  00AD               	movwf	??_Load_Main
 12338  0320  086F               	movf	_Product,w
 12339  0321  3E11               	addlw	17
 12340  0322  0086               	movwf	6
 12341  0323  3001               	movlw	1	; select bank2/3
 12342  0324  0087               	movwf	7
 12343  0325  082D               	movf	??_Load_Main,w
 12344  0326  0081               	movwf	1
 12345                           
 12346                           ;OverLoad_B1.c: 181: Product->Data[18]=Load->ErrorStatus;
 12347  0327  086E               	movf	_Load,w
 12348  0328  3E05               	addlw	5
 12349  0329  0086               	movwf	6
 12350  032A  3002               	movlw	2	; select bank4/5
 12351  032B  0087               	movwf	7
 12352  032C  0801               	movf	1,w
 12353  032D  00AD               	movwf	??_Load_Main
 12354  032E  086F               	movf	_Product,w
 12355  032F  3E12               	addlw	18
 12356  0330  0086               	movwf	6
 12357  0331  3001               	movlw	1	; select bank2/3
 12358  0332  0087               	movwf	7
 12359  0333  082D               	movf	??_Load_Main,w
 12360  0334  0081               	movwf	1
 12361                           
 12362                           ;OverLoad_B1.c: 182: Product->Data[19]=Load->Count;
 12363  0335  086E               	movf	_Load,w
 12364  0336  3E3A               	addlw	58
 12365  0337  0086               	movwf	6
 12366  0338  3002               	movlw	2	; select bank4/5
 12367  0339  0087               	movwf	7
 12368  033A  0801               	movf	1,w
 12369  033B  00AD               	movwf	??_Load_Main
 12370  033C  086F               	movf	_Product,w
 12371  033D  3E13               	addlw	19
 12372  033E  0086               	movwf	6
 12373  033F  3001               	movlw	1	; select bank2/3
 12374  0340  0087               	movwf	7
 12375  0341  082D               	movf	??_Load_Main,w
 12376  0342  0081               	movwf	1
 12377                           
 12378                           ;OverLoad_B1.c: 185: }
 12379                           ;OverLoad_B1.c: 186: }
 12380  0343  0008               	return
 12381  0344                     l9666:	
 12382                           
 12383                           ;OverLoad_B1.c: 187: else
 12384                           ;OverLoad_B1.c: 188: {
 12385                           ;OverLoad_B1.c: 189: if(Load->GO)
 12386  0344  086E               	movf	_Load,w
 12387  0345  0086               	movwf	6
 12388  0346  3002               	movlw	2	; select bank4/5
 12389  0347  0087               	movwf	7
 12390  0348  1C81               	btfss	1,1
 12391  0349  2B6D               	goto	l9678
 12392                           
 12393                           ;OverLoad_B1.c: 190: {
 12394                           ;OverLoad_B1.c: 191: if(!Load->LightsON)
 12395  034A  086E               	movf	_Load,w
 12396  034B  0086               	movwf	6
 12397  034C  3002               	movlw	2	; select bank4/5
 12398  034D  0087               	movwf	7
 12399  034E  1901               	btfsc	1,2
 12400  034F  2B5A               	goto	l9672
 12401                           
 12402                           ;OverLoad_B1.c: 192: {
 12403                           ;OverLoad_B1.c: 193: Load->LightsON=1;
 12404  0350  086E               	movf	_Load,w
 12405  0351  0086               	movwf	6
 12406  0352  3002               	movlw	2	; select bank4/5
 12407  0353  0087               	movwf	7
 12408  0354  1501               	bsf	1,2
 12409                           
 12410                           ;OverLoad_B1.c: 194: Load->Safe=0;
 12411  0355  086E               	movf	_Load,w
 12412  0356  0086               	movwf	6
 12413  0357  3002               	movlw	2	; select bank4/5
 12414  0358  0087               	movwf	7
 12415  0359  1181               	bcf	1,3
 12416  035A                     l9672:	
 12417                           
 12418                           ;OverLoad_B1.c: 195: }
 12419                           ;OverLoad_B1.c: 196: if(getTemp_Safe() && getPF_Safe())
 12420  035A  31A4  24BA  3180   	fcall	_getTemp_Safe
 12421  035D  3A00               	xorlw	0
 12422  035E  1903               	skipnz
 12423  035F  0008               	return
 12424  0360  31A4  24CF  3180   	fcall	_getPF_Safe
 12425  0363  3A00               	xorlw	0
 12426  0364  1903               	skipnz
 12427  0365  0008               	return
 12428                           
 12429                           ;OverLoad_B1.c: 197: {
 12430                           ;OverLoad_B1.c: 198: Load->ADtoGO=1;
 12431  0366  0020               	movlb	0	; select bank0
 12432  0367  086E               	movf	_Load,w
 12433  0368  0086               	movwf	6
 12434  0369  3002               	movlw	2	; select bank4/5
 12435  036A  0087               	movwf	7
 12436  036B  1601               	bsf	1,4
 12437                           
 12438                           ;OverLoad_B1.c: 199: }
 12439                           ;OverLoad_B1.c: 200: }
 12440  036C  0008               	return
 12441  036D                     l9678:	
 12442                           
 12443                           ;OverLoad_B1.c: 201: else
 12444                           ;OverLoad_B1.c: 202: {
 12445                           ;OverLoad_B1.c: 203: if(Load->LightsON)
 12446  036D  086E               	movf	_Load,w
 12447  036E  0086               	movwf	6
 12448  036F  3002               	movlw	2	; select bank4/5
 12449  0370  0087               	movwf	7
 12450  0371  1D01               	btfss	1,2
 12451  0372  0008               	return
 12452                           
 12453                           ;OverLoad_B1.c: 204: {
 12454                           ;OverLoad_B1.c: 205: Load->LightsON=0;
 12455  0373  086E               	movf	_Load,w
 12456  0374  0086               	movwf	6
 12457  0375  3002               	movlw	2	; select bank4/5
 12458  0376  0087               	movwf	7
 12459  0377  1101               	bcf	1,2
 12460                           
 12461                           ;OverLoad_B1.c: 206: Load->Safe=1;
 12462  0378  086E               	movf	_Load,w
 12463  0379  0086               	movwf	6
 12464  037A  3002               	movlw	2	; select bank4/5
 12465  037B  0087               	movwf	7
 12466  037C  1581               	bsf	1,3
 12467                           
 12468                           ;OverLoad_B1.c: 207: Load->ErrorCount=0;
 12469  037D  086E               	movf	_Load,w
 12470  037E  3E3C               	addlw	60
 12471  037F  0086               	movwf	6
 12472  0380  3002               	movlw	2	; select bank4/5
 12473  0381  0087               	movwf	7
 12474  0382  0181               	clrf	1
 12475                           
 12476                           ;OverLoad_B1.c: 208: Load->Count=0;
 12477  0383  086E               	movf	_Load,w
 12478  0384  3E3A               	addlw	58
 12479  0385  0086               	movwf	6
 12480  0386  3002               	movlw	2	; select bank4/5
 12481  0387  0087               	movwf	7
 12482  0388  0181               	clrf	1
 12483                           
 12484                           ;OverLoad_B1.c: 209: Load->TotalLoad=0;
 12485  0389  086E               	movf	_Load,w
 12486  038A  3E06               	addlw	6
 12487  038B  0086               	movwf	6
 12488  038C  3002               	movlw	2	; select bank4/5
 12489  038D  0087               	movwf	7
 12490  038E  3000               	movlw	0
 12491  038F  3FC0               	movwi [0]fsr1
 12492  0390  3FC1               	movwi [1]fsr1
 12493                           
 12494                           ;OverLoad_B1.c: 210: Load->NumberCount=0;
 12495  0391  086E               	movf	_Load,w
 12496  0392  3E3F               	addlw	63
 12497  0393  0086               	movwf	6
 12498  0394  3002               	movlw	2	; select bank4/5
 12499  0395  0087               	movwf	7
 12500  0396  0181               	clrf	1
 12501                           
 12502                           ;OverLoad_B1.c: 211: Load->StatusOn=0;
 12503  0397  086E               	movf	_Load,w
 12504  0398  3E46               	addlw	70
 12505  0399  0086               	movwf	6
 12506  039A  3002               	movlw	2	; select bank4/5
 12507  039B  0087               	movwf	7
 12508  039C  1001               	bcf	1,0
 12509                           
 12510                           ;OverLoad_B1.c: 212: Load->StatusOff=0;
 12511  039D  086E               	movf	_Load,w
 12512  039E  3E46               	addlw	70
 12513  039F  0086               	movwf	6
 12514  03A0  3002               	movlw	2	; select bank4/5
 12515  03A1  0087               	movwf	7
 12516  03A2  1081               	bcf	1,1
 12517                           
 12518                           ;OverLoad_B1.c: 213: Load->AD=0;
 12519  03A3  086E               	movf	_Load,w
 12520  03A4  3E2C               	addlw	44
 12521  03A5  0086               	movwf	6
 12522  03A6  3002               	movlw	2	; select bank4/5
 12523  03A7  0087               	movwf	7
 12524  03A8  3000               	movlw	0
 12525  03A9  3FC0               	movwi [0]fsr1
 12526  03AA  3FC1               	movwi [1]fsr1
 12527                           
 12528                           ;OverLoad_B1.c: 214: setLoad_AH_AL_Restore();
 12529  03AB  3199  213A  3180   	fcall	_setLoad_AH_AL_Restore
 12530                           
 12531                           ;OverLoad_B1.c: 218: setDimmerLights_Clear(1,1);
 12532  03AE  0020               	movlb	0	; select bank0
 12533  03AF  01A2               	clrf	setDimmerLights_Clear@command
 12534  03B0  0AA2               	incf	setDimmerLights_Clear@command,f
 12535  03B1  3001               	movlw	1
 12536  03B2  31A6  2679  3180   	fcall	_setDimmerLights_Clear
 12537                           
 12538                           ;OverLoad_B1.c: 222: ;;
 12539                           ;OverLoad_B1.c: 247: Product->Data[2]=(Load->AD >> 8);
 12540  03B5  0020               	movlb	0	; select bank0
 12541  03B6  086E               	movf	_Load,w
 12542  03B7  3E2C               	addlw	44
 12543  03B8  0086               	movwf	6
 12544  03B9  3002               	movlw	2	; select bank4/5
 12545  03BA  0087               	movwf	7
 12546  03BB  3F40               	moviw [0]fsr1
 12547  03BC  00AD               	movwf	??_Load_Main
 12548  03BD  3F41               	moviw [1]fsr1
 12549  03BE  00AE               	movwf	??_Load_Main+1
 12550  03BF  082E               	movf	??_Load_Main+1,w
 12551  03C0  00AF               	movwf	??_Load_Main+2
 12552  03C1  086F               	movf	_Product,w
 12553  03C2  3E02               	addlw	2
 12554  03C3  0086               	movwf	6
 12555  03C4  3001               	movlw	1	; select bank2/3
 12556  03C5  0087               	movwf	7
 12557  03C6  082F               	movf	??_Load_Main+2,w
 12558  03C7  0081               	movwf	1
 12559                           
 12560                           ;OverLoad_B1.c: 248: Product->Data[3]=Load->AD;
 12561  03C8  086E               	movf	_Load,w
 12562  03C9  3E2C               	addlw	44
 12563  03CA  0086               	movwf	6
 12564  03CB  3002               	movlw	2	; select bank4/5
 12565  03CC  0087               	movwf	7
 12566  03CD  0801               	movf	1,w
 12567  03CE  00AD               	movwf	??_Load_Main
 12568  03CF  086F               	movf	_Product,w
 12569  03D0  3E03               	addlw	3
 12570  03D1  0086               	movwf	6
 12571  03D2  3001               	movlw	1	; select bank2/3
 12572  03D3  0087               	movwf	7
 12573  03D4  082D               	movf	??_Load_Main,w
 12574  03D5  0081               	movwf	1
 12575                           
 12576                           ;OverLoad_B1.c: 253: Product->Data[8]=Load->NumberCount;
 12577  03D6  086E               	movf	_Load,w
 12578  03D7  3E3F               	addlw	63
 12579  03D8  0086               	movwf	6
 12580  03D9  3002               	movlw	2	; select bank4/5
 12581  03DA  0087               	movwf	7
 12582  03DB  0801               	movf	1,w
 12583  03DC  00AD               	movwf	??_Load_Main
 12584  03DD  086F               	movf	_Product,w
 12585  03DE  3E08               	addlw	8
 12586  03DF  0086               	movwf	6
 12587  03E0  3001               	movlw	1	; select bank2/3
 12588  03E1  0087               	movwf	7
 12589  03E2  082D               	movf	??_Load_Main,w
 12590  03E3  0081               	movwf	1
 12591                           
 12592                           ;OverLoad_B1.c: 254: Product->Data[10]=Load->TotalLoad;
 12593  03E4  086E               	movf	_Load,w
 12594  03E5  3E06               	addlw	6
 12595  03E6  0086               	movwf	6
 12596  03E7  3002               	movlw	2	; select bank4/5
 12597  03E8  0087               	movwf	7
 12598  03E9  0801               	movf	1,w
 12599  03EA  00AD               	movwf	??_Load_Main
 12600  03EB  086F               	movf	_Product,w
 12601  03EC  3E0A               	addlw	10
 12602  03ED  0086               	movwf	6
 12603  03EE  3001               	movlw	1	; select bank2/3
 12604  03EF  0087               	movwf	7
 12605  03F0  082D               	movf	??_Load_Main,w
 12606  03F1  0081               	movwf	1
 12607                           
 12608                           ;OverLoad_B1.c: 255: Product->Data[16]=(Load->JudgeValue >> 8);
 12609  03F2  086E               	movf	_Load,w
 12610  03F3  3E36               	addlw	54
 12611  03F4  0086               	movwf	6
 12612  03F5  3002               	movlw	2	; select bank4/5
 12613  03F6  0087               	movwf	7
 12614  03F7  3F40               	moviw [0]fsr1
 12615  03F8  00AD               	movwf	??_Load_Main
 12616  03F9  3F41               	moviw [1]fsr1
 12617  03FA  00AE               	movwf	??_Load_Main+1
 12618  03FB  082E               	movf	??_Load_Main+1,w
 12619  03FC  00AF               	movwf	??_Load_Main+2
 12620  03FD  086F               	movf	_Product,w
 12621  03FE  3E10               	addlw	16
 12622  03FF  0086               	movwf	6
 12623  0400  3001               	movlw	1	; select bank2/3
 12624  0401  0087               	movwf	7
 12625  0402  082F               	movf	??_Load_Main+2,w
 12626  0403  0081               	movwf	1
 12627                           
 12628                           ;OverLoad_B1.c: 256: Product->Data[17]=Load->JudgeValue;
 12629  0404  086E               	movf	_Load,w
 12630  0405  3E36               	addlw	54
 12631  0406  0086               	movwf	6
 12632  0407  3002               	movlw	2	; select bank4/5
 12633  0408  0087               	movwf	7
 12634  0409  0801               	movf	1,w
 12635  040A  00AD               	movwf	??_Load_Main
 12636  040B  086F               	movf	_Product,w
 12637  040C  3E11               	addlw	17
 12638  040D  0086               	movwf	6
 12639  040E  3001               	movlw	1	; select bank2/3
 12640  040F  0087               	movwf	7
 12641  0410  082D               	movf	??_Load_Main,w
 12642  0411  0081               	movwf	1
 12643                           
 12644                           ;OverLoad_B1.c: 257: Product->Data[18]=Load->ErrorStatus;
 12645  0412  086E               	movf	_Load,w
 12646  0413  3E05               	addlw	5
 12647  0414  0086               	movwf	6
 12648  0415  3002               	movlw	2	; select bank4/5
 12649  0416  0087               	movwf	7
 12650  0417  0801               	movf	1,w
 12651  0418  00AD               	movwf	??_Load_Main
 12652  0419  086F               	movf	_Product,w
 12653  041A  3E12               	addlw	18
 12654  041B  0086               	movwf	6
 12655  041C  3001               	movlw	1	; select bank2/3
 12656  041D  0087               	movwf	7
 12657  041E  082D               	movf	??_Load_Main,w
 12658  041F  0081               	movwf	1
 12659                           
 12660                           ;OverLoad_B1.c: 258: Product->Data[19]=Load->Count;
 12661  0420  086E               	movf	_Load,w
 12662  0421  3E3A               	addlw	58
 12663  0422  0086               	movwf	6
 12664  0423  3002               	movlw	2	; select bank4/5
 12665  0424  0087               	movwf	7
 12666  0425  0801               	movf	1,w
 12667  0426  00AD               	movwf	??_Load_Main
 12668  0427  086F               	movf	_Product,w
 12669  0428  3E13               	addlw	19
 12670  0429  0086               	movwf	6
 12671  042A  3001               	movlw	1	; select bank2/3
 12672  042B  0087               	movwf	7
 12673  042C  082D               	movf	??_Load_Main,w
 12674  042D  0081               	movwf	1
 12675  042E  0008               	return
 12676  042F                     __end_of_Load_Main:	
 12677                           
 12678                           	psect	text63
 12679  1003                     __ptext63:	
 12680 ;; *************** function _setLoad_Exceptions *****************
 12681 ;; Defined at:
 12682 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  command         1    wreg     unsigned char 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  command         1   12[BANK0 ] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;		None               void
 12689 ;; Registers used:
 12690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;Total ram usage:        2 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    8
 12703 ;; This function calls:
 12704 ;;		_DimmerLights_Exceptions
 12705 ;;		_setLED
 12706 ;;		_setRF_Enable
 12707 ;;		_setSw_Enable
 12708 ;; This function is called by:
 12709 ;;		_Load_Main
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _setLoad_Exceptions
 12715  1003                     _setLoad_Exceptions:	
 12716                           
 12717                           ;incstack = 0
 12718                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12719                           ;setLoad_Exceptions@command stored from wreg
 12720  1003  0020               	movlb	0	; select bank0
 12721  1004  00AC               	movwf	setLoad_Exceptions@command
 12722                           
 12723                           ;OverLoad_B1.c: 268: Load->ERROR=command;
 12724  1005  086E               	movf	_Load,w
 12725  1006  0086               	movwf	6
 12726  1007  3002               	movlw	2	; select bank4/5
 12727  1008  0087               	movwf	7
 12728  1009  082C               	movf	setLoad_Exceptions@command,w
 12729  100A  1281               	bcf	1,5
 12730  100B  1D03               	skipz
 12731  100C  1681               	bsf	1,5
 12732                           
 12733                           ;OverLoad_B1.c: 269: Load->Safe=(~command) & 0x01;
 12734  100D  092C               	comf	setLoad_Exceptions@command,w
 12735  100E  3901               	andlw	1
 12736  100F  00AB               	movwf	??_setLoad_Exceptions
 12737  1010  086E               	movf	_Load,w
 12738  1011  0086               	movwf	6
 12739  1012  3002               	movlw	2	; select bank4/5
 12740  1013  0087               	movwf	7
 12741  1014  0DAB               	rlf	??_setLoad_Exceptions,f
 12742  1015  0DAB               	rlf	??_setLoad_Exceptions,f
 12743  1016  0DAB               	rlf	??_setLoad_Exceptions,f
 12744  1017  0801               	movf	1,w
 12745  1018  062B               	xorwf	??_setLoad_Exceptions,w
 12746  1019  39F7               	andlw	-9
 12747  101A  062B               	xorwf	??_setLoad_Exceptions,w
 12748  101B  0081               	movwf	1
 12749                           
 12750                           ;OverLoad_B1.c: 270: Load->ErrorStatus=command;
 12751  101C  082C               	movf	setLoad_Exceptions@command,w
 12752  101D  00AB               	movwf	??_setLoad_Exceptions
 12753  101E  086E               	movf	_Load,w
 12754  101F  3E05               	addlw	5
 12755  1020  0086               	movwf	6
 12756  1021  3002               	movlw	2	; select bank4/5
 12757  1022  0087               	movwf	7
 12758  1023  082B               	movf	??_setLoad_Exceptions,w
 12759  1024  0081               	movwf	1
 12760                           
 12761                           ;OverLoad_B1.c: 272: if(command)
 12762  1025  082C               	movf	setLoad_Exceptions@command,w
 12763  1026  1903               	btfsc	3,2
 12764  1027  2833               	goto	l1868
 12765                           
 12766                           ;OverLoad_B1.c: 273: {
 12767                           ;OverLoad_B1.c: 274: DimmerLights_Exceptions(2);
 12768  1028  3002               	movlw	2
 12769  1029  3190  204D  3190   	fcall	_DimmerLights_Exceptions
 12770                           
 12771                           ;OverLoad_B1.c: 276: setLED(2,1);
 12772  102C  0020               	movlb	0	; select bank0
 12773  102D  01A2               	clrf	setLED@command
 12774  102E  0AA2               	incf	setLED@command,f
 12775  102F  3002               	movlw	2
 12776  1030  3191  215E  3190   	fcall	_setLED
 12777  1033                     l1868:	
 12778                           
 12779                           ;OverLoad_B1.c: 278: }
 12780                           ;OverLoad_B1.c: 279: setLED(99,command+10);
 12781  1033  0020               	movlb	0	; select bank0
 12782  1034  082C               	movf	setLoad_Exceptions@command,w
 12783  1035  3E0A               	addlw	10
 12784  1036  00AB               	movwf	??_setLoad_Exceptions
 12785  1037  082B               	movf	??_setLoad_Exceptions,w
 12786  1038  00A2               	movwf	setLED@command
 12787  1039  3063               	movlw	99
 12788  103A  3191  215E  3190   	fcall	_setLED
 12789                           
 12790                           ;OverLoad_B1.c: 281: setSw_Enable((~command) & 0x01);
 12791  103D  0020               	movlb	0	; select bank0
 12792  103E  092C               	comf	setLoad_Exceptions@command,w
 12793  103F  3901               	andlw	1
 12794  1040  31A6  263A  3190   	fcall	_setSw_Enable
 12795                           
 12796                           ;OverLoad_B1.c: 283: setRF_Enable(1,(~command) & 0x01);
 12797  1043  0020               	movlb	0	; select bank0
 12798  1044  092C               	comf	setLoad_Exceptions@command,w
 12799  1045  3901               	andlw	1
 12800  1046  00AB               	movwf	??_setLoad_Exceptions
 12801  1047  082B               	movf	??_setLoad_Exceptions,w
 12802  1048  00A2               	movwf	setRF_Enable@command
 12803  1049  3001               	movlw	1
 12804  104A  319A  221A         	fcall	_setRF_Enable
 12805  104C  0008               	return
 12806  104D                     __end_of_setLoad_Exceptions:	
 12807                           
 12808                           	psect	text64
 12809  263A                     __ptext64:	
 12810 ;; *************** function _setSw_Enable *****************
 12811 ;; Defined at:
 12812 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  command         1    wreg     unsigned char 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  command         1    2[BANK0 ] unsigned char 
 12817 ;; Return value:  Size  Location     Type
 12818 ;;		None               void
 12819 ;; Registers used:
 12820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;Total ram usage:        1 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		_SwPointSelect
 12835 ;; This function is called by:
 12836 ;;		_MainT
 12837 ;;		_setLoad_Exceptions
 12838 ;;		_setOverTemp_Exceptions
 12839 ;;		_setPowerFault_Exceptions
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           
 12844                           ;psect for function _setSw_Enable
 12845  263A                     _setSw_Enable:	
 12846                           
 12847                           ;incstack = 0
 12848                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12849                           ;setSw_Enable@command stored from wreg
 12850  263A  0020               	movlb	0	; select bank0
 12851  263B  00A2               	movwf	setSw_Enable@command
 12852                           
 12853                           ;Switch_B1.c: 90: SwPointSelect(1);
 12854  263C  3001               	movlw	1
 12855  263D  31A5  251D         	fcall	_SwPointSelect
 12856                           
 12857                           ;Switch_B1.c: 91: Sw->Enable=command;
 12858  263F  0020               	movlb	0	; select bank0
 12859  2640  086D               	movf	_Sw,w
 12860  2641  0086               	movwf	6
 12861  2642  3001               	movlw	1	; select bank2/3
 12862  2643  0087               	movwf	7
 12863  2644  0822               	movf	setSw_Enable@command,w
 12864  2645  1001               	bcf	1,0
 12865  2646  1D03               	skipz
 12866  2647  1401               	bsf	1,0
 12867  2648  0008               	return
 12868  2649                     __end_of_setSw_Enable:	
 12869                           
 12870                           	psect	text65
 12871  1A1A                     __ptext65:	
 12872 ;; *************** function _setRF_Enable *****************
 12873 ;; Defined at:
 12874 ;;		line 186 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  rf              1    wreg     unsigned char 
 12877 ;;  command         1    2[BANK0 ] unsigned char 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  rf              1    3[BANK0 ] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;		None               void
 12882 ;; Registers used:
 12883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:        2 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    5
 12896 ;; This function calls:
 12897 ;;		_RfPointSelect
 12898 ;;		_setINT_GO
 12899 ;; This function is called by:
 12900 ;;		_MainT
 12901 ;;		_setLoad_Exceptions
 12902 ;;		_setOverTemp_Exceptions
 12903 ;;		_setPowerFault_Exceptions
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _setRF_Enable
 12909  1A1A                     _setRF_Enable:	
 12910                           
 12911                           ;incstack = 0
 12912                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12913                           ;setRF_Enable@rf stored from wreg
 12914  1A1A  0020               	movlb	0	; select bank0
 12915  1A1B  00A3               	movwf	setRF_Enable@rf
 12916                           
 12917                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
 12918  1A1C  0823               	movf	setRF_Enable@rf,w
 12919  1A1D  31A5  2528  319A   	fcall	_RfPointSelect
 12920                           
 12921                           ;RF_Control_B1.c: 189: RF->Enable=command;
 12922  1A20  087B               	movf	_RF,w
 12923  1A21  0086               	movwf	6
 12924  1A22  0187               	clrf	7
 12925  1A23  0020               	movlb	0	; select bank0
 12926  1A24  0822               	movf	setRF_Enable@command,w
 12927  1A25  1001               	bcf	1,0
 12928  1A26  1D03               	skipz
 12929  1A27  1401               	bsf	1,0
 12930                           
 12931                           ;RF_Control_B1.c: 190: RF->Learn=0;
 12932  1A28  087B               	movf	_RF,w
 12933  1A29  0086               	movwf	6
 12934  1A2A  0187               	clrf	7
 12935  1A2B  1301               	bcf	1,6
 12936                           
 12937                           ;RF_Control_B1.c: 191: RF->TransceiveGO=0;
 12938  1A2C  087B               	movf	_RF,w
 12939  1A2D  0086               	movwf	6
 12940  1A2E  0187               	clrf	7
 12941  1A2F  1101               	bcf	1,2
 12942                           
 12943                           ;RF_Control_B1.c: 192: RF->RxStatus=0;
 12944  1A30  087B               	movf	_RF,w
 12945  1A31  0086               	movwf	6
 12946  1A32  0187               	clrf	7
 12947  1A33  1181               	bcf	1,3
 12948                           
 12949                           ;RF_Control_B1.c: 193: RF->ReceiveGO=0;
 12950  1A34  087B               	movf	_RF,w
 12951  1A35  0086               	movwf	6
 12952  1A36  0187               	clrf	7
 12953  1A37  1081               	bcf	1,1
 12954                           
 12955                           ;RF_Control_B1.c: 194: RF->DebounceTime=0;
 12956  1A38  0A7B               	incf	_RF,w
 12957  1A39  0086               	movwf	6
 12958  1A3A  0187               	clrf	7
 12959  1A3B  0181               	clrf	1
 12960                           
 12961                           ;RF_Control_B1.c: 195: RF->Debounce=0;
 12962  1A3C  087B               	movf	_RF,w
 12963  1A3D  0086               	movwf	6
 12964  1A3E  0187               	clrf	7
 12965  1A3F  1281               	bcf	1,5
 12966                           
 12967                           ;RF_Control_B1.c: 196: setINT_GO(0);
 12968  1A40  3000               	movlw	0
 12969  1A41  31A4  24E0         	fcall	_setINT_GO
 12970  1A43  0008               	return
 12971  1A44                     __end_of_setRF_Enable:	
 12972                           
 12973                           	psect	text66
 12974  24E0                     __ptext66:	
 12975 ;; *************** function _setINT_GO *****************
 12976 ;; Defined at:
 12977 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;  command         1    wreg     unsigned char 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;  command         1    0[BANK0 ] unsigned char 
 12982 ;; Return value:  Size  Location     Type
 12983 ;;		None               void
 12984 ;; Registers used:
 12985 ;;		wreg
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;Total ram usage:        1 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    4
 12998 ;; This function calls:
 12999 ;;		Nothing
 13000 ;; This function is called by:
 13001 ;;		_setRF_Main
 13002 ;;		_setRF_Enable
 13003 ;;		_RF_RxDisable
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           
 13008                           ;psect for function _setINT_GO
 13009  24E0                     _setINT_GO:	
 13010                           
 13011                           ;incstack = 0
 13012                           ; Regs used in _setINT_GO: [wreg]
 13013                           ;setINT_GO@command stored from wreg
 13014  24E0  0020               	movlb	0	; select bank0
 13015  24E1  00A0               	movwf	setINT_GO@command
 13016                           
 13017                           ;MCU_B1.c: 305: INTF=0;
 13018  24E2  108B               	bcf	11,1	;volatile
 13019                           
 13020                           ;MCU_B1.c: 306: INTE=command;
 13021  24E3  1C20               	btfss	setINT_GO@command,0
 13022  24E4  2CE7               	goto	u7810
 13023  24E5  160B               	bsf	11,4	;volatile
 13024  24E6  0008               	return
 13025  24E7                     u7810:	
 13026  24E7  120B               	bcf	11,4	;volatile
 13027  24E8  0008               	return
 13028  24E9                     __end_of_setINT_GO:	
 13029                           
 13030                           	psect	text67
 13031  104D                     __ptext67:	
 13032 ;; *************** function _DimmerLights_Exceptions *****************
 13033 ;; Defined at:
 13034 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;  status          1    wreg     unsigned char 
 13037 ;; Auto vars:     Size  Location     Type
 13038 ;;  status          1   10[BANK0 ] unsigned char 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;		None               void
 13041 ;; Registers used:
 13042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;Total ram usage:        1 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    7
 13055 ;; This function calls:
 13056 ;;		_getDimmerLights_StatusFlag
 13057 ;;		_setBuz
 13058 ;;		_setDimmerLights_ERROR
 13059 ;;		_setDimmerLights_TriggerERROR
 13060 ;; This function is called by:
 13061 ;;		_setLoad_Exceptions
 13062 ;;		_setOverTemp_Exceptions
 13063 ;;		_setPowerFault_Exceptions
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           
 13068                           ;psect for function _DimmerLights_Exceptions
 13069  104D                     _DimmerLights_Exceptions:	
 13070                           
 13071                           ;incstack = 0
 13072                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13073                           ;DimmerLights_Exceptions@status stored from wreg
 13074  104D  0020               	movlb	0	; select bank0
 13075  104E  00AA               	movwf	DimmerLights_Exceptions@status
 13076                           
 13077                           ;Dimmer_B1.c: 248: if(status == 1)
 13078  104F  082A               	movf	DimmerLights_Exceptions@status,w
 13079  1050  3A01               	xorlw	1
 13080  1051  1D03               	skipz
 13081  1052  2863               	goto	l8526
 13082                           
 13083                           ;Dimmer_B1.c: 249: {
 13084                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 13085  1053  31A5  25A7  3190   	fcall	_getDimmerLights_StatusFlag
 13086  1056  3A00               	xorlw	0
 13087  1057  1903               	skipnz
 13088  1058  287B               	goto	l8532
 13089                           
 13090                           ;Dimmer_B1.c: 251: {
 13091                           ;Dimmer_B1.c: 252: setBuz(10,300);
 13092  1059  302C               	movlw	44
 13093  105A  0020               	movlb	0	; select bank0
 13094  105B  00A6               	movwf	setBuz@time
 13095  105C  3001               	movlw	1
 13096  105D  00A7               	movwf	setBuz@time+1
 13097  105E  300A               	movlw	10
 13098  105F  3195  2587  3190   	fcall	_setBuz
 13099  1062  287B               	goto	l8532
 13100  1063                     l8526:	
 13101                           ;Dimmer_B1.c: 264: }
 13102                           
 13103                           ;Dimmer_B1.c: 253: }
 13104                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 13105                           
 13106                           
 13107                           ;Dimmer_B1.c: 265: else if(status == 2)
 13108  1063  0020               	movlb	0	; select bank0
 13109  1064  082A               	movf	DimmerLights_Exceptions@status,w
 13110  1065  3A02               	xorlw	2
 13111  1066  1D03               	skipz
 13112  1067  2876               	goto	l8530
 13113                           
 13114                           ;Dimmer_B1.c: 266: {
 13115                           ;Dimmer_B1.c: 267: setBuz(5,300);
 13116  1068  302C               	movlw	44
 13117  1069  00A6               	movwf	setBuz@time
 13118  106A  3001               	movlw	1
 13119  106B  00A7               	movwf	setBuz@time+1
 13120  106C  3005               	movlw	5
 13121  106D  3195  2587  3190   	fcall	_setBuz
 13122                           
 13123                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 13124  1070  0021               	movlb	1	; select bank1
 13125  1071  0A39               	incf	_Dimmer^(0+128),w
 13126  1072  0086               	movwf	6
 13127  1073  0187               	clrf	7
 13128  1074  0801               	movf	1,w
 13129  1075  287C               	goto	L10
 13130  1076                     l8530:	
 13131                           ;Dimmer_B1.c: 269: }
 13132                           
 13133                           
 13134                           ;Dimmer_B1.c: 270: else if(status == 3)
 13135  1076  0020               	movlb	0	; select bank0
 13136  1077  082A               	movf	DimmerLights_Exceptions@status,w
 13137  1078  3A03               	xorlw	3
 13138  1079  1D03               	skipz
 13139  107A  287F               	goto	l884
 13140  107B                     l8532:	
 13141                           
 13142                           ;Dimmer_B1.c: 271: {
 13143                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 13144  107B  3001               	movlw	1
 13145  107C                     L10:	
 13146  107C  319F  2750  3190   	fcall	_setDimmerLights_ERROR
 13147  107F                     l884:	
 13148                           
 13149                           ;Dimmer_B1.c: 281: }
 13150                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 13151  107F  0020               	movlb	0	; select bank0
 13152  1080  01A2               	clrf	setDimmerLights_TriggerERROR@command
 13153  1081  3001               	movlw	1
 13154  1082  319A  2244  3190   	fcall	_setDimmerLights_TriggerERROR
 13155                           
 13156                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 13157  1085  087D               	movf	_TMain,w
 13158  1086  3E03               	addlw	3
 13159  1087  0086               	movwf	6
 13160  1088  3001               	movlw	1	; select bank2/3
 13161  1089  0087               	movwf	7
 13162  108A  1801               	btfsc	1,0
 13163  108B  0008               	return
 13164                           
 13165                           ;Dimmer_B1.c: 294: {
 13166                           ;Dimmer_B1.c: 295: TMain->i=0;
 13167  108C  087D               	movf	_TMain,w
 13168  108D  3E0F               	addlw	15
 13169  108E  0086               	movwf	6
 13170  108F  3001               	movlw	1	; select bank2/3
 13171  1090  0087               	movwf	7
 13172  1091  1001               	bcf	1,0
 13173                           
 13174                           ;Dimmer_B1.c: 296: TMain->j=0;
 13175  1092  087D               	movf	_TMain,w
 13176  1093  3E0F               	addlw	15
 13177  1094  0086               	movwf	6
 13178  1095  3001               	movlw	1	; select bank2/3
 13179  1096  0087               	movwf	7
 13180  1097  1081               	bcf	1,1
 13181                           
 13182                           ;Dimmer_B1.c: 297: TMain->k=1;
 13183  1098  087D               	movf	_TMain,w
 13184  1099  3E0F               	addlw	15
 13185  109A  0086               	movwf	6
 13186  109B  3001               	movlw	1	; select bank2/3
 13187  109C  0087               	movwf	7
 13188  109D  1501               	bsf	1,2
 13189                           
 13190                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 13191  109E  087D               	movf	_TMain,w
 13192  109F  3E08               	addlw	8
 13193  10A0  0086               	movwf	6
 13194  10A1  3001               	movlw	1	; select bank2/3
 13195  10A2  0087               	movwf	7
 13196  10A3  3000               	movlw	0
 13197  10A4  3FC0               	movwi [0]fsr1
 13198  10A5  3FC1               	movwi [1]fsr1
 13199  10A6  0008               	return
 13200  10A7                     __end_of_DimmerLights_Exceptions:	
 13201                           
 13202                           	psect	text68
 13203  1A44                     __ptext68:	
 13204 ;; *************** function _setDimmerLights_TriggerERROR *****************
 13205 ;; Defined at:
 13206 ;;		line 320 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13207 ;; Parameters:    Size  Location     Type
 13208 ;;  lights          1    wreg     unsigned char 
 13209 ;;  command         1    2[BANK0 ] unsigned char 
 13210 ;; Auto vars:     Size  Location     Type
 13211 ;;  lights          1    3[BANK0 ] unsigned char 
 13212 ;; Return value:  Size  Location     Type
 13213 ;;		None               void
 13214 ;; Registers used:
 13215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13216 ;; Tracked objects:
 13217 ;;		On entry : 0/0
 13218 ;;		On exit  : 0/0
 13219 ;;		Unchanged: 0/0
 13220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13221 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;Total ram usage:        2 bytes
 13226 ;; Hardware stack levels used:    1
 13227 ;; Hardware stack levels required when called:    5
 13228 ;; This function calls:
 13229 ;;		_DimmerLightsPointSelect
 13230 ;; This function is called by:
 13231 ;;		_DimmerLights_Exceptions
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           
 13236                           ;psect for function _setDimmerLights_TriggerERROR
 13237  1A44                     _setDimmerLights_TriggerERROR:	
 13238                           
 13239                           ;incstack = 0
 13240                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13241                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 13242  1A44  0020               	movlb	0	; select bank0
 13243  1A45  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 13244                           
 13245                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 13246  1A46  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 13247  1A47  31A5  2512         	fcall	_DimmerLightsPointSelect
 13248                           
 13249                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 13250  1A49  0020               	movlb	0	; select bank0
 13251  1A4A  086C               	movf	_DimmerLights,w
 13252  1A4B  3E09               	addlw	9
 13253  1A4C  0086               	movwf	6
 13254  1A4D  3001               	movlw	1	; select bank2/3
 13255  1A4E  0087               	movwf	7
 13256  1A4F  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13257  1A50  1081               	bcf	1,1
 13258  1A51  1D03               	skipz
 13259  1A52  1481               	bsf	1,1
 13260                           
 13261                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 13262  1A53  086C               	movf	_DimmerLights,w
 13263  1A54  3E09               	addlw	9
 13264  1A55  0086               	movwf	6
 13265  1A56  3001               	movlw	1	; select bank2/3
 13266  1A57  0087               	movwf	7
 13267  1A58  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13268  1A59  1001               	bcf	1,0
 13269  1A5A  1D03               	skipz
 13270  1A5B  1401               	bsf	1,0
 13271                           
 13272                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 13273  1A5C  086C               	movf	_DimmerLights,w
 13274  1A5D  3E09               	addlw	9
 13275  1A5E  0086               	movwf	6
 13276  1A5F  3001               	movlw	1	; select bank2/3
 13277  1A60  0087               	movwf	7
 13278  1A61  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13279  1A62  1181               	bcf	1,3
 13280  1A63  1D03               	skipz
 13281  1A64  1581               	bsf	1,3
 13282                           
 13283                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13284  1A65  086C               	movf	_DimmerLights,w
 13285  1A66  3E09               	addlw	9
 13286  1A67  0086               	movwf	6
 13287  1A68  3001               	movlw	1	; select bank2/3
 13288  1A69  0087               	movwf	7
 13289  1A6A  0822               	movf	setDimmerLights_TriggerERROR@command,w
 13290  1A6B  1101               	bcf	1,2
 13291  1A6C  1D03               	skipz
 13292  1A6D  1501               	bsf	1,2
 13293  1A6E  0008               	return
 13294  1A6F                     __end_of_setDimmerLights_TriggerERROR:	
 13295                           
 13296                           	psect	text69
 13297  1F50                     __ptext69:	
 13298 ;; *************** function _setDimmerLights_ERROR *****************
 13299 ;; Defined at:
 13300 ;;		line 302 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;  lights          1    wreg     unsigned char 
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;  lights          1    5[BANK0 ] unsigned char 
 13305 ;; Return value:  Size  Location     Type
 13306 ;;		None               void
 13307 ;; Registers used:
 13308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;Total ram usage:        2 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    6
 13321 ;; This function calls:
 13322 ;;		_DimmerLightsPointSelect
 13323 ;;		_setLED
 13324 ;;		_setLoad_StatusOff
 13325 ;;		_setRFSW_Status
 13326 ;;		_setSw_Status
 13327 ;; This function is called by:
 13328 ;;		_DimmerLights_Exceptions
 13329 ;; This function uses a non-reentrant model
 13330 ;;
 13331                           
 13332                           
 13333                           ;psect for function _setDimmerLights_ERROR
 13334  1F50                     _setDimmerLights_ERROR:	
 13335                           
 13336                           ;incstack = 0
 13337                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13338                           ;setDimmerLights_ERROR@lights stored from wreg
 13339  1F50  0020               	movlb	0	; select bank0
 13340  1F51  00A5               	movwf	setDimmerLights_ERROR@lights
 13341                           
 13342                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13343  1F52  0825               	movf	setDimmerLights_ERROR@lights,w
 13344  1F53  31A5  2512  319F   	fcall	_DimmerLightsPointSelect
 13345                           
 13346                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13347  1F56  0020               	movlb	0	; select bank0
 13348  1F57  086C               	movf	_DimmerLights,w
 13349  1F58  0086               	movwf	6
 13350  1F59  3001               	movlw	1	; select bank2/3
 13351  1F5A  0087               	movwf	7
 13352  1F5B  1E81               	btfss	1,5
 13353  1F5C  0008               	return
 13354                           
 13355                           ;Dimmer_B1.c: 306: {
 13356                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13357  1F5D  086C               	movf	_DimmerLights,w
 13358  1F5E  0086               	movwf	6
 13359  1F5F  3001               	movlw	1	; select bank2/3
 13360  1F60  0087               	movwf	7
 13361  1F61  1081               	bcf	1,1
 13362                           
 13363                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13364  1F62  086C               	movf	_DimmerLights,w
 13365  1F63  0086               	movwf	6
 13366  1F64  3001               	movlw	1	; select bank2/3
 13367  1F65  0087               	movwf	7
 13368  1F66  1181               	bcf	1,3
 13369                           
 13370                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13371  1F67  086C               	movf	_DimmerLights,w
 13372  1F68  0086               	movwf	6
 13373  1F69  3001               	movlw	1	; select bank2/3
 13374  1F6A  0087               	movwf	7
 13375  1F6B  1201               	bcf	1,4
 13376                           
 13377                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13378  1F6C  086C               	movf	_DimmerLights,w
 13379  1F6D  0086               	movwf	6
 13380  1F6E  3001               	movlw	1	; select bank2/3
 13381  1F6F  0087               	movwf	7
 13382  1F70  1301               	bcf	1,6
 13383                           
 13384                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13385  1F71  3003               	movlw	3
 13386  1F72  00A4               	movwf	??_setDimmerLights_ERROR
 13387  1F73  086C               	movf	_DimmerLights,w
 13388  1F74  3E02               	addlw	2
 13389  1F75  0086               	movwf	6
 13390  1F76  3001               	movlw	1	; select bank2/3
 13391  1F77  0087               	movwf	7
 13392  1F78  0824               	movf	??_setDimmerLights_ERROR,w
 13393  1F79  0081               	movwf	1
 13394                           
 13395                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13396  1F7A  086C               	movf	_DimmerLights,w
 13397  1F7B  3E06               	addlw	6
 13398  1F7C  0086               	movwf	6
 13399  1F7D  3001               	movlw	1	; select bank2/3
 13400  1F7E  0087               	movwf	7
 13401  1F7F  0801               	movf	1,w
 13402  1F80  00A4               	movwf	??_setDimmerLights_ERROR
 13403  1F81  086C               	movf	_DimmerLights,w
 13404  1F82  3E04               	addlw	4
 13405  1F83  0086               	movwf	6
 13406  1F84  3001               	movlw	1	; select bank2/3
 13407  1F85  0087               	movwf	7
 13408  1F86  0824               	movf	??_setDimmerLights_ERROR,w
 13409  1F87  0081               	movwf	1
 13410                           
 13411                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13412  1F88  0021               	movlb	1	; select bank1
 13413  1F89  0839               	movf	_Dimmer^(0+128),w
 13414  1F8A  0086               	movwf	6
 13415  1F8B  0187               	clrf	7
 13416  1F8C  1401               	bsf	1,0
 13417                           
 13418                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13419  1F8D  0020               	movlb	0	; select bank0
 13420  1F8E  01A0               	clrf	setLoad_StatusOff@command
 13421  1F8F  0AA0               	incf	setLoad_StatusOff@command,f
 13422  1F90  0825               	movf	setDimmerLights_ERROR@lights,w
 13423  1F91  319B  2357  319F   	fcall	_setLoad_StatusOff
 13424                           
 13425                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13426  1F94  0020               	movlb	0	; select bank0
 13427  1F95  01A2               	clrf	setLED@command
 13428  1F96  0AA2               	incf	setLED@command,f
 13429  1F97  0825               	movf	setDimmerLights_ERROR@lights,w
 13430  1F98  3191  215E  319F   	fcall	_setLED
 13431                           
 13432                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13433  1F9B  0020               	movlb	0	; select bank0
 13434  1F9C  01A2               	clrf	setSw_Status@command
 13435  1F9D  0825               	movf	setDimmerLights_ERROR@lights,w
 13436  1F9E  31A6  262B  319F   	fcall	_setSw_Status
 13437                           
 13438                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13439  1FA1  0020               	movlb	0	; select bank0
 13440  1FA2  01A2               	clrf	setRFSW_Status@command
 13441  1FA3  0825               	movf	setDimmerLights_ERROR@lights,w
 13442  1FA4  31A6  261C         	fcall	_setRFSW_Status
 13443  1FA6  0008               	return
 13444  1FA7                     __end_of_setDimmerLights_ERROR:	
 13445                           
 13446                           	psect	text70
 13447  2679                     __ptext70:	
 13448 ;; *************** function _setDimmerLights_Clear *****************
 13449 ;; Defined at:
 13450 ;;		line 456 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  lights          1    wreg     unsigned char 
 13453 ;;  command         1    2[BANK0 ] unsigned char 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  lights          1    3[BANK0 ] unsigned char 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;		None               void
 13458 ;; Registers used:
 13459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13465 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;Total ram usage:        2 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    5
 13472 ;; This function calls:
 13473 ;;		_DimmerLightsPointSelect
 13474 ;; This function is called by:
 13475 ;;		_Load_Main
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           
 13480                           ;psect for function _setDimmerLights_Clear
 13481  2679                     _setDimmerLights_Clear:	
 13482                           
 13483                           ;incstack = 0
 13484                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13485                           ;setDimmerLights_Clear@lights stored from wreg
 13486  2679  0020               	movlb	0	; select bank0
 13487  267A  00A3               	movwf	setDimmerLights_Clear@lights
 13488                           
 13489                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13490  267B  0823               	movf	setDimmerLights_Clear@lights,w
 13491  267C  31A5  2512         	fcall	_DimmerLightsPointSelect
 13492                           
 13493                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13494  267E  0020               	movlb	0	; select bank0
 13495  267F  086C               	movf	_DimmerLights,w
 13496  2680  3E0C               	addlw	12
 13497  2681  0086               	movwf	6
 13498  2682  3001               	movlw	1	; select bank2/3
 13499  2683  0087               	movwf	7
 13500  2684  0822               	movf	setDimmerLights_Clear@command,w
 13501  2685  1001               	bcf	1,0
 13502  2686  1D03               	skipz
 13503  2687  1401               	bsf	1,0
 13504  2688  0008               	return
 13505  2689                     __end_of_setDimmerLights_Clear:	
 13506                           
 13507                           	psect	text71
 13508  24BA                     __ptext71:	
 13509 ;; *************** function _getTemp_Safe *****************
 13510 ;; Defined at:
 13511 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;		None
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      unsigned char 
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        0 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    4
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_Load_Main
 13536 ;;		_setPowerFault_Main
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           
 13541                           ;psect for function _getTemp_Safe
 13542  24BA                     _getTemp_Safe:	
 13543                           
 13544                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13545                           
 13546                           ;incstack = 0
 13547                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13548  24BA  087C               	movf	_Temp,w
 13549  24BB  0086               	movwf	6
 13550  24BC  3001               	movlw	1	; select bank2/3
 13551  24BD  0087               	movwf	7
 13552  24BE  0E01               	swapf	1,w
 13553  24BF  3901               	andlw	1
 13554  24C0  0008               	return
 13555  24C1                     __end_of_getTemp_Safe:	
 13556                           
 13557                           	psect	text72
 13558  24CF                     __ptext72:	
 13559 ;; *************** function _getPF_Safe *****************
 13560 ;; Defined at:
 13561 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;		None
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;		None
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      unsigned char 
 13568 ;; Registers used:
 13569 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;Total ram usage:        0 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    4
 13582 ;; This function calls:
 13583 ;;		Nothing
 13584 ;; This function is called by:
 13585 ;;		_Load_Main
 13586 ;;		_setTemp_Main
 13587 ;; This function uses a non-reentrant model
 13588 ;;
 13589                           
 13590                           
 13591                           ;psect for function _getPF_Safe
 13592  24CF                     _getPF_Safe:	
 13593                           
 13594                           ;PowerFault_B1.c: 42: return PF->Safe;
 13595                           
 13596                           ;incstack = 0
 13597                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13598  24CF  087A               	movf	_PF,w
 13599  24D0  0086               	movwf	6
 13600  24D1  3001               	movlw	1	; select bank2/3
 13601  24D2  0087               	movwf	7
 13602  24D3  0C01               	rrf	1,w
 13603  24D4  0C89               	rrf	9,f
 13604  24D5  3901               	andlw	1
 13605  24D6  0008               	return
 13606  24D7                     __end_of_getPF_Safe:	
 13607                           
 13608                           	psect	text73
 13609  1C20                     __ptext73:	
 13610 ;; *************** function ___lwdiv *****************
 13611 ;; Defined at:
 13612 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  divisor         2    0[BANK0 ] unsigned int 
 13615 ;;  dividend        2    2[BANK0 ] unsigned int 
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;  quotient        2    5[BANK0 ] unsigned int 
 13618 ;;  counter         1    7[BANK0 ] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  2    0[BANK0 ] unsigned int 
 13621 ;; Registers used:
 13622 ;;		wreg, status,2, status,0
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13628 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;Total ram usage:        8 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    4
 13635 ;; This function calls:
 13636 ;;		Nothing
 13637 ;; This function is called by:
 13638 ;;		_Load_Main
 13639 ;; This function uses a non-reentrant model
 13640 ;;
 13641                           
 13642                           
 13643                           ;psect for function ___lwdiv
 13644  1C20                     ___lwdiv:	
 13645                           
 13646                           ;incstack = 0
 13647                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13648  1C20  0020               	movlb	0	; select bank0
 13649  1C21  01A5               	clrf	___lwdiv@quotient
 13650  1C22  01A6               	clrf	___lwdiv@quotient+1
 13651  1C23  0821               	movf	___lwdiv@divisor+1,w
 13652  1C24  0420               	iorwf	___lwdiv@divisor,w
 13653  1C25  1903               	skipnz
 13654  1C26  2C50               	goto	l7612
 13655  1C27  01A7               	clrf	___lwdiv@counter
 13656  1C28  0AA7               	incf	___lwdiv@counter,f
 13657  1C29                     l7600:	
 13658  1C29  1BA1               	btfsc	___lwdiv@divisor+1,7
 13659  1C2A  2C35               	goto	l7602
 13660  1C2B  3001               	movlw	1
 13661  1C2C                     u6475:	
 13662  1C2C  35A0               	lslf	___lwdiv@divisor,f
 13663  1C2D  0DA1               	rlf	___lwdiv@divisor+1,f
 13664  1C2E  0B89               	decfsz	9,f
 13665  1C2F  2C2C               	goto	u6475
 13666  1C30  3001               	movlw	1
 13667  1C31  00A4               	movwf	??___lwdiv
 13668  1C32  0824               	movf	??___lwdiv,w
 13669  1C33  07A7               	addwf	___lwdiv@counter,f
 13670  1C34  2C29               	goto	l7600
 13671  1C35                     l7602:	
 13672  1C35  3001               	movlw	1
 13673  1C36                     u6495:	
 13674  1C36  35A5               	lslf	___lwdiv@quotient,f
 13675  1C37  0DA6               	rlf	___lwdiv@quotient+1,f
 13676  1C38  0B89               	decfsz	9,f
 13677  1C39  2C36               	goto	u6495
 13678  1C3A  0821               	movf	___lwdiv@divisor+1,w
 13679  1C3B  0223               	subwf	___lwdiv@dividend+1,w
 13680  1C3C  1D03               	skipz
 13681  1C3D  2C40               	goto	u6505
 13682  1C3E  0820               	movf	___lwdiv@divisor,w
 13683  1C3F  0222               	subwf	___lwdiv@dividend,w
 13684  1C40                     u6505:	
 13685  1C40  1C03               	skipc
 13686  1C41  2C47               	goto	l7608
 13687  1C42  0820               	movf	___lwdiv@divisor,w
 13688  1C43  02A2               	subwf	___lwdiv@dividend,f
 13689  1C44  0821               	movf	___lwdiv@divisor+1,w
 13690  1C45  3BA3               	subwfb	___lwdiv@dividend+1,f
 13691  1C46  1425               	bsf	___lwdiv@quotient,0
 13692  1C47                     l7608:	
 13693  1C47  3001               	movlw	1
 13694  1C48                     u6515:	
 13695  1C48  36A1               	lsrf	___lwdiv@divisor+1,f
 13696  1C49  0CA0               	rrf	___lwdiv@divisor,f
 13697  1C4A  0B89               	decfsz	9,f
 13698  1C4B  2C48               	goto	u6515
 13699  1C4C  3001               	movlw	1
 13700  1C4D  02A7               	subwf	___lwdiv@counter,f
 13701  1C4E  1D03               	btfss	3,2
 13702  1C4F  2C35               	goto	l7602
 13703  1C50                     l7612:	
 13704  1C50  0826               	movf	___lwdiv@quotient+1,w
 13705  1C51  01A1               	clrf	?___lwdiv+1
 13706  1C52  07A1               	addwf	?___lwdiv+1,f
 13707  1C53  0825               	movf	___lwdiv@quotient,w
 13708  1C54  01A0               	clrf	?___lwdiv
 13709  1C55  07A0               	addwf	?___lwdiv,f
 13710  1C56  0008               	return
 13711  1C57                     __end_of___lwdiv:	
 13712                           
 13713                           	psect	text74
 13714  25D7                     __ptext74:	
 13715 ;; *************** function _Load_Initialization *****************
 13716 ;; Defined at:
 13717 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;		None               void
 13724 ;; Registers used:
 13725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;Total ram usage:        1 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    5
 13738 ;; This function calls:
 13739 ;;		_setLoad_AH_AL_Restore
 13740 ;; This function is called by:
 13741 ;;		_main
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _Load_Initialization
 13747  25D7                     _Load_Initialization:	
 13748                           
 13749                           ;OverLoad_B1.c: 10: Load=&Load1;
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13753  25D7  3020               	movlw	_Load1& (0+255)
 13754  25D8  0020               	movlb	0	; select bank0
 13755  25D9  00A2               	movwf	??_Load_Initialization
 13756  25DA  0822               	movf	??_Load_Initialization,w
 13757  25DB  00EE               	movwf	_Load
 13758                           
 13759                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13760  25DC  086E               	movf	_Load,w
 13761  25DD  0086               	movwf	6
 13762  25DE  3002               	movlw	2	; select bank4/5
 13763  25DF  0087               	movwf	7
 13764  25E0  1581               	bsf	1,3
 13765                           
 13766                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13767  25E1  3199  213A         	fcall	_setLoad_AH_AL_Restore
 13768  25E3  0008               	return
 13769  25E4                     __end_of_Load_Initialization:	
 13770                           
 13771                           	psect	text75
 13772  193A                     __ptext75:	
 13773 ;; *************** function _setLoad_AH_AL_Restore *****************
 13774 ;; Defined at:
 13775 ;;		line 348 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;		None
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  i               1    1[BANK0 ] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;		None               void
 13782 ;; Registers used:
 13783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:        2 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    4
 13796 ;; This function calls:
 13797 ;;		Nothing
 13798 ;; This function is called by:
 13799 ;;		_Load_Initialization
 13800 ;;		_Load_Main
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           
 13805                           ;psect for function _setLoad_AH_AL_Restore
 13806  193A                     _setLoad_AH_AL_Restore:	
 13807                           
 13808                           ;OverLoad_B1.c: 350: char i;
 13809                           ;OverLoad_B1.c: 351: for(i=0 ; i<5 ;i++)
 13810                           
 13811                           ;incstack = 0
 13812                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13813  193A  0020               	movlb	0	; select bank0
 13814  193B  01A1               	clrf	setLoad_AH_AL_Restore@i
 13815  193C                     L11:	
 13816  193C  3005               	movlw	5
 13817  193D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13818  193E  1803               	btfsc	3,0
 13819  193F  0008               	return
 13820                           
 13821                           ;OverLoad_B1.c: 352: {
 13822                           ;OverLoad_B1.c: 353: Load->AH[i]=0;
 13823  1940  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13824  1941  3E08               	addlw	8
 13825  1942  076E               	addwf	_Load,w
 13826  1943  00A0               	movwf	??_setLoad_AH_AL_Restore
 13827  1944  0820               	movf	??_setLoad_AH_AL_Restore,w
 13828  1945  0086               	movwf	6
 13829  1946  3002               	movlw	2	; select bank4/5
 13830  1947  0087               	movwf	7
 13831  1948  3000               	movlw	0
 13832  1949  3FC0               	movwi [0]fsr1
 13833  194A  3FC1               	movwi [1]fsr1
 13834                           
 13835                           ;OverLoad_B1.c: 354: Load->AL[i]=0xffff;
 13836  194B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13837  194C  3E1A               	addlw	26
 13838  194D  076E               	addwf	_Load,w
 13839  194E  00A0               	movwf	??_setLoad_AH_AL_Restore
 13840  194F  0820               	movf	??_setLoad_AH_AL_Restore,w
 13841  1950  0086               	movwf	6
 13842  1951  3002               	movlw	2	; select bank4/5
 13843  1952  0087               	movwf	7
 13844  1953  30FF               	movlw	255
 13845  1954  3FC0               	movwi [0]fsr1
 13846  1955  30FF               	movlw	255
 13847  1956  3FC1               	movwi [1]fsr1
 13848  1957  3001               	movlw	1
 13849  1958  00A0               	movwf	??_setLoad_AH_AL_Restore
 13850  1959  0820               	movf	??_setLoad_AH_AL_Restore,w
 13851  195A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13852  195B  293C               	goto	L11
 13853  195C                     __end_of_setLoad_AH_AL_Restore:	
 13854                           
 13855                           	psect	text76
 13856  25CB                     __ptext76:	
 13857 ;; *************** function _LED_Main *****************
 13858 ;; Defined at:
 13859 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;		None
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;		None
 13864 ;; Return value:  Size  Location     Type
 13865 ;;		None               void
 13866 ;; Registers used:
 13867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;Total ram usage:        0 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    6
 13880 ;; This function calls:
 13881 ;;		_setLED_Main
 13882 ;; This function is called by:
 13883 ;;		_main
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           
 13888                           ;psect for function _LED_Main
 13889  25CB                     _LED_Main:	
 13890                           
 13891                           ;LED_B1.c: 54: setLED_Main(1);
 13892                           
 13893                           ;incstack = 0
 13894                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13895  25CB  3001               	movlw	1
 13896  25CC  319C  2457  31A5   	fcall	_setLED_Main
 13897                           
 13898                           ;LED_B1.c: 57: setLED_Main(2);
 13899  25CF  3002               	movlw	2
 13900  25D0  319C  2457  31A5   	fcall	_setLED_Main
 13901                           
 13902                           ;LED_B1.c: 63: setLED_Main(99);
 13903  25D3  3063               	movlw	99
 13904  25D4  319C  2457         	fcall	_setLED_Main
 13905  25D6  0008               	return
 13906  25D7                     __end_of_LED_Main:	
 13907                           
 13908                           	psect	text77
 13909  1C57                     __ptext77:	
 13910 ;; *************** function _setLED_Main *****************
 13911 ;; Defined at:
 13912 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;  led             1    wreg     unsigned char 
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;  led             1    4[BANK0 ] unsigned char 
 13917 ;; Return value:  Size  Location     Type
 13918 ;;		None               void
 13919 ;; Registers used:
 13920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13921 ;; Tracked objects:
 13922 ;;		On entry : 0/0
 13923 ;;		On exit  : 0/0
 13924 ;;		Unchanged: 0/0
 13925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;Total ram usage:        3 bytes
 13931 ;; Hardware stack levels used:    1
 13932 ;; Hardware stack levels required when called:    5
 13933 ;; This function calls:
 13934 ;;		_LedPointSelect
 13935 ;; This function is called by:
 13936 ;;		_LED_Main
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940                           
 13941                           ;psect for function _setLED_Main
 13942  1C57                     _setLED_Main:	
 13943                           
 13944                           ;incstack = 0
 13945                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13946                           ;setLED_Main@led stored from wreg
 13947  1C57  0020               	movlb	0	; select bank0
 13948  1C58  00A4               	movwf	setLED_Main@led
 13949                           
 13950                           ;LED_B1.c: 216: LedPointSelect(led);
 13951  1C59  0824               	movf	setLED_Main@led,w
 13952  1C5A  3199  2118  319C   	fcall	_LedPointSelect
 13953                           
 13954                           ;LED_B1.c: 217: if(LED->GO)
 13955  1C5D  0021               	movlb	1	; select bank1
 13956  1C5E  083B               	movf	_LED^(0+128),w
 13957  1C5F  0086               	movwf	6
 13958  1C60  0187               	clrf	7
 13959  1C61  1C81               	btfss	1,1
 13960  1C62  0008               	return
 13961                           
 13962                           ;LED_B1.c: 218: {
 13963                           ;LED_B1.c: 219: LED->Time++;
 13964  1C63  0A3B               	incf	_LED^(0+128),w
 13965  1C64  0086               	movwf	6
 13966  1C65  0187               	clrf	7
 13967  1C66  3001               	movlw	1
 13968  1C67  0781               	addwf	1,f
 13969  1C68  3141               	addfsr 1,1
 13970  1C69  1803               	skipnc
 13971  1C6A  0A81               	incf	1,f
 13972                           
 13973                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13974  1C6B  0A3B               	incf	_LED^(0+128),w
 13975  1C6C  0086               	movwf	6
 13976  1C6D  0187               	clrf	7
 13977  1C6E  3F40               	moviw [0]fsr1
 13978  1C6F  0020               	movlb	0	; select bank0
 13979  1C70  00A2               	movwf	??_setLED_Main
 13980  1C71  3F41               	moviw [1]fsr1
 13981  1C72  00A3               	movwf	??_setLED_Main+1
 13982  1C73  3000               	movlw	0
 13983  1C74  0223               	subwf	??_setLED_Main+1,w
 13984  1C75  3032               	movlw	50
 13985  1C76  1903               	skipnz
 13986  1C77  0222               	subwf	??_setLED_Main,w
 13987  1C78  1C03               	skipc
 13988  1C79  0008               	return
 13989                           
 13990                           ;LED_B1.c: 221: {
 13991                           ;LED_B1.c: 222: LED->Time=0;
 13992  1C7A  0021               	movlb	1	; select bank1
 13993  1C7B  0A3B               	incf	_LED^(0+128),w
 13994  1C7C  0086               	movwf	6
 13995  1C7D  0187               	clrf	7
 13996  1C7E  3000               	movlw	0
 13997  1C7F  3FC0               	movwi [0]fsr1
 13998  1C80  3FC1               	movwi [1]fsr1
 13999                           
 14000                           ;LED_B1.c: 224: if(led == 1)
 14001  1C81  0020               	movlb	0	; select bank0
 14002  1C82  0824               	movf	setLED_Main@led,w
 14003  1C83  3A01               	xorlw	1
 14004  1C84  1D03               	skipz
 14005  1C85  2C89               	goto	l7176
 14006                           
 14007                           ;LED_B1.c: 225: {
 14008                           ;LED_B1.c: 226: RA3=~RA3;
 14009  1C86  3008               	movlw	8
 14010  1C87  068C               	xorwf	12,f
 14011                           
 14012                           ;LED_B1.c: 227: }
 14013  1C88  0008               	return
 14014  1C89                     l7176:	
 14015                           
 14016                           ;LED_B1.c: 230: else if(led == 2)
 14017  1C89  0824               	movf	setLED_Main@led,w
 14018  1C8A  3A02               	xorlw	2
 14019  1C8B  1D03               	skipz
 14020  1C8C  2C90               	goto	l7180
 14021                           
 14022                           ;LED_B1.c: 231: {
 14023                           ;LED_B1.c: 232: RC7=~RC7;
 14024  1C8D  3080               	movlw	128
 14025  1C8E  068E               	xorwf	14,f
 14026                           
 14027                           ;LED_B1.c: 233: }
 14028  1C8F  0008               	return
 14029  1C90                     l7180:	
 14030                           
 14031                           ;LED_B1.c: 242: else if(led == 99)
 14032  1C90  0824               	movf	setLED_Main@led,w
 14033  1C91  3A63               	xorlw	99
 14034  1C92  1D03               	skipz
 14035  1C93  0008               	return
 14036                           
 14037                           ;LED_B1.c: 243: {
 14038                           ;LED_B1.c: 244: RB5=~RB5;
 14039  1C94  3020               	movlw	32
 14040  1C95  068D               	xorwf	13,f
 14041  1C96  0008               	return
 14042  1C97                     __end_of_setLED_Main:	
 14043                           
 14044                           	psect	text78
 14045  25BF                     __ptext78:	
 14046 ;; *************** function _LED_Initialization *****************
 14047 ;; Defined at:
 14048 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;		None
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;		None
 14053 ;; Return value:  Size  Location     Type
 14054 ;;		None               void
 14055 ;; Registers used:
 14056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:        0 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    7
 14069 ;; This function calls:
 14070 ;;		_setLED_Initialization
 14071 ;; This function is called by:
 14072 ;;		_main
 14073 ;; This function uses a non-reentrant model
 14074 ;;
 14075                           
 14076                           
 14077                           ;psect for function _LED_Initialization
 14078  25BF                     _LED_Initialization:	
 14079                           
 14080                           ;LED_B1.c: 38: setLED_Initialization(1);
 14081                           
 14082                           ;incstack = 0
 14083                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14084  25BF  3001               	movlw	1
 14085  25C0  31A6  26C9  31A5   	fcall	_setLED_Initialization
 14086                           
 14087                           ;LED_B1.c: 41: setLED_Initialization(2);
 14088  25C3  3002               	movlw	2
 14089  25C4  31A6  26C9  31A5   	fcall	_setLED_Initialization
 14090                           
 14091                           ;LED_B1.c: 47: setLED_Initialization(99);
 14092  25C7  3063               	movlw	99
 14093  25C8  31A6  26C9         	fcall	_setLED_Initialization
 14094  25CA  0008               	return
 14095  25CB                     __end_of_LED_Initialization:	
 14096                           
 14097                           	psect	text79
 14098  26C9                     __ptext79:	
 14099 ;; *************** function _setLED_Initialization *****************
 14100 ;; Defined at:
 14101 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14102 ;; Parameters:    Size  Location     Type
 14103 ;;  led             1    wreg     unsigned char 
 14104 ;; Auto vars:     Size  Location     Type
 14105 ;;  led             1    4[BANK0 ] unsigned char 
 14106 ;; Return value:  Size  Location     Type
 14107 ;;		None               void
 14108 ;; Registers used:
 14109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14110 ;; Tracked objects:
 14111 ;;		On entry : 0/0
 14112 ;;		On exit  : 0/0
 14113 ;;		Unchanged: 0/0
 14114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14119 ;;Total ram usage:        1 bytes
 14120 ;; Hardware stack levels used:    1
 14121 ;; Hardware stack levels required when called:    6
 14122 ;; This function calls:
 14123 ;;		_LedPointSelect
 14124 ;;		_setLED
 14125 ;; This function is called by:
 14126 ;;		_LED_Initialization
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130                           
 14131                           ;psect for function _setLED_Initialization
 14132  26C9                     _setLED_Initialization:	
 14133                           
 14134                           ;incstack = 0
 14135                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14136                           ;setLED_Initialization@led stored from wreg
 14137  26C9  0020               	movlb	0	; select bank0
 14138  26CA  00A4               	movwf	setLED_Initialization@led
 14139                           
 14140                           ;LED_B1.c: 69: LedPointSelect(led);
 14141  26CB  0824               	movf	setLED_Initialization@led,w
 14142  26CC  3199  2118  31A6   	fcall	_LedPointSelect
 14143                           
 14144                           ;LED_B1.c: 70: LED->Enable=1;
 14145  26CF  0021               	movlb	1	; select bank1
 14146  26D0  083B               	movf	_LED^(0+128),w
 14147  26D1  0086               	movwf	6
 14148  26D2  0187               	clrf	7
 14149  26D3  1401               	bsf	1,0
 14150                           
 14151                           ;LED_B1.c: 71: setLED(led,0);
 14152  26D4  0020               	movlb	0	; select bank0
 14153  26D5  01A2               	clrf	setLED@command
 14154  26D6  0824               	movf	setLED_Initialization@led,w
 14155  26D7  3191  215E         	fcall	_setLED
 14156  26D9  0008               	return
 14157  26DA                     __end_of_setLED_Initialization:	
 14158                           
 14159                           	psect	text80
 14160  1DE1                     __ptext80:	
 14161 ;; *************** function _Flash_Memory_Main *****************
 14162 ;; Defined at:
 14163 ;;		line 873 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;		None
 14166 ;; Auto vars:     Size  Location     Type
 14167 ;;		None
 14168 ;; Return value:  Size  Location     Type
 14169 ;;		None               void
 14170 ;; Registers used:
 14171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14172 ;; Tracked objects:
 14173 ;;		On entry : 0/0
 14174 ;;		On exit  : 0/0
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;Total ram usage:        0 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; Hardware stack levels required when called:    7
 14184 ;; This function calls:
 14185 ;;		_Flash_Memory_Modify
 14186 ;; This function is called by:
 14187 ;;		_main
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           
 14192                           ;psect for function _Flash_Memory_Main
 14193  1DE1                     _Flash_Memory_Main:	
 14194                           
 14195                           ;MCU_B1.c: 875: if(Memory->GO)
 14196                           
 14197                           ;incstack = 0
 14198                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14199  1DE1  0021               	movlb	1	; select bank1
 14200  1DE2  0867               	movf	_Memory^(0+128),w
 14201  1DE3  3E22               	addlw	34
 14202  1DE4  0086               	movwf	6
 14203  1DE5  3001               	movlw	1	; select bank2/3
 14204  1DE6  0087               	movwf	7
 14205  1DE7  1C81               	btfss	1,1
 14206  1DE8  0008               	return
 14207                           
 14208                           ;MCU_B1.c: 876: {
 14209                           ;MCU_B1.c: 877: if(Memory->Modify)
 14210  1DE9  0867               	movf	_Memory^(0+128),w
 14211  1DEA  3E22               	addlw	34
 14212  1DEB  0086               	movwf	6
 14213  1DEC  3001               	movlw	1	; select bank2/3
 14214  1DED  0087               	movwf	7
 14215  1DEE  1C01               	btfss	1,0
 14216  1DEF  2E1E               	goto	l9544
 14217                           
 14218                           ;MCU_B1.c: 878: {
 14219                           ;MCU_B1.c: 879: Memory->Time++;
 14220  1DF0  0867               	movf	_Memory^(0+128),w
 14221  1DF1  3E23               	addlw	35
 14222  1DF2  0086               	movwf	6
 14223  1DF3  3001               	movlw	1	; select bank2/3
 14224  1DF4  0087               	movwf	7
 14225  1DF5  3001               	movlw	1
 14226  1DF6  0781               	addwf	1,f
 14227  1DF7  3141               	addfsr 1,1
 14228  1DF8  1803               	skipnc
 14229  1DF9  0A81               	incf	1,f
 14230                           
 14231                           ;MCU_B1.c: 880: if(Memory->Time == 25)
 14232  1DFA  0867               	movf	_Memory^(0+128),w
 14233  1DFB  3E23               	addlw	35
 14234  1DFC  0086               	movwf	6
 14235  1DFD  3001               	movlw	1	; select bank2/3
 14236  1DFE  0087               	movwf	7
 14237  1DFF  3F40               	moviw [0]fsr1
 14238  1E00  3A19               	xorlw	25
 14239  1E01  1D03               	skipz
 14240  1E02  2E05               	goto	u9305
 14241  1E03  3F41               	moviw [1]fsr1
 14242  1E04  3A00               	xorlw	0
 14243  1E05                     u9305:	
 14244  1E05  1D03               	skipz
 14245  1E06  0008               	return
 14246                           
 14247                           ;MCU_B1.c: 881: {
 14248                           ;MCU_B1.c: 882: Memory->Time=0;
 14249  1E07  0867               	movf	_Memory^(0+128),w
 14250  1E08  3E23               	addlw	35
 14251  1E09  0086               	movwf	6
 14252  1E0A  3001               	movlw	1	; select bank2/3
 14253  1E0B  0087               	movwf	7
 14254  1E0C  3000               	movlw	0
 14255  1E0D  3FC0               	movwi [0]fsr1
 14256  1E0E  3FC1               	movwi [1]fsr1
 14257                           
 14258                           ;MCU_B1.c: 883: Memory->Modify=0;
 14259  1E0F  0867               	movf	_Memory^(0+128),w
 14260  1E10  3E22               	addlw	34
 14261  1E11  0086               	movwf	6
 14262  1E12  3001               	movlw	1	; select bank2/3
 14263  1E13  0087               	movwf	7
 14264  1E14  1001               	bcf	1,0
 14265                           
 14266                           ;MCU_B1.c: 884: Memory->GO=0;
 14267  1E15  0867               	movf	_Memory^(0+128),w
 14268  1E16  3E22               	addlw	34
 14269  1E17  0086               	movwf	6
 14270  1E18  3001               	movlw	1	; select bank2/3
 14271  1E19  0087               	movwf	7
 14272  1E1A  1081               	bcf	1,1
 14273                           
 14274                           ;MCU_B1.c: 885: Flash_Memory_Modify();
 14275  1E1B  3193  2358         	fcall	_Flash_Memory_Modify
 14276                           
 14277                           ;MCU_B1.c: 887: }
 14278                           ;MCU_B1.c: 888: }
 14279  1E1D  0008               	return
 14280  1E1E                     l9544:	
 14281                           
 14282                           ;MCU_B1.c: 889: else
 14283                           ;MCU_B1.c: 890: {
 14284                           ;MCU_B1.c: 891: Memory->GO=0;
 14285  1E1E  0021               	movlb	1	; select bank1
 14286  1E1F  0867               	movf	_Memory^(0+128),w
 14287  1E20  3E22               	addlw	34
 14288  1E21  0086               	movwf	6
 14289  1E22  3001               	movlw	1	; select bank2/3
 14290  1E23  0087               	movwf	7
 14291  1E24  1081               	bcf	1,1
 14292  1E25  0008               	return
 14293  1E26                     __end_of_Flash_Memory_Main:	
 14294                           
 14295                           	psect	text81
 14296  1358                     __ptext81:	
 14297 ;; *************** function _Flash_Memory_Modify *****************
 14298 ;; Defined at:
 14299 ;;		line 948 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14300 ;; Parameters:    Size  Location     Type
 14301 ;;		None
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;  i               1    6[BANK0 ] unsigned char 
 14304 ;; Return value:  Size  Location     Type
 14305 ;;		None               void
 14306 ;; Registers used:
 14307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14308 ;; Tracked objects:
 14309 ;;		On entry : 0/0
 14310 ;;		On exit  : 0/0
 14311 ;;		Unchanged: 0/0
 14312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;Total ram usage:        3 bytes
 14318 ;; Hardware stack levels used:    1
 14319 ;; Hardware stack levels required when called:    6
 14320 ;; This function calls:
 14321 ;;		_Flash_Memory_Erasing
 14322 ;;		_Flash_Memory_Read
 14323 ;;		_Flash_Memory_Write
 14324 ;; This function is called by:
 14325 ;;		_Flash_Memory_Main
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function _Flash_Memory_Modify
 14331  1358                     _Flash_Memory_Modify:	
 14332                           
 14333                           ;MCU_B1.c: 950: char i;
 14334                           ;MCU_B1.c: 951: for(i=0;i<32;i++)
 14335                           
 14336                           ;incstack = 0
 14337                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14338  1358  0020               	movlb	0	; select bank0
 14339  1359  01A6               	clrf	Flash_Memory_Modify@i
 14340  135A  3020               	movlw	32
 14341  135B  0226               	subwf	Flash_Memory_Modify@i,w
 14342  135C  1803               	btfsc	3,0
 14343  135D  2B77               	goto	l9052
 14344  135E                     l9046:	
 14345                           
 14346                           ;MCU_B1.c: 952: {
 14347                           ;MCU_B1.c: 953: Memory->Data[i]=Flash_Memory_Read(i);
 14348  135E  0826               	movf	Flash_Memory_Modify@i,w
 14349  135F  31A7  2761  3193   	fcall	_Flash_Memory_Read
 14350  1362  0020               	movlb	0	; select bank0
 14351  1363  00A4               	movwf	??_Flash_Memory_Modify
 14352  1364  0826               	movf	Flash_Memory_Modify@i,w
 14353  1365  0021               	movlb	1	; select bank1
 14354  1366  0767               	addwf	_Memory^(0+128),w
 14355  1367  0020               	movlb	0	; select bank0
 14356  1368  00A5               	movwf	??_Flash_Memory_Modify+1
 14357  1369  0825               	movf	??_Flash_Memory_Modify+1,w
 14358  136A  0086               	movwf	6
 14359  136B  3001               	movlw	1	; select bank2/3
 14360  136C  0087               	movwf	7
 14361  136D  0824               	movf	??_Flash_Memory_Modify,w
 14362  136E  0081               	movwf	1
 14363  136F  3001               	movlw	1
 14364  1370  00A4               	movwf	??_Flash_Memory_Modify
 14365  1371  0824               	movf	??_Flash_Memory_Modify,w
 14366  1372  07A6               	addwf	Flash_Memory_Modify@i,f
 14367  1373  3020               	movlw	32
 14368  1374  0226               	subwf	Flash_Memory_Modify@i,w
 14369  1375  1C03               	skipc
 14370  1376  2B5E               	goto	l9046
 14371  1377                     l9052:	
 14372                           
 14373                           ;MCU_B1.c: 954: }
 14374                           ;MCU_B1.c: 955: Memory->Data[0]=Product->Data[12];
 14375  1377  086F               	movf	_Product,w
 14376  1378  3E0C               	addlw	12
 14377  1379  0086               	movwf	6
 14378  137A  3001               	movlw	1	; select bank2/3
 14379  137B  0087               	movwf	7
 14380  137C  0801               	movf	1,w
 14381  137D  00A4               	movwf	??_Flash_Memory_Modify
 14382  137E  0021               	movlb	1	; select bank1
 14383  137F  0867               	movf	_Memory^(0+128),w
 14384  1380  0086               	movwf	6
 14385  1381  3001               	movlw	1	; select bank2/3
 14386  1382  0087               	movwf	7
 14387  1383  0020               	movlb	0	; select bank0
 14388  1384  0824               	movf	??_Flash_Memory_Modify,w
 14389  1385  0081               	movwf	1
 14390                           
 14391                           ;MCU_B1.c: 956: Memory->Data[1]=Product->Data[13];
 14392  1386  086F               	movf	_Product,w
 14393  1387  3E0D               	addlw	13
 14394  1388  0086               	movwf	6
 14395  1389  3001               	movlw	1	; select bank2/3
 14396  138A  0087               	movwf	7
 14397  138B  0801               	movf	1,w
 14398  138C  00A4               	movwf	??_Flash_Memory_Modify
 14399  138D  0021               	movlb	1	; select bank1
 14400  138E  0A67               	incf	_Memory^(0+128),w
 14401  138F  0086               	movwf	6
 14402  1390  3001               	movlw	1	; select bank2/3
 14403  1391  0087               	movwf	7
 14404  1392  0020               	movlb	0	; select bank0
 14405  1393  0824               	movf	??_Flash_Memory_Modify,w
 14406  1394  0081               	movwf	1
 14407                           
 14408                           ;MCU_B1.c: 957: Memory->Data[2]=Product->Data[14];
 14409  1395  086F               	movf	_Product,w
 14410  1396  3E0E               	addlw	14
 14411  1397  0086               	movwf	6
 14412  1398  3001               	movlw	1	; select bank2/3
 14413  1399  0087               	movwf	7
 14414  139A  0801               	movf	1,w
 14415  139B  00A4               	movwf	??_Flash_Memory_Modify
 14416  139C  0021               	movlb	1	; select bank1
 14417  139D  0867               	movf	_Memory^(0+128),w
 14418  139E  3E02               	addlw	2
 14419  139F  0086               	movwf	6
 14420  13A0  3001               	movlw	1	; select bank2/3
 14421  13A1  0087               	movwf	7
 14422  13A2  0020               	movlb	0	; select bank0
 14423  13A3  0824               	movf	??_Flash_Memory_Modify,w
 14424  13A4  0081               	movwf	1
 14425                           
 14426                           ;MCU_B1.c: 963: if(Memory->LoopSave)
 14427  13A5  0021               	movlb	1	; select bank1
 14428  13A6  0867               	movf	_Memory^(0+128),w
 14429  13A7  3E22               	addlw	34
 14430  13A8  0086               	movwf	6
 14431  13A9  3001               	movlw	1	; select bank2/3
 14432  13AA  0087               	movwf	7
 14433  13AB  1D01               	btfss	1,2
 14434  13AC  2BBE               	goto	l9056
 14435                           
 14436                           ;MCU_B1.c: 964: {
 14437                           ;MCU_B1.c: 965: Memory->LoopSave=0;
 14438  13AD  0867               	movf	_Memory^(0+128),w
 14439  13AE  3E22               	addlw	34
 14440  13AF  0086               	movwf	6
 14441  13B0  3001               	movlw	1	; select bank2/3
 14442  13B1  0087               	movwf	7
 14443  13B2  1101               	bcf	1,2
 14444                           
 14445                           ;MCU_B1.c: 966: TMain->FirstOpen=0;
 14446  13B3  087D               	movf	_TMain,w
 14447  13B4  0086               	movwf	6
 14448  13B5  3001               	movlw	1	; select bank2/3
 14449  13B6  0087               	movwf	7
 14450  13B7  1281               	bcf	1,5
 14451                           
 14452                           ;MCU_B1.c: 967: TMain->First=0;
 14453  13B8  087D               	movf	_TMain,w
 14454  13B9  3E03               	addlw	3
 14455  13BA  0086               	movwf	6
 14456  13BB  3001               	movlw	1	; select bank2/3
 14457  13BC  0087               	movwf	7
 14458  13BD  1081               	bcf	1,1
 14459  13BE                     l9056:	
 14460                           
 14461                           ;MCU_B1.c: 969: }
 14462                           ;MCU_B1.c: 970: GIE=0;
 14463  13BE  138B               	bcf	11,7	;volatile
 14464                           
 14465                           ;MCU_B1.c: 971: Flash_Memory_Erasing();
 14466  13BF  31A5  25B3  3193   	fcall	_Flash_Memory_Erasing
 14467                           
 14468                           ;MCU_B1.c: 972: Flash_Memory_Write();
 14469  13C2  319B  2388         	fcall	_Flash_Memory_Write
 14470                           
 14471                           ;MCU_B1.c: 973: GIE=1;
 14472  13C4  178B               	bsf	11,7	;volatile
 14473  13C5  0008               	return
 14474  13C6                     __end_of_Flash_Memory_Modify:	
 14475                           
 14476                           	psect	text82
 14477  25B3                     __ptext82:	
 14478 ;; *************** function _Flash_Memory_Erasing *****************
 14479 ;; Defined at:
 14480 ;;		line 937 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;		None
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;		None
 14485 ;; Return value:  Size  Location     Type
 14486 ;;		None               void
 14487 ;; Registers used:
 14488 ;;		wreg, status,2, status,0, pclath, cstack
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;Total ram usage:        0 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    5
 14501 ;; This function calls:
 14502 ;;		_Flash_Memory_Unlock
 14503 ;; This function is called by:
 14504 ;;		_Flash_Memory_Modify
 14505 ;; This function uses a non-reentrant model
 14506 ;;
 14507                           
 14508                           
 14509                           ;psect for function _Flash_Memory_Erasing
 14510  25B3                     _Flash_Memory_Erasing:	
 14511                           
 14512                           ;MCU_B1.c: 939: CFGS=0;
 14513                           
 14514                           ;incstack = 0
 14515                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14516  25B3  0023               	movlb	3	; select bank3
 14517  25B4  1315               	bcf	21,6	;volatile
 14518                           
 14519                           ;MCU_B1.c: 940: PMADRH=0x30;
 14520  25B5  3030               	movlw	48
 14521  25B6  0092               	movwf	18	;volatile
 14522                           
 14523                           ;MCU_B1.c: 941: PMADRL=0x00;
 14524  25B7  0191               	clrf	17	;volatile
 14525                           
 14526                           ;MCU_B1.c: 942: FREE=1;
 14527  25B8  1615               	bsf	21,4	;volatile
 14528                           
 14529                           ;MCU_B1.c: 943: WREN=1;
 14530  25B9  1515               	bsf	21,2	;volatile
 14531                           
 14532                           ;MCU_B1.c: 944: Flash_Memory_Unlock();
 14533  25BA  31A4  24D7         	fcall	_Flash_Memory_Unlock
 14534                           
 14535                           ;MCU_B1.c: 945: WREN=0;
 14536  25BC  0023               	movlb	3	; select bank3
 14537  25BD  1115               	bcf	21,2	;volatile
 14538  25BE  0008               	return
 14539  25BF                     __end_of_Flash_Memory_Erasing:	
 14540                           
 14541                           	psect	text83
 14542  0BE3                     __ptext83:	
 14543 ;; *************** function _Flash_Memory_Initialization *****************
 14544 ;; Defined at:
 14545 ;;		line 828 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;		None
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  i               1   62[BANK0 ] unsigned char 
 14550 ;; Return value:  Size  Location     Type
 14551 ;;		None               void
 14552 ;; Registers used:
 14553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14554 ;; Tracked objects:
 14555 ;;		On entry : 0/0
 14556 ;;		On exit  : 0/0
 14557 ;;		Unchanged: 0/0
 14558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;Total ram usage:        2 bytes
 14564 ;; Hardware stack levels used:    1
 14565 ;; Hardware stack levels required when called:    7
 14566 ;; This function calls:
 14567 ;;		_Flash_Memory_Read
 14568 ;;		_Flash_Memory_Write
 14569 ;;		_setPercentValue
 14570 ;; This function is called by:
 14571 ;;		_main
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           
 14576                           ;psect for function _Flash_Memory_Initialization
 14577  0BE3                     _Flash_Memory_Initialization:	
 14578                           
 14579                           ;MCU_B1.c: 830: char i;
 14580                           ;MCU_B1.c: 831: if(Flash_Memory_Read(31) == 0xaa)
 14581                           
 14582                           ;incstack = 0
 14583                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14584  0BE3  301F               	movlw	31
 14585  0BE4  31A7  2761  318B   	fcall	_Flash_Memory_Read
 14586  0BE7  3AAA               	xorlw	170
 14587  0BE8  1D03               	skipz
 14588  0BE9  2C5B               	goto	l9396
 14589                           
 14590                           ;MCU_B1.c: 832: {
 14591                           ;MCU_B1.c: 833: Product->Data[12]=Flash_Memory_Read(0);
 14592  0BEA  3000               	movlw	0
 14593  0BEB  31A7  2761  318B   	fcall	_Flash_Memory_Read
 14594  0BEE  0020               	movlb	0	; select bank0
 14595  0BEF  00DD               	movwf	??_Flash_Memory_Initialization
 14596  0BF0  086F               	movf	_Product,w
 14597  0BF1  3E0C               	addlw	12
 14598  0BF2  0086               	movwf	6
 14599  0BF3  3001               	movlw	1	; select bank2/3
 14600  0BF4  0087               	movwf	7
 14601  0BF5  085D               	movf	??_Flash_Memory_Initialization,w
 14602  0BF6  0081               	movwf	1
 14603                           
 14604                           ;MCU_B1.c: 834: Product->Data[13]=Flash_Memory_Read(1);
 14605  0BF7  3001               	movlw	1
 14606  0BF8  31A7  2761  318B   	fcall	_Flash_Memory_Read
 14607  0BFB  0020               	movlb	0	; select bank0
 14608  0BFC  00DD               	movwf	??_Flash_Memory_Initialization
 14609  0BFD  086F               	movf	_Product,w
 14610  0BFE  3E0D               	addlw	13
 14611  0BFF  0086               	movwf	6
 14612  0C00  3001               	movlw	1	; select bank2/3
 14613  0C01  0087               	movwf	7
 14614  0C02  085D               	movf	??_Flash_Memory_Initialization,w
 14615  0C03  0081               	movwf	1
 14616                           
 14617                           ;MCU_B1.c: 835: Product->Data[14]=Flash_Memory_Read(2);
 14618  0C04  3002               	movlw	2
 14619  0C05  31A7  2761  318B   	fcall	_Flash_Memory_Read
 14620  0C08  0020               	movlb	0	; select bank0
 14621  0C09  00DD               	movwf	??_Flash_Memory_Initialization
 14622  0C0A  086F               	movf	_Product,w
 14623  0C0B  3E0E               	addlw	14
 14624  0C0C  0086               	movwf	6
 14625  0C0D  3001               	movlw	1	; select bank2/3
 14626  0C0E  0087               	movwf	7
 14627  0C0F  085D               	movf	??_Flash_Memory_Initialization,w
 14628  0C10  0081               	movwf	1
 14629                           
 14630                           ;MCU_B1.c: 841: i=setPercentValue(((char)((100-55)*1.5)));
 14631  0C11  3043               	movlw	67
 14632  0C12  319E  2626  318B   	fcall	_setPercentValue
 14633  0C15  0020               	movlb	0	; select bank0
 14634  0C16  00DD               	movwf	??_Flash_Memory_Initialization
 14635  0C17  085D               	movf	??_Flash_Memory_Initialization,w
 14636  0C18  00DE               	movwf	Flash_Memory_Initialization@i
 14637                           
 14638                           ;MCU_B1.c: 842: Product->Data[21]=i;
 14639  0C19  085E               	movf	Flash_Memory_Initialization@i,w
 14640  0C1A  00DD               	movwf	??_Flash_Memory_Initialization
 14641  0C1B  086F               	movf	_Product,w
 14642  0C1C  3E15               	addlw	21
 14643  0C1D  0086               	movwf	6
 14644  0C1E  3001               	movlw	1	; select bank2/3
 14645  0C1F  0087               	movwf	7
 14646  0C20  085D               	movf	??_Flash_Memory_Initialization,w
 14647  0C21  0081               	movwf	1
 14648                           
 14649                           ;MCU_B1.c: 843: Product->Data[22]=i;
 14650  0C22  085E               	movf	Flash_Memory_Initialization@i,w
 14651  0C23  00DD               	movwf	??_Flash_Memory_Initialization
 14652  0C24  086F               	movf	_Product,w
 14653  0C25  3E16               	addlw	22
 14654  0C26  0086               	movwf	6
 14655  0C27  3001               	movlw	1	; select bank2/3
 14656  0C28  0087               	movwf	7
 14657  0C29  085D               	movf	??_Flash_Memory_Initialization,w
 14658  0C2A  0081               	movwf	1
 14659                           
 14660                           ;MCU_B1.c: 844: Product->Data[23]=i;
 14661  0C2B  085E               	movf	Flash_Memory_Initialization@i,w
 14662  0C2C  00DD               	movwf	??_Flash_Memory_Initialization
 14663  0C2D  086F               	movf	_Product,w
 14664  0C2E  3E17               	addlw	23
 14665  0C2F  0086               	movwf	6
 14666  0C30  3001               	movlw	1	; select bank2/3
 14667  0C31  0087               	movwf	7
 14668  0C32  085D               	movf	??_Flash_Memory_Initialization,w
 14669  0C33  0081               	movwf	1
 14670                           
 14671                           ;MCU_B1.c: 846: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product->Data[1
      +                          4]==0xff)
 14672  0C34  086F               	movf	_Product,w
 14673  0C35  3E0C               	addlw	12
 14674  0C36  0086               	movwf	6
 14675  0C37  3001               	movlw	1	; select bank2/3
 14676  0C38  0087               	movwf	7
 14677  0C39  0801               	movf	1,w
 14678  0C3A  3AFF               	xorlw	255
 14679  0C3B  1D03               	skipz
 14680  0C3C  0008               	return
 14681  0C3D  086F               	movf	_Product,w
 14682  0C3E  3E0D               	addlw	13
 14683  0C3F  0086               	movwf	6
 14684  0C40  3001               	movlw	1	; select bank2/3
 14685  0C41  0087               	movwf	7
 14686  0C42  0801               	movf	1,w
 14687  0C43  3AFF               	xorlw	255
 14688  0C44  1D03               	skipz
 14689  0C45  0008               	return
 14690  0C46  086F               	movf	_Product,w
 14691  0C47  3E0E               	addlw	14
 14692  0C48  0086               	movwf	6
 14693  0C49  3001               	movlw	1	; select bank2/3
 14694  0C4A  0087               	movwf	7
 14695  0C4B  0801               	movf	1,w
 14696  0C4C  3AFF               	xorlw	255
 14697  0C4D  1D03               	skipz
 14698  0C4E  0008               	return
 14699                           
 14700                           ;MCU_B1.c: 847: {
 14701                           ;MCU_B1.c: 848: TMain->FirstOpen=1;
 14702  0C4F  087D               	movf	_TMain,w
 14703  0C50  0086               	movwf	6
 14704  0C51  3001               	movlw	1	; select bank2/3
 14705  0C52  0087               	movwf	7
 14706  0C53  1681               	bsf	1,5
 14707                           
 14708                           ;MCU_B1.c: 849: TMain->First=1;
 14709  0C54  087D               	movf	_TMain,w
 14710  0C55  3E03               	addlw	3
 14711  0C56  0086               	movwf	6
 14712  0C57  3001               	movlw	1	; select bank2/3
 14713  0C58  0087               	movwf	7
 14714  0C59  1481               	bsf	1,1
 14715                           
 14716                           ;MCU_B1.c: 850: }
 14717                           ;MCU_B1.c: 851: }
 14718  0C5A  0008               	return
 14719  0C5B                     l9396:	
 14720                           
 14721                           ;MCU_B1.c: 852: else
 14722                           ;MCU_B1.c: 853: {
 14723                           ;MCU_B1.c: 854: i=setPercentValue(((char)((100-55)*1.5)));
 14724  0C5B  3043               	movlw	67
 14725  0C5C  319E  2626  318B   	fcall	_setPercentValue
 14726  0C5F  0020               	movlb	0	; select bank0
 14727  0C60  00DD               	movwf	??_Flash_Memory_Initialization
 14728  0C61  085D               	movf	??_Flash_Memory_Initialization,w
 14729  0C62  00DE               	movwf	Flash_Memory_Initialization@i
 14730                           
 14731                           ;MCU_B1.c: 855: Memory->Data[0]=0xff;
 14732  0C63  30FF               	movlw	255
 14733  0C64  00DD               	movwf	??_Flash_Memory_Initialization
 14734  0C65  0021               	movlb	1	; select bank1
 14735  0C66  0867               	movf	_Memory^(0+128),w
 14736  0C67  0086               	movwf	6
 14737  0C68  3001               	movlw	1	; select bank2/3
 14738  0C69  0087               	movwf	7
 14739  0C6A  0020               	movlb	0	; select bank0
 14740  0C6B  085D               	movf	??_Flash_Memory_Initialization,w
 14741  0C6C  0081               	movwf	1
 14742                           
 14743                           ;MCU_B1.c: 856: Memory->Data[1]=0xff;
 14744  0C6D  30FF               	movlw	255
 14745  0C6E  00DD               	movwf	??_Flash_Memory_Initialization
 14746  0C6F  0021               	movlb	1	; select bank1
 14747  0C70  0A67               	incf	_Memory^(0+128),w
 14748  0C71  0086               	movwf	6
 14749  0C72  3001               	movlw	1	; select bank2/3
 14750  0C73  0087               	movwf	7
 14751  0C74  0020               	movlb	0	; select bank0
 14752  0C75  085D               	movf	??_Flash_Memory_Initialization,w
 14753  0C76  0081               	movwf	1
 14754                           
 14755                           ;MCU_B1.c: 857: Memory->Data[2]=0xff;
 14756  0C77  30FF               	movlw	255
 14757  0C78  00DD               	movwf	??_Flash_Memory_Initialization
 14758  0C79  0021               	movlb	1	; select bank1
 14759  0C7A  0867               	movf	_Memory^(0+128),w
 14760  0C7B  3E02               	addlw	2
 14761  0C7C  0086               	movwf	6
 14762  0C7D  3001               	movlw	1	; select bank2/3
 14763  0C7E  0087               	movwf	7
 14764  0C7F  0020               	movlb	0	; select bank0
 14765  0C80  085D               	movf	??_Flash_Memory_Initialization,w
 14766  0C81  0081               	movwf	1
 14767                           
 14768                           ;MCU_B1.c: 858: Memory->Data[3]=0xff;
 14769  0C82  30FF               	movlw	255
 14770  0C83  00DD               	movwf	??_Flash_Memory_Initialization
 14771  0C84  0021               	movlb	1	; select bank1
 14772  0C85  0867               	movf	_Memory^(0+128),w
 14773  0C86  3E03               	addlw	3
 14774  0C87  0086               	movwf	6
 14775  0C88  3001               	movlw	1	; select bank2/3
 14776  0C89  0087               	movwf	7
 14777  0C8A  0020               	movlb	0	; select bank0
 14778  0C8B  085D               	movf	??_Flash_Memory_Initialization,w
 14779  0C8C  0081               	movwf	1
 14780                           
 14781                           ;MCU_B1.c: 859: Memory->Data[4]=0xff;
 14782  0C8D  30FF               	movlw	255
 14783  0C8E  00DD               	movwf	??_Flash_Memory_Initialization
 14784  0C8F  0021               	movlb	1	; select bank1
 14785  0C90  0867               	movf	_Memory^(0+128),w
 14786  0C91  3E04               	addlw	4
 14787  0C92  0086               	movwf	6
 14788  0C93  3001               	movlw	1	; select bank2/3
 14789  0C94  0087               	movwf	7
 14790  0C95  0020               	movlb	0	; select bank0
 14791  0C96  085D               	movf	??_Flash_Memory_Initialization,w
 14792  0C97  0081               	movwf	1
 14793                           
 14794                           ;MCU_B1.c: 860: Memory->Data[5]=0xff;
 14795  0C98  30FF               	movlw	255
 14796  0C99  00DD               	movwf	??_Flash_Memory_Initialization
 14797  0C9A  0021               	movlb	1	; select bank1
 14798  0C9B  0867               	movf	_Memory^(0+128),w
 14799  0C9C  3E05               	addlw	5
 14800  0C9D  0086               	movwf	6
 14801  0C9E  3001               	movlw	1	; select bank2/3
 14802  0C9F  0087               	movwf	7
 14803  0CA0  0020               	movlb	0	; select bank0
 14804  0CA1  085D               	movf	??_Flash_Memory_Initialization,w
 14805  0CA2  0081               	movwf	1
 14806                           
 14807                           ;MCU_B1.c: 861: Memory->Data[31]=0xaa;
 14808  0CA3  30AA               	movlw	170
 14809  0CA4  00DD               	movwf	??_Flash_Memory_Initialization
 14810  0CA5  0021               	movlb	1	; select bank1
 14811  0CA6  0867               	movf	_Memory^(0+128),w
 14812  0CA7  3E1F               	addlw	31
 14813  0CA8  0086               	movwf	6
 14814  0CA9  3001               	movlw	1	; select bank2/3
 14815  0CAA  0087               	movwf	7
 14816  0CAB  0020               	movlb	0	; select bank0
 14817  0CAC  085D               	movf	??_Flash_Memory_Initialization,w
 14818  0CAD  0081               	movwf	1
 14819                           
 14820                           ;MCU_B1.c: 862: Product->Data[21]=i;
 14821  0CAE  085E               	movf	Flash_Memory_Initialization@i,w
 14822  0CAF  00DD               	movwf	??_Flash_Memory_Initialization
 14823  0CB0  086F               	movf	_Product,w
 14824  0CB1  3E15               	addlw	21
 14825  0CB2  0086               	movwf	6
 14826  0CB3  3001               	movlw	1	; select bank2/3
 14827  0CB4  0087               	movwf	7
 14828  0CB5  085D               	movf	??_Flash_Memory_Initialization,w
 14829  0CB6  0081               	movwf	1
 14830                           
 14831                           ;MCU_B1.c: 863: Product->Data[22]=i;
 14832  0CB7  085E               	movf	Flash_Memory_Initialization@i,w
 14833  0CB8  00DD               	movwf	??_Flash_Memory_Initialization
 14834  0CB9  086F               	movf	_Product,w
 14835  0CBA  3E16               	addlw	22
 14836  0CBB  0086               	movwf	6
 14837  0CBC  3001               	movlw	1	; select bank2/3
 14838  0CBD  0087               	movwf	7
 14839  0CBE  085D               	movf	??_Flash_Memory_Initialization,w
 14840  0CBF  0081               	movwf	1
 14841                           
 14842                           ;MCU_B1.c: 864: Product->Data[23]=i;
 14843  0CC0  085E               	movf	Flash_Memory_Initialization@i,w
 14844  0CC1  00DD               	movwf	??_Flash_Memory_Initialization
 14845  0CC2  086F               	movf	_Product,w
 14846  0CC3  3E17               	addlw	23
 14847  0CC4  0086               	movwf	6
 14848  0CC5  3001               	movlw	1	; select bank2/3
 14849  0CC6  0087               	movwf	7
 14850  0CC7  085D               	movf	??_Flash_Memory_Initialization,w
 14851  0CC8  0081               	movwf	1
 14852                           
 14853                           ;MCU_B1.c: 865: GIE=0;
 14854  0CC9  138B               	bcf	11,7	;volatile
 14855                           
 14856                           ;MCU_B1.c: 866: Flash_Memory_Write();
 14857  0CCA  319B  2388         	fcall	_Flash_Memory_Write
 14858                           
 14859                           ;MCU_B1.c: 867: GIE=1;
 14860  0CCC  178B               	bsf	11,7	;volatile
 14861                           
 14862                           ;MCU_B1.c: 868: TMain->FirstOpen=1;
 14863  0CCD  087D               	movf	_TMain,w
 14864  0CCE  0086               	movwf	6
 14865  0CCF  3001               	movlw	1	; select bank2/3
 14866  0CD0  0087               	movwf	7
 14867  0CD1  1681               	bsf	1,5
 14868                           
 14869                           ;MCU_B1.c: 869: TMain->First=1;
 14870  0CD2  087D               	movf	_TMain,w
 14871  0CD3  3E03               	addlw	3
 14872  0CD4  0086               	movwf	6
 14873  0CD5  3001               	movlw	1	; select bank2/3
 14874  0CD6  0087               	movwf	7
 14875  0CD7  1481               	bsf	1,1
 14876  0CD8  0008               	return
 14877  0CD9                     __end_of_Flash_Memory_Initialization:	
 14878                           
 14879                           	psect	text84
 14880  1B88                     __ptext84:	
 14881 ;; *************** function _Flash_Memory_Write *****************
 14882 ;; Defined at:
 14883 ;;		line 917 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 14884 ;; Parameters:    Size  Location     Type
 14885 ;;		None
 14886 ;; Auto vars:     Size  Location     Type
 14887 ;;  i               1    1[BANK0 ] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;		None               void
 14890 ;; Registers used:
 14891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;Total ram usage:        2 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    5
 14904 ;; This function calls:
 14905 ;;		_Flash_Memory_Unlock
 14906 ;; This function is called by:
 14907 ;;		_Flash_Memory_Initialization
 14908 ;;		_Flash_Memory_Modify
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           
 14913                           ;psect for function _Flash_Memory_Write
 14914  1B88                     _Flash_Memory_Write:	
 14915                           
 14916                           ;MCU_B1.c: 919: char i;
 14917                           ;MCU_B1.c: 920: CFGS=0;
 14918                           
 14919                           ;incstack = 0
 14920                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14921  1B88  0023               	movlb	3	; select bank3
 14922  1B89  1315               	bcf	21,6	;volatile
 14923                           
 14924                           ;MCU_B1.c: 921: PMADRH=0x30;
 14925  1B8A  3030               	movlw	48
 14926  1B8B  0092               	movwf	18	;volatile
 14927                           
 14928                           ;MCU_B1.c: 922: PMDATH=0;
 14929  1B8C  0194               	clrf	20	;volatile
 14930                           
 14931                           ;MCU_B1.c: 923: FREE=0;
 14932  1B8D  1215               	bcf	21,4	;volatile
 14933                           
 14934                           ;MCU_B1.c: 924: LWLO=1;
 14935  1B8E  1695               	bsf	21,5	;volatile
 14936                           
 14937                           ;MCU_B1.c: 925: WREN=1;
 14938  1B8F  1515               	bsf	21,2	;volatile
 14939                           
 14940                           ;MCU_B1.c: 926: for(i=0 ; i<32 ; i++)
 14941  1B90  0020               	movlb	0	; select bank0
 14942  1B91  01A1               	clrf	Flash_Memory_Write@i
 14943  1B92  3020               	movlw	32
 14944  1B93  0221               	subwf	Flash_Memory_Write@i,w
 14945  1B94  1803               	btfsc	3,0
 14946  1B95  2BB2               	goto	l1668
 14947  1B96                     l8706:	
 14948                           
 14949                           ;MCU_B1.c: 927: {
 14950                           ;MCU_B1.c: 928: PMADRL=i;
 14951  1B96  0821               	movf	Flash_Memory_Write@i,w
 14952  1B97  0023               	movlb	3	; select bank3
 14953  1B98  0091               	movwf	17	;volatile
 14954                           
 14955                           ;MCU_B1.c: 929: PMDATL=Memory->Data[i];
 14956  1B99  0020               	movlb	0	; select bank0
 14957  1B9A  0821               	movf	Flash_Memory_Write@i,w
 14958  1B9B  0021               	movlb	1	; select bank1
 14959  1B9C  0767               	addwf	_Memory^(0+128),w
 14960  1B9D  0020               	movlb	0	; select bank0
 14961  1B9E  00A0               	movwf	??_Flash_Memory_Write
 14962  1B9F  0820               	movf	??_Flash_Memory_Write,w
 14963  1BA0  0086               	movwf	6
 14964  1BA1  3001               	movlw	1	; select bank2/3
 14965  1BA2  0087               	movwf	7
 14966  1BA3  0801               	movf	1,w
 14967  1BA4  0023               	movlb	3	; select bank3
 14968  1BA5  0093               	movwf	19	;volatile
 14969                           
 14970                           ;MCU_B1.c: 930: Flash_Memory_Unlock();
 14971  1BA6  31A4  24D7  319B   	fcall	_Flash_Memory_Unlock
 14972  1BA9  3001               	movlw	1
 14973  1BAA  0020               	movlb	0	; select bank0
 14974  1BAB  00A0               	movwf	??_Flash_Memory_Write
 14975  1BAC  0820               	movf	??_Flash_Memory_Write,w
 14976  1BAD  07A1               	addwf	Flash_Memory_Write@i,f
 14977  1BAE  3020               	movlw	32
 14978  1BAF  0221               	subwf	Flash_Memory_Write@i,w
 14979  1BB0  1C03               	skipc
 14980  1BB1  2B96               	goto	l8706
 14981  1BB2                     l1668:	
 14982                           
 14983                           ;MCU_B1.c: 931: }
 14984                           ;MCU_B1.c: 932: LWLO=0;
 14985  1BB2  0023               	movlb	3	; select bank3
 14986  1BB3  1295               	bcf	21,5	;volatile
 14987                           
 14988                           ;MCU_B1.c: 933: Flash_Memory_Unlock();
 14989  1BB4  31A4  24D7         	fcall	_Flash_Memory_Unlock
 14990                           
 14991                           ;MCU_B1.c: 934: WREN=0;
 14992  1BB6  0023               	movlb	3	; select bank3
 14993  1BB7  1115               	bcf	21,2	;volatile
 14994  1BB8  0008               	return
 14995  1BB9                     __end_of_Flash_Memory_Write:	
 14996                           
 14997                           	psect	text85
 14998  24D7                     __ptext85:	
 14999 ;; *************** function _Flash_Memory_Unlock *****************
 15000 ;; Defined at:
 15001 ;;		line 896 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 15002 ;; Parameters:    Size  Location     Type
 15003 ;;		None
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;		None
 15006 ;; Return value:  Size  Location     Type
 15007 ;;		None               void
 15008 ;; Registers used:
 15009 ;;		wreg
 15010 ;; Tracked objects:
 15011 ;;		On entry : 0/0
 15012 ;;		On exit  : 0/0
 15013 ;;		Unchanged: 0/0
 15014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;Total ram usage:        0 bytes
 15020 ;; Hardware stack levels used:    1
 15021 ;; Hardware stack levels required when called:    4
 15022 ;; This function calls:
 15023 ;;		Nothing
 15024 ;; This function is called by:
 15025 ;;		_Flash_Memory_Write
 15026 ;;		_Flash_Memory_Erasing
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _Flash_Memory_Unlock
 15032  24D7                     _Flash_Memory_Unlock:	
 15033                           
 15034                           ;MCU_B1.c: 898: PMCON2=0x55;
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 15038  24D7  3055               	movlw	85
 15039  24D8  0023               	movlb	3	; select bank3
 15040  24D9  0096               	movwf	22	;volatile
 15041                           
 15042                           ;MCU_B1.c: 899: PMCON2=0xaa;
 15043  24DA  30AA               	movlw	170
 15044  24DB  0096               	movwf	22	;volatile
 15045                           
 15046                           ;MCU_B1.c: 900: WR=1;
 15047  24DC  1495               	bsf	21,1	;volatile
 15048                           
 15049                           ;MCU_B1.c: 901: __nop();
 15050  24DD  0000               	nop
 15051                           
 15052                           ;MCU_B1.c: 902: __nop();
 15053  24DE  0000               	nop
 15054  24DF  0008               	return
 15055  24E0                     __end_of_Flash_Memory_Unlock:	
 15056                           
 15057                           	psect	text86
 15058  2761                     __ptext86:	
 15059 ;; *************** function _Flash_Memory_Read *****************
 15060 ;; Defined at:
 15061 ;;		line 905 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;  address         1    wreg     unsigned char 
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  address         1    2[BANK0 ] unsigned char 
 15066 ;;  ret             1    3[BANK0 ] unsigned char 
 15067 ;;  i               1    1[BANK0 ] unsigned char 
 15068 ;; Return value:  Size  Location     Type
 15069 ;;                  1    wreg      unsigned char 
 15070 ;; Registers used:
 15071 ;;		wreg, status,2
 15072 ;; Tracked objects:
 15073 ;;		On entry : 0/0
 15074 ;;		On exit  : 0/0
 15075 ;;		Unchanged: 0/0
 15076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;Total ram usage:        4 bytes
 15082 ;; Hardware stack levels used:    1
 15083 ;; Hardware stack levels required when called:    4
 15084 ;; This function calls:
 15085 ;;		Nothing
 15086 ;; This function is called by:
 15087 ;;		_Flash_Memory_Initialization
 15088 ;;		_Flash_Memory_Modify
 15089 ;; This function uses a non-reentrant model
 15090 ;;
 15091                           
 15092                           
 15093                           ;psect for function _Flash_Memory_Read
 15094  2761                     _Flash_Memory_Read:	
 15095                           
 15096                           ;incstack = 0
 15097                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 15098                           ;Flash_Memory_Read@address stored from wreg
 15099  2761  0020               	movlb	0	; select bank0
 15100  2762  00A2               	movwf	Flash_Memory_Read@address
 15101                           
 15102                           ;MCU_B1.c: 907: char i,ret=0;
 15103  2763  01A3               	clrf	Flash_Memory_Read@ret
 15104                           
 15105                           ;MCU_B1.c: 908: PMADRH=0x30;
 15106  2764  3030               	movlw	48
 15107  2765  0023               	movlb	3	; select bank3
 15108  2766  0092               	movwf	18	;volatile
 15109                           
 15110                           ;MCU_B1.c: 909: PMADRL=address;
 15111  2767  0020               	movlb	0	; select bank0
 15112  2768  0822               	movf	Flash_Memory_Read@address,w
 15113  2769  0023               	movlb	3	; select bank3
 15114  276A  0091               	movwf	17	;volatile
 15115                           
 15116                           ;MCU_B1.c: 910: CFGS=0;
 15117  276B  1315               	bcf	21,6	;volatile
 15118                           
 15119                           ;MCU_B1.c: 911: RD=1;
 15120  276C  1415               	bsf	21,0	;volatile
 15121                           
 15122                           ;MCU_B1.c: 912: i=PMDATH;
 15123  276D  0814               	movf	20,w	;volatile
 15124  276E  0020               	movlb	0	; select bank0
 15125  276F  00A0               	movwf	??_Flash_Memory_Read
 15126  2770  0820               	movf	??_Flash_Memory_Read,w
 15127  2771  00A1               	movwf	Flash_Memory_Read@i
 15128                           
 15129                           ;MCU_B1.c: 913: ret=PMDATL;
 15130  2772  0023               	movlb	3	; select bank3
 15131  2773  0813               	movf	19,w	;volatile
 15132  2774  0020               	movlb	0	; select bank0
 15133  2775  00A0               	movwf	??_Flash_Memory_Read
 15134  2776  0820               	movf	??_Flash_Memory_Read,w
 15135  2777  00A3               	movwf	Flash_Memory_Read@ret
 15136                           
 15137                           ;MCU_B1.c: 914: return ret;
 15138  2778  0823               	movf	Flash_Memory_Read@ret,w
 15139  2779  0008               	return
 15140  277A                     __end_of_Flash_Memory_Read:	
 15141                           
 15142                           	psect	text87
 15143  24B3                     __ptext87:	
 15144 ;; *************** function _DimmerLights_Main *****************
 15145 ;; Defined at:
 15146 ;;		line 114 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;		None
 15149 ;; Auto vars:     Size  Location     Type
 15150 ;;		None
 15151 ;; Return value:  Size  Location     Type
 15152 ;;		None               void
 15153 ;; Registers used:
 15154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15155 ;; Tracked objects:
 15156 ;;		On entry : 0/0
 15157 ;;		On exit  : 0/0
 15158 ;;		Unchanged: 0/0
 15159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;Total ram usage:        0 bytes
 15165 ;; Hardware stack levels used:    1
 15166 ;; Hardware stack levels required when called:   10
 15167 ;; This function calls:
 15168 ;;		_DimmerLights_Close
 15169 ;;		_setDimmerLights_Main
 15170 ;; This function is called by:
 15171 ;;		_main
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           
 15176                           ;psect for function _DimmerLights_Main
 15177  24B3                     _DimmerLights_Main:	
 15178                           
 15179                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 15180                           
 15181                           ;incstack = 0
 15182                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15183  24B3  3001               	movlw	1
 15184  24B4  3195  2515  31A4   	fcall	_setDimmerLights_Main
 15185                           
 15186                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 15187  24B7  31A7  2793         	fcall	_DimmerLights_Close
 15188  24B9  0008               	return
 15189  24BA                     __end_of_DimmerLights_Main:	
 15190                           
 15191                           	psect	text88
 15192  1515                     __ptext88:	
 15193 ;; *************** function _setDimmerLights_Main *****************
 15194 ;; Defined at:
 15195 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;  lights          1    wreg     unsigned char 
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;  lights          1   70[BANK0 ] unsigned char 
 15200 ;;  clear           1   69[BANK0 ] unsigned char 
 15201 ;; Return value:  Size  Location     Type
 15202 ;;		None               void
 15203 ;; Registers used:
 15204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15205 ;; Tracked objects:
 15206 ;;		On entry : 0/0
 15207 ;;		On exit  : 0/0
 15208 ;;		Unchanged: 0/0
 15209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;Total ram usage:        2 bytes
 15215 ;; Hardware stack levels used:    1
 15216 ;; Hardware stack levels required when called:    9
 15217 ;; This function calls:
 15218 ;;		_DimmerLightsPointSelect
 15219 ;;		_setBuz
 15220 ;;		_setDimmerLights
 15221 ;;		_setDimmerLights_Adj
 15222 ;; This function is called by:
 15223 ;;		_DimmerLights_Main
 15224 ;; This function uses a non-reentrant model
 15225 ;;
 15226                           
 15227                           
 15228                           ;psect for function _setDimmerLights_Main
 15229  1515                     _setDimmerLights_Main:	
 15230                           
 15231                           ;incstack = 0
 15232                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15233                           ;setDimmerLights_Main@lights stored from wreg
 15234  1515  0020               	movlb	0	; select bank0
 15235  1516  00E6               	movwf	setDimmerLights_Main@lights
 15236                           
 15237                           ;Dimmer_B1.c: 133: char clear=1;
 15238  1517  01E5               	clrf	setDimmerLights_Main@clear
 15239  1518  0AE5               	incf	setDimmerLights_Main@clear,f
 15240                           
 15241                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 15242  1519  0866               	movf	setDimmerLights_Main@lights,w
 15243  151A  31A5  2512  3195   	fcall	_DimmerLightsPointSelect
 15244                           
 15245                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 15246  151D  0020               	movlb	0	; select bank0
 15247  151E  086C               	movf	_DimmerLights,w
 15248  151F  3E09               	addlw	9
 15249  1520  0086               	movwf	6
 15250  1521  3001               	movlw	1	; select bank2/3
 15251  1522  0087               	movwf	7
 15252  1523  1C81               	btfss	1,1
 15253  1524  2D54               	goto	l8968
 15254                           
 15255                           ;Dimmer_B1.c: 163: {
 15256                           ;Dimmer_B1.c: 164: if(clear)
 15257  1525  0865               	movf	setDimmerLights_Main@clear,w
 15258  1526  1903               	btfsc	3,2
 15259  1527  0008               	return
 15260                           
 15261                           ;Dimmer_B1.c: 165: {
 15262                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 15263  1528  086C               	movf	_DimmerLights,w
 15264  1529  3E09               	addlw	9
 15265  152A  0086               	movwf	6
 15266  152B  3001               	movlw	1	; select bank2/3
 15267  152C  0087               	movwf	7
 15268  152D  1C01               	btfss	1,0
 15269  152E  2D42               	goto	l8962
 15270                           
 15271                           ;Dimmer_B1.c: 167: {
 15272                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15273  152F  086C               	movf	_DimmerLights,w
 15274  1530  3E09               	addlw	9
 15275  1531  0086               	movwf	6
 15276  1532  3001               	movlw	1	; select bank2/3
 15277  1533  0087               	movwf	7
 15278  1534  1081               	bcf	1,1
 15279                           
 15280                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 15281  1535  01A4               	clrf	setDimmerLights@status
 15282  1536  0AA4               	incf	setDimmerLights@status,f
 15283  1537  0866               	movf	setDimmerLights_Main@lights,w
 15284  1538  3188  209D         	fcall	_setDimmerLights
 15285                           
 15286                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15287  153A  0020               	movlb	0	; select bank0
 15288  153B  086C               	movf	_DimmerLights,w
 15289  153C  3E0C               	addlw	12
 15290  153D  0086               	movwf	6
 15291  153E  3001               	movlw	1	; select bank2/3
 15292  153F  0087               	movwf	7
 15293  1540  1001               	bcf	1,0
 15294                           
 15295                           ;Dimmer_B1.c: 174: }
 15296  1541  0008               	return
 15297  1542                     l8962:	
 15298                           
 15299                           ;Dimmer_B1.c: 175: else
 15300                           ;Dimmer_B1.c: 176: {
 15301                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15302  1542  086C               	movf	_DimmerLights,w
 15303  1543  3E09               	addlw	9
 15304  1544  0086               	movwf	6
 15305  1545  3001               	movlw	1	; select bank2/3
 15306  1546  0087               	movwf	7
 15307  1547  1081               	bcf	1,1
 15308                           
 15309                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15310  1548  01A4               	clrf	setDimmerLights@status
 15311  1549  0866               	movf	setDimmerLights_Main@lights,w
 15312  154A  3188  209D         	fcall	_setDimmerLights
 15313                           
 15314                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15315  154C  0020               	movlb	0	; select bank0
 15316  154D  086C               	movf	_DimmerLights,w
 15317  154E  3E0C               	addlw	12
 15318  154F  0086               	movwf	6
 15319  1550  3001               	movlw	1	; select bank2/3
 15320  1551  0087               	movwf	7
 15321  1552  1001               	bcf	1,0
 15322                           
 15323                           ;Dimmer_B1.c: 183: }
 15324                           ;Dimmer_B1.c: 184: }
 15325                           ;Dimmer_B1.c: 185: }
 15326  1553  0008               	return
 15327  1554                     l8968:	
 15328                           
 15329                           ;Dimmer_B1.c: 186: else
 15330                           ;Dimmer_B1.c: 187: {
 15331                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15332  1554  086C               	movf	_DimmerLights,w
 15333  1555  3E09               	addlw	9
 15334  1556  0086               	movwf	6
 15335  1557  3001               	movlw	1	; select bank2/3
 15336  1558  0087               	movwf	7
 15337  1559  1D81               	btfss	1,3
 15338  155A  0008               	return
 15339                           
 15340                           ;Dimmer_B1.c: 189: {
 15341                           ;Dimmer_B1.c: 190: if(clear)
 15342  155B  0865               	movf	setDimmerLights_Main@clear,w
 15343  155C  1903               	btfsc	3,2
 15344  155D  0008               	return
 15345                           
 15346                           ;Dimmer_B1.c: 191: {
 15347                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15348  155E  0866               	movf	setDimmerLights_Main@lights,w
 15349  155F  31A5  2512  3195   	fcall	_DimmerLightsPointSelect
 15350                           
 15351                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15352  1562  0020               	movlb	0	; select bank0
 15353  1563  086C               	movf	_DimmerLights,w
 15354  1564  3E09               	addlw	9
 15355  1565  0086               	movwf	6
 15356  1566  3001               	movlw	1	; select bank2/3
 15357  1567  0087               	movwf	7
 15358  1568  1181               	bcf	1,3
 15359                           
 15360                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15361  1569  086C               	movf	_DimmerLights,w
 15362  156A  3E09               	addlw	9
 15363  156B  0086               	movwf	6
 15364  156C  3001               	movlw	1	; select bank2/3
 15365  156D  0087               	movwf	7
 15366  156E  1D01               	btfss	1,2
 15367  156F  2D80               	goto	l8980
 15368                           
 15369                           ;Dimmer_B1.c: 195: {
 15370                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15371  1570  01E2               	clrf	setDimmerLights_Adj@status
 15372  1571  0AE2               	incf	setDimmerLights_Adj@status,f
 15373  1572  0866               	movf	setDimmerLights_Main@lights,w
 15374  1573  319D  2559  3195   	fcall	_setDimmerLights_Adj
 15375                           
 15376                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15377  1576  3064               	movlw	100
 15378  1577  0020               	movlb	0	; select bank0
 15379  1578  00A6               	movwf	setBuz@time
 15380  1579  3000               	movlw	0
 15381  157A  00A7               	movwf	setBuz@time+1
 15382  157B  3001               	movlw	1
 15383  157C  3195  2587         	fcall	_setBuz
 15384                           
 15385                           ;Dimmer_B1.c: 198: }
 15386  157E  0020               	movlb	0	; select bank0
 15387  157F  0008               	return
 15388  1580                     l8980:	
 15389                           
 15390                           ;Dimmer_B1.c: 199: else
 15391                           ;Dimmer_B1.c: 200: {
 15392                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15393  1580  0020               	movlb	0	; select bank0
 15394  1581  01E2               	clrf	setDimmerLights_Adj@status
 15395  1582  0866               	movf	setDimmerLights_Main@lights,w
 15396  1583  319D  2559         	fcall	_setDimmerLights_Adj
 15397  1585  0020               	movlb	0	; select bank0
 15398  1586  0008               	return
 15399  1587                     __end_of_setDimmerLights_Main:	
 15400                           
 15401                           	psect	text89
 15402  1D59                     __ptext89:	
 15403 ;; *************** function _setDimmerLights_Adj *****************
 15404 ;; Defined at:
 15405 ;;		line 388 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15406 ;; Parameters:    Size  Location     Type
 15407 ;;  lights          1    wreg     unsigned char 
 15408 ;;  status          1   66[BANK0 ] unsigned char 
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  lights          1   68[BANK0 ] unsigned char 
 15411 ;; Return value:  Size  Location     Type
 15412 ;;		None               void
 15413 ;; Registers used:
 15414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15420 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;Total ram usage:        3 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; Hardware stack levels required when called:    8
 15427 ;; This function calls:
 15428 ;;		_DimmerLightsPointSelect
 15429 ;;		_setLoad_StatusOff
 15430 ;;		_setRF_DimmerLights
 15431 ;;		_setTxData
 15432 ;; This function is called by:
 15433 ;;		_setDimmerLights_Main
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           
 15438                           ;psect for function _setDimmerLights_Adj
 15439  1D59                     _setDimmerLights_Adj:	
 15440                           
 15441                           ;incstack = 0
 15442                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15443                           ;setDimmerLights_Adj@lights stored from wreg
 15444  1D59  0020               	movlb	0	; select bank0
 15445  1D5A  00E4               	movwf	setDimmerLights_Adj@lights
 15446                           
 15447                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15448  1D5B  0864               	movf	setDimmerLights_Adj@lights,w
 15449  1D5C  31A5  2512  319D   	fcall	_DimmerLightsPointSelect
 15450                           
 15451                           ;Dimmer_B1.c: 391: if(status)
 15452  1D5F  0020               	movlb	0	; select bank0
 15453  1D60  0862               	movf	setDimmerLights_Adj@status,w
 15454  1D61  1903               	btfsc	3,2
 15455  1D62  2D6E               	goto	l8682
 15456                           
 15457                           ;Dimmer_B1.c: 392: {
 15458                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15459  1D63  086C               	movf	_DimmerLights,w
 15460  1D64  0086               	movwf	6
 15461  1D65  3001               	movlw	1	; select bank2/3
 15462  1D66  0087               	movwf	7
 15463  1D67  1581               	bsf	1,3
 15464                           
 15465                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15466  1D68  086C               	movf	_DimmerLights,w
 15467  1D69  0086               	movwf	6
 15468  1D6A  3001               	movlw	1	; select bank2/3
 15469  1D6B  0087               	movwf	7
 15470  1D6C  1481               	bsf	1,1
 15471                           
 15472                           ;Dimmer_B1.c: 395: }
 15473  1D6D  0008               	return
 15474  1D6E                     l8682:	
 15475                           
 15476                           ;Dimmer_B1.c: 396: else
 15477                           ;Dimmer_B1.c: 397: {
 15478                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15479  1D6E  086C               	movf	_DimmerLights,w
 15480  1D6F  0086               	movwf	6
 15481  1D70  3001               	movlw	1	; select bank2/3
 15482  1D71  0087               	movwf	7
 15483  1D72  1D81               	btfss	1,3
 15484  1D73  0008               	return
 15485                           
 15486                           ;Dimmer_B1.c: 399: {
 15487                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15488  1D74  086C               	movf	_DimmerLights,w
 15489  1D75  0086               	movwf	6
 15490  1D76  3001               	movlw	1	; select bank2/3
 15491  1D77  0087               	movwf	7
 15492  1D78  1081               	bcf	1,1
 15493                           
 15494                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15495  1D79  086C               	movf	_DimmerLights,w
 15496  1D7A  0086               	movwf	6
 15497  1D7B  3001               	movlw	1	; select bank2/3
 15498  1D7C  0087               	movwf	7
 15499  1D7D  1181               	bcf	1,3
 15500                           
 15501                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15502  1D7E  01A0               	clrf	setLoad_StatusOff@command
 15503  1D7F  0AA0               	incf	setLoad_StatusOff@command,f
 15504  1D80  3000               	movlw	0
 15505  1D81  319B  2357  319D   	fcall	_setLoad_StatusOff
 15506                           
 15507                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15508  1D84  0020               	movlb	0	; select bank0
 15509  1D85  086C               	movf	_DimmerLights,w
 15510  1D86  3E04               	addlw	4
 15511  1D87  0086               	movwf	6
 15512  1D88  3001               	movlw	1	; select bank2/3
 15513  1D89  0087               	movwf	7
 15514  1D8A  0801               	movf	1,w
 15515  1D8B  00E3               	movwf	??_setDimmerLights_Adj
 15516  1D8C  086C               	movf	_DimmerLights,w
 15517  1D8D  3E05               	addlw	5
 15518  1D8E  0086               	movwf	6
 15519  1D8F  3001               	movlw	1	; select bank2/3
 15520  1D90  0087               	movwf	7
 15521  1D91  0863               	movf	??_setDimmerLights_Adj,w
 15522  1D92  0081               	movwf	1
 15523                           
 15524                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15525  1D93  01DD               	clrf	setRF_DimmerLights@on
 15526  1D94  0ADD               	incf	setRF_DimmerLights@on,f
 15527  1D95  0864               	movf	setDimmerLights_Adj@lights,w
 15528  1D96  3192  2281  319D   	fcall	_setRF_DimmerLights
 15529                           
 15530                           ;Dimmer_B1.c: 412: setTxData(1);
 15531  1D99  3001               	movlw	1
 15532  1D9A  318B  231A         	fcall	_setTxData
 15533  1D9C  0008               	return
 15534  1D9D                     __end_of_setDimmerLights_Adj:	
 15535                           
 15536                           	psect	text90
 15537  1B57                     __ptext90:	
 15538 ;; *************** function _setLoad_StatusOff *****************
 15539 ;; Defined at:
 15540 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15541 ;; Parameters:    Size  Location     Type
 15542 ;;  lights          1    wreg     unsigned char 
 15543 ;;  command         1    0[BANK0 ] unsigned char 
 15544 ;; Auto vars:     Size  Location     Type
 15545 ;;  lights          1    1[BANK0 ] unsigned char 
 15546 ;; Return value:  Size  Location     Type
 15547 ;;		None               void
 15548 ;; Registers used:
 15549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15550 ;; Tracked objects:
 15551 ;;		On entry : 0/0
 15552 ;;		On exit  : 0/0
 15553 ;;		Unchanged: 0/0
 15554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15555 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;Total ram usage:        2 bytes
 15560 ;; Hardware stack levels used:    1
 15561 ;; Hardware stack levels required when called:    4
 15562 ;; This function calls:
 15563 ;;		Nothing
 15564 ;; This function is called by:
 15565 ;;		_setDimmerLights_ERROR
 15566 ;;		_setDimmerLights_Adj
 15567 ;; This function uses a non-reentrant model
 15568 ;;
 15569                           
 15570                           
 15571                           ;psect for function _setLoad_StatusOff
 15572  1B57                     _setLoad_StatusOff:	
 15573                           
 15574                           ;incstack = 0
 15575                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15576                           ;setLoad_StatusOff@lights stored from wreg
 15577  1B57  0020               	movlb	0	; select bank0
 15578  1B58  00A1               	movwf	setLoad_StatusOff@lights
 15579                           
 15580                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 15581  1B59  086E               	movf	_Load,w
 15582  1B5A  3E46               	addlw	70
 15583  1B5B  0086               	movwf	6
 15584  1B5C  3002               	movlw	2	; select bank4/5
 15585  1B5D  0087               	movwf	7
 15586  1B5E  0820               	movf	setLoad_StatusOff@command,w
 15587  1B5F  1081               	bcf	1,1
 15588  1B60  1D03               	skipz
 15589  1B61  1481               	bsf	1,1
 15590                           
 15591                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 15592  1B62  086E               	movf	_Load,w
 15593  1B63  3E42               	addlw	66
 15594  1B64  0086               	movwf	6
 15595  1B65  3002               	movlw	2	; select bank4/5
 15596  1B66  0087               	movwf	7
 15597  1B67  3002               	movlw	2
 15598  1B68  0281               	subwf	1,f
 15599                           
 15600                           ;OverLoad_B1.c: 326: if(lights == 1)
 15601  1B69  0821               	movf	setLoad_StatusOff@lights,w
 15602  1B6A  3A01               	xorlw	1
 15603  1B6B  1D03               	skipz
 15604  1B6C  2B73               	goto	l8342
 15605                           
 15606                           ;OverLoad_B1.c: 327: {
 15607                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 15608  1B6D  086E               	movf	_Load,w
 15609  1B6E  3E43               	addlw	67
 15610  1B6F  0086               	movwf	6
 15611  1B70  3002               	movlw	2	; select bank4/5
 15612  1B71  0087               	movwf	7
 15613  1B72  0181               	clrf	1
 15614  1B73                     l8342:	
 15615                           
 15616                           ;OverLoad_B1.c: 329: }
 15617                           ;OverLoad_B1.c: 330: if(lights == 2)
 15618  1B73  0821               	movf	setLoad_StatusOff@lights,w
 15619  1B74  3A02               	xorlw	2
 15620  1B75  1D03               	skipz
 15621  1B76  2B7D               	goto	l8346
 15622                           
 15623                           ;OverLoad_B1.c: 331: {
 15624                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 15625  1B77  086E               	movf	_Load,w
 15626  1B78  3E44               	addlw	68
 15627  1B79  0086               	movwf	6
 15628  1B7A  3002               	movlw	2	; select bank4/5
 15629  1B7B  0087               	movwf	7
 15630  1B7C  0181               	clrf	1
 15631  1B7D                     l8346:	
 15632                           
 15633                           ;OverLoad_B1.c: 333: }
 15634                           ;OverLoad_B1.c: 334: if(lights == 3)
 15635  1B7D  0821               	movf	setLoad_StatusOff@lights,w
 15636  1B7E  3A03               	xorlw	3
 15637  1B7F  1D03               	skipz
 15638  1B80  0008               	return
 15639                           
 15640                           ;OverLoad_B1.c: 335: {
 15641                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 15642  1B81  086E               	movf	_Load,w
 15643  1B82  3E45               	addlw	69
 15644  1B83  0086               	movwf	6
 15645  1B84  3002               	movlw	2	; select bank4/5
 15646  1B85  0087               	movwf	7
 15647  1B86  0181               	clrf	1
 15648  1B87  0008               	return
 15649  1B88                     __end_of_setLoad_StatusOff:	
 15650                           
 15651                           	psect	text91
 15652  089D                     __ptext91:	
 15653 ;; *************** function _setDimmerLights *****************
 15654 ;; Defined at:
 15655 ;;		line 330 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  lights          1    wreg     unsigned char 
 15658 ;;  status          1    4[BANK0 ] unsigned char 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;  lights          1    6[BANK0 ] unsigned char 
 15661 ;; Return value:  Size  Location     Type
 15662 ;;		None               void
 15663 ;; Registers used:
 15664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;Total ram usage:        3 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    6
 15677 ;; This function calls:
 15678 ;;		_DimmerLightsPointSelect
 15679 ;;		_setLED
 15680 ;;		_setLoad_Count
 15681 ;;		_setLoad_StatusOn
 15682 ;; This function is called by:
 15683 ;;		_setDimmerLights_Main
 15684 ;;		_setControl_Lights_Table
 15685 ;; This function uses a non-reentrant model
 15686 ;;
 15687                           
 15688                           
 15689                           ;psect for function _setDimmerLights
 15690  089D                     _setDimmerLights:	
 15691                           
 15692                           ;incstack = 0
 15693                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15694                           ;setDimmerLights@lights stored from wreg
 15695  089D  0020               	movlb	0	; select bank0
 15696  089E  00A6               	movwf	setDimmerLights@lights
 15697                           
 15698                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15699  089F  0826               	movf	setDimmerLights@lights,w
 15700  08A0  31A5  2512  3188   	fcall	_DimmerLightsPointSelect
 15701                           
 15702                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15703  08A3  0020               	movlb	0	; select bank0
 15704  08A4  0826               	movf	setDimmerLights@lights,w
 15705  08A5  00A5               	movwf	??_setDimmerLights
 15706  08A6  0021               	movlb	1	; select bank1
 15707  08A7  0A39               	incf	_Dimmer^(0+128),w
 15708  08A8  0086               	movwf	6
 15709  08A9  0187               	clrf	7
 15710  08AA  0020               	movlb	0	; select bank0
 15711  08AB  0825               	movf	??_setDimmerLights,w
 15712  08AC  0081               	movwf	1
 15713                           
 15714                           ;Dimmer_B1.c: 334: if(status)
 15715  08AD  0824               	movf	setDimmerLights@status,w
 15716  08AE  1903               	btfsc	3,2
 15717  08AF  2907               	goto	l8448
 15718                           
 15719                           ;Dimmer_B1.c: 335: {
 15720                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15721  08B0  086C               	movf	_DimmerLights,w
 15722  08B1  0086               	movwf	6
 15723  08B2  3001               	movlw	1	; select bank2/3
 15724  08B3  0087               	movwf	7
 15725  08B4  1681               	bsf	1,5
 15726                           
 15727                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15728  08B5  01A2               	clrf	setLED@command
 15729  08B6  0826               	movf	setDimmerLights@lights,w
 15730  08B7  3191  215E  3188   	fcall	_setLED
 15731                           
 15732                           ;Dimmer_B1.c: 338: RC7=!0;
 15733  08BA  0020               	movlb	0	; select bank0
 15734  08BB  178E               	bsf	14,7	;volatile
 15735                           
 15736                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15737  08BC  3000               	movlw	0
 15738  08BD  31A7  2702  3188   	fcall	_setLoad_Count
 15739                           
 15740                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15741  08C0  0020               	movlb	0	; select bank0
 15742  08C1  086C               	movf	_DimmerLights,w
 15743  08C2  0086               	movwf	6
 15744  08C3  3001               	movlw	1	; select bank2/3
 15745  08C4  0087               	movwf	7
 15746  08C5  1481               	bsf	1,1
 15747                           
 15748                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15749  08C6  3003               	movlw	3
 15750  08C7  00A5               	movwf	??_setDimmerLights
 15751  08C8  086C               	movf	_DimmerLights,w
 15752  08C9  3E02               	addlw	2
 15753  08CA  0086               	movwf	6
 15754  08CB  3001               	movlw	1	; select bank2/3
 15755  08CC  0087               	movwf	7
 15756  08CD  0825               	movf	??_setDimmerLights,w
 15757  08CE  0081               	movwf	1
 15758                           
 15759                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15760  08CF  086C               	movf	_DimmerLights,w
 15761  08D0  0086               	movwf	6
 15762  08D1  3001               	movlw	1	; select bank2/3
 15763  08D2  0087               	movwf	7
 15764  08D3  1B01               	btfsc	1,6
 15765  08D4  0008               	return
 15766                           
 15767                           ;Dimmer_B1.c: 345: {
 15768                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15769  08D5  086C               	movf	_DimmerLights,w
 15770  08D6  0086               	movwf	6
 15771  08D7  3001               	movlw	1	; select bank2/3
 15772  08D8  0087               	movwf	7
 15773  08D9  1701               	bsf	1,6
 15774                           
 15775                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15776  08DA  01A0               	clrf	setLoad_StatusOn@command
 15777  08DB  0AA0               	incf	setLoad_StatusOn@command,f
 15778  08DC  0826               	movf	setDimmerLights@lights,w
 15779  08DD  319B  23B9         	fcall	_setLoad_StatusOn
 15780                           
 15781                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15782  08DF  0021               	movlb	1	; select bank1
 15783  08E0  0867               	movf	_Memory^(0+128),w
 15784  08E1  3E22               	addlw	34
 15785  08E2  0086               	movwf	6
 15786  08E3  3001               	movlw	1	; select bank2/3
 15787  08E4  0087               	movwf	7
 15788  08E5  1081               	bcf	1,1
 15789  08E6  0867               	movf	_Memory^(0+128),w
 15790  08E7  3E23               	addlw	35
 15791  08E8  0086               	movwf	6
 15792  08E9  3001               	movlw	1	; select bank2/3
 15793  08EA  0087               	movwf	7
 15794  08EB  3000               	movlw	0
 15795  08EC  3FC0               	movwi [0]fsr1
 15796  08ED  3FC1               	movwi [1]fsr1
 15797                           
 15798                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15799  08EE  0020               	movlb	0	; select bank0
 15800  08EF  086C               	movf	_DimmerLights,w
 15801  08F0  3E05               	addlw	5
 15802  08F1  0086               	movwf	6
 15803  08F2  3001               	movlw	1	; select bank2/3
 15804  08F3  0087               	movwf	7
 15805  08F4  0801               	movf	1,w
 15806  08F5  00A5               	movwf	??_setDimmerLights
 15807  08F6  086C               	movf	_DimmerLights,w
 15808  08F7  3E04               	addlw	4
 15809  08F8  0086               	movwf	6
 15810  08F9  3001               	movlw	1	; select bank2/3
 15811  08FA  0087               	movwf	7
 15812  08FB  0825               	movf	??_setDimmerLights,w
 15813  08FC  0081               	movwf	1
 15814                           
 15815                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15816  08FD  3043               	movlw	67
 15817  08FE  00A5               	movwf	??_setDimmerLights
 15818  08FF  086C               	movf	_DimmerLights,w
 15819  0900  3E04               	addlw	4
 15820  0901  0086               	movwf	6
 15821  0902  3001               	movlw	1	; select bank2/3
 15822  0903  0087               	movwf	7
 15823  0904  0825               	movf	??_setDimmerLights,w
 15824  0905  0081               	movwf	1
 15825                           
 15826                           ;Dimmer_B1.c: 357: }
 15827                           ;Dimmer_B1.c: 358: }
 15828  0906  0008               	return
 15829  0907                     l8448:	
 15830                           
 15831                           ;Dimmer_B1.c: 359: else
 15832                           ;Dimmer_B1.c: 360: {
 15833                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15834  0907  086C               	movf	_DimmerLights,w
 15835  0908  0086               	movwf	6
 15836  0909  3001               	movlw	1	; select bank2/3
 15837  090A  0087               	movwf	7
 15838  090B  1281               	bcf	1,5
 15839                           
 15840                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15841  090C  086C               	movf	_DimmerLights,w
 15842  090D  3E06               	addlw	6
 15843  090E  0086               	movwf	6
 15844  090F  3001               	movlw	1	; select bank2/3
 15845  0910  0087               	movwf	7
 15846  0911  0801               	movf	1,w
 15847  0912  00A5               	movwf	??_setDimmerLights
 15848  0913  086C               	movf	_DimmerLights,w
 15849  0914  3E04               	addlw	4
 15850  0915  0086               	movwf	6
 15851  0916  3001               	movlw	1	; select bank2/3
 15852  0917  0087               	movwf	7
 15853  0918  0825               	movf	??_setDimmerLights,w
 15854  0919  0081               	movwf	1
 15855                           
 15856                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15857  091A  086C               	movf	_DimmerLights,w
 15858  091B  0086               	movwf	6
 15859  091C  3001               	movlw	1	; select bank2/3
 15860  091D  0087               	movwf	7
 15861  091E  1481               	bsf	1,1
 15862                           
 15863                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15864  091F  086C               	movf	_DimmerLights,w
 15865  0920  0086               	movwf	6
 15866  0921  3001               	movlw	1	; select bank2/3
 15867  0922  0087               	movwf	7
 15868  0923  1181               	bcf	1,3
 15869                           
 15870                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15871  0924  086C               	movf	_DimmerLights,w
 15872  0925  0086               	movwf	6
 15873  0926  3001               	movlw	1	; select bank2/3
 15874  0927  0087               	movwf	7
 15875  0928  1201               	bcf	1,4
 15876                           
 15877                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15878  0929  3003               	movlw	3
 15879  092A  00A5               	movwf	??_setDimmerLights
 15880  092B  086C               	movf	_DimmerLights,w
 15881  092C  3E02               	addlw	2
 15882  092D  0086               	movwf	6
 15883  092E  3001               	movlw	1	; select bank2/3
 15884  092F  0087               	movwf	7
 15885  0930  0825               	movf	??_setDimmerLights,w
 15886  0931  0081               	movwf	1
 15887  0932  0008               	return
 15888  0933                     __end_of_setDimmerLights:	
 15889                           
 15890                           	psect	text92
 15891  1BB9                     __ptext92:	
 15892 ;; *************** function _setLoad_StatusOn *****************
 15893 ;; Defined at:
 15894 ;;		line 304 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15895 ;; Parameters:    Size  Location     Type
 15896 ;;  lights          1    wreg     unsigned char 
 15897 ;;  command         1    0[BANK0 ] unsigned char 
 15898 ;; Auto vars:     Size  Location     Type
 15899 ;;  lights          1    1[BANK0 ] unsigned char 
 15900 ;; Return value:  Size  Location     Type
 15901 ;;		None               void
 15902 ;; Registers used:
 15903 ;;		wreg, fsr1l, fsr1h
 15904 ;; Tracked objects:
 15905 ;;		On entry : 0/0
 15906 ;;		On exit  : 0/0
 15907 ;;		Unchanged: 0/0
 15908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;Total ram usage:        2 bytes
 15914 ;; Hardware stack levels used:    1
 15915 ;; Hardware stack levels required when called:    4
 15916 ;; This function calls:
 15917 ;;		Nothing
 15918 ;; This function is called by:
 15919 ;;		_setDimmerLights
 15920 ;; This function uses a non-reentrant model
 15921 ;;
 15922                           
 15923                           
 15924                           ;psect for function _setLoad_StatusOn
 15925  1BB9                     _setLoad_StatusOn:	
 15926                           
 15927                           ;incstack = 0
 15928                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15929                           ;setLoad_StatusOn@lights stored from wreg
 15930  1BB9  0020               	movlb	0	; select bank0
 15931  1BBA  00A1               	movwf	setLoad_StatusOn@lights
 15932                           
 15933                           ;OverLoad_B1.c: 306: Load->GO=1;
 15934  1BBB  086E               	movf	_Load,w
 15935  1BBC  0086               	movwf	6
 15936  1BBD  3002               	movlw	2	; select bank4/5
 15937  1BBE  0087               	movwf	7
 15938  1BBF  1481               	bsf	1,1
 15939                           
 15940                           ;OverLoad_B1.c: 307: Load->StatusOn=command;
 15941  1BC0  086E               	movf	_Load,w
 15942  1BC1  3E46               	addlw	70
 15943  1BC2  0086               	movwf	6
 15944  1BC3  3002               	movlw	2	; select bank4/5
 15945  1BC4  0087               	movwf	7
 15946  1BC5  0820               	movf	setLoad_StatusOn@command,w
 15947  1BC6  1001               	bcf	1,0
 15948  1BC7  1D03               	skipz
 15949  1BC8  1401               	bsf	1,0
 15950                           
 15951                           ;OverLoad_B1.c: 309: if(lights == 1)
 15952  1BC9  0821               	movf	setLoad_StatusOn@lights,w
 15953  1BCA  3A01               	xorlw	1
 15954  1BCB  1D03               	skipz
 15955  1BCC  2BD4               	goto	l8406
 15956                           
 15957                           ;OverLoad_B1.c: 310: {
 15958                           ;OverLoad_B1.c: 311: Load->Lights1Status=1;
 15959  1BCD  086E               	movf	_Load,w
 15960  1BCE  3E43               	addlw	67
 15961  1BCF  0086               	movwf	6
 15962  1BD0  3002               	movlw	2	; select bank4/5
 15963  1BD1  0087               	movwf	7
 15964  1BD2  0181               	clrf	1
 15965  1BD3  0A81               	incf	1,f
 15966  1BD4                     l8406:	
 15967                           
 15968                           ;OverLoad_B1.c: 312: }
 15969                           ;OverLoad_B1.c: 313: if(lights == 2)
 15970  1BD4  0821               	movf	setLoad_StatusOn@lights,w
 15971  1BD5  3A02               	xorlw	2
 15972  1BD6  1D03               	skipz
 15973  1BD7  2BDF               	goto	l8410
 15974                           
 15975                           ;OverLoad_B1.c: 314: {
 15976                           ;OverLoad_B1.c: 315: Load->Lights2Status=1;
 15977  1BD8  086E               	movf	_Load,w
 15978  1BD9  3E44               	addlw	68
 15979  1BDA  0086               	movwf	6
 15980  1BDB  3002               	movlw	2	; select bank4/5
 15981  1BDC  0087               	movwf	7
 15982  1BDD  0181               	clrf	1
 15983  1BDE  0A81               	incf	1,f
 15984  1BDF                     l8410:	
 15985                           
 15986                           ;OverLoad_B1.c: 316: }
 15987                           ;OverLoad_B1.c: 317: if(lights == 3)
 15988  1BDF  0821               	movf	setLoad_StatusOn@lights,w
 15989  1BE0  3A03               	xorlw	3
 15990  1BE1  1D03               	skipz
 15991  1BE2  0008               	return
 15992                           
 15993                           ;OverLoad_B1.c: 318: {
 15994                           ;OverLoad_B1.c: 319: Load->Lights3Status=1;
 15995  1BE3  086E               	movf	_Load,w
 15996  1BE4  3E45               	addlw	69
 15997  1BE5  0086               	movwf	6
 15998  1BE6  3002               	movlw	2	; select bank4/5
 15999  1BE7  0087               	movwf	7
 16000  1BE8  0181               	clrf	1
 16001  1BE9  0A81               	incf	1,f
 16002  1BEA  0008               	return
 16003  1BEB                     __end_of_setLoad_StatusOn:	
 16004                           
 16005                           	psect	text93
 16006  2702                     __ptext93:	
 16007 ;; *************** function _setLoad_Count *****************
 16008 ;; Defined at:
 16009 ;;		line 289 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16010 ;; Parameters:    Size  Location     Type
 16011 ;;  command         1    wreg     unsigned char 
 16012 ;; Auto vars:     Size  Location     Type
 16013 ;;  command         1    1[BANK0 ] unsigned char 
 16014 ;; Return value:  Size  Location     Type
 16015 ;;		None               void
 16016 ;; Registers used:
 16017 ;;		wreg, fsr1l, fsr1h
 16018 ;; Tracked objects:
 16019 ;;		On entry : 0/0
 16020 ;;		On exit  : 0/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16027 ;;Total ram usage:        2 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    4
 16030 ;; This function calls:
 16031 ;;		Nothing
 16032 ;; This function is called by:
 16033 ;;		_setDimmerLights
 16034 ;; This function uses a non-reentrant model
 16035 ;;
 16036                           
 16037                           
 16038                           ;psect for function _setLoad_Count
 16039  2702                     _setLoad_Count:	
 16040                           
 16041                           ;incstack = 0
 16042                           ; Regs used in _setLoad_Count: [wregfsr1]
 16043                           ;setLoad_Count@command stored from wreg
 16044  2702  0020               	movlb	0	; select bank0
 16045  2703  00A1               	movwf	setLoad_Count@command
 16046                           
 16047                           ;OverLoad_B1.c: 291: Load->Count=command;
 16048  2704  0821               	movf	setLoad_Count@command,w
 16049  2705  00A0               	movwf	??_setLoad_Count
 16050  2706  086E               	movf	_Load,w
 16051  2707  3E3A               	addlw	58
 16052  2708  0086               	movwf	6
 16053  2709  3002               	movlw	2	; select bank4/5
 16054  270A  0087               	movwf	7
 16055  270B  0820               	movf	??_setLoad_Count,w
 16056  270C  0081               	movwf	1
 16057                           
 16058                           ;OverLoad_B1.c: 292: Load->SafeCount=command;
 16059  270D  0821               	movf	setLoad_Count@command,w
 16060  270E  00A0               	movwf	??_setLoad_Count
 16061  270F  086E               	movf	_Load,w
 16062  2710  3E42               	addlw	66
 16063  2711  0086               	movwf	6
 16064  2712  3002               	movlw	2	; select bank4/5
 16065  2713  0087               	movwf	7
 16066  2714  0820               	movf	??_setLoad_Count,w
 16067  2715  0081               	movwf	1
 16068  2716  0008               	return
 16069  2717                     __end_of_setLoad_Count:	
 16070                           
 16071                           	psect	text94
 16072  115E                     __ptext94:	
 16073 ;; *************** function _setLED *****************
 16074 ;; Defined at:
 16075 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  led             1    wreg     unsigned char 
 16078 ;;  command         1    2[BANK0 ] unsigned char 
 16079 ;; Auto vars:     Size  Location     Type
 16080 ;;  led             1    3[BANK0 ] unsigned char 
 16081 ;; Return value:  Size  Location     Type
 16082 ;;		None               void
 16083 ;; Registers used:
 16084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        2 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:    5
 16097 ;; This function calls:
 16098 ;;		_LedPointSelect
 16099 ;; This function is called by:
 16100 ;;		_setDimmerLights_ERROR
 16101 ;;		_setDimmerLights
 16102 ;;		_setLED_Initialization
 16103 ;;		_setLoad_Exceptions
 16104 ;;		_setOverTemp_Exceptions
 16105 ;;		_setPowerFault_Exceptions
 16106 ;;		_setSw_Initialization
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           
 16111                           ;psect for function _setLED
 16112  115E                     _setLED:	
 16113                           
 16114                           ;incstack = 0
 16115                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16116                           ;setLED@led stored from wreg
 16117  115E  0020               	movlb	0	; select bank0
 16118  115F  00A3               	movwf	setLED@led
 16119                           
 16120                           ;LED_B1.c: 76: LedPointSelect(led);
 16121  1160  0823               	movf	setLED@led,w
 16122  1161  3199  2118  3191   	fcall	_LedPointSelect
 16123                           
 16124                           ;LED_B1.c: 77: if(command == 0)
 16125  1164  0020               	movlb	0	; select bank0
 16126  1165  08A2               	movf	setLED@command,f
 16127  1166  1D03               	skipz
 16128  1167  297A               	goto	l8366
 16129                           
 16130                           ;LED_B1.c: 78: {
 16131                           ;LED_B1.c: 80: if(led == 1)
 16132  1168  0823               	movf	setLED@led,w
 16133  1169  3A01               	xorlw	1
 16134  116A  1D03               	skipz
 16135  116B  296E               	goto	l8358
 16136                           
 16137                           ;LED_B1.c: 81: {
 16138                           ;LED_B1.c: 85: RA3=1;
 16139  116C  158C               	bsf	12,3	;volatile
 16140                           
 16141                           ;LED_B1.c: 87: }
 16142  116D  0008               	return
 16143  116E                     l8358:	
 16144                           
 16145                           ;LED_B1.c: 90: else if(led == 2)
 16146  116E  0823               	movf	setLED@led,w
 16147  116F  3A02               	xorlw	2
 16148  1170  1D03               	skipz
 16149  1171  2974               	goto	l8362
 16150                           
 16151                           ;LED_B1.c: 91: {
 16152                           ;LED_B1.c: 95: RC7=1;
 16153  1172  178E               	bsf	14,7	;volatile
 16154                           
 16155                           ;LED_B1.c: 97: }
 16156  1173  0008               	return
 16157  1174                     l8362:	
 16158                           
 16159                           ;LED_B1.c: 110: else if(led == 99)
 16160  1174  0823               	movf	setLED@led,w
 16161  1175  3A63               	xorlw	99
 16162  1176  1D03               	skipz
 16163  1177  0008               	return
 16164                           
 16165                           ;LED_B1.c: 111: {
 16166                           ;LED_B1.c: 115: RB5=1;
 16167  1178  168D               	bsf	13,5	;volatile
 16168                           
 16169                           ;LED_B1.c: 117: }
 16170                           ;LED_B1.c: 119: }
 16171  1179  0008               	return
 16172  117A                     l8366:	
 16173                           
 16174                           ;LED_B1.c: 120: else if(command == 1)
 16175  117A  0822               	movf	setLED@command,w
 16176  117B  3A01               	xorlw	1
 16177  117C  1D03               	skipz
 16178  117D  2990               	goto	l8380
 16179                           
 16180                           ;LED_B1.c: 121: {
 16181                           ;LED_B1.c: 123: if(led == 1)
 16182  117E  0823               	movf	setLED@led,w
 16183  117F  3A01               	xorlw	1
 16184  1180  1D03               	skipz
 16185  1181  2984               	goto	l8372
 16186                           
 16187                           ;LED_B1.c: 124: {
 16188                           ;LED_B1.c: 128: RA3=0;
 16189  1182  118C               	bcf	12,3	;volatile
 16190                           
 16191                           ;LED_B1.c: 130: }
 16192  1183  0008               	return
 16193  1184                     l8372:	
 16194                           
 16195                           ;LED_B1.c: 133: else if(led == 2)
 16196  1184  0823               	movf	setLED@led,w
 16197  1185  3A02               	xorlw	2
 16198  1186  1D03               	skipz
 16199  1187  298A               	goto	l8376
 16200                           
 16201                           ;LED_B1.c: 134: {
 16202                           ;LED_B1.c: 138: RC7=0;
 16203  1188  138E               	bcf	14,7	;volatile
 16204                           
 16205                           ;LED_B1.c: 140: }
 16206  1189  0008               	return
 16207  118A                     l8376:	
 16208                           
 16209                           ;LED_B1.c: 153: else if(led == 99)
 16210  118A  0823               	movf	setLED@led,w
 16211  118B  3A63               	xorlw	99
 16212  118C  1D03               	skipz
 16213  118D  0008               	return
 16214                           
 16215                           ;LED_B1.c: 154: {
 16216                           ;LED_B1.c: 158: RB5=0;
 16217  118E  128D               	bcf	13,5	;volatile
 16218                           
 16219                           ;LED_B1.c: 160: }
 16220                           ;LED_B1.c: 162: }
 16221  118F  0008               	return
 16222  1190                     l8380:	
 16223                           
 16224                           ;LED_B1.c: 163: else if(command == 10)
 16225  1190  0822               	movf	setLED@command,w
 16226  1191  3A0A               	xorlw	10
 16227  1192  1D03               	skipz
 16228  1193  29B2               	goto	l8396
 16229                           
 16230                           ;LED_B1.c: 164: {
 16231                           ;LED_B1.c: 165: LED->GO=0;
 16232  1194  0021               	movlb	1	; select bank1
 16233  1195  083B               	movf	_LED^(0+128),w
 16234  1196  0086               	movwf	6
 16235  1197  0187               	clrf	7
 16236  1198  1081               	bcf	1,1
 16237                           
 16238                           ;LED_B1.c: 166: LED->Time=0;
 16239  1199  0A3B               	incf	_LED^(0+128),w
 16240  119A  0086               	movwf	6
 16241  119B  0187               	clrf	7
 16242  119C  3000               	movlw	0
 16243  119D  3FC0               	movwi [0]fsr1
 16244  119E  3FC1               	movwi [1]fsr1
 16245                           
 16246                           ;LED_B1.c: 168: if(led == 1)
 16247  119F  0020               	movlb	0	; select bank0
 16248  11A0  0823               	movf	setLED@led,w
 16249  11A1  3A01               	xorlw	1
 16250  11A2  1D03               	skipz
 16251  11A3  29A6               	goto	l8388
 16252                           
 16253                           ;LED_B1.c: 169: {
 16254                           ;LED_B1.c: 173: RA3=1;
 16255  11A4  158C               	bsf	12,3	;volatile
 16256                           
 16257                           ;LED_B1.c: 175: }
 16258  11A5  0008               	return
 16259  11A6                     l8388:	
 16260                           
 16261                           ;LED_B1.c: 178: else if(led == 2)
 16262  11A6  0823               	movf	setLED@led,w
 16263  11A7  3A02               	xorlw	2
 16264  11A8  1D03               	skipz
 16265  11A9  29AC               	goto	l8392
 16266                           
 16267                           ;LED_B1.c: 179: {
 16268                           ;LED_B1.c: 183: RC7=1;
 16269  11AA  178E               	bsf	14,7	;volatile
 16270                           
 16271                           ;LED_B1.c: 185: }
 16272  11AB  0008               	return
 16273  11AC                     l8392:	
 16274                           
 16275                           ;LED_B1.c: 198: else if(led == 99)
 16276  11AC  0823               	movf	setLED@led,w
 16277  11AD  3A63               	xorlw	99
 16278  11AE  1D03               	skipz
 16279  11AF  0008               	return
 16280                           
 16281                           ;LED_B1.c: 199: {
 16282                           ;LED_B1.c: 203: RB5=1;
 16283  11B0  168D               	bsf	13,5	;volatile
 16284                           
 16285                           ;LED_B1.c: 205: }
 16286                           ;LED_B1.c: 207: }
 16287  11B1  0008               	return
 16288  11B2                     l8396:	
 16289                           
 16290                           ;LED_B1.c: 208: else if(command == 11)
 16291  11B2  0822               	movf	setLED@command,w
 16292  11B3  3A0B               	xorlw	11
 16293  11B4  1D03               	skipz
 16294  11B5  0008               	return
 16295                           
 16296                           ;LED_B1.c: 209: {
 16297                           ;LED_B1.c: 210: LED->GO=1;
 16298  11B6  0021               	movlb	1	; select bank1
 16299  11B7  083B               	movf	_LED^(0+128),w
 16300  11B8  0086               	movwf	6
 16301  11B9  0187               	clrf	7
 16302  11BA  1481               	bsf	1,1
 16303  11BB  0008               	return
 16304  11BC                     __end_of_setLED:	
 16305                           
 16306                           	psect	text95
 16307  1918                     __ptext95:	
 16308 ;; *************** function _LedPointSelect *****************
 16309 ;; Defined at:
 16310 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16311 ;; Parameters:    Size  Location     Type
 16312 ;;  led             1    wreg     unsigned char 
 16313 ;; Auto vars:     Size  Location     Type
 16314 ;;  led             1    1[BANK0 ] unsigned char 
 16315 ;; Return value:  Size  Location     Type
 16316 ;;		None               void
 16317 ;; Registers used:
 16318 ;;		wreg
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;Total ram usage:        2 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    4
 16331 ;; This function calls:
 16332 ;;		Nothing
 16333 ;; This function is called by:
 16334 ;;		_setLED_Initialization
 16335 ;;		_setLED
 16336 ;;		_setLED_Main
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function _LedPointSelect
 16342  1918                     _LedPointSelect:	
 16343                           
 16344                           ;incstack = 0
 16345                           ; Regs used in _LedPointSelect: [wreg]
 16346                           ;LedPointSelect@led stored from wreg
 16347  1918  0020               	movlb	0	; select bank0
 16348  1919  00A1               	movwf	LedPointSelect@led
 16349                           
 16350                           ;LED_B1.c: 10: if(led == 1)
 16351  191A  0821               	movf	LedPointSelect@led,w
 16352  191B  3A01               	xorlw	1
 16353  191C  1D03               	skipz
 16354  191D  2924               	goto	l6196
 16355                           
 16356                           ;LED_B1.c: 11: {
 16357                           ;LED_B1.c: 12: LED=&VarLED1;
 16358  191E  30D6               	movlw	_VarLED1& (0+255)
 16359  191F  00A0               	movwf	??_LedPointSelect
 16360  1920  0820               	movf	??_LedPointSelect,w
 16361  1921  0021               	movlb	1	; select bank1
 16362  1922  00BB               	movwf	_LED^(0+128)
 16363                           
 16364                           ;LED_B1.c: 13: }
 16365  1923  0008               	return
 16366  1924                     l6196:	
 16367                           
 16368                           ;LED_B1.c: 16: else if(led == 2)
 16369  1924  0020               	movlb	0	; select bank0
 16370  1925  0821               	movf	LedPointSelect@led,w
 16371  1926  3A02               	xorlw	2
 16372  1927  1D03               	skipz
 16373  1928  292F               	goto	l6200
 16374                           
 16375                           ;LED_B1.c: 17: {
 16376                           ;LED_B1.c: 18: LED=&VarLED2;
 16377  1929  30DA               	movlw	_VarLED2& (0+255)
 16378  192A  00A0               	movwf	??_LedPointSelect
 16379  192B  0820               	movf	??_LedPointSelect,w
 16380  192C  0021               	movlb	1	; select bank1
 16381  192D  00BB               	movwf	_LED^(0+128)
 16382                           
 16383                           ;LED_B1.c: 19: }
 16384  192E  0008               	return
 16385  192F                     l6200:	
 16386                           
 16387                           ;LED_B1.c: 28: else if(led == 99)
 16388  192F  0020               	movlb	0	; select bank0
 16389  1930  0821               	movf	LedPointSelect@led,w
 16390  1931  3A63               	xorlw	99
 16391  1932  1D03               	skipz
 16392  1933  0008               	return
 16393                           
 16394                           ;LED_B1.c: 29: {
 16395                           ;LED_B1.c: 30: LED=&VarErrLED;
 16396  1934  30D2               	movlw	_VarErrLED& (0+255)
 16397  1935  00A0               	movwf	??_LedPointSelect
 16398  1936  0820               	movf	??_LedPointSelect,w
 16399  1937  0021               	movlb	1	; select bank1
 16400  1938  00BB               	movwf	_LED^(0+128)
 16401  1939  0008               	return
 16402  193A                     __end_of_LedPointSelect:	
 16403                           
 16404                           	psect	text96
 16405  2793                     __ptext96:	
 16406 ;; *************** function _DimmerLights_Close *****************
 16407 ;; Defined at:
 16408 ;;		line 101 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;		None               void
 16415 ;; Registers used:
 16416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        0 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    5
 16429 ;; This function calls:
 16430 ;;		_getDimmerLights_StatusFlag
 16431 ;;		_setLoad_GO
 16432 ;; This function is called by:
 16433 ;;		_DimmerLights_Main
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           
 16438                           ;psect for function _DimmerLights_Close
 16439  2793                     _DimmerLights_Close:	
 16440                           
 16441                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16442                           
 16443                           ;incstack = 0
 16444                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16445  2793  0021               	movlb	1	; select bank1
 16446  2794  0839               	movf	_Dimmer^(0+128),w
 16447  2795  0086               	movwf	6
 16448  2796  0187               	clrf	7
 16449  2797  1C01               	btfss	1,0
 16450  2798  0008               	return
 16451                           
 16452                           ;Dimmer_B1.c: 104: {
 16453                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16454  2799  0839               	movf	_Dimmer^(0+128),w
 16455  279A  0086               	movwf	6
 16456  279B  0187               	clrf	7
 16457  279C  1001               	bcf	1,0
 16458                           
 16459                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16460  279D  31A5  25A7  31A7   	fcall	_getDimmerLights_StatusFlag
 16461  27A0  3800               	iorlw	0
 16462  27A1  1D03               	skipz
 16463  27A2  0008               	return
 16464                           
 16465                           ;Dimmer_B1.c: 107: {
 16466                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16467  27A3  3000               	movlw	0
 16468  27A4  31A5  2533         	fcall	_setLoad_GO
 16469                           
 16470                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16471  27A6  0021               	movlb	1	; select bank1
 16472  27A7  0867               	movf	_Memory^(0+128),w
 16473  27A8  3E22               	addlw	34
 16474  27A9  0086               	movwf	6
 16475  27AA  3001               	movlw	1	; select bank2/3
 16476  27AB  0087               	movwf	7
 16477  27AC  1481               	bsf	1,1
 16478  27AD  0008               	return
 16479  27AE                     __end_of_DimmerLights_Close:	
 16480                           
 16481                           	psect	text97
 16482  2533                     __ptext97:	
 16483 ;; *************** function _setLoad_GO *****************
 16484 ;; Defined at:
 16485 ;;		line 300 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;  command         1    wreg     unsigned char 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;  command         1    0[BANK0 ] unsigned char 
 16490 ;; Return value:  Size  Location     Type
 16491 ;;		None               void
 16492 ;; Registers used:
 16493 ;;		wreg, fsr1l, fsr1h
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:        1 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    4
 16506 ;; This function calls:
 16507 ;;		Nothing
 16508 ;; This function is called by:
 16509 ;;		_DimmerLights_Close
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           
 16514                           ;psect for function _setLoad_GO
 16515  2533                     _setLoad_GO:	
 16516                           
 16517                           ;incstack = 0
 16518                           ; Regs used in _setLoad_GO: [wregfsr1]
 16519                           ;setLoad_GO@command stored from wreg
 16520  2533  0020               	movlb	0	; select bank0
 16521  2534  00A0               	movwf	setLoad_GO@command
 16522                           
 16523                           ;OverLoad_B1.c: 302: Load->GO=command;
 16524  2535  086E               	movf	_Load,w
 16525  2536  0086               	movwf	6
 16526  2537  3002               	movlw	2	; select bank4/5
 16527  2538  0087               	movwf	7
 16528  2539  0820               	movf	setLoad_GO@command,w
 16529  253A  1081               	bcf	1,1
 16530  253B  1D03               	skipz
 16531  253C  1481               	bsf	1,1
 16532  253D  0008               	return
 16533  253E                     __end_of_setLoad_GO:	
 16534                           
 16535                           	psect	text98
 16536  25A7                     __ptext98:	
 16537 ;; *************** function _getDimmerLights_StatusFlag *****************
 16538 ;; Defined at:
 16539 ;;		line 208 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16540 ;; Parameters:    Size  Location     Type
 16541 ;;		None
 16542 ;; Auto vars:     Size  Location     Type
 16543 ;;  Status          1    0[BANK0 ] unsigned char 
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  1    wreg      unsigned char 
 16546 ;; Registers used:
 16547 ;;		wreg, fsr1l, fsr1h, status,2
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;Total ram usage:        1 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    4
 16560 ;; This function calls:
 16561 ;;		Nothing
 16562 ;; This function is called by:
 16563 ;;		_DimmerLights_Close
 16564 ;;		_DimmerLights_Exceptions
 16565 ;; This function uses a non-reentrant model
 16566 ;;
 16567                           
 16568                           
 16569                           ;psect for function _getDimmerLights_StatusFlag
 16570  25A7                     _getDimmerLights_StatusFlag:	
 16571                           
 16572                           ;Dimmer_B1.c: 210: char Status=0;
 16573                           
 16574                           ;incstack = 0
 16575                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16576  25A7  0020               	movlb	0	; select bank0
 16577  25A8  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16578                           
 16579                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16580  25A9  0879               	movf	_DimmerLights11,w
 16581  25AA  0086               	movwf	6
 16582  25AB  3001               	movlw	1	; select bank2/3
 16583  25AC  0087               	movwf	7
 16584  25AD  3000               	movlw	0
 16585  25AE  1B01               	btfsc	1,6
 16586  25AF  3001               	movlw	1
 16587  25B0  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16588                           
 16589                           ;Dimmer_B1.c: 224: return Status;
 16590  25B1  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16591  25B2  0008               	return
 16592  25B3                     __end_of_getDimmerLights_StatusFlag:	
 16593                           
 16594                           	psect	text99
 16595  259B                     __ptext99:	
 16596 ;; *************** function _DimmerLights_Initialization *****************
 16597 ;; Defined at:
 16598 ;;		line 41 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;		None
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;		None               void
 16605 ;; Registers used:
 16606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16607 ;; Tracked objects:
 16608 ;;		On entry : 0/0
 16609 ;;		On exit  : 0/0
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;Total ram usage:        1 bytes
 16617 ;; Hardware stack levels used:    1
 16618 ;; Hardware stack levels required when called:    6
 16619 ;; This function calls:
 16620 ;;		_Dimmer_Initialization
 16621 ;;		_setDimmerLights_Initialization
 16622 ;; This function is called by:
 16623 ;;		_main
 16624 ;; This function uses a non-reentrant model
 16625 ;;
 16626                           
 16627                           
 16628                           ;psect for function _DimmerLights_Initialization
 16629  259B                     _DimmerLights_Initialization:	
 16630                           
 16631                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16632                           
 16633                           ;incstack = 0
 16634                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16635  259B  3031               	movlw	_DimmerLights1& (0+255)
 16636  259C  0020               	movlb	0	; select bank0
 16637  259D  00A4               	movwf	??_DimmerLights_Initialization
 16638  259E  0824               	movf	??_DimmerLights_Initialization,w
 16639  259F  00F9               	movwf	_DimmerLights11
 16640                           
 16641                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16642  25A0  3001               	movlw	1
 16643  25A1  319A  229B  31A5   	fcall	_setDimmerLights_Initialization
 16644                           
 16645                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16646  25A4  31A4  24AC         	fcall	_Dimmer_Initialization
 16647  25A6  0008               	return
 16648  25A7                     __end_of_DimmerLights_Initialization:	
 16649                           
 16650                           	psect	text100
 16651  1A9B                     __ptext100:	
 16652 ;; *************** function _setDimmerLights_Initialization *****************
 16653 ;; Defined at:
 16654 ;;		line 63 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16655 ;; Parameters:    Size  Location     Type
 16656 ;;  lights          1    wreg     unsigned char 
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;  lights          1    3[BANK0 ] unsigned char 
 16659 ;; Return value:  Size  Location     Type
 16660 ;;		None               void
 16661 ;; Registers used:
 16662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16663 ;; Tracked objects:
 16664 ;;		On entry : 0/0
 16665 ;;		On exit  : 0/0
 16666 ;;		Unchanged: 0/0
 16667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;Total ram usage:        2 bytes
 16673 ;; Hardware stack levels used:    1
 16674 ;; Hardware stack levels required when called:    5
 16675 ;; This function calls:
 16676 ;;		_DimmerLightsPointSelect
 16677 ;; This function is called by:
 16678 ;;		_DimmerLights_Initialization
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           
 16683                           ;psect for function _setDimmerLights_Initialization
 16684  1A9B                     _setDimmerLights_Initialization:	
 16685                           
 16686                           ;incstack = 0
 16687                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16688                           ;setDimmerLights_Initialization@lights stored from wreg
 16689  1A9B  0020               	movlb	0	; select bank0
 16690  1A9C  00A3               	movwf	setDimmerLights_Initialization@lights
 16691                           
 16692                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16693  1A9D  0823               	movf	setDimmerLights_Initialization@lights,w
 16694  1A9E  31A5  2512         	fcall	_DimmerLightsPointSelect
 16695                           
 16696                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16697  1AA0  0020               	movlb	0	; select bank0
 16698  1AA1  086C               	movf	_DimmerLights,w
 16699  1AA2  3E0C               	addlw	12
 16700  1AA3  0086               	movwf	6
 16701  1AA4  3001               	movlw	1	; select bank2/3
 16702  1AA5  0087               	movwf	7
 16703  1AA6  1401               	bsf	1,0
 16704                           
 16705                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16706  1AA7  3043               	movlw	67
 16707  1AA8  00A2               	movwf	??_setDimmerLights_Initialization
 16708  1AA9  086C               	movf	_DimmerLights,w
 16709  1AAA  3E05               	addlw	5
 16710  1AAB  0086               	movwf	6
 16711  1AAC  3001               	movlw	1	; select bank2/3
 16712  1AAD  0087               	movwf	7
 16713  1AAE  0822               	movf	??_setDimmerLights_Initialization,w
 16714  1AAF  0081               	movwf	1
 16715                           
 16716                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16717  1AB0  3078               	movlw	120
 16718  1AB1  00A2               	movwf	??_setDimmerLights_Initialization
 16719  1AB2  086C               	movf	_DimmerLights,w
 16720  1AB3  3E06               	addlw	6
 16721  1AB4  0086               	movwf	6
 16722  1AB5  3001               	movlw	1	; select bank2/3
 16723  1AB6  0087               	movwf	7
 16724  1AB7  0822               	movf	??_setDimmerLights_Initialization,w
 16725  1AB8  0081               	movwf	1
 16726                           
 16727                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16728  1AB9  086C               	movf	_DimmerLights,w
 16729  1ABA  3E06               	addlw	6
 16730  1ABB  0086               	movwf	6
 16731  1ABC  3001               	movlw	1	; select bank2/3
 16732  1ABD  0087               	movwf	7
 16733  1ABE  0801               	movf	1,w
 16734  1ABF  00A2               	movwf	??_setDimmerLights_Initialization
 16735  1AC0  086C               	movf	_DimmerLights,w
 16736  1AC1  3E04               	addlw	4
 16737  1AC2  0086               	movwf	6
 16738  1AC3  3001               	movlw	1	; select bank2/3
 16739  1AC4  0087               	movwf	7
 16740  1AC5  0822               	movf	??_setDimmerLights_Initialization,w
 16741  1AC6  0081               	movwf	1
 16742  1AC7  0008               	return
 16743  1AC8                     __end_of_setDimmerLights_Initialization:	
 16744                           
 16745                           	psect	text101
 16746  24AC                     __ptext101:	
 16747 ;; *************** function _Dimmer_Initialization *****************
 16748 ;; Defined at:
 16749 ;;		line 520 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;		None
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;		None
 16754 ;; Return value:  Size  Location     Type
 16755 ;;		None               void
 16756 ;; Registers used:
 16757 ;;		wreg
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;Total ram usage:        1 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    4
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_DimmerLights_Initialization
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           
 16778                           ;psect for function _Dimmer_Initialization
 16779  24AC                     _Dimmer_Initialization:	
 16780                           
 16781                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16782                           
 16783                           ;incstack = 0
 16784                           ; Regs used in _Dimmer_Initialization: [wreg]
 16785  24AC  30DE               	movlw	_Dimmer1& (0+255)
 16786  24AD  0020               	movlb	0	; select bank0
 16787  24AE  00A0               	movwf	??_Dimmer_Initialization
 16788  24AF  0820               	movf	??_Dimmer_Initialization,w
 16789  24B0  0021               	movlb	1	; select bank1
 16790  24B1  00B9               	movwf	_Dimmer^(0+128)
 16791  24B2  0008               	return
 16792  24B3                     __end_of_Dimmer_Initialization:	
 16793                           
 16794                           	psect	text102
 16795  2485                     __ptext102:	
 16796 ;; *************** function _DelayOff_Main *****************
 16797 ;; Defined at:
 16798 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;		None
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;		None
 16803 ;; Return value:  Size  Location     Type
 16804 ;;		None               void
 16805 ;; Registers used:
 16806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;Total ram usage:        0 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    9
 16819 ;; This function calls:
 16820 ;;		_DlyOff_Main
 16821 ;; This function is called by:
 16822 ;;		_main
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           
 16827                           ;psect for function _DelayOff_Main
 16828  2485                     _DelayOff_Main:	
 16829                           
 16830                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16831                           
 16832                           ;incstack = 0
 16833                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16834  2485  3001               	movlw	1
 16835  2486  3195  25FE         	fcall	_DlyOff_Main
 16836  2488  0008               	return
 16837  2489                     __end_of_DelayOff_Main:	
 16838                           
 16839                           	psect	text103
 16840  15FE                     __ptext103:	
 16841 ;; *************** function _DlyOff_Main *****************
 16842 ;; Defined at:
 16843 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16844 ;; Parameters:    Size  Location     Type
 16845 ;;  sw              1    wreg     unsigned char 
 16846 ;; Auto vars:     Size  Location     Type
 16847 ;;  sw              1   68[BANK0 ] unsigned char 
 16848 ;; Return value:  Size  Location     Type
 16849 ;;		None               void
 16850 ;; Registers used:
 16851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16852 ;; Tracked objects:
 16853 ;;		On entry : 0/0
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16861 ;;Total ram usage:        3 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    8
 16864 ;; This function calls:
 16865 ;;		_DelayOffPointSelect
 16866 ;;		_setBuz
 16867 ;;		_setDimmerLights_Switch
 16868 ;;		_setDimmerLights_Trigger
 16869 ;;		_setRFSW_Status
 16870 ;;		_setRF_DimmerLights
 16871 ;;		_setSw_Status
 16872 ;;		_setTxData
 16873 ;; This function is called by:
 16874 ;;		_DelayOff_Main
 16875 ;; This function uses a non-reentrant model
 16876 ;;
 16877                           
 16878                           
 16879                           ;psect for function _DlyOff_Main
 16880  15FE                     _DlyOff_Main:	
 16881                           
 16882                           ;incstack = 0
 16883                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16884                           ;DlyOff_Main@sw stored from wreg
 16885  15FE  0020               	movlb	0	; select bank0
 16886  15FF  00E4               	movwf	DlyOff_Main@sw
 16887                           
 16888                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16889  1600  0864               	movf	DlyOff_Main@sw,w
 16890  1601  31A5  2583  3195   	fcall	_DelayOffPointSelect
 16891                           
 16892                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16893  1604  0021               	movlb	1	; select bank1
 16894  1605  0838               	movf	_DelayOff^(0+128),w
 16895  1606  0086               	movwf	6
 16896  1607  0187               	clrf	7
 16897  1608  1C81               	btfss	1,1
 16898  1609  0008               	return
 16899                           
 16900                           ;DelayOff_B1.c: 70: {
 16901                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16902  160A  0838               	movf	_DelayOff^(0+128),w
 16903  160B  3E02               	addlw	2
 16904  160C  0086               	movwf	6
 16905  160D  0187               	clrf	7
 16906  160E  3001               	movlw	1
 16907  160F  0781               	addwf	1,f
 16908  1610  3141               	addfsr 1,1
 16909  1611  1803               	skipnc
 16910  1612  0A81               	incf	1,f
 16911                           
 16912                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16913  1613  0838               	movf	_DelayOff^(0+128),w
 16914  1614  3E02               	addlw	2
 16915  1615  0086               	movwf	6
 16916  1616  0187               	clrf	7
 16917  1617  3F40               	moviw [0]fsr1
 16918  1618  0020               	movlb	0	; select bank0
 16919  1619  00E2               	movwf	??_DlyOff_Main
 16920  161A  3F41               	moviw [1]fsr1
 16921  161B  00E3               	movwf	??_DlyOff_Main+1
 16922  161C  3015               	movlw	21
 16923  161D  0263               	subwf	??_DlyOff_Main+1,w
 16924  161E  30E0               	movlw	224
 16925  161F  1903               	skipnz
 16926  1620  0262               	subwf	??_DlyOff_Main,w
 16927  1621  1C03               	skipc
 16928  1622  0008               	return
 16929                           
 16930                           ;DelayOff_B1.c: 73: {
 16931                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16932  1623  0021               	movlb	1	; select bank1
 16933  1624  0838               	movf	_DelayOff^(0+128),w
 16934  1625  3E02               	addlw	2
 16935  1626  0086               	movwf	6
 16936  1627  0187               	clrf	7
 16937  1628  3000               	movlw	0
 16938  1629  3FC0               	movwi [0]fsr1
 16939  162A  3FC1               	movwi [1]fsr1
 16940                           
 16941                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16942  162B  3001               	movlw	1
 16943  162C  0020               	movlb	0	; select bank0
 16944  162D  00E2               	movwf	??_DlyOff_Main
 16945  162E  0021               	movlb	1	; select bank1
 16946  162F  0838               	movf	_DelayOff^(0+128),w
 16947  1630  3E04               	addlw	4
 16948  1631  0086               	movwf	6
 16949  1632  0187               	clrf	7
 16950  1633  0020               	movlb	0	; select bank0
 16951  1634  0862               	movf	??_DlyOff_Main,w
 16952  1635  0781               	addwf	1,f
 16953                           
 16954                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16955  1636  0021               	movlb	1	; select bank1
 16956  1637  0838               	movf	_DelayOff^(0+128),w
 16957  1638  3E04               	addlw	4
 16958  1639  0086               	movwf	6
 16959  163A  0187               	clrf	7
 16960  163B  0A38               	incf	_DelayOff^(0+128),w
 16961  163C  0084               	movwf	4
 16962  163D  0185               	clrf	5
 16963  163E  0800               	movf	0,w
 16964  163F  0201               	subwf	1,w
 16965  1640  1C03               	skipc
 16966  1641  0008               	return
 16967                           
 16968                           ;DelayOff_B1.c: 77: {
 16969                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16970  1642  0838               	movf	_DelayOff^(0+128),w
 16971  1643  3E04               	addlw	4
 16972  1644  0086               	movwf	6
 16973  1645  0187               	clrf	7
 16974  1646  0181               	clrf	1
 16975                           
 16976                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16977  1647  0838               	movf	_DelayOff^(0+128),w
 16978  1648  0086               	movwf	6
 16979  1649  0187               	clrf	7
 16980  164A  1081               	bcf	1,1
 16981                           
 16982                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16983  164B  0020               	movlb	0	; select bank0
 16984  164C  01A2               	clrf	setSw_Status@command
 16985  164D  0864               	movf	DlyOff_Main@sw,w
 16986  164E  31A6  262B  3195   	fcall	_setSw_Status
 16987                           
 16988                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16989  1651  0020               	movlb	0	; select bank0
 16990  1652  01A2               	clrf	setRFSW_Status@command
 16991  1653  0864               	movf	DlyOff_Main@sw,w
 16992  1654  31A6  261C  3195   	fcall	_setRFSW_Status
 16993                           
 16994                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16995  1657  0020               	movlb	0	; select bank0
 16996  1658  01DD               	clrf	setRF_DimmerLights@on
 16997  1659  0864               	movf	DlyOff_Main@sw,w
 16998  165A  3192  2281  3195   	fcall	_setRF_DimmerLights
 16999                           
 17000                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 17001  165D  0020               	movlb	0	; select bank0
 17002  165E  01A2               	clrf	setDimmerLights_Trigger@command
 17003  165F  0AA2               	incf	setDimmerLights_Trigger@command,f
 17004  1660  0864               	movf	DlyOff_Main@sw,w
 17005  1661  31A6  2669  3195   	fcall	_setDimmerLights_Trigger
 17006                           
 17007                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 17008  1664  0020               	movlb	0	; select bank0
 17009  1665  01A2               	clrf	setDimmerLights_Switch@command
 17010  1666  0864               	movf	DlyOff_Main@sw,w
 17011  1667  31A6  2659  3195   	fcall	_setDimmerLights_Switch
 17012                           
 17013                           ;DelayOff_B1.c: 85: setTxData(1);
 17014  166A  3001               	movlw	1
 17015  166B  318B  231A  3195   	fcall	_setTxData
 17016                           
 17017                           ;DelayOff_B1.c: 86: setBuz(1,100);
 17018  166E  3064               	movlw	100
 17019  166F  0020               	movlb	0	; select bank0
 17020  1670  00A6               	movwf	setBuz@time
 17021  1671  3000               	movlw	0
 17022  1672  00A7               	movwf	setBuz@time+1
 17023  1673  3001               	movlw	1
 17024  1674  3195  2587         	fcall	_setBuz
 17025  1676  0008               	return
 17026  1677                     __end_of_DlyOff_Main:	
 17027                           
 17028                           	psect	text104
 17029  0B1A                     __ptext104:	
 17030 ;; *************** function _setTxData *****************
 17031 ;; Defined at:
 17032 ;;		line 141 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;  rf              1    wreg     unsigned char 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  rf              1    3[BANK0 ] unsigned char 
 17037 ;;  i               1    0        unsigned char 
 17038 ;; Return value:  Size  Location     Type
 17039 ;;		None               void
 17040 ;; Registers used:
 17041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:        2 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    5
 17054 ;; This function calls:
 17055 ;;		_RfPointSelect
 17056 ;; This function is called by:
 17057 ;;		_DlyOff_Main
 17058 ;;		_setDimmerLights_Adj
 17059 ;;		_setControl_Lights_Table
 17060 ;;		_setRFSW_Control
 17061 ;;		_setRFSW_AdjControl
 17062 ;;		_Sw_DimmerOnFunc
 17063 ;;		_Sw_DimmerOffFunc
 17064 ;; This function uses a non-reentrant model
 17065 ;;
 17066                           
 17067                           
 17068                           ;psect for function _setTxData
 17069  0B1A                     _setTxData:	
 17070                           
 17071                           ;incstack = 0
 17072                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17073                           ;setTxData@rf stored from wreg
 17074  0B1A  0020               	movlb	0	; select bank0
 17075  0B1B  00A3               	movwf	setTxData@rf
 17076                           
 17077                           ;RF_Control_B1.c: 143: char i;
 17078                           ;RF_Control_B1.c: 144: RfPointSelect(rf);
 17079  0B1C  0823               	movf	setTxData@rf,w
 17080  0B1D  31A5  2528  318B   	fcall	_RfPointSelect
 17081                           
 17082                           ;RF_Control_B1.c: 145: if(RF->Enable)
 17083  0B20  087B               	movf	_RF,w
 17084  0B21  0086               	movwf	6
 17085  0B22  0187               	clrf	7
 17086  0B23  1C01               	btfss	1,0
 17087  0B24  0008               	return
 17088                           
 17089                           ;RF_Control_B1.c: 146: {
 17090                           ;RF_Control_B1.c: 148: if(!RF->TransceiveGO)
 17091  0B25  087B               	movf	_RF,w
 17092  0B26  0086               	movwf	6
 17093  0B27  0187               	clrf	7
 17094  0B28  1901               	btfsc	1,2
 17095  0B29  0008               	return
 17096                           
 17097                           ;RF_Control_B1.c: 149: {
 17098                           ;RF_Control_B1.c: 150: RF->TransceiveGO=1;
 17099  0B2A  087B               	movf	_RF,w
 17100  0B2B  0086               	movwf	6
 17101  0B2C  0187               	clrf	7
 17102  0B2D  1501               	bsf	1,2
 17103                           
 17104                           ;RF_Control_B1.c: 159: RF_Data[0]=0x63;
 17105  0B2E  3063               	movlw	99
 17106  0B2F  0020               	movlb	0	; select bank0
 17107  0B30  00A2               	movwf	??_setTxData
 17108  0B31  0822               	movf	??_setTxData,w
 17109  0B32  0021               	movlb	1	; select bank1
 17110  0B33  00A0               	movwf	_RF_Data^(0+128)
 17111                           
 17112                           ;RF_Control_B1.c: 160: RF_Data[1]=0x02;
 17113  0B34  3002               	movlw	2
 17114  0B35  0020               	movlb	0	; select bank0
 17115  0B36  00A2               	movwf	??_setTxData
 17116  0B37  0822               	movf	??_setTxData,w
 17117  0B38  0021               	movlb	1	; select bank1
 17118  0B39  00A1               	movwf	(_RF_Data^(0+128)+1)
 17119                           
 17120                           ;RF_Control_B1.c: 161: RF_Data[2]=Product->Data[2];
 17121  0B3A  0020               	movlb	0	; select bank0
 17122  0B3B  086F               	movf	_Product,w
 17123  0B3C  0086               	movwf	6
 17124  0B3D  3001               	movlw	1	; select bank2/3
 17125  0B3E  0087               	movwf	7
 17126  0B3F  3001               	movlw	1	; select bank2/3
 17127  0B40  3F42               	moviw [2]fsr1
 17128  0B41  0021               	movlb	1	; select bank1
 17129  0B42  00A2               	movwf	(_RF_Data^(0+128)+2)
 17130                           
 17131                           ;RF_Control_B1.c: 162: RF_Data[3]=Product->Data[3];
 17132  0B43  0020               	movlb	0	; select bank0
 17133  0B44  086F               	movf	_Product,w
 17134  0B45  0086               	movwf	6
 17135  0B46  3001               	movlw	1	; select bank2/3
 17136  0B47  0087               	movwf	7
 17137  0B48  3001               	movlw	1	; select bank2/3
 17138  0B49  3F43               	moviw [3]fsr1
 17139  0B4A  0021               	movlb	1	; select bank1
 17140  0B4B  00A3               	movwf	(_RF_Data^(0+128)+3)
 17141                           
 17142                           ;RF_Control_B1.c: 163: RF_Data[4]=Product->Data[4];
 17143  0B4C  0020               	movlb	0	; select bank0
 17144  0B4D  086F               	movf	_Product,w
 17145  0B4E  0086               	movwf	6
 17146  0B4F  3001               	movlw	1	; select bank2/3
 17147  0B50  0087               	movwf	7
 17148  0B51  3001               	movlw	1	; select bank2/3
 17149  0B52  3F44               	moviw [4]fsr1
 17150  0B53  0021               	movlb	1	; select bank1
 17151  0B54  00A4               	movwf	(_RF_Data^(0+128)+4)
 17152                           
 17153                           ;RF_Control_B1.c: 164: RF_Data[5]=Product->Data[5];
 17154  0B55  0020               	movlb	0	; select bank0
 17155  0B56  086F               	movf	_Product,w
 17156  0B57  0086               	movwf	6
 17157  0B58  3001               	movlw	1	; select bank2/3
 17158  0B59  0087               	movwf	7
 17159  0B5A  3001               	movlw	1	; select bank2/3
 17160  0B5B  3F45               	moviw [5]fsr1
 17161  0B5C  0021               	movlb	1	; select bank1
 17162  0B5D  00A5               	movwf	(_RF_Data^(0+128)+5)
 17163                           
 17164                           ;RF_Control_B1.c: 165: RF_Data[6]=Product->Data[6];
 17165  0B5E  0020               	movlb	0	; select bank0
 17166  0B5F  086F               	movf	_Product,w
 17167  0B60  0086               	movwf	6
 17168  0B61  3001               	movlw	1	; select bank2/3
 17169  0B62  0087               	movwf	7
 17170  0B63  3001               	movlw	1	; select bank2/3
 17171  0B64  3F46               	moviw [6]fsr1
 17172  0B65  0021               	movlb	1	; select bank1
 17173  0B66  00A6               	movwf	(_RF_Data^(0+128)+6)
 17174                           
 17175                           ;RF_Control_B1.c: 166: RF_Data[7]=Product->Data[7];
 17176  0B67  0020               	movlb	0	; select bank0
 17177  0B68  086F               	movf	_Product,w
 17178  0B69  0086               	movwf	6
 17179  0B6A  3001               	movlw	1	; select bank2/3
 17180  0B6B  0087               	movwf	7
 17181  0B6C  3001               	movlw	1	; select bank2/3
 17182  0B6D  3F47               	moviw [7]fsr1
 17183  0B6E  0021               	movlb	1	; select bank1
 17184  0B6F  00A7               	movwf	(_RF_Data^(0+128)+7)
 17185                           
 17186                           ;RF_Control_B1.c: 167: RF_Data[8]=Product->Data[8];
 17187  0B70  0020               	movlb	0	; select bank0
 17188  0B71  086F               	movf	_Product,w
 17189  0B72  0086               	movwf	6
 17190  0B73  3001               	movlw	1	; select bank2/3
 17191  0B74  0087               	movwf	7
 17192  0B75  3001               	movlw	1	; select bank2/3
 17193  0B76  3F48               	moviw [8]fsr1
 17194  0B77  0021               	movlb	1	; select bank1
 17195  0B78  00A8               	movwf	(_RF_Data^(0+128)+8)
 17196                           
 17197                           ;RF_Control_B1.c: 168: RF_Data[9]=Product->Data[9];
 17198  0B79  0020               	movlb	0	; select bank0
 17199  0B7A  086F               	movf	_Product,w
 17200  0B7B  0086               	movwf	6
 17201  0B7C  3001               	movlw	1	; select bank2/3
 17202  0B7D  0087               	movwf	7
 17203  0B7E  3001               	movlw	1	; select bank2/3
 17204  0B7F  3F49               	moviw [9]fsr1
 17205  0B80  0021               	movlb	1	; select bank1
 17206  0B81  00A9               	movwf	(_RF_Data^(0+128)+9)
 17207                           
 17208                           ;RF_Control_B1.c: 169: RF_Data[10]=Product->Data[10];
 17209  0B82  0020               	movlb	0	; select bank0
 17210  0B83  086F               	movf	_Product,w
 17211  0B84  0086               	movwf	6
 17212  0B85  3001               	movlw	1	; select bank2/3
 17213  0B86  0087               	movwf	7
 17214  0B87  3001               	movlw	1	; select bank2/3
 17215  0B88  3F4A               	moviw [10]fsr1
 17216  0B89  0021               	movlb	1	; select bank1
 17217  0B8A  00AA               	movwf	(_RF_Data^(0+128)+10)
 17218                           
 17219                           ;RF_Control_B1.c: 170: RF_Data[11]=Product->Data[11];
 17220  0B8B  0020               	movlb	0	; select bank0
 17221  0B8C  086F               	movf	_Product,w
 17222  0B8D  0086               	movwf	6
 17223  0B8E  3001               	movlw	1	; select bank2/3
 17224  0B8F  0087               	movwf	7
 17225  0B90  3001               	movlw	1	; select bank2/3
 17226  0B91  3F4B               	moviw [11]fsr1
 17227  0B92  0021               	movlb	1	; select bank1
 17228  0B93  00AB               	movwf	(_RF_Data^(0+128)+11)
 17229                           
 17230                           ;RF_Control_B1.c: 171: RF_Data[12]=Product->Data[12];
 17231  0B94  0020               	movlb	0	; select bank0
 17232  0B95  086F               	movf	_Product,w
 17233  0B96  0086               	movwf	6
 17234  0B97  3001               	movlw	1	; select bank2/3
 17235  0B98  0087               	movwf	7
 17236  0B99  3001               	movlw	1	; select bank2/3
 17237  0B9A  3F4C               	moviw [12]fsr1
 17238  0B9B  0021               	movlb	1	; select bank1
 17239  0B9C  00AC               	movwf	(_RF_Data^(0+128)+12)
 17240                           
 17241                           ;RF_Control_B1.c: 172: RF_Data[13]=Product->Data[13];
 17242  0B9D  0020               	movlb	0	; select bank0
 17243  0B9E  086F               	movf	_Product,w
 17244  0B9F  0086               	movwf	6
 17245  0BA0  3001               	movlw	1	; select bank2/3
 17246  0BA1  0087               	movwf	7
 17247  0BA2  3001               	movlw	1	; select bank2/3
 17248  0BA3  3F4D               	moviw [13]fsr1
 17249  0BA4  0021               	movlb	1	; select bank1
 17250  0BA5  00AD               	movwf	(_RF_Data^(0+128)+13)
 17251                           
 17252                           ;RF_Control_B1.c: 173: RF_Data[14]=Product->Data[14];
 17253  0BA6  0020               	movlb	0	; select bank0
 17254  0BA7  086F               	movf	_Product,w
 17255  0BA8  0086               	movwf	6
 17256  0BA9  3001               	movlw	1	; select bank2/3
 17257  0BAA  0087               	movwf	7
 17258  0BAB  3001               	movlw	1	; select bank2/3
 17259  0BAC  3F4E               	moviw [14]fsr1
 17260  0BAD  0021               	movlb	1	; select bank1
 17261  0BAE  00AE               	movwf	(_RF_Data^(0+128)+14)
 17262                           
 17263                           ;RF_Control_B1.c: 174: RF_Data[15]=Product->Data[15];
 17264  0BAF  0020               	movlb	0	; select bank0
 17265  0BB0  086F               	movf	_Product,w
 17266  0BB1  0086               	movwf	6
 17267  0BB2  3001               	movlw	1	; select bank2/3
 17268  0BB3  0087               	movwf	7
 17269  0BB4  3001               	movlw	1	; select bank2/3
 17270  0BB5  3F4F               	moviw [15]fsr1
 17271  0BB6  0021               	movlb	1	; select bank1
 17272  0BB7  00AF               	movwf	(_RF_Data^(0+128)+15)
 17273                           
 17274                           ;RF_Control_B1.c: 175: RF_Data[16]=Product->Data[16];
 17275  0BB8  0020               	movlb	0	; select bank0
 17276  0BB9  086F               	movf	_Product,w
 17277  0BBA  0086               	movwf	6
 17278  0BBB  3001               	movlw	1	; select bank2/3
 17279  0BBC  0087               	movwf	7
 17280  0BBD  3001               	movlw	1	; select bank2/3
 17281  0BBE  3F50               	moviw [16]fsr1
 17282  0BBF  0021               	movlb	1	; select bank1
 17283  0BC0  00B0               	movwf	(_RF_Data^(0+128)+16)
 17284                           
 17285                           ;RF_Control_B1.c: 176: RF_Data[17]=Product->Data[17];
 17286  0BC1  0020               	movlb	0	; select bank0
 17287  0BC2  086F               	movf	_Product,w
 17288  0BC3  0086               	movwf	6
 17289  0BC4  3001               	movlw	1	; select bank2/3
 17290  0BC5  0087               	movwf	7
 17291  0BC6  3001               	movlw	1	; select bank2/3
 17292  0BC7  3F51               	moviw [17]fsr1
 17293  0BC8  0021               	movlb	1	; select bank1
 17294  0BC9  00B1               	movwf	(_RF_Data^(0+128)+17)
 17295                           
 17296                           ;RF_Control_B1.c: 177: RF_Data[18]=Product->Data[18];
 17297  0BCA  0020               	movlb	0	; select bank0
 17298  0BCB  086F               	movf	_Product,w
 17299  0BCC  0086               	movwf	6
 17300  0BCD  3001               	movlw	1	; select bank2/3
 17301  0BCE  0087               	movwf	7
 17302  0BCF  3001               	movlw	1	; select bank2/3
 17303  0BD0  3F52               	moviw [18]fsr1
 17304  0BD1  0021               	movlb	1	; select bank1
 17305  0BD2  00B2               	movwf	(_RF_Data^(0+128)+18)
 17306                           
 17307                           ;RF_Control_B1.c: 178: RF_Data[19]=Product->Data[19];
 17308  0BD3  0020               	movlb	0	; select bank0
 17309  0BD4  086F               	movf	_Product,w
 17310  0BD5  0086               	movwf	6
 17311  0BD6  3001               	movlw	1	; select bank2/3
 17312  0BD7  0087               	movwf	7
 17313  0BD8  3001               	movlw	1	; select bank2/3
 17314  0BD9  3F53               	moviw [19]fsr1
 17315  0BDA  0021               	movlb	1	; select bank1
 17316  0BDB  00B3               	movwf	(_RF_Data^(0+128)+19)
 17317                           
 17318                           ;RF_Control_B1.c: 179: RF_Data[20]=209;
 17319  0BDC  30D1               	movlw	209
 17320  0BDD  0020               	movlb	0	; select bank0
 17321  0BDE  00A2               	movwf	??_setTxData
 17322  0BDF  0822               	movf	??_setTxData,w
 17323  0BE0  0021               	movlb	1	; select bank1
 17324  0BE1  00B4               	movwf	(_RF_Data^(0+128)+20)
 17325  0BE2  0008               	return
 17326  0BE3                     __end_of_setTxData:	
 17327                           
 17328                           	psect	text105
 17329  2528                     __ptext105:	
 17330 ;; *************** function _RfPointSelect *****************
 17331 ;; Defined at:
 17332 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  rf              1    wreg     unsigned char 
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;  rf              1    1[BANK0 ] unsigned char 
 17337 ;; Return value:  Size  Location     Type
 17338 ;;		None               void
 17339 ;; Registers used:
 17340 ;;		wreg
 17341 ;; Tracked objects:
 17342 ;;		On entry : 0/0
 17343 ;;		On exit  : 0/0
 17344 ;;		Unchanged: 0/0
 17345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;Total ram usage:        2 bytes
 17351 ;; Hardware stack levels used:    1
 17352 ;; Hardware stack levels required when called:    4
 17353 ;; This function calls:
 17354 ;;		Nothing
 17355 ;; This function is called by:
 17356 ;;		_setRF_Learn
 17357 ;;		_setRF_RxStatus
 17358 ;;		_setRF_Main
 17359 ;;		_setTxData
 17360 ;;		_setRF_Enable
 17361 ;;		_RF_RxDisable
 17362 ;;		_getRxData
 17363 ;;		_setLog_Code
 17364 ;;		_setControl_Lights_Table
 17365 ;; This function uses a non-reentrant model
 17366 ;;
 17367                           
 17368                           
 17369                           ;psect for function _RfPointSelect
 17370  2528                     _RfPointSelect:	
 17371                           
 17372                           ;incstack = 0
 17373                           ; Regs used in _RfPointSelect: [wreg]
 17374                           ;RfPointSelect@rf stored from wreg
 17375  2528  0020               	movlb	0	; select bank0
 17376  2529  00A1               	movwf	RfPointSelect@rf
 17377                           
 17378                           ;RF_Control_B1.c: 10: if(rf == 1)
 17379  252A  0821               	movf	RfPointSelect@rf,w
 17380  252B  3A01               	xorlw	1
 17381  252C  1D03               	skipz
 17382  252D  0008               	return
 17383                           
 17384                           ;RF_Control_B1.c: 11: {
 17385                           ;RF_Control_B1.c: 12: RF=&RF1;
 17386  252E  30E1               	movlw	_RF1& (0+255)
 17387  252F  00A0               	movwf	??_RfPointSelect
 17388  2530  0820               	movf	??_RfPointSelect,w
 17389  2531  00FB               	movwf	_RF
 17390  2532  0008               	return
 17391  2533                     __end_of_RfPointSelect:	
 17392                           
 17393                           	psect	text106
 17394  262B                     __ptext106:	
 17395 ;; *************** function _setSw_Status *****************
 17396 ;; Defined at:
 17397 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;  sw              1    wreg     unsigned char 
 17400 ;;  command         1    2[BANK0 ] unsigned char 
 17401 ;; Auto vars:     Size  Location     Type
 17402 ;;  sw              1    3[BANK0 ] unsigned char 
 17403 ;; Return value:  Size  Location     Type
 17404 ;;		None               void
 17405 ;; Registers used:
 17406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17407 ;; Tracked objects:
 17408 ;;		On entry : 0/0
 17409 ;;		On exit  : 0/0
 17410 ;;		Unchanged: 0/0
 17411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17412 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;Total ram usage:        2 bytes
 17417 ;; Hardware stack levels used:    1
 17418 ;; Hardware stack levels required when called:    5
 17419 ;; This function calls:
 17420 ;;		_SwPointSelect
 17421 ;; This function is called by:
 17422 ;;		_DlyOff_Main
 17423 ;;		_setDimmerLights_ERROR
 17424 ;;		_setControl_Lights_Table
 17425 ;;		_setRFSW_Control
 17426 ;; This function uses a non-reentrant model
 17427 ;;
 17428                           
 17429                           
 17430                           ;psect for function _setSw_Status
 17431  262B                     _setSw_Status:	
 17432                           
 17433                           ;incstack = 0
 17434                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17435                           ;setSw_Status@sw stored from wreg
 17436  262B  0020               	movlb	0	; select bank0
 17437  262C  00A3               	movwf	setSw_Status@sw
 17438                           
 17439                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17440  262D  0823               	movf	setSw_Status@sw,w
 17441  262E  31A5  251D         	fcall	_SwPointSelect
 17442                           
 17443                           ;Switch_B1.c: 109: Sw->Status=command;
 17444  2630  0020               	movlb	0	; select bank0
 17445  2631  086D               	movf	_Sw,w
 17446  2632  0086               	movwf	6
 17447  2633  3001               	movlw	1	; select bank2/3
 17448  2634  0087               	movwf	7
 17449  2635  0822               	movf	setSw_Status@command,w
 17450  2636  1301               	bcf	1,6
 17451  2637  1D03               	skipz
 17452  2638  1701               	bsf	1,6
 17453  2639  0008               	return
 17454  263A                     __end_of_setSw_Status:	
 17455                           
 17456                           	psect	text107
 17457  251D                     __ptext107:	
 17458 ;; *************** function _SwPointSelect *****************
 17459 ;; Defined at:
 17460 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17461 ;; Parameters:    Size  Location     Type
 17462 ;;  sw              1    wreg     unsigned char 
 17463 ;; Auto vars:     Size  Location     Type
 17464 ;;  sw              1    1[BANK0 ] unsigned char 
 17465 ;; Return value:  Size  Location     Type
 17466 ;;		None               void
 17467 ;; Registers used:
 17468 ;;		wreg
 17469 ;; Tracked objects:
 17470 ;;		On entry : 0/0
 17471 ;;		On exit  : 0/0
 17472 ;;		Unchanged: 0/0
 17473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;Total ram usage:        2 bytes
 17479 ;; Hardware stack levels used:    1
 17480 ;; Hardware stack levels required when called:    4
 17481 ;; This function calls:
 17482 ;;		Nothing
 17483 ;; This function is called by:
 17484 ;;		_setSw_Enable
 17485 ;;		_setSw_Status
 17486 ;;		_setSw_Main
 17487 ;;		_Sw_Detect
 17488 ;; This function uses a non-reentrant model
 17489 ;;
 17490                           
 17491                           
 17492                           ;psect for function _SwPointSelect
 17493  251D                     _SwPointSelect:	
 17494                           
 17495                           ;incstack = 0
 17496                           ; Regs used in _SwPointSelect: [wreg]
 17497                           ;SwPointSelect@sw stored from wreg
 17498  251D  0020               	movlb	0	; select bank0
 17499  251E  00A1               	movwf	SwPointSelect@sw
 17500                           
 17501                           ;Switch_B1.c: 19: if(sw == 1)
 17502  251F  0821               	movf	SwPointSelect@sw,w
 17503  2520  3A01               	xorlw	1
 17504  2521  1D03               	skipz
 17505  2522  0008               	return
 17506                           
 17507                           ;Switch_B1.c: 20: {
 17508                           ;Switch_B1.c: 21: Sw=&Sw1;
 17509  2523  3059               	movlw	_Sw1& (0+255)
 17510  2524  00A0               	movwf	??_SwPointSelect
 17511  2525  0820               	movf	??_SwPointSelect,w
 17512  2526  00ED               	movwf	_Sw
 17513  2527  0008               	return
 17514  2528                     __end_of_SwPointSelect:	
 17515                           
 17516                           	psect	text108
 17517  1281                     __ptext108:	
 17518 ;; *************** function _setRF_DimmerLights *****************
 17519 ;; Defined at:
 17520 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;  lights          1    wreg     unsigned char 
 17523 ;;  on              1   61[BANK0 ] unsigned char 
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;  lights          1   65[BANK0 ] unsigned char 
 17526 ;;  status          1   64[BANK0 ] unsigned char 
 17527 ;; Return value:  Size  Location     Type
 17528 ;;		None               void
 17529 ;; Registers used:
 17530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17531 ;; Tracked objects:
 17532 ;;		On entry : 0/0
 17533 ;;		On exit  : 0/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17536 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;Total ram usage:        5 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    7
 17543 ;; This function calls:
 17544 ;;		_setPercentValue
 17545 ;; This function is called by:
 17546 ;;		_DlyOff_Main
 17547 ;;		_setDimmerLights_Adj
 17548 ;;		_setRFSW_Control
 17549 ;;		_Sw_DimmerOnFunc
 17550 ;;		_Sw_DimmerOffFunc
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           
 17555                           ;psect for function _setRF_DimmerLights
 17556  1281                     _setRF_DimmerLights:	
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17560                           ;setRF_DimmerLights@lights stored from wreg
 17561  1281  0020               	movlb	0	; select bank0
 17562  1282  00E1               	movwf	setRF_DimmerLights@lights
 17563                           
 17564                           ;RF_Control_B1.c: 447: char status;
 17565                           ;RF_Control_B1.c: 448: status=1;
 17566  1283  01E0               	clrf	setRF_DimmerLights@status
 17567  1284  0AE0               	incf	setRF_DimmerLights@status,f
 17568                           
 17569                           ;RF_Control_B1.c: 449: status<<=(lights-1);
 17570  1285  0861               	movf	setRF_DimmerLights@lights,w
 17571  1286  3EFF               	addlw	-1
 17572  1287  0A89               	incf	9,f
 17573  1288  2A8B               	goto	u7570
 17574  1289                     u7575:	
 17575  1289  1003               	clrc
 17576  128A  0DE0               	rlf	setRF_DimmerLights@status,f
 17577  128B                     u7570:	
 17578  128B  3EFF               	addlw	-1
 17579  128C  1D03               	skipz
 17580  128D  2A89               	goto	u7575
 17581                           
 17582                           ;RF_Control_B1.c: 450: Product->Data[11]=lights;
 17583  128E  0861               	movf	setRF_DimmerLights@lights,w
 17584  128F  00DE               	movwf	??_setRF_DimmerLights
 17585  1290  086F               	movf	_Product,w
 17586  1291  3E0B               	addlw	11
 17587  1292  0086               	movwf	6
 17588  1293  3001               	movlw	1	; select bank2/3
 17589  1294  0087               	movwf	7
 17590  1295  085E               	movf	??_setRF_DimmerLights,w
 17591  1296  0081               	movwf	1
 17592                           
 17593                           ;RF_Control_B1.c: 453: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 17594  1297  3043               	movlw	67
 17595  1298  319E  2626  3192   	fcall	_setPercentValue
 17596  129B  0020               	movlb	0	; select bank0
 17597  129C  00DE               	movwf	??_setRF_DimmerLights
 17598  129D  0861               	movf	setRF_DimmerLights@lights,w
 17599  129E  3E14               	addlw	20
 17600  129F  076F               	addwf	_Product,w
 17601  12A0  00DF               	movwf	??_setRF_DimmerLights+1
 17602  12A1  085F               	movf	??_setRF_DimmerLights+1,w
 17603  12A2  0086               	movwf	6
 17604  12A3  3001               	movlw	1	; select bank2/3
 17605  12A4  0087               	movwf	7
 17606  12A5  085E               	movf	??_setRF_DimmerLights,w
 17607  12A6  0081               	movwf	1
 17608                           
 17609                           ;RF_Control_B1.c: 456: Product->Data[9]=Product->Data[20+lights];
 17610  12A7  0861               	movf	setRF_DimmerLights@lights,w
 17611  12A8  3E14               	addlw	20
 17612  12A9  076F               	addwf	_Product,w
 17613  12AA  00DE               	movwf	??_setRF_DimmerLights
 17614  12AB  085E               	movf	??_setRF_DimmerLights,w
 17615  12AC  0086               	movwf	6
 17616  12AD  3001               	movlw	1	; select bank2/3
 17617  12AE  0087               	movwf	7
 17618  12AF  0801               	movf	1,w
 17619  12B0  00DF               	movwf	??_setRF_DimmerLights+1
 17620  12B1  086F               	movf	_Product,w
 17621  12B2  3E09               	addlw	9
 17622  12B3  0086               	movwf	6
 17623  12B4  3001               	movlw	1	; select bank2/3
 17624  12B5  0087               	movwf	7
 17625  12B6  085F               	movf	??_setRF_DimmerLights+1,w
 17626  12B7  0081               	movwf	1
 17627                           
 17628                           ;RF_Control_B1.c: 457: Product->Data[17]=Product->Data[26+lights];
 17629  12B8  0861               	movf	setRF_DimmerLights@lights,w
 17630  12B9  3E1A               	addlw	26
 17631  12BA  076F               	addwf	_Product,w
 17632  12BB  00DE               	movwf	??_setRF_DimmerLights
 17633  12BC  085E               	movf	??_setRF_DimmerLights,w
 17634  12BD  0086               	movwf	6
 17635  12BE  3001               	movlw	1	; select bank2/3
 17636  12BF  0087               	movwf	7
 17637  12C0  0801               	movf	1,w
 17638  12C1  00DF               	movwf	??_setRF_DimmerLights+1
 17639  12C2  086F               	movf	_Product,w
 17640  12C3  3E11               	addlw	17
 17641  12C4  0086               	movwf	6
 17642  12C5  3001               	movlw	1	; select bank2/3
 17643  12C6  0087               	movwf	7
 17644  12C7  085F               	movf	??_setRF_DimmerLights+1,w
 17645  12C8  0081               	movwf	1
 17646                           
 17647                           ;RF_Control_B1.c: 458: if(on)
 17648  12C9  085D               	movf	setRF_DimmerLights@on,w
 17649  12CA  1903               	btfsc	3,2
 17650  12CB  2ADC               	goto	l8324
 17651                           
 17652                           ;RF_Control_B1.c: 459: {
 17653                           ;RF_Control_B1.c: 460: Product->Data[15]=(Product->Data[15]|status);
 17654  12CC  086F               	movf	_Product,w
 17655  12CD  3E0F               	addlw	15
 17656  12CE  0086               	movwf	6
 17657  12CF  3001               	movlw	1	; select bank2/3
 17658  12D0  0087               	movwf	7
 17659  12D1  0801               	movf	1,w
 17660  12D2  0460               	iorwf	setRF_DimmerLights@status,w
 17661  12D3  00DE               	movwf	??_setRF_DimmerLights
 17662  12D4  086F               	movf	_Product,w
 17663  12D5  3E0F               	addlw	15
 17664  12D6  0086               	movwf	6
 17665  12D7  3001               	movlw	1	; select bank2/3
 17666  12D8  0087               	movwf	7
 17667  12D9  085E               	movf	??_setRF_DimmerLights,w
 17668  12DA  0081               	movwf	1
 17669                           
 17670                           ;RF_Control_B1.c: 461: }
 17671  12DB  0008               	return
 17672  12DC                     l8324:	
 17673                           
 17674                           ;RF_Control_B1.c: 462: else
 17675                           ;RF_Control_B1.c: 463: {
 17676                           ;RF_Control_B1.c: 464: Product->Data[15]=(Product->Data[15]&(~status));
 17677  12DC  086F               	movf	_Product,w
 17678  12DD  3E0F               	addlw	15
 17679  12DE  0086               	movwf	6
 17680  12DF  3001               	movlw	1	; select bank2/3
 17681  12E0  0087               	movwf	7
 17682  12E1  0960               	comf	setRF_DimmerLights@status,w
 17683  12E2  0501               	andwf	1,w
 17684  12E3  00DE               	movwf	??_setRF_DimmerLights
 17685  12E4  086F               	movf	_Product,w
 17686  12E5  3E0F               	addlw	15
 17687  12E6  0086               	movwf	6
 17688  12E7  3001               	movlw	1	; select bank2/3
 17689  12E8  0087               	movwf	7
 17690  12E9  085E               	movf	??_setRF_DimmerLights,w
 17691  12EA  0081               	movwf	1
 17692  12EB  0008               	return
 17693  12EC                     __end_of_setRF_DimmerLights:	
 17694                           
 17695                           	psect	text109
 17696  1E26                     __ptext109:	
 17697 ;; *************** function _setPercentValue *****************
 17698 ;; Defined at:
 17699 ;;		line 505 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;  value           1    wreg     unsigned char 
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;  value           1   57[BANK0 ] unsigned char 
 17704 ;;  i               3   58[BANK0 ] float 
 17705 ;; Return value:  Size  Location     Type
 17706 ;;                  1    wreg      unsigned char 
 17707 ;; Registers used:
 17708 ;;		wreg, status,2, status,0, pclath, cstack
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;Total ram usage:        4 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:    6
 17721 ;; This function calls:
 17722 ;;		___awtoft
 17723 ;;		___ftdiv
 17724 ;;		___fttol
 17725 ;; This function is called by:
 17726 ;;		_Flash_Memory_Initialization
 17727 ;;		_setRF_DimmerLights
 17728 ;; This function uses a non-reentrant model
 17729 ;;
 17730                           
 17731                           
 17732                           ;psect for function _setPercentValue
 17733  1E26                     _setPercentValue:	
 17734                           
 17735                           ;incstack = 0
 17736                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17737                           ;setPercentValue@value stored from wreg
 17738  1E26  0020               	movlb	0	; select bank0
 17739  1E27  00D9               	movwf	setPercentValue@value
 17740                           
 17741                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17742  1E28  3000               	movlw	0
 17743  1E29  00DA               	movwf	setPercentValue@i
 17744  1E2A  3054               	movlw	84
 17745  1E2B  00DB               	movwf	setPercentValue@i+1
 17746  1E2C  3042               	movlw	66
 17747  1E2D  00DC               	movwf	setPercentValue@i+2
 17748                           
 17749                           ;Dimmer_B1.c: 509: i/=100;
 17750  1E2E  3000               	movlw	0
 17751  1E2F  00AE               	movwf	___ftdiv@f2
 17752  1E30  30C8               	movlw	200
 17753  1E31  00AF               	movwf	___ftdiv@f2+1
 17754  1E32  3042               	movlw	66
 17755  1E33  00B0               	movwf	___ftdiv@f2+2
 17756  1E34  085A               	movf	setPercentValue@i,w
 17757  1E35  00B1               	movwf	___ftdiv@f1
 17758  1E36  085B               	movf	setPercentValue@i+1,w
 17759  1E37  00B2               	movwf	___ftdiv@f1+1
 17760  1E38  085C               	movf	setPercentValue@i+2,w
 17761  1E39  00B3               	movwf	___ftdiv@f1+2
 17762  1E3A  318A  2271  319E   	fcall	___ftdiv
 17763  1E3D  0020               	movlb	0	; select bank0
 17764  1E3E  082E               	movf	?___ftdiv,w
 17765  1E3F  00DA               	movwf	setPercentValue@i
 17766  1E40  082F               	movf	?___ftdiv+1,w
 17767  1E41  00DB               	movwf	setPercentValue@i+1
 17768  1E42  0830               	movf	?___ftdiv+2,w
 17769  1E43  00DC               	movwf	setPercentValue@i+2
 17770                           
 17771                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17772  1E44  0859               	movf	setPercentValue@value,w
 17773  1E45  3EBD               	addlw	189
 17774  1E46  00A8               	movwf	___awtoft@c
 17775  1E47  30FF               	movlw	255
 17776  1E48  1803               	skipnc
 17777  1E49  3000               	movlw	0
 17778  1E4A  00A9               	movwf	___awtoft@c+1
 17779  1E4B  3198  20F6  319E   	fcall	___awtoft
 17780  1E4E  0020               	movlb	0	; select bank0
 17781  1E4F  0828               	movf	?___awtoft,w
 17782  1E50  00B1               	movwf	___ftdiv@f1
 17783  1E51  0829               	movf	?___awtoft+1,w
 17784  1E52  00B2               	movwf	___ftdiv@f1+1
 17785  1E53  082A               	movf	?___awtoft+2,w
 17786  1E54  00B3               	movwf	___ftdiv@f1+2
 17787  1E55  085A               	movf	setPercentValue@i,w
 17788  1E56  00AE               	movwf	___ftdiv@f2
 17789  1E57  085B               	movf	setPercentValue@i+1,w
 17790  1E58  00AF               	movwf	___ftdiv@f2+1
 17791  1E59  085C               	movf	setPercentValue@i+2,w
 17792  1E5A  00B0               	movwf	___ftdiv@f2+2
 17793  1E5B  318A  2271  319E   	fcall	___ftdiv
 17794  1E5E  0020               	movlb	0	; select bank0
 17795  1E5F  082E               	movf	?___ftdiv,w
 17796  1E60  00CB               	movwf	___fttol@f1
 17797  1E61  082F               	movf	?___ftdiv+1,w
 17798  1E62  00CC               	movwf	___fttol@f1+1
 17799  1E63  0830               	movf	?___ftdiv+2,w
 17800  1E64  00CD               	movwf	___fttol@f1+2
 17801  1E65  3196  26F1         	fcall	___fttol
 17802  1E67  0020               	movlb	0	; select bank0
 17803  1E68  034B               	decf	?___fttol,w
 17804  1E69  3AFF               	xorlw	255
 17805  1E6A  3E64               	addlw	100
 17806  1E6B  0008               	return
 17807  1E6C                     __end_of_setPercentValue:	
 17808                           
 17809                           	psect	text110
 17810  16F1                     __ptext110:	
 17811 ;; *************** function ___fttol *****************
 17812 ;; Defined at:
 17813 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17814 ;; Parameters:    Size  Location     Type
 17815 ;;  f1              3   43[BANK0 ] float 
 17816 ;; Auto vars:     Size  Location     Type
 17817 ;;  lval            4   52[BANK0 ] unsigned long 
 17818 ;;  exp1            1   56[BANK0 ] unsigned char 
 17819 ;;  sign1           1   51[BANK0 ] unsigned char 
 17820 ;; Return value:  Size  Location     Type
 17821 ;;                  4   43[BANK0 ] long 
 17822 ;; Registers used:
 17823 ;;		wreg, status,2, status,0
 17824 ;; Tracked objects:
 17825 ;;		On entry : 0/0
 17826 ;;		On exit  : 0/0
 17827 ;;		Unchanged: 0/0
 17828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17829 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;Total ram usage:       14 bytes
 17834 ;; Hardware stack levels used:    1
 17835 ;; Hardware stack levels required when called:    4
 17836 ;; This function calls:
 17837 ;;		Nothing
 17838 ;; This function is called by:
 17839 ;;		_getPercentValue
 17840 ;;		_setPercentValue
 17841 ;; This function uses a non-reentrant model
 17842 ;;
 17843                           
 17844                           
 17845                           ;psect for function ___fttol
 17846  16F1                     ___fttol:	
 17847                           
 17848                           ;incstack = 0
 17849                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17850  16F1  0020               	movlb	0	; select bank0
 17851  16F2  084B               	movf	___fttol@f1,w
 17852  16F3  00CF               	movwf	??___fttol
 17853  16F4  084C               	movf	___fttol@f1+1,w
 17854  16F5  00D0               	movwf	??___fttol+1
 17855  16F6  084D               	movf	___fttol@f1+2,w
 17856  16F7  00D1               	movwf	??___fttol+2
 17857  16F8  1003               	clrc
 17858  16F9  0D50               	rlf	??___fttol+1,w
 17859  16FA  0D51               	rlf	??___fttol+2,w
 17860  16FB  00D2               	movwf	??___fttol+3
 17861  16FC  0852               	movf	??___fttol+3,w
 17862  16FD  00D8               	movwf	___fttol@exp1
 17863  16FE  08D8               	movf	___fttol@exp1,f
 17864  16FF  1D03               	skipz
 17865  1700  2F0A               	goto	l6096
 17866  1701  3000               	movlw	0
 17867  1702  00CE               	movwf	?___fttol+3
 17868  1703  3000               	movlw	0
 17869  1704  00CD               	movwf	?___fttol+2
 17870  1705  3000               	movlw	0
 17871  1706  00CC               	movwf	?___fttol+1
 17872  1707  3000               	movlw	0
 17873  1708  00CB               	movwf	?___fttol
 17874  1709  0008               	return
 17875  170A                     l6096:	
 17876  170A  084B               	movf	___fttol@f1,w
 17877  170B  00CF               	movwf	??___fttol
 17878  170C  084C               	movf	___fttol@f1+1,w
 17879  170D  00D0               	movwf	??___fttol+1
 17880  170E  084D               	movf	___fttol@f1+2,w
 17881  170F  00D1               	movwf	??___fttol+2
 17882  1710  3017               	movlw	23
 17883  1711                     u4315:	
 17884  1711  36D1               	lsrf	??___fttol+2,f
 17885  1712  0CD0               	rrf	??___fttol+1,f
 17886  1713  0CCF               	rrf	??___fttol,f
 17887  1714  0B89               	decfsz	9,f
 17888  1715  2F11               	goto	u4315
 17889  1716  084F               	movf	??___fttol,w
 17890  1717  00D2               	movwf	??___fttol+3
 17891  1718  0852               	movf	??___fttol+3,w
 17892  1719  00D3               	movwf	___fttol@sign1
 17893  171A  17CC               	bsf	___fttol@f1+1,7
 17894  171B  30FF               	movlw	255
 17895  171C  05CB               	andwf	___fttol@f1,f
 17896  171D  30FF               	movlw	255
 17897  171E  05CC               	andwf	___fttol@f1+1,f
 17898  171F  3000               	movlw	0
 17899  1720  05CD               	andwf	___fttol@f1+2,f
 17900  1721  084B               	movf	___fttol@f1,w
 17901  1722  00D4               	movwf	___fttol@lval
 17902  1723  084C               	movf	___fttol@f1+1,w
 17903  1724  00D5               	movwf	___fttol@lval+1
 17904  1725  084D               	movf	___fttol@f1+2,w
 17905  1726  00D6               	movwf	___fttol@lval+2
 17906  1727  01D7               	clrf	___fttol@lval+3
 17907  1728  308E               	movlw	142
 17908  1729  02D8               	subwf	___fttol@exp1,f
 17909  172A  1FD8               	btfss	___fttol@exp1,7
 17910  172B  2F48               	goto	l6116
 17911  172C  0858               	movf	___fttol@exp1,w
 17912  172D  3A80               	xorlw	128
 17913  172E  3E8F               	addlw	143
 17914  172F  1803               	skipnc
 17915  1730  2F3A               	goto	l6114
 17916  1731  3000               	movlw	0
 17917  1732  00CE               	movwf	?___fttol+3
 17918  1733  3000               	movlw	0
 17919  1734  00CD               	movwf	?___fttol+2
 17920  1735  3000               	movlw	0
 17921  1736  00CC               	movwf	?___fttol+1
 17922  1737  3000               	movlw	0
 17923  1738  00CB               	movwf	?___fttol
 17924  1739  0008               	return
 17925  173A                     l6114:	
 17926  173A  3001               	movlw	1
 17927  173B                     u4345:	
 17928  173B  36D7               	lsrf	___fttol@lval+3,f
 17929  173C  0CD6               	rrf	___fttol@lval+2,f
 17930  173D  0CD5               	rrf	___fttol@lval+1,f
 17931  173E  0CD4               	rrf	___fttol@lval,f
 17932  173F  0B89               	decfsz	9,f
 17933  1740  2F3B               	goto	u4345
 17934  1741  3001               	movlw	1
 17935  1742  00CF               	movwf	??___fttol
 17936  1743  084F               	movf	??___fttol,w
 17937  1744  07D8               	addwf	___fttol@exp1,f
 17938  1745  1903               	btfsc	3,2
 17939  1746  2F61               	goto	l6126
 17940  1747  2F3A               	goto	l6114
 17941  1748                     l6116:	
 17942  1748  3018               	movlw	24
 17943  1749  0258               	subwf	___fttol@exp1,w
 17944  174A  1C03               	skipc
 17945  174B  2F5E               	goto	l6124
 17946  174C  3000               	movlw	0
 17947  174D  00CE               	movwf	?___fttol+3
 17948  174E  3000               	movlw	0
 17949  174F  00CD               	movwf	?___fttol+2
 17950  1750  3000               	movlw	0
 17951  1751  00CC               	movwf	?___fttol+1
 17952  1752  3000               	movlw	0
 17953  1753  00CB               	movwf	?___fttol
 17954  1754  0008               	return
 17955  1755                     l6122:	
 17956  1755  3001               	movlw	1
 17957  1756                     u4375:	
 17958  1756  35D4               	lslf	___fttol@lval,f
 17959  1757  0DD5               	rlf	___fttol@lval+1,f
 17960  1758  0DD6               	rlf	___fttol@lval+2,f
 17961  1759  0DD7               	rlf	___fttol@lval+3,f
 17962  175A  0B89               	decfsz	9,f
 17963  175B  2F56               	goto	u4375
 17964  175C  3001               	movlw	1
 17965  175D  02D8               	subwf	___fttol@exp1,f
 17966  175E                     l6124:	
 17967  175E  08D8               	movf	___fttol@exp1,f
 17968  175F  1D03               	skipz
 17969  1760  2F55               	goto	l6122
 17970  1761                     l6126:	
 17971  1761  0853               	movf	___fttol@sign1,w
 17972  1762  1903               	btfsc	3,2
 17973  1763  2F6F               	goto	l6130
 17974  1764  09D4               	comf	___fttol@lval,f
 17975  1765  09D5               	comf	___fttol@lval+1,f
 17976  1766  09D6               	comf	___fttol@lval+2,f
 17977  1767  09D7               	comf	___fttol@lval+3,f
 17978  1768  0AD4               	incf	___fttol@lval,f
 17979  1769  1903               	skipnz
 17980  176A  0AD5               	incf	___fttol@lval+1,f
 17981  176B  1903               	skipnz
 17982  176C  0AD6               	incf	___fttol@lval+2,f
 17983  176D  1903               	skipnz
 17984  176E  0AD7               	incf	___fttol@lval+3,f
 17985  176F                     l6130:	
 17986  176F  0857               	movf	___fttol@lval+3,w
 17987  1770  00CE               	movwf	?___fttol+3
 17988  1771  0856               	movf	___fttol@lval+2,w
 17989  1772  00CD               	movwf	?___fttol+2
 17990  1773  0855               	movf	___fttol@lval+1,w
 17991  1774  00CC               	movwf	?___fttol+1
 17992  1775  0854               	movf	___fttol@lval,w
 17993  1776  00CB               	movwf	?___fttol
 17994  1777  0008               	return
 17995  1778                     __end_of___fttol:	
 17996                           
 17997                           	psect	text111
 17998  0A71                     __ptext111:	
 17999 ;; *************** function ___ftdiv *****************
 18000 ;; Defined at:
 18001 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18002 ;; Parameters:    Size  Location     Type
 18003 ;;  f2              3   14[BANK0 ] float 
 18004 ;;  f1              3   17[BANK0 ] float 
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;  f3              3   25[BANK0 ] float 
 18007 ;;  sign            1   29[BANK0 ] unsigned char 
 18008 ;;  exp             1   28[BANK0 ] unsigned char 
 18009 ;;  cntr            1   24[BANK0 ] unsigned char 
 18010 ;; Return value:  Size  Location     Type
 18011 ;;                  3   14[BANK0 ] float 
 18012 ;; Registers used:
 18013 ;;		wreg, status,2, status,0, pclath, cstack
 18014 ;; Tracked objects:
 18015 ;;		On entry : 0/0
 18016 ;;		On exit  : 0/0
 18017 ;;		Unchanged: 0/0
 18018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18019 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;Total ram usage:       16 bytes
 18024 ;; Hardware stack levels used:    1
 18025 ;; Hardware stack levels required when called:    5
 18026 ;; This function calls:
 18027 ;;		___ftpack
 18028 ;; This function is called by:
 18029 ;;		_getPercentValue
 18030 ;;		_setPercentValue
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           
 18035                           ;psect for function ___ftdiv
 18036  0A71                     ___ftdiv:	
 18037                           
 18038                           ;incstack = 0
 18039                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18040  0A71  0020               	movlb	0	; select bank0
 18041  0A72  0831               	movf	___ftdiv@f1,w
 18042  0A73  00B4               	movwf	??___ftdiv
 18043  0A74  0832               	movf	___ftdiv@f1+1,w
 18044  0A75  00B5               	movwf	??___ftdiv+1
 18045  0A76  0833               	movf	___ftdiv@f1+2,w
 18046  0A77  00B6               	movwf	??___ftdiv+2
 18047  0A78  1003               	clrc
 18048  0A79  0D35               	rlf	??___ftdiv+1,w
 18049  0A7A  0D36               	rlf	??___ftdiv+2,w
 18050  0A7B  00B7               	movwf	??___ftdiv+3
 18051  0A7C  0837               	movf	??___ftdiv+3,w
 18052  0A7D  00BC               	movwf	___ftdiv@exp
 18053  0A7E  08BC               	movf	___ftdiv@exp,f
 18054  0A7F  1D03               	skipz
 18055  0A80  2A88               	goto	l6004
 18056  0A81  3000               	movlw	0
 18057  0A82  00AE               	movwf	?___ftdiv
 18058  0A83  3000               	movlw	0
 18059  0A84  00AF               	movwf	?___ftdiv+1
 18060  0A85  3000               	movlw	0
 18061  0A86  00B0               	movwf	?___ftdiv+2
 18062  0A87  0008               	return
 18063  0A88                     l6004:	
 18064  0A88  082E               	movf	___ftdiv@f2,w
 18065  0A89  00B4               	movwf	??___ftdiv
 18066  0A8A  082F               	movf	___ftdiv@f2+1,w
 18067  0A8B  00B5               	movwf	??___ftdiv+1
 18068  0A8C  0830               	movf	___ftdiv@f2+2,w
 18069  0A8D  00B6               	movwf	??___ftdiv+2
 18070  0A8E  1003               	clrc
 18071  0A8F  0D35               	rlf	??___ftdiv+1,w
 18072  0A90  0D36               	rlf	??___ftdiv+2,w
 18073  0A91  00B7               	movwf	??___ftdiv+3
 18074  0A92  0837               	movf	??___ftdiv+3,w
 18075  0A93  00BD               	movwf	___ftdiv@sign
 18076  0A94  08BD               	movf	___ftdiv@sign,f
 18077  0A95  1D03               	skipz
 18078  0A96  2A9E               	goto	l6010
 18079  0A97  3000               	movlw	0
 18080  0A98  00AE               	movwf	?___ftdiv
 18081  0A99  3000               	movlw	0
 18082  0A9A  00AF               	movwf	?___ftdiv+1
 18083  0A9B  3000               	movlw	0
 18084  0A9C  00B0               	movwf	?___ftdiv+2
 18085  0A9D  0008               	return
 18086  0A9E                     l6010:	
 18087  0A9E  3000               	movlw	0
 18088  0A9F  00B9               	movwf	___ftdiv@f3
 18089  0AA0  3000               	movlw	0
 18090  0AA1  00BA               	movwf	___ftdiv@f3+1
 18091  0AA2  3000               	movlw	0
 18092  0AA3  00BB               	movwf	___ftdiv@f3+2
 18093  0AA4  3089               	movlw	137
 18094  0AA5  073D               	addwf	___ftdiv@sign,w
 18095  0AA6  00B4               	movwf	??___ftdiv
 18096  0AA7  0834               	movf	??___ftdiv,w
 18097  0AA8  02BC               	subwf	___ftdiv@exp,f
 18098  0AA9  0831               	movf	___ftdiv@f1,w
 18099  0AAA  00B4               	movwf	??___ftdiv
 18100  0AAB  0832               	movf	___ftdiv@f1+1,w
 18101  0AAC  00B5               	movwf	??___ftdiv+1
 18102  0AAD  0833               	movf	___ftdiv@f1+2,w
 18103  0AAE  00B6               	movwf	??___ftdiv+2
 18104  0AAF  3010               	movlw	16
 18105  0AB0                     u4125:	
 18106  0AB0  36B6               	lsrf	??___ftdiv+2,f
 18107  0AB1  0CB5               	rrf	??___ftdiv+1,f
 18108  0AB2  0CB4               	rrf	??___ftdiv,f
 18109  0AB3  0B89               	decfsz	9,f
 18110  0AB4  2AB0               	goto	u4125
 18111  0AB5  0834               	movf	??___ftdiv,w
 18112  0AB6  00B7               	movwf	??___ftdiv+3
 18113  0AB7  0837               	movf	??___ftdiv+3,w
 18114  0AB8  00BD               	movwf	___ftdiv@sign
 18115  0AB9  082E               	movf	___ftdiv@f2,w
 18116  0ABA  00B4               	movwf	??___ftdiv
 18117  0ABB  082F               	movf	___ftdiv@f2+1,w
 18118  0ABC  00B5               	movwf	??___ftdiv+1
 18119  0ABD  0830               	movf	___ftdiv@f2+2,w
 18120  0ABE  00B6               	movwf	??___ftdiv+2
 18121  0ABF  3010               	movlw	16
 18122  0AC0                     u4135:	
 18123  0AC0  36B6               	lsrf	??___ftdiv+2,f
 18124  0AC1  0CB5               	rrf	??___ftdiv+1,f
 18125  0AC2  0CB4               	rrf	??___ftdiv,f
 18126  0AC3  0B89               	decfsz	9,f
 18127  0AC4  2AC0               	goto	u4135
 18128  0AC5  0834               	movf	??___ftdiv,w
 18129  0AC6  00B7               	movwf	??___ftdiv+3
 18130  0AC7  0837               	movf	??___ftdiv+3,w
 18131  0AC8  06BD               	xorwf	___ftdiv@sign,f
 18132  0AC9  3080               	movlw	128
 18133  0ACA  00B4               	movwf	??___ftdiv
 18134  0ACB  0834               	movf	??___ftdiv,w
 18135  0ACC  05BD               	andwf	___ftdiv@sign,f
 18136  0ACD  17B2               	bsf	___ftdiv@f1+1,7
 18137  0ACE  30FF               	movlw	255
 18138  0ACF  05B1               	andwf	___ftdiv@f1,f
 18139  0AD0  30FF               	movlw	255
 18140  0AD1  05B2               	andwf	___ftdiv@f1+1,f
 18141  0AD2  3000               	movlw	0
 18142  0AD3  05B3               	andwf	___ftdiv@f1+2,f
 18143  0AD4  17AF               	bsf	___ftdiv@f2+1,7
 18144  0AD5  30FF               	movlw	255
 18145  0AD6  05AE               	andwf	___ftdiv@f2,f
 18146  0AD7  30FF               	movlw	255
 18147  0AD8  05AF               	andwf	___ftdiv@f2+1,f
 18148  0AD9  3000               	movlw	0
 18149  0ADA  05B0               	andwf	___ftdiv@f2+2,f
 18150  0ADB  3018               	movlw	24
 18151  0ADC  00B4               	movwf	??___ftdiv
 18152  0ADD  0834               	movf	??___ftdiv,w
 18153  0ADE  00B8               	movwf	___ftdiv@cntr
 18154  0ADF                     l6024:	
 18155  0ADF  3001               	movlw	1
 18156  0AE0                     u4145:	
 18157  0AE0  35B9               	lslf	___ftdiv@f3,f
 18158  0AE1  0DBA               	rlf	___ftdiv@f3+1,f
 18159  0AE2  0DBB               	rlf	___ftdiv@f3+2,f
 18160  0AE3  0B89               	decfsz	9,f
 18161  0AE4  2AE0               	goto	u4145
 18162  0AE5  0830               	movf	___ftdiv@f2+2,w
 18163  0AE6  0233               	subwf	___ftdiv@f1+2,w
 18164  0AE7  1D03               	skipz
 18165  0AE8  2AEF               	goto	u4155
 18166  0AE9  082F               	movf	___ftdiv@f2+1,w
 18167  0AEA  0232               	subwf	___ftdiv@f1+1,w
 18168  0AEB  1D03               	skipz
 18169  0AEC  2AEF               	goto	u4155
 18170  0AED  082E               	movf	___ftdiv@f2,w
 18171  0AEE  0231               	subwf	___ftdiv@f1,w
 18172  0AEF                     u4155:	
 18173  0AEF  1C03               	skipc
 18174  0AF0  2AF8               	goto	l6032
 18175  0AF1  082E               	movf	___ftdiv@f2,w
 18176  0AF2  02B1               	subwf	___ftdiv@f1,f
 18177  0AF3  082F               	movf	___ftdiv@f2+1,w
 18178  0AF4  3BB2               	subwfb	___ftdiv@f1+1,f
 18179  0AF5  0830               	movf	___ftdiv@f2+2,w
 18180  0AF6  3BB3               	subwfb	___ftdiv@f1+2,f
 18181  0AF7  1439               	bsf	___ftdiv@f3,0
 18182  0AF8                     l6032:	
 18183  0AF8  3001               	movlw	1
 18184  0AF9                     u4165:	
 18185  0AF9  35B1               	lslf	___ftdiv@f1,f
 18186  0AFA  0DB2               	rlf	___ftdiv@f1+1,f
 18187  0AFB  0DB3               	rlf	___ftdiv@f1+2,f
 18188  0AFC  0B89               	decfsz	9,f
 18189  0AFD  2AF9               	goto	u4165
 18190  0AFE  3001               	movlw	1
 18191  0AFF  02B8               	subwf	___ftdiv@cntr,f
 18192  0B00  1D03               	btfss	3,2
 18193  0B01  2ADF               	goto	l6024
 18194  0B02  0839               	movf	___ftdiv@f3,w
 18195  0B03  00A0               	movwf	___ftpack@arg
 18196  0B04  083A               	movf	___ftdiv@f3+1,w
 18197  0B05  00A1               	movwf	___ftpack@arg+1
 18198  0B06  083B               	movf	___ftdiv@f3+2,w
 18199  0B07  00A2               	movwf	___ftpack@arg+2
 18200  0B08  083C               	movf	___ftdiv@exp,w
 18201  0B09  00B4               	movwf	??___ftdiv
 18202  0B0A  0834               	movf	??___ftdiv,w
 18203  0B0B  00A3               	movwf	___ftpack@exp
 18204  0B0C  083D               	movf	___ftdiv@sign,w
 18205  0B0D  00B5               	movwf	??___ftdiv+1
 18206  0B0E  0835               	movf	??___ftdiv+1,w
 18207  0B0F  00A4               	movwf	___ftpack@sign
 18208  0B10  3191  21BC         	fcall	___ftpack
 18209  0B12  0020               	movlb	0	; select bank0
 18210  0B13  0820               	movf	?___ftpack,w
 18211  0B14  00AE               	movwf	?___ftdiv
 18212  0B15  0821               	movf	?___ftpack+1,w
 18213  0B16  00AF               	movwf	?___ftdiv+1
 18214  0B17  0822               	movf	?___ftpack+2,w
 18215  0B18  00B0               	movwf	?___ftdiv+2
 18216  0B19  0008               	return
 18217  0B1A                     __end_of___ftdiv:	
 18218                           
 18219                           	psect	text112
 18220  18F6                     __ptext112:	
 18221 ;; *************** function ___awtoft *****************
 18222 ;; Defined at:
 18223 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18224 ;; Parameters:    Size  Location     Type
 18225 ;;  c               2    8[BANK0 ] int 
 18226 ;; Auto vars:     Size  Location     Type
 18227 ;;  sign            1   13[BANK0 ] unsigned char 
 18228 ;; Return value:  Size  Location     Type
 18229 ;;                  3    8[BANK0 ] float 
 18230 ;; Registers used:
 18231 ;;		wreg, status,2, status,0, pclath, cstack
 18232 ;; Tracked objects:
 18233 ;;		On entry : 0/0
 18234 ;;		On exit  : 0/0
 18235 ;;		Unchanged: 0/0
 18236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18237 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;Total ram usage:        6 bytes
 18242 ;; Hardware stack levels used:    1
 18243 ;; Hardware stack levels required when called:    5
 18244 ;; This function calls:
 18245 ;;		___ftpack
 18246 ;; This function is called by:
 18247 ;;		_getPercentValue
 18248 ;;		_setPercentValue
 18249 ;; This function uses a non-reentrant model
 18250 ;;
 18251                           
 18252                           
 18253                           ;psect for function ___awtoft
 18254  18F6                     ___awtoft:	
 18255                           
 18256                           ;incstack = 0
 18257                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18258  18F6  0020               	movlb	0	; select bank0
 18259  18F7  01AD               	clrf	___awtoft@sign
 18260  18F8  1FA9               	btfss	___awtoft@c+1,7
 18261  18F9  2901               	goto	l5922
 18262  18FA  09A8               	comf	___awtoft@c,f
 18263  18FB  09A9               	comf	___awtoft@c+1,f
 18264  18FC  0AA8               	incf	___awtoft@c,f
 18265  18FD  1903               	skipnz
 18266  18FE  0AA9               	incf	___awtoft@c+1,f
 18267  18FF  01AD               	clrf	___awtoft@sign
 18268  1900  0AAD               	incf	___awtoft@sign,f
 18269  1901                     l5922:	
 18270  1901  0828               	movf	___awtoft@c,w
 18271  1902  00A0               	movwf	___ftpack@arg
 18272  1903  0829               	movf	___awtoft@c+1,w
 18273  1904  00A1               	movwf	___ftpack@arg+1
 18274  1905  01A2               	clrf	___ftpack@arg+2
 18275  1906  308E               	movlw	142
 18276  1907  00AB               	movwf	??___awtoft
 18277  1908  082B               	movf	??___awtoft,w
 18278  1909  00A3               	movwf	___ftpack@exp
 18279  190A  082D               	movf	___awtoft@sign,w
 18280  190B  00AC               	movwf	??___awtoft+1
 18281  190C  082C               	movf	??___awtoft+1,w
 18282  190D  00A4               	movwf	___ftpack@sign
 18283  190E  3191  21BC         	fcall	___ftpack
 18284  1910  0020               	movlb	0	; select bank0
 18285  1911  0820               	movf	?___ftpack,w
 18286  1912  00A8               	movwf	?___awtoft
 18287  1913  0821               	movf	?___ftpack+1,w
 18288  1914  00A9               	movwf	?___awtoft+1
 18289  1915  0822               	movf	?___ftpack+2,w
 18290  1916  00AA               	movwf	?___awtoft+2
 18291  1917  0008               	return
 18292  1918                     __end_of___awtoft:	
 18293                           
 18294                           	psect	text113
 18295  11BC                     __ptext113:	
 18296 ;; *************** function ___ftpack *****************
 18297 ;; Defined at:
 18298 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18299 ;; Parameters:    Size  Location     Type
 18300 ;;  arg             3    0[BANK0 ] unsigned um
 18301 ;;  exp             1    3[BANK0 ] unsigned char 
 18302 ;;  sign            1    4[BANK0 ] unsigned char 
 18303 ;; Auto vars:     Size  Location     Type
 18304 ;;		None
 18305 ;; Return value:  Size  Location     Type
 18306 ;;                  3    0[BANK0 ] float 
 18307 ;; Registers used:
 18308 ;;		wreg, status,2, status,0
 18309 ;; Tracked objects:
 18310 ;;		On entry : 0/0
 18311 ;;		On exit  : 0/0
 18312 ;;		Unchanged: 0/0
 18313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18314 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18316 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;Total ram usage:        8 bytes
 18319 ;; Hardware stack levels used:    1
 18320 ;; Hardware stack levels required when called:    4
 18321 ;; This function calls:
 18322 ;;		Nothing
 18323 ;; This function is called by:
 18324 ;;		___awtoft
 18325 ;;		___ftadd
 18326 ;;		___ftdiv
 18327 ;;		___ftmul
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           
 18332                           ;psect for function ___ftpack
 18333  11BC                     ___ftpack:	
 18334                           
 18335                           ;incstack = 0
 18336                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18337  11BC  0020               	movlb	0	; select bank0
 18338  11BD  0823               	movf	___ftpack@exp,w
 18339  11BE  1903               	btfsc	3,2
 18340  11BF  29C5               	goto	l5888
 18341  11C0  0822               	movf	___ftpack@arg+2,w
 18342  11C1  0421               	iorwf	___ftpack@arg+1,w
 18343  11C2  0420               	iorwf	___ftpack@arg,w
 18344  11C3  1D03               	skipz
 18345  11C4  29D6               	goto	l5894
 18346  11C5                     l5888:	
 18347  11C5  3000               	movlw	0
 18348  11C6  00A0               	movwf	?___ftpack
 18349  11C7  3000               	movlw	0
 18350  11C8  00A1               	movwf	?___ftpack+1
 18351  11C9  3000               	movlw	0
 18352  11CA  00A2               	movwf	?___ftpack+2
 18353  11CB  0008               	return
 18354  11CC                     l5892:	
 18355  11CC  3001               	movlw	1
 18356  11CD  00A5               	movwf	??___ftpack
 18357  11CE  0825               	movf	??___ftpack,w
 18358  11CF  07A3               	addwf	___ftpack@exp,f
 18359  11D0  3001               	movlw	1
 18360  11D1                     u3775:	
 18361  11D1  36A2               	lsrf	___ftpack@arg+2,f
 18362  11D2  0CA1               	rrf	___ftpack@arg+1,f
 18363  11D3  0CA0               	rrf	___ftpack@arg,f
 18364  11D4  0B89               	decfsz	9,f
 18365  11D5  29D1               	goto	u3775
 18366  11D6                     l5894:	
 18367  11D6  30FE               	movlw	254
 18368  11D7  0522               	andwf	___ftpack@arg+2,w
 18369  11D8  1903               	btfsc	3,2
 18370  11D9  29EF               	goto	l3272
 18371  11DA  29CC               	goto	l5892
 18372  11DB                     l5896:	
 18373  11DB  3001               	movlw	1
 18374  11DC  00A5               	movwf	??___ftpack
 18375  11DD  0825               	movf	??___ftpack,w
 18376  11DE  07A3               	addwf	___ftpack@exp,f
 18377  11DF  3001               	movlw	1
 18378  11E0  07A0               	addwf	___ftpack@arg,f
 18379  11E1  3000               	movlw	0
 18380  11E2  1803               	skipnc
 18381  11E3  3001               	movlw	1
 18382  11E4  07A1               	addwf	___ftpack@arg+1,f
 18383  11E5  3000               	movlw	0
 18384  11E6  1803               	skipnc
 18385  11E7  3001               	movlw	1
 18386  11E8  07A2               	addwf	___ftpack@arg+2,f
 18387  11E9  3001               	movlw	1
 18388  11EA                     u3795:	
 18389  11EA  36A2               	lsrf	___ftpack@arg+2,f
 18390  11EB  0CA1               	rrf	___ftpack@arg+1,f
 18391  11EC  0CA0               	rrf	___ftpack@arg,f
 18392  11ED  0B89               	decfsz	9,f
 18393  11EE  29EA               	goto	u3795
 18394  11EF                     l3272:	
 18395  11EF  30FF               	movlw	255
 18396  11F0  0522               	andwf	___ftpack@arg+2,w
 18397  11F1  1903               	btfsc	3,2
 18398  11F2  29FC               	goto	l5904
 18399  11F3  29DB               	goto	l5896
 18400  11F4                     l5902:	
 18401  11F4  3001               	movlw	1
 18402  11F5  02A3               	subwf	___ftpack@exp,f
 18403  11F6  3001               	movlw	1
 18404  11F7                     u3815:	
 18405  11F7  35A0               	lslf	___ftpack@arg,f
 18406  11F8  0DA1               	rlf	___ftpack@arg+1,f
 18407  11F9  0DA2               	rlf	___ftpack@arg+2,f
 18408  11FA  0B89               	decfsz	9,f
 18409  11FB  29F7               	goto	u3815
 18410  11FC                     l5904:	
 18411  11FC  1FA1               	btfss	___ftpack@arg+1,7
 18412  11FD  29F4               	goto	l5902
 18413  11FE  1823               	btfsc	___ftpack@exp,0
 18414  11FF  2A06               	goto	l3278
 18415  1200  30FF               	movlw	255
 18416  1201  05A0               	andwf	___ftpack@arg,f
 18417  1202  307F               	movlw	127
 18418  1203  05A1               	andwf	___ftpack@arg+1,f
 18419  1204  30FF               	movlw	255
 18420  1205  05A2               	andwf	___ftpack@arg+2,f
 18421  1206                     l3278:	
 18422  1206  1003               	clrc
 18423  1207  0CA3               	rrf	___ftpack@exp,f
 18424  1208  0823               	movf	___ftpack@exp,w
 18425  1209  00A5               	movwf	??___ftpack
 18426  120A  01A6               	clrf	??___ftpack+1
 18427  120B  01A7               	clrf	??___ftpack+2
 18428  120C  3010               	movlw	16
 18429  120D                     u3845:	
 18430  120D  35A5               	lslf	??___ftpack,f
 18431  120E  0DA6               	rlf	??___ftpack+1,f
 18432  120F  0DA7               	rlf	??___ftpack+2,f
 18433  1210  0B89               	decfsz	9,f
 18434  1211  2A0D               	goto	u3845
 18435  1212  0825               	movf	??___ftpack,w
 18436  1213  04A0               	iorwf	___ftpack@arg,f
 18437  1214  0826               	movf	??___ftpack+1,w
 18438  1215  04A1               	iorwf	___ftpack@arg+1,f
 18439  1216  0827               	movf	??___ftpack+2,w
 18440  1217  04A2               	iorwf	___ftpack@arg+2,f
 18441  1218  0824               	movf	___ftpack@sign,w
 18442  1219  1903               	btfsc	3,2
 18443  121A  0008               	return
 18444  121B  17A2               	bsf	___ftpack@arg+2,7
 18445  121C  0008               	return
 18446  121D                     __end_of___ftpack:	
 18447                           
 18448                           	psect	text114
 18449  261C                     __ptext114:	
 18450 ;; *************** function _setRFSW_Status *****************
 18451 ;; Defined at:
 18452 ;;		line 425 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18453 ;; Parameters:    Size  Location     Type
 18454 ;;  sw              1    wreg     unsigned char 
 18455 ;;  command         1    2[BANK0 ] unsigned char 
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;  sw              1    3[BANK0 ] unsigned char 
 18458 ;; Return value:  Size  Location     Type
 18459 ;;		None               void
 18460 ;; Registers used:
 18461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18467 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;Total ram usage:        2 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; Hardware stack levels required when called:    5
 18474 ;; This function calls:
 18475 ;;		_RfSWPointSelect
 18476 ;; This function is called by:
 18477 ;;		_DlyOff_Main
 18478 ;;		_setDimmerLights_ERROR
 18479 ;;		_setControl_Lights_Table
 18480 ;;		_Sw_DimmerOnFunc
 18481 ;;		_Sw_DimmerAdjFunc
 18482 ;; This function uses a non-reentrant model
 18483 ;;
 18484                           
 18485                           
 18486                           ;psect for function _setRFSW_Status
 18487  261C                     _setRFSW_Status:	
 18488                           
 18489                           ;incstack = 0
 18490                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18491                           ;setRFSW_Status@sw stored from wreg
 18492  261C  0020               	movlb	0	; select bank0
 18493  261D  00A3               	movwf	setRFSW_Status@sw
 18494                           
 18495                           ;RF_Control_B1.c: 427: RfSWPointSelect(sw);
 18496  261E  0823               	movf	setRFSW_Status@sw,w
 18497  261F  31A5  258F         	fcall	_RfSWPointSelect
 18498                           
 18499                           ;RF_Control_B1.c: 428: RFSW->Status=command;
 18500  2621  0021               	movlb	1	; select bank1
 18501  2622  083C               	movf	_RFSW^(0+128),w
 18502  2623  0086               	movwf	6
 18503  2624  0187               	clrf	7
 18504  2625  0020               	movlb	0	; select bank0
 18505  2626  0822               	movf	setRFSW_Status@command,w
 18506  2627  1001               	bcf	1,0
 18507  2628  1D03               	skipz
 18508  2629  1401               	bsf	1,0
 18509  262A  0008               	return
 18510  262B                     __end_of_setRFSW_Status:	
 18511                           
 18512                           	psect	text115
 18513  258F                     __ptext115:	
 18514 ;; *************** function _RfSWPointSelect *****************
 18515 ;; Defined at:
 18516 ;;		line 347 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18517 ;; Parameters:    Size  Location     Type
 18518 ;;  sw              1    wreg     unsigned char 
 18519 ;; Auto vars:     Size  Location     Type
 18520 ;;  sw              1    1[BANK0 ] unsigned char 
 18521 ;; Return value:  Size  Location     Type
 18522 ;;		None               void
 18523 ;; Registers used:
 18524 ;;		wreg
 18525 ;; Tracked objects:
 18526 ;;		On entry : 0/0
 18527 ;;		On exit  : 0/0
 18528 ;;		Unchanged: 0/0
 18529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18534 ;;Total ram usage:        2 bytes
 18535 ;; Hardware stack levels used:    1
 18536 ;; Hardware stack levels required when called:    4
 18537 ;; This function calls:
 18538 ;;		Nothing
 18539 ;; This function is called by:
 18540 ;;		_setRFSW_Control
 18541 ;;		_setRFSW_AdjControl
 18542 ;;		_setRFSW_Status
 18543 ;; This function uses a non-reentrant model
 18544 ;;
 18545                           
 18546                           
 18547                           ;psect for function _RfSWPointSelect
 18548  258F                     _RfSWPointSelect:	
 18549                           
 18550                           ;incstack = 0
 18551                           ; Regs used in _RfSWPointSelect: [wreg]
 18552                           ;RfSWPointSelect@sw stored from wreg
 18553  258F  0020               	movlb	0	; select bank0
 18554  2590  00A1               	movwf	RfSWPointSelect@sw
 18555                           
 18556                           ;RF_Control_B1.c: 350: if(sw == 1)
 18557  2591  0821               	movf	RfSWPointSelect@sw,w
 18558  2592  3A01               	xorlw	1
 18559  2593  1D03               	skipz
 18560  2594  0008               	return
 18561                           
 18562                           ;RF_Control_B1.c: 351: {
 18563                           ;RF_Control_B1.c: 352: RFSW=&RFSW1;
 18564  2595  30E6               	movlw	_RFSW1& (0+255)
 18565  2596  00A0               	movwf	??_RfSWPointSelect
 18566  2597  0820               	movf	??_RfSWPointSelect,w
 18567  2598  0021               	movlb	1	; select bank1
 18568  2599  00BC               	movwf	_RFSW^(0+128)
 18569  259A  0008               	return
 18570  259B                     __end_of_RfSWPointSelect:	
 18571                           
 18572                           	psect	text116
 18573  2669                     __ptext116:	
 18574 ;; *************** function _setDimmerLights_Trigger *****************
 18575 ;; Defined at:
 18576 ;;		line 445 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18577 ;; Parameters:    Size  Location     Type
 18578 ;;  lights          1    wreg     unsigned char 
 18579 ;;  command         1    2[BANK0 ] unsigned char 
 18580 ;; Auto vars:     Size  Location     Type
 18581 ;;  lights          1    3[BANK0 ] unsigned char 
 18582 ;; Return value:  Size  Location     Type
 18583 ;;		None               void
 18584 ;; Registers used:
 18585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18586 ;; Tracked objects:
 18587 ;;		On entry : 0/0
 18588 ;;		On exit  : 0/0
 18589 ;;		Unchanged: 0/0
 18590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18595 ;;Total ram usage:        2 bytes
 18596 ;; Hardware stack levels used:    1
 18597 ;; Hardware stack levels required when called:    5
 18598 ;; This function calls:
 18599 ;;		_DimmerLightsPointSelect
 18600 ;; This function is called by:
 18601 ;;		_DlyOff_Main
 18602 ;;		_setRFSW_Control
 18603 ;;		_Sw_DimmerOnFunc
 18604 ;;		_Sw_DimmerOffFunc
 18605 ;; This function uses a non-reentrant model
 18606 ;;
 18607                           
 18608                           
 18609                           ;psect for function _setDimmerLights_Trigger
 18610  2669                     _setDimmerLights_Trigger:	
 18611                           
 18612                           ;incstack = 0
 18613                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18614                           ;setDimmerLights_Trigger@lights stored from wreg
 18615  2669  0020               	movlb	0	; select bank0
 18616  266A  00A3               	movwf	setDimmerLights_Trigger@lights
 18617                           
 18618                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18619  266B  0823               	movf	setDimmerLights_Trigger@lights,w
 18620  266C  31A5  2512         	fcall	_DimmerLightsPointSelect
 18621                           
 18622                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18623  266E  0020               	movlb	0	; select bank0
 18624  266F  086C               	movf	_DimmerLights,w
 18625  2670  3E09               	addlw	9
 18626  2671  0086               	movwf	6
 18627  2672  3001               	movlw	1	; select bank2/3
 18628  2673  0087               	movwf	7
 18629  2674  0822               	movf	setDimmerLights_Trigger@command,w
 18630  2675  1081               	bcf	1,1
 18631  2676  1D03               	skipz
 18632  2677  1481               	bsf	1,1
 18633  2678  0008               	return
 18634  2679                     __end_of_setDimmerLights_Trigger:	
 18635                           
 18636                           	psect	text117
 18637  2659                     __ptext117:	
 18638 ;; *************** function _setDimmerLights_Switch *****************
 18639 ;; Defined at:
 18640 ;;		line 435 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;  lights          1    wreg     unsigned char 
 18643 ;;  command         1    2[BANK0 ] unsigned char 
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  lights          1    3[BANK0 ] unsigned char 
 18646 ;; Return value:  Size  Location     Type
 18647 ;;		None               void
 18648 ;; Registers used:
 18649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18655 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18659 ;;Total ram usage:        2 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    5
 18662 ;; This function calls:
 18663 ;;		_DimmerLightsPointSelect
 18664 ;; This function is called by:
 18665 ;;		_DlyOff_Main
 18666 ;;		_setRFSW_Control
 18667 ;;		_Sw_DimmerOnFunc
 18668 ;;		_Sw_DimmerOffFunc
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           
 18673                           ;psect for function _setDimmerLights_Switch
 18674  2659                     _setDimmerLights_Switch:	
 18675                           
 18676                           ;incstack = 0
 18677                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18678                           ;setDimmerLights_Switch@lights stored from wreg
 18679  2659  0020               	movlb	0	; select bank0
 18680  265A  00A3               	movwf	setDimmerLights_Switch@lights
 18681                           
 18682                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18683  265B  0823               	movf	setDimmerLights_Switch@lights,w
 18684  265C  31A5  2512         	fcall	_DimmerLightsPointSelect
 18685                           
 18686                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18687  265E  0020               	movlb	0	; select bank0
 18688  265F  086C               	movf	_DimmerLights,w
 18689  2660  3E09               	addlw	9
 18690  2661  0086               	movwf	6
 18691  2662  3001               	movlw	1	; select bank2/3
 18692  2663  0087               	movwf	7
 18693  2664  0822               	movf	setDimmerLights_Switch@command,w
 18694  2665  1001               	bcf	1,0
 18695  2666  1D03               	skipz
 18696  2667  1401               	bsf	1,0
 18697  2668  0008               	return
 18698  2669                     __end_of_setDimmerLights_Switch:	
 18699                           
 18700                           	psect	text118
 18701  2512                     __ptext118:	
 18702 ;; *************** function _DimmerLightsPointSelect *****************
 18703 ;; Defined at:
 18704 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18705 ;; Parameters:    Size  Location     Type
 18706 ;;  lights          1    wreg     unsigned char 
 18707 ;; Auto vars:     Size  Location     Type
 18708 ;;  lights          1    1[BANK0 ] unsigned char 
 18709 ;; Return value:  Size  Location     Type
 18710 ;;		None               void
 18711 ;; Registers used:
 18712 ;;		wreg
 18713 ;; Tracked objects:
 18714 ;;		On entry : 0/0
 18715 ;;		On exit  : 0/0
 18716 ;;		Unchanged: 0/0
 18717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18722 ;;Total ram usage:        2 bytes
 18723 ;; Hardware stack levels used:    1
 18724 ;; Hardware stack levels required when called:    4
 18725 ;; This function calls:
 18726 ;;		Nothing
 18727 ;; This function is called by:
 18728 ;;		_setDimmerLights_Initialization
 18729 ;;		_setDimmerLights_Main
 18730 ;;		_setDimmerLights_ERROR
 18731 ;;		_setDimmerLights_TriggerERROR
 18732 ;;		_setDimmerLights
 18733 ;;		_setDimmerLights_Adj
 18734 ;;		_setDimmerLights_AdjRF
 18735 ;;		_setDimmerLights_Switch
 18736 ;;		_setDimmerLights_AdjGo
 18737 ;;		_setDimmerLights_Trigger
 18738 ;;		_setDimmerLights_TriggerAdj
 18739 ;;		_setDimmerLights_Clear
 18740 ;;		_setDimmerLights_GO
 18741 ;;		_setDimmerLights_MaxmumValue
 18742 ;; This function uses a non-reentrant model
 18743 ;;
 18744                           
 18745                           
 18746                           ;psect for function _DimmerLightsPointSelect
 18747  2512                     _DimmerLightsPointSelect:	
 18748                           
 18749                           ;incstack = 0
 18750                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18751                           ;DimmerLightsPointSelect@lights stored from wreg
 18752  2512  0020               	movlb	0	; select bank0
 18753  2513  00A1               	movwf	DimmerLightsPointSelect@lights
 18754                           
 18755                           ;Dimmer_B1.c: 10: if(lights == 1)
 18756  2514  0821               	movf	DimmerLightsPointSelect@lights,w
 18757  2515  3A01               	xorlw	1
 18758  2516  1D03               	skipz
 18759  2517  0008               	return
 18760                           
 18761                           ;Dimmer_B1.c: 11: {
 18762                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18763  2518  3031               	movlw	_DimmerLights1& (0+255)
 18764  2519  00A0               	movwf	??_DimmerLightsPointSelect
 18765  251A  0820               	movf	??_DimmerLightsPointSelect,w
 18766  251B  00EC               	movwf	_DimmerLights
 18767  251C  0008               	return
 18768  251D                     __end_of_DimmerLightsPointSelect:	
 18769                           
 18770                           	psect	text119
 18771  1587                     __ptext119:	
 18772 ;; *************** function _setBuz *****************
 18773 ;; Defined at:
 18774 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18775 ;; Parameters:    Size  Location     Type
 18776 ;;  count           1    wreg     unsigned char 
 18777 ;;  time            2    6[BANK0 ] int 
 18778 ;; Auto vars:     Size  Location     Type
 18779 ;;  count           1    9[BANK0 ] unsigned char 
 18780 ;; Return value:  Size  Location     Type
 18781 ;;		None               void
 18782 ;; Registers used:
 18783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18784 ;; Tracked objects:
 18785 ;;		On entry : 0/0
 18786 ;;		On exit  : 0/0
 18787 ;;		Unchanged: 0/0
 18788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18789 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18793 ;;Total ram usage:        4 bytes
 18794 ;; Hardware stack levels used:    1
 18795 ;; Hardware stack levels required when called:    5
 18796 ;; This function calls:
 18797 ;;		___wmul
 18798 ;; This function is called by:
 18799 ;;		_DlyOff_Main
 18800 ;;		_setDimmerLights_Main
 18801 ;;		_DimmerLights_Exceptions
 18802 ;;		_MainT
 18803 ;;		_setOverTemp_Exceptions
 18804 ;;		_setLog_Code
 18805 ;;		_setControl_Lights_Table
 18806 ;;		_setRFSW_Control
 18807 ;;		_setSw_Main
 18808 ;;		_Sw_DimmerOnFunc
 18809 ;; This function uses a non-reentrant model
 18810 ;;
 18811                           
 18812                           
 18813                           ;psect for function _setBuz
 18814  1587                     _setBuz:	
 18815                           
 18816                           ;incstack = 0
 18817                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18818                           ;setBuz@count stored from wreg
 18819  1587  0020               	movlb	0	; select bank0
 18820  1588  00A9               	movwf	setBuz@count
 18821                           
 18822                           ;Buzzer_B1.c: 24: time*=20;
 18823  1589  3014               	movlw	20
 18824  158A  00A0               	movwf	___wmul@multiplier
 18825  158B  3000               	movlw	0
 18826  158C  00A1               	movwf	___wmul@multiplier+1
 18827  158D  0827               	movf	setBuz@time+1,w
 18828  158E  01A3               	clrf	___wmul@multiplicand+1
 18829  158F  07A3               	addwf	___wmul@multiplicand+1,f
 18830  1590  0826               	movf	setBuz@time,w
 18831  1591  01A2               	clrf	___wmul@multiplicand
 18832  1592  07A2               	addwf	___wmul@multiplicand,f
 18833  1593  3198  2099  3195   	fcall	___wmul
 18834  1596  0020               	movlb	0	; select bank0
 18835  1597  0821               	movf	?___wmul+1,w
 18836  1598  01A7               	clrf	setBuz@time+1
 18837  1599  07A7               	addwf	setBuz@time+1,f
 18838  159A  0820               	movf	?___wmul,w
 18839  159B  01A6               	clrf	setBuz@time
 18840  159C  07A6               	addwf	setBuz@time,f
 18841                           
 18842                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18843  159D  0878               	movf	_Buz,w
 18844  159E  0086               	movwf	6
 18845  159F  3001               	movlw	1	; select bank2/3
 18846  15A0  0087               	movwf	7
 18847  15A1  1C01               	btfss	1,0
 18848  15A2  0008               	return
 18849                           
 18850                           ;Buzzer_B1.c: 26: {
 18851                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18852  15A3  0878               	movf	_Buz,w
 18853  15A4  0086               	movwf	6
 18854  15A5  3001               	movlw	1	; select bank2/3
 18855  15A6  0087               	movwf	7
 18856  15A7  1881               	btfsc	1,1
 18857  15A8  2DC2               	goto	l8292
 18858                           
 18859                           ;Buzzer_B1.c: 28: {
 18860                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18861  15A9  0878               	movf	_Buz,w
 18862  15AA  0086               	movwf	6
 18863  15AB  3001               	movlw	1	; select bank2/3
 18864  15AC  0087               	movwf	7
 18865  15AD  1481               	bsf	1,1
 18866                           
 18867                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18868  15AE  0829               	movf	setBuz@count,w
 18869  15AF  00A8               	movwf	??_setBuz
 18870  15B0  0878               	movf	_Buz,w
 18871  15B1  3E03               	addlw	3
 18872  15B2  0086               	movwf	6
 18873  15B3  3001               	movlw	1	; select bank2/3
 18874  15B4  0087               	movwf	7
 18875  15B5  0828               	movf	??_setBuz,w
 18876  15B6  0081               	movwf	1
 18877                           
 18878                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18879  15B7  0878               	movf	_Buz,w
 18880  15B8  3E06               	addlw	6
 18881  15B9  0086               	movwf	6
 18882  15BA  3001               	movlw	1	; select bank2/3
 18883  15BB  0087               	movwf	7
 18884  15BC  0826               	movf	setBuz@time,w
 18885  15BD  3FC0               	movwi [0]fsr1
 18886  15BE  0827               	movf	setBuz@time+1,w
 18887  15BF  3FC1               	movwi [1]fsr1
 18888                           
 18889                           ;Buzzer_B1.c: 33: RB3=1;
 18890  15C0  158D               	bsf	13,3	;volatile
 18891                           
 18892                           ;Buzzer_B1.c: 34: }
 18893  15C1  0008               	return
 18894  15C2                     l8292:	
 18895                           
 18896                           ;Buzzer_B1.c: 35: else
 18897                           ;Buzzer_B1.c: 36: {
 18898                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18899  15C2  0878               	movf	_Buz,w
 18900  15C3  0086               	movwf	6
 18901  15C4  3001               	movlw	1	; select bank2/3
 18902  15C5  0087               	movwf	7
 18903  15C6  1981               	btfsc	1,3
 18904  15C7  2DE0               	goto	l8296
 18905                           
 18906                           ;Buzzer_B1.c: 38: {
 18907                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18908  15C8  0878               	movf	_Buz,w
 18909  15C9  0086               	movwf	6
 18910  15CA  3001               	movlw	1	; select bank2/3
 18911  15CB  0087               	movwf	7
 18912  15CC  1581               	bsf	1,3
 18913                           
 18914                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18915  15CD  0829               	movf	setBuz@count,w
 18916  15CE  00A8               	movwf	??_setBuz
 18917  15CF  0878               	movf	_Buz,w
 18918  15D0  3E04               	addlw	4
 18919  15D1  0086               	movwf	6
 18920  15D2  3001               	movlw	1	; select bank2/3
 18921  15D3  0087               	movwf	7
 18922  15D4  0828               	movf	??_setBuz,w
 18923  15D5  0081               	movwf	1
 18924                           
 18925                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18926  15D6  0878               	movf	_Buz,w
 18927  15D7  3E08               	addlw	8
 18928  15D8  0086               	movwf	6
 18929  15D9  3001               	movlw	1	; select bank2/3
 18930  15DA  0087               	movwf	7
 18931  15DB  0826               	movf	setBuz@time,w
 18932  15DC  3FC0               	movwi [0]fsr1
 18933  15DD  0827               	movf	setBuz@time+1,w
 18934  15DE  3FC1               	movwi [1]fsr1
 18935                           
 18936                           ;Buzzer_B1.c: 42: }
 18937  15DF  0008               	return
 18938  15E0                     l8296:	
 18939                           
 18940                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18941  15E0  0878               	movf	_Buz,w
 18942  15E1  0086               	movwf	6
 18943  15E2  3001               	movlw	1	; select bank2/3
 18944  15E3  0087               	movwf	7
 18945  15E4  1A01               	btfsc	1,4
 18946  15E5  0008               	return
 18947                           
 18948                           ;Buzzer_B1.c: 44: {
 18949                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18950  15E6  0878               	movf	_Buz,w
 18951  15E7  0086               	movwf	6
 18952  15E8  3001               	movlw	1	; select bank2/3
 18953  15E9  0087               	movwf	7
 18954  15EA  1601               	bsf	1,4
 18955                           
 18956                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18957  15EB  0829               	movf	setBuz@count,w
 18958  15EC  00A8               	movwf	??_setBuz
 18959  15ED  0878               	movf	_Buz,w
 18960  15EE  3E05               	addlw	5
 18961  15EF  0086               	movwf	6
 18962  15F0  3001               	movlw	1	; select bank2/3
 18963  15F1  0087               	movwf	7
 18964  15F2  0828               	movf	??_setBuz,w
 18965  15F3  0081               	movwf	1
 18966                           
 18967                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18968  15F4  0878               	movf	_Buz,w
 18969  15F5  3E0A               	addlw	10
 18970  15F6  0086               	movwf	6
 18971  15F7  3001               	movlw	1	; select bank2/3
 18972  15F8  0087               	movwf	7
 18973  15F9  0826               	movf	setBuz@time,w
 18974  15FA  3FC0               	movwi [0]fsr1
 18975  15FB  0827               	movf	setBuz@time+1,w
 18976  15FC  3FC1               	movwi [1]fsr1
 18977  15FD  0008               	return
 18978  15FE                     __end_of_setBuz:	
 18979                           
 18980                           	psect	text120
 18981  1899                     __ptext120:	
 18982 ;; *************** function ___wmul *****************
 18983 ;; Defined at:
 18984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18987 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18988 ;; Auto vars:     Size  Location     Type
 18989 ;;  product         2    4[BANK0 ] unsigned int 
 18990 ;; Return value:  Size  Location     Type
 18991 ;;                  2    0[BANK0 ] unsigned int 
 18992 ;; Registers used:
 18993 ;;		wreg, status,2, status,0
 18994 ;; Tracked objects:
 18995 ;;		On entry : 0/0
 18996 ;;		On exit  : 0/0
 18997 ;;		Unchanged: 0/0
 18998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18999 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19002 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19003 ;;Total ram usage:        6 bytes
 19004 ;; Hardware stack levels used:    1
 19005 ;; Hardware stack levels required when called:    4
 19006 ;; This function calls:
 19007 ;;		Nothing
 19008 ;; This function is called by:
 19009 ;;		_setBuz
 19010 ;;		_Load_Main
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           
 19015                           ;psect for function ___wmul
 19016  1899                     ___wmul:	
 19017                           
 19018                           ;incstack = 0
 19019                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 19020  1899  0020               	movlb	0	; select bank0
 19021  189A  01A4               	clrf	___wmul@product
 19022  189B  01A5               	clrf	___wmul@product+1
 19023  189C                     l8272:	
 19024  189C  1C20               	btfss	___wmul@multiplier,0
 19025  189D  28A2               	goto	l3111
 19026  189E  0822               	movf	___wmul@multiplicand,w
 19027  189F  07A4               	addwf	___wmul@product,f
 19028  18A0  0823               	movf	___wmul@multiplicand+1,w
 19029  18A1  3DA5               	addwfc	___wmul@product+1,f
 19030  18A2                     l3111:	
 19031  18A2  3001               	movlw	1
 19032  18A3                     u7505:	
 19033  18A3  35A2               	lslf	___wmul@multiplicand,f
 19034  18A4  0DA3               	rlf	___wmul@multiplicand+1,f
 19035  18A5  0B89               	decfsz	9,f
 19036  18A6  28A3               	goto	u7505
 19037  18A7  3001               	movlw	1
 19038  18A8                     u7515:	
 19039  18A8  36A1               	lsrf	___wmul@multiplier+1,f
 19040  18A9  0CA0               	rrf	___wmul@multiplier,f
 19041  18AA  0B89               	decfsz	9,f
 19042  18AB  28A8               	goto	u7515
 19043  18AC  0821               	movf	___wmul@multiplier+1,w
 19044  18AD  0420               	iorwf	___wmul@multiplier,w
 19045  18AE  1D03               	skipz
 19046  18AF  289C               	goto	l8272
 19047  18B0  0825               	movf	___wmul@product+1,w
 19048  18B1  01A1               	clrf	?___wmul+1
 19049  18B2  07A1               	addwf	?___wmul+1,f
 19050  18B3  0824               	movf	___wmul@product,w
 19051  18B4  01A0               	clrf	?___wmul
 19052  18B5  07A0               	addwf	?___wmul,f
 19053  18B6  0008               	return
 19054  18B7                     __end_of___wmul:	
 19055                           
 19056                           	psect	text121
 19057  2481                     __ptext121:	
 19058 ;; *************** function _DelayOff_Initialization *****************
 19059 ;; Defined at:
 19060 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19061 ;; Parameters:    Size  Location     Type
 19062 ;;		None
 19063 ;; Auto vars:     Size  Location     Type
 19064 ;;		None
 19065 ;; Return value:  Size  Location     Type
 19066 ;;		None               void
 19067 ;; Registers used:
 19068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19069 ;; Tracked objects:
 19070 ;;		On entry : 0/0
 19071 ;;		On exit  : 0/0
 19072 ;;		Unchanged: 0/0
 19073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19078 ;;Total ram usage:        0 bytes
 19079 ;; Hardware stack levels used:    1
 19080 ;; Hardware stack levels required when called:    6
 19081 ;; This function calls:
 19082 ;;		_DlyOff_Initialization
 19083 ;; This function is called by:
 19084 ;;		_main
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           
 19089                           ;psect for function _DelayOff_Initialization
 19090  2481                     _DelayOff_Initialization:	
 19091                           
 19092                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 19093                           
 19094                           ;incstack = 0
 19095                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 19096  2481  3001               	movlw	1
 19097  2482  31A5  2507         	fcall	_DlyOff_Initialization
 19098  2484  0008               	return
 19099  2485                     __end_of_DelayOff_Initialization:	
 19100                           
 19101                           	psect	text122
 19102  2507                     __ptext122:	
 19103 ;; *************** function _DlyOff_Initialization *****************
 19104 ;; Defined at:
 19105 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19106 ;; Parameters:    Size  Location     Type
 19107 ;;  sw              1    wreg     unsigned char 
 19108 ;; Auto vars:     Size  Location     Type
 19109 ;;  sw              1    2[BANK0 ] unsigned char 
 19110 ;; Return value:  Size  Location     Type
 19111 ;;		None               void
 19112 ;; Registers used:
 19113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19114 ;; Tracked objects:
 19115 ;;		On entry : 0/0
 19116 ;;		On exit  : 0/0
 19117 ;;		Unchanged: 0/0
 19118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19123 ;;Total ram usage:        1 bytes
 19124 ;; Hardware stack levels used:    1
 19125 ;; Hardware stack levels required when called:    5
 19126 ;; This function calls:
 19127 ;;		_DelayOffPointSelect
 19128 ;; This function is called by:
 19129 ;;		_DelayOff_Initialization
 19130 ;; This function uses a non-reentrant model
 19131 ;;
 19132                           
 19133                           
 19134                           ;psect for function _DlyOff_Initialization
 19135  2507                     _DlyOff_Initialization:	
 19136                           
 19137                           ;incstack = 0
 19138                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19139                           ;DlyOff_Initialization@sw stored from wreg
 19140  2507  0020               	movlb	0	; select bank0
 19141  2508  00A2               	movwf	DlyOff_Initialization@sw
 19142                           
 19143                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 19144  2509  0822               	movf	DlyOff_Initialization@sw,w
 19145  250A  31A5  2583         	fcall	_DelayOffPointSelect
 19146                           
 19147                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 19148  250C  0021               	movlb	1	; select bank1
 19149  250D  0838               	movf	_DelayOff^(0+128),w
 19150  250E  0086               	movwf	6
 19151  250F  0187               	clrf	7
 19152  2510  1401               	bsf	1,0
 19153  2511  0008               	return
 19154  2512                     __end_of_DlyOff_Initialization:	
 19155                           
 19156                           	psect	text123
 19157  2583                     __ptext123:	
 19158 ;; *************** function _DelayOffPointSelect *****************
 19159 ;; Defined at:
 19160 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 19161 ;; Parameters:    Size  Location     Type
 19162 ;;  sw              1    wreg     unsigned char 
 19163 ;; Auto vars:     Size  Location     Type
 19164 ;;  sw              1    1[BANK0 ] unsigned char 
 19165 ;; Return value:  Size  Location     Type
 19166 ;;		None               void
 19167 ;; Registers used:
 19168 ;;		wreg
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;Total ram usage:        2 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    4
 19181 ;; This function calls:
 19182 ;;		Nothing
 19183 ;; This function is called by:
 19184 ;;		_DlyOff_Initialization
 19185 ;;		_DlyOff_Main
 19186 ;;		_setDelayOff_GO
 19187 ;; This function uses a non-reentrant model
 19188 ;;
 19189                           
 19190                           
 19191                           ;psect for function _DelayOffPointSelect
 19192  2583                     _DelayOffPointSelect:	
 19193                           
 19194                           ;incstack = 0
 19195                           ; Regs used in _DelayOffPointSelect: [wreg]
 19196                           ;DelayOffPointSelect@sw stored from wreg
 19197  2583  0020               	movlb	0	; select bank0
 19198  2584  00A1               	movwf	DelayOffPointSelect@sw
 19199                           
 19200                           ;DelayOff_B1.c: 11: if(sw == 1)
 19201  2585  0821               	movf	DelayOffPointSelect@sw,w
 19202  2586  3A01               	xorlw	1
 19203  2587  1D03               	skipz
 19204  2588  0008               	return
 19205                           
 19206                           ;DelayOff_B1.c: 12: {
 19207                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 19208  2589  30CD               	movlw	_DlySw1& (0+255)
 19209  258A  00A0               	movwf	??_DelayOffPointSelect
 19210  258B  0820               	movf	??_DelayOffPointSelect,w
 19211  258C  0021               	movlb	1	; select bank1
 19212  258D  00B8               	movwf	_DelayOff^(0+128)
 19213  258E  0008               	return
 19214  258F                     __end_of_DelayOffPointSelect:	
 19215                           
 19216                           	psect	text124
 19217  26ED                     __ptext124:	
 19218 ;; *************** function _CC2500_PowerOnInitial *****************
 19219 ;; Defined at:
 19220 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19221 ;; Parameters:    Size  Location     Type
 19222 ;;		None
 19223 ;; Auto vars:     Size  Location     Type
 19224 ;;		None
 19225 ;; Return value:  Size  Location     Type
 19226 ;;		None               void
 19227 ;; Registers used:
 19228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19229 ;; Tracked objects:
 19230 ;;		On entry : 0/0
 19231 ;;		On exit  : 0/0
 19232 ;;		Unchanged: 0/0
 19233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19238 ;;Total ram usage:        0 bytes
 19239 ;; Hardware stack levels used:    1
 19240 ;; Hardware stack levels required when called:    7
 19241 ;; This function calls:
 19242 ;;		_CC2500_ClearRXFIFO
 19243 ;;		_CC2500_ClearTXFIFO
 19244 ;;		_CC2500_FrequencyCabr
 19245 ;;		_CC2500_InitPATable
 19246 ;;		_CC2500_InitSetREG
 19247 ;;		_CC2500_PowerRST
 19248 ;;		_CC2500_SIDLEMode
 19249 ;; This function is called by:
 19250 ;;		_main
 19251 ;; This function uses a non-reentrant model
 19252 ;;
 19253                           
 19254                           
 19255                           ;psect for function _CC2500_PowerOnInitial
 19256  26ED                     _CC2500_PowerOnInitial:	
 19257                           
 19258                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 19259                           
 19260                           ;incstack = 0
 19261                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19262  26ED  319A  22F6  31A6   	fcall	_CC2500_PowerRST
 19263                           
 19264                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 19265  26F0  3199  21F0  31A6   	fcall	_CC2500_InitSetREG
 19266                           
 19267                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 19268  26F3  3198  20B7  31A6   	fcall	_CC2500_InitPATable
 19269                           
 19270                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 19271  26F6  31A4  2479  31A6   	fcall	_CC2500_ClearTXFIFO
 19272                           
 19273                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 19274  26F9  31A4  2475  31A6   	fcall	_CC2500_ClearRXFIFO
 19275                           
 19276                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 19277  26FC  31A5  2577  31A6   	fcall	_CC2500_FrequencyCabr
 19278                           
 19279                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 19280  26FF  31A4  247D         	fcall	_CC2500_SIDLEMode
 19281  2701  0008               	return
 19282  2702                     __end_of_CC2500_PowerOnInitial:	
 19283                           
 19284                           	psect	text125
 19285  247D                     __ptext125:	
 19286 ;; *************** function _CC2500_SIDLEMode *****************
 19287 ;; Defined at:
 19288 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;		None
 19291 ;; Auto vars:     Size  Location     Type
 19292 ;;		None
 19293 ;; Return value:  Size  Location     Type
 19294 ;;		None               void
 19295 ;; Registers used:
 19296 ;;		wreg, status,2, status,0, pclath, cstack
 19297 ;; Tracked objects:
 19298 ;;		On entry : 0/0
 19299 ;;		On exit  : 0/0
 19300 ;;		Unchanged: 0/0
 19301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;Total ram usage:        0 bytes
 19307 ;; Hardware stack levels used:    1
 19308 ;; Hardware stack levels required when called:    6
 19309 ;; This function calls:
 19310 ;;		_CC2500_WriteCommand
 19311 ;; This function is called by:
 19312 ;;		_CC2500_PowerOnInitial
 19313 ;; This function uses a non-reentrant model
 19314 ;;
 19315                           
 19316                           
 19317                           ;psect for function _CC2500_SIDLEMode
 19318  247D                     _CC2500_SIDLEMode:	
 19319                           
 19320                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19321                           
 19322                           ;incstack = 0
 19323                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19324  247D  3036               	movlw	54
 19325  247E  31A6  2649         	fcall	_CC2500_WriteCommand
 19326  2480  0008               	return
 19327  2481                     __end_of_CC2500_SIDLEMode:	
 19328                           
 19329                           	psect	text126
 19330  1AF6                     __ptext126:	
 19331 ;; *************** function _CC2500_PowerRST *****************
 19332 ;; Defined at:
 19333 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19334 ;; Parameters:    Size  Location     Type
 19335 ;;		None
 19336 ;; Auto vars:     Size  Location     Type
 19337 ;;		None
 19338 ;; Return value:  Size  Location     Type
 19339 ;;		None               void
 19340 ;; Registers used:
 19341 ;;		wreg, status,2, status,0, pclath, cstack
 19342 ;; Tracked objects:
 19343 ;;		On entry : 0/0
 19344 ;;		On exit  : 0/0
 19345 ;;		Unchanged: 0/0
 19346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19350 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19351 ;;Total ram usage:        1 bytes
 19352 ;; Hardware stack levels used:    1
 19353 ;; Hardware stack levels required when called:    5
 19354 ;; This function calls:
 19355 ;;		_CC2500_WriteByte
 19356 ;;		_DelayTime_1us
 19357 ;; This function is called by:
 19358 ;;		_CC2500_PowerOnInitial
 19359 ;; This function uses a non-reentrant model
 19360 ;;
 19361                           
 19362                           
 19363                           ;psect for function _CC2500_PowerRST
 19364  1AF6                     _CC2500_PowerRST:	
 19365                           
 19366                           ;CC2500_B1.c: 112: RC1=0;
 19367                           
 19368                           ;incstack = 0
 19369                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19370  1AF6  0020               	movlb	0	; select bank0
 19371  1AF7  108E               	bcf	14,1	;volatile
 19372                           
 19373                           ;CC2500_B1.c: 113: RC0=0;
 19374  1AF8  100E               	bcf	14,0	;volatile
 19375                           
 19376                           ;CC2500_B1.c: 114: RC4=1;
 19377  1AF9  160E               	bsf	14,4	;volatile
 19378                           
 19379                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19380  1AFA  300A               	movlw	10
 19381  1AFB  00A0               	movwf	DelayTime_1us@count
 19382  1AFC  3000               	movlw	0
 19383  1AFD  00A1               	movwf	DelayTime_1us@count+1
 19384  1AFE  3199  21A3  319A   	fcall	_DelayTime_1us
 19385                           
 19386                           ;CC2500_B1.c: 116: RC4=0;
 19387  1B01  0020               	movlb	0	; select bank0
 19388  1B02  120E               	bcf	14,4	;volatile
 19389                           
 19390                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19391  1B03  300A               	movlw	10
 19392  1B04  00A0               	movwf	DelayTime_1us@count
 19393  1B05  3000               	movlw	0
 19394  1B06  00A1               	movwf	DelayTime_1us@count+1
 19395  1B07  3199  21A3  319A   	fcall	_DelayTime_1us
 19396                           
 19397                           ;CC2500_B1.c: 118: RC4=1;
 19398  1B0A  0020               	movlb	0	; select bank0
 19399  1B0B  160E               	bsf	14,4	;volatile
 19400                           
 19401                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19402  1B0C  3028               	movlw	40
 19403  1B0D  00A0               	movwf	DelayTime_1us@count
 19404  1B0E  3000               	movlw	0
 19405  1B0F  00A1               	movwf	DelayTime_1us@count+1
 19406  1B10  3199  21A3  319A   	fcall	_DelayTime_1us
 19407                           
 19408                           ;CC2500_B1.c: 120: RC4=0;
 19409  1B13  0020               	movlb	0	; select bank0
 19410  1B14  120E               	bcf	14,4	;volatile
 19411                           
 19412                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19413  1B15  3030               	movlw	48
 19414  1B16  00A6               	movwf	??_CC2500_PowerRST
 19415  1B17  0826               	movf	??_CC2500_PowerRST,w
 19416  1B18  0021               	movlb	1	; select bank1
 19417  1B19  00BF               	movwf	_SPI0Buffer^(0+128)
 19418  1B1A                     l328:	
 19419                           ;CC2500_B1.c: 122: while(RC2==1);
 19420                           
 19421  1B1A  0020               	movlb	0	; select bank0
 19422  1B1B  190E               	btfsc	14,2	;volatile
 19423  1B1C  2B1A               	goto	l328
 19424                           
 19425                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19426  1B1D  31A7  272F  319A   	fcall	_CC2500_WriteByte
 19427  1B20                     l331:	
 19428                           ;CC2500_B1.c: 124: while(RC2==1);
 19429                           
 19430  1B20  0020               	movlb	0	; select bank0
 19431  1B21  190E               	btfsc	14,2	;volatile
 19432  1B22  2B20               	goto	l331
 19433                           
 19434                           ;CC2500_B1.c: 125: RC0=0;
 19435  1B23  100E               	bcf	14,0	;volatile
 19436                           
 19437                           ;CC2500_B1.c: 126: RC4=1;
 19438  1B24  160E               	bsf	14,4	;volatile
 19439  1B25  0008               	return
 19440  1B26                     __end_of_CC2500_PowerRST:	
 19441                           
 19442                           	psect	text127
 19443  19F0                     __ptext127:	
 19444 ;; *************** function _CC2500_InitSetREG *****************
 19445 ;; Defined at:
 19446 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19447 ;; Parameters:    Size  Location     Type
 19448 ;;		None
 19449 ;; Auto vars:     Size  Location     Type
 19450 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19451 ;;  temp2           1    7[BANK0 ] unsigned char 
 19452 ;;  temp1           1    6[BANK0 ] unsigned char 
 19453 ;; Return value:  Size  Location     Type
 19454 ;;		None               void
 19455 ;; Registers used:
 19456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19457 ;; Tracked objects:
 19458 ;;		On entry : 0/0
 19459 ;;		On exit  : 0/0
 19460 ;;		Unchanged: 0/0
 19461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19463 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19465 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19466 ;;Total ram usage:        4 bytes
 19467 ;; Hardware stack levels used:    1
 19468 ;; Hardware stack levels required when called:    6
 19469 ;; This function calls:
 19470 ;;		_CC2500_WriteREG
 19471 ;; This function is called by:
 19472 ;;		_CC2500_PowerOnInitial
 19473 ;; This function uses a non-reentrant model
 19474 ;;
 19475                           
 19476                           
 19477                           ;psect for function _CC2500_InitSetREG
 19478  19F0                     _CC2500_InitSetREG:	
 19479                           
 19480                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19481                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19482                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19483                           
 19484                           ;incstack = 0
 19485                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19486  19F0  0020               	movlb	0	; select bank0
 19487  19F1  01A8               	clrf	CC2500_InitSetREG@loop_c
 19488  19F2                     L12:	
 19489  19F2  302F               	movlw	47
 19490  19F3  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19491  19F4  1803               	btfsc	3,0
 19492  19F5  0008               	return
 19493                           
 19494                           ;CC2500_B1.c: 137: {
 19495                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19496  19F6  0828               	movf	CC2500_InitSetREG@loop_c,w
 19497  19F7  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19498  19F8  0084               	movwf	4
 19499  19F9  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19500  19FA  1803               	skipnc
 19501  19FB  3E01               	addlw	1
 19502  19FC  0085               	movwf	5
 19503  19FD  0800               	movf	0,w	;code access
 19504  19FE  00A5               	movwf	??_CC2500_InitSetREG
 19505  19FF  0825               	movf	??_CC2500_InitSetREG,w
 19506  1A00  00A6               	movwf	CC2500_InitSetREG@temp1
 19507                           
 19508                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19509  1A01  0828               	movf	CC2500_InitSetREG@loop_c,w
 19510  1A02  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19511  1A03  0084               	movwf	4
 19512  1A04  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19513  1A05  1803               	skipnc
 19514  1A06  3E01               	addlw	1
 19515  1A07  0085               	movwf	5
 19516  1A08  0800               	movf	0,w	;code access
 19517  1A09  00A5               	movwf	??_CC2500_InitSetREG
 19518  1A0A  0825               	movf	??_CC2500_InitSetREG,w
 19519  1A0B  00A7               	movwf	CC2500_InitSetREG@temp2
 19520                           
 19521                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19522  1A0C  0827               	movf	CC2500_InitSetREG@temp2,w
 19523  1A0D  00A5               	movwf	??_CC2500_InitSetREG
 19524  1A0E  0825               	movf	??_CC2500_InitSetREG,w
 19525  1A0F  00A2               	movwf	CC2500_WriteREG@value
 19526  1A10  0826               	movf	CC2500_InitSetREG@temp1,w
 19527  1A11  31A7  2748  3199   	fcall	_CC2500_WriteREG
 19528  1A14  3001               	movlw	1
 19529  1A15  0020               	movlb	0	; select bank0
 19530  1A16  00A5               	movwf	??_CC2500_InitSetREG
 19531  1A17  0825               	movf	??_CC2500_InitSetREG,w
 19532  1A18  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19533  1A19  29F2               	goto	L12
 19534  1A1A                     __end_of_CC2500_InitSetREG:	
 19535                           
 19536                           	psect	text128
 19537  18B7                     __ptext128:	
 19538 ;; *************** function _CC2500_InitPATable *****************
 19539 ;; Defined at:
 19540 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;		None
 19543 ;; Auto vars:     Size  Location     Type
 19544 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19545 ;;  temp            1    6[BANK0 ] unsigned char 
 19546 ;; Return value:  Size  Location     Type
 19547 ;;		None               void
 19548 ;; Registers used:
 19549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19550 ;; Tracked objects:
 19551 ;;		On entry : 0/0
 19552 ;;		On exit  : 0/0
 19553 ;;		Unchanged: 0/0
 19554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19559 ;;Total ram usage:        3 bytes
 19560 ;; Hardware stack levels used:    1
 19561 ;; Hardware stack levels required when called:    6
 19562 ;; This function calls:
 19563 ;;		_CC2500_WriteREG
 19564 ;; This function is called by:
 19565 ;;		_CC2500_PowerOnInitial
 19566 ;; This function uses a non-reentrant model
 19567 ;;
 19568                           
 19569                           
 19570                           ;psect for function _CC2500_InitPATable
 19571  18B7                     _CC2500_InitPATable:	
 19572                           
 19573                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19574                           ;CC2500_B1.c: 150: unsigned char temp;
 19575                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19576                           
 19577                           ;incstack = 0
 19578                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19579  18B7  0020               	movlb	0	; select bank0
 19580  18B8  01A7               	clrf	CC2500_InitPATable@loop_d
 19581  18B9                     L13:	
 19582  18B9  3008               	movlw	8
 19583  18BA  0227               	subwf	CC2500_InitPATable@loop_d,w
 19584  18BB  1803               	btfsc	3,0
 19585  18BC  0008               	return
 19586                           
 19587                           ;CC2500_B1.c: 153: {
 19588                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19589  18BD  0827               	movf	CC2500_InitPATable@loop_d,w
 19590  18BE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19591  18BF  0084               	movwf	4
 19592  18C0  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19593  18C1  1803               	skipnc
 19594  18C2  3E01               	addlw	1
 19595  18C3  0085               	movwf	5
 19596  18C4  0800               	movf	0,w	;code access
 19597  18C5  00A5               	movwf	??_CC2500_InitPATable
 19598  18C6  0825               	movf	??_CC2500_InitPATable,w
 19599  18C7  00A6               	movwf	CC2500_InitPATable@temp
 19600                           
 19601                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19602  18C8  0826               	movf	CC2500_InitPATable@temp,w
 19603  18C9  00A5               	movwf	??_CC2500_InitPATable
 19604  18CA  0825               	movf	??_CC2500_InitPATable,w
 19605  18CB  00A2               	movwf	CC2500_WriteREG@value
 19606  18CC  303E               	movlw	62
 19607  18CD  31A7  2748  3198   	fcall	_CC2500_WriteREG
 19608  18D0  3001               	movlw	1
 19609  18D1  0020               	movlb	0	; select bank0
 19610  18D2  00A5               	movwf	??_CC2500_InitPATable
 19611  18D3  0825               	movf	??_CC2500_InitPATable,w
 19612  18D4  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19613  18D5  28B9               	goto	L13
 19614  18D6                     __end_of_CC2500_InitPATable:	
 19615                           
 19616                           	psect	text129
 19617  2748                     __ptext129:	
 19618 ;; *************** function _CC2500_WriteREG *****************
 19619 ;; Defined at:
 19620 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19621 ;; Parameters:    Size  Location     Type
 19622 ;;  w_addr          1    wreg     unsigned char 
 19623 ;;  value           1    2[BANK0 ] unsigned char 
 19624 ;; Auto vars:     Size  Location     Type
 19625 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19626 ;; Return value:  Size  Location     Type
 19627 ;;		None               void
 19628 ;; Registers used:
 19629 ;;		wreg, status,2, status,0, pclath, cstack
 19630 ;; Tracked objects:
 19631 ;;		On entry : 0/0
 19632 ;;		On exit  : 0/0
 19633 ;;		Unchanged: 0/0
 19634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19639 ;;Total ram usage:        3 bytes
 19640 ;; Hardware stack levels used:    1
 19641 ;; Hardware stack levels required when called:    5
 19642 ;; This function calls:
 19643 ;;		_CC2500_WriteByte
 19644 ;; This function is called by:
 19645 ;;		_CC2500_InitSetREG
 19646 ;;		_CC2500_InitPATable
 19647 ;; This function uses a non-reentrant model
 19648 ;;
 19649                           
 19650                           
 19651                           ;psect for function _CC2500_WriteREG
 19652  2748                     _CC2500_WriteREG:	
 19653                           
 19654                           ;incstack = 0
 19655                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19656                           ;CC2500_WriteREG@w_addr stored from wreg
 19657  2748  0020               	movlb	0	; select bank0
 19658  2749  00A4               	movwf	CC2500_WriteREG@w_addr
 19659                           
 19660                           ;CC2500_B1.c: 229: RC4=0;
 19661  274A  120E               	bcf	14,4	;volatile
 19662                           
 19663                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19664  274B  0824               	movf	CC2500_WriteREG@w_addr,w
 19665  274C  00A3               	movwf	??_CC2500_WriteREG
 19666  274D  0823               	movf	??_CC2500_WriteREG,w
 19667  274E  0021               	movlb	1	; select bank1
 19668  274F  00BF               	movwf	_SPI0Buffer^(0+128)
 19669  2750                     l373:	
 19670                           ;CC2500_B1.c: 231: while(RC2==1);
 19671                           
 19672  2750  0020               	movlb	0	; select bank0
 19673  2751  190E               	btfsc	14,2	;volatile
 19674  2752  2F50               	goto	l373
 19675                           
 19676                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19677  2753  31A7  272F  31A7   	fcall	_CC2500_WriteByte
 19678                           
 19679                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19680  2756  0020               	movlb	0	; select bank0
 19681  2757  0822               	movf	CC2500_WriteREG@value,w
 19682  2758  00A3               	movwf	??_CC2500_WriteREG
 19683  2759  0823               	movf	??_CC2500_WriteREG,w
 19684  275A  0021               	movlb	1	; select bank1
 19685  275B  00BF               	movwf	_SPI0Buffer^(0+128)
 19686                           
 19687                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19688  275C  31A7  272F         	fcall	_CC2500_WriteByte
 19689                           
 19690                           ;CC2500_B1.c: 235: RC4=1;
 19691  275E  0020               	movlb	0	; select bank0
 19692  275F  160E               	bsf	14,4	;volatile
 19693  2760  0008               	return
 19694  2761                     __end_of_CC2500_WriteREG:	
 19695                           
 19696                           	psect	text130
 19697  2577                     __ptext130:	
 19698 ;; *************** function _CC2500_FrequencyCabr *****************
 19699 ;; Defined at:
 19700 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19701 ;; Parameters:    Size  Location     Type
 19702 ;;		None
 19703 ;; Auto vars:     Size  Location     Type
 19704 ;;		None
 19705 ;; Return value:  Size  Location     Type
 19706 ;;		None               void
 19707 ;; Registers used:
 19708 ;;		wreg, status,2, status,0, pclath, cstack
 19709 ;; Tracked objects:
 19710 ;;		On entry : 0/0
 19711 ;;		On exit  : 0/0
 19712 ;;		Unchanged: 0/0
 19713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19718 ;;Total ram usage:        0 bytes
 19719 ;; Hardware stack levels used:    1
 19720 ;; Hardware stack levels required when called:    6
 19721 ;; This function calls:
 19722 ;;		_CC2500_WriteCommand
 19723 ;;		_DelayTime_1us
 19724 ;; This function is called by:
 19725 ;;		_CC2500_PowerOnInitial
 19726 ;; This function uses a non-reentrant model
 19727 ;;
 19728                           
 19729                           
 19730                           ;psect for function _CC2500_FrequencyCabr
 19731  2577                     _CC2500_FrequencyCabr:	
 19732                           
 19733                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19734                           
 19735                           ;incstack = 0
 19736                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19737  2577  3033               	movlw	51
 19738  2578  31A6  2649  31A5   	fcall	_CC2500_WriteCommand
 19739                           
 19740                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19741  257B  30E8               	movlw	232
 19742  257C  0020               	movlb	0	; select bank0
 19743  257D  00A0               	movwf	DelayTime_1us@count
 19744  257E  3003               	movlw	3
 19745  257F  00A1               	movwf	DelayTime_1us@count+1
 19746  2580  3199  21A3         	fcall	_DelayTime_1us
 19747  2582  0008               	return
 19748  2583                     __end_of_CC2500_FrequencyCabr:	
 19749                           
 19750                           	psect	text131
 19751  19A3                     __ptext131:	
 19752 ;; *************** function _DelayTime_1us *****************
 19753 ;; Defined at:
 19754 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19755 ;; Parameters:    Size  Location     Type
 19756 ;;  count           2    0[BANK0 ] int 
 19757 ;; Auto vars:     Size  Location     Type
 19758 ;;  j               2    4[BANK0 ] unsigned int 
 19759 ;;  i               2    2[BANK0 ] unsigned int 
 19760 ;; Return value:  Size  Location     Type
 19761 ;;		None               void
 19762 ;; Registers used:
 19763 ;;		wreg, status,2
 19764 ;; Tracked objects:
 19765 ;;		On entry : 0/0
 19766 ;;		On exit  : 0/0
 19767 ;;		Unchanged: 0/0
 19768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19769 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19770 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19772 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;Total ram usage:        6 bytes
 19774 ;; Hardware stack levels used:    1
 19775 ;; Hardware stack levels required when called:    4
 19776 ;; This function calls:
 19777 ;;		Nothing
 19778 ;; This function is called by:
 19779 ;;		_CC2500_PowerRST
 19780 ;;		_CC2500_FrequencyCabr
 19781 ;; This function uses a non-reentrant model
 19782 ;;
 19783                           
 19784                           
 19785                           ;psect for function _DelayTime_1us
 19786  19A3                     _DelayTime_1us:	
 19787                           
 19788                           ;CC2500_B1.c: 285: unsigned int i,j;
 19789                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19790                           
 19791                           ;incstack = 0
 19792                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19793  19A3  3001               	movlw	1
 19794  19A4  0020               	movlb	0	; select bank0
 19795  19A5  00A2               	movwf	DelayTime_1us@i
 19796  19A6  3000               	movlw	0
 19797  19A7  00A3               	movwf	DelayTime_1us@i+1
 19798  19A8                     l397:	
 19799  19A8  0821               	movf	DelayTime_1us@count+1,w
 19800  19A9  0223               	subwf	DelayTime_1us@i+1,w
 19801  19AA  1D03               	skipz
 19802  19AB  29AE               	goto	u8045
 19803  19AC  0820               	movf	DelayTime_1us@count,w
 19804  19AD  0222               	subwf	DelayTime_1us@i,w
 19805  19AE                     u8045:	
 19806  19AE  1803               	btfsc	3,0
 19807  19AF  0008               	return
 19808                           
 19809                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19810  19B0  01A4               	clrf	DelayTime_1us@j
 19811  19B1  01A5               	clrf	DelayTime_1us@j+1
 19812  19B2  3000               	movlw	0
 19813  19B3  0225               	subwf	DelayTime_1us@j+1,w
 19814  19B4  3002               	movlw	2
 19815  19B5  1903               	skipnz
 19816  19B6  0224               	subwf	DelayTime_1us@j,w
 19817  19B7  1803               	btfsc	3,0
 19818  19B8  29C4               	goto	l8672
 19819  19B9                     l8670:	
 19820  19B9  3001               	movlw	1
 19821  19BA  07A4               	addwf	DelayTime_1us@j,f
 19822  19BB  3000               	movlw	0
 19823  19BC  3DA5               	addwfc	DelayTime_1us@j+1,f
 19824  19BD  3000               	movlw	0
 19825  19BE  0225               	subwf	DelayTime_1us@j+1,w
 19826  19BF  3002               	movlw	2
 19827  19C0  1903               	skipnz
 19828  19C1  0224               	subwf	DelayTime_1us@j,w
 19829  19C2  1C03               	skipc
 19830  19C3  29B9               	goto	l8670
 19831  19C4                     l8672:	
 19832  19C4  3001               	movlw	1
 19833  19C5  07A2               	addwf	DelayTime_1us@i,f
 19834  19C6  3000               	movlw	0
 19835  19C7  3DA3               	addwfc	DelayTime_1us@i+1,f
 19836  19C8  29A8               	goto	l397
 19837  19C9                     __end_of_DelayTime_1us:	
 19838                           
 19839                           	psect	text132
 19840  2479                     __ptext132:	
 19841 ;; *************** function _CC2500_ClearTXFIFO *****************
 19842 ;; Defined at:
 19843 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19844 ;; Parameters:    Size  Location     Type
 19845 ;;		None
 19846 ;; Auto vars:     Size  Location     Type
 19847 ;;		None
 19848 ;; Return value:  Size  Location     Type
 19849 ;;		None               void
 19850 ;; Registers used:
 19851 ;;		wreg, status,2, status,0, pclath, cstack
 19852 ;; Tracked objects:
 19853 ;;		On entry : 0/0
 19854 ;;		On exit  : 0/0
 19855 ;;		Unchanged: 0/0
 19856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;Total ram usage:        0 bytes
 19862 ;; Hardware stack levels used:    1
 19863 ;; Hardware stack levels required when called:    6
 19864 ;; This function calls:
 19865 ;;		_CC2500_WriteCommand
 19866 ;; This function is called by:
 19867 ;;		_CC2500_PowerOnInitial
 19868 ;; This function uses a non-reentrant model
 19869 ;;
 19870                           
 19871                           
 19872                           ;psect for function _CC2500_ClearTXFIFO
 19873  2479                     _CC2500_ClearTXFIFO:	
 19874                           
 19875                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19876                           
 19877                           ;incstack = 0
 19878                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19879  2479  303B               	movlw	59
 19880  247A  31A6  2649         	fcall	_CC2500_WriteCommand
 19881  247C  0008               	return
 19882  247D                     __end_of_CC2500_ClearTXFIFO:	
 19883                           
 19884                           	psect	text133
 19885  2475                     __ptext133:	
 19886 ;; *************** function _CC2500_ClearRXFIFO *****************
 19887 ;; Defined at:
 19888 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;		None
 19891 ;; Auto vars:     Size  Location     Type
 19892 ;;		None
 19893 ;; Return value:  Size  Location     Type
 19894 ;;		None               void
 19895 ;; Registers used:
 19896 ;;		wreg, status,2, status,0, pclath, cstack
 19897 ;; Tracked objects:
 19898 ;;		On entry : 0/0
 19899 ;;		On exit  : 0/0
 19900 ;;		Unchanged: 0/0
 19901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19906 ;;Total ram usage:        0 bytes
 19907 ;; Hardware stack levels used:    1
 19908 ;; Hardware stack levels required when called:    6
 19909 ;; This function calls:
 19910 ;;		_CC2500_WriteCommand
 19911 ;; This function is called by:
 19912 ;;		_CC2500_PowerOnInitial
 19913 ;; This function uses a non-reentrant model
 19914 ;;
 19915                           
 19916                           
 19917                           ;psect for function _CC2500_ClearRXFIFO
 19918  2475                     _CC2500_ClearRXFIFO:	
 19919                           
 19920                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19921                           
 19922                           ;incstack = 0
 19923                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19924  2475  303A               	movlw	58
 19925  2476  31A6  2649         	fcall	_CC2500_WriteCommand
 19926  2478  0008               	return
 19927  2479                     __end_of_CC2500_ClearRXFIFO:	
 19928                           
 19929                           	psect	text134
 19930  2649                     __ptext134:	
 19931 ;; *************** function _CC2500_WriteCommand *****************
 19932 ;; Defined at:
 19933 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19934 ;; Parameters:    Size  Location     Type
 19935 ;;  command         1    wreg     unsigned char 
 19936 ;; Auto vars:     Size  Location     Type
 19937 ;;  command         1    3[BANK0 ] unsigned char 
 19938 ;; Return value:  Size  Location     Type
 19939 ;;		None               void
 19940 ;; Registers used:
 19941 ;;		wreg, status,2, status,0, pclath, cstack
 19942 ;; Tracked objects:
 19943 ;;		On entry : 0/0
 19944 ;;		On exit  : 0/0
 19945 ;;		Unchanged: 0/0
 19946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19951 ;;Total ram usage:        2 bytes
 19952 ;; Hardware stack levels used:    1
 19953 ;; Hardware stack levels required when called:    5
 19954 ;; This function calls:
 19955 ;;		_CC2500_WriteByte
 19956 ;; This function is called by:
 19957 ;;		_CC2500_TxData
 19958 ;;		_CC2500_RxData
 19959 ;;		_CC2500_ClearTXFIFO
 19960 ;;		_CC2500_ClearRXFIFO
 19961 ;;		_CC2500_FrequencyCabr
 19962 ;;		_CC2500_SIDLEMode
 19963 ;;		_setRF_Main
 19964 ;;		_RF_RxDisable
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           
 19969                           ;psect for function _CC2500_WriteCommand
 19970  2649                     _CC2500_WriteCommand:	
 19971                           
 19972                           ;incstack = 0
 19973                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19974                           ;CC2500_WriteCommand@command stored from wreg
 19975  2649  0020               	movlb	0	; select bank0
 19976  264A  00A3               	movwf	CC2500_WriteCommand@command
 19977                           
 19978                           ;CC2500_B1.c: 255: RC4=0;
 19979  264B  120E               	bcf	14,4	;volatile
 19980                           
 19981                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19982  264C  0823               	movf	CC2500_WriteCommand@command,w
 19983  264D  00A2               	movwf	??_CC2500_WriteCommand
 19984  264E  0822               	movf	??_CC2500_WriteCommand,w
 19985  264F  0021               	movlb	1	; select bank1
 19986  2650  00BF               	movwf	_SPI0Buffer^(0+128)
 19987  2651                     l385:	
 19988                           ;CC2500_B1.c: 258: while(RC2==1);
 19989                           
 19990  2651  0020               	movlb	0	; select bank0
 19991  2652  190E               	btfsc	14,2	;volatile
 19992  2653  2E51               	goto	l385
 19993                           
 19994                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19995  2654  31A7  272F         	fcall	_CC2500_WriteByte
 19996                           
 19997                           ;CC2500_B1.c: 261: RC4=1;
 19998  2656  0020               	movlb	0	; select bank0
 19999  2657  160E               	bsf	14,4	;volatile
 20000  2658  0008               	return
 20001  2659                     __end_of_CC2500_WriteCommand:	
 20002                           
 20003                           	psect	text135
 20004  272F                     __ptext135:	
 20005 ;; *************** function _CC2500_WriteByte *****************
 20006 ;; Defined at:
 20007 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;		None
 20010 ;; Auto vars:     Size  Location     Type
 20011 ;;  loop_a          1    1[BANK0 ] unsigned char 
 20012 ;; Return value:  Size  Location     Type
 20013 ;;		None               void
 20014 ;; Registers used:
 20015 ;;		wreg, status,2, status,0
 20016 ;; Tracked objects:
 20017 ;;		On entry : 0/0
 20018 ;;		On exit  : 0/0
 20019 ;;		Unchanged: 0/0
 20020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20025 ;;Total ram usage:        2 bytes
 20026 ;; Hardware stack levels used:    1
 20027 ;; Hardware stack levels required when called:    4
 20028 ;; This function calls:
 20029 ;;		Nothing
 20030 ;; This function is called by:
 20031 ;;		_CC2500_TxData
 20032 ;;		_CC2500_RxData
 20033 ;;		_CC2500_PowerRST
 20034 ;;		_CC2500_WriteREG
 20035 ;;		_CC2500_WriteCommand
 20036 ;;		_CC2500_ReadStatus
 20037 ;;		_CC2500_ReadREG
 20038 ;; This function uses a non-reentrant model
 20039 ;;
 20040                           
 20041                           
 20042                           ;psect for function _CC2500_WriteByte
 20043  272F                     _CC2500_WriteByte:	
 20044                           
 20045                           ;CC2500_B1.c: 195: unsigned char loop_a;
 20046                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 20047                           
 20048                           ;incstack = 0
 20049                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 20050  272F  0020               	movlb	0	; select bank0
 20051  2730  01A1               	clrf	CC2500_WriteByte@loop_a
 20052  2731                     L14:	
 20053  2731  3008               	movlw	8
 20054  2732  0221               	subwf	CC2500_WriteByte@loop_a,w
 20055  2733  1803               	btfsc	3,0
 20056  2734  0008               	return
 20057                           
 20058                           ;CC2500_B1.c: 197: {
 20059                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 20060  2735  0021               	movlb	1	; select bank1
 20061  2736  1FBF               	btfss	_SPI0Buffer^(0+128),7
 20062  2737  2F3B               	goto	l361
 20063                           
 20064                           ;CC2500_B1.c: 199: RC0=1;
 20065  2738  0020               	movlb	0	; select bank0
 20066  2739  140E               	bsf	14,0	;volatile
 20067  273A  2F3D               	goto	l362
 20068  273B                     l361:	
 20069                           
 20070                           ;CC2500_B1.c: 200: else
 20071                           ;CC2500_B1.c: 201: RC0=0;
 20072  273B  0020               	movlb	0	; select bank0
 20073  273C  100E               	bcf	14,0	;volatile
 20074  273D                     l362:	
 20075                           
 20076                           ;CC2500_B1.c: 202: RC1=1;
 20077  273D  148E               	bsf	14,1	;volatile
 20078                           
 20079                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 20080  273E  1003               	clrc
 20081  273F  0021               	movlb	1	; select bank1
 20082  2740  0DBF               	rlf	_SPI0Buffer^(0+128),f
 20083                           
 20084                           ;CC2500_B1.c: 204: RC1=0;
 20085  2741  0020               	movlb	0	; select bank0
 20086  2742  108E               	bcf	14,1	;volatile
 20087  2743  3001               	movlw	1
 20088  2744  00A0               	movwf	??_CC2500_WriteByte
 20089  2745  0820               	movf	??_CC2500_WriteByte,w
 20090  2746  07A1               	addwf	CC2500_WriteByte@loop_a,f
 20091  2747  2F31               	goto	L14
 20092  2748                     __end_of_CC2500_WriteByte:	
 20093                           
 20094                           	psect	text136
 20095  09C9                     __ptext136:	
 20096 ;; *************** function _Buzzer_Main *****************
 20097 ;; Defined at:
 20098 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20099 ;; Parameters:    Size  Location     Type
 20100 ;;		None
 20101 ;; Auto vars:     Size  Location     Type
 20102 ;;		None
 20103 ;; Return value:  Size  Location     Type
 20104 ;;		None               void
 20105 ;; Registers used:
 20106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20107 ;; Tracked objects:
 20108 ;;		On entry : 0/0
 20109 ;;		On exit  : 0/0
 20110 ;;		Unchanged: 0/0
 20111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20114 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20115 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20116 ;;Total ram usage:        4 bytes
 20117 ;; Hardware stack levels used:    1
 20118 ;; Hardware stack levels required when called:    4
 20119 ;; This function calls:
 20120 ;;		Nothing
 20121 ;; This function is called by:
 20122 ;;		_main
 20123 ;; This function uses a non-reentrant model
 20124 ;;
 20125                           
 20126                           
 20127                           ;psect for function _Buzzer_Main
 20128  09C9                     _Buzzer_Main:	
 20129                           
 20130                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 20131                           
 20132                           ;incstack = 0
 20133                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 20134  09C9  0878               	movf	_Buz,w
 20135  09CA  0086               	movwf	6
 20136  09CB  3001               	movlw	1	; select bank2/3
 20137  09CC  0087               	movwf	7
 20138  09CD  1281               	bcf	1,5
 20139  09CE  0020               	movlb	0	; select bank0
 20140  09CF  198D               	btfsc	13,3	;volatile
 20141  09D0  1681               	bsf	1,5
 20142                           
 20143                           ;Buzzer_B1.c: 57: if(Buz->GO)
 20144  09D1  0878               	movf	_Buz,w
 20145  09D2  0086               	movwf	6
 20146  09D3  3001               	movlw	1	; select bank2/3
 20147  09D4  0087               	movwf	7
 20148  09D5  1C81               	btfss	1,1
 20149  09D6  0008               	return
 20150                           
 20151                           ;Buzzer_B1.c: 58: {
 20152                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 20153  09D7  0878               	movf	_Buz,w
 20154  09D8  3E06               	addlw	6
 20155  09D9  0086               	movwf	6
 20156  09DA  3001               	movlw	1	; select bank2/3
 20157  09DB  0087               	movwf	7
 20158  09DC  3F40               	moviw [0]fsr1
 20159  09DD  0020               	movlb	0	; select bank0
 20160  09DE  00A0               	movwf	??_Buzzer_Main
 20161  09DF  3F41               	moviw [1]fsr1
 20162  09E0  00A1               	movwf	??_Buzzer_Main+1
 20163  09E1  0A78               	incf	_Buz,w
 20164  09E2  0086               	movwf	6
 20165  09E3  3001               	movlw	1	; select bank2/3
 20166  09E4  0087               	movwf	7
 20167  09E5  3F40               	moviw [0]fsr1
 20168  09E6  00A2               	movwf	??_Buzzer_Main+2
 20169  09E7  3F41               	moviw [1]fsr1
 20170  09E8  00A3               	movwf	??_Buzzer_Main+3
 20171  09E9  0821               	movf	??_Buzzer_Main+1,w
 20172  09EA  0223               	subwf	??_Buzzer_Main+3,w
 20173  09EB  1D03               	skipz
 20174  09EC  29EF               	goto	u6585
 20175  09ED  0820               	movf	??_Buzzer_Main,w
 20176  09EE  0222               	subwf	??_Buzzer_Main+2,w
 20177  09EF                     u6585:	
 20178  09EF  1C03               	skipc
 20179  09F0  0008               	return
 20180                           
 20181                           ;Buzzer_B1.c: 61: {
 20182                           ;Buzzer_B1.c: 62: Buz->Time=0;
 20183  09F1  0A78               	incf	_Buz,w
 20184  09F2  0086               	movwf	6
 20185  09F3  3001               	movlw	1	; select bank2/3
 20186  09F4  0087               	movwf	7
 20187  09F5  3000               	movlw	0
 20188  09F6  3FC0               	movwi [0]fsr1
 20189  09F7  3FC1               	movwi [1]fsr1
 20190                           
 20191                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 20192  09F8  0878               	movf	_Buz,w
 20193  09F9  0086               	movwf	6
 20194  09FA  3001               	movlw	1	; select bank2/3
 20195  09FB  0087               	movwf	7
 20196  09FC  1A81               	btfsc	1,5
 20197  09FD  2A63               	goto	l7662
 20198                           
 20199                           ;Buzzer_B1.c: 64: {
 20200                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 20201  09FE  0878               	movf	_Buz,w
 20202  09FF  3E03               	addlw	3
 20203  0A00  0086               	movwf	6
 20204  0A01  3001               	movlw	1	; select bank2/3
 20205  0A02  0087               	movwf	7
 20206  0A03  0881               	movf	1,f
 20207  0A04  1D03               	skipz
 20208  0A05  2A5C               	goto	l7658
 20209                           
 20210                           ;Buzzer_B1.c: 66: {
 20211                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 20212  0A06  0878               	movf	_Buz,w
 20213  0A07  0086               	movwf	6
 20214  0A08  3001               	movlw	1	; select bank2/3
 20215  0A09  0087               	movwf	7
 20216  0A0A  1D81               	btfss	1,3
 20217  0A0B  2A2E               	goto	l7650
 20218                           
 20219                           ;Buzzer_B1.c: 68: {
 20220                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 20221  0A0C  0878               	movf	_Buz,w
 20222  0A0D  0086               	movwf	6
 20223  0A0E  3001               	movlw	1	; select bank2/3
 20224  0A0F  0087               	movwf	7
 20225  0A10  1181               	bcf	1,3
 20226                           
 20227                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 20228  0A11  0878               	movf	_Buz,w
 20229  0A12  3E04               	addlw	4
 20230  0A13  0086               	movwf	6
 20231  0A14  3001               	movlw	1	; select bank2/3
 20232  0A15  0087               	movwf	7
 20233  0A16  0801               	movf	1,w
 20234  0A17  00A0               	movwf	??_Buzzer_Main
 20235  0A18  0878               	movf	_Buz,w
 20236  0A19  3E03               	addlw	3
 20237  0A1A  0086               	movwf	6
 20238  0A1B  3001               	movlw	1	; select bank2/3
 20239  0A1C  0087               	movwf	7
 20240  0A1D  0820               	movf	??_Buzzer_Main,w
 20241  0A1E  0081               	movwf	1
 20242                           
 20243                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 20244  0A1F  0878               	movf	_Buz,w
 20245  0A20  3E08               	addlw	8
 20246  0A21  0086               	movwf	6
 20247  0A22  3001               	movlw	1	; select bank2/3
 20248  0A23  0087               	movwf	7
 20249  0A24  0878               	movf	_Buz,w
 20250  0A25  3E06               	addlw	6
 20251  0A26  0084               	movwf	4
 20252  0A27  3001               	movlw	1	; select bank2/3
 20253  0A28  0085               	movwf	5
 20254  0A29  3F40               	moviw [0]fsr1
 20255  0A2A  3F80               	movwi [0]fsr0
 20256  0A2B  3F41               	moviw [1]fsr1
 20257  0A2C  3F81               	movwi [1]fsr0
 20258                           
 20259                           ;Buzzer_B1.c: 72: }
 20260  0A2D  0008               	return
 20261  0A2E                     l7650:	
 20262                           
 20263                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 20264  0A2E  0878               	movf	_Buz,w
 20265  0A2F  0086               	movwf	6
 20266  0A30  3001               	movlw	1	; select bank2/3
 20267  0A31  0087               	movwf	7
 20268  0A32  1E01               	btfss	1,4
 20269  0A33  2A56               	goto	l7656
 20270                           
 20271                           ;Buzzer_B1.c: 74: {
 20272                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 20273  0A34  0878               	movf	_Buz,w
 20274  0A35  0086               	movwf	6
 20275  0A36  3001               	movlw	1	; select bank2/3
 20276  0A37  0087               	movwf	7
 20277  0A38  1201               	bcf	1,4
 20278                           
 20279                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 20280  0A39  0878               	movf	_Buz,w
 20281  0A3A  3E05               	addlw	5
 20282  0A3B  0086               	movwf	6
 20283  0A3C  3001               	movlw	1	; select bank2/3
 20284  0A3D  0087               	movwf	7
 20285  0A3E  0801               	movf	1,w
 20286  0A3F  00A0               	movwf	??_Buzzer_Main
 20287  0A40  0878               	movf	_Buz,w
 20288  0A41  3E03               	addlw	3
 20289  0A42  0086               	movwf	6
 20290  0A43  3001               	movlw	1	; select bank2/3
 20291  0A44  0087               	movwf	7
 20292  0A45  0820               	movf	??_Buzzer_Main,w
 20293  0A46  0081               	movwf	1
 20294                           
 20295                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20296  0A47  0878               	movf	_Buz,w
 20297  0A48  3E0A               	addlw	10
 20298  0A49  0086               	movwf	6
 20299  0A4A  3001               	movlw	1	; select bank2/3
 20300  0A4B  0087               	movwf	7
 20301  0A4C  0878               	movf	_Buz,w
 20302  0A4D  3E06               	addlw	6
 20303  0A4E  0084               	movwf	4
 20304  0A4F  3001               	movlw	1	; select bank2/3
 20305  0A50  0085               	movwf	5
 20306  0A51  3F40               	moviw [0]fsr1
 20307  0A52  3F80               	movwi [0]fsr0
 20308  0A53  3F41               	moviw [1]fsr1
 20309  0A54  3F81               	movwi [1]fsr0
 20310                           
 20311                           ;Buzzer_B1.c: 78: }
 20312  0A55  0008               	return
 20313  0A56                     l7656:	
 20314                           
 20315                           ;Buzzer_B1.c: 79: else
 20316                           ;Buzzer_B1.c: 80: {
 20317                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20318  0A56  0878               	movf	_Buz,w
 20319  0A57  0086               	movwf	6
 20320  0A58  3001               	movlw	1	; select bank2/3
 20321  0A59  0087               	movwf	7
 20322  0A5A  1081               	bcf	1,1
 20323                           
 20324                           ;Buzzer_B1.c: 82: }
 20325                           ;Buzzer_B1.c: 83: }
 20326  0A5B  0008               	return
 20327  0A5C                     l7658:	
 20328                           
 20329                           ;Buzzer_B1.c: 84: else
 20330                           ;Buzzer_B1.c: 85: {
 20331                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20332  0A5C  0878               	movf	_Buz,w
 20333  0A5D  0086               	movwf	6
 20334  0A5E  3001               	movlw	1	; select bank2/3
 20335  0A5F  0087               	movwf	7
 20336  0A60  1681               	bsf	1,5
 20337                           
 20338                           ;Buzzer_B1.c: 88: RB3=1;
 20339  0A61  158D               	bsf	13,3	;volatile
 20340                           
 20341                           ;Buzzer_B1.c: 89: }
 20342                           ;Buzzer_B1.c: 90: }
 20343  0A62  0008               	return
 20344  0A63                     l7662:	
 20345                           
 20346                           ;Buzzer_B1.c: 91: else
 20347                           ;Buzzer_B1.c: 92: {
 20348                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20349  0A63  0878               	movf	_Buz,w
 20350  0A64  0086               	movwf	6
 20351  0A65  3001               	movlw	1	; select bank2/3
 20352  0A66  0087               	movwf	7
 20353  0A67  1281               	bcf	1,5
 20354                           
 20355                           ;Buzzer_B1.c: 95: RB3=0;
 20356  0A68  118D               	bcf	13,3	;volatile
 20357                           
 20358                           ;Buzzer_B1.c: 97: Buz->Count--;
 20359  0A69  0878               	movf	_Buz,w
 20360  0A6A  3E03               	addlw	3
 20361  0A6B  0086               	movwf	6
 20362  0A6C  3001               	movlw	1	; select bank2/3
 20363  0A6D  0087               	movwf	7
 20364  0A6E  3001               	movlw	1
 20365  0A6F  0281               	subwf	1,f
 20366  0A70  0008               	return
 20367  0A71                     __end_of_Buzzer_Main:	
 20368                           
 20369                           	psect	text137
 20370  24FC                     __ptext137:	
 20371 ;; *************** function _Buzzer_Initialization *****************
 20372 ;; Defined at:
 20373 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20374 ;; Parameters:    Size  Location     Type
 20375 ;;		None
 20376 ;; Auto vars:     Size  Location     Type
 20377 ;;		None
 20378 ;; Return value:  Size  Location     Type
 20379 ;;		None               void
 20380 ;; Registers used:
 20381 ;;		wreg, fsr1l, fsr1h
 20382 ;; Tracked objects:
 20383 ;;		On entry : 0/0
 20384 ;;		On exit  : 0/0
 20385 ;;		Unchanged: 0/0
 20386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20391 ;;Total ram usage:        1 bytes
 20392 ;; Hardware stack levels used:    1
 20393 ;; Hardware stack levels required when called:    4
 20394 ;; This function calls:
 20395 ;;		Nothing
 20396 ;; This function is called by:
 20397 ;;		_main
 20398 ;; This function uses a non-reentrant model
 20399 ;;
 20400                           
 20401                           
 20402                           ;psect for function _Buzzer_Initialization
 20403  24FC                     _Buzzer_Initialization:	
 20404                           
 20405                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20406                           
 20407                           ;incstack = 0
 20408                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20409  24FC  304D               	movlw	_Buz1& (0+255)
 20410  24FD  0020               	movlb	0	; select bank0
 20411  24FE  00A0               	movwf	??_Buzzer_Initialization
 20412  24FF  0820               	movf	??_Buzzer_Initialization,w
 20413  2500  00F8               	movwf	_Buz
 20414                           
 20415                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20416  2501  0878               	movf	_Buz,w
 20417  2502  0086               	movwf	6
 20418  2503  3001               	movlw	1	; select bank2/3
 20419  2504  0087               	movwf	7
 20420  2505  1401               	bsf	1,0
 20421  2506  0008               	return
 20422  2507                     __end_of_Buzzer_Initialization:	
 20423                           
 20424                           	psect	intentry
 20425  0004                     __pintentry:	
 20426 ;; *************** function _ISR *****************
 20427 ;; Defined at:
 20428 ;;		line 99 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20429 ;; Parameters:    Size  Location     Type
 20430 ;;		None
 20431 ;; Auto vars:     Size  Location     Type
 20432 ;;		None
 20433 ;; Return value:  Size  Location     Type
 20434 ;;		None               void
 20435 ;; Registers used:
 20436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20437 ;; Tracked objects:
 20438 ;;		On entry : 0/0
 20439 ;;		On exit  : 0/0
 20440 ;;		Unchanged: 0/0
 20441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20446 ;;Total ram usage:        1 bytes
 20447 ;; Hardware stack levels used:    1
 20448 ;; Hardware stack levels required when called:    3
 20449 ;; This function calls:
 20450 ;;		_INT_ISR
 20451 ;;		_IOC_ISR
 20452 ;;		_TMR0_ISR
 20453 ;; This function is called by:
 20454 ;;		Interrupt level 1
 20455 ;; This function uses a non-reentrant model
 20456 ;;
 20457                           
 20458  0004                     _ISR:	
 20459                           
 20460                           ;incstack = 0
 20461                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20462  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20463  0005  3180               	pagesel	$
 20464  0006  0020               	movlb	0	; select bank0
 20465  0007  087F               	movf	127,w
 20466  0008  00F7               	movwf	??_ISR
 20467                           
 20468                           ;MCU_B1.c: 101: IOC_ISR();
 20469  0009  3199  217F  3180   	fcall	_IOC_ISR
 20470                           
 20471                           ;MCU_B1.c: 103: TMR0_ISR();
 20472  000C  3184  242F  3180   	fcall	_TMR0_ISR
 20473                           
 20474                           ;MCU_B1.c: 105: ;;
 20475                           ;MCU_B1.c: 109: INT_ISR();
 20476  000F  31A5  256B         	fcall	_INT_ISR
 20477  0011  0877               	movf	??_ISR,w
 20478  0012  0020               	movlb	0	; select bank0
 20479  0013  00FF               	movwf	127
 20480  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20481  0015  0009               	retfie
 20482  0016                     __end_of_ISR:	
 20483                           
 20484                           	psect	text139
 20485  042F                     __ptext139:	
 20486 ;; *************** function _TMR0_ISR *****************
 20487 ;; Defined at:
 20488 ;;		line 127 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 20489 ;; Parameters:    Size  Location     Type
 20490 ;;		None
 20491 ;; Auto vars:     Size  Location     Type
 20492 ;;		None
 20493 ;; Return value:  Size  Location     Type
 20494 ;;		None               void
 20495 ;; Registers used:
 20496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20497 ;; Tracked objects:
 20498 ;;		On entry : 0/0
 20499 ;;		On exit  : 0/0
 20500 ;;		Unchanged: 0/0
 20501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20504 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20506 ;;Total ram usage:        4 bytes
 20507 ;; Hardware stack levels used:    1
 20508 ;; Hardware stack levels required when called:    1
 20509 ;; This function calls:
 20510 ;;		i1_setLoad_StatusOff
 20511 ;; This function is called by:
 20512 ;;		_ISR
 20513 ;; This function uses a non-reentrant model
 20514 ;;
 20515                           
 20516                           
 20517                           ;psect for function _TMR0_ISR
 20518  042F                     _TMR0_ISR:	
 20519                           
 20520                           ;MCU_B1.c: 129: if(TMR0IE && TMR0IF)
 20521                           
 20522                           ;incstack = 0
 20523                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20524  042F  1E8B               	btfss	11,5	;volatile
 20525  0430  0008               	return
 20526  0431  1D0B               	btfss	11,2	;volatile
 20527  0432  0008               	return
 20528                           
 20529                           ;MCU_B1.c: 130: {
 20530                           ;MCU_B1.c: 131: TMR0=(256-90);
 20531  0433  30A6               	movlw	166
 20532  0434  0020               	movlb	0	; select bank0
 20533  0435  0095               	movwf	21	;volatile
 20534                           
 20535                           ;MCU_B1.c: 132: TMR0IF=0;
 20536  0436  110B               	bcf	11,2	;volatile
 20537                           
 20538                           ;MCU_B1.c: 137: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20539  0437  0879               	movf	_DimmerLights11,w
 20540  0438  0086               	movwf	6
 20541  0439  3001               	movlw	1	; select bank2/3
 20542  043A  0087               	movwf	7
 20543  043B  1C01               	btfss	1,0
 20544  043C  2C88               	goto	i1l8088
 20545  043D  3001               	movlw	1
 20546  043E  00F3               	movwf	??_TMR0_ISR
 20547  043F  0879               	movf	_DimmerLights11,w
 20548  0440  3E03               	addlw	3
 20549  0441  0086               	movwf	6
 20550  0442  3001               	movlw	1	; select bank2/3
 20551  0443  0087               	movwf	7
 20552  0444  0873               	movf	??_TMR0_ISR,w
 20553  0445  0781               	addwf	1,f
 20554  0446  0021               	movlb	1	; select bank1
 20555  0447  0839               	movf	_Dimmer^(0+128),w
 20556  0448  3E02               	addlw	2
 20557  0449  0086               	movwf	6
 20558  044A  0187               	clrf	7
 20559  044B  0801               	movf	1,w
 20560  044C  00F3               	movwf	??_TMR0_ISR
 20561  044D  01F4               	clrf	??_TMR0_ISR+1
 20562  044E  09F3               	comf	??_TMR0_ISR,f
 20563  044F  09F4               	comf	??_TMR0_ISR+1,f
 20564  0450  0AF3               	incf	??_TMR0_ISR,f
 20565  0451  1903               	skipnz
 20566  0452  0AF4               	incf	??_TMR0_ISR+1,f
 20567  0453  0879               	movf	_DimmerLights11,w
 20568  0454  3E04               	addlw	4
 20569  0455  0086               	movwf	6
 20570  0456  3001               	movlw	1	; select bank2/3
 20571  0457  0087               	movwf	7
 20572  0458  0801               	movf	1,w
 20573  0459  0773               	addwf	??_TMR0_ISR,w
 20574  045A  00F5               	movwf	??_TMR0_ISR+2
 20575  045B  0874               	movf	??_TMR0_ISR+1,w
 20576  045C  1803               	skipnc
 20577  045D  0A74               	incf	??_TMR0_ISR+1,w
 20578  045E  00F6               	movwf	??_TMR0_ISR+3
 20579  045F  0879               	movf	_DimmerLights11,w
 20580  0460  3E03               	addlw	3
 20581  0461  0086               	movwf	6
 20582  0462  3001               	movlw	1	; select bank2/3
 20583  0463  0087               	movwf	7
 20584  0464  0876               	movf	??_TMR0_ISR+3,w
 20585  0465  3A80               	xorlw	128
 20586  0466  3C80               	sublw	128
 20587  0467  1D03               	skipz
 20588  0468  2C6B               	goto	u718_25
 20589  0469  0875               	movf	??_TMR0_ISR+2,w
 20590  046A  0201               	subwf	1,w
 20591  046B                     u718_25:	
 20592  046B  1C03               	skipc
 20593  046C  2DC4               	goto	i1l8158
 20594  046D  0879               	movf	_DimmerLights11,w
 20595  046E  3E03               	addlw	3
 20596  046F  0086               	movwf	6
 20597  0470  3001               	movlw	1	; select bank2/3
 20598  0471  0087               	movwf	7
 20599  0472  0181               	clrf	1
 20600  0473  0879               	movf	_DimmerLights11,w
 20601  0474  0086               	movwf	6
 20602  0475  3001               	movlw	1	; select bank2/3
 20603  0476  0087               	movwf	7
 20604  0477  1001               	bcf	1,0
 20605  0478  0879               	movf	_DimmerLights11,w
 20606  0479  3E07               	addlw	7
 20607  047A  0086               	movwf	6
 20608  047B  3001               	movlw	1	; select bank2/3
 20609  047C  0087               	movwf	7
 20610  047D  1401               	bsf	1,0
 20611  047E  0879               	movf	_DimmerLights11,w
 20612  047F  0086               	movwf	6
 20613  0480  3001               	movlw	1	; select bank2/3
 20614  0481  0087               	movwf	7
 20615  0482  1F01               	btfss	1,6
 20616  0483  2DC4               	goto	i1l8158
 20617  0484  0020               	movlb	0	; select bank0
 20618  0485  178C               	bsf	12,7	;volatile
 20619  0486  160D               	bsf	13,4	;volatile
 20620  0487  2DC4               	goto	i1l8158
 20621  0488                     i1l8088:	
 20622  0488  0879               	movf	_DimmerLights11,w
 20623  0489  3E07               	addlw	7
 20624  048A  0086               	movwf	6
 20625  048B  3001               	movlw	1	; select bank2/3
 20626  048C  0087               	movwf	7
 20627  048D  1C01               	btfss	1,0
 20628  048E  2D8E               	goto	i1l8148
 20629  048F  0879               	movf	_DimmerLights11,w
 20630  0490  3E07               	addlw	7
 20631  0491  0086               	movwf	6
 20632  0492  3001               	movlw	1	; select bank2/3
 20633  0493  0087               	movwf	7
 20634  0494  1001               	bcf	1,0
 20635  0495  0879               	movf	_DimmerLights11,w
 20636  0496  0086               	movwf	6
 20637  0497  3001               	movlw	1	; select bank2/3
 20638  0498  0087               	movwf	7
 20639  0499  1C81               	btfss	1,1
 20640  049A  2D8E               	goto	i1l8148
 20641  049B  3001               	movlw	1
 20642  049C  00F3               	movwf	??_TMR0_ISR
 20643  049D  0A79               	incf	_DimmerLights11,w
 20644  049E  0086               	movwf	6
 20645  049F  3001               	movlw	1	; select bank2/3
 20646  04A0  0087               	movwf	7
 20647  04A1  0873               	movf	??_TMR0_ISR,w
 20648  04A2  0781               	addwf	1,f
 20649  04A3  0A79               	incf	_DimmerLights11,w
 20650  04A4  0086               	movwf	6
 20651  04A5  3001               	movlw	1	; select bank2/3
 20652  04A6  0087               	movwf	7
 20653  04A7  0879               	movf	_DimmerLights11,w
 20654  04A8  3E02               	addlw	2
 20655  04A9  0084               	movwf	4
 20656  04AA  3001               	movlw	1	; select bank2/3
 20657  04AB  0085               	movwf	5
 20658  04AC  0800               	movf	0,w
 20659  04AD  0201               	subwf	1,w
 20660  04AE  1C03               	skipc
 20661  04AF  2D8E               	goto	i1l8148
 20662  04B0  0A79               	incf	_DimmerLights11,w
 20663  04B1  0086               	movwf	6
 20664  04B2  3001               	movlw	1	; select bank2/3
 20665  04B3  0087               	movwf	7
 20666  04B4  0181               	clrf	1
 20667  04B5  0879               	movf	_DimmerLights11,w
 20668  04B6  0086               	movwf	6
 20669  04B7  3001               	movlw	1	; select bank2/3
 20670  04B8  0087               	movwf	7
 20671  04B9  1D81               	btfss	1,3
 20672  04BA  2CF1               	goto	i1l8114
 20673  04BB  0879               	movf	_DimmerLights11,w
 20674  04BC  0086               	movwf	6
 20675  04BD  3001               	movlw	1	; select bank2/3
 20676  04BE  0087               	movwf	7
 20677  04BF  1A01               	btfsc	1,4
 20678  04C0  2CD8               	goto	i1l8108
 20679  04C1  0879               	movf	_DimmerLights11,w
 20680  04C2  3E04               	addlw	4
 20681  04C3  0086               	movwf	6
 20682  04C4  3001               	movlw	1	; select bank2/3
 20683  04C5  0087               	movwf	7
 20684  04C6  3044               	movlw	68
 20685  04C7  0201               	subwf	1,w
 20686  04C8  1C03               	skipc
 20687  04C9  2CD2               	goto	i1l8106
 20688  04CA  0879               	movf	_DimmerLights11,w
 20689  04CB  3E04               	addlw	4
 20690  04CC  0086               	movwf	6
 20691  04CD  3001               	movlw	1	; select bank2/3
 20692  04CE  0087               	movwf	7
 20693  04CF  3001               	movlw	1
 20694  04D0  0281               	subwf	1,f
 20695  04D1  2D8E               	goto	i1l8148
 20696  04D2                     i1l8106:	
 20697  04D2  0879               	movf	_DimmerLights11,w
 20698  04D3  0086               	movwf	6
 20699  04D4  3001               	movlw	1	; select bank2/3
 20700  04D5  0087               	movwf	7
 20701  04D6  1601               	bsf	1,4
 20702  04D7  2D8E               	goto	i1l8148
 20703  04D8                     i1l8108:	
 20704  04D8  0879               	movf	_DimmerLights11,w
 20705  04D9  3E04               	addlw	4
 20706  04DA  0086               	movwf	6
 20707  04DB  3001               	movlw	1	; select bank2/3
 20708  04DC  0087               	movwf	7
 20709  04DD  3078               	movlw	120
 20710  04DE  0201               	subwf	1,w
 20711  04DF  1803               	skipnc
 20712  04E0  2CEB               	goto	i1l8112
 20713  04E1  3001               	movlw	1
 20714  04E2  00F3               	movwf	??_TMR0_ISR
 20715  04E3  0879               	movf	_DimmerLights11,w
 20716  04E4  3E04               	addlw	4
 20717  04E5  0086               	movwf	6
 20718  04E6  3001               	movlw	1	; select bank2/3
 20719  04E7  0087               	movwf	7
 20720  04E8  0873               	movf	??_TMR0_ISR,w
 20721  04E9  0781               	addwf	1,f
 20722  04EA  2D8E               	goto	i1l8148
 20723  04EB                     i1l8112:	
 20724  04EB  0879               	movf	_DimmerLights11,w
 20725  04EC  0086               	movwf	6
 20726  04ED  3001               	movlw	1	; select bank2/3
 20727  04EE  0087               	movwf	7
 20728  04EF  1201               	bcf	1,4
 20729  04F0  2D8E               	goto	i1l8148
 20730  04F1                     i1l8114:	
 20731  04F1  0879               	movf	_DimmerLights11,w
 20732  04F2  0086               	movwf	6
 20733  04F3  3001               	movlw	1	; select bank2/3
 20734  04F4  0087               	movwf	7
 20735  04F5  1D01               	btfss	1,2
 20736  04F6  2D38               	goto	i1l8128
 20737  04F7  0879               	movf	_DimmerLights11,w
 20738  04F8  3E05               	addlw	5
 20739  04F9  0086               	movwf	6
 20740  04FA  3001               	movlw	1	; select bank2/3
 20741  04FB  0087               	movwf	7
 20742  04FC  0879               	movf	_DimmerLights11,w
 20743  04FD  3E04               	addlw	4
 20744  04FE  0084               	movwf	4
 20745  04FF  3001               	movlw	1	; select bank2/3
 20746  0500  0085               	movwf	5
 20747  0501  0800               	movf	0,w
 20748  0502  0201               	subwf	1,w
 20749  0503  1803               	skipnc
 20750  0504  2D0D               	goto	i1l8120
 20751  0505  0879               	movf	_DimmerLights11,w
 20752  0506  3E04               	addlw	4
 20753  0507  0086               	movwf	6
 20754  0508  3001               	movlw	1	; select bank2/3
 20755  0509  0087               	movwf	7
 20756  050A  3001               	movlw	1
 20757  050B  0281               	subwf	1,f
 20758  050C  2D24               	goto	i1l8124
 20759  050D                     i1l8120:	
 20760  050D  0879               	movf	_DimmerLights11,w
 20761  050E  3E04               	addlw	4
 20762  050F  0086               	movwf	6
 20763  0510  3001               	movlw	1	; select bank2/3
 20764  0511  0087               	movwf	7
 20765  0512  0879               	movf	_DimmerLights11,w
 20766  0513  3E05               	addlw	5
 20767  0514  0084               	movwf	4
 20768  0515  3001               	movlw	1	; select bank2/3
 20769  0516  0085               	movwf	5
 20770  0517  0800               	movf	0,w
 20771  0518  0201               	subwf	1,w
 20772  0519  1803               	skipnc
 20773  051A  2D24               	goto	i1l8124
 20774  051B  3001               	movlw	1
 20775  051C  00F3               	movwf	??_TMR0_ISR
 20776  051D  0879               	movf	_DimmerLights11,w
 20777  051E  3E04               	addlw	4
 20778  051F  0086               	movwf	6
 20779  0520  3001               	movlw	1	; select bank2/3
 20780  0521  0087               	movwf	7
 20781  0522  0873               	movf	??_TMR0_ISR,w
 20782  0523  0781               	addwf	1,f
 20783  0524                     i1l8124:	
 20784  0524  0879               	movf	_DimmerLights11,w
 20785  0525  3E05               	addlw	5
 20786  0526  0086               	movwf	6
 20787  0527  3001               	movlw	1	; select bank2/3
 20788  0528  0087               	movwf	7
 20789  0529  0879               	movf	_DimmerLights11,w
 20790  052A  3E04               	addlw	4
 20791  052B  0084               	movwf	4
 20792  052C  3001               	movlw	1	; select bank2/3
 20793  052D  0085               	movwf	5
 20794  052E  0800               	movf	0,w
 20795  052F  0601               	xorwf	1,w
 20796  0530  1D03               	skipz
 20797  0531  2D8E               	goto	i1l8148
 20798  0532  0879               	movf	_DimmerLights11,w
 20799  0533  0086               	movwf	6
 20800  0534  3001               	movlw	1	; select bank2/3
 20801  0535  0087               	movwf	7
 20802  0536  1101               	bcf	1,2
 20803  0537  2D53               	goto	i1l8134
 20804  0538                     i1l8128:	
 20805  0538  0879               	movf	_DimmerLights11,w
 20806  0539  0086               	movwf	6
 20807  053A  3001               	movlw	1	; select bank2/3
 20808  053B  0087               	movwf	7
 20809  053C  1E81               	btfss	1,5
 20810  053D  2D59               	goto	i1l8136
 20811  053E  0879               	movf	_DimmerLights11,w
 20812  053F  3E04               	addlw	4
 20813  0540  0086               	movwf	6
 20814  0541  3001               	movlw	1	; select bank2/3
 20815  0542  0087               	movwf	7
 20816  0543  3001               	movlw	1
 20817  0544  0281               	subwf	1,f
 20818  0545  0879               	movf	_DimmerLights11,w
 20819  0546  3E05               	addlw	5
 20820  0547  0086               	movwf	6
 20821  0548  3001               	movlw	1	; select bank2/3
 20822  0549  0087               	movwf	7
 20823  054A  0879               	movf	_DimmerLights11,w
 20824  054B  3E04               	addlw	4
 20825  054C  0084               	movwf	4
 20826  054D  3001               	movlw	1	; select bank2/3
 20827  054E  0085               	movwf	5
 20828  054F  0800               	movf	0,w
 20829  0550  0201               	subwf	1,w
 20830  0551  1C03               	skipc
 20831  0552  2D8E               	goto	i1l8148
 20832  0553                     i1l8134:	
 20833  0553  0879               	movf	_DimmerLights11,w
 20834  0554  0086               	movwf	6
 20835  0555  3001               	movlw	1	; select bank2/3
 20836  0556  0087               	movwf	7
 20837  0557  1081               	bcf	1,1
 20838  0558  2D8E               	goto	i1l8148
 20839  0559                     i1l8136:	
 20840  0559  3001               	movlw	1
 20841  055A  00F3               	movwf	??_TMR0_ISR
 20842  055B  0879               	movf	_DimmerLights11,w
 20843  055C  3E04               	addlw	4
 20844  055D  0086               	movwf	6
 20845  055E  3001               	movlw	1	; select bank2/3
 20846  055F  0087               	movwf	7
 20847  0560  0873               	movf	??_TMR0_ISR,w
 20848  0561  0781               	addwf	1,f
 20849  0562  0879               	movf	_DimmerLights11,w
 20850  0563  3E04               	addlw	4
 20851  0564  0086               	movwf	6
 20852  0565  3001               	movlw	1	; select bank2/3
 20853  0566  0087               	movwf	7
 20854  0567  0879               	movf	_DimmerLights11,w
 20855  0568  3E06               	addlw	6
 20856  0569  0084               	movwf	4
 20857  056A  3001               	movlw	1	; select bank2/3
 20858  056B  0085               	movwf	5
 20859  056C  0800               	movf	0,w
 20860  056D  0201               	subwf	1,w
 20861  056E  1C03               	skipc
 20862  056F  2D8E               	goto	i1l8148
 20863  0570  0879               	movf	_DimmerLights11,w
 20864  0571  0086               	movwf	6
 20865  0572  3001               	movlw	1	; select bank2/3
 20866  0573  0087               	movwf	7
 20867  0574  1081               	bcf	1,1
 20868  0575  0879               	movf	_DimmerLights11,w
 20869  0576  0086               	movwf	6
 20870  0577  3001               	movlw	1	; select bank2/3
 20871  0578  0087               	movwf	7
 20872  0579  1301               	bcf	1,6
 20873  057A  0879               	movf	_DimmerLights11,w
 20874  057B  3E0C               	addlw	12
 20875  057C  0086               	movwf	6
 20876  057D  3001               	movlw	1	; select bank2/3
 20877  057E  0087               	movwf	7
 20878  057F  1401               	bsf	1,0
 20879  0580  0021               	movlb	1	; select bank1
 20880  0581  0839               	movf	_Dimmer^(0+128),w
 20881  0582  0086               	movwf	6
 20882  0583  0187               	clrf	7
 20883  0584  1401               	bsf	1,0
 20884  0585  0020               	movlb	0	; select bank0
 20885  0586  118C               	bcf	12,3	;volatile
 20886  0587  138E               	bcf	14,7	;volatile
 20887  0588  01F1               	clrf	i1setLoad_StatusOff@command
 20888  0589  0AF1               	incf	i1setLoad_StatusOff@command,f
 20889  058A  3001               	movlw	1
 20890  058B  319B  2326  3184   	fcall	i1_setLoad_StatusOff
 20891  058E                     i1l8148:	
 20892  058E  0020               	movlb	0	; select bank0
 20893  058F  1F8C               	btfss	12,7	;volatile
 20894  0590  2DC4               	goto	i1l8158
 20895  0591  3001               	movlw	1
 20896  0592  00F3               	movwf	??_TMR0_ISR
 20897  0593  0879               	movf	_DimmerLights11,w
 20898  0594  3E08               	addlw	8
 20899  0595  0086               	movwf	6
 20900  0596  3001               	movlw	1	; select bank2/3
 20901  0597  0087               	movwf	7
 20902  0598  0873               	movf	??_TMR0_ISR,w
 20903  0599  0781               	addwf	1,f
 20904  059A  0879               	movf	_DimmerLights11,w
 20905  059B  3E04               	addlw	4
 20906  059C  0086               	movwf	6
 20907  059D  3001               	movlw	1	; select bank2/3
 20908  059E  0087               	movwf	7
 20909  059F  0801               	movf	1,w
 20910  05A0  00F3               	movwf	??_TMR0_ISR
 20911  05A1  01F4               	clrf	??_TMR0_ISR+1
 20912  05A2  09F3               	comf	??_TMR0_ISR,f
 20913  05A3  09F4               	comf	??_TMR0_ISR+1,f
 20914  05A4  0AF3               	incf	??_TMR0_ISR,f
 20915  05A5  1903               	skipnz
 20916  05A6  0AF4               	incf	??_TMR0_ISR+1,f
 20917  05A7  0873               	movf	??_TMR0_ISR,w
 20918  05A8  3E78               	addlw	120
 20919  05A9  00F5               	movwf	??_TMR0_ISR+2
 20920  05AA  3000               	movlw	0
 20921  05AB  3D74               	addwfc	??_TMR0_ISR+1,w
 20922  05AC  00F6               	movwf	??_TMR0_ISR+3
 20923  05AD  0879               	movf	_DimmerLights11,w
 20924  05AE  3E08               	addlw	8
 20925  05AF  0086               	movwf	6
 20926  05B0  3001               	movlw	1	; select bank2/3
 20927  05B1  0087               	movwf	7
 20928  05B2  0876               	movf	??_TMR0_ISR+3,w
 20929  05B3  3A80               	xorlw	128
 20930  05B4  3C80               	sublw	128
 20931  05B5  1D03               	skipz
 20932  05B6  2DB9               	goto	u735_25
 20933  05B7  0875               	movf	??_TMR0_ISR+2,w
 20934  05B8  0201               	subwf	1,w
 20935  05B9                     u735_25:	
 20936  05B9  1C03               	skipc
 20937  05BA  2DC4               	goto	i1l8158
 20938  05BB  0879               	movf	_DimmerLights11,w
 20939  05BC  3E08               	addlw	8
 20940  05BD  0086               	movwf	6
 20941  05BE  3001               	movlw	1	; select bank2/3
 20942  05BF  0087               	movwf	7
 20943  05C0  0181               	clrf	1
 20944  05C1  0020               	movlb	0	; select bank0
 20945  05C2  138C               	bcf	12,7	;volatile
 20946  05C3  120D               	bcf	13,4	;volatile
 20947  05C4                     i1l8158:	
 20948                           
 20949                           ;MCU_B1.c: 150: Timer0->Count++;
 20950  05C4  0021               	movlb	1	; select bank1
 20951  05C5  0A68               	incf	_Timer0^(0+128),w
 20952  05C6  0086               	movwf	6
 20953  05C7  0187               	clrf	7
 20954  05C8  3001               	movlw	1
 20955  05C9  0781               	addwf	1,f
 20956  05CA  3141               	addfsr 1,1
 20957  05CB  1803               	skipnc
 20958  05CC  0A81               	incf	1,f
 20959                           
 20960                           ;MCU_B1.c: 151: if(Timer0->Count == 200)
 20961  05CD  0A68               	incf	_Timer0^(0+128),w
 20962  05CE  0086               	movwf	6
 20963  05CF  0187               	clrf	7
 20964  05D0  3F40               	moviw [0]fsr1
 20965  05D1  3AC8               	xorlw	200
 20966  05D2  1D03               	skipz
 20967  05D3  2DD6               	goto	u736_25
 20968  05D4  3F41               	moviw [1]fsr1
 20969  05D5  3A00               	xorlw	0
 20970  05D6                     u736_25:	
 20971  05D6  1D03               	skipz
 20972  05D7  2DE3               	goto	i1l1610
 20973                           
 20974                           ;MCU_B1.c: 152: {
 20975                           ;MCU_B1.c: 153: Timer0->Count=0;
 20976  05D8  0A68               	incf	_Timer0^(0+128),w
 20977  05D9  0086               	movwf	6
 20978  05DA  0187               	clrf	7
 20979  05DB  3000               	movlw	0
 20980  05DC  3FC0               	movwi [0]fsr1
 20981  05DD  3FC1               	movwi [1]fsr1
 20982                           
 20983                           ;MCU_B1.c: 154: TMain->T0_Timerout=1;
 20984  05DE  087D               	movf	_TMain,w
 20985  05DF  0086               	movwf	6
 20986  05E0  3001               	movlw	1	; select bank2/3
 20987  05E1  0087               	movwf	7
 20988  05E2  1481               	bsf	1,1
 20989  05E3                     i1l1610:	
 20990                           
 20991                           ;MCU_B1.c: 155: }
 20992                           ;MCU_B1.c: 158: if(Buz->GO)
 20993  05E3  0878               	movf	_Buz,w
 20994  05E4  0086               	movwf	6
 20995  05E5  3001               	movlw	1	; select bank2/3
 20996  05E6  0087               	movwf	7
 20997  05E7  1C81               	btfss	1,1
 20998  05E8  0008               	return
 20999                           
 21000                           ;MCU_B1.c: 159: {
 21001                           ;MCU_B1.c: 160: Buz->Time++;
 21002  05E9  0A78               	incf	_Buz,w
 21003  05EA  0086               	movwf	6
 21004  05EB  3001               	movlw	1	; select bank2/3
 21005  05EC  0087               	movwf	7
 21006  05ED  3001               	movlw	1
 21007  05EE  0781               	addwf	1,f
 21008  05EF  3141               	addfsr 1,1
 21009  05F0  1803               	skipnc
 21010  05F1  0A81               	incf	1,f
 21011  05F2  0008               	return
 21012  05F3                     __end_of_TMR0_ISR:	
 21013                           
 21014                           	psect	text140
 21015  1B26                     __ptext140:	
 21016 ;; *************** function i1_setLoad_StatusOff *****************
 21017 ;; Defined at:
 21018 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 21019 ;; Parameters:    Size  Location     Type
 21020 ;;  lights          1    wreg     unsigned char 
 21021 ;;  command         1    0[COMMON] unsigned char 
 21022 ;; Auto vars:     Size  Location     Type
 21023 ;;  lights          1    1[COMMON] unsigned char 
 21024 ;; Return value:  Size  Location     Type
 21025 ;;		None               void
 21026 ;; Registers used:
 21027 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21028 ;; Tracked objects:
 21029 ;;		On entry : 0/0
 21030 ;;		On exit  : 0/0
 21031 ;;		Unchanged: 0/0
 21032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21033 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21037 ;;Total ram usage:        2 bytes
 21038 ;; Hardware stack levels used:    1
 21039 ;; This function calls:
 21040 ;;		Nothing
 21041 ;; This function is called by:
 21042 ;;		_TMR0_ISR
 21043 ;; This function uses a non-reentrant model
 21044 ;;
 21045                           
 21046                           
 21047                           ;psect for function i1_setLoad_StatusOff
 21048  1B26                     i1_setLoad_StatusOff:	
 21049                           
 21050                           ;incstack = 0
 21051                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 21052                           ;i1setLoad_StatusOff@lights stored from wreg
 21053  1B26  00F2               	movwf	i1setLoad_StatusOff@lights
 21054                           
 21055                           ;OverLoad_B1.c: 324: Load->StatusOff=command;
 21056  1B27  0020               	movlb	0	; select bank0
 21057  1B28  086E               	movf	_Load,w
 21058  1B29  3E46               	addlw	70
 21059  1B2A  0086               	movwf	6
 21060  1B2B  3002               	movlw	2	; select bank4/5
 21061  1B2C  0087               	movwf	7
 21062  1B2D  0871               	movf	i1setLoad_StatusOff@command,w
 21063  1B2E  1081               	bcf	1,1
 21064  1B2F  1D03               	skipz
 21065  1B30  1481               	bsf	1,1
 21066                           
 21067                           ;OverLoad_B1.c: 325: Load->SafeCount-=2;
 21068  1B31  086E               	movf	_Load,w
 21069  1B32  3E42               	addlw	66
 21070  1B33  0086               	movwf	6
 21071  1B34  3002               	movlw	2	; select bank4/5
 21072  1B35  0087               	movwf	7
 21073  1B36  3002               	movlw	2
 21074  1B37  0281               	subwf	1,f
 21075                           
 21076                           ;OverLoad_B1.c: 326: if(lights == 1)
 21077  1B38  0872               	movf	i1setLoad_StatusOff@lights,w
 21078  1B39  3A01               	xorlw	1
 21079  1B3A  1D03               	skipz
 21080  1B3B  2B42               	goto	i1l7624
 21081                           
 21082                           ;OverLoad_B1.c: 327: {
 21083                           ;OverLoad_B1.c: 328: Load->Lights1Status=0;
 21084  1B3C  086E               	movf	_Load,w
 21085  1B3D  3E43               	addlw	67
 21086  1B3E  0086               	movwf	6
 21087  1B3F  3002               	movlw	2	; select bank4/5
 21088  1B40  0087               	movwf	7
 21089  1B41  0181               	clrf	1
 21090  1B42                     i1l7624:	
 21091                           
 21092                           ;OverLoad_B1.c: 329: }
 21093                           ;OverLoad_B1.c: 330: if(lights == 2)
 21094  1B42  0872               	movf	i1setLoad_StatusOff@lights,w
 21095  1B43  3A02               	xorlw	2
 21096  1B44  1D03               	skipz
 21097  1B45  2B4C               	goto	i1l7628
 21098                           
 21099                           ;OverLoad_B1.c: 331: {
 21100                           ;OverLoad_B1.c: 332: Load->Lights2Status=0;
 21101  1B46  086E               	movf	_Load,w
 21102  1B47  3E44               	addlw	68
 21103  1B48  0086               	movwf	6
 21104  1B49  3002               	movlw	2	; select bank4/5
 21105  1B4A  0087               	movwf	7
 21106  1B4B  0181               	clrf	1
 21107  1B4C                     i1l7628:	
 21108                           
 21109                           ;OverLoad_B1.c: 333: }
 21110                           ;OverLoad_B1.c: 334: if(lights == 3)
 21111  1B4C  0872               	movf	i1setLoad_StatusOff@lights,w
 21112  1B4D  3A03               	xorlw	3
 21113  1B4E  1D03               	skipz
 21114  1B4F  0008               	return
 21115                           
 21116                           ;OverLoad_B1.c: 335: {
 21117                           ;OverLoad_B1.c: 336: Load->Lights3Status=0;
 21118  1B50  086E               	movf	_Load,w
 21119  1B51  3E45               	addlw	69
 21120  1B52  0086               	movwf	6
 21121  1B53  3002               	movlw	2	; select bank4/5
 21122  1B54  0087               	movwf	7
 21123  1B55  0181               	clrf	1
 21124  1B56  0008               	return
 21125  1B57                     __end_ofi1_setLoad_StatusOff:	
 21126                           
 21127                           	psect	text141
 21128  197F                     __ptext141:	
 21129 ;; *************** function _IOC_ISR *****************
 21130 ;; Defined at:
 21131 ;;		line 342 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21132 ;; Parameters:    Size  Location     Type
 21133 ;;		None
 21134 ;; Auto vars:     Size  Location     Type
 21135 ;;		None
 21136 ;; Return value:  Size  Location     Type
 21137 ;;		None               void
 21138 ;; Registers used:
 21139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21140 ;; Tracked objects:
 21141 ;;		On entry : 0/0
 21142 ;;		On exit  : 0/0
 21143 ;;		Unchanged: 0/0
 21144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21149 ;;Total ram usage:        1 bytes
 21150 ;; Hardware stack levels used:    1
 21151 ;; Hardware stack levels required when called:    1
 21152 ;; This function calls:
 21153 ;;		_setDimmerReClock
 21154 ;; This function is called by:
 21155 ;;		_ISR
 21156 ;; This function uses a non-reentrant model
 21157 ;;
 21158                           
 21159                           
 21160                           ;psect for function _IOC_ISR
 21161  197F                     _IOC_ISR:	
 21162                           
 21163                           ;MCU_B1.c: 344: if(IOCIE && IOCBF2)
 21164                           
 21165                           ;incstack = 0
 21166                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21167  197F  1D8B               	btfss	11,3	;volatile
 21168  1980  0008               	return
 21169  1981  0027               	movlb	7	; select bank7
 21170  1982  1D16               	btfss	22,2	;volatile
 21171  1983  0008               	return
 21172                           
 21173                           ;MCU_B1.c: 345: {
 21174                           ;MCU_B1.c: 346: IOCBF2=0;
 21175  1984  1116               	bcf	22,2	;volatile
 21176                           
 21177                           ;MCU_B1.c: 347: IOCIF=0;
 21178  1985  100B               	bcf	11,0	;volatile
 21179                           
 21180                           ;MCU_B1.c: 348: if(TMain->PowerON)
 21181  1986  087D               	movf	_TMain,w
 21182  1987  0086               	movwf	6
 21183  1988  3001               	movlw	1	; select bank2/3
 21184  1989  0087               	movwf	7
 21185  198A  1C01               	btfss	1,0
 21186  198B  0008               	return
 21187                           
 21188                           ;MCU_B1.c: 349: {
 21189                           ;MCU_B1.c: 353: setDimmerReClock();
 21190  198C  31A6  260D  3199   	fcall	_setDimmerReClock
 21191                           
 21192                           ;MCU_B1.c: 354: if(RB2)
 21193  198F  0020               	movlb	0	; select bank0
 21194  1990  1D0D               	btfss	13,2	;volatile
 21195  1991  2999               	goto	i1l8064
 21196                           
 21197                           ;MCU_B1.c: 355: {
 21198                           ;MCU_B1.c: 356: Dimmer->Correction=0;
 21199  1992  0021               	movlb	1	; select bank1
 21200  1993  0839               	movf	_Dimmer^(0+128),w
 21201  1994  3E02               	addlw	2
 21202  1995  0086               	movwf	6
 21203  1996  0187               	clrf	7
 21204  1997  0181               	clrf	1
 21205                           
 21206                           ;MCU_B1.c: 357: }
 21207  1998  0008               	return
 21208  1999                     i1l8064:	
 21209                           
 21210                           ;MCU_B1.c: 358: else
 21211                           ;MCU_B1.c: 359: {
 21212                           ;MCU_B1.c: 360: Dimmer->Correction=8;
 21213  1999  3008               	movlw	8
 21214  199A  00F1               	movwf	??_IOC_ISR
 21215  199B  0021               	movlb	1	; select bank1
 21216  199C  0839               	movf	_Dimmer^(0+128),w
 21217  199D  3E02               	addlw	2
 21218  199E  0086               	movwf	6
 21219  199F  0187               	clrf	7
 21220  19A0  0871               	movf	??_IOC_ISR,w
 21221  19A1  0081               	movwf	1
 21222  19A2  0008               	return
 21223  19A3                     __end_of_IOC_ISR:	
 21224                           
 21225                           	psect	text142
 21226  260D                     __ptext142:	
 21227 ;; *************** function _setDimmerReClock *****************
 21228 ;; Defined at:
 21229 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21230 ;; Parameters:    Size  Location     Type
 21231 ;;		None
 21232 ;; Auto vars:     Size  Location     Type
 21233 ;;		None
 21234 ;; Return value:  Size  Location     Type
 21235 ;;		None               void
 21236 ;; Registers used:
 21237 ;;		wreg, fsr1l, fsr1h
 21238 ;; Tracked objects:
 21239 ;;		On entry : 0/0
 21240 ;;		On exit  : 0/0
 21241 ;;		Unchanged: 0/0
 21242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21247 ;;Total ram usage:        0 bytes
 21248 ;; Hardware stack levels used:    1
 21249 ;; This function calls:
 21250 ;;		Nothing
 21251 ;; This function is called by:
 21252 ;;		_IOC_ISR
 21253 ;; This function uses a non-reentrant model
 21254 ;;
 21255                           
 21256                           
 21257                           ;psect for function _setDimmerReClock
 21258  260D                     _setDimmerReClock:	
 21259                           
 21260                           ;MCU_B1.c: 170: TMR0=255;
 21261                           
 21262                           ;incstack = 0
 21263                           ; Regs used in _setDimmerReClock: [wregfsr1]
 21264  260D  30FF               	movlw	255
 21265  260E  0020               	movlb	0	; select bank0
 21266  260F  0095               	movwf	21	;volatile
 21267                           
 21268                           ;MCU_B1.c: 175: if(!DimmerLights11->GO)
 21269  2610  0879               	movf	_DimmerLights11,w
 21270  2611  0086               	movwf	6
 21271  2612  3001               	movlw	1	; select bank2/3
 21272  2613  0087               	movwf	7
 21273  2614  1801               	btfsc	1,0
 21274  2615  0008               	return
 21275                           
 21276                           ;MCU_B1.c: 176: {
 21277                           ;MCU_B1.c: 177: DimmerLights11->GO=1;
 21278  2616  0879               	movf	_DimmerLights11,w
 21279  2617  0086               	movwf	6
 21280  2618  3001               	movlw	1	; select bank2/3
 21281  2619  0087               	movwf	7
 21282  261A  1401               	bsf	1,0
 21283  261B  0008               	return
 21284  261C                     __end_of_setDimmerReClock:	
 21285                           
 21286                           	psect	text143
 21287  256B                     __ptext143:	
 21288 ;; *************** function _INT_ISR *****************
 21289 ;; Defined at:
 21290 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
 21291 ;; Parameters:    Size  Location     Type
 21292 ;;		None
 21293 ;; Auto vars:     Size  Location     Type
 21294 ;;		None
 21295 ;; Return value:  Size  Location     Type
 21296 ;;		None               void
 21297 ;; Registers used:
 21298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21299 ;; Tracked objects:
 21300 ;;		On entry : 0/0
 21301 ;;		On exit  : 0/0
 21302 ;;		Unchanged: 0/0
 21303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21308 ;;Total ram usage:        0 bytes
 21309 ;; Hardware stack levels used:    1
 21310 ;; Hardware stack levels required when called:    2
 21311 ;; This function calls:
 21312 ;;		_setRF_ReceiveGO
 21313 ;; This function is called by:
 21314 ;;		_ISR
 21315 ;; This function uses a non-reentrant model
 21316 ;;
 21317                           
 21318                           
 21319                           ;psect for function _INT_ISR
 21320  256B                     _INT_ISR:	
 21321                           
 21322                           ;MCU_B1.c: 295: if(INTE && INTF)
 21323                           
 21324                           ;incstack = 0
 21325                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21326  256B  1E0B               	btfss	11,4	;volatile
 21327  256C  0008               	return
 21328  256D  1C8B               	btfss	11,1	;volatile
 21329  256E  0008               	return
 21330                           
 21331                           ;MCU_B1.c: 296: {
 21332                           ;MCU_B1.c: 297: INTF=0;
 21333  256F  108B               	bcf	11,1	;volatile
 21334                           
 21335                           ;MCU_B1.c: 298: INTE=0;
 21336  2570  120B               	bcf	11,4	;volatile
 21337                           
 21338                           ;MCU_B1.c: 299: setRF_ReceiveGO(1,1);
 21339  2571  01F3               	clrf	setRF_ReceiveGO@command
 21340  2572  0AF3               	incf	setRF_ReceiveGO@command,f
 21341  2573  3001               	movlw	1
 21342  2574  31A5  255F         	fcall	_setRF_ReceiveGO
 21343  2576  0008               	return
 21344  2577                     __end_of_INT_ISR:	
 21345                           
 21346                           	psect	text144
 21347  255F                     __ptext144:	
 21348 ;; *************** function _setRF_ReceiveGO *****************
 21349 ;; Defined at:
 21350 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21351 ;; Parameters:    Size  Location     Type
 21352 ;;  rf              1    wreg     unsigned char 
 21353 ;;  command         1    2[COMMON] unsigned char 
 21354 ;; Auto vars:     Size  Location     Type
 21355 ;;  rf              1    3[COMMON] unsigned char 
 21356 ;; Return value:  Size  Location     Type
 21357 ;;		None               void
 21358 ;; Registers used:
 21359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21360 ;; Tracked objects:
 21361 ;;		On entry : 0/0
 21362 ;;		On exit  : 0/0
 21363 ;;		Unchanged: 0/0
 21364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21365 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21369 ;;Total ram usage:        2 bytes
 21370 ;; Hardware stack levels used:    1
 21371 ;; Hardware stack levels required when called:    1
 21372 ;; This function calls:
 21373 ;;		i1_RfPointSelect
 21374 ;; This function is called by:
 21375 ;;		_INT_ISR
 21376 ;; This function uses a non-reentrant model
 21377 ;;
 21378                           
 21379                           
 21380                           ;psect for function _setRF_ReceiveGO
 21381  255F                     _setRF_ReceiveGO:	
 21382                           
 21383                           ;incstack = 0
 21384                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21385                           ;setRF_ReceiveGO@rf stored from wreg
 21386  255F  00F4               	movwf	setRF_ReceiveGO@rf
 21387                           
 21388                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21389  2560  0874               	movf	setRF_ReceiveGO@rf,w
 21390  2561  31A4  24F2         	fcall	i1_RfPointSelect
 21391                           
 21392                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21393  2563  087B               	movf	_RF,w
 21394  2564  0086               	movwf	6
 21395  2565  0187               	clrf	7
 21396  2566  0873               	movf	setRF_ReceiveGO@command,w
 21397  2567  1081               	bcf	1,1
 21398  2568  1D03               	skipz
 21399  2569  1481               	bsf	1,1
 21400  256A  0008               	return
 21401  256B                     __end_of_setRF_ReceiveGO:	
 21402                           
 21403                           	psect	text145
 21404  24F2                     __ptext145:	
 21405 ;; *************** function i1_RfPointSelect *****************
 21406 ;; Defined at:
 21407 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21408 ;; Parameters:    Size  Location     Type
 21409 ;;  rf              1    wreg     unsigned char 
 21410 ;; Auto vars:     Size  Location     Type
 21411 ;;  rf              1    1[COMMON] unsigned char 
 21412 ;; Return value:  Size  Location     Type
 21413 ;;		None               void
 21414 ;; Registers used:
 21415 ;;		wreg
 21416 ;; Tracked objects:
 21417 ;;		On entry : 0/0
 21418 ;;		On exit  : 0/0
 21419 ;;		Unchanged: 0/0
 21420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21425 ;;Total ram usage:        2 bytes
 21426 ;; Hardware stack levels used:    1
 21427 ;; This function calls:
 21428 ;;		Nothing
 21429 ;; This function is called by:
 21430 ;;		_setRF_ReceiveGO
 21431 ;; This function uses a non-reentrant model
 21432 ;;
 21433                           
 21434                           
 21435                           ;psect for function i1_RfPointSelect
 21436  24F2                     i1_RfPointSelect:	
 21437                           
 21438                           ;incstack = 0
 21439                           ; Regs used in i1_RfPointSelect: [wreg]
 21440                           ;i1RfPointSelect@rf stored from wreg
 21441  24F2  00F2               	movwf	i1RfPointSelect@rf
 21442                           
 21443                           ;RF_Control_B1.c: 10: if(rf == 1)
 21444  24F3  0872               	movf	i1RfPointSelect@rf,w
 21445  24F4  3A01               	xorlw	1
 21446  24F5  1D03               	skipz
 21447  24F6  0008               	return
 21448                           
 21449                           ;RF_Control_B1.c: 11: {
 21450                           ;RF_Control_B1.c: 12: RF=&RF1;
 21451  24F7  30E1               	movlw	_RF1& (0+255)
 21452  24F8  00F1               	movwf	??i1_RfPointSelect
 21453  24F9  0871               	movf	??i1_RfPointSelect,w
 21454  24FA  00FB               	movwf	_RF
 21455  24FB  0008               	return
 21456  24FC                     __end_ofi1_RfPointSelect:	
 21457  007E                     btemp	set	126	;btemp
 21458  007E                     pic14e$flags	set	126
 21459  007E                     wtemp	set	126
 21460  007E                     wtemp0	set	126
 21461  0080                     wtemp1	set	128
 21462  0082                     wtemp2	set	130
 21463  0084                     wtemp3	set	132
 21464  0086                     wtemp4	set	134
 21465  0088                     wtemp5	set	136
 21466  007F                     wtemp6	set	127
 21467  007E                     ttemp	set	126
 21468  007E                     ttemp0	set	126
 21469  0081                     ttemp1	set	129
 21470  0084                     ttemp2	set	132
 21471  0087                     ttemp3	set	135
 21472  007F                     ttemp4	set	127
 21473  007E                     ltemp	set	126
 21474  007E                     ltemp0	set	126
 21475  0082                     ltemp1	set	130
 21476  0086                     ltemp2	set	134
 21477  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      74
    BANK2            80      0      74
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 17
		 -> NULL(NULL[0]), VarTMain(BANK2[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109493
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21707
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21707
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 01 08:36:17 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0071  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _PF 007A                                       _RD 0CA8  
                                     _RF 007B                  __end_of_CC2500_WriteREG 2761  
                                     _WR 0CA9                                       _Sw 006D  
     __end_of_getDimmerLights_StatusFlag 25B3               _getDimmerLights_StatusFlag 25A7  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 115E  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1B88  
                   _setDimmerLights_Main 1515                             ___ftadd@sign 0048  
                                    l300 1DCE                                      l301 1DD3  
                                    l311 121F                                      l304 1DD6  
                                    l331 1B20                                      l315 1230  
                                    l328 1B1A                                      l361 273B  
                                    l362 273D                                      l373 2750  
                                    l391 27D2                                      l295 1DA4  
                                    l385 2651                                      l397 19A8  
                                    l680 1AF4                                      l884 107F  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000C                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0162  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E1                                      _ISR 0004  
                                    _WDT 00E9          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0159                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 2748  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 24FC  
                        __end_of_ADC_Set 24C8                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 089D                    _setDimmerLights_ERROR 1F50  
                  _setDimmerLights_AdjRF 195C                    _setDimmerLights_AdjGo 26B9  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 2679  
                                   ?_ISR 0071                          _PowerFault_Main 246F  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 19A3  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l3111 18A2                 ?_DimmerLightsPointSelect 0071  
                                   l2083 1EE4                                     l3301 0D78  
                                   l1642 1870                                     l2371 0ED5  
                                   l2611 1EAD                          __end_of_IOC_Set 25F1  
                                   l2375 1CFE                                     l3272 11EF  
                                   l6010 0A9E                                     l6004 0A88  
                                   l1668 1BB2                                     l3278 1206  
                                   l2638 1CC1                                     l6032 0AF8  
                                   l6024 0ADF                                     l6200 192F  
                                   l2816 2495                                     l6130 176F  
                                   l6122 1755                                     l6114 173A  
                                   l6124 175E                                     l6116 1748  
                                   l1868 1033                                     l6052 0769  
                                   l6126 1761                                     l6046 0753  
                                   l6080 07C8                                     l6064 07A4  
                                   l6312 1137                                     l6170 1AEC  
                                   l6162 1AE0                                     l6154 1AD4  
                                   l6314 1144                                     l6076 07C0  
                                   l6068 07AC                                     l6308 1131  
                                   l6166 1AE6                                     l6158 1ADA  
                                   l6318 1150                                     l6096 170A  
                                   l6408 1BF8                                     l6196 1924  
                                   l7180 1C90                                     l6444 188C  
                                   l5902 11F4                                     l6446 1892  
                                   l5904 11FC                                     l7176 1C89  
                                   l7600 1C29                                     l6704 1DB6  
                                   l6560 1CAF                                     l5922 1901  
                                   l8410 1BDF                                     l7602 1C35  
                                   l9210 1793                                     l9130 0FCE  
                                   l9114 0F8F                                     l8324 12DC  
                                   l9052 1377                                     l7612 1C50  
                                   l8500 0864                                     l9220 17B0  
                                   l9124 0FBD                                     l8406 1BD4  
                                   l8342 1B73                                     l9046 135E  
                                   l5934 0D01                                     l9206 178C  
                                   l9126 0FC3                                     l8272 189C  
                                   l9056 13BE                                     l7608 1C47  
                                   l9152 0E15                                     l5944 0D17  
                                   l9232 17CB                                     l9312 06B4  
                                   l7650 0A2E                                     l8362 1174  
                                   l8346 1B7D                                     l8530 1076  
                                   l9154 0E1F                                     l5962 0D44  
                                   l5938 0D08                                     l9234 17CF  
                                   l9322 06E7                                     l9090 0F20  
                                   l8292 15C2                                     l5892 11CC  
                                   l8372 1184                                     l8380 1190  
                                   l8532 107B                                     l5980 0D8A  
                                   l5964 0D4E                                     l5956 0D31  
                                   l8612 1423                                     l9092 0F29  
                                   l7662 0A63                                     l5894 11D6  
                                   l8358 116E                                     l8366 117A  
                                   l8526 1063                                     l9174 0E88  
                                   l5974 0D6A                                     l5966 0D53  
                                   l8606 1407                                     l7656 0A56  
                                   l8296 15E0                                     l5896 11DB  
                                   l5888 11C5                                     l8392 11AC  
                                   l8376 118A                                     l8448 0907  
                                   l9600 01A9                                     l5984 0D9C  
                                   l5976 0D74                                     l5968 0D57  
                                   l8616 142C                                     l9248 17F5  
                                   l9272 0609                                     l7658 0A5C  
                                   l8706 1B96                                     l9602 01C1  
                                   l9522 16EB                                     l9514 16C0  
                                   l9186 0EC4                                     l9178 0EA7  
                                   l5994 0DB7                                     l8388 11A6  
                                   l8396 11B2                                     l9188 0ECA  
                                   l8644 1242                                     l9452 0954  
                                   l8670 19B9                                     l9622 0247  
                                   l8646 125A                                     l8486 082A  
                                   l8750 1EDB                                     l9462 098D  
                                   l8672 19C4                                     l9544 1E1E  
                                   l9640 028F                                     l8496 084E  
                                   l8840 1FED                                     l9288 063E  
                                   l8682 1D6E                                     l8658 1273  
                                   l9298 0670                                     l9474 09C4  
                                   l9458 0985                                     l9722 1471  
                                   l9396 0C5B                                     l9628 025F  
                                   l9580 00F8                                     l9574 00CA  
                                   l9558 007D                                     l8774 1F15  
                                   l9486 132F                                     l9718 145C  
                                   l9672 035A                                     l9648 02C7  
                                   _CFGS 0CAE                                     l8962 1542  
                                   l9594 018D                                     l9666 0344  
                                   l8786 1F2B                                     l8874 14F0  
                                   l8980 1580                                     l9678 036D  
                                   l8968 1554                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 2577                                     _LATC 010E  
                                   u4025 0D58                                     u4125 0AB0  
                                   u4205 0775                                     u4135 0AC0  
                                   u4055 0D6B                                     u4215 0785  
                                   u4145 0AE0                                     u4155 0AEF  
                                   u4315 1711                                     u4235 07AD  
                                   u4165 0AF9                                     u4245 07B3  
                                   u4345 173B                                     u4275 07C9  
                                   _PEIE 005E                                     u4285 07CF  
                                   _INTE 005C                                     _INTF 0059  
                                   u3815 11F7                                     u4375 1756  
                                   u3845 120D                                     u3775 11D1  
                                   u6505 1C40                                     u3795 11EA  
                                   u6515 1C48                                     u8045 19AE  
                                   u3965 0D32                                     u7505 18A3  
                                   u7515 18A8                                     u6475 1C2C  
                                   u3995 0D45                                     u9115 096F  
                                   u6495 1C36                                     u9215 1D49  
                                   u6585 09EF                                     u9305 1E05  
                                   u7570 128B                                     u7810 24E7  
                                   u9235 1690                                     u9155 09B0  
                                   u9245 16D5                                     u7575 1289  
                                   u9425 01D9                                     u9185 131E  
                                   u9195 1347                                     u9375 0144  
                                   _LWLO 0CAD                                     _RFSW 00BC  
                                   _TMR0 0015                          __end_of_INT_Set 24A0  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 014D                                     __WDT 00E4  
                                   _Load 006E                                     _Temp 007C  
                                   _main 1435                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 246F                      __end_of_DlyOff_Main 1677  
                        __end_of_RF_Main 2491                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 272F                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 260D  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1CD7  
                    DelayTimejudge@value 0022                            _RfPointSelect 2528  
             __end_of_setRFSW_AdjControl 1CD7                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 010E                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 25D7                    ?_setDimmerLights_Main 0071  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 2717  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0DCF                          __end_of___ftdiv 0B1A  
                        __end_of___ftmul 07F0                          __end_of___fttol 1778  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1C57                   _setDimmerLights_Switch 2659  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E6  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0071  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 007D                            setRF_Learn@rf 0023  
                                  _MainT 1677                                    _Load1 0220  
                          __CFG_WRT$HALF 0000                                    _Temp1 013F  
                       __end_of_TMR0_ISR 05F3             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 080D                                    _getAD 1866  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 10A7  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 2689              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 2800  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 0380                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0071  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 26DA  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1281              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0071  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0071  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0071  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 10A7  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0071                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 2554                        ??_setPercentValue 0059  
                           __end_of_main 14A4                      ?_setRF_DimmerLights 005D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0933                     _setSw_Initialization 26A9  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0071  
                _setControl_Lights_Table 13C6                   ?_Buzzer_Initialization 0071  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 2472  
                             _Receive_GO 0381                               _Receive_OK 0382  
                              ??_IOC_ISR 0071                   ?_setDimmerLights_ERROR 0071  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 251D  
                                 ?_MainT 0071                   ?_setDimmerLights_AdjRF 0071  
                              ??_INT_ISR 0075                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 2699  
                   __end_of_getTemp_Safe 24C1                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 15FE                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                        ?_getPowerFault_AD 0071  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1918                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 121D                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 2669                                   i1l1610 05E3  
                                 i1l8120 050D                                   i1l8112 04EB  
                                 i1l8106 04D2                                   i1l8114 04F1  
                                 i1l8124 0524                                   i1l8108 04D8  
                                 i1l8134 0553                                   i1l8064 1999  
                                 i1l8136 0559                                   i1l8128 0538  
                                 i1l8148 058E                                   i1l8158 05C4  
                                 i1l7624 1B42                                   i1l8088 0488  
                                 i1l7628 1B4C                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                       __size_of_Load_Main 03DF  
                                 u718_25 046B                                   u735_25 05B9  
                                 u736_25 05D6                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 277A  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                             _VarProduct 01C5                    _Dimmer_Initialization 24AC  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 2702  
                                 _Dimmer 00B9                                   _DlySw1 00CD  
            __size_of_setLoad_Exceptions 004A               __end_of_Mcu_Initialization 27C9  
                    __end_of_Buzzer_Main 0A71                                   _Memory 00E7  
                                 _Timer0 00E8       __end_of_setDimmerLights_TriggerAdj 0800  
             _setDimmerLights_TriggerAdj 07F0            setDimmerLights_Switch@command 0022  
                                 ___wmul 1899                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 24F2  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 115E                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 1587                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 25E4         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 2528                          ?_setLoad_Enable 0071  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0022  
                         _setTemp_Enable 253E                          _RfSWPointSelect 258F  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 2495  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1102  
       __end_of_CC2500_registers_address 182F     __end_of_setPowerFault_Initialization 26A9  
  __size_of_setPowerFault_Initialization 0010             _setPowerFault_Initialization 2699  
                __end_of__initialization 004C              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 16F1  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 18D6  
                          __end_of_getAD 187C                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 25BF  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0071                        __end_of_Load_Main 042F  
                       ?_PowerFault_Main 0071                 __end_of_setDimmerReClock 261C  
                     __size_of_getRxData 0052                      ?_LED_Initialization 0071  
                 __end_of_setTemp_Enable 2549                        ?_CC2500_WriteByte 0071  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0079                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 2472                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                              _Buzzer_Main 09C9  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1003  
                 ?_Dimmer_Initialization 0071                                  ?_IO_Set 0071  
                             ??_LED_Main 0025                  _DelayOff_Initialization 2481  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 24CF  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 24FC                      i1_setLoad_StatusOff 1B26  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 1435                      _CC2500_WriteCommand 2649  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 0933                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 24C1  
              _PowerFault_Initialization 246C                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 12EC                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 24CF                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1C97  
                __end_of_RfSWPointSelect 259B                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 197F  
                        ?_setTemp_Enable 0071                                  _IOC_Set 25E4  
                   __size_of_setLog_Code 0049                                  _INT_ISR 256B  
                                _INT_Set 249A                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1DE1                        _Flash_Memory_Read 2761  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2549                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 248D  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
                                _WDT_Set 2717          __end_of_setControl_Lights_Table 1435  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 1FA7  
                        _setPercentValue 1E26                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00DE             __end_of_CC2500_FrequencyCabr 2583  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D6  
                                _VarLED2 00DA                        __end_of_getRxData 1F50  
             __end_of_setPowerFault_Main 0EDD                 _CC2500_registers_address 1800  
                         RF_RxDisable@rf 0024                    ??_Temp_Initialization 0021  
        __end_of_setDimmerLights_Trigger 2679                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 24BA  
                         ??_setTemp_Main 002D           __end_of_setDimmerLights_Switch 2669  
                                ___ftadd 0CD9                           ??_setSw_Enable 0022  
                                ___ftdiv 0A71                          __size_of___wmul 001E  
                                ___ftmul 073C                                  ___fttol 16F1  
                    __end_of_Switch_Main 2495                                  ___lwdiv 1C20  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 12EC  
                                __ptext2 1D18                                  __ptext3 0933  
                                __ptext4 1866                                  __ptext5 27E4  
                                __ptext6 0002                                  __ptext7 1000  
                                __ptext8 0EDD                                  __ptext9 1EB5  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0072  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1E26  
              __end_of_Flash_Memory_Read 277A                               _setRF_Main 1778  
                          _DelayOff_Main 2485                        _DimmerLights_Main 24B3  
                      __end_of_setINT_GO 24E9           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 2512  
                      ??_setRF_ReceiveGO 0074               __end_of_CC2500_ClearRXFIFO 2479  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 247D  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0071  
                     ?_DimmerLights_Main 0071                           _LedPointSelect 1918  
                    _DelayOffPointSelect 2583                                  clrloop0 24A7  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 24F2  
                   end_of_initialization 004C                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 2533                        _CC2500_InitSetREG 19F0  
                          _DelayTime_1us 19A3                        __end_of_setTxData 0BE3  
             __end_of_Flash_Memory_Write 1BB9                                  init_ram 24A0  
                     ?_CC2500_InitSetREG 0071                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 24A1  
                             _setSw_Main 05F3                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 27C9                              ?_getPF_Safe 0071  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 26C9                            _CC2500_Enable 0380  
                       ?i1_RfPointSelect 0071                       ?_CC2500_ReadStatus 0071  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 0013  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 121D  
                          _CC2500_TxData 1D9D                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1A44           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0041  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0071  
                    _Flash_Memory_Modify 1358                  _DimmerLights_Exceptions 104D  
                            ?_getLoad_AD 0071                             __pstringtext 1800  
                    _Flash_Memory_Unlock 24D7                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0071                         _setLoad_StatusOn 1BB9  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0071                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 24BA  
                     _Mcu_Initialization 27AE                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0071  
                       ?_RfSWPointSelect 0071                          _setSw_Main$4748 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 193A  
                __end_of_Sw_DimmerOnFunc 2000                  __end_of_setPercentValue 1E6C  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1A1A  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1D18  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1D59  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 27E4  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 104D  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 2793  
                   _setRF_Initialization 24C8                              _Switch_Main 2491  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 2512                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 26ED                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0071  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 002C  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 18B7  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0072                           __end_of_setLED 11BC  
                         __end_of_setBuz 15FE                            _setLoad_Count 2702  
                   _CC2500_FrequencyCabr 2577                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 080D                        __size_of_WDT_Main 001C  
                    __size_of_getPF_Safe 0008                        ?_setDimmerReClock 0071  
                    start_initialization 0018                        _setRF_DimmerValue 1BEB  
                        ?_LedPointSelect 0071               __end_of_DimmerLights_Close 27AE  
                              _Load_Main 0050                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0071                       ?_setRF_DimmerValue 0071  
             __end_of_CC2500_InitPATable 18D6          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 1000                              ?_setLoad_GO 0071  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 2649  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0071                                 ??_IO_Set 0020  
                              _VarErrLED 00D2                              ?_setSw_Main 0071  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0071                     __end_of_setSw_Status 263A  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0071  
              i1setLoad_StatusOff@lights 0072                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 2533  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00C4  
                              _Temp_Main 1000                ??_DimmerLights_Exceptions 002A  
          setOverTemp_Exceptions@command 002C                           ??_WDT_Clearing 0020  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 247D               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1C20                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4391 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071                                 ?_WDT_Set 0071  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1EB5  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0131                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002A  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 195C  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E7  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                             ?_Temp_Main 0071                      __size_of_setRF_Main 0088  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0071                   _setTemp_Initialization 2554  
                       _getPowerFault_AD 1D18        __size_of_setPowerFault_Exceptions 0041  
    __end_of_Flash_Memory_Initialization 0CD9              _Flash_Memory_Initialization 0BE3  
              ?_setPowerFault_Exceptions 0071                                __ptext100 1A9B  
                              __ptext101 24AC                                __ptext110 16F1  
                              __ptext102 2485                                __ptext111 0A71  
                              __ptext103 15FE                                __ptext120 1899  
                              __ptext112 18F6                                __ptext104 0B1A  
                              __ptext121 2481                                __ptext113 11BC  
                              __ptext105 2528                                __ptext130 2577  
                              __ptext122 2507                                __ptext114 261C  
                              __ptext106 262B                                __ptext131 19A3  
                              __ptext123 2583                                __ptext115 258F  
                              __ptext107 251D                                __ptext140 1B26  
                              __ptext132 2479                                __ptext124 26ED  
                              __ptext116 2669                                __ptext108 1281  
                              __ptext141 197F                                __ptext133 2475  
                              __ptext125 247D                                __ptext117 2659  
                              __ptext109 1E26                                 ?___ftadd 003E  
                              __ptext142 260D                                __ptext134 2649  
                              __ptext126 1AF6                                __ptext118 2512  
                              __ptext143 256B                                __ptext135 272F  
                              __ptext127 19F0                                __ptext119 1587  
                              __ptext144 255F                                __ptext136 09C9  
                              __ptext128 18B7                                __ptext145 24F2  
                              __ptext137 24FC                                __ptext129 2748  
                              __ptext139 042F                                _getRxData 1EFE  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 089D                          _setRF_ReceiveGO 255F  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 2507  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 249A  
                     _setPowerFault_Main 0DCF       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 0149  
          __end_of_setDimmerLights_ERROR 1FA7             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 197F            __end_of_setDimmerLights_AdjGo 26C9  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 2689                           __size_of_MainT 007A  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                       __CFG_WDTE$SWDTEN 0000                      ?_setPowerFault_Main 0071  
                         __size_of_getAD 0016                             _setRF_Enable 1A1A  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 251D                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 24E0                      __end_of_setLED_Main 1C97  
               __end_of_setLoad_StatusOn 1BEB                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 2475                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 25CB  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 24A6                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0B1A      __end_of_DimmerLights_Initialization 25A7  
            _DimmerLights_Initialization 259B                       _CC2500_ClearRXFIFO 2475  
                     _CC2500_ClearTXFIFO 2479           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 260D                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1B88                               ?_getRxData 0071  
                               _TMR0_ISR 042F                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1B57                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 0800                         _Sw_DimmerAdjFunc 1A6F  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 19F0  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 2659  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 27E4  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 14A4  
                  __size_of_setTemp_Main 0123             __end_of_MainT_Initialization 26ED  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B8                             setSw_Main@sw 0068  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 24D7  
                       __size_of_IOC_ISR 0024                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 25BF                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 1EB5                    _DlyOff_Initialization 2507  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                       __size_of_WDT_Set 0018                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 09C9                    _Switch_Initialization 24E9  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 261C                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 1358                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 272F  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 256B  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 0063                      _Load_Initialization 25D7  
                              setLED@led 0023                                 _RxStatus 0383  
   __end_of_setDimmerLights_TriggerERROR 1A6F    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1A44                                 _TxStatus 0386  
                           _setTemp_Main 0EDD                       _setLoad_Exceptions 1003  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 263A  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 18F6                         ??_LedPointSelect 0020  
                               ___ftpack 11BC                             _setSw_Status 262B  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1C57  
                    ?_setLoad_Exceptions 0071                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 12EC                 ?_DelayOff_Initialization 0071  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0071                          ___lwdiv@counter 0027  
                               __ptext10 2472                                 __ptext11 2554  
                               __ptext20 24E9                                 __ptext12 2491  
                               __ptext21 26A9                                 __ptext13 05F3  
                               __ptext30 1AC8                                 __ptext22 2495  
                               __ptext14 25FF                                 __ptext31 1C97  
                               __ptext23 248D                                 __ptext15 1FA7  
                               __ptext40 25F1                                 __ptext32 1BEB  
                               __ptext24 1778                                 __ptext16 14A4  
                               __ptext41 27C9                                 __ptext33 195C  
                               __ptext25 1EFE                                 __ptext17 1A6F  
                               __ptext50 2699                                 __ptext42 187C  
                               __ptext34 10A7                                 __ptext26 1E6C  
                               __ptext18 07F0                                 __ptext51 27AE  
                               __ptext43 2489                                 __ptext35 073C  
                               __ptext27 13C6                                 __ptext19 26B9  
                               __ptext60 253E                                 __ptext52 2717  
                               __ptext44 24C8                                 __ptext36 0CD9  
                               __ptext28 080D                                 __ptext61 2689  
                               __ptext53 0800                                 __ptext45 246F  
                               __ptext37 19C9                                 __ptext29 1102  
                               __ptext70 2679                                 __ptext62 0050  
                               __ptext54 277A                                 __ptext46 0DCF  
                               __ptext38 1D9D                                 __ptext71 24BA  
                               __ptext63 1003                                 __ptext55 25E4  
                               __ptext47 1CD7                                 __ptext39 121D  
                               __ptext80 1DE1                                 __ptext72 24CF  
                               __ptext64 263A                                 __ptext56 249A  
                               __ptext48 2549                                 __ptext81 1358  
                               __ptext73 1C20                                 __ptext65 1A1A  
                               __ptext57 24C1                                 __ptext49 246C  
                               __ptext90 1B57                                 __ptext82 25B3  
                               __ptext74 25D7                                 __ptext66 24E0  
                               __ptext58 26DA                                 __ptext91 089D  
                               __ptext83 0BE3                                 __ptext75 193A  
                               __ptext67 104D                                 __ptext59 1677  
                               __ptext92 1BB9                                 __ptext84 1B88  
                               __ptext76 25CB                                 __ptext68 1A44  
                               __ptext93 2702                                 __ptext85 24D7  
                               __ptext77 1C57                                 __ptext69 1F50  
                               __ptext94 115E                                 __ptext86 2761  
                               __ptext78 25BF                                 __ptext95 1918  
                               __ptext87 24B3                                 __ptext79 26C9  
                               __ptext96 2793                                 __ptext88 1515  
                               __ptext97 2533                                 __ptext89 1D59  
                               __ptext98 25A7                                 __ptext99 259B  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 000C           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 262B            __end_of_Dimmer_Initialization 24B3  
           __end_of_setDimmerLights_Main 1587              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 006F                              _setRF_Learn 25FF  
               __end_of_CC2500_SIDLEMode 2481                           _setRF_RxStatus 25F1  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 258F  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 2793  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 187C  
                     _CC2500_InitPATable 18B7      __size_of_getDimmerLights_StatusFlag 000C  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 1800  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0071  
       setDimmerLights_TriggerAdj@lights 0023            ?_setDimmerLights_TriggerERROR 0022  
                    ?_CC2500_InitPATable 0071                          _CC2500_PowerRST 1AF6  
                     __end_of_setLoad_GO 253E              __end_of_Flash_Memory_Modify 13C6  
                      ??_getPercentValue 0059                              _setLog_Code 1E6C  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 24E0  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 2748  
                     __end_of_setSw_Main 073C                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_GO 0384  
                          _Transceive_OK 0385                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0071                  ?_setOverTemp_Exceptions 0071  
                         _DelayTimejudge 1AC8                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1D59  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 25FF                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1AC8  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1A9B  
            __end_of_setDimmerLights_Adj 1D9D                  ?_setTemp_Initialization 0071  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0073  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 26DA  
                  __size_of_RF_RxDisable 0027                        _RF_Initialization 2489  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0071                     _Flash_Memory_Erasing 25B3  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 2485                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 2489  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 1102         __size_of_setControl_Lights_Table 006F  
                      _setLoad_StatusOff 1B57                   __end_of_DelayTimejudge 1AF6  
         __end_of_setOverTemp_Exceptions 1EFE                   __size_of_RfPointSelect 000B  
                      ??i1_RfPointSelect 0071                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00F6                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 19C9  
               __end_of_Sw_DimmerAdjFunc 1A9B                  __end_of_CC2500_ReadByte 1899  
           __end_of_setSw_Initialization 26B9                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 19C9  
             ?_PowerFault_Initialization 0071               __end_of_LED_Initialization 25CB  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 255F                 __size_of_Sw_DimmerOnFunc 0059  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0071  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 248D                 __end_of_Sw_DimmerOffFunc 1515  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    ?_MainT_Initialization 0071  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1281  
                  __end_of_CC2500_TxData 1DE1                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 193A                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1B26  
