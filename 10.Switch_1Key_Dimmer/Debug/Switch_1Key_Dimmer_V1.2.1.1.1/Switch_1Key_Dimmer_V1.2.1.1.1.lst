

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Sep 15 16:20:42 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942                           
  1943                           	psect	idataBANK3
  1944  1917                     __pidataBANK3:	
  1945                           
  1946                           ;initializer for _VarProduct
  1947  1917  3463               	retlw	99
  1948  1918  3402               	retlw	2
  1949  1919  3400               	retlw	0
  1950  191A  3400               	retlw	0
  1951  191B  3400               	retlw	0
  1952  191C  3400               	retlw	0
  1953  191D  3400               	retlw	0
  1954  191E  3400               	retlw	0
  1955  191F  3400               	retlw	0
  1956  1920  3400               	retlw	0
  1957  1921  3400               	retlw	0
  1958  1922  3400               	retlw	0
  1959  1923  34FF               	retlw	255
  1960  1924  34FF               	retlw	255
  1961  1925  34FF               	retlw	255
  1962  1926  3400               	retlw	0
  1963  1927  3400               	retlw	0
  1964  1928  3400               	retlw	0
  1965  1929  3400               	retlw	0
  1966  192A  3400               	retlw	0
  1967  192B  3401               	retlw	1
  1968  192C  3400               	retlw	0
  1969  192D  3400               	retlw	0
  1970  192E  3400               	retlw	0
  1971  192F  3400               	retlw	0
  1972  1930  3400               	retlw	0
  1973  1931  3400               	retlw	0
  1974  1932  3400               	retlw	0
  1975  1933  3400               	retlw	0
  1976  1934  3400               	retlw	0
  1977  1935  3400               	retlw	0
  1978  1936  3400               	retlw	0
  1979                           
  1980                           	psect	stringtext
  1981  1800                     __pstringtext:	
  1982  1800                     _CC2500_registers_address:	
  1983  1800  3403               	retlw	3
  1984  1801  3416               	retlw	22
  1985  1802  3417               	retlw	23
  1986  1803  341E               	retlw	30
  1987  1804  341F               	retlw	31
  1988  1805  3420               	retlw	32
  1989  1806  342A               	retlw	42
  1990  1807  342B               	retlw	43
  1991  1808  340B               	retlw	11
  1992  1809  340C               	retlw	12
  1993  180A  340D               	retlw	13
  1994  180B  340E               	retlw	14
  1995  180C  340F               	retlw	15
  1996  180D  3410               	retlw	16
  1997  180E  3411               	retlw	17
  1998  180F  3412               	retlw	18
  1999  1810  3413               	retlw	19
  2000  1811  3414               	retlw	20
  2001  1812  340A               	retlw	10
  2002  1813  3415               	retlw	21
  2003  1814  3421               	retlw	33
  2004  1815  3422               	retlw	34
  2005  1816  3418               	retlw	24
  2006  1817  3419               	retlw	25
  2007  1818  341A               	retlw	26
  2008  1819  341B               	retlw	27
  2009  181A  341C               	retlw	28
  2010  181B  341D               	retlw	29
  2011  181C  3423               	retlw	35
  2012  181D  3424               	retlw	36
  2013  181E  3425               	retlw	37
  2014  181F  3426               	retlw	38
  2015  1820  3429               	retlw	41
  2016  1821  342C               	retlw	44
  2017  1822  342D               	retlw	45
  2018  1823  342E               	retlw	46
  2019  1824  3400               	retlw	0
  2020  1825  3401               	retlw	1
  2021  1826  3402               	retlw	2
  2022  1827  3407               	retlw	7
  2023  1828  3408               	retlw	8
  2024  1829  3409               	retlw	9
  2025  182A  3406               	retlw	6
  2026  182B  3404               	retlw	4
  2027  182C  3405               	retlw	5
  2028  182D  3427               	retlw	39
  2029  182E  3428               	retlw	40
  2030  182F                     __end_of_CC2500_registers_address:	
  2031  182F                     _CC2500_rfSettings:	
  2032  182F  3407               	retlw	7
  2033  1830  3407               	retlw	7
  2034  1831  3430               	retlw	48
  2035  1832  3487               	retlw	135
  2036  1833  346B               	retlw	107
  2037  1834  34F8               	retlw	248
  2038  1835  347F               	retlw	127
  2039  1836  343F               	retlw	63
  2040  1837  3409               	retlw	9
  2041  1838  3400               	retlw	0
  2042  1839  345C               	retlw	92
  2043  183A  34A7               	retlw	167
  2044  183B  3462               	retlw	98
  2045  183C  3486               	retlw	134
  2046  183D  3483               	retlw	131
  2047  183E  3403               	retlw	3
  2048  183F  3422               	retlw	34
  2049  1840  34F8               	retlw	248
  2050  1841  3400               	retlw	0
  2051  1842  3444               	retlw	68
  2052  1843  34B6               	retlw	182
  2053  1844  3410               	retlw	16
  2054  1845  3418               	retlw	24
  2055  1846  341D               	retlw	29
  2056  1847  341C               	retlw	28
  2057  1848  34C7               	retlw	199
  2058  1849  3400               	retlw	0
  2059  184A  34B2               	retlw	178
  2060  184B  34EA               	retlw	234
  2061  184C  340A               	retlw	10
  2062  184D  3400               	retlw	0
  2063  184E  3411               	retlw	17
  2064  184F  3459               	retlw	89
  2065  1850  3488               	retlw	136
  2066  1851  3431               	retlw	49
  2067  1852  340B               	retlw	11
  2068  1853  342F               	retlw	47
  2069  1854  342E               	retlw	46
  2070  1855  3406               	retlw	6
  2071  1856  3404               	retlw	4
  2072  1857  3405               	retlw	5
  2073  1858  3400               	retlw	0
  2074  1859  3430               	retlw	48
  2075  185A  34D3               	retlw	211
  2076  185B  3491               	retlw	145
  2077  185C  3441               	retlw	65
  2078  185D  3400               	retlw	0
  2079  185E                     __end_of_CC2500_rfSettings:	
  2080  185E                     _CC2500_patable_vaule:	
  2081  185E  34FE               	retlw	254
  2082  185F  34FE               	retlw	254
  2083  1860  34FE               	retlw	254
  2084  1861  34FE               	retlw	254
  2085  1862  34FE               	retlw	254
  2086  1863  34FE               	retlw	254
  2087  1864  34FE               	retlw	254
  2088  1865  34FE               	retlw	254
  2089  1866                     __end_of_CC2500_patable_vaule:	
  2090                           
  2091                           	psect	nvCOMMON
  2092  007D                     __pnvCOMMON:	
  2093  007D                     _TMain:	
  2094  007D                     	ds	1
  2095                           
  2096                           	psect	nvBANK0
  2097  006F                     __pnvBANK0:	
  2098  006F                     _Product:	
  2099  006F                     	ds	1
  2100                           
  2101                           	psect	nvBANK1
  2102  00EA                     __pnvBANK1:	
  2103  00EA                     _Memory:	
  2104  00EA                     	ds	1
  2105  00EB                     _Timer0:	
  2106  00EB                     	ds	1
  2107  000C                     _PORTA	set	12
  2108  000D                     _PORTB	set	13
  2109  000E                     _PORTC	set	14
  2110  0015                     _TMR0	set	21
  2111  005F                     _GIE	set	95
  2112  005C                     _INTE	set	92
  2113  0059                     _INTF	set	89
  2114  005B                     _IOCIE	set	91
  2115  0058                     _IOCIF	set	88
  2116  005E                     _PEIE	set	94
  2117  0060                     _RA0	set	96
  2118  0063                     _RA3	set	99
  2119  0064                     _RA4	set	100
  2120  0066                     _RA6	set	102
  2121  0067                     _RA7	set	103
  2122  0068                     _RB0	set	104
  2123  0069                     _RB1	set	105
  2124  006A                     _RB2	set	106
  2125  006B                     _RB3	set	107
  2126  006C                     _RB4	set	108
  2127  006D                     _RB5	set	109
  2128  0070                     _RC0	set	112
  2129  0071                     _RC1	set	113
  2130  0072                     _RC2	set	114
  2131  0074                     _RC4	set	116
  2132  0075                     _RC5	set	117
  2133  0077                     _RC7	set	119
  2134  005D                     _TMR0IE	set	93
  2135  005A                     _TMR0IF	set	90
  2136  009D                     _ADCON0	set	157
  2137  009E                     _ADCON1	set	158
  2138  009C                     _ADRESH	set	156
  2139  009B                     _ADRESL	set	155
  2140  0095                     _OPTION_REG	set	149
  2141  0099                     _OSCCON	set	153
  2142  008C                     _TRISA	set	140
  2143  008D                     _TRISB	set	141
  2144  008E                     _TRISC	set	142
  2145  04E9                     _GO_nDONE	set	1257
  2146  0117                     _FVRCON	set	279
  2147  010C                     _LATA	set	268
  2148  010D                     _LATB	set	269
  2149  010E                     _LATC	set	270
  2150  018C                     _ANSELA	set	396
  2151  018D                     _ANSELB	set	397
  2152  018E                     _ANSELC	set	398
  2153  0192                     _PMADRH	set	402
  2154  0191                     _PMADRL	set	401
  2155  0196                     _PMCON2	set	406
  2156  0194                     _PMDATH	set	404
  2157  0193                     _PMDATL	set	403
  2158  0CAE                     _CFGS	set	3246
  2159  0CAC                     _FREE	set	3244
  2160  0CAD                     _LWLO	set	3245
  2161  0CA8                     _RD	set	3240
  2162  0CA9                     _WR	set	3241
  2163  0CAA                     _WREN	set	3242
  2164  1068                     _WPUB0	set	4200
  2165  1069                     _WPUB1	set	4201
  2166  106A                     _WPUB2	set	4202
  2167  0396                     _IOCBF	set	918
  2168  0395                     _IOCBN	set	917
  2169  0394                     _IOCBP	set	916
  2170  1CB2                     _IOCBF2	set	7346
  2171                           
  2172                           ; #config settings
  2173  0000                     
  2174                           	psect	cinit
  2175  0018                     start_initialization:	
  2176  0018                     __initialization:	
  2177                           
  2178                           ; Clear objects allocated to BITCOMMON
  2179  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2180                           
  2181                           ; Clear objects allocated to COMMON
  2182  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2183  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2184  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2185  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2186  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2187                           
  2188                           ; Clear objects allocated to BANK0
  2189  001E  01EC               	clrf	__pbssBANK0& (0+127)
  2190  001F  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2191  0020  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2192                           
  2193                           ; Clear objects allocated to BANK1
  2194  0021  30A0               	movlw	low __pbssBANK1
  2195  0022  0084               	movwf	4
  2196  0023  3000               	movlw	high __pbssBANK1
  2197  0024  0085               	movwf	5
  2198  0025  304A               	movlw	74
  2199  0026  31A5  251C  3180   	fcall	clear_ram0
  2200                           
  2201                           ; Clear objects allocated to BANK2
  2202  0029  3020               	movlw	low __pbssBANK2
  2203  002A  0084               	movwf	4
  2204  002B  3001               	movlw	high __pbssBANK2
  2205  002C  0085               	movwf	5
  2206  002D  3040               	movlw	64
  2207  002E  31A5  251C  3180   	fcall	clear_ram0
  2208                           
  2209                           ; Clear objects allocated to BANK3
  2210  0031  30A0               	movlw	low __pbssBANK3
  2211  0032  0084               	movwf	4
  2212  0033  3001               	movlw	high __pbssBANK3
  2213  0034  0085               	movwf	5
  2214  0035  3025               	movlw	37
  2215  0036  31A5  251C  3180   	fcall	clear_ram0
  2216                           
  2217                           ; Clear objects allocated to BANK4
  2218  0039  3020               	movlw	low __pbssBANK4
  2219  003A  0084               	movwf	4
  2220  003B  3002               	movlw	high __pbssBANK4
  2221  003C  0085               	movwf	5
  2222  003D  3047               	movlw	71
  2223  003E  31A5  251C  3180   	fcall	clear_ram0
  2224                           
  2225                           ; Initialize objects allocated to BANK3
  2226  0041  3017               	movlw	low __pidataBANK3
  2227  0042  0084               	movwf	4
  2228  0043  3099               	movlw	(high __pidataBANK3)| (0+128)
  2229  0044  0085               	movwf	5
  2230  0045  30C5               	movlw	low __pdataBANK3
  2231  0046  0086               	movwf	6
  2232  0047  3001               	movlw	high __pdataBANK3
  2233  0048  0087               	movwf	7
  2234  0049  3020               	movlw	32
  2235  004A  31A5  2516         	fcall	init_ram
  2236  004C                     end_of_initialization:	
  2237                           ;End of C runtime variable initialization code
  2238                           
  2239  004C                     __end_of__initialization:	
  2240  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2241  004D  0020               	movlb	0
  2242  004E  3193  2B5D         	ljmp	_main	;jump to C main() function
  2243                           
  2244                           	psect	bitbssCOMMON
  2245  0380                     __pbitbssCOMMON:	
  2246  0380                     _CC2500_Enable:	
  2247  0380                     	ds	1
  2248  0381                     _Receive_GO:	
  2249  0381                     	ds	1
  2250  0382                     _Receive_OK:	
  2251  0382                     	ds	1
  2252  0383                     _RxStatus:	
  2253  0383                     	ds	1
  2254  0384                     _Transceive_GO:	
  2255  0384                     	ds	1
  2256  0385                     _Transceive_OK:	
  2257  0385                     	ds	1
  2258  0386                     _TxStatus:	
  2259  0386                     	ds	1
  2260                           
  2261                           	psect	bssCOMMON
  2262  0078                     __pbssCOMMON:	
  2263  0078                     _Buz:	
  2264  0078                     	ds	1
  2265  0079                     _DimmerLights11:	
  2266  0079                     	ds	1
  2267  007A                     _PF:	
  2268  007A                     	ds	1
  2269  007B                     _RF:	
  2270  007B                     	ds	1
  2271  007C                     _Temp:	
  2272  007C                     	ds	1
  2273                           
  2274                           	psect	bssBANK0
  2275  006C                     __pbssBANK0:	
  2276  006C                     _DimmerLights:	
  2277  006C                     	ds	1
  2278  006D                     _Sw:	
  2279  006D                     	ds	1
  2280  006E                     _Load:	
  2281  006E                     	ds	1
  2282                           
  2283                           	psect	bssBANK1
  2284  00A0                     __pbssBANK1:	
  2285  00A0                     _RF_Data:	
  2286  00A0                     	ds	21
  2287  00B5                     _RF_Count:	
  2288  00B5                     	ds	2
  2289  00B7                     _CRC:	
  2290  00B7                     	ds	1
  2291  00B8                     _DelayOff:	
  2292  00B8                     	ds	1
  2293  00B9                     _Dimmer:	
  2294  00B9                     	ds	1
  2295  00BA                     _DimmerLightsIntr:	
  2296  00BA                     	ds	1
  2297  00BB                     _LED:	
  2298  00BB                     	ds	1
  2299  00BC                     _RFSW:	
  2300  00BC                     	ds	1
  2301  00BD                     _RSSI:	
  2302  00BD                     	ds	1
  2303  00BE                     _Rx_Length:	
  2304  00BE                     	ds	1
  2305  00BF                     _SPI0Buffer:	
  2306  00BF                     	ds	1
  2307  00C0                     _Tx_Length:	
  2308  00C0                     	ds	1
  2309  00C1                     _r_address:	
  2310  00C1                     	ds	1
  2311  00C2                     _r_data:	
  2312  00C2                     	ds	1
  2313  00C3                     _s_data:	
  2314  00C3                     	ds	1
  2315  00C4                     _PF1:	
  2316  00C4                     	ds	8
  2317  00CC                     _VarTimer0:	
  2318  00CC                     	ds	7
  2319  00D3                     _DlySw1:	
  2320  00D3                     	ds	5
  2321  00D8                     _VarErrLED:	
  2322  00D8                     	ds	4
  2323  00DC                     _VarLED1:	
  2324  00DC                     	ds	4
  2325  00E0                     _VarLED2:	
  2326  00E0                     	ds	4
  2327  00E4                     _Dimmer1:	
  2328  00E4                     	ds	3
  2329  00E7                     _RF1:	
  2330  00E7                     	ds	2
  2331  00E9                     _RFSW1:	
  2332  00E9                     	ds	1
  2333                           
  2334                           	psect	bssBANK2
  2335  0120                     __pbssBANK2:	
  2336  0120                     _VarTMain:	
  2337  0120                     	ds	16
  2338  0130                     _Temp1:	
  2339  0130                     	ds	14
  2340  013E                     _DimmerLights1:	
  2341  013E                     	ds	13
  2342  014B                     _Buz1:	
  2343  014B                     	ds	12
  2344  0157                     _Sw1:	
  2345  0157                     	ds	9
  2346                           
  2347                           	psect	bssBANK3
  2348  01A0                     __pbssBANK3:	
  2349  01A0                     _VarMemory:	
  2350  01A0                     	ds	37
  2351                           
  2352                           	psect	dataBANK3
  2353  01C5                     __pdataBANK3:	
  2354  01C5                     _VarProduct:	
  2355  01C5                     	ds	32
  2356                           
  2357                           	psect	bssBANK4
  2358  0220                     __pbssBANK4:	
  2359  0220                     _Load1:	
  2360  0220                     	ds	71
  2361                           
  2362                           	psect	clrtext
  2363  251C                     clear_ram0:	
  2364                           ;	Called with FSR0 containing the base address, and
  2365                           ;	WREG with the size to clear
  2366                           
  2367  251C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2368  251D                     clrloop0:	
  2369  251D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2370  251E  3101               	addfsr 0,1
  2371  251F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2372  2520  2D1D               	goto	clrloop0	;have we reached the end yet?
  2373  2521  3400               	retlw	0	;all done for this memory range, return
  2374                           
  2375                           	psect	inittext
  2376  2516                     init_ram:	
  2377  2516  00FE               	movwf	126
  2378  2517                     initloop:	
  2379  2517  0012               	moviw fsr0++
  2380  2518  001E               	movwi fsr1++
  2381  2519  0BFE               	decfsz	126,f
  2382  251A  2D17               	goto	initloop
  2383  251B  3400               	retlw	0
  2384                           
  2385                           	psect	cstackCOMMON
  2386  0071                     __pcstackCOMMON:	
  2387  0071                     ?_CC2500_WriteByte:	
  2388  0071                     ?_CC2500_WriteCommand:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0071                     ?_CC2500_ReadStatus:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0071                     ?_CC2500_ReadByte:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0071                     ?_CC2500_PowerRST:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0071                     ?_CC2500_InitSetREG:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0071                     ?_CC2500_InitPATable:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0071                     ?_CC2500_ClearTXFIFO:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0071                     ?_CC2500_ClearRXFIFO:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0071                     ?_CC2500_FrequencyCabr:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0071                     ?_CC2500_SIDLEMode:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0071                     ?_DlyOff_Initialization:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0071                     ?_DlyOff_Main:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0071                     ?_setTxData:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0071                     ?_setDimmerLights_Initialization:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0071                     ?_Dimmer_Initialization:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0071                     ?_setLoad_GO:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0071                     ?_setDimmerLights_Main:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0071                     ?_setDimmerLights_ERROR:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0071                     ?_setLoad_Count:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0071                     ?_setLED_Initialization:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0071                     ?_setLED_Main:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0071                     ?_MainT_Initialization:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0071                     ?_Mcu_Initialization:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0071                     ?_Flash_Memory_Initialization:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0071                     ?_Temp_Initialization:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0071                     ?_Load_Initialization:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0071                     ?_PowerFault_Initialization:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0071                     ?_Switch_Initialization:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0071                     ?_RF_Initialization:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0071                     ?_getLoad_AD:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0071                     ?_getTemp_AD:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0071                     ?_getPowerFault_AD:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0071                     ?_MainT:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0071                     ?_Flash_Memory_Main:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0071                     ?_Temp_Main:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0071                     ?_Load_Main:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0071                     ?_PowerFault_Main:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0071                     ?_Switch_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0071                     ?_RF_Main:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0071                     ?_setTemp_Enable:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0071                     ?_setLoad_Enable:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0071                     ?_setSw_Enable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0071                     ?_IO_Set:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0071                     ?_TMR0_Set:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0071                     ?_ADC_Set:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0071                     ?_INT_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0071                     ?_IOC_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0071                     ?_IOC_ISR:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0071                     ??_IOC_ISR:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0071                     ?_TMR0_ISR:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0071                     ?_INT_ISR:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0071                     ?_Flash_Memory_Write:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0071                     ?_Flash_Memory_Modify:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0071                     ?_setLoad_AH_AL_Restore:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0071                     ?_setLoad_Exceptions:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0071                     ?_setTemp_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0071                     ?_setTemp_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0071                     ?_setOverTemp_Exceptions:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0071                     ?_setPowerFault_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0071                     ?_setPowerFault_Main:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0071                     ?_setPowerFault_Exceptions:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0071                     ?_setRF_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0071                     ?_setRF_Main:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0071                     ?_getRxData:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0071                     ?_RF_RxDisable:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0071                     ?_setLog_Code:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0071                     ?_setControl_Lights_Table:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0071                     ?_setRFSW_Control:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0071                     ?_setRFSW_AdjControl:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0071                     ?_setRF_DimmerValue:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0071                     ?_setSw_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0071                     ?_setSw_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0071                     ?_Sw_DimmerOnFunc:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0071                     ?_Sw_DimmerAdjFunc:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0071                     ?_Sw_DimmerOffFunc:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0071                     ?_Buzzer_Initialization:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0071                     ?_Buzzer_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0071                     ?_CC2500_TxData:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0071                     ?_CC2500_RxData:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0071                     ?_CC2500_PowerOnInitial:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0071                     ?_DelayOffPointSelect:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0071                     ?_DelayOff_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0071                     ?_DelayOff_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0071                     ?_DimmerLightsPointSelect:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0071                     ?_DimmerLights_Initialization:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0071                     ?_DimmerLights_Close:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0071                     ?_DimmerLights_Main:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0071                     ?_DimmerLights_Exceptions:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0071                     ?_setDimmerLights_AdjRF:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0071                     ?_LedPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0071                     ?_LED_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0071                     ?_LED_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0071                     ?_main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0071                     ?_ISR:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0071                     ?_setDimmerReClock:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0071                     ??_setDimmerReClock:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0071                     ?_setINT_GO:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0071                     ?_Flash_Memory_Unlock:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0071                     ?_Flash_Memory_Erasing:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0071                     ?_RfPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0071                     ?_RfSWPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0071                     ?_TouchPower:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0071                     ?_SwPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0071                     ?i1_setLoad_StatusOff:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0071                     ?i1_RfPointSelect:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0071                     ??i1_RfPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0071                     ?_DelayTimejudge:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0071                     ?_getDimmerLights_StatusFlag:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0071                     ?_getPercentValue:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0071                     ?_Flash_Memory_Read:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0071                     ?_getTemp_Safe:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0071                     ?_getPF_Safe:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0071                     ?_setPercentValue:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0071                     ?_getLoad_Safe:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0071                     setRF_Initialization@rf:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0071                     i1setLoad_StatusOff@command:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0071                     	ds	1
  2739  0072                     ??i1_setLoad_StatusOff:	
  2740  0072                     i1setLoad_StatusOff@lights:	
  2741                           ; 0 bytes @ 0x1
  2742                           
  2743  0072                     i1RfPointSelect@rf:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x1
  2748  0072                     	ds	1
  2749  0073                     ??_TMR0_ISR:	
  2750  0073                     ?_setRF_ReceiveGO:	
  2751                           ; 0 bytes @ 0x2
  2752                           
  2753  0073                     setRF_ReceiveGO@command:	
  2754                           ; 0 bytes @ 0x2
  2755                           
  2756                           
  2757                           ; 1 bytes @ 0x2
  2758  0073                     	ds	1
  2759  0074                     ??_setRF_ReceiveGO:	
  2760  0074                     setRF_ReceiveGO@rf:	
  2761                           ; 0 bytes @ 0x3
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x3
  2765  0074                     	ds	1
  2766  0075                     ??_INT_ISR:	
  2767                           
  2768                           ; 0 bytes @ 0x4
  2769  0075                     	ds	2
  2770  0077                     ??_ISR:	
  2771                           
  2772                           ; 0 bytes @ 0x6
  2773  0077                     	ds	1
  2774                           
  2775                           	psect	cstackBANK0
  2776  0020                     __pcstackBANK0:	
  2777  0020                     ??_CC2500_WriteByte:	
  2778  0020                     ??_CC2500_ReadByte:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ?_DelayTime_1us:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_DelayTimejudge:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ??_Dimmer_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_getDimmerLights_StatusFlag:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ??_setLoad_GO:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ?_setLoad_StatusOff:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_setLoad_Count:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ?_setLoad_StatusOn:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_MainT_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_setTemp_Enable:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setLoad_Enable:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_IO_Set:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_TMR0_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_ADC_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_INT_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_IOC_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Flash_Memory_Read:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_Flash_Memory_Write:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setLoad_AH_AL_Restore:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_getTemp_Safe:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_getPF_Safe:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setTemp_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setPowerFault_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setRF_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Buzzer_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Buzzer_Main:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_DelayOffPointSelect:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_DimmerLightsPointSelect:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_LedPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_setINT_GO:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Unlock:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Erasing:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getLoad_Safe:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_RfPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_RfSWPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_TouchPower:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_SwPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_getAD:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ?___wmul:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     ?___lwdiv:	
  2899                           ; 2 bytes @ 0x0
  2900                           
  2901  0020                     ?___ftpack:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     getDimmerLights_StatusFlag@Status:	
  2905                           ; 3 bytes @ 0x0
  2906                           
  2907  0020                     setINT_GO@command:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     getAD@adcon1:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     setLoad_Enable@command:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     setLoad_GO@command:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     setLoad_StatusOn@command:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     setLoad_StatusOff@command:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     setTemp_Enable@command:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     DelayTime_1us@count:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     ___wmul@multiplier:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     ___lwdiv@divisor:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937  0020                     ___ftpack@arg:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940                           
  2941                           ; 3 bytes @ 0x0
  2942  0020                     	ds	1
  2943  0021                     ??_setLoad_StatusOff:	
  2944  0021                     ??_setLoad_StatusOn:	
  2945                           ; 0 bytes @ 0x1
  2946                           
  2947  0021                     ??_Mcu_Initialization:	
  2948                           ; 0 bytes @ 0x1
  2949                           
  2950  0021                     ??_Temp_Initialization:	
  2951                           ; 0 bytes @ 0x1
  2952                           
  2953  0021                     ??_PowerFault_Initialization:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956  0021                     ??_RF_Initialization:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     ??_DimmerLights_Close:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962  0021                     CC2500_WriteByte@loop_a:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     CC2500_ReadByte@loop_b:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     DelayOffPointSelect@sw:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     DelayTimejudge@i:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DimmerLightsPointSelect@lights:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     LedPointSelect@led:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     Flash_Memory_Read@i:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     Flash_Memory_Write@i:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     setLoad_Count@command:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     setLoad_StatusOn@lights:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     setLoad_StatusOff@lights:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     setLoad_AH_AL_Restore@i:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     RfPointSelect@rf:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     RfSWPointSelect@sw:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     SwPointSelect@sw:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007                           
  3008                           ; 1 bytes @ 0x1
  3009  0021                     	ds	1
  3010  0022                     ??_CC2500_WriteCommand:	
  3011  0022                     ??_CC2500_ReadStatus:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setRF_RxStatus:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ??_DelayTime_1us:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_CC2500_WriteREG:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_DlyOff_Initialization:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ?_setSw_Status:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setRFSW_Status:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ?_setDimmerLights_Trigger:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ?_setDimmerLights_Switch:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_setTxData:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ??_setDimmerLights_Initialization:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_TriggerERROR:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setLED:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ??_setLED_Main:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_Load_Initialization:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ??_setSw_Enable:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ?_setRF_Enable:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_AdjGo:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ?_setDimmerLights_TriggerAdj:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ?_setDimmerLights_Clear:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ?_setRF_Learn:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     CC2500_WriteREG@value:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     DlyOff_Initialization@sw:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     DelayTimejudge@value:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setDimmerLights_TriggerERROR@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setDimmerLights_Switch@command:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setDimmerLights_AdjGo@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setDimmerLights_Trigger@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_TriggerAdj@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Clear@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setLED@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     Flash_Memory_Read@address:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     setRF_Learn@command:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setRF_RxStatus@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     setRF_Enable@command:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setRFSW_Status@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setSw_Enable@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     setSw_Status@command:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     DelayTime_1us@i:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     ___wmul@multiplicand:	
  3129                           ; 2 bytes @ 0x2
  3130                           
  3131  0022                     ___lwdiv@dividend:	
  3132                           ; 2 bytes @ 0x2
  3133                           
  3134                           
  3135                           ; 2 bytes @ 0x2
  3136  0022                     	ds	1
  3137  0023                     ??_setRF_RxStatus:	
  3138  0023                     ??_CC2500_WriteREG:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setSw_Status:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setRFSW_Status:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_Trigger:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setDimmerLights_Switch:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_setDimmerLights_TriggerERROR:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_setLED:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setRF_Enable:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_DelayOff_Initialization:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ?_setDelayOff_GO:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     ??_setDimmerLights_AdjGo:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     ??_setDimmerLights_TriggerAdj:	
  3172                           ; 0 bytes @ 0x3
  3173                           
  3174  0023                     ??_setDimmerLights_Clear:	
  3175                           ; 0 bytes @ 0x3
  3176                           
  3177  0023                     ??_getAD:	
  3178                           ; 0 bytes @ 0x3
  3179                           
  3180  0023                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x3
  3182                           
  3183  0023                     CC2500_WriteCommand@command:	
  3184                           ; 0 bytes @ 0x3
  3185                           
  3186  0023                     CC2500_ReadStatus@status_addr:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDelayOff_GO@command:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setDimmerLights_Initialization@lights:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     setDimmerLights_TriggerERROR@lights:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     setDimmerLights_Switch@lights:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setDimmerLights_AdjGo@lights:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     setDimmerLights_Trigger@lights:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     setDimmerLights_TriggerAdj@lights:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210  0023                     setDimmerLights_Clear@lights:	
  3211                           ; 1 bytes @ 0x3
  3212                           
  3213  0023                     setLED@led:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     getAD@adcon0:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     Flash_Memory_Read@ret:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     setRF_Learn@rf:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     setRF_RxStatus@rf:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     setTxData@rf:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     setRF_Enable@rf:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     setRFSW_Status@sw:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     setSw_Status@sw:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0x3
  3245  0023                     	ds	1
  3246  0024                     ??_CC2500_ClearTXFIFO:	
  3247  0024                     ??_CC2500_ClearRXFIFO:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_CC2500_SIDLEMode:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ?_setDimmerLights:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_setDimmerLights_ERROR:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_setLED_Initialization:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_getLoad_AD:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_getTemp_AD:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_getPowerFault_AD:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_Flash_Memory_Modify:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_RF_RxDisable:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_setSw_Initialization:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_Sw_DimmerAdjFunc:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_CC2500_TxData:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??_CC2500_RxData:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     ??_DimmerLights_Initialization:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     ??___wmul:	
  3293                           ; 0 bytes @ 0x4
  3294                           
  3295  0024                     ??___lwdiv:	
  3296                           ; 0 bytes @ 0x4
  3297                           
  3298  0024                     CC2500_WriteREG@w_addr:	
  3299                           ; 0 bytes @ 0x4
  3300                           
  3301  0024                     setDelayOff_GO@value:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setDimmerLights@status:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     setLED_Initialization@led:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     setLED_Main@led:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     RF_RxDisable@rf:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     setSw_Initialization@sw:	
  3317                           ; 1 bytes @ 0x4
  3318                           
  3319  0024                     Sw_DimmerAdjFunc@sw:	
  3320                           ; 1 bytes @ 0x4
  3321                           
  3322  0024                     ___ftpack@sign:	
  3323                           ; 1 bytes @ 0x4
  3324                           
  3325  0024                     DelayTime_1us@j:	
  3326                           ; 1 bytes @ 0x4
  3327                           
  3328  0024                     ___wmul@product:	
  3329                           ; 2 bytes @ 0x4
  3330                           
  3331                           
  3332                           ; 2 bytes @ 0x4
  3333  0024                     	ds	1
  3334  0025                     ??_CC2500_InitSetREG:	
  3335  0025                     ??_CC2500_InitPATable:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_setDimmerLights:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     ??_Switch_Initialization:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     ??___ftpack:	
  3345                           ; 0 bytes @ 0x5
  3346                           
  3347  0025                     ??_setDelayOff_GO:	
  3348                           ; 0 bytes @ 0x5
  3349                           
  3350  0025                     ??_LED_Initialization:	
  3351                           ; 0 bytes @ 0x5
  3352                           
  3353  0025                     ??_LED_Main:	
  3354                           ; 0 bytes @ 0x5
  3355                           
  3356  0025                     CC2500_TxData@loop_e:	
  3357                           ; 0 bytes @ 0x5
  3358                           
  3359  0025                     CC2500_RxData@loop_f:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362  0025                     setDimmerLights_ERROR@lights:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0025                     ___lwdiv@quotient:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x5
  3370  0025                     	ds	1
  3371  0026                     ??_CC2500_PowerRST:	
  3372  0026                     ??_CC2500_FrequencyCabr:	
  3373                           ; 0 bytes @ 0x6
  3374                           
  3375  0026                     ?_setBuz:	
  3376                           ; 0 bytes @ 0x6
  3377                           
  3378  0026                     CC2500_InitSetREG@temp1:	
  3379                           ; 0 bytes @ 0x6
  3380                           
  3381  0026                     CC2500_InitPATable@temp:	
  3382                           ; 1 bytes @ 0x6
  3383                           
  3384  0026                     setDimmerLights@lights:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     Flash_Memory_Modify@i:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     setBuz@time:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x6
  3395  0026                     	ds	1
  3396  0027                     ??_Flash_Memory_Main:	
  3397  0027                     CC2500_InitSetREG@temp2:	
  3398                           ; 0 bytes @ 0x7
  3399                           
  3400  0027                     CC2500_InitPATable@loop_d:	
  3401                           ; 1 bytes @ 0x7
  3402                           
  3403  0027                     setDelayOff_GO@sw:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     ___lwdiv@counter:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0x7
  3411  0027                     	ds	1
  3412  0028                     ??_setBuz:	
  3413  0028                     ?___awtoft:	
  3414                           ; 0 bytes @ 0x8
  3415                           
  3416  0028                     CC2500_InitSetREG@loop_c:	
  3417                           ; 3 bytes @ 0x8
  3418                           
  3419  0028                     getTemp_AD@channel:	
  3420                           ; 1 bytes @ 0x8
  3421                           
  3422  0028                     getPowerFault_AD@channel:	
  3423                           ; 1 bytes @ 0x8
  3424                           
  3425  0028                     ___awtoft@c:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428                           
  3429                           ; 2 bytes @ 0x8
  3430  0028                     	ds	1
  3431  0029                     ??_CC2500_PowerOnInitial:	
  3432  0029                     setBuz@count:	
  3433                           ; 0 bytes @ 0x9
  3434                           
  3435  0029                     getLoad_AD@channel:	
  3436                           ; 1 bytes @ 0x9
  3437                           
  3438                           
  3439                           ; 1 bytes @ 0x9
  3440  0029                     	ds	1
  3441  002A                     ??_MainT:	
  3442  002A                     ??_setLog_Code:	
  3443                           ; 0 bytes @ 0xA
  3444                           
  3445  002A                     ??_DimmerLights_Exceptions:	
  3446                           ; 0 bytes @ 0xA
  3447                           
  3448  002A                     DimmerLights_Exceptions@status:	
  3449                           ; 0 bytes @ 0xA
  3450                           
  3451  002A                     getLoad_AD@j:	
  3452                           ; 1 bytes @ 0xA
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0xA
  3456  002A                     	ds	1
  3457  002B                     ??_setLoad_Exceptions:	
  3458  002B                     ??_setOverTemp_Exceptions:	
  3459                           ; 0 bytes @ 0xB
  3460                           
  3461  002B                     ??_setPowerFault_Exceptions:	
  3462                           ; 0 bytes @ 0xB
  3463                           
  3464  002B                     ??___awtoft:	
  3465                           ; 0 bytes @ 0xB
  3466                           
  3467  002B                     getLoad_AD@i:	
  3468                           ; 0 bytes @ 0xB
  3469                           
  3470  002B                     setLog_Code@rf:	
  3471                           ; 1 bytes @ 0xB
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0xB
  3475  002B                     	ds	1
  3476  002C                     setLoad_Exceptions@command:	
  3477  002C                     setOverTemp_Exceptions@command:	
  3478                           ; 1 bytes @ 0xC
  3479                           
  3480  002C                     setPowerFault_Exceptions@command:	
  3481                           ; 1 bytes @ 0xC
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0xC
  3485  002C                     	ds	1
  3486  002D                     ??_Load_Main:	
  3487  002D                     ??_setTemp_Main:	
  3488                           ; 0 bytes @ 0xD
  3489                           
  3490  002D                     ??_setPowerFault_Main:	
  3491                           ; 0 bytes @ 0xD
  3492                           
  3493  002D                     ___awtoft@sign:	
  3494                           ; 0 bytes @ 0xD
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0xD
  3498  002D                     	ds	1
  3499  002E                     ?___ftdiv:	
  3500  002E                     ?___ftmul:	
  3501                           ; 3 bytes @ 0xE
  3502                           
  3503  002E                     ___ftdiv@f2:	
  3504                           ; 3 bytes @ 0xE
  3505                           
  3506  002E                     ___ftmul@f1:	
  3507                           ; 3 bytes @ 0xE
  3508                           
  3509                           
  3510                           ; 3 bytes @ 0xE
  3511  002E                     	ds	1
  3512  002F                     ??_PowerFault_Main:	
  3513                           
  3514                           ; 0 bytes @ 0xF
  3515  002F                     	ds	1
  3516  0030                     ??_Temp_Main:	
  3517                           
  3518                           ; 0 bytes @ 0x10
  3519  0030                     	ds	1
  3520  0031                     Load_Main@i:	
  3521  0031                     ___ftdiv@f1:	
  3522                           ; 1 bytes @ 0x11
  3523                           
  3524  0031                     ___ftmul@f2:	
  3525                           ; 3 bytes @ 0x11
  3526                           
  3527                           
  3528                           ; 3 bytes @ 0x11
  3529  0031                     	ds	3
  3530  0034                     ??___ftdiv:	
  3531  0034                     ??___ftmul:	
  3532                           ; 0 bytes @ 0x14
  3533                           
  3534                           
  3535                           ; 0 bytes @ 0x14
  3536  0034                     	ds	4
  3537  0038                     ___ftdiv@cntr:	
  3538  0038                     ___ftmul@exp:	
  3539                           ; 1 bytes @ 0x18
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x18
  3543  0038                     	ds	1
  3544  0039                     ___ftdiv@f3:	
  3545  0039                     ___ftmul@f3_as_product:	
  3546                           ; 3 bytes @ 0x19
  3547                           
  3548                           
  3549                           ; 3 bytes @ 0x19
  3550  0039                     	ds	3
  3551  003C                     ___ftdiv@exp:	
  3552  003C                     ___ftmul@cntr:	
  3553                           ; 1 bytes @ 0x1C
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0x1C
  3557  003C                     	ds	1
  3558  003D                     ___ftdiv@sign:	
  3559  003D                     ___ftmul@sign:	
  3560                           ; 1 bytes @ 0x1D
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x1D
  3564  003D                     	ds	1
  3565  003E                     ?___ftadd:	
  3566  003E                     ___ftadd@f1:	
  3567                           ; 3 bytes @ 0x1E
  3568                           
  3569                           
  3570                           ; 3 bytes @ 0x1E
  3571  003E                     	ds	3
  3572  0041                     ___ftadd@f2:	
  3573                           
  3574                           ; 3 bytes @ 0x21
  3575  0041                     	ds	3
  3576  0044                     ??___ftadd:	
  3577                           
  3578                           ; 0 bytes @ 0x24
  3579  0044                     	ds	4
  3580  0048                     ___ftadd@sign:	
  3581                           
  3582                           ; 1 bytes @ 0x28
  3583  0048                     	ds	1
  3584  0049                     ___ftadd@exp2:	
  3585                           
  3586                           ; 1 bytes @ 0x29
  3587  0049                     	ds	1
  3588  004A                     ___ftadd@exp1:	
  3589                           
  3590                           ; 1 bytes @ 0x2A
  3591  004A                     	ds	1
  3592  004B                     ?___fttol:	
  3593  004B                     ___fttol@f1:	
  3594                           ; 4 bytes @ 0x2B
  3595                           
  3596                           
  3597                           ; 3 bytes @ 0x2B
  3598  004B                     	ds	4
  3599  004F                     ??___fttol:	
  3600                           
  3601                           ; 0 bytes @ 0x2F
  3602  004F                     	ds	4
  3603  0053                     ___fttol@sign1:	
  3604                           
  3605                           ; 1 bytes @ 0x33
  3606  0053                     	ds	1
  3607  0054                     ___fttol@lval:	
  3608                           
  3609                           ; 4 bytes @ 0x34
  3610  0054                     	ds	4
  3611  0058                     ___fttol@exp1:	
  3612                           
  3613                           ; 1 bytes @ 0x38
  3614  0058                     	ds	1
  3615  0059                     ??_getPercentValue:	
  3616  0059                     ??_setPercentValue:	
  3617                           ; 0 bytes @ 0x39
  3618                           
  3619  0059                     setPercentValue@value:	
  3620                           ; 0 bytes @ 0x39
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x39
  3624  0059                     	ds	1
  3625  005A                     setPercentValue@i:	
  3626                           
  3627                           ; 3 bytes @ 0x3A
  3628  005A                     	ds	1
  3629  005B                     getPercentValue@value:	
  3630                           
  3631                           ; 1 bytes @ 0x3B
  3632  005B                     	ds	1
  3633  005C                     getPercentValue@i:	
  3634                           
  3635                           ; 3 bytes @ 0x3C
  3636  005C                     	ds	1
  3637  005D                     ?_setRF_DimmerLights:	
  3638  005D                     ??_Flash_Memory_Initialization:	
  3639                           ; 0 bytes @ 0x3D
  3640                           
  3641  005D                     setRF_DimmerLights@on:	
  3642                           ; 0 bytes @ 0x3D
  3643                           
  3644                           
  3645                           ; 1 bytes @ 0x3D
  3646  005D                     	ds	1
  3647  005E                     ??_setRF_DimmerLights:	
  3648  005E                     Flash_Memory_Initialization@i:	
  3649                           ; 0 bytes @ 0x3E
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x3E
  3653  005E                     	ds	1
  3654  005F                     ??_setDimmerLights_AdjRF:	
  3655                           
  3656                           ; 0 bytes @ 0x3F
  3657  005F                     	ds	1
  3658  0060                     setDimmerLights_AdjRF@lights:	
  3659  0060                     setRF_DimmerLights@status:	
  3660                           ; 1 bytes @ 0x40
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x40
  3664  0060                     	ds	1
  3665  0061                     ??_setRF_DimmerValue:	
  3666  0061                     setRF_DimmerLights@lights:	
  3667                           ; 0 bytes @ 0x41
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0x41
  3671  0061                     	ds	1
  3672  0062                     ??_DlyOff_Main:	
  3673  0062                     ?_setDimmerLights_Adj:	
  3674                           ; 0 bytes @ 0x42
  3675                           
  3676  0062                     ??_setRFSW_Control:	
  3677                           ; 0 bytes @ 0x42
  3678                           
  3679  0062                     ??_Sw_DimmerOnFunc:	
  3680                           ; 0 bytes @ 0x42
  3681                           
  3682  0062                     ??_Sw_DimmerOffFunc:	
  3683                           ; 0 bytes @ 0x42
  3684                           
  3685  0062                     setDimmerLights_Adj@status:	
  3686                           ; 0 bytes @ 0x42
  3687                           
  3688  0062                     Sw_DimmerOnFunc@Idle:	
  3689                           ; 1 bytes @ 0x42
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x42
  3693  0062                     	ds	1
  3694  0063                     ??_setDimmerLights_Adj:	
  3695  0063                     setRFSW_Control@sw:	
  3696                           ; 0 bytes @ 0x43
  3697                           
  3698  0063                     setRF_DimmerValue@lights:	
  3699                           ; 1 bytes @ 0x43
  3700                           
  3701  0063                     Sw_DimmerOnFunc@sw:	
  3702                           ; 1 bytes @ 0x43
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x43
  3706  0063                     	ds	1
  3707  0064                     ??_setRFSW_AdjControl:	
  3708  0064                     DlyOff_Main@sw:	
  3709                           ; 0 bytes @ 0x44
  3710                           
  3711  0064                     setDimmerLights_Adj@lights:	
  3712                           ; 1 bytes @ 0x44
  3713                           
  3714  0064                     Sw_DimmerOffFunc@sw:	
  3715                           ; 1 bytes @ 0x44
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x44
  3719  0064                     	ds	1
  3720  0065                     ??_setDimmerLights_Main:	
  3721  0065                     ??_setSw_Main:	
  3722                           ; 0 bytes @ 0x45
  3723                           
  3724  0065                     ??_DelayOff_Main:	
  3725                           ; 0 bytes @ 0x45
  3726                           
  3727  0065                     setDimmerLights_Main@clear:	
  3728                           ; 0 bytes @ 0x45
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x45
  3732  0065                     	ds	1
  3733  0066                     setDimmerLights_Main@lights:	
  3734  0066                     setRFSW_AdjControl@sw:	
  3735                           ; 1 bytes @ 0x46
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x46
  3739  0066                     	ds	1
  3740  0067                     ??_setControl_Lights_Table:	
  3741  0067                     ??_DimmerLights_Main:	
  3742                           ; 0 bytes @ 0x47
  3743                           
  3744  0067                     setControl_Lights_Table@rf:	
  3745                           ; 0 bytes @ 0x47
  3746                           
  3747  0067                     _setSw_Main$4561:	
  3748                           ; 1 bytes @ 0x47
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x47
  3752  0067                     	ds	1
  3753  0068                     ??_getRxData:	
  3754  0068                     getRxData@rf:	
  3755                           ; 0 bytes @ 0x48
  3756                           
  3757  0068                     setSw_Main@sw:	
  3758                           ; 1 bytes @ 0x48
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x48
  3762  0068                     	ds	1
  3763  0069                     ??_Switch_Main:	
  3764  0069                     ??_setRF_Main:	
  3765                           ; 0 bytes @ 0x49
  3766                           
  3767                           
  3768                           ; 0 bytes @ 0x49
  3769  0069                     	ds	1
  3770  006A                     setRF_Main@rf:	
  3771                           
  3772                           ; 1 bytes @ 0x4A
  3773  006A                     	ds	1
  3774  006B                     _setRF_Main$4215:	
  3775                           
  3776                           ; 1 bytes @ 0x4B
  3777  006B                     	ds	1
  3778  006C                     ??_RF_Main:	
  3779  006C                     ??_main:	
  3780                           ; 0 bytes @ 0x4C
  3781                           
  3782                           
  3783                           	psect	maintext
  3784  135D                     __pmaintext:	
  3785                           ; 0 bytes @ 0x4C
  3786 ;;
  3787 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3788 ;;
  3789 ;; *************** function _main *****************
  3790 ;; Defined at:
  3791 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;		None               void
  3798 ;; Registers used:
  3799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 17F/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels required when called:   14
  3811 ;; This function calls:
  3812 ;;		_Buzzer_Initialization
  3813 ;;		_Buzzer_Main
  3814 ;;		_CC2500_PowerOnInitial
  3815 ;;		_DelayOff_Initialization
  3816 ;;		_DelayOff_Main
  3817 ;;		_DimmerLights_Initialization
  3818 ;;		_DimmerLights_Main
  3819 ;;		_Flash_Memory_Initialization
  3820 ;;		_Flash_Memory_Main
  3821 ;;		_LED_Initialization
  3822 ;;		_LED_Main
  3823 ;;		_Load_Initialization
  3824 ;;		_Load_Main
  3825 ;;		_MainT
  3826 ;;		_MainT_Initialization
  3827 ;;		_Mcu_Initialization
  3828 ;;		_PowerFault_Initialization
  3829 ;;		_PowerFault_Main
  3830 ;;		_RF_Initialization
  3831 ;;		_RF_Main
  3832 ;;		_Switch_Initialization
  3833 ;;		_Switch_Main
  3834 ;;		_Temp_Initialization
  3835 ;;		_Temp_Main
  3836 ;;		_getLoad_AD
  3837 ;;		_getPowerFault_AD
  3838 ;;		_getTemp_AD
  3839 ;; This function is called by:
  3840 ;;		Startup code after reset
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _main
  3846  135D                     _main:	
  3847                           
  3848                           ;main.c: 9: MainT_Initialization();
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3852  135D  31A5  256A  3193   	fcall	_MainT_Initialization
  3853                           
  3854                           ;main.c: 10: Mcu_Initialization();
  3855  1360  31A7  279D  3193   	fcall	_Mcu_Initialization
  3856                           
  3857                           ;main.c: 11: Flash_Memory_Initialization();
  3858  1363  318C  24F1  3193   	fcall	_Flash_Memory_Initialization
  3859                           
  3860                           ;main.c: 12: LED_Initialization();
  3861  1366  31A6  2637  3193   	fcall	_LED_Initialization
  3862                           
  3863                           ;main.c: 13: Buzzer_Initialization();
  3864  1369  31A5  2574  3193   	fcall	_Buzzer_Initialization
  3865                           
  3866                           ;main.c: 15: ;;
  3867                           ;main.c: 16: Temp_Initialization();
  3868  136C  31A4  24E5  3193   	fcall	_Temp_Initialization
  3869                           
  3870                           ;main.c: 17: Load_Initialization();
  3871  136F  31A6  264F  3193   	fcall	_Load_Initialization
  3872                           
  3873                           ;main.c: 18: PowerFault_Initialization();
  3874  1372  31A4  24DF  3193   	fcall	_PowerFault_Initialization
  3875                           
  3876                           ;main.c: 19: DelayOff_Initialization();
  3877  1375  31A4  24F7  3193   	fcall	_DelayOff_Initialization
  3878                           
  3879                           ;main.c: 21: DimmerLights_Initialization();
  3880  1378  31A6  2613  3193   	fcall	_DimmerLights_Initialization
  3881                           
  3882                           ;main.c: 22: ;;
  3883                           ;main.c: 23: ;;
  3884                           ;main.c: 24: ;;
  3885                           ;main.c: 26: Switch_Initialization();
  3886  137B  31A5  2557  3193   	fcall	_Switch_Initialization
  3887                           
  3888                           ;main.c: 27: RF_Initialization();
  3889  137E  31A4  24FF  3193   	fcall	_RF_Initialization
  3890                           
  3891                           ;main.c: 28: CC2500_PowerOnInitial();
  3892  1381  31A7  275D  3193   	fcall	_CC2500_PowerOnInitial
  3893  1384                     l9640:	
  3894                           ;main.c: 30: while(1)
  3895                           
  3896                           
  3897                           ;main.c: 31: {
  3898                           ;main.c: 32: if(TMain->PowerON)
  3899  1384  087D               	movf	_TMain,w
  3900  1385  0086               	movwf	6
  3901  1386  3001               	movlw	1	; select bank2/3
  3902  1387  0087               	movwf	7
  3903  1388  1C01               	btfss	1,0
  3904  1389  2B99               	goto	l9644
  3905                           
  3906                           ;main.c: 33: {
  3907                           ;main.c: 35: ;;
  3908                           ;main.c: 39: getLoad_AD(0x05);
  3909  138A  3005               	movlw	5
  3910  138B  3189  2152  3193   	fcall	_getLoad_AD
  3911                           
  3912                           ;main.c: 43: getTemp_AD(0x09);
  3913  138E  3009               	movlw	9
  3914  138F  3192  22F1  3193   	fcall	_getTemp_AD
  3915                           
  3916                           ;main.c: 47: getPowerFault_AD(0x11);
  3917  1392  3011               	movlw	17
  3918  1393  319C  2467  3193   	fcall	_getPowerFault_AD
  3919                           
  3920                           ;main.c: 59: Buzzer_Main();
  3921  1396  3189  21E8  3193   	fcall	_Buzzer_Main
  3922  1399                     l9644:	
  3923                           
  3924                           ;main.c: 61: }
  3925                           ;main.c: 63: if(TMain->T0_Timerout)
  3926  1399  087D               	movf	_TMain,w
  3927  139A  0086               	movwf	6
  3928  139B  3001               	movlw	1	; select bank2/3
  3929  139C  0087               	movwf	7
  3930  139D  1C81               	btfss	1,1
  3931  139E  2B84               	goto	l9640
  3932                           
  3933                           ;main.c: 64: {
  3934                           ;main.c: 65: TMain->T0_Timerout = 0;
  3935  139F  087D               	movf	_TMain,w
  3936  13A0  0086               	movwf	6
  3937  13A1  3001               	movlw	1	; select bank2/3
  3938  13A2  0087               	movwf	7
  3939  13A3  1081               	bcf	1,1
  3940                           
  3941                           ;main.c: 66: MainT();
  3942  13A4  3196  2600  3193   	fcall	_MainT
  3943                           
  3944                           ;main.c: 67: if(TMain->PowerON)
  3945  13A7  087D               	movf	_TMain,w
  3946  13A8  0086               	movwf	6
  3947  13A9  3001               	movlw	1	; select bank2/3
  3948  13AA  0087               	movwf	7
  3949  13AB  1C01               	btfss	1,0
  3950  13AC  2B84               	goto	l9640
  3951                           
  3952                           ;main.c: 68: {
  3953                           ;main.c: 69: Flash_Memory_Main();
  3954  13AD  319D  25E9  3193   	fcall	_Flash_Memory_Main
  3955                           
  3956                           ;main.c: 71: LED_Main();
  3957  13B0  31A6  2643  3193   	fcall	_LED_Main
  3958                           
  3959                           ;main.c: 73: ;;
  3960                           ;main.c: 74: Temp_Main();
  3961  13B3  31A4  24E8  3193   	fcall	_Temp_Main
  3962                           
  3963                           ;main.c: 75: Load_Main();
  3964  13B6  3180  2050  3193   	fcall	_Load_Main
  3965                           
  3966                           ;main.c: 76: PowerFault_Main();
  3967  13B9  31A4  24E2  3193   	fcall	_PowerFault_Main
  3968                           
  3969                           ;main.c: 78: ;;
  3970                           ;main.c: 79: DimmerLights_Main();
  3971  13BC  31A5  2529  3193   	fcall	_DimmerLights_Main
  3972                           
  3973                           ;main.c: 80: Switch_Main();
  3974  13BF  31A5  2507  3193   	fcall	_Switch_Main
  3975                           
  3976                           ;main.c: 81: ;;
  3977                           ;main.c: 82: ;;
  3978                           ;main.c: 84: RF_Main();
  3979  13C2  31A5  2503  3193   	fcall	_RF_Main
  3980                           
  3981                           ;main.c: 85: DelayOff_Main();
  3982  13C5  31A4  24FB  3193   	fcall	_DelayOff_Main
  3983  13C8  2B84               	goto	l9640
  3984  13C9                     __end_of_main:	
  3985                           
  3986                           	psect	text1
  3987  12F1                     __ptext1:	
  3988 ;; *************** function _getTemp_AD *****************
  3989 ;; Defined at:
  3990 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  channel         1    wreg     unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  channel         1    8[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;		None               void
  3997 ;; Registers used:
  3998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;Total ram usage:        5 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    5
  4011 ;; This function calls:
  4012 ;;		_getAD
  4013 ;; This function is called by:
  4014 ;;		_main
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _getTemp_AD
  4020  12F1                     _getTemp_AD:	
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024                           ;getTemp_AD@channel stored from wreg
  4025  12F1  0020               	movlb	0	; select bank0
  4026  12F2  00A8               	movwf	getTemp_AD@channel
  4027                           
  4028                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4029  12F3  087C               	movf	_Temp,w
  4030  12F4  0086               	movwf	6
  4031  12F5  3001               	movlw	1	; select bank2/3
  4032  12F6  0087               	movwf	7
  4033  12F7  1D01               	btfss	1,2
  4034  12F8  0008               	return
  4035                           
  4036                           ;OverTemperature_B1.c: 38: {
  4037                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4038  12F9  30F0               	movlw	240
  4039  12FA  00A4               	movwf	??_getTemp_AD
  4040  12FB  0824               	movf	??_getTemp_AD,w
  4041  12FC  00A0               	movwf	getAD@adcon1
  4042  12FD  0828               	movf	getTemp_AD@channel,w
  4043  12FE  31A7  2787  3192   	fcall	_getAD
  4044  1301  087C               	movf	_Temp,w
  4045  1302  3E0A               	addlw	10
  4046  1303  0086               	movwf	6
  4047  1304  3001               	movlw	1	; select bank2/3
  4048  1305  0087               	movwf	7
  4049  1306  0020               	movlb	0	; select bank0
  4050  1307  0820               	movf	?_getAD,w
  4051  1308  3FC0               	movwi [0]fsr1
  4052  1309  0821               	movf	?_getAD+1,w
  4053  130A  3FC1               	movwi [1]fsr1
  4054                           
  4055                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4056  130B  087C               	movf	_Temp,w
  4057  130C  3E0A               	addlw	10
  4058  130D  0086               	movwf	6
  4059  130E  3001               	movlw	1	; select bank2/3
  4060  130F  0087               	movwf	7
  4061  1310  3F40               	moviw [0]fsr1
  4062  1311  00A4               	movwf	??_getTemp_AD
  4063  1312  3F41               	moviw [1]fsr1
  4064  1313  00A5               	movwf	??_getTemp_AD+1
  4065  1314  087C               	movf	_Temp,w
  4066  1315  3E06               	addlw	6
  4067  1316  0086               	movwf	6
  4068  1317  3001               	movlw	1	; select bank2/3
  4069  1318  0087               	movwf	7
  4070  1319  3F40               	moviw [0]fsr1
  4071  131A  00A6               	movwf	??_getTemp_AD+2
  4072  131B  3F41               	moviw [1]fsr1
  4073  131C  00A7               	movwf	??_getTemp_AD+3
  4074  131D  0825               	movf	??_getTemp_AD+1,w
  4075  131E  0227               	subwf	??_getTemp_AD+3,w
  4076  131F  1D03               	skipz
  4077  1320  2B23               	goto	u9115
  4078  1321  0824               	movf	??_getTemp_AD,w
  4079  1322  0226               	subwf	??_getTemp_AD+2,w
  4080  1323                     u9115:	
  4081  1323  1803               	skipnc
  4082  1324  2B34               	goto	l9394
  4083                           
  4084                           ;OverTemperature_B1.c: 41: {
  4085                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4086  1325  087C               	movf	_Temp,w
  4087  1326  3E0A               	addlw	10
  4088  1327  0086               	movwf	6
  4089  1328  3001               	movlw	1	; select bank2/3
  4090  1329  0087               	movwf	7
  4091  132A  087C               	movf	_Temp,w
  4092  132B  3E06               	addlw	6
  4093  132C  0084               	movwf	4
  4094  132D  3001               	movlw	1	; select bank2/3
  4095  132E  0085               	movwf	5
  4096  132F  3F40               	moviw [0]fsr1
  4097  1330  3F80               	movwi [0]fsr0
  4098  1331  3F41               	moviw [1]fsr1
  4099  1332  3F81               	movwi [1]fsr0
  4100                           
  4101                           ;OverTemperature_B1.c: 43: }
  4102  1333  0008               	return
  4103  1334                     l9394:	
  4104                           
  4105                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4106  1334  087C               	movf	_Temp,w
  4107  1335  3E0A               	addlw	10
  4108  1336  0086               	movwf	6
  4109  1337  3001               	movlw	1	; select bank2/3
  4110  1338  0087               	movwf	7
  4111  1339  3F40               	moviw [0]fsr1
  4112  133A  00A4               	movwf	??_getTemp_AD
  4113  133B  3F41               	moviw [1]fsr1
  4114  133C  00A5               	movwf	??_getTemp_AD+1
  4115  133D  087C               	movf	_Temp,w
  4116  133E  3E08               	addlw	8
  4117  133F  0086               	movwf	6
  4118  1340  3001               	movlw	1	; select bank2/3
  4119  1341  0087               	movwf	7
  4120  1342  3F40               	moviw [0]fsr1
  4121  1343  00A6               	movwf	??_getTemp_AD+2
  4122  1344  3F41               	moviw [1]fsr1
  4123  1345  00A7               	movwf	??_getTemp_AD+3
  4124  1346  0825               	movf	??_getTemp_AD+1,w
  4125  1347  0227               	subwf	??_getTemp_AD+3,w
  4126  1348  1D03               	skipz
  4127  1349  2B4C               	goto	u9125
  4128  134A  0824               	movf	??_getTemp_AD,w
  4129  134B  0226               	subwf	??_getTemp_AD+2,w
  4130  134C                     u9125:	
  4131  134C  1803               	skipnc
  4132  134D  0008               	return
  4133                           
  4134                           ;OverTemperature_B1.c: 45: {
  4135                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4136  134E  087C               	movf	_Temp,w
  4137  134F  3E0A               	addlw	10
  4138  1350  0086               	movwf	6
  4139  1351  3001               	movlw	1	; select bank2/3
  4140  1352  0087               	movwf	7
  4141  1353  087C               	movf	_Temp,w
  4142  1354  3E08               	addlw	8
  4143  1355  0084               	movwf	4
  4144  1356  3001               	movlw	1	; select bank2/3
  4145  1357  0085               	movwf	5
  4146  1358  3F40               	moviw [0]fsr1
  4147  1359  3F80               	movwi [0]fsr0
  4148  135A  3F41               	moviw [1]fsr1
  4149  135B  3F81               	movwi [1]fsr0
  4150  135C  0008               	return
  4151  135D                     __end_of_getTemp_AD:	
  4152                           
  4153                           	psect	text2
  4154  1C67                     __ptext2:	
  4155 ;; *************** function _getPowerFault_AD *****************
  4156 ;; Defined at:
  4157 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  channel         1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  channel         1    8[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:        5 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    5
  4178 ;; This function calls:
  4179 ;;		_getAD
  4180 ;; This function is called by:
  4181 ;;		_main
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _getPowerFault_AD
  4187  1C67                     _getPowerFault_AD:	
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4191                           ;getPowerFault_AD@channel stored from wreg
  4192  1C67  0020               	movlb	0	; select bank0
  4193  1C68  00A8               	movwf	getPowerFault_AD@channel
  4194                           
  4195                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4196  1C69  087A               	movf	_PF,w
  4197  1C6A  0086               	movwf	6
  4198  1C6B  0187               	clrf	7
  4199  1C6C  1D81               	btfss	1,3
  4200  1C6D  0008               	return
  4201                           
  4202                           ;PowerFault_B1.c: 52: {
  4203                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4204  1C6E  30F0               	movlw	240
  4205  1C6F  00A4               	movwf	??_getPowerFault_AD
  4206  1C70  0824               	movf	??_getPowerFault_AD,w
  4207  1C71  00A0               	movwf	getAD@adcon1
  4208  1C72  0828               	movf	getPowerFault_AD@channel,w
  4209  1C73  31A7  2787  319C   	fcall	_getAD
  4210  1C76  087A               	movf	_PF,w
  4211  1C77  3E03               	addlw	3
  4212  1C78  0086               	movwf	6
  4213  1C79  0187               	clrf	7
  4214  1C7A  0020               	movlb	0	; select bank0
  4215  1C7B  0820               	movf	?_getAD,w
  4216  1C7C  3FC0               	movwi [0]fsr1
  4217  1C7D  0821               	movf	?_getAD+1,w
  4218  1C7E  3FC1               	movwi [1]fsr1
  4219                           
  4220                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4221  1C7F  087A               	movf	_PF,w
  4222  1C80  3E03               	addlw	3
  4223  1C81  0086               	movwf	6
  4224  1C82  0187               	clrf	7
  4225  1C83  3F40               	moviw [0]fsr1
  4226  1C84  00A4               	movwf	??_getPowerFault_AD
  4227  1C85  3F41               	moviw [1]fsr1
  4228  1C86  00A5               	movwf	??_getPowerFault_AD+1
  4229  1C87  0A7A               	incf	_PF,w
  4230  1C88  0086               	movwf	6
  4231  1C89  0187               	clrf	7
  4232  1C8A  3F40               	moviw [0]fsr1
  4233  1C8B  00A6               	movwf	??_getPowerFault_AD+2
  4234  1C8C  3F41               	moviw [1]fsr1
  4235  1C8D  00A7               	movwf	??_getPowerFault_AD+3
  4236  1C8E  0825               	movf	??_getPowerFault_AD+1,w
  4237  1C8F  0227               	subwf	??_getPowerFault_AD+3,w
  4238  1C90  1D03               	skipz
  4239  1C91  2C94               	goto	u9145
  4240  1C92  0824               	movf	??_getPowerFault_AD,w
  4241  1C93  0226               	subwf	??_getPowerFault_AD+2,w
  4242  1C94                     u9145:	
  4243  1C94  1803               	skipnc
  4244  1C95  0008               	return
  4245                           
  4246                           ;PowerFault_B1.c: 55: {
  4247                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4248  1C96  087A               	movf	_PF,w
  4249  1C97  3E03               	addlw	3
  4250  1C98  0086               	movwf	6
  4251  1C99  0187               	clrf	7
  4252  1C9A  0A7A               	incf	_PF,w
  4253  1C9B  0084               	movwf	4
  4254  1C9C  0185               	clrf	5
  4255  1C9D  3F40               	moviw [0]fsr1
  4256  1C9E  3F80               	movwi [0]fsr0
  4257  1C9F  3F41               	moviw [1]fsr1
  4258  1CA0  3F81               	movwi [1]fsr0
  4259  1CA1  0008               	return
  4260  1CA2                     __end_of_getPowerFault_AD:	
  4261                           
  4262                           	psect	text3
  4263  0952                     __ptext3:	
  4264 ;; *************** function _getLoad_AD *****************
  4265 ;; Defined at:
  4266 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  channel         1    wreg     unsigned char 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  channel         1    9[BANK0 ] unsigned char 
  4271 ;;  i               1   11[BANK0 ] unsigned char 
  4272 ;;  j               1   10[BANK0 ] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        8 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    5
  4289 ;; This function calls:
  4290 ;;		_getAD
  4291 ;; This function is called by:
  4292 ;;		_main
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _getLoad_AD
  4298  0952                     _getLoad_AD:	
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4302                           ;getLoad_AD@channel stored from wreg
  4303  0952  0020               	movlb	0	; select bank0
  4304  0953  00A9               	movwf	getLoad_AD@channel
  4305                           
  4306                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4307  0954  01AB               	clrf	getLoad_AD@i
  4308  0955  01AA               	clrf	getLoad_AD@j
  4309                           
  4310                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4311  0956  086E               	movf	_Load,w
  4312  0957  0086               	movwf	6
  4313  0958  3002               	movlw	2	; select bank4/5
  4314  0959  0087               	movwf	7
  4315  095A  1E01               	btfss	1,4
  4316  095B  0008               	return
  4317                           
  4318                           ;OverLoad_B1.c: 20: {
  4319                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4320  095C  30C0               	movlw	192
  4321  095D  00A4               	movwf	??_getLoad_AD
  4322  095E  0824               	movf	??_getLoad_AD,w
  4323  095F  00A0               	movwf	getAD@adcon1
  4324  0960  0829               	movf	getLoad_AD@channel,w
  4325  0961  31A7  2787  3189   	fcall	_getAD
  4326  0964  0020               	movlb	0	; select bank0
  4327  0965  086E               	movf	_Load,w
  4328  0966  3E32               	addlw	50
  4329  0967  0086               	movwf	6
  4330  0968  3002               	movlw	2	; select bank4/5
  4331  0969  0087               	movwf	7
  4332  096A  0820               	movf	?_getAD,w
  4333  096B  3FC0               	movwi [0]fsr1
  4334  096C  0821               	movf	?_getAD+1,w
  4335  096D  3FC1               	movwi [1]fsr1
  4336                           
  4337                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4338  096E  01AB               	clrf	getLoad_AD@i
  4339  096F  3005               	movlw	5
  4340  0970  022B               	subwf	getLoad_AD@i,w
  4341  0971  1803               	btfsc	3,0
  4342  0972  29AC               	goto	l9370
  4343  0973                     l9360:	
  4344                           
  4345                           ;OverLoad_B1.c: 23: {
  4346                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4347  0973  086E               	movf	_Load,w
  4348  0974  3E32               	addlw	50
  4349  0975  0086               	movwf	6
  4350  0976  3002               	movlw	2	; select bank4/5
  4351  0977  0087               	movwf	7
  4352  0978  3F40               	moviw [0]fsr1
  4353  0979  00A4               	movwf	??_getLoad_AD
  4354  097A  3F41               	moviw [1]fsr1
  4355  097B  00A5               	movwf	??_getLoad_AD+1
  4356  097C  352B               	lslf	getLoad_AD@i,w
  4357  097D  3E08               	addlw	8
  4358  097E  076E               	addwf	_Load,w
  4359  097F  00A6               	movwf	??_getLoad_AD+2
  4360  0980  0826               	movf	??_getLoad_AD+2,w
  4361  0981  0086               	movwf	6
  4362  0982  3002               	movlw	2	; select bank4/5
  4363  0983  0087               	movwf	7
  4364  0984  3F40               	moviw [0]fsr1
  4365  0985  00A7               	movwf	??_getLoad_AD+3
  4366  0986  3F41               	moviw [1]fsr1
  4367  0987  00A8               	movwf	??_getLoad_AD+4
  4368  0988  0825               	movf	??_getLoad_AD+1,w
  4369  0989  0228               	subwf	??_getLoad_AD+4,w
  4370  098A  1D03               	skipz
  4371  098B  298E               	goto	u9045
  4372  098C  0824               	movf	??_getLoad_AD,w
  4373  098D  0227               	subwf	??_getLoad_AD+3,w
  4374  098E                     u9045:	
  4375  098E  1803               	skipnc
  4376  098F  29A4               	goto	l9366
  4377                           
  4378                           ;OverLoad_B1.c: 25: {
  4379                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4380  0990  086E               	movf	_Load,w
  4381  0991  3E32               	addlw	50
  4382  0992  0086               	movwf	6
  4383  0993  3002               	movlw	2	; select bank4/5
  4384  0994  0087               	movwf	7
  4385  0995  352B               	lslf	getLoad_AD@i,w
  4386  0996  3E08               	addlw	8
  4387  0997  076E               	addwf	_Load,w
  4388  0998  00A4               	movwf	??_getLoad_AD
  4389  0999  0824               	movf	??_getLoad_AD,w
  4390  099A  0084               	movwf	4
  4391  099B  3002               	movlw	2	; select bank4/5
  4392  099C  0085               	movwf	5
  4393  099D  3F40               	moviw [0]fsr1
  4394  099E  3F80               	movwi [0]fsr0
  4395  099F  3F41               	moviw [1]fsr1
  4396  09A0  3F81               	movwi [1]fsr0
  4397                           
  4398                           ;OverLoad_B1.c: 27: j=1;
  4399  09A1  01AA               	clrf	getLoad_AD@j
  4400  09A2  0AAA               	incf	getLoad_AD@j,f
  4401                           
  4402                           ;OverLoad_B1.c: 28: break;
  4403  09A3  29AC               	goto	l9370
  4404  09A4                     l9366:	
  4405  09A4  3001               	movlw	1
  4406  09A5  00A4               	movwf	??_getLoad_AD
  4407  09A6  0824               	movf	??_getLoad_AD,w
  4408  09A7  07AB               	addwf	getLoad_AD@i,f
  4409  09A8  3005               	movlw	5
  4410  09A9  022B               	subwf	getLoad_AD@i,w
  4411  09AA  1C03               	skipc
  4412  09AB  2973               	goto	l9360
  4413  09AC                     l9370:	
  4414                           
  4415                           ;OverLoad_B1.c: 29: }
  4416                           ;OverLoad_B1.c: 30: }
  4417                           ;OverLoad_B1.c: 31: if(!j)
  4418  09AC  08AA               	movf	getLoad_AD@j,f
  4419  09AD  1D03               	skipz
  4420  09AE  0008               	return
  4421                           
  4422                           ;OverLoad_B1.c: 32: {
  4423                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4424  09AF  01AB               	clrf	getLoad_AD@i
  4425  09B0                     L1:	
  4426  09B0  3005               	movlw	5
  4427  09B1  022B               	subwf	getLoad_AD@i,w
  4428  09B2  1803               	btfsc	3,0
  4429  09B3  0008               	return
  4430                           
  4431                           ;OverLoad_B1.c: 34: {
  4432                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4433  09B4  352B               	lslf	getLoad_AD@i,w
  4434  09B5  3E1A               	addlw	26
  4435  09B6  076E               	addwf	_Load,w
  4436  09B7  00A4               	movwf	??_getLoad_AD
  4437  09B8  0824               	movf	??_getLoad_AD,w
  4438  09B9  0086               	movwf	6
  4439  09BA  3002               	movlw	2	; select bank4/5
  4440  09BB  0087               	movwf	7
  4441  09BC  3F40               	moviw [0]fsr1
  4442  09BD  00A5               	movwf	??_getLoad_AD+1
  4443  09BE  3F41               	moviw [1]fsr1
  4444  09BF  00A6               	movwf	??_getLoad_AD+2
  4445  09C0  086E               	movf	_Load,w
  4446  09C1  3E32               	addlw	50
  4447  09C2  0086               	movwf	6
  4448  09C3  3002               	movlw	2	; select bank4/5
  4449  09C4  0087               	movwf	7
  4450  09C5  3F40               	moviw [0]fsr1
  4451  09C6  00A7               	movwf	??_getLoad_AD+3
  4452  09C7  3F41               	moviw [1]fsr1
  4453  09C8  00A8               	movwf	??_getLoad_AD+4
  4454  09C9  0826               	movf	??_getLoad_AD+2,w
  4455  09CA  0228               	subwf	??_getLoad_AD+4,w
  4456  09CB  1D03               	skipz
  4457  09CC  29CF               	goto	u9085
  4458  09CD  0825               	movf	??_getLoad_AD+1,w
  4459  09CE  0227               	subwf	??_getLoad_AD+3,w
  4460  09CF                     u9085:	
  4461  09CF  1803               	skipnc
  4462  09D0  29E3               	goto	l9382
  4463                           
  4464                           ;OverLoad_B1.c: 36: {
  4465                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4466  09D1  086E               	movf	_Load,w
  4467  09D2  3E32               	addlw	50
  4468  09D3  0086               	movwf	6
  4469  09D4  3002               	movlw	2	; select bank4/5
  4470  09D5  0087               	movwf	7
  4471  09D6  352B               	lslf	getLoad_AD@i,w
  4472  09D7  3E1A               	addlw	26
  4473  09D8  076E               	addwf	_Load,w
  4474  09D9  00A4               	movwf	??_getLoad_AD
  4475  09DA  0824               	movf	??_getLoad_AD,w
  4476  09DB  0084               	movwf	4
  4477  09DC  3002               	movlw	2	; select bank4/5
  4478  09DD  0085               	movwf	5
  4479  09DE  3F40               	moviw [0]fsr1
  4480  09DF  3F80               	movwi [0]fsr0
  4481  09E0  3F41               	moviw [1]fsr1
  4482  09E1  3F81               	movwi [1]fsr0
  4483                           
  4484                           ;OverLoad_B1.c: 38: break;
  4485  09E2  0008               	return
  4486  09E3                     l9382:	
  4487  09E3  3001               	movlw	1
  4488  09E4  00A4               	movwf	??_getLoad_AD
  4489  09E5  0824               	movf	??_getLoad_AD,w
  4490  09E6  07AB               	addwf	getLoad_AD@i,f
  4491  09E7  29B0               	goto	L1
  4492  09E8                     __end_of_getLoad_AD:	
  4493                           
  4494                           	psect	text4
  4495  2787                     __ptext4:	
  4496 ;; *************** function _getAD *****************
  4497 ;; Defined at:
  4498 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  adcon0          1    wreg     unsigned char 
  4501 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  2    0[BANK0 ] int 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4513 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;Total ram usage:        4 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    4
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_getLoad_AD
  4524 ;;		_getTemp_AD
  4525 ;;		_getPowerFault_AD
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _getAD
  4531  2787                     _getAD:	
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4535                           ;getAD@adcon0 stored from wreg
  4536  2787  0020               	movlb	0	; select bank0
  4537  2788  00A3               	movwf	getAD@adcon0
  4538                           
  4539                           ;MCU_16f1518_B1.c: 311: ADCON0=adcon0;
  4540  2789  0823               	movf	getAD@adcon0,w
  4541  278A  0021               	movlb	1	; select bank1
  4542  278B  009D               	movwf	29	;volatile
  4543                           
  4544                           ;MCU_16f1518_B1.c: 312: ADCON1=adcon1;
  4545  278C  0020               	movlb	0	; select bank0
  4546  278D  0820               	movf	getAD@adcon1,w
  4547  278E  0021               	movlb	1	; select bank1
  4548  278F  009E               	movwf	30	;volatile
  4549                           
  4550                           ;MCU_16f1518_B1.c: 313: GO_nDONE=1;
  4551  2790  149D               	bsf	29,1	;volatile
  4552  2791                     l1604:	
  4553                           ;MCU_16f1518_B1.c: 314: while(GO_nDONE);
  4554                           
  4555  2791  189D               	btfsc	29,1	;volatile
  4556  2792  2F91               	goto	l1604
  4557                           
  4558                           ;MCU_16f1518_B1.c: 315: return ((ADRESH*256)+ADRESL);
  4559  2793  081C               	movf	28,w	;volatile
  4560  2794  0020               	movlb	0	; select bank0
  4561  2795  01A1               	clrf	?_getAD+1
  4562  2796  07A1               	addwf	?_getAD+1,f
  4563  2797  0021               	movlb	1	; select bank1
  4564  2798  081B               	movf	27,w	;volatile
  4565  2799  0020               	movlb	0	; select bank0
  4566  279A  01A0               	clrf	?_getAD
  4567  279B  07A0               	addwf	?_getAD,f
  4568  279C  0008               	return
  4569  279D                     __end_of_getAD:	
  4570                           
  4571                           	psect	text5
  4572  24E8                     __ptext5:	
  4573 ;; *************** function _Temp_Main *****************
  4574 ;; Defined at:
  4575 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;		None               void
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:   10
  4596 ;; This function calls:
  4597 ;;		_setTemp_Main
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _Temp_Main
  4605  24E8                     _Temp_Main:	
  4606                           
  4607                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4611  24E8  318E  26DD         	fcall	_setTemp_Main
  4612  24EA  0008               	return
  4613  24EB                     __end_of_Temp_Main:	
  4614                           
  4615                           	psect	text6
  4616  0EDD                     __ptext6:	
  4617 ;; *************** function _setTemp_Main *****************
  4618 ;; Defined at:
  4619 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4637 ;;Total ram usage:        3 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    9
  4640 ;; This function calls:
  4641 ;;		_getLoad_Safe
  4642 ;;		_getPF_Safe
  4643 ;;		_setOverTemp_Exceptions
  4644 ;; This function is called by:
  4645 ;;		_Temp_Main
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           
  4650                           ;psect for function _setTemp_Main
  4651  0EDD                     _setTemp_Main:	
  4652                           
  4653                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4654                           
  4655                           ;incstack = 0
  4656                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4657  0EDD  087C               	movf	_Temp,w
  4658  0EDE  0086               	movwf	6
  4659  0EDF  3001               	movlw	1	; select bank2/3
  4660  0EE0  0087               	movwf	7
  4661  0EE1  1C01               	btfss	1,0
  4662  0EE2  0008               	return
  4663                           
  4664                           ;OverTemperature_B1.c: 67: {
  4665                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4666  0EE3  087C               	movf	_Temp,w
  4667  0EE4  0086               	movwf	6
  4668  0EE5  3001               	movlw	1	; select bank2/3
  4669  0EE6  0087               	movwf	7
  4670  0EE7  1901               	btfsc	1,2
  4671  0EE8  2F29               	goto	l9002
  4672                           
  4673                           ;OverTemperature_B1.c: 69: {
  4674                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4675  0EE9  0A7C               	incf	_Temp,w
  4676  0EEA  0086               	movwf	6
  4677  0EEB  3001               	movlw	1	; select bank2/3
  4678  0EEC  0087               	movwf	7
  4679  0EED  3001               	movlw	1
  4680  0EEE  0781               	addwf	1,f
  4681  0EEF  3141               	addfsr 1,1
  4682  0EF0  1803               	skipnc
  4683  0EF1  0A81               	incf	1,f
  4684                           
  4685                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4686  0EF2  0A7C               	incf	_Temp,w
  4687  0EF3  0086               	movwf	6
  4688  0EF4  3001               	movlw	1	; select bank2/3
  4689  0EF5  0087               	movwf	7
  4690  0EF6  3F40               	moviw [0]fsr1
  4691  0EF7  0020               	movlb	0	; select bank0
  4692  0EF8  00AD               	movwf	??_setTemp_Main
  4693  0EF9  3F41               	moviw [1]fsr1
  4694  0EFA  00AE               	movwf	??_setTemp_Main+1
  4695  0EFB  3001               	movlw	1
  4696  0EFC  022E               	subwf	??_setTemp_Main+1,w
  4697  0EFD  30F4               	movlw	244
  4698  0EFE  1903               	skipnz
  4699  0EFF  022D               	subwf	??_setTemp_Main,w
  4700  0F00  1C03               	skipc
  4701  0F01  0008               	return
  4702                           
  4703                           ;OverTemperature_B1.c: 72: {
  4704                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4705  0F02  31A5  25C1  318E   	fcall	_getLoad_Safe
  4706  0F05  3A00               	xorlw	0
  4707  0F06  1903               	skipnz
  4708  0F07  2F20               	goto	l9000
  4709  0F08  31A5  2530  318E   	fcall	_getPF_Safe
  4710  0F0B  3A00               	xorlw	0
  4711  0F0C  1903               	skipnz
  4712  0F0D  2F20               	goto	l9000
  4713                           
  4714                           ;OverTemperature_B1.c: 74: {
  4715                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4716  0F0E  0A7C               	incf	_Temp,w
  4717  0F0F  0086               	movwf	6
  4718  0F10  3001               	movlw	1	; select bank2/3
  4719  0F11  0087               	movwf	7
  4720  0F12  3000               	movlw	0
  4721  0F13  3FC0               	movwi [0]fsr1
  4722  0F14  3FC1               	movwi [1]fsr1
  4723                           
  4724                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4725  0F15  087C               	movf	_Temp,w
  4726  0F16  0086               	movwf	6
  4727  0F17  3001               	movlw	1	; select bank2/3
  4728  0F18  0087               	movwf	7
  4729  0F19  1501               	bsf	1,2
  4730                           
  4731                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4732  0F1A  087C               	movf	_Temp,w
  4733  0F1B  0086               	movwf	6
  4734  0F1C  3001               	movlw	1	; select bank2/3
  4735  0F1D  0087               	movwf	7
  4736  0F1E  1201               	bcf	1,4
  4737                           
  4738                           ;OverTemperature_B1.c: 78: }
  4739  0F1F  0008               	return
  4740  0F20                     l9000:	
  4741                           
  4742                           ;OverTemperature_B1.c: 79: else
  4743                           ;OverTemperature_B1.c: 80: {
  4744                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4745  0F20  0A7C               	incf	_Temp,w
  4746  0F21  0086               	movwf	6
  4747  0F22  3001               	movlw	1	; select bank2/3
  4748  0F23  0087               	movwf	7
  4749  0F24  30E8               	movlw	232
  4750  0F25  3FC0               	movwi [0]fsr1
  4751  0F26  3003               	movlw	3
  4752  0F27  3FC1               	movwi [1]fsr1
  4753                           
  4754                           ;OverTemperature_B1.c: 82: }
  4755                           ;OverTemperature_B1.c: 83: }
  4756                           ;OverTemperature_B1.c: 84: }
  4757  0F28  0008               	return
  4758  0F29                     l9002:	
  4759                           
  4760                           ;OverTemperature_B1.c: 85: else
  4761                           ;OverTemperature_B1.c: 86: {
  4762                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4763  0F29  0A7C               	incf	_Temp,w
  4764  0F2A  0086               	movwf	6
  4765  0F2B  3001               	movlw	1	; select bank2/3
  4766  0F2C  0087               	movwf	7
  4767  0F2D  3001               	movlw	1
  4768  0F2E  0781               	addwf	1,f
  4769  0F2F  3141               	addfsr 1,1
  4770  0F30  1803               	skipnc
  4771  0F31  0A81               	incf	1,f
  4772                           
  4773                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4774  0F32  0A7C               	incf	_Temp,w
  4775  0F33  0086               	movwf	6
  4776  0F34  3001               	movlw	1	; select bank2/3
  4777  0F35  0087               	movwf	7
  4778  0F36  3F40               	moviw [0]fsr1
  4779  0F37  0020               	movlb	0	; select bank0
  4780  0F38  00AD               	movwf	??_setTemp_Main
  4781  0F39  3F41               	moviw [1]fsr1
  4782  0F3A  00AE               	movwf	??_setTemp_Main+1
  4783  0F3B  3000               	movlw	0
  4784  0F3C  022E               	subwf	??_setTemp_Main+1,w
  4785  0F3D  3004               	movlw	4
  4786  0F3E  1903               	skipnz
  4787  0F3F  022D               	subwf	??_setTemp_Main,w
  4788  0F40  1C03               	skipc
  4789  0F41  0008               	return
  4790                           
  4791                           ;OverTemperature_B1.c: 89: {
  4792                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4793  0F42  0A7C               	incf	_Temp,w
  4794  0F43  0086               	movwf	6
  4795  0F44  3001               	movlw	1	; select bank2/3
  4796  0F45  0087               	movwf	7
  4797  0F46  3000               	movlw	0
  4798  0F47  3FC0               	movwi [0]fsr1
  4799  0F48  3FC1               	movwi [1]fsr1
  4800                           
  4801                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4802  0F49  087C               	movf	_Temp,w
  4803  0F4A  0086               	movwf	6
  4804  0F4B  3001               	movlw	1	; select bank2/3
  4805  0F4C  0087               	movwf	7
  4806  0F4D  1101               	bcf	1,2
  4807                           
  4808                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4809  0F4E  087C               	movf	_Temp,w
  4810  0F4F  3E08               	addlw	8
  4811  0F50  0086               	movwf	6
  4812  0F51  3001               	movlw	1	; select bank2/3
  4813  0F52  0087               	movwf	7
  4814  0F53  087C               	movf	_Temp,w
  4815  0F54  3E04               	addlw	4
  4816  0F55  0084               	movwf	4
  4817  0F56  3001               	movlw	1	; select bank2/3
  4818  0F57  0085               	movwf	5
  4819  0F58  3F40               	moviw [0]fsr1
  4820  0F59  3F80               	movwi [0]fsr0
  4821  0F5A  3F41               	moviw [1]fsr1
  4822  0F5B  3F81               	movwi [1]fsr0
  4823                           
  4824                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4825  0F5C  087C               	movf	_Temp,w
  4826  0F5D  0086               	movwf	6
  4827  0F5E  3001               	movlw	1	; select bank2/3
  4828  0F5F  0087               	movwf	7
  4829  0F60  1C81               	btfss	1,1
  4830  0F61  2F8F               	goto	l9024
  4831                           
  4832                           ;OverTemperature_B1.c: 94: {
  4833                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4834  0F62  087C               	movf	_Temp,w
  4835  0F63  3E04               	addlw	4
  4836  0F64  0086               	movwf	6
  4837  0F65  3001               	movlw	1	; select bank2/3
  4838  0F66  0087               	movwf	7
  4839  0F67  3F40               	moviw [0]fsr1
  4840  0F68  00AD               	movwf	??_setTemp_Main
  4841  0F69  3F41               	moviw [1]fsr1
  4842  0F6A  00AE               	movwf	??_setTemp_Main+1
  4843  0F6B  3002               	movlw	2
  4844  0F6C  022E               	subwf	??_setTemp_Main+1,w
  4845  0F6D  3058               	movlw	88
  4846  0F6E  1903               	skipnz
  4847  0F6F  022D               	subwf	??_setTemp_Main,w
  4848  0F70  1C03               	skipc
  4849  0F71  2FBD               	goto	l9034
  4850                           
  4851                           ;OverTemperature_B1.c: 96: {
  4852                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4853  0F72  3001               	movlw	1
  4854  0F73  00AD               	movwf	??_setTemp_Main
  4855  0F74  087C               	movf	_Temp,w
  4856  0F75  3E03               	addlw	3
  4857  0F76  0086               	movwf	6
  4858  0F77  3001               	movlw	1	; select bank2/3
  4859  0F78  0087               	movwf	7
  4860  0F79  082D               	movf	??_setTemp_Main,w
  4861  0F7A  0781               	addwf	1,f
  4862                           
  4863                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4864  0F7B  087C               	movf	_Temp,w
  4865  0F7C  3E03               	addlw	3
  4866  0F7D  0086               	movwf	6
  4867  0F7E  3001               	movlw	1	; select bank2/3
  4868  0F7F  0087               	movwf	7
  4869  0F80  3003               	movlw	3
  4870  0F81  0201               	subwf	1,w
  4871  0F82  1C03               	skipc
  4872  0F83  2FC3               	goto	l9036
  4873                           
  4874                           ;OverTemperature_B1.c: 99: {
  4875                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4876  0F84  087C               	movf	_Temp,w
  4877  0F85  3E03               	addlw	3
  4878  0F86  0086               	movwf	6
  4879  0F87  3001               	movlw	1	; select bank2/3
  4880  0F88  0087               	movwf	7
  4881  0F89  0181               	clrf	1
  4882                           
  4883                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4884  0F8A  3000               	movlw	0
  4885  0F8B  319E  26BD  318E   	fcall	_setOverTemp_Exceptions
  4886                           
  4887                           ;OverTemperature_B1.c: 102: }
  4888                           ;OverTemperature_B1.c: 103: }
  4889  0F8E  2FC3               	goto	l9036
  4890  0F8F                     l9024:	
  4891                           ;OverTemperature_B1.c: 107: }
  4892                           ;OverTemperature_B1.c: 108: }
  4893                           
  4894                           ;OverTemperature_B1.c: 104: else
  4895                           ;OverTemperature_B1.c: 105: {
  4896                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4897                           
  4898                           
  4899                           ;OverTemperature_B1.c: 109: else
  4900                           ;OverTemperature_B1.c: 110: {
  4901                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4902  0F8F  087C               	movf	_Temp,w
  4903  0F90  3E04               	addlw	4
  4904  0F91  0086               	movwf	6
  4905  0F92  3001               	movlw	1	; select bank2/3
  4906  0F93  0087               	movwf	7
  4907  0F94  3F40               	moviw [0]fsr1
  4908  0F95  0020               	movlb	0	; select bank0
  4909  0F96  00AD               	movwf	??_setTemp_Main
  4910  0F97  3F41               	moviw [1]fsr1
  4911  0F98  00AE               	movwf	??_setTemp_Main+1
  4912  0F99  3002               	movlw	2
  4913  0F9A  022E               	subwf	??_setTemp_Main+1,w
  4914  0F9B  3027               	movlw	39
  4915  0F9C  1903               	skipnz
  4916  0F9D  022D               	subwf	??_setTemp_Main,w
  4917  0F9E  1803               	skipnc
  4918  0F9F  2FBD               	goto	l9034
  4919                           
  4920                           ;OverTemperature_B1.c: 112: {
  4921                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4922  0FA0  3001               	movlw	1
  4923  0FA1  00AD               	movwf	??_setTemp_Main
  4924  0FA2  087C               	movf	_Temp,w
  4925  0FA3  3E03               	addlw	3
  4926  0FA4  0086               	movwf	6
  4927  0FA5  3001               	movlw	1	; select bank2/3
  4928  0FA6  0087               	movwf	7
  4929  0FA7  082D               	movf	??_setTemp_Main,w
  4930  0FA8  0781               	addwf	1,f
  4931                           
  4932                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4933  0FA9  087C               	movf	_Temp,w
  4934  0FAA  3E03               	addlw	3
  4935  0FAB  0086               	movwf	6
  4936  0FAC  3001               	movlw	1	; select bank2/3
  4937  0FAD  0087               	movwf	7
  4938  0FAE  3003               	movlw	3
  4939  0FAF  0201               	subwf	1,w
  4940  0FB0  1C03               	skipc
  4941  0FB1  2FC3               	goto	l9036
  4942                           
  4943                           ;OverTemperature_B1.c: 115: {
  4944                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4945  0FB2  087C               	movf	_Temp,w
  4946  0FB3  3E03               	addlw	3
  4947  0FB4  0086               	movwf	6
  4948  0FB5  3001               	movlw	1	; select bank2/3
  4949  0FB6  0087               	movwf	7
  4950  0FB7  0181               	clrf	1
  4951                           
  4952                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4953  0FB8  3001               	movlw	1
  4954  0FB9  319E  26BD  318E   	fcall	_setOverTemp_Exceptions
  4955                           
  4956                           ;OverTemperature_B1.c: 118: }
  4957                           ;OverTemperature_B1.c: 119: }
  4958  0FBC  2FC3               	goto	l9036
  4959  0FBD                     l9034:	
  4960                           
  4961                           ;OverTemperature_B1.c: 120: else
  4962                           ;OverTemperature_B1.c: 121: {
  4963                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  4964  0FBD  087C               	movf	_Temp,w
  4965  0FBE  3E03               	addlw	3
  4966  0FBF  0086               	movwf	6
  4967  0FC0  3001               	movlw	1	; select bank2/3
  4968  0FC1  0087               	movwf	7
  4969  0FC2  0181               	clrf	1
  4970  0FC3                     l9036:	
  4971                           
  4972                           ;OverTemperature_B1.c: 123: }
  4973                           ;OverTemperature_B1.c: 124: }
  4974                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  4975  0FC3  087C               	movf	_Temp,w
  4976  0FC4  0086               	movwf	6
  4977  0FC5  3001               	movlw	1	; select bank2/3
  4978  0FC6  0087               	movwf	7
  4979  0FC7  1881               	btfsc	1,1
  4980  0FC8  2FCE               	goto	l9040
  4981                           
  4982                           ;OverTemperature_B1.c: 126: {
  4983                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  4984  0FC9  087C               	movf	_Temp,w
  4985  0FCA  0086               	movwf	6
  4986  0FCB  3001               	movlw	1	; select bank2/3
  4987  0FCC  0087               	movwf	7
  4988  0FCD  1601               	bsf	1,4
  4989  0FCE                     l9040:	
  4990                           
  4991                           ;OverTemperature_B1.c: 128: }
  4992                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  4993  0FCE  087C               	movf	_Temp,w
  4994  0FCF  3E04               	addlw	4
  4995  0FD0  0086               	movwf	6
  4996  0FD1  3001               	movlw	1	; select bank2/3
  4997  0FD2  0087               	movwf	7
  4998  0FD3  3F40               	moviw [0]fsr1
  4999  0FD4  0020               	movlb	0	; select bank0
  5000  0FD5  00AD               	movwf	??_setTemp_Main
  5001  0FD6  3F41               	moviw [1]fsr1
  5002  0FD7  00AE               	movwf	??_setTemp_Main+1
  5003  0FD8  082E               	movf	??_setTemp_Main+1,w
  5004  0FD9  00AF               	movwf	??_setTemp_Main+2
  5005  0FDA  086F               	movf	_Product,w
  5006  0FDB  3E18               	addlw	24
  5007  0FDC  0086               	movwf	6
  5008  0FDD  3001               	movlw	1	; select bank2/3
  5009  0FDE  0087               	movwf	7
  5010  0FDF  082F               	movf	??_setTemp_Main+2,w
  5011  0FE0  0081               	movwf	1
  5012                           
  5013                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5014  0FE1  087C               	movf	_Temp,w
  5015  0FE2  3E04               	addlw	4
  5016  0FE3  0086               	movwf	6
  5017  0FE4  3001               	movlw	1	; select bank2/3
  5018  0FE5  0087               	movwf	7
  5019  0FE6  0801               	movf	1,w
  5020  0FE7  00AD               	movwf	??_setTemp_Main
  5021  0FE8  086F               	movf	_Product,w
  5022  0FE9  3E19               	addlw	25
  5023  0FEA  0086               	movwf	6
  5024  0FEB  3001               	movlw	1	; select bank2/3
  5025  0FEC  0087               	movwf	7
  5026  0FED  082D               	movf	??_setTemp_Main,w
  5027  0FEE  0081               	movwf	1
  5028                           
  5029                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5030  0FEF  087C               	movf	_Temp,w
  5031  0FF0  3E06               	addlw	6
  5032  0FF1  0086               	movwf	6
  5033  0FF2  3001               	movlw	1	; select bank2/3
  5034  0FF3  0087               	movwf	7
  5035  0FF4  3000               	movlw	0
  5036  0FF5  3FC0               	movwi [0]fsr1
  5037  0FF6  3FC1               	movwi [1]fsr1
  5038                           
  5039                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5040  0FF7  087C               	movf	_Temp,w
  5041  0FF8  3E08               	addlw	8
  5042  0FF9  0086               	movwf	6
  5043  0FFA  3001               	movlw	1	; select bank2/3
  5044  0FFB  0087               	movwf	7
  5045  0FFC  3000               	movlw	0
  5046  0FFD  3FC0               	movwi [0]fsr1
  5047  0FFE  3FC1               	movwi [1]fsr1
  5048  0FFF  0008               	return
  5049  1000                     __end_of_setTemp_Main:	
  5050                           
  5051                           	psect	text7
  5052  1EBD                     __ptext7:	
  5053 ;; *************** function _setOverTemp_Exceptions *****************
  5054 ;; Defined at:
  5055 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  command         1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  command         1   12[BANK0 ] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;Total ram usage:        2 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    8
  5076 ;; This function calls:
  5077 ;;		_DimmerLights_Exceptions
  5078 ;;		_setBuz
  5079 ;;		_setLED
  5080 ;;		_setRF_Enable
  5081 ;;		_setSw_Enable
  5082 ;; This function is called by:
  5083 ;;		_setTemp_Main
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _setOverTemp_Exceptions
  5089  1EBD                     _setOverTemp_Exceptions:	
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5093                           ;setOverTemp_Exceptions@command stored from wreg
  5094  1EBD  0020               	movlb	0	; select bank0
  5095  1EBE  00AC               	movwf	setOverTemp_Exceptions@command
  5096                           
  5097                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5098  1EBF  087C               	movf	_Temp,w
  5099  1EC0  0086               	movwf	6
  5100  1EC1  3001               	movlw	1	; select bank2/3
  5101  1EC2  0087               	movwf	7
  5102  1EC3  082C               	movf	setOverTemp_Exceptions@command,w
  5103  1EC4  1081               	bcf	1,1
  5104  1EC5  1D03               	skipz
  5105  1EC6  1481               	bsf	1,1
  5106                           
  5107                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5108  1EC7  092C               	comf	setOverTemp_Exceptions@command,w
  5109  1EC8  3901               	andlw	1
  5110  1EC9  00AB               	movwf	??_setOverTemp_Exceptions
  5111  1ECA  087C               	movf	_Temp,w
  5112  1ECB  0086               	movwf	6
  5113  1ECC  3001               	movlw	1	; select bank2/3
  5114  1ECD  0087               	movwf	7
  5115  1ECE  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5116  1ECF  0801               	movf	1,w
  5117  1ED0  062B               	xorwf	??_setOverTemp_Exceptions,w
  5118  1ED1  39EF               	andlw	-17
  5119  1ED2  062B               	xorwf	??_setOverTemp_Exceptions,w
  5120  1ED3  0081               	movwf	1
  5121                           
  5122                           ;OverTemperature_B1.c: 142: if(command)
  5123  1ED4  082C               	movf	setOverTemp_Exceptions@command,w
  5124  1ED5  1903               	btfsc	3,2
  5125  1ED6  2EE3               	goto	l8664
  5126                           
  5127                           ;OverTemperature_B1.c: 143: {
  5128                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5129  1ED7  3001               	movlw	1
  5130  1ED8  3190  2052  319E   	fcall	_DimmerLights_Exceptions
  5131                           
  5132                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5133  1EDB  0020               	movlb	0	; select bank0
  5134  1EDC  01A2               	clrf	setLED@command
  5135  1EDD  0AA2               	incf	setLED@command,f
  5136  1EDE  3002               	movlw	2
  5137  1EDF  3191  2163  319E   	fcall	_setLED
  5138                           
  5139                           ;OverTemperature_B1.c: 148: }
  5140  1EE2  2EEC               	goto	l2026
  5141  1EE3                     l8664:	
  5142                           
  5143                           ;OverTemperature_B1.c: 149: else
  5144                           ;OverTemperature_B1.c: 150: {
  5145                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5146  1EE3  3064               	movlw	100
  5147  1EE4  0020               	movlb	0	; select bank0
  5148  1EE5  00A6               	movwf	setBuz@time
  5149  1EE6  3000               	movlw	0
  5150  1EE7  00A7               	movwf	setBuz@time+1
  5151  1EE8  3002               	movlw	2
  5152  1EE9  3195  2589  319E   	fcall	_setBuz
  5153  1EEC                     l2026:	
  5154                           
  5155                           ;OverTemperature_B1.c: 152: }
  5156                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5157  1EEC  0020               	movlb	0	; select bank0
  5158  1EED  082C               	movf	setOverTemp_Exceptions@command,w
  5159  1EEE  3E0A               	addlw	10
  5160  1EEF  00AB               	movwf	??_setOverTemp_Exceptions
  5161  1EF0  082B               	movf	??_setOverTemp_Exceptions,w
  5162  1EF1  00A2               	movwf	setLED@command
  5163  1EF2  3063               	movlw	99
  5164  1EF3  3191  2163  319E   	fcall	_setLED
  5165                           
  5166                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5167  1EF6  0020               	movlb	0	; select bank0
  5168  1EF7  092C               	comf	setOverTemp_Exceptions@command,w
  5169  1EF8  3901               	andlw	1
  5170  1EF9  31A6  26CD  319E   	fcall	_setSw_Enable
  5171                           
  5172                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5173  1EFC  0020               	movlb	0	; select bank0
  5174  1EFD  092C               	comf	setOverTemp_Exceptions@command,w
  5175  1EFE  3901               	andlw	1
  5176  1EFF  00AB               	movwf	??_setOverTemp_Exceptions
  5177  1F00  082B               	movf	??_setOverTemp_Exceptions,w
  5178  1F01  00A2               	movwf	setRF_Enable@command
  5179  1F02  3001               	movlw	1
  5180  1F03  319A  2281         	fcall	_setRF_Enable
  5181  1F05  0008               	return
  5182  1F06                     __end_of_setOverTemp_Exceptions:	
  5183                           
  5184                           	psect	text8
  5185  24E5                     __ptext8:	
  5186 ;; *************** function _Temp_Initialization *****************
  5187 ;; Defined at:
  5188 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;		None
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;		None               void
  5195 ;; Registers used:
  5196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;Total ram usage:        0 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    5
  5209 ;; This function calls:
  5210 ;;		_setTemp_Initialization
  5211 ;; This function is called by:
  5212 ;;		_main
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _Temp_Initialization
  5218  24E5                     _Temp_Initialization:	
  5219                           
  5220                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5224  24E5  31A5  25CC         	fcall	_setTemp_Initialization
  5225  24E7  0008               	return
  5226  24E8                     __end_of_Temp_Initialization:	
  5227                           
  5228                           	psect	text9
  5229  25CC                     __ptext9:	
  5230 ;; *************** function _setTemp_Initialization *****************
  5231 ;; Defined at:
  5232 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;		None
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		wreg, fsr1l, fsr1h
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        1 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    4
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_Temp_Initialization
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _setTemp_Initialization
  5262  25CC                     _setTemp_Initialization:	
  5263                           
  5264                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5268  25CC  3030               	movlw	_Temp1& (0+255)
  5269  25CD  0020               	movlb	0	; select bank0
  5270  25CE  00A0               	movwf	??_setTemp_Initialization
  5271  25CF  0820               	movf	??_setTemp_Initialization,w
  5272  25D0  00FC               	movwf	_Temp
  5273                           
  5274                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5275  25D1  087C               	movf	_Temp,w
  5276  25D2  0086               	movwf	6
  5277  25D3  3001               	movlw	1	; select bank2/3
  5278  25D4  0087               	movwf	7
  5279  25D5  1601               	bsf	1,4
  5280  25D6  0008               	return
  5281  25D7                     __end_of_setTemp_Initialization:	
  5282                           
  5283                           	psect	text10
  5284  2507                     __ptext10:	
  5285 ;; *************** function _Switch_Main *****************
  5286 ;; Defined at:
  5287 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;		None               void
  5294 ;; Registers used:
  5295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:   10
  5308 ;; This function calls:
  5309 ;;		_setSw_Main
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _Switch_Main
  5317  2507                     _Switch_Main:	
  5318                           
  5319                           ;Switch_B1.c: 65: setSw_Main(1);
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5323  2507  3001               	movlw	1
  5324  2508  3185  25F3         	fcall	_setSw_Main
  5325  250A  0008               	return
  5326  250B                     __end_of_Switch_Main:	
  5327                           
  5328                           	psect	text11
  5329  05F3                     __ptext11:	
  5330 ;; *************** function _setSw_Main *****************
  5331 ;; Defined at:
  5332 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  sw              1    wreg     unsigned char 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  sw              1   72[BANK0 ] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;		None               void
  5339 ;; Registers used:
  5340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;Total ram usage:        4 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    9
  5353 ;; This function calls:
  5354 ;;		_SwPointSelect
  5355 ;;		_Sw_DimmerAdjFunc
  5356 ;;		_Sw_DimmerOffFunc
  5357 ;;		_Sw_DimmerOnFunc
  5358 ;;		_setBuz
  5359 ;;		_setRF_Learn
  5360 ;; This function is called by:
  5361 ;;		_Switch_Main
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _setSw_Main
  5367  05F3                     _setSw_Main:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5371                           ;setSw_Main@sw stored from wreg
  5372  05F3  0020               	movlb	0	; select bank0
  5373  05F4  00E8               	movwf	setSw_Main@sw
  5374                           
  5375                           ;Switch_B1.c: 114: if(Sw->Enable)
  5376  05F5  086D               	movf	_Sw,w
  5377  05F6  0086               	movwf	6
  5378  05F7  3001               	movlw	1	; select bank2/3
  5379  05F8  0087               	movwf	7
  5380  05F9  1C01               	btfss	1,0
  5381  05FA  0008               	return
  5382                           
  5383                           ;Switch_B1.c: 115: {
  5384                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5385  05FB  0868               	movf	setSw_Main@sw,w
  5386  05FC  31A5  2595  3185   	fcall	_SwPointSelect
  5387                           
  5388                           ;Switch_B1.c: 144: Sw->Touch=(RA6 || RA4 || RA0 || RB1)?1:0;
  5389  05FF  0020               	movlb	0	; select bank0
  5390  0600  01E7               	clrf	_setSw_Main$4561
  5391  0601  0AE7               	incf	_setSw_Main$4561,f
  5392  0602  1F0C               	btfss	12,6	;volatile
  5393  0603  1A0C               	btfsc	12,4	;volatile
  5394  0604  2E09               	goto	l9182
  5395  0605  1C0C               	btfss	12,0	;volatile
  5396  0606  188D               	btfsc	13,1	;volatile
  5397  0607  2E09               	goto	l9182
  5398  0608  01E7               	clrf	_setSw_Main$4561
  5399  0609                     l9182:	
  5400  0609  086D               	movf	_Sw,w
  5401  060A  0086               	movwf	6
  5402  060B  3001               	movlw	1	; select bank2/3
  5403  060C  0087               	movwf	7
  5404  060D  0867               	movf	_setSw_Main$4561,w
  5405  060E  1081               	bcf	1,1
  5406  060F  1D03               	skipz
  5407  0610  1481               	bsf	1,1
  5408                           
  5409                           ;Switch_B1.c: 148: if(Sw->Touch)
  5410  0611  086D               	movf	_Sw,w
  5411  0612  0086               	movwf	6
  5412  0613  3001               	movlw	1	; select bank2/3
  5413  0614  0087               	movwf	7
  5414  0615  1C81               	btfss	1,1
  5415  0616  2EE7               	goto	l9232
  5416                           
  5417                           ;Switch_B1.c: 149: {
  5418                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5419  0617  086D               	movf	_Sw,w
  5420  0618  0086               	movwf	6
  5421  0619  3001               	movlw	1	; select bank2/3
  5422  061A  0087               	movwf	7
  5423  061B  1901               	btfsc	1,2
  5424  061C  2E3E               	goto	l9198
  5425                           
  5426                           ;Switch_B1.c: 151: {
  5427                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5428  061D  3001               	movlw	1
  5429  061E  00E5               	movwf	??_setSw_Main
  5430  061F  086D               	movf	_Sw,w
  5431  0620  3E02               	addlw	2
  5432  0621  0086               	movwf	6
  5433  0622  3001               	movlw	1	; select bank2/3
  5434  0623  0087               	movwf	7
  5435  0624  0865               	movf	??_setSw_Main,w
  5436  0625  0781               	addwf	1,f
  5437                           
  5438                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5439  0626  086D               	movf	_Sw,w
  5440  0627  3E02               	addlw	2
  5441  0628  0086               	movwf	6
  5442  0629  3001               	movlw	1	; select bank2/3
  5443  062A  0087               	movwf	7
  5444  062B  3005               	movlw	5
  5445  062C  0201               	subwf	1,w
  5446  062D  1C03               	skipc
  5447  062E  0008               	return
  5448                           
  5449                           ;Switch_B1.c: 154: {
  5450                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5451  062F  086D               	movf	_Sw,w
  5452  0630  3E02               	addlw	2
  5453  0631  0086               	movwf	6
  5454  0632  3001               	movlw	1	; select bank2/3
  5455  0633  0087               	movwf	7
  5456  0634  0181               	clrf	1
  5457                           
  5458                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5459  0635  086D               	movf	_Sw,w
  5460  0636  0086               	movwf	6
  5461  0637  3001               	movlw	1	; select bank2/3
  5462  0638  0087               	movwf	7
  5463  0639  1501               	bsf	1,2
  5464                           
  5465                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5466  063A  0868               	movf	setSw_Main@sw,w
  5467  063B  319F  27A7         	fcall	_Sw_DimmerOnFunc
  5468                           
  5469                           ;Switch_B1.c: 162: }
  5470                           ;Switch_B1.c: 163: }
  5471  063D  0008               	return
  5472  063E                     l9198:	
  5473                           
  5474                           ;Switch_B1.c: 164: else
  5475                           ;Switch_B1.c: 165: {
  5476                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5477  063E  0020               	movlb	0	; select bank0
  5478  063F  086D               	movf	_Sw,w
  5479  0640  0086               	movwf	6
  5480  0641  3001               	movlw	1	; select bank2/3
  5481  0642  0087               	movwf	7
  5482  0643  1981               	btfsc	1,3
  5483  0644  2E70               	goto	l9208
  5484                           
  5485                           ;Switch_B1.c: 167: {
  5486                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5487  0645  086D               	movf	_Sw,w
  5488  0646  3E03               	addlw	3
  5489  0647  0086               	movwf	6
  5490  0648  3001               	movlw	1	; select bank2/3
  5491  0649  0087               	movwf	7
  5492  064A  3001               	movlw	1
  5493  064B  0781               	addwf	1,f
  5494  064C  3141               	addfsr 1,1
  5495  064D  1803               	skipnc
  5496  064E  0A81               	incf	1,f
  5497                           
  5498                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5499  064F  086D               	movf	_Sw,w
  5500  0650  3E03               	addlw	3
  5501  0651  0086               	movwf	6
  5502  0652  3001               	movlw	1	; select bank2/3
  5503  0653  0087               	movwf	7
  5504  0654  3F40               	moviw [0]fsr1
  5505  0655  00E5               	movwf	??_setSw_Main
  5506  0656  3F41               	moviw [1]fsr1
  5507  0657  00E6               	movwf	??_setSw_Main+1
  5508  0658  3000               	movlw	0
  5509  0659  0266               	subwf	??_setSw_Main+1,w
  5510  065A  3096               	movlw	150
  5511  065B  1903               	skipnz
  5512  065C  0265               	subwf	??_setSw_Main,w
  5513  065D  1C03               	skipc
  5514  065E  0008               	return
  5515                           
  5516                           ;Switch_B1.c: 170: {
  5517                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5518  065F  086D               	movf	_Sw,w
  5519  0660  3E03               	addlw	3
  5520  0661  0086               	movwf	6
  5521  0662  3001               	movlw	1	; select bank2/3
  5522  0663  0087               	movwf	7
  5523  0664  3000               	movlw	0
  5524  0665  3FC0               	movwi [0]fsr1
  5525  0666  3FC1               	movwi [1]fsr1
  5526                           
  5527                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5528  0667  086D               	movf	_Sw,w
  5529  0668  0086               	movwf	6
  5530  0669  3001               	movlw	1	; select bank2/3
  5531  066A  0087               	movwf	7
  5532  066B  1581               	bsf	1,3
  5533                           
  5534                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5535  066C  0868               	movf	setSw_Main@sw,w
  5536  066D  319A  220A         	fcall	_Sw_DimmerAdjFunc
  5537                           
  5538                           ;Switch_B1.c: 178: }
  5539                           ;Switch_B1.c: 179: }
  5540  066F  0008               	return
  5541  0670                     l9208:	
  5542                           
  5543                           ;Switch_B1.c: 180: else
  5544                           ;Switch_B1.c: 181: {
  5545                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5546  0670  0020               	movlb	0	; select bank0
  5547  0671  086D               	movf	_Sw,w
  5548  0672  0086               	movwf	6
  5549  0673  3001               	movlw	1	; select bank2/3
  5550  0674  0087               	movwf	7
  5551  0675  1A01               	btfsc	1,4
  5552  0676  2EB4               	goto	l9222
  5553                           
  5554                           ;Switch_B1.c: 183: {
  5555                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5556  0677  086D               	movf	_Sw,w
  5557  0678  3E05               	addlw	5
  5558  0679  0086               	movwf	6
  5559  067A  3001               	movlw	1	; select bank2/3
  5560  067B  0087               	movwf	7
  5561  067C  3001               	movlw	1
  5562  067D  0781               	addwf	1,f
  5563  067E  3141               	addfsr 1,1
  5564  067F  1803               	skipnc
  5565  0680  0A81               	incf	1,f
  5566                           
  5567                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5568  0681  086D               	movf	_Sw,w
  5569  0682  3E05               	addlw	5
  5570  0683  0086               	movwf	6
  5571  0684  3001               	movlw	1	; select bank2/3
  5572  0685  0087               	movwf	7
  5573  0686  3F40               	moviw [0]fsr1
  5574  0687  00E5               	movwf	??_setSw_Main
  5575  0688  3F41               	moviw [1]fsr1
  5576  0689  00E6               	movwf	??_setSw_Main+1
  5577  068A  3000               	movlw	0
  5578  068B  0266               	subwf	??_setSw_Main+1,w
  5579  068C  3096               	movlw	150
  5580  068D  1903               	skipnz
  5581  068E  0265               	subwf	??_setSw_Main,w
  5582  068F  1C03               	skipc
  5583  0690  0008               	return
  5584                           
  5585                           ;Switch_B1.c: 186: {
  5586                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5587  0691  086D               	movf	_Sw,w
  5588  0692  3E05               	addlw	5
  5589  0693  0086               	movwf	6
  5590  0694  3001               	movlw	1	; select bank2/3
  5591  0695  0087               	movwf	7
  5592  0696  3000               	movlw	0
  5593  0697  3FC0               	movwi [0]fsr1
  5594  0698  3FC1               	movwi [1]fsr1
  5595                           
  5596                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5597  0699  086D               	movf	_Sw,w
  5598  069A  0086               	movwf	6
  5599  069B  3001               	movlw	1	; select bank2/3
  5600  069C  0087               	movwf	7
  5601  069D  1601               	bsf	1,4
  5602                           
  5603                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5604  069E  01A2               	clrf	setRF_Learn@command
  5605  069F  0AA2               	incf	setRF_Learn@command,f
  5606  06A0  3001               	movlw	1
  5607  06A1  31A6  2692  3185   	fcall	_setRF_Learn
  5608                           
  5609                           ;Switch_B1.c: 194: if(TMain->First)
  5610  06A4  087D               	movf	_TMain,w
  5611  06A5  3E03               	addlw	3
  5612  06A6  0086               	movwf	6
  5613  06A7  3001               	movlw	1	; select bank2/3
  5614  06A8  0087               	movwf	7
  5615  06A9  1C81               	btfss	1,1
  5616  06AA  0008               	return
  5617                           
  5618                           ;Switch_B1.c: 195: {
  5619                           ;Switch_B1.c: 196: setBuz(2,100);
  5620  06AB  3064               	movlw	100
  5621  06AC  0020               	movlb	0	; select bank0
  5622  06AD  00A6               	movwf	setBuz@time
  5623  06AE  3000               	movlw	0
  5624  06AF  00A7               	movwf	setBuz@time+1
  5625  06B0  3002               	movlw	2
  5626  06B1  3195  2589         	fcall	_setBuz
  5627                           
  5628                           ;Switch_B1.c: 197: }
  5629                           ;Switch_B1.c: 199: }
  5630                           ;Switch_B1.c: 200: }
  5631  06B3  0008               	return
  5632  06B4                     l9222:	
  5633                           
  5634                           ;Switch_B1.c: 201: else
  5635                           ;Switch_B1.c: 202: {
  5636                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5637  06B4  0020               	movlb	0	; select bank0
  5638  06B5  086D               	movf	_Sw,w
  5639  06B6  0086               	movwf	6
  5640  06B7  3001               	movlw	1	; select bank2/3
  5641  06B8  0087               	movwf	7
  5642  06B9  1A81               	btfsc	1,5
  5643  06BA  0008               	return
  5644                           
  5645                           ;Switch_B1.c: 204: {
  5646                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5647  06BB  086D               	movf	_Sw,w
  5648  06BC  3E07               	addlw	7
  5649  06BD  0086               	movwf	6
  5650  06BE  3001               	movlw	1	; select bank2/3
  5651  06BF  0087               	movwf	7
  5652  06C0  3001               	movlw	1
  5653  06C1  0781               	addwf	1,f
  5654  06C2  3141               	addfsr 1,1
  5655  06C3  1803               	skipnc
  5656  06C4  0A81               	incf	1,f
  5657                           
  5658                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5659  06C5  086D               	movf	_Sw,w
  5660  06C6  3E07               	addlw	7
  5661  06C7  0086               	movwf	6
  5662  06C8  3001               	movlw	1	; select bank2/3
  5663  06C9  0087               	movwf	7
  5664  06CA  3F40               	moviw [0]fsr1
  5665  06CB  00E5               	movwf	??_setSw_Main
  5666  06CC  3F41               	moviw [1]fsr1
  5667  06CD  00E6               	movwf	??_setSw_Main+1
  5668  06CE  3001               	movlw	1
  5669  06CF  0266               	subwf	??_setSw_Main+1,w
  5670  06D0  302C               	movlw	44
  5671  06D1  1903               	skipnz
  5672  06D2  0265               	subwf	??_setSw_Main,w
  5673  06D3  1C03               	skipc
  5674  06D4  0008               	return
  5675                           
  5676                           ;Switch_B1.c: 207: {
  5677                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5678  06D5  086D               	movf	_Sw,w
  5679  06D6  3E07               	addlw	7
  5680  06D7  0086               	movwf	6
  5681  06D8  3001               	movlw	1	; select bank2/3
  5682  06D9  0087               	movwf	7
  5683  06DA  3000               	movlw	0
  5684  06DB  3FC0               	movwi [0]fsr1
  5685  06DC  3FC1               	movwi [1]fsr1
  5686                           
  5687                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5688  06DD  086D               	movf	_Sw,w
  5689  06DE  0086               	movwf	6
  5690  06DF  3001               	movlw	1	; select bank2/3
  5691  06E0  0087               	movwf	7
  5692  06E1  1681               	bsf	1,5
  5693                           
  5694                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5695  06E2  01A2               	clrf	setRF_Learn@command
  5696  06E3  3001               	movlw	1
  5697  06E4  31A6  2692         	fcall	_setRF_Learn
  5698                           
  5699                           ;Switch_B1.c: 215: }
  5700                           ;Switch_B1.c: 216: }
  5701                           ;Switch_B1.c: 217: }
  5702                           ;Switch_B1.c: 218: }
  5703                           ;Switch_B1.c: 219: }
  5704                           ;Switch_B1.c: 220: }
  5705  06E6  0008               	return
  5706  06E7                     l9232:	
  5707                           
  5708                           ;Switch_B1.c: 221: else
  5709                           ;Switch_B1.c: 222: {
  5710                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5711  06E7  0020               	movlb	0	; select bank0
  5712  06E8  086D               	movf	_Sw,w
  5713  06E9  0086               	movwf	6
  5714  06EA  3001               	movlw	1	; select bank2/3
  5715  06EB  0087               	movwf	7
  5716  06EC  1D01               	btfss	1,2
  5717  06ED  0008               	return
  5718                           
  5719                           ;Switch_B1.c: 224: {
  5720                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5721  06EE  3001               	movlw	1
  5722  06EF  00E5               	movwf	??_setSw_Main
  5723  06F0  086D               	movf	_Sw,w
  5724  06F1  3E02               	addlw	2
  5725  06F2  0086               	movwf	6
  5726  06F3  3001               	movlw	1	; select bank2/3
  5727  06F4  0087               	movwf	7
  5728  06F5  0865               	movf	??_setSw_Main,w
  5729  06F6  0781               	addwf	1,f
  5730                           
  5731                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5732  06F7  086D               	movf	_Sw,w
  5733  06F8  3E02               	addlw	2
  5734  06F9  0086               	movwf	6
  5735  06FA  3001               	movlw	1	; select bank2/3
  5736  06FB  0087               	movwf	7
  5737  06FC  3005               	movlw	5
  5738  06FD  0201               	subwf	1,w
  5739  06FE  1C03               	skipc
  5740  06FF  0008               	return
  5741                           
  5742                           ;Switch_B1.c: 227: {
  5743                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5744  0700  086D               	movf	_Sw,w
  5745  0701  3E02               	addlw	2
  5746  0702  0086               	movwf	6
  5747  0703  3001               	movlw	1	; select bank2/3
  5748  0704  0087               	movwf	7
  5749  0705  0181               	clrf	1
  5750                           
  5751                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5752  0706  086D               	movf	_Sw,w
  5753  0707  0086               	movwf	6
  5754  0708  3001               	movlw	1	; select bank2/3
  5755  0709  0087               	movwf	7
  5756  070A  1101               	bcf	1,2
  5757                           
  5758                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5759  070B  086D               	movf	_Sw,w
  5760  070C  3E03               	addlw	3
  5761  070D  0086               	movwf	6
  5762  070E  3001               	movlw	1	; select bank2/3
  5763  070F  0087               	movwf	7
  5764  0710  3000               	movlw	0
  5765  0711  3FC0               	movwi [0]fsr1
  5766  0712  3FC1               	movwi [1]fsr1
  5767                           
  5768                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5769  0713  086D               	movf	_Sw,w
  5770  0714  0086               	movwf	6
  5771  0715  3001               	movlw	1	; select bank2/3
  5772  0716  0087               	movwf	7
  5773  0717  1181               	bcf	1,3
  5774                           
  5775                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5776  0718  086D               	movf	_Sw,w
  5777  0719  3E05               	addlw	5
  5778  071A  0086               	movwf	6
  5779  071B  3001               	movlw	1	; select bank2/3
  5780  071C  0087               	movwf	7
  5781  071D  3000               	movlw	0
  5782  071E  3FC0               	movwi [0]fsr1
  5783  071F  3FC1               	movwi [1]fsr1
  5784                           
  5785                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5786  0720  086D               	movf	_Sw,w
  5787  0721  0086               	movwf	6
  5788  0722  3001               	movlw	1	; select bank2/3
  5789  0723  0087               	movwf	7
  5790  0724  1201               	bcf	1,4
  5791                           
  5792                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5793  0725  086D               	movf	_Sw,w
  5794  0726  3E07               	addlw	7
  5795  0727  0086               	movwf	6
  5796  0728  3001               	movlw	1	; select bank2/3
  5797  0729  0087               	movwf	7
  5798  072A  3000               	movlw	0
  5799  072B  3FC0               	movwi [0]fsr1
  5800  072C  3FC1               	movwi [1]fsr1
  5801                           
  5802                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5803  072D  086D               	movf	_Sw,w
  5804  072E  0086               	movwf	6
  5805  072F  3001               	movlw	1	; select bank2/3
  5806  0730  0087               	movwf	7
  5807  0731  1281               	bcf	1,5
  5808                           
  5809                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5810  0732  0868               	movf	setSw_Main@sw,w
  5811  0733  3194  24A6  3185   	fcall	_Sw_DimmerOffFunc
  5812                           
  5813                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5814  0736  0020               	movlb	0	; select bank0
  5815  0737  01A2               	clrf	setRF_Learn@command
  5816  0738  3001               	movlw	1
  5817  0739  31A6  2692         	fcall	_setRF_Learn
  5818  073B  0008               	return
  5819  073C                     __end_of_setSw_Main:	
  5820                           
  5821                           	psect	text12
  5822  2692                     __ptext12:	
  5823 ;; *************** function _setRF_Learn *****************
  5824 ;; Defined at:
  5825 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  rf              1    wreg     unsigned char 
  5828 ;;  command         1    2[BANK0 ] unsigned char 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  rf              1    3[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;		None               void
  5833 ;; Registers used:
  5834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        2 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    5
  5847 ;; This function calls:
  5848 ;;		_RfPointSelect
  5849 ;; This function is called by:
  5850 ;;		_setSw_Main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _setRF_Learn
  5856  2692                     _setRF_Learn:	
  5857                           
  5858                           ;incstack = 0
  5859                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5860                           ;setRF_Learn@rf stored from wreg
  5861  2692  0020               	movlb	0	; select bank0
  5862  2693  00A3               	movwf	setRF_Learn@rf
  5863                           
  5864                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5865  2694  0823               	movf	setRF_Learn@rf,w
  5866  2695  31A5  25A0         	fcall	_RfPointSelect
  5867                           
  5868                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5869  2697  087B               	movf	_RF,w
  5870  2698  0086               	movwf	6
  5871  2699  0187               	clrf	7
  5872  269A  0020               	movlb	0	; select bank0
  5873  269B  0822               	movf	setRF_Learn@command,w
  5874  269C  1301               	bcf	1,6
  5875  269D  1D03               	skipz
  5876  269E  1701               	bsf	1,6
  5877  269F  0008               	return
  5878  26A0                     __end_of_setRF_Learn:	
  5879                           
  5880                           	psect	text13
  5881  1FA7                     __ptext13:	
  5882 ;; *************** function _Sw_DimmerOnFunc *****************
  5883 ;; Defined at:
  5884 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  sw              1    wreg     unsigned char 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  sw              1   67[BANK0 ] unsigned char 
  5889 ;;  Idle            1   66[BANK0 ] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        2 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    8
  5906 ;; This function calls:
  5907 ;;		_setBuz
  5908 ;;		_setDimmerLights_Switch
  5909 ;;		_setDimmerLights_Trigger
  5910 ;;		_setRFSW_Status
  5911 ;;		_setRF_DimmerLights
  5912 ;;		_setTxData
  5913 ;; This function is called by:
  5914 ;;		_setSw_Main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _Sw_DimmerOnFunc
  5920  1FA7                     _Sw_DimmerOnFunc:	
  5921                           
  5922                           ;incstack = 0
  5923                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5924                           ;Sw_DimmerOnFunc@sw stored from wreg
  5925  1FA7  0020               	movlb	0	; select bank0
  5926  1FA8  00E3               	movwf	Sw_DimmerOnFunc@sw
  5927                           
  5928                           ;Switch_B1.c: 253: char Idle=1;
  5929  1FA9  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5930  1FAA  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5931                           
  5932                           ;Switch_B1.c: 280: if(Idle)
  5933  1FAB  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5934  1FAC  1903               	btfsc	3,2
  5935  1FAD  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 281: {
  5938                           ;Switch_B1.c: 282: Sw->Flag=1;
  5939  1FAE  086D               	movf	_Sw,w
  5940  1FAF  0086               	movwf	6
  5941  1FB0  3001               	movlw	1	; select bank2/3
  5942  1FB1  0087               	movwf	7
  5943  1FB2  1781               	bsf	1,7
  5944                           
  5945                           ;Switch_B1.c: 283: setBuz(1,100);
  5946  1FB3  3064               	movlw	100
  5947  1FB4  00A6               	movwf	setBuz@time
  5948  1FB5  3000               	movlw	0
  5949  1FB6  00A7               	movwf	setBuz@time+1
  5950  1FB7  3001               	movlw	1
  5951  1FB8  3195  2589  319F   	fcall	_setBuz
  5952                           
  5953                           ;Switch_B1.c: 284: if(!Sw->Status)
  5954  1FBB  0020               	movlb	0	; select bank0
  5955  1FBC  086D               	movf	_Sw,w
  5956  1FBD  0086               	movwf	6
  5957  1FBE  3001               	movlw	1	; select bank2/3
  5958  1FBF  0087               	movwf	7
  5959  1FC0  1B01               	btfsc	1,6
  5960  1FC1  2FED               	goto	l8754
  5961                           
  5962                           ;Switch_B1.c: 285: {
  5963                           ;Switch_B1.c: 286: Sw->Status=1;
  5964  1FC2  086D               	movf	_Sw,w
  5965  1FC3  0086               	movwf	6
  5966  1FC4  3001               	movlw	1	; select bank2/3
  5967  1FC5  0087               	movwf	7
  5968  1FC6  1701               	bsf	1,6
  5969                           
  5970                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  5971  1FC7  01A2               	clrf	setRFSW_Status@command
  5972  1FC8  0AA2               	incf	setRFSW_Status@command,f
  5973  1FC9  0863               	movf	Sw_DimmerOnFunc@sw,w
  5974  1FCA  31A6  26AF  319F   	fcall	_setRFSW_Status
  5975                           
  5976                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  5977  1FCD  0020               	movlb	0	; select bank0
  5978  1FCE  01A2               	clrf	setDimmerLights_Trigger@command
  5979  1FCF  0AA2               	incf	setDimmerLights_Trigger@command,f
  5980  1FD0  0863               	movf	Sw_DimmerOnFunc@sw,w
  5981  1FD1  31A6  26FC  319F   	fcall	_setDimmerLights_Trigger
  5982                           
  5983                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  5984  1FD4  0020               	movlb	0	; select bank0
  5985  1FD5  01A2               	clrf	setDimmerLights_Switch@command
  5986  1FD6  0AA2               	incf	setDimmerLights_Switch@command,f
  5987  1FD7  0863               	movf	Sw_DimmerOnFunc@sw,w
  5988  1FD8  31A6  26EC  319F   	fcall	_setDimmerLights_Switch
  5989                           
  5990                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  5991  1FDB  0020               	movlb	0	; select bank0
  5992  1FDC  086D               	movf	_Sw,w
  5993  1FDD  0086               	movwf	6
  5994  1FDE  3001               	movlw	1	; select bank2/3
  5995  1FDF  0087               	movwf	7
  5996  1FE0  3000               	movlw	0
  5997  1FE1  1B01               	btfsc	1,6
  5998  1FE2  3001               	movlw	1
  5999  1FE3  00DD               	movwf	setRF_DimmerLights@on
  6000  1FE4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6001  1FE5  3192  2286  319F   	fcall	_setRF_DimmerLights
  6002                           
  6003                           ;Switch_B1.c: 293: setTxData(1);
  6004  1FE8  3001               	movlw	1
  6005  1FE9  318B  2339         	fcall	_setTxData
  6006                           
  6007                           ;Switch_B1.c: 294: }
  6008  1FEB  0020               	movlb	0	; select bank0
  6009  1FEC  0008               	return
  6010  1FED                     l8754:	
  6011                           
  6012                           ;Switch_B1.c: 295: else
  6013                           ;Switch_B1.c: 296: {
  6014                           ;Switch_B1.c: 297: Sw->Status=0;
  6015  1FED  0020               	movlb	0	; select bank0
  6016  1FEE  086D               	movf	_Sw,w
  6017  1FEF  0086               	movwf	6
  6018  1FF0  3001               	movlw	1	; select bank2/3
  6019  1FF1  0087               	movwf	7
  6020  1FF2  1301               	bcf	1,6
  6021                           
  6022                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6023  1FF3  086D               	movf	_Sw,w
  6024  1FF4  0086               	movwf	6
  6025  1FF5  3001               	movlw	1	; select bank2/3
  6026  1FF6  0087               	movwf	7
  6027  1FF7  3000               	movlw	0
  6028  1FF8  1B01               	btfsc	1,6
  6029  1FF9  3001               	movlw	1
  6030  1FFA  00A2               	movwf	setRFSW_Status@command
  6031  1FFB  0863               	movf	Sw_DimmerOnFunc@sw,w
  6032  1FFC  31A6  26AF         	fcall	_setRFSW_Status
  6033  1FFE  0020               	movlb	0	; select bank0
  6034  1FFF  0008               	return
  6035  2000                     __end_of_Sw_DimmerOnFunc:	
  6036                           
  6037                           	psect	text14
  6038  14A6                     __ptext14:	
  6039 ;; *************** function _Sw_DimmerOffFunc *****************
  6040 ;; Defined at:
  6041 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  sw              1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  sw              1   68[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        3 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    8
  6062 ;; This function calls:
  6063 ;;		_setDelayOff_GO
  6064 ;;		_setDimmerLights_AdjGo
  6065 ;;		_setDimmerLights_Switch
  6066 ;;		_setDimmerLights_Trigger
  6067 ;;		_setDimmerLights_TriggerAdj
  6068 ;;		_setRF_DimmerLights
  6069 ;;		_setTxData
  6070 ;; This function is called by:
  6071 ;;		_setSw_Main
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _Sw_DimmerOffFunc
  6077  14A6                     _Sw_DimmerOffFunc:	
  6078                           
  6079                           ;incstack = 0
  6080                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6081                           ;Sw_DimmerOffFunc@sw stored from wreg
  6082  14A6  0020               	movlb	0	; select bank0
  6083  14A7  00E4               	movwf	Sw_DimmerOffFunc@sw
  6084                           
  6085                           ;Switch_B1.c: 305: if(Sw->Flag)
  6086  14A8  086D               	movf	_Sw,w
  6087  14A9  0086               	movwf	6
  6088  14AA  3001               	movlw	1	; select bank2/3
  6089  14AB  0087               	movwf	7
  6090  14AC  1F81               	btfss	1,7
  6091  14AD  0008               	return
  6092                           
  6093                           ;Switch_B1.c: 306: {
  6094                           ;Switch_B1.c: 307: Sw->Flag=0;
  6095  14AE  086D               	movf	_Sw,w
  6096  14AF  0086               	movwf	6
  6097  14B0  3001               	movlw	1	; select bank2/3
  6098  14B1  0087               	movwf	7
  6099  14B2  1381               	bcf	1,7
  6100                           
  6101                           ;Switch_B1.c: 308: if(Sw->Status)
  6102  14B3  086D               	movf	_Sw,w
  6103  14B4  0086               	movwf	6
  6104  14B5  3001               	movlw	1	; select bank2/3
  6105  14B6  0087               	movwf	7
  6106  14B7  1F01               	btfss	1,6
  6107  14B8  2CF2               	goto	l8786
  6108                           
  6109                           ;Switch_B1.c: 309: {
  6110                           ;Switch_B1.c: 310: if(Sw->Adj)
  6111  14B9  0A6D               	incf	_Sw,w
  6112  14BA  0086               	movwf	6
  6113  14BB  3001               	movlw	1	; select bank2/3
  6114  14BC  0087               	movwf	7
  6115  14BD  1C01               	btfss	1,0
  6116  14BE  0008               	return
  6117                           
  6118                           ;Switch_B1.c: 311: {
  6119                           ;Switch_B1.c: 312: Sw->Adj=0;
  6120  14BF  0A6D               	incf	_Sw,w
  6121  14C0  0086               	movwf	6
  6122  14C1  3001               	movlw	1	; select bank2/3
  6123  14C2  0087               	movwf	7
  6124  14C3  1001               	bcf	1,0
  6125                           
  6126                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6127  14C4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6128  14C5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6129  14C6  0864               	movf	Sw_DimmerOffFunc@sw,w
  6130  14C7  3187  27F0  3194   	fcall	_setDimmerLights_TriggerAdj
  6131                           
  6132                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6133  14CA  0020               	movlb	0	; select bank0
  6134  14CB  01A2               	clrf	setDimmerLights_AdjGo@command
  6135  14CC  0864               	movf	Sw_DimmerOffFunc@sw,w
  6136  14CD  31A7  273C  3194   	fcall	_setDimmerLights_AdjGo
  6137                           
  6138                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6139  14D0  0020               	movlb	0	; select bank0
  6140  14D1  0864               	movf	Sw_DimmerOffFunc@sw,w
  6141  14D2  3E1A               	addlw	26
  6142  14D3  076F               	addwf	_Product,w
  6143  14D4  00E2               	movwf	??_Sw_DimmerOffFunc
  6144  14D5  0862               	movf	??_Sw_DimmerOffFunc,w
  6145  14D6  0086               	movwf	6
  6146  14D7  3001               	movlw	1	; select bank2/3
  6147  14D8  0087               	movwf	7
  6148  14D9  0801               	movf	1,w
  6149  14DA  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6150  14DB  086F               	movf	_Product,w
  6151  14DC  3E11               	addlw	17
  6152  14DD  0086               	movwf	6
  6153  14DE  3001               	movlw	1	; select bank2/3
  6154  14DF  0087               	movwf	7
  6155  14E0  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6156  14E1  0081               	movwf	1
  6157                           
  6158                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6159  14E2  086D               	movf	_Sw,w
  6160  14E3  0086               	movwf	6
  6161  14E4  3001               	movlw	1	; select bank2/3
  6162  14E5  0087               	movwf	7
  6163  14E6  3000               	movlw	0
  6164  14E7  1B01               	btfsc	1,6
  6165  14E8  3001               	movlw	1
  6166  14E9  00DD               	movwf	setRF_DimmerLights@on
  6167  14EA  0864               	movf	Sw_DimmerOffFunc@sw,w
  6168  14EB  3192  2286  3194   	fcall	_setRF_DimmerLights
  6169                           
  6170                           ;Switch_B1.c: 318: setTxData(1);
  6171  14EE  3001               	movlw	1
  6172  14EF  318B  2339         	fcall	_setTxData
  6173                           
  6174                           ;Switch_B1.c: 320: }
  6175                           ;Switch_B1.c: 321: }
  6176  14F1  0008               	return
  6177  14F2                     l8786:	
  6178                           
  6179                           ;Switch_B1.c: 322: else
  6180                           ;Switch_B1.c: 323: {
  6181                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6182  14F2  0020               	movlb	0	; select bank0
  6183  14F3  01A2               	clrf	setDimmerLights_Trigger@command
  6184  14F4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6185  14F5  0864               	movf	Sw_DimmerOffFunc@sw,w
  6186  14F6  31A6  26FC  3194   	fcall	_setDimmerLights_Trigger
  6187                           
  6188                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6189  14F9  0020               	movlb	0	; select bank0
  6190  14FA  01A2               	clrf	setDimmerLights_Switch@command
  6191  14FB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6192  14FC  31A6  26EC  3194   	fcall	_setDimmerLights_Switch
  6193                           
  6194                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6195  14FF  0020               	movlb	0	; select bank0
  6196  1500  01A3               	clrf	setDelayOff_GO@command
  6197  1501  01A4               	clrf	setDelayOff_GO@value
  6198  1502  0864               	movf	Sw_DimmerOffFunc@sw,w
  6199  1503  3191  2107  3194   	fcall	_setDelayOff_GO
  6200                           
  6201                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6202  1506  0020               	movlb	0	; select bank0
  6203  1507  086D               	movf	_Sw,w
  6204  1508  0086               	movwf	6
  6205  1509  3001               	movlw	1	; select bank2/3
  6206  150A  0087               	movwf	7
  6207  150B  3000               	movlw	0
  6208  150C  1B01               	btfsc	1,6
  6209  150D  3001               	movlw	1
  6210  150E  00DD               	movwf	setRF_DimmerLights@on
  6211  150F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6212  1510  3192  2286  3194   	fcall	_setRF_DimmerLights
  6213                           
  6214                           ;Switch_B1.c: 329: setTxData(1);
  6215  1513  3001               	movlw	1
  6216  1514  318B  2339         	fcall	_setTxData
  6217  1516  0008               	return
  6218  1517                     __end_of_Sw_DimmerOffFunc:	
  6219                           
  6220                           	psect	text15
  6221  1A0A                     __ptext15:	
  6222 ;; *************** function _Sw_DimmerAdjFunc *****************
  6223 ;; Defined at:
  6224 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  sw              1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  sw              1    4[BANK0 ] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;		None               void
  6231 ;; Registers used:
  6232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;Total ram usage:        1 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    6
  6245 ;; This function calls:
  6246 ;;		_setDimmerLights_AdjGo
  6247 ;;		_setDimmerLights_TriggerAdj
  6248 ;;		_setRFSW_Status
  6249 ;; This function is called by:
  6250 ;;		_setSw_Main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _Sw_DimmerAdjFunc
  6256  1A0A                     _Sw_DimmerAdjFunc:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6260                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6261  1A0A  0020               	movlb	0	; select bank0
  6262  1A0B  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6263                           
  6264                           ;Switch_B1.c: 336: if(Sw->Flag)
  6265  1A0C  086D               	movf	_Sw,w
  6266  1A0D  0086               	movwf	6
  6267  1A0E  3001               	movlw	1	; select bank2/3
  6268  1A0F  0087               	movwf	7
  6269  1A10  1F81               	btfss	1,7
  6270  1A11  0008               	return
  6271                           
  6272                           ;Switch_B1.c: 337: {
  6273                           ;Switch_B1.c: 338: Sw->Adj=1;
  6274  1A12  0A6D               	incf	_Sw,w
  6275  1A13  0086               	movwf	6
  6276  1A14  3001               	movlw	1	; select bank2/3
  6277  1A15  0087               	movwf	7
  6278  1A16  1401               	bsf	1,0
  6279                           
  6280                           ;Switch_B1.c: 339: Sw->Status=1;
  6281  1A17  086D               	movf	_Sw,w
  6282  1A18  0086               	movwf	6
  6283  1A19  3001               	movlw	1	; select bank2/3
  6284  1A1A  0087               	movwf	7
  6285  1A1B  1701               	bsf	1,6
  6286                           
  6287                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  6288  1A1C  01A2               	clrf	setRFSW_Status@command
  6289  1A1D  0AA2               	incf	setRFSW_Status@command,f
  6290  1A1E  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6291  1A1F  31A6  26AF  319A   	fcall	_setRFSW_Status
  6292                           
  6293                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  6294  1A22  0020               	movlb	0	; select bank0
  6295  1A23  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6296  1A24  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6297  1A25  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6298  1A26  3187  27F0  319A   	fcall	_setDimmerLights_TriggerAdj
  6299                           
  6300                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  6301  1A29  0020               	movlb	0	; select bank0
  6302  1A2A  01A2               	clrf	setDimmerLights_AdjGo@command
  6303  1A2B  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6304  1A2C  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6305  1A2D  31A7  273C         	fcall	_setDimmerLights_AdjGo
  6306  1A2F  0008               	return
  6307  1A30                     __end_of_Sw_DimmerAdjFunc:	
  6308                           
  6309                           	psect	text16
  6310  07F0                     __ptext16:	
  6311 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6312 ;; Defined at:
  6313 ;;		line 441 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  lights          1    wreg     unsigned char 
  6316 ;;  command         1    2[BANK0 ] unsigned char 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  lights          1    3[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;		None               void
  6321 ;; Registers used:
  6322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6328 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;Total ram usage:        2 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    5
  6335 ;; This function calls:
  6336 ;;		_DimmerLightsPointSelect
  6337 ;; This function is called by:
  6338 ;;		_Sw_DimmerOffFunc
  6339 ;;		_Sw_DimmerAdjFunc
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           
  6344                           ;psect for function _setDimmerLights_TriggerAdj
  6345  07F0                     _setDimmerLights_TriggerAdj:	
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6349                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6350  07F0  0020               	movlb	0	; select bank0
  6351  07F1  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6352                           
  6353                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
  6354  07F2  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6355  07F3  31A5  258A         	fcall	_DimmerLightsPointSelect
  6356                           
  6357                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj=command;
  6358  07F5  0020               	movlb	0	; select bank0
  6359  07F6  086C               	movf	_DimmerLights,w
  6360  07F7  3E09               	addlw	9
  6361  07F8  0086               	movwf	6
  6362  07F9  3001               	movlw	1	; select bank2/3
  6363  07FA  0087               	movwf	7
  6364  07FB  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6365  07FC  1181               	bcf	1,3
  6366  07FD  1D03               	skipz
  6367  07FE  1581               	bsf	1,3
  6368  07FF  0008               	return
  6369  0800                     __end_of_setDimmerLights_TriggerAdj:	
  6370                           
  6371                           	psect	text17
  6372  273C                     __ptext17:	
  6373 ;; *************** function _setDimmerLights_AdjGo *****************
  6374 ;; Defined at:
  6375 ;;		line 431 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  lights          1    wreg     unsigned char 
  6378 ;;  command         1    2[BANK0 ] unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  lights          1    3[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    5
  6397 ;; This function calls:
  6398 ;;		_DimmerLightsPointSelect
  6399 ;; This function is called by:
  6400 ;;		_Sw_DimmerOffFunc
  6401 ;;		_Sw_DimmerAdjFunc
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _setDimmerLights_AdjGo
  6407  273C                     _setDimmerLights_AdjGo:	
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6411                           ;setDimmerLights_AdjGo@lights stored from wreg
  6412  273C  0020               	movlb	0	; select bank0
  6413  273D  00A3               	movwf	setDimmerLights_AdjGo@lights
  6414                           
  6415                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
  6416  273E  0823               	movf	setDimmerLights_AdjGo@lights,w
  6417  273F  31A5  258A         	fcall	_DimmerLightsPointSelect
  6418                           
  6419                           ;Dimmer_B1.c: 434: DimmerLights->AdjGo=command;
  6420  2741  0020               	movlb	0	; select bank0
  6421  2742  086C               	movf	_DimmerLights,w
  6422  2743  3E09               	addlw	9
  6423  2744  0086               	movwf	6
  6424  2745  3001               	movlw	1	; select bank2/3
  6425  2746  0087               	movwf	7
  6426  2747  0822               	movf	setDimmerLights_AdjGo@command,w
  6427  2748  1101               	bcf	1,2
  6428  2749  1D03               	skipz
  6429  274A  1501               	bsf	1,2
  6430  274B  0008               	return
  6431  274C                     __end_of_setDimmerLights_AdjGo:	
  6432                           
  6433                           	psect	text18
  6434  2557                     __ptext18:	
  6435 ;; *************** function _Switch_Initialization *****************
  6436 ;; Defined at:
  6437 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    7
  6458 ;; This function calls:
  6459 ;;		_TouchPower
  6460 ;;		_setSw_Initialization
  6461 ;; This function is called by:
  6462 ;;		_main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _Switch_Initialization
  6468  2557                     _Switch_Initialization:	
  6469                           
  6470                           ;Switch_B1.c: 40: TouchPower();
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6474  2557  31A5  250B  31A5   	fcall	_TouchPower
  6475                           
  6476                           ;Switch_B1.c: 42: WPUB1=0;
  6477  255A  0024               	movlb	4	; select bank4
  6478  255B  108D               	bcf	13,1	;volatile
  6479                           
  6480                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6481  255C  3001               	movlw	1
  6482  255D  31A7  272C         	fcall	_setSw_Initialization
  6483  255F  0008               	return
  6484  2560                     __end_of_Switch_Initialization:	
  6485                           
  6486                           	psect	text19
  6487  272C                     __ptext19:	
  6488 ;; *************** function _setSw_Initialization *****************
  6489 ;; Defined at:
  6490 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  sw              1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  sw              1    4[BANK0 ] unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        1 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    6
  6511 ;; This function calls:
  6512 ;;		_setLED
  6513 ;; This function is called by:
  6514 ;;		_Switch_Initialization
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _setSw_Initialization
  6520  272C                     _setSw_Initialization:	
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6524                           ;setSw_Initialization@sw stored from wreg
  6525  272C  0020               	movlb	0	; select bank0
  6526  272D  00A4               	movwf	setSw_Initialization@sw
  6527                           
  6528                           ;Switch_B1.c: 80: setLED(sw,1);
  6529  272E  01A2               	clrf	setLED@command
  6530  272F  0AA2               	incf	setLED@command,f
  6531  2730  0824               	movf	setSw_Initialization@sw,w
  6532  2731  3191  2163  31A7   	fcall	_setLED
  6533                           
  6534                           ;Switch_B1.c: 82: setLED(sw+1,1);
  6535  2734  0020               	movlb	0	; select bank0
  6536  2735  01A2               	clrf	setLED@command
  6537  2736  0AA2               	incf	setLED@command,f
  6538  2737  0824               	movf	setSw_Initialization@sw,w
  6539  2738  3E01               	addlw	1
  6540  2739  3191  2163         	fcall	_setLED
  6541  273B  0008               	return
  6542  273C                     __end_of_setSw_Initialization:	
  6543                           
  6544                           	psect	text20
  6545  250B                     __ptext20:	
  6546 ;; *************** function _TouchPower *****************
  6547 ;; Defined at:
  6548 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;		None
  6553 ;; Return value:  Size  Location     Type
  6554 ;;		None               void
  6555 ;; Registers used:
  6556 ;;		None
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;Total ram usage:        0 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    4
  6569 ;; This function calls:
  6570 ;;		Nothing
  6571 ;; This function is called by:
  6572 ;;		_Switch_Initialization
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _TouchPower
  6578  250B                     _TouchPower:	
  6579  250B                     l2743:	
  6580                           ;Switch_B1.c: 11: while(!RC5)
  6581                           
  6582                           ;incstack = 0
  6583                           ; Regs used in _TouchPower: []
  6584                           
  6585  250B  0020               	movlb	0	; select bank0
  6586  250C  1A8E               	btfsc	14,5	;volatile
  6587  250D  0008               	return
  6588                           
  6589                           ;Switch_B1.c: 12: RC5=1;
  6590  250E  168E               	bsf	14,5	;volatile
  6591  250F  2D0B               	goto	l2743
  6592  2510                     __end_of_TouchPower:	
  6593                           
  6594                           	psect	text21
  6595  2503                     __ptext21:	
  6596 ;; *************** function _RF_Main *****************
  6597 ;; Defined at:
  6598 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        0 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:   13
  6619 ;; This function calls:
  6620 ;;		_setRF_Main
  6621 ;; This function is called by:
  6622 ;;		_main
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _RF_Main
  6628  2503                     _RF_Main:	
  6629                           
  6630                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6634  2503  3001               	movlw	1
  6635  2504  3197  2778         	fcall	_setRF_Main
  6636  2506  0008               	return
  6637  2507                     __end_of_RF_Main:	
  6638                           
  6639                           	psect	text22
  6640  1778                     __ptext22:	
  6641 ;; *************** function _setRF_Main *****************
  6642 ;; Defined at:
  6643 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  rf              1    wreg     unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  rf              1   74[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        3 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:   12
  6664 ;; This function calls:
  6665 ;;		_CC2500_RxData
  6666 ;;		_CC2500_TxData
  6667 ;;		_CC2500_WriteCommand
  6668 ;;		_RF_RxDisable
  6669 ;;		_RfPointSelect
  6670 ;;		_getRxData
  6671 ;;		_setINT_GO
  6672 ;; This function is called by:
  6673 ;;		_RF_Main
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           
  6678                           ;psect for function _setRF_Main
  6679  1778                     _setRF_Main:	
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6683                           ;setRF_Main@rf stored from wreg
  6684  1778  0020               	movlb	0	; select bank0
  6685  1779  00EA               	movwf	setRF_Main@rf
  6686                           
  6687                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6688  177A  086A               	movf	setRF_Main@rf,w
  6689  177B  31A5  25A0  3197   	fcall	_RfPointSelect
  6690                           
  6691                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6692  177E  087B               	movf	_RF,w
  6693  177F  0086               	movwf	6
  6694  1780  0187               	clrf	7
  6695  1781  1C01               	btfss	1,0
  6696  1782  0008               	return
  6697                           
  6698                           ;RF_Control_B1.c: 62: {
  6699                           ;RF_Control_B1.c: 72: RF->Key=((RA6 || RA4 || RA0 || RB1) && !RF->Learn)?1:0;
  6700  1783  0020               	movlb	0	; select bank0
  6701  1784  01EB               	clrf	_setRF_Main$4215
  6702  1785  1F0C               	btfss	12,6	;volatile
  6703  1786  1A0C               	btfsc	12,4	;volatile
  6704  1787  2F8C               	goto	l9116
  6705  1788  180C               	btfsc	12,0	;volatile
  6706  1789  2F8C               	goto	l9116
  6707  178A  1C8D               	btfss	13,1	;volatile
  6708  178B  2F93               	goto	l9120
  6709  178C                     l9116:	
  6710  178C  087B               	movf	_RF,w
  6711  178D  0086               	movwf	6
  6712  178E  0187               	clrf	7
  6713  178F  1B01               	btfsc	1,6
  6714  1790  2F93               	goto	l9120
  6715  1791  01EB               	clrf	_setRF_Main$4215
  6716  1792  0AEB               	incf	_setRF_Main$4215,f
  6717  1793                     l9120:	
  6718  1793  087B               	movf	_RF,w
  6719  1794  0086               	movwf	6
  6720  1795  0187               	clrf	7
  6721  1796  086B               	movf	_setRF_Main$4215,w
  6722  1797  1381               	bcf	1,7
  6723  1798  1D03               	skipz
  6724  1799  1781               	bsf	1,7
  6725                           
  6726                           ;RF_Control_B1.c: 76: if(!RF->Key)
  6727  179A  087B               	movf	_RF,w
  6728  179B  0086               	movwf	6
  6729  179C  0187               	clrf	7
  6730  179D  1B81               	btfsc	1,7
  6731  179E  2FCB               	goto	l9142
  6732                           
  6733                           ;RF_Control_B1.c: 77: {
  6734                           ;RF_Control_B1.c: 78: if(RF->ReceiveGO)
  6735  179F  087B               	movf	_RF,w
  6736  17A0  0086               	movwf	6
  6737  17A1  0187               	clrf	7
  6738  17A2  1C81               	btfss	1,1
  6739  17A3  2FB0               	goto	l9130
  6740                           
  6741                           ;RF_Control_B1.c: 79: {
  6742                           ;RF_Control_B1.c: 80: RF->ReceiveGO=0;
  6743  17A4  087B               	movf	_RF,w
  6744  17A5  0086               	movwf	6
  6745  17A6  0187               	clrf	7
  6746  17A7  1081               	bcf	1,1
  6747                           
  6748                           ;RF_Control_B1.c: 81: CC2500_RxData();
  6749  17A8  3192  2222  3197   	fcall	_CC2500_RxData
  6750                           
  6751                           ;RF_Control_B1.c: 87: getRxData(1);
  6752  17AB  3001               	movlw	1
  6753  17AC  3190  2000  3197   	fcall	_getRxData
  6754                           
  6755                           ;RF_Control_B1.c: 90: }
  6756  17AF  2FCF               	goto	l9144
  6757  17B0                     l9130:	
  6758                           
  6759                           ;RF_Control_B1.c: 91: else
  6760                           ;RF_Control_B1.c: 92: {
  6761                           ;RF_Control_B1.c: 93: if(!RF->TransceiveGO)
  6762  17B0  087B               	movf	_RF,w
  6763  17B1  0086               	movwf	6
  6764  17B2  0187               	clrf	7
  6765  17B3  1901               	btfsc	1,2
  6766  17B4  2FCF               	goto	l9144
  6767                           
  6768                           ;RF_Control_B1.c: 94: {
  6769                           ;RF_Control_B1.c: 96: if(!RF->RxStatus)
  6770  17B5  087B               	movf	_RF,w
  6771  17B6  0086               	movwf	6
  6772  17B7  0187               	clrf	7
  6773  17B8  1981               	btfsc	1,3
  6774  17B9  2FCF               	goto	l9144
  6775                           
  6776                           ;RF_Control_B1.c: 97: {
  6777                           ;RF_Control_B1.c: 98: RF->RxStatus=1;
  6778  17BA  087B               	movf	_RF,w
  6779  17BB  0086               	movwf	6
  6780  17BC  0187               	clrf	7
  6781  17BD  1581               	bsf	1,3
  6782                           
  6783                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x36);
  6784  17BE  3036               	movlw	54
  6785  17BF  31A6  26DC  3197   	fcall	_CC2500_WriteCommand
  6786                           
  6787                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x34);
  6788  17C2  3034               	movlw	52
  6789  17C3  31A6  26DC  3197   	fcall	_CC2500_WriteCommand
  6790                           
  6791                           ;RF_Control_B1.c: 101: setINT_GO(1);
  6792  17C6  3001               	movlw	1
  6793  17C7  31A5  254E  3197   	fcall	_setINT_GO
  6794                           
  6795                           ;RF_Control_B1.c: 102: }
  6796                           ;RF_Control_B1.c: 104: }
  6797                           ;RF_Control_B1.c: 105: }
  6798                           ;RF_Control_B1.c: 106: }
  6799  17CA  2FCF               	goto	l9144
  6800  17CB                     l9142:	
  6801                           
  6802                           ;RF_Control_B1.c: 107: else
  6803                           ;RF_Control_B1.c: 108: {
  6804                           ;RF_Control_B1.c: 109: RF_RxDisable(1);
  6805  17CB  3001               	movlw	1
  6806  17CC  319A  2230  3197   	fcall	_RF_RxDisable
  6807  17CF                     l9144:	
  6808                           
  6809                           ;RF_Control_B1.c: 110: }
  6810                           ;RF_Control_B1.c: 111: if(RF->TransceiveGO)
  6811  17CF  087B               	movf	_RF,w
  6812  17D0  0086               	movwf	6
  6813  17D1  0187               	clrf	7
  6814  17D2  1D01               	btfss	1,2
  6815  17D3  0008               	return
  6816                           
  6817                           ;RF_Control_B1.c: 112: {
  6818                           ;RF_Control_B1.c: 113: RF_RxDisable(1);
  6819  17D4  3001               	movlw	1
  6820  17D5  319A  2230  3197   	fcall	_RF_RxDisable
  6821                           
  6822                           ;RF_Control_B1.c: 114: if(!RF->Debounce)
  6823  17D8  087B               	movf	_RF,w
  6824  17D9  0086               	movwf	6
  6825  17DA  0187               	clrf	7
  6826  17DB  1A81               	btfsc	1,5
  6827  17DC  2FF5               	goto	l9158
  6828                           
  6829                           ;RF_Control_B1.c: 115: {
  6830                           ;RF_Control_B1.c: 116: RF->DebounceTime++;
  6831  17DD  3001               	movlw	1
  6832  17DE  0020               	movlb	0	; select bank0
  6833  17DF  00E9               	movwf	??_setRF_Main
  6834  17E0  0A7B               	incf	_RF,w
  6835  17E1  0086               	movwf	6
  6836  17E2  0187               	clrf	7
  6837  17E3  0869               	movf	??_setRF_Main,w
  6838  17E4  0781               	addwf	1,f
  6839                           
  6840                           ;RF_Control_B1.c: 117: if(RF->DebounceTime == 25)
  6841  17E5  0A7B               	incf	_RF,w
  6842  17E6  0086               	movwf	6
  6843  17E7  0187               	clrf	7
  6844  17E8  0801               	movf	1,w
  6845  17E9  3A19               	xorlw	25
  6846  17EA  1D03               	skipz
  6847  17EB  0008               	return
  6848                           
  6849                           ;RF_Control_B1.c: 118: {
  6850                           ;RF_Control_B1.c: 119: RF->DebounceTime=0;
  6851  17EC  0A7B               	incf	_RF,w
  6852  17ED  0086               	movwf	6
  6853  17EE  0187               	clrf	7
  6854  17EF  0181               	clrf	1
  6855                           
  6856                           ;RF_Control_B1.c: 120: RF->Debounce=1;
  6857  17F0  087B               	movf	_RF,w
  6858  17F1  0086               	movwf	6
  6859  17F2  0187               	clrf	7
  6860  17F3  1681               	bsf	1,5
  6861                           
  6862                           ;RF_Control_B1.c: 121: }
  6863                           ;RF_Control_B1.c: 122: }
  6864  17F4  0008               	return
  6865  17F5                     l9158:	
  6866                           
  6867                           ;RF_Control_B1.c: 123: else
  6868                           ;RF_Control_B1.c: 124: {
  6869                           ;RF_Control_B1.c: 125: RF->Debounce=0;
  6870  17F5  087B               	movf	_RF,w
  6871  17F6  0086               	movwf	6
  6872  17F7  0187               	clrf	7
  6873  17F8  1281               	bcf	1,5
  6874                           
  6875                           ;RF_Control_B1.c: 126: RF->TransceiveGO=0;
  6876  17F9  087B               	movf	_RF,w
  6877  17FA  0086               	movwf	6
  6878  17FB  0187               	clrf	7
  6879  17FC  1101               	bcf	1,2
  6880                           
  6881                           ;RF_Control_B1.c: 127: CC2500_TxData();
  6882  17FD  319D  25A5         	fcall	_CC2500_TxData
  6883  17FF  0008               	return
  6884  1800                     __end_of_setRF_Main:	
  6885                           
  6886                           	psect	text23
  6887  1000                     __ptext23:	
  6888 ;; *************** function _getRxData *****************
  6889 ;; Defined at:
  6890 ;;		line 207 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;  rf              1    wreg     unsigned char 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  rf              1   72[BANK0 ] unsigned char 
  6895 ;;  i               1    0        unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;		None               void
  6898 ;; Registers used:
  6899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;Total ram usage:        1 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:   11
  6912 ;; This function calls:
  6913 ;;		_RfPointSelect
  6914 ;;		_setControl_Lights_Table
  6915 ;;		_setLog_Code
  6916 ;; This function is called by:
  6917 ;;		_setRF_Main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _getRxData
  6923  1000                     _getRxData:	
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6927                           ;getRxData@rf stored from wreg
  6928  1000  0020               	movlb	0	; select bank0
  6929  1001  00E8               	movwf	getRxData@rf
  6930                           
  6931                           ;RF_Control_B1.c: 209: unsigned char i;
  6932                           ;RF_Control_B1.c: 210: RfPointSelect(rf);
  6933  1002  0868               	movf	getRxData@rf,w
  6934  1003  31A5  25A0  3190   	fcall	_RfPointSelect
  6935                           
  6936                           ;RF_Control_B1.c: 211: if(RF->Learn)
  6937  1006  087B               	movf	_RF,w
  6938  1007  0086               	movwf	6
  6939  1008  0187               	clrf	7
  6940  1009  1F01               	btfss	1,6
  6941  100A  2817               	goto	l8688
  6942                           
  6943                           ;RF_Control_B1.c: 212: {
  6944                           ;RF_Control_B1.c: 213: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6945  100B  0021               	movlb	1	; select bank1
  6946  100C  08A0               	movf	_RF_Data^(0+128),f
  6947  100D  1D03               	skipz
  6948  100E  0008               	return
  6949  100F  0821               	movf	(_RF_Data^(0+128)+1),w
  6950  1010  3A64               	xorlw	100
  6951  1011  1D03               	skipz
  6952  1012  0008               	return
  6953                           
  6954                           ;RF_Control_B1.c: 214: {
  6955                           ;RF_Control_B1.c: 215: setLog_Code(1);
  6956  1013  3001               	movlw	1
  6957  1014  319E  2674         	fcall	_setLog_Code
  6958                           
  6959                           ;RF_Control_B1.c: 216: }
  6960                           ;RF_Control_B1.c: 217: }
  6961  1016  0008               	return
  6962  1017                     l8688:	
  6963                           
  6964                           ;RF_Control_B1.c: 218: else
  6965                           ;RF_Control_B1.c: 219: {
  6966                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6967  1017  0021               	movlb	1	; select bank1
  6968  1018  08A0               	movf	_RF_Data^(0+128),f
  6969  1019  1D03               	skipz
  6970  101A  0008               	return
  6971  101B  0821               	movf	(_RF_Data^(0+128)+1),w
  6972  101C  3A02               	xorlw	2
  6973  101D  1D03               	skipz
  6974  101E  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 221: {
  6977                           ;RF_Control_B1.c: 222: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  6978  101F  082C               	movf	(_RF_Data^(0+128)+12),w
  6979  1020  3AFF               	xorlw	255
  6980  1021  1D03               	skipz
  6981  1022  282D               	goto	l8700
  6982  1023  082D               	movf	(_RF_Data^(0+128)+13),w
  6983  1024  3AFF               	xorlw	255
  6984  1025  1D03               	skipz
  6985  1026  282D               	goto	l8700
  6986  1027  082E               	movf	(_RF_Data^(0+128)+14),w
  6987  1028  3AFF               	xorlw	255
  6988  1029  1D03               	skipz
  6989  102A  282D               	goto	l8700
  6990                           
  6991                           ;RF_Control_B1.c: 223: {
  6992                           ;RF_Control_B1.c: 224: __nop();
  6993  102B  0000               	nop
  6994                           
  6995                           ;RF_Control_B1.c: 225: }
  6996  102C  0008               	return
  6997  102D                     l8700:	
  6998                           
  6999                           ;RF_Control_B1.c: 226: else
  7000                           ;RF_Control_B1.c: 227: {
  7001                           ;RF_Control_B1.c: 228: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7002  102D  0020               	movlb	0	; select bank0
  7003  102E  086F               	movf	_Product,w
  7004  102F  3E0C               	addlw	12
  7005  1030  0086               	movwf	6
  7006  1031  3001               	movlw	1	; select bank2/3
  7007  1032  0087               	movwf	7
  7008  1033  0021               	movlb	1	; select bank1
  7009  1034  082C               	movf	(_RF_Data^(0+128)+12),w
  7010  1035  0601               	xorwf	1,w
  7011  1036  1D03               	skipz
  7012  1037  0008               	return
  7013  1038  0020               	movlb	0	; select bank0
  7014  1039  086F               	movf	_Product,w
  7015  103A  3E0D               	addlw	13
  7016  103B  0086               	movwf	6
  7017  103C  3001               	movlw	1	; select bank2/3
  7018  103D  0087               	movwf	7
  7019  103E  0021               	movlb	1	; select bank1
  7020  103F  082D               	movf	(_RF_Data^(0+128)+13),w
  7021  1040  0601               	xorwf	1,w
  7022  1041  1D03               	skipz
  7023  1042  0008               	return
  7024  1043  0020               	movlb	0	; select bank0
  7025  1044  086F               	movf	_Product,w
  7026  1045  3E0E               	addlw	14
  7027  1046  0086               	movwf	6
  7028  1047  3001               	movlw	1	; select bank2/3
  7029  1048  0087               	movwf	7
  7030  1049  0021               	movlb	1	; select bank1
  7031  104A  082E               	movf	(_RF_Data^(0+128)+14),w
  7032  104B  0601               	xorwf	1,w
  7033  104C  1D03               	skipz
  7034  104D  0008               	return
  7035                           
  7036                           ;RF_Control_B1.c: 229: {
  7037                           ;RF_Control_B1.c: 230: setControl_Lights_Table(1);
  7038  104E  3001               	movlw	1
  7039  104F  3194  2437         	fcall	_setControl_Lights_Table
  7040                           
  7041                           ;RF_Control_B1.c: 239: {
  7042                           ;RF_Control_B1.c: 240: ;
  7043                           
  7044                           ;RF_Control_B1.c: 235: {
  7045                           ;RF_Control_B1.c: 236: ;
  7046                           ;RF_Control_B1.c: 237: }
  7047                           
  7048                           ;RF_Control_B1.c: 231: }
  7049                           ;RF_Control_B1.c: 232: }
  7050                           ;RF_Control_B1.c: 233: }
  7051  1051  0008               	return
  7052  1052                     __end_of_getRxData:	
  7053                           
  7054                           	psect	text24
  7055  1E74                     __ptext24:	
  7056 ;; *************** function _setLog_Code *****************
  7057 ;; Defined at:
  7058 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  rf              1    wreg     unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  rf              1   11[BANK0 ] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;Total ram usage:        2 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    6
  7079 ;; This function calls:
  7080 ;;		_RfPointSelect
  7081 ;;		_setBuz
  7082 ;; This function is called by:
  7083 ;;		_getRxData
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _setLog_Code
  7089  1E74                     _setLog_Code:	
  7090                           
  7091                           ;incstack = 0
  7092                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7093                           ;setLog_Code@rf stored from wreg
  7094  1E74  0020               	movlb	0	; select bank0
  7095  1E75  00AB               	movwf	setLog_Code@rf
  7096                           
  7097                           ;RF_Control_B1.c: 251: RfPointSelect(rf);
  7098  1E76  082B               	movf	setLog_Code@rf,w
  7099  1E77  31A5  25A0  319E   	fcall	_RfPointSelect
  7100                           
  7101                           ;RF_Control_B1.c: 252: Product->Data[12]=RF_Data[12];
  7102  1E7A  0021               	movlb	1	; select bank1
  7103  1E7B  082C               	movf	(_RF_Data^(0+128)+12),w
  7104  1E7C  0020               	movlb	0	; select bank0
  7105  1E7D  00AA               	movwf	??_setLog_Code
  7106  1E7E  086F               	movf	_Product,w
  7107  1E7F  3E0C               	addlw	12
  7108  1E80  0086               	movwf	6
  7109  1E81  3001               	movlw	1	; select bank2/3
  7110  1E82  0087               	movwf	7
  7111  1E83  082A               	movf	??_setLog_Code,w
  7112  1E84  0081               	movwf	1
  7113                           
  7114                           ;RF_Control_B1.c: 253: Product->Data[13]=RF_Data[13];
  7115  1E85  0021               	movlb	1	; select bank1
  7116  1E86  082D               	movf	(_RF_Data^(0+128)+13),w
  7117  1E87  0020               	movlb	0	; select bank0
  7118  1E88  00AA               	movwf	??_setLog_Code
  7119  1E89  086F               	movf	_Product,w
  7120  1E8A  3E0D               	addlw	13
  7121  1E8B  0086               	movwf	6
  7122  1E8C  3001               	movlw	1	; select bank2/3
  7123  1E8D  0087               	movwf	7
  7124  1E8E  082A               	movf	??_setLog_Code,w
  7125  1E8F  0081               	movwf	1
  7126                           
  7127                           ;RF_Control_B1.c: 254: Product->Data[14]=RF_Data[14];
  7128  1E90  0021               	movlb	1	; select bank1
  7129  1E91  082E               	movf	(_RF_Data^(0+128)+14),w
  7130  1E92  0020               	movlb	0	; select bank0
  7131  1E93  00AA               	movwf	??_setLog_Code
  7132  1E94  086F               	movf	_Product,w
  7133  1E95  3E0E               	addlw	14
  7134  1E96  0086               	movwf	6
  7135  1E97  3001               	movlw	1	; select bank2/3
  7136  1E98  0087               	movwf	7
  7137  1E99  082A               	movf	??_setLog_Code,w
  7138  1E9A  0081               	movwf	1
  7139                           
  7140                           ;RF_Control_B1.c: 255: setBuz(1,100);
  7141  1E9B  3064               	movlw	100
  7142  1E9C  00A6               	movwf	setBuz@time
  7143  1E9D  3000               	movlw	0
  7144  1E9E  00A7               	movwf	setBuz@time+1
  7145  1E9F  3001               	movlw	1
  7146  1EA0  3195  2589  319E   	fcall	_setBuz
  7147                           
  7148                           ;RF_Control_B1.c: 256: RF->Learn=0;
  7149  1EA3  087B               	movf	_RF,w
  7150  1EA4  0086               	movwf	6
  7151  1EA5  0187               	clrf	7
  7152  1EA6  1301               	bcf	1,6
  7153                           
  7154                           ;RF_Control_B1.c: 257: if(TMain->First)
  7155  1EA7  087D               	movf	_TMain,w
  7156  1EA8  3E03               	addlw	3
  7157  1EA9  0086               	movwf	6
  7158  1EAA  3001               	movlw	1	; select bank2/3
  7159  1EAB  0087               	movwf	7
  7160  1EAC  1C81               	btfss	1,1
  7161  1EAD  2EB5               	goto	l2542
  7162                           
  7163                           ;RF_Control_B1.c: 258: {
  7164                           ;RF_Control_B1.c: 259: Memory->LoopSave=1;
  7165  1EAE  0021               	movlb	1	; select bank1
  7166  1EAF  086A               	movf	_Memory^(0+128),w
  7167  1EB0  3E22               	addlw	34
  7168  1EB1  0086               	movwf	6
  7169  1EB2  3001               	movlw	1	; select bank2/3
  7170  1EB3  0087               	movwf	7
  7171  1EB4  1501               	bsf	1,2
  7172  1EB5                     l2542:	
  7173                           
  7174                           ;RF_Control_B1.c: 260: }
  7175                           ;RF_Control_B1.c: 261: Memory->Modify=1;
  7176  1EB5  0021               	movlb	1	; select bank1
  7177  1EB6  086A               	movf	_Memory^(0+128),w
  7178  1EB7  3E22               	addlw	34
  7179  1EB8  0086               	movwf	6
  7180  1EB9  3001               	movlw	1	; select bank2/3
  7181  1EBA  0087               	movwf	7
  7182  1EBB  1401               	bsf	1,0
  7183  1EBC  0008               	return
  7184  1EBD                     __end_of_setLog_Code:	
  7185                           
  7186                           	psect	text25
  7187  1437                     __ptext25:	
  7188 ;; *************** function _setControl_Lights_Table *****************
  7189 ;; Defined at:
  7190 ;;		line 264 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  rf              1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  rf              1   71[BANK0 ] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;		None               void
  7197 ;; Registers used:
  7198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;Total ram usage:        1 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:   10
  7211 ;; This function calls:
  7212 ;;		_RfPointSelect
  7213 ;;		_setBuz
  7214 ;;		_setDimmerLights
  7215 ;;		_setRFSW_AdjControl
  7216 ;;		_setRFSW_Control
  7217 ;;		_setRFSW_Status
  7218 ;;		_setSw_Status
  7219 ;;		_setTxData
  7220 ;; This function is called by:
  7221 ;;		_getRxData
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function _setControl_Lights_Table
  7227  1437                     _setControl_Lights_Table:	
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7231                           ;setControl_Lights_Table@rf stored from wreg
  7232  1437  0020               	movlb	0	; select bank0
  7233  1438  00E7               	movwf	setControl_Lights_Table@rf
  7234                           
  7235                           ;RF_Control_B1.c: 266: RfPointSelect(rf);
  7236  1439  0867               	movf	setControl_Lights_Table@rf,w
  7237  143A  31A5  25A0  3194   	fcall	_RfPointSelect
  7238                           
  7239                           ;RF_Control_B1.c: 267: if(RF_Data[15] == 0x00)
  7240  143D  0021               	movlb	1	; select bank1
  7241  143E  08AF               	movf	(_RF_Data^(0+128)+15),f
  7242  143F  1D03               	skipz
  7243  1440  2C78               	goto	l8520
  7244                           
  7245                           ;RF_Control_B1.c: 268: {
  7246                           ;RF_Control_B1.c: 270: setDimmerLights(1,0);
  7247  1441  0020               	movlb	0	; select bank0
  7248  1442  01A4               	clrf	setDimmerLights@status
  7249  1443  3001               	movlw	1
  7250  1444  3188  20BC  3194   	fcall	_setDimmerLights
  7251                           
  7252                           ;RF_Control_B1.c: 271: setRFSW_Status(1,0);
  7253  1447  0020               	movlb	0	; select bank0
  7254  1448  01A2               	clrf	setRFSW_Status@command
  7255  1449  3001               	movlw	1
  7256  144A  31A6  26AF  3194   	fcall	_setRFSW_Status
  7257                           
  7258                           ;RF_Control_B1.c: 272: setSw_Status(1,0);
  7259  144D  0020               	movlb	0	; select bank0
  7260  144E  01A2               	clrf	setSw_Status@command
  7261  144F  3001               	movlw	1
  7262  1450  31A6  26BE  3194   	fcall	_setSw_Status
  7263                           
  7264                           ;RF_Control_B1.c: 285: Product->Data[9]=0;
  7265  1453  0020               	movlb	0	; select bank0
  7266  1454  086F               	movf	_Product,w
  7267  1455  3E09               	addlw	9
  7268  1456  0086               	movwf	6
  7269  1457  3001               	movlw	1	; select bank2/3
  7270  1458  0087               	movwf	7
  7271  1459  0181               	clrf	1
  7272                           
  7273                           ;RF_Control_B1.c: 286: Product->Data[11]=0;
  7274  145A  086F               	movf	_Product,w
  7275  145B  3E0B               	addlw	11
  7276  145C  0086               	movwf	6
  7277  145D  3001               	movlw	1	; select bank2/3
  7278  145E  0087               	movwf	7
  7279  145F  0181               	clrf	1
  7280                           
  7281                           ;RF_Control_B1.c: 287: Product->Data[15]=0;
  7282  1460  086F               	movf	_Product,w
  7283  1461  3E0F               	addlw	15
  7284  1462  0086               	movwf	6
  7285  1463  3001               	movlw	1	; select bank2/3
  7286  1464  0087               	movwf	7
  7287  1465  0181               	clrf	1
  7288                           
  7289                           ;RF_Control_B1.c: 288: Product->Data[17]=0;
  7290  1466  086F               	movf	_Product,w
  7291  1467  3E11               	addlw	17
  7292  1468  0086               	movwf	6
  7293  1469  3001               	movlw	1	; select bank2/3
  7294  146A  0087               	movwf	7
  7295  146B  0181               	clrf	1
  7296                           
  7297                           ;RF_Control_B1.c: 289: setBuz(1,100);
  7298  146C  3064               	movlw	100
  7299  146D  00A6               	movwf	setBuz@time
  7300  146E  3000               	movlw	0
  7301  146F  00A7               	movwf	setBuz@time+1
  7302  1470  3001               	movlw	1
  7303  1471  3195  2589  3194   	fcall	_setBuz
  7304                           
  7305                           ;RF_Control_B1.c: 290: setTxData(1);
  7306  1474  3001               	movlw	1
  7307  1475  318B  2339         	fcall	_setTxData
  7308                           
  7309                           ;RF_Control_B1.c: 291: }
  7310  1477  0008               	return
  7311  1478                     l8520:	
  7312                           
  7313                           ;RF_Control_B1.c: 292: else if(RF_Data[15] == 0x20)
  7314  1478  0021               	movlb	1	; select bank1
  7315  1479  082F               	movf	(_RF_Data^(0+128)+15),w
  7316  147A  3A20               	xorlw	32
  7317  147B  1D03               	skipz
  7318  147C  2C94               	goto	l8526
  7319                           
  7320                           ;RF_Control_B1.c: 293: {
  7321                           ;RF_Control_B1.c: 294: Product->Data[9]=0;
  7322  147D  0020               	movlb	0	; select bank0
  7323  147E  086F               	movf	_Product,w
  7324  147F  3E09               	addlw	9
  7325  1480  0086               	movwf	6
  7326  1481  3001               	movlw	1	; select bank2/3
  7327  1482  0087               	movwf	7
  7328  1483  0181               	clrf	1
  7329                           
  7330                           ;RF_Control_B1.c: 295: Product->Data[11]=0;
  7331  1484  086F               	movf	_Product,w
  7332  1485  3E0B               	addlw	11
  7333  1486  0086               	movwf	6
  7334  1487  3001               	movlw	1	; select bank2/3
  7335  1488  0087               	movwf	7
  7336  1489  0181               	clrf	1
  7337                           
  7338                           ;RF_Control_B1.c: 296: Product->Data[17]=0;
  7339  148A  086F               	movf	_Product,w
  7340  148B  3E11               	addlw	17
  7341  148C  0086               	movwf	6
  7342  148D  3001               	movlw	1	; select bank2/3
  7343  148E  0087               	movwf	7
  7344  148F  0181               	clrf	1
  7345                           
  7346                           ;RF_Control_B1.c: 297: setTxData(1);
  7347  1490  3001               	movlw	1
  7348  1491  318B  2339         	fcall	_setTxData
  7349                           
  7350                           ;RF_Control_B1.c: 298: }
  7351  1493  0008               	return
  7352  1494                     l8526:	
  7353                           
  7354                           ;RF_Control_B1.c: 300: else if(RF_Data[15] == 0x01)
  7355  1494  0021               	movlb	1	; select bank1
  7356  1495  082F               	movf	(_RF_Data^(0+128)+15),w
  7357  1496  3A01               	xorlw	1
  7358  1497  1D03               	skipz
  7359  1498  2C9D               	goto	l8530
  7360                           
  7361                           ;RF_Control_B1.c: 301: {
  7362                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  7363  1499  3001               	movlw	1
  7364  149A  3188  202C         	fcall	_setRFSW_Control
  7365                           
  7366                           ;RF_Control_B1.c: 303: }
  7367  149C  0008               	return
  7368  149D                     l8530:	
  7369                           
  7370                           ;RF_Control_B1.c: 305: else if(RF_Data[15] == 0x11)
  7371  149D  0021               	movlb	1	; select bank1
  7372  149E  082F               	movf	(_RF_Data^(0+128)+15),w
  7373  149F  3A11               	xorlw	17
  7374  14A0  1D03               	skipz
  7375  14A1  0008               	return
  7376                           
  7377                           ;RF_Control_B1.c: 306: {
  7378                           ;RF_Control_B1.c: 307: setRFSW_AdjControl(1);
  7379  14A2  3001               	movlw	1
  7380  14A3  319D  2521         	fcall	_setRFSW_AdjControl
  7381  14A5  0008               	return
  7382  14A6                     __end_of_setControl_Lights_Table:	
  7383                           
  7384                           	psect	text26
  7385  082C                     __ptext26:	
  7386 ;; *************** function _setRFSW_Control *****************
  7387 ;; Defined at:
  7388 ;;		line 361 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  sw              1    wreg     unsigned char 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  sw              1   67[BANK0 ] unsigned char 
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;Total ram usage:        2 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    8
  7409 ;; This function calls:
  7410 ;;		_RfSWPointSelect
  7411 ;;		_setBuz
  7412 ;;		_setDelayOff_GO
  7413 ;;		_setDimmerLights_Switch
  7414 ;;		_setDimmerLights_Trigger
  7415 ;;		_setRF_DimmerLights
  7416 ;;		_setSw_Status
  7417 ;;		_setTxData
  7418 ;; This function is called by:
  7419 ;;		_setControl_Lights_Table
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _setRFSW_Control
  7425  082C                     _setRFSW_Control:	
  7426                           
  7427                           ;incstack = 0
  7428                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7429                           ;setRFSW_Control@sw stored from wreg
  7430  082C  0020               	movlb	0	; select bank0
  7431  082D  00E3               	movwf	setRFSW_Control@sw
  7432                           
  7433                           ;RF_Control_B1.c: 363: RfSWPointSelect(sw);
  7434  082E  0863               	movf	setRFSW_Control@sw,w
  7435  082F  31A6  2607  3188   	fcall	_RfSWPointSelect
  7436                           
  7437                           ;RF_Control_B1.c: 364: if(!RFSW->Status)
  7438  0832  0021               	movlb	1	; select bank1
  7439  0833  083C               	movf	_RFSW^(0+128),w
  7440  0834  0086               	movwf	6
  7441  0835  0187               	clrf	7
  7442  0836  1801               	btfsc	1,0
  7443  0837  286D               	goto	l8410
  7444                           
  7445                           ;RF_Control_B1.c: 365: {
  7446                           ;RF_Control_B1.c: 366: if(RF_Data[16] == 0x80)
  7447  0838  0830               	movf	(_RF_Data^(0+128)+16),w
  7448  0839  3A80               	xorlw	128
  7449  083A  1D03               	skipz
  7450  083B  2849               	goto	l8400
  7451                           
  7452                           ;RF_Control_B1.c: 367: {
  7453                           ;RF_Control_B1.c: 368: setDelayOff_GO(sw,1,RF_Data[17]);
  7454  083C  0020               	movlb	0	; select bank0
  7455  083D  01A3               	clrf	setDelayOff_GO@command
  7456  083E  0AA3               	incf	setDelayOff_GO@command,f
  7457  083F  0021               	movlb	1	; select bank1
  7458  0840  0831               	movf	(_RF_Data^(0+128)+17),w
  7459  0841  0020               	movlb	0	; select bank0
  7460  0842  00E2               	movwf	??_setRFSW_Control
  7461  0843  0862               	movf	??_setRFSW_Control,w
  7462  0844  00A4               	movwf	setDelayOff_GO@value
  7463  0845  0863               	movf	setRFSW_Control@sw,w
  7464  0846  3191  2107  3188   	fcall	_setDelayOff_GO
  7465  0849                     l8400:	
  7466                           
  7467                           ;RF_Control_B1.c: 369: }
  7468                           ;RF_Control_B1.c: 370: RFSW->Status=1;
  7469  0849  0021               	movlb	1	; select bank1
  7470  084A  083C               	movf	_RFSW^(0+128),w
  7471  084B  0086               	movwf	6
  7472  084C  0187               	clrf	7
  7473  084D  1401               	bsf	1,0
  7474                           
  7475                           ;RF_Control_B1.c: 371: setSw_Status(sw,1);
  7476  084E  0020               	movlb	0	; select bank0
  7477  084F  01A2               	clrf	setSw_Status@command
  7478  0850  0AA2               	incf	setSw_Status@command,f
  7479  0851  0863               	movf	setRFSW_Control@sw,w
  7480  0852  31A6  26BE  3188   	fcall	_setSw_Status
  7481                           
  7482                           ;RF_Control_B1.c: 373: setDimmerLights_Trigger(sw,1);
  7483  0855  0020               	movlb	0	; select bank0
  7484  0856  01A2               	clrf	setDimmerLights_Trigger@command
  7485  0857  0AA2               	incf	setDimmerLights_Trigger@command,f
  7486  0858  0863               	movf	setRFSW_Control@sw,w
  7487  0859  31A6  26FC  3188   	fcall	_setDimmerLights_Trigger
  7488                           
  7489                           ;RF_Control_B1.c: 374: setDimmerLights_Switch(sw,1);
  7490  085C  0020               	movlb	0	; select bank0
  7491  085D  01A2               	clrf	setDimmerLights_Switch@command
  7492  085E  0AA2               	incf	setDimmerLights_Switch@command,f
  7493  085F  0863               	movf	setRFSW_Control@sw,w
  7494  0860  31A6  26EC  3188   	fcall	_setDimmerLights_Switch
  7495                           
  7496                           ;RF_Control_B1.c: 376: setRF_DimmerLights(sw,RFSW->Status);
  7497  0863  0021               	movlb	1	; select bank1
  7498  0864  083C               	movf	_RFSW^(0+128),w
  7499  0865  0086               	movwf	6
  7500  0866  0187               	clrf	7
  7501  0867  3000               	movlw	0
  7502  0868  1801               	btfsc	1,0
  7503  0869  3001               	movlw	1
  7504  086A  0020               	movlb	0	; select bank0
  7505  086B  00DD               	movwf	setRF_DimmerLights@on
  7506  086C  28AB               	goto	L2
  7507  086D                     l8410:	
  7508                           ;RF_Control_B1.c: 377: }
  7509                           
  7510                           
  7511                           ;RF_Control_B1.c: 378: else
  7512                           ;RF_Control_B1.c: 379: {
  7513                           ;RF_Control_B1.c: 380: if(RF_Data[16] == 0x80)
  7514  086D  0021               	movlb	1	; select bank1
  7515  086E  0830               	movf	(_RF_Data^(0+128)+16),w
  7516  086F  3A80               	xorlw	128
  7517  0870  1D03               	skipz
  7518  0871  2883               	goto	l8414
  7519                           
  7520                           ;RF_Control_B1.c: 381: {
  7521                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw,1,RF_Data[17]);
  7522  0872  0020               	movlb	0	; select bank0
  7523  0873  01A3               	clrf	setDelayOff_GO@command
  7524  0874  0AA3               	incf	setDelayOff_GO@command,f
  7525  0875  0021               	movlb	1	; select bank1
  7526  0876  0831               	movf	(_RF_Data^(0+128)+17),w
  7527  0877  0020               	movlb	0	; select bank0
  7528  0878  00E2               	movwf	??_setRFSW_Control
  7529  0879  0862               	movf	??_setRFSW_Control,w
  7530  087A  00A4               	movwf	setDelayOff_GO@value
  7531  087B  0863               	movf	setRFSW_Control@sw,w
  7532  087C  3191  2107  3188   	fcall	_setDelayOff_GO
  7533                           
  7534                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,1);
  7535  087F  0020               	movlb	0	; select bank0
  7536  0880  01DD               	clrf	setRF_DimmerLights@on
  7537  0881  0ADD               	incf	setRF_DimmerLights@on,f
  7538  0882  28AB               	goto	L2
  7539  0883                     l8414:	
  7540                           ;RF_Control_B1.c: 384: }
  7541                           
  7542                           
  7543                           ;RF_Control_B1.c: 385: else
  7544                           ;RF_Control_B1.c: 386: {
  7545                           ;RF_Control_B1.c: 387: RFSW->Status=0;
  7546  0883  0021               	movlb	1	; select bank1
  7547  0884  083C               	movf	_RFSW^(0+128),w
  7548  0885  0086               	movwf	6
  7549  0886  0187               	clrf	7
  7550  0887  1001               	bcf	1,0
  7551                           
  7552                           ;RF_Control_B1.c: 388: setSw_Status(sw,0);
  7553  0888  0020               	movlb	0	; select bank0
  7554  0889  01A2               	clrf	setSw_Status@command
  7555  088A  0863               	movf	setRFSW_Control@sw,w
  7556  088B  31A6  26BE  3188   	fcall	_setSw_Status
  7557                           
  7558                           ;RF_Control_B1.c: 390: setDimmerLights_Trigger(sw,1);
  7559  088E  0020               	movlb	0	; select bank0
  7560  088F  01A2               	clrf	setDimmerLights_Trigger@command
  7561  0890  0AA2               	incf	setDimmerLights_Trigger@command,f
  7562  0891  0863               	movf	setRFSW_Control@sw,w
  7563  0892  31A6  26FC  3188   	fcall	_setDimmerLights_Trigger
  7564                           
  7565                           ;RF_Control_B1.c: 391: setDimmerLights_Switch(sw,RFSW->Status);
  7566  0895  0021               	movlb	1	; select bank1
  7567  0896  083C               	movf	_RFSW^(0+128),w
  7568  0897  0086               	movwf	6
  7569  0898  0187               	clrf	7
  7570  0899  3000               	movlw	0
  7571  089A  1801               	btfsc	1,0
  7572  089B  3001               	movlw	1
  7573  089C  0020               	movlb	0	; select bank0
  7574  089D  00A2               	movwf	setDimmerLights_Switch@command
  7575  089E  0863               	movf	setRFSW_Control@sw,w
  7576  089F  31A6  26EC  3188   	fcall	_setDimmerLights_Switch
  7577                           
  7578                           ;RF_Control_B1.c: 393: setDelayOff_GO(sw,0,0);
  7579  08A2  0020               	movlb	0	; select bank0
  7580  08A3  01A3               	clrf	setDelayOff_GO@command
  7581  08A4  01A4               	clrf	setDelayOff_GO@value
  7582  08A5  0863               	movf	setRFSW_Control@sw,w
  7583  08A6  3191  2107  3188   	fcall	_setDelayOff_GO
  7584                           
  7585                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw,0);
  7586  08A9  0020               	movlb	0	; select bank0
  7587  08AA  01DD               	clrf	setRF_DimmerLights@on
  7588  08AB                     L2:	
  7589  08AB  0863               	movf	setRFSW_Control@sw,w
  7590  08AC  3192  2286  3188   	fcall	_setRF_DimmerLights
  7591                           
  7592                           ;RF_Control_B1.c: 395: }
  7593                           ;RF_Control_B1.c: 396: }
  7594                           ;RF_Control_B1.c: 397: setBuz(1,100);
  7595  08AF  3064               	movlw	100
  7596  08B0  0020               	movlb	0	; select bank0
  7597  08B1  00A6               	movwf	setBuz@time
  7598  08B2  3000               	movlw	0
  7599  08B3  00A7               	movwf	setBuz@time+1
  7600  08B4  3001               	movlw	1
  7601  08B5  3195  2589  3188   	fcall	_setBuz
  7602                           
  7603                           ;RF_Control_B1.c: 398: setTxData(1);
  7604  08B8  3001               	movlw	1
  7605  08B9  318B  2339         	fcall	_setTxData
  7606  08BB  0008               	return
  7607  08BC                     __end_of_setRFSW_Control:	
  7608                           
  7609                           	psect	text27
  7610  1107                     __ptext27:	
  7611 ;; *************** function _setDelayOff_GO *****************
  7612 ;; Defined at:
  7613 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  sw              1    wreg     unsigned char 
  7616 ;;  command         1    3[BANK0 ] unsigned char 
  7617 ;;  value           1    4[BANK0 ] unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  sw              1    7[BANK0 ] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        5 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    5
  7636 ;; This function calls:
  7637 ;;		_DelayOffPointSelect
  7638 ;;		_DelayTimejudge
  7639 ;; This function is called by:
  7640 ;;		_setRFSW_Control
  7641 ;;		_Sw_DimmerOffFunc
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _setDelayOff_GO
  7647  1107                     _setDelayOff_GO:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7651                           ;setDelayOff_GO@sw stored from wreg
  7652  1107  0020               	movlb	0	; select bank0
  7653  1108  00A7               	movwf	setDelayOff_GO@sw
  7654                           
  7655                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7656  1109  0827               	movf	setDelayOff_GO@sw,w
  7657  110A  31A5  25FB  3191   	fcall	_DelayOffPointSelect
  7658                           
  7659                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7660  110D  0021               	movlb	1	; select bank1
  7661  110E  0838               	movf	_DelayOff^(0+128),w
  7662  110F  0086               	movwf	6
  7663  1110  0187               	clrf	7
  7664  1111  1C01               	btfss	1,0
  7665  1112  0008               	return
  7666                           
  7667                           ;DelayOff_B1.c: 96: {
  7668                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7669  1113  0838               	movf	_DelayOff^(0+128),w
  7670  1114  0086               	movwf	6
  7671  1115  0187               	clrf	7
  7672  1116  0020               	movlb	0	; select bank0
  7673  1117  0823               	movf	setDelayOff_GO@command,w
  7674  1118  1081               	bcf	1,1
  7675  1119  1D03               	skipz
  7676  111A  1481               	bsf	1,1
  7677                           
  7678                           ;DelayOff_B1.c: 98: if(command)
  7679  111B  0823               	movf	setDelayOff_GO@command,w
  7680  111C  1903               	btfsc	3,2
  7681  111D  2949               	goto	l6230
  7682                           
  7683                           ;DelayOff_B1.c: 99: {
  7684                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7685  111E  0824               	movf	setDelayOff_GO@value,w
  7686  111F  319A  22D8  3191   	fcall	_DelayTimejudge
  7687  1122  0020               	movlb	0	; select bank0
  7688  1123  00A5               	movwf	??_setDelayOff_GO
  7689  1124  0021               	movlb	1	; select bank1
  7690  1125  0A38               	incf	_DelayOff^(0+128),w
  7691  1126  0086               	movwf	6
  7692  1127  0187               	clrf	7
  7693  1128  0020               	movlb	0	; select bank0
  7694  1129  0825               	movf	??_setDelayOff_GO,w
  7695  112A  0081               	movwf	1
  7696                           
  7697                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7698  112B  300F               	movlw	15
  7699  112C  0524               	andwf	setDelayOff_GO@value,w
  7700  112D  00A5               	movwf	??_setDelayOff_GO
  7701  112E  0825               	movf	??_setDelayOff_GO,w
  7702  112F  3A05               	xorlw	5
  7703  1130  1903               	skipnz
  7704  1131  2936               	goto	l6224
  7705  1132  0824               	movf	setDelayOff_GO@value,w
  7706  1133  390F               	andlw	15
  7707  1134  1D03               	btfss	3,2
  7708  1135  293C               	goto	l6228
  7709  1136                     l6224:	
  7710  1136  3026               	movlw	38
  7711  1137  0224               	subwf	setDelayOff_GO@value,w
  7712  1138  1803               	skipnc
  7713  1139  293C               	goto	l6228
  7714                           
  7715                           ;DelayOff_B1.c: 102: {
  7716                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7717  113A  0824               	movf	setDelayOff_GO@value,w
  7718  113B  293D               	goto	L3
  7719  113C                     l6228:	
  7720                           ;DelayOff_B1.c: 104: }
  7721                           
  7722                           
  7723                           ;DelayOff_B1.c: 105: else
  7724                           ;DelayOff_B1.c: 106: {
  7725                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7726  113C  3005               	movlw	5
  7727  113D                     L3:	
  7728  113D  00A5               	movwf	??_setDelayOff_GO
  7729  113E  0827               	movf	setDelayOff_GO@sw,w
  7730  113F  3E1A               	addlw	26
  7731  1140  076F               	addwf	_Product,w
  7732  1141  00A6               	movwf	??_setDelayOff_GO+1
  7733  1142  0826               	movf	??_setDelayOff_GO+1,w
  7734  1143  0086               	movwf	6
  7735  1144  3001               	movlw	1	; select bank2/3
  7736  1145  0087               	movwf	7
  7737  1146  0825               	movf	??_setDelayOff_GO,w
  7738  1147  0081               	movwf	1
  7739                           
  7740                           ;DelayOff_B1.c: 108: }
  7741                           ;DelayOff_B1.c: 109: }
  7742  1148  2955               	goto	l6234
  7743  1149                     l6230:	
  7744                           
  7745                           ;DelayOff_B1.c: 110: else if(!command)
  7746  1149  08A3               	movf	setDelayOff_GO@command,f
  7747  114A  1D03               	skipz
  7748  114B  2955               	goto	l6234
  7749                           
  7750                           ;DelayOff_B1.c: 111: {
  7751                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7752  114C  0827               	movf	setDelayOff_GO@sw,w
  7753  114D  3E1A               	addlw	26
  7754  114E  076F               	addwf	_Product,w
  7755  114F  00A5               	movwf	??_setDelayOff_GO
  7756  1150  0825               	movf	??_setDelayOff_GO,w
  7757  1151  0086               	movwf	6
  7758  1152  3001               	movlw	1	; select bank2/3
  7759  1153  0087               	movwf	7
  7760  1154  0181               	clrf	1
  7761  1155                     l6234:	
  7762                           
  7763                           ;DelayOff_B1.c: 113: }
  7764                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7765  1155  0021               	movlb	1	; select bank1
  7766  1156  0838               	movf	_DelayOff^(0+128),w
  7767  1157  3E02               	addlw	2
  7768  1158  0086               	movwf	6
  7769  1159  0187               	clrf	7
  7770  115A  3000               	movlw	0
  7771  115B  3FC0               	movwi [0]fsr1
  7772  115C  3FC1               	movwi [1]fsr1
  7773                           
  7774                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7775  115D  0838               	movf	_DelayOff^(0+128),w
  7776  115E  3E04               	addlw	4
  7777  115F  0086               	movwf	6
  7778  1160  0187               	clrf	7
  7779  1161  0181               	clrf	1
  7780  1162  0008               	return
  7781  1163                     __end_of_setDelayOff_GO:	
  7782                           
  7783                           	psect	text28
  7784  1AD8                     __ptext28:	
  7785 ;; *************** function _DelayTimejudge *****************
  7786 ;; Defined at:
  7787 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  value           1    wreg     unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  value           1    2[BANK0 ] unsigned char 
  7792 ;;  i               1    1[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      unsigned char 
  7795 ;; Registers used:
  7796 ;;		wreg
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        3 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    4
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_setDelayOff_GO
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _DelayTimejudge
  7818  1AD8                     _DelayTimejudge:	
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in _DelayTimejudge: [wreg]
  7822                           ;DelayTimejudge@value stored from wreg
  7823  1AD8  0020               	movlb	0	; select bank0
  7824  1AD9  00A2               	movwf	DelayTimejudge@value
  7825                           
  7826                           ;DelayOff_B1.c: 121: char i=5;
  7827  1ADA  3005               	movlw	5
  7828  1ADB  00A0               	movwf	??_DelayTimejudge
  7829  1ADC  0820               	movf	??_DelayTimejudge,w
  7830  1ADD  00A1               	movwf	DelayTimejudge@i
  7831                           
  7832                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7833  1ADE  0822               	movf	DelayTimejudge@value,w
  7834  1ADF  3A05               	xorlw	5
  7835  1AE0  1D03               	skipz
  7836  1AE1  2AE4               	goto	l6070
  7837                           
  7838                           ;DelayOff_B1.c: 123: {
  7839                           ;DelayOff_B1.c: 124: i=5;
  7840  1AE2  3005               	movlw	5
  7841  1AE3  2B01               	goto	L8
  7842  1AE4                     l6070:	
  7843                           ;DelayOff_B1.c: 125: }
  7844                           
  7845                           
  7846                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7847  1AE4  0822               	movf	DelayTimejudge@value,w
  7848  1AE5  3A10               	xorlw	16
  7849  1AE6  1D03               	skipz
  7850  1AE7  2AEA               	goto	l6074
  7851                           
  7852                           ;DelayOff_B1.c: 127: {
  7853                           ;DelayOff_B1.c: 128: i=10;
  7854  1AE8  300A               	movlw	10
  7855  1AE9  2B01               	goto	L8
  7856  1AEA                     l6074:	
  7857                           ;DelayOff_B1.c: 129: }
  7858                           
  7859                           
  7860                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7861  1AEA  0822               	movf	DelayTimejudge@value,w
  7862  1AEB  3A15               	xorlw	21
  7863  1AEC  1D03               	skipz
  7864  1AED  2AF0               	goto	l6078
  7865                           
  7866                           ;DelayOff_B1.c: 131: {
  7867                           ;DelayOff_B1.c: 132: i=15;
  7868  1AEE  300F               	movlw	15
  7869  1AEF  2B01               	goto	L8
  7870  1AF0                     l6078:	
  7871                           ;DelayOff_B1.c: 133: }
  7872                           
  7873                           
  7874                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7875  1AF0  0822               	movf	DelayTimejudge@value,w
  7876  1AF1  3A20               	xorlw	32
  7877  1AF2  1D03               	skipz
  7878  1AF3  2AF6               	goto	l6082
  7879                           
  7880                           ;DelayOff_B1.c: 135: {
  7881                           ;DelayOff_B1.c: 136: i=20;
  7882  1AF4  3014               	movlw	20
  7883  1AF5  2B01               	goto	L8
  7884  1AF6                     l6082:	
  7885                           ;DelayOff_B1.c: 137: }
  7886                           
  7887                           
  7888                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7889  1AF6  0822               	movf	DelayTimejudge@value,w
  7890  1AF7  3A25               	xorlw	37
  7891  1AF8  1D03               	skipz
  7892  1AF9  2AFC               	goto	l6086
  7893                           
  7894                           ;DelayOff_B1.c: 139: {
  7895                           ;DelayOff_B1.c: 140: i=25;
  7896  1AFA  3019               	movlw	25
  7897  1AFB  2B01               	goto	L8
  7898  1AFC                     l6086:	
  7899                           ;DelayOff_B1.c: 141: }
  7900                           
  7901                           
  7902                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  7903  1AFC  0822               	movf	DelayTimejudge@value,w
  7904  1AFD  3A30               	xorlw	48
  7905  1AFE  1D03               	skipz
  7906  1AFF  2B04               	goto	l664
  7907                           
  7908                           ;DelayOff_B1.c: 143: {
  7909                           ;DelayOff_B1.c: 144: i=30;
  7910  1B00  301E               	movlw	30
  7911  1B01                     L8:	
  7912  1B01  00A0               	movwf	??_DelayTimejudge
  7913  1B02  0820               	movf	??_DelayTimejudge,w
  7914  1B03  00A1               	movwf	DelayTimejudge@i
  7915  1B04                     l664:	
  7916                           
  7917                           ;DelayOff_B1.c: 145: }
  7918                           ;DelayOff_B1.c: 146: return i;
  7919  1B04  0821               	movf	DelayTimejudge@i,w
  7920  1B05  0008               	return
  7921  1B06                     __end_of_DelayTimejudge:	
  7922                           
  7923                           	psect	text29
  7924  1D21                     __ptext29:	
  7925 ;; *************** function _setRFSW_AdjControl *****************
  7926 ;; Defined at:
  7927 ;;		line 401 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  sw              1    wreg     unsigned char 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  sw              1   70[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;Total ram usage:        3 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    9
  7948 ;; This function calls:
  7949 ;;		_RfSWPointSelect
  7950 ;;		_setRF_DimmerValue
  7951 ;;		_setTxData
  7952 ;; This function is called by:
  7953 ;;		_setControl_Lights_Table
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function _setRFSW_AdjControl
  7959  1D21                     _setRFSW_AdjControl:	
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7963                           ;setRFSW_AdjControl@sw stored from wreg
  7964  1D21  0020               	movlb	0	; select bank0
  7965  1D22  00E6               	movwf	setRFSW_AdjControl@sw
  7966                           
  7967                           ;RF_Control_B1.c: 403: RfSWPointSelect(sw);
  7968  1D23  0866               	movf	setRFSW_AdjControl@sw,w
  7969  1D24  31A6  2607  319D   	fcall	_RfSWPointSelect
  7970                           
  7971                           ;RF_Control_B1.c: 404: if(RFSW->Status)
  7972  1D27  0021               	movlb	1	; select bank1
  7973  1D28  083C               	movf	_RFSW^(0+128),w
  7974  1D29  0086               	movwf	6
  7975  1D2A  0187               	clrf	7
  7976  1D2B  1C01               	btfss	1,0
  7977  1D2C  2D39               	goto	l6476
  7978                           
  7979                           ;RF_Control_B1.c: 405: {
  7980                           ;RF_Control_B1.c: 406: Memory->Modify=1;
  7981  1D2D  086A               	movf	_Memory^(0+128),w
  7982  1D2E  3E22               	addlw	34
  7983  1D2F  0086               	movwf	6
  7984  1D30  3001               	movlw	1	; select bank2/3
  7985  1D31  0087               	movwf	7
  7986  1D32  1401               	bsf	1,0
  7987                           
  7988                           ;RF_Control_B1.c: 407: setRF_DimmerValue(sw);
  7989  1D33  0020               	movlb	0	; select bank0
  7990  1D34  0866               	movf	setRFSW_AdjControl@sw,w
  7991  1D35  319B  23FB  319D   	fcall	_setRF_DimmerValue
  7992                           
  7993                           ;RF_Control_B1.c: 408: }
  7994  1D38  2D4B               	goto	l2569
  7995  1D39                     l6476:	
  7996                           
  7997                           ;RF_Control_B1.c: 409: else
  7998                           ;RF_Control_B1.c: 410: {
  7999                           ;RF_Control_B1.c: 411: Product->Data[9]=Product->Data[20+sw];
  8000  1D39  0020               	movlb	0	; select bank0
  8001  1D3A  0866               	movf	setRFSW_AdjControl@sw,w
  8002  1D3B  3E14               	addlw	20
  8003  1D3C  076F               	addwf	_Product,w
  8004  1D3D  00E4               	movwf	??_setRFSW_AdjControl
  8005  1D3E  0864               	movf	??_setRFSW_AdjControl,w
  8006  1D3F  0086               	movwf	6
  8007  1D40  3001               	movlw	1	; select bank2/3
  8008  1D41  0087               	movwf	7
  8009  1D42  0801               	movf	1,w
  8010  1D43  00E5               	movwf	??_setRFSW_AdjControl+1
  8011  1D44  086F               	movf	_Product,w
  8012  1D45  3E09               	addlw	9
  8013  1D46  0086               	movwf	6
  8014  1D47  3001               	movlw	1	; select bank2/3
  8015  1D48  0087               	movwf	7
  8016  1D49  0865               	movf	??_setRFSW_AdjControl+1,w
  8017  1D4A  0081               	movwf	1
  8018  1D4B                     l2569:	
  8019                           
  8020                           ;RF_Control_B1.c: 412: }
  8021                           ;RF_Control_B1.c: 413: Product->Data[17]=Product->Data[26+sw];
  8022  1D4B  0020               	movlb	0	; select bank0
  8023  1D4C  0866               	movf	setRFSW_AdjControl@sw,w
  8024  1D4D  3E1A               	addlw	26
  8025  1D4E  076F               	addwf	_Product,w
  8026  1D4F  00E4               	movwf	??_setRFSW_AdjControl
  8027  1D50  0864               	movf	??_setRFSW_AdjControl,w
  8028  1D51  0086               	movwf	6
  8029  1D52  3001               	movlw	1	; select bank2/3
  8030  1D53  0087               	movwf	7
  8031  1D54  0801               	movf	1,w
  8032  1D55  00E5               	movwf	??_setRFSW_AdjControl+1
  8033  1D56  086F               	movf	_Product,w
  8034  1D57  3E11               	addlw	17
  8035  1D58  0086               	movwf	6
  8036  1D59  3001               	movlw	1	; select bank2/3
  8037  1D5A  0087               	movwf	7
  8038  1D5B  0865               	movf	??_setRFSW_AdjControl+1,w
  8039  1D5C  0081               	movwf	1
  8040                           
  8041                           ;RF_Control_B1.c: 414: setTxData(1);
  8042  1D5D  3001               	movlw	1
  8043  1D5E  318B  2339         	fcall	_setTxData
  8044  1D60  0008               	return
  8045  1D61                     __end_of_setRFSW_AdjControl:	
  8046                           
  8047                           	psect	text30
  8048  1BFB                     __ptext30:	
  8049 ;; *************** function _setRF_DimmerValue *****************
  8050 ;; Defined at:
  8051 ;;		line 425 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  lights          1    wreg     unsigned char 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  lights          1   67[BANK0 ] unsigned char 
  8056 ;; Return value:  Size  Location     Type
  8057 ;;		None               void
  8058 ;; Registers used:
  8059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;Total ram usage:        3 bytes
  8070 ;; Hardware stack levels used:    1
  8071 ;; Hardware stack levels required when called:    8
  8072 ;; This function calls:
  8073 ;;		_setDimmerLights_AdjRF
  8074 ;; This function is called by:
  8075 ;;		_setRFSW_AdjControl
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           
  8080                           ;psect for function _setRF_DimmerValue
  8081  1BFB                     _setRF_DimmerValue:	
  8082                           
  8083                           ;incstack = 0
  8084                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8085                           ;setRF_DimmerValue@lights stored from wreg
  8086  1BFB  0020               	movlb	0	; select bank0
  8087  1BFC  00E3               	movwf	setRF_DimmerValue@lights
  8088                           
  8089                           ;RF_Control_B1.c: 427: if(RF_Data[9] > 0x64)
  8090  1BFD  3065               	movlw	101
  8091  1BFE  0021               	movlb	1	; select bank1
  8092  1BFF  0229               	subwf	(_RF_Data^(0+128)+9),w
  8093  1C00  1C03               	skipc
  8094  1C01  2C08               	goto	l6324
  8095                           
  8096                           ;RF_Control_B1.c: 428: {
  8097                           ;RF_Control_B1.c: 429: RF_Data[9]=0x64;
  8098  1C02  3064               	movlw	100
  8099  1C03  0020               	movlb	0	; select bank0
  8100  1C04  00E1               	movwf	??_setRF_DimmerValue
  8101  1C05  0861               	movf	??_setRF_DimmerValue,w
  8102  1C06  0021               	movlb	1	; select bank1
  8103  1C07  00A9               	movwf	(_RF_Data^(0+128)+9)
  8104  1C08                     l6324:	
  8105                           
  8106                           ;RF_Control_B1.c: 430: }
  8107                           ;RF_Control_B1.c: 431: Product->Data[9]=RF_Data[9];
  8108  1C08  0829               	movf	(_RF_Data^(0+128)+9),w
  8109  1C09  0020               	movlb	0	; select bank0
  8110  1C0A  00E1               	movwf	??_setRF_DimmerValue
  8111  1C0B  086F               	movf	_Product,w
  8112  1C0C  3E09               	addlw	9
  8113  1C0D  0086               	movwf	6
  8114  1C0E  3001               	movlw	1	; select bank2/3
  8115  1C0F  0087               	movwf	7
  8116  1C10  0861               	movf	??_setRF_DimmerValue,w
  8117  1C11  0081               	movwf	1
  8118                           
  8119                           ;RF_Control_B1.c: 432: Product->Data[11]=lights;
  8120  1C12  0863               	movf	setRF_DimmerValue@lights,w
  8121  1C13  00E1               	movwf	??_setRF_DimmerValue
  8122  1C14  086F               	movf	_Product,w
  8123  1C15  3E0B               	addlw	11
  8124  1C16  0086               	movwf	6
  8125  1C17  3001               	movlw	1	; select bank2/3
  8126  1C18  0087               	movwf	7
  8127  1C19  0861               	movf	??_setRF_DimmerValue,w
  8128  1C1A  0081               	movwf	1
  8129                           
  8130                           ;RF_Control_B1.c: 433: Product->Data[(20+lights)]=Product->Data[9];
  8131  1C1B  086F               	movf	_Product,w
  8132  1C1C  3E09               	addlw	9
  8133  1C1D  0086               	movwf	6
  8134  1C1E  3001               	movlw	1	; select bank2/3
  8135  1C1F  0087               	movwf	7
  8136  1C20  0801               	movf	1,w
  8137  1C21  00E1               	movwf	??_setRF_DimmerValue
  8138  1C22  0863               	movf	setRF_DimmerValue@lights,w
  8139  1C23  3E14               	addlw	20
  8140  1C24  076F               	addwf	_Product,w
  8141  1C25  00E2               	movwf	??_setRF_DimmerValue+1
  8142  1C26  0862               	movf	??_setRF_DimmerValue+1,w
  8143  1C27  0086               	movwf	6
  8144  1C28  3001               	movlw	1	; select bank2/3
  8145  1C29  0087               	movwf	7
  8146  1C2A  0861               	movf	??_setRF_DimmerValue,w
  8147  1C2B  0081               	movwf	1
  8148                           
  8149                           ;RF_Control_B1.c: 434: setDimmerLights_AdjRF(lights);
  8150  1C2C  0863               	movf	setRF_DimmerValue@lights,w
  8151  1C2D  3199  219D         	fcall	_setDimmerLights_AdjRF
  8152  1C2F  0008               	return
  8153  1C30                     __end_of_setRF_DimmerValue:	
  8154                           
  8155                           	psect	text31
  8156  199D                     __ptext31:	
  8157 ;; *************** function _setDimmerLights_AdjRF *****************
  8158 ;; Defined at:
  8159 ;;		line 414 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  lights          1    wreg     unsigned char 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  lights          1   64[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;		None               void
  8166 ;; Registers used:
  8167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:        2 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    7
  8180 ;; This function calls:
  8181 ;;		_DimmerLightsPointSelect
  8182 ;;		_getPercentValue
  8183 ;; This function is called by:
  8184 ;;		_setRF_DimmerValue
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _setDimmerLights_AdjRF
  8190  199D                     _setDimmerLights_AdjRF:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8194                           ;setDimmerLights_AdjRF@lights stored from wreg
  8195  199D  0020               	movlb	0	; select bank0
  8196  199E  00E0               	movwf	setDimmerLights_AdjRF@lights
  8197                           
  8198                           ;Dimmer_B1.c: 416: DimmerLightsPointSelect(lights);
  8199  199F  0860               	movf	setDimmerLights_AdjRF@lights,w
  8200  19A0  31A5  258A  3199   	fcall	_DimmerLightsPointSelect
  8201                           
  8202                           ;Dimmer_B1.c: 417: DimmerLights->AdjRF=1;
  8203  19A3  0020               	movlb	0	; select bank0
  8204  19A4  086C               	movf	_DimmerLights,w
  8205  19A5  0086               	movwf	6
  8206  19A6  3001               	movlw	1	; select bank2/3
  8207  19A7  0087               	movwf	7
  8208  19A8  1501               	bsf	1,2
  8209                           
  8210                           ;Dimmer_B1.c: 418: DimmerLights->Signal=1;
  8211  19A9  086C               	movf	_DimmerLights,w
  8212  19AA  0086               	movwf	6
  8213  19AB  3001               	movlw	1	; select bank2/3
  8214  19AC  0087               	movwf	7
  8215  19AD  1481               	bsf	1,1
  8216                           
  8217                           ;Dimmer_B1.c: 419: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8218  19AE  086F               	movf	_Product,w
  8219  19AF  3E09               	addlw	9
  8220  19B0  0086               	movwf	6
  8221  19B1  3001               	movlw	1	; select bank2/3
  8222  19B2  0087               	movwf	7
  8223  19B3  0801               	movf	1,w
  8224  19B4  3190  20AC         	fcall	_getPercentValue
  8225  19B6  0020               	movlb	0	; select bank0
  8226  19B7  00DF               	movwf	??_setDimmerLights_AdjRF
  8227  19B8  086C               	movf	_DimmerLights,w
  8228  19B9  3E05               	addlw	5
  8229  19BA  0086               	movwf	6
  8230  19BB  3001               	movlw	1	; select bank2/3
  8231  19BC  0087               	movwf	7
  8232  19BD  085F               	movf	??_setDimmerLights_AdjRF,w
  8233  19BE  0081               	movwf	1
  8234  19BF  0008               	return
  8235  19C0                     __end_of_setDimmerLights_AdjRF:	
  8236                           
  8237                           	psect	text32
  8238  10AC                     __ptext32:	
  8239 ;; *************** function _getPercentValue *****************
  8240 ;; Defined at:
  8241 ;;		line 481 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  value           1    wreg     unsigned char 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  value           1   59[BANK0 ] unsigned char 
  8246 ;;  i               3   60[BANK0 ] float 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  1    wreg      unsigned char 
  8249 ;; Registers used:
  8250 ;;		wreg, status,2, status,0, pclath, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;Total ram usage:        6 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    6
  8263 ;; This function calls:
  8264 ;;		___awtoft
  8265 ;;		___ftadd
  8266 ;;		___ftdiv
  8267 ;;		___ftmul
  8268 ;;		___fttol
  8269 ;; This function is called by:
  8270 ;;		_setDimmerLights_AdjRF
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _getPercentValue
  8276  10AC                     _getPercentValue:	
  8277                           
  8278                           ;incstack = 0
  8279                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8280                           ;getPercentValue@value stored from wreg
  8281  10AC  0020               	movlb	0	; select bank0
  8282  10AD  00DB               	movwf	getPercentValue@value
  8283                           
  8284                           ;Dimmer_B1.c: 484: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8285  10AE  3000               	movlw	0
  8286  10AF  00DC               	movwf	getPercentValue@i
  8287  10B0  3054               	movlw	84
  8288  10B1  00DD               	movwf	getPercentValue@i+1
  8289  10B2  3042               	movlw	66
  8290  10B3  00DE               	movwf	getPercentValue@i+2
  8291                           
  8292                           ;Dimmer_B1.c: 485: i/=100;
  8293  10B4  3000               	movlw	0
  8294  10B5  00AE               	movwf	___ftdiv@f2
  8295  10B6  30C8               	movlw	200
  8296  10B7  00AF               	movwf	___ftdiv@f2+1
  8297  10B8  3042               	movlw	66
  8298  10B9  00B0               	movwf	___ftdiv@f2+2
  8299  10BA  085C               	movf	getPercentValue@i,w
  8300  10BB  00B1               	movwf	___ftdiv@f1
  8301  10BC  085D               	movf	getPercentValue@i+1,w
  8302  10BD  00B2               	movwf	___ftdiv@f1+1
  8303  10BE  085E               	movf	getPercentValue@i+2,w
  8304  10BF  00B3               	movwf	___ftdiv@f1+2
  8305  10C0  318A  2290  3190   	fcall	___ftdiv
  8306  10C3  0020               	movlb	0	; select bank0
  8307  10C4  082E               	movf	?___ftdiv,w
  8308  10C5  00DC               	movwf	getPercentValue@i
  8309  10C6  082F               	movf	?___ftdiv+1,w
  8310  10C7  00DD               	movwf	getPercentValue@i+1
  8311  10C8  0830               	movf	?___ftdiv+2,w
  8312  10C9  00DE               	movwf	getPercentValue@i+2
  8313                           
  8314                           ;Dimmer_B1.c: 486: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8315  10CA  085B               	movf	getPercentValue@value,w
  8316  10CB  00D9               	movwf	??_getPercentValue
  8317  10CC  01DA               	clrf	??_getPercentValue+1
  8318  10CD  09D9               	comf	??_getPercentValue,f
  8319  10CE  09DA               	comf	??_getPercentValue+1,f
  8320  10CF  0AD9               	incf	??_getPercentValue,f
  8321  10D0  1903               	skipnz
  8322  10D1  0ADA               	incf	??_getPercentValue+1,f
  8323  10D2  0859               	movf	??_getPercentValue,w
  8324  10D3  3E64               	addlw	100
  8325  10D4  00A8               	movwf	___awtoft@c
  8326  10D5  3000               	movlw	0
  8327  10D6  3D5A               	addwfc	??_getPercentValue+1,w
  8328  10D7  00A9               	movwf	___awtoft@c+1
  8329  10D8  3199  2137  3190   	fcall	___awtoft
  8330  10DB  0020               	movlb	0	; select bank0
  8331  10DC  0828               	movf	?___awtoft,w
  8332  10DD  00B1               	movwf	___ftmul@f2
  8333  10DE  0829               	movf	?___awtoft+1,w
  8334  10DF  00B2               	movwf	___ftmul@f2+1
  8335  10E0  082A               	movf	?___awtoft+2,w
  8336  10E1  00B3               	movwf	___ftmul@f2+2
  8337  10E2  085C               	movf	getPercentValue@i,w
  8338  10E3  00AE               	movwf	___ftmul@f1
  8339  10E4  085D               	movf	getPercentValue@i+1,w
  8340  10E5  00AF               	movwf	___ftmul@f1+1
  8341  10E6  085E               	movf	getPercentValue@i+2,w
  8342  10E7  00B0               	movwf	___ftmul@f1+2
  8343  10E8  3187  273C  3190   	fcall	___ftmul
  8344  10EB  0020               	movlb	0	; select bank0
  8345  10EC  082E               	movf	?___ftmul,w
  8346  10ED  00C1               	movwf	___ftadd@f2
  8347  10EE  082F               	movf	?___ftmul+1,w
  8348  10EF  00C2               	movwf	___ftadd@f2+1
  8349  10F0  0830               	movf	?___ftmul+2,w
  8350  10F1  00C3               	movwf	___ftadd@f2+2
  8351  10F2  3000               	movlw	0
  8352  10F3  00BE               	movwf	___ftadd@f1
  8353  10F4  3086               	movlw	134
  8354  10F5  00BF               	movwf	___ftadd@f1+1
  8355  10F6  3042               	movlw	66
  8356  10F7  00C0               	movwf	___ftadd@f1+2
  8357  10F8  318D  25E7  3190   	fcall	___ftadd
  8358  10FB  0020               	movlb	0	; select bank0
  8359  10FC  083E               	movf	?___ftadd,w
  8360  10FD  00CB               	movwf	___fttol@f1
  8361  10FE  083F               	movf	?___ftadd+1,w
  8362  10FF  00CC               	movwf	___fttol@f1+1
  8363  1100  0840               	movf	?___ftadd+2,w
  8364  1101  00CD               	movwf	___fttol@f1+2
  8365  1102  3196  26F1         	fcall	___fttol
  8366  1104  0020               	movlb	0	; select bank0
  8367  1105  084B               	movf	?___fttol,w
  8368  1106  0008               	return
  8369  1107                     __end_of_getPercentValue:	
  8370                           
  8371                           	psect	text33
  8372  073C                     __ptext33:	
  8373 ;; *************** function ___ftmul *****************
  8374 ;; Defined at:
  8375 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  f1              3   14[BANK0 ] float 
  8378 ;;  f2              3   17[BANK0 ] float 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8381 ;;  sign            1   29[BANK0 ] unsigned char 
  8382 ;;  cntr            1   28[BANK0 ] unsigned char 
  8383 ;;  exp             1   24[BANK0 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  3   14[BANK0 ] float 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:       16 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		___ftpack
  8402 ;; This function is called by:
  8403 ;;		_getPercentValue
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function ___ftmul
  8409  073C                     ___ftmul:	
  8410                           
  8411                           ;incstack = 0
  8412                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8413  073C  0020               	movlb	0	; select bank0
  8414  073D  082E               	movf	___ftmul@f1,w
  8415  073E  00B4               	movwf	??___ftmul
  8416  073F  082F               	movf	___ftmul@f1+1,w
  8417  0740  00B5               	movwf	??___ftmul+1
  8418  0741  0830               	movf	___ftmul@f1+2,w
  8419  0742  00B6               	movwf	??___ftmul+2
  8420  0743  1003               	clrc
  8421  0744  0D35               	rlf	??___ftmul+1,w
  8422  0745  0D36               	rlf	??___ftmul+2,w
  8423  0746  00B7               	movwf	??___ftmul+3
  8424  0747  0837               	movf	??___ftmul+3,w
  8425  0748  00B8               	movwf	___ftmul@exp
  8426  0749  08B8               	movf	___ftmul@exp,f
  8427  074A  1D03               	skipz
  8428  074B  2F53               	goto	l5962
  8429  074C  3000               	movlw	0
  8430  074D  00AE               	movwf	?___ftmul
  8431  074E  3000               	movlw	0
  8432  074F  00AF               	movwf	?___ftmul+1
  8433  0750  3000               	movlw	0
  8434  0751  00B0               	movwf	?___ftmul+2
  8435  0752  0008               	return
  8436  0753                     l5962:	
  8437  0753  0831               	movf	___ftmul@f2,w
  8438  0754  00B4               	movwf	??___ftmul
  8439  0755  0832               	movf	___ftmul@f2+1,w
  8440  0756  00B5               	movwf	??___ftmul+1
  8441  0757  0833               	movf	___ftmul@f2+2,w
  8442  0758  00B6               	movwf	??___ftmul+2
  8443  0759  1003               	clrc
  8444  075A  0D35               	rlf	??___ftmul+1,w
  8445  075B  0D36               	rlf	??___ftmul+2,w
  8446  075C  00B7               	movwf	??___ftmul+3
  8447  075D  0837               	movf	??___ftmul+3,w
  8448  075E  00BD               	movwf	___ftmul@sign
  8449  075F  08BD               	movf	___ftmul@sign,f
  8450  0760  1D03               	skipz
  8451  0761  2F69               	goto	l5968
  8452  0762  3000               	movlw	0
  8453  0763  00AE               	movwf	?___ftmul
  8454  0764  3000               	movlw	0
  8455  0765  00AF               	movwf	?___ftmul+1
  8456  0766  3000               	movlw	0
  8457  0767  00B0               	movwf	?___ftmul+2
  8458  0768  0008               	return
  8459  0769                     l5968:	
  8460  0769  083D               	movf	___ftmul@sign,w
  8461  076A  3E7B               	addlw	123
  8462  076B  00B4               	movwf	??___ftmul
  8463  076C  0834               	movf	??___ftmul,w
  8464  076D  07B8               	addwf	___ftmul@exp,f
  8465  076E  082E               	movf	___ftmul@f1,w
  8466  076F  00B4               	movwf	??___ftmul
  8467  0770  082F               	movf	___ftmul@f1+1,w
  8468  0771  00B5               	movwf	??___ftmul+1
  8469  0772  0830               	movf	___ftmul@f1+2,w
  8470  0773  00B6               	movwf	??___ftmul+2
  8471  0774  3010               	movlw	16
  8472  0775                     u4175:	
  8473  0775  36B6               	lsrf	??___ftmul+2,f
  8474  0776  0CB5               	rrf	??___ftmul+1,f
  8475  0777  0CB4               	rrf	??___ftmul,f
  8476  0778  0B89               	decfsz	9,f
  8477  0779  2F75               	goto	u4175
  8478  077A  0834               	movf	??___ftmul,w
  8479  077B  00B7               	movwf	??___ftmul+3
  8480  077C  0837               	movf	??___ftmul+3,w
  8481  077D  00BD               	movwf	___ftmul@sign
  8482  077E  0831               	movf	___ftmul@f2,w
  8483  077F  00B4               	movwf	??___ftmul
  8484  0780  0832               	movf	___ftmul@f2+1,w
  8485  0781  00B5               	movwf	??___ftmul+1
  8486  0782  0833               	movf	___ftmul@f2+2,w
  8487  0783  00B6               	movwf	??___ftmul+2
  8488  0784  3010               	movlw	16
  8489  0785                     u4185:	
  8490  0785  36B6               	lsrf	??___ftmul+2,f
  8491  0786  0CB5               	rrf	??___ftmul+1,f
  8492  0787  0CB4               	rrf	??___ftmul,f
  8493  0788  0B89               	decfsz	9,f
  8494  0789  2F85               	goto	u4185
  8495  078A  0834               	movf	??___ftmul,w
  8496  078B  00B7               	movwf	??___ftmul+3
  8497  078C  0837               	movf	??___ftmul+3,w
  8498  078D  06BD               	xorwf	___ftmul@sign,f
  8499  078E  3080               	movlw	128
  8500  078F  00B4               	movwf	??___ftmul
  8501  0790  0834               	movf	??___ftmul,w
  8502  0791  05BD               	andwf	___ftmul@sign,f
  8503  0792  17AF               	bsf	___ftmul@f1+1,7
  8504  0793  17B2               	bsf	___ftmul@f2+1,7
  8505  0794  30FF               	movlw	255
  8506  0795  05B1               	andwf	___ftmul@f2,f
  8507  0796  30FF               	movlw	255
  8508  0797  05B2               	andwf	___ftmul@f2+1,f
  8509  0798  3000               	movlw	0
  8510  0799  05B3               	andwf	___ftmul@f2+2,f
  8511  079A  3000               	movlw	0
  8512  079B  00B9               	movwf	___ftmul@f3_as_product
  8513  079C  3000               	movlw	0
  8514  079D  00BA               	movwf	___ftmul@f3_as_product+1
  8515  079E  3000               	movlw	0
  8516  079F  00BB               	movwf	___ftmul@f3_as_product+2
  8517  07A0  3007               	movlw	7
  8518  07A1  00B4               	movwf	??___ftmul
  8519  07A2  0834               	movf	??___ftmul,w
  8520  07A3  00BC               	movwf	___ftmul@cntr
  8521  07A4                     l5980:	
  8522  07A4  1C2E               	btfss	___ftmul@f1,0
  8523  07A5  2FAC               	goto	l5984
  8524  07A6  0831               	movf	___ftmul@f2,w
  8525  07A7  07B9               	addwf	___ftmul@f3_as_product,f
  8526  07A8  0832               	movf	___ftmul@f2+1,w
  8527  07A9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8528  07AA  0833               	movf	___ftmul@f2+2,w
  8529  07AB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8530  07AC                     l5984:	
  8531  07AC  3001               	movlw	1
  8532  07AD                     u4205:	
  8533  07AD  36B0               	lsrf	___ftmul@f1+2,f
  8534  07AE  0CAF               	rrf	___ftmul@f1+1,f
  8535  07AF  0CAE               	rrf	___ftmul@f1,f
  8536  07B0  0B89               	decfsz	9,f
  8537  07B1  2FAD               	goto	u4205
  8538  07B2  3001               	movlw	1
  8539  07B3                     u4215:	
  8540  07B3  35B1               	lslf	___ftmul@f2,f
  8541  07B4  0DB2               	rlf	___ftmul@f2+1,f
  8542  07B5  0DB3               	rlf	___ftmul@f2+2,f
  8543  07B6  0B89               	decfsz	9,f
  8544  07B7  2FB3               	goto	u4215
  8545  07B8  3001               	movlw	1
  8546  07B9  02BC               	subwf	___ftmul@cntr,f
  8547  07BA  1D03               	btfss	3,2
  8548  07BB  2FA4               	goto	l5980
  8549  07BC  3009               	movlw	9
  8550  07BD  00B4               	movwf	??___ftmul
  8551  07BE  0834               	movf	??___ftmul,w
  8552  07BF  00BC               	movwf	___ftmul@cntr
  8553  07C0                     l5992:	
  8554  07C0  1C2E               	btfss	___ftmul@f1,0
  8555  07C1  2FC8               	goto	l5996
  8556  07C2  0831               	movf	___ftmul@f2,w
  8557  07C3  07B9               	addwf	___ftmul@f3_as_product,f
  8558  07C4  0832               	movf	___ftmul@f2+1,w
  8559  07C5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8560  07C6  0833               	movf	___ftmul@f2+2,w
  8561  07C7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8562  07C8                     l5996:	
  8563  07C8  3001               	movlw	1
  8564  07C9                     u4245:	
  8565  07C9  36B0               	lsrf	___ftmul@f1+2,f
  8566  07CA  0CAF               	rrf	___ftmul@f1+1,f
  8567  07CB  0CAE               	rrf	___ftmul@f1,f
  8568  07CC  0B89               	decfsz	9,f
  8569  07CD  2FC9               	goto	u4245
  8570  07CE  3001               	movlw	1
  8571  07CF                     u4255:	
  8572  07CF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8573  07D0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8574  07D1  0CB9               	rrf	___ftmul@f3_as_product,f
  8575  07D2  0B89               	decfsz	9,f
  8576  07D3  2FCF               	goto	u4255
  8577  07D4  3001               	movlw	1
  8578  07D5  02BC               	subwf	___ftmul@cntr,f
  8579  07D6  1D03               	btfss	3,2
  8580  07D7  2FC0               	goto	l5992
  8581  07D8  0839               	movf	___ftmul@f3_as_product,w
  8582  07D9  00A0               	movwf	___ftpack@arg
  8583  07DA  083A               	movf	___ftmul@f3_as_product+1,w
  8584  07DB  00A1               	movwf	___ftpack@arg+1
  8585  07DC  083B               	movf	___ftmul@f3_as_product+2,w
  8586  07DD  00A2               	movwf	___ftpack@arg+2
  8587  07DE  0838               	movf	___ftmul@exp,w
  8588  07DF  00B4               	movwf	??___ftmul
  8589  07E0  0834               	movf	??___ftmul,w
  8590  07E1  00A3               	movwf	___ftpack@exp
  8591  07E2  083D               	movf	___ftmul@sign,w
  8592  07E3  00B5               	movwf	??___ftmul+1
  8593  07E4  0835               	movf	??___ftmul+1,w
  8594  07E5  00A4               	movwf	___ftpack@sign
  8595  07E6  3191  21C1         	fcall	___ftpack
  8596  07E8  0020               	movlb	0	; select bank0
  8597  07E9  0820               	movf	?___ftpack,w
  8598  07EA  00AE               	movwf	?___ftmul
  8599  07EB  0821               	movf	?___ftpack+1,w
  8600  07EC  00AF               	movwf	?___ftmul+1
  8601  07ED  0822               	movf	?___ftpack+2,w
  8602  07EE  00B0               	movwf	?___ftmul+2
  8603  07EF  0008               	return
  8604  07F0                     __end_of___ftmul:	
  8605                           
  8606                           	psect	text34
  8607  0DE7                     __ptext34:	
  8608 ;; *************** function ___ftadd *****************
  8609 ;; Defined at:
  8610 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;  f1              3   30[BANK0 ] float 
  8613 ;;  f2              3   33[BANK0 ] float 
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;  exp1            1   42[BANK0 ] unsigned char 
  8616 ;;  exp2            1   41[BANK0 ] unsigned char 
  8617 ;;  sign            1   40[BANK0 ] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  3   30[BANK0 ] float 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0, pclath, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8627 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;Total ram usage:       13 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    5
  8634 ;; This function calls:
  8635 ;;		___ftpack
  8636 ;; This function is called by:
  8637 ;;		_getPercentValue
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function ___ftadd
  8643  0DE7                     ___ftadd:	
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8647  0DE7  0020               	movlb	0	; select bank0
  8648  0DE8  083E               	movf	___ftadd@f1,w
  8649  0DE9  00C4               	movwf	??___ftadd
  8650  0DEA  083F               	movf	___ftadd@f1+1,w
  8651  0DEB  00C5               	movwf	??___ftadd+1
  8652  0DEC  0840               	movf	___ftadd@f1+2,w
  8653  0DED  00C6               	movwf	??___ftadd+2
  8654  0DEE  1003               	clrc
  8655  0DEF  0D45               	rlf	??___ftadd+1,w
  8656  0DF0  0D46               	rlf	??___ftadd+2,w
  8657  0DF1  00C7               	movwf	??___ftadd+3
  8658  0DF2  0847               	movf	??___ftadd+3,w
  8659  0DF3  00CA               	movwf	___ftadd@exp1
  8660  0DF4  0841               	movf	___ftadd@f2,w
  8661  0DF5  00C4               	movwf	??___ftadd
  8662  0DF6  0842               	movf	___ftadd@f2+1,w
  8663  0DF7  00C5               	movwf	??___ftadd+1
  8664  0DF8  0843               	movf	___ftadd@f2+2,w
  8665  0DF9  00C6               	movwf	??___ftadd+2
  8666  0DFA  1003               	clrc
  8667  0DFB  0D45               	rlf	??___ftadd+1,w
  8668  0DFC  0D46               	rlf	??___ftadd+2,w
  8669  0DFD  00C7               	movwf	??___ftadd+3
  8670  0DFE  0847               	movf	??___ftadd+3,w
  8671  0DFF  00C9               	movwf	___ftadd@exp2
  8672  0E00  084A               	movf	___ftadd@exp1,w
  8673  0E01  1903               	btfsc	3,2
  8674  0E02  2E0F               	goto	l5850
  8675  0E03  0849               	movf	___ftadd@exp2,w
  8676  0E04  024A               	subwf	___ftadd@exp1,w
  8677  0E05  1803               	skipnc
  8678  0E06  2E16               	goto	l5854
  8679  0E07  034A               	decf	___ftadd@exp1,w
  8680  0E08  3AFF               	xorlw	255
  8681  0E09  0749               	addwf	___ftadd@exp2,w
  8682  0E0A  00C4               	movwf	??___ftadd
  8683  0E0B  3019               	movlw	25
  8684  0E0C  0244               	subwf	??___ftadd,w
  8685  0E0D  1C03               	skipc
  8686  0E0E  2E16               	goto	l5854
  8687  0E0F                     l5850:	
  8688  0E0F  0841               	movf	___ftadd@f2,w
  8689  0E10  00BE               	movwf	?___ftadd
  8690  0E11  0842               	movf	___ftadd@f2+1,w
  8691  0E12  00BF               	movwf	?___ftadd+1
  8692  0E13  0843               	movf	___ftadd@f2+2,w
  8693  0E14  00C0               	movwf	?___ftadd+2
  8694  0E15  0008               	return
  8695  0E16                     l5854:	
  8696  0E16  0849               	movf	___ftadd@exp2,w
  8697  0E17  1903               	btfsc	3,2
  8698  0E18  0008               	return
  8699  0E19  084A               	movf	___ftadd@exp1,w
  8700  0E1A  0249               	subwf	___ftadd@exp2,w
  8701  0E1B  1803               	skipnc
  8702  0E1C  2E25               	goto	l5860
  8703  0E1D  0349               	decf	___ftadd@exp2,w
  8704  0E1E  3AFF               	xorlw	255
  8705  0E1F  074A               	addwf	___ftadd@exp1,w
  8706  0E20  00C4               	movwf	??___ftadd
  8707  0E21  3019               	movlw	25
  8708  0E22  0244               	subwf	??___ftadd,w
  8709  0E23  1803               	btfsc	3,0
  8710  0E24  0008               	return
  8711  0E25                     l5860:	
  8712  0E25  3006               	movlw	6
  8713  0E26  00C4               	movwf	??___ftadd
  8714  0E27  0844               	movf	??___ftadd,w
  8715  0E28  00C8               	movwf	___ftadd@sign
  8716  0E29  1BC0               	btfsc	___ftadd@f1+2,7
  8717  0E2A  17C8               	bsf	___ftadd@sign,7
  8718  0E2B  1BC3               	btfsc	___ftadd@f2+2,7
  8719  0E2C  1748               	bsf	___ftadd@sign,6
  8720  0E2D  17BF               	bsf	___ftadd@f1+1,7
  8721  0E2E  30FF               	movlw	255
  8722  0E2F  05BE               	andwf	___ftadd@f1,f
  8723  0E30  30FF               	movlw	255
  8724  0E31  05BF               	andwf	___ftadd@f1+1,f
  8725  0E32  3000               	movlw	0
  8726  0E33  05C0               	andwf	___ftadd@f1+2,f
  8727  0E34  17C2               	bsf	___ftadd@f2+1,7
  8728  0E35  30FF               	movlw	255
  8729  0E36  05C1               	andwf	___ftadd@f2,f
  8730  0E37  30FF               	movlw	255
  8731  0E38  05C2               	andwf	___ftadd@f2+1,f
  8732  0E39  3000               	movlw	0
  8733  0E3A  05C3               	andwf	___ftadd@f2+2,f
  8734  0E3B  0849               	movf	___ftadd@exp2,w
  8735  0E3C  024A               	subwf	___ftadd@exp1,w
  8736  0E3D  1803               	skipnc
  8737  0E3E  2E61               	goto	l5882
  8738  0E3F                     l5872:	
  8739  0E3F  3001               	movlw	1
  8740  0E40                     u3935:	
  8741  0E40  35C1               	lslf	___ftadd@f2,f
  8742  0E41  0DC2               	rlf	___ftadd@f2+1,f
  8743  0E42  0DC3               	rlf	___ftadd@f2+2,f
  8744  0E43  0B89               	decfsz	9,f
  8745  0E44  2E40               	goto	u3935
  8746  0E45  3001               	movlw	1
  8747  0E46  02C9               	subwf	___ftadd@exp2,f
  8748  0E47  0849               	movf	___ftadd@exp2,w
  8749  0E48  064A               	xorwf	___ftadd@exp1,w
  8750  0E49  1903               	skipnz
  8751  0E4A  2E5C               	goto	l5880
  8752  0E4B  3001               	movlw	1
  8753  0E4C  02C8               	subwf	___ftadd@sign,f
  8754  0E4D  0848               	movf	___ftadd@sign,w
  8755  0E4E  3907               	andlw	7
  8756  0E4F  1903               	btfsc	3,2
  8757  0E50  2E5C               	goto	l5880
  8758  0E51  2E3F               	goto	l5872
  8759  0E52                     l5878:	
  8760  0E52  3001               	movlw	1
  8761  0E53                     u3965:	
  8762  0E53  36C0               	lsrf	___ftadd@f1+2,f
  8763  0E54  0CBF               	rrf	___ftadd@f1+1,f
  8764  0E55  0CBE               	rrf	___ftadd@f1,f
  8765  0E56  0B89               	decfsz	9,f
  8766  0E57  2E53               	goto	u3965
  8767  0E58  3001               	movlw	1
  8768  0E59  00C4               	movwf	??___ftadd
  8769  0E5A  0844               	movf	??___ftadd,w
  8770  0E5B  07CA               	addwf	___ftadd@exp1,f
  8771  0E5C                     l5880:	
  8772  0E5C  084A               	movf	___ftadd@exp1,w
  8773  0E5D  0649               	xorwf	___ftadd@exp2,w
  8774  0E5E  1903               	btfsc	3,2
  8775  0E5F  2E86               	goto	l3219
  8776  0E60  2E52               	goto	l5878
  8777  0E61                     l5882:	
  8778  0E61  084A               	movf	___ftadd@exp1,w
  8779  0E62  0249               	subwf	___ftadd@exp2,w
  8780  0E63  1803               	skipnc
  8781  0E64  2E86               	goto	l3219
  8782  0E65                     l5884:	
  8783  0E65  3001               	movlw	1
  8784  0E66                     u3995:	
  8785  0E66  35BE               	lslf	___ftadd@f1,f
  8786  0E67  0DBF               	rlf	___ftadd@f1+1,f
  8787  0E68  0DC0               	rlf	___ftadd@f1+2,f
  8788  0E69  0B89               	decfsz	9,f
  8789  0E6A  2E66               	goto	u3995
  8790  0E6B  3001               	movlw	1
  8791  0E6C  02CA               	subwf	___ftadd@exp1,f
  8792  0E6D  0849               	movf	___ftadd@exp2,w
  8793  0E6E  064A               	xorwf	___ftadd@exp1,w
  8794  0E6F  1903               	skipnz
  8795  0E70  2E82               	goto	l5892
  8796  0E71  3001               	movlw	1
  8797  0E72  02C8               	subwf	___ftadd@sign,f
  8798  0E73  0848               	movf	___ftadd@sign,w
  8799  0E74  3907               	andlw	7
  8800  0E75  1903               	btfsc	3,2
  8801  0E76  2E82               	goto	l5892
  8802  0E77  2E65               	goto	l5884
  8803  0E78                     l5890:	
  8804  0E78  3001               	movlw	1
  8805  0E79                     u4025:	
  8806  0E79  36C3               	lsrf	___ftadd@f2+2,f
  8807  0E7A  0CC2               	rrf	___ftadd@f2+1,f
  8808  0E7B  0CC1               	rrf	___ftadd@f2,f
  8809  0E7C  0B89               	decfsz	9,f
  8810  0E7D  2E79               	goto	u4025
  8811  0E7E  3001               	movlw	1
  8812  0E7F  00C4               	movwf	??___ftadd
  8813  0E80  0844               	movf	??___ftadd,w
  8814  0E81  07C9               	addwf	___ftadd@exp2,f
  8815  0E82                     l5892:	
  8816  0E82  084A               	movf	___ftadd@exp1,w
  8817  0E83  0649               	xorwf	___ftadd@exp2,w
  8818  0E84  1D03               	skipz
  8819  0E85  2E78               	goto	l5890
  8820  0E86                     l3219:	
  8821  0E86  1FC8               	btfss	___ftadd@sign,7
  8822  0E87  2E98               	goto	l5896
  8823  0E88  30FF               	movlw	255
  8824  0E89  06BE               	xorwf	___ftadd@f1,f
  8825  0E8A  30FF               	movlw	255
  8826  0E8B  06BF               	xorwf	___ftadd@f1+1,f
  8827  0E8C  30FF               	movlw	255
  8828  0E8D  06C0               	xorwf	___ftadd@f1+2,f
  8829  0E8E  3001               	movlw	1
  8830  0E8F  07BE               	addwf	___ftadd@f1,f
  8831  0E90  3000               	movlw	0
  8832  0E91  1803               	skipnc
  8833  0E92  3001               	movlw	1
  8834  0E93  07BF               	addwf	___ftadd@f1+1,f
  8835  0E94  3000               	movlw	0
  8836  0E95  1803               	skipnc
  8837  0E96  3001               	movlw	1
  8838  0E97  07C0               	addwf	___ftadd@f1+2,f
  8839  0E98                     l5896:	
  8840  0E98  1F48               	btfss	___ftadd@sign,6
  8841  0E99  2EAA               	goto	l5900
  8842  0E9A  30FF               	movlw	255
  8843  0E9B  06C1               	xorwf	___ftadd@f2,f
  8844  0E9C  30FF               	movlw	255
  8845  0E9D  06C2               	xorwf	___ftadd@f2+1,f
  8846  0E9E  30FF               	movlw	255
  8847  0E9F  06C3               	xorwf	___ftadd@f2+2,f
  8848  0EA0  3001               	movlw	1
  8849  0EA1  07C1               	addwf	___ftadd@f2,f
  8850  0EA2  3000               	movlw	0
  8851  0EA3  1803               	skipnc
  8852  0EA4  3001               	movlw	1
  8853  0EA5  07C2               	addwf	___ftadd@f2+1,f
  8854  0EA6  3000               	movlw	0
  8855  0EA7  1803               	skipnc
  8856  0EA8  3001               	movlw	1
  8857  0EA9  07C3               	addwf	___ftadd@f2+2,f
  8858  0EAA                     l5900:	
  8859  0EAA  01C8               	clrf	___ftadd@sign
  8860  0EAB  083E               	movf	___ftadd@f1,w
  8861  0EAC  07C1               	addwf	___ftadd@f2,f
  8862  0EAD  083F               	movf	___ftadd@f1+1,w
  8863  0EAE  3DC2               	addwfc	___ftadd@f2+1,f
  8864  0EAF  0840               	movf	___ftadd@f1+2,w
  8865  0EB0  3DC3               	addwfc	___ftadd@f2+2,f
  8866  0EB1  1FC3               	btfss	___ftadd@f2+2,7
  8867  0EB2  2EC5               	goto	l5910
  8868  0EB3  30FF               	movlw	255
  8869  0EB4  06C1               	xorwf	___ftadd@f2,f
  8870  0EB5  30FF               	movlw	255
  8871  0EB6  06C2               	xorwf	___ftadd@f2+1,f
  8872  0EB7  30FF               	movlw	255
  8873  0EB8  06C3               	xorwf	___ftadd@f2+2,f
  8874  0EB9  3001               	movlw	1
  8875  0EBA  07C1               	addwf	___ftadd@f2,f
  8876  0EBB  3000               	movlw	0
  8877  0EBC  1803               	skipnc
  8878  0EBD  3001               	movlw	1
  8879  0EBE  07C2               	addwf	___ftadd@f2+1,f
  8880  0EBF  3000               	movlw	0
  8881  0EC0  1803               	skipnc
  8882  0EC1  3001               	movlw	1
  8883  0EC2  07C3               	addwf	___ftadd@f2+2,f
  8884  0EC3  01C8               	clrf	___ftadd@sign
  8885  0EC4  0AC8               	incf	___ftadd@sign,f
  8886  0EC5                     l5910:	
  8887  0EC5  0841               	movf	___ftadd@f2,w
  8888  0EC6  00A0               	movwf	___ftpack@arg
  8889  0EC7  0842               	movf	___ftadd@f2+1,w
  8890  0EC8  00A1               	movwf	___ftpack@arg+1
  8891  0EC9  0843               	movf	___ftadd@f2+2,w
  8892  0ECA  00A2               	movwf	___ftpack@arg+2
  8893  0ECB  084A               	movf	___ftadd@exp1,w
  8894  0ECC  00C4               	movwf	??___ftadd
  8895  0ECD  0844               	movf	??___ftadd,w
  8896  0ECE  00A3               	movwf	___ftpack@exp
  8897  0ECF  0848               	movf	___ftadd@sign,w
  8898  0ED0  00C5               	movwf	??___ftadd+1
  8899  0ED1  0845               	movf	??___ftadd+1,w
  8900  0ED2  00A4               	movwf	___ftpack@sign
  8901  0ED3  3191  21C1         	fcall	___ftpack
  8902  0ED5  0020               	movlb	0	; select bank0
  8903  0ED6  0820               	movf	?___ftpack,w
  8904  0ED7  00BE               	movwf	?___ftadd
  8905  0ED8  0821               	movf	?___ftpack+1,w
  8906  0ED9  00BF               	movwf	?___ftadd+1
  8907  0EDA  0822               	movf	?___ftpack+2,w
  8908  0EDB  00C0               	movwf	?___ftadd+2
  8909  0EDC  0008               	return
  8910  0EDD                     __end_of___ftadd:	
  8911                           
  8912                           	psect	text35
  8913  1A30                     __ptext35:	
  8914 ;; *************** function _RF_RxDisable *****************
  8915 ;; Defined at:
  8916 ;;		line 191 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  rf              1    wreg     unsigned char 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  rf              1    4[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;		None               void
  8923 ;; Registers used:
  8924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;Total ram usage:        1 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    6
  8937 ;; This function calls:
  8938 ;;		_CC2500_WriteCommand
  8939 ;;		_RfPointSelect
  8940 ;;		_setINT_GO
  8941 ;; This function is called by:
  8942 ;;		_setRF_Main
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _RF_RxDisable
  8948  1A30                     _RF_RxDisable:	
  8949                           
  8950                           ;incstack = 0
  8951                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8952                           ;RF_RxDisable@rf stored from wreg
  8953  1A30  0020               	movlb	0	; select bank0
  8954  1A31  00A4               	movwf	RF_RxDisable@rf
  8955                           
  8956                           ;RF_Control_B1.c: 193: RfPointSelect(rf);
  8957  1A32  0824               	movf	RF_RxDisable@rf,w
  8958  1A33  31A5  25A0  319A   	fcall	_RfPointSelect
  8959                           
  8960                           ;RF_Control_B1.c: 195: if(RF->RxStatus)
  8961  1A36  087B               	movf	_RF,w
  8962  1A37  0086               	movwf	6
  8963  1A38  0187               	clrf	7
  8964  1A39  1D81               	btfss	1,3
  8965  1A3A  0008               	return
  8966                           
  8967                           ;RF_Control_B1.c: 196: {
  8968                           ;RF_Control_B1.c: 197: RF->RxStatus=0;
  8969  1A3B  087B               	movf	_RF,w
  8970  1A3C  0086               	movwf	6
  8971  1A3D  0187               	clrf	7
  8972  1A3E  1181               	bcf	1,3
  8973                           
  8974                           ;RF_Control_B1.c: 198: RF->ReceiveGO=0;
  8975  1A3F  087B               	movf	_RF,w
  8976  1A40  0086               	movwf	6
  8977  1A41  0187               	clrf	7
  8978  1A42  1081               	bcf	1,1
  8979                           
  8980                           ;RF_Control_B1.c: 199: RF->DebounceTime=0;
  8981  1A43  0A7B               	incf	_RF,w
  8982  1A44  0086               	movwf	6
  8983  1A45  0187               	clrf	7
  8984  1A46  0181               	clrf	1
  8985                           
  8986                           ;RF_Control_B1.c: 200: RF->Debounce=0;
  8987  1A47  087B               	movf	_RF,w
  8988  1A48  0086               	movwf	6
  8989  1A49  0187               	clrf	7
  8990  1A4A  1281               	bcf	1,5
  8991                           
  8992                           ;RF_Control_B1.c: 201: CC2500_WriteCommand(0x36);
  8993  1A4B  3036               	movlw	54
  8994  1A4C  31A6  26DC  319A   	fcall	_CC2500_WriteCommand
  8995                           
  8996                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x3A);
  8997  1A4F  303A               	movlw	58
  8998  1A50  31A6  26DC  319A   	fcall	_CC2500_WriteCommand
  8999                           
  9000                           ;RF_Control_B1.c: 203: setINT_GO(0);
  9001  1A53  3000               	movlw	0
  9002  1A54  31A5  254E         	fcall	_setINT_GO
  9003  1A56  0008               	return
  9004  1A57                     __end_of_RF_RxDisable:	
  9005                           
  9006                           	psect	text36
  9007  1DA5                     __ptext36:	
  9008 ;; *************** function _CC2500_TxData *****************
  9009 ;; Defined at:
  9010 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;		None               void
  9017 ;; Registers used:
  9018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        2 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    6
  9031 ;; This function calls:
  9032 ;;		_CC2500_WriteByte
  9033 ;;		_CC2500_WriteCommand
  9034 ;; This function is called by:
  9035 ;;		_setRF_Main
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _CC2500_TxData
  9041  1DA5                     _CC2500_TxData:	
  9042                           
  9043                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9044                           ;CC2500_B1.c: 34: RC4=0;
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9048  1DA5  0020               	movlb	0	; select bank0
  9049  1DA6  120E               	bcf	14,4	;volatile
  9050                           
  9051                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9052  1DA7  307F               	movlw	127
  9053  1DA8  00A4               	movwf	??_CC2500_TxData
  9054  1DA9  0824               	movf	??_CC2500_TxData,w
  9055  1DAA  0021               	movlb	1	; select bank1
  9056  1DAB  00BF               	movwf	_SPI0Buffer^(0+128)
  9057  1DAC                     l287:	
  9058                           ;CC2500_B1.c: 36: while(RC2==1);
  9059                           
  9060  1DAC  0020               	movlb	0	; select bank0
  9061  1DAD  190E               	btfsc	14,2	;volatile
  9062  1DAE  2DAC               	goto	l287
  9063                           
  9064                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9065  1DAF  31A7  27B5  319D   	fcall	_CC2500_WriteByte
  9066                           
  9067                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9068  1DB2  0021               	movlb	1	; select bank1
  9069  1DB3  0840               	movf	_Tx_Length^(0+128),w
  9070  1DB4  0020               	movlb	0	; select bank0
  9071  1DB5  00A4               	movwf	??_CC2500_TxData
  9072  1DB6  0824               	movf	??_CC2500_TxData,w
  9073  1DB7  0021               	movlb	1	; select bank1
  9074  1DB8  00BF               	movwf	_SPI0Buffer^(0+128)
  9075                           
  9076                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9077  1DB9  31A7  27B5  319D   	fcall	_CC2500_WriteByte
  9078                           
  9079                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9080  1DBC  0020               	movlb	0	; select bank0
  9081  1DBD  01A5               	clrf	CC2500_TxData@loop_e
  9082  1DBE                     l6620:	
  9083  1DBE  0021               	movlb	1	; select bank1
  9084  1DBF  0840               	movf	_Tx_Length^(0+128),w
  9085  1DC0  0020               	movlb	0	; select bank0
  9086  1DC1  0225               	subwf	CC2500_TxData@loop_e,w
  9087  1DC2  1803               	btfsc	3,0
  9088  1DC3  2DD6               	goto	l292
  9089                           
  9090                           ;CC2500_B1.c: 41: {
  9091                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9092  1DC4  0825               	movf	CC2500_TxData@loop_e,w
  9093  1DC5  3EA0               	addlw	_RF_Data& (0+255)
  9094  1DC6  0086               	movwf	6
  9095  1DC7  0187               	clrf	7
  9096  1DC8  0801               	movf	1,w
  9097  1DC9  00A4               	movwf	??_CC2500_TxData
  9098  1DCA  0824               	movf	??_CC2500_TxData,w
  9099  1DCB  0021               	movlb	1	; select bank1
  9100  1DCC  00BF               	movwf	_SPI0Buffer^(0+128)
  9101                           
  9102                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9103  1DCD  31A7  27B5  319D   	fcall	_CC2500_WriteByte
  9104  1DD0  3001               	movlw	1
  9105  1DD1  0020               	movlb	0	; select bank0
  9106  1DD2  00A4               	movwf	??_CC2500_TxData
  9107  1DD3  0824               	movf	??_CC2500_TxData,w
  9108  1DD4  07A5               	addwf	CC2500_TxData@loop_e,f
  9109  1DD5  2DBE               	goto	l6620
  9110  1DD6                     l292:	
  9111                           
  9112                           ;CC2500_B1.c: 44: }
  9113                           ;CC2500_B1.c: 45: RC4=1;
  9114  1DD6  160E               	bsf	14,4	;volatile
  9115                           
  9116                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9117  1DD7  3035               	movlw	53
  9118  1DD8  31A6  26DC  319D   	fcall	_CC2500_WriteCommand
  9119  1DDB                     l293:	
  9120                           ;CC2500_B1.c: 47: while(RB0==0);
  9121                           
  9122  1DDB  0020               	movlb	0	; select bank0
  9123  1DDC  1C0D               	btfss	13,0	;volatile
  9124  1DDD  2DDB               	goto	l293
  9125  1DDE                     l296:	
  9126                           ;CC2500_B1.c: 48: while(RB0==1);
  9127                           
  9128  1DDE  180D               	btfsc	13,0	;volatile
  9129  1DDF  2DDE               	goto	l296
  9130                           
  9131                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9132  1DE0  3036               	movlw	54
  9133  1DE1  31A6  26DC  319D   	fcall	_CC2500_WriteCommand
  9134                           
  9135                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9136  1DE4  303B               	movlw	59
  9137  1DE5  31A6  26DC         	fcall	_CC2500_WriteCommand
  9138                           
  9139                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9140  1DE7  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9141  1DE8  0008               	return
  9142  1DE9                     __end_of_CC2500_TxData:	
  9143                           
  9144                           	psect	text37
  9145  1222                     __ptext37:	
  9146 ;; *************** function _CC2500_RxData *****************
  9147 ;; Defined at:
  9148 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;		None               void
  9155 ;; Registers used:
  9156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;Total ram usage:        2 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    6
  9169 ;; This function calls:
  9170 ;;		_CC2500_ReadByte
  9171 ;;		_CC2500_ReadStatus
  9172 ;;		_CC2500_WriteByte
  9173 ;;		_CC2500_WriteCommand
  9174 ;;		_setRF_RxStatus
  9175 ;; This function is called by:
  9176 ;;		_setRF_Main
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           
  9181                           ;psect for function _CC2500_RxData
  9182  1222                     _CC2500_RxData:	
  9183                           
  9184                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9185                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9186                           
  9187                           ;incstack = 0
  9188                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9189  1222  0020               	movlb	0	; select bank0
  9190  1223  180D               	btfsc	13,0	;volatile
  9191  1224                     l303:	
  9192                           ;CC2500_B1.c: 63: {
  9193                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9194                           
  9195  1224  180D               	btfsc	13,0	;volatile
  9196  1225  2A24               	goto	l303
  9197                           
  9198                           ;CC2500_B1.c: 65: }
  9199                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9200  1226  303B               	movlw	59
  9201  1227  3198  20A2  3192   	fcall	_CC2500_ReadStatus
  9202                           
  9203                           ;CC2500_B1.c: 67: if(s_data != 0)
  9204  122A  0021               	movlb	1	; select bank1
  9205  122B  0843               	movf	_s_data^(0+128),w
  9206  122C  1903               	btfsc	3,2
  9207  122D  2A78               	goto	l8572
  9208                           
  9209                           ;CC2500_B1.c: 69: {
  9210                           ;CC2500_B1.c: 70: RC4=0;
  9211  122E  0020               	movlb	0	; select bank0
  9212  122F  120E               	bcf	14,4	;volatile
  9213                           
  9214                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9215  1230  30FF               	movlw	255
  9216  1231  00A4               	movwf	??_CC2500_RxData
  9217  1232  0824               	movf	??_CC2500_RxData,w
  9218  1233  0021               	movlb	1	; select bank1
  9219  1234  00BF               	movwf	_SPI0Buffer^(0+128)
  9220  1235                     l307:	
  9221                           ;CC2500_B1.c: 72: while(RC2==1);
  9222                           
  9223  1235  0020               	movlb	0	; select bank0
  9224  1236  190E               	btfsc	14,2	;volatile
  9225  1237  2A35               	goto	l307
  9226                           
  9227                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9228  1238  31A7  27B5  3192   	fcall	_CC2500_WriteByte
  9229                           
  9230                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9231  123B  3198  20BD  3192   	fcall	_CC2500_ReadByte
  9232                           
  9233                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9234  123E  0021               	movlb	1	; select bank1
  9235  123F  083F               	movf	_SPI0Buffer^(0+128),w
  9236  1240  0020               	movlb	0	; select bank0
  9237  1241  00A4               	movwf	??_CC2500_RxData
  9238  1242  0824               	movf	??_CC2500_RxData,w
  9239  1243  0021               	movlb	1	; select bank1
  9240  1244  00BE               	movwf	_Rx_Length^(0+128)
  9241                           
  9242                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9243  1245  0020               	movlb	0	; select bank0
  9244  1246  01A5               	clrf	CC2500_RxData@loop_f
  9245  1247                     l8558:	
  9246  1247  0021               	movlb	1	; select bank1
  9247  1248  083E               	movf	_Rx_Length^(0+128),w
  9248  1249  0020               	movlb	0	; select bank0
  9249  124A  0225               	subwf	CC2500_RxData@loop_f,w
  9250  124B  1803               	btfsc	3,0
  9251  124C  2A5F               	goto	l8560
  9252                           
  9253                           ;CC2500_B1.c: 78: {
  9254                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9255  124D  3198  20BD  3192   	fcall	_CC2500_ReadByte
  9256                           
  9257                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9258  1250  0021               	movlb	1	; select bank1
  9259  1251  083F               	movf	_SPI0Buffer^(0+128),w
  9260  1252  0020               	movlb	0	; select bank0
  9261  1253  00A4               	movwf	??_CC2500_RxData
  9262  1254  0825               	movf	CC2500_RxData@loop_f,w
  9263  1255  3EA0               	addlw	_RF_Data& (0+255)
  9264  1256  0086               	movwf	6
  9265  1257  0187               	clrf	7
  9266  1258  0824               	movf	??_CC2500_RxData,w
  9267  1259  0081               	movwf	1
  9268  125A  3001               	movlw	1
  9269  125B  00A4               	movwf	??_CC2500_RxData
  9270  125C  0824               	movf	??_CC2500_RxData,w
  9271  125D  07A5               	addwf	CC2500_RxData@loop_f,f
  9272  125E  2A47               	goto	l8558
  9273  125F                     l8560:	
  9274                           
  9275                           ;CC2500_B1.c: 81: }
  9276                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9277  125F  3198  20BD  3192   	fcall	_CC2500_ReadByte
  9278                           
  9279                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9280  1262  0021               	movlb	1	; select bank1
  9281  1263  083F               	movf	_SPI0Buffer^(0+128),w
  9282  1264  0020               	movlb	0	; select bank0
  9283  1265  00A4               	movwf	??_CC2500_RxData
  9284  1266  0824               	movf	??_CC2500_RxData,w
  9285  1267  0021               	movlb	1	; select bank1
  9286  1268  00BD               	movwf	_RSSI^(0+128)
  9287                           
  9288                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9289  1269  3198  20BD  3192   	fcall	_CC2500_ReadByte
  9290                           
  9291                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9292  126C  0021               	movlb	1	; select bank1
  9293  126D  083F               	movf	_SPI0Buffer^(0+128),w
  9294  126E  0020               	movlb	0	; select bank0
  9295  126F  00A4               	movwf	??_CC2500_RxData
  9296  1270  0824               	movf	??_CC2500_RxData,w
  9297  1271  0021               	movlb	1	; select bank1
  9298  1272  00B7               	movwf	_CRC^(0+128)
  9299                           
  9300                           ;CC2500_B1.c: 86: RC4=1;
  9301  1273  0020               	movlb	0	; select bank0
  9302  1274  160E               	bsf	14,4	;volatile
  9303                           
  9304                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9305  1275  0021               	movlb	1	; select bank1
  9306  1276  1BB7               	btfsc	_CRC^(0+128),7
  9307                           
  9308                           ;CC2500_B1.c: 88: Receive_OK=1;
  9309  1277  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9310  1278                     l8572:	
  9311                           
  9312                           ;CC2500_B1.c: 89: }
  9313                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9314  1278  3036               	movlw	54
  9315  1279  31A6  26DC  3192   	fcall	_CC2500_WriteCommand
  9316                           
  9317                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9318  127C  303A               	movlw	58
  9319  127D  31A6  26DC  3192   	fcall	_CC2500_WriteCommand
  9320                           
  9321                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9322  1280  0020               	movlb	0	; select bank0
  9323  1281  01A2               	clrf	setRF_RxStatus@command
  9324  1282  3001               	movlw	1
  9325  1283  31A6  2684         	fcall	_setRF_RxStatus
  9326  1285  0008               	return
  9327  1286                     __end_of_CC2500_RxData:	
  9328                           
  9329                           	psect	text38
  9330  2684                     __ptext38:	
  9331 ;; *************** function _setRF_RxStatus *****************
  9332 ;; Defined at:
  9333 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  rf              1    wreg     unsigned char 
  9336 ;;  command         1    2[BANK0 ] unsigned char 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  rf              1    3[BANK0 ] unsigned char 
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        2 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    5
  9355 ;; This function calls:
  9356 ;;		_RfPointSelect
  9357 ;; This function is called by:
  9358 ;;		_CC2500_RxData
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _setRF_RxStatus
  9364  2684                     _setRF_RxStatus:	
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9368                           ;setRF_RxStatus@rf stored from wreg
  9369  2684  0020               	movlb	0	; select bank0
  9370  2685  00A3               	movwf	setRF_RxStatus@rf
  9371                           
  9372                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9373  2686  0823               	movf	setRF_RxStatus@rf,w
  9374  2687  31A5  25A0         	fcall	_RfPointSelect
  9375                           
  9376                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9377  2689  087B               	movf	_RF,w
  9378  268A  0086               	movwf	6
  9379  268B  0187               	clrf	7
  9380  268C  0020               	movlb	0	; select bank0
  9381  268D  0822               	movf	setRF_RxStatus@command,w
  9382  268E  1181               	bcf	1,3
  9383  268F  1D03               	skipz
  9384  2690  1581               	bsf	1,3
  9385  2691  0008               	return
  9386  2692                     __end_of_setRF_RxStatus:	
  9387                           
  9388                           	psect	text39
  9389  18A2                     __ptext39:	
  9390 ;; *************** function _CC2500_ReadStatus *****************
  9391 ;; Defined at:
  9392 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  status_addr     1    wreg     unsigned char 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        2 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    5
  9413 ;; This function calls:
  9414 ;;		_CC2500_ReadByte
  9415 ;;		_CC2500_WriteByte
  9416 ;; This function is called by:
  9417 ;;		_CC2500_RxData
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _CC2500_ReadStatus
  9423  18A2                     _CC2500_ReadStatus:	
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9427                           ;CC2500_ReadStatus@status_addr stored from wreg
  9428  18A2  0020               	movlb	0	; select bank0
  9429  18A3  00A3               	movwf	CC2500_ReadStatus@status_addr
  9430                           
  9431                           ;CC2500_B1.c: 269: RC4=0;
  9432  18A4  120E               	bcf	14,4	;volatile
  9433                           
  9434                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9435  18A5  0823               	movf	CC2500_ReadStatus@status_addr,w
  9436  18A6  3EC0               	addlw	192
  9437  18A7  00A2               	movwf	??_CC2500_ReadStatus
  9438  18A8  0822               	movf	??_CC2500_ReadStatus,w
  9439  18A9  0021               	movlb	1	; select bank1
  9440  18AA  00BF               	movwf	_SPI0Buffer^(0+128)
  9441  18AB                     l383:	
  9442                           ;CC2500_B1.c: 272: while(RC2==1);
  9443                           
  9444  18AB  0020               	movlb	0	; select bank0
  9445  18AC  190E               	btfsc	14,2	;volatile
  9446  18AD  28AB               	goto	l383
  9447                           
  9448                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9449  18AE  31A7  27B5  3198   	fcall	_CC2500_WriteByte
  9450                           
  9451                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9452  18B1  3198  20BD         	fcall	_CC2500_ReadByte
  9453                           
  9454                           ;CC2500_B1.c: 276: RC4=1;
  9455  18B3  0020               	movlb	0	; select bank0
  9456  18B4  160E               	bsf	14,4	;volatile
  9457                           
  9458                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9459  18B5  0021               	movlb	1	; select bank1
  9460  18B6  083F               	movf	_SPI0Buffer^(0+128),w
  9461  18B7  0020               	movlb	0	; select bank0
  9462  18B8  00A2               	movwf	??_CC2500_ReadStatus
  9463  18B9  0822               	movf	??_CC2500_ReadStatus,w
  9464  18BA  0021               	movlb	1	; select bank1
  9465  18BB  00C3               	movwf	_s_data^(0+128)
  9466  18BC  0008               	return
  9467  18BD                     __end_of_CC2500_ReadStatus:	
  9468                           
  9469                           	psect	text40
  9470  18BD                     __ptext40:	
  9471 ;; *************** function _CC2500_ReadByte *****************
  9472 ;; Defined at:
  9473 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;Total ram usage:        2 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    4
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_CC2500_RxData
  9498 ;;		_CC2500_ReadStatus
  9499 ;;		_CC2500_ReadREG
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _CC2500_ReadByte
  9505  18BD                     _CC2500_ReadByte:	
  9506                           
  9507                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9508                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9509                           
  9510                           ;incstack = 0
  9511                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9512  18BD  0020               	movlb	0	; select bank0
  9513  18BE  01A1               	clrf	CC2500_ReadByte@loop_b
  9514  18BF                     L9:	
  9515  18BF  3008               	movlw	8
  9516  18C0  0221               	subwf	CC2500_ReadByte@loop_b,w
  9517  18C1  1803               	btfsc	3,0
  9518  18C2  0008               	return
  9519                           
  9520                           ;CC2500_B1.c: 214: {
  9521                           ;CC2500_B1.c: 215: RC1=1;
  9522  18C3  148E               	bsf	14,1	;volatile
  9523                           
  9524                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9525  18C4  1003               	clrc
  9526  18C5  0021               	movlb	1	; select bank1
  9527  18C6  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9528                           
  9529                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9530  18C7  0020               	movlb	0	; select bank0
  9531  18C8  1D0E               	btfss	14,2	;volatile
  9532  18C9  28CD               	goto	l6360
  9533                           
  9534                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9535  18CA  0021               	movlb	1	; select bank1
  9536  18CB  143F               	bsf	_SPI0Buffer^(0+128),0
  9537  18CC  28D3               	goto	l6362
  9538  18CD                     l6360:	
  9539                           
  9540                           ;CC2500_B1.c: 219: else
  9541                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9542  18CD  30FE               	movlw	254
  9543  18CE  0020               	movlb	0	; select bank0
  9544  18CF  00A0               	movwf	??_CC2500_ReadByte
  9545  18D0  0820               	movf	??_CC2500_ReadByte,w
  9546  18D1  0021               	movlb	1	; select bank1
  9547  18D2  05BF               	andwf	_SPI0Buffer^(0+128),f
  9548  18D3                     l6362:	
  9549                           
  9550                           ;CC2500_B1.c: 221: RC1=0;
  9551  18D3  0020               	movlb	0	; select bank0
  9552  18D4  108E               	bcf	14,1	;volatile
  9553  18D5  3001               	movlw	1
  9554  18D6  00A0               	movwf	??_CC2500_ReadByte
  9555  18D7  0820               	movf	??_CC2500_ReadByte,w
  9556  18D8  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9557  18D9  28BF               	goto	L9
  9558  18DA                     __end_of_CC2500_ReadByte:	
  9559                           
  9560                           	psect	text41
  9561  24FF                     __ptext41:	
  9562 ;; *************** function _RF_Initialization *****************
  9563 ;; Defined at:
  9564 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;		None
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;		None
  9569 ;; Return value:  Size  Location     Type
  9570 ;;		None               void
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        0 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    5
  9585 ;; This function calls:
  9586 ;;		_setRF_Initialization
  9587 ;; This function is called by:
  9588 ;;		_main
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           
  9593                           ;psect for function _RF_Initialization
  9594  24FF                     _RF_Initialization:	
  9595                           
  9596                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9600  24FF  3001               	movlw	1
  9601  2500  3198  2067         	fcall	_setRF_Initialization
  9602  2502  0008               	return
  9603  2503                     __end_of_RF_Initialization:	
  9604                           
  9605                           	psect	text42
  9606  1867                     __ptext42:	
  9607 ;; *************** function _setRF_Initialization *****************
  9608 ;; Defined at:
  9609 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  rf              1    wreg     unsigned char 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  rf              1    0[COMMON] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;		None               void
  9616 ;; Registers used:
  9617 ;;		wreg
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;Total ram usage:        1 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    4
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_RF_Initialization
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           
  9638                           ;psect for function _setRF_Initialization
  9639  1867                     _setRF_Initialization:	
  9640                           
  9641                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9642                           
  9643                           ;incstack = 0
  9644                           ; Regs used in _setRF_Initialization: [wreg]
  9645  1867  3015               	movlw	21
  9646  1868  0020               	movlb	0	; select bank0
  9647  1869  00A0               	movwf	??_setRF_Initialization
  9648  186A  0820               	movf	??_setRF_Initialization,w
  9649  186B  0021               	movlb	1	; select bank1
  9650  186C  00C0               	movwf	_Tx_Length^(0+128)
  9651  186D  0008               	return
  9652  186E                     __end_of_setRF_Initialization:	
  9653                           
  9654                           	psect	text43
  9655  24E2                     __ptext43:	
  9656 ;; *************** function _PowerFault_Main *****************
  9657 ;; Defined at:
  9658 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:   10
  9679 ;; This function calls:
  9680 ;;		_setPowerFault_Main
  9681 ;; This function is called by:
  9682 ;;		_main
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _PowerFault_Main
  9688  24E2                     _PowerFault_Main:	
  9689                           
  9690                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9694  24E2  318B  23FE         	fcall	_setPowerFault_Main
  9695  24E4  0008               	return
  9696  24E5                     __end_of_PowerFault_Main:	
  9697                           
  9698                           	psect	text44
  9699  0BFE                     __ptext44:	
  9700 ;; *************** function _setPowerFault_Main *****************
  9701 ;; Defined at:
  9702 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;		None               void
  9709 ;; Registers used:
  9710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;Total ram usage:        2 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    9
  9723 ;; This function calls:
  9724 ;;		_getLoad_Safe
  9725 ;;		_getTemp_Safe
  9726 ;;		_setPowerFault_Exceptions
  9727 ;; This function is called by:
  9728 ;;		_PowerFault_Main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _setPowerFault_Main
  9734  0BFE                     _setPowerFault_Main:	
  9735                           
  9736                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9737                           
  9738                           ;incstack = 0
  9739                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9740  0BFE  087A               	movf	_PF,w
  9741  0BFF  0086               	movwf	6
  9742  0C00  0187               	clrf	7
  9743  0C01  1C01               	btfss	1,0
  9744  0C02  0008               	return
  9745                           
  9746                           ;PowerFault_B1.c: 64: {
  9747                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9748  0C03  087A               	movf	_PF,w
  9749  0C04  0086               	movwf	6
  9750  0C05  0187               	clrf	7
  9751  0C06  1981               	btfsc	1,3
  9752  0C07  2C46               	goto	l9064
  9753                           
  9754                           ;PowerFault_B1.c: 66: {
  9755                           ;PowerFault_B1.c: 67: PF->Time++;
  9756  0C08  087A               	movf	_PF,w
  9757  0C09  3E06               	addlw	6
  9758  0C0A  0086               	movwf	6
  9759  0C0B  0187               	clrf	7
  9760  0C0C  3001               	movlw	1
  9761  0C0D  0781               	addwf	1,f
  9762  0C0E  3141               	addfsr 1,1
  9763  0C0F  1803               	skipnc
  9764  0C10  0A81               	incf	1,f
  9765                           
  9766                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9767  0C11  087A               	movf	_PF,w
  9768  0C12  3E06               	addlw	6
  9769  0C13  0086               	movwf	6
  9770  0C14  0187               	clrf	7
  9771  0C15  3F40               	moviw [0]fsr1
  9772  0C16  0020               	movlb	0	; select bank0
  9773  0C17  00AD               	movwf	??_setPowerFault_Main
  9774  0C18  3F41               	moviw [1]fsr1
  9775  0C19  00AE               	movwf	??_setPowerFault_Main+1
  9776  0C1A  3002               	movlw	2
  9777  0C1B  022E               	subwf	??_setPowerFault_Main+1,w
  9778  0C1C  30BC               	movlw	188
  9779  0C1D  1903               	skipnz
  9780  0C1E  022D               	subwf	??_setPowerFault_Main,w
  9781  0C1F  1C03               	skipc
  9782  0C20  0008               	return
  9783                           
  9784                           ;PowerFault_B1.c: 69: {
  9785                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9786  0C21  31A5  25C1  318B   	fcall	_getLoad_Safe
  9787  0C24  3A00               	xorlw	0
  9788  0C25  1903               	skipnz
  9789  0C26  2C3D               	goto	l9062
  9790  0C27  31A5  2537  318B   	fcall	_getTemp_Safe
  9791  0C2A  3A00               	xorlw	0
  9792  0C2B  1903               	skipnz
  9793  0C2C  2C3D               	goto	l9062
  9794                           
  9795                           ;PowerFault_B1.c: 71: {
  9796                           ;PowerFault_B1.c: 72: PF->Time=0;
  9797  0C2D  087A               	movf	_PF,w
  9798  0C2E  3E06               	addlw	6
  9799  0C2F  0086               	movwf	6
  9800  0C30  0187               	clrf	7
  9801  0C31  3000               	movlw	0
  9802  0C32  3FC0               	movwi [0]fsr1
  9803  0C33  3FC1               	movwi [1]fsr1
  9804                           
  9805                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9806  0C34  087A               	movf	_PF,w
  9807  0C35  0086               	movwf	6
  9808  0C36  0187               	clrf	7
  9809  0C37  1581               	bsf	1,3
  9810                           
  9811                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9812  0C38  087A               	movf	_PF,w
  9813  0C39  0086               	movwf	6
  9814  0C3A  0187               	clrf	7
  9815  0C3B  1101               	bcf	1,2
  9816                           
  9817                           ;PowerFault_B1.c: 75: }
  9818  0C3C  0008               	return
  9819  0C3D                     l9062:	
  9820                           
  9821                           ;PowerFault_B1.c: 76: else
  9822                           ;PowerFault_B1.c: 77: {
  9823                           ;PowerFault_B1.c: 78: PF->Time=700;
  9824  0C3D  087A               	movf	_PF,w
  9825  0C3E  3E06               	addlw	6
  9826  0C3F  0086               	movwf	6
  9827  0C40  0187               	clrf	7
  9828  0C41  30BC               	movlw	188
  9829  0C42  3FC0               	movwi [0]fsr1
  9830  0C43  3002               	movlw	2
  9831  0C44  3FC1               	movwi [1]fsr1
  9832                           
  9833                           ;PowerFault_B1.c: 79: }
  9834                           ;PowerFault_B1.c: 80: }
  9835                           ;PowerFault_B1.c: 81: }
  9836  0C45  0008               	return
  9837  0C46                     l9064:	
  9838                           
  9839                           ;PowerFault_B1.c: 82: else
  9840                           ;PowerFault_B1.c: 83: {
  9841                           ;PowerFault_B1.c: 84: PF->Time++;
  9842  0C46  087A               	movf	_PF,w
  9843  0C47  3E06               	addlw	6
  9844  0C48  0086               	movwf	6
  9845  0C49  0187               	clrf	7
  9846  0C4A  3001               	movlw	1
  9847  0C4B  0781               	addwf	1,f
  9848  0C4C  3141               	addfsr 1,1
  9849  0C4D  1803               	skipnc
  9850  0C4E  0A81               	incf	1,f
  9851                           
  9852                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9853  0C4F  087A               	movf	_PF,w
  9854  0C50  3E06               	addlw	6
  9855  0C51  0086               	movwf	6
  9856  0C52  0187               	clrf	7
  9857  0C53  3F40               	moviw [0]fsr1
  9858  0C54  0020               	movlb	0	; select bank0
  9859  0C55  00AD               	movwf	??_setPowerFault_Main
  9860  0C56  3F41               	moviw [1]fsr1
  9861  0C57  00AE               	movwf	??_setPowerFault_Main+1
  9862  0C58  3000               	movlw	0
  9863  0C59  022E               	subwf	??_setPowerFault_Main+1,w
  9864  0C5A  3002               	movlw	2
  9865  0C5B  1903               	skipnz
  9866  0C5C  022D               	subwf	??_setPowerFault_Main,w
  9867  0C5D  1C03               	skipc
  9868  0C5E  0008               	return
  9869                           
  9870                           ;PowerFault_B1.c: 86: {
  9871                           ;PowerFault_B1.c: 87: PF->Time=0;
  9872  0C5F  087A               	movf	_PF,w
  9873  0C60  3E06               	addlw	6
  9874  0C61  0086               	movwf	6
  9875  0C62  0187               	clrf	7
  9876  0C63  3000               	movlw	0
  9877  0C64  3FC0               	movwi [0]fsr1
  9878  0C65  3FC1               	movwi [1]fsr1
  9879                           
  9880                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9881  0C66  087A               	movf	_PF,w
  9882  0C67  0086               	movwf	6
  9883  0C68  0187               	clrf	7
  9884  0C69  1181               	bcf	1,3
  9885                           
  9886                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9887  0C6A  087A               	movf	_PF,w
  9888  0C6B  0086               	movwf	6
  9889  0C6C  0187               	clrf	7
  9890  0C6D  1C81               	btfss	1,1
  9891  0C6E  2CA5               	goto	l9084
  9892                           
  9893                           ;PowerFault_B1.c: 91: {
  9894                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9895  0C6F  0A7A               	incf	_PF,w
  9896  0C70  0086               	movwf	6
  9897  0C71  0187               	clrf	7
  9898  0C72  3F40               	moviw [0]fsr1
  9899  0C73  00AD               	movwf	??_setPowerFault_Main
  9900  0C74  3F41               	moviw [1]fsr1
  9901  0C75  00AE               	movwf	??_setPowerFault_Main+1
  9902  0C76  3001               	movlw	1
  9903  0C77  022E               	subwf	??_setPowerFault_Main+1,w
  9904  0C78  3091               	movlw	145
  9905  0C79  1903               	skipnz
  9906  0C7A  022D               	subwf	??_setPowerFault_Main,w
  9907  0C7B  1803               	skipnc
  9908  0C7C  2CDC               	goto	l9096
  9909  0C7D  0A7A               	incf	_PF,w
  9910  0C7E  0086               	movwf	6
  9911  0C7F  0187               	clrf	7
  9912  0C80  3F40               	moviw [0]fsr1
  9913  0C81  00AD               	movwf	??_setPowerFault_Main
  9914  0C82  3F41               	moviw [1]fsr1
  9915  0C83  00AE               	movwf	??_setPowerFault_Main+1
  9916  0C84  3000               	movlw	0
  9917  0C85  022E               	subwf	??_setPowerFault_Main+1,w
  9918  0C86  30C8               	movlw	200
  9919  0C87  1903               	skipnz
  9920  0C88  022D               	subwf	??_setPowerFault_Main,w
  9921  0C89  1C03               	skipc
  9922  0C8A  2CDC               	goto	l9096
  9923                           
  9924                           ;PowerFault_B1.c: 93: {
  9925                           ;PowerFault_B1.c: 94: PF->Count++;
  9926  0C8B  3001               	movlw	1
  9927  0C8C  00AD               	movwf	??_setPowerFault_Main
  9928  0C8D  087A               	movf	_PF,w
  9929  0C8E  3E05               	addlw	5
  9930  0C8F  0086               	movwf	6
  9931  0C90  0187               	clrf	7
  9932  0C91  082D               	movf	??_setPowerFault_Main,w
  9933  0C92  0781               	addwf	1,f
  9934                           
  9935                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9936  0C93  087A               	movf	_PF,w
  9937  0C94  3E05               	addlw	5
  9938  0C95  0086               	movwf	6
  9939  0C96  0187               	clrf	7
  9940  0C97  3002               	movlw	2
  9941  0C98  0201               	subwf	1,w
  9942  0C99  1C03               	skipc
  9943  0C9A  2CE1               	goto	l9098
  9944                           
  9945                           ;PowerFault_B1.c: 96: {
  9946                           ;PowerFault_B1.c: 97: PF->Count=0;
  9947  0C9B  087A               	movf	_PF,w
  9948  0C9C  3E05               	addlw	5
  9949  0C9D  0086               	movwf	6
  9950  0C9E  0187               	clrf	7
  9951  0C9F  0181               	clrf	1
  9952                           
  9953                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9954  0CA0  3000               	movlw	0
  9955  0CA1  319C  24A2  318B   	fcall	_setPowerFault_Exceptions
  9956                           
  9957                           ;PowerFault_B1.c: 99: }
  9958                           ;PowerFault_B1.c: 100: }
  9959  0CA4  2CE1               	goto	l9098
  9960  0CA5                     l9084:	
  9961                           ;PowerFault_B1.c: 104: }
  9962                           ;PowerFault_B1.c: 105: }
  9963                           
  9964                           ;PowerFault_B1.c: 101: else
  9965                           ;PowerFault_B1.c: 102: {
  9966                           ;PowerFault_B1.c: 103: PF->Count=0;
  9967                           
  9968                           
  9969                           ;PowerFault_B1.c: 106: else
  9970                           ;PowerFault_B1.c: 107: {
  9971                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9972  0CA5  0A7A               	incf	_PF,w
  9973  0CA6  0086               	movwf	6
  9974  0CA7  0187               	clrf	7
  9975  0CA8  3F40               	moviw [0]fsr1
  9976  0CA9  0020               	movlb	0	; select bank0
  9977  0CAA  00AD               	movwf	??_setPowerFault_Main
  9978  0CAB  3F41               	moviw [1]fsr1
  9979  0CAC  00AE               	movwf	??_setPowerFault_Main+1
  9980  0CAD  3001               	movlw	1
  9981  0CAE  022E               	subwf	??_setPowerFault_Main+1,w
  9982  0CAF  3090               	movlw	144
  9983  0CB0  1903               	skipnz
  9984  0CB1  022D               	subwf	??_setPowerFault_Main,w
  9985  0CB2  1803               	skipnc
  9986  0CB3  2CC2               	goto	l9088
  9987  0CB4  0A7A               	incf	_PF,w
  9988  0CB5  0086               	movwf	6
  9989  0CB6  0187               	clrf	7
  9990  0CB7  3F40               	moviw [0]fsr1
  9991  0CB8  00AD               	movwf	??_setPowerFault_Main
  9992  0CB9  3F41               	moviw [1]fsr1
  9993  0CBA  00AE               	movwf	??_setPowerFault_Main+1
  9994  0CBB  3000               	movlw	0
  9995  0CBC  022E               	subwf	??_setPowerFault_Main+1,w
  9996  0CBD  30D3               	movlw	211
  9997  0CBE  1903               	skipnz
  9998  0CBF  022D               	subwf	??_setPowerFault_Main,w
  9999  0CC0  1803               	skipnc
 10000  0CC1  2CDC               	goto	l9096
 10001  0CC2                     l9088:	
 10002                           
 10003                           ;PowerFault_B1.c: 109: {
 10004                           ;PowerFault_B1.c: 110: PF->Count++;
 10005  0CC2  3001               	movlw	1
 10006  0CC3  00AD               	movwf	??_setPowerFault_Main
 10007  0CC4  087A               	movf	_PF,w
 10008  0CC5  3E05               	addlw	5
 10009  0CC6  0086               	movwf	6
 10010  0CC7  0187               	clrf	7
 10011  0CC8  082D               	movf	??_setPowerFault_Main,w
 10012  0CC9  0781               	addwf	1,f
 10013                           
 10014                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10015  0CCA  087A               	movf	_PF,w
 10016  0CCB  3E05               	addlw	5
 10017  0CCC  0086               	movwf	6
 10018  0CCD  0187               	clrf	7
 10019  0CCE  3002               	movlw	2
 10020  0CCF  0201               	subwf	1,w
 10021  0CD0  1C03               	skipc
 10022  0CD1  2CE1               	goto	l9098
 10023                           
 10024                           ;PowerFault_B1.c: 112: {
 10025                           ;PowerFault_B1.c: 113: PF->Count=0;
 10026  0CD2  087A               	movf	_PF,w
 10027  0CD3  3E05               	addlw	5
 10028  0CD4  0086               	movwf	6
 10029  0CD5  0187               	clrf	7
 10030  0CD6  0181               	clrf	1
 10031                           
 10032                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10033  0CD7  3001               	movlw	1
 10034  0CD8  319C  24A2  318B   	fcall	_setPowerFault_Exceptions
 10035                           
 10036                           ;PowerFault_B1.c: 115: }
 10037                           ;PowerFault_B1.c: 116: }
 10038  0CDB  2CE1               	goto	l9098
 10039  0CDC                     l9096:	
 10040                           
 10041                           ;PowerFault_B1.c: 117: else
 10042                           ;PowerFault_B1.c: 118: {
 10043                           ;PowerFault_B1.c: 119: PF->Count=0;
 10044  0CDC  087A               	movf	_PF,w
 10045  0CDD  3E05               	addlw	5
 10046  0CDE  0086               	movwf	6
 10047  0CDF  0187               	clrf	7
 10048  0CE0  0181               	clrf	1
 10049  0CE1                     l9098:	
 10050                           
 10051                           ;PowerFault_B1.c: 120: }
 10052                           ;PowerFault_B1.c: 122: }
 10053                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10054  0CE1  087A               	movf	_PF,w
 10055  0CE2  0086               	movwf	6
 10056  0CE3  0187               	clrf	7
 10057  0CE4  1881               	btfsc	1,1
 10058  0CE5  2CEA               	goto	l2306
 10059                           
 10060                           ;PowerFault_B1.c: 124: {
 10061                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10062  0CE6  087A               	movf	_PF,w
 10063  0CE7  0086               	movwf	6
 10064  0CE8  0187               	clrf	7
 10065  0CE9  1501               	bsf	1,2
 10066  0CEA                     l2306:	
 10067                           
 10068                           ;PowerFault_B1.c: 126: }
 10069                           ;PowerFault_B1.c: 127: PF->AD=0;
 10070  0CEA  0A7A               	incf	_PF,w
 10071  0CEB  0086               	movwf	6
 10072  0CEC  0187               	clrf	7
 10073  0CED  3000               	movlw	0
 10074  0CEE  3FC0               	movwi [0]fsr1
 10075  0CEF  3FC1               	movwi [1]fsr1
 10076  0CF0  0008               	return
 10077  0CF1                     __end_of_setPowerFault_Main:	
 10078                           
 10079                           	psect	text45
 10080  1CA2                     __ptext45:	
 10081 ;; *************** function _setPowerFault_Exceptions *****************
 10082 ;; Defined at:
 10083 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  command         1    wreg     unsigned char 
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  command         1   12[BANK0 ] unsigned char 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;		None               void
 10090 ;; Registers used:
 10091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        2 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    8
 10104 ;; This function calls:
 10105 ;;		_DimmerLights_Exceptions
 10106 ;;		_setLED
 10107 ;;		_setRF_Enable
 10108 ;;		_setSw_Enable
 10109 ;; This function is called by:
 10110 ;;		_setPowerFault_Main
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           
 10115                           ;psect for function _setPowerFault_Exceptions
 10116  1CA2                     _setPowerFault_Exceptions:	
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10120                           ;setPowerFault_Exceptions@command stored from wreg
 10121  1CA2  0020               	movlb	0	; select bank0
 10122  1CA3  00AC               	movwf	setPowerFault_Exceptions@command
 10123                           
 10124                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10125  1CA4  087A               	movf	_PF,w
 10126  1CA5  0086               	movwf	6
 10127  1CA6  0187               	clrf	7
 10128  1CA7  082C               	movf	setPowerFault_Exceptions@command,w
 10129  1CA8  1081               	bcf	1,1
 10130  1CA9  1D03               	skipz
 10131  1CAA  1481               	bsf	1,1
 10132                           
 10133                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10134  1CAB  092C               	comf	setPowerFault_Exceptions@command,w
 10135  1CAC  3901               	andlw	1
 10136  1CAD  00AB               	movwf	??_setPowerFault_Exceptions
 10137  1CAE  087A               	movf	_PF,w
 10138  1CAF  0086               	movwf	6
 10139  1CB0  0187               	clrf	7
 10140  1CB1  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10141  1CB2  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10142  1CB3  0801               	movf	1,w
 10143  1CB4  062B               	xorwf	??_setPowerFault_Exceptions,w
 10144  1CB5  39FB               	andlw	-5
 10145  1CB6  062B               	xorwf	??_setPowerFault_Exceptions,w
 10146  1CB7  0081               	movwf	1
 10147                           
 10148                           ;PowerFault_B1.c: 137: if(command == 1)
 10149  1CB8  082C               	movf	setPowerFault_Exceptions@command,w
 10150  1CB9  3A01               	xorlw	1
 10151  1CBA  1D03               	skipz
 10152  1CBB  2CC7               	goto	l2310
 10153                           
 10154                           ;PowerFault_B1.c: 138: {
 10155                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10156  1CBC  3003               	movlw	3
 10157  1CBD  3190  2052  319C   	fcall	_DimmerLights_Exceptions
 10158                           
 10159                           ;PowerFault_B1.c: 141: setLED(2,1);
 10160  1CC0  0020               	movlb	0	; select bank0
 10161  1CC1  01A2               	clrf	setLED@command
 10162  1CC2  0AA2               	incf	setLED@command,f
 10163  1CC3  3002               	movlw	2
 10164  1CC4  3191  2163  319C   	fcall	_setLED
 10165  1CC7                     l2310:	
 10166                           
 10167                           ;PowerFault_B1.c: 143: }
 10168                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10169  1CC7  0020               	movlb	0	; select bank0
 10170  1CC8  082C               	movf	setPowerFault_Exceptions@command,w
 10171  1CC9  3E0A               	addlw	10
 10172  1CCA  00AB               	movwf	??_setPowerFault_Exceptions
 10173  1CCB  082B               	movf	??_setPowerFault_Exceptions,w
 10174  1CCC  00A2               	movwf	setLED@command
 10175  1CCD  3063               	movlw	99
 10176  1CCE  3191  2163  319C   	fcall	_setLED
 10177                           
 10178                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10179  1CD1  0020               	movlb	0	; select bank0
 10180  1CD2  092C               	comf	setPowerFault_Exceptions@command,w
 10181  1CD3  3901               	andlw	1
 10182  1CD4  31A6  26CD  319C   	fcall	_setSw_Enable
 10183                           
 10184                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10185  1CD7  0020               	movlb	0	; select bank0
 10186  1CD8  092C               	comf	setPowerFault_Exceptions@command,w
 10187  1CD9  3901               	andlw	1
 10188  1CDA  00AB               	movwf	??_setPowerFault_Exceptions
 10189  1CDB  082B               	movf	??_setPowerFault_Exceptions,w
 10190  1CDC  00A2               	movwf	setRF_Enable@command
 10191  1CDD  3001               	movlw	1
 10192  1CDE  319A  2281         	fcall	_setRF_Enable
 10193  1CE0  0008               	return
 10194  1CE1                     __end_of_setPowerFault_Exceptions:	
 10195                           
 10196                           	psect	text46
 10197  25C1                     __ptext46:	
 10198 ;; *************** function _getLoad_Safe *****************
 10199 ;; Defined at:
 10200 ;;		line 301 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      unsigned char 
 10207 ;; Registers used:
 10208 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;Total ram usage:        1 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    4
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_setTemp_Main
 10225 ;;		_setPowerFault_Main
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           
 10230                           ;psect for function _getLoad_Safe
 10231  25C1                     _getLoad_Safe:	
 10232                           
 10233                           ;OverLoad_B1.c: 303: return Load->Safe;
 10234                           
 10235                           ;incstack = 0
 10236                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10237  25C1  0020               	movlb	0	; select bank0
 10238  25C2  086E               	movf	_Load,w
 10239  25C3  0086               	movwf	6
 10240  25C4  3002               	movlw	2	; select bank4/5
 10241  25C5  0087               	movwf	7
 10242  25C6  0C01               	rrf	1,w
 10243  25C7  00A0               	movwf	??_getLoad_Safe
 10244  25C8  0CA0               	rrf	??_getLoad_Safe,f
 10245  25C9  0C20               	rrf	??_getLoad_Safe,w
 10246  25CA  3901               	andlw	1
 10247  25CB  0008               	return
 10248  25CC                     __end_of_getLoad_Safe:	
 10249                           
 10250                           	psect	text47
 10251  24DF                     __ptext47:	
 10252 ;; *************** function _PowerFault_Initialization *****************
 10253 ;; Defined at:
 10254 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;		None               void
 10261 ;; Registers used:
 10262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    5
 10275 ;; This function calls:
 10276 ;;		_setPowerFault_Initialization
 10277 ;; This function is called by:
 10278 ;;		_main
 10279 ;; This function uses a non-reentrant model
 10280 ;;
 10281                           
 10282                           
 10283                           ;psect for function _PowerFault_Initialization
 10284  24DF                     _PowerFault_Initialization:	
 10285                           
 10286                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10287                           
 10288                           ;incstack = 0
 10289                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10290  24DF  31A6  2676         	fcall	_setPowerFault_Initialization
 10291  24E1  0008               	return
 10292  24E2                     __end_of_PowerFault_Initialization:	
 10293                           
 10294                           	psect	text48
 10295  2676                     __ptext48:	
 10296 ;; *************** function _setPowerFault_Initialization *****************
 10297 ;; Defined at:
 10298 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;		None
 10301 ;; Auto vars:     Size  Location     Type
 10302 ;;		None
 10303 ;; Return value:  Size  Location     Type
 10304 ;;		None               void
 10305 ;; Registers used:
 10306 ;;		wreg, fsr1l, fsr1h
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;Total ram usage:        1 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; Hardware stack levels required when called:    4
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_PowerFault_Initialization
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _setPowerFault_Initialization
 10328  2676                     _setPowerFault_Initialization:	
 10329                           
 10330                           ;PowerFault_B1.c: 31: PF=&PF1;
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10334  2676  30C4               	movlw	_PF1& (0+255)
 10335  2677  0020               	movlb	0	; select bank0
 10336  2678  00A0               	movwf	??_setPowerFault_Initialization
 10337  2679  0820               	movf	??_setPowerFault_Initialization,w
 10338  267A  00FA               	movwf	_PF
 10339                           
 10340                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10341  267B  087A               	movf	_PF,w
 10342  267C  0086               	movwf	6
 10343  267D  0187               	clrf	7
 10344  267E  1401               	bsf	1,0
 10345                           
 10346                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10347  267F  087A               	movf	_PF,w
 10348  2680  0086               	movwf	6
 10349  2681  0187               	clrf	7
 10350  2682  1501               	bsf	1,2
 10351  2683  0008               	return
 10352  2684                     __end_of_setPowerFault_Initialization:	
 10353                           
 10354                           	psect	text49
 10355  279D                     __ptext49:	
 10356 ;; *************** function _Mcu_Initialization *****************
 10357 ;; Defined at:
 10358 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0, pclath, cstack
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        1 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    5
 10379 ;; This function calls:
 10380 ;;		_ADC_Set
 10381 ;;		_INT_Set
 10382 ;;		_IOC_Set
 10383 ;;		_IO_Set
 10384 ;;		_TMR0_Set
 10385 ;; This function is called by:
 10386 ;;		_main
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _Mcu_Initialization
 10392  279D                     _Mcu_Initialization:	
 10393                           
 10394                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10398  279D  3078               	movlw	120
 10399  279E  0021               	movlb	1	; select bank1
 10400  279F  0099               	movwf	25	;volatile
 10401                           
 10402                           ;MCU_16f1518_B1.c: 16: IO_Set();
 10403  27A0  3198  206E  31A7   	fcall	_IO_Set
 10404                           
 10405                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
 10406  27A3  31A6  2669  31A7   	fcall	_TMR0_Set
 10407                           
 10408                           ;MCU_16f1518_B1.c: 20: ;;
 10409                           ;MCU_16f1518_B1.c: 22: ADC_Set();
 10410  27A6  31A5  253E  31A7   	fcall	_ADC_Set
 10411                           
 10412                           ;MCU_16f1518_B1.c: 26: INT_Set();
 10413  27A9  31A5  2510  31A7   	fcall	_INT_Set
 10414                           
 10415                           ;MCU_16f1518_B1.c: 28: IOC_Set();
 10416  27AC  31A6  265C         	fcall	_IOC_Set
 10417                           
 10418                           ;MCU_16f1518_B1.c: 30: ;;
 10419                           ;MCU_16f1518_B1.c: 32: ;;
 10420                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
 10421  27AE  30A0               	movlw	_VarMemory& (0+255)
 10422  27AF  0020               	movlb	0	; select bank0
 10423  27B0  00A1               	movwf	??_Mcu_Initialization
 10424  27B1  0821               	movf	??_Mcu_Initialization,w
 10425  27B2  0021               	movlb	1	; select bank1
 10426  27B3  00EA               	movwf	_Memory^(0+128)
 10427  27B4  0008               	return
 10428  27B5                     __end_of_Mcu_Initialization:	
 10429                           
 10430                           	psect	text50
 10431  2669                     __ptext50:	
 10432 ;; *************** function _TMR0_Set *****************
 10433 ;; Defined at:
 10434 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;		None               void
 10441 ;; Registers used:
 10442 ;;		wreg, status,2
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        1 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    4
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_Mcu_Initialization
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _TMR0_Set
 10464  2669                     _TMR0_Set:	
 10465                           
 10466                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10470  2669  30CC               	movlw	_VarTimer0& (0+255)
 10471  266A  0020               	movlb	0	; select bank0
 10472  266B  00A0               	movwf	??_TMR0_Set
 10473  266C  0820               	movf	??_TMR0_Set,w
 10474  266D  0021               	movlb	1	; select bank1
 10475  266E  00EB               	movwf	_Timer0^(0+128)
 10476                           
 10477                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
 10478  266F  0195               	clrf	21	;volatile
 10479                           
 10480                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
 10481  2670  30A6               	movlw	166
 10482  2671  0020               	movlb	0	; select bank0
 10483  2672  0095               	movwf	21	;volatile
 10484                           
 10485                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
 10486  2673  168B               	bsf	11,5	;volatile
 10487                           
 10488                           ;MCU_16f1518_B1.c: 79: GIE=1;
 10489  2674  178B               	bsf	11,7	;volatile
 10490  2675  0008               	return
 10491  2676                     __end_of_TMR0_Set:	
 10492                           
 10493                           	psect	text51
 10494  186E                     __ptext51:	
 10495 ;; *************** function _IO_Set *****************
 10496 ;; Defined at:
 10497 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;		None               void
 10504 ;; Registers used:
 10505 ;;		wreg, status,2
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;Total ram usage:        0 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    4
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_Mcu_Initialization
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _IO_Set
 10527  186E                     _IO_Set:	
 10528                           
 10529                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _IO_Set: [wreg+status,2]
 10533  186E  3077               	movlw	119
 10534  186F  0021               	movlb	1	; select bank1
 10535  1870  008C               	movwf	12	;volatile
 10536                           
 10537                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
 10538  1871  3007               	movlw	7
 10539  1872  008D               	movwf	13	;volatile
 10540                           
 10541                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
 10542  1873  300C               	movlw	12
 10543  1874  008E               	movwf	14	;volatile
 10544                           
 10545                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
 10546  1875  0022               	movlb	2	; select bank2
 10547  1876  018C               	clrf	12	;volatile
 10548                           
 10549                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
 10550  1877  3002               	movlw	2
 10551  1878  008D               	movwf	13	;volatile
 10552                           
 10553                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
 10554  1879  018E               	clrf	14	;volatile
 10555                           
 10556                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
 10557  187A  3022               	movlw	34
 10558  187B  0023               	movlb	3	; select bank3
 10559  187C  008C               	movwf	12	;volatile
 10560                           
 10561                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
 10562  187D  018D               	clrf	13	;volatile
 10563                           
 10564                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
 10565  187E  018E               	clrf	14	;volatile
 10566                           
 10567                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
 10568  187F  3077               	movlw	119
 10569  1880  0020               	movlb	0	; select bank0
 10570  1881  008C               	movwf	12	;volatile
 10571                           
 10572                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
 10573  1882  3007               	movlw	7
 10574  1883  008D               	movwf	13	;volatile
 10575                           
 10576                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
 10577  1884  300C               	movlw	12
 10578  1885  008E               	movwf	14	;volatile
 10579  1886  0008               	return
 10580  1887                     __end_of_IO_Set:	
 10581                           
 10582                           	psect	text52
 10583  265C                     __ptext52:	
 10584 ;; *************** function _IOC_Set *****************
 10585 ;; Defined at:
 10586 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg, status,2
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    4
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_Mcu_Initialization
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _IOC_Set
 10616  265C                     _IOC_Set:	
 10617                           
 10618                           ;MCU_16f1518_B1.c: 248: WPUB2=0;
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _IOC_Set: [wreg+status,2]
 10622  265C  0024               	movlb	4	; select bank4
 10623  265D  110D               	bcf	13,2	;volatile
 10624                           
 10625                           ;MCU_16f1518_B1.c: 250: IOCBP=0b00000100;
 10626  265E  3004               	movlw	4
 10627  265F  0027               	movlb	7	; select bank7
 10628  2660  0094               	movwf	20	;volatile
 10629                           
 10630                           ;MCU_16f1518_B1.c: 251: IOCBN=0b00000100;
 10631  2661  3004               	movlw	4
 10632  2662  0095               	movwf	21	;volatile
 10633                           
 10634                           ;MCU_16f1518_B1.c: 259: IOCBF=0b00000000;
 10635  2663  0196               	clrf	22	;volatile
 10636                           
 10637                           ;MCU_16f1518_B1.c: 261: IOCIE=1;
 10638  2664  158B               	bsf	11,3	;volatile
 10639                           
 10640                           ;MCU_16f1518_B1.c: 262: IOCIF=0;
 10641  2665  100B               	bcf	11,0	;volatile
 10642                           
 10643                           ;MCU_16f1518_B1.c: 263: PEIE=1;
 10644  2666  170B               	bsf	11,6	;volatile
 10645                           
 10646                           ;MCU_16f1518_B1.c: 264: GIE=1;
 10647  2667  178B               	bsf	11,7	;volatile
 10648  2668  0008               	return
 10649  2669                     __end_of_IOC_Set:	
 10650                           
 10651                           	psect	text53
 10652  2510                     __ptext53:	
 10653 ;; *************** function _INT_Set *****************
 10654 ;; Defined at:
 10655 ;;		line 217 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;		None               void
 10662 ;; Registers used:
 10663 ;;		None
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;Total ram usage:        0 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    4
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_Mcu_Initialization
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _INT_Set
 10685  2510                     _INT_Set:	
 10686                           
 10687                           ;MCU_16f1518_B1.c: 219: WPUB0=0;
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in _INT_Set: []
 10691  2510  0024               	movlb	4	; select bank4
 10692  2511  100D               	bcf	13,0	;volatile
 10693                           
 10694                           ;MCU_16f1518_B1.c: 220: INTE=1;
 10695  2512  160B               	bsf	11,4	;volatile
 10696                           
 10697                           ;MCU_16f1518_B1.c: 221: PEIE=1;
 10698  2513  170B               	bsf	11,6	;volatile
 10699                           
 10700                           ;MCU_16f1518_B1.c: 222: GIE=1;
 10701  2514  178B               	bsf	11,7	;volatile
 10702  2515  0008               	return
 10703  2516                     __end_of_INT_Set:	
 10704                           
 10705                           	psect	text54
 10706  253E                     __ptext54:	
 10707 ;; *************** function _ADC_Set *****************
 10708 ;; Defined at:
 10709 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;		None               void
 10716 ;; Registers used:
 10717 ;;		wreg
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    4
 10730 ;; This function calls:
 10731 ;;		Nothing
 10732 ;; This function is called by:
 10733 ;;		_Mcu_Initialization
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           
 10738                           ;psect for function _ADC_Set
 10739  253E                     _ADC_Set:	
 10740                           
 10741                           ;MCU_16f1518_B1.c: 305: ADCON1=0xf2;
 10742                           
 10743                           ;incstack = 0
 10744                           ; Regs used in _ADC_Set: [wreg]
 10745  253E  30F2               	movlw	242
 10746  253F  0021               	movlb	1	; select bank1
 10747  2540  009E               	movwf	30	;volatile
 10748                           
 10749                           ;MCU_16f1518_B1.c: 306: FVRCON=0xc0;
 10750  2541  30C0               	movlw	192
 10751  2542  0022               	movlb	2	; select bank2
 10752  2543  0097               	movwf	23	;volatile
 10753  2544  0008               	return
 10754  2545                     __end_of_ADC_Set:	
 10755                           
 10756                           	psect	text55
 10757  256A                     __ptext55:	
 10758 ;; *************** function _MainT_Initialization *****************
 10759 ;; Defined at:
 10760 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		wreg
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        1 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    4
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _MainT_Initialization
 10790  256A                     _MainT_Initialization:	
 10791                           
 10792                           ;main.c: 95: Product=&VarProduct;
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in _MainT_Initialization: [wreg]
 10796  256A  30C5               	movlw	_VarProduct& (0+255)
 10797  256B  0020               	movlb	0	; select bank0
 10798  256C  00A0               	movwf	??_MainT_Initialization
 10799  256D  0820               	movf	??_MainT_Initialization,w
 10800  256E  00EF               	movwf	_Product
 10801                           
 10802                           ;main.c: 98: TMain=&VarTMain;
 10803  256F  3020               	movlw	_VarTMain& (0+255)
 10804  2570  00A0               	movwf	??_MainT_Initialization
 10805  2571  0820               	movf	??_MainT_Initialization,w
 10806  2572  00FD               	movwf	_TMain
 10807  2573  0008               	return
 10808  2574                     __end_of_MainT_Initialization:	
 10809                           
 10810                           	psect	text56
 10811  1600                     __ptext56:	
 10812 ;; *************** function _MainT *****************
 10813 ;; Defined at:
 10814 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;		None               void
 10821 ;; Registers used:
 10822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    6
 10835 ;; This function calls:
 10836 ;;		_setBuz
 10837 ;;		_setLoad_Enable
 10838 ;;		_setRF_Enable
 10839 ;;		_setSw_Enable
 10840 ;;		_setTemp_Enable
 10841 ;;		_setTxData
 10842 ;; This function is called by:
 10843 ;;		_main
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           
 10848                           ;psect for function _MainT
 10849  1600                     _MainT:	
 10850                           
 10851                           ;main.c: 106: if(!TMain->PowerON)
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10855  1600  087D               	movf	_TMain,w
 10856  1601  0086               	movwf	6
 10857  1602  3001               	movlw	1	; select bank2/3
 10858  1603  0087               	movwf	7
 10859  1604  1801               	btfsc	1,0
 10860  1605  2E49               	goto	l9422
 10861                           
 10862                           ;main.c: 107: {
 10863                           ;main.c: 108: TMain->PowerCount++;
 10864  1606  0A7D               	incf	_TMain,w
 10865  1607  0086               	movwf	6
 10866  1608  3001               	movlw	1	; select bank2/3
 10867  1609  0087               	movwf	7
 10868  160A  3001               	movlw	1
 10869  160B  0781               	addwf	1,f
 10870  160C  3141               	addfsr 1,1
 10871  160D  1803               	skipnc
 10872  160E  0A81               	incf	1,f
 10873                           
 10874                           ;main.c: 109: if(TMain->PowerCount == 150)
 10875  160F  0A7D               	incf	_TMain,w
 10876  1610  0086               	movwf	6
 10877  1611  3001               	movlw	1	; select bank2/3
 10878  1612  0087               	movwf	7
 10879  1613  3F40               	moviw [0]fsr1
 10880  1614  3A96               	xorlw	150
 10881  1615  1D03               	skipz
 10882  1616  2E19               	goto	u9165
 10883  1617  3F41               	moviw [1]fsr1
 10884  1618  3A00               	xorlw	0
 10885  1619                     u9165:	
 10886  1619  1D03               	skipz
 10887  161A  0008               	return
 10888                           
 10889                           ;main.c: 110: {
 10890                           ;main.c: 111: TMain->PowerCount=0;
 10891  161B  0A7D               	incf	_TMain,w
 10892  161C  0086               	movwf	6
 10893  161D  3001               	movlw	1	; select bank2/3
 10894  161E  0087               	movwf	7
 10895  161F  3000               	movlw	0
 10896  1620  3FC0               	movwi [0]fsr1
 10897  1621  3FC1               	movwi [1]fsr1
 10898                           
 10899                           ;main.c: 112: TMain->PowerON=1;
 10900  1622  087D               	movf	_TMain,w
 10901  1623  0086               	movwf	6
 10902  1624  3001               	movlw	1	; select bank2/3
 10903  1625  0087               	movwf	7
 10904  1626  1401               	bsf	1,0
 10905                           
 10906                           ;main.c: 115: setTemp_Enable(1);
 10907  1627  3001               	movlw	1
 10908  1628  31A5  25B6  3196   	fcall	_setTemp_Enable
 10909                           
 10910                           ;main.c: 119: setLoad_Enable(1);
 10911  162B  3001               	movlw	1
 10912  162C  31A7  271C  3196   	fcall	_setLoad_Enable
 10913                           
 10914                           ;main.c: 125: setBuz(3,50);
 10915  162F  3032               	movlw	50
 10916  1630  0020               	movlb	0	; select bank0
 10917  1631  00A6               	movwf	setBuz@time
 10918  1632  3000               	movlw	0
 10919  1633  00A7               	movwf	setBuz@time+1
 10920  1634  3003               	movlw	3
 10921  1635  3195  2589  3196   	fcall	_setBuz
 10922                           
 10923                           ;main.c: 126: TMain->SelfTest=1;
 10924  1638  087D               	movf	_TMain,w
 10925  1639  3E03               	addlw	3
 10926  163A  0086               	movwf	6
 10927  163B  3001               	movlw	1	; select bank2/3
 10928  163C  0087               	movwf	7
 10929  163D  1401               	bsf	1,0
 10930                           
 10931                           ;main.c: 128: setSw_Enable(1);
 10932  163E  3001               	movlw	1
 10933  163F  31A6  26CD  3196   	fcall	_setSw_Enable
 10934                           
 10935                           ;main.c: 131: setRF_Enable(1,1);
 10936  1642  0020               	movlb	0	; select bank0
 10937  1643  01A2               	clrf	setRF_Enable@command
 10938  1644  0AA2               	incf	setRF_Enable@command,f
 10939  1645  3001               	movlw	1
 10940  1646  319A  2281         	fcall	_setRF_Enable
 10941                           
 10942                           ;main.c: 135: }
 10943                           ;main.c: 136: }
 10944  1648  0008               	return
 10945  1649                     l9422:	
 10946                           
 10947                           ;main.c: 137: else
 10948                           ;main.c: 138: {
 10949                           ;main.c: 146: TMain->Count1++;
 10950  1649  087D               	movf	_TMain,w
 10951  164A  3E06               	addlw	6
 10952  164B  0086               	movwf	6
 10953  164C  3001               	movlw	1	; select bank2/3
 10954  164D  0087               	movwf	7
 10955  164E  3001               	movlw	1
 10956  164F  0781               	addwf	1,f
 10957  1650  3141               	addfsr 1,1
 10958  1651  1803               	skipnc
 10959  1652  0A81               	incf	1,f
 10960                           
 10961                           ;main.c: 147: if(TMain->Count1 == 100)
 10962  1653  087D               	movf	_TMain,w
 10963  1654  3E06               	addlw	6
 10964  1655  0086               	movwf	6
 10965  1656  3001               	movlw	1	; select bank2/3
 10966  1657  0087               	movwf	7
 10967  1658  3F40               	moviw [0]fsr1
 10968  1659  3A64               	xorlw	100
 10969  165A  1D03               	skipz
 10970  165B  2E5E               	goto	u9175
 10971  165C  3F41               	moviw [1]fsr1
 10972  165D  3A00               	xorlw	0
 10973  165E                     u9175:	
 10974  165E  1D03               	skipz
 10975  165F  0008               	return
 10976                           
 10977                           ;main.c: 148: {
 10978                           ;main.c: 149: TMain->Count1=0;
 10979  1660  087D               	movf	_TMain,w
 10980  1661  3E06               	addlw	6
 10981  1662  0086               	movwf	6
 10982  1663  3001               	movlw	1	; select bank2/3
 10983  1664  0087               	movwf	7
 10984  1665  3000               	movlw	0
 10985  1666  3FC0               	movwi [0]fsr1
 10986  1667  3FC1               	movwi [1]fsr1
 10987                           
 10988                           ;main.c: 150: setTxData(1);
 10989  1668  3001               	movlw	1
 10990  1669  318B  2339  3196   	fcall	_setTxData
 10991                           
 10992                           ;main.c: 160: if(TMain->Flag)
 10993  166C  087D               	movf	_TMain,w
 10994  166D  0086               	movwf	6
 10995  166E  3001               	movlw	1	; select bank2/3
 10996  166F  0087               	movwf	7
 10997  1670  1981               	btfsc	1,3
 10998  1671  0008               	return
 10999                           
 11000                           ;main.c: 170: else
 11001                           ;main.c: 171: {
 11002                           ;main.c: 172: TMain->Flag=1;
 11003                           
 11004                           ;main.c: 161: {
 11005                           ;main.c: 169: }
 11006  1672  087D               	movf	_TMain,w
 11007  1673  0086               	movwf	6
 11008  1674  3001               	movlw	1	; select bank2/3
 11009  1675  0087               	movwf	7
 11010  1676  1581               	bsf	1,3
 11011  1677  0008               	return
 11012  1678                     __end_of_MainT:	
 11013                           
 11014                           	psect	text57
 11015  25B6                     __ptext57:	
 11016 ;; *************** function _setTemp_Enable *****************
 11017 ;; Defined at:
 11018 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;  command         1    wreg     unsigned char 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  command         1    0[BANK0 ] unsigned char 
 11023 ;; Return value:  Size  Location     Type
 11024 ;;		None               void
 11025 ;; Registers used:
 11026 ;;		wreg, fsr1l, fsr1h
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        1 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    4
 11039 ;; This function calls:
 11040 ;;		Nothing
 11041 ;; This function is called by:
 11042 ;;		_MainT
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _setTemp_Enable
 11048  25B6                     _setTemp_Enable:	
 11049                           
 11050                           ;incstack = 0
 11051                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11052                           ;setTemp_Enable@command stored from wreg
 11053  25B6  0020               	movlb	0	; select bank0
 11054  25B7  00A0               	movwf	setTemp_Enable@command
 11055                           
 11056                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11057  25B8  087C               	movf	_Temp,w
 11058  25B9  0086               	movwf	6
 11059  25BA  3001               	movlw	1	; select bank2/3
 11060  25BB  0087               	movwf	7
 11061  25BC  0820               	movf	setTemp_Enable@command,w
 11062  25BD  1001               	bcf	1,0
 11063  25BE  1D03               	skipz
 11064  25BF  1401               	bsf	1,0
 11065  25C0  0008               	return
 11066  25C1                     __end_of_setTemp_Enable:	
 11067                           
 11068                           	psect	text58
 11069  271C                     __ptext58:	
 11070 ;; *************** function _setLoad_Enable *****************
 11071 ;; Defined at:
 11072 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;  command         1    wreg     unsigned char 
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  command         1    0[BANK0 ] unsigned char 
 11077 ;; Return value:  Size  Location     Type
 11078 ;;		None               void
 11079 ;; Registers used:
 11080 ;;		wreg, fsr1l, fsr1h
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;Total ram usage:        1 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    4
 11093 ;; This function calls:
 11094 ;;		Nothing
 11095 ;; This function is called by:
 11096 ;;		_MainT
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           
 11101                           ;psect for function _setLoad_Enable
 11102  271C                     _setLoad_Enable:	
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11106                           ;setLoad_Enable@command stored from wreg
 11107  271C  0020               	movlb	0	; select bank0
 11108  271D  00A0               	movwf	setLoad_Enable@command
 11109                           
 11110                           ;OverLoad_B1.c: 259: Load->Enable=command;
 11111  271E  086E               	movf	_Load,w
 11112  271F  0086               	movwf	6
 11113  2720  3002               	movlw	2	; select bank4/5
 11114  2721  0087               	movwf	7
 11115  2722  0820               	movf	setLoad_Enable@command,w
 11116  2723  1001               	bcf	1,0
 11117  2724  1D03               	skipz
 11118  2725  1401               	bsf	1,0
 11119                           
 11120                           ;OverLoad_B1.c: 260: Load->GO=0;
 11121  2726  086E               	movf	_Load,w
 11122  2727  0086               	movwf	6
 11123  2728  3002               	movlw	2	; select bank4/5
 11124  2729  0087               	movwf	7
 11125  272A  1081               	bcf	1,1
 11126  272B  0008               	return
 11127  272C                     __end_of_setLoad_Enable:	
 11128                           
 11129                           	psect	text59
 11130  0050                     __ptext59:	
 11131 ;; *************** function _Load_Main *****************
 11132 ;; Defined at:
 11133 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;		None
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  i               1   17[BANK0 ] unsigned char 
 11138 ;; Return value:  Size  Location     Type
 11139 ;;		None               void
 11140 ;; Registers used:
 11141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;Total ram usage:        5 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:    9
 11154 ;; This function calls:
 11155 ;;		___lwdiv
 11156 ;;		___wmul
 11157 ;;		_getPF_Safe
 11158 ;;		_getTemp_Safe
 11159 ;;		_setDimmerLights_Clear
 11160 ;;		_setLoad_AH_AL_Restore
 11161 ;;		_setLoad_Exceptions
 11162 ;; This function is called by:
 11163 ;;		_main
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           
 11168                           ;psect for function _Load_Main
 11169  0050                     _Load_Main:	
 11170                           
 11171                           ;OverLoad_B1.c: 47: char i;
 11172                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11173                           
 11174                           ;incstack = 0
 11175                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11176  0050  0020               	movlb	0	; select bank0
 11177  0051  086E               	movf	_Load,w
 11178  0052  0086               	movwf	6
 11179  0053  3002               	movlw	2	; select bank4/5
 11180  0054  0087               	movwf	7
 11181  0055  1E81               	btfss	1,5
 11182  0056  287D               	goto	l9462
 11183                           
 11184                           ;OverLoad_B1.c: 49: {
 11185                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11186  0057  086E               	movf	_Load,w
 11187  0058  3E03               	addlw	3
 11188  0059  0086               	movwf	6
 11189  005A  3002               	movlw	2	; select bank4/5
 11190  005B  0087               	movwf	7
 11191  005C  3001               	movlw	1
 11192  005D  0781               	addwf	1,f
 11193  005E  3141               	addfsr 1,1
 11194  005F  1803               	skipnc
 11195  0060  0A81               	incf	1,f
 11196                           
 11197                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11198  0061  086E               	movf	_Load,w
 11199  0062  3E03               	addlw	3
 11200  0063  0086               	movwf	6
 11201  0064  3002               	movlw	2	; select bank4/5
 11202  0065  0087               	movwf	7
 11203  0066  3F40               	moviw [0]fsr1
 11204  0067  00AD               	movwf	??_Load_Main
 11205  0068  3F41               	moviw [1]fsr1
 11206  0069  00AE               	movwf	??_Load_Main+1
 11207  006A  3003               	movlw	3
 11208  006B  022E               	subwf	??_Load_Main+1,w
 11209  006C  30E8               	movlw	232
 11210  006D  1903               	skipnz
 11211  006E  022D               	subwf	??_Load_Main,w
 11212  006F  1C03               	skipc
 11213  0070  0008               	return
 11214                           
 11215                           ;OverLoad_B1.c: 52: {
 11216                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11217  0071  086E               	movf	_Load,w
 11218  0072  3E03               	addlw	3
 11219  0073  0086               	movwf	6
 11220  0074  3002               	movlw	2	; select bank4/5
 11221  0075  0087               	movwf	7
 11222  0076  3000               	movlw	0
 11223  0077  3FC0               	movwi [0]fsr1
 11224  0078  3FC1               	movwi [1]fsr1
 11225                           
 11226                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11227  0079  3000               	movlw	0
 11228  007A  319F  2706         	fcall	_setLoad_Exceptions
 11229                           
 11230                           ;OverLoad_B1.c: 55: }
 11231                           ;OverLoad_B1.c: 56: }
 11232  007C  0008               	return
 11233  007D                     l9462:	
 11234                           
 11235                           ;OverLoad_B1.c: 57: else
 11236                           ;OverLoad_B1.c: 58: {
 11237                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11238  007D  0020               	movlb	0	; select bank0
 11239  007E  086E               	movf	_Load,w
 11240  007F  0086               	movwf	6
 11241  0080  3002               	movlw	2	; select bank4/5
 11242  0081  0087               	movwf	7
 11243  0082  1E01               	btfss	1,4
 11244  0083  2B44               	goto	l9570
 11245                           
 11246                           ;OverLoad_B1.c: 60: {
 11247                           ;OverLoad_B1.c: 61: Load->Time++;
 11248  0084  0A6E               	incf	_Load,w
 11249  0085  0086               	movwf	6
 11250  0086  3002               	movlw	2	; select bank4/5
 11251  0087  0087               	movwf	7
 11252  0088  3001               	movlw	1
 11253  0089  0781               	addwf	1,f
 11254  008A  3141               	addfsr 1,1
 11255  008B  1803               	skipnc
 11256  008C  0A81               	incf	1,f
 11257                           
 11258                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11259  008D  0A6E               	incf	_Load,w
 11260  008E  0086               	movwf	6
 11261  008F  3002               	movlw	2	; select bank4/5
 11262  0090  0087               	movwf	7
 11263  0091  3F40               	moviw [0]fsr1
 11264  0092  00AD               	movwf	??_Load_Main
 11265  0093  3F41               	moviw [1]fsr1
 11266  0094  00AE               	movwf	??_Load_Main+1
 11267  0095  3000               	movlw	0
 11268  0096  022E               	subwf	??_Load_Main+1,w
 11269  0097  3005               	movlw	5
 11270  0098  1903               	skipnz
 11271  0099  022D               	subwf	??_Load_Main,w
 11272  009A  1C03               	skipc
 11273  009B  0008               	return
 11274                           
 11275                           ;OverLoad_B1.c: 63: {
 11276                           ;OverLoad_B1.c: 64: Load->Time=0;
 11277  009C  0A6E               	incf	_Load,w
 11278  009D  0086               	movwf	6
 11279  009E  3002               	movlw	2	; select bank4/5
 11280  009F  0087               	movwf	7
 11281  00A0  3000               	movlw	0
 11282  00A1  3FC0               	movwi [0]fsr1
 11283  00A2  3FC1               	movwi [1]fsr1
 11284                           
 11285                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11286  00A3  086E               	movf	_Load,w
 11287  00A4  0086               	movwf	6
 11288  00A5  3002               	movlw	2	; select bank4/5
 11289  00A6  0087               	movwf	7
 11290  00A7  1201               	bcf	1,4
 11291                           
 11292                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11293  00A8  086E               	movf	_Load,w
 11294  00A9  3E45               	addlw	69
 11295  00AA  0086               	movwf	6
 11296  00AB  3002               	movlw	2	; select bank4/5
 11297  00AC  0087               	movwf	7
 11298  00AD  086E               	movf	_Load,w
 11299  00AE  3E44               	addlw	68
 11300  00AF  0084               	movwf	4
 11301  00B0  3002               	movlw	2	; select bank4/5
 11302  00B1  0085               	movwf	5
 11303  00B2  0800               	movf	0,w
 11304  00B3  00AD               	movwf	??_Load_Main
 11305  00B4  086E               	movf	_Load,w
 11306  00B5  3E43               	addlw	67
 11307  00B6  0084               	movwf	4
 11308  00B7  3002               	movlw	2	; select bank4/5
 11309  00B8  0085               	movwf	5
 11310  00B9  0800               	movf	0,w
 11311  00BA  072D               	addwf	??_Load_Main,w
 11312  00BB  0701               	addwf	1,w
 11313  00BC  00AE               	movwf	??_Load_Main+1
 11314  00BD  086E               	movf	_Load,w
 11315  00BE  3E3E               	addlw	62
 11316  00BF  0086               	movwf	6
 11317  00C0  3002               	movlw	2	; select bank4/5
 11318  00C1  0087               	movwf	7
 11319  00C2  082E               	movf	??_Load_Main+1,w
 11320  00C3  0081               	movwf	1
 11321                           
 11322                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11323  00C4  01B1               	clrf	Load_Main@i
 11324  00C5  0AB1               	incf	Load_Main@i,f
 11325  00C6  3004               	movlw	4
 11326  00C7  0231               	subwf	Load_Main@i,w
 11327  00C8  1803               	btfsc	3,0
 11328  00C9  28F8               	goto	l9484
 11329  00CA                     l9478:	
 11330                           
 11331                           ;OverLoad_B1.c: 68: {
 11332                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11333  00CA  3531               	lslf	Load_Main@i,w
 11334  00CB  3E08               	addlw	8
 11335  00CC  076E               	addwf	_Load,w
 11336  00CD  00AD               	movwf	??_Load_Main
 11337  00CE  082D               	movf	??_Load_Main,w
 11338  00CF  0086               	movwf	6
 11339  00D0  3002               	movlw	2	; select bank4/5
 11340  00D1  0087               	movwf	7
 11341  00D2  086E               	movf	_Load,w
 11342  00D3  3E2E               	addlw	46
 11343  00D4  0084               	movwf	4
 11344  00D5  3002               	movlw	2	; select bank4/5
 11345  00D6  0085               	movwf	5
 11346  00D7  3F40               	moviw [0]fsr1
 11347  00D8  0780               	addwf	0,f
 11348  00D9  3101               	addfsr 0,1
 11349  00DA  3F41               	moviw [1]fsr1
 11350  00DB  3D80               	addwfc	0,f
 11351  00DC  313F               	addfsr 0,-1
 11352                           
 11353                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11354  00DD  3531               	lslf	Load_Main@i,w
 11355  00DE  3E1A               	addlw	26
 11356  00DF  076E               	addwf	_Load,w
 11357  00E0  00AD               	movwf	??_Load_Main
 11358  00E1  082D               	movf	??_Load_Main,w
 11359  00E2  0086               	movwf	6
 11360  00E3  3002               	movlw	2	; select bank4/5
 11361  00E4  0087               	movwf	7
 11362  00E5  086E               	movf	_Load,w
 11363  00E6  3E30               	addlw	48
 11364  00E7  0084               	movwf	4
 11365  00E8  3002               	movlw	2	; select bank4/5
 11366  00E9  0085               	movwf	5
 11367  00EA  3F40               	moviw [0]fsr1
 11368  00EB  0780               	addwf	0,f
 11369  00EC  3101               	addfsr 0,1
 11370  00ED  3F41               	moviw [1]fsr1
 11371  00EE  3D80               	addwfc	0,f
 11372  00EF  313F               	addfsr 0,-1
 11373  00F0  3001               	movlw	1
 11374  00F1  00AD               	movwf	??_Load_Main
 11375  00F2  082D               	movf	??_Load_Main,w
 11376  00F3  07B1               	addwf	Load_Main@i,f
 11377  00F4  3004               	movlw	4
 11378  00F5  0231               	subwf	Load_Main@i,w
 11379  00F6  1C03               	skipc
 11380  00F7  28CA               	goto	l9478
 11381  00F8                     l9484:	
 11382                           
 11383                           ;OverLoad_B1.c: 71: }
 11384                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11385  00F8  3003               	movlw	3
 11386  00F9  00A0               	movwf	___lwdiv@divisor
 11387  00FA  3000               	movlw	0
 11388  00FB  00A1               	movwf	___lwdiv@divisor+1
 11389  00FC  086E               	movf	_Load,w
 11390  00FD  3E2E               	addlw	46
 11391  00FE  0086               	movwf	6
 11392  00FF  3002               	movlw	2	; select bank4/5
 11393  0100  0087               	movwf	7
 11394  0101  3F40               	moviw [0]fsr1
 11395  0102  00A2               	movwf	___lwdiv@dividend
 11396  0103  3F41               	moviw [1]fsr1
 11397  0104  00A3               	movwf	___lwdiv@dividend+1
 11398  0105  319C  2430  3180   	fcall	___lwdiv
 11399  0108  0020               	movlb	0	; select bank0
 11400  0109  086E               	movf	_Load,w
 11401  010A  3E2E               	addlw	46
 11402  010B  0086               	movwf	6
 11403  010C  3002               	movlw	2	; select bank4/5
 11404  010D  0087               	movwf	7
 11405  010E  0820               	movf	?___lwdiv,w
 11406  010F  3FC0               	movwi [0]fsr1
 11407  0110  0821               	movf	?___lwdiv+1,w
 11408  0111  3FC1               	movwi [1]fsr1
 11409                           
 11410                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11411  0112  3003               	movlw	3
 11412  0113  00A0               	movwf	___lwdiv@divisor
 11413  0114  3000               	movlw	0
 11414  0115  00A1               	movwf	___lwdiv@divisor+1
 11415  0116  086E               	movf	_Load,w
 11416  0117  3E30               	addlw	48
 11417  0118  0086               	movwf	6
 11418  0119  3002               	movlw	2	; select bank4/5
 11419  011A  0087               	movwf	7
 11420  011B  3F40               	moviw [0]fsr1
 11421  011C  00A2               	movwf	___lwdiv@dividend
 11422  011D  3F41               	moviw [1]fsr1
 11423  011E  00A3               	movwf	___lwdiv@dividend+1
 11424  011F  319C  2430  3180   	fcall	___lwdiv
 11425  0122  0020               	movlb	0	; select bank0
 11426  0123  086E               	movf	_Load,w
 11427  0124  3E30               	addlw	48
 11428  0125  0086               	movwf	6
 11429  0126  3002               	movlw	2	; select bank4/5
 11430  0127  0087               	movwf	7
 11431  0128  0820               	movf	?___lwdiv,w
 11432  0129  3FC0               	movwi [0]fsr1
 11433  012A  0821               	movf	?___lwdiv+1,w
 11434  012B  3FC1               	movwi [1]fsr1
 11435                           
 11436                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11437  012C  086E               	movf	_Load,w
 11438  012D  3E2E               	addlw	46
 11439  012E  0086               	movwf	6
 11440  012F  3002               	movlw	2	; select bank4/5
 11441  0130  0087               	movwf	7
 11442  0131  3F40               	moviw [0]fsr1
 11443  0132  00AD               	movwf	??_Load_Main
 11444  0133  3F41               	moviw [1]fsr1
 11445  0134  00AE               	movwf	??_Load_Main+1
 11446  0135  086E               	movf	_Load,w
 11447  0136  3E30               	addlw	48
 11448  0137  0086               	movwf	6
 11449  0138  3002               	movlw	2	; select bank4/5
 11450  0139  0087               	movwf	7
 11451  013A  3F40               	moviw [0]fsr1
 11452  013B  00AF               	movwf	??_Load_Main+2
 11453  013C  3F41               	moviw [1]fsr1
 11454  013D  00B0               	movwf	??_Load_Main+3
 11455  013E  082E               	movf	??_Load_Main+1,w
 11456  013F  0230               	subwf	??_Load_Main+3,w
 11457  0140  1D03               	skipz
 11458  0141  2944               	goto	u9285
 11459  0142  082D               	movf	??_Load_Main,w
 11460  0143  022F               	subwf	??_Load_Main+2,w
 11461  0144                     u9285:	
 11462  0144  1803               	skipnc
 11463  0145  2AC7               	goto	l9552
 11464                           
 11465                           ;OverLoad_B1.c: 75: {
 11466                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11467  0146  086E               	movf	_Load,w
 11468  0147  3E2E               	addlw	46
 11469  0148  0086               	movwf	6
 11470  0149  3002               	movlw	2	; select bank4/5
 11471  014A  0087               	movwf	7
 11472  014B  086E               	movf	_Load,w
 11473  014C  3E30               	addlw	48
 11474  014D  0084               	movwf	4
 11475  014E  3002               	movlw	2	; select bank4/5
 11476  014F  0085               	movwf	5
 11477  0150  3F00               	moviw [0]fsr0
 11478  0151  00AD               	movwf	??_Load_Main
 11479  0152  3F01               	moviw [1]fsr0
 11480  0153  00AE               	movwf	??_Load_Main+1
 11481  0154  09AD               	comf	??_Load_Main,f
 11482  0155  09AE               	comf	??_Load_Main+1,f
 11483  0156  0AAD               	incf	??_Load_Main,f
 11484  0157  1903               	skipnz
 11485  0158  0AAE               	incf	??_Load_Main+1,f
 11486  0159  3F40               	moviw [0]fsr1
 11487  015A  072D               	addwf	??_Load_Main,w
 11488  015B  00AF               	movwf	??_Load_Main+2
 11489  015C  3F41               	moviw [1]fsr1
 11490  015D  3D2E               	addwfc	??_Load_Main+1,w
 11491  015E  00B0               	movwf	??_Load_Main+3
 11492  015F  086E               	movf	_Load,w
 11493  0160  3E2C               	addlw	44
 11494  0161  0086               	movwf	6
 11495  0162  3002               	movlw	2	; select bank4/5
 11496  0163  0087               	movwf	7
 11497  0164  082F               	movf	??_Load_Main+2,w
 11498  0165  3FC0               	movwi [0]fsr1
 11499  0166  0830               	movf	??_Load_Main+3,w
 11500  0167  3FC1               	movwi [1]fsr1
 11501                           
 11502                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11503  0168  086E               	movf	_Load,w
 11504  0169  3E3A               	addlw	58
 11505  016A  0086               	movwf	6
 11506  016B  3002               	movlw	2	; select bank4/5
 11507  016C  0087               	movwf	7
 11508  016D  3002               	movlw	2
 11509  016E  0201               	subwf	1,w
 11510  016F  1803               	skipnc
 11511  0170  29C1               	goto	l9506
 11512                           
 11513                           ;OverLoad_B1.c: 79: {
 11514                           ;OverLoad_B1.c: 80: Load->Count++;
 11515  0171  3001               	movlw	1
 11516  0172  00AD               	movwf	??_Load_Main
 11517  0173  086E               	movf	_Load,w
 11518  0174  3E3A               	addlw	58
 11519  0175  0086               	movwf	6
 11520  0176  3002               	movlw	2	; select bank4/5
 11521  0177  0087               	movwf	7
 11522  0178  082D               	movf	??_Load_Main,w
 11523  0179  0781               	addwf	1,f
 11524                           
 11525                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11526  017A  086E               	movf	_Load,w
 11527  017B  3E3A               	addlw	58
 11528  017C  0086               	movwf	6
 11529  017D  3002               	movlw	2	; select bank4/5
 11530  017E  0087               	movwf	7
 11531  017F  0801               	movf	1,w
 11532  0180  3A01               	xorlw	1
 11533  0181  1D03               	skipz
 11534  0182  298D               	goto	l9498
 11535                           
 11536                           ;OverLoad_B1.c: 82: {
 11537                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11538  0183  086E               	movf	_Load,w
 11539  0184  3E36               	addlw	54
 11540  0185  0086               	movwf	6
 11541  0186  3002               	movlw	2	; select bank4/5
 11542  0187  0087               	movwf	7
 11543  0188  30F4               	movlw	244
 11544  0189  3FC0               	movwi [0]fsr1
 11545  018A  3001               	movlw	1
 11546  018B  3FC1               	movwi [1]fsr1
 11547                           
 11548                           ;OverLoad_B1.c: 84: }
 11549  018C  29C1               	goto	l9506
 11550  018D                     l9498:	
 11551                           
 11552                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11553  018D  086E               	movf	_Load,w
 11554  018E  3E3A               	addlw	58
 11555  018F  0086               	movwf	6
 11556  0190  3002               	movlw	2	; select bank4/5
 11557  0191  0087               	movwf	7
 11558  0192  0801               	movf	1,w
 11559  0193  3A02               	xorlw	2
 11560  0194  1D03               	skipz
 11561  0195  29C1               	goto	l9506
 11562                           
 11563                           ;OverLoad_B1.c: 86: {
 11564                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11565  0196  086E               	movf	_Load,w
 11566  0197  3E3E               	addlw	62
 11567  0198  0086               	movwf	6
 11568  0199  3002               	movlw	2	; select bank4/5
 11569  019A  0087               	movwf	7
 11570  019B  0801               	movf	1,w
 11571  019C  3A01               	xorlw	1
 11572  019D  1D03               	skipz
 11573  019E  29A9               	goto	l9504
 11574                           
 11575                           ;OverLoad_B1.c: 88: {
 11576                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x42;
 11577  019F  086E               	movf	_Load,w
 11578  01A0  3E36               	addlw	54
 11579  01A1  0086               	movwf	6
 11580  01A2  3002               	movlw	2	; select bank4/5
 11581  01A3  0087               	movwf	7
 11582  01A4  3042               	movlw	66
 11583  01A5  3FC0               	movwi [0]fsr1
 11584  01A6  3000               	movlw	0
 11585  01A7  3FC1               	movwi [1]fsr1
 11586                           
 11587                           ;OverLoad_B1.c: 90: }
 11588  01A8  29C1               	goto	l9506
 11589  01A9                     l9504:	
 11590                           
 11591                           ;OverLoad_B1.c: 91: else
 11592                           ;OverLoad_B1.c: 92: {
 11593                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x42+Load->TotalLoad)-0x08;
 11594  01A9  086E               	movf	_Load,w
 11595  01AA  3E06               	addlw	6
 11596  01AB  0086               	movwf	6
 11597  01AC  3002               	movlw	2	; select bank4/5
 11598  01AD  0087               	movwf	7
 11599  01AE  3F40               	moviw [0]fsr1
 11600  01AF  00AD               	movwf	??_Load_Main
 11601  01B0  3F41               	moviw [1]fsr1
 11602  01B1  00AE               	movwf	??_Load_Main+1
 11603  01B2  082D               	movf	??_Load_Main,w
 11604  01B3  3E3A               	addlw	58
 11605  01B4  00AF               	movwf	??_Load_Main+2
 11606  01B5  3000               	movlw	0
 11607  01B6  3D2E               	addwfc	??_Load_Main+1,w
 11608  01B7  00B0               	movwf	??_Load_Main+3
 11609  01B8  086E               	movf	_Load,w
 11610  01B9  3E36               	addlw	54
 11611  01BA  0086               	movwf	6
 11612  01BB  3002               	movlw	2	; select bank4/5
 11613  01BC  0087               	movwf	7
 11614  01BD  082F               	movf	??_Load_Main+2,w
 11615  01BE  3FC0               	movwi [0]fsr1
 11616  01BF  0830               	movf	??_Load_Main+3,w
 11617  01C0  3FC1               	movwi [1]fsr1
 11618  01C1                     l9506:	
 11619                           
 11620                           ;OverLoad_B1.c: 94: }
 11621                           ;OverLoad_B1.c: 95: }
 11622                           ;OverLoad_B1.c: 96: }
 11623                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11624  01C1  086E               	movf	_Load,w
 11625  01C2  3E36               	addlw	54
 11626  01C3  0086               	movwf	6
 11627  01C4  3002               	movlw	2	; select bank4/5
 11628  01C5  0087               	movwf	7
 11629  01C6  3F40               	moviw [0]fsr1
 11630  01C7  00AD               	movwf	??_Load_Main
 11631  01C8  3F41               	moviw [1]fsr1
 11632  01C9  00AE               	movwf	??_Load_Main+1
 11633  01CA  086E               	movf	_Load,w
 11634  01CB  3E2C               	addlw	44
 11635  01CC  0086               	movwf	6
 11636  01CD  3002               	movlw	2	; select bank4/5
 11637  01CE  0087               	movwf	7
 11638  01CF  3F40               	moviw [0]fsr1
 11639  01D0  00AF               	movwf	??_Load_Main+2
 11640  01D1  3F41               	moviw [1]fsr1
 11641  01D2  00B0               	movwf	??_Load_Main+3
 11642  01D3  082E               	movf	??_Load_Main+1,w
 11643  01D4  0230               	subwf	??_Load_Main+3,w
 11644  01D5  1D03               	skipz
 11645  01D6  29D9               	goto	u9335
 11646  01D7  082D               	movf	??_Load_Main,w
 11647  01D8  022F               	subwf	??_Load_Main+2,w
 11648  01D9                     u9335:	
 11649  01D9  1C03               	skipc
 11650  01DA  2A47               	goto	l9526
 11651                           
 11652                           ;OverLoad_B1.c: 99: {
 11653                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11654  01DB  3001               	movlw	1
 11655  01DC  00AD               	movwf	??_Load_Main
 11656  01DD  086E               	movf	_Load,w
 11657  01DE  3E3C               	addlw	60
 11658  01DF  0086               	movwf	6
 11659  01E0  3002               	movlw	2	; select bank4/5
 11660  01E1  0087               	movwf	7
 11661  01E2  082D               	movf	??_Load_Main,w
 11662  01E3  0781               	addwf	1,f
 11663                           
 11664                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11665  01E4  086E               	movf	_Load,w
 11666  01E5  3E3C               	addlw	60
 11667  01E6  0086               	movwf	6
 11668  01E7  3002               	movlw	2	; select bank4/5
 11669  01E8  0087               	movwf	7
 11670  01E9  3003               	movlw	3
 11671  01EA  0201               	subwf	1,w
 11672  01EB  1C03               	skipc
 11673  01EC  2AC7               	goto	l9552
 11674                           
 11675                           ;OverLoad_B1.c: 102: {
 11676                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11677  01ED  086E               	movf	_Load,w
 11678  01EE  3E3C               	addlw	60
 11679  01EF  0086               	movwf	6
 11680  01F0  3002               	movlw	2	; select bank4/5
 11681  01F1  0087               	movwf	7
 11682  01F2  0181               	clrf	1
 11683                           
 11684                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11685  01F3  3001               	movlw	1
 11686  01F4  319F  2706  3180   	fcall	_setLoad_Exceptions
 11687                           
 11688                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 11689  01F7  0020               	movlb	0	; select bank0
 11690  01F8  086E               	movf	_Load,w
 11691  01F9  3E2C               	addlw	44
 11692  01FA  0086               	movwf	6
 11693  01FB  3002               	movlw	2	; select bank4/5
 11694  01FC  0087               	movwf	7
 11695  01FD  3F40               	moviw [0]fsr1
 11696  01FE  00AD               	movwf	??_Load_Main
 11697  01FF  3F41               	moviw [1]fsr1
 11698  0200  00AE               	movwf	??_Load_Main+1
 11699  0201  082E               	movf	??_Load_Main+1,w
 11700  0202  00AF               	movwf	??_Load_Main+2
 11701  0203  086F               	movf	_Product,w
 11702  0204  3E04               	addlw	4
 11703  0205  0086               	movwf	6
 11704  0206  3001               	movlw	1	; select bank2/3
 11705  0207  0087               	movwf	7
 11706  0208  082F               	movf	??_Load_Main+2,w
 11707  0209  0081               	movwf	1
 11708                           
 11709                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 11710  020A  086E               	movf	_Load,w
 11711  020B  3E2C               	addlw	44
 11712  020C  0086               	movwf	6
 11713  020D  3002               	movlw	2	; select bank4/5
 11714  020E  0087               	movwf	7
 11715  020F  0801               	movf	1,w
 11716  0210  00AD               	movwf	??_Load_Main
 11717  0211  086F               	movf	_Product,w
 11718  0212  3E05               	addlw	5
 11719  0213  0086               	movwf	6
 11720  0214  3001               	movlw	1	; select bank2/3
 11721  0215  0087               	movwf	7
 11722  0216  082D               	movf	??_Load_Main,w
 11723  0217  0081               	movwf	1
 11724                           
 11725                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 11726  0218  086E               	movf	_Load,w
 11727  0219  3E36               	addlw	54
 11728  021A  0086               	movwf	6
 11729  021B  3002               	movlw	2	; select bank4/5
 11730  021C  0087               	movwf	7
 11731  021D  3F40               	moviw [0]fsr1
 11732  021E  00AD               	movwf	??_Load_Main
 11733  021F  3F41               	moviw [1]fsr1
 11734  0220  00AE               	movwf	??_Load_Main+1
 11735  0221  082E               	movf	??_Load_Main+1,w
 11736  0222  00AF               	movwf	??_Load_Main+2
 11737  0223  086F               	movf	_Product,w
 11738  0224  3E10               	addlw	16
 11739  0225  0086               	movwf	6
 11740  0226  3001               	movlw	1	; select bank2/3
 11741  0227  0087               	movwf	7
 11742  0228  082F               	movf	??_Load_Main+2,w
 11743  0229  0081               	movwf	1
 11744                           
 11745                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 11746  022A  086E               	movf	_Load,w
 11747  022B  3E36               	addlw	54
 11748  022C  0086               	movwf	6
 11749  022D  3002               	movlw	2	; select bank4/5
 11750  022E  0087               	movwf	7
 11751  022F  0801               	movf	1,w
 11752  0230  00AD               	movwf	??_Load_Main
 11753  0231  086F               	movf	_Product,w
 11754  0232  3E11               	addlw	17
 11755  0233  0086               	movwf	6
 11756  0234  3001               	movlw	1	; select bank2/3
 11757  0235  0087               	movwf	7
 11758  0236  082D               	movf	??_Load_Main,w
 11759  0237  0081               	movwf	1
 11760                           
 11761                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 11762  0238  086E               	movf	_Load,w
 11763  0239  3E3E               	addlw	62
 11764  023A  0086               	movwf	6
 11765  023B  3002               	movlw	2	; select bank4/5
 11766  023C  0087               	movwf	7
 11767  023D  0801               	movf	1,w
 11768  023E  00AD               	movwf	??_Load_Main
 11769  023F  086F               	movf	_Product,w
 11770  0240  3E08               	addlw	8
 11771  0241  0086               	movwf	6
 11772  0242  3001               	movlw	1	; select bank2/3
 11773  0243  0087               	movwf	7
 11774  0244  082D               	movf	??_Load_Main,w
 11775  0245  0081               	movwf	1
 11776                           
 11777                           ;OverLoad_B1.c: 113: }
 11778                           ;OverLoad_B1.c: 114: }
 11779  0246  2AC7               	goto	l9552
 11780  0247                     l9526:	
 11781                           
 11782                           ;OverLoad_B1.c: 115: else
 11783                           ;OverLoad_B1.c: 116: {
 11784                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11785  0247  086E               	movf	_Load,w
 11786  0248  3E3C               	addlw	60
 11787  0249  0086               	movwf	6
 11788  024A  3002               	movlw	2	; select bank4/5
 11789  024B  0087               	movwf	7
 11790  024C  0181               	clrf	1
 11791                           
 11792                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11793  024D  086E               	movf	_Load,w
 11794  024E  3E42               	addlw	66
 11795  024F  0086               	movwf	6
 11796  0250  3002               	movlw	2	; select bank4/5
 11797  0251  0087               	movwf	7
 11798  0252  300A               	movlw	10
 11799  0253  0201               	subwf	1,w
 11800  0254  1803               	skipnc
 11801  0255  2A5F               	goto	l9532
 11802                           
 11803                           ;OverLoad_B1.c: 119: {
 11804                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11805  0256  3001               	movlw	1
 11806  0257  00AD               	movwf	??_Load_Main
 11807  0258  086E               	movf	_Load,w
 11808  0259  3E42               	addlw	66
 11809  025A  0086               	movwf	6
 11810  025B  3002               	movlw	2	; select bank4/5
 11811  025C  0087               	movwf	7
 11812  025D  082D               	movf	??_Load_Main,w
 11813  025E  0781               	addwf	1,f
 11814  025F                     l9532:	
 11815                           
 11816                           ;OverLoad_B1.c: 121: }
 11817                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11818  025F  086E               	movf	_Load,w
 11819  0260  3E42               	addlw	66
 11820  0261  0086               	movwf	6
 11821  0262  3002               	movlw	2	; select bank4/5
 11822  0263  0087               	movwf	7
 11823  0264  300A               	movlw	10
 11824  0265  0201               	subwf	1,w
 11825  0266  1C03               	skipc
 11826  0267  2AC7               	goto	l9552
 11827                           
 11828                           ;OverLoad_B1.c: 123: {
 11829                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11830  0268  086E               	movf	_Load,w
 11831  0269  0086               	movwf	6
 11832  026A  3002               	movlw	2	; select bank4/5
 11833  026B  0087               	movwf	7
 11834  026C  1581               	bsf	1,3
 11835                           
 11836                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 11837  026D  01A2               	clrf	setDimmerLights_Clear@command
 11838  026E  0AA2               	incf	setDimmerLights_Clear@command,f
 11839  026F  3001               	movlw	1
 11840  0270  31A7  270C  3180   	fcall	_setDimmerLights_Clear
 11841                           
 11842                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 11843  0273  0020               	movlb	0	; select bank0
 11844  0274  086E               	movf	_Load,w
 11845  0275  3E46               	addlw	70
 11846  0276  0086               	movwf	6
 11847  0277  3002               	movlw	2	; select bank4/5
 11848  0278  0087               	movwf	7
 11849  0279  1C01               	btfss	1,0
 11850  027A  2A8F               	goto	l9544
 11851                           
 11852                           ;OverLoad_B1.c: 139: {
 11853                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 11854  027B  086E               	movf	_Load,w
 11855  027C  3E46               	addlw	70
 11856  027D  0086               	movwf	6
 11857  027E  3002               	movlw	2	; select bank4/5
 11858  027F  0087               	movwf	7
 11859  0280  1001               	bcf	1,0
 11860                           
 11861                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 11862  0281  086E               	movf	_Load,w
 11863  0282  3E2C               	addlw	44
 11864  0283  0086               	movwf	6
 11865  0284  3002               	movlw	2	; select bank4/5
 11866  0285  0087               	movwf	7
 11867  0286  086E               	movf	_Load,w
 11868  0287  3E06               	addlw	6
 11869  0288  0084               	movwf	4
 11870  0289  3002               	movlw	2	; select bank4/5
 11871  028A  0085               	movwf	5
 11872  028B  3F40               	moviw [0]fsr1
 11873  028C  3F80               	movwi [0]fsr0
 11874  028D  3F41               	moviw [1]fsr1
 11875  028E  3F81               	movwi [1]fsr0
 11876  028F                     l9544:	
 11877                           
 11878                           ;OverLoad_B1.c: 143: }
 11879                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 11880  028F  086E               	movf	_Load,w
 11881  0290  3E46               	addlw	70
 11882  0291  0086               	movwf	6
 11883  0292  3002               	movlw	2	; select bank4/5
 11884  0293  0087               	movwf	7
 11885  0294  1C81               	btfss	1,1
 11886  0295  2AC7               	goto	l9552
 11887                           
 11888                           ;OverLoad_B1.c: 146: {
 11889                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 11890  0296  086E               	movf	_Load,w
 11891  0297  3E46               	addlw	70
 11892  0298  0086               	movwf	6
 11893  0299  3002               	movlw	2	; select bank4/5
 11894  029A  0087               	movwf	7
 11895  029B  1081               	bcf	1,1
 11896                           
 11897                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 11898  029C  086E               	movf	_Load,w
 11899  029D  3E2C               	addlw	44
 11900  029E  0086               	movwf	6
 11901  029F  3002               	movlw	2	; select bank4/5
 11902  02A0  0087               	movwf	7
 11903  02A1  086E               	movf	_Load,w
 11904  02A2  3E06               	addlw	6
 11905  02A3  0084               	movwf	4
 11906  02A4  3002               	movlw	2	; select bank4/5
 11907  02A5  0085               	movwf	5
 11908  02A6  3F40               	moviw [0]fsr1
 11909  02A7  3F80               	movwi [0]fsr0
 11910  02A8  3F41               	moviw [1]fsr1
 11911  02A9  3F81               	movwi [1]fsr0
 11912                           
 11913                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x42*Load->LightsCount;
 11914  02AA  086E               	movf	_Load,w
 11915  02AB  3E3E               	addlw	62
 11916  02AC  0086               	movwf	6
 11917  02AD  3002               	movlw	2	; select bank4/5
 11918  02AE  0087               	movwf	7
 11919  02AF  0801               	movf	1,w
 11920  02B0  00AD               	movwf	??_Load_Main
 11921  02B1  01AE               	clrf	??_Load_Main+1
 11922  02B2  082D               	movf	??_Load_Main,w
 11923  02B3  00A0               	movwf	___wmul@multiplier
 11924  02B4  082E               	movf	??_Load_Main+1,w
 11925  02B5  00A1               	movwf	___wmul@multiplier+1
 11926  02B6  3042               	movlw	66
 11927  02B7  00A2               	movwf	___wmul@multiplicand
 11928  02B8  3000               	movlw	0
 11929  02B9  00A3               	movwf	___wmul@multiplicand+1
 11930  02BA  3198  20DA  3180   	fcall	___wmul
 11931  02BD  0020               	movlb	0	; select bank0
 11932  02BE  086E               	movf	_Load,w
 11933  02BF  3E36               	addlw	54
 11934  02C0  0086               	movwf	6
 11935  02C1  3002               	movlw	2	; select bank4/5
 11936  02C2  0087               	movwf	7
 11937  02C3  0820               	movf	?___wmul,w
 11938  02C4  3FC0               	movwi [0]fsr1
 11939  02C5  0821               	movf	?___wmul+1,w
 11940  02C6  3FC1               	movwi [1]fsr1
 11941  02C7                     l9552:	
 11942                           
 11943                           ;OverLoad_B1.c: 150: }
 11944                           ;OverLoad_B1.c: 151: }
 11945                           ;OverLoad_B1.c: 152: }
 11946                           ;OverLoad_B1.c: 153: }
 11947                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 11948  02C7  3199  217B  3180   	fcall	_setLoad_AH_AL_Restore
 11949                           
 11950                           ;OverLoad_B1.c: 156: Product->Data[2]=(Load->AD >> 8);
 11951  02CA  0020               	movlb	0	; select bank0
 11952  02CB  086E               	movf	_Load,w
 11953  02CC  3E2C               	addlw	44
 11954  02CD  0086               	movwf	6
 11955  02CE  3002               	movlw	2	; select bank4/5
 11956  02CF  0087               	movwf	7
 11957  02D0  3F40               	moviw [0]fsr1
 11958  02D1  00AD               	movwf	??_Load_Main
 11959  02D2  3F41               	moviw [1]fsr1
 11960  02D3  00AE               	movwf	??_Load_Main+1
 11961  02D4  082E               	movf	??_Load_Main+1,w
 11962  02D5  00AF               	movwf	??_Load_Main+2
 11963  02D6  086F               	movf	_Product,w
 11964  02D7  3E02               	addlw	2
 11965  02D8  0086               	movwf	6
 11966  02D9  3001               	movlw	1	; select bank2/3
 11967  02DA  0087               	movwf	7
 11968  02DB  082F               	movf	??_Load_Main+2,w
 11969  02DC  0081               	movwf	1
 11970                           
 11971                           ;OverLoad_B1.c: 157: Product->Data[3]=Load->AD;
 11972  02DD  086E               	movf	_Load,w
 11973  02DE  3E2C               	addlw	44
 11974  02DF  0086               	movwf	6
 11975  02E0  3002               	movlw	2	; select bank4/5
 11976  02E1  0087               	movwf	7
 11977  02E2  0801               	movf	1,w
 11978  02E3  00AD               	movwf	??_Load_Main
 11979  02E4  086F               	movf	_Product,w
 11980  02E5  3E03               	addlw	3
 11981  02E6  0086               	movwf	6
 11982  02E7  3001               	movlw	1	; select bank2/3
 11983  02E8  0087               	movwf	7
 11984  02E9  082D               	movf	??_Load_Main,w
 11985  02EA  0081               	movwf	1
 11986                           
 11987                           ;OverLoad_B1.c: 158: Product->Data[8]=Load->LightsCount;
 11988  02EB  086E               	movf	_Load,w
 11989  02EC  3E3E               	addlw	62
 11990  02ED  0086               	movwf	6
 11991  02EE  3002               	movlw	2	; select bank4/5
 11992  02EF  0087               	movwf	7
 11993  02F0  0801               	movf	1,w
 11994  02F1  00AD               	movwf	??_Load_Main
 11995  02F2  086F               	movf	_Product,w
 11996  02F3  3E08               	addlw	8
 11997  02F4  0086               	movwf	6
 11998  02F5  3001               	movlw	1	; select bank2/3
 11999  02F6  0087               	movwf	7
 12000  02F7  082D               	movf	??_Load_Main,w
 12001  02F8  0081               	movwf	1
 12002                           
 12003                           ;OverLoad_B1.c: 159: Product->Data[10]=Load->TotalLoad;
 12004  02F9  086E               	movf	_Load,w
 12005  02FA  3E06               	addlw	6
 12006  02FB  0086               	movwf	6
 12007  02FC  3002               	movlw	2	; select bank4/5
 12008  02FD  0087               	movwf	7
 12009  02FE  0801               	movf	1,w
 12010  02FF  00AD               	movwf	??_Load_Main
 12011  0300  086F               	movf	_Product,w
 12012  0301  3E0A               	addlw	10
 12013  0302  0086               	movwf	6
 12014  0303  3001               	movlw	1	; select bank2/3
 12015  0304  0087               	movwf	7
 12016  0305  082D               	movf	??_Load_Main,w
 12017  0306  0081               	movwf	1
 12018                           
 12019                           ;OverLoad_B1.c: 160: Product->Data[16]=(Load->JudgeValue >> 8);
 12020  0307  086E               	movf	_Load,w
 12021  0308  3E36               	addlw	54
 12022  0309  0086               	movwf	6
 12023  030A  3002               	movlw	2	; select bank4/5
 12024  030B  0087               	movwf	7
 12025  030C  3F40               	moviw [0]fsr1
 12026  030D  00AD               	movwf	??_Load_Main
 12027  030E  3F41               	moviw [1]fsr1
 12028  030F  00AE               	movwf	??_Load_Main+1
 12029  0310  082E               	movf	??_Load_Main+1,w
 12030  0311  00AF               	movwf	??_Load_Main+2
 12031  0312  086F               	movf	_Product,w
 12032  0313  3E10               	addlw	16
 12033  0314  0086               	movwf	6
 12034  0315  3001               	movlw	1	; select bank2/3
 12035  0316  0087               	movwf	7
 12036  0317  082F               	movf	??_Load_Main+2,w
 12037  0318  0081               	movwf	1
 12038                           
 12039                           ;OverLoad_B1.c: 161: Product->Data[17]=Load->JudgeValue;
 12040  0319  086E               	movf	_Load,w
 12041  031A  3E36               	addlw	54
 12042  031B  0086               	movwf	6
 12043  031C  3002               	movlw	2	; select bank4/5
 12044  031D  0087               	movwf	7
 12045  031E  0801               	movf	1,w
 12046  031F  00AD               	movwf	??_Load_Main
 12047  0320  086F               	movf	_Product,w
 12048  0321  3E11               	addlw	17
 12049  0322  0086               	movwf	6
 12050  0323  3001               	movlw	1	; select bank2/3
 12051  0324  0087               	movwf	7
 12052  0325  082D               	movf	??_Load_Main,w
 12053  0326  0081               	movwf	1
 12054                           
 12055                           ;OverLoad_B1.c: 162: Product->Data[18]=Load->ErrorStatus;
 12056  0327  086E               	movf	_Load,w
 12057  0328  3E05               	addlw	5
 12058  0329  0086               	movwf	6
 12059  032A  3002               	movlw	2	; select bank4/5
 12060  032B  0087               	movwf	7
 12061  032C  0801               	movf	1,w
 12062  032D  00AD               	movwf	??_Load_Main
 12063  032E  086F               	movf	_Product,w
 12064  032F  3E12               	addlw	18
 12065  0330  0086               	movwf	6
 12066  0331  3001               	movlw	1	; select bank2/3
 12067  0332  0087               	movwf	7
 12068  0333  082D               	movf	??_Load_Main,w
 12069  0334  0081               	movwf	1
 12070                           
 12071                           ;OverLoad_B1.c: 163: Product->Data[19]=Load->Count;
 12072  0335  086E               	movf	_Load,w
 12073  0336  3E3A               	addlw	58
 12074  0337  0086               	movwf	6
 12075  0338  3002               	movlw	2	; select bank4/5
 12076  0339  0087               	movwf	7
 12077  033A  0801               	movf	1,w
 12078  033B  00AD               	movwf	??_Load_Main
 12079  033C  086F               	movf	_Product,w
 12080  033D  3E13               	addlw	19
 12081  033E  0086               	movwf	6
 12082  033F  3001               	movlw	1	; select bank2/3
 12083  0340  0087               	movwf	7
 12084  0341  082D               	movf	??_Load_Main,w
 12085  0342  0081               	movwf	1
 12086                           
 12087                           ;OverLoad_B1.c: 166: }
 12088                           ;OverLoad_B1.c: 167: }
 12089  0343  0008               	return
 12090  0344                     l9570:	
 12091                           
 12092                           ;OverLoad_B1.c: 168: else
 12093                           ;OverLoad_B1.c: 169: {
 12094                           ;OverLoad_B1.c: 170: if(Load->GO)
 12095  0344  086E               	movf	_Load,w
 12096  0345  0086               	movwf	6
 12097  0346  3002               	movlw	2	; select bank4/5
 12098  0347  0087               	movwf	7
 12099  0348  1C81               	btfss	1,1
 12100  0349  2B6D               	goto	l9582
 12101                           
 12102                           ;OverLoad_B1.c: 171: {
 12103                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 12104  034A  086E               	movf	_Load,w
 12105  034B  0086               	movwf	6
 12106  034C  3002               	movlw	2	; select bank4/5
 12107  034D  0087               	movwf	7
 12108  034E  1901               	btfsc	1,2
 12109  034F  2B5A               	goto	l9576
 12110                           
 12111                           ;OverLoad_B1.c: 173: {
 12112                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 12113  0350  086E               	movf	_Load,w
 12114  0351  0086               	movwf	6
 12115  0352  3002               	movlw	2	; select bank4/5
 12116  0353  0087               	movwf	7
 12117  0354  1501               	bsf	1,2
 12118                           
 12119                           ;OverLoad_B1.c: 175: Load->Safe=0;
 12120  0355  086E               	movf	_Load,w
 12121  0356  0086               	movwf	6
 12122  0357  3002               	movlw	2	; select bank4/5
 12123  0358  0087               	movwf	7
 12124  0359  1181               	bcf	1,3
 12125  035A                     l9576:	
 12126                           
 12127                           ;OverLoad_B1.c: 176: }
 12128                           ;OverLoad_B1.c: 177: if(getTemp_Safe() && getPF_Safe())
 12129  035A  31A5  2537  3180   	fcall	_getTemp_Safe
 12130  035D  3A00               	xorlw	0
 12131  035E  1903               	skipnz
 12132  035F  0008               	return
 12133  0360  31A5  2530  3180   	fcall	_getPF_Safe
 12134  0363  3A00               	xorlw	0
 12135  0364  1903               	skipnz
 12136  0365  0008               	return
 12137                           
 12138                           ;OverLoad_B1.c: 178: {
 12139                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 12140  0366  0020               	movlb	0	; select bank0
 12141  0367  086E               	movf	_Load,w
 12142  0368  0086               	movwf	6
 12143  0369  3002               	movlw	2	; select bank4/5
 12144  036A  0087               	movwf	7
 12145  036B  1601               	bsf	1,4
 12146                           
 12147                           ;OverLoad_B1.c: 180: }
 12148                           ;OverLoad_B1.c: 181: }
 12149  036C  0008               	return
 12150  036D                     l9582:	
 12151                           
 12152                           ;OverLoad_B1.c: 182: else
 12153                           ;OverLoad_B1.c: 183: {
 12154                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 12155  036D  086E               	movf	_Load,w
 12156  036E  0086               	movwf	6
 12157  036F  3002               	movlw	2	; select bank4/5
 12158  0370  0087               	movwf	7
 12159  0371  1D01               	btfss	1,2
 12160  0372  0008               	return
 12161                           
 12162                           ;OverLoad_B1.c: 185: {
 12163                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 12164  0373  086E               	movf	_Load,w
 12165  0374  0086               	movwf	6
 12166  0375  3002               	movlw	2	; select bank4/5
 12167  0376  0087               	movwf	7
 12168  0377  1101               	bcf	1,2
 12169                           
 12170                           ;OverLoad_B1.c: 187: Load->Safe=1;
 12171  0378  086E               	movf	_Load,w
 12172  0379  0086               	movwf	6
 12173  037A  3002               	movlw	2	; select bank4/5
 12174  037B  0087               	movwf	7
 12175  037C  1581               	bsf	1,3
 12176                           
 12177                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 12178  037D  086E               	movf	_Load,w
 12179  037E  3E3C               	addlw	60
 12180  037F  0086               	movwf	6
 12181  0380  3002               	movlw	2	; select bank4/5
 12182  0381  0087               	movwf	7
 12183  0382  0181               	clrf	1
 12184                           
 12185                           ;OverLoad_B1.c: 189: Load->Count=0;
 12186  0383  086E               	movf	_Load,w
 12187  0384  3E3A               	addlw	58
 12188  0385  0086               	movwf	6
 12189  0386  3002               	movlw	2	; select bank4/5
 12190  0387  0087               	movwf	7
 12191  0388  0181               	clrf	1
 12192                           
 12193                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 12194  0389  086E               	movf	_Load,w
 12195  038A  3E06               	addlw	6
 12196  038B  0086               	movwf	6
 12197  038C  3002               	movlw	2	; select bank4/5
 12198  038D  0087               	movwf	7
 12199  038E  3000               	movlw	0
 12200  038F  3FC0               	movwi [0]fsr1
 12201  0390  3FC1               	movwi [1]fsr1
 12202                           
 12203                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 12204  0391  086E               	movf	_Load,w
 12205  0392  3E3F               	addlw	63
 12206  0393  0086               	movwf	6
 12207  0394  3002               	movlw	2	; select bank4/5
 12208  0395  0087               	movwf	7
 12209  0396  0181               	clrf	1
 12210                           
 12211                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 12212  0397  086E               	movf	_Load,w
 12213  0398  3E46               	addlw	70
 12214  0399  0086               	movwf	6
 12215  039A  3002               	movlw	2	; select bank4/5
 12216  039B  0087               	movwf	7
 12217  039C  1001               	bcf	1,0
 12218                           
 12219                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 12220  039D  086E               	movf	_Load,w
 12221  039E  3E46               	addlw	70
 12222  039F  0086               	movwf	6
 12223  03A0  3002               	movlw	2	; select bank4/5
 12224  03A1  0087               	movwf	7
 12225  03A2  1081               	bcf	1,1
 12226                           
 12227                           ;OverLoad_B1.c: 194: Load->AD=0;
 12228  03A3  086E               	movf	_Load,w
 12229  03A4  3E2C               	addlw	44
 12230  03A5  0086               	movwf	6
 12231  03A6  3002               	movlw	2	; select bank4/5
 12232  03A7  0087               	movwf	7
 12233  03A8  3000               	movlw	0
 12234  03A9  3FC0               	movwi [0]fsr1
 12235  03AA  3FC1               	movwi [1]fsr1
 12236                           
 12237                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 12238  03AB  3199  217B  3180   	fcall	_setLoad_AH_AL_Restore
 12239                           
 12240                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 12241  03AE  0020               	movlb	0	; select bank0
 12242  03AF  01A2               	clrf	setDimmerLights_Clear@command
 12243  03B0  0AA2               	incf	setDimmerLights_Clear@command,f
 12244  03B1  3001               	movlw	1
 12245  03B2  31A7  270C  3180   	fcall	_setDimmerLights_Clear
 12246                           
 12247                           ;OverLoad_B1.c: 209: Product->Data[2]=(Load->AD >> 8);
 12248  03B5  0020               	movlb	0	; select bank0
 12249  03B6  086E               	movf	_Load,w
 12250  03B7  3E2C               	addlw	44
 12251  03B8  0086               	movwf	6
 12252  03B9  3002               	movlw	2	; select bank4/5
 12253  03BA  0087               	movwf	7
 12254  03BB  3F40               	moviw [0]fsr1
 12255  03BC  00AD               	movwf	??_Load_Main
 12256  03BD  3F41               	moviw [1]fsr1
 12257  03BE  00AE               	movwf	??_Load_Main+1
 12258  03BF  082E               	movf	??_Load_Main+1,w
 12259  03C0  00AF               	movwf	??_Load_Main+2
 12260  03C1  086F               	movf	_Product,w
 12261  03C2  3E02               	addlw	2
 12262  03C3  0086               	movwf	6
 12263  03C4  3001               	movlw	1	; select bank2/3
 12264  03C5  0087               	movwf	7
 12265  03C6  082F               	movf	??_Load_Main+2,w
 12266  03C7  0081               	movwf	1
 12267                           
 12268                           ;OverLoad_B1.c: 210: Product->Data[3]=Load->AD;
 12269  03C8  086E               	movf	_Load,w
 12270  03C9  3E2C               	addlw	44
 12271  03CA  0086               	movwf	6
 12272  03CB  3002               	movlw	2	; select bank4/5
 12273  03CC  0087               	movwf	7
 12274  03CD  0801               	movf	1,w
 12275  03CE  00AD               	movwf	??_Load_Main
 12276  03CF  086F               	movf	_Product,w
 12277  03D0  3E03               	addlw	3
 12278  03D1  0086               	movwf	6
 12279  03D2  3001               	movlw	1	; select bank2/3
 12280  03D3  0087               	movwf	7
 12281  03D4  082D               	movf	??_Load_Main,w
 12282  03D5  0081               	movwf	1
 12283                           
 12284                           ;OverLoad_B1.c: 215: Product->Data[8]=Load->NumberCount;
 12285  03D6  086E               	movf	_Load,w
 12286  03D7  3E3F               	addlw	63
 12287  03D8  0086               	movwf	6
 12288  03D9  3002               	movlw	2	; select bank4/5
 12289  03DA  0087               	movwf	7
 12290  03DB  0801               	movf	1,w
 12291  03DC  00AD               	movwf	??_Load_Main
 12292  03DD  086F               	movf	_Product,w
 12293  03DE  3E08               	addlw	8
 12294  03DF  0086               	movwf	6
 12295  03E0  3001               	movlw	1	; select bank2/3
 12296  03E1  0087               	movwf	7
 12297  03E2  082D               	movf	??_Load_Main,w
 12298  03E3  0081               	movwf	1
 12299                           
 12300                           ;OverLoad_B1.c: 216: Product->Data[10]=Load->TotalLoad;
 12301  03E4  086E               	movf	_Load,w
 12302  03E5  3E06               	addlw	6
 12303  03E6  0086               	movwf	6
 12304  03E7  3002               	movlw	2	; select bank4/5
 12305  03E8  0087               	movwf	7
 12306  03E9  0801               	movf	1,w
 12307  03EA  00AD               	movwf	??_Load_Main
 12308  03EB  086F               	movf	_Product,w
 12309  03EC  3E0A               	addlw	10
 12310  03ED  0086               	movwf	6
 12311  03EE  3001               	movlw	1	; select bank2/3
 12312  03EF  0087               	movwf	7
 12313  03F0  082D               	movf	??_Load_Main,w
 12314  03F1  0081               	movwf	1
 12315                           
 12316                           ;OverLoad_B1.c: 217: Product->Data[16]=(Load->JudgeValue >> 8);
 12317  03F2  086E               	movf	_Load,w
 12318  03F3  3E36               	addlw	54
 12319  03F4  0086               	movwf	6
 12320  03F5  3002               	movlw	2	; select bank4/5
 12321  03F6  0087               	movwf	7
 12322  03F7  3F40               	moviw [0]fsr1
 12323  03F8  00AD               	movwf	??_Load_Main
 12324  03F9  3F41               	moviw [1]fsr1
 12325  03FA  00AE               	movwf	??_Load_Main+1
 12326  03FB  082E               	movf	??_Load_Main+1,w
 12327  03FC  00AF               	movwf	??_Load_Main+2
 12328  03FD  086F               	movf	_Product,w
 12329  03FE  3E10               	addlw	16
 12330  03FF  0086               	movwf	6
 12331  0400  3001               	movlw	1	; select bank2/3
 12332  0401  0087               	movwf	7
 12333  0402  082F               	movf	??_Load_Main+2,w
 12334  0403  0081               	movwf	1
 12335                           
 12336                           ;OverLoad_B1.c: 218: Product->Data[17]=Load->JudgeValue;
 12337  0404  086E               	movf	_Load,w
 12338  0405  3E36               	addlw	54
 12339  0406  0086               	movwf	6
 12340  0407  3002               	movlw	2	; select bank4/5
 12341  0408  0087               	movwf	7
 12342  0409  0801               	movf	1,w
 12343  040A  00AD               	movwf	??_Load_Main
 12344  040B  086F               	movf	_Product,w
 12345  040C  3E11               	addlw	17
 12346  040D  0086               	movwf	6
 12347  040E  3001               	movlw	1	; select bank2/3
 12348  040F  0087               	movwf	7
 12349  0410  082D               	movf	??_Load_Main,w
 12350  0411  0081               	movwf	1
 12351                           
 12352                           ;OverLoad_B1.c: 219: Product->Data[18]=Load->ErrorStatus;
 12353  0412  086E               	movf	_Load,w
 12354  0413  3E05               	addlw	5
 12355  0414  0086               	movwf	6
 12356  0415  3002               	movlw	2	; select bank4/5
 12357  0416  0087               	movwf	7
 12358  0417  0801               	movf	1,w
 12359  0418  00AD               	movwf	??_Load_Main
 12360  0419  086F               	movf	_Product,w
 12361  041A  3E12               	addlw	18
 12362  041B  0086               	movwf	6
 12363  041C  3001               	movlw	1	; select bank2/3
 12364  041D  0087               	movwf	7
 12365  041E  082D               	movf	??_Load_Main,w
 12366  041F  0081               	movwf	1
 12367                           
 12368                           ;OverLoad_B1.c: 220: Product->Data[19]=Load->Count;
 12369  0420  086E               	movf	_Load,w
 12370  0421  3E3A               	addlw	58
 12371  0422  0086               	movwf	6
 12372  0423  3002               	movlw	2	; select bank4/5
 12373  0424  0087               	movwf	7
 12374  0425  0801               	movf	1,w
 12375  0426  00AD               	movwf	??_Load_Main
 12376  0427  086F               	movf	_Product,w
 12377  0428  3E13               	addlw	19
 12378  0429  0086               	movwf	6
 12379  042A  3001               	movlw	1	; select bank2/3
 12380  042B  0087               	movwf	7
 12381  042C  082D               	movf	??_Load_Main,w
 12382  042D  0081               	movwf	1
 12383  042E  0008               	return
 12384  042F                     __end_of_Load_Main:	
 12385                           
 12386                           	psect	text60
 12387  1F06                     __ptext60:	
 12388 ;; *************** function _setLoad_Exceptions *****************
 12389 ;; Defined at:
 12390 ;;		line 228 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;  command         1    wreg     unsigned char 
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  command         1   12[BANK0 ] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;		None               void
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        2 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    8
 12411 ;; This function calls:
 12412 ;;		_DimmerLights_Exceptions
 12413 ;;		_setLED
 12414 ;;		_setRF_Enable
 12415 ;;		_setSw_Enable
 12416 ;; This function is called by:
 12417 ;;		_Load_Main
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           
 12422                           ;psect for function _setLoad_Exceptions
 12423  1F06                     _setLoad_Exceptions:	
 12424                           
 12425                           ;incstack = 0
 12426                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12427                           ;setLoad_Exceptions@command stored from wreg
 12428  1F06  0020               	movlb	0	; select bank0
 12429  1F07  00AC               	movwf	setLoad_Exceptions@command
 12430                           
 12431                           ;OverLoad_B1.c: 230: Load->ERROR=command;
 12432  1F08  086E               	movf	_Load,w
 12433  1F09  0086               	movwf	6
 12434  1F0A  3002               	movlw	2	; select bank4/5
 12435  1F0B  0087               	movwf	7
 12436  1F0C  082C               	movf	setLoad_Exceptions@command,w
 12437  1F0D  1281               	bcf	1,5
 12438  1F0E  1D03               	skipz
 12439  1F0F  1681               	bsf	1,5
 12440                           
 12441                           ;OverLoad_B1.c: 231: Load->Safe=(~command) & 0x01;
 12442  1F10  092C               	comf	setLoad_Exceptions@command,w
 12443  1F11  3901               	andlw	1
 12444  1F12  00AB               	movwf	??_setLoad_Exceptions
 12445  1F13  086E               	movf	_Load,w
 12446  1F14  0086               	movwf	6
 12447  1F15  3002               	movlw	2	; select bank4/5
 12448  1F16  0087               	movwf	7
 12449  1F17  0DAB               	rlf	??_setLoad_Exceptions,f
 12450  1F18  0DAB               	rlf	??_setLoad_Exceptions,f
 12451  1F19  0DAB               	rlf	??_setLoad_Exceptions,f
 12452  1F1A  0801               	movf	1,w
 12453  1F1B  062B               	xorwf	??_setLoad_Exceptions,w
 12454  1F1C  39F7               	andlw	-9
 12455  1F1D  062B               	xorwf	??_setLoad_Exceptions,w
 12456  1F1E  0081               	movwf	1
 12457                           
 12458                           ;OverLoad_B1.c: 232: Load->ErrorStatus=command;
 12459  1F1F  082C               	movf	setLoad_Exceptions@command,w
 12460  1F20  00AB               	movwf	??_setLoad_Exceptions
 12461  1F21  086E               	movf	_Load,w
 12462  1F22  3E05               	addlw	5
 12463  1F23  0086               	movwf	6
 12464  1F24  3002               	movlw	2	; select bank4/5
 12465  1F25  0087               	movwf	7
 12466  1F26  082B               	movf	??_setLoad_Exceptions,w
 12467  1F27  0081               	movwf	1
 12468                           
 12469                           ;OverLoad_B1.c: 234: if(command)
 12470  1F28  082C               	movf	setLoad_Exceptions@command,w
 12471  1F29  1903               	btfsc	3,2
 12472  1F2A  2F36               	goto	l1815
 12473                           
 12474                           ;OverLoad_B1.c: 235: {
 12475                           ;OverLoad_B1.c: 236: DimmerLights_Exceptions(2);
 12476  1F2B  3002               	movlw	2
 12477  1F2C  3190  2052  319F   	fcall	_DimmerLights_Exceptions
 12478                           
 12479                           ;OverLoad_B1.c: 238: setLED(2,1);
 12480  1F2F  0020               	movlb	0	; select bank0
 12481  1F30  01A2               	clrf	setLED@command
 12482  1F31  0AA2               	incf	setLED@command,f
 12483  1F32  3002               	movlw	2
 12484  1F33  3191  2163  319F   	fcall	_setLED
 12485  1F36                     l1815:	
 12486                           
 12487                           ;OverLoad_B1.c: 240: }
 12488                           ;OverLoad_B1.c: 241: setLED(99,command+10);
 12489  1F36  0020               	movlb	0	; select bank0
 12490  1F37  082C               	movf	setLoad_Exceptions@command,w
 12491  1F38  3E0A               	addlw	10
 12492  1F39  00AB               	movwf	??_setLoad_Exceptions
 12493  1F3A  082B               	movf	??_setLoad_Exceptions,w
 12494  1F3B  00A2               	movwf	setLED@command
 12495  1F3C  3063               	movlw	99
 12496  1F3D  3191  2163  319F   	fcall	_setLED
 12497                           
 12498                           ;OverLoad_B1.c: 243: setSw_Enable((~command) & 0x01);
 12499  1F40  0020               	movlb	0	; select bank0
 12500  1F41  092C               	comf	setLoad_Exceptions@command,w
 12501  1F42  3901               	andlw	1
 12502  1F43  31A6  26CD  319F   	fcall	_setSw_Enable
 12503                           
 12504                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 12505  1F46  0020               	movlb	0	; select bank0
 12506  1F47  092C               	comf	setLoad_Exceptions@command,w
 12507  1F48  3901               	andlw	1
 12508  1F49  00AB               	movwf	??_setLoad_Exceptions
 12509  1F4A  082B               	movf	??_setLoad_Exceptions,w
 12510  1F4B  00A2               	movwf	setRF_Enable@command
 12511  1F4C  3001               	movlw	1
 12512  1F4D  319A  2281         	fcall	_setRF_Enable
 12513  1F4F  0008               	return
 12514  1F50                     __end_of_setLoad_Exceptions:	
 12515                           
 12516                           	psect	text61
 12517  26CD                     __ptext61:	
 12518 ;; *************** function _setSw_Enable *****************
 12519 ;; Defined at:
 12520 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;  command         1    wreg     unsigned char 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  command         1    2[BANK0 ] unsigned char 
 12525 ;; Return value:  Size  Location     Type
 12526 ;;		None               void
 12527 ;; Registers used:
 12528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;Total ram usage:        1 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    5
 12541 ;; This function calls:
 12542 ;;		_SwPointSelect
 12543 ;; This function is called by:
 12544 ;;		_MainT
 12545 ;;		_setLoad_Exceptions
 12546 ;;		_setOverTemp_Exceptions
 12547 ;;		_setPowerFault_Exceptions
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _setSw_Enable
 12553  26CD                     _setSw_Enable:	
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12557                           ;setSw_Enable@command stored from wreg
 12558  26CD  0020               	movlb	0	; select bank0
 12559  26CE  00A2               	movwf	setSw_Enable@command
 12560                           
 12561                           ;Switch_B1.c: 90: SwPointSelect(1);
 12562  26CF  3001               	movlw	1
 12563  26D0  31A5  2595         	fcall	_SwPointSelect
 12564                           
 12565                           ;Switch_B1.c: 91: Sw->Enable=command;
 12566  26D2  0020               	movlb	0	; select bank0
 12567  26D3  086D               	movf	_Sw,w
 12568  26D4  0086               	movwf	6
 12569  26D5  3001               	movlw	1	; select bank2/3
 12570  26D6  0087               	movwf	7
 12571  26D7  0822               	movf	setSw_Enable@command,w
 12572  26D8  1001               	bcf	1,0
 12573  26D9  1D03               	skipz
 12574  26DA  1401               	bsf	1,0
 12575  26DB  0008               	return
 12576  26DC                     __end_of_setSw_Enable:	
 12577                           
 12578                           	psect	text62
 12579  1A81                     __ptext62:	
 12580 ;; *************** function _setRF_Enable *****************
 12581 ;; Defined at:
 12582 ;;		line 178 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;  rf              1    wreg     unsigned char 
 12585 ;;  command         1    2[BANK0 ] unsigned char 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;  rf              1    3[BANK0 ] unsigned char 
 12588 ;; Return value:  Size  Location     Type
 12589 ;;		None               void
 12590 ;; Registers used:
 12591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12597 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;Total ram usage:        2 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; Hardware stack levels required when called:    5
 12604 ;; This function calls:
 12605 ;;		_RfPointSelect
 12606 ;;		_setINT_GO
 12607 ;; This function is called by:
 12608 ;;		_MainT
 12609 ;;		_setLoad_Exceptions
 12610 ;;		_setOverTemp_Exceptions
 12611 ;;		_setPowerFault_Exceptions
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           
 12616                           ;psect for function _setRF_Enable
 12617  1A81                     _setRF_Enable:	
 12618                           
 12619                           ;incstack = 0
 12620                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12621                           ;setRF_Enable@rf stored from wreg
 12622  1A81  0020               	movlb	0	; select bank0
 12623  1A82  00A3               	movwf	setRF_Enable@rf
 12624                           
 12625                           ;RF_Control_B1.c: 180: RfPointSelect(rf);
 12626  1A83  0823               	movf	setRF_Enable@rf,w
 12627  1A84  31A5  25A0  319A   	fcall	_RfPointSelect
 12628                           
 12629                           ;RF_Control_B1.c: 181: RF->Enable=command;
 12630  1A87  087B               	movf	_RF,w
 12631  1A88  0086               	movwf	6
 12632  1A89  0187               	clrf	7
 12633  1A8A  0020               	movlb	0	; select bank0
 12634  1A8B  0822               	movf	setRF_Enable@command,w
 12635  1A8C  1001               	bcf	1,0
 12636  1A8D  1D03               	skipz
 12637  1A8E  1401               	bsf	1,0
 12638                           
 12639                           ;RF_Control_B1.c: 182: RF->Learn=0;
 12640  1A8F  087B               	movf	_RF,w
 12641  1A90  0086               	movwf	6
 12642  1A91  0187               	clrf	7
 12643  1A92  1301               	bcf	1,6
 12644                           
 12645                           ;RF_Control_B1.c: 183: RF->TransceiveGO=0;
 12646  1A93  087B               	movf	_RF,w
 12647  1A94  0086               	movwf	6
 12648  1A95  0187               	clrf	7
 12649  1A96  1101               	bcf	1,2
 12650                           
 12651                           ;RF_Control_B1.c: 184: RF->RxStatus=0;
 12652  1A97  087B               	movf	_RF,w
 12653  1A98  0086               	movwf	6
 12654  1A99  0187               	clrf	7
 12655  1A9A  1181               	bcf	1,3
 12656                           
 12657                           ;RF_Control_B1.c: 185: RF->ReceiveGO=0;
 12658  1A9B  087B               	movf	_RF,w
 12659  1A9C  0086               	movwf	6
 12660  1A9D  0187               	clrf	7
 12661  1A9E  1081               	bcf	1,1
 12662                           
 12663                           ;RF_Control_B1.c: 186: RF->DebounceTime=0;
 12664  1A9F  0A7B               	incf	_RF,w
 12665  1AA0  0086               	movwf	6
 12666  1AA1  0187               	clrf	7
 12667  1AA2  0181               	clrf	1
 12668                           
 12669                           ;RF_Control_B1.c: 187: RF->Debounce=0;
 12670  1AA3  087B               	movf	_RF,w
 12671  1AA4  0086               	movwf	6
 12672  1AA5  0187               	clrf	7
 12673  1AA6  1281               	bcf	1,5
 12674                           
 12675                           ;RF_Control_B1.c: 188: setINT_GO(0);
 12676  1AA7  3000               	movlw	0
 12677  1AA8  31A5  254E         	fcall	_setINT_GO
 12678  1AAA  0008               	return
 12679  1AAB                     __end_of_setRF_Enable:	
 12680                           
 12681                           	psect	text63
 12682  254E                     __ptext63:	
 12683 ;; *************** function _setINT_GO *****************
 12684 ;; Defined at:
 12685 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;  command         1    wreg     unsigned char 
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  command         1    0[BANK0 ] unsigned char 
 12690 ;; Return value:  Size  Location     Type
 12691 ;;		None               void
 12692 ;; Registers used:
 12693 ;;		wreg
 12694 ;; Tracked objects:
 12695 ;;		On entry : 0/0
 12696 ;;		On exit  : 0/0
 12697 ;;		Unchanged: 0/0
 12698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;Total ram usage:        1 bytes
 12704 ;; Hardware stack levels used:    1
 12705 ;; Hardware stack levels required when called:    4
 12706 ;; This function calls:
 12707 ;;		Nothing
 12708 ;; This function is called by:
 12709 ;;		_setRF_Main
 12710 ;;		_setRF_Enable
 12711 ;;		_RF_RxDisable
 12712 ;; This function uses a non-reentrant model
 12713 ;;
 12714                           
 12715                           
 12716                           ;psect for function _setINT_GO
 12717  254E                     _setINT_GO:	
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _setINT_GO: [wreg]
 12721                           ;setINT_GO@command stored from wreg
 12722  254E  0020               	movlb	0	; select bank0
 12723  254F  00A0               	movwf	setINT_GO@command
 12724                           
 12725                           ;MCU_16f1518_B1.c: 237: INTF=0;
 12726  2550  108B               	bcf	11,1	;volatile
 12727                           
 12728                           ;MCU_16f1518_B1.c: 238: INTE=command;
 12729  2551  1C20               	btfss	setINT_GO@command,0
 12730  2552  2D55               	goto	u7750
 12731  2553  160B               	bsf	11,4	;volatile
 12732  2554  0008               	return
 12733  2555                     u7750:	
 12734  2555  120B               	bcf	11,4	;volatile
 12735  2556  0008               	return
 12736  2557                     __end_of_setINT_GO:	
 12737                           
 12738                           	psect	text64
 12739  1052                     __ptext64:	
 12740 ;; *************** function _DimmerLights_Exceptions *****************
 12741 ;; Defined at:
 12742 ;;		line 237 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;  status          1    wreg     unsigned char 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  status          1   10[BANK0 ] unsigned char 
 12747 ;; Return value:  Size  Location     Type
 12748 ;;		None               void
 12749 ;; Registers used:
 12750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;Total ram usage:        1 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    7
 12763 ;; This function calls:
 12764 ;;		_getDimmerLights_StatusFlag
 12765 ;;		_setBuz
 12766 ;;		_setDimmerLights_ERROR
 12767 ;;		_setDimmerLights_TriggerERROR
 12768 ;; This function is called by:
 12769 ;;		_setLoad_Exceptions
 12770 ;;		_setOverTemp_Exceptions
 12771 ;;		_setPowerFault_Exceptions
 12772 ;; This function uses a non-reentrant model
 12773 ;;
 12774                           
 12775                           
 12776                           ;psect for function _DimmerLights_Exceptions
 12777  1052                     _DimmerLights_Exceptions:	
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12781                           ;DimmerLights_Exceptions@status stored from wreg
 12782  1052  0020               	movlb	0	; select bank0
 12783  1053  00AA               	movwf	DimmerLights_Exceptions@status
 12784                           
 12785                           ;Dimmer_B1.c: 239: if(status == 1)
 12786  1054  082A               	movf	DimmerLights_Exceptions@status,w
 12787  1055  3A01               	xorlw	1
 12788  1056  1D03               	skipz
 12789  1057  2868               	goto	l8440
 12790                           
 12791                           ;Dimmer_B1.c: 240: {
 12792                           ;Dimmer_B1.c: 241: if(getDimmerLights_StatusFlag())
 12793  1058  31A6  261F  3190   	fcall	_getDimmerLights_StatusFlag
 12794  105B  3A00               	xorlw	0
 12795  105C  1903               	skipnz
 12796  105D  2880               	goto	l8446
 12797                           
 12798                           ;Dimmer_B1.c: 242: {
 12799                           ;Dimmer_B1.c: 243: setBuz(10,300);
 12800  105E  302C               	movlw	44
 12801  105F  0020               	movlb	0	; select bank0
 12802  1060  00A6               	movwf	setBuz@time
 12803  1061  3001               	movlw	1
 12804  1062  00A7               	movwf	setBuz@time+1
 12805  1063  300A               	movlw	10
 12806  1064  3195  2589  3190   	fcall	_setBuz
 12807  1067  2880               	goto	l8446
 12808  1068                     l8440:	
 12809                           ;Dimmer_B1.c: 255: }
 12810                           
 12811                           ;Dimmer_B1.c: 244: }
 12812                           ;Dimmer_B1.c: 247: setDimmerLights_ERROR(1);
 12813                           
 12814                           
 12815                           ;Dimmer_B1.c: 256: else if(status == 2)
 12816  1068  0020               	movlb	0	; select bank0
 12817  1069  082A               	movf	DimmerLights_Exceptions@status,w
 12818  106A  3A02               	xorlw	2
 12819  106B  1D03               	skipz
 12820  106C  287B               	goto	l8444
 12821                           
 12822                           ;Dimmer_B1.c: 257: {
 12823                           ;Dimmer_B1.c: 258: setBuz(5,300);
 12824  106D  302C               	movlw	44
 12825  106E  00A6               	movwf	setBuz@time
 12826  106F  3001               	movlw	1
 12827  1070  00A7               	movwf	setBuz@time+1
 12828  1071  3005               	movlw	5
 12829  1072  3195  2589  3190   	fcall	_setBuz
 12830                           
 12831                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(Dimmer->Load);
 12832  1075  0021               	movlb	1	; select bank1
 12833  1076  0A39               	incf	_Dimmer^(0+128),w
 12834  1077  0086               	movwf	6
 12835  1078  0187               	clrf	7
 12836  1079  0801               	movf	1,w
 12837  107A  2881               	goto	L10
 12838  107B                     l8444:	
 12839                           ;Dimmer_B1.c: 260: }
 12840                           
 12841                           
 12842                           ;Dimmer_B1.c: 261: else if(status == 3)
 12843  107B  0020               	movlb	0	; select bank0
 12844  107C  082A               	movf	DimmerLights_Exceptions@status,w
 12845  107D  3A03               	xorlw	3
 12846  107E  1D03               	skipz
 12847  107F  2884               	goto	l864
 12848  1080                     l8446:	
 12849                           
 12850                           ;Dimmer_B1.c: 262: {
 12851                           ;Dimmer_B1.c: 264: setDimmerLights_ERROR(1);
 12852  1080  3001               	movlw	1
 12853  1081                     L10:	
 12854  1081  319F  2750  3190   	fcall	_setDimmerLights_ERROR
 12855  1084                     l864:	
 12856                           
 12857                           ;Dimmer_B1.c: 272: }
 12858                           ;Dimmer_B1.c: 275: setDimmerLights_TriggerERROR(1,0);
 12859  1084  0020               	movlb	0	; select bank0
 12860  1085  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12861  1086  3001               	movlw	1
 12862  1087  3188  2001  3190   	fcall	_setDimmerLights_TriggerERROR
 12863                           
 12864                           ;Dimmer_B1.c: 284: if(TMain->SelfTest == 0)
 12865  108A  087D               	movf	_TMain,w
 12866  108B  3E03               	addlw	3
 12867  108C  0086               	movwf	6
 12868  108D  3001               	movlw	1	; select bank2/3
 12869  108E  0087               	movwf	7
 12870  108F  1801               	btfsc	1,0
 12871  1090  0008               	return
 12872                           
 12873                           ;Dimmer_B1.c: 285: {
 12874                           ;Dimmer_B1.c: 286: TMain->i=0;
 12875  1091  087D               	movf	_TMain,w
 12876  1092  3E0E               	addlw	14
 12877  1093  0086               	movwf	6
 12878  1094  3001               	movlw	1	; select bank2/3
 12879  1095  0087               	movwf	7
 12880  1096  1001               	bcf	1,0
 12881                           
 12882                           ;Dimmer_B1.c: 287: TMain->j=0;
 12883  1097  087D               	movf	_TMain,w
 12884  1098  3E0E               	addlw	14
 12885  1099  0086               	movwf	6
 12886  109A  3001               	movlw	1	; select bank2/3
 12887  109B  0087               	movwf	7
 12888  109C  1081               	bcf	1,1
 12889                           
 12890                           ;Dimmer_B1.c: 288: TMain->k=1;
 12891  109D  087D               	movf	_TMain,w
 12892  109E  3E0E               	addlw	14
 12893  109F  0086               	movwf	6
 12894  10A0  3001               	movlw	1	; select bank2/3
 12895  10A1  0087               	movwf	7
 12896  10A2  1501               	bsf	1,2
 12897                           
 12898                           ;Dimmer_B1.c: 289: TMain->Count2=0;
 12899  10A3  087D               	movf	_TMain,w
 12900  10A4  3E08               	addlw	8
 12901  10A5  0086               	movwf	6
 12902  10A6  3001               	movlw	1	; select bank2/3
 12903  10A7  0087               	movwf	7
 12904  10A8  3000               	movlw	0
 12905  10A9  3FC0               	movwi [0]fsr1
 12906  10AA  3FC1               	movwi [1]fsr1
 12907  10AB  0008               	return
 12908  10AC                     __end_of_DimmerLights_Exceptions:	
 12909                           
 12910                           	psect	text65
 12911  0801                     __ptext65:	
 12912 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12913 ;; Defined at:
 12914 ;;		line 311 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  lights          1    wreg     unsigned char 
 12917 ;;  command         1    2[BANK0 ] unsigned char 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;  lights          1    3[BANK0 ] unsigned char 
 12920 ;; Return value:  Size  Location     Type
 12921 ;;		None               void
 12922 ;; Registers used:
 12923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12924 ;; Tracked objects:
 12925 ;;		On entry : 0/0
 12926 ;;		On exit  : 0/0
 12927 ;;		Unchanged: 0/0
 12928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12929 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;Total ram usage:        2 bytes
 12934 ;; Hardware stack levels used:    1
 12935 ;; Hardware stack levels required when called:    5
 12936 ;; This function calls:
 12937 ;;		_DimmerLightsPointSelect
 12938 ;; This function is called by:
 12939 ;;		_DimmerLights_Exceptions
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           
 12944                           ;psect for function _setDimmerLights_TriggerERROR
 12945  0801                     _setDimmerLights_TriggerERROR:	
 12946                           
 12947                           ;incstack = 0
 12948                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12949                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12950  0801  0020               	movlb	0	; select bank0
 12951  0802  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12952                           
 12953                           ;Dimmer_B1.c: 313: DimmerLightsPointSelect(lights);
 12954  0803  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12955  0804  31A5  258A         	fcall	_DimmerLightsPointSelect
 12956                           
 12957                           ;Dimmer_B1.c: 314: DimmerLights->Trigger=command;
 12958  0806  0020               	movlb	0	; select bank0
 12959  0807  086C               	movf	_DimmerLights,w
 12960  0808  3E09               	addlw	9
 12961  0809  0086               	movwf	6
 12962  080A  3001               	movlw	1	; select bank2/3
 12963  080B  0087               	movwf	7
 12964  080C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12965  080D  1081               	bcf	1,1
 12966  080E  1D03               	skipz
 12967  080F  1481               	bsf	1,1
 12968                           
 12969                           ;Dimmer_B1.c: 315: DimmerLights->Switch=command;
 12970  0810  086C               	movf	_DimmerLights,w
 12971  0811  3E09               	addlw	9
 12972  0812  0086               	movwf	6
 12973  0813  3001               	movlw	1	; select bank2/3
 12974  0814  0087               	movwf	7
 12975  0815  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12976  0816  1001               	bcf	1,0
 12977  0817  1D03               	skipz
 12978  0818  1401               	bsf	1,0
 12979                           
 12980                           ;Dimmer_B1.c: 316: DimmerLights->TriggerAdj=command;
 12981  0819  086C               	movf	_DimmerLights,w
 12982  081A  3E09               	addlw	9
 12983  081B  0086               	movwf	6
 12984  081C  3001               	movlw	1	; select bank2/3
 12985  081D  0087               	movwf	7
 12986  081E  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12987  081F  1181               	bcf	1,3
 12988  0820  1D03               	skipz
 12989  0821  1581               	bsf	1,3
 12990                           
 12991                           ;Dimmer_B1.c: 317: DimmerLights->AdjGo=command;
 12992  0822  086C               	movf	_DimmerLights,w
 12993  0823  3E09               	addlw	9
 12994  0824  0086               	movwf	6
 12995  0825  3001               	movlw	1	; select bank2/3
 12996  0826  0087               	movwf	7
 12997  0827  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12998  0828  1101               	bcf	1,2
 12999  0829  1D03               	skipz
 13000  082A  1501               	bsf	1,2
 13001  082B  0008               	return
 13002  082C                     __end_of_setDimmerLights_TriggerERROR:	
 13003                           
 13004                           	psect	text66
 13005  1F50                     __ptext66:	
 13006 ;; *************** function _setDimmerLights_ERROR *****************
 13007 ;; Defined at:
 13008 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13009 ;; Parameters:    Size  Location     Type
 13010 ;;  lights          1    wreg     unsigned char 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  lights          1    5[BANK0 ] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;		None               void
 13015 ;; Registers used:
 13016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;Total ram usage:        2 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    6
 13029 ;; This function calls:
 13030 ;;		_DimmerLightsPointSelect
 13031 ;;		_setLED
 13032 ;;		_setLoad_StatusOff
 13033 ;;		_setRFSW_Status
 13034 ;;		_setSw_Status
 13035 ;; This function is called by:
 13036 ;;		_DimmerLights_Exceptions
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function _setDimmerLights_ERROR
 13042  1F50                     _setDimmerLights_ERROR:	
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13046                           ;setDimmerLights_ERROR@lights stored from wreg
 13047  1F50  0020               	movlb	0	; select bank0
 13048  1F51  00A5               	movwf	setDimmerLights_ERROR@lights
 13049                           
 13050                           ;Dimmer_B1.c: 295: DimmerLightsPointSelect(lights);
 13051  1F52  0825               	movf	setDimmerLights_ERROR@lights,w
 13052  1F53  31A5  258A  319F   	fcall	_DimmerLightsPointSelect
 13053                           
 13054                           ;Dimmer_B1.c: 296: if(DimmerLights->Status)
 13055  1F56  0020               	movlb	0	; select bank0
 13056  1F57  086C               	movf	_DimmerLights,w
 13057  1F58  0086               	movwf	6
 13058  1F59  3001               	movlw	1	; select bank2/3
 13059  1F5A  0087               	movwf	7
 13060  1F5B  1E81               	btfss	1,5
 13061  1F5C  0008               	return
 13062                           
 13063                           ;Dimmer_B1.c: 297: {
 13064                           ;Dimmer_B1.c: 298: DimmerLights->Signal=0;
 13065  1F5D  086C               	movf	_DimmerLights,w
 13066  1F5E  0086               	movwf	6
 13067  1F5F  3001               	movlw	1	; select bank2/3
 13068  1F60  0087               	movwf	7
 13069  1F61  1081               	bcf	1,1
 13070                           
 13071                           ;Dimmer_B1.c: 299: DimmerLights->AdjFlag=0;
 13072  1F62  086C               	movf	_DimmerLights,w
 13073  1F63  0086               	movwf	6
 13074  1F64  3001               	movlw	1	; select bank2/3
 13075  1F65  0087               	movwf	7
 13076  1F66  1181               	bcf	1,3
 13077                           
 13078                           ;Dimmer_B1.c: 300: DimmerLights->AdjStatus=0;
 13079  1F67  086C               	movf	_DimmerLights,w
 13080  1F68  0086               	movwf	6
 13081  1F69  3001               	movlw	1	; select bank2/3
 13082  1F6A  0087               	movwf	7
 13083  1F6B  1201               	bcf	1,4
 13084                           
 13085                           ;Dimmer_B1.c: 301: DimmerLights->StatusFlag=0;
 13086  1F6C  086C               	movf	_DimmerLights,w
 13087  1F6D  0086               	movwf	6
 13088  1F6E  3001               	movlw	1	; select bank2/3
 13089  1F6F  0087               	movwf	7
 13090  1F70  1301               	bcf	1,6
 13091                           
 13092                           ;Dimmer_B1.c: 302: DimmerLights->DimmingTimeValue=3;
 13093  1F71  3003               	movlw	3
 13094  1F72  00A4               	movwf	??_setDimmerLights_ERROR
 13095  1F73  086C               	movf	_DimmerLights,w
 13096  1F74  3E02               	addlw	2
 13097  1F75  0086               	movwf	6
 13098  1F76  3001               	movlw	1	; select bank2/3
 13099  1F77  0087               	movwf	7
 13100  1F78  0824               	movf	??_setDimmerLights_ERROR,w
 13101  1F79  0081               	movwf	1
 13102                           
 13103                           ;Dimmer_B1.c: 303: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13104  1F7A  086C               	movf	_DimmerLights,w
 13105  1F7B  3E06               	addlw	6
 13106  1F7C  0086               	movwf	6
 13107  1F7D  3001               	movlw	1	; select bank2/3
 13108  1F7E  0087               	movwf	7
 13109  1F7F  0801               	movf	1,w
 13110  1F80  00A4               	movwf	??_setDimmerLights_ERROR
 13111  1F81  086C               	movf	_DimmerLights,w
 13112  1F82  3E04               	addlw	4
 13113  1F83  0086               	movwf	6
 13114  1F84  3001               	movlw	1	; select bank2/3
 13115  1F85  0087               	movwf	7
 13116  1F86  0824               	movf	??_setDimmerLights_ERROR,w
 13117  1F87  0081               	movwf	1
 13118                           
 13119                           ;Dimmer_B1.c: 304: Dimmer->Detect=1;
 13120  1F88  0021               	movlb	1	; select bank1
 13121  1F89  0839               	movf	_Dimmer^(0+128),w
 13122  1F8A  0086               	movwf	6
 13123  1F8B  0187               	clrf	7
 13124  1F8C  1401               	bsf	1,0
 13125                           
 13126                           ;Dimmer_B1.c: 305: setLoad_StatusOff(lights,1);
 13127  1F8D  0020               	movlb	0	; select bank0
 13128  1F8E  01A0               	clrf	setLoad_StatusOff@command
 13129  1F8F  0AA0               	incf	setLoad_StatusOff@command,f
 13130  1F90  0825               	movf	setDimmerLights_ERROR@lights,w
 13131  1F91  319B  2367  319F   	fcall	_setLoad_StatusOff
 13132                           
 13133                           ;Dimmer_B1.c: 306: setLED(lights,1);
 13134  1F94  0020               	movlb	0	; select bank0
 13135  1F95  01A2               	clrf	setLED@command
 13136  1F96  0AA2               	incf	setLED@command,f
 13137  1F97  0825               	movf	setDimmerLights_ERROR@lights,w
 13138  1F98  3191  2163  319F   	fcall	_setLED
 13139                           
 13140                           ;Dimmer_B1.c: 307: setSw_Status(lights,0);
 13141  1F9B  0020               	movlb	0	; select bank0
 13142  1F9C  01A2               	clrf	setSw_Status@command
 13143  1F9D  0825               	movf	setDimmerLights_ERROR@lights,w
 13144  1F9E  31A6  26BE  319F   	fcall	_setSw_Status
 13145                           
 13146                           ;Dimmer_B1.c: 308: setRFSW_Status(lights,0);
 13147  1FA1  0020               	movlb	0	; select bank0
 13148  1FA2  01A2               	clrf	setRFSW_Status@command
 13149  1FA3  0825               	movf	setDimmerLights_ERROR@lights,w
 13150  1FA4  31A6  26AF         	fcall	_setRFSW_Status
 13151  1FA6  0008               	return
 13152  1FA7                     __end_of_setDimmerLights_ERROR:	
 13153                           
 13154                           	psect	text67
 13155  270C                     __ptext67:	
 13156 ;; *************** function _setDimmerLights_Clear *****************
 13157 ;; Defined at:
 13158 ;;		line 447 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;  lights          1    wreg     unsigned char 
 13161 ;;  command         1    2[BANK0 ] unsigned char 
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;  lights          1    3[BANK0 ] unsigned char 
 13164 ;; Return value:  Size  Location     Type
 13165 ;;		None               void
 13166 ;; Registers used:
 13167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13168 ;; Tracked objects:
 13169 ;;		On entry : 0/0
 13170 ;;		On exit  : 0/0
 13171 ;;		Unchanged: 0/0
 13172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13173 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;Total ram usage:        2 bytes
 13178 ;; Hardware stack levels used:    1
 13179 ;; Hardware stack levels required when called:    5
 13180 ;; This function calls:
 13181 ;;		_DimmerLightsPointSelect
 13182 ;; This function is called by:
 13183 ;;		_Load_Main
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           
 13188                           ;psect for function _setDimmerLights_Clear
 13189  270C                     _setDimmerLights_Clear:	
 13190                           
 13191                           ;incstack = 0
 13192                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13193                           ;setDimmerLights_Clear@lights stored from wreg
 13194  270C  0020               	movlb	0	; select bank0
 13195  270D  00A3               	movwf	setDimmerLights_Clear@lights
 13196                           
 13197                           ;Dimmer_B1.c: 449: DimmerLightsPointSelect(lights);
 13198  270E  0823               	movf	setDimmerLights_Clear@lights,w
 13199  270F  31A5  258A         	fcall	_DimmerLightsPointSelect
 13200                           
 13201                           ;Dimmer_B1.c: 450: DimmerLights->Clear=command;
 13202  2711  0020               	movlb	0	; select bank0
 13203  2712  086C               	movf	_DimmerLights,w
 13204  2713  3E0C               	addlw	12
 13205  2714  0086               	movwf	6
 13206  2715  3001               	movlw	1	; select bank2/3
 13207  2716  0087               	movwf	7
 13208  2717  0822               	movf	setDimmerLights_Clear@command,w
 13209  2718  1001               	bcf	1,0
 13210  2719  1D03               	skipz
 13211  271A  1401               	bsf	1,0
 13212  271B  0008               	return
 13213  271C                     __end_of_setDimmerLights_Clear:	
 13214                           
 13215                           	psect	text68
 13216  2537                     __ptext68:	
 13217 ;; *************** function _getTemp_Safe *****************
 13218 ;; Defined at:
 13219 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverTemperature_B1.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;		None
 13222 ;; Auto vars:     Size  Location     Type
 13223 ;;		None
 13224 ;; Return value:  Size  Location     Type
 13225 ;;                  1    wreg      unsigned char 
 13226 ;; Registers used:
 13227 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13228 ;; Tracked objects:
 13229 ;;		On entry : 0/0
 13230 ;;		On exit  : 0/0
 13231 ;;		Unchanged: 0/0
 13232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;Total ram usage:        0 bytes
 13238 ;; Hardware stack levels used:    1
 13239 ;; Hardware stack levels required when called:    4
 13240 ;; This function calls:
 13241 ;;		Nothing
 13242 ;; This function is called by:
 13243 ;;		_Load_Main
 13244 ;;		_setPowerFault_Main
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           
 13249                           ;psect for function _getTemp_Safe
 13250  2537                     _getTemp_Safe:	
 13251                           
 13252                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13256  2537  087C               	movf	_Temp,w
 13257  2538  0086               	movwf	6
 13258  2539  3001               	movlw	1	; select bank2/3
 13259  253A  0087               	movwf	7
 13260  253B  0E01               	swapf	1,w
 13261  253C  3901               	andlw	1
 13262  253D  0008               	return
 13263  253E                     __end_of_getTemp_Safe:	
 13264                           
 13265                           	psect	text69
 13266  2530                     __ptext69:	
 13267 ;; *************** function _getPF_Safe *****************
 13268 ;; Defined at:
 13269 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;		None
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;		None
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      unsigned char 
 13276 ;; Registers used:
 13277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;Total ram usage:        0 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    4
 13290 ;; This function calls:
 13291 ;;		Nothing
 13292 ;; This function is called by:
 13293 ;;		_Load_Main
 13294 ;;		_setTemp_Main
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           
 13299                           ;psect for function _getPF_Safe
 13300  2530                     _getPF_Safe:	
 13301                           
 13302                           ;PowerFault_B1.c: 42: return PF->Safe;
 13303                           
 13304                           ;incstack = 0
 13305                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13306  2530  087A               	movf	_PF,w
 13307  2531  0086               	movwf	6
 13308  2532  0187               	clrf	7
 13309  2533  0C01               	rrf	1,w
 13310  2534  0C89               	rrf	9,f
 13311  2535  3901               	andlw	1
 13312  2536  0008               	return
 13313  2537                     __end_of_getPF_Safe:	
 13314                           
 13315                           	psect	text70
 13316  1C30                     __ptext70:	
 13317 ;; *************** function ___lwdiv *****************
 13318 ;; Defined at:
 13319 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13320 ;; Parameters:    Size  Location     Type
 13321 ;;  divisor         2    0[BANK0 ] unsigned int 
 13322 ;;  dividend        2    2[BANK0 ] unsigned int 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  quotient        2    5[BANK0 ] unsigned int 
 13325 ;;  counter         1    7[BANK0 ] unsigned char 
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  2    0[BANK0 ] unsigned int 
 13328 ;; Registers used:
 13329 ;;		wreg, status,2, status,0
 13330 ;; Tracked objects:
 13331 ;;		On entry : 0/0
 13332 ;;		On exit  : 0/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;Total ram usage:        8 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    4
 13342 ;; This function calls:
 13343 ;;		Nothing
 13344 ;; This function is called by:
 13345 ;;		_Load_Main
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           
 13350                           ;psect for function ___lwdiv
 13351  1C30                     ___lwdiv:	
 13352                           
 13353                           ;incstack = 0
 13354                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13355  1C30  0020               	movlb	0	; select bank0
 13356  1C31  01A5               	clrf	___lwdiv@quotient
 13357  1C32  01A6               	clrf	___lwdiv@quotient+1
 13358  1C33  0821               	movf	___lwdiv@divisor+1,w
 13359  1C34  0420               	iorwf	___lwdiv@divisor,w
 13360  1C35  1903               	skipnz
 13361  1C36  2C60               	goto	l7518
 13362  1C37  01A7               	clrf	___lwdiv@counter
 13363  1C38  0AA7               	incf	___lwdiv@counter,f
 13364  1C39                     l7506:	
 13365  1C39  1BA1               	btfsc	___lwdiv@divisor+1,7
 13366  1C3A  2C45               	goto	l7508
 13367  1C3B  3001               	movlw	1
 13368  1C3C                     u6435:	
 13369  1C3C  35A0               	lslf	___lwdiv@divisor,f
 13370  1C3D  0DA1               	rlf	___lwdiv@divisor+1,f
 13371  1C3E  0B89               	decfsz	9,f
 13372  1C3F  2C3C               	goto	u6435
 13373  1C40  3001               	movlw	1
 13374  1C41  00A4               	movwf	??___lwdiv
 13375  1C42  0824               	movf	??___lwdiv,w
 13376  1C43  07A7               	addwf	___lwdiv@counter,f
 13377  1C44  2C39               	goto	l7506
 13378  1C45                     l7508:	
 13379  1C45  3001               	movlw	1
 13380  1C46                     u6455:	
 13381  1C46  35A5               	lslf	___lwdiv@quotient,f
 13382  1C47  0DA6               	rlf	___lwdiv@quotient+1,f
 13383  1C48  0B89               	decfsz	9,f
 13384  1C49  2C46               	goto	u6455
 13385  1C4A  0821               	movf	___lwdiv@divisor+1,w
 13386  1C4B  0223               	subwf	___lwdiv@dividend+1,w
 13387  1C4C  1D03               	skipz
 13388  1C4D  2C50               	goto	u6465
 13389  1C4E  0820               	movf	___lwdiv@divisor,w
 13390  1C4F  0222               	subwf	___lwdiv@dividend,w
 13391  1C50                     u6465:	
 13392  1C50  1C03               	skipc
 13393  1C51  2C57               	goto	l7514
 13394  1C52  0820               	movf	___lwdiv@divisor,w
 13395  1C53  02A2               	subwf	___lwdiv@dividend,f
 13396  1C54  0821               	movf	___lwdiv@divisor+1,w
 13397  1C55  3BA3               	subwfb	___lwdiv@dividend+1,f
 13398  1C56  1425               	bsf	___lwdiv@quotient,0
 13399  1C57                     l7514:	
 13400  1C57  3001               	movlw	1
 13401  1C58                     u6475:	
 13402  1C58  36A1               	lsrf	___lwdiv@divisor+1,f
 13403  1C59  0CA0               	rrf	___lwdiv@divisor,f
 13404  1C5A  0B89               	decfsz	9,f
 13405  1C5B  2C58               	goto	u6475
 13406  1C5C  3001               	movlw	1
 13407  1C5D  02A7               	subwf	___lwdiv@counter,f
 13408  1C5E  1D03               	btfss	3,2
 13409  1C5F  2C45               	goto	l7508
 13410  1C60                     l7518:	
 13411  1C60  0826               	movf	___lwdiv@quotient+1,w
 13412  1C61  01A1               	clrf	?___lwdiv+1
 13413  1C62  07A1               	addwf	?___lwdiv+1,f
 13414  1C63  0825               	movf	___lwdiv@quotient,w
 13415  1C64  01A0               	clrf	?___lwdiv
 13416  1C65  07A0               	addwf	?___lwdiv,f
 13417  1C66  0008               	return
 13418  1C67                     __end_of___lwdiv:	
 13419                           
 13420                           	psect	text71
 13421  264F                     __ptext71:	
 13422 ;; *************** function _Load_Initialization *****************
 13423 ;; Defined at:
 13424 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;		None
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;		None
 13429 ;; Return value:  Size  Location     Type
 13430 ;;		None               void
 13431 ;; Registers used:
 13432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;Total ram usage:        1 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    5
 13445 ;; This function calls:
 13446 ;;		_setLoad_AH_AL_Restore
 13447 ;; This function is called by:
 13448 ;;		_main
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           
 13453                           ;psect for function _Load_Initialization
 13454  264F                     _Load_Initialization:	
 13455                           
 13456                           ;OverLoad_B1.c: 10: Load=&Load1;
 13457                           
 13458                           ;incstack = 0
 13459                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13460  264F  3020               	movlw	_Load1& (0+255)
 13461  2650  0020               	movlb	0	; select bank0
 13462  2651  00A2               	movwf	??_Load_Initialization
 13463  2652  0822               	movf	??_Load_Initialization,w
 13464  2653  00EE               	movwf	_Load
 13465                           
 13466                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13467  2654  086E               	movf	_Load,w
 13468  2655  0086               	movwf	6
 13469  2656  3002               	movlw	2	; select bank4/5
 13470  2657  0087               	movwf	7
 13471  2658  1581               	bsf	1,3
 13472                           
 13473                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13474  2659  3199  217B         	fcall	_setLoad_AH_AL_Restore
 13475  265B  0008               	return
 13476  265C                     __end_of_Load_Initialization:	
 13477                           
 13478                           	psect	text72
 13479  197B                     __ptext72:	
 13480 ;; *************** function _setLoad_AH_AL_Restore *****************
 13481 ;; Defined at:
 13482 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13483 ;; Parameters:    Size  Location     Type
 13484 ;;		None
 13485 ;; Auto vars:     Size  Location     Type
 13486 ;;  i               1    1[BANK0 ] unsigned char 
 13487 ;; Return value:  Size  Location     Type
 13488 ;;		None               void
 13489 ;; Registers used:
 13490 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13491 ;; Tracked objects:
 13492 ;;		On entry : 0/0
 13493 ;;		On exit  : 0/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;Total ram usage:        2 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:    4
 13503 ;; This function calls:
 13504 ;;		Nothing
 13505 ;; This function is called by:
 13506 ;;		_Load_Initialization
 13507 ;;		_Load_Main
 13508 ;; This function uses a non-reentrant model
 13509 ;;
 13510                           
 13511                           
 13512                           ;psect for function _setLoad_AH_AL_Restore
 13513  197B                     _setLoad_AH_AL_Restore:	
 13514                           
 13515                           ;OverLoad_B1.c: 312: char i;
 13516                           ;OverLoad_B1.c: 313: for(i=0 ; i<5 ;i++)
 13517                           
 13518                           ;incstack = 0
 13519                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13520  197B  0020               	movlb	0	; select bank0
 13521  197C  01A1               	clrf	setLoad_AH_AL_Restore@i
 13522  197D                     L11:	
 13523  197D  3005               	movlw	5
 13524  197E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13525  197F  1803               	btfsc	3,0
 13526  1980  0008               	return
 13527                           
 13528                           ;OverLoad_B1.c: 314: {
 13529                           ;OverLoad_B1.c: 315: Load->AH[i]=0;
 13530  1981  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13531  1982  3E08               	addlw	8
 13532  1983  076E               	addwf	_Load,w
 13533  1984  00A0               	movwf	??_setLoad_AH_AL_Restore
 13534  1985  0820               	movf	??_setLoad_AH_AL_Restore,w
 13535  1986  0086               	movwf	6
 13536  1987  3002               	movlw	2	; select bank4/5
 13537  1988  0087               	movwf	7
 13538  1989  3000               	movlw	0
 13539  198A  3FC0               	movwi [0]fsr1
 13540  198B  3FC1               	movwi [1]fsr1
 13541                           
 13542                           ;OverLoad_B1.c: 316: Load->AL[i]=0xffff;
 13543  198C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13544  198D  3E1A               	addlw	26
 13545  198E  076E               	addwf	_Load,w
 13546  198F  00A0               	movwf	??_setLoad_AH_AL_Restore
 13547  1990  0820               	movf	??_setLoad_AH_AL_Restore,w
 13548  1991  0086               	movwf	6
 13549  1992  3002               	movlw	2	; select bank4/5
 13550  1993  0087               	movwf	7
 13551  1994  30FF               	movlw	255
 13552  1995  3FC0               	movwi [0]fsr1
 13553  1996  30FF               	movlw	255
 13554  1997  3FC1               	movwi [1]fsr1
 13555  1998  3001               	movlw	1
 13556  1999  00A0               	movwf	??_setLoad_AH_AL_Restore
 13557  199A  0820               	movf	??_setLoad_AH_AL_Restore,w
 13558  199B  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13559  199C  297D               	goto	L11
 13560  199D                     __end_of_setLoad_AH_AL_Restore:	
 13561                           
 13562                           	psect	text73
 13563  2643                     __ptext73:	
 13564 ;; *************** function _LED_Main *****************
 13565 ;; Defined at:
 13566 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;		None
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;		None
 13571 ;; Return value:  Size  Location     Type
 13572 ;;		None               void
 13573 ;; Registers used:
 13574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13584 ;;Total ram usage:        0 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    6
 13587 ;; This function calls:
 13588 ;;		_setLED_Main
 13589 ;; This function is called by:
 13590 ;;		_main
 13591 ;; This function uses a non-reentrant model
 13592 ;;
 13593                           
 13594                           
 13595                           ;psect for function _LED_Main
 13596  2643                     _LED_Main:	
 13597                           
 13598                           ;LED_B1.c: 54: setLED_Main(1);
 13599                           
 13600                           ;incstack = 0
 13601                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13602  2643  3001               	movlw	1
 13603  2644  319C  24E1  31A6   	fcall	_setLED_Main
 13604                           
 13605                           ;LED_B1.c: 57: setLED_Main(2);
 13606  2647  3002               	movlw	2
 13607  2648  319C  24E1  31A6   	fcall	_setLED_Main
 13608                           
 13609                           ;LED_B1.c: 63: setLED_Main(99);
 13610  264B  3063               	movlw	99
 13611  264C  319C  24E1         	fcall	_setLED_Main
 13612  264E  0008               	return
 13613  264F                     __end_of_LED_Main:	
 13614                           
 13615                           	psect	text74
 13616  1CE1                     __ptext74:	
 13617 ;; *************** function _setLED_Main *****************
 13618 ;; Defined at:
 13619 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  led             1    wreg     unsigned char 
 13622 ;; Auto vars:     Size  Location     Type
 13623 ;;  led             1    4[BANK0 ] unsigned char 
 13624 ;; Return value:  Size  Location     Type
 13625 ;;		None               void
 13626 ;; Registers used:
 13627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13628 ;; Tracked objects:
 13629 ;;		On entry : 0/0
 13630 ;;		On exit  : 0/0
 13631 ;;		Unchanged: 0/0
 13632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;Total ram usage:        3 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:    5
 13640 ;; This function calls:
 13641 ;;		_LedPointSelect
 13642 ;; This function is called by:
 13643 ;;		_LED_Main
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           
 13648                           ;psect for function _setLED_Main
 13649  1CE1                     _setLED_Main:	
 13650                           
 13651                           ;incstack = 0
 13652                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13653                           ;setLED_Main@led stored from wreg
 13654  1CE1  0020               	movlb	0	; select bank0
 13655  1CE2  00A4               	movwf	setLED_Main@led
 13656                           
 13657                           ;LED_B1.c: 216: LedPointSelect(led);
 13658  1CE3  0824               	movf	setLED_Main@led,w
 13659  1CE4  3199  2159  319C   	fcall	_LedPointSelect
 13660                           
 13661                           ;LED_B1.c: 217: if(LED->GO)
 13662  1CE7  0021               	movlb	1	; select bank1
 13663  1CE8  083B               	movf	_LED^(0+128),w
 13664  1CE9  0086               	movwf	6
 13665  1CEA  0187               	clrf	7
 13666  1CEB  1C81               	btfss	1,1
 13667  1CEC  0008               	return
 13668                           
 13669                           ;LED_B1.c: 218: {
 13670                           ;LED_B1.c: 219: LED->Time++;
 13671  1CED  0A3B               	incf	_LED^(0+128),w
 13672  1CEE  0086               	movwf	6
 13673  1CEF  0187               	clrf	7
 13674  1CF0  3001               	movlw	1
 13675  1CF1  0781               	addwf	1,f
 13676  1CF2  3141               	addfsr 1,1
 13677  1CF3  1803               	skipnc
 13678  1CF4  0A81               	incf	1,f
 13679                           
 13680                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13681  1CF5  0A3B               	incf	_LED^(0+128),w
 13682  1CF6  0086               	movwf	6
 13683  1CF7  0187               	clrf	7
 13684  1CF8  3F40               	moviw [0]fsr1
 13685  1CF9  0020               	movlb	0	; select bank0
 13686  1CFA  00A2               	movwf	??_setLED_Main
 13687  1CFB  3F41               	moviw [1]fsr1
 13688  1CFC  00A3               	movwf	??_setLED_Main+1
 13689  1CFD  3000               	movlw	0
 13690  1CFE  0223               	subwf	??_setLED_Main+1,w
 13691  1CFF  3032               	movlw	50
 13692  1D00  1903               	skipnz
 13693  1D01  0222               	subwf	??_setLED_Main,w
 13694  1D02  1C03               	skipc
 13695  1D03  0008               	return
 13696                           
 13697                           ;LED_B1.c: 221: {
 13698                           ;LED_B1.c: 222: LED->Time=0;
 13699  1D04  0021               	movlb	1	; select bank1
 13700  1D05  0A3B               	incf	_LED^(0+128),w
 13701  1D06  0086               	movwf	6
 13702  1D07  0187               	clrf	7
 13703  1D08  3000               	movlw	0
 13704  1D09  3FC0               	movwi [0]fsr1
 13705  1D0A  3FC1               	movwi [1]fsr1
 13706                           
 13707                           ;LED_B1.c: 224: if(led == 1)
 13708  1D0B  0020               	movlb	0	; select bank0
 13709  1D0C  0824               	movf	setLED_Main@led,w
 13710  1D0D  3A01               	xorlw	1
 13711  1D0E  1D03               	skipz
 13712  1D0F  2D13               	goto	l7090
 13713                           
 13714                           ;LED_B1.c: 225: {
 13715                           ;LED_B1.c: 226: RA3=~RA3;
 13716  1D10  3008               	movlw	8
 13717  1D11  068C               	xorwf	12,f
 13718                           
 13719                           ;LED_B1.c: 227: }
 13720  1D12  0008               	return
 13721  1D13                     l7090:	
 13722                           
 13723                           ;LED_B1.c: 230: else if(led == 2)
 13724  1D13  0824               	movf	setLED_Main@led,w
 13725  1D14  3A02               	xorlw	2
 13726  1D15  1D03               	skipz
 13727  1D16  2D1A               	goto	l7094
 13728                           
 13729                           ;LED_B1.c: 231: {
 13730                           ;LED_B1.c: 232: RC7=~RC7;
 13731  1D17  3080               	movlw	128
 13732  1D18  068E               	xorwf	14,f
 13733                           
 13734                           ;LED_B1.c: 233: }
 13735  1D19  0008               	return
 13736  1D1A                     l7094:	
 13737                           
 13738                           ;LED_B1.c: 242: else if(led == 99)
 13739  1D1A  0824               	movf	setLED_Main@led,w
 13740  1D1B  3A63               	xorlw	99
 13741  1D1C  1D03               	skipz
 13742  1D1D  0008               	return
 13743                           
 13744                           ;LED_B1.c: 243: {
 13745                           ;LED_B1.c: 244: RB5=~RB5;
 13746  1D1E  3020               	movlw	32
 13747  1D1F  068D               	xorwf	13,f
 13748  1D20  0008               	return
 13749  1D21                     __end_of_setLED_Main:	
 13750                           
 13751                           	psect	text75
 13752  2637                     __ptext75:	
 13753 ;; *************** function _LED_Initialization *****************
 13754 ;; Defined at:
 13755 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;		None
 13758 ;; Auto vars:     Size  Location     Type
 13759 ;;		None
 13760 ;; Return value:  Size  Location     Type
 13761 ;;		None               void
 13762 ;; Registers used:
 13763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13764 ;; Tracked objects:
 13765 ;;		On entry : 0/0
 13766 ;;		On exit  : 0/0
 13767 ;;		Unchanged: 0/0
 13768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;Total ram usage:        0 bytes
 13774 ;; Hardware stack levels used:    1
 13775 ;; Hardware stack levels required when called:    7
 13776 ;; This function calls:
 13777 ;;		_setLED_Initialization
 13778 ;; This function is called by:
 13779 ;;		_main
 13780 ;; This function uses a non-reentrant model
 13781 ;;
 13782                           
 13783                           
 13784                           ;psect for function _LED_Initialization
 13785  2637                     _LED_Initialization:	
 13786                           
 13787                           ;LED_B1.c: 38: setLED_Initialization(1);
 13788                           
 13789                           ;incstack = 0
 13790                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13791  2637  3001               	movlw	1
 13792  2638  31A7  274C  31A6   	fcall	_setLED_Initialization
 13793                           
 13794                           ;LED_B1.c: 41: setLED_Initialization(2);
 13795  263B  3002               	movlw	2
 13796  263C  31A7  274C  31A6   	fcall	_setLED_Initialization
 13797                           
 13798                           ;LED_B1.c: 47: setLED_Initialization(99);
 13799  263F  3063               	movlw	99
 13800  2640  31A7  274C         	fcall	_setLED_Initialization
 13801  2642  0008               	return
 13802  2643                     __end_of_LED_Initialization:	
 13803                           
 13804                           	psect	text76
 13805  274C                     __ptext76:	
 13806 ;; *************** function _setLED_Initialization *****************
 13807 ;; Defined at:
 13808 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;  led             1    wreg     unsigned char 
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;  led             1    4[BANK0 ] unsigned char 
 13813 ;; Return value:  Size  Location     Type
 13814 ;;		None               void
 13815 ;; Registers used:
 13816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;Total ram usage:        1 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:    6
 13829 ;; This function calls:
 13830 ;;		_LedPointSelect
 13831 ;;		_setLED
 13832 ;; This function is called by:
 13833 ;;		_LED_Initialization
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _setLED_Initialization
 13839  274C                     _setLED_Initialization:	
 13840                           
 13841                           ;incstack = 0
 13842                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13843                           ;setLED_Initialization@led stored from wreg
 13844  274C  0020               	movlb	0	; select bank0
 13845  274D  00A4               	movwf	setLED_Initialization@led
 13846                           
 13847                           ;LED_B1.c: 69: LedPointSelect(led);
 13848  274E  0824               	movf	setLED_Initialization@led,w
 13849  274F  3199  2159  31A7   	fcall	_LedPointSelect
 13850                           
 13851                           ;LED_B1.c: 70: LED->Enable=1;
 13852  2752  0021               	movlb	1	; select bank1
 13853  2753  083B               	movf	_LED^(0+128),w
 13854  2754  0086               	movwf	6
 13855  2755  0187               	clrf	7
 13856  2756  1401               	bsf	1,0
 13857                           
 13858                           ;LED_B1.c: 71: setLED(led,0);
 13859  2757  0020               	movlb	0	; select bank0
 13860  2758  01A2               	clrf	setLED@command
 13861  2759  0824               	movf	setLED_Initialization@led,w
 13862  275A  3191  2163         	fcall	_setLED
 13863  275C  0008               	return
 13864  275D                     __end_of_setLED_Initialization:	
 13865                           
 13866                           	psect	text77
 13867  1DE9                     __ptext77:	
 13868 ;; *************** function _Flash_Memory_Main *****************
 13869 ;; Defined at:
 13870 ;;		line 474 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;		None
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;		None
 13875 ;; Return value:  Size  Location     Type
 13876 ;;		None               void
 13877 ;; Registers used:
 13878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        0 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    7
 13891 ;; This function calls:
 13892 ;;		_Flash_Memory_Modify
 13893 ;; This function is called by:
 13894 ;;		_main
 13895 ;; This function uses a non-reentrant model
 13896 ;;
 13897                           
 13898                           
 13899                           ;psect for function _Flash_Memory_Main
 13900  1DE9                     _Flash_Memory_Main:	
 13901                           
 13902                           ;MCU_16f1518_B1.c: 476: if(Memory->GO)
 13903                           
 13904                           ;incstack = 0
 13905                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13906  1DE9  0021               	movlb	1	; select bank1
 13907  1DEA  086A               	movf	_Memory^(0+128),w
 13908  1DEB  3E22               	addlw	34
 13909  1DEC  0086               	movwf	6
 13910  1DED  3001               	movlw	1	; select bank2/3
 13911  1DEE  0087               	movwf	7
 13912  1DEF  1C81               	btfss	1,1
 13913  1DF0  0008               	return
 13914                           
 13915                           ;MCU_16f1518_B1.c: 477: {
 13916                           ;MCU_16f1518_B1.c: 478: if(Memory->Modify)
 13917  1DF1  086A               	movf	_Memory^(0+128),w
 13918  1DF2  3E22               	addlw	34
 13919  1DF3  0086               	movwf	6
 13920  1DF4  3001               	movlw	1	; select bank2/3
 13921  1DF5  0087               	movwf	7
 13922  1DF6  1C01               	btfss	1,0
 13923  1DF7  2E26               	goto	l9448
 13924                           
 13925                           ;MCU_16f1518_B1.c: 479: {
 13926                           ;MCU_16f1518_B1.c: 480: Memory->Time++;
 13927  1DF8  086A               	movf	_Memory^(0+128),w
 13928  1DF9  3E23               	addlw	35
 13929  1DFA  0086               	movwf	6
 13930  1DFB  3001               	movlw	1	; select bank2/3
 13931  1DFC  0087               	movwf	7
 13932  1DFD  3001               	movlw	1
 13933  1DFE  0781               	addwf	1,f
 13934  1DFF  3141               	addfsr 1,1
 13935  1E00  1803               	skipnc
 13936  1E01  0A81               	incf	1,f
 13937                           
 13938                           ;MCU_16f1518_B1.c: 481: if(Memory->Time == 25)
 13939  1E02  086A               	movf	_Memory^(0+128),w
 13940  1E03  3E23               	addlw	35
 13941  1E04  0086               	movwf	6
 13942  1E05  3001               	movlw	1	; select bank2/3
 13943  1E06  0087               	movwf	7
 13944  1E07  3F40               	moviw [0]fsr1
 13945  1E08  3A19               	xorlw	25
 13946  1E09  1D03               	skipz
 13947  1E0A  2E0D               	goto	u9215
 13948  1E0B  3F41               	moviw [1]fsr1
 13949  1E0C  3A00               	xorlw	0
 13950  1E0D                     u9215:	
 13951  1E0D  1D03               	skipz
 13952  1E0E  0008               	return
 13953                           
 13954                           ;MCU_16f1518_B1.c: 482: {
 13955                           ;MCU_16f1518_B1.c: 483: Memory->Time=0;
 13956  1E0F  086A               	movf	_Memory^(0+128),w
 13957  1E10  3E23               	addlw	35
 13958  1E11  0086               	movwf	6
 13959  1E12  3001               	movlw	1	; select bank2/3
 13960  1E13  0087               	movwf	7
 13961  1E14  3000               	movlw	0
 13962  1E15  3FC0               	movwi [0]fsr1
 13963  1E16  3FC1               	movwi [1]fsr1
 13964                           
 13965                           ;MCU_16f1518_B1.c: 484: Memory->Modify=0;
 13966  1E17  086A               	movf	_Memory^(0+128),w
 13967  1E18  3E22               	addlw	34
 13968  1E19  0086               	movwf	6
 13969  1E1A  3001               	movlw	1	; select bank2/3
 13970  1E1B  0087               	movwf	7
 13971  1E1C  1001               	bcf	1,0
 13972                           
 13973                           ;MCU_16f1518_B1.c: 485: Memory->GO=0;
 13974  1E1D  086A               	movf	_Memory^(0+128),w
 13975  1E1E  3E22               	addlw	34
 13976  1E1F  0086               	movwf	6
 13977  1E20  3001               	movlw	1	; select bank2/3
 13978  1E21  0087               	movwf	7
 13979  1E22  1081               	bcf	1,1
 13980                           
 13981                           ;MCU_16f1518_B1.c: 486: Flash_Memory_Modify();
 13982  1E23  3193  23C9         	fcall	_Flash_Memory_Modify
 13983                           
 13984                           ;MCU_16f1518_B1.c: 488: }
 13985                           ;MCU_16f1518_B1.c: 489: }
 13986  1E25  0008               	return
 13987  1E26                     l9448:	
 13988                           
 13989                           ;MCU_16f1518_B1.c: 490: else
 13990                           ;MCU_16f1518_B1.c: 491: {
 13991                           ;MCU_16f1518_B1.c: 492: Memory->GO=0;
 13992  1E26  0021               	movlb	1	; select bank1
 13993  1E27  086A               	movf	_Memory^(0+128),w
 13994  1E28  3E22               	addlw	34
 13995  1E29  0086               	movwf	6
 13996  1E2A  3001               	movlw	1	; select bank2/3
 13997  1E2B  0087               	movwf	7
 13998  1E2C  1081               	bcf	1,1
 13999  1E2D  0008               	return
 14000  1E2E                     __end_of_Flash_Memory_Main:	
 14001                           
 14002                           	psect	text78
 14003  13C9                     __ptext78:	
 14004 ;; *************** function _Flash_Memory_Modify *****************
 14005 ;; Defined at:
 14006 ;;		line 549 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;		None
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;  i               1    6[BANK0 ] unsigned char 
 14011 ;; Return value:  Size  Location     Type
 14012 ;;		None               void
 14013 ;; Registers used:
 14014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : 0/0
 14017 ;;		On exit  : 0/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;Total ram usage:        3 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:    6
 14027 ;; This function calls:
 14028 ;;		_Flash_Memory_Erasing
 14029 ;;		_Flash_Memory_Read
 14030 ;;		_Flash_Memory_Write
 14031 ;; This function is called by:
 14032 ;;		_Flash_Memory_Main
 14033 ;; This function uses a non-reentrant model
 14034 ;;
 14035                           
 14036                           
 14037                           ;psect for function _Flash_Memory_Modify
 14038  13C9                     _Flash_Memory_Modify:	
 14039                           
 14040                           ;MCU_16f1518_B1.c: 551: char i;
 14041                           ;MCU_16f1518_B1.c: 552: for(i=0;i<32;i++)
 14042                           
 14043                           ;incstack = 0
 14044                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14045  13C9  0020               	movlb	0	; select bank0
 14046  13CA  01A6               	clrf	Flash_Memory_Modify@i
 14047  13CB  3020               	movlw	32
 14048  13CC  0226               	subwf	Flash_Memory_Modify@i,w
 14049  13CD  1803               	btfsc	3,0
 14050  13CE  2BE8               	goto	l8964
 14051  13CF                     l8958:	
 14052                           
 14053                           ;MCU_16f1518_B1.c: 553: {
 14054                           ;MCU_16f1518_B1.c: 554: Memory->Data[i]=Flash_Memory_Read(i);
 14055  13CF  0826               	movf	Flash_Memory_Modify@i,w
 14056  13D0  31A7  27E7  3193   	fcall	_Flash_Memory_Read
 14057  13D3  0020               	movlb	0	; select bank0
 14058  13D4  00A4               	movwf	??_Flash_Memory_Modify
 14059  13D5  0826               	movf	Flash_Memory_Modify@i,w
 14060  13D6  0021               	movlb	1	; select bank1
 14061  13D7  076A               	addwf	_Memory^(0+128),w
 14062  13D8  0020               	movlb	0	; select bank0
 14063  13D9  00A5               	movwf	??_Flash_Memory_Modify+1
 14064  13DA  0825               	movf	??_Flash_Memory_Modify+1,w
 14065  13DB  0086               	movwf	6
 14066  13DC  3001               	movlw	1	; select bank2/3
 14067  13DD  0087               	movwf	7
 14068  13DE  0824               	movf	??_Flash_Memory_Modify,w
 14069  13DF  0081               	movwf	1
 14070  13E0  3001               	movlw	1
 14071  13E1  00A4               	movwf	??_Flash_Memory_Modify
 14072  13E2  0824               	movf	??_Flash_Memory_Modify,w
 14073  13E3  07A6               	addwf	Flash_Memory_Modify@i,f
 14074  13E4  3020               	movlw	32
 14075  13E5  0226               	subwf	Flash_Memory_Modify@i,w
 14076  13E6  1C03               	skipc
 14077  13E7  2BCF               	goto	l8958
 14078  13E8                     l8964:	
 14079                           
 14080                           ;MCU_16f1518_B1.c: 555: }
 14081                           ;MCU_16f1518_B1.c: 556: Memory->Data[0]=Product->Data[12];
 14082  13E8  086F               	movf	_Product,w
 14083  13E9  3E0C               	addlw	12
 14084  13EA  0086               	movwf	6
 14085  13EB  3001               	movlw	1	; select bank2/3
 14086  13EC  0087               	movwf	7
 14087  13ED  0801               	movf	1,w
 14088  13EE  00A4               	movwf	??_Flash_Memory_Modify
 14089  13EF  0021               	movlb	1	; select bank1
 14090  13F0  086A               	movf	_Memory^(0+128),w
 14091  13F1  0086               	movwf	6
 14092  13F2  3001               	movlw	1	; select bank2/3
 14093  13F3  0087               	movwf	7
 14094  13F4  0020               	movlb	0	; select bank0
 14095  13F5  0824               	movf	??_Flash_Memory_Modify,w
 14096  13F6  0081               	movwf	1
 14097                           
 14098                           ;MCU_16f1518_B1.c: 557: Memory->Data[1]=Product->Data[13];
 14099  13F7  086F               	movf	_Product,w
 14100  13F8  3E0D               	addlw	13
 14101  13F9  0086               	movwf	6
 14102  13FA  3001               	movlw	1	; select bank2/3
 14103  13FB  0087               	movwf	7
 14104  13FC  0801               	movf	1,w
 14105  13FD  00A4               	movwf	??_Flash_Memory_Modify
 14106  13FE  0021               	movlb	1	; select bank1
 14107  13FF  0A6A               	incf	_Memory^(0+128),w
 14108  1400  0086               	movwf	6
 14109  1401  3001               	movlw	1	; select bank2/3
 14110  1402  0087               	movwf	7
 14111  1403  0020               	movlb	0	; select bank0
 14112  1404  0824               	movf	??_Flash_Memory_Modify,w
 14113  1405  0081               	movwf	1
 14114                           
 14115                           ;MCU_16f1518_B1.c: 558: Memory->Data[2]=Product->Data[14];
 14116  1406  086F               	movf	_Product,w
 14117  1407  3E0E               	addlw	14
 14118  1408  0086               	movwf	6
 14119  1409  3001               	movlw	1	; select bank2/3
 14120  140A  0087               	movwf	7
 14121  140B  0801               	movf	1,w
 14122  140C  00A4               	movwf	??_Flash_Memory_Modify
 14123  140D  0021               	movlb	1	; select bank1
 14124  140E  086A               	movf	_Memory^(0+128),w
 14125  140F  3E02               	addlw	2
 14126  1410  0086               	movwf	6
 14127  1411  3001               	movlw	1	; select bank2/3
 14128  1412  0087               	movwf	7
 14129  1413  0020               	movlb	0	; select bank0
 14130  1414  0824               	movf	??_Flash_Memory_Modify,w
 14131  1415  0081               	movwf	1
 14132                           
 14133                           ;MCU_16f1518_B1.c: 564: if(Memory->LoopSave)
 14134  1416  0021               	movlb	1	; select bank1
 14135  1417  086A               	movf	_Memory^(0+128),w
 14136  1418  3E22               	addlw	34
 14137  1419  0086               	movwf	6
 14138  141A  3001               	movlw	1	; select bank2/3
 14139  141B  0087               	movwf	7
 14140  141C  1D01               	btfss	1,2
 14141  141D  2C2F               	goto	l8968
 14142                           
 14143                           ;MCU_16f1518_B1.c: 565: {
 14144                           ;MCU_16f1518_B1.c: 566: Memory->LoopSave=0;
 14145  141E  086A               	movf	_Memory^(0+128),w
 14146  141F  3E22               	addlw	34
 14147  1420  0086               	movwf	6
 14148  1421  3001               	movlw	1	; select bank2/3
 14149  1422  0087               	movwf	7
 14150  1423  1101               	bcf	1,2
 14151                           
 14152                           ;MCU_16f1518_B1.c: 567: TMain->FirstOpen=0;
 14153  1424  087D               	movf	_TMain,w
 14154  1425  0086               	movwf	6
 14155  1426  3001               	movlw	1	; select bank2/3
 14156  1427  0087               	movwf	7
 14157  1428  1281               	bcf	1,5
 14158                           
 14159                           ;MCU_16f1518_B1.c: 568: TMain->First=0;
 14160  1429  087D               	movf	_TMain,w
 14161  142A  3E03               	addlw	3
 14162  142B  0086               	movwf	6
 14163  142C  3001               	movlw	1	; select bank2/3
 14164  142D  0087               	movwf	7
 14165  142E  1081               	bcf	1,1
 14166  142F                     l8968:	
 14167                           
 14168                           ;MCU_16f1518_B1.c: 570: }
 14169                           ;MCU_16f1518_B1.c: 571: GIE=0;
 14170  142F  138B               	bcf	11,7	;volatile
 14171                           
 14172                           ;MCU_16f1518_B1.c: 572: Flash_Memory_Erasing();
 14173  1430  31A6  262B  3193   	fcall	_Flash_Memory_Erasing
 14174                           
 14175                           ;MCU_16f1518_B1.c: 573: Flash_Memory_Write();
 14176  1433  319B  2398         	fcall	_Flash_Memory_Write
 14177                           
 14178                           ;MCU_16f1518_B1.c: 574: GIE=1;
 14179  1435  178B               	bsf	11,7	;volatile
 14180  1436  0008               	return
 14181  1437                     __end_of_Flash_Memory_Modify:	
 14182                           
 14183                           	psect	text79
 14184  262B                     __ptext79:	
 14185 ;; *************** function _Flash_Memory_Erasing *****************
 14186 ;; Defined at:
 14187 ;;		line 538 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;		None
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;		None
 14192 ;; Return value:  Size  Location     Type
 14193 ;;		None               void
 14194 ;; Registers used:
 14195 ;;		wreg, status,2, status,0, pclath, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;Total ram usage:        0 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    5
 14208 ;; This function calls:
 14209 ;;		_Flash_Memory_Unlock
 14210 ;; This function is called by:
 14211 ;;		_Flash_Memory_Modify
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           
 14216                           ;psect for function _Flash_Memory_Erasing
 14217  262B                     _Flash_Memory_Erasing:	
 14218                           
 14219                           ;MCU_16f1518_B1.c: 540: CFGS=0;
 14220                           
 14221                           ;incstack = 0
 14222                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14223  262B  0023               	movlb	3	; select bank3
 14224  262C  1315               	bcf	21,6	;volatile
 14225                           
 14226                           ;MCU_16f1518_B1.c: 541: PMADRH=0x30;
 14227  262D  3030               	movlw	48
 14228  262E  0092               	movwf	18	;volatile
 14229                           
 14230                           ;MCU_16f1518_B1.c: 542: PMADRL=0x00;
 14231  262F  0191               	clrf	17	;volatile
 14232                           
 14233                           ;MCU_16f1518_B1.c: 543: FREE=1;
 14234  2630  1615               	bsf	21,4	;volatile
 14235                           
 14236                           ;MCU_16f1518_B1.c: 544: WREN=1;
 14237  2631  1515               	bsf	21,2	;volatile
 14238                           
 14239                           ;MCU_16f1518_B1.c: 545: Flash_Memory_Unlock();
 14240  2632  31A5  2545         	fcall	_Flash_Memory_Unlock
 14241                           
 14242                           ;MCU_16f1518_B1.c: 546: WREN=0;
 14243  2634  0023               	movlb	3	; select bank3
 14244  2635  1115               	bcf	21,2	;volatile
 14245  2636  0008               	return
 14246  2637                     __end_of_Flash_Memory_Erasing:	
 14247                           
 14248                           	psect	text80
 14249  0CF1                     __ptext80:	
 14250 ;; *************** function _Flash_Memory_Initialization *****************
 14251 ;; Defined at:
 14252 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;		None
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;  i               1   62[BANK0 ] unsigned char 
 14257 ;; Return value:  Size  Location     Type
 14258 ;;		None               void
 14259 ;; Registers used:
 14260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 0/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;Total ram usage:        2 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; Hardware stack levels required when called:    7
 14273 ;; This function calls:
 14274 ;;		_Flash_Memory_Read
 14275 ;;		_Flash_Memory_Write
 14276 ;;		_setPercentValue
 14277 ;; This function is called by:
 14278 ;;		_main
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function _Flash_Memory_Initialization
 14284  0CF1                     _Flash_Memory_Initialization:	
 14285                           
 14286                           ;MCU_16f1518_B1.c: 431: char i;
 14287                           ;MCU_16f1518_B1.c: 432: if(Flash_Memory_Read(31) == 0xaa)
 14288                           
 14289                           ;incstack = 0
 14290                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14291  0CF1  301F               	movlw	31
 14292  0CF2  31A7  27E7  318C   	fcall	_Flash_Memory_Read
 14293  0CF5  3AAA               	xorlw	170
 14294  0CF6  1D03               	skipz
 14295  0CF7  2D69               	goto	l9304
 14296                           
 14297                           ;MCU_16f1518_B1.c: 433: {
 14298                           ;MCU_16f1518_B1.c: 434: Product->Data[12]=Flash_Memory_Read(0);
 14299  0CF8  3000               	movlw	0
 14300  0CF9  31A7  27E7  318C   	fcall	_Flash_Memory_Read
 14301  0CFC  0020               	movlb	0	; select bank0
 14302  0CFD  00DD               	movwf	??_Flash_Memory_Initialization
 14303  0CFE  086F               	movf	_Product,w
 14304  0CFF  3E0C               	addlw	12
 14305  0D00  0086               	movwf	6
 14306  0D01  3001               	movlw	1	; select bank2/3
 14307  0D02  0087               	movwf	7
 14308  0D03  085D               	movf	??_Flash_Memory_Initialization,w
 14309  0D04  0081               	movwf	1
 14310                           
 14311                           ;MCU_16f1518_B1.c: 435: Product->Data[13]=Flash_Memory_Read(1);
 14312  0D05  3001               	movlw	1
 14313  0D06  31A7  27E7  318C   	fcall	_Flash_Memory_Read
 14314  0D09  0020               	movlb	0	; select bank0
 14315  0D0A  00DD               	movwf	??_Flash_Memory_Initialization
 14316  0D0B  086F               	movf	_Product,w
 14317  0D0C  3E0D               	addlw	13
 14318  0D0D  0086               	movwf	6
 14319  0D0E  3001               	movlw	1	; select bank2/3
 14320  0D0F  0087               	movwf	7
 14321  0D10  085D               	movf	??_Flash_Memory_Initialization,w
 14322  0D11  0081               	movwf	1
 14323                           
 14324                           ;MCU_16f1518_B1.c: 436: Product->Data[14]=Flash_Memory_Read(2);
 14325  0D12  3002               	movlw	2
 14326  0D13  31A7  27E7  318C   	fcall	_Flash_Memory_Read
 14327  0D16  0020               	movlb	0	; select bank0
 14328  0D17  00DD               	movwf	??_Flash_Memory_Initialization
 14329  0D18  086F               	movf	_Product,w
 14330  0D19  3E0E               	addlw	14
 14331  0D1A  0086               	movwf	6
 14332  0D1B  3001               	movlw	1	; select bank2/3
 14333  0D1C  0087               	movwf	7
 14334  0D1D  085D               	movf	??_Flash_Memory_Initialization,w
 14335  0D1E  0081               	movwf	1
 14336                           
 14337                           ;MCU_16f1518_B1.c: 442: i=setPercentValue(((char)((100-55)*1.5)));
 14338  0D1F  3043               	movlw	67
 14339  0D20  319E  262E  318C   	fcall	_setPercentValue
 14340  0D23  0020               	movlb	0	; select bank0
 14341  0D24  00DD               	movwf	??_Flash_Memory_Initialization
 14342  0D25  085D               	movf	??_Flash_Memory_Initialization,w
 14343  0D26  00DE               	movwf	Flash_Memory_Initialization@i
 14344                           
 14345                           ;MCU_16f1518_B1.c: 443: Product->Data[21]=i;
 14346  0D27  085E               	movf	Flash_Memory_Initialization@i,w
 14347  0D28  00DD               	movwf	??_Flash_Memory_Initialization
 14348  0D29  086F               	movf	_Product,w
 14349  0D2A  3E15               	addlw	21
 14350  0D2B  0086               	movwf	6
 14351  0D2C  3001               	movlw	1	; select bank2/3
 14352  0D2D  0087               	movwf	7
 14353  0D2E  085D               	movf	??_Flash_Memory_Initialization,w
 14354  0D2F  0081               	movwf	1
 14355                           
 14356                           ;MCU_16f1518_B1.c: 444: Product->Data[22]=i;
 14357  0D30  085E               	movf	Flash_Memory_Initialization@i,w
 14358  0D31  00DD               	movwf	??_Flash_Memory_Initialization
 14359  0D32  086F               	movf	_Product,w
 14360  0D33  3E16               	addlw	22
 14361  0D34  0086               	movwf	6
 14362  0D35  3001               	movlw	1	; select bank2/3
 14363  0D36  0087               	movwf	7
 14364  0D37  085D               	movf	??_Flash_Memory_Initialization,w
 14365  0D38  0081               	movwf	1
 14366                           
 14367                           ;MCU_16f1518_B1.c: 445: Product->Data[23]=i;
 14368  0D39  085E               	movf	Flash_Memory_Initialization@i,w
 14369  0D3A  00DD               	movwf	??_Flash_Memory_Initialization
 14370  0D3B  086F               	movf	_Product,w
 14371  0D3C  3E17               	addlw	23
 14372  0D3D  0086               	movwf	6
 14373  0D3E  3001               	movlw	1	; select bank2/3
 14374  0D3F  0087               	movwf	7
 14375  0D40  085D               	movf	??_Flash_Memory_Initialization,w
 14376  0D41  0081               	movwf	1
 14377                           
 14378                           ;MCU_16f1518_B1.c: 447: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 14379  0D42  086F               	movf	_Product,w
 14380  0D43  3E0C               	addlw	12
 14381  0D44  0086               	movwf	6
 14382  0D45  3001               	movlw	1	; select bank2/3
 14383  0D46  0087               	movwf	7
 14384  0D47  0801               	movf	1,w
 14385  0D48  3AFF               	xorlw	255
 14386  0D49  1D03               	skipz
 14387  0D4A  0008               	return
 14388  0D4B  086F               	movf	_Product,w
 14389  0D4C  3E0D               	addlw	13
 14390  0D4D  0086               	movwf	6
 14391  0D4E  3001               	movlw	1	; select bank2/3
 14392  0D4F  0087               	movwf	7
 14393  0D50  0801               	movf	1,w
 14394  0D51  3AFF               	xorlw	255
 14395  0D52  1D03               	skipz
 14396  0D53  0008               	return
 14397  0D54  086F               	movf	_Product,w
 14398  0D55  3E0E               	addlw	14
 14399  0D56  0086               	movwf	6
 14400  0D57  3001               	movlw	1	; select bank2/3
 14401  0D58  0087               	movwf	7
 14402  0D59  0801               	movf	1,w
 14403  0D5A  3AFF               	xorlw	255
 14404  0D5B  1D03               	skipz
 14405  0D5C  0008               	return
 14406                           
 14407                           ;MCU_16f1518_B1.c: 448: {
 14408                           ;MCU_16f1518_B1.c: 449: TMain->FirstOpen=1;
 14409  0D5D  087D               	movf	_TMain,w
 14410  0D5E  0086               	movwf	6
 14411  0D5F  3001               	movlw	1	; select bank2/3
 14412  0D60  0087               	movwf	7
 14413  0D61  1681               	bsf	1,5
 14414                           
 14415                           ;MCU_16f1518_B1.c: 450: TMain->First=1;
 14416  0D62  087D               	movf	_TMain,w
 14417  0D63  3E03               	addlw	3
 14418  0D64  0086               	movwf	6
 14419  0D65  3001               	movlw	1	; select bank2/3
 14420  0D66  0087               	movwf	7
 14421  0D67  1481               	bsf	1,1
 14422                           
 14423                           ;MCU_16f1518_B1.c: 451: }
 14424                           ;MCU_16f1518_B1.c: 452: }
 14425  0D68  0008               	return
 14426  0D69                     l9304:	
 14427                           
 14428                           ;MCU_16f1518_B1.c: 453: else
 14429                           ;MCU_16f1518_B1.c: 454: {
 14430                           ;MCU_16f1518_B1.c: 455: i=setPercentValue(((char)((100-55)*1.5)));
 14431  0D69  3043               	movlw	67
 14432  0D6A  319E  262E  318C   	fcall	_setPercentValue
 14433  0D6D  0020               	movlb	0	; select bank0
 14434  0D6E  00DD               	movwf	??_Flash_Memory_Initialization
 14435  0D6F  085D               	movf	??_Flash_Memory_Initialization,w
 14436  0D70  00DE               	movwf	Flash_Memory_Initialization@i
 14437                           
 14438                           ;MCU_16f1518_B1.c: 456: Memory->Data[0]=0xff;
 14439  0D71  30FF               	movlw	255
 14440  0D72  00DD               	movwf	??_Flash_Memory_Initialization
 14441  0D73  0021               	movlb	1	; select bank1
 14442  0D74  086A               	movf	_Memory^(0+128),w
 14443  0D75  0086               	movwf	6
 14444  0D76  3001               	movlw	1	; select bank2/3
 14445  0D77  0087               	movwf	7
 14446  0D78  0020               	movlb	0	; select bank0
 14447  0D79  085D               	movf	??_Flash_Memory_Initialization,w
 14448  0D7A  0081               	movwf	1
 14449                           
 14450                           ;MCU_16f1518_B1.c: 457: Memory->Data[1]=0xff;
 14451  0D7B  30FF               	movlw	255
 14452  0D7C  00DD               	movwf	??_Flash_Memory_Initialization
 14453  0D7D  0021               	movlb	1	; select bank1
 14454  0D7E  0A6A               	incf	_Memory^(0+128),w
 14455  0D7F  0086               	movwf	6
 14456  0D80  3001               	movlw	1	; select bank2/3
 14457  0D81  0087               	movwf	7
 14458  0D82  0020               	movlb	0	; select bank0
 14459  0D83  085D               	movf	??_Flash_Memory_Initialization,w
 14460  0D84  0081               	movwf	1
 14461                           
 14462                           ;MCU_16f1518_B1.c: 458: Memory->Data[2]=0xff;
 14463  0D85  30FF               	movlw	255
 14464  0D86  00DD               	movwf	??_Flash_Memory_Initialization
 14465  0D87  0021               	movlb	1	; select bank1
 14466  0D88  086A               	movf	_Memory^(0+128),w
 14467  0D89  3E02               	addlw	2
 14468  0D8A  0086               	movwf	6
 14469  0D8B  3001               	movlw	1	; select bank2/3
 14470  0D8C  0087               	movwf	7
 14471  0D8D  0020               	movlb	0	; select bank0
 14472  0D8E  085D               	movf	??_Flash_Memory_Initialization,w
 14473  0D8F  0081               	movwf	1
 14474                           
 14475                           ;MCU_16f1518_B1.c: 459: Memory->Data[3]=0xff;
 14476  0D90  30FF               	movlw	255
 14477  0D91  00DD               	movwf	??_Flash_Memory_Initialization
 14478  0D92  0021               	movlb	1	; select bank1
 14479  0D93  086A               	movf	_Memory^(0+128),w
 14480  0D94  3E03               	addlw	3
 14481  0D95  0086               	movwf	6
 14482  0D96  3001               	movlw	1	; select bank2/3
 14483  0D97  0087               	movwf	7
 14484  0D98  0020               	movlb	0	; select bank0
 14485  0D99  085D               	movf	??_Flash_Memory_Initialization,w
 14486  0D9A  0081               	movwf	1
 14487                           
 14488                           ;MCU_16f1518_B1.c: 460: Memory->Data[4]=0xff;
 14489  0D9B  30FF               	movlw	255
 14490  0D9C  00DD               	movwf	??_Flash_Memory_Initialization
 14491  0D9D  0021               	movlb	1	; select bank1
 14492  0D9E  086A               	movf	_Memory^(0+128),w
 14493  0D9F  3E04               	addlw	4
 14494  0DA0  0086               	movwf	6
 14495  0DA1  3001               	movlw	1	; select bank2/3
 14496  0DA2  0087               	movwf	7
 14497  0DA3  0020               	movlb	0	; select bank0
 14498  0DA4  085D               	movf	??_Flash_Memory_Initialization,w
 14499  0DA5  0081               	movwf	1
 14500                           
 14501                           ;MCU_16f1518_B1.c: 461: Memory->Data[5]=0xff;
 14502  0DA6  30FF               	movlw	255
 14503  0DA7  00DD               	movwf	??_Flash_Memory_Initialization
 14504  0DA8  0021               	movlb	1	; select bank1
 14505  0DA9  086A               	movf	_Memory^(0+128),w
 14506  0DAA  3E05               	addlw	5
 14507  0DAB  0086               	movwf	6
 14508  0DAC  3001               	movlw	1	; select bank2/3
 14509  0DAD  0087               	movwf	7
 14510  0DAE  0020               	movlb	0	; select bank0
 14511  0DAF  085D               	movf	??_Flash_Memory_Initialization,w
 14512  0DB0  0081               	movwf	1
 14513                           
 14514                           ;MCU_16f1518_B1.c: 462: Memory->Data[31]=0xaa;
 14515  0DB1  30AA               	movlw	170
 14516  0DB2  00DD               	movwf	??_Flash_Memory_Initialization
 14517  0DB3  0021               	movlb	1	; select bank1
 14518  0DB4  086A               	movf	_Memory^(0+128),w
 14519  0DB5  3E1F               	addlw	31
 14520  0DB6  0086               	movwf	6
 14521  0DB7  3001               	movlw	1	; select bank2/3
 14522  0DB8  0087               	movwf	7
 14523  0DB9  0020               	movlb	0	; select bank0
 14524  0DBA  085D               	movf	??_Flash_Memory_Initialization,w
 14525  0DBB  0081               	movwf	1
 14526                           
 14527                           ;MCU_16f1518_B1.c: 463: Product->Data[21]=i;
 14528  0DBC  085E               	movf	Flash_Memory_Initialization@i,w
 14529  0DBD  00DD               	movwf	??_Flash_Memory_Initialization
 14530  0DBE  086F               	movf	_Product,w
 14531  0DBF  3E15               	addlw	21
 14532  0DC0  0086               	movwf	6
 14533  0DC1  3001               	movlw	1	; select bank2/3
 14534  0DC2  0087               	movwf	7
 14535  0DC3  085D               	movf	??_Flash_Memory_Initialization,w
 14536  0DC4  0081               	movwf	1
 14537                           
 14538                           ;MCU_16f1518_B1.c: 464: Product->Data[22]=i;
 14539  0DC5  085E               	movf	Flash_Memory_Initialization@i,w
 14540  0DC6  00DD               	movwf	??_Flash_Memory_Initialization
 14541  0DC7  086F               	movf	_Product,w
 14542  0DC8  3E16               	addlw	22
 14543  0DC9  0086               	movwf	6
 14544  0DCA  3001               	movlw	1	; select bank2/3
 14545  0DCB  0087               	movwf	7
 14546  0DCC  085D               	movf	??_Flash_Memory_Initialization,w
 14547  0DCD  0081               	movwf	1
 14548                           
 14549                           ;MCU_16f1518_B1.c: 465: Product->Data[23]=i;
 14550  0DCE  085E               	movf	Flash_Memory_Initialization@i,w
 14551  0DCF  00DD               	movwf	??_Flash_Memory_Initialization
 14552  0DD0  086F               	movf	_Product,w
 14553  0DD1  3E17               	addlw	23
 14554  0DD2  0086               	movwf	6
 14555  0DD3  3001               	movlw	1	; select bank2/3
 14556  0DD4  0087               	movwf	7
 14557  0DD5  085D               	movf	??_Flash_Memory_Initialization,w
 14558  0DD6  0081               	movwf	1
 14559                           
 14560                           ;MCU_16f1518_B1.c: 466: GIE=0;
 14561  0DD7  138B               	bcf	11,7	;volatile
 14562                           
 14563                           ;MCU_16f1518_B1.c: 467: Flash_Memory_Write();
 14564  0DD8  319B  2398         	fcall	_Flash_Memory_Write
 14565                           
 14566                           ;MCU_16f1518_B1.c: 468: GIE=1;
 14567  0DDA  178B               	bsf	11,7	;volatile
 14568                           
 14569                           ;MCU_16f1518_B1.c: 469: TMain->FirstOpen=1;
 14570  0DDB  087D               	movf	_TMain,w
 14571  0DDC  0086               	movwf	6
 14572  0DDD  3001               	movlw	1	; select bank2/3
 14573  0DDE  0087               	movwf	7
 14574  0DDF  1681               	bsf	1,5
 14575                           
 14576                           ;MCU_16f1518_B1.c: 470: TMain->First=1;
 14577  0DE0  087D               	movf	_TMain,w
 14578  0DE1  3E03               	addlw	3
 14579  0DE2  0086               	movwf	6
 14580  0DE3  3001               	movlw	1	; select bank2/3
 14581  0DE4  0087               	movwf	7
 14582  0DE5  1481               	bsf	1,1
 14583  0DE6  0008               	return
 14584  0DE7                     __end_of_Flash_Memory_Initialization:	
 14585                           
 14586                           	psect	text81
 14587  1B98                     __ptext81:	
 14588 ;; *************** function _Flash_Memory_Write *****************
 14589 ;; Defined at:
 14590 ;;		line 518 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;		None
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;  i               1    1[BANK0 ] unsigned char 
 14595 ;; Return value:  Size  Location     Type
 14596 ;;		None               void
 14597 ;; Registers used:
 14598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;Total ram usage:        2 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:    5
 14611 ;; This function calls:
 14612 ;;		_Flash_Memory_Unlock
 14613 ;; This function is called by:
 14614 ;;		_Flash_Memory_Initialization
 14615 ;;		_Flash_Memory_Modify
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           
 14620                           ;psect for function _Flash_Memory_Write
 14621  1B98                     _Flash_Memory_Write:	
 14622                           
 14623                           ;MCU_16f1518_B1.c: 520: char i;
 14624                           ;MCU_16f1518_B1.c: 521: CFGS=0;
 14625                           
 14626                           ;incstack = 0
 14627                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14628  1B98  0023               	movlb	3	; select bank3
 14629  1B99  1315               	bcf	21,6	;volatile
 14630                           
 14631                           ;MCU_16f1518_B1.c: 522: PMADRH=0x30;
 14632  1B9A  3030               	movlw	48
 14633  1B9B  0092               	movwf	18	;volatile
 14634                           
 14635                           ;MCU_16f1518_B1.c: 523: PMDATH=0;
 14636  1B9C  0194               	clrf	20	;volatile
 14637                           
 14638                           ;MCU_16f1518_B1.c: 524: FREE=0;
 14639  1B9D  1215               	bcf	21,4	;volatile
 14640                           
 14641                           ;MCU_16f1518_B1.c: 525: LWLO=1;
 14642  1B9E  1695               	bsf	21,5	;volatile
 14643                           
 14644                           ;MCU_16f1518_B1.c: 526: WREN=1;
 14645  1B9F  1515               	bsf	21,2	;volatile
 14646                           
 14647                           ;MCU_16f1518_B1.c: 527: for(i=0 ; i<32 ; i++)
 14648  1BA0  0020               	movlb	0	; select bank0
 14649  1BA1  01A1               	clrf	Flash_Memory_Write@i
 14650  1BA2  3020               	movlw	32
 14651  1BA3  0221               	subwf	Flash_Memory_Write@i,w
 14652  1BA4  1803               	btfsc	3,0
 14653  1BA5  2BC2               	goto	l1630
 14654  1BA6                     l8620:	
 14655                           
 14656                           ;MCU_16f1518_B1.c: 528: {
 14657                           ;MCU_16f1518_B1.c: 529: PMADRL=i;
 14658  1BA6  0821               	movf	Flash_Memory_Write@i,w
 14659  1BA7  0023               	movlb	3	; select bank3
 14660  1BA8  0091               	movwf	17	;volatile
 14661                           
 14662                           ;MCU_16f1518_B1.c: 530: PMDATL=Memory->Data[i];
 14663  1BA9  0020               	movlb	0	; select bank0
 14664  1BAA  0821               	movf	Flash_Memory_Write@i,w
 14665  1BAB  0021               	movlb	1	; select bank1
 14666  1BAC  076A               	addwf	_Memory^(0+128),w
 14667  1BAD  0020               	movlb	0	; select bank0
 14668  1BAE  00A0               	movwf	??_Flash_Memory_Write
 14669  1BAF  0820               	movf	??_Flash_Memory_Write,w
 14670  1BB0  0086               	movwf	6
 14671  1BB1  3001               	movlw	1	; select bank2/3
 14672  1BB2  0087               	movwf	7
 14673  1BB3  0801               	movf	1,w
 14674  1BB4  0023               	movlb	3	; select bank3
 14675  1BB5  0093               	movwf	19	;volatile
 14676                           
 14677                           ;MCU_16f1518_B1.c: 531: Flash_Memory_Unlock();
 14678  1BB6  31A5  2545  319B   	fcall	_Flash_Memory_Unlock
 14679  1BB9  3001               	movlw	1
 14680  1BBA  0020               	movlb	0	; select bank0
 14681  1BBB  00A0               	movwf	??_Flash_Memory_Write
 14682  1BBC  0820               	movf	??_Flash_Memory_Write,w
 14683  1BBD  07A1               	addwf	Flash_Memory_Write@i,f
 14684  1BBE  3020               	movlw	32
 14685  1BBF  0221               	subwf	Flash_Memory_Write@i,w
 14686  1BC0  1C03               	skipc
 14687  1BC1  2BA6               	goto	l8620
 14688  1BC2                     l1630:	
 14689                           
 14690                           ;MCU_16f1518_B1.c: 532: }
 14691                           ;MCU_16f1518_B1.c: 533: LWLO=0;
 14692  1BC2  0023               	movlb	3	; select bank3
 14693  1BC3  1295               	bcf	21,5	;volatile
 14694                           
 14695                           ;MCU_16f1518_B1.c: 534: Flash_Memory_Unlock();
 14696  1BC4  31A5  2545         	fcall	_Flash_Memory_Unlock
 14697                           
 14698                           ;MCU_16f1518_B1.c: 535: WREN=0;
 14699  1BC6  0023               	movlb	3	; select bank3
 14700  1BC7  1115               	bcf	21,2	;volatile
 14701  1BC8  0008               	return
 14702  1BC9                     __end_of_Flash_Memory_Write:	
 14703                           
 14704                           	psect	text82
 14705  2545                     __ptext82:	
 14706 ;; *************** function _Flash_Memory_Unlock *****************
 14707 ;; Defined at:
 14708 ;;		line 497 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;		None
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;		None
 14713 ;; Return value:  Size  Location     Type
 14714 ;;		None               void
 14715 ;; Registers used:
 14716 ;;		wreg
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;Total ram usage:        0 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    4
 14729 ;; This function calls:
 14730 ;;		Nothing
 14731 ;; This function is called by:
 14732 ;;		_Flash_Memory_Write
 14733 ;;		_Flash_Memory_Erasing
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           
 14738                           ;psect for function _Flash_Memory_Unlock
 14739  2545                     _Flash_Memory_Unlock:	
 14740                           
 14741                           ;MCU_16f1518_B1.c: 499: PMCON2=0x55;
 14742                           
 14743                           ;incstack = 0
 14744                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14745  2545  3055               	movlw	85
 14746  2546  0023               	movlb	3	; select bank3
 14747  2547  0096               	movwf	22	;volatile
 14748                           
 14749                           ;MCU_16f1518_B1.c: 500: PMCON2=0xaa;
 14750  2548  30AA               	movlw	170
 14751  2549  0096               	movwf	22	;volatile
 14752                           
 14753                           ;MCU_16f1518_B1.c: 501: WR=1;
 14754  254A  1495               	bsf	21,1	;volatile
 14755                           
 14756                           ;MCU_16f1518_B1.c: 502: __nop();
 14757  254B  0000               	nop
 14758                           
 14759                           ;MCU_16f1518_B1.c: 503: __nop();
 14760  254C  0000               	nop
 14761  254D  0008               	return
 14762  254E                     __end_of_Flash_Memory_Unlock:	
 14763                           
 14764                           	psect	text83
 14765  27E7                     __ptext83:	
 14766 ;; *************** function _Flash_Memory_Read *****************
 14767 ;; Defined at:
 14768 ;;		line 506 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  address         1    wreg     unsigned char 
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  address         1    2[BANK0 ] unsigned char 
 14773 ;;  ret             1    3[BANK0 ] unsigned char 
 14774 ;;  i               1    1[BANK0 ] unsigned char 
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  1    wreg      unsigned char 
 14777 ;; Registers used:
 14778 ;;		wreg, status,2
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;Total ram usage:        4 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:    4
 14791 ;; This function calls:
 14792 ;;		Nothing
 14793 ;; This function is called by:
 14794 ;;		_Flash_Memory_Initialization
 14795 ;;		_Flash_Memory_Modify
 14796 ;; This function uses a non-reentrant model
 14797 ;;
 14798                           
 14799                           
 14800                           ;psect for function _Flash_Memory_Read
 14801  27E7                     _Flash_Memory_Read:	
 14802                           
 14803                           ;incstack = 0
 14804                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14805                           ;Flash_Memory_Read@address stored from wreg
 14806  27E7  0020               	movlb	0	; select bank0
 14807  27E8  00A2               	movwf	Flash_Memory_Read@address
 14808                           
 14809                           ;MCU_16f1518_B1.c: 508: char i,ret=0;
 14810  27E9  01A3               	clrf	Flash_Memory_Read@ret
 14811                           
 14812                           ;MCU_16f1518_B1.c: 509: PMADRH=0x30;
 14813  27EA  3030               	movlw	48
 14814  27EB  0023               	movlb	3	; select bank3
 14815  27EC  0092               	movwf	18	;volatile
 14816                           
 14817                           ;MCU_16f1518_B1.c: 510: PMADRL=address;
 14818  27ED  0020               	movlb	0	; select bank0
 14819  27EE  0822               	movf	Flash_Memory_Read@address,w
 14820  27EF  0023               	movlb	3	; select bank3
 14821  27F0  0091               	movwf	17	;volatile
 14822                           
 14823                           ;MCU_16f1518_B1.c: 511: CFGS=0;
 14824  27F1  1315               	bcf	21,6	;volatile
 14825                           
 14826                           ;MCU_16f1518_B1.c: 512: RD=1;
 14827  27F2  1415               	bsf	21,0	;volatile
 14828                           
 14829                           ;MCU_16f1518_B1.c: 513: i=PMDATH;
 14830  27F3  0814               	movf	20,w	;volatile
 14831  27F4  0020               	movlb	0	; select bank0
 14832  27F5  00A0               	movwf	??_Flash_Memory_Read
 14833  27F6  0820               	movf	??_Flash_Memory_Read,w
 14834  27F7  00A1               	movwf	Flash_Memory_Read@i
 14835                           
 14836                           ;MCU_16f1518_B1.c: 514: ret=PMDATL;
 14837  27F8  0023               	movlb	3	; select bank3
 14838  27F9  0813               	movf	19,w	;volatile
 14839  27FA  0020               	movlb	0	; select bank0
 14840  27FB  00A0               	movwf	??_Flash_Memory_Read
 14841  27FC  0820               	movf	??_Flash_Memory_Read,w
 14842  27FD  00A3               	movwf	Flash_Memory_Read@ret
 14843                           
 14844                           ;MCU_16f1518_B1.c: 515: return ret;
 14845  27FE  0823               	movf	Flash_Memory_Read@ret,w
 14846  27FF  0008               	return
 14847  2800                     __end_of_Flash_Memory_Read:	
 14848                           
 14849                           	psect	text84
 14850  2529                     __ptext84:	
 14851 ;; *************** function _DimmerLights_Main *****************
 14852 ;; Defined at:
 14853 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14854 ;; Parameters:    Size  Location     Type
 14855 ;;		None
 14856 ;; Auto vars:     Size  Location     Type
 14857 ;;		None
 14858 ;; Return value:  Size  Location     Type
 14859 ;;		None               void
 14860 ;; Registers used:
 14861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;Total ram usage:        0 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; Hardware stack levels required when called:   10
 14874 ;; This function calls:
 14875 ;;		_DimmerLights_Close
 14876 ;;		_setDimmerLights_Main
 14877 ;; This function is called by:
 14878 ;;		_main
 14879 ;; This function uses a non-reentrant model
 14880 ;;
 14881                           
 14882                           
 14883                           ;psect for function _DimmerLights_Main
 14884  2529                     _DimmerLights_Main:	
 14885                           
 14886                           ;Dimmer_B1.c: 108: setDimmerLights_Main(1);
 14887                           
 14888                           ;incstack = 0
 14889                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14890  2529  3001               	movlw	1
 14891  252A  3195  2517  31A5   	fcall	_setDimmerLights_Main
 14892                           
 14893                           ;Dimmer_B1.c: 119: DimmerLights_Close();
 14894  252D  3198  2087         	fcall	_DimmerLights_Close
 14895  252F  0008               	return
 14896  2530                     __end_of_DimmerLights_Main:	
 14897                           
 14898                           	psect	text85
 14899  1517                     __ptext85:	
 14900 ;; *************** function _setDimmerLights_Main *****************
 14901 ;; Defined at:
 14902 ;;		line 122 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;  lights          1    wreg     unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  lights          1   70[BANK0 ] unsigned char 
 14907 ;;  clear           1   69[BANK0 ] unsigned char 
 14908 ;; Return value:  Size  Location     Type
 14909 ;;		None               void
 14910 ;; Registers used:
 14911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14912 ;; Tracked objects:
 14913 ;;		On entry : 0/0
 14914 ;;		On exit  : 0/0
 14915 ;;		Unchanged: 0/0
 14916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;Total ram usage:        2 bytes
 14922 ;; Hardware stack levels used:    1
 14923 ;; Hardware stack levels required when called:    9
 14924 ;; This function calls:
 14925 ;;		_DimmerLightsPointSelect
 14926 ;;		_setBuz
 14927 ;;		_setDimmerLights
 14928 ;;		_setDimmerLights_Adj
 14929 ;; This function is called by:
 14930 ;;		_DimmerLights_Main
 14931 ;; This function uses a non-reentrant model
 14932 ;;
 14933                           
 14934                           
 14935                           ;psect for function _setDimmerLights_Main
 14936  1517                     _setDimmerLights_Main:	
 14937                           
 14938                           ;incstack = 0
 14939                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14940                           ;setDimmerLights_Main@lights stored from wreg
 14941  1517  0020               	movlb	0	; select bank0
 14942  1518  00E6               	movwf	setDimmerLights_Main@lights
 14943                           
 14944                           ;Dimmer_B1.c: 124: char clear=1;
 14945  1519  01E5               	clrf	setDimmerLights_Main@clear
 14946  151A  0AE5               	incf	setDimmerLights_Main@clear,f
 14947                           
 14948                           ;Dimmer_B1.c: 125: DimmerLightsPointSelect(lights);
 14949  151B  0866               	movf	setDimmerLights_Main@lights,w
 14950  151C  31A5  258A  3195   	fcall	_DimmerLightsPointSelect
 14951                           
 14952                           ;Dimmer_B1.c: 153: if(DimmerLights->Trigger)
 14953  151F  0020               	movlb	0	; select bank0
 14954  1520  086C               	movf	_DimmerLights,w
 14955  1521  3E09               	addlw	9
 14956  1522  0086               	movwf	6
 14957  1523  3001               	movlw	1	; select bank2/3
 14958  1524  0087               	movwf	7
 14959  1525  1C81               	btfss	1,1
 14960  1526  2D56               	goto	l8880
 14961                           
 14962                           ;Dimmer_B1.c: 154: {
 14963                           ;Dimmer_B1.c: 155: if(clear)
 14964  1527  0865               	movf	setDimmerLights_Main@clear,w
 14965  1528  1903               	btfsc	3,2
 14966  1529  0008               	return
 14967                           
 14968                           ;Dimmer_B1.c: 156: {
 14969                           ;Dimmer_B1.c: 157: if(DimmerLights->Switch)
 14970  152A  086C               	movf	_DimmerLights,w
 14971  152B  3E09               	addlw	9
 14972  152C  0086               	movwf	6
 14973  152D  3001               	movlw	1	; select bank2/3
 14974  152E  0087               	movwf	7
 14975  152F  1C01               	btfss	1,0
 14976  1530  2D44               	goto	l8874
 14977                           
 14978                           ;Dimmer_B1.c: 158: {
 14979                           ;Dimmer_B1.c: 159: DimmerLights->Trigger=0;
 14980  1531  086C               	movf	_DimmerLights,w
 14981  1532  3E09               	addlw	9
 14982  1533  0086               	movwf	6
 14983  1534  3001               	movlw	1	; select bank2/3
 14984  1535  0087               	movwf	7
 14985  1536  1081               	bcf	1,1
 14986                           
 14987                           ;Dimmer_B1.c: 160: setDimmerLights(lights,1);
 14988  1537  01A4               	clrf	setDimmerLights@status
 14989  1538  0AA4               	incf	setDimmerLights@status,f
 14990  1539  0866               	movf	setDimmerLights_Main@lights,w
 14991  153A  3188  20BC         	fcall	_setDimmerLights
 14992                           
 14993                           ;Dimmer_B1.c: 163: DimmerLights->Clear=0;
 14994  153C  0020               	movlb	0	; select bank0
 14995  153D  086C               	movf	_DimmerLights,w
 14996  153E  3E0C               	addlw	12
 14997  153F  0086               	movwf	6
 14998  1540  3001               	movlw	1	; select bank2/3
 14999  1541  0087               	movwf	7
 15000  1542  1001               	bcf	1,0
 15001                           
 15002                           ;Dimmer_B1.c: 165: }
 15003  1543  0008               	return
 15004  1544                     l8874:	
 15005                           
 15006                           ;Dimmer_B1.c: 166: else
 15007                           ;Dimmer_B1.c: 167: {
 15008                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 15009  1544  086C               	movf	_DimmerLights,w
 15010  1545  3E09               	addlw	9
 15011  1546  0086               	movwf	6
 15012  1547  3001               	movlw	1	; select bank2/3
 15013  1548  0087               	movwf	7
 15014  1549  1081               	bcf	1,1
 15015                           
 15016                           ;Dimmer_B1.c: 169: setDimmerLights(lights,0);
 15017  154A  01A4               	clrf	setDimmerLights@status
 15018  154B  0866               	movf	setDimmerLights_Main@lights,w
 15019  154C  3188  20BC         	fcall	_setDimmerLights
 15020                           
 15021                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15022  154E  0020               	movlb	0	; select bank0
 15023  154F  086C               	movf	_DimmerLights,w
 15024  1550  3E0C               	addlw	12
 15025  1551  0086               	movwf	6
 15026  1552  3001               	movlw	1	; select bank2/3
 15027  1553  0087               	movwf	7
 15028  1554  1001               	bcf	1,0
 15029                           
 15030                           ;Dimmer_B1.c: 174: }
 15031                           ;Dimmer_B1.c: 175: }
 15032                           ;Dimmer_B1.c: 176: }
 15033  1555  0008               	return
 15034  1556                     l8880:	
 15035                           
 15036                           ;Dimmer_B1.c: 177: else
 15037                           ;Dimmer_B1.c: 178: {
 15038                           ;Dimmer_B1.c: 179: if(DimmerLights->TriggerAdj)
 15039  1556  086C               	movf	_DimmerLights,w
 15040  1557  3E09               	addlw	9
 15041  1558  0086               	movwf	6
 15042  1559  3001               	movlw	1	; select bank2/3
 15043  155A  0087               	movwf	7
 15044  155B  1D81               	btfss	1,3
 15045  155C  0008               	return
 15046                           
 15047                           ;Dimmer_B1.c: 180: {
 15048                           ;Dimmer_B1.c: 181: if(clear)
 15049  155D  0865               	movf	setDimmerLights_Main@clear,w
 15050  155E  1903               	btfsc	3,2
 15051  155F  0008               	return
 15052                           
 15053                           ;Dimmer_B1.c: 182: {
 15054                           ;Dimmer_B1.c: 183: DimmerLightsPointSelect(lights);
 15055  1560  0866               	movf	setDimmerLights_Main@lights,w
 15056  1561  31A5  258A  3195   	fcall	_DimmerLightsPointSelect
 15057                           
 15058                           ;Dimmer_B1.c: 184: DimmerLights->TriggerAdj=0;
 15059  1564  0020               	movlb	0	; select bank0
 15060  1565  086C               	movf	_DimmerLights,w
 15061  1566  3E09               	addlw	9
 15062  1567  0086               	movwf	6
 15063  1568  3001               	movlw	1	; select bank2/3
 15064  1569  0087               	movwf	7
 15065  156A  1181               	bcf	1,3
 15066                           
 15067                           ;Dimmer_B1.c: 185: if(DimmerLights->AdjGo)
 15068  156B  086C               	movf	_DimmerLights,w
 15069  156C  3E09               	addlw	9
 15070  156D  0086               	movwf	6
 15071  156E  3001               	movlw	1	; select bank2/3
 15072  156F  0087               	movwf	7
 15073  1570  1D01               	btfss	1,2
 15074  1571  2D82               	goto	l8892
 15075                           
 15076                           ;Dimmer_B1.c: 186: {
 15077                           ;Dimmer_B1.c: 187: setDimmerLights_Adj(lights,1);
 15078  1572  01E2               	clrf	setDimmerLights_Adj@status
 15079  1573  0AE2               	incf	setDimmerLights_Adj@status,f
 15080  1574  0866               	movf	setDimmerLights_Main@lights,w
 15081  1575  319D  2561  3195   	fcall	_setDimmerLights_Adj
 15082                           
 15083                           ;Dimmer_B1.c: 188: setBuz(1,100);
 15084  1578  3064               	movlw	100
 15085  1579  0020               	movlb	0	; select bank0
 15086  157A  00A6               	movwf	setBuz@time
 15087  157B  3000               	movlw	0
 15088  157C  00A7               	movwf	setBuz@time+1
 15089  157D  3001               	movlw	1
 15090  157E  3195  2589         	fcall	_setBuz
 15091                           
 15092                           ;Dimmer_B1.c: 189: }
 15093  1580  0020               	movlb	0	; select bank0
 15094  1581  0008               	return
 15095  1582                     l8892:	
 15096                           
 15097                           ;Dimmer_B1.c: 190: else
 15098                           ;Dimmer_B1.c: 191: {
 15099                           ;Dimmer_B1.c: 192: setDimmerLights_Adj(lights,0);
 15100  1582  0020               	movlb	0	; select bank0
 15101  1583  01E2               	clrf	setDimmerLights_Adj@status
 15102  1584  0866               	movf	setDimmerLights_Main@lights,w
 15103  1585  319D  2561         	fcall	_setDimmerLights_Adj
 15104  1587  0020               	movlb	0	; select bank0
 15105  1588  0008               	return
 15106  1589                     __end_of_setDimmerLights_Main:	
 15107                           
 15108                           	psect	text86
 15109  1D61                     __ptext86:	
 15110 ;; *************** function _setDimmerLights_Adj *****************
 15111 ;; Defined at:
 15112 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;  lights          1    wreg     unsigned char 
 15115 ;;  status          1   66[BANK0 ] unsigned char 
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;  lights          1   68[BANK0 ] unsigned char 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;		None               void
 15120 ;; Registers used:
 15121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15127 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;Total ram usage:        3 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    8
 15134 ;; This function calls:
 15135 ;;		_DimmerLightsPointSelect
 15136 ;;		_setLoad_StatusOff
 15137 ;;		_setRF_DimmerLights
 15138 ;;		_setTxData
 15139 ;; This function is called by:
 15140 ;;		_setDimmerLights_Main
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _setDimmerLights_Adj
 15146  1D61                     _setDimmerLights_Adj:	
 15147                           
 15148                           ;incstack = 0
 15149                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15150                           ;setDimmerLights_Adj@lights stored from wreg
 15151  1D61  0020               	movlb	0	; select bank0
 15152  1D62  00E4               	movwf	setDimmerLights_Adj@lights
 15153                           
 15154                           ;Dimmer_B1.c: 381: DimmerLightsPointSelect(lights);
 15155  1D63  0864               	movf	setDimmerLights_Adj@lights,w
 15156  1D64  31A5  258A  319D   	fcall	_DimmerLightsPointSelect
 15157                           
 15158                           ;Dimmer_B1.c: 382: if(status)
 15159  1D67  0020               	movlb	0	; select bank0
 15160  1D68  0862               	movf	setDimmerLights_Adj@status,w
 15161  1D69  1903               	btfsc	3,2
 15162  1D6A  2D76               	goto	l8596
 15163                           
 15164                           ;Dimmer_B1.c: 383: {
 15165                           ;Dimmer_B1.c: 384: DimmerLights->AdjFlag=1;
 15166  1D6B  086C               	movf	_DimmerLights,w
 15167  1D6C  0086               	movwf	6
 15168  1D6D  3001               	movlw	1	; select bank2/3
 15169  1D6E  0087               	movwf	7
 15170  1D6F  1581               	bsf	1,3
 15171                           
 15172                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 15173  1D70  086C               	movf	_DimmerLights,w
 15174  1D71  0086               	movwf	6
 15175  1D72  3001               	movlw	1	; select bank2/3
 15176  1D73  0087               	movwf	7
 15177  1D74  1481               	bsf	1,1
 15178                           
 15179                           ;Dimmer_B1.c: 386: }
 15180  1D75  0008               	return
 15181  1D76                     l8596:	
 15182                           
 15183                           ;Dimmer_B1.c: 387: else
 15184                           ;Dimmer_B1.c: 388: {
 15185                           ;Dimmer_B1.c: 389: if(DimmerLights->AdjFlag)
 15186  1D76  086C               	movf	_DimmerLights,w
 15187  1D77  0086               	movwf	6
 15188  1D78  3001               	movlw	1	; select bank2/3
 15189  1D79  0087               	movwf	7
 15190  1D7A  1D81               	btfss	1,3
 15191  1D7B  0008               	return
 15192                           
 15193                           ;Dimmer_B1.c: 390: {
 15194                           ;Dimmer_B1.c: 391: DimmerLights->Signal=0;
 15195  1D7C  086C               	movf	_DimmerLights,w
 15196  1D7D  0086               	movwf	6
 15197  1D7E  3001               	movlw	1	; select bank2/3
 15198  1D7F  0087               	movwf	7
 15199  1D80  1081               	bcf	1,1
 15200                           
 15201                           ;Dimmer_B1.c: 392: DimmerLights->AdjFlag=0;
 15202  1D81  086C               	movf	_DimmerLights,w
 15203  1D82  0086               	movwf	6
 15204  1D83  3001               	movlw	1	; select bank2/3
 15205  1D84  0087               	movwf	7
 15206  1D85  1181               	bcf	1,3
 15207                           
 15208                           ;Dimmer_B1.c: 393: setLoad_StatusOff(0,1);
 15209  1D86  01A0               	clrf	setLoad_StatusOff@command
 15210  1D87  0AA0               	incf	setLoad_StatusOff@command,f
 15211  1D88  3000               	movlw	0
 15212  1D89  319B  2367  319D   	fcall	_setLoad_StatusOff
 15213                           
 15214                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15215  1D8C  0020               	movlb	0	; select bank0
 15216  1D8D  086C               	movf	_DimmerLights,w
 15217  1D8E  3E04               	addlw	4
 15218  1D8F  0086               	movwf	6
 15219  1D90  3001               	movlw	1	; select bank2/3
 15220  1D91  0087               	movwf	7
 15221  1D92  0801               	movf	1,w
 15222  1D93  00E3               	movwf	??_setDimmerLights_Adj
 15223  1D94  086C               	movf	_DimmerLights,w
 15224  1D95  3E05               	addlw	5
 15225  1D96  0086               	movwf	6
 15226  1D97  3001               	movlw	1	; select bank2/3
 15227  1D98  0087               	movwf	7
 15228  1D99  0863               	movf	??_setDimmerLights_Adj,w
 15229  1D9A  0081               	movwf	1
 15230                           
 15231                           ;Dimmer_B1.c: 402: setRF_DimmerLights(lights,1);
 15232  1D9B  01DD               	clrf	setRF_DimmerLights@on
 15233  1D9C  0ADD               	incf	setRF_DimmerLights@on,f
 15234  1D9D  0864               	movf	setDimmerLights_Adj@lights,w
 15235  1D9E  3192  2286  319D   	fcall	_setRF_DimmerLights
 15236                           
 15237                           ;Dimmer_B1.c: 403: setTxData(1);
 15238  1DA1  3001               	movlw	1
 15239  1DA2  318B  2339         	fcall	_setTxData
 15240  1DA4  0008               	return
 15241  1DA5                     __end_of_setDimmerLights_Adj:	
 15242                           
 15243                           	psect	text87
 15244  1B67                     __ptext87:	
 15245 ;; *************** function _setLoad_StatusOff *****************
 15246 ;; Defined at:
 15247 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15248 ;; Parameters:    Size  Location     Type
 15249 ;;  lights          1    wreg     unsigned char 
 15250 ;;  command         1    0[BANK0 ] unsigned char 
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;  lights          1    1[BANK0 ] unsigned char 
 15253 ;; Return value:  Size  Location     Type
 15254 ;;		None               void
 15255 ;; Registers used:
 15256 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15257 ;; Tracked objects:
 15258 ;;		On entry : 0/0
 15259 ;;		On exit  : 0/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15262 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;Total ram usage:        2 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:    4
 15269 ;; This function calls:
 15270 ;;		Nothing
 15271 ;; This function is called by:
 15272 ;;		_setDimmerLights_ERROR
 15273 ;;		_setDimmerLights_Adj
 15274 ;; This function uses a non-reentrant model
 15275 ;;
 15276                           
 15277                           
 15278                           ;psect for function _setLoad_StatusOff
 15279  1B67                     _setLoad_StatusOff:	
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15283                           ;setLoad_StatusOff@lights stored from wreg
 15284  1B67  0020               	movlb	0	; select bank0
 15285  1B68  00A1               	movwf	setLoad_StatusOff@lights
 15286                           
 15287                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 15288  1B69  086E               	movf	_Load,w
 15289  1B6A  3E46               	addlw	70
 15290  1B6B  0086               	movwf	6
 15291  1B6C  3002               	movlw	2	; select bank4/5
 15292  1B6D  0087               	movwf	7
 15293  1B6E  0820               	movf	setLoad_StatusOff@command,w
 15294  1B6F  1081               	bcf	1,1
 15295  1B70  1D03               	skipz
 15296  1B71  1481               	bsf	1,1
 15297                           
 15298                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 15299  1B72  086E               	movf	_Load,w
 15300  1B73  3E42               	addlw	66
 15301  1B74  0086               	movwf	6
 15302  1B75  3002               	movlw	2	; select bank4/5
 15303  1B76  0087               	movwf	7
 15304  1B77  3002               	movlw	2
 15305  1B78  0281               	subwf	1,f
 15306                           
 15307                           ;OverLoad_B1.c: 288: if(lights == 1)
 15308  1B79  0821               	movf	setLoad_StatusOff@lights,w
 15309  1B7A  3A01               	xorlw	1
 15310  1B7B  1D03               	skipz
 15311  1B7C  2B83               	goto	l8256
 15312                           
 15313                           ;OverLoad_B1.c: 289: {
 15314                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 15315  1B7D  086E               	movf	_Load,w
 15316  1B7E  3E43               	addlw	67
 15317  1B7F  0086               	movwf	6
 15318  1B80  3002               	movlw	2	; select bank4/5
 15319  1B81  0087               	movwf	7
 15320  1B82  0181               	clrf	1
 15321  1B83                     l8256:	
 15322                           
 15323                           ;OverLoad_B1.c: 291: }
 15324                           ;OverLoad_B1.c: 292: if(lights == 2)
 15325  1B83  0821               	movf	setLoad_StatusOff@lights,w
 15326  1B84  3A02               	xorlw	2
 15327  1B85  1D03               	skipz
 15328  1B86  2B8D               	goto	l8260
 15329                           
 15330                           ;OverLoad_B1.c: 293: {
 15331                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 15332  1B87  086E               	movf	_Load,w
 15333  1B88  3E44               	addlw	68
 15334  1B89  0086               	movwf	6
 15335  1B8A  3002               	movlw	2	; select bank4/5
 15336  1B8B  0087               	movwf	7
 15337  1B8C  0181               	clrf	1
 15338  1B8D                     l8260:	
 15339                           
 15340                           ;OverLoad_B1.c: 295: }
 15341                           ;OverLoad_B1.c: 296: if(lights == 3)
 15342  1B8D  0821               	movf	setLoad_StatusOff@lights,w
 15343  1B8E  3A03               	xorlw	3
 15344  1B8F  1D03               	skipz
 15345  1B90  0008               	return
 15346                           
 15347                           ;OverLoad_B1.c: 297: {
 15348                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 15349  1B91  086E               	movf	_Load,w
 15350  1B92  3E45               	addlw	69
 15351  1B93  0086               	movwf	6
 15352  1B94  3002               	movlw	2	; select bank4/5
 15353  1B95  0087               	movwf	7
 15354  1B96  0181               	clrf	1
 15355  1B97  0008               	return
 15356  1B98                     __end_of_setLoad_StatusOff:	
 15357                           
 15358                           	psect	text88
 15359  08BC                     __ptext88:	
 15360 ;; *************** function _setDimmerLights *****************
 15361 ;; Defined at:
 15362 ;;		line 321 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;  lights          1    wreg     unsigned char 
 15365 ;;  status          1    4[BANK0 ] unsigned char 
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;  lights          1    6[BANK0 ] unsigned char 
 15368 ;; Return value:  Size  Location     Type
 15369 ;;		None               void
 15370 ;; Registers used:
 15371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15377 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;Total ram usage:        3 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    6
 15384 ;; This function calls:
 15385 ;;		_DimmerLightsPointSelect
 15386 ;;		_setLED
 15387 ;;		_setLoad_Count
 15388 ;;		_setLoad_StatusOn
 15389 ;; This function is called by:
 15390 ;;		_setDimmerLights_Main
 15391 ;;		_setControl_Lights_Table
 15392 ;; This function uses a non-reentrant model
 15393 ;;
 15394                           
 15395                           
 15396                           ;psect for function _setDimmerLights
 15397  08BC                     _setDimmerLights:	
 15398                           
 15399                           ;incstack = 0
 15400                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15401                           ;setDimmerLights@lights stored from wreg
 15402  08BC  0020               	movlb	0	; select bank0
 15403  08BD  00A6               	movwf	setDimmerLights@lights
 15404                           
 15405                           ;Dimmer_B1.c: 323: DimmerLightsPointSelect(lights);
 15406  08BE  0826               	movf	setDimmerLights@lights,w
 15407  08BF  31A5  258A  3188   	fcall	_DimmerLightsPointSelect
 15408                           
 15409                           ;Dimmer_B1.c: 324: Dimmer->Load=lights;
 15410  08C2  0020               	movlb	0	; select bank0
 15411  08C3  0826               	movf	setDimmerLights@lights,w
 15412  08C4  00A5               	movwf	??_setDimmerLights
 15413  08C5  0021               	movlb	1	; select bank1
 15414  08C6  0A39               	incf	_Dimmer^(0+128),w
 15415  08C7  0086               	movwf	6
 15416  08C8  0187               	clrf	7
 15417  08C9  0020               	movlb	0	; select bank0
 15418  08CA  0825               	movf	??_setDimmerLights,w
 15419  08CB  0081               	movwf	1
 15420                           
 15421                           ;Dimmer_B1.c: 325: if(status)
 15422  08CC  0824               	movf	setDimmerLights@status,w
 15423  08CD  1903               	btfsc	3,2
 15424  08CE  2926               	goto	l8362
 15425                           
 15426                           ;Dimmer_B1.c: 326: {
 15427                           ;Dimmer_B1.c: 327: DimmerLights->Status=1;
 15428  08CF  086C               	movf	_DimmerLights,w
 15429  08D0  0086               	movwf	6
 15430  08D1  3001               	movlw	1	; select bank2/3
 15431  08D2  0087               	movwf	7
 15432  08D3  1681               	bsf	1,5
 15433                           
 15434                           ;Dimmer_B1.c: 328: setLED(lights,0);
 15435  08D4  01A2               	clrf	setLED@command
 15436  08D5  0826               	movf	setDimmerLights@lights,w
 15437  08D6  3191  2163  3188   	fcall	_setLED
 15438                           
 15439                           ;Dimmer_B1.c: 329: RC7=!0;
 15440  08D9  0020               	movlb	0	; select bank0
 15441  08DA  178E               	bsf	14,7	;volatile
 15442                           
 15443                           ;Dimmer_B1.c: 330: setLoad_Count(0);
 15444  08DB  3000               	movlw	0
 15445  08DC  31A7  2772  3188   	fcall	_setLoad_Count
 15446                           
 15447                           ;Dimmer_B1.c: 332: DimmerLights->Signal=1;
 15448  08DF  0020               	movlb	0	; select bank0
 15449  08E0  086C               	movf	_DimmerLights,w
 15450  08E1  0086               	movwf	6
 15451  08E2  3001               	movlw	1	; select bank2/3
 15452  08E3  0087               	movwf	7
 15453  08E4  1481               	bsf	1,1
 15454                           
 15455                           ;Dimmer_B1.c: 333: DimmerLights->DimmingTimeValue=3;
 15456  08E5  3003               	movlw	3
 15457  08E6  00A5               	movwf	??_setDimmerLights
 15458  08E7  086C               	movf	_DimmerLights,w
 15459  08E8  3E02               	addlw	2
 15460  08E9  0086               	movwf	6
 15461  08EA  3001               	movlw	1	; select bank2/3
 15462  08EB  0087               	movwf	7
 15463  08EC  0825               	movf	??_setDimmerLights,w
 15464  08ED  0081               	movwf	1
 15465                           
 15466                           ;Dimmer_B1.c: 335: if(!DimmerLights->StatusFlag)
 15467  08EE  086C               	movf	_DimmerLights,w
 15468  08EF  0086               	movwf	6
 15469  08F0  3001               	movlw	1	; select bank2/3
 15470  08F1  0087               	movwf	7
 15471  08F2  1B01               	btfsc	1,6
 15472  08F3  0008               	return
 15473                           
 15474                           ;Dimmer_B1.c: 336: {
 15475                           ;Dimmer_B1.c: 337: DimmerLights->StatusFlag=1;
 15476  08F4  086C               	movf	_DimmerLights,w
 15477  08F5  0086               	movwf	6
 15478  08F6  3001               	movlw	1	; select bank2/3
 15479  08F7  0087               	movwf	7
 15480  08F8  1701               	bsf	1,6
 15481                           
 15482                           ;Dimmer_B1.c: 338: setLoad_StatusOn(lights,1);
 15483  08F9  01A0               	clrf	setLoad_StatusOn@command
 15484  08FA  0AA0               	incf	setLoad_StatusOn@command,f
 15485  08FB  0826               	movf	setDimmerLights@lights,w
 15486  08FC  319B  23C9         	fcall	_setLoad_StatusOn
 15487                           
 15488                           ;Dimmer_B1.c: 339: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15489  08FE  0021               	movlb	1	; select bank1
 15490  08FF  086A               	movf	_Memory^(0+128),w
 15491  0900  3E22               	addlw	34
 15492  0901  0086               	movwf	6
 15493  0902  3001               	movlw	1	; select bank2/3
 15494  0903  0087               	movwf	7
 15495  0904  1081               	bcf	1,1
 15496  0905  086A               	movf	_Memory^(0+128),w
 15497  0906  3E23               	addlw	35
 15498  0907  0086               	movwf	6
 15499  0908  3001               	movlw	1	; select bank2/3
 15500  0909  0087               	movwf	7
 15501  090A  3000               	movlw	0
 15502  090B  3FC0               	movwi [0]fsr1
 15503  090C  3FC1               	movwi [1]fsr1
 15504                           
 15505                           ;Dimmer_B1.c: 342: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15506  090D  0020               	movlb	0	; select bank0
 15507  090E  086C               	movf	_DimmerLights,w
 15508  090F  3E05               	addlw	5
 15509  0910  0086               	movwf	6
 15510  0911  3001               	movlw	1	; select bank2/3
 15511  0912  0087               	movwf	7
 15512  0913  0801               	movf	1,w
 15513  0914  00A5               	movwf	??_setDimmerLights
 15514  0915  086C               	movf	_DimmerLights,w
 15515  0916  3E04               	addlw	4
 15516  0917  0086               	movwf	6
 15517  0918  3001               	movlw	1	; select bank2/3
 15518  0919  0087               	movwf	7
 15519  091A  0825               	movf	??_setDimmerLights,w
 15520  091B  0081               	movwf	1
 15521                           
 15522                           ;Dimmer_B1.c: 346: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15523  091C  3043               	movlw	67
 15524  091D  00A5               	movwf	??_setDimmerLights
 15525  091E  086C               	movf	_DimmerLights,w
 15526  091F  3E04               	addlw	4
 15527  0920  0086               	movwf	6
 15528  0921  3001               	movlw	1	; select bank2/3
 15529  0922  0087               	movwf	7
 15530  0923  0825               	movf	??_setDimmerLights,w
 15531  0924  0081               	movwf	1
 15532                           
 15533                           ;Dimmer_B1.c: 348: }
 15534                           ;Dimmer_B1.c: 349: }
 15535  0925  0008               	return
 15536  0926                     l8362:	
 15537                           
 15538                           ;Dimmer_B1.c: 350: else
 15539                           ;Dimmer_B1.c: 351: {
 15540                           ;Dimmer_B1.c: 352: DimmerLights->Status=0;
 15541  0926  086C               	movf	_DimmerLights,w
 15542  0927  0086               	movwf	6
 15543  0928  3001               	movlw	1	; select bank2/3
 15544  0929  0087               	movwf	7
 15545  092A  1281               	bcf	1,5
 15546                           
 15547                           ;Dimmer_B1.c: 354: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15548  092B  086C               	movf	_DimmerLights,w
 15549  092C  3E06               	addlw	6
 15550  092D  0086               	movwf	6
 15551  092E  3001               	movlw	1	; select bank2/3
 15552  092F  0087               	movwf	7
 15553  0930  0801               	movf	1,w
 15554  0931  00A5               	movwf	??_setDimmerLights
 15555  0932  086C               	movf	_DimmerLights,w
 15556  0933  3E04               	addlw	4
 15557  0934  0086               	movwf	6
 15558  0935  3001               	movlw	1	; select bank2/3
 15559  0936  0087               	movwf	7
 15560  0937  0825               	movf	??_setDimmerLights,w
 15561  0938  0081               	movwf	1
 15562                           
 15563                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 15564  0939  086C               	movf	_DimmerLights,w
 15565  093A  0086               	movwf	6
 15566  093B  3001               	movlw	1	; select bank2/3
 15567  093C  0087               	movwf	7
 15568  093D  1481               	bsf	1,1
 15569                           
 15570                           ;Dimmer_B1.c: 362: DimmerLights->AdjFlag=0;
 15571  093E  086C               	movf	_DimmerLights,w
 15572  093F  0086               	movwf	6
 15573  0940  3001               	movlw	1	; select bank2/3
 15574  0941  0087               	movwf	7
 15575  0942  1181               	bcf	1,3
 15576                           
 15577                           ;Dimmer_B1.c: 363: DimmerLights->AdjStatus=0;
 15578  0943  086C               	movf	_DimmerLights,w
 15579  0944  0086               	movwf	6
 15580  0945  3001               	movlw	1	; select bank2/3
 15581  0946  0087               	movwf	7
 15582  0947  1201               	bcf	1,4
 15583                           
 15584                           ;Dimmer_B1.c: 364: DimmerLights->DimmingTimeValue=3;
 15585  0948  3003               	movlw	3
 15586  0949  00A5               	movwf	??_setDimmerLights
 15587  094A  086C               	movf	_DimmerLights,w
 15588  094B  3E02               	addlw	2
 15589  094C  0086               	movwf	6
 15590  094D  3001               	movlw	1	; select bank2/3
 15591  094E  0087               	movwf	7
 15592  094F  0825               	movf	??_setDimmerLights,w
 15593  0950  0081               	movwf	1
 15594  0951  0008               	return
 15595  0952                     __end_of_setDimmerLights:	
 15596                           
 15597                           	psect	text89
 15598  1BC9                     __ptext89:	
 15599 ;; *************** function _setLoad_StatusOn *****************
 15600 ;; Defined at:
 15601 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  lights          1    wreg     unsigned char 
 15604 ;;  command         1    0[BANK0 ] unsigned char 
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;  lights          1    1[BANK0 ] unsigned char 
 15607 ;; Return value:  Size  Location     Type
 15608 ;;		None               void
 15609 ;; Registers used:
 15610 ;;		wreg, fsr1l, fsr1h
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15616 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;Total ram usage:        2 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; Hardware stack levels required when called:    4
 15623 ;; This function calls:
 15624 ;;		Nothing
 15625 ;; This function is called by:
 15626 ;;		_setDimmerLights
 15627 ;; This function uses a non-reentrant model
 15628 ;;
 15629                           
 15630                           
 15631                           ;psect for function _setLoad_StatusOn
 15632  1BC9                     _setLoad_StatusOn:	
 15633                           
 15634                           ;incstack = 0
 15635                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15636                           ;setLoad_StatusOn@lights stored from wreg
 15637  1BC9  0020               	movlb	0	; select bank0
 15638  1BCA  00A1               	movwf	setLoad_StatusOn@lights
 15639                           
 15640                           ;OverLoad_B1.c: 268: Load->GO=1;
 15641  1BCB  086E               	movf	_Load,w
 15642  1BCC  0086               	movwf	6
 15643  1BCD  3002               	movlw	2	; select bank4/5
 15644  1BCE  0087               	movwf	7
 15645  1BCF  1481               	bsf	1,1
 15646                           
 15647                           ;OverLoad_B1.c: 269: Load->StatusOn=command;
 15648  1BD0  086E               	movf	_Load,w
 15649  1BD1  3E46               	addlw	70
 15650  1BD2  0086               	movwf	6
 15651  1BD3  3002               	movlw	2	; select bank4/5
 15652  1BD4  0087               	movwf	7
 15653  1BD5  0820               	movf	setLoad_StatusOn@command,w
 15654  1BD6  1001               	bcf	1,0
 15655  1BD7  1D03               	skipz
 15656  1BD8  1401               	bsf	1,0
 15657                           
 15658                           ;OverLoad_B1.c: 271: if(lights == 1)
 15659  1BD9  0821               	movf	setLoad_StatusOn@lights,w
 15660  1BDA  3A01               	xorlw	1
 15661  1BDB  1D03               	skipz
 15662  1BDC  2BE4               	goto	l8320
 15663                           
 15664                           ;OverLoad_B1.c: 272: {
 15665                           ;OverLoad_B1.c: 273: Load->Lights1Status=1;
 15666  1BDD  086E               	movf	_Load,w
 15667  1BDE  3E43               	addlw	67
 15668  1BDF  0086               	movwf	6
 15669  1BE0  3002               	movlw	2	; select bank4/5
 15670  1BE1  0087               	movwf	7
 15671  1BE2  0181               	clrf	1
 15672  1BE3  0A81               	incf	1,f
 15673  1BE4                     l8320:	
 15674                           
 15675                           ;OverLoad_B1.c: 274: }
 15676                           ;OverLoad_B1.c: 275: if(lights == 2)
 15677  1BE4  0821               	movf	setLoad_StatusOn@lights,w
 15678  1BE5  3A02               	xorlw	2
 15679  1BE6  1D03               	skipz
 15680  1BE7  2BEF               	goto	l8324
 15681                           
 15682                           ;OverLoad_B1.c: 276: {
 15683                           ;OverLoad_B1.c: 277: Load->Lights2Status=1;
 15684  1BE8  086E               	movf	_Load,w
 15685  1BE9  3E44               	addlw	68
 15686  1BEA  0086               	movwf	6
 15687  1BEB  3002               	movlw	2	; select bank4/5
 15688  1BEC  0087               	movwf	7
 15689  1BED  0181               	clrf	1
 15690  1BEE  0A81               	incf	1,f
 15691  1BEF                     l8324:	
 15692                           
 15693                           ;OverLoad_B1.c: 278: }
 15694                           ;OverLoad_B1.c: 279: if(lights == 3)
 15695  1BEF  0821               	movf	setLoad_StatusOn@lights,w
 15696  1BF0  3A03               	xorlw	3
 15697  1BF1  1D03               	skipz
 15698  1BF2  0008               	return
 15699                           
 15700                           ;OverLoad_B1.c: 280: {
 15701                           ;OverLoad_B1.c: 281: Load->Lights3Status=1;
 15702  1BF3  086E               	movf	_Load,w
 15703  1BF4  3E45               	addlw	69
 15704  1BF5  0086               	movwf	6
 15705  1BF6  3002               	movlw	2	; select bank4/5
 15706  1BF7  0087               	movwf	7
 15707  1BF8  0181               	clrf	1
 15708  1BF9  0A81               	incf	1,f
 15709  1BFA  0008               	return
 15710  1BFB                     __end_of_setLoad_StatusOn:	
 15711                           
 15712                           	psect	text90
 15713  2772                     __ptext90:	
 15714 ;; *************** function _setLoad_Count *****************
 15715 ;; Defined at:
 15716 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15717 ;; Parameters:    Size  Location     Type
 15718 ;;  command         1    wreg     unsigned char 
 15719 ;; Auto vars:     Size  Location     Type
 15720 ;;  command         1    1[BANK0 ] unsigned char 
 15721 ;; Return value:  Size  Location     Type
 15722 ;;		None               void
 15723 ;; Registers used:
 15724 ;;		wreg, fsr1l, fsr1h
 15725 ;; Tracked objects:
 15726 ;;		On entry : 0/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;Total ram usage:        2 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:    4
 15737 ;; This function calls:
 15738 ;;		Nothing
 15739 ;; This function is called by:
 15740 ;;		_setDimmerLights
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           
 15745                           ;psect for function _setLoad_Count
 15746  2772                     _setLoad_Count:	
 15747                           
 15748                           ;incstack = 0
 15749                           ; Regs used in _setLoad_Count: [wregfsr1]
 15750                           ;setLoad_Count@command stored from wreg
 15751  2772  0020               	movlb	0	; select bank0
 15752  2773  00A1               	movwf	setLoad_Count@command
 15753                           
 15754                           ;OverLoad_B1.c: 253: Load->Count=command;
 15755  2774  0821               	movf	setLoad_Count@command,w
 15756  2775  00A0               	movwf	??_setLoad_Count
 15757  2776  086E               	movf	_Load,w
 15758  2777  3E3A               	addlw	58
 15759  2778  0086               	movwf	6
 15760  2779  3002               	movlw	2	; select bank4/5
 15761  277A  0087               	movwf	7
 15762  277B  0820               	movf	??_setLoad_Count,w
 15763  277C  0081               	movwf	1
 15764                           
 15765                           ;OverLoad_B1.c: 254: Load->SafeCount=command;
 15766  277D  0821               	movf	setLoad_Count@command,w
 15767  277E  00A0               	movwf	??_setLoad_Count
 15768  277F  086E               	movf	_Load,w
 15769  2780  3E42               	addlw	66
 15770  2781  0086               	movwf	6
 15771  2782  3002               	movlw	2	; select bank4/5
 15772  2783  0087               	movwf	7
 15773  2784  0820               	movf	??_setLoad_Count,w
 15774  2785  0081               	movwf	1
 15775  2786  0008               	return
 15776  2787                     __end_of_setLoad_Count:	
 15777                           
 15778                           	psect	text91
 15779  1163                     __ptext91:	
 15780 ;; *************** function _setLED *****************
 15781 ;; Defined at:
 15782 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 15783 ;; Parameters:    Size  Location     Type
 15784 ;;  led             1    wreg     unsigned char 
 15785 ;;  command         1    2[BANK0 ] unsigned char 
 15786 ;; Auto vars:     Size  Location     Type
 15787 ;;  led             1    3[BANK0 ] unsigned char 
 15788 ;; Return value:  Size  Location     Type
 15789 ;;		None               void
 15790 ;; Registers used:
 15791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15797 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;Total ram usage:        2 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    5
 15804 ;; This function calls:
 15805 ;;		_LedPointSelect
 15806 ;; This function is called by:
 15807 ;;		_setDimmerLights_ERROR
 15808 ;;		_setDimmerLights
 15809 ;;		_setLED_Initialization
 15810 ;;		_setLoad_Exceptions
 15811 ;;		_setOverTemp_Exceptions
 15812 ;;		_setPowerFault_Exceptions
 15813 ;;		_setSw_Initialization
 15814 ;; This function uses a non-reentrant model
 15815 ;;
 15816                           
 15817                           
 15818                           ;psect for function _setLED
 15819  1163                     _setLED:	
 15820                           
 15821                           ;incstack = 0
 15822                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15823                           ;setLED@led stored from wreg
 15824  1163  0020               	movlb	0	; select bank0
 15825  1164  00A3               	movwf	setLED@led
 15826                           
 15827                           ;LED_B1.c: 76: LedPointSelect(led);
 15828  1165  0823               	movf	setLED@led,w
 15829  1166  3199  2159  3191   	fcall	_LedPointSelect
 15830                           
 15831                           ;LED_B1.c: 77: if(command == 0)
 15832  1169  0020               	movlb	0	; select bank0
 15833  116A  08A2               	movf	setLED@command,f
 15834  116B  1D03               	skipz
 15835  116C  297F               	goto	l8280
 15836                           
 15837                           ;LED_B1.c: 78: {
 15838                           ;LED_B1.c: 80: if(led == 1)
 15839  116D  0823               	movf	setLED@led,w
 15840  116E  3A01               	xorlw	1
 15841  116F  1D03               	skipz
 15842  1170  2973               	goto	l8272
 15843                           
 15844                           ;LED_B1.c: 81: {
 15845                           ;LED_B1.c: 85: RA3=1;
 15846  1171  158C               	bsf	12,3	;volatile
 15847                           
 15848                           ;LED_B1.c: 87: }
 15849  1172  0008               	return
 15850  1173                     l8272:	
 15851                           
 15852                           ;LED_B1.c: 90: else if(led == 2)
 15853  1173  0823               	movf	setLED@led,w
 15854  1174  3A02               	xorlw	2
 15855  1175  1D03               	skipz
 15856  1176  2979               	goto	l8276
 15857                           
 15858                           ;LED_B1.c: 91: {
 15859                           ;LED_B1.c: 95: RC7=1;
 15860  1177  178E               	bsf	14,7	;volatile
 15861                           
 15862                           ;LED_B1.c: 97: }
 15863  1178  0008               	return
 15864  1179                     l8276:	
 15865                           
 15866                           ;LED_B1.c: 110: else if(led == 99)
 15867  1179  0823               	movf	setLED@led,w
 15868  117A  3A63               	xorlw	99
 15869  117B  1D03               	skipz
 15870  117C  0008               	return
 15871                           
 15872                           ;LED_B1.c: 111: {
 15873                           ;LED_B1.c: 115: RB5=1;
 15874  117D  168D               	bsf	13,5	;volatile
 15875                           
 15876                           ;LED_B1.c: 117: }
 15877                           ;LED_B1.c: 119: }
 15878  117E  0008               	return
 15879  117F                     l8280:	
 15880                           
 15881                           ;LED_B1.c: 120: else if(command == 1)
 15882  117F  0822               	movf	setLED@command,w
 15883  1180  3A01               	xorlw	1
 15884  1181  1D03               	skipz
 15885  1182  2995               	goto	l8294
 15886                           
 15887                           ;LED_B1.c: 121: {
 15888                           ;LED_B1.c: 123: if(led == 1)
 15889  1183  0823               	movf	setLED@led,w
 15890  1184  3A01               	xorlw	1
 15891  1185  1D03               	skipz
 15892  1186  2989               	goto	l8286
 15893                           
 15894                           ;LED_B1.c: 124: {
 15895                           ;LED_B1.c: 128: RA3=0;
 15896  1187  118C               	bcf	12,3	;volatile
 15897                           
 15898                           ;LED_B1.c: 130: }
 15899  1188  0008               	return
 15900  1189                     l8286:	
 15901                           
 15902                           ;LED_B1.c: 133: else if(led == 2)
 15903  1189  0823               	movf	setLED@led,w
 15904  118A  3A02               	xorlw	2
 15905  118B  1D03               	skipz
 15906  118C  298F               	goto	l8290
 15907                           
 15908                           ;LED_B1.c: 134: {
 15909                           ;LED_B1.c: 138: RC7=0;
 15910  118D  138E               	bcf	14,7	;volatile
 15911                           
 15912                           ;LED_B1.c: 140: }
 15913  118E  0008               	return
 15914  118F                     l8290:	
 15915                           
 15916                           ;LED_B1.c: 153: else if(led == 99)
 15917  118F  0823               	movf	setLED@led,w
 15918  1190  3A63               	xorlw	99
 15919  1191  1D03               	skipz
 15920  1192  0008               	return
 15921                           
 15922                           ;LED_B1.c: 154: {
 15923                           ;LED_B1.c: 158: RB5=0;
 15924  1193  128D               	bcf	13,5	;volatile
 15925                           
 15926                           ;LED_B1.c: 160: }
 15927                           ;LED_B1.c: 162: }
 15928  1194  0008               	return
 15929  1195                     l8294:	
 15930                           
 15931                           ;LED_B1.c: 163: else if(command == 10)
 15932  1195  0822               	movf	setLED@command,w
 15933  1196  3A0A               	xorlw	10
 15934  1197  1D03               	skipz
 15935  1198  29B7               	goto	l8310
 15936                           
 15937                           ;LED_B1.c: 164: {
 15938                           ;LED_B1.c: 165: LED->GO=0;
 15939  1199  0021               	movlb	1	; select bank1
 15940  119A  083B               	movf	_LED^(0+128),w
 15941  119B  0086               	movwf	6
 15942  119C  0187               	clrf	7
 15943  119D  1081               	bcf	1,1
 15944                           
 15945                           ;LED_B1.c: 166: LED->Time=0;
 15946  119E  0A3B               	incf	_LED^(0+128),w
 15947  119F  0086               	movwf	6
 15948  11A0  0187               	clrf	7
 15949  11A1  3000               	movlw	0
 15950  11A2  3FC0               	movwi [0]fsr1
 15951  11A3  3FC1               	movwi [1]fsr1
 15952                           
 15953                           ;LED_B1.c: 168: if(led == 1)
 15954  11A4  0020               	movlb	0	; select bank0
 15955  11A5  0823               	movf	setLED@led,w
 15956  11A6  3A01               	xorlw	1
 15957  11A7  1D03               	skipz
 15958  11A8  29AB               	goto	l8302
 15959                           
 15960                           ;LED_B1.c: 169: {
 15961                           ;LED_B1.c: 173: RA3=1;
 15962  11A9  158C               	bsf	12,3	;volatile
 15963                           
 15964                           ;LED_B1.c: 175: }
 15965  11AA  0008               	return
 15966  11AB                     l8302:	
 15967                           
 15968                           ;LED_B1.c: 178: else if(led == 2)
 15969  11AB  0823               	movf	setLED@led,w
 15970  11AC  3A02               	xorlw	2
 15971  11AD  1D03               	skipz
 15972  11AE  29B1               	goto	l8306
 15973                           
 15974                           ;LED_B1.c: 179: {
 15975                           ;LED_B1.c: 183: RC7=1;
 15976  11AF  178E               	bsf	14,7	;volatile
 15977                           
 15978                           ;LED_B1.c: 185: }
 15979  11B0  0008               	return
 15980  11B1                     l8306:	
 15981                           
 15982                           ;LED_B1.c: 198: else if(led == 99)
 15983  11B1  0823               	movf	setLED@led,w
 15984  11B2  3A63               	xorlw	99
 15985  11B3  1D03               	skipz
 15986  11B4  0008               	return
 15987                           
 15988                           ;LED_B1.c: 199: {
 15989                           ;LED_B1.c: 203: RB5=1;
 15990  11B5  168D               	bsf	13,5	;volatile
 15991                           
 15992                           ;LED_B1.c: 205: }
 15993                           ;LED_B1.c: 207: }
 15994  11B6  0008               	return
 15995  11B7                     l8310:	
 15996                           
 15997                           ;LED_B1.c: 208: else if(command == 11)
 15998  11B7  0822               	movf	setLED@command,w
 15999  11B8  3A0B               	xorlw	11
 16000  11B9  1D03               	skipz
 16001  11BA  0008               	return
 16002                           
 16003                           ;LED_B1.c: 209: {
 16004                           ;LED_B1.c: 210: LED->GO=1;
 16005  11BB  0021               	movlb	1	; select bank1
 16006  11BC  083B               	movf	_LED^(0+128),w
 16007  11BD  0086               	movwf	6
 16008  11BE  0187               	clrf	7
 16009  11BF  1481               	bsf	1,1
 16010  11C0  0008               	return
 16011  11C1                     __end_of_setLED:	
 16012                           
 16013                           	psect	text92
 16014  1959                     __ptext92:	
 16015 ;; *************** function _LedPointSelect *****************
 16016 ;; Defined at:
 16017 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 16018 ;; Parameters:    Size  Location     Type
 16019 ;;  led             1    wreg     unsigned char 
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;  led             1    1[BANK0 ] unsigned char 
 16022 ;; Return value:  Size  Location     Type
 16023 ;;		None               void
 16024 ;; Registers used:
 16025 ;;		wreg
 16026 ;; Tracked objects:
 16027 ;;		On entry : 0/0
 16028 ;;		On exit  : 0/0
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;Total ram usage:        2 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; Hardware stack levels required when called:    4
 16038 ;; This function calls:
 16039 ;;		Nothing
 16040 ;; This function is called by:
 16041 ;;		_setLED_Initialization
 16042 ;;		_setLED
 16043 ;;		_setLED_Main
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           
 16048                           ;psect for function _LedPointSelect
 16049  1959                     _LedPointSelect:	
 16050                           
 16051                           ;incstack = 0
 16052                           ; Regs used in _LedPointSelect: [wreg]
 16053                           ;LedPointSelect@led stored from wreg
 16054  1959  0020               	movlb	0	; select bank0
 16055  195A  00A1               	movwf	LedPointSelect@led
 16056                           
 16057                           ;LED_B1.c: 10: if(led == 1)
 16058  195B  0821               	movf	LedPointSelect@led,w
 16059  195C  3A01               	xorlw	1
 16060  195D  1D03               	skipz
 16061  195E  2965               	goto	l6112
 16062                           
 16063                           ;LED_B1.c: 11: {
 16064                           ;LED_B1.c: 12: LED=&VarLED1;
 16065  195F  30DC               	movlw	_VarLED1& (0+255)
 16066  1960  00A0               	movwf	??_LedPointSelect
 16067  1961  0820               	movf	??_LedPointSelect,w
 16068  1962  0021               	movlb	1	; select bank1
 16069  1963  00BB               	movwf	_LED^(0+128)
 16070                           
 16071                           ;LED_B1.c: 13: }
 16072  1964  0008               	return
 16073  1965                     l6112:	
 16074                           
 16075                           ;LED_B1.c: 16: else if(led == 2)
 16076  1965  0020               	movlb	0	; select bank0
 16077  1966  0821               	movf	LedPointSelect@led,w
 16078  1967  3A02               	xorlw	2
 16079  1968  1D03               	skipz
 16080  1969  2970               	goto	l6116
 16081                           
 16082                           ;LED_B1.c: 17: {
 16083                           ;LED_B1.c: 18: LED=&VarLED2;
 16084  196A  30E0               	movlw	_VarLED2& (0+255)
 16085  196B  00A0               	movwf	??_LedPointSelect
 16086  196C  0820               	movf	??_LedPointSelect,w
 16087  196D  0021               	movlb	1	; select bank1
 16088  196E  00BB               	movwf	_LED^(0+128)
 16089                           
 16090                           ;LED_B1.c: 19: }
 16091  196F  0008               	return
 16092  1970                     l6116:	
 16093                           
 16094                           ;LED_B1.c: 28: else if(led == 99)
 16095  1970  0020               	movlb	0	; select bank0
 16096  1971  0821               	movf	LedPointSelect@led,w
 16097  1972  3A63               	xorlw	99
 16098  1973  1D03               	skipz
 16099  1974  0008               	return
 16100                           
 16101                           ;LED_B1.c: 29: {
 16102                           ;LED_B1.c: 30: LED=&VarErrLED;
 16103  1975  30D8               	movlw	_VarErrLED& (0+255)
 16104  1976  00A0               	movwf	??_LedPointSelect
 16105  1977  0820               	movf	??_LedPointSelect,w
 16106  1978  0021               	movlb	1	; select bank1
 16107  1979  00BB               	movwf	_LED^(0+128)
 16108  197A  0008               	return
 16109  197B                     __end_of_LedPointSelect:	
 16110                           
 16111                           	psect	text93
 16112  1887                     __ptext93:	
 16113 ;; *************** function _DimmerLights_Close *****************
 16114 ;; Defined at:
 16115 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16116 ;; Parameters:    Size  Location     Type
 16117 ;;		None
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;		None
 16120 ;; Return value:  Size  Location     Type
 16121 ;;		None               void
 16122 ;; Registers used:
 16123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16124 ;; Tracked objects:
 16125 ;;		On entry : 0/0
 16126 ;;		On exit  : 0/0
 16127 ;;		Unchanged: 0/0
 16128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;Total ram usage:        0 bytes
 16134 ;; Hardware stack levels used:    1
 16135 ;; Hardware stack levels required when called:    5
 16136 ;; This function calls:
 16137 ;;		_getDimmerLights_StatusFlag
 16138 ;;		_setLoad_GO
 16139 ;; This function is called by:
 16140 ;;		_DimmerLights_Main
 16141 ;; This function uses a non-reentrant model
 16142 ;;
 16143                           
 16144                           
 16145                           ;psect for function _DimmerLights_Close
 16146  1887                     _DimmerLights_Close:	
 16147                           
 16148                           ;Dimmer_B1.c: 94: if(Dimmer->Detect)
 16149                           
 16150                           ;incstack = 0
 16151                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16152  1887  0021               	movlb	1	; select bank1
 16153  1888  0839               	movf	_Dimmer^(0+128),w
 16154  1889  0086               	movwf	6
 16155  188A  0187               	clrf	7
 16156  188B  1C01               	btfss	1,0
 16157  188C  0008               	return
 16158                           
 16159                           ;Dimmer_B1.c: 95: {
 16160                           ;Dimmer_B1.c: 96: Dimmer->Detect=0;
 16161  188D  0839               	movf	_Dimmer^(0+128),w
 16162  188E  0086               	movwf	6
 16163  188F  0187               	clrf	7
 16164  1890  1001               	bcf	1,0
 16165                           
 16166                           ;Dimmer_B1.c: 97: if(!getDimmerLights_StatusFlag())
 16167  1891  31A6  261F  3198   	fcall	_getDimmerLights_StatusFlag
 16168  1894  3800               	iorlw	0
 16169  1895  1D03               	skipz
 16170  1896  0008               	return
 16171                           
 16172                           ;Dimmer_B1.c: 98: {
 16173                           ;Dimmer_B1.c: 99: setLoad_GO(0);
 16174  1897  3000               	movlw	0
 16175  1898  31A5  25AB         	fcall	_setLoad_GO
 16176                           
 16177                           ;Dimmer_B1.c: 100: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16178  189A  0021               	movlb	1	; select bank1
 16179  189B  086A               	movf	_Memory^(0+128),w
 16180  189C  3E22               	addlw	34
 16181  189D  0086               	movwf	6
 16182  189E  3001               	movlw	1	; select bank2/3
 16183  189F  0087               	movwf	7
 16184  18A0  1481               	bsf	1,1
 16185  18A1  0008               	return
 16186  18A2                     __end_of_DimmerLights_Close:	
 16187                           
 16188                           	psect	text94
 16189  25AB                     __ptext94:	
 16190 ;; *************** function _setLoad_GO *****************
 16191 ;; Defined at:
 16192 ;;		line 262 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 16193 ;; Parameters:    Size  Location     Type
 16194 ;;  command         1    wreg     unsigned char 
 16195 ;; Auto vars:     Size  Location     Type
 16196 ;;  command         1    0[BANK0 ] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;		None               void
 16199 ;; Registers used:
 16200 ;;		wreg, fsr1l, fsr1h
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;Total ram usage:        1 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    4
 16213 ;; This function calls:
 16214 ;;		Nothing
 16215 ;; This function is called by:
 16216 ;;		_DimmerLights_Close
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           
 16221                           ;psect for function _setLoad_GO
 16222  25AB                     _setLoad_GO:	
 16223                           
 16224                           ;incstack = 0
 16225                           ; Regs used in _setLoad_GO: [wregfsr1]
 16226                           ;setLoad_GO@command stored from wreg
 16227  25AB  0020               	movlb	0	; select bank0
 16228  25AC  00A0               	movwf	setLoad_GO@command
 16229                           
 16230                           ;OverLoad_B1.c: 264: Load->GO=command;
 16231  25AD  086E               	movf	_Load,w
 16232  25AE  0086               	movwf	6
 16233  25AF  3002               	movlw	2	; select bank4/5
 16234  25B0  0087               	movwf	7
 16235  25B1  0820               	movf	setLoad_GO@command,w
 16236  25B2  1081               	bcf	1,1
 16237  25B3  1D03               	skipz
 16238  25B4  1481               	bsf	1,1
 16239  25B5  0008               	return
 16240  25B6                     __end_of_setLoad_GO:	
 16241                           
 16242                           	psect	text95
 16243  261F                     __ptext95:	
 16244 ;; *************** function _getDimmerLights_StatusFlag *****************
 16245 ;; Defined at:
 16246 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16247 ;; Parameters:    Size  Location     Type
 16248 ;;		None
 16249 ;; Auto vars:     Size  Location     Type
 16250 ;;  Status          1    0[BANK0 ] unsigned char 
 16251 ;; Return value:  Size  Location     Type
 16252 ;;                  1    wreg      unsigned char 
 16253 ;; Registers used:
 16254 ;;		wreg, fsr1l, fsr1h, status,2
 16255 ;; Tracked objects:
 16256 ;;		On entry : 0/0
 16257 ;;		On exit  : 0/0
 16258 ;;		Unchanged: 0/0
 16259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16264 ;;Total ram usage:        1 bytes
 16265 ;; Hardware stack levels used:    1
 16266 ;; Hardware stack levels required when called:    4
 16267 ;; This function calls:
 16268 ;;		Nothing
 16269 ;; This function is called by:
 16270 ;;		_DimmerLights_Close
 16271 ;;		_DimmerLights_Exceptions
 16272 ;; This function uses a non-reentrant model
 16273 ;;
 16274                           
 16275                           
 16276                           ;psect for function _getDimmerLights_StatusFlag
 16277  261F                     _getDimmerLights_StatusFlag:	
 16278                           
 16279                           ;Dimmer_B1.c: 201: char Status=0;
 16280                           
 16281                           ;incstack = 0
 16282                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16283  261F  0020               	movlb	0	; select bank0
 16284  2620  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16285                           
 16286                           ;Dimmer_B1.c: 212: Status=(DimmerLights11->StatusFlag)?1:0;
 16287  2621  0879               	movf	_DimmerLights11,w
 16288  2622  0086               	movwf	6
 16289  2623  3001               	movlw	1	; select bank2/3
 16290  2624  0087               	movwf	7
 16291  2625  3000               	movlw	0
 16292  2626  1B01               	btfsc	1,6
 16293  2627  3001               	movlw	1
 16294  2628  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16295                           
 16296                           ;Dimmer_B1.c: 215: return Status;
 16297  2629  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16298  262A  0008               	return
 16299  262B                     __end_of_getDimmerLights_StatusFlag:	
 16300                           
 16301                           	psect	text96
 16302  2613                     __ptext96:	
 16303 ;; *************** function _DimmerLights_Initialization *****************
 16304 ;; Defined at:
 16305 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;		None
 16310 ;; Return value:  Size  Location     Type
 16311 ;;		None               void
 16312 ;; Registers used:
 16313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;Total ram usage:        1 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    6
 16326 ;; This function calls:
 16327 ;;		_Dimmer_Initialization
 16328 ;;		_setDimmerLights_Initialization
 16329 ;; This function is called by:
 16330 ;;		_main
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334                           
 16335                           ;psect for function _DimmerLights_Initialization
 16336  2613                     _DimmerLights_Initialization:	
 16337                           
 16338                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16342  2613  303E               	movlw	_DimmerLights1& (0+255)
 16343  2614  0020               	movlb	0	; select bank0
 16344  2615  00A4               	movwf	??_DimmerLights_Initialization
 16345  2616  0824               	movf	??_DimmerLights_Initialization,w
 16346  2617  00F9               	movwf	_DimmerLights11
 16347                           
 16348                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 16349  2618  3001               	movlw	1
 16350  2619  319A  22AB  31A6   	fcall	_setDimmerLights_Initialization
 16351                           
 16352                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 16353  261C  31A5  2522         	fcall	_Dimmer_Initialization
 16354  261E  0008               	return
 16355  261F                     __end_of_DimmerLights_Initialization:	
 16356                           
 16357                           	psect	text97
 16358  1AAB                     __ptext97:	
 16359 ;; *************** function _setDimmerLights_Initialization *****************
 16360 ;; Defined at:
 16361 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  lights          1    wreg     unsigned char 
 16364 ;; Auto vars:     Size  Location     Type
 16365 ;;  lights          1    3[BANK0 ] unsigned char 
 16366 ;; Return value:  Size  Location     Type
 16367 ;;		None               void
 16368 ;; Registers used:
 16369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16370 ;; Tracked objects:
 16371 ;;		On entry : 0/0
 16372 ;;		On exit  : 0/0
 16373 ;;		Unchanged: 0/0
 16374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;Total ram usage:        2 bytes
 16380 ;; Hardware stack levels used:    1
 16381 ;; Hardware stack levels required when called:    5
 16382 ;; This function calls:
 16383 ;;		_DimmerLightsPointSelect
 16384 ;; This function is called by:
 16385 ;;		_DimmerLights_Initialization
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _setDimmerLights_Initialization
 16391  1AAB                     _setDimmerLights_Initialization:	
 16392                           
 16393                           ;incstack = 0
 16394                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16395                           ;setDimmerLights_Initialization@lights stored from wreg
 16396  1AAB  0020               	movlb	0	; select bank0
 16397  1AAC  00A3               	movwf	setDimmerLights_Initialization@lights
 16398                           
 16399                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 16400  1AAD  0823               	movf	setDimmerLights_Initialization@lights,w
 16401  1AAE  31A5  258A         	fcall	_DimmerLightsPointSelect
 16402                           
 16403                           ;Dimmer_B1.c: 57: DimmerLights->Clear=1;
 16404  1AB0  0020               	movlb	0	; select bank0
 16405  1AB1  086C               	movf	_DimmerLights,w
 16406  1AB2  3E0C               	addlw	12
 16407  1AB3  0086               	movwf	6
 16408  1AB4  3001               	movlw	1	; select bank2/3
 16409  1AB5  0087               	movwf	7
 16410  1AB6  1401               	bsf	1,0
 16411                           
 16412                           ;Dimmer_B1.c: 63: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16413  1AB7  3043               	movlw	67
 16414  1AB8  00A2               	movwf	??_setDimmerLights_Initialization
 16415  1AB9  086C               	movf	_DimmerLights,w
 16416  1ABA  3E05               	addlw	5
 16417  1ABB  0086               	movwf	6
 16418  1ABC  3001               	movlw	1	; select bank2/3
 16419  1ABD  0087               	movwf	7
 16420  1ABE  0822               	movf	??_setDimmerLights_Initialization,w
 16421  1ABF  0081               	movwf	1
 16422                           
 16423                           ;Dimmer_B1.c: 64: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16424  1AC0  3078               	movlw	120
 16425  1AC1  00A2               	movwf	??_setDimmerLights_Initialization
 16426  1AC2  086C               	movf	_DimmerLights,w
 16427  1AC3  3E06               	addlw	6
 16428  1AC4  0086               	movwf	6
 16429  1AC5  3001               	movlw	1	; select bank2/3
 16430  1AC6  0087               	movwf	7
 16431  1AC7  0822               	movf	??_setDimmerLights_Initialization,w
 16432  1AC8  0081               	movwf	1
 16433                           
 16434                           ;Dimmer_B1.c: 74: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16435  1AC9  086C               	movf	_DimmerLights,w
 16436  1ACA  3E06               	addlw	6
 16437  1ACB  0086               	movwf	6
 16438  1ACC  3001               	movlw	1	; select bank2/3
 16439  1ACD  0087               	movwf	7
 16440  1ACE  0801               	movf	1,w
 16441  1ACF  00A2               	movwf	??_setDimmerLights_Initialization
 16442  1AD0  086C               	movf	_DimmerLights,w
 16443  1AD1  3E04               	addlw	4
 16444  1AD2  0086               	movwf	6
 16445  1AD3  3001               	movlw	1	; select bank2/3
 16446  1AD4  0087               	movwf	7
 16447  1AD5  0822               	movf	??_setDimmerLights_Initialization,w
 16448  1AD6  0081               	movwf	1
 16449  1AD7  0008               	return
 16450  1AD8                     __end_of_setDimmerLights_Initialization:	
 16451                           
 16452                           	psect	text98
 16453  2522                     __ptext98:	
 16454 ;; *************** function _Dimmer_Initialization *****************
 16455 ;; Defined at:
 16456 ;;		line 511 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;		None
 16459 ;; Auto vars:     Size  Location     Type
 16460 ;;		None
 16461 ;; Return value:  Size  Location     Type
 16462 ;;		None               void
 16463 ;; Registers used:
 16464 ;;		wreg
 16465 ;; Tracked objects:
 16466 ;;		On entry : 0/0
 16467 ;;		On exit  : 0/0
 16468 ;;		Unchanged: 0/0
 16469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;Total ram usage:        1 bytes
 16475 ;; Hardware stack levels used:    1
 16476 ;; Hardware stack levels required when called:    4
 16477 ;; This function calls:
 16478 ;;		Nothing
 16479 ;; This function is called by:
 16480 ;;		_DimmerLights_Initialization
 16481 ;; This function uses a non-reentrant model
 16482 ;;
 16483                           
 16484                           
 16485                           ;psect for function _Dimmer_Initialization
 16486  2522                     _Dimmer_Initialization:	
 16487                           
 16488                           ;Dimmer_B1.c: 513: Dimmer=&Dimmer1;
 16489                           
 16490                           ;incstack = 0
 16491                           ; Regs used in _Dimmer_Initialization: [wreg]
 16492  2522  30E4               	movlw	_Dimmer1& (0+255)
 16493  2523  0020               	movlb	0	; select bank0
 16494  2524  00A0               	movwf	??_Dimmer_Initialization
 16495  2525  0820               	movf	??_Dimmer_Initialization,w
 16496  2526  0021               	movlb	1	; select bank1
 16497  2527  00B9               	movwf	_Dimmer^(0+128)
 16498  2528  0008               	return
 16499  2529                     __end_of_Dimmer_Initialization:	
 16500                           
 16501                           	psect	text99
 16502  24FB                     __ptext99:	
 16503 ;; *************** function _DelayOff_Main *****************
 16504 ;; Defined at:
 16505 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16506 ;; Parameters:    Size  Location     Type
 16507 ;;		None
 16508 ;; Auto vars:     Size  Location     Type
 16509 ;;		None
 16510 ;; Return value:  Size  Location     Type
 16511 ;;		None               void
 16512 ;; Registers used:
 16513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16514 ;; Tracked objects:
 16515 ;;		On entry : 0/0
 16516 ;;		On exit  : 0/0
 16517 ;;		Unchanged: 0/0
 16518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;Total ram usage:        0 bytes
 16524 ;; Hardware stack levels used:    1
 16525 ;; Hardware stack levels required when called:    9
 16526 ;; This function calls:
 16527 ;;		_DlyOff_Main
 16528 ;; This function is called by:
 16529 ;;		_main
 16530 ;; This function uses a non-reentrant model
 16531 ;;
 16532                           
 16533                           
 16534                           ;psect for function _DelayOff_Main
 16535  24FB                     _DelayOff_Main:	
 16536                           
 16537                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16538                           
 16539                           ;incstack = 0
 16540                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16541  24FB  3001               	movlw	1
 16542  24FC  3196  2678         	fcall	_DlyOff_Main
 16543  24FE  0008               	return
 16544  24FF                     __end_of_DelayOff_Main:	
 16545                           
 16546                           	psect	text100
 16547  1678                     __ptext100:	
 16548 ;; *************** function _DlyOff_Main *****************
 16549 ;; Defined at:
 16550 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 16551 ;; Parameters:    Size  Location     Type
 16552 ;;  sw              1    wreg     unsigned char 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;  sw              1   68[BANK0 ] unsigned char 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;		None               void
 16557 ;; Registers used:
 16558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/0
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;Total ram usage:        3 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; Hardware stack levels required when called:    8
 16571 ;; This function calls:
 16572 ;;		_DelayOffPointSelect
 16573 ;;		_setBuz
 16574 ;;		_setDimmerLights_Switch
 16575 ;;		_setDimmerLights_Trigger
 16576 ;;		_setRFSW_Status
 16577 ;;		_setRF_DimmerLights
 16578 ;;		_setSw_Status
 16579 ;;		_setTxData
 16580 ;; This function is called by:
 16581 ;;		_DelayOff_Main
 16582 ;; This function uses a non-reentrant model
 16583 ;;
 16584                           
 16585                           
 16586                           ;psect for function _DlyOff_Main
 16587  1678                     _DlyOff_Main:	
 16588                           
 16589                           ;incstack = 0
 16590                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16591                           ;DlyOff_Main@sw stored from wreg
 16592  1678  0020               	movlb	0	; select bank0
 16593  1679  00E4               	movwf	DlyOff_Main@sw
 16594                           
 16595                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16596  167A  0864               	movf	DlyOff_Main@sw,w
 16597  167B  31A5  25FB  3196   	fcall	_DelayOffPointSelect
 16598                           
 16599                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16600  167E  0021               	movlb	1	; select bank1
 16601  167F  0838               	movf	_DelayOff^(0+128),w
 16602  1680  0086               	movwf	6
 16603  1681  0187               	clrf	7
 16604  1682  1C81               	btfss	1,1
 16605  1683  0008               	return
 16606                           
 16607                           ;DelayOff_B1.c: 70: {
 16608                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16609  1684  0838               	movf	_DelayOff^(0+128),w
 16610  1685  3E02               	addlw	2
 16611  1686  0086               	movwf	6
 16612  1687  0187               	clrf	7
 16613  1688  3001               	movlw	1
 16614  1689  0781               	addwf	1,f
 16615  168A  3141               	addfsr 1,1
 16616  168B  1803               	skipnc
 16617  168C  0A81               	incf	1,f
 16618                           
 16619                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16620  168D  0838               	movf	_DelayOff^(0+128),w
 16621  168E  3E02               	addlw	2
 16622  168F  0086               	movwf	6
 16623  1690  0187               	clrf	7
 16624  1691  3F40               	moviw [0]fsr1
 16625  1692  0020               	movlb	0	; select bank0
 16626  1693  00E2               	movwf	??_DlyOff_Main
 16627  1694  3F41               	moviw [1]fsr1
 16628  1695  00E3               	movwf	??_DlyOff_Main+1
 16629  1696  3015               	movlw	21
 16630  1697  0263               	subwf	??_DlyOff_Main+1,w
 16631  1698  30E0               	movlw	224
 16632  1699  1903               	skipnz
 16633  169A  0262               	subwf	??_DlyOff_Main,w
 16634  169B  1C03               	skipc
 16635  169C  0008               	return
 16636                           
 16637                           ;DelayOff_B1.c: 73: {
 16638                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16639  169D  0021               	movlb	1	; select bank1
 16640  169E  0838               	movf	_DelayOff^(0+128),w
 16641  169F  3E02               	addlw	2
 16642  16A0  0086               	movwf	6
 16643  16A1  0187               	clrf	7
 16644  16A2  3000               	movlw	0
 16645  16A3  3FC0               	movwi [0]fsr1
 16646  16A4  3FC1               	movwi [1]fsr1
 16647                           
 16648                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16649  16A5  3001               	movlw	1
 16650  16A6  0020               	movlb	0	; select bank0
 16651  16A7  00E2               	movwf	??_DlyOff_Main
 16652  16A8  0021               	movlb	1	; select bank1
 16653  16A9  0838               	movf	_DelayOff^(0+128),w
 16654  16AA  3E04               	addlw	4
 16655  16AB  0086               	movwf	6
 16656  16AC  0187               	clrf	7
 16657  16AD  0020               	movlb	0	; select bank0
 16658  16AE  0862               	movf	??_DlyOff_Main,w
 16659  16AF  0781               	addwf	1,f
 16660                           
 16661                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16662  16B0  0021               	movlb	1	; select bank1
 16663  16B1  0838               	movf	_DelayOff^(0+128),w
 16664  16B2  3E04               	addlw	4
 16665  16B3  0086               	movwf	6
 16666  16B4  0187               	clrf	7
 16667  16B5  0A38               	incf	_DelayOff^(0+128),w
 16668  16B6  0084               	movwf	4
 16669  16B7  0185               	clrf	5
 16670  16B8  0800               	movf	0,w
 16671  16B9  0201               	subwf	1,w
 16672  16BA  1C03               	skipc
 16673  16BB  0008               	return
 16674                           
 16675                           ;DelayOff_B1.c: 77: {
 16676                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16677  16BC  0838               	movf	_DelayOff^(0+128),w
 16678  16BD  3E04               	addlw	4
 16679  16BE  0086               	movwf	6
 16680  16BF  0187               	clrf	7
 16681  16C0  0181               	clrf	1
 16682                           
 16683                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16684  16C1  0838               	movf	_DelayOff^(0+128),w
 16685  16C2  0086               	movwf	6
 16686  16C3  0187               	clrf	7
 16687  16C4  1081               	bcf	1,1
 16688                           
 16689                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16690  16C5  0020               	movlb	0	; select bank0
 16691  16C6  01A2               	clrf	setSw_Status@command
 16692  16C7  0864               	movf	DlyOff_Main@sw,w
 16693  16C8  31A6  26BE  3196   	fcall	_setSw_Status
 16694                           
 16695                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16696  16CB  0020               	movlb	0	; select bank0
 16697  16CC  01A2               	clrf	setRFSW_Status@command
 16698  16CD  0864               	movf	DlyOff_Main@sw,w
 16699  16CE  31A6  26AF  3196   	fcall	_setRFSW_Status
 16700                           
 16701                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16702  16D1  0020               	movlb	0	; select bank0
 16703  16D2  01DD               	clrf	setRF_DimmerLights@on
 16704  16D3  0864               	movf	DlyOff_Main@sw,w
 16705  16D4  3192  2286  3196   	fcall	_setRF_DimmerLights
 16706                           
 16707                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16708  16D7  0020               	movlb	0	; select bank0
 16709  16D8  01A2               	clrf	setDimmerLights_Trigger@command
 16710  16D9  0AA2               	incf	setDimmerLights_Trigger@command,f
 16711  16DA  0864               	movf	DlyOff_Main@sw,w
 16712  16DB  31A6  26FC  3196   	fcall	_setDimmerLights_Trigger
 16713                           
 16714                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16715  16DE  0020               	movlb	0	; select bank0
 16716  16DF  01A2               	clrf	setDimmerLights_Switch@command
 16717  16E0  0864               	movf	DlyOff_Main@sw,w
 16718  16E1  31A6  26EC  3196   	fcall	_setDimmerLights_Switch
 16719                           
 16720                           ;DelayOff_B1.c: 85: setTxData(1);
 16721  16E4  3001               	movlw	1
 16722  16E5  318B  2339  3196   	fcall	_setTxData
 16723                           
 16724                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16725  16E8  3064               	movlw	100
 16726  16E9  0020               	movlb	0	; select bank0
 16727  16EA  00A6               	movwf	setBuz@time
 16728  16EB  3000               	movlw	0
 16729  16EC  00A7               	movwf	setBuz@time+1
 16730  16ED  3001               	movlw	1
 16731  16EE  3195  2589         	fcall	_setBuz
 16732  16F0  0008               	return
 16733  16F1                     __end_of_DlyOff_Main:	
 16734                           
 16735                           	psect	text101
 16736  0B39                     __ptext101:	
 16737 ;; *************** function _setTxData *****************
 16738 ;; Defined at:
 16739 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 16740 ;; Parameters:    Size  Location     Type
 16741 ;;  rf              1    wreg     unsigned char 
 16742 ;; Auto vars:     Size  Location     Type
 16743 ;;  rf              1    3[BANK0 ] unsigned char 
 16744 ;;  i               1    0        unsigned char 
 16745 ;; Return value:  Size  Location     Type
 16746 ;;		None               void
 16747 ;; Registers used:
 16748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16749 ;; Tracked objects:
 16750 ;;		On entry : 0/0
 16751 ;;		On exit  : 0/0
 16752 ;;		Unchanged: 0/0
 16753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;Total ram usage:        2 bytes
 16759 ;; Hardware stack levels used:    1
 16760 ;; Hardware stack levels required when called:    5
 16761 ;; This function calls:
 16762 ;;		_RfPointSelect
 16763 ;; This function is called by:
 16764 ;;		_DlyOff_Main
 16765 ;;		_setDimmerLights_Adj
 16766 ;;		_MainT
 16767 ;;		_setControl_Lights_Table
 16768 ;;		_setRFSW_Control
 16769 ;;		_setRFSW_AdjControl
 16770 ;;		_Sw_DimmerOnFunc
 16771 ;;		_Sw_DimmerOffFunc
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           
 16776                           ;psect for function _setTxData
 16777  0B39                     _setTxData:	
 16778                           
 16779                           ;incstack = 0
 16780                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16781                           ;setTxData@rf stored from wreg
 16782  0B39  0020               	movlb	0	; select bank0
 16783  0B3A  00A3               	movwf	setTxData@rf
 16784                           
 16785                           ;RF_Control_B1.c: 135: char i;
 16786                           ;RF_Control_B1.c: 136: RfPointSelect(rf);
 16787  0B3B  0823               	movf	setTxData@rf,w
 16788  0B3C  31A5  25A0  318B   	fcall	_RfPointSelect
 16789                           
 16790                           ;RF_Control_B1.c: 137: if(RF->Enable)
 16791  0B3F  087B               	movf	_RF,w
 16792  0B40  0086               	movwf	6
 16793  0B41  0187               	clrf	7
 16794  0B42  1C01               	btfss	1,0
 16795  0B43  0008               	return
 16796                           
 16797                           ;RF_Control_B1.c: 138: {
 16798                           ;RF_Control_B1.c: 140: if(!RF->TransceiveGO)
 16799  0B44  087B               	movf	_RF,w
 16800  0B45  0086               	movwf	6
 16801  0B46  0187               	clrf	7
 16802  0B47  1901               	btfsc	1,2
 16803  0B48  0008               	return
 16804                           
 16805                           ;RF_Control_B1.c: 141: {
 16806                           ;RF_Control_B1.c: 142: RF->TransceiveGO=1;
 16807  0B49  087B               	movf	_RF,w
 16808  0B4A  0086               	movwf	6
 16809  0B4B  0187               	clrf	7
 16810  0B4C  1501               	bsf	1,2
 16811                           
 16812                           ;RF_Control_B1.c: 151: RF_Data[0]=0x63;
 16813  0B4D  3063               	movlw	99
 16814  0B4E  0020               	movlb	0	; select bank0
 16815  0B4F  00A2               	movwf	??_setTxData
 16816  0B50  0822               	movf	??_setTxData,w
 16817  0B51  0021               	movlb	1	; select bank1
 16818  0B52  00A0               	movwf	_RF_Data^(0+128)
 16819                           
 16820                           ;RF_Control_B1.c: 152: RF_Data[1]=0x02;
 16821  0B53  3002               	movlw	2
 16822  0B54  0020               	movlb	0	; select bank0
 16823  0B55  00A2               	movwf	??_setTxData
 16824  0B56  0822               	movf	??_setTxData,w
 16825  0B57  0021               	movlb	1	; select bank1
 16826  0B58  00A1               	movwf	(_RF_Data^(0+128)+1)
 16827                           
 16828                           ;RF_Control_B1.c: 153: RF_Data[2]=Product->Data[2];
 16829  0B59  0020               	movlb	0	; select bank0
 16830  0B5A  086F               	movf	_Product,w
 16831  0B5B  0086               	movwf	6
 16832  0B5C  3001               	movlw	1	; select bank2/3
 16833  0B5D  0087               	movwf	7
 16834  0B5E  3001               	movlw	1	; select bank2/3
 16835  0B5F  3F42               	moviw [2]fsr1
 16836  0B60  0021               	movlb	1	; select bank1
 16837  0B61  00A2               	movwf	(_RF_Data^(0+128)+2)
 16838                           
 16839                           ;RF_Control_B1.c: 154: RF_Data[3]=Product->Data[3];
 16840  0B62  0020               	movlb	0	; select bank0
 16841  0B63  086F               	movf	_Product,w
 16842  0B64  0086               	movwf	6
 16843  0B65  3001               	movlw	1	; select bank2/3
 16844  0B66  0087               	movwf	7
 16845  0B67  3001               	movlw	1	; select bank2/3
 16846  0B68  3F43               	moviw [3]fsr1
 16847  0B69  0021               	movlb	1	; select bank1
 16848  0B6A  00A3               	movwf	(_RF_Data^(0+128)+3)
 16849                           
 16850                           ;RF_Control_B1.c: 155: RF_Data[4]=Product->Data[4];
 16851  0B6B  0020               	movlb	0	; select bank0
 16852  0B6C  086F               	movf	_Product,w
 16853  0B6D  0086               	movwf	6
 16854  0B6E  3001               	movlw	1	; select bank2/3
 16855  0B6F  0087               	movwf	7
 16856  0B70  3001               	movlw	1	; select bank2/3
 16857  0B71  3F44               	moviw [4]fsr1
 16858  0B72  0021               	movlb	1	; select bank1
 16859  0B73  00A4               	movwf	(_RF_Data^(0+128)+4)
 16860                           
 16861                           ;RF_Control_B1.c: 156: RF_Data[5]=Product->Data[5];
 16862  0B74  0020               	movlb	0	; select bank0
 16863  0B75  086F               	movf	_Product,w
 16864  0B76  0086               	movwf	6
 16865  0B77  3001               	movlw	1	; select bank2/3
 16866  0B78  0087               	movwf	7
 16867  0B79  3001               	movlw	1	; select bank2/3
 16868  0B7A  3F45               	moviw [5]fsr1
 16869  0B7B  0021               	movlb	1	; select bank1
 16870  0B7C  00A5               	movwf	(_RF_Data^(0+128)+5)
 16871                           
 16872                           ;RF_Control_B1.c: 157: RF_Data[6]=Product->Data[6];
 16873  0B7D  0020               	movlb	0	; select bank0
 16874  0B7E  086F               	movf	_Product,w
 16875  0B7F  0086               	movwf	6
 16876  0B80  3001               	movlw	1	; select bank2/3
 16877  0B81  0087               	movwf	7
 16878  0B82  3001               	movlw	1	; select bank2/3
 16879  0B83  3F46               	moviw [6]fsr1
 16880  0B84  0021               	movlb	1	; select bank1
 16881  0B85  00A6               	movwf	(_RF_Data^(0+128)+6)
 16882                           
 16883                           ;RF_Control_B1.c: 158: RF_Data[7]=Product->Data[7];
 16884  0B86  0020               	movlb	0	; select bank0
 16885  0B87  086F               	movf	_Product,w
 16886  0B88  0086               	movwf	6
 16887  0B89  3001               	movlw	1	; select bank2/3
 16888  0B8A  0087               	movwf	7
 16889  0B8B  3001               	movlw	1	; select bank2/3
 16890  0B8C  3F47               	moviw [7]fsr1
 16891  0B8D  0021               	movlb	1	; select bank1
 16892  0B8E  00A7               	movwf	(_RF_Data^(0+128)+7)
 16893                           
 16894                           ;RF_Control_B1.c: 159: RF_Data[8]=Product->Data[8];
 16895  0B8F  0020               	movlb	0	; select bank0
 16896  0B90  086F               	movf	_Product,w
 16897  0B91  0086               	movwf	6
 16898  0B92  3001               	movlw	1	; select bank2/3
 16899  0B93  0087               	movwf	7
 16900  0B94  3001               	movlw	1	; select bank2/3
 16901  0B95  3F48               	moviw [8]fsr1
 16902  0B96  0021               	movlb	1	; select bank1
 16903  0B97  00A8               	movwf	(_RF_Data^(0+128)+8)
 16904                           
 16905                           ;RF_Control_B1.c: 160: RF_Data[9]=Product->Data[9];
 16906  0B98  0020               	movlb	0	; select bank0
 16907  0B99  086F               	movf	_Product,w
 16908  0B9A  0086               	movwf	6
 16909  0B9B  3001               	movlw	1	; select bank2/3
 16910  0B9C  0087               	movwf	7
 16911  0B9D  3001               	movlw	1	; select bank2/3
 16912  0B9E  3F49               	moviw [9]fsr1
 16913  0B9F  0021               	movlb	1	; select bank1
 16914  0BA0  00A9               	movwf	(_RF_Data^(0+128)+9)
 16915                           
 16916                           ;RF_Control_B1.c: 161: RF_Data[10]=Product->Data[10];
 16917  0BA1  0020               	movlb	0	; select bank0
 16918  0BA2  086F               	movf	_Product,w
 16919  0BA3  0086               	movwf	6
 16920  0BA4  3001               	movlw	1	; select bank2/3
 16921  0BA5  0087               	movwf	7
 16922  0BA6  3001               	movlw	1	; select bank2/3
 16923  0BA7  3F4A               	moviw [10]fsr1
 16924  0BA8  0021               	movlb	1	; select bank1
 16925  0BA9  00AA               	movwf	(_RF_Data^(0+128)+10)
 16926                           
 16927                           ;RF_Control_B1.c: 162: RF_Data[11]=Product->Data[11];
 16928  0BAA  0020               	movlb	0	; select bank0
 16929  0BAB  086F               	movf	_Product,w
 16930  0BAC  0086               	movwf	6
 16931  0BAD  3001               	movlw	1	; select bank2/3
 16932  0BAE  0087               	movwf	7
 16933  0BAF  3001               	movlw	1	; select bank2/3
 16934  0BB0  3F4B               	moviw [11]fsr1
 16935  0BB1  0021               	movlb	1	; select bank1
 16936  0BB2  00AB               	movwf	(_RF_Data^(0+128)+11)
 16937                           
 16938                           ;RF_Control_B1.c: 163: RF_Data[12]=Product->Data[12];
 16939  0BB3  0020               	movlb	0	; select bank0
 16940  0BB4  086F               	movf	_Product,w
 16941  0BB5  0086               	movwf	6
 16942  0BB6  3001               	movlw	1	; select bank2/3
 16943  0BB7  0087               	movwf	7
 16944  0BB8  3001               	movlw	1	; select bank2/3
 16945  0BB9  3F4C               	moviw [12]fsr1
 16946  0BBA  0021               	movlb	1	; select bank1
 16947  0BBB  00AC               	movwf	(_RF_Data^(0+128)+12)
 16948                           
 16949                           ;RF_Control_B1.c: 164: RF_Data[13]=Product->Data[13];
 16950  0BBC  0020               	movlb	0	; select bank0
 16951  0BBD  086F               	movf	_Product,w
 16952  0BBE  0086               	movwf	6
 16953  0BBF  3001               	movlw	1	; select bank2/3
 16954  0BC0  0087               	movwf	7
 16955  0BC1  3001               	movlw	1	; select bank2/3
 16956  0BC2  3F4D               	moviw [13]fsr1
 16957  0BC3  0021               	movlb	1	; select bank1
 16958  0BC4  00AD               	movwf	(_RF_Data^(0+128)+13)
 16959                           
 16960                           ;RF_Control_B1.c: 165: RF_Data[14]=Product->Data[14];
 16961  0BC5  0020               	movlb	0	; select bank0
 16962  0BC6  086F               	movf	_Product,w
 16963  0BC7  0086               	movwf	6
 16964  0BC8  3001               	movlw	1	; select bank2/3
 16965  0BC9  0087               	movwf	7
 16966  0BCA  3001               	movlw	1	; select bank2/3
 16967  0BCB  3F4E               	moviw [14]fsr1
 16968  0BCC  0021               	movlb	1	; select bank1
 16969  0BCD  00AE               	movwf	(_RF_Data^(0+128)+14)
 16970                           
 16971                           ;RF_Control_B1.c: 166: RF_Data[15]=Product->Data[15];
 16972  0BCE  0020               	movlb	0	; select bank0
 16973  0BCF  086F               	movf	_Product,w
 16974  0BD0  0086               	movwf	6
 16975  0BD1  3001               	movlw	1	; select bank2/3
 16976  0BD2  0087               	movwf	7
 16977  0BD3  3001               	movlw	1	; select bank2/3
 16978  0BD4  3F4F               	moviw [15]fsr1
 16979  0BD5  0021               	movlb	1	; select bank1
 16980  0BD6  00AF               	movwf	(_RF_Data^(0+128)+15)
 16981                           
 16982                           ;RF_Control_B1.c: 167: RF_Data[16]=Product->Data[16];
 16983  0BD7  0020               	movlb	0	; select bank0
 16984  0BD8  086F               	movf	_Product,w
 16985  0BD9  0086               	movwf	6
 16986  0BDA  3001               	movlw	1	; select bank2/3
 16987  0BDB  0087               	movwf	7
 16988  0BDC  3001               	movlw	1	; select bank2/3
 16989  0BDD  3F50               	moviw [16]fsr1
 16990  0BDE  0021               	movlb	1	; select bank1
 16991  0BDF  00B0               	movwf	(_RF_Data^(0+128)+16)
 16992                           
 16993                           ;RF_Control_B1.c: 168: RF_Data[17]=Product->Data[17];
 16994  0BE0  0020               	movlb	0	; select bank0
 16995  0BE1  086F               	movf	_Product,w
 16996  0BE2  0086               	movwf	6
 16997  0BE3  3001               	movlw	1	; select bank2/3
 16998  0BE4  0087               	movwf	7
 16999  0BE5  3001               	movlw	1	; select bank2/3
 17000  0BE6  3F51               	moviw [17]fsr1
 17001  0BE7  0021               	movlb	1	; select bank1
 17002  0BE8  00B1               	movwf	(_RF_Data^(0+128)+17)
 17003                           
 17004                           ;RF_Control_B1.c: 169: RF_Data[18]=Product->Data[18];
 17005  0BE9  0020               	movlb	0	; select bank0
 17006  0BEA  086F               	movf	_Product,w
 17007  0BEB  0086               	movwf	6
 17008  0BEC  3001               	movlw	1	; select bank2/3
 17009  0BED  0087               	movwf	7
 17010  0BEE  3001               	movlw	1	; select bank2/3
 17011  0BEF  3F52               	moviw [18]fsr1
 17012  0BF0  0021               	movlb	1	; select bank1
 17013  0BF1  00B2               	movwf	(_RF_Data^(0+128)+18)
 17014                           
 17015                           ;RF_Control_B1.c: 170: RF_Data[19]=Product->Data[19];
 17016  0BF2  0020               	movlb	0	; select bank0
 17017  0BF3  086F               	movf	_Product,w
 17018  0BF4  0086               	movwf	6
 17019  0BF5  3001               	movlw	1	; select bank2/3
 17020  0BF6  0087               	movwf	7
 17021  0BF7  3001               	movlw	1	; select bank2/3
 17022  0BF8  3F53               	moviw [19]fsr1
 17023  0BF9  0021               	movlb	1	; select bank1
 17024  0BFA  00B3               	movwf	(_RF_Data^(0+128)+19)
 17025                           
 17026                           ;RF_Control_B1.c: 171: RF_Data[20]=1;
 17027  0BFB  01B4               	clrf	(_RF_Data^(0+128)+20)
 17028  0BFC  0AB4               	incf	(_RF_Data^(0+128)+20),f
 17029  0BFD  0008               	return
 17030  0BFE                     __end_of_setTxData:	
 17031                           
 17032                           	psect	text102
 17033  25A0                     __ptext102:	
 17034 ;; *************** function _RfPointSelect *****************
 17035 ;; Defined at:
 17036 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17037 ;; Parameters:    Size  Location     Type
 17038 ;;  rf              1    wreg     unsigned char 
 17039 ;; Auto vars:     Size  Location     Type
 17040 ;;  rf              1    1[BANK0 ] unsigned char 
 17041 ;; Return value:  Size  Location     Type
 17042 ;;		None               void
 17043 ;; Registers used:
 17044 ;;		wreg
 17045 ;; Tracked objects:
 17046 ;;		On entry : 0/0
 17047 ;;		On exit  : 0/0
 17048 ;;		Unchanged: 0/0
 17049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;Total ram usage:        2 bytes
 17055 ;; Hardware stack levels used:    1
 17056 ;; Hardware stack levels required when called:    4
 17057 ;; This function calls:
 17058 ;;		Nothing
 17059 ;; This function is called by:
 17060 ;;		_setRF_Learn
 17061 ;;		_setRF_RxStatus
 17062 ;;		_setRF_Main
 17063 ;;		_setTxData
 17064 ;;		_setRF_Enable
 17065 ;;		_RF_RxDisable
 17066 ;;		_getRxData
 17067 ;;		_setLog_Code
 17068 ;;		_setControl_Lights_Table
 17069 ;; This function uses a non-reentrant model
 17070 ;;
 17071                           
 17072                           
 17073                           ;psect for function _RfPointSelect
 17074  25A0                     _RfPointSelect:	
 17075                           
 17076                           ;incstack = 0
 17077                           ; Regs used in _RfPointSelect: [wreg]
 17078                           ;RfPointSelect@rf stored from wreg
 17079  25A0  0020               	movlb	0	; select bank0
 17080  25A1  00A1               	movwf	RfPointSelect@rf
 17081                           
 17082                           ;RF_Control_B1.c: 10: if(rf == 1)
 17083  25A2  0821               	movf	RfPointSelect@rf,w
 17084  25A3  3A01               	xorlw	1
 17085  25A4  1D03               	skipz
 17086  25A5  0008               	return
 17087                           
 17088                           ;RF_Control_B1.c: 11: {
 17089                           ;RF_Control_B1.c: 12: RF=&RF1;
 17090  25A6  30E7               	movlw	_RF1& (0+255)
 17091  25A7  00A0               	movwf	??_RfPointSelect
 17092  25A8  0820               	movf	??_RfPointSelect,w
 17093  25A9  00FB               	movwf	_RF
 17094  25AA  0008               	return
 17095  25AB                     __end_of_RfPointSelect:	
 17096                           
 17097                           	psect	text103
 17098  26BE                     __ptext103:	
 17099 ;; *************** function _setSw_Status *****************
 17100 ;; Defined at:
 17101 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17102 ;; Parameters:    Size  Location     Type
 17103 ;;  sw              1    wreg     unsigned char 
 17104 ;;  command         1    2[BANK0 ] unsigned char 
 17105 ;; Auto vars:     Size  Location     Type
 17106 ;;  sw              1    3[BANK0 ] unsigned char 
 17107 ;; Return value:  Size  Location     Type
 17108 ;;		None               void
 17109 ;; Registers used:
 17110 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17111 ;; Tracked objects:
 17112 ;;		On entry : 0/0
 17113 ;;		On exit  : 0/0
 17114 ;;		Unchanged: 0/0
 17115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17116 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17120 ;;Total ram usage:        2 bytes
 17121 ;; Hardware stack levels used:    1
 17122 ;; Hardware stack levels required when called:    5
 17123 ;; This function calls:
 17124 ;;		_SwPointSelect
 17125 ;; This function is called by:
 17126 ;;		_DlyOff_Main
 17127 ;;		_setDimmerLights_ERROR
 17128 ;;		_setControl_Lights_Table
 17129 ;;		_setRFSW_Control
 17130 ;; This function uses a non-reentrant model
 17131 ;;
 17132                           
 17133                           
 17134                           ;psect for function _setSw_Status
 17135  26BE                     _setSw_Status:	
 17136                           
 17137                           ;incstack = 0
 17138                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17139                           ;setSw_Status@sw stored from wreg
 17140  26BE  0020               	movlb	0	; select bank0
 17141  26BF  00A3               	movwf	setSw_Status@sw
 17142                           
 17143                           ;Switch_B1.c: 108: SwPointSelect(sw);
 17144  26C0  0823               	movf	setSw_Status@sw,w
 17145  26C1  31A5  2595         	fcall	_SwPointSelect
 17146                           
 17147                           ;Switch_B1.c: 109: Sw->Status=command;
 17148  26C3  0020               	movlb	0	; select bank0
 17149  26C4  086D               	movf	_Sw,w
 17150  26C5  0086               	movwf	6
 17151  26C6  3001               	movlw	1	; select bank2/3
 17152  26C7  0087               	movwf	7
 17153  26C8  0822               	movf	setSw_Status@command,w
 17154  26C9  1301               	bcf	1,6
 17155  26CA  1D03               	skipz
 17156  26CB  1701               	bsf	1,6
 17157  26CC  0008               	return
 17158  26CD                     __end_of_setSw_Status:	
 17159                           
 17160                           	psect	text104
 17161  2595                     __ptext104:	
 17162 ;; *************** function _SwPointSelect *****************
 17163 ;; Defined at:
 17164 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;  sw              1    wreg     unsigned char 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  sw              1    1[BANK0 ] unsigned char 
 17169 ;; Return value:  Size  Location     Type
 17170 ;;		None               void
 17171 ;; Registers used:
 17172 ;;		wreg
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;Total ram usage:        2 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    4
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_setSw_Enable
 17189 ;;		_setSw_Status
 17190 ;;		_setSw_Main
 17191 ;;		_Sw_Detect
 17192 ;; This function uses a non-reentrant model
 17193 ;;
 17194                           
 17195                           
 17196                           ;psect for function _SwPointSelect
 17197  2595                     _SwPointSelect:	
 17198                           
 17199                           ;incstack = 0
 17200                           ; Regs used in _SwPointSelect: [wreg]
 17201                           ;SwPointSelect@sw stored from wreg
 17202  2595  0020               	movlb	0	; select bank0
 17203  2596  00A1               	movwf	SwPointSelect@sw
 17204                           
 17205                           ;Switch_B1.c: 19: if(sw == 1)
 17206  2597  0821               	movf	SwPointSelect@sw,w
 17207  2598  3A01               	xorlw	1
 17208  2599  1D03               	skipz
 17209  259A  0008               	return
 17210                           
 17211                           ;Switch_B1.c: 20: {
 17212                           ;Switch_B1.c: 21: Sw=&Sw1;
 17213  259B  3057               	movlw	_Sw1& (0+255)
 17214  259C  00A0               	movwf	??_SwPointSelect
 17215  259D  0820               	movf	??_SwPointSelect,w
 17216  259E  00ED               	movwf	_Sw
 17217  259F  0008               	return
 17218  25A0                     __end_of_SwPointSelect:	
 17219                           
 17220                           	psect	text105
 17221  1286                     __ptext105:	
 17222 ;; *************** function _setRF_DimmerLights *****************
 17223 ;; Defined at:
 17224 ;;		line 437 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  lights          1    wreg     unsigned char 
 17227 ;;  on              1   61[BANK0 ] unsigned char 
 17228 ;; Auto vars:     Size  Location     Type
 17229 ;;  lights          1   65[BANK0 ] unsigned char 
 17230 ;;  status          1   64[BANK0 ] unsigned char 
 17231 ;; Return value:  Size  Location     Type
 17232 ;;		None               void
 17233 ;; Registers used:
 17234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17235 ;; Tracked objects:
 17236 ;;		On entry : 0/0
 17237 ;;		On exit  : 0/0
 17238 ;;		Unchanged: 0/0
 17239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17240 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;Total ram usage:        5 bytes
 17245 ;; Hardware stack levels used:    1
 17246 ;; Hardware stack levels required when called:    7
 17247 ;; This function calls:
 17248 ;;		_setPercentValue
 17249 ;; This function is called by:
 17250 ;;		_DlyOff_Main
 17251 ;;		_setDimmerLights_Adj
 17252 ;;		_setRFSW_Control
 17253 ;;		_Sw_DimmerOnFunc
 17254 ;;		_Sw_DimmerOffFunc
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _setRF_DimmerLights
 17260  1286                     _setRF_DimmerLights:	
 17261                           
 17262                           ;incstack = 0
 17263                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17264                           ;setRF_DimmerLights@lights stored from wreg
 17265  1286  0020               	movlb	0	; select bank0
 17266  1287  00E1               	movwf	setRF_DimmerLights@lights
 17267                           
 17268                           ;RF_Control_B1.c: 439: char status;
 17269                           ;RF_Control_B1.c: 440: status=1;
 17270  1288  01E0               	clrf	setRF_DimmerLights@status
 17271  1289  0AE0               	incf	setRF_DimmerLights@status,f
 17272                           
 17273                           ;RF_Control_B1.c: 441: status<<=(lights-1);
 17274  128A  0861               	movf	setRF_DimmerLights@lights,w
 17275  128B  3EFF               	addlw	-1
 17276  128C  0A89               	incf	9,f
 17277  128D  2A90               	goto	u7510
 17278  128E                     u7515:	
 17279  128E  1003               	clrc
 17280  128F  0DE0               	rlf	setRF_DimmerLights@status,f
 17281  1290                     u7510:	
 17282  1290  3EFF               	addlw	-1
 17283  1291  1D03               	skipz
 17284  1292  2A8E               	goto	u7515
 17285                           
 17286                           ;RF_Control_B1.c: 442: Product->Data[11]=lights;
 17287  1293  0861               	movf	setRF_DimmerLights@lights,w
 17288  1294  00DE               	movwf	??_setRF_DimmerLights
 17289  1295  086F               	movf	_Product,w
 17290  1296  3E0B               	addlw	11
 17291  1297  0086               	movwf	6
 17292  1298  3001               	movlw	1	; select bank2/3
 17293  1299  0087               	movwf	7
 17294  129A  085E               	movf	??_setRF_DimmerLights,w
 17295  129B  0081               	movwf	1
 17296                           
 17297                           ;RF_Control_B1.c: 445: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 17298  129C  3043               	movlw	67
 17299  129D  319E  262E  3192   	fcall	_setPercentValue
 17300  12A0  0020               	movlb	0	; select bank0
 17301  12A1  00DE               	movwf	??_setRF_DimmerLights
 17302  12A2  0861               	movf	setRF_DimmerLights@lights,w
 17303  12A3  3E14               	addlw	20
 17304  12A4  076F               	addwf	_Product,w
 17305  12A5  00DF               	movwf	??_setRF_DimmerLights+1
 17306  12A6  085F               	movf	??_setRF_DimmerLights+1,w
 17307  12A7  0086               	movwf	6
 17308  12A8  3001               	movlw	1	; select bank2/3
 17309  12A9  0087               	movwf	7
 17310  12AA  085E               	movf	??_setRF_DimmerLights,w
 17311  12AB  0081               	movwf	1
 17312                           
 17313                           ;RF_Control_B1.c: 448: Product->Data[9]=Product->Data[20+lights];
 17314  12AC  0861               	movf	setRF_DimmerLights@lights,w
 17315  12AD  3E14               	addlw	20
 17316  12AE  076F               	addwf	_Product,w
 17317  12AF  00DE               	movwf	??_setRF_DimmerLights
 17318  12B0  085E               	movf	??_setRF_DimmerLights,w
 17319  12B1  0086               	movwf	6
 17320  12B2  3001               	movlw	1	; select bank2/3
 17321  12B3  0087               	movwf	7
 17322  12B4  0801               	movf	1,w
 17323  12B5  00DF               	movwf	??_setRF_DimmerLights+1
 17324  12B6  086F               	movf	_Product,w
 17325  12B7  3E09               	addlw	9
 17326  12B8  0086               	movwf	6
 17327  12B9  3001               	movlw	1	; select bank2/3
 17328  12BA  0087               	movwf	7
 17329  12BB  085F               	movf	??_setRF_DimmerLights+1,w
 17330  12BC  0081               	movwf	1
 17331                           
 17332                           ;RF_Control_B1.c: 449: Product->Data[17]=Product->Data[26+lights];
 17333  12BD  0861               	movf	setRF_DimmerLights@lights,w
 17334  12BE  3E1A               	addlw	26
 17335  12BF  076F               	addwf	_Product,w
 17336  12C0  00DE               	movwf	??_setRF_DimmerLights
 17337  12C1  085E               	movf	??_setRF_DimmerLights,w
 17338  12C2  0086               	movwf	6
 17339  12C3  3001               	movlw	1	; select bank2/3
 17340  12C4  0087               	movwf	7
 17341  12C5  0801               	movf	1,w
 17342  12C6  00DF               	movwf	??_setRF_DimmerLights+1
 17343  12C7  086F               	movf	_Product,w
 17344  12C8  3E11               	addlw	17
 17345  12C9  0086               	movwf	6
 17346  12CA  3001               	movlw	1	; select bank2/3
 17347  12CB  0087               	movwf	7
 17348  12CC  085F               	movf	??_setRF_DimmerLights+1,w
 17349  12CD  0081               	movwf	1
 17350                           
 17351                           ;RF_Control_B1.c: 450: if(on)
 17352  12CE  085D               	movf	setRF_DimmerLights@on,w
 17353  12CF  1903               	btfsc	3,2
 17354  12D0  2AE1               	goto	l8238
 17355                           
 17356                           ;RF_Control_B1.c: 451: {
 17357                           ;RF_Control_B1.c: 452: Product->Data[15]=(Product->Data[15]|status);
 17358  12D1  086F               	movf	_Product,w
 17359  12D2  3E0F               	addlw	15
 17360  12D3  0086               	movwf	6
 17361  12D4  3001               	movlw	1	; select bank2/3
 17362  12D5  0087               	movwf	7
 17363  12D6  0801               	movf	1,w
 17364  12D7  0460               	iorwf	setRF_DimmerLights@status,w
 17365  12D8  00DE               	movwf	??_setRF_DimmerLights
 17366  12D9  086F               	movf	_Product,w
 17367  12DA  3E0F               	addlw	15
 17368  12DB  0086               	movwf	6
 17369  12DC  3001               	movlw	1	; select bank2/3
 17370  12DD  0087               	movwf	7
 17371  12DE  085E               	movf	??_setRF_DimmerLights,w
 17372  12DF  0081               	movwf	1
 17373                           
 17374                           ;RF_Control_B1.c: 453: }
 17375  12E0  0008               	return
 17376  12E1                     l8238:	
 17377                           
 17378                           ;RF_Control_B1.c: 454: else
 17379                           ;RF_Control_B1.c: 455: {
 17380                           ;RF_Control_B1.c: 456: Product->Data[15]=(Product->Data[15]&(~status));
 17381  12E1  086F               	movf	_Product,w
 17382  12E2  3E0F               	addlw	15
 17383  12E3  0086               	movwf	6
 17384  12E4  3001               	movlw	1	; select bank2/3
 17385  12E5  0087               	movwf	7
 17386  12E6  0960               	comf	setRF_DimmerLights@status,w
 17387  12E7  0501               	andwf	1,w
 17388  12E8  00DE               	movwf	??_setRF_DimmerLights
 17389  12E9  086F               	movf	_Product,w
 17390  12EA  3E0F               	addlw	15
 17391  12EB  0086               	movwf	6
 17392  12EC  3001               	movlw	1	; select bank2/3
 17393  12ED  0087               	movwf	7
 17394  12EE  085E               	movf	??_setRF_DimmerLights,w
 17395  12EF  0081               	movwf	1
 17396  12F0  0008               	return
 17397  12F1                     __end_of_setRF_DimmerLights:	
 17398                           
 17399                           	psect	text106
 17400  1E2E                     __ptext106:	
 17401 ;; *************** function _setPercentValue *****************
 17402 ;; Defined at:
 17403 ;;		line 496 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17404 ;; Parameters:    Size  Location     Type
 17405 ;;  value           1    wreg     unsigned char 
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;  value           1   57[BANK0 ] unsigned char 
 17408 ;;  i               3   58[BANK0 ] float 
 17409 ;; Return value:  Size  Location     Type
 17410 ;;                  1    wreg      unsigned char 
 17411 ;; Registers used:
 17412 ;;		wreg, status,2, status,0, pclath, cstack
 17413 ;; Tracked objects:
 17414 ;;		On entry : 0/0
 17415 ;;		On exit  : 0/0
 17416 ;;		Unchanged: 0/0
 17417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17419 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17422 ;;Total ram usage:        4 bytes
 17423 ;; Hardware stack levels used:    1
 17424 ;; Hardware stack levels required when called:    6
 17425 ;; This function calls:
 17426 ;;		___awtoft
 17427 ;;		___ftdiv
 17428 ;;		___fttol
 17429 ;; This function is called by:
 17430 ;;		_Flash_Memory_Initialization
 17431 ;;		_setRF_DimmerLights
 17432 ;; This function uses a non-reentrant model
 17433 ;;
 17434                           
 17435                           
 17436                           ;psect for function _setPercentValue
 17437  1E2E                     _setPercentValue:	
 17438                           
 17439                           ;incstack = 0
 17440                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17441                           ;setPercentValue@value stored from wreg
 17442  1E2E  0020               	movlb	0	; select bank0
 17443  1E2F  00D9               	movwf	setPercentValue@value
 17444                           
 17445                           ;Dimmer_B1.c: 499: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17446  1E30  3000               	movlw	0
 17447  1E31  00DA               	movwf	setPercentValue@i
 17448  1E32  3054               	movlw	84
 17449  1E33  00DB               	movwf	setPercentValue@i+1
 17450  1E34  3042               	movlw	66
 17451  1E35  00DC               	movwf	setPercentValue@i+2
 17452                           
 17453                           ;Dimmer_B1.c: 500: i/=100;
 17454  1E36  3000               	movlw	0
 17455  1E37  00AE               	movwf	___ftdiv@f2
 17456  1E38  30C8               	movlw	200
 17457  1E39  00AF               	movwf	___ftdiv@f2+1
 17458  1E3A  3042               	movlw	66
 17459  1E3B  00B0               	movwf	___ftdiv@f2+2
 17460  1E3C  085A               	movf	setPercentValue@i,w
 17461  1E3D  00B1               	movwf	___ftdiv@f1
 17462  1E3E  085B               	movf	setPercentValue@i+1,w
 17463  1E3F  00B2               	movwf	___ftdiv@f1+1
 17464  1E40  085C               	movf	setPercentValue@i+2,w
 17465  1E41  00B3               	movwf	___ftdiv@f1+2
 17466  1E42  318A  2290  319E   	fcall	___ftdiv
 17467  1E45  0020               	movlb	0	; select bank0
 17468  1E46  082E               	movf	?___ftdiv,w
 17469  1E47  00DA               	movwf	setPercentValue@i
 17470  1E48  082F               	movf	?___ftdiv+1,w
 17471  1E49  00DB               	movwf	setPercentValue@i+1
 17472  1E4A  0830               	movf	?___ftdiv+2,w
 17473  1E4B  00DC               	movwf	setPercentValue@i+2
 17474                           
 17475                           ;Dimmer_B1.c: 501: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17476  1E4C  0859               	movf	setPercentValue@value,w
 17477  1E4D  3EBD               	addlw	189
 17478  1E4E  00A8               	movwf	___awtoft@c
 17479  1E4F  30FF               	movlw	255
 17480  1E50  1803               	skipnc
 17481  1E51  3000               	movlw	0
 17482  1E52  00A9               	movwf	___awtoft@c+1
 17483  1E53  3199  2137  319E   	fcall	___awtoft
 17484  1E56  0020               	movlb	0	; select bank0
 17485  1E57  0828               	movf	?___awtoft,w
 17486  1E58  00B1               	movwf	___ftdiv@f1
 17487  1E59  0829               	movf	?___awtoft+1,w
 17488  1E5A  00B2               	movwf	___ftdiv@f1+1
 17489  1E5B  082A               	movf	?___awtoft+2,w
 17490  1E5C  00B3               	movwf	___ftdiv@f1+2
 17491  1E5D  085A               	movf	setPercentValue@i,w
 17492  1E5E  00AE               	movwf	___ftdiv@f2
 17493  1E5F  085B               	movf	setPercentValue@i+1,w
 17494  1E60  00AF               	movwf	___ftdiv@f2+1
 17495  1E61  085C               	movf	setPercentValue@i+2,w
 17496  1E62  00B0               	movwf	___ftdiv@f2+2
 17497  1E63  318A  2290  319E   	fcall	___ftdiv
 17498  1E66  0020               	movlb	0	; select bank0
 17499  1E67  082E               	movf	?___ftdiv,w
 17500  1E68  00CB               	movwf	___fttol@f1
 17501  1E69  082F               	movf	?___ftdiv+1,w
 17502  1E6A  00CC               	movwf	___fttol@f1+1
 17503  1E6B  0830               	movf	?___ftdiv+2,w
 17504  1E6C  00CD               	movwf	___fttol@f1+2
 17505  1E6D  3196  26F1         	fcall	___fttol
 17506  1E6F  0020               	movlb	0	; select bank0
 17507  1E70  034B               	decf	?___fttol,w
 17508  1E71  3AFF               	xorlw	255
 17509  1E72  3E64               	addlw	100
 17510  1E73  0008               	return
 17511  1E74                     __end_of_setPercentValue:	
 17512                           
 17513                           	psect	text107
 17514  16F1                     __ptext107:	
 17515 ;; *************** function ___fttol *****************
 17516 ;; Defined at:
 17517 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17518 ;; Parameters:    Size  Location     Type
 17519 ;;  f1              3   43[BANK0 ] float 
 17520 ;; Auto vars:     Size  Location     Type
 17521 ;;  lval            4   52[BANK0 ] unsigned long 
 17522 ;;  exp1            1   56[BANK0 ] unsigned char 
 17523 ;;  sign1           1   51[BANK0 ] unsigned char 
 17524 ;; Return value:  Size  Location     Type
 17525 ;;                  4   43[BANK0 ] long 
 17526 ;; Registers used:
 17527 ;;		wreg, status,2, status,0
 17528 ;; Tracked objects:
 17529 ;;		On entry : 0/0
 17530 ;;		On exit  : 0/0
 17531 ;;		Unchanged: 0/0
 17532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;Total ram usage:       14 bytes
 17538 ;; Hardware stack levels used:    1
 17539 ;; Hardware stack levels required when called:    4
 17540 ;; This function calls:
 17541 ;;		Nothing
 17542 ;; This function is called by:
 17543 ;;		_getPercentValue
 17544 ;;		_setPercentValue
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           
 17549                           ;psect for function ___fttol
 17550  16F1                     ___fttol:	
 17551                           
 17552                           ;incstack = 0
 17553                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17554  16F1  0020               	movlb	0	; select bank0
 17555  16F2  084B               	movf	___fttol@f1,w
 17556  16F3  00CF               	movwf	??___fttol
 17557  16F4  084C               	movf	___fttol@f1+1,w
 17558  16F5  00D0               	movwf	??___fttol+1
 17559  16F6  084D               	movf	___fttol@f1+2,w
 17560  16F7  00D1               	movwf	??___fttol+2
 17561  16F8  1003               	clrc
 17562  16F9  0D50               	rlf	??___fttol+1,w
 17563  16FA  0D51               	rlf	??___fttol+2,w
 17564  16FB  00D2               	movwf	??___fttol+3
 17565  16FC  0852               	movf	??___fttol+3,w
 17566  16FD  00D8               	movwf	___fttol@exp1
 17567  16FE  08D8               	movf	___fttol@exp1,f
 17568  16FF  1D03               	skipz
 17569  1700  2F0A               	goto	l6012
 17570  1701  3000               	movlw	0
 17571  1702  00CE               	movwf	?___fttol+3
 17572  1703  3000               	movlw	0
 17573  1704  00CD               	movwf	?___fttol+2
 17574  1705  3000               	movlw	0
 17575  1706  00CC               	movwf	?___fttol+1
 17576  1707  3000               	movlw	0
 17577  1708  00CB               	movwf	?___fttol
 17578  1709  0008               	return
 17579  170A                     l6012:	
 17580  170A  084B               	movf	___fttol@f1,w
 17581  170B  00CF               	movwf	??___fttol
 17582  170C  084C               	movf	___fttol@f1+1,w
 17583  170D  00D0               	movwf	??___fttol+1
 17584  170E  084D               	movf	___fttol@f1+2,w
 17585  170F  00D1               	movwf	??___fttol+2
 17586  1710  3017               	movlw	23
 17587  1711                     u4285:	
 17588  1711  36D1               	lsrf	??___fttol+2,f
 17589  1712  0CD0               	rrf	??___fttol+1,f
 17590  1713  0CCF               	rrf	??___fttol,f
 17591  1714  0B89               	decfsz	9,f
 17592  1715  2F11               	goto	u4285
 17593  1716  084F               	movf	??___fttol,w
 17594  1717  00D2               	movwf	??___fttol+3
 17595  1718  0852               	movf	??___fttol+3,w
 17596  1719  00D3               	movwf	___fttol@sign1
 17597  171A  17CC               	bsf	___fttol@f1+1,7
 17598  171B  30FF               	movlw	255
 17599  171C  05CB               	andwf	___fttol@f1,f
 17600  171D  30FF               	movlw	255
 17601  171E  05CC               	andwf	___fttol@f1+1,f
 17602  171F  3000               	movlw	0
 17603  1720  05CD               	andwf	___fttol@f1+2,f
 17604  1721  084B               	movf	___fttol@f1,w
 17605  1722  00D4               	movwf	___fttol@lval
 17606  1723  084C               	movf	___fttol@f1+1,w
 17607  1724  00D5               	movwf	___fttol@lval+1
 17608  1725  084D               	movf	___fttol@f1+2,w
 17609  1726  00D6               	movwf	___fttol@lval+2
 17610  1727  01D7               	clrf	___fttol@lval+3
 17611  1728  308E               	movlw	142
 17612  1729  02D8               	subwf	___fttol@exp1,f
 17613  172A  1FD8               	btfss	___fttol@exp1,7
 17614  172B  2F48               	goto	l6032
 17615  172C  0858               	movf	___fttol@exp1,w
 17616  172D  3A80               	xorlw	128
 17617  172E  3E8F               	addlw	143
 17618  172F  1803               	skipnc
 17619  1730  2F3A               	goto	l6030
 17620  1731  3000               	movlw	0
 17621  1732  00CE               	movwf	?___fttol+3
 17622  1733  3000               	movlw	0
 17623  1734  00CD               	movwf	?___fttol+2
 17624  1735  3000               	movlw	0
 17625  1736  00CC               	movwf	?___fttol+1
 17626  1737  3000               	movlw	0
 17627  1738  00CB               	movwf	?___fttol
 17628  1739  0008               	return
 17629  173A                     l6030:	
 17630  173A  3001               	movlw	1
 17631  173B                     u4315:	
 17632  173B  36D7               	lsrf	___fttol@lval+3,f
 17633  173C  0CD6               	rrf	___fttol@lval+2,f
 17634  173D  0CD5               	rrf	___fttol@lval+1,f
 17635  173E  0CD4               	rrf	___fttol@lval,f
 17636  173F  0B89               	decfsz	9,f
 17637  1740  2F3B               	goto	u4315
 17638  1741  3001               	movlw	1
 17639  1742  00CF               	movwf	??___fttol
 17640  1743  084F               	movf	??___fttol,w
 17641  1744  07D8               	addwf	___fttol@exp1,f
 17642  1745  1903               	btfsc	3,2
 17643  1746  2F61               	goto	l6042
 17644  1747  2F3A               	goto	l6030
 17645  1748                     l6032:	
 17646  1748  3018               	movlw	24
 17647  1749  0258               	subwf	___fttol@exp1,w
 17648  174A  1C03               	skipc
 17649  174B  2F5E               	goto	l6040
 17650  174C  3000               	movlw	0
 17651  174D  00CE               	movwf	?___fttol+3
 17652  174E  3000               	movlw	0
 17653  174F  00CD               	movwf	?___fttol+2
 17654  1750  3000               	movlw	0
 17655  1751  00CC               	movwf	?___fttol+1
 17656  1752  3000               	movlw	0
 17657  1753  00CB               	movwf	?___fttol
 17658  1754  0008               	return
 17659  1755                     l6038:	
 17660  1755  3001               	movlw	1
 17661  1756                     u4345:	
 17662  1756  35D4               	lslf	___fttol@lval,f
 17663  1757  0DD5               	rlf	___fttol@lval+1,f
 17664  1758  0DD6               	rlf	___fttol@lval+2,f
 17665  1759  0DD7               	rlf	___fttol@lval+3,f
 17666  175A  0B89               	decfsz	9,f
 17667  175B  2F56               	goto	u4345
 17668  175C  3001               	movlw	1
 17669  175D  02D8               	subwf	___fttol@exp1,f
 17670  175E                     l6040:	
 17671  175E  08D8               	movf	___fttol@exp1,f
 17672  175F  1D03               	skipz
 17673  1760  2F55               	goto	l6038
 17674  1761                     l6042:	
 17675  1761  0853               	movf	___fttol@sign1,w
 17676  1762  1903               	btfsc	3,2
 17677  1763  2F6F               	goto	l6046
 17678  1764  09D4               	comf	___fttol@lval,f
 17679  1765  09D5               	comf	___fttol@lval+1,f
 17680  1766  09D6               	comf	___fttol@lval+2,f
 17681  1767  09D7               	comf	___fttol@lval+3,f
 17682  1768  0AD4               	incf	___fttol@lval,f
 17683  1769  1903               	skipnz
 17684  176A  0AD5               	incf	___fttol@lval+1,f
 17685  176B  1903               	skipnz
 17686  176C  0AD6               	incf	___fttol@lval+2,f
 17687  176D  1903               	skipnz
 17688  176E  0AD7               	incf	___fttol@lval+3,f
 17689  176F                     l6046:	
 17690  176F  0857               	movf	___fttol@lval+3,w
 17691  1770  00CE               	movwf	?___fttol+3
 17692  1771  0856               	movf	___fttol@lval+2,w
 17693  1772  00CD               	movwf	?___fttol+2
 17694  1773  0855               	movf	___fttol@lval+1,w
 17695  1774  00CC               	movwf	?___fttol+1
 17696  1775  0854               	movf	___fttol@lval,w
 17697  1776  00CB               	movwf	?___fttol
 17698  1777  0008               	return
 17699  1778                     __end_of___fttol:	
 17700                           
 17701                           	psect	text108
 17702  0A90                     __ptext108:	
 17703 ;; *************** function ___ftdiv *****************
 17704 ;; Defined at:
 17705 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17706 ;; Parameters:    Size  Location     Type
 17707 ;;  f2              3   14[BANK0 ] float 
 17708 ;;  f1              3   17[BANK0 ] float 
 17709 ;; Auto vars:     Size  Location     Type
 17710 ;;  f3              3   25[BANK0 ] float 
 17711 ;;  sign            1   29[BANK0 ] unsigned char 
 17712 ;;  exp             1   28[BANK0 ] unsigned char 
 17713 ;;  cntr            1   24[BANK0 ] unsigned char 
 17714 ;; Return value:  Size  Location     Type
 17715 ;;                  3   14[BANK0 ] float 
 17716 ;; Registers used:
 17717 ;;		wreg, status,2, status,0, pclath, cstack
 17718 ;; Tracked objects:
 17719 ;;		On entry : 0/0
 17720 ;;		On exit  : 0/0
 17721 ;;		Unchanged: 0/0
 17722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17723 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;Total ram usage:       16 bytes
 17728 ;; Hardware stack levels used:    1
 17729 ;; Hardware stack levels required when called:    5
 17730 ;; This function calls:
 17731 ;;		___ftpack
 17732 ;; This function is called by:
 17733 ;;		_getPercentValue
 17734 ;;		_setPercentValue
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           
 17739                           ;psect for function ___ftdiv
 17740  0A90                     ___ftdiv:	
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17744  0A90  0020               	movlb	0	; select bank0
 17745  0A91  0831               	movf	___ftdiv@f1,w
 17746  0A92  00B4               	movwf	??___ftdiv
 17747  0A93  0832               	movf	___ftdiv@f1+1,w
 17748  0A94  00B5               	movwf	??___ftdiv+1
 17749  0A95  0833               	movf	___ftdiv@f1+2,w
 17750  0A96  00B6               	movwf	??___ftdiv+2
 17751  0A97  1003               	clrc
 17752  0A98  0D35               	rlf	??___ftdiv+1,w
 17753  0A99  0D36               	rlf	??___ftdiv+2,w
 17754  0A9A  00B7               	movwf	??___ftdiv+3
 17755  0A9B  0837               	movf	??___ftdiv+3,w
 17756  0A9C  00BC               	movwf	___ftdiv@exp
 17757  0A9D  08BC               	movf	___ftdiv@exp,f
 17758  0A9E  1D03               	skipz
 17759  0A9F  2AA7               	goto	l5920
 17760  0AA0  3000               	movlw	0
 17761  0AA1  00AE               	movwf	?___ftdiv
 17762  0AA2  3000               	movlw	0
 17763  0AA3  00AF               	movwf	?___ftdiv+1
 17764  0AA4  3000               	movlw	0
 17765  0AA5  00B0               	movwf	?___ftdiv+2
 17766  0AA6  0008               	return
 17767  0AA7                     l5920:	
 17768  0AA7  082E               	movf	___ftdiv@f2,w
 17769  0AA8  00B4               	movwf	??___ftdiv
 17770  0AA9  082F               	movf	___ftdiv@f2+1,w
 17771  0AAA  00B5               	movwf	??___ftdiv+1
 17772  0AAB  0830               	movf	___ftdiv@f2+2,w
 17773  0AAC  00B6               	movwf	??___ftdiv+2
 17774  0AAD  1003               	clrc
 17775  0AAE  0D35               	rlf	??___ftdiv+1,w
 17776  0AAF  0D36               	rlf	??___ftdiv+2,w
 17777  0AB0  00B7               	movwf	??___ftdiv+3
 17778  0AB1  0837               	movf	??___ftdiv+3,w
 17779  0AB2  00BD               	movwf	___ftdiv@sign
 17780  0AB3  08BD               	movf	___ftdiv@sign,f
 17781  0AB4  1D03               	skipz
 17782  0AB5  2ABD               	goto	l5926
 17783  0AB6  3000               	movlw	0
 17784  0AB7  00AE               	movwf	?___ftdiv
 17785  0AB8  3000               	movlw	0
 17786  0AB9  00AF               	movwf	?___ftdiv+1
 17787  0ABA  3000               	movlw	0
 17788  0ABB  00B0               	movwf	?___ftdiv+2
 17789  0ABC  0008               	return
 17790  0ABD                     l5926:	
 17791  0ABD  3000               	movlw	0
 17792  0ABE  00B9               	movwf	___ftdiv@f3
 17793  0ABF  3000               	movlw	0
 17794  0AC0  00BA               	movwf	___ftdiv@f3+1
 17795  0AC1  3000               	movlw	0
 17796  0AC2  00BB               	movwf	___ftdiv@f3+2
 17797  0AC3  3089               	movlw	137
 17798  0AC4  073D               	addwf	___ftdiv@sign,w
 17799  0AC5  00B4               	movwf	??___ftdiv
 17800  0AC6  0834               	movf	??___ftdiv,w
 17801  0AC7  02BC               	subwf	___ftdiv@exp,f
 17802  0AC8  0831               	movf	___ftdiv@f1,w
 17803  0AC9  00B4               	movwf	??___ftdiv
 17804  0ACA  0832               	movf	___ftdiv@f1+1,w
 17805  0ACB  00B5               	movwf	??___ftdiv+1
 17806  0ACC  0833               	movf	___ftdiv@f1+2,w
 17807  0ACD  00B6               	movwf	??___ftdiv+2
 17808  0ACE  3010               	movlw	16
 17809  0ACF                     u4095:	
 17810  0ACF  36B6               	lsrf	??___ftdiv+2,f
 17811  0AD0  0CB5               	rrf	??___ftdiv+1,f
 17812  0AD1  0CB4               	rrf	??___ftdiv,f
 17813  0AD2  0B89               	decfsz	9,f
 17814  0AD3  2ACF               	goto	u4095
 17815  0AD4  0834               	movf	??___ftdiv,w
 17816  0AD5  00B7               	movwf	??___ftdiv+3
 17817  0AD6  0837               	movf	??___ftdiv+3,w
 17818  0AD7  00BD               	movwf	___ftdiv@sign
 17819  0AD8  082E               	movf	___ftdiv@f2,w
 17820  0AD9  00B4               	movwf	??___ftdiv
 17821  0ADA  082F               	movf	___ftdiv@f2+1,w
 17822  0ADB  00B5               	movwf	??___ftdiv+1
 17823  0ADC  0830               	movf	___ftdiv@f2+2,w
 17824  0ADD  00B6               	movwf	??___ftdiv+2
 17825  0ADE  3010               	movlw	16
 17826  0ADF                     u4105:	
 17827  0ADF  36B6               	lsrf	??___ftdiv+2,f
 17828  0AE0  0CB5               	rrf	??___ftdiv+1,f
 17829  0AE1  0CB4               	rrf	??___ftdiv,f
 17830  0AE2  0B89               	decfsz	9,f
 17831  0AE3  2ADF               	goto	u4105
 17832  0AE4  0834               	movf	??___ftdiv,w
 17833  0AE5  00B7               	movwf	??___ftdiv+3
 17834  0AE6  0837               	movf	??___ftdiv+3,w
 17835  0AE7  06BD               	xorwf	___ftdiv@sign,f
 17836  0AE8  3080               	movlw	128
 17837  0AE9  00B4               	movwf	??___ftdiv
 17838  0AEA  0834               	movf	??___ftdiv,w
 17839  0AEB  05BD               	andwf	___ftdiv@sign,f
 17840  0AEC  17B2               	bsf	___ftdiv@f1+1,7
 17841  0AED  30FF               	movlw	255
 17842  0AEE  05B1               	andwf	___ftdiv@f1,f
 17843  0AEF  30FF               	movlw	255
 17844  0AF0  05B2               	andwf	___ftdiv@f1+1,f
 17845  0AF1  3000               	movlw	0
 17846  0AF2  05B3               	andwf	___ftdiv@f1+2,f
 17847  0AF3  17AF               	bsf	___ftdiv@f2+1,7
 17848  0AF4  30FF               	movlw	255
 17849  0AF5  05AE               	andwf	___ftdiv@f2,f
 17850  0AF6  30FF               	movlw	255
 17851  0AF7  05AF               	andwf	___ftdiv@f2+1,f
 17852  0AF8  3000               	movlw	0
 17853  0AF9  05B0               	andwf	___ftdiv@f2+2,f
 17854  0AFA  3018               	movlw	24
 17855  0AFB  00B4               	movwf	??___ftdiv
 17856  0AFC  0834               	movf	??___ftdiv,w
 17857  0AFD  00B8               	movwf	___ftdiv@cntr
 17858  0AFE                     l5940:	
 17859  0AFE  3001               	movlw	1
 17860  0AFF                     u4115:	
 17861  0AFF  35B9               	lslf	___ftdiv@f3,f
 17862  0B00  0DBA               	rlf	___ftdiv@f3+1,f
 17863  0B01  0DBB               	rlf	___ftdiv@f3+2,f
 17864  0B02  0B89               	decfsz	9,f
 17865  0B03  2AFF               	goto	u4115
 17866  0B04  0830               	movf	___ftdiv@f2+2,w
 17867  0B05  0233               	subwf	___ftdiv@f1+2,w
 17868  0B06  1D03               	skipz
 17869  0B07  2B0E               	goto	u4125
 17870  0B08  082F               	movf	___ftdiv@f2+1,w
 17871  0B09  0232               	subwf	___ftdiv@f1+1,w
 17872  0B0A  1D03               	skipz
 17873  0B0B  2B0E               	goto	u4125
 17874  0B0C  082E               	movf	___ftdiv@f2,w
 17875  0B0D  0231               	subwf	___ftdiv@f1,w
 17876  0B0E                     u4125:	
 17877  0B0E  1C03               	skipc
 17878  0B0F  2B17               	goto	l5948
 17879  0B10  082E               	movf	___ftdiv@f2,w
 17880  0B11  02B1               	subwf	___ftdiv@f1,f
 17881  0B12  082F               	movf	___ftdiv@f2+1,w
 17882  0B13  3BB2               	subwfb	___ftdiv@f1+1,f
 17883  0B14  0830               	movf	___ftdiv@f2+2,w
 17884  0B15  3BB3               	subwfb	___ftdiv@f1+2,f
 17885  0B16  1439               	bsf	___ftdiv@f3,0
 17886  0B17                     l5948:	
 17887  0B17  3001               	movlw	1
 17888  0B18                     u4135:	
 17889  0B18  35B1               	lslf	___ftdiv@f1,f
 17890  0B19  0DB2               	rlf	___ftdiv@f1+1,f
 17891  0B1A  0DB3               	rlf	___ftdiv@f1+2,f
 17892  0B1B  0B89               	decfsz	9,f
 17893  0B1C  2B18               	goto	u4135
 17894  0B1D  3001               	movlw	1
 17895  0B1E  02B8               	subwf	___ftdiv@cntr,f
 17896  0B1F  1D03               	btfss	3,2
 17897  0B20  2AFE               	goto	l5940
 17898  0B21  0839               	movf	___ftdiv@f3,w
 17899  0B22  00A0               	movwf	___ftpack@arg
 17900  0B23  083A               	movf	___ftdiv@f3+1,w
 17901  0B24  00A1               	movwf	___ftpack@arg+1
 17902  0B25  083B               	movf	___ftdiv@f3+2,w
 17903  0B26  00A2               	movwf	___ftpack@arg+2
 17904  0B27  083C               	movf	___ftdiv@exp,w
 17905  0B28  00B4               	movwf	??___ftdiv
 17906  0B29  0834               	movf	??___ftdiv,w
 17907  0B2A  00A3               	movwf	___ftpack@exp
 17908  0B2B  083D               	movf	___ftdiv@sign,w
 17909  0B2C  00B5               	movwf	??___ftdiv+1
 17910  0B2D  0835               	movf	??___ftdiv+1,w
 17911  0B2E  00A4               	movwf	___ftpack@sign
 17912  0B2F  3191  21C1         	fcall	___ftpack
 17913  0B31  0020               	movlb	0	; select bank0
 17914  0B32  0820               	movf	?___ftpack,w
 17915  0B33  00AE               	movwf	?___ftdiv
 17916  0B34  0821               	movf	?___ftpack+1,w
 17917  0B35  00AF               	movwf	?___ftdiv+1
 17918  0B36  0822               	movf	?___ftpack+2,w
 17919  0B37  00B0               	movwf	?___ftdiv+2
 17920  0B38  0008               	return
 17921  0B39                     __end_of___ftdiv:	
 17922                           
 17923                           	psect	text109
 17924  1937                     __ptext109:	
 17925 ;; *************** function ___awtoft *****************
 17926 ;; Defined at:
 17927 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17928 ;; Parameters:    Size  Location     Type
 17929 ;;  c               2    8[BANK0 ] int 
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;  sign            1   13[BANK0 ] unsigned char 
 17932 ;; Return value:  Size  Location     Type
 17933 ;;                  3    8[BANK0 ] float 
 17934 ;; Registers used:
 17935 ;;		wreg, status,2, status,0, pclath, cstack
 17936 ;; Tracked objects:
 17937 ;;		On entry : 0/0
 17938 ;;		On exit  : 0/0
 17939 ;;		Unchanged: 0/0
 17940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17941 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;Total ram usage:        6 bytes
 17946 ;; Hardware stack levels used:    1
 17947 ;; Hardware stack levels required when called:    5
 17948 ;; This function calls:
 17949 ;;		___ftpack
 17950 ;; This function is called by:
 17951 ;;		_getPercentValue
 17952 ;;		_setPercentValue
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function ___awtoft
 17958  1937                     ___awtoft:	
 17959                           
 17960                           ;incstack = 0
 17961                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17962  1937  0020               	movlb	0	; select bank0
 17963  1938  01AD               	clrf	___awtoft@sign
 17964  1939  1FA9               	btfss	___awtoft@c+1,7
 17965  193A  2942               	goto	l5838
 17966  193B  09A8               	comf	___awtoft@c,f
 17967  193C  09A9               	comf	___awtoft@c+1,f
 17968  193D  0AA8               	incf	___awtoft@c,f
 17969  193E  1903               	skipnz
 17970  193F  0AA9               	incf	___awtoft@c+1,f
 17971  1940  01AD               	clrf	___awtoft@sign
 17972  1941  0AAD               	incf	___awtoft@sign,f
 17973  1942                     l5838:	
 17974  1942  0828               	movf	___awtoft@c,w
 17975  1943  00A0               	movwf	___ftpack@arg
 17976  1944  0829               	movf	___awtoft@c+1,w
 17977  1945  00A1               	movwf	___ftpack@arg+1
 17978  1946  01A2               	clrf	___ftpack@arg+2
 17979  1947  308E               	movlw	142
 17980  1948  00AB               	movwf	??___awtoft
 17981  1949  082B               	movf	??___awtoft,w
 17982  194A  00A3               	movwf	___ftpack@exp
 17983  194B  082D               	movf	___awtoft@sign,w
 17984  194C  00AC               	movwf	??___awtoft+1
 17985  194D  082C               	movf	??___awtoft+1,w
 17986  194E  00A4               	movwf	___ftpack@sign
 17987  194F  3191  21C1         	fcall	___ftpack
 17988  1951  0020               	movlb	0	; select bank0
 17989  1952  0820               	movf	?___ftpack,w
 17990  1953  00A8               	movwf	?___awtoft
 17991  1954  0821               	movf	?___ftpack+1,w
 17992  1955  00A9               	movwf	?___awtoft+1
 17993  1956  0822               	movf	?___ftpack+2,w
 17994  1957  00AA               	movwf	?___awtoft+2
 17995  1958  0008               	return
 17996  1959                     __end_of___awtoft:	
 17997                           
 17998                           	psect	text110
 17999  11C1                     __ptext110:	
 18000 ;; *************** function ___ftpack *****************
 18001 ;; Defined at:
 18002 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;  arg             3    0[BANK0 ] unsigned um
 18005 ;;  exp             1    3[BANK0 ] unsigned char 
 18006 ;;  sign            1    4[BANK0 ] unsigned char 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;		None
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  3    0[BANK0 ] float 
 18011 ;; Registers used:
 18012 ;;		wreg, status,2, status,0
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18018 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;Total ram usage:        8 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    4
 18025 ;; This function calls:
 18026 ;;		Nothing
 18027 ;; This function is called by:
 18028 ;;		___awtoft
 18029 ;;		___ftadd
 18030 ;;		___ftdiv
 18031 ;;		___ftmul
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           
 18036                           ;psect for function ___ftpack
 18037  11C1                     ___ftpack:	
 18038                           
 18039                           ;incstack = 0
 18040                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18041  11C1  0020               	movlb	0	; select bank0
 18042  11C2  0823               	movf	___ftpack@exp,w
 18043  11C3  1903               	btfsc	3,2
 18044  11C4  29CA               	goto	l5804
 18045  11C5  0822               	movf	___ftpack@arg+2,w
 18046  11C6  0421               	iorwf	___ftpack@arg+1,w
 18047  11C7  0420               	iorwf	___ftpack@arg,w
 18048  11C8  1D03               	skipz
 18049  11C9  29DB               	goto	l5810
 18050  11CA                     l5804:	
 18051  11CA  3000               	movlw	0
 18052  11CB  00A0               	movwf	?___ftpack
 18053  11CC  3000               	movlw	0
 18054  11CD  00A1               	movwf	?___ftpack+1
 18055  11CE  3000               	movlw	0
 18056  11CF  00A2               	movwf	?___ftpack+2
 18057  11D0  0008               	return
 18058  11D1                     l5808:	
 18059  11D1  3001               	movlw	1
 18060  11D2  00A5               	movwf	??___ftpack
 18061  11D3  0825               	movf	??___ftpack,w
 18062  11D4  07A3               	addwf	___ftpack@exp,f
 18063  11D5  3001               	movlw	1
 18064  11D6                     u3745:	
 18065  11D6  36A2               	lsrf	___ftpack@arg+2,f
 18066  11D7  0CA1               	rrf	___ftpack@arg+1,f
 18067  11D8  0CA0               	rrf	___ftpack@arg,f
 18068  11D9  0B89               	decfsz	9,f
 18069  11DA  29D6               	goto	u3745
 18070  11DB                     l5810:	
 18071  11DB  30FE               	movlw	254
 18072  11DC  0522               	andwf	___ftpack@arg+2,w
 18073  11DD  1903               	btfsc	3,2
 18074  11DE  29F4               	goto	l3190
 18075  11DF  29D1               	goto	l5808
 18076  11E0                     l5812:	
 18077  11E0  3001               	movlw	1
 18078  11E1  00A5               	movwf	??___ftpack
 18079  11E2  0825               	movf	??___ftpack,w
 18080  11E3  07A3               	addwf	___ftpack@exp,f
 18081  11E4  3001               	movlw	1
 18082  11E5  07A0               	addwf	___ftpack@arg,f
 18083  11E6  3000               	movlw	0
 18084  11E7  1803               	skipnc
 18085  11E8  3001               	movlw	1
 18086  11E9  07A1               	addwf	___ftpack@arg+1,f
 18087  11EA  3000               	movlw	0
 18088  11EB  1803               	skipnc
 18089  11EC  3001               	movlw	1
 18090  11ED  07A2               	addwf	___ftpack@arg+2,f
 18091  11EE  3001               	movlw	1
 18092  11EF                     u3765:	
 18093  11EF  36A2               	lsrf	___ftpack@arg+2,f
 18094  11F0  0CA1               	rrf	___ftpack@arg+1,f
 18095  11F1  0CA0               	rrf	___ftpack@arg,f
 18096  11F2  0B89               	decfsz	9,f
 18097  11F3  29EF               	goto	u3765
 18098  11F4                     l3190:	
 18099  11F4  30FF               	movlw	255
 18100  11F5  0522               	andwf	___ftpack@arg+2,w
 18101  11F6  1903               	btfsc	3,2
 18102  11F7  2A01               	goto	l5820
 18103  11F8  29E0               	goto	l5812
 18104  11F9                     l5818:	
 18105  11F9  3001               	movlw	1
 18106  11FA  02A3               	subwf	___ftpack@exp,f
 18107  11FB  3001               	movlw	1
 18108  11FC                     u3785:	
 18109  11FC  35A0               	lslf	___ftpack@arg,f
 18110  11FD  0DA1               	rlf	___ftpack@arg+1,f
 18111  11FE  0DA2               	rlf	___ftpack@arg+2,f
 18112  11FF  0B89               	decfsz	9,f
 18113  1200  29FC               	goto	u3785
 18114  1201                     l5820:	
 18115  1201  1FA1               	btfss	___ftpack@arg+1,7
 18116  1202  29F9               	goto	l5818
 18117  1203  1823               	btfsc	___ftpack@exp,0
 18118  1204  2A0B               	goto	l3196
 18119  1205  30FF               	movlw	255
 18120  1206  05A0               	andwf	___ftpack@arg,f
 18121  1207  307F               	movlw	127
 18122  1208  05A1               	andwf	___ftpack@arg+1,f
 18123  1209  30FF               	movlw	255
 18124  120A  05A2               	andwf	___ftpack@arg+2,f
 18125  120B                     l3196:	
 18126  120B  1003               	clrc
 18127  120C  0CA3               	rrf	___ftpack@exp,f
 18128  120D  0823               	movf	___ftpack@exp,w
 18129  120E  00A5               	movwf	??___ftpack
 18130  120F  01A6               	clrf	??___ftpack+1
 18131  1210  01A7               	clrf	??___ftpack+2
 18132  1211  3010               	movlw	16
 18133  1212                     u3815:	
 18134  1212  35A5               	lslf	??___ftpack,f
 18135  1213  0DA6               	rlf	??___ftpack+1,f
 18136  1214  0DA7               	rlf	??___ftpack+2,f
 18137  1215  0B89               	decfsz	9,f
 18138  1216  2A12               	goto	u3815
 18139  1217  0825               	movf	??___ftpack,w
 18140  1218  04A0               	iorwf	___ftpack@arg,f
 18141  1219  0826               	movf	??___ftpack+1,w
 18142  121A  04A1               	iorwf	___ftpack@arg+1,f
 18143  121B  0827               	movf	??___ftpack+2,w
 18144  121C  04A2               	iorwf	___ftpack@arg+2,f
 18145  121D  0824               	movf	___ftpack@sign,w
 18146  121E  1903               	btfsc	3,2
 18147  121F  0008               	return
 18148  1220  17A2               	bsf	___ftpack@arg+2,7
 18149  1221  0008               	return
 18150  1222                     __end_of___ftpack:	
 18151                           
 18152                           	psect	text111
 18153  26AF                     __ptext111:	
 18154 ;; *************** function _setRFSW_Status *****************
 18155 ;; Defined at:
 18156 ;;		line 417 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18157 ;; Parameters:    Size  Location     Type
 18158 ;;  sw              1    wreg     unsigned char 
 18159 ;;  command         1    2[BANK0 ] unsigned char 
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;  sw              1    3[BANK0 ] unsigned char 
 18162 ;; Return value:  Size  Location     Type
 18163 ;;		None               void
 18164 ;; Registers used:
 18165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;Total ram usage:        2 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:    5
 18178 ;; This function calls:
 18179 ;;		_RfSWPointSelect
 18180 ;; This function is called by:
 18181 ;;		_DlyOff_Main
 18182 ;;		_setDimmerLights_ERROR
 18183 ;;		_setControl_Lights_Table
 18184 ;;		_Sw_DimmerOnFunc
 18185 ;;		_Sw_DimmerAdjFunc
 18186 ;; This function uses a non-reentrant model
 18187 ;;
 18188                           
 18189                           
 18190                           ;psect for function _setRFSW_Status
 18191  26AF                     _setRFSW_Status:	
 18192                           
 18193                           ;incstack = 0
 18194                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18195                           ;setRFSW_Status@sw stored from wreg
 18196  26AF  0020               	movlb	0	; select bank0
 18197  26B0  00A3               	movwf	setRFSW_Status@sw
 18198                           
 18199                           ;RF_Control_B1.c: 419: RfSWPointSelect(sw);
 18200  26B1  0823               	movf	setRFSW_Status@sw,w
 18201  26B2  31A6  2607         	fcall	_RfSWPointSelect
 18202                           
 18203                           ;RF_Control_B1.c: 420: RFSW->Status=command;
 18204  26B4  0021               	movlb	1	; select bank1
 18205  26B5  083C               	movf	_RFSW^(0+128),w
 18206  26B6  0086               	movwf	6
 18207  26B7  0187               	clrf	7
 18208  26B8  0020               	movlb	0	; select bank0
 18209  26B9  0822               	movf	setRFSW_Status@command,w
 18210  26BA  1001               	bcf	1,0
 18211  26BB  1D03               	skipz
 18212  26BC  1401               	bsf	1,0
 18213  26BD  0008               	return
 18214  26BE                     __end_of_setRFSW_Status:	
 18215                           
 18216                           	psect	text112
 18217  2607                     __ptext112:	
 18218 ;; *************** function _RfSWPointSelect *****************
 18219 ;; Defined at:
 18220 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 18221 ;; Parameters:    Size  Location     Type
 18222 ;;  sw              1    wreg     unsigned char 
 18223 ;; Auto vars:     Size  Location     Type
 18224 ;;  sw              1    1[BANK0 ] unsigned char 
 18225 ;; Return value:  Size  Location     Type
 18226 ;;		None               void
 18227 ;; Registers used:
 18228 ;;		wreg
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;Total ram usage:        2 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; Hardware stack levels required when called:    4
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		_setRFSW_Control
 18245 ;;		_setRFSW_AdjControl
 18246 ;;		_setRFSW_Status
 18247 ;; This function uses a non-reentrant model
 18248 ;;
 18249                           
 18250                           
 18251                           ;psect for function _RfSWPointSelect
 18252  2607                     _RfSWPointSelect:	
 18253                           
 18254                           ;incstack = 0
 18255                           ; Regs used in _RfSWPointSelect: [wreg]
 18256                           ;RfSWPointSelect@sw stored from wreg
 18257  2607  0020               	movlb	0	; select bank0
 18258  2608  00A1               	movwf	RfSWPointSelect@sw
 18259                           
 18260                           ;RF_Control_B1.c: 342: if(sw == 1)
 18261  2609  0821               	movf	RfSWPointSelect@sw,w
 18262  260A  3A01               	xorlw	1
 18263  260B  1D03               	skipz
 18264  260C  0008               	return
 18265                           
 18266                           ;RF_Control_B1.c: 343: {
 18267                           ;RF_Control_B1.c: 344: RFSW=&RFSW1;
 18268  260D  30E9               	movlw	_RFSW1& (0+255)
 18269  260E  00A0               	movwf	??_RfSWPointSelect
 18270  260F  0820               	movf	??_RfSWPointSelect,w
 18271  2610  0021               	movlb	1	; select bank1
 18272  2611  00BC               	movwf	_RFSW^(0+128)
 18273  2612  0008               	return
 18274  2613                     __end_of_RfSWPointSelect:	
 18275                           
 18276                           	psect	text113
 18277  26FC                     __ptext113:	
 18278 ;; *************** function _setDimmerLights_Trigger *****************
 18279 ;; Defined at:
 18280 ;;		line 436 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18281 ;; Parameters:    Size  Location     Type
 18282 ;;  lights          1    wreg     unsigned char 
 18283 ;;  command         1    2[BANK0 ] unsigned char 
 18284 ;; Auto vars:     Size  Location     Type
 18285 ;;  lights          1    3[BANK0 ] unsigned char 
 18286 ;; Return value:  Size  Location     Type
 18287 ;;		None               void
 18288 ;; Registers used:
 18289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18290 ;; Tracked objects:
 18291 ;;		On entry : 0/0
 18292 ;;		On exit  : 0/0
 18293 ;;		Unchanged: 0/0
 18294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18299 ;;Total ram usage:        2 bytes
 18300 ;; Hardware stack levels used:    1
 18301 ;; Hardware stack levels required when called:    5
 18302 ;; This function calls:
 18303 ;;		_DimmerLightsPointSelect
 18304 ;; This function is called by:
 18305 ;;		_DlyOff_Main
 18306 ;;		_setRFSW_Control
 18307 ;;		_Sw_DimmerOnFunc
 18308 ;;		_Sw_DimmerOffFunc
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           
 18313                           ;psect for function _setDimmerLights_Trigger
 18314  26FC                     _setDimmerLights_Trigger:	
 18315                           
 18316                           ;incstack = 0
 18317                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18318                           ;setDimmerLights_Trigger@lights stored from wreg
 18319  26FC  0020               	movlb	0	; select bank0
 18320  26FD  00A3               	movwf	setDimmerLights_Trigger@lights
 18321                           
 18322                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 18323  26FE  0823               	movf	setDimmerLights_Trigger@lights,w
 18324  26FF  31A5  258A         	fcall	_DimmerLightsPointSelect
 18325                           
 18326                           ;Dimmer_B1.c: 439: DimmerLights->Trigger=command;
 18327  2701  0020               	movlb	0	; select bank0
 18328  2702  086C               	movf	_DimmerLights,w
 18329  2703  3E09               	addlw	9
 18330  2704  0086               	movwf	6
 18331  2705  3001               	movlw	1	; select bank2/3
 18332  2706  0087               	movwf	7
 18333  2707  0822               	movf	setDimmerLights_Trigger@command,w
 18334  2708  1081               	bcf	1,1
 18335  2709  1D03               	skipz
 18336  270A  1481               	bsf	1,1
 18337  270B  0008               	return
 18338  270C                     __end_of_setDimmerLights_Trigger:	
 18339                           
 18340                           	psect	text114
 18341  26EC                     __ptext114:	
 18342 ;; *************** function _setDimmerLights_Switch *****************
 18343 ;; Defined at:
 18344 ;;		line 426 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18345 ;; Parameters:    Size  Location     Type
 18346 ;;  lights          1    wreg     unsigned char 
 18347 ;;  command         1    2[BANK0 ] unsigned char 
 18348 ;; Auto vars:     Size  Location     Type
 18349 ;;  lights          1    3[BANK0 ] unsigned char 
 18350 ;; Return value:  Size  Location     Type
 18351 ;;		None               void
 18352 ;; Registers used:
 18353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18354 ;; Tracked objects:
 18355 ;;		On entry : 0/0
 18356 ;;		On exit  : 0/0
 18357 ;;		Unchanged: 0/0
 18358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;Total ram usage:        2 bytes
 18364 ;; Hardware stack levels used:    1
 18365 ;; Hardware stack levels required when called:    5
 18366 ;; This function calls:
 18367 ;;		_DimmerLightsPointSelect
 18368 ;; This function is called by:
 18369 ;;		_DlyOff_Main
 18370 ;;		_setRFSW_Control
 18371 ;;		_Sw_DimmerOnFunc
 18372 ;;		_Sw_DimmerOffFunc
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           
 18377                           ;psect for function _setDimmerLights_Switch
 18378  26EC                     _setDimmerLights_Switch:	
 18379                           
 18380                           ;incstack = 0
 18381                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18382                           ;setDimmerLights_Switch@lights stored from wreg
 18383  26EC  0020               	movlb	0	; select bank0
 18384  26ED  00A3               	movwf	setDimmerLights_Switch@lights
 18385                           
 18386                           ;Dimmer_B1.c: 428: DimmerLightsPointSelect(lights);
 18387  26EE  0823               	movf	setDimmerLights_Switch@lights,w
 18388  26EF  31A5  258A         	fcall	_DimmerLightsPointSelect
 18389                           
 18390                           ;Dimmer_B1.c: 429: DimmerLights->Switch=command;
 18391  26F1  0020               	movlb	0	; select bank0
 18392  26F2  086C               	movf	_DimmerLights,w
 18393  26F3  3E09               	addlw	9
 18394  26F4  0086               	movwf	6
 18395  26F5  3001               	movlw	1	; select bank2/3
 18396  26F6  0087               	movwf	7
 18397  26F7  0822               	movf	setDimmerLights_Switch@command,w
 18398  26F8  1001               	bcf	1,0
 18399  26F9  1D03               	skipz
 18400  26FA  1401               	bsf	1,0
 18401  26FB  0008               	return
 18402  26FC                     __end_of_setDimmerLights_Switch:	
 18403                           
 18404                           	psect	text115
 18405  258A                     __ptext115:	
 18406 ;; *************** function _DimmerLightsPointSelect *****************
 18407 ;; Defined at:
 18408 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;  lights          1    wreg     unsigned char 
 18411 ;; Auto vars:     Size  Location     Type
 18412 ;;  lights          1    1[BANK0 ] unsigned char 
 18413 ;; Return value:  Size  Location     Type
 18414 ;;		None               void
 18415 ;; Registers used:
 18416 ;;		wreg
 18417 ;; Tracked objects:
 18418 ;;		On entry : 0/0
 18419 ;;		On exit  : 0/0
 18420 ;;		Unchanged: 0/0
 18421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18426 ;;Total ram usage:        2 bytes
 18427 ;; Hardware stack levels used:    1
 18428 ;; Hardware stack levels required when called:    4
 18429 ;; This function calls:
 18430 ;;		Nothing
 18431 ;; This function is called by:
 18432 ;;		_setDimmerLights_Initialization
 18433 ;;		_setDimmerLights_Main
 18434 ;;		_setDimmerLights_ERROR
 18435 ;;		_setDimmerLights_TriggerERROR
 18436 ;;		_setDimmerLights
 18437 ;;		_setDimmerLights_Adj
 18438 ;;		_setDimmerLights_AdjRF
 18439 ;;		_setDimmerLights_Switch
 18440 ;;		_setDimmerLights_AdjGo
 18441 ;;		_setDimmerLights_Trigger
 18442 ;;		_setDimmerLights_TriggerAdj
 18443 ;;		_setDimmerLights_Clear
 18444 ;;		_setDimmerLights_GO
 18445 ;;		_setDimmerLights_MaxmumValue
 18446 ;; This function uses a non-reentrant model
 18447 ;;
 18448                           
 18449                           
 18450                           ;psect for function _DimmerLightsPointSelect
 18451  258A                     _DimmerLightsPointSelect:	
 18452                           
 18453                           ;incstack = 0
 18454                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18455                           ;DimmerLightsPointSelect@lights stored from wreg
 18456  258A  0020               	movlb	0	; select bank0
 18457  258B  00A1               	movwf	DimmerLightsPointSelect@lights
 18458                           
 18459                           ;Dimmer_B1.c: 10: if(lights == 1)
 18460  258C  0821               	movf	DimmerLightsPointSelect@lights,w
 18461  258D  3A01               	xorlw	1
 18462  258E  1D03               	skipz
 18463  258F  0008               	return
 18464                           
 18465                           ;Dimmer_B1.c: 11: {
 18466                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18467  2590  303E               	movlw	_DimmerLights1& (0+255)
 18468  2591  00A0               	movwf	??_DimmerLightsPointSelect
 18469  2592  0820               	movf	??_DimmerLightsPointSelect,w
 18470  2593  00EC               	movwf	_DimmerLights
 18471  2594  0008               	return
 18472  2595                     __end_of_DimmerLightsPointSelect:	
 18473                           
 18474                           	psect	text116
 18475  1589                     __ptext116:	
 18476 ;; *************** function _setBuz *****************
 18477 ;; Defined at:
 18478 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;  count           1    wreg     unsigned char 
 18481 ;;  time            2    6[BANK0 ] int 
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;  count           1    9[BANK0 ] unsigned char 
 18484 ;; Return value:  Size  Location     Type
 18485 ;;		None               void
 18486 ;; Registers used:
 18487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18493 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;Total ram usage:        4 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    5
 18500 ;; This function calls:
 18501 ;;		___wmul
 18502 ;; This function is called by:
 18503 ;;		_DlyOff_Main
 18504 ;;		_setDimmerLights_Main
 18505 ;;		_DimmerLights_Exceptions
 18506 ;;		_MainT
 18507 ;;		_setOverTemp_Exceptions
 18508 ;;		_setLog_Code
 18509 ;;		_setControl_Lights_Table
 18510 ;;		_setRFSW_Control
 18511 ;;		_setSw_Main
 18512 ;;		_Sw_DimmerOnFunc
 18513 ;; This function uses a non-reentrant model
 18514 ;;
 18515                           
 18516                           
 18517                           ;psect for function _setBuz
 18518  1589                     _setBuz:	
 18519                           
 18520                           ;incstack = 0
 18521                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18522                           ;setBuz@count stored from wreg
 18523  1589  0020               	movlb	0	; select bank0
 18524  158A  00A9               	movwf	setBuz@count
 18525                           
 18526                           ;Buzzer_B1.c: 24: time*=20;
 18527  158B  3014               	movlw	20
 18528  158C  00A0               	movwf	___wmul@multiplier
 18529  158D  3000               	movlw	0
 18530  158E  00A1               	movwf	___wmul@multiplier+1
 18531  158F  0827               	movf	setBuz@time+1,w
 18532  1590  01A3               	clrf	___wmul@multiplicand+1
 18533  1591  07A3               	addwf	___wmul@multiplicand+1,f
 18534  1592  0826               	movf	setBuz@time,w
 18535  1593  01A2               	clrf	___wmul@multiplicand
 18536  1594  07A2               	addwf	___wmul@multiplicand,f
 18537  1595  3198  20DA  3195   	fcall	___wmul
 18538  1598  0020               	movlb	0	; select bank0
 18539  1599  0821               	movf	?___wmul+1,w
 18540  159A  01A7               	clrf	setBuz@time+1
 18541  159B  07A7               	addwf	setBuz@time+1,f
 18542  159C  0820               	movf	?___wmul,w
 18543  159D  01A6               	clrf	setBuz@time
 18544  159E  07A6               	addwf	setBuz@time,f
 18545                           
 18546                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18547  159F  0878               	movf	_Buz,w
 18548  15A0  0086               	movwf	6
 18549  15A1  3001               	movlw	1	; select bank2/3
 18550  15A2  0087               	movwf	7
 18551  15A3  1C01               	btfss	1,0
 18552  15A4  0008               	return
 18553                           
 18554                           ;Buzzer_B1.c: 26: {
 18555                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18556  15A5  0878               	movf	_Buz,w
 18557  15A6  0086               	movwf	6
 18558  15A7  3001               	movlw	1	; select bank2/3
 18559  15A8  0087               	movwf	7
 18560  15A9  1881               	btfsc	1,1
 18561  15AA  2DC4               	goto	l8206
 18562                           
 18563                           ;Buzzer_B1.c: 28: {
 18564                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18565  15AB  0878               	movf	_Buz,w
 18566  15AC  0086               	movwf	6
 18567  15AD  3001               	movlw	1	; select bank2/3
 18568  15AE  0087               	movwf	7
 18569  15AF  1481               	bsf	1,1
 18570                           
 18571                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18572  15B0  0829               	movf	setBuz@count,w
 18573  15B1  00A8               	movwf	??_setBuz
 18574  15B2  0878               	movf	_Buz,w
 18575  15B3  3E03               	addlw	3
 18576  15B4  0086               	movwf	6
 18577  15B5  3001               	movlw	1	; select bank2/3
 18578  15B6  0087               	movwf	7
 18579  15B7  0828               	movf	??_setBuz,w
 18580  15B8  0081               	movwf	1
 18581                           
 18582                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18583  15B9  0878               	movf	_Buz,w
 18584  15BA  3E06               	addlw	6
 18585  15BB  0086               	movwf	6
 18586  15BC  3001               	movlw	1	; select bank2/3
 18587  15BD  0087               	movwf	7
 18588  15BE  0826               	movf	setBuz@time,w
 18589  15BF  3FC0               	movwi [0]fsr1
 18590  15C0  0827               	movf	setBuz@time+1,w
 18591  15C1  3FC1               	movwi [1]fsr1
 18592                           
 18593                           ;Buzzer_B1.c: 33: RB3=1;
 18594  15C2  158D               	bsf	13,3	;volatile
 18595                           
 18596                           ;Buzzer_B1.c: 34: }
 18597  15C3  0008               	return
 18598  15C4                     l8206:	
 18599                           
 18600                           ;Buzzer_B1.c: 35: else
 18601                           ;Buzzer_B1.c: 36: {
 18602                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18603  15C4  0878               	movf	_Buz,w
 18604  15C5  0086               	movwf	6
 18605  15C6  3001               	movlw	1	; select bank2/3
 18606  15C7  0087               	movwf	7
 18607  15C8  1981               	btfsc	1,3
 18608  15C9  2DE2               	goto	l8210
 18609                           
 18610                           ;Buzzer_B1.c: 38: {
 18611                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18612  15CA  0878               	movf	_Buz,w
 18613  15CB  0086               	movwf	6
 18614  15CC  3001               	movlw	1	; select bank2/3
 18615  15CD  0087               	movwf	7
 18616  15CE  1581               	bsf	1,3
 18617                           
 18618                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18619  15CF  0829               	movf	setBuz@count,w
 18620  15D0  00A8               	movwf	??_setBuz
 18621  15D1  0878               	movf	_Buz,w
 18622  15D2  3E04               	addlw	4
 18623  15D3  0086               	movwf	6
 18624  15D4  3001               	movlw	1	; select bank2/3
 18625  15D5  0087               	movwf	7
 18626  15D6  0828               	movf	??_setBuz,w
 18627  15D7  0081               	movwf	1
 18628                           
 18629                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18630  15D8  0878               	movf	_Buz,w
 18631  15D9  3E08               	addlw	8
 18632  15DA  0086               	movwf	6
 18633  15DB  3001               	movlw	1	; select bank2/3
 18634  15DC  0087               	movwf	7
 18635  15DD  0826               	movf	setBuz@time,w
 18636  15DE  3FC0               	movwi [0]fsr1
 18637  15DF  0827               	movf	setBuz@time+1,w
 18638  15E0  3FC1               	movwi [1]fsr1
 18639                           
 18640                           ;Buzzer_B1.c: 42: }
 18641  15E1  0008               	return
 18642  15E2                     l8210:	
 18643                           
 18644                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18645  15E2  0878               	movf	_Buz,w
 18646  15E3  0086               	movwf	6
 18647  15E4  3001               	movlw	1	; select bank2/3
 18648  15E5  0087               	movwf	7
 18649  15E6  1A01               	btfsc	1,4
 18650  15E7  0008               	return
 18651                           
 18652                           ;Buzzer_B1.c: 44: {
 18653                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18654  15E8  0878               	movf	_Buz,w
 18655  15E9  0086               	movwf	6
 18656  15EA  3001               	movlw	1	; select bank2/3
 18657  15EB  0087               	movwf	7
 18658  15EC  1601               	bsf	1,4
 18659                           
 18660                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18661  15ED  0829               	movf	setBuz@count,w
 18662  15EE  00A8               	movwf	??_setBuz
 18663  15EF  0878               	movf	_Buz,w
 18664  15F0  3E05               	addlw	5
 18665  15F1  0086               	movwf	6
 18666  15F2  3001               	movlw	1	; select bank2/3
 18667  15F3  0087               	movwf	7
 18668  15F4  0828               	movf	??_setBuz,w
 18669  15F5  0081               	movwf	1
 18670                           
 18671                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18672  15F6  0878               	movf	_Buz,w
 18673  15F7  3E0A               	addlw	10
 18674  15F8  0086               	movwf	6
 18675  15F9  3001               	movlw	1	; select bank2/3
 18676  15FA  0087               	movwf	7
 18677  15FB  0826               	movf	setBuz@time,w
 18678  15FC  3FC0               	movwi [0]fsr1
 18679  15FD  0827               	movf	setBuz@time+1,w
 18680  15FE  3FC1               	movwi [1]fsr1
 18681  15FF  0008               	return
 18682  1600                     __end_of_setBuz:	
 18683                           
 18684                           	psect	text117
 18685  18DA                     __ptext117:	
 18686 ;; *************** function ___wmul *****************
 18687 ;; Defined at:
 18688 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18689 ;; Parameters:    Size  Location     Type
 18690 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18691 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18692 ;; Auto vars:     Size  Location     Type
 18693 ;;  product         2    4[BANK0 ] unsigned int 
 18694 ;; Return value:  Size  Location     Type
 18695 ;;                  2    0[BANK0 ] unsigned int 
 18696 ;; Registers used:
 18697 ;;		wreg, status,2, status,0
 18698 ;; Tracked objects:
 18699 ;;		On entry : 0/0
 18700 ;;		On exit  : 0/0
 18701 ;;		Unchanged: 0/0
 18702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18707 ;;Total ram usage:        6 bytes
 18708 ;; Hardware stack levels used:    1
 18709 ;; Hardware stack levels required when called:    4
 18710 ;; This function calls:
 18711 ;;		Nothing
 18712 ;; This function is called by:
 18713 ;;		_setBuz
 18714 ;;		_Load_Main
 18715 ;; This function uses a non-reentrant model
 18716 ;;
 18717                           
 18718                           
 18719                           ;psect for function ___wmul
 18720  18DA                     ___wmul:	
 18721                           
 18722                           ;incstack = 0
 18723                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18724  18DA  0020               	movlb	0	; select bank0
 18725  18DB  01A4               	clrf	___wmul@product
 18726  18DC  01A5               	clrf	___wmul@product+1
 18727  18DD                     l8186:	
 18728  18DD  1C20               	btfss	___wmul@multiplier,0
 18729  18DE  28E3               	goto	l3029
 18730  18DF  0822               	movf	___wmul@multiplicand,w
 18731  18E0  07A4               	addwf	___wmul@product,f
 18732  18E1  0823               	movf	___wmul@multiplicand+1,w
 18733  18E2  3DA5               	addwfc	___wmul@product+1,f
 18734  18E3                     l3029:	
 18735  18E3  3001               	movlw	1
 18736  18E4                     u7445:	
 18737  18E4  35A2               	lslf	___wmul@multiplicand,f
 18738  18E5  0DA3               	rlf	___wmul@multiplicand+1,f
 18739  18E6  0B89               	decfsz	9,f
 18740  18E7  28E4               	goto	u7445
 18741  18E8  3001               	movlw	1
 18742  18E9                     u7455:	
 18743  18E9  36A1               	lsrf	___wmul@multiplier+1,f
 18744  18EA  0CA0               	rrf	___wmul@multiplier,f
 18745  18EB  0B89               	decfsz	9,f
 18746  18EC  28E9               	goto	u7455
 18747  18ED  0821               	movf	___wmul@multiplier+1,w
 18748  18EE  0420               	iorwf	___wmul@multiplier,w
 18749  18EF  1D03               	skipz
 18750  18F0  28DD               	goto	l8186
 18751  18F1  0825               	movf	___wmul@product+1,w
 18752  18F2  01A1               	clrf	?___wmul+1
 18753  18F3  07A1               	addwf	?___wmul+1,f
 18754  18F4  0824               	movf	___wmul@product,w
 18755  18F5  01A0               	clrf	?___wmul
 18756  18F6  07A0               	addwf	?___wmul,f
 18757  18F7  0008               	return
 18758  18F8                     __end_of___wmul:	
 18759                           
 18760                           	psect	text118
 18761  24F7                     __ptext118:	
 18762 ;; *************** function _DelayOff_Initialization *****************
 18763 ;; Defined at:
 18764 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;		None
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;		None
 18769 ;; Return value:  Size  Location     Type
 18770 ;;		None               void
 18771 ;; Registers used:
 18772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18782 ;;Total ram usage:        0 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    6
 18785 ;; This function calls:
 18786 ;;		_DlyOff_Initialization
 18787 ;; This function is called by:
 18788 ;;		_main
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           
 18793                           ;psect for function _DelayOff_Initialization
 18794  24F7                     _DelayOff_Initialization:	
 18795                           
 18796                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18797                           
 18798                           ;incstack = 0
 18799                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18800  24F7  3001               	movlw	1
 18801  24F8  31A5  257F         	fcall	_DlyOff_Initialization
 18802  24FA  0008               	return
 18803  24FB                     __end_of_DelayOff_Initialization:	
 18804                           
 18805                           	psect	text119
 18806  257F                     __ptext119:	
 18807 ;; *************** function _DlyOff_Initialization *****************
 18808 ;; Defined at:
 18809 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18810 ;; Parameters:    Size  Location     Type
 18811 ;;  sw              1    wreg     unsigned char 
 18812 ;; Auto vars:     Size  Location     Type
 18813 ;;  sw              1    2[BANK0 ] unsigned char 
 18814 ;; Return value:  Size  Location     Type
 18815 ;;		None               void
 18816 ;; Registers used:
 18817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18818 ;; Tracked objects:
 18819 ;;		On entry : 0/0
 18820 ;;		On exit  : 0/0
 18821 ;;		Unchanged: 0/0
 18822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18826 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18827 ;;Total ram usage:        1 bytes
 18828 ;; Hardware stack levels used:    1
 18829 ;; Hardware stack levels required when called:    5
 18830 ;; This function calls:
 18831 ;;		_DelayOffPointSelect
 18832 ;; This function is called by:
 18833 ;;		_DelayOff_Initialization
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           
 18838                           ;psect for function _DlyOff_Initialization
 18839  257F                     _DlyOff_Initialization:	
 18840                           
 18841                           ;incstack = 0
 18842                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18843                           ;DlyOff_Initialization@sw stored from wreg
 18844  257F  0020               	movlb	0	; select bank0
 18845  2580  00A2               	movwf	DlyOff_Initialization@sw
 18846                           
 18847                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18848  2581  0822               	movf	DlyOff_Initialization@sw,w
 18849  2582  31A5  25FB         	fcall	_DelayOffPointSelect
 18850                           
 18851                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18852  2584  0021               	movlb	1	; select bank1
 18853  2585  0838               	movf	_DelayOff^(0+128),w
 18854  2586  0086               	movwf	6
 18855  2587  0187               	clrf	7
 18856  2588  1401               	bsf	1,0
 18857  2589  0008               	return
 18858  258A                     __end_of_DlyOff_Initialization:	
 18859                           
 18860                           	psect	text120
 18861  25FB                     __ptext120:	
 18862 ;; *************** function _DelayOffPointSelect *****************
 18863 ;; Defined at:
 18864 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;  sw              1    wreg     unsigned char 
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;  sw              1    1[BANK0 ] unsigned char 
 18869 ;; Return value:  Size  Location     Type
 18870 ;;		None               void
 18871 ;; Registers used:
 18872 ;;		wreg
 18873 ;; Tracked objects:
 18874 ;;		On entry : 0/0
 18875 ;;		On exit  : 0/0
 18876 ;;		Unchanged: 0/0
 18877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18882 ;;Total ram usage:        2 bytes
 18883 ;; Hardware stack levels used:    1
 18884 ;; Hardware stack levels required when called:    4
 18885 ;; This function calls:
 18886 ;;		Nothing
 18887 ;; This function is called by:
 18888 ;;		_DlyOff_Initialization
 18889 ;;		_DlyOff_Main
 18890 ;;		_setDelayOff_GO
 18891 ;; This function uses a non-reentrant model
 18892 ;;
 18893                           
 18894                           
 18895                           ;psect for function _DelayOffPointSelect
 18896  25FB                     _DelayOffPointSelect:	
 18897                           
 18898                           ;incstack = 0
 18899                           ; Regs used in _DelayOffPointSelect: [wreg]
 18900                           ;DelayOffPointSelect@sw stored from wreg
 18901  25FB  0020               	movlb	0	; select bank0
 18902  25FC  00A1               	movwf	DelayOffPointSelect@sw
 18903                           
 18904                           ;DelayOff_B1.c: 11: if(sw == 1)
 18905  25FD  0821               	movf	DelayOffPointSelect@sw,w
 18906  25FE  3A01               	xorlw	1
 18907  25FF  1D03               	skipz
 18908  2600  0008               	return
 18909                           
 18910                           ;DelayOff_B1.c: 12: {
 18911                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18912  2601  30D3               	movlw	_DlySw1& (0+255)
 18913  2602  00A0               	movwf	??_DelayOffPointSelect
 18914  2603  0820               	movf	??_DelayOffPointSelect,w
 18915  2604  0021               	movlb	1	; select bank1
 18916  2605  00B8               	movwf	_DelayOff^(0+128)
 18917  2606  0008               	return
 18918  2607                     __end_of_DelayOffPointSelect:	
 18919                           
 18920                           	psect	text121
 18921  275D                     __ptext121:	
 18922 ;; *************** function _CC2500_PowerOnInitial *****************
 18923 ;; Defined at:
 18924 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18925 ;; Parameters:    Size  Location     Type
 18926 ;;		None
 18927 ;; Auto vars:     Size  Location     Type
 18928 ;;		None
 18929 ;; Return value:  Size  Location     Type
 18930 ;;		None               void
 18931 ;; Registers used:
 18932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18933 ;; Tracked objects:
 18934 ;;		On entry : 0/0
 18935 ;;		On exit  : 0/0
 18936 ;;		Unchanged: 0/0
 18937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;Total ram usage:        0 bytes
 18943 ;; Hardware stack levels used:    1
 18944 ;; Hardware stack levels required when called:    7
 18945 ;; This function calls:
 18946 ;;		_CC2500_ClearRXFIFO
 18947 ;;		_CC2500_ClearTXFIFO
 18948 ;;		_CC2500_FrequencyCabr
 18949 ;;		_CC2500_InitPATable
 18950 ;;		_CC2500_InitSetREG
 18951 ;;		_CC2500_PowerRST
 18952 ;;		_CC2500_SIDLEMode
 18953 ;; This function is called by:
 18954 ;;		_main
 18955 ;; This function uses a non-reentrant model
 18956 ;;
 18957                           
 18958                           
 18959                           ;psect for function _CC2500_PowerOnInitial
 18960  275D                     _CC2500_PowerOnInitial:	
 18961                           
 18962                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 18963                           
 18964                           ;incstack = 0
 18965                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18966  275D  319B  2306  31A7   	fcall	_CC2500_PowerRST
 18967                           
 18968                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 18969  2760  319A  2257  31A7   	fcall	_CC2500_InitSetREG
 18970                           
 18971                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 18972  2763  3198  20F8  31A7   	fcall	_CC2500_InitPATable
 18973                           
 18974                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 18975  2766  31A4  24EF  31A7   	fcall	_CC2500_ClearTXFIFO
 18976                           
 18977                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 18978  2769  31A4  24EB  31A7   	fcall	_CC2500_ClearRXFIFO
 18979                           
 18980                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 18981  276C  31A5  25EF  31A7   	fcall	_CC2500_FrequencyCabr
 18982                           
 18983                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 18984  276F  31A4  24F3         	fcall	_CC2500_SIDLEMode
 18985  2771  0008               	return
 18986  2772                     __end_of_CC2500_PowerOnInitial:	
 18987                           
 18988                           	psect	text122
 18989  24F3                     __ptext122:	
 18990 ;; *************** function _CC2500_SIDLEMode *****************
 18991 ;; Defined at:
 18992 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18993 ;; Parameters:    Size  Location     Type
 18994 ;;		None
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;		None
 18997 ;; Return value:  Size  Location     Type
 18998 ;;		None               void
 18999 ;; Registers used:
 19000 ;;		wreg, status,2, status,0, pclath, cstack
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;Total ram usage:        0 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:    6
 19013 ;; This function calls:
 19014 ;;		_CC2500_WriteCommand
 19015 ;; This function is called by:
 19016 ;;		_CC2500_PowerOnInitial
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           
 19021                           ;psect for function _CC2500_SIDLEMode
 19022  24F3                     _CC2500_SIDLEMode:	
 19023                           
 19024                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 19025                           
 19026                           ;incstack = 0
 19027                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19028  24F3  3036               	movlw	54
 19029  24F4  31A6  26DC         	fcall	_CC2500_WriteCommand
 19030  24F6  0008               	return
 19031  24F7                     __end_of_CC2500_SIDLEMode:	
 19032                           
 19033                           	psect	text123
 19034  1B06                     __ptext123:	
 19035 ;; *************** function _CC2500_PowerRST *****************
 19036 ;; Defined at:
 19037 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19038 ;; Parameters:    Size  Location     Type
 19039 ;;		None
 19040 ;; Auto vars:     Size  Location     Type
 19041 ;;		None
 19042 ;; Return value:  Size  Location     Type
 19043 ;;		None               void
 19044 ;; Registers used:
 19045 ;;		wreg, status,2, status,0, pclath, cstack
 19046 ;; Tracked objects:
 19047 ;;		On entry : 0/0
 19048 ;;		On exit  : 0/0
 19049 ;;		Unchanged: 0/0
 19050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19055 ;;Total ram usage:        1 bytes
 19056 ;; Hardware stack levels used:    1
 19057 ;; Hardware stack levels required when called:    5
 19058 ;; This function calls:
 19059 ;;		_CC2500_WriteByte
 19060 ;;		_DelayTime_1us
 19061 ;; This function is called by:
 19062 ;;		_CC2500_PowerOnInitial
 19063 ;; This function uses a non-reentrant model
 19064 ;;
 19065                           
 19066                           
 19067                           ;psect for function _CC2500_PowerRST
 19068  1B06                     _CC2500_PowerRST:	
 19069                           
 19070                           ;CC2500_B1.c: 112: RC1=0;
 19071                           
 19072                           ;incstack = 0
 19073                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19074  1B06  0020               	movlb	0	; select bank0
 19075  1B07  108E               	bcf	14,1	;volatile
 19076                           
 19077                           ;CC2500_B1.c: 113: RC0=0;
 19078  1B08  100E               	bcf	14,0	;volatile
 19079                           
 19080                           ;CC2500_B1.c: 114: RC4=1;
 19081  1B09  160E               	bsf	14,4	;volatile
 19082                           
 19083                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 19084  1B0A  300A               	movlw	10
 19085  1B0B  00A0               	movwf	DelayTime_1us@count
 19086  1B0C  3000               	movlw	0
 19087  1B0D  00A1               	movwf	DelayTime_1us@count+1
 19088  1B0E  3199  21E4  319B   	fcall	_DelayTime_1us
 19089                           
 19090                           ;CC2500_B1.c: 116: RC4=0;
 19091  1B11  0020               	movlb	0	; select bank0
 19092  1B12  120E               	bcf	14,4	;volatile
 19093                           
 19094                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 19095  1B13  300A               	movlw	10
 19096  1B14  00A0               	movwf	DelayTime_1us@count
 19097  1B15  3000               	movlw	0
 19098  1B16  00A1               	movwf	DelayTime_1us@count+1
 19099  1B17  3199  21E4  319B   	fcall	_DelayTime_1us
 19100                           
 19101                           ;CC2500_B1.c: 118: RC4=1;
 19102  1B1A  0020               	movlb	0	; select bank0
 19103  1B1B  160E               	bsf	14,4	;volatile
 19104                           
 19105                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 19106  1B1C  3028               	movlw	40
 19107  1B1D  00A0               	movwf	DelayTime_1us@count
 19108  1B1E  3000               	movlw	0
 19109  1B1F  00A1               	movwf	DelayTime_1us@count+1
 19110  1B20  3199  21E4  319B   	fcall	_DelayTime_1us
 19111                           
 19112                           ;CC2500_B1.c: 120: RC4=0;
 19113  1B23  0020               	movlb	0	; select bank0
 19114  1B24  120E               	bcf	14,4	;volatile
 19115                           
 19116                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 19117  1B25  3030               	movlw	48
 19118  1B26  00A6               	movwf	??_CC2500_PowerRST
 19119  1B27  0826               	movf	??_CC2500_PowerRST,w
 19120  1B28  0021               	movlb	1	; select bank1
 19121  1B29  00BF               	movwf	_SPI0Buffer^(0+128)
 19122  1B2A                     l320:	
 19123                           ;CC2500_B1.c: 122: while(RC2==1);
 19124                           
 19125  1B2A  0020               	movlb	0	; select bank0
 19126  1B2B  190E               	btfsc	14,2	;volatile
 19127  1B2C  2B2A               	goto	l320
 19128                           
 19129                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 19130  1B2D  31A7  27B5  319B   	fcall	_CC2500_WriteByte
 19131  1B30                     l323:	
 19132                           ;CC2500_B1.c: 124: while(RC2==1);
 19133                           
 19134  1B30  0020               	movlb	0	; select bank0
 19135  1B31  190E               	btfsc	14,2	;volatile
 19136  1B32  2B30               	goto	l323
 19137                           
 19138                           ;CC2500_B1.c: 125: RC0=0;
 19139  1B33  100E               	bcf	14,0	;volatile
 19140                           
 19141                           ;CC2500_B1.c: 126: RC4=1;
 19142  1B34  160E               	bsf	14,4	;volatile
 19143  1B35  0008               	return
 19144  1B36                     __end_of_CC2500_PowerRST:	
 19145                           
 19146                           	psect	text124
 19147  1A57                     __ptext124:	
 19148 ;; *************** function _CC2500_InitSetREG *****************
 19149 ;; Defined at:
 19150 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19151 ;; Parameters:    Size  Location     Type
 19152 ;;		None
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19155 ;;  temp2           1    7[BANK0 ] unsigned char 
 19156 ;;  temp1           1    6[BANK0 ] unsigned char 
 19157 ;; Return value:  Size  Location     Type
 19158 ;;		None               void
 19159 ;; Registers used:
 19160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19161 ;; Tracked objects:
 19162 ;;		On entry : 0/0
 19163 ;;		On exit  : 0/0
 19164 ;;		Unchanged: 0/0
 19165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19169 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19170 ;;Total ram usage:        4 bytes
 19171 ;; Hardware stack levels used:    1
 19172 ;; Hardware stack levels required when called:    6
 19173 ;; This function calls:
 19174 ;;		_CC2500_WriteREG
 19175 ;; This function is called by:
 19176 ;;		_CC2500_PowerOnInitial
 19177 ;; This function uses a non-reentrant model
 19178 ;;
 19179                           
 19180                           
 19181                           ;psect for function _CC2500_InitSetREG
 19182  1A57                     _CC2500_InitSetREG:	
 19183                           
 19184                           ;CC2500_B1.c: 133: unsigned char loop_c;
 19185                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 19186                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 19187                           
 19188                           ;incstack = 0
 19189                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19190  1A57  0020               	movlb	0	; select bank0
 19191  1A58  01A8               	clrf	CC2500_InitSetREG@loop_c
 19192  1A59                     L12:	
 19193  1A59  302F               	movlw	47
 19194  1A5A  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19195  1A5B  1803               	btfsc	3,0
 19196  1A5C  0008               	return
 19197                           
 19198                           ;CC2500_B1.c: 137: {
 19199                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 19200  1A5D  0828               	movf	CC2500_InitSetREG@loop_c,w
 19201  1A5E  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19202  1A5F  0084               	movwf	4
 19203  1A60  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19204  1A61  1803               	skipnc
 19205  1A62  3E01               	addlw	1
 19206  1A63  0085               	movwf	5
 19207  1A64  0800               	movf	0,w	;code access
 19208  1A65  00A5               	movwf	??_CC2500_InitSetREG
 19209  1A66  0825               	movf	??_CC2500_InitSetREG,w
 19210  1A67  00A6               	movwf	CC2500_InitSetREG@temp1
 19211                           
 19212                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 19213  1A68  0828               	movf	CC2500_InitSetREG@loop_c,w
 19214  1A69  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19215  1A6A  0084               	movwf	4
 19216  1A6B  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19217  1A6C  1803               	skipnc
 19218  1A6D  3E01               	addlw	1
 19219  1A6E  0085               	movwf	5
 19220  1A6F  0800               	movf	0,w	;code access
 19221  1A70  00A5               	movwf	??_CC2500_InitSetREG
 19222  1A71  0825               	movf	??_CC2500_InitSetREG,w
 19223  1A72  00A7               	movwf	CC2500_InitSetREG@temp2
 19224                           
 19225                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 19226  1A73  0827               	movf	CC2500_InitSetREG@temp2,w
 19227  1A74  00A5               	movwf	??_CC2500_InitSetREG
 19228  1A75  0825               	movf	??_CC2500_InitSetREG,w
 19229  1A76  00A2               	movwf	CC2500_WriteREG@value
 19230  1A77  0826               	movf	CC2500_InitSetREG@temp1,w
 19231  1A78  31A7  27CE  319A   	fcall	_CC2500_WriteREG
 19232  1A7B  3001               	movlw	1
 19233  1A7C  0020               	movlb	0	; select bank0
 19234  1A7D  00A5               	movwf	??_CC2500_InitSetREG
 19235  1A7E  0825               	movf	??_CC2500_InitSetREG,w
 19236  1A7F  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19237  1A80  2A59               	goto	L12
 19238  1A81                     __end_of_CC2500_InitSetREG:	
 19239                           
 19240                           	psect	text125
 19241  18F8                     __ptext125:	
 19242 ;; *************** function _CC2500_InitPATable *****************
 19243 ;; Defined at:
 19244 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19249 ;;  temp            1    6[BANK0 ] unsigned char 
 19250 ;; Return value:  Size  Location     Type
 19251 ;;		None               void
 19252 ;; Registers used:
 19253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19254 ;; Tracked objects:
 19255 ;;		On entry : 0/0
 19256 ;;		On exit  : 0/0
 19257 ;;		Unchanged: 0/0
 19258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19263 ;;Total ram usage:        3 bytes
 19264 ;; Hardware stack levels used:    1
 19265 ;; Hardware stack levels required when called:    6
 19266 ;; This function calls:
 19267 ;;		_CC2500_WriteREG
 19268 ;; This function is called by:
 19269 ;;		_CC2500_PowerOnInitial
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           
 19274                           ;psect for function _CC2500_InitPATable
 19275  18F8                     _CC2500_InitPATable:	
 19276                           
 19277                           ;CC2500_B1.c: 149: unsigned char loop_d;
 19278                           ;CC2500_B1.c: 150: unsigned char temp;
 19279                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 19280                           
 19281                           ;incstack = 0
 19282                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19283  18F8  0020               	movlb	0	; select bank0
 19284  18F9  01A7               	clrf	CC2500_InitPATable@loop_d
 19285  18FA                     L13:	
 19286  18FA  3008               	movlw	8
 19287  18FB  0227               	subwf	CC2500_InitPATable@loop_d,w
 19288  18FC  1803               	btfsc	3,0
 19289  18FD  0008               	return
 19290                           
 19291                           ;CC2500_B1.c: 153: {
 19292                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 19293  18FE  0827               	movf	CC2500_InitPATable@loop_d,w
 19294  18FF  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19295  1900  0084               	movwf	4
 19296  1901  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19297  1902  1803               	skipnc
 19298  1903  3E01               	addlw	1
 19299  1904  0085               	movwf	5
 19300  1905  0800               	movf	0,w	;code access
 19301  1906  00A5               	movwf	??_CC2500_InitPATable
 19302  1907  0825               	movf	??_CC2500_InitPATable,w
 19303  1908  00A6               	movwf	CC2500_InitPATable@temp
 19304                           
 19305                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 19306  1909  0826               	movf	CC2500_InitPATable@temp,w
 19307  190A  00A5               	movwf	??_CC2500_InitPATable
 19308  190B  0825               	movf	??_CC2500_InitPATable,w
 19309  190C  00A2               	movwf	CC2500_WriteREG@value
 19310  190D  303E               	movlw	62
 19311  190E  31A7  27CE  3198   	fcall	_CC2500_WriteREG
 19312  1911  3001               	movlw	1
 19313  1912  0020               	movlb	0	; select bank0
 19314  1913  00A5               	movwf	??_CC2500_InitPATable
 19315  1914  0825               	movf	??_CC2500_InitPATable,w
 19316  1915  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19317  1916  28FA               	goto	L13
 19318  1917                     __end_of_CC2500_InitPATable:	
 19319                           
 19320                           	psect	text126
 19321  27CE                     __ptext126:	
 19322 ;; *************** function _CC2500_WriteREG *****************
 19323 ;; Defined at:
 19324 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19325 ;; Parameters:    Size  Location     Type
 19326 ;;  w_addr          1    wreg     unsigned char 
 19327 ;;  value           1    2[BANK0 ] unsigned char 
 19328 ;; Auto vars:     Size  Location     Type
 19329 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19330 ;; Return value:  Size  Location     Type
 19331 ;;		None               void
 19332 ;; Registers used:
 19333 ;;		wreg, status,2, status,0, pclath, cstack
 19334 ;; Tracked objects:
 19335 ;;		On entry : 0/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19339 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19343 ;;Total ram usage:        3 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    5
 19346 ;; This function calls:
 19347 ;;		_CC2500_WriteByte
 19348 ;; This function is called by:
 19349 ;;		_CC2500_InitSetREG
 19350 ;;		_CC2500_InitPATable
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           
 19355                           ;psect for function _CC2500_WriteREG
 19356  27CE                     _CC2500_WriteREG:	
 19357                           
 19358                           ;incstack = 0
 19359                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19360                           ;CC2500_WriteREG@w_addr stored from wreg
 19361  27CE  0020               	movlb	0	; select bank0
 19362  27CF  00A4               	movwf	CC2500_WriteREG@w_addr
 19363                           
 19364                           ;CC2500_B1.c: 229: RC4=0;
 19365  27D0  120E               	bcf	14,4	;volatile
 19366                           
 19367                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19368  27D1  0824               	movf	CC2500_WriteREG@w_addr,w
 19369  27D2  00A3               	movwf	??_CC2500_WriteREG
 19370  27D3  0823               	movf	??_CC2500_WriteREG,w
 19371  27D4  0021               	movlb	1	; select bank1
 19372  27D5  00BF               	movwf	_SPI0Buffer^(0+128)
 19373  27D6                     l365:	
 19374                           ;CC2500_B1.c: 231: while(RC2==1);
 19375                           
 19376  27D6  0020               	movlb	0	; select bank0
 19377  27D7  190E               	btfsc	14,2	;volatile
 19378  27D8  2FD6               	goto	l365
 19379                           
 19380                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19381  27D9  31A7  27B5  31A7   	fcall	_CC2500_WriteByte
 19382                           
 19383                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19384  27DC  0020               	movlb	0	; select bank0
 19385  27DD  0822               	movf	CC2500_WriteREG@value,w
 19386  27DE  00A3               	movwf	??_CC2500_WriteREG
 19387  27DF  0823               	movf	??_CC2500_WriteREG,w
 19388  27E0  0021               	movlb	1	; select bank1
 19389  27E1  00BF               	movwf	_SPI0Buffer^(0+128)
 19390                           
 19391                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19392  27E2  31A7  27B5         	fcall	_CC2500_WriteByte
 19393                           
 19394                           ;CC2500_B1.c: 235: RC4=1;
 19395  27E4  0020               	movlb	0	; select bank0
 19396  27E5  160E               	bsf	14,4	;volatile
 19397  27E6  0008               	return
 19398  27E7                     __end_of_CC2500_WriteREG:	
 19399                           
 19400                           	psect	text127
 19401  25EF                     __ptext127:	
 19402 ;; *************** function _CC2500_FrequencyCabr *****************
 19403 ;; Defined at:
 19404 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;		None               void
 19411 ;; Registers used:
 19412 ;;		wreg, status,2, status,0, pclath, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19422 ;;Total ram usage:        0 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:    6
 19425 ;; This function calls:
 19426 ;;		_CC2500_WriteCommand
 19427 ;;		_DelayTime_1us
 19428 ;; This function is called by:
 19429 ;;		_CC2500_PowerOnInitial
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           
 19434                           ;psect for function _CC2500_FrequencyCabr
 19435  25EF                     _CC2500_FrequencyCabr:	
 19436                           
 19437                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19438                           
 19439                           ;incstack = 0
 19440                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19441  25EF  3033               	movlw	51
 19442  25F0  31A6  26DC  31A5   	fcall	_CC2500_WriteCommand
 19443                           
 19444                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19445  25F3  30E8               	movlw	232
 19446  25F4  0020               	movlb	0	; select bank0
 19447  25F5  00A0               	movwf	DelayTime_1us@count
 19448  25F6  3003               	movlw	3
 19449  25F7  00A1               	movwf	DelayTime_1us@count+1
 19450  25F8  3199  21E4         	fcall	_DelayTime_1us
 19451  25FA  0008               	return
 19452  25FB                     __end_of_CC2500_FrequencyCabr:	
 19453                           
 19454                           	psect	text128
 19455  19E4                     __ptext128:	
 19456 ;; *************** function _DelayTime_1us *****************
 19457 ;; Defined at:
 19458 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19459 ;; Parameters:    Size  Location     Type
 19460 ;;  count           2    0[BANK0 ] int 
 19461 ;; Auto vars:     Size  Location     Type
 19462 ;;  j               2    4[BANK0 ] unsigned int 
 19463 ;;  i               2    2[BANK0 ] unsigned int 
 19464 ;; Return value:  Size  Location     Type
 19465 ;;		None               void
 19466 ;; Registers used:
 19467 ;;		wreg, status,2
 19468 ;; Tracked objects:
 19469 ;;		On entry : 0/0
 19470 ;;		On exit  : 0/0
 19471 ;;		Unchanged: 0/0
 19472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;Total ram usage:        6 bytes
 19478 ;; Hardware stack levels used:    1
 19479 ;; Hardware stack levels required when called:    4
 19480 ;; This function calls:
 19481 ;;		Nothing
 19482 ;; This function is called by:
 19483 ;;		_CC2500_PowerRST
 19484 ;;		_CC2500_FrequencyCabr
 19485 ;; This function uses a non-reentrant model
 19486 ;;
 19487                           
 19488                           
 19489                           ;psect for function _DelayTime_1us
 19490  19E4                     _DelayTime_1us:	
 19491                           
 19492                           ;CC2500_B1.c: 285: unsigned int i,j;
 19493                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19494                           
 19495                           ;incstack = 0
 19496                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19497  19E4  3001               	movlw	1
 19498  19E5  0020               	movlb	0	; select bank0
 19499  19E6  00A2               	movwf	DelayTime_1us@i
 19500  19E7  3000               	movlw	0
 19501  19E8  00A3               	movwf	DelayTime_1us@i+1
 19502  19E9                     l389:	
 19503  19E9  0821               	movf	DelayTime_1us@count+1,w
 19504  19EA  0223               	subwf	DelayTime_1us@i+1,w
 19505  19EB  1D03               	skipz
 19506  19EC  29EF               	goto	u7985
 19507  19ED  0820               	movf	DelayTime_1us@count,w
 19508  19EE  0222               	subwf	DelayTime_1us@i,w
 19509  19EF                     u7985:	
 19510  19EF  1803               	btfsc	3,0
 19511  19F0  0008               	return
 19512                           
 19513                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19514  19F1  01A4               	clrf	DelayTime_1us@j
 19515  19F2  01A5               	clrf	DelayTime_1us@j+1
 19516  19F3  3000               	movlw	0
 19517  19F4  0225               	subwf	DelayTime_1us@j+1,w
 19518  19F5  3002               	movlw	2
 19519  19F6  1903               	skipnz
 19520  19F7  0224               	subwf	DelayTime_1us@j,w
 19521  19F8  1803               	btfsc	3,0
 19522  19F9  2A05               	goto	l8586
 19523  19FA                     l8584:	
 19524  19FA  3001               	movlw	1
 19525  19FB  07A4               	addwf	DelayTime_1us@j,f
 19526  19FC  3000               	movlw	0
 19527  19FD  3DA5               	addwfc	DelayTime_1us@j+1,f
 19528  19FE  3000               	movlw	0
 19529  19FF  0225               	subwf	DelayTime_1us@j+1,w
 19530  1A00  3002               	movlw	2
 19531  1A01  1903               	skipnz
 19532  1A02  0224               	subwf	DelayTime_1us@j,w
 19533  1A03  1C03               	skipc
 19534  1A04  29FA               	goto	l8584
 19535  1A05                     l8586:	
 19536  1A05  3001               	movlw	1
 19537  1A06  07A2               	addwf	DelayTime_1us@i,f
 19538  1A07  3000               	movlw	0
 19539  1A08  3DA3               	addwfc	DelayTime_1us@i+1,f
 19540  1A09  29E9               	goto	l389
 19541  1A0A                     __end_of_DelayTime_1us:	
 19542                           
 19543                           	psect	text129
 19544  24EF                     __ptext129:	
 19545 ;; *************** function _CC2500_ClearTXFIFO *****************
 19546 ;; Defined at:
 19547 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19548 ;; Parameters:    Size  Location     Type
 19549 ;;		None
 19550 ;; Auto vars:     Size  Location     Type
 19551 ;;		None
 19552 ;; Return value:  Size  Location     Type
 19553 ;;		None               void
 19554 ;; Registers used:
 19555 ;;		wreg, status,2, status,0, pclath, cstack
 19556 ;; Tracked objects:
 19557 ;;		On entry : 0/0
 19558 ;;		On exit  : 0/0
 19559 ;;		Unchanged: 0/0
 19560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19565 ;;Total ram usage:        0 bytes
 19566 ;; Hardware stack levels used:    1
 19567 ;; Hardware stack levels required when called:    6
 19568 ;; This function calls:
 19569 ;;		_CC2500_WriteCommand
 19570 ;; This function is called by:
 19571 ;;		_CC2500_PowerOnInitial
 19572 ;; This function uses a non-reentrant model
 19573 ;;
 19574                           
 19575                           
 19576                           ;psect for function _CC2500_ClearTXFIFO
 19577  24EF                     _CC2500_ClearTXFIFO:	
 19578                           
 19579                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19580                           
 19581                           ;incstack = 0
 19582                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19583  24EF  303B               	movlw	59
 19584  24F0  31A6  26DC         	fcall	_CC2500_WriteCommand
 19585  24F2  0008               	return
 19586  24F3                     __end_of_CC2500_ClearTXFIFO:	
 19587                           
 19588                           	psect	text130
 19589  24EB                     __ptext130:	
 19590 ;; *************** function _CC2500_ClearRXFIFO *****************
 19591 ;; Defined at:
 19592 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;		None
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;		None               void
 19599 ;; Registers used:
 19600 ;;		wreg, status,2, status,0, pclath, cstack
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19610 ;;Total ram usage:        0 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:    6
 19613 ;; This function calls:
 19614 ;;		_CC2500_WriteCommand
 19615 ;; This function is called by:
 19616 ;;		_CC2500_PowerOnInitial
 19617 ;; This function uses a non-reentrant model
 19618 ;;
 19619                           
 19620                           
 19621                           ;psect for function _CC2500_ClearRXFIFO
 19622  24EB                     _CC2500_ClearRXFIFO:	
 19623                           
 19624                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19625                           
 19626                           ;incstack = 0
 19627                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19628  24EB  303A               	movlw	58
 19629  24EC  31A6  26DC         	fcall	_CC2500_WriteCommand
 19630  24EE  0008               	return
 19631  24EF                     __end_of_CC2500_ClearRXFIFO:	
 19632                           
 19633                           	psect	text131
 19634  26DC                     __ptext131:	
 19635 ;; *************** function _CC2500_WriteCommand *****************
 19636 ;; Defined at:
 19637 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;  command         1    wreg     unsigned char 
 19640 ;; Auto vars:     Size  Location     Type
 19641 ;;  command         1    3[BANK0 ] unsigned char 
 19642 ;; Return value:  Size  Location     Type
 19643 ;;		None               void
 19644 ;; Registers used:
 19645 ;;		wreg, status,2, status,0, pclath, cstack
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;Total ram usage:        2 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:    5
 19658 ;; This function calls:
 19659 ;;		_CC2500_WriteByte
 19660 ;; This function is called by:
 19661 ;;		_CC2500_TxData
 19662 ;;		_CC2500_RxData
 19663 ;;		_CC2500_ClearTXFIFO
 19664 ;;		_CC2500_ClearRXFIFO
 19665 ;;		_CC2500_FrequencyCabr
 19666 ;;		_CC2500_SIDLEMode
 19667 ;;		_setRF_Main
 19668 ;;		_RF_RxDisable
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           
 19673                           ;psect for function _CC2500_WriteCommand
 19674  26DC                     _CC2500_WriteCommand:	
 19675                           
 19676                           ;incstack = 0
 19677                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19678                           ;CC2500_WriteCommand@command stored from wreg
 19679  26DC  0020               	movlb	0	; select bank0
 19680  26DD  00A3               	movwf	CC2500_WriteCommand@command
 19681                           
 19682                           ;CC2500_B1.c: 255: RC4=0;
 19683  26DE  120E               	bcf	14,4	;volatile
 19684                           
 19685                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19686  26DF  0823               	movf	CC2500_WriteCommand@command,w
 19687  26E0  00A2               	movwf	??_CC2500_WriteCommand
 19688  26E1  0822               	movf	??_CC2500_WriteCommand,w
 19689  26E2  0021               	movlb	1	; select bank1
 19690  26E3  00BF               	movwf	_SPI0Buffer^(0+128)
 19691  26E4                     l377:	
 19692                           ;CC2500_B1.c: 258: while(RC2==1);
 19693                           
 19694  26E4  0020               	movlb	0	; select bank0
 19695  26E5  190E               	btfsc	14,2	;volatile
 19696  26E6  2EE4               	goto	l377
 19697                           
 19698                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19699  26E7  31A7  27B5         	fcall	_CC2500_WriteByte
 19700                           
 19701                           ;CC2500_B1.c: 261: RC4=1;
 19702  26E9  0020               	movlb	0	; select bank0
 19703  26EA  160E               	bsf	14,4	;volatile
 19704  26EB  0008               	return
 19705  26EC                     __end_of_CC2500_WriteCommand:	
 19706                           
 19707                           	psect	text132
 19708  27B5                     __ptext132:	
 19709 ;; *************** function _CC2500_WriteByte *****************
 19710 ;; Defined at:
 19711 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19716 ;; Return value:  Size  Location     Type
 19717 ;;		None               void
 19718 ;; Registers used:
 19719 ;;		wreg, status,2, status,0
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;Total ram usage:        2 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    4
 19732 ;; This function calls:
 19733 ;;		Nothing
 19734 ;; This function is called by:
 19735 ;;		_CC2500_TxData
 19736 ;;		_CC2500_RxData
 19737 ;;		_CC2500_PowerRST
 19738 ;;		_CC2500_WriteREG
 19739 ;;		_CC2500_WriteCommand
 19740 ;;		_CC2500_ReadStatus
 19741 ;;		_CC2500_ReadREG
 19742 ;; This function uses a non-reentrant model
 19743 ;;
 19744                           
 19745                           
 19746                           ;psect for function _CC2500_WriteByte
 19747  27B5                     _CC2500_WriteByte:	
 19748                           
 19749                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19750                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19751                           
 19752                           ;incstack = 0
 19753                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19754  27B5  0020               	movlb	0	; select bank0
 19755  27B6  01A1               	clrf	CC2500_WriteByte@loop_a
 19756  27B7                     L14:	
 19757  27B7  3008               	movlw	8
 19758  27B8  0221               	subwf	CC2500_WriteByte@loop_a,w
 19759  27B9  1803               	btfsc	3,0
 19760  27BA  0008               	return
 19761                           
 19762                           ;CC2500_B1.c: 197: {
 19763                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19764  27BB  0021               	movlb	1	; select bank1
 19765  27BC  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19766  27BD  2FC1               	goto	l353
 19767                           
 19768                           ;CC2500_B1.c: 199: RC0=1;
 19769  27BE  0020               	movlb	0	; select bank0
 19770  27BF  140E               	bsf	14,0	;volatile
 19771  27C0  2FC3               	goto	l354
 19772  27C1                     l353:	
 19773                           
 19774                           ;CC2500_B1.c: 200: else
 19775                           ;CC2500_B1.c: 201: RC0=0;
 19776  27C1  0020               	movlb	0	; select bank0
 19777  27C2  100E               	bcf	14,0	;volatile
 19778  27C3                     l354:	
 19779                           
 19780                           ;CC2500_B1.c: 202: RC1=1;
 19781  27C3  148E               	bsf	14,1	;volatile
 19782                           
 19783                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19784  27C4  1003               	clrc
 19785  27C5  0021               	movlb	1	; select bank1
 19786  27C6  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19787                           
 19788                           ;CC2500_B1.c: 204: RC1=0;
 19789  27C7  0020               	movlb	0	; select bank0
 19790  27C8  108E               	bcf	14,1	;volatile
 19791  27C9  3001               	movlw	1
 19792  27CA  00A0               	movwf	??_CC2500_WriteByte
 19793  27CB  0820               	movf	??_CC2500_WriteByte,w
 19794  27CC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19795  27CD  2FB7               	goto	L14
 19796  27CE                     __end_of_CC2500_WriteByte:	
 19797                           
 19798                           	psect	text133
 19799  09E8                     __ptext133:	
 19800 ;; *************** function _Buzzer_Main *****************
 19801 ;; Defined at:
 19802 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 19803 ;; Parameters:    Size  Location     Type
 19804 ;;		None
 19805 ;; Auto vars:     Size  Location     Type
 19806 ;;		None
 19807 ;; Return value:  Size  Location     Type
 19808 ;;		None               void
 19809 ;; Registers used:
 19810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19811 ;; Tracked objects:
 19812 ;;		On entry : 0/0
 19813 ;;		On exit  : 0/0
 19814 ;;		Unchanged: 0/0
 19815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19818 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19819 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19820 ;;Total ram usage:        4 bytes
 19821 ;; Hardware stack levels used:    1
 19822 ;; Hardware stack levels required when called:    4
 19823 ;; This function calls:
 19824 ;;		Nothing
 19825 ;; This function is called by:
 19826 ;;		_main
 19827 ;; This function uses a non-reentrant model
 19828 ;;
 19829                           
 19830                           
 19831                           ;psect for function _Buzzer_Main
 19832  09E8                     _Buzzer_Main:	
 19833                           
 19834                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19835                           
 19836                           ;incstack = 0
 19837                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19838  09E8  0878               	movf	_Buz,w
 19839  09E9  0086               	movwf	6
 19840  09EA  3001               	movlw	1	; select bank2/3
 19841  09EB  0087               	movwf	7
 19842  09EC  1281               	bcf	1,5
 19843  09ED  0020               	movlb	0	; select bank0
 19844  09EE  198D               	btfsc	13,3	;volatile
 19845  09EF  1681               	bsf	1,5
 19846                           
 19847                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19848  09F0  0878               	movf	_Buz,w
 19849  09F1  0086               	movwf	6
 19850  09F2  3001               	movlw	1	; select bank2/3
 19851  09F3  0087               	movwf	7
 19852  09F4  1C81               	btfss	1,1
 19853  09F5  0008               	return
 19854                           
 19855                           ;Buzzer_B1.c: 58: {
 19856                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19857  09F6  0878               	movf	_Buz,w
 19858  09F7  3E06               	addlw	6
 19859  09F8  0086               	movwf	6
 19860  09F9  3001               	movlw	1	; select bank2/3
 19861  09FA  0087               	movwf	7
 19862  09FB  3F40               	moviw [0]fsr1
 19863  09FC  0020               	movlb	0	; select bank0
 19864  09FD  00A0               	movwf	??_Buzzer_Main
 19865  09FE  3F41               	moviw [1]fsr1
 19866  09FF  00A1               	movwf	??_Buzzer_Main+1
 19867  0A00  0A78               	incf	_Buz,w
 19868  0A01  0086               	movwf	6
 19869  0A02  3001               	movlw	1	; select bank2/3
 19870  0A03  0087               	movwf	7
 19871  0A04  3F40               	moviw [0]fsr1
 19872  0A05  00A2               	movwf	??_Buzzer_Main+2
 19873  0A06  3F41               	moviw [1]fsr1
 19874  0A07  00A3               	movwf	??_Buzzer_Main+3
 19875  0A08  0821               	movf	??_Buzzer_Main+1,w
 19876  0A09  0223               	subwf	??_Buzzer_Main+3,w
 19877  0A0A  1D03               	skipz
 19878  0A0B  2A0E               	goto	u6545
 19879  0A0C  0820               	movf	??_Buzzer_Main,w
 19880  0A0D  0222               	subwf	??_Buzzer_Main+2,w
 19881  0A0E                     u6545:	
 19882  0A0E  1C03               	skipc
 19883  0A0F  0008               	return
 19884                           
 19885                           ;Buzzer_B1.c: 61: {
 19886                           ;Buzzer_B1.c: 62: Buz->Time=0;
 19887  0A10  0A78               	incf	_Buz,w
 19888  0A11  0086               	movwf	6
 19889  0A12  3001               	movlw	1	; select bank2/3
 19890  0A13  0087               	movwf	7
 19891  0A14  3000               	movlw	0
 19892  0A15  3FC0               	movwi [0]fsr1
 19893  0A16  3FC1               	movwi [1]fsr1
 19894                           
 19895                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 19896  0A17  0878               	movf	_Buz,w
 19897  0A18  0086               	movwf	6
 19898  0A19  3001               	movlw	1	; select bank2/3
 19899  0A1A  0087               	movwf	7
 19900  0A1B  1A81               	btfsc	1,5
 19901  0A1C  2A82               	goto	l7568
 19902                           
 19903                           ;Buzzer_B1.c: 64: {
 19904                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 19905  0A1D  0878               	movf	_Buz,w
 19906  0A1E  3E03               	addlw	3
 19907  0A1F  0086               	movwf	6
 19908  0A20  3001               	movlw	1	; select bank2/3
 19909  0A21  0087               	movwf	7
 19910  0A22  0881               	movf	1,f
 19911  0A23  1D03               	skipz
 19912  0A24  2A7B               	goto	l7564
 19913                           
 19914                           ;Buzzer_B1.c: 66: {
 19915                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 19916  0A25  0878               	movf	_Buz,w
 19917  0A26  0086               	movwf	6
 19918  0A27  3001               	movlw	1	; select bank2/3
 19919  0A28  0087               	movwf	7
 19920  0A29  1D81               	btfss	1,3
 19921  0A2A  2A4D               	goto	l7556
 19922                           
 19923                           ;Buzzer_B1.c: 68: {
 19924                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 19925  0A2B  0878               	movf	_Buz,w
 19926  0A2C  0086               	movwf	6
 19927  0A2D  3001               	movlw	1	; select bank2/3
 19928  0A2E  0087               	movwf	7
 19929  0A2F  1181               	bcf	1,3
 19930                           
 19931                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 19932  0A30  0878               	movf	_Buz,w
 19933  0A31  3E04               	addlw	4
 19934  0A32  0086               	movwf	6
 19935  0A33  3001               	movlw	1	; select bank2/3
 19936  0A34  0087               	movwf	7
 19937  0A35  0801               	movf	1,w
 19938  0A36  00A0               	movwf	??_Buzzer_Main
 19939  0A37  0878               	movf	_Buz,w
 19940  0A38  3E03               	addlw	3
 19941  0A39  0086               	movwf	6
 19942  0A3A  3001               	movlw	1	; select bank2/3
 19943  0A3B  0087               	movwf	7
 19944  0A3C  0820               	movf	??_Buzzer_Main,w
 19945  0A3D  0081               	movwf	1
 19946                           
 19947                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 19948  0A3E  0878               	movf	_Buz,w
 19949  0A3F  3E08               	addlw	8
 19950  0A40  0086               	movwf	6
 19951  0A41  3001               	movlw	1	; select bank2/3
 19952  0A42  0087               	movwf	7
 19953  0A43  0878               	movf	_Buz,w
 19954  0A44  3E06               	addlw	6
 19955  0A45  0084               	movwf	4
 19956  0A46  3001               	movlw	1	; select bank2/3
 19957  0A47  0085               	movwf	5
 19958  0A48  3F40               	moviw [0]fsr1
 19959  0A49  3F80               	movwi [0]fsr0
 19960  0A4A  3F41               	moviw [1]fsr1
 19961  0A4B  3F81               	movwi [1]fsr0
 19962                           
 19963                           ;Buzzer_B1.c: 72: }
 19964  0A4C  0008               	return
 19965  0A4D                     l7556:	
 19966                           
 19967                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 19968  0A4D  0878               	movf	_Buz,w
 19969  0A4E  0086               	movwf	6
 19970  0A4F  3001               	movlw	1	; select bank2/3
 19971  0A50  0087               	movwf	7
 19972  0A51  1E01               	btfss	1,4
 19973  0A52  2A75               	goto	l7562
 19974                           
 19975                           ;Buzzer_B1.c: 74: {
 19976                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 19977  0A53  0878               	movf	_Buz,w
 19978  0A54  0086               	movwf	6
 19979  0A55  3001               	movlw	1	; select bank2/3
 19980  0A56  0087               	movwf	7
 19981  0A57  1201               	bcf	1,4
 19982                           
 19983                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 19984  0A58  0878               	movf	_Buz,w
 19985  0A59  3E05               	addlw	5
 19986  0A5A  0086               	movwf	6
 19987  0A5B  3001               	movlw	1	; select bank2/3
 19988  0A5C  0087               	movwf	7
 19989  0A5D  0801               	movf	1,w
 19990  0A5E  00A0               	movwf	??_Buzzer_Main
 19991  0A5F  0878               	movf	_Buz,w
 19992  0A60  3E03               	addlw	3
 19993  0A61  0086               	movwf	6
 19994  0A62  3001               	movlw	1	; select bank2/3
 19995  0A63  0087               	movwf	7
 19996  0A64  0820               	movf	??_Buzzer_Main,w
 19997  0A65  0081               	movwf	1
 19998                           
 19999                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 20000  0A66  0878               	movf	_Buz,w
 20001  0A67  3E0A               	addlw	10
 20002  0A68  0086               	movwf	6
 20003  0A69  3001               	movlw	1	; select bank2/3
 20004  0A6A  0087               	movwf	7
 20005  0A6B  0878               	movf	_Buz,w
 20006  0A6C  3E06               	addlw	6
 20007  0A6D  0084               	movwf	4
 20008  0A6E  3001               	movlw	1	; select bank2/3
 20009  0A6F  0085               	movwf	5
 20010  0A70  3F40               	moviw [0]fsr1
 20011  0A71  3F80               	movwi [0]fsr0
 20012  0A72  3F41               	moviw [1]fsr1
 20013  0A73  3F81               	movwi [1]fsr0
 20014                           
 20015                           ;Buzzer_B1.c: 78: }
 20016  0A74  0008               	return
 20017  0A75                     l7562:	
 20018                           
 20019                           ;Buzzer_B1.c: 79: else
 20020                           ;Buzzer_B1.c: 80: {
 20021                           ;Buzzer_B1.c: 81: Buz->GO=0;
 20022  0A75  0878               	movf	_Buz,w
 20023  0A76  0086               	movwf	6
 20024  0A77  3001               	movlw	1	; select bank2/3
 20025  0A78  0087               	movwf	7
 20026  0A79  1081               	bcf	1,1
 20027                           
 20028                           ;Buzzer_B1.c: 82: }
 20029                           ;Buzzer_B1.c: 83: }
 20030  0A7A  0008               	return
 20031  0A7B                     l7564:	
 20032                           
 20033                           ;Buzzer_B1.c: 84: else
 20034                           ;Buzzer_B1.c: 85: {
 20035                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 20036  0A7B  0878               	movf	_Buz,w
 20037  0A7C  0086               	movwf	6
 20038  0A7D  3001               	movlw	1	; select bank2/3
 20039  0A7E  0087               	movwf	7
 20040  0A7F  1681               	bsf	1,5
 20041                           
 20042                           ;Buzzer_B1.c: 88: RB3=1;
 20043  0A80  158D               	bsf	13,3	;volatile
 20044                           
 20045                           ;Buzzer_B1.c: 89: }
 20046                           ;Buzzer_B1.c: 90: }
 20047  0A81  0008               	return
 20048  0A82                     l7568:	
 20049                           
 20050                           ;Buzzer_B1.c: 91: else
 20051                           ;Buzzer_B1.c: 92: {
 20052                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 20053  0A82  0878               	movf	_Buz,w
 20054  0A83  0086               	movwf	6
 20055  0A84  3001               	movlw	1	; select bank2/3
 20056  0A85  0087               	movwf	7
 20057  0A86  1281               	bcf	1,5
 20058                           
 20059                           ;Buzzer_B1.c: 95: RB3=0;
 20060  0A87  118D               	bcf	13,3	;volatile
 20061                           
 20062                           ;Buzzer_B1.c: 97: Buz->Count--;
 20063  0A88  0878               	movf	_Buz,w
 20064  0A89  3E03               	addlw	3
 20065  0A8A  0086               	movwf	6
 20066  0A8B  3001               	movlw	1	; select bank2/3
 20067  0A8C  0087               	movwf	7
 20068  0A8D  3001               	movlw	1
 20069  0A8E  0281               	subwf	1,f
 20070  0A8F  0008               	return
 20071  0A90                     __end_of_Buzzer_Main:	
 20072                           
 20073                           	psect	text134
 20074  2574                     __ptext134:	
 20075 ;; *************** function _Buzzer_Initialization *****************
 20076 ;; Defined at:
 20077 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 20078 ;; Parameters:    Size  Location     Type
 20079 ;;		None
 20080 ;; Auto vars:     Size  Location     Type
 20081 ;;		None
 20082 ;; Return value:  Size  Location     Type
 20083 ;;		None               void
 20084 ;; Registers used:
 20085 ;;		wreg, fsr1l, fsr1h
 20086 ;; Tracked objects:
 20087 ;;		On entry : 0/0
 20088 ;;		On exit  : 0/0
 20089 ;;		Unchanged: 0/0
 20090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20095 ;;Total ram usage:        1 bytes
 20096 ;; Hardware stack levels used:    1
 20097 ;; Hardware stack levels required when called:    4
 20098 ;; This function calls:
 20099 ;;		Nothing
 20100 ;; This function is called by:
 20101 ;;		_main
 20102 ;; This function uses a non-reentrant model
 20103 ;;
 20104                           
 20105                           
 20106                           ;psect for function _Buzzer_Initialization
 20107  2574                     _Buzzer_Initialization:	
 20108                           
 20109                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 20110                           
 20111                           ;incstack = 0
 20112                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20113  2574  304B               	movlw	_Buz1& (0+255)
 20114  2575  0020               	movlb	0	; select bank0
 20115  2576  00A0               	movwf	??_Buzzer_Initialization
 20116  2577  0820               	movf	??_Buzzer_Initialization,w
 20117  2578  00F8               	movwf	_Buz
 20118                           
 20119                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 20120  2579  0878               	movf	_Buz,w
 20121  257A  0086               	movwf	6
 20122  257B  3001               	movlw	1	; select bank2/3
 20123  257C  0087               	movwf	7
 20124  257D  1401               	bsf	1,0
 20125  257E  0008               	return
 20126  257F                     __end_of_Buzzer_Initialization:	
 20127                           
 20128                           	psect	intentry
 20129  0004                     __pintentry:	
 20130 ;; *************** function _ISR *****************
 20131 ;; Defined at:
 20132 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20133 ;; Parameters:    Size  Location     Type
 20134 ;;		None
 20135 ;; Auto vars:     Size  Location     Type
 20136 ;;		None
 20137 ;; Return value:  Size  Location     Type
 20138 ;;		None               void
 20139 ;; Registers used:
 20140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20141 ;; Tracked objects:
 20142 ;;		On entry : 0/0
 20143 ;;		On exit  : 0/0
 20144 ;;		Unchanged: 0/0
 20145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20148 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20149 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20150 ;;Total ram usage:        1 bytes
 20151 ;; Hardware stack levels used:    1
 20152 ;; Hardware stack levels required when called:    3
 20153 ;; This function calls:
 20154 ;;		_INT_ISR
 20155 ;;		_IOC_ISR
 20156 ;;		_TMR0_ISR
 20157 ;; This function is called by:
 20158 ;;		Interrupt level 1
 20159 ;; This function uses a non-reentrant model
 20160 ;;
 20161                           
 20162  0004                     _ISR:	
 20163                           
 20164                           ;incstack = 0
 20165                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20166  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20167  0005  3180               	pagesel	$
 20168  0006  0020               	movlb	0	; select bank0
 20169  0007  087F               	movf	127,w
 20170  0008  00F7               	movwf	??_ISR
 20171                           
 20172                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 20173  0009  3199  21C0  3180   	fcall	_IOC_ISR
 20174                           
 20175                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 20176  000C  3184  242F  3180   	fcall	_TMR0_ISR
 20177                           
 20178                           ;MCU_16f1518_B1.c: 62: ;;
 20179                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 20180  000F  31A5  25E3         	fcall	_INT_ISR
 20181  0011  0877               	movf	??_ISR,w
 20182  0012  0020               	movlb	0	; select bank0
 20183  0013  00FF               	movwf	127
 20184  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 20185  0015  0009               	retfie
 20186  0016                     __end_of_ISR:	
 20187                           
 20188                           	psect	text136
 20189  042F                     __ptext136:	
 20190 ;; *************** function _TMR0_ISR *****************
 20191 ;; Defined at:
 20192 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20193 ;; Parameters:    Size  Location     Type
 20194 ;;		None
 20195 ;; Auto vars:     Size  Location     Type
 20196 ;;		None
 20197 ;; Return value:  Size  Location     Type
 20198 ;;		None               void
 20199 ;; Registers used:
 20200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20201 ;; Tracked objects:
 20202 ;;		On entry : 0/0
 20203 ;;		On exit  : 0/0
 20204 ;;		Unchanged: 0/0
 20205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20208 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20209 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20210 ;;Total ram usage:        4 bytes
 20211 ;; Hardware stack levels used:    1
 20212 ;; Hardware stack levels required when called:    1
 20213 ;; This function calls:
 20214 ;;		i1_setLoad_StatusOff
 20215 ;; This function is called by:
 20216 ;;		_ISR
 20217 ;; This function uses a non-reentrant model
 20218 ;;
 20219                           
 20220                           
 20221                           ;psect for function _TMR0_ISR
 20222  042F                     _TMR0_ISR:	
 20223                           
 20224                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 20225                           
 20226                           ;incstack = 0
 20227                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20228  042F  1E8B               	btfss	11,5	;volatile
 20229  0430  0008               	return
 20230  0431  1D0B               	btfss	11,2	;volatile
 20231  0432  0008               	return
 20232                           
 20233                           ;MCU_16f1518_B1.c: 85: {
 20234                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 20235  0433  30A6               	movlw	166
 20236  0434  0020               	movlb	0	; select bank0
 20237  0435  0095               	movwf	21	;volatile
 20238                           
 20239                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 20240  0436  110B               	bcf	11,2	;volatile
 20241                           
 20242                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1
      +                          ; RB4=1; }
 20243  0437  0879               	movf	_DimmerLights11,w
 20244  0438  0086               	movwf	6
 20245  0439  3001               	movlw	1	; select bank2/3
 20246  043A  0087               	movwf	7
 20247  043B  1C01               	btfss	1,0
 20248  043C  2C88               	goto	i1l7984
 20249  043D  3001               	movlw	1
 20250  043E  00F3               	movwf	??_TMR0_ISR
 20251  043F  0879               	movf	_DimmerLights11,w
 20252  0440  3E03               	addlw	3
 20253  0441  0086               	movwf	6
 20254  0442  3001               	movlw	1	; select bank2/3
 20255  0443  0087               	movwf	7
 20256  0444  0873               	movf	??_TMR0_ISR,w
 20257  0445  0781               	addwf	1,f
 20258  0446  0021               	movlb	1	; select bank1
 20259  0447  0839               	movf	_Dimmer^(0+128),w
 20260  0448  3E02               	addlw	2
 20261  0449  0086               	movwf	6
 20262  044A  0187               	clrf	7
 20263  044B  0801               	movf	1,w
 20264  044C  00F3               	movwf	??_TMR0_ISR
 20265  044D  01F4               	clrf	??_TMR0_ISR+1
 20266  044E  09F3               	comf	??_TMR0_ISR,f
 20267  044F  09F4               	comf	??_TMR0_ISR+1,f
 20268  0450  0AF3               	incf	??_TMR0_ISR,f
 20269  0451  1903               	skipnz
 20270  0452  0AF4               	incf	??_TMR0_ISR+1,f
 20271  0453  0879               	movf	_DimmerLights11,w
 20272  0454  3E04               	addlw	4
 20273  0455  0086               	movwf	6
 20274  0456  3001               	movlw	1	; select bank2/3
 20275  0457  0087               	movwf	7
 20276  0458  0801               	movf	1,w
 20277  0459  0773               	addwf	??_TMR0_ISR,w
 20278  045A  00F5               	movwf	??_TMR0_ISR+2
 20279  045B  0874               	movf	??_TMR0_ISR+1,w
 20280  045C  1803               	skipnc
 20281  045D  0A74               	incf	??_TMR0_ISR+1,w
 20282  045E  00F6               	movwf	??_TMR0_ISR+3
 20283  045F  0879               	movf	_DimmerLights11,w
 20284  0460  3E03               	addlw	3
 20285  0461  0086               	movwf	6
 20286  0462  3001               	movlw	1	; select bank2/3
 20287  0463  0087               	movwf	7
 20288  0464  0876               	movf	??_TMR0_ISR+3,w
 20289  0465  3A80               	xorlw	128
 20290  0466  3C80               	sublw	128
 20291  0467  1D03               	skipz
 20292  0468  2C6B               	goto	u712_25
 20293  0469  0875               	movf	??_TMR0_ISR+2,w
 20294  046A  0201               	subwf	1,w
 20295  046B                     u712_25:	
 20296  046B  1C03               	skipc
 20297  046C  2DC4               	goto	i1l8054
 20298  046D  0879               	movf	_DimmerLights11,w
 20299  046E  3E03               	addlw	3
 20300  046F  0086               	movwf	6
 20301  0470  3001               	movlw	1	; select bank2/3
 20302  0471  0087               	movwf	7
 20303  0472  0181               	clrf	1
 20304  0473  0879               	movf	_DimmerLights11,w
 20305  0474  0086               	movwf	6
 20306  0475  3001               	movlw	1	; select bank2/3
 20307  0476  0087               	movwf	7
 20308  0477  1001               	bcf	1,0
 20309  0478  0879               	movf	_DimmerLights11,w
 20310  0479  3E07               	addlw	7
 20311  047A  0086               	movwf	6
 20312  047B  3001               	movlw	1	; select bank2/3
 20313  047C  0087               	movwf	7
 20314  047D  1401               	bsf	1,0
 20315  047E  0879               	movf	_DimmerLights11,w
 20316  047F  0086               	movwf	6
 20317  0480  3001               	movlw	1	; select bank2/3
 20318  0481  0087               	movwf	7
 20319  0482  1F01               	btfss	1,6
 20320  0483  2DC4               	goto	i1l8054
 20321  0484  0020               	movlb	0	; select bank0
 20322  0485  178C               	bsf	12,7	;volatile
 20323  0486  160D               	bsf	13,4	;volatile
 20324  0487  2DC4               	goto	i1l8054
 20325  0488                     i1l7984:	
 20326  0488  0879               	movf	_DimmerLights11,w
 20327  0489  3E07               	addlw	7
 20328  048A  0086               	movwf	6
 20329  048B  3001               	movlw	1	; select bank2/3
 20330  048C  0087               	movwf	7
 20331  048D  1C01               	btfss	1,0
 20332  048E  2D8E               	goto	i1l8044
 20333  048F  0879               	movf	_DimmerLights11,w
 20334  0490  3E07               	addlw	7
 20335  0491  0086               	movwf	6
 20336  0492  3001               	movlw	1	; select bank2/3
 20337  0493  0087               	movwf	7
 20338  0494  1001               	bcf	1,0
 20339  0495  0879               	movf	_DimmerLights11,w
 20340  0496  0086               	movwf	6
 20341  0497  3001               	movlw	1	; select bank2/3
 20342  0498  0087               	movwf	7
 20343  0499  1C81               	btfss	1,1
 20344  049A  2D8E               	goto	i1l8044
 20345  049B  3001               	movlw	1
 20346  049C  00F3               	movwf	??_TMR0_ISR
 20347  049D  0A79               	incf	_DimmerLights11,w
 20348  049E  0086               	movwf	6
 20349  049F  3001               	movlw	1	; select bank2/3
 20350  04A0  0087               	movwf	7
 20351  04A1  0873               	movf	??_TMR0_ISR,w
 20352  04A2  0781               	addwf	1,f
 20353  04A3  0A79               	incf	_DimmerLights11,w
 20354  04A4  0086               	movwf	6
 20355  04A5  3001               	movlw	1	; select bank2/3
 20356  04A6  0087               	movwf	7
 20357  04A7  0879               	movf	_DimmerLights11,w
 20358  04A8  3E02               	addlw	2
 20359  04A9  0084               	movwf	4
 20360  04AA  3001               	movlw	1	; select bank2/3
 20361  04AB  0085               	movwf	5
 20362  04AC  0800               	movf	0,w
 20363  04AD  0201               	subwf	1,w
 20364  04AE  1C03               	skipc
 20365  04AF  2D8E               	goto	i1l8044
 20366  04B0  0A79               	incf	_DimmerLights11,w
 20367  04B1  0086               	movwf	6
 20368  04B2  3001               	movlw	1	; select bank2/3
 20369  04B3  0087               	movwf	7
 20370  04B4  0181               	clrf	1
 20371  04B5  0879               	movf	_DimmerLights11,w
 20372  04B6  0086               	movwf	6
 20373  04B7  3001               	movlw	1	; select bank2/3
 20374  04B8  0087               	movwf	7
 20375  04B9  1D81               	btfss	1,3
 20376  04BA  2CF1               	goto	i1l8010
 20377  04BB  0879               	movf	_DimmerLights11,w
 20378  04BC  0086               	movwf	6
 20379  04BD  3001               	movlw	1	; select bank2/3
 20380  04BE  0087               	movwf	7
 20381  04BF  1A01               	btfsc	1,4
 20382  04C0  2CD8               	goto	i1l8004
 20383  04C1  0879               	movf	_DimmerLights11,w
 20384  04C2  3E04               	addlw	4
 20385  04C3  0086               	movwf	6
 20386  04C4  3001               	movlw	1	; select bank2/3
 20387  04C5  0087               	movwf	7
 20388  04C6  3044               	movlw	68
 20389  04C7  0201               	subwf	1,w
 20390  04C8  1C03               	skipc
 20391  04C9  2CD2               	goto	i1l8002
 20392  04CA  0879               	movf	_DimmerLights11,w
 20393  04CB  3E04               	addlw	4
 20394  04CC  0086               	movwf	6
 20395  04CD  3001               	movlw	1	; select bank2/3
 20396  04CE  0087               	movwf	7
 20397  04CF  3001               	movlw	1
 20398  04D0  0281               	subwf	1,f
 20399  04D1  2D8E               	goto	i1l8044
 20400  04D2                     i1l8002:	
 20401  04D2  0879               	movf	_DimmerLights11,w
 20402  04D3  0086               	movwf	6
 20403  04D4  3001               	movlw	1	; select bank2/3
 20404  04D5  0087               	movwf	7
 20405  04D6  1601               	bsf	1,4
 20406  04D7  2D8E               	goto	i1l8044
 20407  04D8                     i1l8004:	
 20408  04D8  0879               	movf	_DimmerLights11,w
 20409  04D9  3E04               	addlw	4
 20410  04DA  0086               	movwf	6
 20411  04DB  3001               	movlw	1	; select bank2/3
 20412  04DC  0087               	movwf	7
 20413  04DD  3078               	movlw	120
 20414  04DE  0201               	subwf	1,w
 20415  04DF  1803               	skipnc
 20416  04E0  2CEB               	goto	i1l8008
 20417  04E1  3001               	movlw	1
 20418  04E2  00F3               	movwf	??_TMR0_ISR
 20419  04E3  0879               	movf	_DimmerLights11,w
 20420  04E4  3E04               	addlw	4
 20421  04E5  0086               	movwf	6
 20422  04E6  3001               	movlw	1	; select bank2/3
 20423  04E7  0087               	movwf	7
 20424  04E8  0873               	movf	??_TMR0_ISR,w
 20425  04E9  0781               	addwf	1,f
 20426  04EA  2D8E               	goto	i1l8044
 20427  04EB                     i1l8008:	
 20428  04EB  0879               	movf	_DimmerLights11,w
 20429  04EC  0086               	movwf	6
 20430  04ED  3001               	movlw	1	; select bank2/3
 20431  04EE  0087               	movwf	7
 20432  04EF  1201               	bcf	1,4
 20433  04F0  2D8E               	goto	i1l8044
 20434  04F1                     i1l8010:	
 20435  04F1  0879               	movf	_DimmerLights11,w
 20436  04F2  0086               	movwf	6
 20437  04F3  3001               	movlw	1	; select bank2/3
 20438  04F4  0087               	movwf	7
 20439  04F5  1D01               	btfss	1,2
 20440  04F6  2D38               	goto	i1l8024
 20441  04F7  0879               	movf	_DimmerLights11,w
 20442  04F8  3E05               	addlw	5
 20443  04F9  0086               	movwf	6
 20444  04FA  3001               	movlw	1	; select bank2/3
 20445  04FB  0087               	movwf	7
 20446  04FC  0879               	movf	_DimmerLights11,w
 20447  04FD  3E04               	addlw	4
 20448  04FE  0084               	movwf	4
 20449  04FF  3001               	movlw	1	; select bank2/3
 20450  0500  0085               	movwf	5
 20451  0501  0800               	movf	0,w
 20452  0502  0201               	subwf	1,w
 20453  0503  1803               	skipnc
 20454  0504  2D0D               	goto	i1l8016
 20455  0505  0879               	movf	_DimmerLights11,w
 20456  0506  3E04               	addlw	4
 20457  0507  0086               	movwf	6
 20458  0508  3001               	movlw	1	; select bank2/3
 20459  0509  0087               	movwf	7
 20460  050A  3001               	movlw	1
 20461  050B  0281               	subwf	1,f
 20462  050C  2D24               	goto	i1l8020
 20463  050D                     i1l8016:	
 20464  050D  0879               	movf	_DimmerLights11,w
 20465  050E  3E04               	addlw	4
 20466  050F  0086               	movwf	6
 20467  0510  3001               	movlw	1	; select bank2/3
 20468  0511  0087               	movwf	7
 20469  0512  0879               	movf	_DimmerLights11,w
 20470  0513  3E05               	addlw	5
 20471  0514  0084               	movwf	4
 20472  0515  3001               	movlw	1	; select bank2/3
 20473  0516  0085               	movwf	5
 20474  0517  0800               	movf	0,w
 20475  0518  0201               	subwf	1,w
 20476  0519  1803               	skipnc
 20477  051A  2D24               	goto	i1l8020
 20478  051B  3001               	movlw	1
 20479  051C  00F3               	movwf	??_TMR0_ISR
 20480  051D  0879               	movf	_DimmerLights11,w
 20481  051E  3E04               	addlw	4
 20482  051F  0086               	movwf	6
 20483  0520  3001               	movlw	1	; select bank2/3
 20484  0521  0087               	movwf	7
 20485  0522  0873               	movf	??_TMR0_ISR,w
 20486  0523  0781               	addwf	1,f
 20487  0524                     i1l8020:	
 20488  0524  0879               	movf	_DimmerLights11,w
 20489  0525  3E05               	addlw	5
 20490  0526  0086               	movwf	6
 20491  0527  3001               	movlw	1	; select bank2/3
 20492  0528  0087               	movwf	7
 20493  0529  0879               	movf	_DimmerLights11,w
 20494  052A  3E04               	addlw	4
 20495  052B  0084               	movwf	4
 20496  052C  3001               	movlw	1	; select bank2/3
 20497  052D  0085               	movwf	5
 20498  052E  0800               	movf	0,w
 20499  052F  0601               	xorwf	1,w
 20500  0530  1D03               	skipz
 20501  0531  2D8E               	goto	i1l8044
 20502  0532  0879               	movf	_DimmerLights11,w
 20503  0533  0086               	movwf	6
 20504  0534  3001               	movlw	1	; select bank2/3
 20505  0535  0087               	movwf	7
 20506  0536  1101               	bcf	1,2
 20507  0537  2D53               	goto	i1l8030
 20508  0538                     i1l8024:	
 20509  0538  0879               	movf	_DimmerLights11,w
 20510  0539  0086               	movwf	6
 20511  053A  3001               	movlw	1	; select bank2/3
 20512  053B  0087               	movwf	7
 20513  053C  1E81               	btfss	1,5
 20514  053D  2D59               	goto	i1l8032
 20515  053E  0879               	movf	_DimmerLights11,w
 20516  053F  3E04               	addlw	4
 20517  0540  0086               	movwf	6
 20518  0541  3001               	movlw	1	; select bank2/3
 20519  0542  0087               	movwf	7
 20520  0543  3001               	movlw	1
 20521  0544  0281               	subwf	1,f
 20522  0545  0879               	movf	_DimmerLights11,w
 20523  0546  3E05               	addlw	5
 20524  0547  0086               	movwf	6
 20525  0548  3001               	movlw	1	; select bank2/3
 20526  0549  0087               	movwf	7
 20527  054A  0879               	movf	_DimmerLights11,w
 20528  054B  3E04               	addlw	4
 20529  054C  0084               	movwf	4
 20530  054D  3001               	movlw	1	; select bank2/3
 20531  054E  0085               	movwf	5
 20532  054F  0800               	movf	0,w
 20533  0550  0201               	subwf	1,w
 20534  0551  1C03               	skipc
 20535  0552  2D8E               	goto	i1l8044
 20536  0553                     i1l8030:	
 20537  0553  0879               	movf	_DimmerLights11,w
 20538  0554  0086               	movwf	6
 20539  0555  3001               	movlw	1	; select bank2/3
 20540  0556  0087               	movwf	7
 20541  0557  1081               	bcf	1,1
 20542  0558  2D8E               	goto	i1l8044
 20543  0559                     i1l8032:	
 20544  0559  3001               	movlw	1
 20545  055A  00F3               	movwf	??_TMR0_ISR
 20546  055B  0879               	movf	_DimmerLights11,w
 20547  055C  3E04               	addlw	4
 20548  055D  0086               	movwf	6
 20549  055E  3001               	movlw	1	; select bank2/3
 20550  055F  0087               	movwf	7
 20551  0560  0873               	movf	??_TMR0_ISR,w
 20552  0561  0781               	addwf	1,f
 20553  0562  0879               	movf	_DimmerLights11,w
 20554  0563  3E04               	addlw	4
 20555  0564  0086               	movwf	6
 20556  0565  3001               	movlw	1	; select bank2/3
 20557  0566  0087               	movwf	7
 20558  0567  0879               	movf	_DimmerLights11,w
 20559  0568  3E06               	addlw	6
 20560  0569  0084               	movwf	4
 20561  056A  3001               	movlw	1	; select bank2/3
 20562  056B  0085               	movwf	5
 20563  056C  0800               	movf	0,w
 20564  056D  0201               	subwf	1,w
 20565  056E  1C03               	skipc
 20566  056F  2D8E               	goto	i1l8044
 20567  0570  0879               	movf	_DimmerLights11,w
 20568  0571  0086               	movwf	6
 20569  0572  3001               	movlw	1	; select bank2/3
 20570  0573  0087               	movwf	7
 20571  0574  1081               	bcf	1,1
 20572  0575  0879               	movf	_DimmerLights11,w
 20573  0576  0086               	movwf	6
 20574  0577  3001               	movlw	1	; select bank2/3
 20575  0578  0087               	movwf	7
 20576  0579  1301               	bcf	1,6
 20577  057A  0879               	movf	_DimmerLights11,w
 20578  057B  3E0C               	addlw	12
 20579  057C  0086               	movwf	6
 20580  057D  3001               	movlw	1	; select bank2/3
 20581  057E  0087               	movwf	7
 20582  057F  1401               	bsf	1,0
 20583  0580  0021               	movlb	1	; select bank1
 20584  0581  0839               	movf	_Dimmer^(0+128),w
 20585  0582  0086               	movwf	6
 20586  0583  0187               	clrf	7
 20587  0584  1401               	bsf	1,0
 20588  0585  0020               	movlb	0	; select bank0
 20589  0586  118C               	bcf	12,3	;volatile
 20590  0587  138E               	bcf	14,7	;volatile
 20591  0588  01F1               	clrf	i1setLoad_StatusOff@command
 20592  0589  0AF1               	incf	i1setLoad_StatusOff@command,f
 20593  058A  3001               	movlw	1
 20594  058B  319B  2336  3184   	fcall	i1_setLoad_StatusOff
 20595  058E                     i1l8044:	
 20596  058E  0020               	movlb	0	; select bank0
 20597  058F  1F8C               	btfss	12,7	;volatile
 20598  0590  2DC4               	goto	i1l8054
 20599  0591  3001               	movlw	1
 20600  0592  00F3               	movwf	??_TMR0_ISR
 20601  0593  0879               	movf	_DimmerLights11,w
 20602  0594  3E08               	addlw	8
 20603  0595  0086               	movwf	6
 20604  0596  3001               	movlw	1	; select bank2/3
 20605  0597  0087               	movwf	7
 20606  0598  0873               	movf	??_TMR0_ISR,w
 20607  0599  0781               	addwf	1,f
 20608  059A  0879               	movf	_DimmerLights11,w
 20609  059B  3E04               	addlw	4
 20610  059C  0086               	movwf	6
 20611  059D  3001               	movlw	1	; select bank2/3
 20612  059E  0087               	movwf	7
 20613  059F  0801               	movf	1,w
 20614  05A0  00F3               	movwf	??_TMR0_ISR
 20615  05A1  01F4               	clrf	??_TMR0_ISR+1
 20616  05A2  09F3               	comf	??_TMR0_ISR,f
 20617  05A3  09F4               	comf	??_TMR0_ISR+1,f
 20618  05A4  0AF3               	incf	??_TMR0_ISR,f
 20619  05A5  1903               	skipnz
 20620  05A6  0AF4               	incf	??_TMR0_ISR+1,f
 20621  05A7  0873               	movf	??_TMR0_ISR,w
 20622  05A8  3E78               	addlw	120
 20623  05A9  00F5               	movwf	??_TMR0_ISR+2
 20624  05AA  3000               	movlw	0
 20625  05AB  3D74               	addwfc	??_TMR0_ISR+1,w
 20626  05AC  00F6               	movwf	??_TMR0_ISR+3
 20627  05AD  0879               	movf	_DimmerLights11,w
 20628  05AE  3E08               	addlw	8
 20629  05AF  0086               	movwf	6
 20630  05B0  3001               	movlw	1	; select bank2/3
 20631  05B1  0087               	movwf	7
 20632  05B2  0876               	movf	??_TMR0_ISR+3,w
 20633  05B3  3A80               	xorlw	128
 20634  05B4  3C80               	sublw	128
 20635  05B5  1D03               	skipz
 20636  05B6  2DB9               	goto	u729_25
 20637  05B7  0875               	movf	??_TMR0_ISR+2,w
 20638  05B8  0201               	subwf	1,w
 20639  05B9                     u729_25:	
 20640  05B9  1C03               	skipc
 20641  05BA  2DC4               	goto	i1l8054
 20642  05BB  0879               	movf	_DimmerLights11,w
 20643  05BC  3E08               	addlw	8
 20644  05BD  0086               	movwf	6
 20645  05BE  3001               	movlw	1	; select bank2/3
 20646  05BF  0087               	movwf	7
 20647  05C0  0181               	clrf	1
 20648  05C1  0020               	movlb	0	; select bank0
 20649  05C2  138C               	bcf	12,7	;volatile
 20650  05C3  120D               	bcf	13,4	;volatile
 20651  05C4                     i1l8054:	
 20652                           
 20653                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 20654  05C4  0021               	movlb	1	; select bank1
 20655  05C5  0A6B               	incf	_Timer0^(0+128),w
 20656  05C6  0086               	movwf	6
 20657  05C7  0187               	clrf	7
 20658  05C8  3001               	movlw	1
 20659  05C9  0781               	addwf	1,f
 20660  05CA  3141               	addfsr 1,1
 20661  05CB  1803               	skipnc
 20662  05CC  0A81               	incf	1,f
 20663                           
 20664                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 20665  05CD  0A6B               	incf	_Timer0^(0+128),w
 20666  05CE  0086               	movwf	6
 20667  05CF  0187               	clrf	7
 20668  05D0  3F40               	moviw [0]fsr1
 20669  05D1  3AC8               	xorlw	200
 20670  05D2  1D03               	skipz
 20671  05D3  2DD6               	goto	u730_25
 20672  05D4  3F41               	moviw [1]fsr1
 20673  05D5  3A00               	xorlw	0
 20674  05D6                     u730_25:	
 20675  05D6  1D03               	skipz
 20676  05D7  2DE3               	goto	i1l1572
 20677                           
 20678                           ;MCU_16f1518_B1.c: 115: {
 20679                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 20680  05D8  0A6B               	incf	_Timer0^(0+128),w
 20681  05D9  0086               	movwf	6
 20682  05DA  0187               	clrf	7
 20683  05DB  3000               	movlw	0
 20684  05DC  3FC0               	movwi [0]fsr1
 20685  05DD  3FC1               	movwi [1]fsr1
 20686                           
 20687                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 20688  05DE  087D               	movf	_TMain,w
 20689  05DF  0086               	movwf	6
 20690  05E0  3001               	movlw	1	; select bank2/3
 20691  05E1  0087               	movwf	7
 20692  05E2  1481               	bsf	1,1
 20693  05E3                     i1l1572:	
 20694                           
 20695                           ;MCU_16f1518_B1.c: 118: }
 20696                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 20697  05E3  0878               	movf	_Buz,w
 20698  05E4  0086               	movwf	6
 20699  05E5  3001               	movlw	1	; select bank2/3
 20700  05E6  0087               	movwf	7
 20701  05E7  1C81               	btfss	1,1
 20702  05E8  0008               	return
 20703                           
 20704                           ;MCU_16f1518_B1.c: 122: {
 20705                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 20706  05E9  0A78               	incf	_Buz,w
 20707  05EA  0086               	movwf	6
 20708  05EB  3001               	movlw	1	; select bank2/3
 20709  05EC  0087               	movwf	7
 20710  05ED  3001               	movlw	1
 20711  05EE  0781               	addwf	1,f
 20712  05EF  3141               	addfsr 1,1
 20713  05F0  1803               	skipnc
 20714  05F1  0A81               	incf	1,f
 20715  05F2  0008               	return
 20716  05F3                     __end_of_TMR0_ISR:	
 20717                           
 20718                           	psect	text137
 20719  1B36                     __ptext137:	
 20720 ;; *************** function i1_setLoad_StatusOff *****************
 20721 ;; Defined at:
 20722 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 20723 ;; Parameters:    Size  Location     Type
 20724 ;;  lights          1    wreg     unsigned char 
 20725 ;;  command         1    0[COMMON] unsigned char 
 20726 ;; Auto vars:     Size  Location     Type
 20727 ;;  lights          1    1[COMMON] unsigned char 
 20728 ;; Return value:  Size  Location     Type
 20729 ;;		None               void
 20730 ;; Registers used:
 20731 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20732 ;; Tracked objects:
 20733 ;;		On entry : 0/0
 20734 ;;		On exit  : 0/0
 20735 ;;		Unchanged: 0/0
 20736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20741 ;;Total ram usage:        2 bytes
 20742 ;; Hardware stack levels used:    1
 20743 ;; This function calls:
 20744 ;;		Nothing
 20745 ;; This function is called by:
 20746 ;;		_TMR0_ISR
 20747 ;; This function uses a non-reentrant model
 20748 ;;
 20749                           
 20750                           
 20751                           ;psect for function i1_setLoad_StatusOff
 20752  1B36                     i1_setLoad_StatusOff:	
 20753                           
 20754                           ;incstack = 0
 20755                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20756                           ;i1setLoad_StatusOff@lights stored from wreg
 20757  1B36  00F2               	movwf	i1setLoad_StatusOff@lights
 20758                           
 20759                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 20760  1B37  0020               	movlb	0	; select bank0
 20761  1B38  086E               	movf	_Load,w
 20762  1B39  3E46               	addlw	70
 20763  1B3A  0086               	movwf	6
 20764  1B3B  3002               	movlw	2	; select bank4/5
 20765  1B3C  0087               	movwf	7
 20766  1B3D  0871               	movf	i1setLoad_StatusOff@command,w
 20767  1B3E  1081               	bcf	1,1
 20768  1B3F  1D03               	skipz
 20769  1B40  1481               	bsf	1,1
 20770                           
 20771                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 20772  1B41  086E               	movf	_Load,w
 20773  1B42  3E42               	addlw	66
 20774  1B43  0086               	movwf	6
 20775  1B44  3002               	movlw	2	; select bank4/5
 20776  1B45  0087               	movwf	7
 20777  1B46  3002               	movlw	2
 20778  1B47  0281               	subwf	1,f
 20779                           
 20780                           ;OverLoad_B1.c: 288: if(lights == 1)
 20781  1B48  0872               	movf	i1setLoad_StatusOff@lights,w
 20782  1B49  3A01               	xorlw	1
 20783  1B4A  1D03               	skipz
 20784  1B4B  2B52               	goto	i1l7530
 20785                           
 20786                           ;OverLoad_B1.c: 289: {
 20787                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 20788  1B4C  086E               	movf	_Load,w
 20789  1B4D  3E43               	addlw	67
 20790  1B4E  0086               	movwf	6
 20791  1B4F  3002               	movlw	2	; select bank4/5
 20792  1B50  0087               	movwf	7
 20793  1B51  0181               	clrf	1
 20794  1B52                     i1l7530:	
 20795                           
 20796                           ;OverLoad_B1.c: 291: }
 20797                           ;OverLoad_B1.c: 292: if(lights == 2)
 20798  1B52  0872               	movf	i1setLoad_StatusOff@lights,w
 20799  1B53  3A02               	xorlw	2
 20800  1B54  1D03               	skipz
 20801  1B55  2B5C               	goto	i1l7534
 20802                           
 20803                           ;OverLoad_B1.c: 293: {
 20804                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 20805  1B56  086E               	movf	_Load,w
 20806  1B57  3E44               	addlw	68
 20807  1B58  0086               	movwf	6
 20808  1B59  3002               	movlw	2	; select bank4/5
 20809  1B5A  0087               	movwf	7
 20810  1B5B  0181               	clrf	1
 20811  1B5C                     i1l7534:	
 20812                           
 20813                           ;OverLoad_B1.c: 295: }
 20814                           ;OverLoad_B1.c: 296: if(lights == 3)
 20815  1B5C  0872               	movf	i1setLoad_StatusOff@lights,w
 20816  1B5D  3A03               	xorlw	3
 20817  1B5E  1D03               	skipz
 20818  1B5F  0008               	return
 20819                           
 20820                           ;OverLoad_B1.c: 297: {
 20821                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 20822  1B60  086E               	movf	_Load,w
 20823  1B61  3E45               	addlw	69
 20824  1B62  0086               	movwf	6
 20825  1B63  3002               	movlw	2	; select bank4/5
 20826  1B64  0087               	movwf	7
 20827  1B65  0181               	clrf	1
 20828  1B66  0008               	return
 20829  1B67                     __end_ofi1_setLoad_StatusOff:	
 20830                           
 20831                           	psect	text138
 20832  19C0                     __ptext138:	
 20833 ;; *************** function _IOC_ISR *****************
 20834 ;; Defined at:
 20835 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20836 ;; Parameters:    Size  Location     Type
 20837 ;;		None
 20838 ;; Auto vars:     Size  Location     Type
 20839 ;;		None
 20840 ;; Return value:  Size  Location     Type
 20841 ;;		None               void
 20842 ;; Registers used:
 20843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20844 ;; Tracked objects:
 20845 ;;		On entry : 0/0
 20846 ;;		On exit  : 0/0
 20847 ;;		Unchanged: 0/0
 20848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20852 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20853 ;;Total ram usage:        1 bytes
 20854 ;; Hardware stack levels used:    1
 20855 ;; Hardware stack levels required when called:    1
 20856 ;; This function calls:
 20857 ;;		_setDimmerReClock
 20858 ;; This function is called by:
 20859 ;;		_ISR
 20860 ;; This function uses a non-reentrant model
 20861 ;;
 20862                           
 20863                           
 20864                           ;psect for function _IOC_ISR
 20865  19C0                     _IOC_ISR:	
 20866                           
 20867                           ;MCU_16f1518_B1.c: 269: if(IOCIE && IOCBF2)
 20868                           
 20869                           ;incstack = 0
 20870                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20871  19C0  1D8B               	btfss	11,3	;volatile
 20872  19C1  0008               	return
 20873  19C2  0027               	movlb	7	; select bank7
 20874  19C3  1D16               	btfss	22,2	;volatile
 20875  19C4  0008               	return
 20876                           
 20877                           ;MCU_16f1518_B1.c: 270: {
 20878                           ;MCU_16f1518_B1.c: 271: IOCBF2=0;
 20879  19C5  1116               	bcf	22,2	;volatile
 20880                           
 20881                           ;MCU_16f1518_B1.c: 272: IOCIF=0;
 20882  19C6  100B               	bcf	11,0	;volatile
 20883                           
 20884                           ;MCU_16f1518_B1.c: 273: if(TMain->PowerON)
 20885  19C7  087D               	movf	_TMain,w
 20886  19C8  0086               	movwf	6
 20887  19C9  3001               	movlw	1	; select bank2/3
 20888  19CA  0087               	movwf	7
 20889  19CB  1C01               	btfss	1,0
 20890  19CC  0008               	return
 20891                           
 20892                           ;MCU_16f1518_B1.c: 274: {
 20893                           ;MCU_16f1518_B1.c: 278: setDimmerReClock();
 20894  19CD  31A6  26A0  3199   	fcall	_setDimmerReClock
 20895                           
 20896                           ;MCU_16f1518_B1.c: 279: if(RB2)
 20897  19D0  0020               	movlb	0	; select bank0
 20898  19D1  1D0D               	btfss	13,2	;volatile
 20899  19D2  29DA               	goto	i1l7960
 20900                           
 20901                           ;MCU_16f1518_B1.c: 280: {
 20902                           ;MCU_16f1518_B1.c: 281: Dimmer->Correction=0;
 20903  19D3  0021               	movlb	1	; select bank1
 20904  19D4  0839               	movf	_Dimmer^(0+128),w
 20905  19D5  3E02               	addlw	2
 20906  19D6  0086               	movwf	6
 20907  19D7  0187               	clrf	7
 20908  19D8  0181               	clrf	1
 20909                           
 20910                           ;MCU_16f1518_B1.c: 282: }
 20911  19D9  0008               	return
 20912  19DA                     i1l7960:	
 20913                           
 20914                           ;MCU_16f1518_B1.c: 283: else
 20915                           ;MCU_16f1518_B1.c: 284: {
 20916                           ;MCU_16f1518_B1.c: 285: Dimmer->Correction=8;
 20917  19DA  3008               	movlw	8
 20918  19DB  00F1               	movwf	??_IOC_ISR
 20919  19DC  0021               	movlb	1	; select bank1
 20920  19DD  0839               	movf	_Dimmer^(0+128),w
 20921  19DE  3E02               	addlw	2
 20922  19DF  0086               	movwf	6
 20923  19E0  0187               	clrf	7
 20924  19E1  0871               	movf	??_IOC_ISR,w
 20925  19E2  0081               	movwf	1
 20926  19E3  0008               	return
 20927  19E4                     __end_of_IOC_ISR:	
 20928                           
 20929                           	psect	text139
 20930  26A0                     __ptext139:	
 20931 ;; *************** function _setDimmerReClock *****************
 20932 ;; Defined at:
 20933 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20934 ;; Parameters:    Size  Location     Type
 20935 ;;		None
 20936 ;; Auto vars:     Size  Location     Type
 20937 ;;		None
 20938 ;; Return value:  Size  Location     Type
 20939 ;;		None               void
 20940 ;; Registers used:
 20941 ;;		wreg, fsr1l, fsr1h
 20942 ;; Tracked objects:
 20943 ;;		On entry : 0/0
 20944 ;;		On exit  : 0/0
 20945 ;;		Unchanged: 0/0
 20946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20951 ;;Total ram usage:        0 bytes
 20952 ;; Hardware stack levels used:    1
 20953 ;; This function calls:
 20954 ;;		Nothing
 20955 ;; This function is called by:
 20956 ;;		_IOC_ISR
 20957 ;; This function uses a non-reentrant model
 20958 ;;
 20959                           
 20960                           
 20961                           ;psect for function _setDimmerReClock
 20962  26A0                     _setDimmerReClock:	
 20963                           
 20964                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 20965                           
 20966                           ;incstack = 0
 20967                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20968  26A0  30FF               	movlw	255
 20969  26A1  0020               	movlb	0	; select bank0
 20970  26A2  0095               	movwf	21	;volatile
 20971                           
 20972                           ;MCU_16f1518_B1.c: 136: if(!DimmerLights11->GO)
 20973  26A3  0879               	movf	_DimmerLights11,w
 20974  26A4  0086               	movwf	6
 20975  26A5  3001               	movlw	1	; select bank2/3
 20976  26A6  0087               	movwf	7
 20977  26A7  1801               	btfsc	1,0
 20978  26A8  0008               	return
 20979                           
 20980                           ;MCU_16f1518_B1.c: 137: {
 20981                           ;MCU_16f1518_B1.c: 138: DimmerLights11->GO=1;
 20982  26A9  0879               	movf	_DimmerLights11,w
 20983  26AA  0086               	movwf	6
 20984  26AB  3001               	movlw	1	; select bank2/3
 20985  26AC  0087               	movwf	7
 20986  26AD  1401               	bsf	1,0
 20987  26AE  0008               	return
 20988  26AF                     __end_of_setDimmerReClock:	
 20989                           
 20990                           	psect	text140
 20991  25E3                     __ptext140:	
 20992 ;; *************** function _INT_ISR *****************
 20993 ;; Defined at:
 20994 ;;		line 225 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 20995 ;; Parameters:    Size  Location     Type
 20996 ;;		None
 20997 ;; Auto vars:     Size  Location     Type
 20998 ;;		None
 20999 ;; Return value:  Size  Location     Type
 21000 ;;		None               void
 21001 ;; Registers used:
 21002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21003 ;; Tracked objects:
 21004 ;;		On entry : 0/0
 21005 ;;		On exit  : 0/0
 21006 ;;		Unchanged: 0/0
 21007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21012 ;;Total ram usage:        0 bytes
 21013 ;; Hardware stack levels used:    1
 21014 ;; Hardware stack levels required when called:    2
 21015 ;; This function calls:
 21016 ;;		_setRF_ReceiveGO
 21017 ;; This function is called by:
 21018 ;;		_ISR
 21019 ;; This function uses a non-reentrant model
 21020 ;;
 21021                           
 21022                           
 21023                           ;psect for function _INT_ISR
 21024  25E3                     _INT_ISR:	
 21025                           
 21026                           ;MCU_16f1518_B1.c: 227: if(INTE && INTF)
 21027                           
 21028                           ;incstack = 0
 21029                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21030  25E3  1E0B               	btfss	11,4	;volatile
 21031  25E4  0008               	return
 21032  25E5  1C8B               	btfss	11,1	;volatile
 21033  25E6  0008               	return
 21034                           
 21035                           ;MCU_16f1518_B1.c: 228: {
 21036                           ;MCU_16f1518_B1.c: 229: INTF=0;
 21037  25E7  108B               	bcf	11,1	;volatile
 21038                           
 21039                           ;MCU_16f1518_B1.c: 230: INTE=0;
 21040  25E8  120B               	bcf	11,4	;volatile
 21041                           
 21042                           ;MCU_16f1518_B1.c: 231: setRF_ReceiveGO(1,1);
 21043  25E9  01F3               	clrf	setRF_ReceiveGO@command
 21044  25EA  0AF3               	incf	setRF_ReceiveGO@command,f
 21045  25EB  3001               	movlw	1
 21046  25EC  31A5  25D7         	fcall	_setRF_ReceiveGO
 21047  25EE  0008               	return
 21048  25EF                     __end_of_INT_ISR:	
 21049                           
 21050                           	psect	text141
 21051  25D7                     __ptext141:	
 21052 ;; *************** function _setRF_ReceiveGO *****************
 21053 ;; Defined at:
 21054 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21055 ;; Parameters:    Size  Location     Type
 21056 ;;  rf              1    wreg     unsigned char 
 21057 ;;  command         1    2[COMMON] unsigned char 
 21058 ;; Auto vars:     Size  Location     Type
 21059 ;;  rf              1    3[COMMON] unsigned char 
 21060 ;; Return value:  Size  Location     Type
 21061 ;;		None               void
 21062 ;; Registers used:
 21063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21064 ;; Tracked objects:
 21065 ;;		On entry : 0/0
 21066 ;;		On exit  : 0/0
 21067 ;;		Unchanged: 0/0
 21068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21069 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21073 ;;Total ram usage:        2 bytes
 21074 ;; Hardware stack levels used:    1
 21075 ;; Hardware stack levels required when called:    1
 21076 ;; This function calls:
 21077 ;;		i1_RfPointSelect
 21078 ;; This function is called by:
 21079 ;;		_INT_ISR
 21080 ;; This function uses a non-reentrant model
 21081 ;;
 21082                           
 21083                           
 21084                           ;psect for function _setRF_ReceiveGO
 21085  25D7                     _setRF_ReceiveGO:	
 21086                           
 21087                           ;incstack = 0
 21088                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21089                           ;setRF_ReceiveGO@rf stored from wreg
 21090  25D7  00F4               	movwf	setRF_ReceiveGO@rf
 21091                           
 21092                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 21093  25D8  0874               	movf	setRF_ReceiveGO@rf,w
 21094  25D9  31A5  2560         	fcall	i1_RfPointSelect
 21095                           
 21096                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 21097  25DB  087B               	movf	_RF,w
 21098  25DC  0086               	movwf	6
 21099  25DD  0187               	clrf	7
 21100  25DE  0873               	movf	setRF_ReceiveGO@command,w
 21101  25DF  1081               	bcf	1,1
 21102  25E0  1D03               	skipz
 21103  25E1  1481               	bsf	1,1
 21104  25E2  0008               	return
 21105  25E3                     __end_of_setRF_ReceiveGO:	
 21106                           
 21107                           	psect	text142
 21108  2560                     __ptext142:	
 21109 ;; *************** function i1_RfPointSelect *****************
 21110 ;; Defined at:
 21111 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 21112 ;; Parameters:    Size  Location     Type
 21113 ;;  rf              1    wreg     unsigned char 
 21114 ;; Auto vars:     Size  Location     Type
 21115 ;;  rf              1    1[COMMON] unsigned char 
 21116 ;; Return value:  Size  Location     Type
 21117 ;;		None               void
 21118 ;; Registers used:
 21119 ;;		wreg
 21120 ;; Tracked objects:
 21121 ;;		On entry : 0/0
 21122 ;;		On exit  : 0/0
 21123 ;;		Unchanged: 0/0
 21124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21129 ;;Total ram usage:        2 bytes
 21130 ;; Hardware stack levels used:    1
 21131 ;; This function calls:
 21132 ;;		Nothing
 21133 ;; This function is called by:
 21134 ;;		_setRF_ReceiveGO
 21135 ;; This function uses a non-reentrant model
 21136 ;;
 21137                           
 21138                           
 21139                           ;psect for function i1_RfPointSelect
 21140  2560                     i1_RfPointSelect:	
 21141                           
 21142                           ;incstack = 0
 21143                           ; Regs used in i1_RfPointSelect: [wreg]
 21144                           ;i1RfPointSelect@rf stored from wreg
 21145  2560  00F2               	movwf	i1RfPointSelect@rf
 21146                           
 21147                           ;RF_Control_B1.c: 10: if(rf == 1)
 21148  2561  0872               	movf	i1RfPointSelect@rf,w
 21149  2562  3A01               	xorlw	1
 21150  2563  1D03               	skipz
 21151  2564  0008               	return
 21152                           
 21153                           ;RF_Control_B1.c: 11: {
 21154                           ;RF_Control_B1.c: 12: RF=&RF1;
 21155  2565  30E7               	movlw	_RF1& (0+255)
 21156  2566  00F1               	movwf	??i1_RfPointSelect
 21157  2567  0871               	movf	??i1_RfPointSelect,w
 21158  2568  00FB               	movwf	_RF
 21159  2569  0008               	return
 21160  256A                     __end_ofi1_RfPointSelect:	
 21161  007E                     btemp	set	126	;btemp
 21162  007E                     pic14e$flags	set	126
 21163  007E                     wtemp	set	126
 21164  007E                     wtemp0	set	126
 21165  0080                     wtemp1	set	128
 21166  0082                     wtemp2	set	130
 21167  0084                     wtemp3	set	132
 21168  0086                     wtemp4	set	134
 21169  0088                     wtemp5	set	136
 21170  007F                     wtemp6	set	127
 21171  007E                     ttemp	set	126
 21172  007E                     ttemp0	set	126
 21173  0081                     ttemp1	set	129
 21174  0084                     ttemp2	set	132
 21175  0087                     ttemp3	set	135
 21176  007F                     ttemp4	set	127
 21177  007E                     ltemp	set	126
 21178  007E                     ltemp0	set	126
 21179  0082                     ltemp1	set	130
 21180  0086                     ltemp2	set	134
 21181  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         254
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      76
    BANK2            80      0      64
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK1[2]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK1[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK2[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109503
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21673
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21673
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1115
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2093
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
     _setTxData
       _RfPointSelect
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Sep 15 16:20:42 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007A  
                                     _RD 0CA8                                       _RF 007B  
                __end_of_CC2500_WriteREG 27E7                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 262B  
             _getDimmerLights_StatusFlag 261F                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1163                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1B98                     _setDimmerLights_Main 1517  
                           ___ftadd@sign 0048                                      l303 1224  
                                    l320 1B2A                                      l323 1B30  
                                    l307 1235                                      l353 27C1  
                                    l354 27C3                                      l292 1DD6  
                                    l365 27D6                                      l293 1DDB  
                                    l383 18AB                                      l287 1DAC  
                                    l296 1DDE                                      l377 26E4  
                                    l389 19E9                                      l664 1B04  
                                    l864 1084                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000C  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00C4                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00BB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00E7  
                                    _ISR 0004          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0157                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 27CE  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2574  
                        __end_of_ADC_Set 2545                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 08BC                    _setDimmerLights_ERROR 1F50  
                  _setDimmerLights_AdjRF 199D                    _setDimmerLights_AdjGo 273C  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 270C  
                                   ?_ISR 0071                          _PowerFault_Main 24E2  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 19E4  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2026 1EEC                                     l2310 1CC7  
                                   l2306 0CEA                 ?_DimmerLightsPointSelect 0071  
                                   l1604 2791                                     l3029 18E3  
                                   l1630 1BC2                                     l3219 0E86  
                        __end_of_IOC_Set 2669                                     l3190 11F4  
                                   l2542 1EB5                                     l1815 1F36  
                                   l3196 120B                                     l6012 170A  
                                   l6030 173A                                     l2743 250B  
                                   l6040 175E                                     l6032 1748  
                                   l6112 1965                                     l2569 1D4B  
                                   l6042 1761                                     l6116 1970  
                                   l6046 176F                                     l6038 1755  
                                   l6070 1AE4                                     l6230 1149  
                                   l6224 1136                                     l6082 1AF6  
                                   l6074 1AEA                                     l6234 1155  
                                   l6324 1C08                                     l6228 113C  
                                   l6086 1AFC                                     l6078 1AF0  
                                   l6360 18CD                                     l9000 0F20  
                                   l8210 15E2                                     l5810 11DB  
                                   l7090 1D13                                     l6362 18D3  
                                   l9002 0F29                                     l5820 1201  
                                   l5812 11E0                                     l5804 11CA  
                                   l6620 1DBE                                     l5900 0EAA  
                                   l8206 15C4                                     l8302 11AB  
                                   l8310 11B7                                     l7094 1D1A  
                                   l5910 0EC5                                     l5808 11D1  
                                   l5920 0AA7                                     l8320 1BE4  
                                   l8400 0849                                     l9120 1793  
                                   l9040 0FCE                                     l9024 0F8F  
                                   l5818 11F9                                     l8306 11B1  
                                   l7514 1C57                                     l7506 1C39  
                                   l5850 0E0F                                     l8410 086D  
                                   l9130 17B0                                     l9034 0FBD  
                                   l5940 0AFE                                     l8324 1BEF  
                                   l8260 1B8D                                     l7508 1C45  
                                   l5860 0E25                                     l6476 1D39  
                                   l9116 178C                                     l9036 0FC3  
                                   l5838 1942                                     l5926 0ABD  
                                   l8238 12E1                                     l7518 1C60  
                                   l9062 0C3D                                     l5854 0E16  
                                   l8414 0883                                     l9142 17CB  
                                   l9222 06B4                                     l8272 1173  
                                   l8280 117F                                     l8256 1B83  
                                   l9304 0D69                                     l8440 1068  
                                   l9064 0C46                                     l5880 0E5C  
                                   l5872 0E3F                                     l8520 1478  
                                   l9144 17CF                                     l9208 0670  
                                   l9232 06E7                                     l7562 0A75  
                                   l8186 18DD                                     l8290 118F  
                                   l8362 0926                                     l5890 0E78  
                                   l5882 0E61                                     l5962 0753  
                                   l8530 149D                                     l7556 0A4D  
                                   l7564 0A7B                                     l5948 0B17  
                                   l8276 1179                                     l8620 1BA6  
                                   l8444 107B                                     l9084 0CA5  
                                   l5892 0E82                                     l5884 0E65  
                                   l5980 07A4                                     l8700 102D  
                                   l8286 1189                                     l8294 1195  
                                   l8446 1080                                     l9422 1649  
                                   l5878 0E52                                     l8526 1494  
                                   l9158 17F5                                     l9182 0609  
                                   l7568 0A82                                     l9504 01A9  
                                   l9096 0CDC                                     l9088 0CC2  
                                   l8560 125F                                     l5896 0E98  
                                   l5992 07C0                                     l5984 07AC  
                                   l5968 0769                                     l9360 0973  
                                   l9506 01C1                                     l9098 0CE1  
                                   l9370 09AC                                     l9532 025F  
                                   l8572 1278                                     l5996 07C8  
                                   l9526 0247                                     l9462 007D  
                                   l8558 1247                                     l9198 063E  
                                   l9382 09E3                                     l9366 09A4  
                                   l8584 19FA                                     l9448 1E26  
                                   l9544 028F                                     l9552 02C7  
                                   l8664 1EE3                                     l9640 1384  
                                   l8586 1A05                                     l9570 0344  
                                   l8754 1FED                                     l9394 1334  
                                   l8596 1D76                                     l9484 00F8  
                                   l9644 1399                                     l9582 036D  
                                   l9478 00CA                                     l8880 1556  
                                   l9576 035A                                     l8688 1017  
                                   _CFGS 0CAE                                     l8874 1544  
                                   l9498 018D                                     l8786 14F2  
                                   l8892 1582                                     l8964 13E8  
                                   l8958 13CF                                     l8968 142F  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 25EF  
                                   _LATC 010E                                     u4105 0ADF  
                                   u4025 0E79                                     u4115 0AFF  
                                   u4125 0B0E                                     u4205 07AD  
                                   u4135 0B18                                     u4215 07B3  
                                   u4315 173B                                     u4245 07C9  
                                   u4095 0ACF                                     u4255 07CF  
                                   u4175 0775                                     u4345 1756  
                                   u4185 0785                                     _PEIE 005E  
                                   u4285 1711                                     _INTE 005C  
                                   _INTF 0059                                     u3815 1212  
                                   u3745 11D6                                     u3765 11EF  
                                   u3935 0E40                                     u3785 11FC  
                                   u6435 1C3C                                     u3965 0E53  
                                   u7510 1290                                     u6455 1C46  
                                   u6545 0A0E                                     u6465 1C50  
                                   u7515 128E                                     u6475 1C58  
                                   u3995 0E66                                     u9115 1323  
                                   u7445 18E4                                     u9045 098E  
                                   u9125 134C                                     u7455 18E9  
                                   u9215 1E0D                                     u9145 1C94  
                                   u9165 1619                                     u9085 09CF  
                                   u7750 2555                                     u9335 01D9  
                                   u9175 165E                                     u9285 0144  
                                   u7985 19EF                                     _LWLO 0CAD  
                                   _RFSW 00BC                                     _TMR0 0015  
                        __end_of_INT_Set 2516                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 014B  
                                   _Load 006E                                     _Temp 007C  
                                   _main 135D                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 24E2                      __end_of_DlyOff_Main 16F1  
                        __end_of_RF_Main 2507                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 26A0                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1CA2                      DelayTimejudge@value 0022  
                          _RfPointSelect 25A0               __end_of_setRFSW_AdjControl 1D61  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 00F3  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 264F  
                  ?_setDimmerLights_Main 0071                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 2787                                    ?_main 0071  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 0EDD  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0B39  
                        __end_of___ftmul 07F0                          __end_of___fttol 1778  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1C67                   _setDimmerLights_Switch 26EC  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E9  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0071  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 007D                            setRF_Learn@rf 0023  
                                  _MainT 1600                                    _Load1 0220  
                          __CFG_WRT$HALF 0000                                    _Temp1 0130  
                       __end_of_TMR0_ISR 05F3             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 2676                                    _getAD 2787  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 10AC  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 271C              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 275D                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1286  
            __size_of_Flash_Memory_Write 0031                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 10AC                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 25CC  
                      ??_setPercentValue 0059                             __end_of_main 13C9  
                    ?_setRF_DimmerLights 005D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0952  
                   _setSw_Initialization 272C               __size_of_setLoad_StatusOff 0031  
                                 ??_main 006C                            ___fttol@sign1 0053  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 1437  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 24E5                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 2595                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 272C                     __end_of_getTemp_Safe 253E  
                      i1RfPointSelect@rf 0072                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 1678  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0071  
                      ?_getPowerFault_AD 0071                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1959                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1222                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 26FC                                   i1l1572 05E3  
                                 i1l8002 04D2                                   i1l8010 04F1  
                                 i1l8020 0524                                   i1l8004 04D8  
                                 i1l8030 0553                                   i1l8032 0559  
                                 i1l8016 050D                                   i1l8024 0538  
                                 i1l8008 04EB                                   i1l8044 058E  
                                 i1l8054 05C4                                   i1l7530 1B52  
                                 i1l7534 1B5C                                   i1l7960 19DA  
                                 i1l7984 0488                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 u712_25 046B                                   _OSCCON 0099  
                                 u730_25 05D6                       __size_of_Load_Main 03DF  
                                 u729_25 05B9                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 186E  
                     DelayTime_1us@count 0020                               _VarProduct 01C5  
                  _Dimmer_Initialization 2522           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 2772                                   _Dimmer 00B9  
                                 _DlySw1 00D3              __size_of_setLoad_Exceptions 004A  
             __end_of_Mcu_Initialization 27B5                      __end_of_Buzzer_Main 0A90  
                                 _Memory 00EA                                   _Timer0 00EB  
     __end_of_setDimmerLights_TriggerAdj 0800               _setDimmerLights_TriggerAdj 07F0  
          setDimmerLights_Switch@command 0022                                   ___wmul 18DA  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0071                                ??___lwdiv 0024  
                        i1_RfPointSelect 2560              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 1163  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0071  
                  setDimmerLights@status 0024                                   _setBuz 1589  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 265C  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0071  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 25A0  
                        ?_setLoad_Enable 0071                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                           _setTemp_Enable 25B6  
                        _RfSWPointSelect 2607             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 250B                        ?_Sw_DimmerAdjFunc 0071  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1107         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 2684    __size_of_setPowerFault_Initialization 000E  
           _setPowerFault_Initialization 2676                  __end_of__initialization 004C  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0071  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0071  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0071  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                          __end_of_MainT 1678                               ___fttol@f1 004B  
                         __pcstackCOMMON 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1917                            __end_of_getAD 279D  
                              ?_TMR0_ISR 0071                                ?_TMR0_Set 0071  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 2637                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 005A                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0071                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000C  
                       ?_setDimmerLights 0024                        __end_of_Load_Main 042F  
                       ?_PowerFault_Main 0071                 __end_of_setDimmerReClock 26AF  
                     __size_of_getRxData 0052                      ?_LED_Initialization 0071  
                 __end_of_setTemp_Enable 25C1                        ?_CC2500_WriteByte 0071  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0079                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 24E5                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                              _Buzzer_Main 09E8  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 24EB  
                 ?_Dimmer_Initialization 0071                                  ?_IO_Set 0071  
                             ??_LED_Main 0025                  _DelayOff_Initialization 24F7  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 2530  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 256A                      i1_setLoad_StatusOff 1B36  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 135D                      _CC2500_WriteCommand 26DC  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 0952                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C5                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 253E                _PowerFault_Initialization 24DF  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 12F1  
           __end_of_setRF_Initialization 186E                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1D21  
                __end_of_RfSWPointSelect 2613                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 19C0  
                        ?_setTemp_Enable 0071                                  _IOC_Set 265C  
                   __size_of_setLog_Code 0049                                  _INT_ISR 25E3  
                                _INT_Set 2510                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1DE9                        _Flash_Memory_Read 27E7  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 25C1                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 2503  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_setControl_Lights_Table 14A6                              ?_TouchPower 0071  
                        _Sw_DimmerOnFunc 1FA7                          _setPercentValue 1E2E  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0071                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 25FB                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DC                                  _VarLED2 00E0  
                      __end_of_getRxData 1052               __end_of_setPowerFault_Main 0CF1  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 270C  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 2537                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 26FC                                  ___ftadd 0DE7  
                         ??_setSw_Enable 0022                                  ___ftdiv 0A90  
                        __size_of___wmul 001E                                  ___ftmul 073C  
                                ___fttol 16F1                      __end_of_Switch_Main 250B  
                                ___lwdiv 1C30                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 12F1                                  __ptext2 1C67  
                                __ptext3 0952                                  __ptext4 2787  
                                __ptext5 24E8                                  __ptext6 0EDD  
                                __ptext7 1EBD                                  __ptext8 24E5  
                                __ptext9 25CC                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1E2E                __end_of_Flash_Memory_Read 2800  
                             _setRF_Main 1778                            _DelayOff_Main 24FB  
                      _DimmerLights_Main 2529                        __end_of_setINT_GO 2557  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 258A                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 24EF                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 24F3            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 1959                      _DelayOffPointSelect 25FB  
                                clrloop0 251D           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 2560                     end_of_initialization 004C  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 25AB  
                      _CC2500_InitSetREG 1A57                            _DelayTime_1us 19E4  
                      __end_of_setTxData 0BFE               __end_of_Flash_Memory_Write 1BC9  
                                init_ram 2516                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 2517                               _setSw_Main 05F3  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 18A2  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 274C  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 000A                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1222                            _CC2500_TxData 1DA5  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1AAB  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 003B            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 13C9  
                _DimmerLights_Exceptions 1052                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 2545  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1BC9         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 2530                       _Mcu_Initialization 279D  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4561 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 197B                  __end_of_Sw_DimmerOnFunc 2000  
                __end_of_setPercentValue 1E74                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1A81                      ?_Mcu_Initialization 0071  
       __end_of_setPowerFault_Exceptions 1CE1                     ?_Flash_Memory_Modify 0071  
            __size_of_setRF_DimmerLights 006B                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1D61                     ?_Flash_Memory_Unlock 0071  
              __end_of_CC2500_ReadStatus 18BD                            ?_RF_RxDisable 0071  
             __end_of_setLoad_Exceptions 1F50                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1887                     _setRF_Initialization 1867  
                            _Switch_Main 2507              setDimmerLights_Clear@lights 0023  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0071  
                         ?_CC2500_TxData 0071                  _DimmerLightsPointSelect 258A  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 275D  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0026  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 18F8  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0072                           __end_of_setLED 11C1  
                         __end_of_setBuz 1600                            _setLoad_Count 2772  
                   _CC2500_FrequencyCabr 25EF                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 082C                      __size_of_getPF_Safe 0007  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1BFB                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 18A2                                _Load_Main 0050  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 1917  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 1000  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 26DC                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D8  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 26CD                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 01A0                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 25AB                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00CC                                _Temp_Main 24E8  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 24F3               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1C30                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4215 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 1EBD                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 013E  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002A                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 199D                  __size_of_setRF_RxStatus 000E  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00EA              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0071                               ?_Temp_Main 0071  
                    __size_of_setRF_Main 0088                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
                 _setTemp_Initialization 25CC                         _getPowerFault_AD 1C67  
      __size_of_setPowerFault_Exceptions 003F      __end_of_Flash_Memory_Initialization 0DE7  
            _Flash_Memory_Initialization 0CF1                ?_setPowerFault_Exceptions 0071  
                              __ptext100 1678                                __ptext101 0B39  
                              __ptext110 11C1                                __ptext102 25A0  
                              __ptext111 26AF                                __ptext103 26BE  
                              __ptext120 25FB                                __ptext112 2607  
                              __ptext104 2595                                __ptext121 275D  
                              __ptext113 26FC                                __ptext105 1286  
                              __ptext130 24EB                                __ptext122 24F3  
                              __ptext114 26EC                                __ptext106 1E2E  
                              __ptext131 26DC                                __ptext123 1B06  
                              __ptext115 258A                                __ptext107 16F1  
                              __ptext140 25E3                                __ptext132 27B5  
                              __ptext124 1A57                                __ptext116 1589  
                              __ptext108 0A90                                __ptext141 25D7  
                              __ptext133 09E8                                __ptext125 18F8  
                              __ptext117 18DA                                __ptext109 1937  
                               ?___ftadd 003E                                __ptext142 2560  
                              __ptext134 2574                                __ptext126 27CE  
                              __ptext118 24F7                                __ptext127 25EF  
                              __ptext119 257F                                __ptext136 042F  
                              __ptext128 19E4                                __ptext137 1B36  
                              __ptext129 24EF                                __ptext138 19C0  
                              __ptext139 26A0                                _getRxData 1000  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 08BC                          _setRF_ReceiveGO 25D7  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 257F  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 2510  
                     _setPowerFault_Main 0BFE       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 0149  
          __end_of_setDimmerLights_ERROR 1FA7             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 19C0            __end_of_setDimmerLights_AdjGo 274C  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 271C                           __size_of_MainT 0078  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                    ?_setPowerFault_Main 0071                           __size_of_getAD 0016  
                           _setRF_Enable 1A81                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 2595  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 254E  
                    __end_of_setLED_Main 1D21                 __end_of_setLoad_StatusOn 1BFB  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 24E8  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 2643                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 251C  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0B39  
    __end_of_DimmerLights_Initialization 261F              _DimmerLights_Initialization 2613  
                     _CC2500_ClearRXFIFO 24EB                       _CC2500_ClearTXFIFO 24EF  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 26A0  
                   ??_setPowerFault_Main 002D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0073  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1B98  
                             ?_getRxData 0071                                 _TMR0_ISR 042F  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1B67  
                      setRF_ReceiveGO@rf 0074                                 _TMR0_Set 2669  
                       _Sw_DimmerAdjFunc 1A0A                      ?_CC2500_ClearRXFIFO 0071  
                    ?_CC2500_ClearTXFIFO 0071                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1A57                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 26EC                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 14A6  
                  __size_of_setTemp_Main 0123             __end_of_MainT_Initialization 2574  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B8                             setSw_Main@sw 0068  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 2537  
                       __size_of_IOC_ISR 0024                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 2637                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1EBD  
                  _DlyOff_Initialization 257F                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0071                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 09E8                    _Switch_Initialization 2557  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 26AF                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 135D                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 27B5  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 25E3  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 0063                      _Load_Initialization 264F  
                              setLED@led 0023                                 _RxStatus 0383  
   __end_of_setDimmerLights_TriggerERROR 082C    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 0801                                 _TxStatus 0386  
                           _setTemp_Main 0EDD                       _setLoad_Exceptions 1F06  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 26CD  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1937                         ??_LedPointSelect 0020  
                               ___ftpack 11C1                             _setSw_Status 26BE  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1CE1  
                    ?_setLoad_Exceptions 0071                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 12F1                 ?_DelayOff_Initialization 0071  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0071                          ___lwdiv@counter 0027  
                               __ptext10 2507                                 __ptext11 05F3  
                               __ptext20 250B                                 __ptext12 2692  
                               __ptext21 2503                                 __ptext13 1FA7  
                               __ptext30 1BFB                                 __ptext22 1778  
                               __ptext14 14A6                                 __ptext31 199D  
                               __ptext23 1000                                 __ptext15 1A0A  
                               __ptext40 18BD                                 __ptext32 10AC  
                               __ptext24 1E74                                 __ptext16 07F0  
                               __ptext41 24FF                                 __ptext33 073C  
                               __ptext25 1437                                 __ptext17 273C  
                               __ptext50 2669                                 __ptext42 1867  
                               __ptext34 0DE7                                 __ptext26 082C  
                               __ptext18 2557                                 __ptext51 186E  
                               __ptext43 24E2                                 __ptext35 1A30  
                               __ptext27 1107                                 __ptext19 272C  
                               __ptext60 1F06                                 __ptext52 265C  
                               __ptext44 0BFE                                 __ptext36 1DA5  
                               __ptext28 1AD8                                 __ptext61 26CD  
                               __ptext53 2510                                 __ptext45 1CA2  
                               __ptext37 1222                                 __ptext29 1D21  
                               __ptext70 1C30                                 __ptext62 1A81  
                               __ptext54 253E                                 __ptext46 25C1  
                               __ptext38 2684                                 __ptext71 264F  
                               __ptext63 254E                                 __ptext55 256A  
                               __ptext47 24DF                                 __ptext39 18A2  
                               __ptext80 0CF1                                 __ptext72 197B  
                               __ptext64 1052                                 __ptext56 1600  
                               __ptext48 2676                                 __ptext81 1B98  
                               __ptext73 2643                                 __ptext65 0801  
                               __ptext57 25B6                                 __ptext49 279D  
                               __ptext90 2772                                 __ptext82 2545  
                               __ptext74 1CE1                                 __ptext66 1F50  
                               __ptext58 271C                                 __ptext91 1163  
                               __ptext83 27E7                                 __ptext75 2637  
                               __ptext67 270C                                 __ptext59 0050  
                               __ptext92 1959                                 __ptext84 2529  
                               __ptext76 274C                                 __ptext68 2537  
                               __ptext93 1887                                 __ptext85 1517  
                               __ptext77 1DE9                                 __ptext69 2530  
                               __ptext94 25AB                                 __ptext86 1D61  
                               __ptext78 13C9                                 __ptext95 261F  
                               __ptext87 1B67                                 __ptext79 262B  
                               __ptext96 2613                                 __ptext88 08BC  
                               __ptext97 1AAB                                 __ptext89 1BC9  
                               __ptext98 2522                                 __ptext99 24FB  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 000C           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 26BE            __end_of_Dimmer_Initialization 2529  
           __end_of_setDimmerLights_Main 1589              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 006C                              _setRF_Learn 2692  
               __end_of_CC2500_SIDLEMode 24F7                           _setRF_RxStatus 2684  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 2607  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1887  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 18BD  
                     _CC2500_InitPATable 18F8      __size_of_getDimmerLights_StatusFlag 000C  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 1800  
            __size_of_Mcu_Initialization 0018                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0071  
       setDimmerLights_TriggerAdj@lights 0023            ?_setDimmerLights_TriggerERROR 0022  
                    ?_CC2500_InitPATable 0071                          _CC2500_PowerRST 1B06  
                     __end_of_setLoad_GO 25B6              __end_of_Flash_Memory_Modify 1437  
                      ??_getPercentValue 0059                              _setLog_Code 1E74  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 254E  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 27CE  
                     __end_of_setSw_Main 073C                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_GO 0384  
                          _Transceive_OK 0385                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0071                  ?_setOverTemp_Exceptions 0071  
                         _DelayTimejudge 1AD8                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1CA2  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 2692                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1AD8  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1AAB  
            __end_of_setDimmerLights_Adj 1DA5                  ?_setTemp_Initialization 0071  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0073  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 256A  
                  __size_of_RF_RxDisable 0027                        _RF_Initialization 24FF  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0071                     _Flash_Memory_Erasing 262B  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 24FB                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 24FF                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1107  
       __size_of_setControl_Lights_Table 006F                        _setLoad_StatusOff 1B67  
                 __end_of_DelayTimejudge 1B06           __end_of_setOverTemp_Exceptions 1F06  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F6  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1A0A                 __end_of_Sw_DimmerAdjFunc 1A30  
                __end_of_CC2500_ReadByte 18DA             __end_of_setSw_Initialization 273C  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1A30               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 2643         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 25D7  
               __size_of_Sw_DimmerOnFunc 0059                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 2503  
               __end_of_Sw_DimmerOffFunc 1517                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1286                    __end_of_CC2500_TxData 1DE9  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 197B  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1B36  
